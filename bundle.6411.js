(self["webpackChunkace_linters_root"] = self["webpackChunkace_linters_root"] || []).push([[6411],{

/***/ 46411:
/***/ (function(module) {

function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
(function webpackUniversalModuleDefinition(root, factory) {
    if (true) module.exports = factory();
    else { var i, a; }
})(this, ()=>{
    return /******/ (()=>{
        /******/ var __webpack_modules__ = {
            /***/ 6093: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_810__)=>{
                "use strict";
                /* provided dependency */ var process = __nested_webpack_require_810__(9907);
                /* provided dependency */ var console = __nested_webpack_require_810__(4364);
                // Currently in sync with Node.js lib/assert.js
                // https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
                // Originally from narwhal.js (http://narwhaljs.org)
                // Copyright (c) 2009 Thomas Robinson <280north.com>
                //
                // Permission is hereby granted, free of charge, to any person obtaining a copy
                // of this software and associated documentation files (the 'Software'), to
                // deal in the Software without restriction, including without limitation the
                // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
                // sell copies of the Software, and to permit persons to whom the Software is
                // furnished to do so, subject to the following conditions:
                //
                // The above copyright notice and this permission notice shall be included in
                // all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
                // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
                // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }
                var _require = __nested_webpack_require_810__(1342), _require$codes = _require.codes, ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE, ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
                var AssertionError = __nested_webpack_require_810__(9801);
                var _require2 = __nested_webpack_require_810__(9208), inspect = _require2.inspect;
                var _require$types = __nested_webpack_require_810__(9208).types, isPromise = _require$types.isPromise, isRegExp = _require$types.isRegExp;
                var objectAssign = Object.assign ? Object.assign : __nested_webpack_require_810__(3046).assign;
                var objectIs = Object.is ? Object.is : __nested_webpack_require_810__(5968);
                var errorCache = new Map();
                var isDeepEqual;
                var isDeepStrictEqual;
                var parseExpressionAt;
                var findNodeAround;
                var decoder;
                function lazyLoadComparison() {
                    var comparison = __nested_webpack_require_810__(5656);
                    isDeepEqual = comparison.isDeepEqual;
                    isDeepStrictEqual = comparison.isDeepStrictEqual;
                } // Escape control characters but not \n and \t to keep the line breaks and
                // indentation intact.
                // eslint-disable-next-line no-control-regex
                var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
                var meta = /* unused pure expression or super */ null && 0;
                var escapeFn = function escapeFn(str) {
                    return meta[str.charCodeAt(0)];
                };
                var warned = false; // The assert module provides functions that throw
                // AssertionError's when particular conditions are not met. The
                // assert module must conform to the following interface.
                var assert = module1.exports = ok;
                var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
                // when a corresponding condition is not met, with a message that
                // may be undefined if not provided. All assertion methods provide
                // both the actual and expected values to the assertion error for
                // display purposes.
                function innerFail(obj) {
                    if (obj.message instanceof Error) throw obj.message;
                    throw new AssertionError(obj);
                }
                function fail(actual, expected, message, operator, stackStartFn) {
                    var argsLen = arguments.length;
                    var internalMessage;
                    if (argsLen === 0) {
                        internalMessage = 'Failed';
                    } else if (argsLen === 1) {
                        message = actual;
                        actual = undefined;
                    } else {
                        if (warned === false) {
                            warned = true;
                            var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
                            warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
                        }
                        if (argsLen === 2) operator = '!=';
                    }
                    if (message instanceof Error) throw message;
                    var errArgs = {
                        actual: actual,
                        expected: expected,
                        operator: operator === undefined ? 'fail' : operator,
                        stackStartFn: stackStartFn || fail
                    };
                    if (message !== undefined) {
                        errArgs.message = message;
                    }
                    var err = new AssertionError(errArgs);
                    if (internalMessage) {
                        err.message = internalMessage;
                        err.generatedMessage = true;
                    }
                    throw err;
                }
                assert.fail = fail; // The AssertionError is defined in internal/error.
                assert.AssertionError = AssertionError;
                function innerOk(fn, argLen, value, message) {
                    if (!value) {
                        var generatedMessage = false;
                        if (argLen === 0) {
                            generatedMessage = true;
                            message = 'No value argument passed to `assert.ok()`';
                        } else if (message instanceof Error) {
                            throw message;
                        }
                        var err = new AssertionError({
                            actual: value,
                            expected: true,
                            message: message,
                            operator: '==',
                            stackStartFn: fn
                        });
                        err.generatedMessage = generatedMessage;
                        throw err;
                    }
                } // Pure assertion tests whether a value is truthy, as determined
                // by !!value.
                function ok() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    innerOk.apply(void 0, [
                        ok,
                        args.length
                    ].concat(args));
                }
                assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.
                /* eslint-disable no-restricted-properties */ assert.equal = function equal(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    } // eslint-disable-next-line eqeqeq
                    if (actual != expected) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: '==',
                            stackStartFn: equal
                        });
                    }
                }; // The non-equality assertion tests for whether two objects are not
                // equal with !=.
                assert.notEqual = function notEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    } // eslint-disable-next-line eqeqeq
                    if (actual == expected) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: '!=',
                            stackStartFn: notEqual
                        });
                    }
                }; // The equivalence assertion tests a deep equality relation.
                assert.deepEqual = function deepEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    if (!isDeepEqual(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'deepEqual',
                            stackStartFn: deepEqual
                        });
                    }
                }; // The non-equivalence assertion tests for any deep inequality.
                assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    if (isDeepEqual(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'notDeepEqual',
                            stackStartFn: notDeepEqual
                        });
                    }
                };
                /* eslint-enable */ assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    if (!isDeepStrictEqual(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'deepStrictEqual',
                            stackStartFn: deepStrictEqual
                        });
                    }
                };
                assert.notDeepStrictEqual = notDeepStrictEqual;
                function notDeepStrictEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    if (isDeepStrictEqual(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'notDeepStrictEqual',
                            stackStartFn: notDeepStrictEqual
                        });
                    }
                }
                assert.strictEqual = function strictEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (!objectIs(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'strictEqual',
                            stackStartFn: strictEqual
                        });
                    }
                };
                assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (objectIs(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'notStrictEqual',
                            stackStartFn: notStrictEqual
                        });
                    }
                };
                var Comparison = function Comparison(obj, keys, actual) {
                    var _this = this;
                    _classCallCheck(this, Comparison);
                    keys.forEach(function(key) {
                        if (key in obj) {
                            if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
                                _this[key] = actual[key];
                            } else {
                                _this[key] = obj[key];
                            }
                        }
                    });
                };
                function compareExceptionKey(actual, expected, key, message, keys, fn) {
                    if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
                        if (!message) {
                            // Create placeholder objects to create a nice output.
                            var a = new Comparison(actual, keys);
                            var b = new Comparison(expected, keys, actual);
                            var err = new AssertionError({
                                actual: a,
                                expected: b,
                                operator: 'deepStrictEqual',
                                stackStartFn: fn
                            });
                            err.actual = actual;
                            err.expected = expected;
                            err.operator = fn.name;
                            throw err;
                        }
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: fn.name,
                            stackStartFn: fn
                        });
                    }
                }
                function expectedException(actual, expected, msg, fn) {
                    if (typeof expected !== 'function') {
                        if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.
                        if (arguments.length === 2) {
                            throw new ERR_INVALID_ARG_TYPE('expected', [
                                'Function',
                                'RegExp'
                            ], expected);
                        } // Handle primitives properly.
                        if (_typeof(actual) !== 'object' || actual === null) {
                            var err = new AssertionError({
                                actual: actual,
                                expected: expected,
                                message: msg,
                                operator: 'deepStrictEqual',
                                stackStartFn: fn
                            });
                            err.operator = fn.name;
                            throw err;
                        }
                        var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
                        // as well.
                        if (expected instanceof Error) {
                            keys.push('name', 'message');
                        } else if (keys.length === 0) {
                            throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
                        }
                        if (isDeepEqual === undefined) lazyLoadComparison();
                        keys.forEach(function(key) {
                            if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
                                return;
                            }
                            compareExceptionKey(actual, expected, key, msg, keys, fn);
                        });
                        return true;
                    } // Guard instanceof against arrow functions as they don't have a prototype.
                    if (expected.prototype !== undefined && actual instanceof expected) {
                        return true;
                    }
                    if (Error.isPrototypeOf(expected)) {
                        return false;
                    }
                    return expected.call({}, actual) === true;
                }
                function getActual(fn) {
                    if (typeof fn !== 'function') {
                        throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
                    }
                    try {
                        fn();
                    } catch (e) {
                        return e;
                    }
                    return NO_EXCEPTION_SENTINEL;
                }
                function checkIsPromise(obj) {
                    // Accept native ES6 promises and promises that are implemented in a similar
                    // way. Do not accept thenables that use a function as `obj` and that have no
                    // `catch` handler.
                    // TODO: thenables are checked up until they have the correct methods,
                    // but according to documentation, the `then` method should receive
                    // the `fulfill` and `reject` arguments as well or it may be never resolved.
                    return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
                }
                function waitForActual(promiseFn) {
                    return Promise.resolve().then(function() {
                        var resultPromise;
                        if (typeof promiseFn === 'function') {
                            // Return a rejected promise if `promiseFn` throws synchronously.
                            resultPromise = promiseFn(); // Fail in case no promise is returned.
                            if (!checkIsPromise(resultPromise)) {
                                throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
                            }
                        } else if (checkIsPromise(promiseFn)) {
                            resultPromise = promiseFn;
                        } else {
                            throw new ERR_INVALID_ARG_TYPE('promiseFn', [
                                'Function',
                                'Promise'
                            ], promiseFn);
                        }
                        return Promise.resolve().then(function() {
                            return resultPromise;
                        }).then(function() {
                            return NO_EXCEPTION_SENTINEL;
                        }).catch(function(e) {
                            return e;
                        });
                    });
                }
                function expectsError(stackStartFn, actual, error, message) {
                    if (typeof error === 'string') {
                        if (arguments.length === 4) {
                            throw new ERR_INVALID_ARG_TYPE('error', [
                                'Object',
                                'Error',
                                'Function',
                                'RegExp'
                            ], error);
                        }
                        if (_typeof(actual) === 'object' && actual !== null) {
                            if (actual.message === error) {
                                throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
                            }
                        } else if (actual === error) {
                            throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
                        }
                        message = error;
                        error = undefined;
                    } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
                        throw new ERR_INVALID_ARG_TYPE('error', [
                            'Object',
                            'Error',
                            'Function',
                            'RegExp'
                        ], error);
                    }
                    if (actual === NO_EXCEPTION_SENTINEL) {
                        var details = '';
                        if (error && error.name) {
                            details += " (".concat(error.name, ")");
                        }
                        details += message ? ": ".concat(message) : '.';
                        var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
                        innerFail({
                            actual: undefined,
                            expected: error,
                            operator: stackStartFn.name,
                            message: "Missing expected ".concat(fnType).concat(details),
                            stackStartFn: stackStartFn
                        });
                    }
                    if (error && !expectedException(actual, error, message, stackStartFn)) {
                        throw actual;
                    }
                }
                function expectsNoError(stackStartFn, actual, error, message) {
                    if (actual === NO_EXCEPTION_SENTINEL) return;
                    if (typeof error === 'string') {
                        message = error;
                        error = undefined;
                    }
                    if (!error || expectedException(actual, error)) {
                        var details = message ? ": ".concat(message) : '.';
                        var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
                        innerFail({
                            actual: actual,
                            expected: error,
                            operator: stackStartFn.name,
                            message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
                            stackStartFn: stackStartFn
                        });
                    }
                    throw actual;
                }
                assert.throws = function throws(promiseFn) {
                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){
                        args[_key2 - 1] = arguments[_key2];
                    }
                    expectsError.apply(void 0, [
                        throws,
                        getActual(promiseFn)
                    ].concat(args));
                };
                assert.rejects = function rejects(promiseFn) {
                    for(var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++){
                        args[_key3 - 1] = arguments[_key3];
                    }
                    return waitForActual(promiseFn).then(function(result) {
                        return expectsError.apply(void 0, [
                            rejects,
                            result
                        ].concat(args));
                    });
                };
                assert.doesNotThrow = function doesNotThrow(fn) {
                    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++){
                        args[_key4 - 1] = arguments[_key4];
                    }
                    expectsNoError.apply(void 0, [
                        doesNotThrow,
                        getActual(fn)
                    ].concat(args));
                };
                assert.doesNotReject = function doesNotReject(fn) {
                    for(var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++){
                        args[_key5 - 1] = arguments[_key5];
                    }
                    return waitForActual(fn).then(function(result) {
                        return expectsNoError.apply(void 0, [
                            doesNotReject,
                            result
                        ].concat(args));
                    });
                };
                assert.ifError = function ifError(err) {
                    if (err !== null && err !== undefined) {
                        var message = 'ifError got unwanted exception: ';
                        if (_typeof(err) === 'object' && typeof err.message === 'string') {
                            if (err.message.length === 0 && err.constructor) {
                                message += err.constructor.name;
                            } else {
                                message += err.message;
                            }
                        } else {
                            message += inspect(err);
                        }
                        var newErr = new AssertionError({
                            actual: err,
                            expected: null,
                            operator: 'ifError',
                            message: message,
                            stackStartFn: ifError
                        }); // Make sure we actually have a stack trace!
                        var origStack = err.stack;
                        if (typeof origStack === 'string') {
                            // This will remove any duplicated frames from the error frames taken
                            // from within `ifError` and add the original error frames to the newly
                            // created ones.
                            var tmp2 = origStack.split('\n');
                            tmp2.shift(); // Filter all frames existing in err.stack.
                            var tmp1 = newErr.stack.split('\n');
                            for(var i = 0; i < tmp2.length; i++){
                                // Find the first occurrence of the frame.
                                var pos = tmp1.indexOf(tmp2[i]);
                                if (pos !== -1) {
                                    // Only keep new frames.
                                    tmp1 = tmp1.slice(0, pos);
                                    break;
                                }
                            }
                            newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
                        }
                        throw newErr;
                    }
                }; // Expose a strict only variant of assert
                function strict() {
                    for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++){
                        args[_key6] = arguments[_key6];
                    }
                    innerOk.apply(void 0, [
                        strict,
                        args.length
                    ].concat(args));
                }
                assert.strict = objectAssign(strict, assert, {
                    equal: assert.strictEqual,
                    deepEqual: assert.deepStrictEqual,
                    notEqual: assert.notStrictEqual,
                    notDeepEqual: assert.notDeepStrictEqual
                });
                assert.strict.strict = assert.strict;
            /***/ },
            /***/ 9801: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_32028__)=>{
                "use strict";
                /* provided dependency */ var process = __nested_webpack_require_32028__(9907);
                // Currently in sync with Node.js lib/internal/assert/assertion_error.js
                // https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c
                function _objectSpread(target) {
                    for(var i = 1; i < arguments.length; i++){
                        var source = arguments[i] != null ? arguments[i] : {};
                        var ownKeys = Object.keys(source);
                        if (typeof Object.getOwnPropertySymbols === 'function') {
                            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                            }));
                        }
                        ownKeys.forEach(function(key) {
                            _defineProperty(target, key, source[key]);
                        });
                    }
                    return target;
                }
                function _defineProperty(obj, key, value) {
                    if (key in obj) {
                        Object.defineProperty(obj, key, {
                            value: value,
                            enumerable: true,
                            configurable: true,
                            writable: true
                        });
                    } else {
                        obj[key] = value;
                    }
                    return obj;
                }
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }
                function _defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) _defineProperties(Constructor, staticProps);
                    return Constructor;
                }
                function _possibleConstructorReturn(self1, call) {
                    if (call && (_typeof(call) === "object" || typeof call === "function")) {
                        return call;
                    }
                    return _assertThisInitialized(self1);
                }
                function _assertThisInitialized(self1) {
                    if (self1 === void 0) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self1;
                }
                function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                        throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (superClass) _setPrototypeOf(subClass, superClass);
                }
                function _wrapNativeSuper(Class) {
                    var _cache = typeof Map === "function" ? new Map() : undefined;
                    _wrapNativeSuper = function _wrapNativeSuper(Class) {
                        if (Class === null || !_isNativeFunction(Class)) return Class;
                        if (typeof Class !== "function") {
                            throw new TypeError("Super expression must either be null or a function");
                        }
                        if (typeof _cache !== "undefined") {
                            if (_cache.has(Class)) return _cache.get(Class);
                            _cache.set(Class, Wrapper);
                        }
                        function Wrapper() {
                            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
                        }
                        Wrapper.prototype = Object.create(Class.prototype, {
                            constructor: {
                                value: Wrapper,
                                enumerable: false,
                                writable: true,
                                configurable: true
                            }
                        });
                        return _setPrototypeOf(Wrapper, Class);
                    };
                    return _wrapNativeSuper(Class);
                }
                function isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
                function _construct(Parent, args, Class) {
                    if (isNativeReflectConstruct()) {
                        _construct = Reflect.construct;
                    } else {
                        _construct = function _construct(Parent, args, Class) {
                            var a = [
                                null
                            ];
                            a.push.apply(a, args);
                            var Constructor = Function.bind.apply(Parent, a);
                            var instance = new Constructor();
                            if (Class) _setPrototypeOf(instance, Class.prototype);
                            return instance;
                        };
                    }
                    return _construct.apply(null, arguments);
                }
                function _isNativeFunction(fn) {
                    return Function.toString.call(fn).indexOf("[native code]") !== -1;
                }
                function _setPrototypeOf(o, p) {
                    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                        o.__proto__ = p;
                        return o;
                    };
                    return _setPrototypeOf(o, p);
                }
                function _getPrototypeOf(o) {
                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                        return o.__proto__ || Object.getPrototypeOf(o);
                    };
                    return _getPrototypeOf(o);
                }
                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }
                var _require = __nested_webpack_require_32028__(9208), inspect = _require.inspect;
                var _require2 = __nested_webpack_require_32028__(1342), ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
                function endsWith(str, search, this_len) {
                    if (this_len === undefined || this_len > str.length) {
                        this_len = str.length;
                    }
                    return str.substring(this_len - search.length, this_len) === search;
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
                function repeat(str, count) {
                    count = Math.floor(count);
                    if (str.length == 0 || count == 0) return '';
                    var maxCount = str.length * count;
                    count = Math.floor(Math.log(count) / Math.log(2));
                    while(count){
                        str += str;
                        count--;
                    }
                    str += str.substring(0, maxCount - str.length);
                    return str;
                }
                var blue = '';
                var green = '';
                var red = '';
                var white = '';
                var kReadableOperator = {
                    deepStrictEqual: 'Expected values to be strictly deep-equal:',
                    strictEqual: 'Expected values to be strictly equal:',
                    strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
                    deepEqual: 'Expected values to be loosely deep-equal:',
                    equal: 'Expected values to be loosely equal:',
                    notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
                    notStrictEqual: 'Expected "actual" to be strictly unequal to:',
                    notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
                    notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
                    notEqual: 'Expected "actual" to be loosely unequal to:',
                    notIdentical: 'Values identical but not reference-equal:'
                }; // Comparing short primitives should just show === / !== instead of using the
                // diff.
                var kMaxShortLength = 10;
                function copyError(source) {
                    var keys = Object.keys(source);
                    var target = Object.create(Object.getPrototypeOf(source));
                    keys.forEach(function(key) {
                        target[key] = source[key];
                    });
                    Object.defineProperty(target, 'message', {
                        value: source.message
                    });
                    return target;
                }
                function inspectValue(val) {
                    // The util.inspect default values could be changed. This makes sure the
                    // error messages contain the necessary information nevertheless.
                    return inspect(val, {
                        compact: false,
                        customInspect: false,
                        depth: 1000,
                        maxArrayLength: Infinity,
                        // Assert compares only enumerable properties (with a few exceptions).
                        showHidden: false,
                        // Having a long line as error is better than wrapping the line for
                        // comparison for now.
                        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
                        // have meta information about the inspected properties (i.e., know where
                        // in what line the property starts and ends).
                        breakLength: Infinity,
                        // Assert does not detect proxies currently.
                        showProxy: false,
                        sorted: true,
                        // Inspect getters as we also check them when comparing entries.
                        getters: true
                    });
                }
                function createErrDiff(actual, expected, operator) {
                    var other = '';
                    var res = '';
                    var lastPos = 0;
                    var end = '';
                    var skipped = false;
                    var actualInspected = inspectValue(actual);
                    var actualLines = actualInspected.split('\n');
                    var expectedLines = inspectValue(expected).split('\n');
                    var i = 0;
                    var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
                    // for the `strictEqual` operator.
                    if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
                        operator = 'strictEqualObject';
                    } // If "actual" and "expected" fit on a single line and they are not strictly
                    // equal, check further special handling.
                    if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
                        var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
                        // kMaxShortLength and if neither is an object and at least one of them is
                        // not `zero`, use the strict equal comparison to visualize the output.
                        if (inputLength <= kMaxShortLength) {
                            if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
                                // -0 === +0
                                return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
                            }
                        } else if (operator !== 'strictEqualObject') {
                            // If the stderr is a tty and the input length is lower than the current
                            // columns per line, add a mismatch indicator below the output. If it is
                            // not a tty, use a default value of 80 characters.
                            var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
                            if (inputLength < maxLength) {
                                while(actualLines[0][i] === expectedLines[0][i]){
                                    i++;
                                } // Ignore the first characters.
                                if (i > 2) {
                                    // Add position indicator for the first mismatch in case it is a
                                    // single line and the input length is less than the column length.
                                    indicator = "\n  ".concat(repeat(' ', i), "^");
                                    i = 0;
                                }
                            }
                        }
                    } // Remove all ending lines that match (this optimizes the output for
                    // readability by reducing the number of total changed lines).
                    var a = actualLines[actualLines.length - 1];
                    var b = expectedLines[expectedLines.length - 1];
                    while(a === b){
                        if (i++ < 2) {
                            end = "\n  ".concat(a).concat(end);
                        } else {
                            other = a;
                        }
                        actualLines.pop();
                        expectedLines.pop();
                        if (actualLines.length === 0 || expectedLines.length === 0) break;
                        a = actualLines[actualLines.length - 1];
                        b = expectedLines[expectedLines.length - 1];
                    }
                    var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
                    // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })
                    if (maxLines === 0) {
                        // We have to get the result again. The lines were all removed before.
                        var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
                        // TODO: Accept env to always show the full error.
                        if (_actualLines.length > 30) {
                            _actualLines[26] = "".concat(blue, "...").concat(white);
                            while(_actualLines.length > 27){
                                _actualLines.pop();
                            }
                        }
                        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
                    }
                    if (i > 3) {
                        end = "\n".concat(blue, "...").concat(white).concat(end);
                        skipped = true;
                    }
                    if (other !== '') {
                        end = "\n  ".concat(other).concat(end);
                        other = '';
                    }
                    var printedLines = 0;
                    var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
                    var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
                    for(i = 0; i < maxLines; i++){
                        // Only extra expected lines exist
                        var cur = i - lastPos;
                        if (actualLines.length < i + 1) {
                            // If the last diverging line is more than one line above and the
                            // current line is at least line three, add some of the former lines and
                            // also add dots to indicate skipped entries.
                            if (cur > 1 && i > 2) {
                                if (cur > 4) {
                                    res += "\n".concat(blue, "...").concat(white);
                                    skipped = true;
                                } else if (cur > 3) {
                                    res += "\n  ".concat(expectedLines[i - 2]);
                                    printedLines++;
                                }
                                res += "\n  ".concat(expectedLines[i - 1]);
                                printedLines++;
                            } // Mark the current line as the last diverging one.
                            lastPos = i; // Add the expected line to the cache.
                            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
                            printedLines++; // Only extra actual lines exist
                        } else if (expectedLines.length < i + 1) {
                            // If the last diverging line is more than one line above and the
                            // current line is at least line three, add some of the former lines and
                            // also add dots to indicate skipped entries.
                            if (cur > 1 && i > 2) {
                                if (cur > 4) {
                                    res += "\n".concat(blue, "...").concat(white);
                                    skipped = true;
                                } else if (cur > 3) {
                                    res += "\n  ".concat(actualLines[i - 2]);
                                    printedLines++;
                                }
                                res += "\n  ".concat(actualLines[i - 1]);
                                printedLines++;
                            } // Mark the current line as the last diverging one.
                            lastPos = i; // Add the actual line to the result.
                            res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
                            printedLines++; // Lines diverge
                        } else {
                            var expectedLine = expectedLines[i];
                            var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
                            // a trailing comma. In that case it is actually identical and we should
                            // mark it as such.
                            var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
                            // add a comma at the end of the actual line. Otherwise the output could
                            // look weird as in:
                            //
                            //   [
                            //     1         // No comma at the end!
                            // +   2
                            //   ]
                            //
                            if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
                                divergingLines = false;
                                actualLine += ',';
                            }
                            if (divergingLines) {
                                // If the last diverging line is more than one line above and the
                                // current line is at least line three, add some of the former lines and
                                // also add dots to indicate skipped entries.
                                if (cur > 1 && i > 2) {
                                    if (cur > 4) {
                                        res += "\n".concat(blue, "...").concat(white);
                                        skipped = true;
                                    } else if (cur > 3) {
                                        res += "\n  ".concat(actualLines[i - 2]);
                                        printedLines++;
                                    }
                                    res += "\n  ".concat(actualLines[i - 1]);
                                    printedLines++;
                                } // Mark the current line as the last diverging one.
                                lastPos = i; // Add the actual line to the result and cache the expected diverging
                                // line so consecutive diverging lines show up as +++--- and not +-+-+-.
                                res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
                                other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
                                printedLines += 2; // Lines are identical
                            } else {
                                // Add all cached information to the result before adding other things
                                // and reset the cache.
                                res += other;
                                other = ''; // If the last diverging line is exactly one line above or if it is the
                                // very first line, add the line to the result.
                                if (cur === 1 || i === 0) {
                                    res += "\n  ".concat(actualLine);
                                    printedLines++;
                                }
                            }
                        } // Inspected object to big (Show ~20 rows max)
                        if (printedLines > 20 && i < maxLines - 2) {
                            return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
                        }
                    }
                    return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
                }
                var AssertionError = /*#__PURE__*/ function(_Error) {
                    _inherits(AssertionError, _Error);
                    function AssertionError(options) {
                        var _this;
                        _classCallCheck(this, AssertionError);
                        if (_typeof(options) !== 'object' || options === null) {
                            throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
                        }
                        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
                        var actual = options.actual, expected = options.expected;
                        var limit = Error.stackTraceLimit;
                        Error.stackTraceLimit = 0;
                        if (message != null) {
                            _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
                        } else {
                            if (process.stderr && process.stderr.isTTY) {
                                // Reset on each call to make sure we handle dynamically set environment
                                // variables correct.
                                if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
                                    blue = "\x1B[34m";
                                    green = "\x1B[32m";
                                    white = "\x1B[39m";
                                    red = "\x1B[31m";
                                } else {
                                    blue = '';
                                    green = '';
                                    white = '';
                                    red = '';
                                }
                            } // Prevent the error stack from being visible by duplicating the error
                            // in a very close way to the original in case both sides are actually
                            // instances of Error.
                            if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
                                actual = copyError(actual);
                                expected = copyError(expected);
                            }
                            if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
                                _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
                            } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
                                // In case the objects are equal but the operator requires unequal, show
                                // the first object and say A equals B
                                var base = kReadableOperator[operator];
                                var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.
                                if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
                                    base = kReadableOperator.notStrictEqualObject;
                                } // Only remove lines in case it makes sense to collapse those.
                                // TODO: Accept env to always show the full error.
                                if (res.length > 30) {
                                    res[26] = "".concat(blue, "...").concat(white);
                                    while(res.length > 27){
                                        res.pop();
                                    }
                                } // Only print a single input.
                                if (res.length === 1) {
                                    _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
                                } else {
                                    _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
                                }
                            } else {
                                var _res = inspectValue(actual);
                                var other = '';
                                var knownOperators = kReadableOperator[operator];
                                if (operator === 'notDeepEqual' || operator === 'notEqual') {
                                    _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
                                    if (_res.length > 1024) {
                                        _res = "".concat(_res.slice(0, 1021), "...");
                                    }
                                } else {
                                    other = "".concat(inspectValue(expected));
                                    if (_res.length > 512) {
                                        _res = "".concat(_res.slice(0, 509), "...");
                                    }
                                    if (other.length > 512) {
                                        other = "".concat(other.slice(0, 509), "...");
                                    }
                                    if (operator === 'deepEqual' || operator === 'equal') {
                                        _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
                                    } else {
                                        other = " ".concat(operator, " ").concat(other);
                                    }
                                }
                                _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
                            }
                        }
                        Error.stackTraceLimit = limit;
                        _this.generatedMessage = !message;
                        Object.defineProperty(_assertThisInitialized(_this), 'name', {
                            value: 'AssertionError [ERR_ASSERTION]',
                            enumerable: false,
                            writable: true,
                            configurable: true
                        });
                        _this.code = 'ERR_ASSERTION';
                        _this.actual = actual;
                        _this.expected = expected;
                        _this.operator = operator;
                        if (Error.captureStackTrace) {
                            // eslint-disable-next-line no-restricted-syntax
                            Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
                        } // Create error message including the error code in the name.
                        _this.stack; // Reset the name.
                        _this.name = 'AssertionError';
                        return _possibleConstructorReturn(_this);
                    }
                    _createClass(AssertionError, [
                        {
                            key: "toString",
                            value: function toString() {
                                return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
                            }
                        },
                        {
                            key: inspect.custom,
                            value: function value(recurseTimes, ctx) {
                                // This limits the `actual` and `expected` property default inspection to
                                // the minimum depth. Otherwise those values would be too verbose compared
                                // to the actual error message which contains a combined view of these two
                                // input values.
                                return inspect(this, _objectSpread({}, ctx, {
                                    customInspect: false,
                                    depth: 0
                                }));
                            }
                        }
                    ]);
                    return AssertionError;
                }(_wrapNativeSuper(Error));
                module1.exports = AssertionError;
            /***/ },
            /***/ 1342: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_65622__)=>{
                "use strict";
                // Currently in sync with Node.js lib/internal/errors.js
                // https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f
                /* eslint node-core/documented-errors: "error" */ /* eslint node-core/alphabetize-errors: "error" */ /* eslint node-core/prefer-util-format-errors: "error" */ // The whole point behind this internal module is to allow Node.js to no
                // longer be forced to treat every error message change as a semver-major
                // change. The NodeError classes here all expose a `code` property whose
                // value statically and permanently identifies the error. While the error
                // message may change, the code should not.
                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }
                function _possibleConstructorReturn(self1, call) {
                    if (call && (_typeof(call) === "object" || typeof call === "function")) {
                        return call;
                    }
                    return _assertThisInitialized(self1);
                }
                function _assertThisInitialized(self1) {
                    if (self1 === void 0) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self1;
                }
                function _getPrototypeOf(o) {
                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                        return o.__proto__ || Object.getPrototypeOf(o);
                    };
                    return _getPrototypeOf(o);
                }
                function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                        throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (superClass) _setPrototypeOf(subClass, superClass);
                }
                function _setPrototypeOf(o, p) {
                    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                        o.__proto__ = p;
                        return o;
                    };
                    return _setPrototypeOf(o, p);
                }
                var codes = {}; // Lazy loaded
                var assert;
                var util;
                function createErrorType(code, message, Base) {
                    if (!Base) {
                        Base = Error;
                    }
                    function getMessage(arg1, arg2, arg3) {
                        if (typeof message === 'string') {
                            return message;
                        } else {
                            return message(arg1, arg2, arg3);
                        }
                    }
                    var NodeError = /*#__PURE__*/ function(_Base) {
                        _inherits(NodeError, _Base);
                        function NodeError(arg1, arg2, arg3) {
                            var _this;
                            _classCallCheck(this, NodeError);
                            _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
                            _this.code = code;
                            return _this;
                        }
                        return NodeError;
                    }(Base);
                    codes[code] = NodeError;
                } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
                function oneOf(expected, thing) {
                    if (Array.isArray(expected)) {
                        var len = expected.length;
                        expected = expected.map(function(i) {
                            return String(i);
                        });
                        if (len > 2) {
                            return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
                        } else if (len === 2) {
                            return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
                        } else {
                            return "of ".concat(thing, " ").concat(expected[0]);
                        }
                    } else {
                        return "of ".concat(thing, " ").concat(String(expected));
                    }
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
                function startsWith(str, search, pos) {
                    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
                function endsWith(str, search, this_len) {
                    if (this_len === undefined || this_len > str.length) {
                        this_len = str.length;
                    }
                    return str.substring(this_len - search.length, this_len) === search;
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
                function includes(str, search, start) {
                    if (typeof start !== 'number') {
                        start = 0;
                    }
                    if (start + search.length > str.length) {
                        return false;
                    } else {
                        return str.indexOf(search, start) !== -1;
                    }
                }
                createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
                createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
                    if (assert === undefined) assert = __nested_webpack_require_65622__(6093);
                    assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'
                    var determiner;
                    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
                        determiner = 'must not be';
                        expected = expected.replace(/^not /, '');
                    } else {
                        determiner = 'must be';
                    }
                    var msg;
                    if (endsWith(name, ' argument')) {
                        // For cases like 'first argument'
                        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
                    } else {
                        var type = includes(name, '.') ? 'property' : 'argument';
                        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
                    } // TODO(BridgeAR): Improve the output by showing `null` and similar.
                    msg += ". Received type ".concat(_typeof(actual));
                    return msg;
                }, TypeError);
                createErrorType('ERR_INVALID_ARG_VALUE', function(name, value) {
                    var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
                    if (util === undefined) util = __nested_webpack_require_65622__(9208);
                    var inspected = util.inspect(value);
                    if (inspected.length > 128) {
                        inspected = "".concat(inspected.slice(0, 128), "...");
                    }
                    return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
                }, TypeError, RangeError);
                createErrorType('ERR_INVALID_RETURN_VALUE', function(input, name, value) {
                    var type;
                    if (value && value.constructor && value.constructor.name) {
                        type = "instance of ".concat(value.constructor.name);
                    } else {
                        type = "type ".concat(_typeof(value));
                    }
                    return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
                }, TypeError);
                createErrorType('ERR_MISSING_ARGS', function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    if (assert === undefined) assert = __nested_webpack_require_65622__(6093);
                    assert(args.length > 0, 'At least one arg needs to be specified');
                    var msg = 'The ';
                    var len = args.length;
                    args = args.map(function(a) {
                        return "\"".concat(a, "\"");
                    });
                    switch(len){
                        case 1:
                            msg += "".concat(args[0], " argument");
                            break;
                        case 2:
                            msg += "".concat(args[0], " and ").concat(args[1], " arguments");
                            break;
                        default:
                            msg += args.slice(0, len - 1).join(', ');
                            msg += ", and ".concat(args[len - 1], " arguments");
                            break;
                    }
                    return "".concat(msg, " must be specified");
                }, TypeError);
                module1.exports.codes = codes;
            /***/ },
            /***/ 5656: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_76688__)=>{
                "use strict";
                // Currently in sync with Node.js lib/internal/util/comparisons.js
                // https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
                function _slicedToArray(arr, i) {
                    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
                }
                function _nonIterableRest() {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
                function _iterableToArrayLimit(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"] != null) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                function _arrayWithHoles(arr) {
                    if (Array.isArray(arr)) return arr;
                }
                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }
                var regexFlagsSupported = /a/g.flags !== undefined;
                var arrayFromSet = function arrayFromSet(set) {
                    var array = [];
                    set.forEach(function(value) {
                        return array.push(value);
                    });
                    return array;
                };
                var arrayFromMap = function arrayFromMap(map) {
                    var array = [];
                    map.forEach(function(value, key) {
                        return array.push([
                            key,
                            value
                        ]);
                    });
                    return array;
                };
                var objectIs = Object.is ? Object.is : __nested_webpack_require_76688__(5968);
                var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
                    return [];
                };
                var numberIsNaN = Number.isNaN ? Number.isNaN : __nested_webpack_require_76688__(7838);
                function uncurryThis(f) {
                    return f.call.bind(f);
                }
                var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
                var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
                var objectToString = uncurryThis(Object.prototype.toString);
                var _require$types = __nested_webpack_require_76688__(9208).types, isAnyArrayBuffer = _require$types.isAnyArrayBuffer, isArrayBufferView = _require$types.isArrayBufferView, isDate = _require$types.isDate, isMap = _require$types.isMap, isRegExp = _require$types.isRegExp, isSet = _require$types.isSet, isNativeError = _require$types.isNativeError, isBoxedPrimitive = _require$types.isBoxedPrimitive, isNumberObject = _require$types.isNumberObject, isStringObject = _require$types.isStringObject, isBooleanObject = _require$types.isBooleanObject, isBigIntObject = _require$types.isBigIntObject, isSymbolObject = _require$types.isSymbolObject, isFloat32Array = _require$types.isFloat32Array, isFloat64Array = _require$types.isFloat64Array;
                function isNonIndex(key) {
                    if (key.length === 0 || key.length > 10) return true;
                    for(var i = 0; i < key.length; i++){
                        var code = key.charCodeAt(i);
                        if (code < 48 || code > 57) return true;
                    } // The maximum size for an array is 2 ** 32 -1.
                    return key.length === 10 && key >= Math.pow(2, 32);
                }
                function getOwnNonIndexProperties(value) {
                    return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
                } // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
                // original notice:
                /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */ function compare(a, b) {
                    if (a === b) {
                        return 0;
                    }
                    var x = a.length;
                    var y = b.length;
                    for(var i = 0, len = Math.min(x, y); i < len; ++i){
                        if (a[i] !== b[i]) {
                            x = a[i];
                            y = b[i];
                            break;
                        }
                    }
                    if (x < y) {
                        return -1;
                    }
                    if (y < x) {
                        return 1;
                    }
                    return 0;
                }
                var ONLY_ENUMERABLE = undefined;
                var kStrict = true;
                var kLoose = false;
                var kNoIterator = 0;
                var kIsArray = 1;
                var kIsSet = 2;
                var kIsMap = 3; // Check if they have the same source and flags
                function areSimilarRegExps(a, b) {
                    return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
                }
                function areSimilarFloatArrays(a, b) {
                    if (a.byteLength !== b.byteLength) {
                        return false;
                    }
                    for(var offset = 0; offset < a.byteLength; offset++){
                        if (a[offset] !== b[offset]) {
                            return false;
                        }
                    }
                    return true;
                }
                function areSimilarTypedArrays(a, b) {
                    if (a.byteLength !== b.byteLength) {
                        return false;
                    }
                    return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
                }
                function areEqualArrayBuffers(buf1, buf2) {
                    return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
                }
                function isEqualBoxedPrimitive(val1, val2) {
                    if (isNumberObject(val1)) {
                        return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
                    }
                    if (isStringObject(val1)) {
                        return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
                    }
                    if (isBooleanObject(val1)) {
                        return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
                    }
                    if (isBigIntObject(val1)) {
                        return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
                    }
                    return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
                } // Notes: Type tags are historical [[Class]] properties that can be set by
                // FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
                // and retrieved using Object.prototype.toString.call(obj) in JS
                // See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
                // for a list of tags pre-defined in the spec.
                // There are some unspecified tags in the wild too (e.g. typed array tags).
                // Since tags can be altered, they only serve fast failures
                //
                // Typed arrays and buffers are checked by comparing the content in their
                // underlying ArrayBuffer. This optimization requires that it's
                // reasonable to interpret their underlying memory in the same way,
                // which is checked by comparing their type tags.
                // (e.g. a Uint8Array and a Uint16Array with the same memory content
                // could still be different because they will be interpreted differently).
                //
                // For strict comparison, objects should have
                // a) The same built-in type tags
                // b) The same prototypes.
                function innerDeepEqual(val1, val2, strict, memos) {
                    // All identical values are equivalent, as determined by ===.
                    if (val1 === val2) {
                        if (val1 !== 0) return true;
                        return strict ? objectIs(val1, val2) : true;
                    } // Check more closely if val1 and val2 are equal.
                    if (strict) {
                        if (_typeof(val1) !== 'object') {
                            return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
                        }
                        if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
                            return false;
                        }
                        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
                            return false;
                        }
                    } else {
                        if (val1 === null || _typeof(val1) !== 'object') {
                            if (val2 === null || _typeof(val2) !== 'object') {
                                // eslint-disable-next-line eqeqeq
                                return val1 == val2;
                            }
                            return false;
                        }
                        if (val2 === null || _typeof(val2) !== 'object') {
                            return false;
                        }
                    }
                    var val1Tag = objectToString(val1);
                    var val2Tag = objectToString(val2);
                    if (val1Tag !== val2Tag) {
                        return false;
                    }
                    if (Array.isArray(val1)) {
                        // Check for sparse arrays and general fast path
                        if (val1.length !== val2.length) {
                            return false;
                        }
                        var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
                        var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
                        if (keys1.length !== keys2.length) {
                            return false;
                        }
                        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
                    } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
                    // wan't to early return out of the rest of the checks. However we can check
                    // if the second value is one of these values and the first isn't.
                    if (val1Tag === '[object Object]') {
                        // return keyCheck(val1, val2, strict, memos, kNoIterator);
                        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
                            return false;
                        }
                    }
                    if (isDate(val1)) {
                        if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
                            return false;
                        }
                    } else if (isRegExp(val1)) {
                        if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
                            return false;
                        }
                    } else if (isNativeError(val1) || val1 instanceof Error) {
                        // Do not compare the stack as it might differ even though the error itself
                        // is otherwise identical.
                        if (val1.message !== val2.message || val1.name !== val2.name) {
                            return false;
                        }
                    } else if (isArrayBufferView(val1)) {
                        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
                            if (!areSimilarFloatArrays(val1, val2)) {
                                return false;
                            }
                        } else if (!areSimilarTypedArrays(val1, val2)) {
                            return false;
                        } // Buffer.compare returns true, so val1.length === val2.length. If they both
                        // only contain numeric keys, we don't need to exam further than checking
                        // the symbols.
                        var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
                        var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
                        if (_keys.length !== _keys2.length) {
                            return false;
                        }
                        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
                    } else if (isSet(val1)) {
                        if (!isSet(val2) || val1.size !== val2.size) {
                            return false;
                        }
                        return keyCheck(val1, val2, strict, memos, kIsSet);
                    } else if (isMap(val1)) {
                        if (!isMap(val2) || val1.size !== val2.size) {
                            return false;
                        }
                        return keyCheck(val1, val2, strict, memos, kIsMap);
                    } else if (isAnyArrayBuffer(val1)) {
                        if (!areEqualArrayBuffers(val1, val2)) {
                            return false;
                        }
                    } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
                        return false;
                    }
                    return keyCheck(val1, val2, strict, memos, kNoIterator);
                }
                function getEnumerables(val, keys) {
                    return keys.filter(function(k) {
                        return propertyIsEnumerable(val, k);
                    });
                }
                function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
                    // For all remaining Object pairs, including Array, objects and Maps,
                    // equivalence is determined by having:
                    // a) The same number of owned enumerable properties
                    // b) The same set of keys/indexes (although not necessarily the same order)
                    // c) Equivalent values for every corresponding key/index
                    // d) For Sets and Maps, equal contents
                    // Note: this accounts for both named and indexed properties on Arrays.
                    if (arguments.length === 5) {
                        aKeys = Object.keys(val1);
                        var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.
                        if (aKeys.length !== bKeys.length) {
                            return false;
                        }
                    } // Cheap key test
                    var i = 0;
                    for(; i < aKeys.length; i++){
                        if (!hasOwnProperty(val2, aKeys[i])) {
                            return false;
                        }
                    }
                    if (strict && arguments.length === 5) {
                        var symbolKeysA = objectGetOwnPropertySymbols(val1);
                        if (symbolKeysA.length !== 0) {
                            var count = 0;
                            for(i = 0; i < symbolKeysA.length; i++){
                                var key = symbolKeysA[i];
                                if (propertyIsEnumerable(val1, key)) {
                                    if (!propertyIsEnumerable(val2, key)) {
                                        return false;
                                    }
                                    aKeys.push(key);
                                    count++;
                                } else if (propertyIsEnumerable(val2, key)) {
                                    return false;
                                }
                            }
                            var symbolKeysB = objectGetOwnPropertySymbols(val2);
                            if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
                                return false;
                            }
                        } else {
                            var _symbolKeysB = objectGetOwnPropertySymbols(val2);
                            if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
                                return false;
                            }
                        }
                    }
                    if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
                        return true;
                    } // Use memos to handle cycles.
                    if (memos === undefined) {
                        memos = {
                            val1: new Map(),
                            val2: new Map(),
                            position: 0
                        };
                    } else {
                        // We prevent up to two map.has(x) calls by directly retrieving the value
                        // and checking for undefined. The map can only contain numbers, so it is
                        // safe to check for undefined only.
                        var val2MemoA = memos.val1.get(val1);
                        if (val2MemoA !== undefined) {
                            var val2MemoB = memos.val2.get(val2);
                            if (val2MemoB !== undefined) {
                                return val2MemoA === val2MemoB;
                            }
                        }
                        memos.position++;
                    }
                    memos.val1.set(val1, memos.position);
                    memos.val2.set(val2, memos.position);
                    var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
                    memos.val1.delete(val1);
                    memos.val2.delete(val2);
                    return areEq;
                }
                function setHasEqualElement(set, val1, strict, memo) {
                    // Go looking.
                    var setValues = arrayFromSet(set);
                    for(var i = 0; i < setValues.length; i++){
                        var val2 = setValues[i];
                        if (innerDeepEqual(val1, val2, strict, memo)) {
                            // Remove the matching element to make sure we do not check that again.
                            set.delete(val2);
                            return true;
                        }
                    }
                    return false;
                } // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
                // Sadly it is not possible to detect corresponding values properly in case the
                // type is a string, number, bigint or boolean. The reason is that those values
                // can match lots of different string values (e.g., 1n == '+00001').
                function findLooseMatchingPrimitives(prim) {
                    switch(_typeof(prim)){
                        case 'undefined':
                            return null;
                        case 'object':
                            // Only pass in null as object!
                            return undefined;
                        case 'symbol':
                            return false;
                        case 'string':
                            prim = +prim;
                        // Loose equal entries exist only if the string is possible to convert to
                        // a regular number and not NaN.
                        // Fall through
                        case 'number':
                            if (numberIsNaN(prim)) {
                                return false;
                            }
                    }
                    return true;
                }
                function setMightHaveLoosePrim(a, b, prim) {
                    var altValue = findLooseMatchingPrimitives(prim);
                    if (altValue != null) return altValue;
                    return b.has(altValue) && !a.has(altValue);
                }
                function mapMightHaveLoosePrim(a, b, prim, item, memo) {
                    var altValue = findLooseMatchingPrimitives(prim);
                    if (altValue != null) {
                        return altValue;
                    }
                    var curB = b.get(altValue);
                    if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
                        return false;
                    }
                    return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
                }
                function setEquiv(a, b, strict, memo) {
                    // This is a lazily initiated Set of entries which have to be compared
                    // pairwise.
                    var set = null;
                    var aValues = arrayFromSet(a);
                    for(var i = 0; i < aValues.length; i++){
                        var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
                        // heavy sets but it is a minor slow down for primitives. As they are fast
                        // to check this improves the worst case scenario instead.
                        if (_typeof(val) === 'object' && val !== null) {
                            if (set === null) {
                                set = new Set();
                            } // If the specified value doesn't exist in the second set its an not null
                            // object (or non strict only: a not matching primitive) we'll need to go
                            // hunting for something thats deep-(strict-)equal to it. To make this
                            // O(n log n) complexity we have to copy these values in a new set first.
                            set.add(val);
                        } else if (!b.has(val)) {
                            if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.
                            if (!setMightHaveLoosePrim(a, b, val)) {
                                return false;
                            }
                            if (set === null) {
                                set = new Set();
                            }
                            set.add(val);
                        }
                    }
                    if (set !== null) {
                        var bValues = arrayFromSet(b);
                        for(var _i = 0; _i < bValues.length; _i++){
                            var _val = bValues[_i]; // We have to check if a primitive value is already
                            // matching and only if it's not, go hunting for it.
                            if (_typeof(_val) === 'object' && _val !== null) {
                                if (!setHasEqualElement(set, _val, strict, memo)) return false;
                            } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
                                return false;
                            }
                        }
                        return set.size === 0;
                    }
                    return true;
                }
                function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
                    // To be able to handle cases like:
                    //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
                    // ... we need to consider *all* matching keys, not just the first we find.
                    var setValues = arrayFromSet(set);
                    for(var i = 0; i < setValues.length; i++){
                        var key2 = setValues[i];
                        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
                            set.delete(key2);
                            return true;
                        }
                    }
                    return false;
                }
                function mapEquiv(a, b, strict, memo) {
                    var set = null;
                    var aEntries = arrayFromMap(a);
                    for(var i = 0; i < aEntries.length; i++){
                        var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
                        if (_typeof(key) === 'object' && key !== null) {
                            if (set === null) {
                                set = new Set();
                            }
                            set.add(key);
                        } else {
                            // By directly retrieving the value we prevent another b.has(key) check in
                            // almost all possible cases.
                            var item2 = b.get(key);
                            if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
                                if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
                                // keys.
                                if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
                                if (set === null) {
                                    set = new Set();
                                }
                                set.add(key);
                            }
                        }
                    }
                    if (set !== null) {
                        var bEntries = arrayFromMap(b);
                        for(var _i2 = 0; _i2 < bEntries.length; _i2++){
                            var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), key = _bEntries$_i[0], item = _bEntries$_i[1];
                            if (_typeof(key) === 'object' && key !== null) {
                                if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
                            } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
                                return false;
                            }
                        }
                        return set.size === 0;
                    }
                    return true;
                }
                function objEquiv(a, b, strict, keys, memos, iterationType) {
                    // Sets and maps don't have their entries accessible via normal object
                    // properties.
                    var i = 0;
                    if (iterationType === kIsSet) {
                        if (!setEquiv(a, b, strict, memos)) {
                            return false;
                        }
                    } else if (iterationType === kIsMap) {
                        if (!mapEquiv(a, b, strict, memos)) {
                            return false;
                        }
                    } else if (iterationType === kIsArray) {
                        for(; i < a.length; i++){
                            if (hasOwnProperty(a, i)) {
                                if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
                                    return false;
                                }
                            } else if (hasOwnProperty(b, i)) {
                                return false;
                            } else {
                                // Array is sparse.
                                var keysA = Object.keys(a);
                                for(; i < keysA.length; i++){
                                    var key = keysA[i];
                                    if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
                                        return false;
                                    }
                                }
                                if (keysA.length !== Object.keys(b).length) {
                                    return false;
                                }
                                return true;
                            }
                        }
                    } // The pair must have equivalent values for every corresponding key.
                    // Possibly expensive deep test:
                    for(i = 0; i < keys.length; i++){
                        var _key = keys[i];
                        if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
                            return false;
                        }
                    }
                    return true;
                }
                function isDeepEqual(val1, val2) {
                    return innerDeepEqual(val1, val2, kLoose);
                }
                function isDeepStrictEqual(val1, val2) {
                    return innerDeepEqual(val1, val2, kStrict);
                }
                module1.exports = {
                    isDeepEqual: isDeepEqual,
                    isDeepStrictEqual: isDeepStrictEqual
                };
            /***/ },
            /***/ 9818: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_108242__)=>{
                "use strict";
                var GetIntrinsic = __nested_webpack_require_108242__(528);
                var callBind = __nested_webpack_require_108242__(8498);
                var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));
                module1.exports = function callBoundIntrinsic(name, allowMissing) {
                    var intrinsic = GetIntrinsic(name, !!allowMissing);
                    if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
                        return callBind(intrinsic);
                    }
                    return intrinsic;
                };
            /***/ },
            /***/ 8498: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_108969__)=>{
                "use strict";
                var bind = __nested_webpack_require_108969__(9138);
                var GetIntrinsic = __nested_webpack_require_108969__(528);
                var setFunctionLength = __nested_webpack_require_108969__(6108);
                var $TypeError = __nested_webpack_require_108969__(3468);
                var $apply = GetIntrinsic('%Function.prototype.apply%');
                var $call = GetIntrinsic('%Function.prototype.call%');
                var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
                var $defineProperty = __nested_webpack_require_108969__(4940);
                var $max = GetIntrinsic('%Math.max%');
                module1.exports = function callBind(originalFunction) {
                    if (typeof originalFunction !== 'function') {
                        throw new $TypeError('a function is required');
                    }
                    var func = $reflectApply(bind, $call, arguments);
                    return setFunctionLength(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);
                };
                var applyBind = function applyBind() {
                    return $reflectApply(bind, $apply, arguments);
                };
                if ($defineProperty) {
                    $defineProperty(module1.exports, 'apply', {
                        value: applyBind
                    });
                } else {
                    module1.exports.apply = applyBind;
                }
            /***/ },
            /***/ 4364: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_110568__)=>{
                /*global window, global*/ var util = __nested_webpack_require_110568__(9208);
                var assert = __nested_webpack_require_110568__(6093);
                function now() {
                    return new Date().getTime();
                }
                var slice = Array.prototype.slice;
                var console;
                var times = {};
                if (typeof __nested_webpack_require_110568__.g !== "undefined" && __nested_webpack_require_110568__.g.console) {
                    console = __nested_webpack_require_110568__.g.console;
                } else if (typeof window !== "undefined" && window.console) {
                    console = window.console;
                } else {
                    console = {};
                }
                var functions = [
                    [
                        log,
                        "log"
                    ],
                    [
                        info,
                        "info"
                    ],
                    [
                        warn,
                        "warn"
                    ],
                    [
                        error,
                        "error"
                    ],
                    [
                        time,
                        "time"
                    ],
                    [
                        timeEnd,
                        "timeEnd"
                    ],
                    [
                        trace,
                        "trace"
                    ],
                    [
                        dir,
                        "dir"
                    ],
                    [
                        consoleAssert,
                        "assert"
                    ]
                ];
                for(var i = 0; i < functions.length; i++){
                    var tuple = functions[i];
                    var f = tuple[0];
                    var name = tuple[1];
                    if (!console[name]) {
                        console[name] = f;
                    }
                }
                module1.exports = console;
                function log() {}
                function info() {
                    console.log.apply(console, arguments);
                }
                function warn() {
                    console.log.apply(console, arguments);
                }
                function error() {
                    console.warn.apply(console, arguments);
                }
                function time(label) {
                    times[label] = now();
                }
                function timeEnd(label) {
                    var time = times[label];
                    if (!time) {
                        throw new Error("No such label: " + label);
                    }
                    delete times[label];
                    var duration = now() - time;
                    console.log(label + ": " + duration + "ms");
                }
                function trace() {
                    var err = new Error();
                    err.name = "Trace";
                    err.message = util.format.apply(null, arguments);
                    console.error(err.stack);
                }
                function dir(object) {
                    console.log(util.inspect(object) + "\n");
                }
                function consoleAssert(expression) {
                    if (!expression) {
                        var arr = slice.call(arguments, 1);
                        assert.ok(false, util.format.apply(null, arr));
                    }
                }
            /***/ },
            /***/ 686: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_114250__)=>{
                "use strict";
                var $defineProperty = __nested_webpack_require_114250__(4940);
                var $SyntaxError = __nested_webpack_require_114250__(5731);
                var $TypeError = __nested_webpack_require_114250__(3468);
                var gopd = __nested_webpack_require_114250__(9336);
                /** @type {import('.')} */ module1.exports = function defineDataProperty(obj, property, value) {
                    if (!obj || typeof obj !== 'object' && typeof obj !== 'function') {
                        throw new $TypeError('`obj` must be an object or a function`');
                    }
                    if (typeof property !== 'string' && typeof property !== 'symbol') {
                        throw new $TypeError('`property` must be a string or a symbol`');
                    }
                    if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
                        throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
                    }
                    if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
                        throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
                    }
                    if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
                        throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
                    }
                    if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
                        throw new $TypeError('`loose`, if provided, must be a boolean');
                    }
                    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
                    var nonWritable = arguments.length > 4 ? arguments[4] : null;
                    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
                    var loose = arguments.length > 6 ? arguments[6] : false;
                    /* @type {false | TypedPropertyDescriptor<unknown>} */ var desc = !!gopd && gopd(obj, property);
                    if ($defineProperty) {
                        $defineProperty(obj, property, {
                            configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
                            enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
                            value: value,
                            writable: nonWritable === null && desc ? desc.writable : !nonWritable
                        });
                    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
                        // must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
                        obj[property] = value; // eslint-disable-line no-param-reassign
                    } else {
                        throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
                    }
                };
            /***/ },
            /***/ 1857: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_117538__)=>{
                "use strict";
                var keys = __nested_webpack_require_117538__(9228);
                var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
                var toStr = Object.prototype.toString;
                var concat = Array.prototype.concat;
                var origDefineProperty = Object.defineProperty;
                var isFunction = function(fn) {
                    return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
                };
                var hasPropertyDescriptors = __nested_webpack_require_117538__(7239)();
                var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;
                var defineProperty = function(object, name, value, predicate) {
                    if (name in object) {
                        if (predicate === true) {
                            if (object[name] === value) {
                                return;
                            }
                        } else if (!isFunction(predicate) || !predicate()) {
                            return;
                        }
                    }
                    if (supportsDescriptors) {
                        origDefineProperty(object, name, {
                            configurable: true,
                            enumerable: false,
                            value: value,
                            writable: true
                        });
                    } else {
                        object[name] = value; // eslint-disable-line no-param-reassign
                    }
                };
                var defineProperties = function(object, map) {
                    var predicates = arguments.length > 2 ? arguments[2] : {};
                    var props = keys(map);
                    if (hasSymbols) {
                        props = concat.call(props, Object.getOwnPropertySymbols(map));
                    }
                    for(var i = 0; i < props.length; i += 1){
                        defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
                    }
                };
                defineProperties.supportsDescriptors = !!supportsDescriptors;
                module1.exports = defineProperties;
            /***/ },
            /***/ 4940: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_119921__)=>{
                "use strict";
                var GetIntrinsic = __nested_webpack_require_119921__(528);
                /** @type {import('.')} */ var $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;
                if ($defineProperty) {
                    try {
                        $defineProperty({}, 'a', {
                            value: 1
                        });
                    } catch (e) {
                        // IE 8 has a broken defineProperty
                        $defineProperty = false;
                    }
                }
                module1.exports = $defineProperty;
            /***/ },
            /***/ 9110: /***/ (module1)=>{
                "use strict";
                /** @type {import('./eval')} */ module1.exports = EvalError;
            /***/ },
            /***/ 9838: /***/ (module1)=>{
                "use strict";
                /** @type {import('.')} */ module1.exports = Error;
            /***/ },
            /***/ 1155: /***/ (module1)=>{
                "use strict";
                /** @type {import('./range')} */ module1.exports = RangeError;
            /***/ },
            /***/ 4943: /***/ (module1)=>{
                "use strict";
                /** @type {import('./ref')} */ module1.exports = ReferenceError;
            /***/ },
            /***/ 5731: /***/ (module1)=>{
                "use strict";
                /** @type {import('./syntax')} */ module1.exports = SyntaxError;
            /***/ },
            /***/ 3468: /***/ (module1)=>{
                "use strict";
                /** @type {import('./type')} */ module1.exports = TypeError;
            /***/ },
            /***/ 2140: /***/ (module1)=>{
                "use strict";
                /** @type {import('./uri')} */ module1.exports = URIError;
            /***/ },
            /***/ 3046: /***/ (module1)=>{
                "use strict";
                /**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */ function assign(target, firstSource) {
                    if (target === undefined || target === null) {
                        throw new TypeError('Cannot convert first argument to object');
                    }
                    var to = Object(target);
                    for(var i = 1; i < arguments.length; i++){
                        var nextSource = arguments[i];
                        if (nextSource === undefined || nextSource === null) {
                            continue;
                        }
                        var keysArray = Object.keys(Object(nextSource));
                        for(var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++){
                            var nextKey = keysArray[nextIndex];
                            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                            if (desc !== undefined && desc.enumerable) {
                                to[nextKey] = nextSource[nextKey];
                            }
                        }
                    }
                    return to;
                }
                function polyfill() {
                    if (!Object.assign) {
                        Object.defineProperty(Object, 'assign', {
                            enumerable: false,
                            configurable: true,
                            writable: true,
                            value: assign
                        });
                    }
                }
                module1.exports = {
                    assign: assign,
                    polyfill: polyfill
                };
            /***/ },
            /***/ 705: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_123767__)=>{
                "use strict";
                var isCallable = __nested_webpack_require_123767__(9617);
                var toStr = Object.prototype.toString;
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var forEachArray = function forEachArray(array, iterator, receiver) {
                    for(var i = 0, len = array.length; i < len; i++){
                        if (hasOwnProperty.call(array, i)) {
                            if (receiver == null) {
                                iterator(array[i], i, array);
                            } else {
                                iterator.call(receiver, array[i], i, array);
                            }
                        }
                    }
                };
                var forEachString = function forEachString(string, iterator, receiver) {
                    for(var i = 0, len = string.length; i < len; i++){
                        // no such thing as a sparse string.
                        if (receiver == null) {
                            iterator(string.charAt(i), i, string);
                        } else {
                            iterator.call(receiver, string.charAt(i), i, string);
                        }
                    }
                };
                var forEachObject = function forEachObject(object, iterator, receiver) {
                    for(var k in object){
                        if (hasOwnProperty.call(object, k)) {
                            if (receiver == null) {
                                iterator(object[k], k, object);
                            } else {
                                iterator.call(receiver, object[k], k, object);
                            }
                        }
                    }
                };
                var forEach = function forEach(list, iterator, thisArg) {
                    if (!isCallable(iterator)) {
                        throw new TypeError('iterator must be a function');
                    }
                    var receiver;
                    if (arguments.length >= 3) {
                        receiver = thisArg;
                    }
                    if (toStr.call(list) === '[object Array]') {
                        forEachArray(list, iterator, receiver);
                    } else if (typeof list === 'string') {
                        forEachString(list, iterator, receiver);
                    } else {
                        forEachObject(list, iterator, receiver);
                    }
                };
                module1.exports = forEach;
            /***/ },
            /***/ 8794: /***/ (module1)=>{
                "use strict";
                /* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
                var toStr = Object.prototype.toString;
                var max = Math.max;
                var funcType = '[object Function]';
                var concatty = function concatty(a, b) {
                    var arr = [];
                    for(var i = 0; i < a.length; i += 1){
                        arr[i] = a[i];
                    }
                    for(var j = 0; j < b.length; j += 1){
                        arr[j + a.length] = b[j];
                    }
                    return arr;
                };
                var slicy = function slicy(arrLike, offset) {
                    var arr = [];
                    for(var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1){
                        arr[j] = arrLike[i];
                    }
                    return arr;
                };
                var joiny = function(arr, joiner) {
                    var str = '';
                    for(var i = 0; i < arr.length; i += 1){
                        str += arr[i];
                        if (i + 1 < arr.length) {
                            str += joiner;
                        }
                    }
                    return str;
                };
                module1.exports = function bind(that) {
                    var target = this;
                    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
                        throw new TypeError(ERROR_MESSAGE + target);
                    }
                    var args = slicy(arguments, 1);
                    var bound;
                    var binder = function() {
                        if (this instanceof bound) {
                            var result = target.apply(this, concatty(args, arguments));
                            if (Object(result) === result) {
                                return result;
                            }
                            return this;
                        }
                        return target.apply(that, concatty(args, arguments));
                    };
                    var boundLength = max(0, target.length - args.length);
                    var boundArgs = [];
                    for(var i = 0; i < boundLength; i++){
                        boundArgs[i] = '$' + i;
                    }
                    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);
                    if (target.prototype) {
                        var Empty = function Empty() {};
                        Empty.prototype = target.prototype;
                        bound.prototype = new Empty();
                        Empty.prototype = null;
                    }
                    return bound;
                };
            /***/ },
            /***/ 9138: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_129486__)=>{
                "use strict";
                var implementation = __nested_webpack_require_129486__(8794);
                module1.exports = Function.prototype.bind || implementation;
            /***/ },
            /***/ 528: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_129767__)=>{
                "use strict";
                var undefined1;
                var $Error = __nested_webpack_require_129767__(9838);
                var $EvalError = __nested_webpack_require_129767__(9110);
                var $RangeError = __nested_webpack_require_129767__(1155);
                var $ReferenceError = __nested_webpack_require_129767__(4943);
                var $SyntaxError = __nested_webpack_require_129767__(5731);
                var $TypeError = __nested_webpack_require_129767__(3468);
                var $URIError = __nested_webpack_require_129767__(2140);
                var $Function = Function;
                // eslint-disable-next-line consistent-return
                var getEvalledConstructor = function(expressionSyntax) {
                    try {
                        return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
                    } catch (e) {}
                };
                var $gOPD = Object.getOwnPropertyDescriptor;
                if ($gOPD) {
                    try {
                        $gOPD({}, '');
                    } catch (e) {
                        $gOPD = null; // this is IE 8, which has a broken gOPD
                    }
                }
                var throwTypeError = function() {
                    throw new $TypeError();
                };
                var ThrowTypeError = $gOPD ? function() {
                    try {
                        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
                        arguments.callee; // IE 8 does not throw here
                        return throwTypeError;
                    } catch (calleeThrows) {
                        try {
                            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
                            return $gOPD(arguments, 'callee').get;
                        } catch (gOPDthrows) {
                            return throwTypeError;
                        }
                    }
                }() : throwTypeError;
                var hasSymbols = __nested_webpack_require_129767__(3558)();
                var hasProto = __nested_webpack_require_129767__(6869)();
                var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
                    return x.__proto__;
                } // eslint-disable-line no-proto
                 : null);
                var needsEval = {};
                var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined1 : getProto(Uint8Array);
                var INTRINSICS = {
                    __proto__: null,
                    '%AggregateError%': typeof AggregateError === 'undefined' ? undefined1 : AggregateError,
                    '%Array%': Array,
                    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined1 : ArrayBuffer,
                    '%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined1,
                    '%AsyncFromSyncIteratorPrototype%': undefined1,
                    '%AsyncFunction%': needsEval,
                    '%AsyncGenerator%': needsEval,
                    '%AsyncGeneratorFunction%': needsEval,
                    '%AsyncIteratorPrototype%': needsEval,
                    '%Atomics%': typeof Atomics === 'undefined' ? undefined1 : Atomics,
                    '%BigInt%': typeof BigInt === 'undefined' ? undefined1 : BigInt,
                    '%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined1 : BigInt64Array,
                    '%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined1 : BigUint64Array,
                    '%Boolean%': Boolean,
                    '%DataView%': typeof DataView === 'undefined' ? undefined1 : DataView,
                    '%Date%': Date,
                    '%decodeURI%': decodeURI,
                    '%decodeURIComponent%': decodeURIComponent,
                    '%encodeURI%': encodeURI,
                    '%encodeURIComponent%': encodeURIComponent,
                    '%Error%': $Error,
                    '%eval%': eval,
                    '%EvalError%': $EvalError,
                    '%Float32Array%': typeof Float32Array === 'undefined' ? undefined1 : Float32Array,
                    '%Float64Array%': typeof Float64Array === 'undefined' ? undefined1 : Float64Array,
                    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined1 : FinalizationRegistry,
                    '%Function%': $Function,
                    '%GeneratorFunction%': needsEval,
                    '%Int8Array%': typeof Int8Array === 'undefined' ? undefined1 : Int8Array,
                    '%Int16Array%': typeof Int16Array === 'undefined' ? undefined1 : Int16Array,
                    '%Int32Array%': typeof Int32Array === 'undefined' ? undefined1 : Int32Array,
                    '%isFinite%': isFinite,
                    '%isNaN%': isNaN,
                    '%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined1,
                    '%JSON%': typeof JSON === 'object' ? JSON : undefined1,
                    '%Map%': typeof Map === 'undefined' ? undefined1 : Map,
                    '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined1 : getProto(new Map()[Symbol.iterator]()),
                    '%Math%': Math,
                    '%Number%': Number,
                    '%Object%': Object,
                    '%parseFloat%': parseFloat,
                    '%parseInt%': parseInt,
                    '%Promise%': typeof Promise === 'undefined' ? undefined1 : Promise,
                    '%Proxy%': typeof Proxy === 'undefined' ? undefined1 : Proxy,
                    '%RangeError%': $RangeError,
                    '%ReferenceError%': $ReferenceError,
                    '%Reflect%': typeof Reflect === 'undefined' ? undefined1 : Reflect,
                    '%RegExp%': RegExp,
                    '%Set%': typeof Set === 'undefined' ? undefined1 : Set,
                    '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined1 : getProto(new Set()[Symbol.iterator]()),
                    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined1 : SharedArrayBuffer,
                    '%String%': String,
                    '%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined1,
                    '%Symbol%': hasSymbols ? Symbol : undefined1,
                    '%SyntaxError%': $SyntaxError,
                    '%ThrowTypeError%': ThrowTypeError,
                    '%TypedArray%': TypedArray,
                    '%TypeError%': $TypeError,
                    '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined1 : Uint8Array,
                    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined1 : Uint8ClampedArray,
                    '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined1 : Uint16Array,
                    '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined1 : Uint32Array,
                    '%URIError%': $URIError,
                    '%WeakMap%': typeof WeakMap === 'undefined' ? undefined1 : WeakMap,
                    '%WeakRef%': typeof WeakRef === 'undefined' ? undefined1 : WeakRef,
                    '%WeakSet%': typeof WeakSet === 'undefined' ? undefined1 : WeakSet
                };
                if (getProto) {
                    try {
                        null.error; // eslint-disable-line no-unused-expressions
                    } catch (e) {
                        // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
                        var errorProto = getProto(getProto(e));
                        INTRINSICS['%Error.prototype%'] = errorProto;
                    }
                }
                var doEval = function doEval(name) {
                    var value;
                    if (name === '%AsyncFunction%') {
                        value = getEvalledConstructor('async function () {}');
                    } else if (name === '%GeneratorFunction%') {
                        value = getEvalledConstructor('function* () {}');
                    } else if (name === '%AsyncGeneratorFunction%') {
                        value = getEvalledConstructor('async function* () {}');
                    } else if (name === '%AsyncGenerator%') {
                        var fn = doEval('%AsyncGeneratorFunction%');
                        if (fn) {
                            value = fn.prototype;
                        }
                    } else if (name === '%AsyncIteratorPrototype%') {
                        var gen = doEval('%AsyncGenerator%');
                        if (gen && getProto) {
                            value = getProto(gen.prototype);
                        }
                    }
                    INTRINSICS[name] = value;
                    return value;
                };
                var LEGACY_ALIASES = {
                    __proto__: null,
                    '%ArrayBufferPrototype%': [
                        'ArrayBuffer',
                        'prototype'
                    ],
                    '%ArrayPrototype%': [
                        'Array',
                        'prototype'
                    ],
                    '%ArrayProto_entries%': [
                        'Array',
                        'prototype',
                        'entries'
                    ],
                    '%ArrayProto_forEach%': [
                        'Array',
                        'prototype',
                        'forEach'
                    ],
                    '%ArrayProto_keys%': [
                        'Array',
                        'prototype',
                        'keys'
                    ],
                    '%ArrayProto_values%': [
                        'Array',
                        'prototype',
                        'values'
                    ],
                    '%AsyncFunctionPrototype%': [
                        'AsyncFunction',
                        'prototype'
                    ],
                    '%AsyncGenerator%': [
                        'AsyncGeneratorFunction',
                        'prototype'
                    ],
                    '%AsyncGeneratorPrototype%': [
                        'AsyncGeneratorFunction',
                        'prototype',
                        'prototype'
                    ],
                    '%BooleanPrototype%': [
                        'Boolean',
                        'prototype'
                    ],
                    '%DataViewPrototype%': [
                        'DataView',
                        'prototype'
                    ],
                    '%DatePrototype%': [
                        'Date',
                        'prototype'
                    ],
                    '%ErrorPrototype%': [
                        'Error',
                        'prototype'
                    ],
                    '%EvalErrorPrototype%': [
                        'EvalError',
                        'prototype'
                    ],
                    '%Float32ArrayPrototype%': [
                        'Float32Array',
                        'prototype'
                    ],
                    '%Float64ArrayPrototype%': [
                        'Float64Array',
                        'prototype'
                    ],
                    '%FunctionPrototype%': [
                        'Function',
                        'prototype'
                    ],
                    '%Generator%': [
                        'GeneratorFunction',
                        'prototype'
                    ],
                    '%GeneratorPrototype%': [
                        'GeneratorFunction',
                        'prototype',
                        'prototype'
                    ],
                    '%Int8ArrayPrototype%': [
                        'Int8Array',
                        'prototype'
                    ],
                    '%Int16ArrayPrototype%': [
                        'Int16Array',
                        'prototype'
                    ],
                    '%Int32ArrayPrototype%': [
                        'Int32Array',
                        'prototype'
                    ],
                    '%JSONParse%': [
                        'JSON',
                        'parse'
                    ],
                    '%JSONStringify%': [
                        'JSON',
                        'stringify'
                    ],
                    '%MapPrototype%': [
                        'Map',
                        'prototype'
                    ],
                    '%NumberPrototype%': [
                        'Number',
                        'prototype'
                    ],
                    '%ObjectPrototype%': [
                        'Object',
                        'prototype'
                    ],
                    '%ObjProto_toString%': [
                        'Object',
                        'prototype',
                        'toString'
                    ],
                    '%ObjProto_valueOf%': [
                        'Object',
                        'prototype',
                        'valueOf'
                    ],
                    '%PromisePrototype%': [
                        'Promise',
                        'prototype'
                    ],
                    '%PromiseProto_then%': [
                        'Promise',
                        'prototype',
                        'then'
                    ],
                    '%Promise_all%': [
                        'Promise',
                        'all'
                    ],
                    '%Promise_reject%': [
                        'Promise',
                        'reject'
                    ],
                    '%Promise_resolve%': [
                        'Promise',
                        'resolve'
                    ],
                    '%RangeErrorPrototype%': [
                        'RangeError',
                        'prototype'
                    ],
                    '%ReferenceErrorPrototype%': [
                        'ReferenceError',
                        'prototype'
                    ],
                    '%RegExpPrototype%': [
                        'RegExp',
                        'prototype'
                    ],
                    '%SetPrototype%': [
                        'Set',
                        'prototype'
                    ],
                    '%SharedArrayBufferPrototype%': [
                        'SharedArrayBuffer',
                        'prototype'
                    ],
                    '%StringPrototype%': [
                        'String',
                        'prototype'
                    ],
                    '%SymbolPrototype%': [
                        'Symbol',
                        'prototype'
                    ],
                    '%SyntaxErrorPrototype%': [
                        'SyntaxError',
                        'prototype'
                    ],
                    '%TypedArrayPrototype%': [
                        'TypedArray',
                        'prototype'
                    ],
                    '%TypeErrorPrototype%': [
                        'TypeError',
                        'prototype'
                    ],
                    '%Uint8ArrayPrototype%': [
                        'Uint8Array',
                        'prototype'
                    ],
                    '%Uint8ClampedArrayPrototype%': [
                        'Uint8ClampedArray',
                        'prototype'
                    ],
                    '%Uint16ArrayPrototype%': [
                        'Uint16Array',
                        'prototype'
                    ],
                    '%Uint32ArrayPrototype%': [
                        'Uint32Array',
                        'prototype'
                    ],
                    '%URIErrorPrototype%': [
                        'URIError',
                        'prototype'
                    ],
                    '%WeakMapPrototype%': [
                        'WeakMap',
                        'prototype'
                    ],
                    '%WeakSetPrototype%': [
                        'WeakSet',
                        'prototype'
                    ]
                };
                var bind = __nested_webpack_require_129767__(9138);
                var hasOwn = __nested_webpack_require_129767__(8554);
                var $concat = bind.call(Function.call, Array.prototype.concat);
                var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
                var $replace = bind.call(Function.call, String.prototype.replace);
                var $strSlice = bind.call(Function.call, String.prototype.slice);
                var $exec = bind.call(Function.call, RegExp.prototype.exec);
                /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
                var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
                var stringToPath = function stringToPath(string) {
                    var first = $strSlice(string, 0, 1);
                    var last = $strSlice(string, -1);
                    if (first === '%' && last !== '%') {
                        throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
                    } else if (last === '%' && first !== '%') {
                        throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
                    }
                    var result = [];
                    $replace(string, rePropName, function(match, number, quote, subString) {
                        result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
                    });
                    return result;
                };
                /* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
                    var intrinsicName = name;
                    var alias;
                    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
                        alias = LEGACY_ALIASES[intrinsicName];
                        intrinsicName = '%' + alias[0] + '%';
                    }
                    if (hasOwn(INTRINSICS, intrinsicName)) {
                        var value = INTRINSICS[intrinsicName];
                        if (value === needsEval) {
                            value = doEval(intrinsicName);
                        }
                        if (typeof value === 'undefined' && !allowMissing) {
                            throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
                        }
                        return {
                            alias: alias,
                            name: intrinsicName,
                            value: value
                        };
                    }
                    throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
                };
                module1.exports = function GetIntrinsic(name, allowMissing) {
                    if (typeof name !== 'string' || name.length === 0) {
                        throw new $TypeError('intrinsic name must be a non-empty string');
                    }
                    if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
                        throw new $TypeError('"allowMissing" argument must be a boolean');
                    }
                    if ($exec(/^%?[^%]*%?$/, name) === null) {
                        throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
                    }
                    var parts = stringToPath(name);
                    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
                    var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
                    var intrinsicRealName = intrinsic.name;
                    var value = intrinsic.value;
                    var skipFurtherCaching = false;
                    var alias = intrinsic.alias;
                    if (alias) {
                        intrinsicBaseName = alias[0];
                        $spliceApply(parts, $concat([
                            0,
                            1
                        ], alias));
                    }
                    for(var i = 1, isOwn = true; i < parts.length; i += 1){
                        var part = parts[i];
                        var first = $strSlice(part, 0, 1);
                        var last = $strSlice(part, -1);
                        if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
                            throw new $SyntaxError('property names with quotes must have matching quotes');
                        }
                        if (part === 'constructor' || !isOwn) {
                            skipFurtherCaching = true;
                        }
                        intrinsicBaseName += '.' + part;
                        intrinsicRealName = '%' + intrinsicBaseName + '%';
                        if (hasOwn(INTRINSICS, intrinsicRealName)) {
                            value = INTRINSICS[intrinsicRealName];
                        } else if (value != null) {
                            if (!(part in value)) {
                                if (!allowMissing) {
                                    throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
                                }
                                return void undefined1;
                            }
                            if ($gOPD && i + 1 >= parts.length) {
                                var desc = $gOPD(value, part);
                                isOwn = !!desc;
                                // By convention, when a data property is converted to an accessor
                                // property to emulate a data property that does not suffer from
                                // the override mistake, that accessor's getter is marked with
                                // an `originalValue` property. Here, when we detect this, we
                                // uphold the illusion by pretending to see that original data
                                // property, i.e., returning the value rather than the getter
                                // itself.
                                if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
                                    value = desc.get;
                                } else {
                                    value = value[part];
                                }
                            } else {
                                isOwn = hasOwn(value, part);
                                value = value[part];
                            }
                            if (isOwn && !skipFurtherCaching) {
                                INTRINSICS[intrinsicRealName] = value;
                            }
                        }
                    }
                    return value;
                };
            /***/ },
            /***/ 9336: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_153645__)=>{
                "use strict";
                var GetIntrinsic = __nested_webpack_require_153645__(528);
                var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
                if ($gOPD) {
                    try {
                        $gOPD([], 'length');
                    } catch (e) {
                        // IE 8 has a broken gOPD
                        $gOPD = null;
                    }
                }
                module1.exports = $gOPD;
            /***/ },
            /***/ 7239: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_154235__)=>{
                "use strict";
                var $defineProperty = __nested_webpack_require_154235__(4940);
                var hasPropertyDescriptors = function hasPropertyDescriptors() {
                    return !!$defineProperty;
                };
                hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
                    // node v0.6 has a bug where array lengths can be Set but not Defined
                    if (!$defineProperty) {
                        return null;
                    }
                    try {
                        return $defineProperty([], 'length', {
                            value: 1
                        }).length !== 1;
                    } catch (e) {
                        // In Firefox 4-22, defining length on an array throws an exception.
                        return true;
                    }
                };
                module1.exports = hasPropertyDescriptors;
            /***/ },
            /***/ 6869: /***/ (module1)=>{
                "use strict";
                var test = {
                    foo: {}
                };
                var $Object = Object;
                module1.exports = function hasProto() {
                    return ({
                        __proto__: test
                    }).foo === test.foo && !(({
                        __proto__: null
                    }) instanceof $Object);
                };
            /***/ },
            /***/ 3558: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_155797__)=>{
                "use strict";
                var origSymbol = typeof Symbol !== 'undefined' && Symbol;
                var hasSymbolSham = __nested_webpack_require_155797__(2908);
                module1.exports = function hasNativeSymbols() {
                    if (typeof origSymbol !== 'function') {
                        return false;
                    }
                    if (typeof Symbol !== 'function') {
                        return false;
                    }
                    if (typeof origSymbol('foo') !== 'symbol') {
                        return false;
                    }
                    if (typeof Symbol('bar') !== 'symbol') {
                        return false;
                    }
                    return hasSymbolSham();
                };
            /***/ },
            /***/ 2908: /***/ (module1)=>{
                "use strict";
                /* eslint complexity: [2, 18], max-statements: [2, 33] */ module1.exports = function hasSymbols() {
                    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
                        return false;
                    }
                    if (typeof Symbol.iterator === 'symbol') {
                        return true;
                    }
                    var obj = {};
                    var sym = Symbol('test');
                    var symObj = Object(sym);
                    if (typeof sym === 'string') {
                        return false;
                    }
                    if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
                        return false;
                    }
                    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
                        return false;
                    }
                    // temp disabled per https://github.com/ljharb/object.assign/issues/17
                    // if (sym instanceof Symbol) { return false; }
                    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
                    // if (!(symObj instanceof Symbol)) { return false; }
                    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
                    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
                    var symVal = 42;
                    obj[sym] = symVal;
                    for(sym in obj){
                        return false;
                    } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
                    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
                        return false;
                    }
                    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
                        return false;
                    }
                    var syms = Object.getOwnPropertySymbols(obj);
                    if (syms.length !== 1 || syms[0] !== sym) {
                        return false;
                    }
                    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
                        return false;
                    }
                    if (typeof Object.getOwnPropertyDescriptor === 'function') {
                        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
                        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
                            return false;
                        }
                    }
                    return true;
                };
            /***/ },
            /***/ 1913: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_159556__)=>{
                "use strict";
                var hasSymbols = __nested_webpack_require_159556__(2908);
                module1.exports = function hasToStringTagShams() {
                    return hasSymbols() && !!Symbol.toStringTag;
                };
            /***/ },
            /***/ 8554: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_159908__)=>{
                "use strict";
                var call = Function.prototype.call;
                var $hasOwn = Object.prototype.hasOwnProperty;
                var bind = __nested_webpack_require_159908__(9138);
                /** @type {import('.')} */ module1.exports = bind.call(call, $hasOwn);
            /***/ },
            /***/ 5615: /***/ (module1)=>{
                if (typeof Object.create === 'function') {
                    // implementation from standard node.js 'util' module
                    module1.exports = function inherits(ctor, superCtor) {
                        if (superCtor) {
                            ctor.super_ = superCtor;
                            ctor.prototype = Object.create(superCtor.prototype, {
                                constructor: {
                                    value: ctor,
                                    enumerable: false,
                                    writable: true,
                                    configurable: true
                                }
                            });
                        }
                    };
                } else {
                    // old school shim for old browsers
                    module1.exports = function inherits(ctor, superCtor) {
                        if (superCtor) {
                            ctor.super_ = superCtor;
                            var TempCtor = function() {};
                            TempCtor.prototype = superCtor.prototype;
                            ctor.prototype = new TempCtor();
                            ctor.prototype.constructor = ctor;
                        }
                    };
                }
            /***/ },
            /***/ 5387: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_161695__)=>{
                "use strict";
                var hasToStringTag = __nested_webpack_require_161695__(1913)();
                var callBound = __nested_webpack_require_161695__(9818);
                var $toString = callBound('Object.prototype.toString');
                var isStandardArguments = function isArguments(value) {
                    if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
                        return false;
                    }
                    return $toString(value) === '[object Arguments]';
                };
                var isLegacyArguments = function isArguments(value) {
                    if (isStandardArguments(value)) {
                        return true;
                    }
                    return value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && $toString(value) !== '[object Array]' && $toString(value.callee) === '[object Function]';
                };
                var supportsStandardArguments = function() {
                    return isStandardArguments(arguments);
                }();
                isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests
                module1.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
            /***/ },
            /***/ 9617: /***/ (module1)=>{
                "use strict";
                var fnToStr = Function.prototype.toString;
                var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
                var badArrayLike;
                var isCallableMarker;
                if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
                    try {
                        badArrayLike = Object.defineProperty({}, 'length', {
                            get: function() {
                                throw isCallableMarker;
                            }
                        });
                        isCallableMarker = {};
                        // eslint-disable-next-line no-throw-literal
                        reflectApply(function() {
                            throw 42;
                        }, null, badArrayLike);
                    } catch (_) {
                        if (_ !== isCallableMarker) {
                            reflectApply = null;
                        }
                    }
                } else {
                    reflectApply = null;
                }
                var constructorRegex = /^\s*class\b/;
                var isES6ClassFn = function isES6ClassFunction(value) {
                    try {
                        var fnStr = fnToStr.call(value);
                        return constructorRegex.test(fnStr);
                    } catch (e) {
                        return false; // not a function
                    }
                };
                var tryFunctionObject = function tryFunctionToStr(value) {
                    try {
                        if (isES6ClassFn(value)) {
                            return false;
                        }
                        fnToStr.call(value);
                        return true;
                    } catch (e) {
                        return false;
                    }
                };
                var toStr = Object.prototype.toString;
                var objectClass = '[object Object]';
                var fnClass = '[object Function]';
                var genClass = '[object GeneratorFunction]';
                var ddaClass = '[object HTMLAllCollection]'; // IE 11
                var ddaClass2 = '[object HTML document.all class]';
                var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
                var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
                var isIE68 = !(0 in [
                    , 
                ]); // eslint-disable-line no-sparse-arrays, comma-spacing
                var isDDA = function isDocumentDotAll() {
                    return false;
                };
                if (typeof document === 'object') {
                    // Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
                    var all = document.all;
                    if (toStr.call(all) === toStr.call(document.all)) {
                        isDDA = function isDocumentDotAll(value) {
                            /* globals document: false */ // in IE 6-8, typeof document.all is "object" and it's truthy
                            if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
                                try {
                                    var str = toStr.call(value);
                                    return (str === ddaClass || str === ddaClass2 || str === ddaClass3 // opera 12.16
                                     || str === objectClass // IE 6-8
                                    ) && value('') == null; // eslint-disable-line eqeqeq
                                } catch (e) {}
                            }
                            return false;
                        };
                    }
                }
                module1.exports = reflectApply ? function isCallable(value) {
                    if (isDDA(value)) {
                        return true;
                    }
                    if (!value) {
                        return false;
                    }
                    if (typeof value !== 'function' && typeof value !== 'object') {
                        return false;
                    }
                    try {
                        reflectApply(value, null, badArrayLike);
                    } catch (e) {
                        if (e !== isCallableMarker) {
                            return false;
                        }
                    }
                    return !isES6ClassFn(value) && tryFunctionObject(value);
                } : function isCallable(value) {
                    if (isDDA(value)) {
                        return true;
                    }
                    if (!value) {
                        return false;
                    }
                    if (typeof value !== 'function' && typeof value !== 'object') {
                        return false;
                    }
                    if (hasToStringTag) {
                        return tryFunctionObject(value);
                    }
                    if (isES6ClassFn(value)) {
                        return false;
                    }
                    var strClass = toStr.call(value);
                    if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
                        return false;
                    }
                    return tryFunctionObject(value);
                };
            /***/ },
            /***/ 2625: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_168755__)=>{
                "use strict";
                var toStr = Object.prototype.toString;
                var fnToStr = Function.prototype.toString;
                var isFnRegex = /^\s*(?:function)?\*/;
                var hasToStringTag = __nested_webpack_require_168755__(1913)();
                var getProto = Object.getPrototypeOf;
                var getGeneratorFunc = function() {
                    if (!hasToStringTag) {
                        return false;
                    }
                    try {
                        return Function('return function*() {}')();
                    } catch (e) {}
                };
                var GeneratorFunction;
                module1.exports = function isGeneratorFunction(fn) {
                    if (typeof fn !== 'function') {
                        return false;
                    }
                    if (isFnRegex.test(fnToStr.call(fn))) {
                        return true;
                    }
                    if (!hasToStringTag) {
                        var str = toStr.call(fn);
                        return str === '[object GeneratorFunction]';
                    }
                    if (!getProto) {
                        return false;
                    }
                    if (typeof GeneratorFunction === 'undefined') {
                        var generatorFunc = getGeneratorFunc();
                        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
                    }
                    return getProto(fn) === GeneratorFunction;
                };
            /***/ },
            /***/ 8006: /***/ (module1)=>{
                "use strict";
                /* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module1.exports = function isNaN1(value) {
                    return value !== value;
                };
            /***/ },
            /***/ 7838: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_170724__)=>{
                "use strict";
                var callBind = __nested_webpack_require_170724__(8498);
                var define1 = __nested_webpack_require_170724__(1857);
                var implementation = __nested_webpack_require_170724__(8006);
                var getPolyfill = __nested_webpack_require_170724__(1591);
                var shim = __nested_webpack_require_170724__(1641);
                var polyfill = callBind(getPolyfill(), Number);
                /* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ define1(polyfill, {
                    getPolyfill: getPolyfill,
                    implementation: implementation,
                    shim: shim
                });
                module1.exports = polyfill;
            /***/ },
            /***/ 1591: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_171523__)=>{
                "use strict";
                var implementation = __nested_webpack_require_171523__(8006);
                module1.exports = function getPolyfill() {
                    if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
                        return Number.isNaN;
                    }
                    return implementation;
                };
            /***/ },
            /***/ 1641: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_171999__)=>{
                "use strict";
                var define1 = __nested_webpack_require_171999__(1857);
                var getPolyfill = __nested_webpack_require_171999__(1591);
                /* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module1.exports = function shimNumberIsNaN() {
                    var polyfill = getPolyfill();
                    define1(Number, {
                        isNaN: polyfill
                    }, {
                        isNaN: function testIsNaN() {
                            return Number.isNaN !== polyfill;
                        }
                    });
                    return polyfill;
                };
            /***/ },
            /***/ 5943: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_172767__)=>{
                "use strict";
                var whichTypedArray = __nested_webpack_require_172767__(2730);
                module1.exports = function isTypedArray(value) {
                    return !!whichTypedArray(value);
                };
            /***/ },
            /***/ 2372: /***/ (module1)=>{
                "use strict";
                var numberIsNaN = function(value) {
                    return value !== value;
                };
                module1.exports = function is(a, b) {
                    if (a === 0 && b === 0) {
                        return 1 / a === 1 / b;
                    }
                    if (a === b) {
                        return true;
                    }
                    if (numberIsNaN(a) && numberIsNaN(b)) {
                        return true;
                    }
                    return false;
                };
            /***/ },
            /***/ 5968: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_173755__)=>{
                "use strict";
                var define1 = __nested_webpack_require_173755__(1857);
                var callBind = __nested_webpack_require_173755__(8498);
                var implementation = __nested_webpack_require_173755__(2372);
                var getPolyfill = __nested_webpack_require_173755__(1937);
                var shim = __nested_webpack_require_173755__(5087);
                var polyfill = callBind(getPolyfill(), Object);
                define1(polyfill, {
                    getPolyfill: getPolyfill,
                    implementation: implementation,
                    shim: shim
                });
                module1.exports = polyfill;
            /***/ },
            /***/ 1937: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_174483__)=>{
                "use strict";
                var implementation = __nested_webpack_require_174483__(2372);
                module1.exports = function getPolyfill() {
                    return typeof Object.is === 'function' ? Object.is : implementation;
                };
            /***/ },
            /***/ 5087: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_174855__)=>{
                "use strict";
                var getPolyfill = __nested_webpack_require_174855__(1937);
                var define1 = __nested_webpack_require_174855__(1857);
                module1.exports = function shimObjectIs() {
                    var polyfill = getPolyfill();
                    define1(Object, {
                        is: polyfill
                    }, {
                        is: function testObjectIs() {
                            return Object.is !== polyfill;
                        }
                    });
                    return polyfill;
                };
            /***/ },
            /***/ 8160: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_175543__)=>{
                "use strict";
                var keysShim;
                if (!Object.keys) {
                    // modified from https://github.com/es-shims/es5-shim
                    var has = Object.prototype.hasOwnProperty;
                    var toStr = Object.prototype.toString;
                    var isArgs = __nested_webpack_require_175543__(968); // eslint-disable-line global-require
                    var isEnumerable = Object.prototype.propertyIsEnumerable;
                    var hasDontEnumBug = !isEnumerable.call({
                        toString: null
                    }, 'toString');
                    var hasProtoEnumBug = isEnumerable.call(function() {}, 'prototype');
                    var dontEnums = [
                        'toString',
                        'toLocaleString',
                        'valueOf',
                        'hasOwnProperty',
                        'isPrototypeOf',
                        'propertyIsEnumerable',
                        'constructor'
                    ];
                    var equalsConstructorPrototype = function(o) {
                        var ctor = o.constructor;
                        return ctor && ctor.prototype === o;
                    };
                    var excludedKeys = {
                        $applicationCache: true,
                        $console: true,
                        $external: true,
                        $frame: true,
                        $frameElement: true,
                        $frames: true,
                        $innerHeight: true,
                        $innerWidth: true,
                        $onmozfullscreenchange: true,
                        $onmozfullscreenerror: true,
                        $outerHeight: true,
                        $outerWidth: true,
                        $pageXOffset: true,
                        $pageYOffset: true,
                        $parent: true,
                        $scrollLeft: true,
                        $scrollTop: true,
                        $scrollX: true,
                        $scrollY: true,
                        $self: true,
                        $webkitIndexedDB: true,
                        $webkitStorageInfo: true,
                        $window: true
                    };
                    var hasAutomationEqualityBug = function() {
                        /* global window */ if (typeof window === 'undefined') {
                            return false;
                        }
                        for(var k in window){
                            try {
                                if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
                                    try {
                                        equalsConstructorPrototype(window[k]);
                                    } catch (e) {
                                        return true;
                                    }
                                }
                            } catch (e) {
                                return true;
                            }
                        }
                        return false;
                    }();
                    var equalsConstructorPrototypeIfNotBuggy = function(o) {
                        /* global window */ if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
                            return equalsConstructorPrototype(o);
                        }
                        try {
                            return equalsConstructorPrototype(o);
                        } catch (e) {
                            return false;
                        }
                    };
                    keysShim = function keys(object) {
                        var isObject = object !== null && typeof object === 'object';
                        var isFunction = toStr.call(object) === '[object Function]';
                        var isArguments = isArgs(object);
                        var isString = isObject && toStr.call(object) === '[object String]';
                        var theKeys = [];
                        if (!isObject && !isFunction && !isArguments) {
                            throw new TypeError('Object.keys called on a non-object');
                        }
                        var skipProto = hasProtoEnumBug && isFunction;
                        if (isString && object.length > 0 && !has.call(object, 0)) {
                            for(var i = 0; i < object.length; ++i){
                                theKeys.push(String(i));
                            }
                        }
                        if (isArguments && object.length > 0) {
                            for(var j = 0; j < object.length; ++j){
                                theKeys.push(String(j));
                            }
                        } else {
                            for(var name in object){
                                if (!(skipProto && name === 'prototype') && has.call(object, name)) {
                                    theKeys.push(String(name));
                                }
                            }
                        }
                        if (hasDontEnumBug) {
                            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
                            for(var k = 0; k < dontEnums.length; ++k){
                                if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
                                    theKeys.push(dontEnums[k]);
                                }
                            }
                        }
                        return theKeys;
                    };
                }
                module1.exports = keysShim;
            /***/ },
            /***/ 9228: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_181512__)=>{
                "use strict";
                var slice = Array.prototype.slice;
                var isArgs = __nested_webpack_require_181512__(968);
                var origKeys = Object.keys;
                var keysShim = origKeys ? function keys(o) {
                    return origKeys(o);
                } : __nested_webpack_require_181512__(8160);
                var originalKeys = Object.keys;
                keysShim.shim = function shimObjectKeys() {
                    if (Object.keys) {
                        var keysWorksWithArguments = function() {
                            // Safari 5.0 bug
                            var args = Object.keys(arguments);
                            return args && args.length === arguments.length;
                        }(1, 2);
                        if (!keysWorksWithArguments) {
                            Object.keys = function keys(object) {
                                if (isArgs(object)) {
                                    return originalKeys(slice.call(object));
                                }
                                return originalKeys(object);
                            };
                        }
                    } else {
                        Object.keys = keysShim;
                    }
                    return Object.keys || keysShim;
                };
                module1.exports = keysShim;
            /***/ },
            /***/ 968: /***/ (module1)=>{
                "use strict";
                var toStr = Object.prototype.toString;
                module1.exports = function isArguments(value) {
                    var str = toStr.call(value);
                    var isArgs = str === '[object Arguments]';
                    if (!isArgs) {
                        isArgs = str !== '[object Array]' && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value.callee) === '[object Function]';
                    }
                    return isArgs;
                };
            /***/ },
            /***/ 9907: /***/ (module1)=>{
                // shim for using process in browser
                var process = module1.exports = {};
                // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.
                var cachedSetTimeout;
                var cachedClearTimeout;
                function defaultSetTimout() {
                    throw new Error('setTimeout has not been defined');
                }
                function defaultClearTimeout() {
                    throw new Error('clearTimeout has not been defined');
                }
                (function() {
                    try {
                        if (typeof setTimeout === 'function') {
                            cachedSetTimeout = setTimeout;
                        } else {
                            cachedSetTimeout = defaultSetTimout;
                        }
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === 'function') {
                            cachedClearTimeout = clearTimeout;
                        } else {
                            cachedClearTimeout = defaultClearTimeout;
                        }
                    } catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                })();
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) {
                        //normal enviroments in sane situations
                        return setTimeout(fun, 0);
                    }
                    // if setTimeout wasn't available but was latter defined
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }
                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) {
                        //normal enviroments in sane situations
                        return clearTimeout(marker);
                    }
                    // if clearTimeout wasn't available but was latter defined
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                            return cachedClearTimeout.call(this, marker);
                        }
                    }
                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;
                function cleanUpNextTick() {
                    if (!draining || !currentQueue) {
                        return;
                    }
                    draining = false;
                    if (currentQueue.length) {
                        queue = currentQueue.concat(queue);
                    } else {
                        queueIndex = -1;
                    }
                    if (queue.length) {
                        drainQueue();
                    }
                }
                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;
                    var len = queue.length;
                    while(len){
                        currentQueue = queue;
                        queue = [];
                        while(++queueIndex < len){
                            if (currentQueue) {
                                currentQueue[queueIndex].run();
                            }
                        }
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }
                process.nextTick = function(fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) {
                        for(var i = 1; i < arguments.length; i++){
                            args[i - 1] = arguments[i];
                        }
                    }
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) {
                        runTimeout(drainQueue);
                    }
                };
                // v8 likes predictible objects
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function() {
                    this.fun.apply(null, this.array);
                };
                process.title = 'browser';
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = ''; // empty string to avoid regexp issues
                process.versions = {};
                function noop() {}
                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.prependListener = noop;
                process.prependOnceListener = noop;
                process.listeners = function(name) {
                    return [];
                };
                process.binding = function(name) {
                    throw new Error('process.binding is not supported');
                };
                process.cwd = function() {
                    return '/';
                };
                process.chdir = function(dir) {
                    throw new Error('process.chdir is not supported');
                };
                process.umask = function() {
                    return 0;
                };
            /***/ },
            /***/ 6108: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_191876__)=>{
                "use strict";
                var GetIntrinsic = __nested_webpack_require_191876__(528);
                var define1 = __nested_webpack_require_191876__(686);
                var hasDescriptors = __nested_webpack_require_191876__(7239)();
                var gOPD = __nested_webpack_require_191876__(9336);
                var $TypeError = __nested_webpack_require_191876__(3468);
                var $floor = GetIntrinsic('%Math.floor%');
                /** @type {import('.')} */ module1.exports = function setFunctionLength(fn, length) {
                    if (typeof fn !== 'function') {
                        throw new $TypeError('`fn` is not a function');
                    }
                    if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
                        throw new $TypeError('`length` must be a positive 32-bit integer');
                    }
                    var loose = arguments.length > 2 && !!arguments[2];
                    var functionLengthIsConfigurable = true;
                    var functionLengthIsWritable = true;
                    if ('length' in fn && gOPD) {
                        var desc = gOPD(fn, 'length');
                        if (desc && !desc.configurable) {
                            functionLengthIsConfigurable = false;
                        }
                        if (desc && !desc.writable) {
                            functionLengthIsWritable = false;
                        }
                    }
                    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
                        if (hasDescriptors) {
                            define1(/** @type {Parameters<define>[0]} */ fn, 'length', length, true, true);
                        } else {
                            define1(/** @type {Parameters<define>[0]} */ fn, 'length', length);
                        }
                    }
                    return fn;
                };
            /***/ },
            /***/ 5272: /***/ (module1)=>{
                module1.exports = function isBuffer(arg) {
                    return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
                };
            /***/ },
            /***/ 1531: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_194247__)=>{
                "use strict";
                // Currently in sync with Node.js lib/internal/util/types.js
                // https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
                var isArgumentsObject = __nested_webpack_require_194247__(5387);
                var isGeneratorFunction = __nested_webpack_require_194247__(2625);
                var whichTypedArray = __nested_webpack_require_194247__(2730);
                var isTypedArray = __nested_webpack_require_194247__(5943);
                function uncurryThis(f) {
                    return f.call.bind(f);
                }
                var BigIntSupported = typeof BigInt !== 'undefined';
                var SymbolSupported = typeof Symbol !== 'undefined';
                var ObjectToString = uncurryThis(Object.prototype.toString);
                var numberValue = uncurryThis(Number.prototype.valueOf);
                var stringValue = uncurryThis(String.prototype.valueOf);
                var booleanValue = uncurryThis(Boolean.prototype.valueOf);
                if (BigIntSupported) {
                    var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
                }
                if (SymbolSupported) {
                    var symbolValue = uncurryThis(Symbol.prototype.valueOf);
                }
                function checkBoxedPrimitive(value, prototypeValueOf) {
                    if (typeof value !== 'object') {
                        return false;
                    }
                    try {
                        prototypeValueOf(value);
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
                exports1.isArgumentsObject = isArgumentsObject;
                exports1.isGeneratorFunction = isGeneratorFunction;
                exports1.isTypedArray = isTypedArray;
                // Taken from here and modified for better browser support
                // https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
                function isPromise(input) {
                    return typeof Promise !== 'undefined' && input instanceof Promise || input !== null && typeof input === 'object' && typeof input.then === 'function' && typeof input.catch === 'function';
                }
                exports1.isPromise = isPromise;
                function isArrayBufferView(value) {
                    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
                        return ArrayBuffer.isView(value);
                    }
                    return isTypedArray(value) || isDataView(value);
                }
                exports1.isArrayBufferView = isArrayBufferView;
                function isUint8Array(value) {
                    return whichTypedArray(value) === 'Uint8Array';
                }
                exports1.isUint8Array = isUint8Array;
                function isUint8ClampedArray(value) {
                    return whichTypedArray(value) === 'Uint8ClampedArray';
                }
                exports1.isUint8ClampedArray = isUint8ClampedArray;
                function isUint16Array(value) {
                    return whichTypedArray(value) === 'Uint16Array';
                }
                exports1.isUint16Array = isUint16Array;
                function isUint32Array(value) {
                    return whichTypedArray(value) === 'Uint32Array';
                }
                exports1.isUint32Array = isUint32Array;
                function isInt8Array(value) {
                    return whichTypedArray(value) === 'Int8Array';
                }
                exports1.isInt8Array = isInt8Array;
                function isInt16Array(value) {
                    return whichTypedArray(value) === 'Int16Array';
                }
                exports1.isInt16Array = isInt16Array;
                function isInt32Array(value) {
                    return whichTypedArray(value) === 'Int32Array';
                }
                exports1.isInt32Array = isInt32Array;
                function isFloat32Array(value) {
                    return whichTypedArray(value) === 'Float32Array';
                }
                exports1.isFloat32Array = isFloat32Array;
                function isFloat64Array(value) {
                    return whichTypedArray(value) === 'Float64Array';
                }
                exports1.isFloat64Array = isFloat64Array;
                function isBigInt64Array(value) {
                    return whichTypedArray(value) === 'BigInt64Array';
                }
                exports1.isBigInt64Array = isBigInt64Array;
                function isBigUint64Array(value) {
                    return whichTypedArray(value) === 'BigUint64Array';
                }
                exports1.isBigUint64Array = isBigUint64Array;
                function isMapToString(value) {
                    return ObjectToString(value) === '[object Map]';
                }
                isMapToString.working = typeof Map !== 'undefined' && isMapToString(new Map());
                function isMap(value) {
                    if (typeof Map === 'undefined') {
                        return false;
                    }
                    return isMapToString.working ? isMapToString(value) : value instanceof Map;
                }
                exports1.isMap = isMap;
                function isSetToString(value) {
                    return ObjectToString(value) === '[object Set]';
                }
                isSetToString.working = typeof Set !== 'undefined' && isSetToString(new Set());
                function isSet(value) {
                    if (typeof Set === 'undefined') {
                        return false;
                    }
                    return isSetToString.working ? isSetToString(value) : value instanceof Set;
                }
                exports1.isSet = isSet;
                function isWeakMapToString(value) {
                    return ObjectToString(value) === '[object WeakMap]';
                }
                isWeakMapToString.working = typeof WeakMap !== 'undefined' && isWeakMapToString(new WeakMap());
                function isWeakMap(value) {
                    if (typeof WeakMap === 'undefined') {
                        return false;
                    }
                    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
                }
                exports1.isWeakMap = isWeakMap;
                function isWeakSetToString(value) {
                    return ObjectToString(value) === '[object WeakSet]';
                }
                isWeakSetToString.working = typeof WeakSet !== 'undefined' && isWeakSetToString(new WeakSet());
                function isWeakSet(value) {
                    return isWeakSetToString(value);
                }
                exports1.isWeakSet = isWeakSet;
                function isArrayBufferToString(value) {
                    return ObjectToString(value) === '[object ArrayBuffer]';
                }
                isArrayBufferToString.working = typeof ArrayBuffer !== 'undefined' && isArrayBufferToString(new ArrayBuffer());
                function isArrayBuffer(value) {
                    if (typeof ArrayBuffer === 'undefined') {
                        return false;
                    }
                    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
                }
                exports1.isArrayBuffer = isArrayBuffer;
                function isDataViewToString(value) {
                    return ObjectToString(value) === '[object DataView]';
                }
                isDataViewToString.working = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined' && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
                function isDataView(value) {
                    if (typeof DataView === 'undefined') {
                        return false;
                    }
                    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
                }
                exports1.isDataView = isDataView;
                // Store a copy of SharedArrayBuffer in case it's deleted elsewhere
                var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
                function isSharedArrayBufferToString(value) {
                    return ObjectToString(value) === '[object SharedArrayBuffer]';
                }
                function isSharedArrayBuffer(value) {
                    if (typeof SharedArrayBufferCopy === 'undefined') {
                        return false;
                    }
                    if (typeof isSharedArrayBufferToString.working === 'undefined') {
                        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
                    }
                    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
                }
                exports1.isSharedArrayBuffer = isSharedArrayBuffer;
                function isAsyncFunction(value) {
                    return ObjectToString(value) === '[object AsyncFunction]';
                }
                exports1.isAsyncFunction = isAsyncFunction;
                function isMapIterator(value) {
                    return ObjectToString(value) === '[object Map Iterator]';
                }
                exports1.isMapIterator = isMapIterator;
                function isSetIterator(value) {
                    return ObjectToString(value) === '[object Set Iterator]';
                }
                exports1.isSetIterator = isSetIterator;
                function isGeneratorObject(value) {
                    return ObjectToString(value) === '[object Generator]';
                }
                exports1.isGeneratorObject = isGeneratorObject;
                function isWebAssemblyCompiledModule(value) {
                    return ObjectToString(value) === '[object WebAssembly.Module]';
                }
                exports1.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
                function isNumberObject(value) {
                    return checkBoxedPrimitive(value, numberValue);
                }
                exports1.isNumberObject = isNumberObject;
                function isStringObject(value) {
                    return checkBoxedPrimitive(value, stringValue);
                }
                exports1.isStringObject = isStringObject;
                function isBooleanObject(value) {
                    return checkBoxedPrimitive(value, booleanValue);
                }
                exports1.isBooleanObject = isBooleanObject;
                function isBigIntObject(value) {
                    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
                }
                exports1.isBigIntObject = isBigIntObject;
                function isSymbolObject(value) {
                    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
                }
                exports1.isSymbolObject = isSymbolObject;
                function isBoxedPrimitive(value) {
                    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
                }
                exports1.isBoxedPrimitive = isBoxedPrimitive;
                function isAnyArrayBuffer(value) {
                    return typeof Uint8Array !== 'undefined' && (isArrayBuffer(value) || isSharedArrayBuffer(value));
                }
                exports1.isAnyArrayBuffer = isAnyArrayBuffer;
                [
                    'isProxy',
                    'isExternal',
                    'isModuleNamespaceObject'
                ].forEach(function(method) {
                    Object.defineProperty(exports1, method, {
                        enumerable: false,
                        value: function() {
                            throw new Error(method + ' is not supported in userland');
                        }
                    });
                });
            /***/ },
            /***/ 9208: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_206724__)=>{
                /* provided dependency */ var process = __nested_webpack_require_206724__(9907);
                /* provided dependency */ var console = __nested_webpack_require_206724__(4364);
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
                    var keys = Object.keys(obj);
                    var descriptors = {};
                    for(var i = 0; i < keys.length; i++){
                        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
                    }
                    return descriptors;
                };
                var formatRegExp = /%[sdj%]/g;
                exports1.format = function(f) {
                    if (!isString(f)) {
                        var objects = [];
                        for(var i = 0; i < arguments.length; i++){
                            objects.push(inspect(arguments[i]));
                        }
                        return objects.join(' ');
                    }
                    var i = 1;
                    var args = arguments;
                    var len = args.length;
                    var str = String(f).replace(formatRegExp, function(x) {
                        if (x === '%%') return '%';
                        if (i >= len) return x;
                        switch(x){
                            case '%s':
                                return String(args[i++]);
                            case '%d':
                                return Number(args[i++]);
                            case '%j':
                                try {
                                    return JSON.stringify(args[i++]);
                                } catch (_) {
                                    return '[Circular]';
                                }
                            default:
                                return x;
                        }
                    });
                    for(var x = args[i]; i < len; x = args[++i]){
                        if (isNull(x) || !isObject(x)) {
                            str += ' ' + x;
                        } else {
                            str += ' ' + inspect(x);
                        }
                    }
                    return str;
                };
                // Mark that a method should not be used.
                // Returns a modified function which warns once by default.
                // If --no-deprecation is set, then it is a no-op.
                exports1.deprecate = function(fn, msg) {
                    if (typeof process !== 'undefined' && process.noDeprecation === true) {
                        return fn;
                    }
                    // Allow for deprecating things in the process of starting up.
                    if (typeof process === 'undefined') {
                        return function() {
                            return exports1.deprecate(fn, msg).apply(this, arguments);
                        };
                    }
                    var warned = false;
                    function deprecated() {
                        if (!warned) {
                            if (process.throwDeprecation) {
                                throw new Error(msg);
                            } else if (process.traceDeprecation) {
                                console.trace(msg);
                            } else {
                                console.error(msg);
                            }
                            warned = true;
                        }
                        return fn.apply(this, arguments);
                    }
                    return deprecated;
                };
                var debugs = {};
                var debugEnvRegex = /^$/;
                if (process.env.NODE_DEBUG) {
                    var debugEnv = process.env.NODE_DEBUG;
                    debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&').replace(/\*/g, '.*').replace(/,/g, '$|^').toUpperCase();
                    debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
                }
                exports1.debuglog = function(set) {
                    set = set.toUpperCase();
                    if (!debugs[set]) {
                        if (debugEnvRegex.test(set)) {
                            var pid = process.pid;
                            debugs[set] = function() {
                                var msg = exports1.format.apply(exports1, arguments);
                                console.error('%s %d: %s', set, pid, msg);
                            };
                        } else {
                            debugs[set] = function() {};
                        }
                    }
                    return debugs[set];
                };
                /**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function inspect(obj, opts) {
                    // default options
                    var ctx = {
                        seen: [],
                        stylize: stylizeNoColor
                    };
                    // legacy...
                    if (arguments.length >= 3) ctx.depth = arguments[2];
                    if (arguments.length >= 4) ctx.colors = arguments[3];
                    if (isBoolean(opts)) {
                        // legacy...
                        ctx.showHidden = opts;
                    } else if (opts) {
                        // got an "options" object
                        exports1._extend(ctx, opts);
                    }
                    // set default options
                    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                    if (isUndefined(ctx.depth)) ctx.depth = 2;
                    if (isUndefined(ctx.colors)) ctx.colors = false;
                    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                    if (ctx.colors) ctx.stylize = stylizeWithColor;
                    return formatValue(ctx, obj, ctx.depth);
                }
                exports1.inspect = inspect;
                // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
                inspect.colors = {
                    'bold': [
                        1,
                        22
                    ],
                    'italic': [
                        3,
                        23
                    ],
                    'underline': [
                        4,
                        24
                    ],
                    'inverse': [
                        7,
                        27
                    ],
                    'white': [
                        37,
                        39
                    ],
                    'grey': [
                        90,
                        39
                    ],
                    'black': [
                        30,
                        39
                    ],
                    'blue': [
                        34,
                        39
                    ],
                    'cyan': [
                        36,
                        39
                    ],
                    'green': [
                        32,
                        39
                    ],
                    'magenta': [
                        35,
                        39
                    ],
                    'red': [
                        31,
                        39
                    ],
                    'yellow': [
                        33,
                        39
                    ]
                };
                // Don't use 'blue' not visible on cmd.exe
                inspect.styles = {
                    'special': 'cyan',
                    'number': 'yellow',
                    'boolean': 'yellow',
                    'undefined': 'grey',
                    'null': 'bold',
                    'string': 'green',
                    'date': 'magenta',
                    // "name": intentionally not styling
                    'regexp': 'red'
                };
                function stylizeWithColor(str, styleType) {
                    var style = inspect.styles[styleType];
                    if (style) {
                        return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
                    } else {
                        return str;
                    }
                }
                function stylizeNoColor(str, styleType) {
                    return str;
                }
                function arrayToHash(array) {
                    var hash = {};
                    array.forEach(function(val, idx) {
                        hash[val] = true;
                    });
                    return hash;
                }
                function formatValue(ctx, value, recurseTimes) {
                    // Provide a hook for user-specified inspect functions.
                    // Check that value is an object with an inspect function on it
                    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
                    value.inspect !== exports1.inspect && // Also filter out any prototype objects using the circular check.
                    !(value.constructor && value.constructor.prototype === value)) {
                        var ret = value.inspect(recurseTimes, ctx);
                        if (!isString(ret)) {
                            ret = formatValue(ctx, ret, recurseTimes);
                        }
                        return ret;
                    }
                    // Primitive types cannot have properties
                    var primitive = formatPrimitive(ctx, value);
                    if (primitive) {
                        return primitive;
                    }
                    // Look up the keys of the object.
                    var keys = Object.keys(value);
                    var visibleKeys = arrayToHash(keys);
                    if (ctx.showHidden) {
                        keys = Object.getOwnPropertyNames(value);
                    }
                    // IE doesn't make error fields non-enumerable
                    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                        return formatError(value);
                    }
                    // Some type of object without properties can be shortcutted.
                    if (keys.length === 0) {
                        if (isFunction(value)) {
                            var name = value.name ? ': ' + value.name : '';
                            return ctx.stylize('[Function' + name + ']', 'special');
                        }
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        }
                        if (isDate(value)) {
                            return ctx.stylize(Date.prototype.toString.call(value), 'date');
                        }
                        if (isError(value)) {
                            return formatError(value);
                        }
                    }
                    var base = '', array = false, braces = [
                        '{',
                        '}'
                    ];
                    // Make Array say that they are Array
                    if (isArray(value)) {
                        array = true;
                        braces = [
                            '[',
                            ']'
                        ];
                    }
                    // Make functions say that they are functions
                    if (isFunction(value)) {
                        var n = value.name ? ': ' + value.name : '';
                        base = ' [Function' + n + ']';
                    }
                    // Make RegExps say that they are RegExps
                    if (isRegExp(value)) {
                        base = ' ' + RegExp.prototype.toString.call(value);
                    }
                    // Make dates with properties first say the date
                    if (isDate(value)) {
                        base = ' ' + Date.prototype.toUTCString.call(value);
                    }
                    // Make error with message first say the error
                    if (isError(value)) {
                        base = ' ' + formatError(value);
                    }
                    if (keys.length === 0 && (!array || value.length == 0)) {
                        return braces[0] + base + braces[1];
                    }
                    if (recurseTimes < 0) {
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        } else {
                            return ctx.stylize('[Object]', 'special');
                        }
                    }
                    ctx.seen.push(value);
                    var output;
                    if (array) {
                        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                    } else {
                        output = keys.map(function(key) {
                            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                        });
                    }
                    ctx.seen.pop();
                    return reduceToSingleString(output, base, braces);
                }
                function formatPrimitive(ctx, value) {
                    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
                    if (isString(value)) {
                        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
                        return ctx.stylize(simple, 'string');
                    }
                    if (isNumber(value)) return ctx.stylize('' + value, 'number');
                    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
                    // For some reason typeof null is "object", so special case here.
                    if (isNull(value)) return ctx.stylize('null', 'null');
                }
                function formatError(value) {
                    return '[' + Error.prototype.toString.call(value) + ']';
                }
                function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                    var output = [];
                    for(var i = 0, l = value.length; i < l; ++i){
                        if (hasOwnProperty(value, String(i))) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
                        } else {
                            output.push('');
                        }
                    }
                    keys.forEach(function(key) {
                        if (!key.match(/^\d+$/)) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                        }
                    });
                    return output;
                }
                function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                    var name, str, desc;
                    desc = Object.getOwnPropertyDescriptor(value, key) || {
                        value: value[key]
                    };
                    if (desc.get) {
                        if (desc.set) {
                            str = ctx.stylize('[Getter/Setter]', 'special');
                        } else {
                            str = ctx.stylize('[Getter]', 'special');
                        }
                    } else {
                        if (desc.set) {
                            str = ctx.stylize('[Setter]', 'special');
                        }
                    }
                    if (!hasOwnProperty(visibleKeys, key)) {
                        name = '[' + key + ']';
                    }
                    if (!str) {
                        if (ctx.seen.indexOf(desc.value) < 0) {
                            if (isNull(recurseTimes)) {
                                str = formatValue(ctx, desc.value, null);
                            } else {
                                str = formatValue(ctx, desc.value, recurseTimes - 1);
                            }
                            if (str.indexOf('\n') > -1) {
                                if (array) {
                                    str = str.split('\n').map(function(line) {
                                        return '  ' + line;
                                    }).join('\n').slice(2);
                                } else {
                                    str = '\n' + str.split('\n').map(function(line) {
                                        return '   ' + line;
                                    }).join('\n');
                                }
                            }
                        } else {
                            str = ctx.stylize('[Circular]', 'special');
                        }
                    }
                    if (isUndefined(name)) {
                        if (array && key.match(/^\d+$/)) {
                            return str;
                        }
                        name = JSON.stringify('' + key);
                        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                            name = name.slice(1, -1);
                            name = ctx.stylize(name, 'name');
                        } else {
                            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                            name = ctx.stylize(name, 'string');
                        }
                    }
                    return name + ': ' + str;
                }
                function reduceToSingleString(output, base, braces) {
                    var numLinesEst = 0;
                    var length = output.reduce(function(prev, cur) {
                        numLinesEst++;
                        if (cur.indexOf('\n') >= 0) numLinesEst++;
                        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                    }, 0);
                    if (length > 60) {
                        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
                    }
                    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
                }
                // NOTE: These type checking functions intentionally don't use `instanceof`
                // because it is fragile and can be easily faked with `Object.create()`.
                exports1.types = __nested_webpack_require_206724__(1531);
                function isArray(ar) {
                    return Array.isArray(ar);
                }
                exports1.isArray = isArray;
                function isBoolean(arg) {
                    return typeof arg === 'boolean';
                }
                exports1.isBoolean = isBoolean;
                function isNull(arg) {
                    return arg === null;
                }
                exports1.isNull = isNull;
                function isNullOrUndefined(arg) {
                    return arg == null;
                }
                exports1.isNullOrUndefined = isNullOrUndefined;
                function isNumber(arg) {
                    return typeof arg === 'number';
                }
                exports1.isNumber = isNumber;
                function isString(arg) {
                    return typeof arg === 'string';
                }
                exports1.isString = isString;
                function isSymbol(arg) {
                    return typeof arg === 'symbol';
                }
                exports1.isSymbol = isSymbol;
                function isUndefined(arg) {
                    return arg === void 0;
                }
                exports1.isUndefined = isUndefined;
                function isRegExp(re) {
                    return isObject(re) && objectToString(re) === '[object RegExp]';
                }
                exports1.isRegExp = isRegExp;
                exports1.types.isRegExp = isRegExp;
                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }
                exports1.isObject = isObject;
                function isDate(d) {
                    return isObject(d) && objectToString(d) === '[object Date]';
                }
                exports1.isDate = isDate;
                exports1.types.isDate = isDate;
                function isError(e) {
                    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
                }
                exports1.isError = isError;
                exports1.types.isNativeError = isError;
                function isFunction(arg) {
                    return typeof arg === 'function';
                }
                exports1.isFunction = isFunction;
                function isPrimitive(arg) {
                    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
                    typeof arg === 'undefined';
                }
                exports1.isPrimitive = isPrimitive;
                exports1.isBuffer = __nested_webpack_require_206724__(5272);
                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }
                function pad(n) {
                    return n < 10 ? '0' + n.toString(10) : n.toString(10);
                }
                var months = [
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun',
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec'
                ];
                // 26 Feb 16:19:34
                function timestamp() {
                    var d = new Date();
                    var time = [
                        pad(d.getHours()),
                        pad(d.getMinutes()),
                        pad(d.getSeconds())
                    ].join(':');
                    return [
                        d.getDate(),
                        months[d.getMonth()],
                        time
                    ].join(' ');
                }
                // log is just a thin wrapper to console.log that prepends a timestamp
                exports1.log = function() {
                    console.log('%s - %s', timestamp(), exports1.format.apply(exports1, arguments));
                };
                /**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ exports1.inherits = __nested_webpack_require_206724__(5615);
                exports1._extend = function(origin, add) {
                    // Don't do anything if add isn't an object
                    if (!add || !isObject(add)) return origin;
                    var keys = Object.keys(add);
                    var i = keys.length;
                    while(i--){
                        origin[keys[i]] = add[keys[i]];
                    }
                    return origin;
                };
                function hasOwnProperty(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                }
                var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
                exports1.promisify = function promisify(original) {
                    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
                    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
                        var fn = original[kCustomPromisifiedSymbol];
                        if (typeof fn !== 'function') {
                            throw new TypeError('The "util.promisify.custom" argument must be of type Function');
                        }
                        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                            value: fn,
                            enumerable: false,
                            writable: false,
                            configurable: true
                        });
                        return fn;
                    }
                    function fn() {
                        var promiseResolve, promiseReject;
                        var promise = new Promise(function(resolve, reject) {
                            promiseResolve = resolve;
                            promiseReject = reject;
                        });
                        var args = [];
                        for(var i = 0; i < arguments.length; i++){
                            args.push(arguments[i]);
                        }
                        args.push(function(err, value) {
                            if (err) {
                                promiseReject(err);
                            } else {
                                promiseResolve(value);
                            }
                        });
                        try {
                            original.apply(this, args);
                        } catch (err) {
                            promiseReject(err);
                        }
                        return promise;
                    }
                    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
                    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                        value: fn,
                        enumerable: false,
                        writable: false,
                        configurable: true
                    });
                    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
                };
                exports1.promisify.custom = kCustomPromisifiedSymbol;
                function callbackifyOnRejected(reason, cb) {
                    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
                    // Because `null` is a special error value in callbacks which means "no error
                    // occurred", we error-wrap so the callback consumer can distinguish between
                    // "the promise rejected with null" or "the promise fulfilled with undefined".
                    if (!reason) {
                        var newReason = new Error('Promise was rejected with a falsy value');
                        newReason.reason = reason;
                        reason = newReason;
                    }
                    return cb(reason);
                }
                function callbackify(original) {
                    if (typeof original !== 'function') {
                        throw new TypeError('The "original" argument must be of type Function');
                    }
                    // We DO NOT return the promise as it gives the user a false sense that
                    // the promise is actually somehow related to the callback's execution
                    // and that the callback throwing will reject the promise.
                    function callbackified() {
                        var args = [];
                        for(var i = 0; i < arguments.length; i++){
                            args.push(arguments[i]);
                        }
                        var maybeCb = args.pop();
                        if (typeof maybeCb !== 'function') {
                            throw new TypeError('The last argument must be of type Function');
                        }
                        var self1 = this;
                        var cb = function() {
                            return maybeCb.apply(self1, arguments);
                        };
                        // In true node style we process the callback on `nextTick` with all the
                        // implications (stack, `uncaughtException`, `async_hooks`)
                        original.apply(this, args).then(function(ret) {
                            process.nextTick(cb.bind(null, null, ret));
                        }, function(rej) {
                            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
                        });
                    }
                    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
                    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
                    return callbackified;
                }
                exports1.callbackify = callbackify;
            /***/ },
            /***/ 6827: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_238324__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */ module1.exports = __nested_webpack_require_238324__(6729);
            /***/ },
            /***/ 6729: /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_238883__) {
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    var desc = Object.getOwnPropertyDescriptor(m, k);
                    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                        desc = {
                            enumerable: true,
                            get: function() {
                                return m[k];
                            }
                        };
                    }
                    Object.defineProperty(o, k2, desc);
                } : function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports1) {
                    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
                };
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.createMessageConnection = exports1.BrowserMessageWriter = exports1.BrowserMessageReader = void 0;
                const ril_1 = __nested_webpack_require_238883__(3312);
                // Install the browser runtime abstract.
                ril_1.default.install();
                const api_1 = __nested_webpack_require_238883__(7672);
                __exportStar(__nested_webpack_require_238883__(7672), exports1);
                class BrowserMessageReader extends api_1.AbstractMessageReader {
                    listen(callback) {
                        return this._onData.event(callback);
                    }
                    constructor(port){
                        super();
                        this._onData = new api_1.Emitter();
                        this._messageListener = (event)=>{
                            this._onData.fire(event.data);
                        };
                        port.addEventListener('error', (event)=>this.fireError(event));
                        port.onmessage = this._messageListener;
                    }
                }
                exports1.BrowserMessageReader = BrowserMessageReader;
                class BrowserMessageWriter extends api_1.AbstractMessageWriter {
                    write(msg) {
                        try {
                            this.port.postMessage(msg);
                            return Promise.resolve();
                        } catch (error) {
                            this.handleError(error, msg);
                            return Promise.reject(error);
                        }
                    }
                    handleError(error, msg) {
                        this.errorCount++;
                        this.fireError(error, msg, this.errorCount);
                    }
                    end() {}
                    constructor(port){
                        super();
                        this.port = port;
                        this.errorCount = 0;
                        port.addEventListener('error', (event)=>this.fireError(event));
                    }
                }
                exports1.BrowserMessageWriter = BrowserMessageWriter;
                function createMessageConnection(reader, writer, logger, options) {
                    if (logger === undefined) {
                        logger = api_1.NullLogger;
                    }
                    if (api_1.ConnectionStrategy.is(options)) {
                        options = {
                            connectionStrategy: options
                        };
                    }
                    return (0, api_1.createMessageConnection)(reader, writer, logger, options);
                }
                exports1.createMessageConnection = createMessageConnection;
            /***/ },
            /***/ 3312: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_243298__)=>{
                "use strict";
                /* provided dependency */ var console = __nested_webpack_require_243298__(4364);
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                const api_1 = __nested_webpack_require_243298__(7672);
                class MessageBuffer extends api_1.AbstractMessageBuffer {
                    emptyBuffer() {
                        return MessageBuffer.emptyBuffer;
                    }
                    fromString(value, _encoding) {
                        return new TextEncoder().encode(value);
                    }
                    toString(value, encoding) {
                        if (encoding === 'ascii') {
                            return this.asciiDecoder.decode(value);
                        } else {
                            return new TextDecoder(encoding).decode(value);
                        }
                    }
                    asNative(buffer, length) {
                        if (length === undefined) {
                            return buffer;
                        } else {
                            return buffer.slice(0, length);
                        }
                    }
                    allocNative(length) {
                        return new Uint8Array(length);
                    }
                    constructor(encoding = 'utf-8'){
                        super(encoding);
                        this.asciiDecoder = new TextDecoder('ascii');
                    }
                }
                MessageBuffer.emptyBuffer = new Uint8Array(0);
                class ReadableStreamWrapper {
                    onClose(listener) {
                        this.socket.addEventListener('close', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('close', listener));
                    }
                    onError(listener) {
                        this.socket.addEventListener('error', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('error', listener));
                    }
                    onEnd(listener) {
                        this.socket.addEventListener('end', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('end', listener));
                    }
                    onData(listener) {
                        return this._onData.event(listener);
                    }
                    constructor(socket){
                        this.socket = socket;
                        this._onData = new api_1.Emitter();
                        this._messageListener = (event)=>{
                            const blob = event.data;
                            blob.arrayBuffer().then((buffer)=>{
                                this._onData.fire(new Uint8Array(buffer));
                            }, ()=>{
                                (0, api_1.RAL)().console.error(`Converting blob to array buffer failed.`);
                            });
                        };
                        this.socket.addEventListener('message', this._messageListener);
                    }
                }
                class WritableStreamWrapper {
                    onClose(listener) {
                        this.socket.addEventListener('close', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('close', listener));
                    }
                    onError(listener) {
                        this.socket.addEventListener('error', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('error', listener));
                    }
                    onEnd(listener) {
                        this.socket.addEventListener('end', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('end', listener));
                    }
                    write(data, encoding) {
                        if (typeof data === 'string') {
                            if (encoding !== undefined && encoding !== 'utf-8') {
                                throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);
                            }
                            this.socket.send(data);
                        } else {
                            this.socket.send(data);
                        }
                        return Promise.resolve();
                    }
                    end() {
                        this.socket.close();
                    }
                    constructor(socket){
                        this.socket = socket;
                    }
                }
                const _textEncoder = new TextEncoder();
                const _ril = Object.freeze({
                    messageBuffer: Object.freeze({
                        create: (encoding)=>new MessageBuffer(encoding)
                    }),
                    applicationJson: Object.freeze({
                        encoder: Object.freeze({
                            name: 'application/json',
                            encode: (msg, options)=>{
                                if (options.charset !== 'utf-8') {
                                    throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);
                                }
                                return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, undefined, 0)));
                            }
                        }),
                        decoder: Object.freeze({
                            name: 'application/json',
                            decode: (buffer, options)=>{
                                if (!(buffer instanceof Uint8Array)) {
                                    throw new Error(`In a Browser environments only Uint8Arrays are supported.`);
                                }
                                return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
                            }
                        })
                    }),
                    stream: Object.freeze({
                        asReadableStream: (socket)=>new ReadableStreamWrapper(socket),
                        asWritableStream: (socket)=>new WritableStreamWrapper(socket)
                    }),
                    console: console,
                    timer: Object.freeze({
                        setTimeout (callback, ms, ...args) {
                            const handle = setTimeout(callback, ms, ...args);
                            return {
                                dispose: ()=>clearTimeout(handle)
                            };
                        },
                        setImmediate (callback, ...args) {
                            const handle = setTimeout(callback, 0, ...args);
                            return {
                                dispose: ()=>clearTimeout(handle)
                            };
                        },
                        setInterval (callback, ms, ...args) {
                            const handle = setInterval(callback, ms, ...args);
                            return {
                                dispose: ()=>clearInterval(handle)
                            };
                        }
                    })
                });
                function RIL() {
                    return _ril;
                }
                (function(RIL) {
                    function install() {
                        api_1.RAL.install(_ril);
                    }
                    RIL.install = install;
                })(RIL || (RIL = {}));
                exports1["default"] = RIL;
            /***/ },
            /***/ 7672: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_251677__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ /// <reference path="../../typings/thenable.d.ts" />
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ProgressType = exports1.ProgressToken = exports1.createMessageConnection = exports1.NullLogger = exports1.ConnectionOptions = exports1.ConnectionStrategy = exports1.AbstractMessageBuffer = exports1.WriteableStreamMessageWriter = exports1.AbstractMessageWriter = exports1.MessageWriter = exports1.ReadableStreamMessageReader = exports1.AbstractMessageReader = exports1.MessageReader = exports1.SharedArrayReceiverStrategy = exports1.SharedArraySenderStrategy = exports1.CancellationToken = exports1.CancellationTokenSource = exports1.Emitter = exports1.Event = exports1.Disposable = exports1.LRUCache = exports1.Touch = exports1.LinkedMap = exports1.ParameterStructures = exports1.NotificationType9 = exports1.NotificationType8 = exports1.NotificationType7 = exports1.NotificationType6 = exports1.NotificationType5 = exports1.NotificationType4 = exports1.NotificationType3 = exports1.NotificationType2 = exports1.NotificationType1 = exports1.NotificationType0 = exports1.NotificationType = exports1.ErrorCodes = exports1.ResponseError = exports1.RequestType9 = exports1.RequestType8 = exports1.RequestType7 = exports1.RequestType6 = exports1.RequestType5 = exports1.RequestType4 = exports1.RequestType3 = exports1.RequestType2 = exports1.RequestType1 = exports1.RequestType0 = exports1.RequestType = exports1.Message = exports1.RAL = void 0;
                exports1.MessageStrategy = exports1.CancellationStrategy = exports1.CancellationSenderStrategy = exports1.CancellationReceiverStrategy = exports1.ConnectionError = exports1.ConnectionErrors = exports1.LogTraceNotification = exports1.SetTraceNotification = exports1.TraceFormat = exports1.TraceValues = exports1.Trace = void 0;
                const messages_1 = __nested_webpack_require_251677__(7162);
                Object.defineProperty(exports1, "Message", {
                    enumerable: true,
                    get: function() {
                        return messages_1.Message;
                    }
                });
                Object.defineProperty(exports1, "RequestType", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType;
                    }
                });
                Object.defineProperty(exports1, "RequestType0", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType0;
                    }
                });
                Object.defineProperty(exports1, "RequestType1", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType1;
                    }
                });
                Object.defineProperty(exports1, "RequestType2", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType2;
                    }
                });
                Object.defineProperty(exports1, "RequestType3", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType3;
                    }
                });
                Object.defineProperty(exports1, "RequestType4", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType4;
                    }
                });
                Object.defineProperty(exports1, "RequestType5", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType5;
                    }
                });
                Object.defineProperty(exports1, "RequestType6", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType6;
                    }
                });
                Object.defineProperty(exports1, "RequestType7", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType7;
                    }
                });
                Object.defineProperty(exports1, "RequestType8", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType8;
                    }
                });
                Object.defineProperty(exports1, "RequestType9", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType9;
                    }
                });
                Object.defineProperty(exports1, "ResponseError", {
                    enumerable: true,
                    get: function() {
                        return messages_1.ResponseError;
                    }
                });
                Object.defineProperty(exports1, "ErrorCodes", {
                    enumerable: true,
                    get: function() {
                        return messages_1.ErrorCodes;
                    }
                });
                Object.defineProperty(exports1, "NotificationType", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType;
                    }
                });
                Object.defineProperty(exports1, "NotificationType0", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType0;
                    }
                });
                Object.defineProperty(exports1, "NotificationType1", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType1;
                    }
                });
                Object.defineProperty(exports1, "NotificationType2", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType2;
                    }
                });
                Object.defineProperty(exports1, "NotificationType3", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType3;
                    }
                });
                Object.defineProperty(exports1, "NotificationType4", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType4;
                    }
                });
                Object.defineProperty(exports1, "NotificationType5", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType5;
                    }
                });
                Object.defineProperty(exports1, "NotificationType6", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType6;
                    }
                });
                Object.defineProperty(exports1, "NotificationType7", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType7;
                    }
                });
                Object.defineProperty(exports1, "NotificationType8", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType8;
                    }
                });
                Object.defineProperty(exports1, "NotificationType9", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType9;
                    }
                });
                Object.defineProperty(exports1, "ParameterStructures", {
                    enumerable: true,
                    get: function() {
                        return messages_1.ParameterStructures;
                    }
                });
                const linkedMap_1 = __nested_webpack_require_251677__(1109);
                Object.defineProperty(exports1, "LinkedMap", {
                    enumerable: true,
                    get: function() {
                        return linkedMap_1.LinkedMap;
                    }
                });
                Object.defineProperty(exports1, "LRUCache", {
                    enumerable: true,
                    get: function() {
                        return linkedMap_1.LRUCache;
                    }
                });
                Object.defineProperty(exports1, "Touch", {
                    enumerable: true,
                    get: function() {
                        return linkedMap_1.Touch;
                    }
                });
                const disposable_1 = __nested_webpack_require_251677__(8844);
                Object.defineProperty(exports1, "Disposable", {
                    enumerable: true,
                    get: function() {
                        return disposable_1.Disposable;
                    }
                });
                const events_1 = __nested_webpack_require_251677__(2479);
                Object.defineProperty(exports1, "Event", {
                    enumerable: true,
                    get: function() {
                        return events_1.Event;
                    }
                });
                Object.defineProperty(exports1, "Emitter", {
                    enumerable: true,
                    get: function() {
                        return events_1.Emitter;
                    }
                });
                const cancellation_1 = __nested_webpack_require_251677__(6957);
                Object.defineProperty(exports1, "CancellationTokenSource", {
                    enumerable: true,
                    get: function() {
                        return cancellation_1.CancellationTokenSource;
                    }
                });
                Object.defineProperty(exports1, "CancellationToken", {
                    enumerable: true,
                    get: function() {
                        return cancellation_1.CancellationToken;
                    }
                });
                const sharedArrayCancellation_1 = __nested_webpack_require_251677__(3489);
                Object.defineProperty(exports1, "SharedArraySenderStrategy", {
                    enumerable: true,
                    get: function() {
                        return sharedArrayCancellation_1.SharedArraySenderStrategy;
                    }
                });
                Object.defineProperty(exports1, "SharedArrayReceiverStrategy", {
                    enumerable: true,
                    get: function() {
                        return sharedArrayCancellation_1.SharedArrayReceiverStrategy;
                    }
                });
                const messageReader_1 = __nested_webpack_require_251677__(656);
                Object.defineProperty(exports1, "MessageReader", {
                    enumerable: true,
                    get: function() {
                        return messageReader_1.MessageReader;
                    }
                });
                Object.defineProperty(exports1, "AbstractMessageReader", {
                    enumerable: true,
                    get: function() {
                        return messageReader_1.AbstractMessageReader;
                    }
                });
                Object.defineProperty(exports1, "ReadableStreamMessageReader", {
                    enumerable: true,
                    get: function() {
                        return messageReader_1.ReadableStreamMessageReader;
                    }
                });
                const messageWriter_1 = __nested_webpack_require_251677__(9036);
                Object.defineProperty(exports1, "MessageWriter", {
                    enumerable: true,
                    get: function() {
                        return messageWriter_1.MessageWriter;
                    }
                });
                Object.defineProperty(exports1, "AbstractMessageWriter", {
                    enumerable: true,
                    get: function() {
                        return messageWriter_1.AbstractMessageWriter;
                    }
                });
                Object.defineProperty(exports1, "WriteableStreamMessageWriter", {
                    enumerable: true,
                    get: function() {
                        return messageWriter_1.WriteableStreamMessageWriter;
                    }
                });
                const messageBuffer_1 = __nested_webpack_require_251677__(9805);
                Object.defineProperty(exports1, "AbstractMessageBuffer", {
                    enumerable: true,
                    get: function() {
                        return messageBuffer_1.AbstractMessageBuffer;
                    }
                });
                const connection_1 = __nested_webpack_require_251677__(4054);
                Object.defineProperty(exports1, "ConnectionStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ConnectionStrategy;
                    }
                });
                Object.defineProperty(exports1, "ConnectionOptions", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ConnectionOptions;
                    }
                });
                Object.defineProperty(exports1, "NullLogger", {
                    enumerable: true,
                    get: function() {
                        return connection_1.NullLogger;
                    }
                });
                Object.defineProperty(exports1, "createMessageConnection", {
                    enumerable: true,
                    get: function() {
                        return connection_1.createMessageConnection;
                    }
                });
                Object.defineProperty(exports1, "ProgressToken", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ProgressToken;
                    }
                });
                Object.defineProperty(exports1, "ProgressType", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ProgressType;
                    }
                });
                Object.defineProperty(exports1, "Trace", {
                    enumerable: true,
                    get: function() {
                        return connection_1.Trace;
                    }
                });
                Object.defineProperty(exports1, "TraceValues", {
                    enumerable: true,
                    get: function() {
                        return connection_1.TraceValues;
                    }
                });
                Object.defineProperty(exports1, "TraceFormat", {
                    enumerable: true,
                    get: function() {
                        return connection_1.TraceFormat;
                    }
                });
                Object.defineProperty(exports1, "SetTraceNotification", {
                    enumerable: true,
                    get: function() {
                        return connection_1.SetTraceNotification;
                    }
                });
                Object.defineProperty(exports1, "LogTraceNotification", {
                    enumerable: true,
                    get: function() {
                        return connection_1.LogTraceNotification;
                    }
                });
                Object.defineProperty(exports1, "ConnectionErrors", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ConnectionErrors;
                    }
                });
                Object.defineProperty(exports1, "ConnectionError", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ConnectionError;
                    }
                });
                Object.defineProperty(exports1, "CancellationReceiverStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.CancellationReceiverStrategy;
                    }
                });
                Object.defineProperty(exports1, "CancellationSenderStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.CancellationSenderStrategy;
                    }
                });
                Object.defineProperty(exports1, "CancellationStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.CancellationStrategy;
                    }
                });
                Object.defineProperty(exports1, "MessageStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.MessageStrategy;
                    }
                });
                const ral_1 = __nested_webpack_require_251677__(5091);
                exports1.RAL = ral_1.default;
            /***/ },
            /***/ 6957: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_269741__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.CancellationTokenSource = exports1.CancellationToken = void 0;
                const ral_1 = __nested_webpack_require_269741__(5091);
                const Is = __nested_webpack_require_269741__(6618);
                const events_1 = __nested_webpack_require_269741__(2479);
                var CancellationToken;
                (function(CancellationToken) {
                    CancellationToken.None = Object.freeze({
                        isCancellationRequested: false,
                        onCancellationRequested: events_1.Event.None
                    });
                    CancellationToken.Cancelled = Object.freeze({
                        isCancellationRequested: true,
                        onCancellationRequested: events_1.Event.None
                    });
                    function is(value) {
                        const candidate = value;
                        return candidate && (candidate === CancellationToken.None || candidate === CancellationToken.Cancelled || Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested);
                    }
                    CancellationToken.is = is;
                })(CancellationToken || (exports1.CancellationToken = CancellationToken = {}));
                const shortcutEvent = Object.freeze(function(callback, context) {
                    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
                    return {
                        dispose () {
                            handle.dispose();
                        }
                    };
                });
                class MutableToken {
                    cancel() {
                        if (!this._isCancelled) {
                            this._isCancelled = true;
                            if (this._emitter) {
                                this._emitter.fire(undefined);
                                this.dispose();
                            }
                        }
                    }
                    get isCancellationRequested() {
                        return this._isCancelled;
                    }
                    get onCancellationRequested() {
                        if (this._isCancelled) {
                            return shortcutEvent;
                        }
                        if (!this._emitter) {
                            this._emitter = new events_1.Emitter();
                        }
                        return this._emitter.event;
                    }
                    dispose() {
                        if (this._emitter) {
                            this._emitter.dispose();
                            this._emitter = undefined;
                        }
                    }
                    constructor(){
                        this._isCancelled = false;
                    }
                }
                class CancellationTokenSource {
                    get token() {
                        if (!this._token) {
                            // be lazy and create the token only when
                            // actually needed
                            this._token = new MutableToken();
                        }
                        return this._token;
                    }
                    cancel() {
                        if (!this._token) {
                            // save an object by returning the default
                            // cancelled token when cancellation happens
                            // before someone asks for the token
                            this._token = CancellationToken.Cancelled;
                        } else {
                            this._token.cancel();
                        }
                    }
                    dispose() {
                        if (!this._token) {
                            // ensure to initialize with an empty token if we had none
                            this._token = CancellationToken.None;
                        } else if (this._token instanceof MutableToken) {
                            // actually dispose
                            this._token.dispose();
                        }
                    }
                }
                exports1.CancellationTokenSource = CancellationTokenSource;
            /***/ },
            /***/ 4054: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_274666__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.createMessageConnection = exports1.ConnectionOptions = exports1.MessageStrategy = exports1.CancellationStrategy = exports1.CancellationSenderStrategy = exports1.CancellationReceiverStrategy = exports1.RequestCancellationReceiverStrategy = exports1.IdCancellationReceiverStrategy = exports1.ConnectionStrategy = exports1.ConnectionError = exports1.ConnectionErrors = exports1.LogTraceNotification = exports1.SetTraceNotification = exports1.TraceFormat = exports1.TraceValues = exports1.Trace = exports1.NullLogger = exports1.ProgressType = exports1.ProgressToken = void 0;
                const ral_1 = __nested_webpack_require_274666__(5091);
                const Is = __nested_webpack_require_274666__(6618);
                const messages_1 = __nested_webpack_require_274666__(7162);
                const linkedMap_1 = __nested_webpack_require_274666__(1109);
                const events_1 = __nested_webpack_require_274666__(2479);
                const cancellation_1 = __nested_webpack_require_274666__(6957);
                var CancelNotification;
                (function(CancelNotification) {
                    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
                })(CancelNotification || (CancelNotification = {}));
                var ProgressToken;
                (function(ProgressToken) {
                    function is(value) {
                        return typeof value === 'string' || typeof value === 'number';
                    }
                    ProgressToken.is = is;
                })(ProgressToken || (exports1.ProgressToken = ProgressToken = {}));
                var ProgressNotification;
                (function(ProgressNotification) {
                    ProgressNotification.type = new messages_1.NotificationType('$/progress');
                })(ProgressNotification || (ProgressNotification = {}));
                class ProgressType {
                    constructor(){}
                }
                exports1.ProgressType = ProgressType;
                var StarRequestHandler;
                (function(StarRequestHandler) {
                    function is(value) {
                        return Is.func(value);
                    }
                    StarRequestHandler.is = is;
                })(StarRequestHandler || (StarRequestHandler = {}));
                exports1.NullLogger = Object.freeze({
                    error: ()=>{},
                    warn: ()=>{},
                    info: ()=>{},
                    log: ()=>{}
                });
                var Trace;
                (function(Trace) {
                    Trace[Trace["Off"] = 0] = "Off";
                    Trace[Trace["Messages"] = 1] = "Messages";
                    Trace[Trace["Compact"] = 2] = "Compact";
                    Trace[Trace["Verbose"] = 3] = "Verbose";
                })(Trace || (exports1.Trace = Trace = {}));
                var TraceValues;
                (function(TraceValues) {
                    /**
     * Turn tracing off.
     */ TraceValues.Off = 'off';
                    /**
     * Trace messages only.
     */ TraceValues.Messages = 'messages';
                    /**
     * Compact message tracing.
     */ TraceValues.Compact = 'compact';
                    /**
     * Verbose message tracing.
     */ TraceValues.Verbose = 'verbose';
                })(TraceValues || (exports1.TraceValues = TraceValues = {}));
                (function(Trace) {
                    function fromString(value) {
                        if (!Is.string(value)) {
                            return Trace.Off;
                        }
                        value = value.toLowerCase();
                        switch(value){
                            case 'off':
                                return Trace.Off;
                            case 'messages':
                                return Trace.Messages;
                            case 'compact':
                                return Trace.Compact;
                            case 'verbose':
                                return Trace.Verbose;
                            default:
                                return Trace.Off;
                        }
                    }
                    Trace.fromString = fromString;
                    function toString(value) {
                        switch(value){
                            case Trace.Off:
                                return 'off';
                            case Trace.Messages:
                                return 'messages';
                            case Trace.Compact:
                                return 'compact';
                            case Trace.Verbose:
                                return 'verbose';
                            default:
                                return 'off';
                        }
                    }
                    Trace.toString = toString;
                })(Trace || (exports1.Trace = Trace = {}));
                var TraceFormat;
                (function(TraceFormat) {
                    TraceFormat["Text"] = "text";
                    TraceFormat["JSON"] = "json";
                })(TraceFormat || (exports1.TraceFormat = TraceFormat = {}));
                (function(TraceFormat) {
                    function fromString(value) {
                        if (!Is.string(value)) {
                            return TraceFormat.Text;
                        }
                        value = value.toLowerCase();
                        if (value === 'json') {
                            return TraceFormat.JSON;
                        } else {
                            return TraceFormat.Text;
                        }
                    }
                    TraceFormat.fromString = fromString;
                })(TraceFormat || (exports1.TraceFormat = TraceFormat = {}));
                var SetTraceNotification;
                (function(SetTraceNotification) {
                    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');
                })(SetTraceNotification || (exports1.SetTraceNotification = SetTraceNotification = {}));
                var LogTraceNotification;
                (function(LogTraceNotification) {
                    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');
                })(LogTraceNotification || (exports1.LogTraceNotification = LogTraceNotification = {}));
                var ConnectionErrors;
                (function(ConnectionErrors) {
                    /**
     * The connection is closed.
     */ ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
                    /**
     * The connection got disposed.
     */ ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
                    /**
     * The connection is already in listening mode.
     */ ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
                })(ConnectionErrors || (exports1.ConnectionErrors = ConnectionErrors = {}));
                class ConnectionError extends Error {
                    constructor(code, message){
                        super(message);
                        this.code = code;
                        Object.setPrototypeOf(this, ConnectionError.prototype);
                    }
                }
                exports1.ConnectionError = ConnectionError;
                var ConnectionStrategy;
                (function(ConnectionStrategy) {
                    function is(value) {
                        const candidate = value;
                        return candidate && Is.func(candidate.cancelUndispatched);
                    }
                    ConnectionStrategy.is = is;
                })(ConnectionStrategy || (exports1.ConnectionStrategy = ConnectionStrategy = {}));
                var IdCancellationReceiverStrategy;
                (function(IdCancellationReceiverStrategy) {
                    function is(value) {
                        const candidate = value;
                        return candidate && (candidate.kind === undefined || candidate.kind === 'id') && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
                    }
                    IdCancellationReceiverStrategy.is = is;
                })(IdCancellationReceiverStrategy || (exports1.IdCancellationReceiverStrategy = IdCancellationReceiverStrategy = {}));
                var RequestCancellationReceiverStrategy;
                (function(RequestCancellationReceiverStrategy) {
                    function is(value) {
                        const candidate = value;
                        return candidate && candidate.kind === 'request' && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
                    }
                    RequestCancellationReceiverStrategy.is = is;
                })(RequestCancellationReceiverStrategy || (exports1.RequestCancellationReceiverStrategy = RequestCancellationReceiverStrategy = {}));
                var CancellationReceiverStrategy;
                (function(CancellationReceiverStrategy) {
                    CancellationReceiverStrategy.Message = Object.freeze({
                        createCancellationTokenSource (_) {
                            return new cancellation_1.CancellationTokenSource();
                        }
                    });
                    function is(value) {
                        return IdCancellationReceiverStrategy.is(value) || RequestCancellationReceiverStrategy.is(value);
                    }
                    CancellationReceiverStrategy.is = is;
                })(CancellationReceiverStrategy || (exports1.CancellationReceiverStrategy = CancellationReceiverStrategy = {}));
                var CancellationSenderStrategy;
                (function(CancellationSenderStrategy) {
                    CancellationSenderStrategy.Message = Object.freeze({
                        sendCancellation (conn, id) {
                            return conn.sendNotification(CancelNotification.type, {
                                id
                            });
                        },
                        cleanup (_) {}
                    });
                    function is(value) {
                        const candidate = value;
                        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);
                    }
                    CancellationSenderStrategy.is = is;
                })(CancellationSenderStrategy || (exports1.CancellationSenderStrategy = CancellationSenderStrategy = {}));
                var CancellationStrategy;
                (function(CancellationStrategy) {
                    CancellationStrategy.Message = Object.freeze({
                        receiver: CancellationReceiverStrategy.Message,
                        sender: CancellationSenderStrategy.Message
                    });
                    function is(value) {
                        const candidate = value;
                        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
                    }
                    CancellationStrategy.is = is;
                })(CancellationStrategy || (exports1.CancellationStrategy = CancellationStrategy = {}));
                var MessageStrategy;
                (function(MessageStrategy) {
                    function is(value) {
                        const candidate = value;
                        return candidate && Is.func(candidate.handleMessage);
                    }
                    MessageStrategy.is = is;
                })(MessageStrategy || (exports1.MessageStrategy = MessageStrategy = {}));
                var ConnectionOptions;
                (function(ConnectionOptions) {
                    function is(value) {
                        const candidate = value;
                        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy) || MessageStrategy.is(candidate.messageStrategy));
                    }
                    ConnectionOptions.is = is;
                })(ConnectionOptions || (exports1.ConnectionOptions = ConnectionOptions = {}));
                var ConnectionState;
                (function(ConnectionState) {
                    ConnectionState[ConnectionState["New"] = 1] = "New";
                    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
                    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
                    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
                })(ConnectionState || (ConnectionState = {}));
                function createMessageConnection(messageReader, messageWriter, _logger, options) {
                    const logger = _logger !== undefined ? _logger : exports1.NullLogger;
                    let sequenceNumber = 0;
                    let notificationSequenceNumber = 0;
                    let unknownResponseSequenceNumber = 0;
                    const version = '2.0';
                    let starRequestHandler = undefined;
                    const requestHandlers = new Map();
                    let starNotificationHandler = undefined;
                    const notificationHandlers = new Map();
                    const progressHandlers = new Map();
                    let timer;
                    let messageQueue = new linkedMap_1.LinkedMap();
                    let responsePromises = new Map();
                    let knownCanceledRequests = new Set();
                    let requestTokens = new Map();
                    let trace = Trace.Off;
                    let traceFormat = TraceFormat.Text;
                    let tracer;
                    let state = ConnectionState.New;
                    const errorEmitter = new events_1.Emitter();
                    const closeEmitter = new events_1.Emitter();
                    const unhandledNotificationEmitter = new events_1.Emitter();
                    const unhandledProgressEmitter = new events_1.Emitter();
                    const disposeEmitter = new events_1.Emitter();
                    const cancellationStrategy = options && options.cancellationStrategy ? options.cancellationStrategy : CancellationStrategy.Message;
                    function createRequestQueueKey(id) {
                        if (id === null) {
                            throw new Error(`Can't send requests with id null since the response can't be correlated.`);
                        }
                        return 'req-' + id.toString();
                    }
                    function createResponseQueueKey(id) {
                        if (id === null) {
                            return 'res-unknown-' + (++unknownResponseSequenceNumber).toString();
                        } else {
                            return 'res-' + id.toString();
                        }
                    }
                    function createNotificationQueueKey() {
                        return 'not-' + (++notificationSequenceNumber).toString();
                    }
                    function addMessageToQueue(queue, message) {
                        if (messages_1.Message.isRequest(message)) {
                            queue.set(createRequestQueueKey(message.id), message);
                        } else if (messages_1.Message.isResponse(message)) {
                            queue.set(createResponseQueueKey(message.id), message);
                        } else {
                            queue.set(createNotificationQueueKey(), message);
                        }
                    }
                    function cancelUndispatched(_message) {
                        return undefined;
                    }
                    function isListening() {
                        return state === ConnectionState.Listening;
                    }
                    function isClosed() {
                        return state === ConnectionState.Closed;
                    }
                    function isDisposed() {
                        return state === ConnectionState.Disposed;
                    }
                    function closeHandler() {
                        if (state === ConnectionState.New || state === ConnectionState.Listening) {
                            state = ConnectionState.Closed;
                            closeEmitter.fire(undefined);
                        }
                    // If the connection is disposed don't sent close events.
                    }
                    function readErrorHandler(error) {
                        errorEmitter.fire([
                            error,
                            undefined,
                            undefined
                        ]);
                    }
                    function writeErrorHandler(data) {
                        errorEmitter.fire(data);
                    }
                    messageReader.onClose(closeHandler);
                    messageReader.onError(readErrorHandler);
                    messageWriter.onClose(closeHandler);
                    messageWriter.onError(writeErrorHandler);
                    function triggerMessageQueue() {
                        if (timer || messageQueue.size === 0) {
                            return;
                        }
                        timer = (0, ral_1.default)().timer.setImmediate(()=>{
                            timer = undefined;
                            processMessageQueue();
                        });
                    }
                    function handleMessage(message) {
                        if (messages_1.Message.isRequest(message)) {
                            handleRequest(message);
                        } else if (messages_1.Message.isNotification(message)) {
                            handleNotification(message);
                        } else if (messages_1.Message.isResponse(message)) {
                            handleResponse(message);
                        } else {
                            handleInvalidMessage(message);
                        }
                    }
                    function processMessageQueue() {
                        if (messageQueue.size === 0) {
                            return;
                        }
                        const message = messageQueue.shift();
                        try {
                            var _options;
                            const messageStrategy = (_options = options) === null || _options === void 0 ? void 0 : _options.messageStrategy;
                            if (MessageStrategy.is(messageStrategy)) {
                                messageStrategy.handleMessage(message, handleMessage);
                            } else {
                                handleMessage(message);
                            }
                        } finally{
                            triggerMessageQueue();
                        }
                    }
                    const callback = (message)=>{
                        try {
                            // We have received a cancellation message. Check if the message is still in the queue
                            // and cancel it if allowed to do so.
                            if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
                                const cancelId = message.params.id;
                                const key = createRequestQueueKey(cancelId);
                                const toCancel = messageQueue.get(key);
                                if (messages_1.Message.isRequest(toCancel)) {
                                    var _options;
                                    const strategy = (_options = options) === null || _options === void 0 ? void 0 : _options.connectionStrategy;
                                    const response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                                    if (response && (response.error !== undefined || response.result !== undefined)) {
                                        messageQueue.delete(key);
                                        requestTokens.delete(cancelId);
                                        response.id = toCancel.id;
                                        traceSendingResponse(response, message.method, Date.now());
                                        messageWriter.write(response).catch(()=>logger.error(`Sending response for canceled message failed.`));
                                        return;
                                    }
                                }
                                const cancellationToken = requestTokens.get(cancelId);
                                // The request is already running. Cancel the token
                                if (cancellationToken !== undefined) {
                                    cancellationToken.cancel();
                                    traceReceivedNotification(message);
                                    return;
                                } else {
                                    // Remember the cancel but still queue the message to
                                    // clean up state in process message.
                                    knownCanceledRequests.add(cancelId);
                                }
                            }
                            addMessageToQueue(messageQueue, message);
                        } finally{
                            triggerMessageQueue();
                        }
                    };
                    function handleRequest(requestMessage) {
                        if (isDisposed()) {
                            // we return here silently since we fired an event when the
                            // connection got disposed.
                            return;
                        }
                        function reply(resultOrError, method, startTime) {
                            const message = {
                                jsonrpc: version,
                                id: requestMessage.id
                            };
                            if (resultOrError instanceof messages_1.ResponseError) {
                                message.error = resultOrError.toJson();
                            } else {
                                message.result = resultOrError === undefined ? null : resultOrError;
                            }
                            traceSendingResponse(message, method, startTime);
                            messageWriter.write(message).catch(()=>logger.error(`Sending response failed.`));
                        }
                        function replyError(error, method, startTime) {
                            const message = {
                                jsonrpc: version,
                                id: requestMessage.id,
                                error: error.toJson()
                            };
                            traceSendingResponse(message, method, startTime);
                            messageWriter.write(message).catch(()=>logger.error(`Sending response failed.`));
                        }
                        function replySuccess(result, method, startTime) {
                            // The JSON RPC defines that a response must either have a result or an error
                            // So we can't treat undefined as a valid response result.
                            if (result === undefined) {
                                result = null;
                            }
                            const message = {
                                jsonrpc: version,
                                id: requestMessage.id,
                                result: result
                            };
                            traceSendingResponse(message, method, startTime);
                            messageWriter.write(message).catch(()=>logger.error(`Sending response failed.`));
                        }
                        traceReceivedRequest(requestMessage);
                        const element = requestHandlers.get(requestMessage.method);
                        let type;
                        let requestHandler;
                        if (element) {
                            type = element.type;
                            requestHandler = element.handler;
                        }
                        const startTime = Date.now();
                        if (requestHandler || starRequestHandler) {
                            var _requestMessage_id;
                            const tokenKey = (_requestMessage_id = requestMessage.id) !== null && _requestMessage_id !== void 0 ? _requestMessage_id : String(Date.now()); //
                            const cancellationSource = IdCancellationReceiverStrategy.is(cancellationStrategy.receiver) ? cancellationStrategy.receiver.createCancellationTokenSource(tokenKey) : cancellationStrategy.receiver.createCancellationTokenSource(requestMessage);
                            if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
                                cancellationSource.cancel();
                            }
                            if (requestMessage.id !== null) {
                                requestTokens.set(tokenKey, cancellationSource);
                            }
                            try {
                                let handlerResult;
                                if (requestHandler) {
                                    if (requestMessage.params === undefined) {
                                        if (type !== undefined && type.numberOfParams !== 0) {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);
                                            return;
                                        }
                                        handlerResult = requestHandler(cancellationSource.token);
                                    } else if (Array.isArray(requestMessage.params)) {
                                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                                            return;
                                        }
                                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                                    } else {
                                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                                            return;
                                        }
                                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                                    }
                                } else if (starRequestHandler) {
                                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                                }
                                const promise = handlerResult;
                                if (!handlerResult) {
                                    requestTokens.delete(tokenKey);
                                    replySuccess(handlerResult, requestMessage.method, startTime);
                                } else if (promise.then) {
                                    promise.then((resultOrError)=>{
                                        requestTokens.delete(tokenKey);
                                        reply(resultOrError, requestMessage.method, startTime);
                                    }, (error)=>{
                                        requestTokens.delete(tokenKey);
                                        if (error instanceof messages_1.ResponseError) {
                                            replyError(error, requestMessage.method, startTime);
                                        } else if (error && Is.string(error.message)) {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                                        } else {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                                        }
                                    });
                                } else {
                                    requestTokens.delete(tokenKey);
                                    reply(handlerResult, requestMessage.method, startTime);
                                }
                            } catch (error) {
                                requestTokens.delete(tokenKey);
                                if (error instanceof messages_1.ResponseError) {
                                    reply(error, requestMessage.method, startTime);
                                } else if (error && Is.string(error.message)) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                                } else {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                                }
                            }
                        } else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
                        }
                    }
                    function handleResponse(responseMessage) {
                        if (isDisposed()) {
                            // See handle request.
                            return;
                        }
                        if (responseMessage.id === null) {
                            if (responseMessage.error) {
                                logger.error(`Received response message without id: Error is: \n${JSON.stringify(responseMessage.error, undefined, 4)}`);
                            } else {
                                logger.error(`Received response message without id. No further error information provided.`);
                            }
                        } else {
                            const key = responseMessage.id;
                            const responsePromise = responsePromises.get(key);
                            traceReceivedResponse(responseMessage, responsePromise);
                            if (responsePromise !== undefined) {
                                responsePromises.delete(key);
                                try {
                                    if (responseMessage.error) {
                                        const error = responseMessage.error;
                                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                                    } else if (responseMessage.result !== undefined) {
                                        responsePromise.resolve(responseMessage.result);
                                    } else {
                                        throw new Error('Should never happen.');
                                    }
                                } catch (error) {
                                    if (error.message) {
                                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                                    } else {
                                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                                    }
                                }
                            }
                        }
                    }
                    function handleNotification(message) {
                        if (isDisposed()) {
                            // See handle request.
                            return;
                        }
                        let type = undefined;
                        let notificationHandler;
                        if (message.method === CancelNotification.type.method) {
                            const cancelId = message.params.id;
                            knownCanceledRequests.delete(cancelId);
                            traceReceivedNotification(message);
                            return;
                        } else {
                            const element = notificationHandlers.get(message.method);
                            if (element) {
                                notificationHandler = element.handler;
                                type = element.type;
                            }
                        }
                        if (notificationHandler || starNotificationHandler) {
                            try {
                                traceReceivedNotification(message);
                                if (notificationHandler) {
                                    if (message.params === undefined) {
                                        if (type !== undefined) {
                                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                                            }
                                        }
                                        notificationHandler();
                                    } else if (Array.isArray(message.params)) {
                                        // There are JSON-RPC libraries that send progress message as positional params although
                                        // specified as named. So convert them if this is the case.
                                        const params = message.params;
                                        if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                                            notificationHandler({
                                                token: params[0],
                                                value: params[1]
                                            });
                                        } else {
                                            if (type !== undefined) {
                                                if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                                    logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                                                }
                                                if (type.numberOfParams !== message.params.length) {
                                                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                                                }
                                            }
                                            notificationHandler(...params);
                                        }
                                    } else {
                                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                                        }
                                        notificationHandler(message.params);
                                    }
                                } else if (starNotificationHandler) {
                                    starNotificationHandler(message.method, message.params);
                                }
                            } catch (error) {
                                if (error.message) {
                                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                                } else {
                                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                                }
                            }
                        } else {
                            unhandledNotificationEmitter.fire(message);
                        }
                    }
                    function handleInvalidMessage(message) {
                        if (!message) {
                            logger.error('Received empty message.');
                            return;
                        }
                        logger.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(message, null, 4)}`);
                        // Test whether we find an id to reject the promise
                        const responseMessage = message;
                        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
                            const key = responseMessage.id;
                            const responseHandler = responsePromises.get(key);
                            if (responseHandler) {
                                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
                            }
                        }
                    }
                    function stringifyTrace(params) {
                        if (params === undefined || params === null) {
                            return undefined;
                        }
                        switch(trace){
                            case Trace.Verbose:
                                return JSON.stringify(params, null, 4);
                            case Trace.Compact:
                                return JSON.stringify(params);
                            default:
                                return undefined;
                        }
                    }
                    function traceSendingRequest(message) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                                data = `Params: ${stringifyTrace(message.params)}\n\n`;
                            }
                            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
                        } else {
                            logLSPMessage('send-request', message);
                        }
                    }
                    function traceSendingNotification(message) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if (trace === Trace.Verbose || trace === Trace.Compact) {
                                if (message.params) {
                                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                                } else {
                                    data = 'No parameters provided.\n\n';
                                }
                            }
                            tracer.log(`Sending notification '${message.method}'.`, data);
                        } else {
                            logLSPMessage('send-notification', message);
                        }
                    }
                    function traceSendingResponse(message, method, startTime) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if (trace === Trace.Verbose || trace === Trace.Compact) {
                                if (message.error && message.error.data) {
                                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                                } else {
                                    if (message.result) {
                                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                                    } else if (message.error === undefined) {
                                        data = 'No result returned.\n\n';
                                    }
                                }
                            }
                            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
                        } else {
                            logLSPMessage('send-response', message);
                        }
                    }
                    function traceReceivedRequest(message) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                                data = `Params: ${stringifyTrace(message.params)}\n\n`;
                            }
                            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
                        } else {
                            logLSPMessage('receive-request', message);
                        }
                    }
                    function traceReceivedNotification(message) {
                        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if (trace === Trace.Verbose || trace === Trace.Compact) {
                                if (message.params) {
                                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                                } else {
                                    data = 'No parameters provided.\n\n';
                                }
                            }
                            tracer.log(`Received notification '${message.method}'.`, data);
                        } else {
                            logLSPMessage('receive-notification', message);
                        }
                    }
                    function traceReceivedResponse(message, responsePromise) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if (trace === Trace.Verbose || trace === Trace.Compact) {
                                if (message.error && message.error.data) {
                                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                                } else {
                                    if (message.result) {
                                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                                    } else if (message.error === undefined) {
                                        data = 'No result returned.\n\n';
                                    }
                                }
                            }
                            if (responsePromise) {
                                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';
                                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
                            } else {
                                tracer.log(`Received response ${message.id} without active response promise.`, data);
                            }
                        } else {
                            logLSPMessage('receive-response', message);
                        }
                    }
                    function logLSPMessage(type, message) {
                        if (!tracer || trace === Trace.Off) {
                            return;
                        }
                        const lspMessage = {
                            isLSPMessage: true,
                            type,
                            message,
                            timestamp: Date.now()
                        };
                        tracer.log(lspMessage);
                    }
                    function throwIfClosedOrDisposed() {
                        if (isClosed()) {
                            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
                        }
                        if (isDisposed()) {
                            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
                        }
                    }
                    function throwIfListening() {
                        if (isListening()) {
                            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
                        }
                    }
                    function throwIfNotListening() {
                        if (!isListening()) {
                            throw new Error('Call listen() first.');
                        }
                    }
                    function undefinedToNull(param) {
                        if (param === undefined) {
                            return null;
                        } else {
                            return param;
                        }
                    }
                    function nullToUndefined(param) {
                        if (param === null) {
                            return undefined;
                        } else {
                            return param;
                        }
                    }
                    function isNamedParam(param) {
                        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';
                    }
                    function computeSingleParam(parameterStructures, param) {
                        switch(parameterStructures){
                            case messages_1.ParameterStructures.auto:
                                if (isNamedParam(param)) {
                                    return nullToUndefined(param);
                                } else {
                                    return [
                                        undefinedToNull(param)
                                    ];
                                }
                            case messages_1.ParameterStructures.byName:
                                if (!isNamedParam(param)) {
                                    throw new Error(`Received parameters by name but param is not an object literal.`);
                                }
                                return nullToUndefined(param);
                            case messages_1.ParameterStructures.byPosition:
                                return [
                                    undefinedToNull(param)
                                ];
                            default:
                                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
                        }
                    }
                    function computeMessageParams(type, params) {
                        let result;
                        const numberOfParams = type.numberOfParams;
                        switch(numberOfParams){
                            case 0:
                                result = undefined;
                                break;
                            case 1:
                                result = computeSingleParam(type.parameterStructures, params[0]);
                                break;
                            default:
                                result = [];
                                for(let i = 0; i < params.length && i < numberOfParams; i++){
                                    result.push(undefinedToNull(params[i]));
                                }
                                if (params.length < numberOfParams) {
                                    for(let i = params.length; i < numberOfParams; i++){
                                        result.push(null);
                                    }
                                }
                                break;
                        }
                        return result;
                    }
                    const connection = {
                        sendNotification: (type, ...args)=>{
                            throwIfClosedOrDisposed();
                            let method;
                            let messageParams;
                            if (Is.string(type)) {
                                method = type;
                                const first = args[0];
                                let paramStart = 0;
                                let parameterStructures = messages_1.ParameterStructures.auto;
                                if (messages_1.ParameterStructures.is(first)) {
                                    paramStart = 1;
                                    parameterStructures = first;
                                }
                                let paramEnd = args.length;
                                const numberOfParams = paramEnd - paramStart;
                                switch(numberOfParams){
                                    case 0:
                                        messageParams = undefined;
                                        break;
                                    case 1:
                                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                                        break;
                                    default:
                                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                                        }
                                        messageParams = args.slice(paramStart, paramEnd).map((value)=>undefinedToNull(value));
                                        break;
                                }
                            } else {
                                const params = args;
                                method = type.method;
                                messageParams = computeMessageParams(type, params);
                            }
                            const notificationMessage = {
                                jsonrpc: version,
                                method: method,
                                params: messageParams
                            };
                            traceSendingNotification(notificationMessage);
                            return messageWriter.write(notificationMessage).catch((error)=>{
                                logger.error(`Sending notification failed.`);
                                throw error;
                            });
                        },
                        onNotification: (type, handler)=>{
                            throwIfClosedOrDisposed();
                            let method;
                            if (Is.func(type)) {
                                starNotificationHandler = type;
                            } else if (handler) {
                                if (Is.string(type)) {
                                    method = type;
                                    notificationHandlers.set(type, {
                                        type: undefined,
                                        handler
                                    });
                                } else {
                                    method = type.method;
                                    notificationHandlers.set(type.method, {
                                        type,
                                        handler
                                    });
                                }
                            }
                            return {
                                dispose: ()=>{
                                    if (method !== undefined) {
                                        notificationHandlers.delete(method);
                                    } else {
                                        starNotificationHandler = undefined;
                                    }
                                }
                            };
                        },
                        onProgress: (_type, token, handler)=>{
                            if (progressHandlers.has(token)) {
                                throw new Error(`Progress handler for token ${token} already registered`);
                            }
                            progressHandlers.set(token, handler);
                            return {
                                dispose: ()=>{
                                    progressHandlers.delete(token);
                                }
                            };
                        },
                        sendProgress: (_type, token, value)=>{
                            // This should not await but simple return to ensure that we don't have another
                            // async scheduling. Otherwise one send could overtake another send.
                            return connection.sendNotification(ProgressNotification.type, {
                                token,
                                value
                            });
                        },
                        onUnhandledProgress: unhandledProgressEmitter.event,
                        sendRequest: (type, ...args)=>{
                            throwIfClosedOrDisposed();
                            throwIfNotListening();
                            let method;
                            let messageParams;
                            let token = undefined;
                            if (Is.string(type)) {
                                method = type;
                                const first = args[0];
                                const last = args[args.length - 1];
                                let paramStart = 0;
                                let parameterStructures = messages_1.ParameterStructures.auto;
                                if (messages_1.ParameterStructures.is(first)) {
                                    paramStart = 1;
                                    parameterStructures = first;
                                }
                                let paramEnd = args.length;
                                if (cancellation_1.CancellationToken.is(last)) {
                                    paramEnd = paramEnd - 1;
                                    token = last;
                                }
                                const numberOfParams = paramEnd - paramStart;
                                switch(numberOfParams){
                                    case 0:
                                        messageParams = undefined;
                                        break;
                                    case 1:
                                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                                        break;
                                    default:
                                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                                        }
                                        messageParams = args.slice(paramStart, paramEnd).map((value)=>undefinedToNull(value));
                                        break;
                                }
                            } else {
                                const params = args;
                                method = type.method;
                                messageParams = computeMessageParams(type, params);
                                const numberOfParams = type.numberOfParams;
                                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
                            }
                            const id = sequenceNumber++;
                            let disposable;
                            if (token) {
                                disposable = token.onCancellationRequested(()=>{
                                    const p = cancellationStrategy.sender.sendCancellation(connection, id);
                                    if (p === undefined) {
                                        logger.log(`Received no promise from cancellation strategy when cancelling id ${id}`);
                                        return Promise.resolve();
                                    } else {
                                        return p.catch(()=>{
                                            logger.log(`Sending cancellation messages for id ${id} failed`);
                                        });
                                    }
                                });
                            }
                            const requestMessage = {
                                jsonrpc: version,
                                id: id,
                                method: method,
                                params: messageParams
                            };
                            traceSendingRequest(requestMessage);
                            if (typeof cancellationStrategy.sender.enableCancellation === 'function') {
                                cancellationStrategy.sender.enableCancellation(requestMessage);
                            }
                            return new Promise(async (resolve, reject)=>{
                                const resolveWithCleanup = (r)=>{
                                    var _disposable;
                                    resolve(r);
                                    cancellationStrategy.sender.cleanup(id);
                                    (_disposable = disposable) === null || _disposable === void 0 ? void 0 : _disposable.dispose();
                                };
                                const rejectWithCleanup = (r)=>{
                                    var _disposable;
                                    reject(r);
                                    cancellationStrategy.sender.cleanup(id);
                                    (_disposable = disposable) === null || _disposable === void 0 ? void 0 : _disposable.dispose();
                                };
                                const responsePromise = {
                                    method: method,
                                    timerStart: Date.now(),
                                    resolve: resolveWithCleanup,
                                    reject: rejectWithCleanup
                                };
                                try {
                                    await messageWriter.write(requestMessage);
                                    responsePromises.set(id, responsePromise);
                                } catch (error) {
                                    logger.error(`Sending request failed.`);
                                    // Writing the message failed. So we need to reject the promise.
                                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, error.message ? error.message : 'Unknown reason'));
                                    throw error;
                                }
                            });
                        },
                        onRequest: (type, handler)=>{
                            throwIfClosedOrDisposed();
                            let method = null;
                            if (StarRequestHandler.is(type)) {
                                method = undefined;
                                starRequestHandler = type;
                            } else if (Is.string(type)) {
                                method = null;
                                if (handler !== undefined) {
                                    method = type;
                                    requestHandlers.set(type, {
                                        handler: handler,
                                        type: undefined
                                    });
                                }
                            } else {
                                if (handler !== undefined) {
                                    method = type.method;
                                    requestHandlers.set(type.method, {
                                        type,
                                        handler
                                    });
                                }
                            }
                            return {
                                dispose: ()=>{
                                    if (method === null) {
                                        return;
                                    }
                                    if (method !== undefined) {
                                        requestHandlers.delete(method);
                                    } else {
                                        starRequestHandler = undefined;
                                    }
                                }
                            };
                        },
                        hasPendingResponse: ()=>{
                            return responsePromises.size > 0;
                        },
                        trace: async (_value, _tracer, sendNotificationOrTraceOptions)=>{
                            let _sendNotification = false;
                            let _traceFormat = TraceFormat.Text;
                            if (sendNotificationOrTraceOptions !== undefined) {
                                if (Is.boolean(sendNotificationOrTraceOptions)) {
                                    _sendNotification = sendNotificationOrTraceOptions;
                                } else {
                                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                                }
                            }
                            trace = _value;
                            traceFormat = _traceFormat;
                            if (trace === Trace.Off) {
                                tracer = undefined;
                            } else {
                                tracer = _tracer;
                            }
                            if (_sendNotification && !isClosed() && !isDisposed()) {
                                await connection.sendNotification(SetTraceNotification.type, {
                                    value: Trace.toString(_value)
                                });
                            }
                        },
                        onError: errorEmitter.event,
                        onClose: closeEmitter.event,
                        onUnhandledNotification: unhandledNotificationEmitter.event,
                        onDispose: disposeEmitter.event,
                        end: ()=>{
                            messageWriter.end();
                        },
                        dispose: ()=>{
                            if (isDisposed()) {
                                return;
                            }
                            state = ConnectionState.Disposed;
                            disposeEmitter.fire(undefined);
                            const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, 'Pending response rejected since connection got disposed');
                            for (const promise of responsePromises.values()){
                                promise.reject(error);
                            }
                            responsePromises = new Map();
                            requestTokens = new Map();
                            knownCanceledRequests = new Set();
                            messageQueue = new linkedMap_1.LinkedMap();
                            // Test for backwards compatibility
                            if (Is.func(messageWriter.dispose)) {
                                messageWriter.dispose();
                            }
                            if (Is.func(messageReader.dispose)) {
                                messageReader.dispose();
                            }
                        },
                        listen: ()=>{
                            throwIfClosedOrDisposed();
                            throwIfListening();
                            state = ConnectionState.Listening;
                            messageReader.listen(callback);
                        },
                        inspect: ()=>{
                            // eslint-disable-next-line no-console
                            (0, ral_1.default)().console.log('inspect');
                        }
                    };
                    connection.onNotification(LogTraceNotification.type, (params)=>{
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        const verbose = trace === Trace.Verbose || trace === Trace.Compact;
                        tracer.log(params.message, verbose ? params.verbose : undefined);
                    });
                    connection.onNotification(ProgressNotification.type, (params)=>{
                        const handler = progressHandlers.get(params.token);
                        if (handler) {
                            handler(params.value);
                        } else {
                            unhandledProgressEmitter.fire(params);
                        }
                    });
                    return connection;
                }
                exports1.createMessageConnection = createMessageConnection;
            /***/ },
            /***/ 8844: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.Disposable = void 0;
                var Disposable;
                (function(Disposable) {
                    function create(func) {
                        return {
                            dispose: func
                        };
                    }
                    Disposable.create = create;
                })(Disposable || (exports1.Disposable = Disposable = {}));
            /***/ },
            /***/ 2479: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_345596__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.Emitter = exports1.Event = void 0;
                const ral_1 = __nested_webpack_require_345596__(5091);
                var Event;
                (function(Event) {
                    const _disposable = {
                        dispose () {}
                    };
                    Event.None = function() {
                        return _disposable;
                    };
                })(Event || (exports1.Event = Event = {}));
                class CallbackList {
                    add(callback, context = null, bucket) {
                        if (!this._callbacks) {
                            this._callbacks = [];
                            this._contexts = [];
                        }
                        this._callbacks.push(callback);
                        this._contexts.push(context);
                        if (Array.isArray(bucket)) {
                            bucket.push({
                                dispose: ()=>this.remove(callback, context)
                            });
                        }
                    }
                    remove(callback, context = null) {
                        if (!this._callbacks) {
                            return;
                        }
                        let foundCallbackWithDifferentContext = false;
                        for(let i = 0, len = this._callbacks.length; i < len; i++){
                            if (this._callbacks[i] === callback) {
                                if (this._contexts[i] === context) {
                                    // callback & context match => remove it
                                    this._callbacks.splice(i, 1);
                                    this._contexts.splice(i, 1);
                                    return;
                                } else {
                                    foundCallbackWithDifferentContext = true;
                                }
                            }
                        }
                        if (foundCallbackWithDifferentContext) {
                            throw new Error('When adding a listener with a context, you should remove it with the same context');
                        }
                    }
                    invoke(...args) {
                        if (!this._callbacks) {
                            return [];
                        }
                        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
                        for(let i = 0, len = callbacks.length; i < len; i++){
                            try {
                                ret.push(callbacks[i].apply(contexts[i], args));
                            } catch (e) {
                                // eslint-disable-next-line no-console
                                (0, ral_1.default)().console.error(e);
                            }
                        }
                        return ret;
                    }
                    isEmpty() {
                        return !this._callbacks || this._callbacks.length === 0;
                    }
                    dispose() {
                        this._callbacks = undefined;
                        this._contexts = undefined;
                    }
                }
                class Emitter {
                    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */ get event() {
                        if (!this._event) {
                            this._event = (listener, thisArgs, disposables)=>{
                                if (!this._callbacks) {
                                    this._callbacks = new CallbackList();
                                }
                                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                                    this._options.onFirstListenerAdd(this);
                                }
                                this._callbacks.add(listener, thisArgs);
                                const result = {
                                    dispose: ()=>{
                                        if (!this._callbacks) {
                                            // disposable is disposed after emitter is disposed.
                                            return;
                                        }
                                        this._callbacks.remove(listener, thisArgs);
                                        result.dispose = Emitter._noop;
                                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                                            this._options.onLastListenerRemove(this);
                                        }
                                    }
                                };
                                if (Array.isArray(disposables)) {
                                    disposables.push(result);
                                }
                                return result;
                            };
                        }
                        return this._event;
                    }
                    /**
     * To be kept private to fire an event to
     * subscribers
     */ fire(event) {
                        if (this._callbacks) {
                            this._callbacks.invoke.call(this._callbacks, event);
                        }
                    }
                    dispose() {
                        if (this._callbacks) {
                            this._callbacks.dispose();
                            this._callbacks = undefined;
                        }
                    }
                    constructor(_options){
                        this._options = _options;
                    }
                }
                exports1.Emitter = Emitter;
                Emitter._noop = function() {};
            /***/ },
            /***/ 6618: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.stringArray = exports1.array = exports1.func = exports1.error = exports1.number = exports1.string = exports1.boolean = void 0;
                function boolean(value) {
                    return value === true || value === false;
                }
                exports1.boolean = boolean;
                function string(value) {
                    return typeof value === 'string' || value instanceof String;
                }
                exports1.string = string;
                function number(value) {
                    return typeof value === 'number' || value instanceof Number;
                }
                exports1.number = number;
                function error(value) {
                    return value instanceof Error;
                }
                exports1.error = error;
                function func(value) {
                    return typeof value === 'function';
                }
                exports1.func = func;
                function array(value) {
                    return Array.isArray(value);
                }
                exports1.array = array;
                function stringArray(value) {
                    return array(value) && value.every((elem)=>string(elem));
                }
                exports1.stringArray = stringArray;
            /***/ },
            /***/ 1109: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _a;
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.LRUCache = exports1.LinkedMap = exports1.Touch = void 0;
                var Touch;
                (function(Touch) {
                    Touch.None = 0;
                    Touch.First = 1;
                    Touch.AsOld = Touch.First;
                    Touch.Last = 2;
                    Touch.AsNew = Touch.Last;
                })(Touch || (exports1.Touch = Touch = {}));
                class LinkedMap {
                    clear() {
                        this._map.clear();
                        this._head = undefined;
                        this._tail = undefined;
                        this._size = 0;
                        this._state++;
                    }
                    isEmpty() {
                        return !this._head && !this._tail;
                    }
                    get size() {
                        return this._size;
                    }
                    get first() {
                        var _this__head;
                        return (_this__head = this._head) === null || _this__head === void 0 ? void 0 : _this__head.value;
                    }
                    get last() {
                        var _this__tail;
                        return (_this__tail = this._tail) === null || _this__tail === void 0 ? void 0 : _this__tail.value;
                    }
                    has(key) {
                        return this._map.has(key);
                    }
                    get(key, touch = Touch.None) {
                        const item = this._map.get(key);
                        if (!item) {
                            return undefined;
                        }
                        if (touch !== Touch.None) {
                            this.touch(item, touch);
                        }
                        return item.value;
                    }
                    set(key, value, touch = Touch.None) {
                        let item = this._map.get(key);
                        if (item) {
                            item.value = value;
                            if (touch !== Touch.None) {
                                this.touch(item, touch);
                            }
                        } else {
                            item = {
                                key,
                                value,
                                next: undefined,
                                previous: undefined
                            };
                            switch(touch){
                                case Touch.None:
                                    this.addItemLast(item);
                                    break;
                                case Touch.First:
                                    this.addItemFirst(item);
                                    break;
                                case Touch.Last:
                                    this.addItemLast(item);
                                    break;
                                default:
                                    this.addItemLast(item);
                                    break;
                            }
                            this._map.set(key, item);
                            this._size++;
                        }
                        return this;
                    }
                    delete(key) {
                        return !!this.remove(key);
                    }
                    remove(key) {
                        const item = this._map.get(key);
                        if (!item) {
                            return undefined;
                        }
                        this._map.delete(key);
                        this.removeItem(item);
                        this._size--;
                        return item.value;
                    }
                    shift() {
                        if (!this._head && !this._tail) {
                            return undefined;
                        }
                        if (!this._head || !this._tail) {
                            throw new Error('Invalid list');
                        }
                        const item = this._head;
                        this._map.delete(item.key);
                        this.removeItem(item);
                        this._size--;
                        return item.value;
                    }
                    forEach(callbackfn, thisArg) {
                        const state = this._state;
                        let current = this._head;
                        while(current){
                            if (thisArg) {
                                callbackfn.bind(thisArg)(current.value, current.key, this);
                            } else {
                                callbackfn(current.value, current.key, this);
                            }
                            if (this._state !== state) {
                                throw new Error(`LinkedMap got modified during iteration.`);
                            }
                            current = current.next;
                        }
                    }
                    keys() {
                        const state = this._state;
                        let current = this._head;
                        const iterator = {
                            [Symbol.iterator]: ()=>{
                                return iterator;
                            },
                            next: ()=>{
                                if (this._state !== state) {
                                    throw new Error(`LinkedMap got modified during iteration.`);
                                }
                                if (current) {
                                    const result = {
                                        value: current.key,
                                        done: false
                                    };
                                    current = current.next;
                                    return result;
                                } else {
                                    return {
                                        value: undefined,
                                        done: true
                                    };
                                }
                            }
                        };
                        return iterator;
                    }
                    values() {
                        const state = this._state;
                        let current = this._head;
                        const iterator = {
                            [Symbol.iterator]: ()=>{
                                return iterator;
                            },
                            next: ()=>{
                                if (this._state !== state) {
                                    throw new Error(`LinkedMap got modified during iteration.`);
                                }
                                if (current) {
                                    const result = {
                                        value: current.value,
                                        done: false
                                    };
                                    current = current.next;
                                    return result;
                                } else {
                                    return {
                                        value: undefined,
                                        done: true
                                    };
                                }
                            }
                        };
                        return iterator;
                    }
                    entries() {
                        const state = this._state;
                        let current = this._head;
                        const iterator = {
                            [Symbol.iterator]: ()=>{
                                return iterator;
                            },
                            next: ()=>{
                                if (this._state !== state) {
                                    throw new Error(`LinkedMap got modified during iteration.`);
                                }
                                if (current) {
                                    const result = {
                                        value: [
                                            current.key,
                                            current.value
                                        ],
                                        done: false
                                    };
                                    current = current.next;
                                    return result;
                                } else {
                                    return {
                                        value: undefined,
                                        done: true
                                    };
                                }
                            }
                        };
                        return iterator;
                    }
                    [(_a = Symbol.toStringTag, Symbol.iterator)]() {
                        return this.entries();
                    }
                    trimOld(newSize) {
                        if (newSize >= this.size) {
                            return;
                        }
                        if (newSize === 0) {
                            this.clear();
                            return;
                        }
                        let current = this._head;
                        let currentSize = this.size;
                        while(current && currentSize > newSize){
                            this._map.delete(current.key);
                            current = current.next;
                            currentSize--;
                        }
                        this._head = current;
                        this._size = currentSize;
                        if (current) {
                            current.previous = undefined;
                        }
                        this._state++;
                    }
                    addItemFirst(item) {
                        // First time Insert
                        if (!this._head && !this._tail) {
                            this._tail = item;
                        } else if (!this._head) {
                            throw new Error('Invalid list');
                        } else {
                            item.next = this._head;
                            this._head.previous = item;
                        }
                        this._head = item;
                        this._state++;
                    }
                    addItemLast(item) {
                        // First time Insert
                        if (!this._head && !this._tail) {
                            this._head = item;
                        } else if (!this._tail) {
                            throw new Error('Invalid list');
                        } else {
                            item.previous = this._tail;
                            this._tail.next = item;
                        }
                        this._tail = item;
                        this._state++;
                    }
                    removeItem(item) {
                        if (item === this._head && item === this._tail) {
                            this._head = undefined;
                            this._tail = undefined;
                        } else if (item === this._head) {
                            // This can only happened if size === 1 which is handle
                            // by the case above.
                            if (!item.next) {
                                throw new Error('Invalid list');
                            }
                            item.next.previous = undefined;
                            this._head = item.next;
                        } else if (item === this._tail) {
                            // This can only happened if size === 1 which is handle
                            // by the case above.
                            if (!item.previous) {
                                throw new Error('Invalid list');
                            }
                            item.previous.next = undefined;
                            this._tail = item.previous;
                        } else {
                            const next = item.next;
                            const previous = item.previous;
                            if (!next || !previous) {
                                throw new Error('Invalid list');
                            }
                            next.previous = previous;
                            previous.next = next;
                        }
                        item.next = undefined;
                        item.previous = undefined;
                        this._state++;
                    }
                    touch(item, touch) {
                        if (!this._head || !this._tail) {
                            throw new Error('Invalid list');
                        }
                        if (touch !== Touch.First && touch !== Touch.Last) {
                            return;
                        }
                        if (touch === Touch.First) {
                            if (item === this._head) {
                                return;
                            }
                            const next = item.next;
                            const previous = item.previous;
                            // Unlink the item
                            if (item === this._tail) {
                                // previous must be defined since item was not head but is tail
                                // So there are more than on item in the map
                                previous.next = undefined;
                                this._tail = previous;
                            } else {
                                // Both next and previous are not undefined since item was neither head nor tail.
                                next.previous = previous;
                                previous.next = next;
                            }
                            // Insert the node at head
                            item.previous = undefined;
                            item.next = this._head;
                            this._head.previous = item;
                            this._head = item;
                            this._state++;
                        } else if (touch === Touch.Last) {
                            if (item === this._tail) {
                                return;
                            }
                            const next = item.next;
                            const previous = item.previous;
                            // Unlink the item.
                            if (item === this._head) {
                                // next must be defined since item was not tail but is head
                                // So there are more than on item in the map
                                next.previous = undefined;
                                this._head = next;
                            } else {
                                // Both next and previous are not undefined since item was neither head nor tail.
                                next.previous = previous;
                                previous.next = next;
                            }
                            item.next = undefined;
                            item.previous = this._tail;
                            this._tail.next = item;
                            this._tail = item;
                            this._state++;
                        }
                    }
                    toJSON() {
                        const data = [];
                        this.forEach((value, key)=>{
                            data.push([
                                key,
                                value
                            ]);
                        });
                        return data;
                    }
                    fromJSON(data) {
                        this.clear();
                        for (const [key, value] of data){
                            this.set(key, value);
                        }
                    }
                    constructor(){
                        this[_a] = 'LinkedMap';
                        this._map = new Map();
                        this._head = undefined;
                        this._tail = undefined;
                        this._size = 0;
                        this._state = 0;
                    }
                }
                exports1.LinkedMap = LinkedMap;
                class LRUCache extends LinkedMap {
                    get limit() {
                        return this._limit;
                    }
                    set limit(limit) {
                        this._limit = limit;
                        this.checkTrim();
                    }
                    get ratio() {
                        return this._ratio;
                    }
                    set ratio(ratio) {
                        this._ratio = Math.min(Math.max(0, ratio), 1);
                        this.checkTrim();
                    }
                    get(key, touch = Touch.AsNew) {
                        return super.get(key, touch);
                    }
                    peek(key) {
                        return super.get(key, Touch.None);
                    }
                    set(key, value) {
                        super.set(key, value, Touch.Last);
                        this.checkTrim();
                        return this;
                    }
                    checkTrim() {
                        if (this.size > this._limit) {
                            this.trimOld(Math.round(this._limit * this._ratio));
                        }
                    }
                    constructor(limit, ratio = 1){
                        super();
                        this._limit = limit;
                        this._ratio = Math.min(Math.max(0, ratio), 1);
                    }
                }
                exports1.LRUCache = LRUCache;
            /***/ },
            /***/ 9805: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.AbstractMessageBuffer = void 0;
                const CR = 13;
                const LF = 10;
                const CRLF = '\r\n';
                class AbstractMessageBuffer {
                    get encoding() {
                        return this._encoding;
                    }
                    append(chunk) {
                        const toAppend = typeof chunk === 'string' ? this.fromString(chunk, this._encoding) : chunk;
                        this._chunks.push(toAppend);
                        this._totalLength += toAppend.byteLength;
                    }
                    tryReadHeaders(lowerCaseKeys = false) {
                        if (this._chunks.length === 0) {
                            return undefined;
                        }
                        let state = 0;
                        let chunkIndex = 0;
                        let offset = 0;
                        let chunkBytesRead = 0;
                        row: while(chunkIndex < this._chunks.length){
                            const chunk = this._chunks[chunkIndex];
                            offset = 0;
                            column: while(offset < chunk.length){
                                const value = chunk[offset];
                                switch(value){
                                    case CR:
                                        switch(state){
                                            case 0:
                                                state = 1;
                                                break;
                                            case 2:
                                                state = 3;
                                                break;
                                            default:
                                                state = 0;
                                        }
                                        break;
                                    case LF:
                                        switch(state){
                                            case 1:
                                                state = 2;
                                                break;
                                            case 3:
                                                state = 4;
                                                offset++;
                                                break row;
                                            default:
                                                state = 0;
                                        }
                                        break;
                                    default:
                                        state = 0;
                                }
                                offset++;
                            }
                            chunkBytesRead += chunk.byteLength;
                            chunkIndex++;
                        }
                        if (state !== 4) {
                            return undefined;
                        }
                        // The buffer contains the two CRLF at the end. So we will
                        // have two empty lines after the split at the end as well.
                        const buffer = this._read(chunkBytesRead + offset);
                        const result = new Map();
                        const headers = this.toString(buffer, 'ascii').split(CRLF);
                        if (headers.length < 2) {
                            return result;
                        }
                        for(let i = 0; i < headers.length - 2; i++){
                            const header = headers[i];
                            const index = header.indexOf(':');
                            if (index === -1) {
                                throw new Error(`Message header must separate key and value using ':'\n${header}`);
                            }
                            const key = header.substr(0, index);
                            const value = header.substr(index + 1).trim();
                            result.set(lowerCaseKeys ? key.toLowerCase() : key, value);
                        }
                        return result;
                    }
                    tryReadBody(length) {
                        if (this._totalLength < length) {
                            return undefined;
                        }
                        return this._read(length);
                    }
                    get numberOfBytes() {
                        return this._totalLength;
                    }
                    _read(byteCount) {
                        if (byteCount === 0) {
                            return this.emptyBuffer();
                        }
                        if (byteCount > this._totalLength) {
                            throw new Error(`Cannot read so many bytes!`);
                        }
                        if (this._chunks[0].byteLength === byteCount) {
                            // super fast path, precisely first chunk must be returned
                            const chunk = this._chunks[0];
                            this._chunks.shift();
                            this._totalLength -= byteCount;
                            return this.asNative(chunk);
                        }
                        if (this._chunks[0].byteLength > byteCount) {
                            // fast path, the reading is entirely within the first chunk
                            const chunk = this._chunks[0];
                            const result = this.asNative(chunk, byteCount);
                            this._chunks[0] = chunk.slice(byteCount);
                            this._totalLength -= byteCount;
                            return result;
                        }
                        const result = this.allocNative(byteCount);
                        let resultOffset = 0;
                        let chunkIndex = 0;
                        while(byteCount > 0){
                            const chunk = this._chunks[chunkIndex];
                            if (chunk.byteLength > byteCount) {
                                // this chunk will survive
                                const chunkPart = chunk.slice(0, byteCount);
                                result.set(chunkPart, resultOffset);
                                resultOffset += byteCount;
                                this._chunks[chunkIndex] = chunk.slice(byteCount);
                                this._totalLength -= byteCount;
                                byteCount -= byteCount;
                            } else {
                                // this chunk will be entirely read
                                result.set(chunk, resultOffset);
                                resultOffset += chunk.byteLength;
                                this._chunks.shift();
                                this._totalLength -= chunk.byteLength;
                                byteCount -= chunk.byteLength;
                            }
                        }
                        return result;
                    }
                    constructor(encoding = 'utf-8'){
                        this._encoding = encoding;
                        this._chunks = [];
                        this._totalLength = 0;
                    }
                }
                exports1.AbstractMessageBuffer = AbstractMessageBuffer;
            /***/ },
            /***/ 656: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_381283__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ReadableStreamMessageReader = exports1.AbstractMessageReader = exports1.MessageReader = void 0;
                const ral_1 = __nested_webpack_require_381283__(5091);
                const Is = __nested_webpack_require_381283__(6618);
                const events_1 = __nested_webpack_require_381283__(2479);
                const semaphore_1 = __nested_webpack_require_381283__(418);
                var MessageReader;
                (function(MessageReader) {
                    function is(value) {
                        let candidate = value;
                        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) && Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
                    }
                    MessageReader.is = is;
                })(MessageReader || (exports1.MessageReader = MessageReader = {}));
                class AbstractMessageReader {
                    dispose() {
                        this.errorEmitter.dispose();
                        this.closeEmitter.dispose();
                    }
                    get onError() {
                        return this.errorEmitter.event;
                    }
                    fireError(error) {
                        this.errorEmitter.fire(this.asError(error));
                    }
                    get onClose() {
                        return this.closeEmitter.event;
                    }
                    fireClose() {
                        this.closeEmitter.fire(undefined);
                    }
                    get onPartialMessage() {
                        return this.partialMessageEmitter.event;
                    }
                    firePartialMessage(info) {
                        this.partialMessageEmitter.fire(info);
                    }
                    asError(error) {
                        if (error instanceof Error) {
                            return error;
                        } else {
                            return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
                        }
                    }
                    constructor(){
                        this.errorEmitter = new events_1.Emitter();
                        this.closeEmitter = new events_1.Emitter();
                        this.partialMessageEmitter = new events_1.Emitter();
                    }
                }
                exports1.AbstractMessageReader = AbstractMessageReader;
                var ResolvedMessageReaderOptions;
                (function(ResolvedMessageReaderOptions) {
                    function fromOptions(options) {
                        let charset;
                        let result;
                        let contentDecoder;
                        const contentDecoders = new Map();
                        let contentTypeDecoder;
                        const contentTypeDecoders = new Map();
                        if (options === undefined || typeof options === 'string') {
                            charset = options !== null && options !== void 0 ? options : 'utf-8';
                        } else {
                            var _options_charset;
                            charset = (_options_charset = options.charset) !== null && _options_charset !== void 0 ? _options_charset : 'utf-8';
                            if (options.contentDecoder !== undefined) {
                                contentDecoder = options.contentDecoder;
                                contentDecoders.set(contentDecoder.name, contentDecoder);
                            }
                            if (options.contentDecoders !== undefined) {
                                for (const decoder of options.contentDecoders){
                                    contentDecoders.set(decoder.name, decoder);
                                }
                            }
                            if (options.contentTypeDecoder !== undefined) {
                                contentTypeDecoder = options.contentTypeDecoder;
                                contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
                            }
                            if (options.contentTypeDecoders !== undefined) {
                                for (const decoder of options.contentTypeDecoders){
                                    contentTypeDecoders.set(decoder.name, decoder);
                                }
                            }
                        }
                        if (contentTypeDecoder === undefined) {
                            contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
                            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
                        }
                        return {
                            charset,
                            contentDecoder,
                            contentDecoders,
                            contentTypeDecoder,
                            contentTypeDecoders
                        };
                    }
                    ResolvedMessageReaderOptions.fromOptions = fromOptions;
                })(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
                class ReadableStreamMessageReader extends AbstractMessageReader {
                    set partialMessageTimeout(timeout) {
                        this._partialMessageTimeout = timeout;
                    }
                    get partialMessageTimeout() {
                        return this._partialMessageTimeout;
                    }
                    listen(callback) {
                        this.nextMessageLength = -1;
                        this.messageToken = 0;
                        this.partialMessageTimer = undefined;
                        this.callback = callback;
                        const result = this.readable.onData((data)=>{
                            this.onData(data);
                        });
                        this.readable.onError((error)=>this.fireError(error));
                        this.readable.onClose(()=>this.fireClose());
                        return result;
                    }
                    onData(data) {
                        try {
                            this.buffer.append(data);
                            while(true){
                                if (this.nextMessageLength === -1) {
                                    const headers = this.buffer.tryReadHeaders(true);
                                    if (!headers) {
                                        return;
                                    }
                                    const contentLength = headers.get('content-length');
                                    if (!contentLength) {
                                        this.fireError(new Error(`Header must provide a Content-Length property.\n${JSON.stringify(Object.fromEntries(headers))}`));
                                        return;
                                    }
                                    const length = parseInt(contentLength);
                                    if (isNaN(length)) {
                                        this.fireError(new Error(`Content-Length value must be a number. Got ${contentLength}`));
                                        return;
                                    }
                                    this.nextMessageLength = length;
                                }
                                const body = this.buffer.tryReadBody(this.nextMessageLength);
                                if (body === undefined) {
                                    /** We haven't received the full message yet. */ this.setPartialMessageTimer();
                                    return;
                                }
                                this.clearPartialMessageTimer();
                                this.nextMessageLength = -1;
                                // Make sure that we convert one received message after the
                                // other. Otherwise it could happen that a decoding of a second
                                // smaller message finished before the decoding of a first larger
                                // message and then we would deliver the second message first.
                                this.readSemaphore.lock(async ()=>{
                                    const bytes = this.options.contentDecoder !== undefined ? await this.options.contentDecoder.decode(body) : body;
                                    const message = await this.options.contentTypeDecoder.decode(bytes, this.options);
                                    this.callback(message);
                                }).catch((error)=>{
                                    this.fireError(error);
                                });
                            }
                        } catch (error) {
                            this.fireError(error);
                        }
                    }
                    clearPartialMessageTimer() {
                        if (this.partialMessageTimer) {
                            this.partialMessageTimer.dispose();
                            this.partialMessageTimer = undefined;
                        }
                    }
                    setPartialMessageTimer() {
                        this.clearPartialMessageTimer();
                        if (this._partialMessageTimeout <= 0) {
                            return;
                        }
                        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout)=>{
                            this.partialMessageTimer = undefined;
                            if (token === this.messageToken) {
                                this.firePartialMessage({
                                    messageToken: token,
                                    waitingTime: timeout
                                });
                                this.setPartialMessageTimer();
                            }
                        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
                    }
                    constructor(readable, options){
                        super();
                        this.readable = readable;
                        this.options = ResolvedMessageReaderOptions.fromOptions(options);
                        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
                        this._partialMessageTimeout = 10000;
                        this.nextMessageLength = -1;
                        this.messageToken = 0;
                        this.readSemaphore = new semaphore_1.Semaphore(1);
                    }
                }
                exports1.ReadableStreamMessageReader = ReadableStreamMessageReader;
            /***/ },
            /***/ 9036: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_392905__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.WriteableStreamMessageWriter = exports1.AbstractMessageWriter = exports1.MessageWriter = void 0;
                const ral_1 = __nested_webpack_require_392905__(5091);
                const Is = __nested_webpack_require_392905__(6618);
                const semaphore_1 = __nested_webpack_require_392905__(418);
                const events_1 = __nested_webpack_require_392905__(2479);
                const ContentLength = 'Content-Length: ';
                const CRLF = '\r\n';
                var MessageWriter;
                (function(MessageWriter) {
                    function is(value) {
                        let candidate = value;
                        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) && Is.func(candidate.onError) && Is.func(candidate.write);
                    }
                    MessageWriter.is = is;
                })(MessageWriter || (exports1.MessageWriter = MessageWriter = {}));
                class AbstractMessageWriter {
                    dispose() {
                        this.errorEmitter.dispose();
                        this.closeEmitter.dispose();
                    }
                    get onError() {
                        return this.errorEmitter.event;
                    }
                    fireError(error, message, count) {
                        this.errorEmitter.fire([
                            this.asError(error),
                            message,
                            count
                        ]);
                    }
                    get onClose() {
                        return this.closeEmitter.event;
                    }
                    fireClose() {
                        this.closeEmitter.fire(undefined);
                    }
                    asError(error) {
                        if (error instanceof Error) {
                            return error;
                        } else {
                            return new Error(`Writer received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
                        }
                    }
                    constructor(){
                        this.errorEmitter = new events_1.Emitter();
                        this.closeEmitter = new events_1.Emitter();
                    }
                }
                exports1.AbstractMessageWriter = AbstractMessageWriter;
                var ResolvedMessageWriterOptions;
                (function(ResolvedMessageWriterOptions) {
                    function fromOptions(options) {
                        if (options === undefined || typeof options === 'string') {
                            return {
                                charset: options !== null && options !== void 0 ? options : 'utf-8',
                                contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder
                            };
                        } else {
                            var _options_charset, _options_contentTypeEncoder;
                            return {
                                charset: (_options_charset = options.charset) !== null && _options_charset !== void 0 ? _options_charset : 'utf-8',
                                contentEncoder: options.contentEncoder,
                                contentTypeEncoder: (_options_contentTypeEncoder = options.contentTypeEncoder) !== null && _options_contentTypeEncoder !== void 0 ? _options_contentTypeEncoder : (0, ral_1.default)().applicationJson.encoder
                            };
                        }
                    }
                    ResolvedMessageWriterOptions.fromOptions = fromOptions;
                })(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
                class WriteableStreamMessageWriter extends AbstractMessageWriter {
                    async write(msg) {
                        return this.writeSemaphore.lock(async ()=>{
                            const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer)=>{
                                if (this.options.contentEncoder !== undefined) {
                                    return this.options.contentEncoder.encode(buffer);
                                } else {
                                    return buffer;
                                }
                            });
                            return payload.then((buffer)=>{
                                const headers = [];
                                headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                                headers.push(CRLF);
                                return this.doWrite(msg, headers, buffer);
                            }, (error)=>{
                                this.fireError(error);
                                throw error;
                            });
                        });
                    }
                    async doWrite(msg, headers, data) {
                        try {
                            await this.writable.write(headers.join(''), 'ascii');
                            return this.writable.write(data);
                        } catch (error) {
                            this.handleError(error, msg);
                            return Promise.reject(error);
                        }
                    }
                    handleError(error, msg) {
                        this.errorCount++;
                        this.fireError(error, msg, this.errorCount);
                    }
                    end() {
                        this.writable.end();
                    }
                    constructor(writable, options){
                        super();
                        this.writable = writable;
                        this.options = ResolvedMessageWriterOptions.fromOptions(options);
                        this.errorCount = 0;
                        this.writeSemaphore = new semaphore_1.Semaphore(1);
                        this.writable.onError((error)=>this.fireError(error));
                        this.writable.onClose(()=>this.fireClose());
                    }
                }
                exports1.WriteableStreamMessageWriter = WriteableStreamMessageWriter;
            /***/ },
            /***/ 7162: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_399781__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.Message = exports1.NotificationType9 = exports1.NotificationType8 = exports1.NotificationType7 = exports1.NotificationType6 = exports1.NotificationType5 = exports1.NotificationType4 = exports1.NotificationType3 = exports1.NotificationType2 = exports1.NotificationType1 = exports1.NotificationType0 = exports1.NotificationType = exports1.RequestType9 = exports1.RequestType8 = exports1.RequestType7 = exports1.RequestType6 = exports1.RequestType5 = exports1.RequestType4 = exports1.RequestType3 = exports1.RequestType2 = exports1.RequestType1 = exports1.RequestType = exports1.RequestType0 = exports1.AbstractMessageSignature = exports1.ParameterStructures = exports1.ResponseError = exports1.ErrorCodes = void 0;
                const is = __nested_webpack_require_399781__(6618);
                /**
 * Predefined error codes.
 */ var ErrorCodes;
                (function(ErrorCodes) {
                    // Defined by JSON RPC
                    ErrorCodes.ParseError = -32700;
                    ErrorCodes.InvalidRequest = -32600;
                    ErrorCodes.MethodNotFound = -32601;
                    ErrorCodes.InvalidParams = -32602;
                    ErrorCodes.InternalError = -32603;
                    /**
     * This is the start range of JSON RPC reserved error codes.
     * It doesn't denote a real error code. No application error codes should
     * be defined between the start and end range. For backwards
     * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
     * are left in the range.
     *
     * @since 3.16.0
    */ ErrorCodes.jsonrpcReservedErrorRangeStart = -32099;
                    /** @deprecated use  jsonrpcReservedErrorRangeStart */ ErrorCodes.serverErrorStart = -32099;
                    /**
     * An error occurred when write a message to the transport layer.
     */ ErrorCodes.MessageWriteError = -32099;
                    /**
     * An error occurred when reading a message from the transport layer.
     */ ErrorCodes.MessageReadError = -32098;
                    /**
     * The connection got disposed or lost and all pending responses got
     * rejected.
     */ ErrorCodes.PendingResponseRejected = -32097;
                    /**
     * The connection is inactive and a use of it failed.
     */ ErrorCodes.ConnectionInactive = -32096;
                    /**
     * Error code indicating that a server received a notification or
     * request before the server has received the `initialize` request.
     */ ErrorCodes.ServerNotInitialized = -32002;
                    ErrorCodes.UnknownErrorCode = -32001;
                    /**
     * This is the end range of JSON RPC reserved error codes.
     * It doesn't denote a real error code.
     *
     * @since 3.16.0
    */ ErrorCodes.jsonrpcReservedErrorRangeEnd = -32000;
                    /** @deprecated use  jsonrpcReservedErrorRangeEnd */ ErrorCodes.serverErrorEnd = -32000;
                })(ErrorCodes || (exports1.ErrorCodes = ErrorCodes = {}));
                /**
 * An error object return in a response in case a request
 * has failed.
 */ class ResponseError extends Error {
                    toJson() {
                        const result = {
                            code: this.code,
                            message: this.message
                        };
                        if (this.data !== undefined) {
                            result.data = this.data;
                        }
                        return result;
                    }
                    constructor(code, message, data){
                        super(message);
                        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
                        this.data = data;
                        Object.setPrototypeOf(this, ResponseError.prototype);
                    }
                }
                exports1.ResponseError = ResponseError;
                class ParameterStructures {
                    static is(value) {
                        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
                    }
                    toString() {
                        return this.kind;
                    }
                    constructor(kind){
                        this.kind = kind;
                    }
                }
                exports1.ParameterStructures = ParameterStructures;
                /**
 * The parameter structure is automatically inferred on the number of parameters
 * and the parameter type in case of a single param.
 */ ParameterStructures.auto = new ParameterStructures('auto');
                /**
 * Forces `byPosition` parameter structure. This is useful if you have a single
 * parameter which has a literal type.
 */ ParameterStructures.byPosition = new ParameterStructures('byPosition');
                /**
 * Forces `byName` parameter structure. This is only useful when having a single
 * parameter. The library will report errors if used with a different number of
 * parameters.
 */ ParameterStructures.byName = new ParameterStructures('byName');
                /**
 * An abstract implementation of a MessageType.
 */ class AbstractMessageSignature {
                    get parameterStructures() {
                        return ParameterStructures.auto;
                    }
                    constructor(method, numberOfParams){
                        this.method = method;
                        this.numberOfParams = numberOfParams;
                    }
                }
                exports1.AbstractMessageSignature = AbstractMessageSignature;
                /**
 * Classes to type request response pairs
 */ class RequestType0 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 0);
                    }
                }
                exports1.RequestType0 = RequestType0;
                class RequestType extends AbstractMessageSignature {
                    get parameterStructures() {
                        return this._parameterStructures;
                    }
                    constructor(method, _parameterStructures = ParameterStructures.auto){
                        super(method, 1);
                        this._parameterStructures = _parameterStructures;
                    }
                }
                exports1.RequestType = RequestType;
                class RequestType1 extends AbstractMessageSignature {
                    get parameterStructures() {
                        return this._parameterStructures;
                    }
                    constructor(method, _parameterStructures = ParameterStructures.auto){
                        super(method, 1);
                        this._parameterStructures = _parameterStructures;
                    }
                }
                exports1.RequestType1 = RequestType1;
                class RequestType2 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 2);
                    }
                }
                exports1.RequestType2 = RequestType2;
                class RequestType3 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 3);
                    }
                }
                exports1.RequestType3 = RequestType3;
                class RequestType4 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 4);
                    }
                }
                exports1.RequestType4 = RequestType4;
                class RequestType5 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 5);
                    }
                }
                exports1.RequestType5 = RequestType5;
                class RequestType6 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 6);
                    }
                }
                exports1.RequestType6 = RequestType6;
                class RequestType7 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 7);
                    }
                }
                exports1.RequestType7 = RequestType7;
                class RequestType8 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 8);
                    }
                }
                exports1.RequestType8 = RequestType8;
                class RequestType9 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 9);
                    }
                }
                exports1.RequestType9 = RequestType9;
                class NotificationType extends AbstractMessageSignature {
                    get parameterStructures() {
                        return this._parameterStructures;
                    }
                    constructor(method, _parameterStructures = ParameterStructures.auto){
                        super(method, 1);
                        this._parameterStructures = _parameterStructures;
                    }
                }
                exports1.NotificationType = NotificationType;
                class NotificationType0 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 0);
                    }
                }
                exports1.NotificationType0 = NotificationType0;
                class NotificationType1 extends AbstractMessageSignature {
                    get parameterStructures() {
                        return this._parameterStructures;
                    }
                    constructor(method, _parameterStructures = ParameterStructures.auto){
                        super(method, 1);
                        this._parameterStructures = _parameterStructures;
                    }
                }
                exports1.NotificationType1 = NotificationType1;
                class NotificationType2 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 2);
                    }
                }
                exports1.NotificationType2 = NotificationType2;
                class NotificationType3 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 3);
                    }
                }
                exports1.NotificationType3 = NotificationType3;
                class NotificationType4 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 4);
                    }
                }
                exports1.NotificationType4 = NotificationType4;
                class NotificationType5 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 5);
                    }
                }
                exports1.NotificationType5 = NotificationType5;
                class NotificationType6 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 6);
                    }
                }
                exports1.NotificationType6 = NotificationType6;
                class NotificationType7 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 7);
                    }
                }
                exports1.NotificationType7 = NotificationType7;
                class NotificationType8 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 8);
                    }
                }
                exports1.NotificationType8 = NotificationType8;
                class NotificationType9 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 9);
                    }
                }
                exports1.NotificationType9 = NotificationType9;
                var Message;
                (function(Message) {
                    /**
     * Tests if the given message is a request message
     */ function isRequest(message) {
                        const candidate = message;
                        return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
                    }
                    Message.isRequest = isRequest;
                    /**
     * Tests if the given message is a notification message
     */ function isNotification(message) {
                        const candidate = message;
                        return candidate && is.string(candidate.method) && message.id === void 0;
                    }
                    Message.isNotification = isNotification;
                    /**
     * Tests if the given message is a response message
     */ function isResponse(message) {
                        const candidate = message;
                        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
                    }
                    Message.isResponse = isResponse;
                })(Message || (exports1.Message = Message = {}));
            /***/ },
            /***/ 5091: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                let _ral;
                function RAL() {
                    if (_ral === undefined) {
                        throw new Error(`No runtime abstraction layer installed`);
                    }
                    return _ral;
                }
                (function(RAL) {
                    function install(ral) {
                        if (ral === undefined) {
                            throw new Error(`No runtime abstraction layer provided`);
                        }
                        _ral = ral;
                    }
                    RAL.install = install;
                })(RAL || (RAL = {}));
                exports1["default"] = RAL;
            /***/ },
            /***/ 418: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_415270__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.Semaphore = void 0;
                const ral_1 = __nested_webpack_require_415270__(5091);
                class Semaphore {
                    lock(thunk) {
                        return new Promise((resolve, reject)=>{
                            this._waiting.push({
                                thunk,
                                resolve,
                                reject
                            });
                            this.runNext();
                        });
                    }
                    get active() {
                        return this._active;
                    }
                    runNext() {
                        if (this._waiting.length === 0 || this._active === this._capacity) {
                            return;
                        }
                        (0, ral_1.default)().timer.setImmediate(()=>this.doRunNext());
                    }
                    doRunNext() {
                        if (this._waiting.length === 0 || this._active === this._capacity) {
                            return;
                        }
                        const next = this._waiting.shift();
                        this._active++;
                        if (this._active > this._capacity) {
                            throw new Error(`To many thunks active`);
                        }
                        try {
                            const result = next.thunk();
                            if (result instanceof Promise) {
                                result.then((value)=>{
                                    this._active--;
                                    next.resolve(value);
                                    this.runNext();
                                }, (err)=>{
                                    this._active--;
                                    next.reject(err);
                                    this.runNext();
                                });
                            } else {
                                this._active--;
                                next.resolve(result);
                                this.runNext();
                            }
                        } catch (err) {
                            this._active--;
                            next.reject(err);
                            this.runNext();
                        }
                    }
                    constructor(capacity = 1){
                        if (capacity <= 0) {
                            throw new Error('Capacity must be greater than 0');
                        }
                        this._capacity = capacity;
                        this._active = 0;
                        this._waiting = [];
                    }
                }
                exports1.Semaphore = Semaphore;
            /***/ },
            /***/ 3489: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_418713__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.SharedArrayReceiverStrategy = exports1.SharedArraySenderStrategy = void 0;
                const cancellation_1 = __nested_webpack_require_418713__(6957);
                var CancellationState;
                (function(CancellationState) {
                    CancellationState.Continue = 0;
                    CancellationState.Cancelled = 1;
                })(CancellationState || (CancellationState = {}));
                class SharedArraySenderStrategy {
                    enableCancellation(request) {
                        if (request.id === null) {
                            return;
                        }
                        const buffer = new SharedArrayBuffer(4);
                        const data = new Int32Array(buffer, 0, 1);
                        data[0] = CancellationState.Continue;
                        this.buffers.set(request.id, buffer);
                        request.$cancellationData = buffer;
                    }
                    async sendCancellation(_conn, id) {
                        const buffer = this.buffers.get(id);
                        if (buffer === undefined) {
                            return;
                        }
                        const data = new Int32Array(buffer, 0, 1);
                        Atomics.store(data, 0, CancellationState.Cancelled);
                    }
                    cleanup(id) {
                        this.buffers.delete(id);
                    }
                    dispose() {
                        this.buffers.clear();
                    }
                    constructor(){
                        this.buffers = new Map();
                    }
                }
                exports1.SharedArraySenderStrategy = SharedArraySenderStrategy;
                class SharedArrayBufferCancellationToken {
                    get isCancellationRequested() {
                        return Atomics.load(this.data, 0) === CancellationState.Cancelled;
                    }
                    get onCancellationRequested() {
                        throw new Error(`Cancellation over SharedArrayBuffer doesn't support cancellation events`);
                    }
                    constructor(buffer){
                        this.data = new Int32Array(buffer, 0, 1);
                    }
                }
                class SharedArrayBufferCancellationTokenSource {
                    cancel() {}
                    dispose() {}
                    constructor(buffer){
                        this.token = new SharedArrayBufferCancellationToken(buffer);
                    }
                }
                class SharedArrayReceiverStrategy {
                    createCancellationTokenSource(request) {
                        const buffer = request.$cancellationData;
                        if (buffer === undefined) {
                            return new cancellation_1.CancellationTokenSource();
                        }
                        return new SharedArrayBufferCancellationTokenSource(buffer);
                    }
                    constructor(){
                        this.kind = 'request';
                    }
                }
                exports1.SharedArrayReceiverStrategy = SharedArrayReceiverStrategy;
            /***/ },
            /***/ 5501: /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_422618__) {
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    var desc = Object.getOwnPropertyDescriptor(m, k);
                    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                        desc = {
                            enumerable: true,
                            get: function() {
                                return m[k];
                            }
                        };
                    }
                    Object.defineProperty(o, k2, desc);
                } : function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports1) {
                    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
                };
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.createProtocolConnection = void 0;
                const browser_1 = __nested_webpack_require_422618__(6827);
                __exportStar(__nested_webpack_require_422618__(6827), exports1);
                __exportStar(__nested_webpack_require_422618__(3147), exports1);
                function createProtocolConnection(reader, writer, logger, options) {
                    return (0, browser_1.createMessageConnection)(reader, writer, logger, options);
                }
                exports1.createProtocolConnection = createProtocolConnection;
            /***/ },
            /***/ 3147: /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_424807__) {
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    var desc = Object.getOwnPropertyDescriptor(m, k);
                    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                        desc = {
                            enumerable: true,
                            get: function() {
                                return m[k];
                            }
                        };
                    }
                    Object.defineProperty(o, k2, desc);
                } : function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports1) {
                    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
                };
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.LSPErrorCodes = exports1.createProtocolConnection = void 0;
                __exportStar(__nested_webpack_require_424807__(6729), exports1);
                __exportStar(__nested_webpack_require_424807__(2852), exports1);
                __exportStar(__nested_webpack_require_424807__(8431), exports1);
                __exportStar(__nested_webpack_require_424807__(1815), exports1);
                var connection_1 = __nested_webpack_require_424807__(291);
                Object.defineProperty(exports1, "createProtocolConnection", {
                    enumerable: true,
                    get: function() {
                        return connection_1.createProtocolConnection;
                    }
                });
                var LSPErrorCodes;
                (function(LSPErrorCodes) {
                    /**
    * This is the start range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */ LSPErrorCodes.lspReservedErrorRangeStart = -32899;
                    /**
     * A request failed but it was syntactically correct, e.g the
     * method name was known and the parameters were valid. The error
     * message should contain human readable information about why
     * the request failed.
     *
     * @since 3.17.0
     */ LSPErrorCodes.RequestFailed = -32803;
                    /**
     * The server cancelled the request. This error code should
     * only be used for requests that explicitly support being
     * server cancellable.
     *
     * @since 3.17.0
     */ LSPErrorCodes.ServerCancelled = -32802;
                    /**
     * The server detected that the content of a document got
     * modified outside normal conditions. A server should
     * NOT send this error code if it detects a content change
     * in it unprocessed messages. The result even computed
     * on an older state might still be useful for the client.
     *
     * If a client decides that a result is not of any use anymore
     * the client should cancel the request.
     */ LSPErrorCodes.ContentModified = -32801;
                    /**
     * The client has canceled a request and a server as detected
     * the cancel.
     */ LSPErrorCodes.RequestCancelled = -32800;
                    /**
    * This is the end range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */ LSPErrorCodes.lspReservedErrorRangeEnd = -32800;
                })(LSPErrorCodes || (exports1.LSPErrorCodes = LSPErrorCodes = {}));
            /***/ },
            /***/ 291: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_428947__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.createProtocolConnection = void 0;
                const vscode_jsonrpc_1 = __nested_webpack_require_428947__(6729);
                function createProtocolConnection(input, output, logger, options) {
                    if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
                        options = {
                            connectionStrategy: options
                        };
                    }
                    return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
                }
                exports1.createProtocolConnection = createProtocolConnection;
            /***/ },
            /***/ 8431: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_430184__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ProtocolNotificationType = exports1.ProtocolNotificationType0 = exports1.ProtocolRequestType = exports1.ProtocolRequestType0 = exports1.RegistrationType = exports1.MessageDirection = void 0;
                const vscode_jsonrpc_1 = __nested_webpack_require_430184__(6729);
                var MessageDirection;
                (function(MessageDirection) {
                    MessageDirection["clientToServer"] = "clientToServer";
                    MessageDirection["serverToClient"] = "serverToClient";
                    MessageDirection["both"] = "both";
                })(MessageDirection || (exports1.MessageDirection = MessageDirection = {}));
                class RegistrationType {
                    constructor(method){
                        this.method = method;
                    }
                }
                exports1.RegistrationType = RegistrationType;
                class ProtocolRequestType0 extends vscode_jsonrpc_1.RequestType0 {
                    constructor(method){
                        super(method);
                    }
                }
                exports1.ProtocolRequestType0 = ProtocolRequestType0;
                class ProtocolRequestType extends vscode_jsonrpc_1.RequestType {
                    constructor(method){
                        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
                    }
                }
                exports1.ProtocolRequestType = ProtocolRequestType;
                class ProtocolNotificationType0 extends vscode_jsonrpc_1.NotificationType0 {
                    constructor(method){
                        super(method);
                    }
                }
                exports1.ProtocolNotificationType0 = ProtocolNotificationType0;
                class ProtocolNotificationType extends vscode_jsonrpc_1.NotificationType {
                    constructor(method){
                        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
                    }
                }
                exports1.ProtocolNotificationType = ProtocolNotificationType;
            /***/ },
            /***/ 7602: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_432901__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.CallHierarchyOutgoingCallsRequest = exports1.CallHierarchyIncomingCallsRequest = exports1.CallHierarchyPrepareRequest = void 0;
                const messages_1 = __nested_webpack_require_432901__(8431);
                /**
 * A request to result a `CallHierarchyItem` in a document at a given position.
 * Can be used as an input to an incoming or outgoing call hierarchy.
 *
 * @since 3.16.0
 */ var CallHierarchyPrepareRequest;
                (function(CallHierarchyPrepareRequest) {
                    CallHierarchyPrepareRequest.method = 'textDocument/prepareCallHierarchy';
                    CallHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CallHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest.method);
                })(CallHierarchyPrepareRequest || (exports1.CallHierarchyPrepareRequest = CallHierarchyPrepareRequest = {}));
                /**
 * A request to resolve the incoming calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */ var CallHierarchyIncomingCallsRequest;
                (function(CallHierarchyIncomingCallsRequest) {
                    CallHierarchyIncomingCallsRequest.method = 'callHierarchy/incomingCalls';
                    CallHierarchyIncomingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CallHierarchyIncomingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest.method);
                })(CallHierarchyIncomingCallsRequest || (exports1.CallHierarchyIncomingCallsRequest = CallHierarchyIncomingCallsRequest = {}));
                /**
 * A request to resolve the outgoing calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */ var CallHierarchyOutgoingCallsRequest;
                (function(CallHierarchyOutgoingCallsRequest) {
                    CallHierarchyOutgoingCallsRequest.method = 'callHierarchy/outgoingCalls';
                    CallHierarchyOutgoingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CallHierarchyOutgoingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest.method);
                })(CallHierarchyOutgoingCallsRequest || (exports1.CallHierarchyOutgoingCallsRequest = CallHierarchyOutgoingCallsRequest = {}));
            /***/ },
            /***/ 3747: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_435905__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ColorPresentationRequest = exports1.DocumentColorRequest = void 0;
                const messages_1 = __nested_webpack_require_435905__(8431);
                /**
 * A request to list all color symbols found in a given text document. The request's
 * parameter is of type {@link DocumentColorParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */ var DocumentColorRequest;
                (function(DocumentColorRequest) {
                    DocumentColorRequest.method = 'textDocument/documentColor';
                    DocumentColorRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentColorRequest.type = new messages_1.ProtocolRequestType(DocumentColorRequest.method);
                })(DocumentColorRequest || (exports1.DocumentColorRequest = DocumentColorRequest = {}));
                /**
 * A request to list all presentation for a color. The request's
 * parameter is of type {@link ColorPresentationParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */ var ColorPresentationRequest;
                (function(ColorPresentationRequest) {
                    ColorPresentationRequest.method = 'textDocument/colorPresentation';
                    ColorPresentationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ColorPresentationRequest.type = new messages_1.ProtocolRequestType(ColorPresentationRequest.method);
                })(ColorPresentationRequest || (exports1.ColorPresentationRequest = ColorPresentationRequest = {}));
            /***/ },
            /***/ 7639: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_438190__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ConfigurationRequest = void 0;
                const messages_1 = __nested_webpack_require_438190__(8431);
                //---- Get Configuration request ----
                /**
 * The 'workspace/configuration' request is sent from the server to the client to fetch a certain
 * configuration setting.
 *
 * This pull model replaces the old push model were the client signaled configuration change via an
 * event. If the server still needs to react to configuration changes (since the server caches the
 * result of `workspace/configuration` requests) the server should register for an empty configuration
 * change event and empty the cache if such an event is received.
 */ var ConfigurationRequest;
                (function(ConfigurationRequest) {
                    ConfigurationRequest.method = 'workspace/configuration';
                    ConfigurationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    ConfigurationRequest.type = new messages_1.ProtocolRequestType(ConfigurationRequest.method);
                })(ConfigurationRequest || (exports1.ConfigurationRequest = ConfigurationRequest = {}));
            /***/ },
            /***/ 5581: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_439963__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.DeclarationRequest = void 0;
                const messages_1 = __nested_webpack_require_439963__(8431);
                // @ts-ignore: to avoid inlining LocationLink as dynamic import
                let __noDynamicImport;
                /**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPositionParams}
 * the response is of type {@link Declaration} or a typed array of {@link DeclarationLink}
 * or a Thenable that resolves to such.
 */ var DeclarationRequest;
                (function(DeclarationRequest) {
                    DeclarationRequest.method = 'textDocument/declaration';
                    DeclarationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DeclarationRequest.type = new messages_1.ProtocolRequestType(DeclarationRequest.method);
                })(DeclarationRequest || (exports1.DeclarationRequest = DeclarationRequest = {}));
            /***/ },
            /***/ 1494: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_441592__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.DiagnosticRefreshRequest = exports1.WorkspaceDiagnosticRequest = exports1.DocumentDiagnosticRequest = exports1.DocumentDiagnosticReportKind = exports1.DiagnosticServerCancellationData = void 0;
                const vscode_jsonrpc_1 = __nested_webpack_require_441592__(6729);
                const Is = __nested_webpack_require_441592__(8633);
                const messages_1 = __nested_webpack_require_441592__(8431);
                /**
 * @since 3.17.0
 */ var DiagnosticServerCancellationData;
                (function(DiagnosticServerCancellationData) {
                    function is(value) {
                        const candidate = value;
                        return candidate && Is.boolean(candidate.retriggerRequest);
                    }
                    DiagnosticServerCancellationData.is = is;
                })(DiagnosticServerCancellationData || (exports1.DiagnosticServerCancellationData = DiagnosticServerCancellationData = {}));
                /**
 * The document diagnostic report kinds.
 *
 * @since 3.17.0
 */ var DocumentDiagnosticReportKind;
                (function(DocumentDiagnosticReportKind) {
                    /**
     * A diagnostic report with a full
     * set of problems.
     */ DocumentDiagnosticReportKind.Full = 'full';
                    /**
     * A report indicating that the last
     * returned report is still accurate.
     */ DocumentDiagnosticReportKind.Unchanged = 'unchanged';
                })(DocumentDiagnosticReportKind || (exports1.DocumentDiagnosticReportKind = DocumentDiagnosticReportKind = {}));
                /**
 * The document diagnostic request definition.
 *
 * @since 3.17.0
 */ var DocumentDiagnosticRequest;
                (function(DocumentDiagnosticRequest) {
                    DocumentDiagnosticRequest.method = 'textDocument/diagnostic';
                    DocumentDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentDiagnosticRequest.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest.method);
                    DocumentDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
                })(DocumentDiagnosticRequest || (exports1.DocumentDiagnosticRequest = DocumentDiagnosticRequest = {}));
                /**
 * The workspace diagnostic request definition.
 *
 * @since 3.17.0
 */ var WorkspaceDiagnosticRequest;
                (function(WorkspaceDiagnosticRequest) {
                    WorkspaceDiagnosticRequest.method = 'workspace/diagnostic';
                    WorkspaceDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WorkspaceDiagnosticRequest.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest.method);
                    WorkspaceDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
                })(WorkspaceDiagnosticRequest || (exports1.WorkspaceDiagnosticRequest = WorkspaceDiagnosticRequest = {}));
                /**
 * The diagnostic refresh request definition.
 *
 * @since 3.17.0
 */ var DiagnosticRefreshRequest;
                (function(DiagnosticRefreshRequest) {
                    DiagnosticRefreshRequest.method = `workspace/diagnostic/refresh`;
                    DiagnosticRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);
                })(DiagnosticRefreshRequest || (exports1.DiagnosticRefreshRequest = DiagnosticRefreshRequest = {}));
            /***/ },
            /***/ 4781: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_445791__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.WillDeleteFilesRequest = exports1.DidDeleteFilesNotification = exports1.DidRenameFilesNotification = exports1.WillRenameFilesRequest = exports1.DidCreateFilesNotification = exports1.WillCreateFilesRequest = exports1.FileOperationPatternKind = void 0;
                const messages_1 = __nested_webpack_require_445791__(8431);
                /**
 * A pattern kind describing if a glob pattern matches a file a folder or
 * both.
 *
 * @since 3.16.0
 */ var FileOperationPatternKind;
                (function(FileOperationPatternKind) {
                    /**
     * The pattern matches a file only.
     */ FileOperationPatternKind.file = 'file';
                    /**
     * The pattern matches a folder only.
     */ FileOperationPatternKind.folder = 'folder';
                })(FileOperationPatternKind || (exports1.FileOperationPatternKind = FileOperationPatternKind = {}));
                /**
 * The will create files request is sent from the client to the server before files are actually
 * created as long as the creation is triggered from within the client.
 *
 * The request can return a `WorkspaceEdit` which will be applied to workspace before the
 * files are created. Hence the `WorkspaceEdit` can not manipulate the content of the file
 * to be created.
 *
 * @since 3.16.0
 */ var WillCreateFilesRequest;
                (function(WillCreateFilesRequest) {
                    WillCreateFilesRequest.method = 'workspace/willCreateFiles';
                    WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);
                })(WillCreateFilesRequest || (exports1.WillCreateFilesRequest = WillCreateFilesRequest = {}));
                /**
 * The did create files notification is sent from the client to the server when
 * files were created from within the client.
 *
 * @since 3.16.0
 */ var DidCreateFilesNotification;
                (function(DidCreateFilesNotification) {
                    DidCreateFilesNotification.method = 'workspace/didCreateFiles';
                    DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);
                })(DidCreateFilesNotification || (exports1.DidCreateFilesNotification = DidCreateFilesNotification = {}));
                /**
 * The will rename files request is sent from the client to the server before files are actually
 * renamed as long as the rename is triggered from within the client.
 *
 * @since 3.16.0
 */ var WillRenameFilesRequest;
                (function(WillRenameFilesRequest) {
                    WillRenameFilesRequest.method = 'workspace/willRenameFiles';
                    WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);
                })(WillRenameFilesRequest || (exports1.WillRenameFilesRequest = WillRenameFilesRequest = {}));
                /**
 * The did rename files notification is sent from the client to the server when
 * files were renamed from within the client.
 *
 * @since 3.16.0
 */ var DidRenameFilesNotification;
                (function(DidRenameFilesNotification) {
                    DidRenameFilesNotification.method = 'workspace/didRenameFiles';
                    DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);
                })(DidRenameFilesNotification || (exports1.DidRenameFilesNotification = DidRenameFilesNotification = {}));
                /**
 * The will delete files request is sent from the client to the server before files are actually
 * deleted as long as the deletion is triggered from within the client.
 *
 * @since 3.16.0
 */ var DidDeleteFilesNotification;
                (function(DidDeleteFilesNotification) {
                    DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';
                    DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);
                })(DidDeleteFilesNotification || (exports1.DidDeleteFilesNotification = DidDeleteFilesNotification = {}));
                /**
 * The did delete files notification is sent from the client to the server when
 * files were deleted from within the client.
 *
 * @since 3.16.0
 */ var WillDeleteFilesRequest;
                (function(WillDeleteFilesRequest) {
                    WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';
                    WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);
                })(WillDeleteFilesRequest || (exports1.WillDeleteFilesRequest = WillDeleteFilesRequest = {}));
            /***/ },
            /***/ 1203: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_451733__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.FoldingRangeRefreshRequest = exports1.FoldingRangeRequest = void 0;
                const messages_1 = __nested_webpack_require_451733__(8431);
                /**
 * A request to provide folding ranges in a document. The request's
 * parameter is of type {@link FoldingRangeParams}, the
 * response is of type {@link FoldingRangeList} or a Thenable
 * that resolves to such.
 */ var FoldingRangeRequest;
                (function(FoldingRangeRequest) {
                    FoldingRangeRequest.method = 'textDocument/foldingRange';
                    FoldingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    FoldingRangeRequest.type = new messages_1.ProtocolRequestType(FoldingRangeRequest.method);
                })(FoldingRangeRequest || (exports1.FoldingRangeRequest = FoldingRangeRequest = {}));
                /**
 * @since 3.18.0
 * @proposed
 */ var FoldingRangeRefreshRequest;
                (function(FoldingRangeRefreshRequest) {
                    FoldingRangeRefreshRequest.method = `workspace/foldingRange/refresh`;
                    FoldingRangeRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    FoldingRangeRefreshRequest.type = new messages_1.ProtocolRequestType0(FoldingRangeRefreshRequest.method);
                })(FoldingRangeRefreshRequest || (exports1.FoldingRangeRefreshRequest = FoldingRangeRefreshRequest = {}));
            /***/ },
            /***/ 7287: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_453792__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ImplementationRequest = void 0;
                const messages_1 = __nested_webpack_require_453792__(8431);
                // @ts-ignore: to avoid inlining LocationLink as dynamic import
                let __noDynamicImport;
                /**
 * A request to resolve the implementation locations of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPositionParams}
 * the response is of type {@link Definition} or a Thenable that resolves to such.
 */ var ImplementationRequest;
                (function(ImplementationRequest) {
                    ImplementationRequest.method = 'textDocument/implementation';
                    ImplementationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ImplementationRequest.type = new messages_1.ProtocolRequestType(ImplementationRequest.method);
                })(ImplementationRequest || (exports1.ImplementationRequest = ImplementationRequest = {}));
            /***/ },
            /***/ 9383: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_455405__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.InlayHintRefreshRequest = exports1.InlayHintResolveRequest = exports1.InlayHintRequest = void 0;
                const messages_1 = __nested_webpack_require_455405__(8431);
                /**
 * A request to provide inlay hints in a document. The request's parameter is of
 * type {@link InlayHintsParams}, the response is of type
 * {@link InlayHint InlayHint[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */ var InlayHintRequest;
                (function(InlayHintRequest) {
                    InlayHintRequest.method = 'textDocument/inlayHint';
                    InlayHintRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InlayHintRequest.type = new messages_1.ProtocolRequestType(InlayHintRequest.method);
                })(InlayHintRequest || (exports1.InlayHintRequest = InlayHintRequest = {}));
                /**
 * A request to resolve additional properties for an inlay hint.
 * The request's parameter is of type {@link InlayHint}, the response is
 * of type {@link InlayHint} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */ var InlayHintResolveRequest;
                (function(InlayHintResolveRequest) {
                    InlayHintResolveRequest.method = 'inlayHint/resolve';
                    InlayHintResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InlayHintResolveRequest.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest.method);
                })(InlayHintResolveRequest || (exports1.InlayHintResolveRequest = InlayHintResolveRequest = {}));
                /**
 * @since 3.17.0
 */ var InlayHintRefreshRequest;
                (function(InlayHintRefreshRequest) {
                    InlayHintRefreshRequest.method = `workspace/inlayHint/refresh`;
                    InlayHintRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    InlayHintRefreshRequest.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest.method);
                })(InlayHintRefreshRequest || (exports1.InlayHintRefreshRequest = InlayHintRefreshRequest = {}));
            /***/ },
            /***/ 2322: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_458181__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.InlineCompletionRequest = void 0;
                const messages_1 = __nested_webpack_require_458181__(8431);
                /**
 * A request to provide inline completions in a document. The request's parameter is of
 * type {@link InlineCompletionParams}, the response is of type
 * {@link InlineCompletion InlineCompletion[]} or a Thenable that resolves to such.
 *
 * @since 3.18.0
 * @proposed
 */ var InlineCompletionRequest;
                (function(InlineCompletionRequest) {
                    InlineCompletionRequest.method = 'textDocument/inlineCompletion';
                    InlineCompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InlineCompletionRequest.type = new messages_1.ProtocolRequestType(InlineCompletionRequest.method);
                })(InlineCompletionRequest || (exports1.InlineCompletionRequest = InlineCompletionRequest = {}));
            /***/ },
            /***/ 3491: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_459712__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.InlineValueRefreshRequest = exports1.InlineValueRequest = void 0;
                const messages_1 = __nested_webpack_require_459712__(8431);
                /**
 * A request to provide inline values in a document. The request's parameter is of
 * type {@link InlineValueParams}, the response is of type
 * {@link InlineValue InlineValue[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */ var InlineValueRequest;
                (function(InlineValueRequest) {
                    InlineValueRequest.method = 'textDocument/inlineValue';
                    InlineValueRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InlineValueRequest.type = new messages_1.ProtocolRequestType(InlineValueRequest.method);
                })(InlineValueRequest || (exports1.InlineValueRequest = InlineValueRequest = {}));
                /**
 * @since 3.17.0
 */ var InlineValueRefreshRequest;
                (function(InlineValueRefreshRequest) {
                    InlineValueRefreshRequest.method = `workspace/inlineValue/refresh`;
                    InlineValueRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    InlineValueRefreshRequest.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest.method);
                })(InlineValueRefreshRequest || (exports1.InlineValueRefreshRequest = InlineValueRefreshRequest = {}));
            /***/ },
            /***/ 1815: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_461760__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.WorkspaceSymbolRequest = exports1.CodeActionResolveRequest = exports1.CodeActionRequest = exports1.DocumentSymbolRequest = exports1.DocumentHighlightRequest = exports1.ReferencesRequest = exports1.DefinitionRequest = exports1.SignatureHelpRequest = exports1.SignatureHelpTriggerKind = exports1.HoverRequest = exports1.CompletionResolveRequest = exports1.CompletionRequest = exports1.CompletionTriggerKind = exports1.PublishDiagnosticsNotification = exports1.WatchKind = exports1.RelativePattern = exports1.FileChangeType = exports1.DidChangeWatchedFilesNotification = exports1.WillSaveTextDocumentWaitUntilRequest = exports1.WillSaveTextDocumentNotification = exports1.TextDocumentSaveReason = exports1.DidSaveTextDocumentNotification = exports1.DidCloseTextDocumentNotification = exports1.DidChangeTextDocumentNotification = exports1.TextDocumentContentChangeEvent = exports1.DidOpenTextDocumentNotification = exports1.TextDocumentSyncKind = exports1.TelemetryEventNotification = exports1.LogMessageNotification = exports1.ShowMessageRequest = exports1.ShowMessageNotification = exports1.MessageType = exports1.DidChangeConfigurationNotification = exports1.ExitNotification = exports1.ShutdownRequest = exports1.InitializedNotification = exports1.InitializeErrorCodes = exports1.InitializeRequest = exports1.WorkDoneProgressOptions = exports1.TextDocumentRegistrationOptions = exports1.StaticRegistrationOptions = exports1.PositionEncodingKind = exports1.FailureHandlingKind = exports1.ResourceOperationKind = exports1.UnregistrationRequest = exports1.RegistrationRequest = exports1.DocumentSelector = exports1.NotebookCellTextDocumentFilter = exports1.NotebookDocumentFilter = exports1.TextDocumentFilter = void 0;
                exports1.MonikerRequest = exports1.MonikerKind = exports1.UniquenessLevel = exports1.WillDeleteFilesRequest = exports1.DidDeleteFilesNotification = exports1.WillRenameFilesRequest = exports1.DidRenameFilesNotification = exports1.WillCreateFilesRequest = exports1.DidCreateFilesNotification = exports1.FileOperationPatternKind = exports1.LinkedEditingRangeRequest = exports1.ShowDocumentRequest = exports1.SemanticTokensRegistrationType = exports1.SemanticTokensRefreshRequest = exports1.SemanticTokensRangeRequest = exports1.SemanticTokensDeltaRequest = exports1.SemanticTokensRequest = exports1.TokenFormat = exports1.CallHierarchyPrepareRequest = exports1.CallHierarchyOutgoingCallsRequest = exports1.CallHierarchyIncomingCallsRequest = exports1.WorkDoneProgressCancelNotification = exports1.WorkDoneProgressCreateRequest = exports1.WorkDoneProgress = exports1.SelectionRangeRequest = exports1.DeclarationRequest = exports1.FoldingRangeRefreshRequest = exports1.FoldingRangeRequest = exports1.ColorPresentationRequest = exports1.DocumentColorRequest = exports1.ConfigurationRequest = exports1.DidChangeWorkspaceFoldersNotification = exports1.WorkspaceFoldersRequest = exports1.TypeDefinitionRequest = exports1.ImplementationRequest = exports1.ApplyWorkspaceEditRequest = exports1.ExecuteCommandRequest = exports1.PrepareRenameRequest = exports1.RenameRequest = exports1.PrepareSupportDefaultBehavior = exports1.DocumentOnTypeFormattingRequest = exports1.DocumentRangesFormattingRequest = exports1.DocumentRangeFormattingRequest = exports1.DocumentFormattingRequest = exports1.DocumentLinkResolveRequest = exports1.DocumentLinkRequest = exports1.CodeLensRefreshRequest = exports1.CodeLensResolveRequest = exports1.CodeLensRequest = exports1.WorkspaceSymbolResolveRequest = void 0;
                exports1.InlineCompletionRequest = exports1.DidCloseNotebookDocumentNotification = exports1.DidSaveNotebookDocumentNotification = exports1.DidChangeNotebookDocumentNotification = exports1.NotebookCellArrayChange = exports1.DidOpenNotebookDocumentNotification = exports1.NotebookDocumentSyncRegistrationType = exports1.NotebookDocument = exports1.NotebookCell = exports1.ExecutionSummary = exports1.NotebookCellKind = exports1.DiagnosticRefreshRequest = exports1.WorkspaceDiagnosticRequest = exports1.DocumentDiagnosticRequest = exports1.DocumentDiagnosticReportKind = exports1.DiagnosticServerCancellationData = exports1.InlayHintRefreshRequest = exports1.InlayHintResolveRequest = exports1.InlayHintRequest = exports1.InlineValueRefreshRequest = exports1.InlineValueRequest = exports1.TypeHierarchySupertypesRequest = exports1.TypeHierarchySubtypesRequest = exports1.TypeHierarchyPrepareRequest = void 0;
                const messages_1 = __nested_webpack_require_461760__(8431);
                const vscode_languageserver_types_1 = __nested_webpack_require_461760__(2852);
                const Is = __nested_webpack_require_461760__(8633);
                const protocol_implementation_1 = __nested_webpack_require_461760__(7287);
                Object.defineProperty(exports1, "ImplementationRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_implementation_1.ImplementationRequest;
                    }
                });
                const protocol_typeDefinition_1 = __nested_webpack_require_461760__(9264);
                Object.defineProperty(exports1, "TypeDefinitionRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_typeDefinition_1.TypeDefinitionRequest;
                    }
                });
                const protocol_workspaceFolder_1 = __nested_webpack_require_461760__(6860);
                Object.defineProperty(exports1, "WorkspaceFoldersRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_workspaceFolder_1.WorkspaceFoldersRequest;
                    }
                });
                Object.defineProperty(exports1, "DidChangeWorkspaceFoldersNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification;
                    }
                });
                const protocol_configuration_1 = __nested_webpack_require_461760__(7639);
                Object.defineProperty(exports1, "ConfigurationRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_configuration_1.ConfigurationRequest;
                    }
                });
                const protocol_colorProvider_1 = __nested_webpack_require_461760__(3747);
                Object.defineProperty(exports1, "DocumentColorRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_colorProvider_1.DocumentColorRequest;
                    }
                });
                Object.defineProperty(exports1, "ColorPresentationRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_colorProvider_1.ColorPresentationRequest;
                    }
                });
                const protocol_foldingRange_1 = __nested_webpack_require_461760__(1203);
                Object.defineProperty(exports1, "FoldingRangeRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_foldingRange_1.FoldingRangeRequest;
                    }
                });
                Object.defineProperty(exports1, "FoldingRangeRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_foldingRange_1.FoldingRangeRefreshRequest;
                    }
                });
                const protocol_declaration_1 = __nested_webpack_require_461760__(5581);
                Object.defineProperty(exports1, "DeclarationRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_declaration_1.DeclarationRequest;
                    }
                });
                const protocol_selectionRange_1 = __nested_webpack_require_461760__(1530);
                Object.defineProperty(exports1, "SelectionRangeRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_selectionRange_1.SelectionRangeRequest;
                    }
                });
                const protocol_progress_1 = __nested_webpack_require_461760__(4166);
                Object.defineProperty(exports1, "WorkDoneProgress", {
                    enumerable: true,
                    get: function() {
                        return protocol_progress_1.WorkDoneProgress;
                    }
                });
                Object.defineProperty(exports1, "WorkDoneProgressCreateRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_progress_1.WorkDoneProgressCreateRequest;
                    }
                });
                Object.defineProperty(exports1, "WorkDoneProgressCancelNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_progress_1.WorkDoneProgressCancelNotification;
                    }
                });
                const protocol_callHierarchy_1 = __nested_webpack_require_461760__(7602);
                Object.defineProperty(exports1, "CallHierarchyIncomingCallsRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest;
                    }
                });
                Object.defineProperty(exports1, "CallHierarchyOutgoingCallsRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest;
                    }
                });
                Object.defineProperty(exports1, "CallHierarchyPrepareRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_callHierarchy_1.CallHierarchyPrepareRequest;
                    }
                });
                const protocol_semanticTokens_1 = __nested_webpack_require_461760__(2067);
                Object.defineProperty(exports1, "TokenFormat", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.TokenFormat;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensRequest;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensDeltaRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensDeltaRequest;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensRangeRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensRangeRequest;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensRefreshRequest;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensRegistrationType", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensRegistrationType;
                    }
                });
                const protocol_showDocument_1 = __nested_webpack_require_461760__(4333);
                Object.defineProperty(exports1, "ShowDocumentRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_showDocument_1.ShowDocumentRequest;
                    }
                });
                const protocol_linkedEditingRange_1 = __nested_webpack_require_461760__(2249);
                Object.defineProperty(exports1, "LinkedEditingRangeRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_linkedEditingRange_1.LinkedEditingRangeRequest;
                    }
                });
                const protocol_fileOperations_1 = __nested_webpack_require_461760__(4781);
                Object.defineProperty(exports1, "FileOperationPatternKind", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.FileOperationPatternKind;
                    }
                });
                Object.defineProperty(exports1, "DidCreateFilesNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.DidCreateFilesNotification;
                    }
                });
                Object.defineProperty(exports1, "WillCreateFilesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.WillCreateFilesRequest;
                    }
                });
                Object.defineProperty(exports1, "DidRenameFilesNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.DidRenameFilesNotification;
                    }
                });
                Object.defineProperty(exports1, "WillRenameFilesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.WillRenameFilesRequest;
                    }
                });
                Object.defineProperty(exports1, "DidDeleteFilesNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.DidDeleteFilesNotification;
                    }
                });
                Object.defineProperty(exports1, "WillDeleteFilesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.WillDeleteFilesRequest;
                    }
                });
                const protocol_moniker_1 = __nested_webpack_require_461760__(7684);
                Object.defineProperty(exports1, "UniquenessLevel", {
                    enumerable: true,
                    get: function() {
                        return protocol_moniker_1.UniquenessLevel;
                    }
                });
                Object.defineProperty(exports1, "MonikerKind", {
                    enumerable: true,
                    get: function() {
                        return protocol_moniker_1.MonikerKind;
                    }
                });
                Object.defineProperty(exports1, "MonikerRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_moniker_1.MonikerRequest;
                    }
                });
                const protocol_typeHierarchy_1 = __nested_webpack_require_461760__(7062);
                Object.defineProperty(exports1, "TypeHierarchyPrepareRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest;
                    }
                });
                Object.defineProperty(exports1, "TypeHierarchySubtypesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest;
                    }
                });
                Object.defineProperty(exports1, "TypeHierarchySupertypesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest;
                    }
                });
                const protocol_inlineValue_1 = __nested_webpack_require_461760__(3491);
                Object.defineProperty(exports1, "InlineValueRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlineValue_1.InlineValueRequest;
                    }
                });
                Object.defineProperty(exports1, "InlineValueRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlineValue_1.InlineValueRefreshRequest;
                    }
                });
                const protocol_inlayHint_1 = __nested_webpack_require_461760__(9383);
                Object.defineProperty(exports1, "InlayHintRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlayHint_1.InlayHintRequest;
                    }
                });
                Object.defineProperty(exports1, "InlayHintResolveRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlayHint_1.InlayHintResolveRequest;
                    }
                });
                Object.defineProperty(exports1, "InlayHintRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlayHint_1.InlayHintRefreshRequest;
                    }
                });
                const protocol_diagnostic_1 = __nested_webpack_require_461760__(1494);
                Object.defineProperty(exports1, "DiagnosticServerCancellationData", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.DiagnosticServerCancellationData;
                    }
                });
                Object.defineProperty(exports1, "DocumentDiagnosticReportKind", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.DocumentDiagnosticReportKind;
                    }
                });
                Object.defineProperty(exports1, "DocumentDiagnosticRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.DocumentDiagnosticRequest;
                    }
                });
                Object.defineProperty(exports1, "WorkspaceDiagnosticRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.WorkspaceDiagnosticRequest;
                    }
                });
                Object.defineProperty(exports1, "DiagnosticRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.DiagnosticRefreshRequest;
                    }
                });
                const protocol_notebook_1 = __nested_webpack_require_461760__(4792);
                Object.defineProperty(exports1, "NotebookCellKind", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookCellKind;
                    }
                });
                Object.defineProperty(exports1, "ExecutionSummary", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.ExecutionSummary;
                    }
                });
                Object.defineProperty(exports1, "NotebookCell", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookCell;
                    }
                });
                Object.defineProperty(exports1, "NotebookDocument", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookDocument;
                    }
                });
                Object.defineProperty(exports1, "NotebookDocumentSyncRegistrationType", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookDocumentSyncRegistrationType;
                    }
                });
                Object.defineProperty(exports1, "DidOpenNotebookDocumentNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.DidOpenNotebookDocumentNotification;
                    }
                });
                Object.defineProperty(exports1, "NotebookCellArrayChange", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookCellArrayChange;
                    }
                });
                Object.defineProperty(exports1, "DidChangeNotebookDocumentNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.DidChangeNotebookDocumentNotification;
                    }
                });
                Object.defineProperty(exports1, "DidSaveNotebookDocumentNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.DidSaveNotebookDocumentNotification;
                    }
                });
                Object.defineProperty(exports1, "DidCloseNotebookDocumentNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.DidCloseNotebookDocumentNotification;
                    }
                });
                const protocol_inlineCompletion_1 = __nested_webpack_require_461760__(2322);
                Object.defineProperty(exports1, "InlineCompletionRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlineCompletion_1.InlineCompletionRequest;
                    }
                });
                // @ts-ignore: to avoid inlining LocationLink as dynamic import
                let __noDynamicImport;
                /**
 * The TextDocumentFilter namespace provides helper functions to work with
 * {@link TextDocumentFilter} literals.
 *
 * @since 3.17.0
 */ var TextDocumentFilter;
                (function(TextDocumentFilter) {
                    function is(value) {
                        const candidate = value;
                        return Is.string(candidate) || Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);
                    }
                    TextDocumentFilter.is = is;
                })(TextDocumentFilter || (exports1.TextDocumentFilter = TextDocumentFilter = {}));
                /**
 * The NotebookDocumentFilter namespace provides helper functions to work with
 * {@link NotebookDocumentFilter} literals.
 *
 * @since 3.17.0
 */ var NotebookDocumentFilter;
                (function(NotebookDocumentFilter) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
                    }
                    NotebookDocumentFilter.is = is;
                })(NotebookDocumentFilter || (exports1.NotebookDocumentFilter = NotebookDocumentFilter = {}));
                /**
 * The NotebookCellTextDocumentFilter namespace provides helper functions to work with
 * {@link NotebookCellTextDocumentFilter} literals.
 *
 * @since 3.17.0
 */ var NotebookCellTextDocumentFilter;
                (function(NotebookCellTextDocumentFilter) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook)) && (candidate.language === undefined || Is.string(candidate.language));
                    }
                    NotebookCellTextDocumentFilter.is = is;
                })(NotebookCellTextDocumentFilter || (exports1.NotebookCellTextDocumentFilter = NotebookCellTextDocumentFilter = {}));
                /**
 * The DocumentSelector namespace provides helper functions to work with
 * {@link DocumentSelector}s.
 */ var DocumentSelector;
                (function(DocumentSelector) {
                    function is(value) {
                        if (!Array.isArray(value)) {
                            return false;
                        }
                        for (let elem of value){
                            if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
                                return false;
                            }
                        }
                        return true;
                    }
                    DocumentSelector.is = is;
                })(DocumentSelector || (exports1.DocumentSelector = DocumentSelector = {}));
                /**
 * The `client/registerCapability` request is sent from the server to the client to register a new capability
 * handler on the client side.
 */ var RegistrationRequest;
                (function(RegistrationRequest) {
                    RegistrationRequest.method = 'client/registerCapability';
                    RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);
                })(RegistrationRequest || (exports1.RegistrationRequest = RegistrationRequest = {}));
                /**
 * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
 * handler on the client side.
 */ var UnregistrationRequest;
                (function(UnregistrationRequest) {
                    UnregistrationRequest.method = 'client/unregisterCapability';
                    UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);
                })(UnregistrationRequest || (exports1.UnregistrationRequest = UnregistrationRequest = {}));
                var ResourceOperationKind;
                (function(ResourceOperationKind) {
                    /**
     * Supports creating new files and folders.
     */ ResourceOperationKind.Create = 'create';
                    /**
     * Supports renaming existing files and folders.
     */ ResourceOperationKind.Rename = 'rename';
                    /**
     * Supports deleting existing files and folders.
     */ ResourceOperationKind.Delete = 'delete';
                })(ResourceOperationKind || (exports1.ResourceOperationKind = ResourceOperationKind = {}));
                var FailureHandlingKind;
                (function(FailureHandlingKind) {
                    /**
     * Applying the workspace change is simply aborted if one of the changes provided
     * fails. All operations executed before the failing operation stay executed.
     */ FailureHandlingKind.Abort = 'abort';
                    /**
     * All operations are executed transactional. That means they either all
     * succeed or no changes at all are applied to the workspace.
     */ FailureHandlingKind.Transactional = 'transactional';
                    /**
     * If the workspace edit contains only textual file changes they are executed transactional.
     * If resource changes (create, rename or delete file) are part of the change the failure
     * handling strategy is abort.
     */ FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';
                    /**
     * The client tries to undo the operations already executed. But there is no
     * guarantee that this is succeeding.
     */ FailureHandlingKind.Undo = 'undo';
                })(FailureHandlingKind || (exports1.FailureHandlingKind = FailureHandlingKind = {}));
                /**
 * A set of predefined position encoding kinds.
 *
 * @since 3.17.0
 */ var PositionEncodingKind;
                (function(PositionEncodingKind) {
                    /**
     * Character offsets count UTF-8 code units (e.g. bytes).
     */ PositionEncodingKind.UTF8 = 'utf-8';
                    /**
     * Character offsets count UTF-16 code units.
     *
     * This is the default and must always be supported
     * by servers
     */ PositionEncodingKind.UTF16 = 'utf-16';
                    /**
     * Character offsets count UTF-32 code units.
     *
     * Implementation note: these are the same as Unicode codepoints,
     * so this `PositionEncodingKind` may also be used for an
     * encoding-agnostic representation of character offsets.
     */ PositionEncodingKind.UTF32 = 'utf-32';
                })(PositionEncodingKind || (exports1.PositionEncodingKind = PositionEncodingKind = {}));
                /**
 * The StaticRegistrationOptions namespace provides helper functions to work with
 * {@link StaticRegistrationOptions} literals.
 */ var StaticRegistrationOptions;
                (function(StaticRegistrationOptions) {
                    function hasId(value) {
                        const candidate = value;
                        return candidate && Is.string(candidate.id) && candidate.id.length > 0;
                    }
                    StaticRegistrationOptions.hasId = hasId;
                })(StaticRegistrationOptions || (exports1.StaticRegistrationOptions = StaticRegistrationOptions = {}));
                /**
 * The TextDocumentRegistrationOptions namespace provides helper functions to work with
 * {@link TextDocumentRegistrationOptions} literals.
 */ var TextDocumentRegistrationOptions;
                (function(TextDocumentRegistrationOptions) {
                    function is(value) {
                        const candidate = value;
                        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
                    }
                    TextDocumentRegistrationOptions.is = is;
                })(TextDocumentRegistrationOptions || (exports1.TextDocumentRegistrationOptions = TextDocumentRegistrationOptions = {}));
                /**
 * The WorkDoneProgressOptions namespace provides helper functions to work with
 * {@link WorkDoneProgressOptions} literals.
 */ var WorkDoneProgressOptions;
                (function(WorkDoneProgressOptions) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));
                    }
                    WorkDoneProgressOptions.is = is;
                    function hasWorkDoneProgress(value) {
                        const candidate = value;
                        return candidate && Is.boolean(candidate.workDoneProgress);
                    }
                    WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;
                })(WorkDoneProgressOptions || (exports1.WorkDoneProgressOptions = WorkDoneProgressOptions = {}));
                /**
 * The initialize request is sent from the client to the server.
 * It is sent once as the request after starting up the server.
 * The requests parameter is of type {@link InitializeParams}
 * the response if of type {@link InitializeResult} of a Thenable that
 * resolves to such.
 */ var InitializeRequest;
                (function(InitializeRequest) {
                    InitializeRequest.method = 'initialize';
                    InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);
                })(InitializeRequest || (exports1.InitializeRequest = InitializeRequest = {}));
                /**
 * Known error codes for an `InitializeErrorCodes`;
 */ var InitializeErrorCodes;
                (function(InitializeErrorCodes) {
                    /**
     * If the protocol version provided by the client can't be handled by the server.
     *
     * @deprecated This initialize error got replaced by client capabilities. There is
     * no version handshake in version 3.0x
     */ InitializeErrorCodes.unknownProtocolVersion = 1;
                })(InitializeErrorCodes || (exports1.InitializeErrorCodes = InitializeErrorCodes = {}));
                /**
 * The initialized notification is sent from the client to the
 * server after the client is fully initialized and the server
 * is allowed to send requests from the server to the client.
 */ var InitializedNotification;
                (function(InitializedNotification) {
                    InitializedNotification.method = 'initialized';
                    InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);
                })(InitializedNotification || (exports1.InitializedNotification = InitializedNotification = {}));
                //---- Shutdown Method ----
                /**
 * A shutdown request is sent from the client to the server.
 * It is sent once when the client decides to shutdown the
 * server. The only notification that is sent after a shutdown request
 * is the exit event.
 */ var ShutdownRequest;
                (function(ShutdownRequest) {
                    ShutdownRequest.method = 'shutdown';
                    ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);
                })(ShutdownRequest || (exports1.ShutdownRequest = ShutdownRequest = {}));
                //---- Exit Notification ----
                /**
 * The exit event is sent from the client to the server to
 * ask the server to exit its process.
 */ var ExitNotification;
                (function(ExitNotification) {
                    ExitNotification.method = 'exit';
                    ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);
                })(ExitNotification || (exports1.ExitNotification = ExitNotification = {}));
                /**
 * The configuration change notification is sent from the client to the server
 * when the client's configuration has changed. The notification contains
 * the changed configuration as defined by the language client.
 */ var DidChangeConfigurationNotification;
                (function(DidChangeConfigurationNotification) {
                    DidChangeConfigurationNotification.method = 'workspace/didChangeConfiguration';
                    DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);
                })(DidChangeConfigurationNotification || (exports1.DidChangeConfigurationNotification = DidChangeConfigurationNotification = {}));
                //---- Message show and log notifications ----
                /**
 * The message type
 */ var MessageType;
                (function(MessageType) {
                    /**
     * An error message.
     */ MessageType.Error = 1;
                    /**
     * A warning message.
     */ MessageType.Warning = 2;
                    /**
     * An information message.
     */ MessageType.Info = 3;
                    /**
     * A log message.
     */ MessageType.Log = 4;
                    /**
     * A debug message.
     *
     * @since 3.18.0
     */ MessageType.Debug = 5;
                })(MessageType || (exports1.MessageType = MessageType = {}));
                /**
 * The show message notification is sent from a server to a client to ask
 * the client to display a particular message in the user interface.
 */ var ShowMessageNotification;
                (function(ShowMessageNotification) {
                    ShowMessageNotification.method = 'window/showMessage';
                    ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
                    ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);
                })(ShowMessageNotification || (exports1.ShowMessageNotification = ShowMessageNotification = {}));
                /**
 * The show message request is sent from the server to the client to show a message
 * and a set of options actions to the user.
 */ var ShowMessageRequest;
                (function(ShowMessageRequest) {
                    ShowMessageRequest.method = 'window/showMessageRequest';
                    ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);
                })(ShowMessageRequest || (exports1.ShowMessageRequest = ShowMessageRequest = {}));
                /**
 * The log message notification is sent from the server to the client to ask
 * the client to log a particular message.
 */ var LogMessageNotification;
                (function(LogMessageNotification) {
                    LogMessageNotification.method = 'window/logMessage';
                    LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
                    LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);
                })(LogMessageNotification || (exports1.LogMessageNotification = LogMessageNotification = {}));
                //---- Telemetry notification
                /**
 * The telemetry event notification is sent from the server to the client to ask
 * the client to log telemetry data.
 */ var TelemetryEventNotification;
                (function(TelemetryEventNotification) {
                    TelemetryEventNotification.method = 'telemetry/event';
                    TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;
                    TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);
                })(TelemetryEventNotification || (exports1.TelemetryEventNotification = TelemetryEventNotification = {}));
                /**
 * Defines how the host (editor) should sync
 * document changes to the language server.
 */ var TextDocumentSyncKind;
                (function(TextDocumentSyncKind) {
                    /**
     * Documents should not be synced at all.
     */ TextDocumentSyncKind.None = 0;
                    /**
     * Documents are synced by always sending the full content
     * of the document.
     */ TextDocumentSyncKind.Full = 1;
                    /**
     * Documents are synced by sending the full content on open.
     * After that only incremental updates to the document are
     * send.
     */ TextDocumentSyncKind.Incremental = 2;
                })(TextDocumentSyncKind || (exports1.TextDocumentSyncKind = TextDocumentSyncKind = {}));
                /**
 * The document open notification is sent from the client to the server to signal
 * newly opened text documents. The document's truth is now managed by the client
 * and the server must not try to read the document's truth using the document's
 * uri. Open in this sense means it is managed by the client. It doesn't necessarily
 * mean that its content is presented in an editor. An open notification must not
 * be sent more than once without a corresponding close notification send before.
 * This means open and close notification must be balanced and the max open count
 * is one.
 */ var DidOpenTextDocumentNotification;
                (function(DidOpenTextDocumentNotification) {
                    DidOpenTextDocumentNotification.method = 'textDocument/didOpen';
                    DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);
                })(DidOpenTextDocumentNotification || (exports1.DidOpenTextDocumentNotification = DidOpenTextDocumentNotification = {}));
                var TextDocumentContentChangeEvent;
                (function(TextDocumentContentChangeEvent) {
                    /**
     * Checks whether the information describes a delta event.
     */ function isIncremental(event) {
                        let candidate = event;
                        return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range !== undefined && (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
                    }
                    TextDocumentContentChangeEvent.isIncremental = isIncremental;
                    /**
     * Checks whether the information describes a full replacement event.
     */ function isFull(event) {
                        let candidate = event;
                        return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
                    }
                    TextDocumentContentChangeEvent.isFull = isFull;
                })(TextDocumentContentChangeEvent || (exports1.TextDocumentContentChangeEvent = TextDocumentContentChangeEvent = {}));
                /**
 * The document change notification is sent from the client to the server to signal
 * changes to a text document.
 */ var DidChangeTextDocumentNotification;
                (function(DidChangeTextDocumentNotification) {
                    DidChangeTextDocumentNotification.method = 'textDocument/didChange';
                    DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);
                })(DidChangeTextDocumentNotification || (exports1.DidChangeTextDocumentNotification = DidChangeTextDocumentNotification = {}));
                /**
 * The document close notification is sent from the client to the server when
 * the document got closed in the client. The document's truth now exists where
 * the document's uri points to (e.g. if the document's uri is a file uri the
 * truth now exists on disk). As with the open notification the close notification
 * is about managing the document's content. Receiving a close notification
 * doesn't mean that the document was open in an editor before. A close
 * notification requires a previous open notification to be sent.
 */ var DidCloseTextDocumentNotification;
                (function(DidCloseTextDocumentNotification) {
                    DidCloseTextDocumentNotification.method = 'textDocument/didClose';
                    DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);
                })(DidCloseTextDocumentNotification || (exports1.DidCloseTextDocumentNotification = DidCloseTextDocumentNotification = {}));
                /**
 * The document save notification is sent from the client to the server when
 * the document got saved in the client.
 */ var DidSaveTextDocumentNotification;
                (function(DidSaveTextDocumentNotification) {
                    DidSaveTextDocumentNotification.method = 'textDocument/didSave';
                    DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);
                })(DidSaveTextDocumentNotification || (exports1.DidSaveTextDocumentNotification = DidSaveTextDocumentNotification = {}));
                /**
 * Represents reasons why a text document is saved.
 */ var TextDocumentSaveReason;
                (function(TextDocumentSaveReason) {
                    /**
     * Manually triggered, e.g. by the user pressing save, by starting debugging,
     * or by an API call.
     */ TextDocumentSaveReason.Manual = 1;
                    /**
     * Automatic after a delay.
     */ TextDocumentSaveReason.AfterDelay = 2;
                    /**
     * When the editor lost focus.
     */ TextDocumentSaveReason.FocusOut = 3;
                })(TextDocumentSaveReason || (exports1.TextDocumentSaveReason = TextDocumentSaveReason = {}));
                /**
 * A document will save notification is sent from the client to the server before
 * the document is actually saved.
 */ var WillSaveTextDocumentNotification;
                (function(WillSaveTextDocumentNotification) {
                    WillSaveTextDocumentNotification.method = 'textDocument/willSave';
                    WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);
                })(WillSaveTextDocumentNotification || (exports1.WillSaveTextDocumentNotification = WillSaveTextDocumentNotification = {}));
                /**
 * A document will save request is sent from the client to the server before
 * the document is actually saved. The request can return an array of TextEdits
 * which will be applied to the text document before it is saved. Please note that
 * clients might drop results if computing the text edits took too long or if a
 * server constantly fails on this request. This is done to keep the save fast and
 * reliable.
 */ var WillSaveTextDocumentWaitUntilRequest;
                (function(WillSaveTextDocumentWaitUntilRequest) {
                    WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';
                    WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);
                })(WillSaveTextDocumentWaitUntilRequest || (exports1.WillSaveTextDocumentWaitUntilRequest = WillSaveTextDocumentWaitUntilRequest = {}));
                /**
 * The watched files notification is sent from the client to the server when
 * the client detects changes to file watched by the language client.
 */ var DidChangeWatchedFilesNotification;
                (function(DidChangeWatchedFilesNotification) {
                    DidChangeWatchedFilesNotification.method = 'workspace/didChangeWatchedFiles';
                    DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);
                })(DidChangeWatchedFilesNotification || (exports1.DidChangeWatchedFilesNotification = DidChangeWatchedFilesNotification = {}));
                /**
 * The file event type
 */ var FileChangeType;
                (function(FileChangeType) {
                    /**
     * The file got created.
     */ FileChangeType.Created = 1;
                    /**
     * The file got changed.
     */ FileChangeType.Changed = 2;
                    /**
     * The file got deleted.
     */ FileChangeType.Deleted = 3;
                })(FileChangeType || (exports1.FileChangeType = FileChangeType = {}));
                var RelativePattern;
                (function(RelativePattern) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);
                    }
                    RelativePattern.is = is;
                })(RelativePattern || (exports1.RelativePattern = RelativePattern = {}));
                var WatchKind;
                (function(WatchKind) {
                    /**
     * Interested in create events.
     */ WatchKind.Create = 1;
                    /**
     * Interested in change events
     */ WatchKind.Change = 2;
                    /**
     * Interested in delete events
     */ WatchKind.Delete = 4;
                })(WatchKind || (exports1.WatchKind = WatchKind = {}));
                /**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */ var PublishDiagnosticsNotification;
                (function(PublishDiagnosticsNotification) {
                    PublishDiagnosticsNotification.method = 'textDocument/publishDiagnostics';
                    PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;
                    PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);
                })(PublishDiagnosticsNotification || (exports1.PublishDiagnosticsNotification = PublishDiagnosticsNotification = {}));
                /**
 * How a completion was triggered
 */ var CompletionTriggerKind;
                (function(CompletionTriggerKind) {
                    /**
     * Completion was triggered by typing an identifier (24x7 code
     * complete), manual invocation (e.g Ctrl+Space) or via API.
     */ CompletionTriggerKind.Invoked = 1;
                    /**
     * Completion was triggered by a trigger character specified by
     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
     */ CompletionTriggerKind.TriggerCharacter = 2;
                    /**
     * Completion was re-triggered as current completion list is incomplete
     */ CompletionTriggerKind.TriggerForIncompleteCompletions = 3;
                })(CompletionTriggerKind || (exports1.CompletionTriggerKind = CompletionTriggerKind = {}));
                /**
 * Request to request completion at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response
 * is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}
 * or a Thenable that resolves to such.
 *
 * The request can delay the computation of the {@link CompletionItem.detail `detail`}
 * and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`
 * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
 * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
 */ var CompletionRequest;
                (function(CompletionRequest) {
                    CompletionRequest.method = 'textDocument/completion';
                    CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);
                })(CompletionRequest || (exports1.CompletionRequest = CompletionRequest = {}));
                /**
 * Request to resolve additional information for a given completion item.The request's
 * parameter is of type {@link CompletionItem} the response
 * is of type {@link CompletionItem} or a Thenable that resolves to such.
 */ var CompletionResolveRequest;
                (function(CompletionResolveRequest) {
                    CompletionResolveRequest.method = 'completionItem/resolve';
                    CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);
                })(CompletionResolveRequest || (exports1.CompletionResolveRequest = CompletionResolveRequest = {}));
                /**
 * Request to request hover information at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response is of
 * type {@link Hover} or a Thenable that resolves to such.
 */ var HoverRequest;
                (function(HoverRequest) {
                    HoverRequest.method = 'textDocument/hover';
                    HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);
                })(HoverRequest || (exports1.HoverRequest = HoverRequest = {}));
                /**
 * How a signature help was triggered.
 *
 * @since 3.15.0
 */ var SignatureHelpTriggerKind;
                (function(SignatureHelpTriggerKind) {
                    /**
     * Signature help was invoked manually by the user or by a command.
     */ SignatureHelpTriggerKind.Invoked = 1;
                    /**
     * Signature help was triggered by a trigger character.
     */ SignatureHelpTriggerKind.TriggerCharacter = 2;
                    /**
     * Signature help was triggered by the cursor moving or by the document content changing.
     */ SignatureHelpTriggerKind.ContentChange = 3;
                })(SignatureHelpTriggerKind || (exports1.SignatureHelpTriggerKind = SignatureHelpTriggerKind = {}));
                var SignatureHelpRequest;
                (function(SignatureHelpRequest) {
                    SignatureHelpRequest.method = 'textDocument/signatureHelp';
                    SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);
                })(SignatureHelpRequest || (exports1.SignatureHelpRequest = SignatureHelpRequest = {}));
                /**
 * A request to resolve the definition location of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPosition}
 * the response is of either type {@link Definition} or a typed array of
 * {@link DefinitionLink} or a Thenable that resolves to such.
 */ var DefinitionRequest;
                (function(DefinitionRequest) {
                    DefinitionRequest.method = 'textDocument/definition';
                    DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);
                })(DefinitionRequest || (exports1.DefinitionRequest = DefinitionRequest = {}));
                /**
 * A request to resolve project-wide references for the symbol denoted
 * by the given text document position. The request's parameter is of
 * type {@link ReferenceParams} the response is of type
 * {@link Location Location[]} or a Thenable that resolves to such.
 */ var ReferencesRequest;
                (function(ReferencesRequest) {
                    ReferencesRequest.method = 'textDocument/references';
                    ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);
                })(ReferencesRequest || (exports1.ReferencesRequest = ReferencesRequest = {}));
                /**
 * Request to resolve a {@link DocumentHighlight} for a given
 * text document position. The request's parameter is of type {@link TextDocumentPosition}
 * the request response is an array of type {@link DocumentHighlight}
 * or a Thenable that resolves to such.
 */ var DocumentHighlightRequest;
                (function(DocumentHighlightRequest) {
                    DocumentHighlightRequest.method = 'textDocument/documentHighlight';
                    DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);
                })(DocumentHighlightRequest || (exports1.DocumentHighlightRequest = DocumentHighlightRequest = {}));
                /**
 * A request to list all symbols found in a given text document. The request's
 * parameter is of type {@link TextDocumentIdentifier} the
 * response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable
 * that resolves to such.
 */ var DocumentSymbolRequest;
                (function(DocumentSymbolRequest) {
                    DocumentSymbolRequest.method = 'textDocument/documentSymbol';
                    DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);
                })(DocumentSymbolRequest || (exports1.DocumentSymbolRequest = DocumentSymbolRequest = {}));
                /**
 * A request to provide commands for the given text document and range.
 */ var CodeActionRequest;
                (function(CodeActionRequest) {
                    CodeActionRequest.method = 'textDocument/codeAction';
                    CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);
                })(CodeActionRequest || (exports1.CodeActionRequest = CodeActionRequest = {}));
                /**
 * Request to resolve additional information for a given code action.The request's
 * parameter is of type {@link CodeAction} the response
 * is of type {@link CodeAction} or a Thenable that resolves to such.
 */ var CodeActionResolveRequest;
                (function(CodeActionResolveRequest) {
                    CodeActionResolveRequest.method = 'codeAction/resolve';
                    CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);
                })(CodeActionResolveRequest || (exports1.CodeActionResolveRequest = CodeActionResolveRequest = {}));
                /**
 * A request to list project-wide symbols matching the query string given
 * by the {@link WorkspaceSymbolParams}. The response is
 * of type {@link SymbolInformation SymbolInformation[]} or a Thenable that
 * resolves to such.
 *
 * @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients
 *  need to advertise support for WorkspaceSymbols via the client capability
 *  `workspace.symbol.resolveSupport`.
 *
 */ var WorkspaceSymbolRequest;
                (function(WorkspaceSymbolRequest) {
                    WorkspaceSymbolRequest.method = 'workspace/symbol';
                    WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);
                })(WorkspaceSymbolRequest || (exports1.WorkspaceSymbolRequest = WorkspaceSymbolRequest = {}));
                /**
 * A request to resolve the range inside the workspace
 * symbol's location.
 *
 * @since 3.17.0
 */ var WorkspaceSymbolResolveRequest;
                (function(WorkspaceSymbolResolveRequest) {
                    WorkspaceSymbolResolveRequest.method = 'workspaceSymbol/resolve';
                    WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);
                })(WorkspaceSymbolResolveRequest || (exports1.WorkspaceSymbolResolveRequest = WorkspaceSymbolResolveRequest = {}));
                /**
 * A request to provide code lens for the given text document.
 */ var CodeLensRequest;
                (function(CodeLensRequest) {
                    CodeLensRequest.method = 'textDocument/codeLens';
                    CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);
                })(CodeLensRequest || (exports1.CodeLensRequest = CodeLensRequest = {}));
                /**
 * A request to resolve a command for a given code lens.
 */ var CodeLensResolveRequest;
                (function(CodeLensResolveRequest) {
                    CodeLensResolveRequest.method = 'codeLens/resolve';
                    CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);
                })(CodeLensResolveRequest || (exports1.CodeLensResolveRequest = CodeLensResolveRequest = {}));
                /**
 * A request to refresh all code actions
 *
 * @since 3.16.0
 */ var CodeLensRefreshRequest;
                (function(CodeLensRefreshRequest) {
                    CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;
                    CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);
                })(CodeLensRefreshRequest || (exports1.CodeLensRefreshRequest = CodeLensRefreshRequest = {}));
                /**
 * A request to provide document links
 */ var DocumentLinkRequest;
                (function(DocumentLinkRequest) {
                    DocumentLinkRequest.method = 'textDocument/documentLink';
                    DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);
                })(DocumentLinkRequest || (exports1.DocumentLinkRequest = DocumentLinkRequest = {}));
                /**
 * Request to resolve additional information for a given document link. The request's
 * parameter is of type {@link DocumentLink} the response
 * is of type {@link DocumentLink} or a Thenable that resolves to such.
 */ var DocumentLinkResolveRequest;
                (function(DocumentLinkResolveRequest) {
                    DocumentLinkResolveRequest.method = 'documentLink/resolve';
                    DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);
                })(DocumentLinkResolveRequest || (exports1.DocumentLinkResolveRequest = DocumentLinkResolveRequest = {}));
                /**
 * A request to format a whole document.
 */ var DocumentFormattingRequest;
                (function(DocumentFormattingRequest) {
                    DocumentFormattingRequest.method = 'textDocument/formatting';
                    DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);
                })(DocumentFormattingRequest || (exports1.DocumentFormattingRequest = DocumentFormattingRequest = {}));
                /**
 * A request to format a range in a document.
 */ var DocumentRangeFormattingRequest;
                (function(DocumentRangeFormattingRequest) {
                    DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';
                    DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);
                })(DocumentRangeFormattingRequest || (exports1.DocumentRangeFormattingRequest = DocumentRangeFormattingRequest = {}));
                /**
 * A request to format ranges in a document.
 *
 * @since 3.18.0
 * @proposed
 */ var DocumentRangesFormattingRequest;
                (function(DocumentRangesFormattingRequest) {
                    DocumentRangesFormattingRequest.method = 'textDocument/rangesFormatting';
                    DocumentRangesFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentRangesFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangesFormattingRequest.method);
                })(DocumentRangesFormattingRequest || (exports1.DocumentRangesFormattingRequest = DocumentRangesFormattingRequest = {}));
                /**
 * A request to format a document on type.
 */ var DocumentOnTypeFormattingRequest;
                (function(DocumentOnTypeFormattingRequest) {
                    DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';
                    DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);
                })(DocumentOnTypeFormattingRequest || (exports1.DocumentOnTypeFormattingRequest = DocumentOnTypeFormattingRequest = {}));
                //---- Rename ----------------------------------------------
                var PrepareSupportDefaultBehavior;
                (function(PrepareSupportDefaultBehavior) {
                    /**
     * The client's default behavior is to select the identifier
     * according the to language's syntax rule.
     */ PrepareSupportDefaultBehavior.Identifier = 1;
                })(PrepareSupportDefaultBehavior || (exports1.PrepareSupportDefaultBehavior = PrepareSupportDefaultBehavior = {}));
                /**
 * A request to rename a symbol.
 */ var RenameRequest;
                (function(RenameRequest) {
                    RenameRequest.method = 'textDocument/rename';
                    RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);
                })(RenameRequest || (exports1.RenameRequest = RenameRequest = {}));
                /**
 * A request to test and perform the setup necessary for a rename.
 *
 * @since 3.16 - support for default behavior
 */ var PrepareRenameRequest;
                (function(PrepareRenameRequest) {
                    PrepareRenameRequest.method = 'textDocument/prepareRename';
                    PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);
                })(PrepareRenameRequest || (exports1.PrepareRenameRequest = PrepareRenameRequest = {}));
                /**
 * A request send from the client to the server to execute a command. The request might return
 * a workspace edit which the client will apply to the workspace.
 */ var ExecuteCommandRequest;
                (function(ExecuteCommandRequest) {
                    ExecuteCommandRequest.method = 'workspace/executeCommand';
                    ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);
                })(ExecuteCommandRequest || (exports1.ExecuteCommandRequest = ExecuteCommandRequest = {}));
                /**
 * A request sent from the server to the client to modified certain resources.
 */ var ApplyWorkspaceEditRequest;
                (function(ApplyWorkspaceEditRequest) {
                    ApplyWorkspaceEditRequest.method = 'workspace/applyEdit';
                    ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');
                })(ApplyWorkspaceEditRequest || (exports1.ApplyWorkspaceEditRequest = ApplyWorkspaceEditRequest = {}));
            /***/ },
            /***/ 2249: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_531815__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.LinkedEditingRangeRequest = void 0;
                const messages_1 = __nested_webpack_require_531815__(8431);
                /**
 * A request to provide ranges that can be edited together.
 *
 * @since 3.16.0
 */ var LinkedEditingRangeRequest;
                (function(LinkedEditingRangeRequest) {
                    LinkedEditingRangeRequest.method = 'textDocument/linkedEditingRange';
                    LinkedEditingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    LinkedEditingRangeRequest.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest.method);
                })(LinkedEditingRangeRequest || (exports1.LinkedEditingRangeRequest = LinkedEditingRangeRequest = {}));
            /***/ },
            /***/ 7684: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_533179__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.MonikerRequest = exports1.MonikerKind = exports1.UniquenessLevel = void 0;
                const messages_1 = __nested_webpack_require_533179__(8431);
                /**
 * Moniker uniqueness level to define scope of the moniker.
 *
 * @since 3.16.0
 */ var UniquenessLevel;
                (function(UniquenessLevel) {
                    /**
     * The moniker is only unique inside a document
     */ UniquenessLevel.document = 'document';
                    /**
     * The moniker is unique inside a project for which a dump got created
     */ UniquenessLevel.project = 'project';
                    /**
     * The moniker is unique inside the group to which a project belongs
     */ UniquenessLevel.group = 'group';
                    /**
     * The moniker is unique inside the moniker scheme.
     */ UniquenessLevel.scheme = 'scheme';
                    /**
     * The moniker is globally unique
     */ UniquenessLevel.global = 'global';
                })(UniquenessLevel || (exports1.UniquenessLevel = UniquenessLevel = {}));
                /**
 * The moniker kind.
 *
 * @since 3.16.0
 */ var MonikerKind;
                (function(MonikerKind) {
                    /**
     * The moniker represent a symbol that is imported into a project
     */ MonikerKind.$import = 'import';
                    /**
     * The moniker represents a symbol that is exported from a project
     */ MonikerKind.$export = 'export';
                    /**
     * The moniker represents a symbol that is local to a project (e.g. a local
     * variable of a function, a class not visible outside the project, ...)
     */ MonikerKind.local = 'local';
                })(MonikerKind || (exports1.MonikerKind = MonikerKind = {}));
                /**
 * A request to get the moniker of a symbol at a given text document position.
 * The request parameter is of type {@link TextDocumentPositionParams}.
 * The response is of type {@link Moniker Moniker[]} or `null`.
 */ var MonikerRequest;
                (function(MonikerRequest) {
                    MonikerRequest.method = 'textDocument/moniker';
                    MonikerRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    MonikerRequest.type = new messages_1.ProtocolRequestType(MonikerRequest.method);
                })(MonikerRequest || (exports1.MonikerRequest = MonikerRequest = {}));
            /***/ },
            /***/ 4792: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_536186__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.DidCloseNotebookDocumentNotification = exports1.DidSaveNotebookDocumentNotification = exports1.DidChangeNotebookDocumentNotification = exports1.NotebookCellArrayChange = exports1.DidOpenNotebookDocumentNotification = exports1.NotebookDocumentSyncRegistrationType = exports1.NotebookDocument = exports1.NotebookCell = exports1.ExecutionSummary = exports1.NotebookCellKind = void 0;
                const vscode_languageserver_types_1 = __nested_webpack_require_536186__(2852);
                const Is = __nested_webpack_require_536186__(8633);
                const messages_1 = __nested_webpack_require_536186__(8431);
                /**
 * A notebook cell kind.
 *
 * @since 3.17.0
 */ var NotebookCellKind;
                (function(NotebookCellKind) {
                    /**
     * A markup-cell is formatted source that is used for display.
     */ NotebookCellKind.Markup = 1;
                    /**
     * A code-cell is source code.
     */ NotebookCellKind.Code = 2;
                    function is(value) {
                        return value === 1 || value === 2;
                    }
                    NotebookCellKind.is = is;
                })(NotebookCellKind || (exports1.NotebookCellKind = NotebookCellKind = {}));
                var ExecutionSummary;
                (function(ExecutionSummary) {
                    function create(executionOrder, success) {
                        const result = {
                            executionOrder
                        };
                        if (success === true || success === false) {
                            result.success = success;
                        }
                        return result;
                    }
                    ExecutionSummary.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === undefined || Is.boolean(candidate.success));
                    }
                    ExecutionSummary.is = is;
                    function equals(one, other) {
                        if (one === other) {
                            return true;
                        }
                        if (one === null || one === undefined || other === null || other === undefined) {
                            return false;
                        }
                        return one.executionOrder === other.executionOrder && one.success === other.success;
                    }
                    ExecutionSummary.equals = equals;
                })(ExecutionSummary || (exports1.ExecutionSummary = ExecutionSummary = {}));
                var NotebookCell;
                (function(NotebookCell) {
                    function create(kind, document1) {
                        return {
                            kind,
                            document: document1
                        };
                    }
                    NotebookCell.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) && (candidate.metadata === undefined || Is.objectLiteral(candidate.metadata));
                    }
                    NotebookCell.is = is;
                    function diff(one, two) {
                        const result = new Set();
                        if (one.document !== two.document) {
                            result.add('document');
                        }
                        if (one.kind !== two.kind) {
                            result.add('kind');
                        }
                        if (one.executionSummary !== two.executionSummary) {
                            result.add('executionSummary');
                        }
                        if ((one.metadata !== undefined || two.metadata !== undefined) && !equalsMetadata(one.metadata, two.metadata)) {
                            result.add('metadata');
                        }
                        if ((one.executionSummary !== undefined || two.executionSummary !== undefined) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
                            result.add('executionSummary');
                        }
                        return result;
                    }
                    NotebookCell.diff = diff;
                    function equalsMetadata(one, other) {
                        if (one === other) {
                            return true;
                        }
                        if (one === null || one === undefined || other === null || other === undefined) {
                            return false;
                        }
                        if (typeof one !== typeof other) {
                            return false;
                        }
                        if (typeof one !== 'object') {
                            return false;
                        }
                        const oneArray = Array.isArray(one);
                        const otherArray = Array.isArray(other);
                        if (oneArray !== otherArray) {
                            return false;
                        }
                        if (oneArray && otherArray) {
                            if (one.length !== other.length) {
                                return false;
                            }
                            for(let i = 0; i < one.length; i++){
                                if (!equalsMetadata(one[i], other[i])) {
                                    return false;
                                }
                            }
                        }
                        if (Is.objectLiteral(one) && Is.objectLiteral(other)) {
                            const oneKeys = Object.keys(one);
                            const otherKeys = Object.keys(other);
                            if (oneKeys.length !== otherKeys.length) {
                                return false;
                            }
                            oneKeys.sort();
                            otherKeys.sort();
                            if (!equalsMetadata(oneKeys, otherKeys)) {
                                return false;
                            }
                            for(let i = 0; i < oneKeys.length; i++){
                                const prop = oneKeys[i];
                                if (!equalsMetadata(one[prop], other[prop])) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    }
                })(NotebookCell || (exports1.NotebookCell = NotebookCell = {}));
                var NotebookDocument;
                (function(NotebookDocument) {
                    function create(uri, notebookType, version, cells) {
                        return {
                            uri,
                            notebookType,
                            version,
                            cells
                        };
                    }
                    NotebookDocument.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);
                    }
                    NotebookDocument.is = is;
                })(NotebookDocument || (exports1.NotebookDocument = NotebookDocument = {}));
                var NotebookDocumentSyncRegistrationType;
                (function(NotebookDocumentSyncRegistrationType) {
                    NotebookDocumentSyncRegistrationType.method = 'notebookDocument/sync';
                    NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer;
                    NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);
                })(NotebookDocumentSyncRegistrationType || (exports1.NotebookDocumentSyncRegistrationType = NotebookDocumentSyncRegistrationType = {}));
                /**
 * A notification sent when a notebook opens.
 *
 * @since 3.17.0
 */ var DidOpenNotebookDocumentNotification;
                (function(DidOpenNotebookDocumentNotification) {
                    DidOpenNotebookDocumentNotification.method = 'notebookDocument/didOpen';
                    DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);
                    DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
                })(DidOpenNotebookDocumentNotification || (exports1.DidOpenNotebookDocumentNotification = DidOpenNotebookDocumentNotification = {}));
                var NotebookCellArrayChange;
                (function(NotebookCellArrayChange) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === undefined || Is.typedArray(candidate.cells, NotebookCell.is));
                    }
                    NotebookCellArrayChange.is = is;
                    function create(start, deleteCount, cells) {
                        const result = {
                            start,
                            deleteCount
                        };
                        if (cells !== undefined) {
                            result.cells = cells;
                        }
                        return result;
                    }
                    NotebookCellArrayChange.create = create;
                })(NotebookCellArrayChange || (exports1.NotebookCellArrayChange = NotebookCellArrayChange = {}));
                var DidChangeNotebookDocumentNotification;
                (function(DidChangeNotebookDocumentNotification) {
                    DidChangeNotebookDocumentNotification.method = 'notebookDocument/didChange';
                    DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);
                    DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
                })(DidChangeNotebookDocumentNotification || (exports1.DidChangeNotebookDocumentNotification = DidChangeNotebookDocumentNotification = {}));
                /**
 * A notification sent when a notebook document is saved.
 *
 * @since 3.17.0
 */ var DidSaveNotebookDocumentNotification;
                (function(DidSaveNotebookDocumentNotification) {
                    DidSaveNotebookDocumentNotification.method = 'notebookDocument/didSave';
                    DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);
                    DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
                })(DidSaveNotebookDocumentNotification || (exports1.DidSaveNotebookDocumentNotification = DidSaveNotebookDocumentNotification = {}));
                /**
 * A notification sent when a notebook closes.
 *
 * @since 3.17.0
 */ var DidCloseNotebookDocumentNotification;
                (function(DidCloseNotebookDocumentNotification) {
                    DidCloseNotebookDocumentNotification.method = 'notebookDocument/didClose';
                    DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);
                    DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
                })(DidCloseNotebookDocumentNotification || (exports1.DidCloseNotebookDocumentNotification = DidCloseNotebookDocumentNotification = {}));
            /***/ },
            /***/ 4166: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_549673__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.WorkDoneProgressCancelNotification = exports1.WorkDoneProgressCreateRequest = exports1.WorkDoneProgress = void 0;
                const vscode_jsonrpc_1 = __nested_webpack_require_549673__(6729);
                const messages_1 = __nested_webpack_require_549673__(8431);
                var WorkDoneProgress;
                (function(WorkDoneProgress) {
                    WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();
                    function is(value) {
                        return value === WorkDoneProgress.type;
                    }
                    WorkDoneProgress.is = is;
                })(WorkDoneProgress || (exports1.WorkDoneProgress = WorkDoneProgress = {}));
                /**
 * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress
 * reporting from the server.
 */ var WorkDoneProgressCreateRequest;
                (function(WorkDoneProgressCreateRequest) {
                    WorkDoneProgressCreateRequest.method = 'window/workDoneProgress/create';
                    WorkDoneProgressCreateRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest.method);
                })(WorkDoneProgressCreateRequest || (exports1.WorkDoneProgressCreateRequest = WorkDoneProgressCreateRequest = {}));
                /**
 * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress
 * initiated on the server side.
 */ var WorkDoneProgressCancelNotification;
                (function(WorkDoneProgressCancelNotification) {
                    WorkDoneProgressCancelNotification.method = 'window/workDoneProgress/cancel';
                    WorkDoneProgressCancelNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification.method);
                })(WorkDoneProgressCancelNotification || (exports1.WorkDoneProgressCancelNotification = WorkDoneProgressCancelNotification = {}));
            /***/ },
            /***/ 1530: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_552487__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.SelectionRangeRequest = void 0;
                const messages_1 = __nested_webpack_require_552487__(8431);
                /**
 * A request to provide selection ranges in a document. The request's
 * parameter is of type {@link SelectionRangeParams}, the
 * response is of type {@link SelectionRange SelectionRange[]} or a Thenable
 * that resolves to such.
 */ var SelectionRangeRequest;
                (function(SelectionRangeRequest) {
                    SelectionRangeRequest.method = 'textDocument/selectionRange';
                    SelectionRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SelectionRangeRequest.type = new messages_1.ProtocolRequestType(SelectionRangeRequest.method);
                })(SelectionRangeRequest || (exports1.SelectionRangeRequest = SelectionRangeRequest = {}));
            /***/ },
            /***/ 2067: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_553958__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.SemanticTokensRefreshRequest = exports1.SemanticTokensRangeRequest = exports1.SemanticTokensDeltaRequest = exports1.SemanticTokensRequest = exports1.SemanticTokensRegistrationType = exports1.TokenFormat = void 0;
                const messages_1 = __nested_webpack_require_553958__(8431);
                //------- 'textDocument/semanticTokens' -----
                var TokenFormat;
                (function(TokenFormat) {
                    TokenFormat.Relative = 'relative';
                })(TokenFormat || (exports1.TokenFormat = TokenFormat = {}));
                var SemanticTokensRegistrationType;
                (function(SemanticTokensRegistrationType) {
                    SemanticTokensRegistrationType.method = 'textDocument/semanticTokens';
                    SemanticTokensRegistrationType.type = new messages_1.RegistrationType(SemanticTokensRegistrationType.method);
                })(SemanticTokensRegistrationType || (exports1.SemanticTokensRegistrationType = SemanticTokensRegistrationType = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokensRequest;
                (function(SemanticTokensRequest) {
                    SemanticTokensRequest.method = 'textDocument/semanticTokens/full';
                    SemanticTokensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SemanticTokensRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRequest.method);
                    SemanticTokensRequest.registrationMethod = SemanticTokensRegistrationType.method;
                })(SemanticTokensRequest || (exports1.SemanticTokensRequest = SemanticTokensRequest = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokensDeltaRequest;
                (function(SemanticTokensDeltaRequest) {
                    SemanticTokensDeltaRequest.method = 'textDocument/semanticTokens/full/delta';
                    SemanticTokensDeltaRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SemanticTokensDeltaRequest.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest.method);
                    SemanticTokensDeltaRequest.registrationMethod = SemanticTokensRegistrationType.method;
                })(SemanticTokensDeltaRequest || (exports1.SemanticTokensDeltaRequest = SemanticTokensDeltaRequest = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokensRangeRequest;
                (function(SemanticTokensRangeRequest) {
                    SemanticTokensRangeRequest.method = 'textDocument/semanticTokens/range';
                    SemanticTokensRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SemanticTokensRangeRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest.method);
                    SemanticTokensRangeRequest.registrationMethod = SemanticTokensRegistrationType.method;
                })(SemanticTokensRangeRequest || (exports1.SemanticTokensRangeRequest = SemanticTokensRangeRequest = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokensRefreshRequest;
                (function(SemanticTokensRefreshRequest) {
                    SemanticTokensRefreshRequest.method = `workspace/semanticTokens/refresh`;
                    SemanticTokensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    SemanticTokensRefreshRequest.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest.method);
                })(SemanticTokensRefreshRequest || (exports1.SemanticTokensRefreshRequest = SemanticTokensRefreshRequest = {}));
            /***/ },
            /***/ 4333: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_558215__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ShowDocumentRequest = void 0;
                const messages_1 = __nested_webpack_require_558215__(8431);
                /**
 * A request to show a document. This request might open an
 * external program depending on the value of the URI to open.
 * For example a request to open `https://code.visualstudio.com/`
 * will very likely open the URI in a WEB browser.
 *
 * @since 3.16.0
*/ var ShowDocumentRequest;
                (function(ShowDocumentRequest) {
                    ShowDocumentRequest.method = 'window/showDocument';
                    ShowDocumentRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    ShowDocumentRequest.type = new messages_1.ProtocolRequestType(ShowDocumentRequest.method);
                })(ShowDocumentRequest || (exports1.ShowDocumentRequest = ShowDocumentRequest = {}));
            /***/ },
            /***/ 9264: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_559684__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.TypeDefinitionRequest = void 0;
                const messages_1 = __nested_webpack_require_559684__(8431);
                // @ts-ignore: to avoid inlining LocatioLink as dynamic import
                let __noDynamicImport;
                /**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPositionParams}
 * the response is of type {@link Definition} or a Thenable that resolves to such.
 */ var TypeDefinitionRequest;
                (function(TypeDefinitionRequest) {
                    TypeDefinitionRequest.method = 'textDocument/typeDefinition';
                    TypeDefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    TypeDefinitionRequest.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest.method);
                })(TypeDefinitionRequest || (exports1.TypeDefinitionRequest = TypeDefinitionRequest = {}));
            /***/ },
            /***/ 7062: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_561297__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.TypeHierarchySubtypesRequest = exports1.TypeHierarchySupertypesRequest = exports1.TypeHierarchyPrepareRequest = void 0;
                const messages_1 = __nested_webpack_require_561297__(8431);
                /**
 * A request to result a `TypeHierarchyItem` in a document at a given position.
 * Can be used as an input to a subtypes or supertypes type hierarchy.
 *
 * @since 3.17.0
 */ var TypeHierarchyPrepareRequest;
                (function(TypeHierarchyPrepareRequest) {
                    TypeHierarchyPrepareRequest.method = 'textDocument/prepareTypeHierarchy';
                    TypeHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    TypeHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest.method);
                })(TypeHierarchyPrepareRequest || (exports1.TypeHierarchyPrepareRequest = TypeHierarchyPrepareRequest = {}));
                /**
 * A request to resolve the supertypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */ var TypeHierarchySupertypesRequest;
                (function(TypeHierarchySupertypesRequest) {
                    TypeHierarchySupertypesRequest.method = 'typeHierarchy/supertypes';
                    TypeHierarchySupertypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    TypeHierarchySupertypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest.method);
                })(TypeHierarchySupertypesRequest || (exports1.TypeHierarchySupertypesRequest = TypeHierarchySupertypesRequest = {}));
                /**
 * A request to resolve the subtypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */ var TypeHierarchySubtypesRequest;
                (function(TypeHierarchySubtypesRequest) {
                    TypeHierarchySubtypesRequest.method = 'typeHierarchy/subtypes';
                    TypeHierarchySubtypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    TypeHierarchySubtypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest.method);
                })(TypeHierarchySubtypesRequest || (exports1.TypeHierarchySubtypesRequest = TypeHierarchySubtypesRequest = {}));
            /***/ },
            /***/ 6860: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_564204__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.DidChangeWorkspaceFoldersNotification = exports1.WorkspaceFoldersRequest = void 0;
                const messages_1 = __nested_webpack_require_564204__(8431);
                /**
 * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
 */ var WorkspaceFoldersRequest;
                (function(WorkspaceFoldersRequest) {
                    WorkspaceFoldersRequest.method = 'workspace/workspaceFolders';
                    WorkspaceFoldersRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    WorkspaceFoldersRequest.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest.method);
                })(WorkspaceFoldersRequest || (exports1.WorkspaceFoldersRequest = WorkspaceFoldersRequest = {}));
                /**
 * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
 * folder configuration changes.
 */ var DidChangeWorkspaceFoldersNotification;
                (function(DidChangeWorkspaceFoldersNotification) {
                    DidChangeWorkspaceFoldersNotification.method = 'workspace/didChangeWorkspaceFolders';
                    DidChangeWorkspaceFoldersNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeWorkspaceFoldersNotification.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification.method);
                })(DidChangeWorkspaceFoldersNotification || (exports1.DidChangeWorkspaceFoldersNotification = DidChangeWorkspaceFoldersNotification = {}));
            /***/ },
            /***/ 8633: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.objectLiteral = exports1.typedArray = exports1.stringArray = exports1.array = exports1.func = exports1.error = exports1.number = exports1.string = exports1.boolean = void 0;
                function boolean(value) {
                    return value === true || value === false;
                }
                exports1.boolean = boolean;
                function string(value) {
                    return typeof value === 'string' || value instanceof String;
                }
                exports1.string = string;
                function number(value) {
                    return typeof value === 'number' || value instanceof Number;
                }
                exports1.number = number;
                function error(value) {
                    return value instanceof Error;
                }
                exports1.error = error;
                function func(value) {
                    return typeof value === 'function';
                }
                exports1.func = func;
                function array(value) {
                    return Array.isArray(value);
                }
                exports1.array = array;
                function stringArray(value) {
                    return array(value) && value.every((elem)=>string(elem));
                }
                exports1.stringArray = stringArray;
                function typedArray(value, check) {
                    return Array.isArray(value) && value.every(check);
                }
                exports1.typedArray = typedArray;
                function objectLiteral(value) {
                    // Strictly speaking class instances pass this check as well. Since the LSP
                    // doesn't use classes we ignore this for now. If we do we need to add something
                    // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
                    return value !== null && typeof value === 'object';
                }
                exports1.objectLiteral = objectLiteral;
            /***/ },
            /***/ 2730: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_569070__)=>{
                "use strict";
                var forEach = __nested_webpack_require_569070__(705);
                var availableTypedArrays = __nested_webpack_require_569070__(4834);
                var callBind = __nested_webpack_require_569070__(8498);
                var callBound = __nested_webpack_require_569070__(9818);
                var gOPD = __nested_webpack_require_569070__(9336);
                var $toString = callBound('Object.prototype.toString');
                var hasToStringTag = __nested_webpack_require_569070__(1913)();
                var g = typeof globalThis === 'undefined' ? __nested_webpack_require_569070__.g : globalThis;
                var typedArrays = availableTypedArrays();
                var $slice = callBound('String.prototype.slice');
                var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
                var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
                    for(var i = 0; i < array.length; i += 1){
                        if (array[i] === value) {
                            return i;
                        }
                    }
                    return -1;
                };
                var cache = {
                    __proto__: null
                };
                if (hasToStringTag && gOPD && getPrototypeOf) {
                    forEach(typedArrays, function(typedArray) {
                        var arr = new g[typedArray]();
                        if (Symbol.toStringTag in arr) {
                            var proto = getPrototypeOf(arr);
                            var descriptor = gOPD(proto, Symbol.toStringTag);
                            if (!descriptor) {
                                var superProto = getPrototypeOf(proto);
                                descriptor = gOPD(superProto, Symbol.toStringTag);
                            }
                            cache['$' + typedArray] = callBind(descriptor.get);
                        }
                    });
                } else {
                    forEach(typedArrays, function(typedArray) {
                        var arr = new g[typedArray]();
                        cache['$' + typedArray] = callBind(arr.slice);
                    });
                }
                var tryTypedArrays = function tryAllTypedArrays(value) {
                    var found = false;
                    forEach(cache, function(getter, typedArray) {
                        if (!found) {
                            try {
                                if ('$' + getter(value) === typedArray) {
                                    found = $slice(typedArray, 1);
                                }
                            } catch (e) {}
                        }
                    });
                    return found;
                };
                var trySlices = function tryAllSlices(value) {
                    var found = false;
                    forEach(cache, function(getter, name) {
                        if (!found) {
                            try {
                                getter(value);
                                found = $slice(name, 1);
                            } catch (e) {}
                        }
                    });
                    return found;
                };
                module1.exports = function whichTypedArray(value) {
                    if (!value || typeof value !== 'object') {
                        return false;
                    }
                    if (!hasToStringTag) {
                        var tag = $slice($toString(value), 8, -1);
                        if ($indexOf(typedArrays, tag) > -1) {
                            return tag;
                        }
                        if (tag !== 'Object') {
                            return false;
                        }
                        // node < 0.6 hits here on real Typed Arrays
                        return trySlices(value);
                    }
                    if (!gOPD) {
                        return null;
                    } // unknown engine
                    return tryTypedArrays(value);
                };
            /***/ },
            /***/ 3996: /***/ (module1)=>{
                "use strict";
                module1.exports = "data:application/wasm;base64,";
            /***/ },
            /***/ 4834: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_760418__)=>{
                "use strict";
                var possibleNames = [
                    'BigInt64Array',
                    'BigUint64Array',
                    'Float32Array',
                    'Float64Array',
                    'Int16Array',
                    'Int32Array',
                    'Int8Array',
                    'Uint16Array',
                    'Uint32Array',
                    'Uint8Array',
                    'Uint8ClampedArray'
                ];
                var g = typeof globalThis === 'undefined' ? __nested_webpack_require_760418__.g : globalThis;
                module1.exports = function availableTypedArrays() {
                    var out = [];
                    for(var i = 0; i < possibleNames.length; i++){
                        if (typeof g[possibleNames[i]] === 'function') {
                            out[out.length] = possibleNames[i];
                        }
                    }
                    return out;
                };
            /***/ },
            /***/ 2852: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_761532__)=>{
                "use strict";
                __nested_webpack_require_761532__.r(__nested_webpack_exports__);
                /* harmony export */ __nested_webpack_require_761532__.d(__nested_webpack_exports__, {
                    /* harmony export */ AnnotatedTextEdit: ()=>/* binding */ AnnotatedTextEdit,
                    /* harmony export */ ChangeAnnotation: ()=>/* binding */ ChangeAnnotation,
                    /* harmony export */ ChangeAnnotationIdentifier: ()=>/* binding */ ChangeAnnotationIdentifier,
                    /* harmony export */ CodeAction: ()=>/* binding */ CodeAction,
                    /* harmony export */ CodeActionContext: ()=>/* binding */ CodeActionContext,
                    /* harmony export */ CodeActionKind: ()=>/* binding */ CodeActionKind,
                    /* harmony export */ CodeActionTriggerKind: ()=>/* binding */ CodeActionTriggerKind,
                    /* harmony export */ CodeDescription: ()=>/* binding */ CodeDescription,
                    /* harmony export */ CodeLens: ()=>/* binding */ CodeLens,
                    /* harmony export */ Color: ()=>/* binding */ Color,
                    /* harmony export */ ColorInformation: ()=>/* binding */ ColorInformation,
                    /* harmony export */ ColorPresentation: ()=>/* binding */ ColorPresentation,
                    /* harmony export */ Command: ()=>/* binding */ Command,
                    /* harmony export */ CompletionItem: ()=>/* binding */ CompletionItem,
                    /* harmony export */ CompletionItemKind: ()=>/* binding */ CompletionItemKind,
                    /* harmony export */ CompletionItemLabelDetails: ()=>/* binding */ CompletionItemLabelDetails,
                    /* harmony export */ CompletionItemTag: ()=>/* binding */ CompletionItemTag,
                    /* harmony export */ CompletionList: ()=>/* binding */ CompletionList,
                    /* harmony export */ CreateFile: ()=>/* binding */ CreateFile,
                    /* harmony export */ DeleteFile: ()=>/* binding */ DeleteFile,
                    /* harmony export */ Diagnostic: ()=>/* binding */ Diagnostic,
                    /* harmony export */ DiagnosticRelatedInformation: ()=>/* binding */ DiagnosticRelatedInformation,
                    /* harmony export */ DiagnosticSeverity: ()=>/* binding */ DiagnosticSeverity,
                    /* harmony export */ DiagnosticTag: ()=>/* binding */ DiagnosticTag,
                    /* harmony export */ DocumentHighlight: ()=>/* binding */ DocumentHighlight,
                    /* harmony export */ DocumentHighlightKind: ()=>/* binding */ DocumentHighlightKind,
                    /* harmony export */ DocumentLink: ()=>/* binding */ DocumentLink,
                    /* harmony export */ DocumentSymbol: ()=>/* binding */ DocumentSymbol,
                    /* harmony export */ DocumentUri: ()=>/* binding */ DocumentUri,
                    /* harmony export */ EOL: ()=>/* binding */ EOL,
                    /* harmony export */ FoldingRange: ()=>/* binding */ FoldingRange,
                    /* harmony export */ FoldingRangeKind: ()=>/* binding */ FoldingRangeKind,
                    /* harmony export */ FormattingOptions: ()=>/* binding */ FormattingOptions,
                    /* harmony export */ Hover: ()=>/* binding */ Hover,
                    /* harmony export */ InlayHint: ()=>/* binding */ InlayHint,
                    /* harmony export */ InlayHintKind: ()=>/* binding */ InlayHintKind,
                    /* harmony export */ InlayHintLabelPart: ()=>/* binding */ InlayHintLabelPart,
                    /* harmony export */ InlineCompletionContext: ()=>/* binding */ InlineCompletionContext,
                    /* harmony export */ InlineCompletionItem: ()=>/* binding */ InlineCompletionItem,
                    /* harmony export */ InlineCompletionList: ()=>/* binding */ InlineCompletionList,
                    /* harmony export */ InlineCompletionTriggerKind: ()=>/* binding */ InlineCompletionTriggerKind,
                    /* harmony export */ InlineValueContext: ()=>/* binding */ InlineValueContext,
                    /* harmony export */ InlineValueEvaluatableExpression: ()=>/* binding */ InlineValueEvaluatableExpression,
                    /* harmony export */ InlineValueText: ()=>/* binding */ InlineValueText,
                    /* harmony export */ InlineValueVariableLookup: ()=>/* binding */ InlineValueVariableLookup,
                    /* harmony export */ InsertReplaceEdit: ()=>/* binding */ InsertReplaceEdit,
                    /* harmony export */ InsertTextFormat: ()=>/* binding */ InsertTextFormat,
                    /* harmony export */ InsertTextMode: ()=>/* binding */ InsertTextMode,
                    /* harmony export */ Location: ()=>/* binding */ Location,
                    /* harmony export */ LocationLink: ()=>/* binding */ LocationLink,
                    /* harmony export */ MarkedString: ()=>/* binding */ MarkedString,
                    /* harmony export */ MarkupContent: ()=>/* binding */ MarkupContent,
                    /* harmony export */ MarkupKind: ()=>/* binding */ MarkupKind,
                    /* harmony export */ OptionalVersionedTextDocumentIdentifier: ()=>/* binding */ OptionalVersionedTextDocumentIdentifier,
                    /* harmony export */ ParameterInformation: ()=>/* binding */ ParameterInformation,
                    /* harmony export */ Position: ()=>/* binding */ Position,
                    /* harmony export */ Range: ()=>/* binding */ Range,
                    /* harmony export */ RenameFile: ()=>/* binding */ RenameFile,
                    /* harmony export */ SelectedCompletionInfo: ()=>/* binding */ SelectedCompletionInfo,
                    /* harmony export */ SelectionRange: ()=>/* binding */ SelectionRange,
                    /* harmony export */ SemanticTokenModifiers: ()=>/* binding */ SemanticTokenModifiers,
                    /* harmony export */ SemanticTokenTypes: ()=>/* binding */ SemanticTokenTypes,
                    /* harmony export */ SemanticTokens: ()=>/* binding */ SemanticTokens,
                    /* harmony export */ SignatureInformation: ()=>/* binding */ SignatureInformation,
                    /* harmony export */ StringValue: ()=>/* binding */ StringValue,
                    /* harmony export */ SymbolInformation: ()=>/* binding */ SymbolInformation,
                    /* harmony export */ SymbolKind: ()=>/* binding */ SymbolKind,
                    /* harmony export */ SymbolTag: ()=>/* binding */ SymbolTag,
                    /* harmony export */ TextDocument: ()=>/* binding */ TextDocument,
                    /* harmony export */ TextDocumentEdit: ()=>/* binding */ TextDocumentEdit,
                    /* harmony export */ TextDocumentIdentifier: ()=>/* binding */ TextDocumentIdentifier,
                    /* harmony export */ TextDocumentItem: ()=>/* binding */ TextDocumentItem,
                    /* harmony export */ TextEdit: ()=>/* binding */ TextEdit,
                    /* harmony export */ URI: ()=>/* binding */ URI1,
                    /* harmony export */ VersionedTextDocumentIdentifier: ()=>/* binding */ VersionedTextDocumentIdentifier,
                    /* harmony export */ WorkspaceChange: ()=>/* binding */ WorkspaceChange,
                    /* harmony export */ WorkspaceEdit: ()=>/* binding */ WorkspaceEdit,
                    /* harmony export */ WorkspaceFolder: ()=>/* binding */ WorkspaceFolder,
                    /* harmony export */ WorkspaceSymbol: ()=>/* binding */ WorkspaceSymbol,
                    /* harmony export */ integer: ()=>/* binding */ integer,
                    /* harmony export */ uinteger: ()=>/* binding */ uinteger
                });
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var DocumentUri;
                (function(DocumentUri) {
                    function is(value) {
                        return typeof value === 'string';
                    }
                    DocumentUri.is = is;
                })(DocumentUri || (DocumentUri = {}));
                var URI1;
                (function(URI1) {
                    function is(value) {
                        return typeof value === 'string';
                    }
                    URI1.is = is;
                })(URI1 || (URI1 = {}));
                var integer;
                (function(integer) {
                    integer.MIN_VALUE = -2147483648;
                    integer.MAX_VALUE = 2147483647;
                    function is(value) {
                        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;
                    }
                    integer.is = is;
                })(integer || (integer = {}));
                var uinteger;
                (function(uinteger) {
                    uinteger.MIN_VALUE = 0;
                    uinteger.MAX_VALUE = 2147483647;
                    function is(value) {
                        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;
                    }
                    uinteger.is = is;
                })(uinteger || (uinteger = {}));
                /**
 * The Position namespace provides helper functions to work with
 * {@link Position} literals.
 */ var Position;
                (function(Position) {
                    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */ function create(line, character) {
                        if (line === Number.MAX_VALUE) {
                            line = uinteger.MAX_VALUE;
                        }
                        if (character === Number.MAX_VALUE) {
                            character = uinteger.MAX_VALUE;
                        }
                        return {
                            line,
                            character
                        };
                    }
                    Position.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Position} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
                    }
                    Position.is = is;
                })(Position || (Position = {}));
                /**
 * The Range namespace provides helper functions to work with
 * {@link Range} literals.
 */ var Range;
                (function(Range) {
                    function create(one, two, three, four) {
                        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
                            return {
                                start: Position.create(one, two),
                                end: Position.create(three, four)
                            };
                        } else if (Position.is(one) && Position.is(two)) {
                            return {
                                start: one,
                                end: two
                            };
                        } else {
                            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);
                        }
                    }
                    Range.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Range} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
                    }
                    Range.is = is;
                })(Range || (Range = {}));
                /**
 * The Location namespace provides helper functions to work with
 * {@link Location} literals.
 */ var Location;
                (function(Location) {
                    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */ function create(uri, range) {
                        return {
                            uri,
                            range
                        };
                    }
                    Location.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Location} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
                    }
                    Location.is = is;
                })(Location || (Location = {}));
                /**
 * The LocationLink namespace provides helper functions to work with
 * {@link LocationLink} literals.
 */ var LocationLink;
                (function(LocationLink) {
                    /**
     * Creates a LocationLink literal.
     * @param targetUri The definition's uri.
     * @param targetRange The full range of the definition.
     * @param targetSelectionRange The span of the symbol definition at the target.
     * @param originSelectionRange The span of the symbol being defined in the originating source file.
     */ function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
                        return {
                            targetUri,
                            targetRange,
                            targetSelectionRange,
                            originSelectionRange
                        };
                    }
                    LocationLink.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link LocationLink} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range.is(candidate.targetSelectionRange) && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
                    }
                    LocationLink.is = is;
                })(LocationLink || (LocationLink = {}));
                /**
 * The Color namespace provides helper functions to work with
 * {@link Color} literals.
 */ var Color;
                (function(Color) {
                    /**
     * Creates a new Color literal.
     */ function create(red, green, blue, alpha) {
                        return {
                            red,
                            green,
                            blue,
                            alpha
                        };
                    }
                    Color.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Color} interface.
     */ function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);
                    }
                    Color.is = is;
                })(Color || (Color = {}));
                /**
 * The ColorInformation namespace provides helper functions to work with
 * {@link ColorInformation} literals.
 */ var ColorInformation;
                (function(ColorInformation) {
                    /**
     * Creates a new ColorInformation literal.
     */ function create(range, color) {
                        return {
                            range,
                            color
                        };
                    }
                    ColorInformation.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */ function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
                    }
                    ColorInformation.is = is;
                })(ColorInformation || (ColorInformation = {}));
                /**
 * The Color namespace provides helper functions to work with
 * {@link ColorPresentation} literals.
 */ var ColorPresentation;
                (function(ColorPresentation) {
                    /**
     * Creates a new ColorInformation literal.
     */ function create(label, textEdit, additionalTextEdits) {
                        return {
                            label,
                            textEdit,
                            additionalTextEdits
                        };
                    }
                    ColorPresentation.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */ function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
                    }
                    ColorPresentation.is = is;
                })(ColorPresentation || (ColorPresentation = {}));
                /**
 * A set of predefined range kinds.
 */ var FoldingRangeKind;
                (function(FoldingRangeKind) {
                    /**
     * Folding range for a comment
     */ FoldingRangeKind.Comment = 'comment';
                    /**
     * Folding range for an import or include
     */ FoldingRangeKind.Imports = 'imports';
                    /**
     * Folding range for a region (e.g. `#region`)
     */ FoldingRangeKind.Region = 'region';
                })(FoldingRangeKind || (FoldingRangeKind = {}));
                /**
 * The folding range namespace provides helper functions to work with
 * {@link FoldingRange} literals.
 */ var FoldingRange;
                (function(FoldingRange) {
                    /**
     * Creates a new FoldingRange literal.
     */ function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
                        const result = {
                            startLine,
                            endLine
                        };
                        if (Is.defined(startCharacter)) {
                            result.startCharacter = startCharacter;
                        }
                        if (Is.defined(endCharacter)) {
                            result.endCharacter = endCharacter;
                        }
                        if (Is.defined(kind)) {
                            result.kind = kind;
                        }
                        if (Is.defined(collapsedText)) {
                            result.collapsedText = collapsedText;
                        }
                        return result;
                    }
                    FoldingRange.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link FoldingRange} interface.
     */ function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
                    }
                    FoldingRange.is = is;
                })(FoldingRange || (FoldingRange = {}));
                /**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * {@link DiagnosticRelatedInformation} literals.
 */ var DiagnosticRelatedInformation;
                (function(DiagnosticRelatedInformation) {
                    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */ function create(location, message) {
                        return {
                            location,
                            message
                        };
                    }
                    DiagnosticRelatedInformation.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
                    }
                    DiagnosticRelatedInformation.is = is;
                })(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
                /**
 * The diagnostic's severity.
 */ var DiagnosticSeverity;
                (function(DiagnosticSeverity) {
                    /**
     * Reports an error.
     */ DiagnosticSeverity.Error = 1;
                    /**
     * Reports a warning.
     */ DiagnosticSeverity.Warning = 2;
                    /**
     * Reports an information.
     */ DiagnosticSeverity.Information = 3;
                    /**
     * Reports a hint.
     */ DiagnosticSeverity.Hint = 4;
                })(DiagnosticSeverity || (DiagnosticSeverity = {}));
                /**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */ var DiagnosticTag;
                (function(DiagnosticTag) {
                    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out instead of having
     * an error squiggle.
     */ DiagnosticTag.Unnecessary = 1;
                    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */ DiagnosticTag.Deprecated = 2;
                })(DiagnosticTag || (DiagnosticTag = {}));
                /**
 * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
 *
 * @since 3.16.0
 */ var CodeDescription;
                (function(CodeDescription) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.href);
                    }
                    CodeDescription.is = is;
                })(CodeDescription || (CodeDescription = {}));
                /**
 * The Diagnostic namespace provides helper functions to work with
 * {@link Diagnostic} literals.
 */ var Diagnostic;
                (function(Diagnostic) {
                    /**
     * Creates a new Diagnostic literal.
     */ function create(range, message, severity, code, source, relatedInformation) {
                        let result = {
                            range,
                            message
                        };
                        if (Is.defined(severity)) {
                            result.severity = severity;
                        }
                        if (Is.defined(code)) {
                            result.code = code;
                        }
                        if (Is.defined(source)) {
                            result.source = source;
                        }
                        if (Is.defined(relatedInformation)) {
                            result.relatedInformation = relatedInformation;
                        }
                        return result;
                    }
                    Diagnostic.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Diagnostic} interface.
     */ function is(value) {
                        var _a;
                        let candidate = value;
                        return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
                    }
                    Diagnostic.is = is;
                })(Diagnostic || (Diagnostic = {}));
                /**
 * The Command namespace provides helper functions to work with
 * {@link Command} literals.
 */ var Command;
                (function(Command) {
                    /**
     * Creates a new Command literal.
     */ function create(title, command, ...args) {
                        let result = {
                            title,
                            command
                        };
                        if (Is.defined(args) && args.length > 0) {
                            result.arguments = args;
                        }
                        return result;
                    }
                    Command.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Command} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
                    }
                    Command.is = is;
                })(Command || (Command = {}));
                /**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */ var TextEdit;
                (function(TextEdit) {
                    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */ function replace(range, newText) {
                        return {
                            range,
                            newText
                        };
                    }
                    TextEdit.replace = replace;
                    /**
     * Creates an insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */ function insert(position, newText) {
                        return {
                            range: {
                                start: position,
                                end: position
                            },
                            newText
                        };
                    }
                    TextEdit.insert = insert;
                    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */ function del(range) {
                        return {
                            range,
                            newText: ''
                        };
                    }
                    TextEdit.del = del;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range.is(candidate.range);
                    }
                    TextEdit.is = is;
                })(TextEdit || (TextEdit = {}));
                var ChangeAnnotation;
                (function(ChangeAnnotation) {
                    function create(label, needsConfirmation, description) {
                        const result = {
                            label
                        };
                        if (needsConfirmation !== undefined) {
                            result.needsConfirmation = needsConfirmation;
                        }
                        if (description !== undefined) {
                            result.description = description;
                        }
                        return result;
                    }
                    ChangeAnnotation.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) && (Is.string(candidate.description) || candidate.description === undefined);
                    }
                    ChangeAnnotation.is = is;
                })(ChangeAnnotation || (ChangeAnnotation = {}));
                var ChangeAnnotationIdentifier;
                (function(ChangeAnnotationIdentifier) {
                    function is(value) {
                        const candidate = value;
                        return Is.string(candidate);
                    }
                    ChangeAnnotationIdentifier.is = is;
                })(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
                var AnnotatedTextEdit;
                (function(AnnotatedTextEdit) {
                    /**
     * Creates an annotated replace text edit.
     *
     * @param range The range of text to be replaced.
     * @param newText The new text.
     * @param annotation The annotation.
     */ function replace(range, newText, annotation) {
                        return {
                            range,
                            newText,
                            annotationId: annotation
                        };
                    }
                    AnnotatedTextEdit.replace = replace;
                    /**
     * Creates an annotated insert text edit.
     *
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     * @param annotation The annotation.
     */ function insert(position, newText, annotation) {
                        return {
                            range: {
                                start: position,
                                end: position
                            },
                            newText,
                            annotationId: annotation
                        };
                    }
                    AnnotatedTextEdit.insert = insert;
                    /**
     * Creates an annotated delete text edit.
     *
     * @param range The range of text to be deleted.
     * @param annotation The annotation.
     */ function del(range, annotation) {
                        return {
                            range,
                            newText: '',
                            annotationId: annotation
                        };
                    }
                    AnnotatedTextEdit.del = del;
                    function is(value) {
                        const candidate = value;
                        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
                    }
                    AnnotatedTextEdit.is = is;
                })(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
                /**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */ var TextDocumentEdit;
                (function(TextDocumentEdit) {
                    /**
     * Creates a new `TextDocumentEdit`
     */ function create(textDocument, edits) {
                        return {
                            textDocument,
                            edits
                        };
                    }
                    TextDocumentEdit.create = create;
                    function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
                    }
                    TextDocumentEdit.is = is;
                })(TextDocumentEdit || (TextDocumentEdit = {}));
                var CreateFile;
                (function(CreateFile) {
                    function create(uri, options, annotation) {
                        let result = {
                            kind: 'create',
                            uri
                        };
                        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
                            result.options = options;
                        }
                        if (annotation !== undefined) {
                            result.annotationId = annotation;
                        }
                        return result;
                    }
                    CreateFile.create = create;
                    function is(value) {
                        let candidate = value;
                        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined || (candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
                    }
                    CreateFile.is = is;
                })(CreateFile || (CreateFile = {}));
                var RenameFile;
                (function(RenameFile) {
                    function create(oldUri, newUri, options, annotation) {
                        let result = {
                            kind: 'rename',
                            oldUri,
                            newUri
                        };
                        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
                            result.options = options;
                        }
                        if (annotation !== undefined) {
                            result.annotationId = annotation;
                        }
                        return result;
                    }
                    RenameFile.create = create;
                    function is(value) {
                        let candidate = value;
                        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined || (candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
                    }
                    RenameFile.is = is;
                })(RenameFile || (RenameFile = {}));
                var DeleteFile;
                (function(DeleteFile) {
                    function create(uri, options, annotation) {
                        let result = {
                            kind: 'delete',
                            uri
                        };
                        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {
                            result.options = options;
                        }
                        if (annotation !== undefined) {
                            result.annotationId = annotation;
                        }
                        return result;
                    }
                    DeleteFile.create = create;
                    function is(value) {
                        let candidate = value;
                        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined || (candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
                    }
                    DeleteFile.is = is;
                })(DeleteFile || (DeleteFile = {}));
                var WorkspaceEdit;
                (function(WorkspaceEdit) {
                    function is(value) {
                        let candidate = value;
                        return candidate && (candidate.changes !== undefined || candidate.documentChanges !== undefined) && (candidate.documentChanges === undefined || candidate.documentChanges.every((change)=>{
                            if (Is.string(change.kind)) {
                                return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                            } else {
                                return TextDocumentEdit.is(change);
                            }
                        }));
                    }
                    WorkspaceEdit.is = is;
                })(WorkspaceEdit || (WorkspaceEdit = {}));
                class TextEditChangeImpl {
                    insert(position, newText, annotation) {
                        let edit;
                        let id;
                        if (annotation === undefined) {
                            edit = TextEdit.insert(position, newText);
                        } else if (ChangeAnnotationIdentifier.is(annotation)) {
                            id = annotation;
                            edit = AnnotatedTextEdit.insert(position, newText, annotation);
                        } else {
                            this.assertChangeAnnotations(this.changeAnnotations);
                            id = this.changeAnnotations.manage(annotation);
                            edit = AnnotatedTextEdit.insert(position, newText, id);
                        }
                        this.edits.push(edit);
                        if (id !== undefined) {
                            return id;
                        }
                    }
                    replace(range, newText, annotation) {
                        let edit;
                        let id;
                        if (annotation === undefined) {
                            edit = TextEdit.replace(range, newText);
                        } else if (ChangeAnnotationIdentifier.is(annotation)) {
                            id = annotation;
                            edit = AnnotatedTextEdit.replace(range, newText, annotation);
                        } else {
                            this.assertChangeAnnotations(this.changeAnnotations);
                            id = this.changeAnnotations.manage(annotation);
                            edit = AnnotatedTextEdit.replace(range, newText, id);
                        }
                        this.edits.push(edit);
                        if (id !== undefined) {
                            return id;
                        }
                    }
                    delete(range, annotation) {
                        let edit;
                        let id;
                        if (annotation === undefined) {
                            edit = TextEdit.del(range);
                        } else if (ChangeAnnotationIdentifier.is(annotation)) {
                            id = annotation;
                            edit = AnnotatedTextEdit.del(range, annotation);
                        } else {
                            this.assertChangeAnnotations(this.changeAnnotations);
                            id = this.changeAnnotations.manage(annotation);
                            edit = AnnotatedTextEdit.del(range, id);
                        }
                        this.edits.push(edit);
                        if (id !== undefined) {
                            return id;
                        }
                    }
                    add(edit) {
                        this.edits.push(edit);
                    }
                    all() {
                        return this.edits;
                    }
                    clear() {
                        this.edits.splice(0, this.edits.length);
                    }
                    assertChangeAnnotations(value) {
                        if (value === undefined) {
                            throw new Error(`Text edit change is not configured to manage change annotations.`);
                        }
                    }
                    constructor(edits, changeAnnotations){
                        this.edits = edits;
                        this.changeAnnotations = changeAnnotations;
                    }
                }
                /**
 * A helper class
 */ class ChangeAnnotations {
                    all() {
                        return this._annotations;
                    }
                    get size() {
                        return this._size;
                    }
                    manage(idOrAnnotation, annotation) {
                        let id;
                        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
                            id = idOrAnnotation;
                        } else {
                            id = this.nextId();
                            annotation = idOrAnnotation;
                        }
                        if (this._annotations[id] !== undefined) {
                            throw new Error(`Id ${id} is already in use.`);
                        }
                        if (annotation === undefined) {
                            throw new Error(`No annotation provided for id ${id}`);
                        }
                        this._annotations[id] = annotation;
                        this._size++;
                        return id;
                    }
                    nextId() {
                        this._counter++;
                        return this._counter.toString();
                    }
                    constructor(annotations){
                        this._annotations = annotations === undefined ? Object.create(null) : annotations;
                        this._counter = 0;
                        this._size = 0;
                    }
                }
                /**
 * A workspace change helps constructing changes to a workspace.
 */ class WorkspaceChange {
                    /**
     * Returns the underlying {@link WorkspaceEdit} literal
     * use to be returned from a workspace edit operation like rename.
     */ get edit() {
                        this.initDocumentChanges();
                        if (this._changeAnnotations !== undefined) {
                            if (this._changeAnnotations.size === 0) {
                                this._workspaceEdit.changeAnnotations = undefined;
                            } else {
                                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                            }
                        }
                        return this._workspaceEdit;
                    }
                    getTextEditChange(key) {
                        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
                            this.initDocumentChanges();
                            if (this._workspaceEdit.documentChanges === undefined) {
                                throw new Error('Workspace edit is not configured for document changes.');
                            }
                            const textDocument = {
                                uri: key.uri,
                                version: key.version
                            };
                            let result = this._textEditChanges[textDocument.uri];
                            if (!result) {
                                const edits = [];
                                const textDocumentEdit = {
                                    textDocument,
                                    edits
                                };
                                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                                this._textEditChanges[textDocument.uri] = result;
                            }
                            return result;
                        } else {
                            this.initChanges();
                            if (this._workspaceEdit.changes === undefined) {
                                throw new Error('Workspace edit is not configured for normal text edit changes.');
                            }
                            let result = this._textEditChanges[key];
                            if (!result) {
                                let edits = [];
                                this._workspaceEdit.changes[key] = edits;
                                result = new TextEditChangeImpl(edits);
                                this._textEditChanges[key] = result;
                            }
                            return result;
                        }
                    }
                    initDocumentChanges() {
                        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
                            this._changeAnnotations = new ChangeAnnotations();
                            this._workspaceEdit.documentChanges = [];
                            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                        }
                    }
                    initChanges() {
                        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
                            this._workspaceEdit.changes = Object.create(null);
                        }
                    }
                    createFile(uri, optionsOrAnnotation, options) {
                        this.initDocumentChanges();
                        if (this._workspaceEdit.documentChanges === undefined) {
                            throw new Error('Workspace edit is not configured for document changes.');
                        }
                        let annotation;
                        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                            annotation = optionsOrAnnotation;
                        } else {
                            options = optionsOrAnnotation;
                        }
                        let operation;
                        let id;
                        if (annotation === undefined) {
                            operation = CreateFile.create(uri, options);
                        } else {
                            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                            operation = CreateFile.create(uri, options, id);
                        }
                        this._workspaceEdit.documentChanges.push(operation);
                        if (id !== undefined) {
                            return id;
                        }
                    }
                    renameFile(oldUri, newUri, optionsOrAnnotation, options) {
                        this.initDocumentChanges();
                        if (this._workspaceEdit.documentChanges === undefined) {
                            throw new Error('Workspace edit is not configured for document changes.');
                        }
                        let annotation;
                        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                            annotation = optionsOrAnnotation;
                        } else {
                            options = optionsOrAnnotation;
                        }
                        let operation;
                        let id;
                        if (annotation === undefined) {
                            operation = RenameFile.create(oldUri, newUri, options);
                        } else {
                            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                            operation = RenameFile.create(oldUri, newUri, options, id);
                        }
                        this._workspaceEdit.documentChanges.push(operation);
                        if (id !== undefined) {
                            return id;
                        }
                    }
                    deleteFile(uri, optionsOrAnnotation, options) {
                        this.initDocumentChanges();
                        if (this._workspaceEdit.documentChanges === undefined) {
                            throw new Error('Workspace edit is not configured for document changes.');
                        }
                        let annotation;
                        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                            annotation = optionsOrAnnotation;
                        } else {
                            options = optionsOrAnnotation;
                        }
                        let operation;
                        let id;
                        if (annotation === undefined) {
                            operation = DeleteFile.create(uri, options);
                        } else {
                            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                            operation = DeleteFile.create(uri, options, id);
                        }
                        this._workspaceEdit.documentChanges.push(operation);
                        if (id !== undefined) {
                            return id;
                        }
                    }
                    constructor(workspaceEdit){
                        this._textEditChanges = Object.create(null);
                        if (workspaceEdit !== undefined) {
                            this._workspaceEdit = workspaceEdit;
                            if (workspaceEdit.documentChanges) {
                                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                                workspaceEdit.documentChanges.forEach((change)=>{
                                    if (TextDocumentEdit.is(change)) {
                                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);
                                        this._textEditChanges[change.textDocument.uri] = textEditChange;
                                    }
                                });
                            } else if (workspaceEdit.changes) {
                                Object.keys(workspaceEdit.changes).forEach((key)=>{
                                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                                    this._textEditChanges[key] = textEditChange;
                                });
                            }
                        } else {
                            this._workspaceEdit = {};
                        }
                    }
                }
                /**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * {@link TextDocumentIdentifier} literals.
 */ var TextDocumentIdentifier;
                (function(TextDocumentIdentifier) {
                    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */ function create(uri) {
                        return {
                            uri
                        };
                    }
                    TextDocumentIdentifier.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri);
                    }
                    TextDocumentIdentifier.is = is;
                })(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
                /**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link VersionedTextDocumentIdentifier} literals.
 */ var VersionedTextDocumentIdentifier;
                (function(VersionedTextDocumentIdentifier) {
                    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */ function create(uri, version) {
                        return {
                            uri,
                            version
                        };
                    }
                    VersionedTextDocumentIdentifier.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
                    }
                    VersionedTextDocumentIdentifier.is = is;
                })(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
                /**
 * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link OptionalVersionedTextDocumentIdentifier} literals.
 */ var OptionalVersionedTextDocumentIdentifier;
                (function(OptionalVersionedTextDocumentIdentifier) {
                    /**
     * Creates a new OptionalVersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */ function create(uri, version) {
                        return {
                            uri,
                            version
                        };
                    }
                    OptionalVersionedTextDocumentIdentifier.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
                    }
                    OptionalVersionedTextDocumentIdentifier.is = is;
                })(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
                /**
 * The TextDocumentItem namespace provides helper functions to work with
 * {@link TextDocumentItem} literals.
 */ var TextDocumentItem;
                (function(TextDocumentItem) {
                    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */ function create(uri, languageId, version, text) {
                        return {
                            uri,
                            languageId,
                            version,
                            text
                        };
                    }
                    TextDocumentItem.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
                    }
                    TextDocumentItem.is = is;
                })(TextDocumentItem || (TextDocumentItem = {}));
                /**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */ var MarkupKind;
                (function(MarkupKind) {
                    /**
     * Plain text is supported as a content format
     */ MarkupKind.PlainText = 'plaintext';
                    /**
     * Markdown is supported as a content format
     */ MarkupKind.Markdown = 'markdown';
                    /**
     * Checks whether the given value is a value of the {@link MarkupKind} type.
     */ function is(value) {
                        const candidate = value;
                        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
                    }
                    MarkupKind.is = is;
                })(MarkupKind || (MarkupKind = {}));
                var MarkupContent;
                (function(MarkupContent) {
                    /**
     * Checks whether the given value conforms to the {@link MarkupContent} interface.
     */ function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
                    }
                    MarkupContent.is = is;
                })(MarkupContent || (MarkupContent = {}));
                /**
 * The kind of a completion entry.
 */ var CompletionItemKind;
                (function(CompletionItemKind) {
                    CompletionItemKind.Text = 1;
                    CompletionItemKind.Method = 2;
                    CompletionItemKind.Function = 3;
                    CompletionItemKind.Constructor = 4;
                    CompletionItemKind.Field = 5;
                    CompletionItemKind.Variable = 6;
                    CompletionItemKind.Class = 7;
                    CompletionItemKind.Interface = 8;
                    CompletionItemKind.Module = 9;
                    CompletionItemKind.Property = 10;
                    CompletionItemKind.Unit = 11;
                    CompletionItemKind.Value = 12;
                    CompletionItemKind.Enum = 13;
                    CompletionItemKind.Keyword = 14;
                    CompletionItemKind.Snippet = 15;
                    CompletionItemKind.Color = 16;
                    CompletionItemKind.File = 17;
                    CompletionItemKind.Reference = 18;
                    CompletionItemKind.Folder = 19;
                    CompletionItemKind.EnumMember = 20;
                    CompletionItemKind.Constant = 21;
                    CompletionItemKind.Struct = 22;
                    CompletionItemKind.Event = 23;
                    CompletionItemKind.Operator = 24;
                    CompletionItemKind.TypeParameter = 25;
                })(CompletionItemKind || (CompletionItemKind = {}));
                /**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */ var InsertTextFormat;
                (function(InsertTextFormat) {
                    /**
     * The primary text to be inserted is treated as a plain string.
     */ InsertTextFormat.PlainText = 1;
                    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
     */ InsertTextFormat.Snippet = 2;
                })(InsertTextFormat || (InsertTextFormat = {}));
                /**
 * Completion item tags are extra annotations that tweak the rendering of a completion
 * item.
 *
 * @since 3.15.0
 */ var CompletionItemTag;
                (function(CompletionItemTag) {
                    /**
     * Render a completion as obsolete, usually using a strike-out.
     */ CompletionItemTag.Deprecated = 1;
                })(CompletionItemTag || (CompletionItemTag = {}));
                /**
 * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
 *
 * @since 3.16.0
 */ var InsertReplaceEdit;
                (function(InsertReplaceEdit) {
                    /**
     * Creates a new insert / replace edit
     */ function create(newText, insert, replace) {
                        return {
                            newText,
                            insert,
                            replace
                        };
                    }
                    InsertReplaceEdit.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.
     */ function is(value) {
                        const candidate = value;
                        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
                    }
                    InsertReplaceEdit.is = is;
                })(InsertReplaceEdit || (InsertReplaceEdit = {}));
                /**
 * How whitespace and indentation is handled during completion
 * item insertion.
 *
 * @since 3.16.0
 */ var InsertTextMode;
                (function(InsertTextMode) {
                    /**
     * The insertion or replace strings is taken as it is. If the
     * value is multi line the lines below the cursor will be
     * inserted using the indentation defined in the string value.
     * The client will not apply any kind of adjustments to the
     * string.
     */ InsertTextMode.asIs = 1;
                    /**
     * The editor adjusts leading whitespace of new lines so that
     * they match the indentation up to the cursor of the line for
     * which the item is accepted.
     *
     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
     * multi line completion item is indented using 2 tabs and all
     * following lines inserted will be indented using 2 tabs as well.
     */ InsertTextMode.adjustIndentation = 2;
                })(InsertTextMode || (InsertTextMode = {}));
                var CompletionItemLabelDetails;
                (function(CompletionItemLabelDetails) {
                    function is(value) {
                        const candidate = value;
                        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) && (Is.string(candidate.description) || candidate.description === undefined);
                    }
                    CompletionItemLabelDetails.is = is;
                })(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
                /**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */ var CompletionItem;
                (function(CompletionItem) {
                    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */ function create(label) {
                        return {
                            label
                        };
                    }
                    CompletionItem.create = create;
                })(CompletionItem || (CompletionItem = {}));
                /**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */ var CompletionList;
                (function(CompletionList) {
                    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */ function create(items, isIncomplete) {
                        return {
                            items: items ? items : [],
                            isIncomplete: !!isIncomplete
                        };
                    }
                    CompletionList.create = create;
                })(CompletionList || (CompletionList = {}));
                var MarkedString;
                (function(MarkedString) {
                    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */ function fromPlainText(plainText) {
                        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
                    }
                    MarkedString.fromPlainText = fromPlainText;
                    /**
     * Checks whether the given value conforms to the {@link MarkedString} type.
     */ function is(value) {
                        const candidate = value;
                        return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);
                    }
                    MarkedString.is = is;
                })(MarkedString || (MarkedString = {}));
                var Hover;
                (function(Hover) {
                    /**
     * Checks whether the given value conforms to the {@link Hover} interface.
     */ function is(value) {
                        let candidate = value;
                        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) || MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));
                    }
                    Hover.is = is;
                })(Hover || (Hover = {}));
                /**
 * The ParameterInformation namespace provides helper functions to work with
 * {@link ParameterInformation} literals.
 */ var ParameterInformation;
                (function(ParameterInformation) {
                    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */ function create(label, documentation) {
                        return documentation ? {
                            label,
                            documentation
                        } : {
                            label
                        };
                    }
                    ParameterInformation.create = create;
                })(ParameterInformation || (ParameterInformation = {}));
                /**
 * The SignatureInformation namespace provides helper functions to work with
 * {@link SignatureInformation} literals.
 */ var SignatureInformation;
                (function(SignatureInformation) {
                    function create(label, documentation, ...parameters) {
                        let result = {
                            label
                        };
                        if (Is.defined(documentation)) {
                            result.documentation = documentation;
                        }
                        if (Is.defined(parameters)) {
                            result.parameters = parameters;
                        } else {
                            result.parameters = [];
                        }
                        return result;
                    }
                    SignatureInformation.create = create;
                })(SignatureInformation || (SignatureInformation = {}));
                /**
 * A document highlight kind.
 */ var DocumentHighlightKind;
                (function(DocumentHighlightKind) {
                    /**
     * A textual occurrence.
     */ DocumentHighlightKind.Text = 1;
                    /**
     * Read-access of a symbol, like reading a variable.
     */ DocumentHighlightKind.Read = 2;
                    /**
     * Write-access of a symbol, like writing to a variable.
     */ DocumentHighlightKind.Write = 3;
                })(DocumentHighlightKind || (DocumentHighlightKind = {}));
                /**
 * DocumentHighlight namespace to provide helper functions to work with
 * {@link DocumentHighlight} literals.
 */ var DocumentHighlight;
                (function(DocumentHighlight) {
                    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     * @param kind The highlight kind
     */ function create(range, kind) {
                        let result = {
                            range
                        };
                        if (Is.number(kind)) {
                            result.kind = kind;
                        }
                        return result;
                    }
                    DocumentHighlight.create = create;
                })(DocumentHighlight || (DocumentHighlight = {}));
                /**
 * A symbol kind.
 */ var SymbolKind;
                (function(SymbolKind) {
                    SymbolKind.File = 1;
                    SymbolKind.Module = 2;
                    SymbolKind.Namespace = 3;
                    SymbolKind.Package = 4;
                    SymbolKind.Class = 5;
                    SymbolKind.Method = 6;
                    SymbolKind.Property = 7;
                    SymbolKind.Field = 8;
                    SymbolKind.Constructor = 9;
                    SymbolKind.Enum = 10;
                    SymbolKind.Interface = 11;
                    SymbolKind.Function = 12;
                    SymbolKind.Variable = 13;
                    SymbolKind.Constant = 14;
                    SymbolKind.String = 15;
                    SymbolKind.Number = 16;
                    SymbolKind.Boolean = 17;
                    SymbolKind.Array = 18;
                    SymbolKind.Object = 19;
                    SymbolKind.Key = 20;
                    SymbolKind.Null = 21;
                    SymbolKind.EnumMember = 22;
                    SymbolKind.Struct = 23;
                    SymbolKind.Event = 24;
                    SymbolKind.Operator = 25;
                    SymbolKind.TypeParameter = 26;
                })(SymbolKind || (SymbolKind = {}));
                /**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 *
 * @since 3.16
 */ var SymbolTag;
                (function(SymbolTag) {
                    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */ SymbolTag.Deprecated = 1;
                })(SymbolTag || (SymbolTag = {}));
                var SymbolInformation;
                (function(SymbolInformation) {
                    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol.
     * @param containerName The name of the symbol containing the symbol.
     */ function create(name, kind, range, uri, containerName) {
                        let result = {
                            name,
                            kind,
                            location: {
                                uri,
                                range
                            }
                        };
                        if (containerName) {
                            result.containerName = containerName;
                        }
                        return result;
                    }
                    SymbolInformation.create = create;
                })(SymbolInformation || (SymbolInformation = {}));
                var WorkspaceSymbol;
                (function(WorkspaceSymbol) {
                    /**
     * Create a new workspace symbol.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param uri The resource of the location of the symbol.
     * @param range An options range of the location.
     * @returns A WorkspaceSymbol.
     */ function create(name, kind, uri, range) {
                        return range !== undefined ? {
                            name,
                            kind,
                            location: {
                                uri,
                                range
                            }
                        } : {
                            name,
                            kind,
                            location: {
                                uri
                            }
                        };
                    }
                    WorkspaceSymbol.create = create;
                })(WorkspaceSymbol || (WorkspaceSymbol = {}));
                var DocumentSymbol;
                (function(DocumentSymbol) {
                    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param detail The detail of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the symbol.
     * @param selectionRange The selectionRange of the symbol.
     * @param children Children of the symbol.
     */ function create(name, detail, kind, range, selectionRange, children) {
                        let result = {
                            name,
                            detail,
                            kind,
                            range,
                            selectionRange
                        };
                        if (children !== undefined) {
                            result.children = children;
                        }
                        return result;
                    }
                    DocumentSymbol.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.
     */ function is(value) {
                        let candidate = value;
                        return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range.is(candidate.range) && Range.is(candidate.selectionRange) && (candidate.detail === undefined || Is.string(candidate.detail)) && (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) && (candidate.children === undefined || Array.isArray(candidate.children)) && (candidate.tags === undefined || Array.isArray(candidate.tags));
                    }
                    DocumentSymbol.is = is;
                })(DocumentSymbol || (DocumentSymbol = {}));
                /**
 * A set of predefined code action kinds
 */ var CodeActionKind;
                (function(CodeActionKind) {
                    /**
     * Empty kind.
     */ CodeActionKind.Empty = '';
                    /**
     * Base kind for quickfix actions: 'quickfix'
     */ CodeActionKind.QuickFix = 'quickfix';
                    /**
     * Base kind for refactoring actions: 'refactor'
     */ CodeActionKind.Refactor = 'refactor';
                    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */ CodeActionKind.RefactorExtract = 'refactor.extract';
                    /**
     * Base kind for refactoring inline actions: 'refactor.inline'
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */ CodeActionKind.RefactorInline = 'refactor.inline';
                    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */ CodeActionKind.RefactorRewrite = 'refactor.rewrite';
                    /**
     * Base kind for source actions: `source`
     *
     * Source code actions apply to the entire file.
     */ CodeActionKind.Source = 'source';
                    /**
     * Base kind for an organize imports source action: `source.organizeImports`
     */ CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
                    /**
     * Base kind for auto-fix source actions: `source.fixAll`.
     *
     * Fix all actions automatically fix errors that have a clear fix that do not require user input.
     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
     *
     * @since 3.15.0
     */ CodeActionKind.SourceFixAll = 'source.fixAll';
                })(CodeActionKind || (CodeActionKind = {}));
                /**
 * The reason why code actions were requested.
 *
 * @since 3.17.0
 */ var CodeActionTriggerKind;
                (function(CodeActionTriggerKind) {
                    /**
     * Code actions were explicitly requested by the user or by an extension.
     */ CodeActionTriggerKind.Invoked = 1;
                    /**
     * Code actions were requested automatically.
     *
     * This typically happens when current selection in a file changes, but can
     * also be triggered when file content changes.
     */ CodeActionTriggerKind.Automatic = 2;
                })(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
                /**
 * The CodeActionContext namespace provides helper functions to work with
 * {@link CodeActionContext} literals.
 */ var CodeActionContext;
                (function(CodeActionContext) {
                    /**
     * Creates a new CodeActionContext literal.
     */ function create(diagnostics, only, triggerKind) {
                        let result = {
                            diagnostics
                        };
                        if (only !== undefined && only !== null) {
                            result.only = only;
                        }
                        if (triggerKind !== undefined && triggerKind !== null) {
                            result.triggerKind = triggerKind;
                        }
                        return result;
                    }
                    CodeActionContext.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
                    }
                    CodeActionContext.is = is;
                })(CodeActionContext || (CodeActionContext = {}));
                var CodeAction;
                (function(CodeAction) {
                    function create(title, kindOrCommandOrEdit, kind) {
                        let result = {
                            title
                        };
                        let checkKind = true;
                        if (typeof kindOrCommandOrEdit === 'string') {
                            checkKind = false;
                            result.kind = kindOrCommandOrEdit;
                        } else if (Command.is(kindOrCommandOrEdit)) {
                            result.command = kindOrCommandOrEdit;
                        } else {
                            result.edit = kindOrCommandOrEdit;
                        }
                        if (checkKind && kind !== undefined) {
                            result.kind = kind;
                        }
                        return result;
                    }
                    CodeAction.create = create;
                    function is(value) {
                        let candidate = value;
                        return candidate && Is.string(candidate.title) && (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === undefined || Is.string(candidate.kind)) && (candidate.edit !== undefined || candidate.command !== undefined) && (candidate.command === undefined || Command.is(candidate.command)) && (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) && (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));
                    }
                    CodeAction.is = is;
                })(CodeAction || (CodeAction = {}));
                /**
 * The CodeLens namespace provides helper functions to work with
 * {@link CodeLens} literals.
 */ var CodeLens;
                (function(CodeLens) {
                    /**
     * Creates a new CodeLens literal.
     */ function create(range, data) {
                        let result = {
                            range
                        };
                        if (Is.defined(data)) {
                            result.data = data;
                        }
                        return result;
                    }
                    CodeLens.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link CodeLens} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
                    }
                    CodeLens.is = is;
                })(CodeLens || (CodeLens = {}));
                /**
 * The FormattingOptions namespace provides helper functions to work with
 * {@link FormattingOptions} literals.
 */ var FormattingOptions;
                (function(FormattingOptions) {
                    /**
     * Creates a new FormattingOptions literal.
     */ function create(tabSize, insertSpaces) {
                        return {
                            tabSize,
                            insertSpaces
                        };
                    }
                    FormattingOptions.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
                    }
                    FormattingOptions.is = is;
                })(FormattingOptions || (FormattingOptions = {}));
                /**
 * The DocumentLink namespace provides helper functions to work with
 * {@link DocumentLink} literals.
 */ var DocumentLink;
                (function(DocumentLink) {
                    /**
     * Creates a new DocumentLink literal.
     */ function create(range, target, data) {
                        return {
                            range,
                            target,
                            data
                        };
                    }
                    DocumentLink.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link DocumentLink} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
                    }
                    DocumentLink.is = is;
                })(DocumentLink || (DocumentLink = {}));
                /**
 * The SelectionRange namespace provides helper function to work with
 * SelectionRange literals.
 */ var SelectionRange;
                (function(SelectionRange) {
                    /**
     * Creates a new SelectionRange
     * @param range the range.
     * @param parent an optional parent.
     */ function create(range, parent) {
                        return {
                            range,
                            parent
                        };
                    }
                    SelectionRange.create = create;
                    function is(value) {
                        let candidate = value;
                        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
                    }
                    SelectionRange.is = is;
                })(SelectionRange || (SelectionRange = {}));
                /**
 * A set of predefined token types. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */ var SemanticTokenTypes;
                (function(SemanticTokenTypes) {
                    SemanticTokenTypes["namespace"] = "namespace";
                    /**
     * Represents a generic type. Acts as a fallback for types which can't be mapped to
     * a specific type like class or enum.
     */ SemanticTokenTypes["type"] = "type";
                    SemanticTokenTypes["class"] = "class";
                    SemanticTokenTypes["enum"] = "enum";
                    SemanticTokenTypes["interface"] = "interface";
                    SemanticTokenTypes["struct"] = "struct";
                    SemanticTokenTypes["typeParameter"] = "typeParameter";
                    SemanticTokenTypes["parameter"] = "parameter";
                    SemanticTokenTypes["variable"] = "variable";
                    SemanticTokenTypes["property"] = "property";
                    SemanticTokenTypes["enumMember"] = "enumMember";
                    SemanticTokenTypes["event"] = "event";
                    SemanticTokenTypes["function"] = "function";
                    SemanticTokenTypes["method"] = "method";
                    SemanticTokenTypes["macro"] = "macro";
                    SemanticTokenTypes["keyword"] = "keyword";
                    SemanticTokenTypes["modifier"] = "modifier";
                    SemanticTokenTypes["comment"] = "comment";
                    SemanticTokenTypes["string"] = "string";
                    SemanticTokenTypes["number"] = "number";
                    SemanticTokenTypes["regexp"] = "regexp";
                    SemanticTokenTypes["operator"] = "operator";
                    /**
     * @since 3.17.0
     */ SemanticTokenTypes["decorator"] = "decorator";
                })(SemanticTokenTypes || (SemanticTokenTypes = {}));
                /**
 * A set of predefined token modifiers. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */ var SemanticTokenModifiers;
                (function(SemanticTokenModifiers) {
                    SemanticTokenModifiers["declaration"] = "declaration";
                    SemanticTokenModifiers["definition"] = "definition";
                    SemanticTokenModifiers["readonly"] = "readonly";
                    SemanticTokenModifiers["static"] = "static";
                    SemanticTokenModifiers["deprecated"] = "deprecated";
                    SemanticTokenModifiers["abstract"] = "abstract";
                    SemanticTokenModifiers["async"] = "async";
                    SemanticTokenModifiers["modification"] = "modification";
                    SemanticTokenModifiers["documentation"] = "documentation";
                    SemanticTokenModifiers["defaultLibrary"] = "defaultLibrary";
                })(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokens;
                (function(SemanticTokens) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');
                    }
                    SemanticTokens.is = is;
                })(SemanticTokens || (SemanticTokens = {}));
                /**
 * The InlineValueText namespace provides functions to deal with InlineValueTexts.
 *
 * @since 3.17.0
 */ var InlineValueText;
                (function(InlineValueText) {
                    /**
     * Creates a new InlineValueText literal.
     */ function create(range, text) {
                        return {
                            range,
                            text
                        };
                    }
                    InlineValueText.create = create;
                    function is(value) {
                        const candidate = value;
                        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
                    }
                    InlineValueText.is = is;
                })(InlineValueText || (InlineValueText = {}));
                /**
 * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.
 *
 * @since 3.17.0
 */ var InlineValueVariableLookup;
                (function(InlineValueVariableLookup) {
                    /**
     * Creates a new InlineValueText literal.
     */ function create(range, variableName, caseSensitiveLookup) {
                        return {
                            range,
                            variableName,
                            caseSensitiveLookup
                        };
                    }
                    InlineValueVariableLookup.create = create;
                    function is(value) {
                        const candidate = value;
                        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === undefined);
                    }
                    InlineValueVariableLookup.is = is;
                })(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
                /**
 * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.
 *
 * @since 3.17.0
 */ var InlineValueEvaluatableExpression;
                (function(InlineValueEvaluatableExpression) {
                    /**
     * Creates a new InlineValueEvaluatableExpression literal.
     */ function create(range, expression) {
                        return {
                            range,
                            expression
                        };
                    }
                    InlineValueEvaluatableExpression.create = create;
                    function is(value) {
                        const candidate = value;
                        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === undefined);
                    }
                    InlineValueEvaluatableExpression.is = is;
                })(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
                /**
 * The InlineValueContext namespace provides helper functions to work with
 * {@link InlineValueContext} literals.
 *
 * @since 3.17.0
 */ var InlineValueContext;
                (function(InlineValueContext) {
                    /**
     * Creates a new InlineValueContext literal.
     */ function create(frameId, stoppedLocation) {
                        return {
                            frameId,
                            stoppedLocation
                        };
                    }
                    InlineValueContext.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.
     */ function is(value) {
                        const candidate = value;
                        return Is.defined(candidate) && Range.is(value.stoppedLocation);
                    }
                    InlineValueContext.is = is;
                })(InlineValueContext || (InlineValueContext = {}));
                /**
 * Inlay hint kinds.
 *
 * @since 3.17.0
 */ var InlayHintKind;
                (function(InlayHintKind) {
                    /**
     * An inlay hint that for a type annotation.
     */ InlayHintKind.Type = 1;
                    /**
     * An inlay hint that is for a parameter.
     */ InlayHintKind.Parameter = 2;
                    function is(value) {
                        return value === 1 || value === 2;
                    }
                    InlayHintKind.is = is;
                })(InlayHintKind || (InlayHintKind = {}));
                var InlayHintLabelPart;
                (function(InlayHintLabelPart) {
                    function create(value) {
                        return {
                            value
                        };
                    }
                    InlayHintLabelPart.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.location === undefined || Location.is(candidate.location)) && (candidate.command === undefined || Command.is(candidate.command));
                    }
                    InlayHintLabelPart.is = is;
                })(InlayHintLabelPart || (InlayHintLabelPart = {}));
                var InlayHint;
                (function(InlayHint) {
                    function create(position, label, kind) {
                        const result = {
                            position,
                            label
                        };
                        if (kind !== undefined) {
                            result.kind = kind;
                        }
                        return result;
                    }
                    InlayHint.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Position.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === undefined || InlayHintKind.is(candidate.kind)) && candidate.textEdits === undefined || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));
                    }
                    InlayHint.is = is;
                })(InlayHint || (InlayHint = {}));
                var StringValue;
                (function(StringValue) {
                    function createSnippet(value) {
                        return {
                            kind: 'snippet',
                            value
                        };
                    }
                    StringValue.createSnippet = createSnippet;
                })(StringValue || (StringValue = {}));
                var InlineCompletionItem;
                (function(InlineCompletionItem) {
                    function create(insertText, filterText, range, command) {
                        return {
                            insertText,
                            filterText,
                            range,
                            command
                        };
                    }
                    InlineCompletionItem.create = create;
                })(InlineCompletionItem || (InlineCompletionItem = {}));
                var InlineCompletionList;
                (function(InlineCompletionList) {
                    function create(items) {
                        return {
                            items
                        };
                    }
                    InlineCompletionList.create = create;
                })(InlineCompletionList || (InlineCompletionList = {}));
                /**
 * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.
 *
 * @since 3.18.0
 * @proposed
 */ var InlineCompletionTriggerKind;
                (function(InlineCompletionTriggerKind) {
                    /**
     * Completion was triggered explicitly by a user gesture.
     */ InlineCompletionTriggerKind.Invoked = 0;
                    /**
     * Completion was triggered automatically while editing.
     */ InlineCompletionTriggerKind.Automatic = 1;
                })(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));
                var SelectedCompletionInfo;
                (function(SelectedCompletionInfo) {
                    function create(range, text) {
                        return {
                            range,
                            text
                        };
                    }
                    SelectedCompletionInfo.create = create;
                })(SelectedCompletionInfo || (SelectedCompletionInfo = {}));
                var InlineCompletionContext;
                (function(InlineCompletionContext) {
                    function create(triggerKind, selectedCompletionInfo) {
                        return {
                            triggerKind,
                            selectedCompletionInfo
                        };
                    }
                    InlineCompletionContext.create = create;
                })(InlineCompletionContext || (InlineCompletionContext = {}));
                var WorkspaceFolder;
                (function(WorkspaceFolder) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && URI1.is(candidate.uri) && Is.string(candidate.name);
                    }
                    WorkspaceFolder.is = is;
                })(WorkspaceFolder || (WorkspaceFolder = {}));
                const EOL = [
                    '\n',
                    '\r\n',
                    '\r'
                ];
                /**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */ var TextDocument;
                (function(TextDocument) {
                    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId The document's language Id.
     * @param version The document's version.
     * @param content The document's content.
     */ function create(uri, languageId, version, content) {
                        return new FullTextDocument(uri, languageId, version, content);
                    }
                    TextDocument.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link ITextDocument} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
                    }
                    TextDocument.is = is;
                    function applyEdits(document1, edits) {
                        let text = document1.getText();
                        let sortedEdits = mergeSort(edits, (a, b)=>{
                            let diff = a.range.start.line - b.range.start.line;
                            if (diff === 0) {
                                return a.range.start.character - b.range.start.character;
                            }
                            return diff;
                        });
                        let lastModifiedOffset = text.length;
                        for(let i = sortedEdits.length - 1; i >= 0; i--){
                            let e = sortedEdits[i];
                            let startOffset = document1.offsetAt(e.range.start);
                            let endOffset = document1.offsetAt(e.range.end);
                            if (endOffset <= lastModifiedOffset) {
                                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
                            } else {
                                throw new Error('Overlapping edit');
                            }
                            lastModifiedOffset = startOffset;
                        }
                        return text;
                    }
                    TextDocument.applyEdits = applyEdits;
                    function mergeSort(data, compare) {
                        if (data.length <= 1) {
                            // sorted
                            return data;
                        }
                        const p = data.length / 2 | 0;
                        const left = data.slice(0, p);
                        const right = data.slice(p);
                        mergeSort(left, compare);
                        mergeSort(right, compare);
                        let leftIdx = 0;
                        let rightIdx = 0;
                        let i = 0;
                        while(leftIdx < left.length && rightIdx < right.length){
                            let ret = compare(left[leftIdx], right[rightIdx]);
                            if (ret <= 0) {
                                // smaller_equal -> take left to preserve order
                                data[i++] = left[leftIdx++];
                            } else {
                                // greater -> take right
                                data[i++] = right[rightIdx++];
                            }
                        }
                        while(leftIdx < left.length){
                            data[i++] = left[leftIdx++];
                        }
                        while(rightIdx < right.length){
                            data[i++] = right[rightIdx++];
                        }
                        return data;
                    }
                })(TextDocument || (TextDocument = {}));
                /**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */ class FullTextDocument {
                    get uri() {
                        return this._uri;
                    }
                    get languageId() {
                        return this._languageId;
                    }
                    get version() {
                        return this._version;
                    }
                    getText(range) {
                        if (range) {
                            let start = this.offsetAt(range.start);
                            let end = this.offsetAt(range.end);
                            return this._content.substring(start, end);
                        }
                        return this._content;
                    }
                    update(event, version) {
                        this._content = event.text;
                        this._version = version;
                        this._lineOffsets = undefined;
                    }
                    getLineOffsets() {
                        if (this._lineOffsets === undefined) {
                            let lineOffsets = [];
                            let text = this._content;
                            let isLineStart = true;
                            for(let i = 0; i < text.length; i++){
                                if (isLineStart) {
                                    lineOffsets.push(i);
                                    isLineStart = false;
                                }
                                let ch = text.charAt(i);
                                isLineStart = ch === '\r' || ch === '\n';
                                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                                    i++;
                                }
                            }
                            if (isLineStart && text.length > 0) {
                                lineOffsets.push(text.length);
                            }
                            this._lineOffsets = lineOffsets;
                        }
                        return this._lineOffsets;
                    }
                    positionAt(offset) {
                        offset = Math.max(Math.min(offset, this._content.length), 0);
                        let lineOffsets = this.getLineOffsets();
                        let low = 0, high = lineOffsets.length;
                        if (high === 0) {
                            return Position.create(0, offset);
                        }
                        while(low < high){
                            let mid = Math.floor((low + high) / 2);
                            if (lineOffsets[mid] > offset) {
                                high = mid;
                            } else {
                                low = mid + 1;
                            }
                        }
                        // low is the least x for which the line offset is larger than the current offset
                        // or array.length if no line offset is larger than the current offset
                        let line = low - 1;
                        return Position.create(line, offset - lineOffsets[line]);
                    }
                    offsetAt(position) {
                        let lineOffsets = this.getLineOffsets();
                        if (position.line >= lineOffsets.length) {
                            return this._content.length;
                        } else if (position.line < 0) {
                            return 0;
                        }
                        let lineOffset = lineOffsets[position.line];
                        let nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
                        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
                    }
                    get lineCount() {
                        return this.getLineOffsets().length;
                    }
                    constructor(uri, languageId, version, content){
                        this._uri = uri;
                        this._languageId = languageId;
                        this._version = version;
                        this._content = content;
                        this._lineOffsets = undefined;
                    }
                }
                var Is;
                (function(Is) {
                    const toString = Object.prototype.toString;
                    function defined(value) {
                        return typeof value !== 'undefined';
                    }
                    Is.defined = defined;
                    function undefined1(value) {
                        return typeof value === 'undefined';
                    }
                    Is.undefined = undefined1;
                    function boolean(value) {
                        return value === true || value === false;
                    }
                    Is.boolean = boolean;
                    function string(value) {
                        return toString.call(value) === '[object String]';
                    }
                    Is.string = string;
                    function number(value) {
                        return toString.call(value) === '[object Number]';
                    }
                    Is.number = number;
                    function numberRange(value, min, max) {
                        return toString.call(value) === '[object Number]' && min <= value && value <= max;
                    }
                    Is.numberRange = numberRange;
                    function integer(value) {
                        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;
                    }
                    Is.integer = integer;
                    function uinteger(value) {
                        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;
                    }
                    Is.uinteger = uinteger;
                    function func(value) {
                        return toString.call(value) === '[object Function]';
                    }
                    Is.func = func;
                    function objectLiteral(value) {
                        // Strictly speaking class instances pass this check as well. Since the LSP
                        // doesn't use classes we ignore this for now. If we do we need to add something
                        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
                        return value !== null && typeof value === 'object';
                    }
                    Is.objectLiteral = objectLiteral;
                    function typedArray(value, check) {
                        return Array.isArray(value) && value.every(check);
                    }
                    Is.typedArray = typedArray;
                })(Is || (Is = {}));
            /***/ }
        };
        /************************************************************************/ /******/ // The module cache
        /******/ var __webpack_module_cache__ = {};
        /******/ /******/ // The require function
        /******/ function __nested_webpack_require_872474__(moduleId) {
            /******/ // Check if module is in cache
            /******/ var cachedModule = __webpack_module_cache__[moduleId];
            /******/ if (cachedModule !== undefined) {
                /******/ return cachedModule.exports;
            /******/ }
            /******/ // Create a new module (and put it into the cache)
            /******/ var module1 = __webpack_module_cache__[moduleId] = {
                /******/ // no module.id needed
                /******/ // no module.loaded needed
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ __webpack_modules__[moduleId].call(module1.exports, module1, module1.exports, __nested_webpack_require_872474__);
            /******/ /******/ // Return the exports of the module
            /******/ return module1.exports;
        /******/ }
        /******/ /******/ // expose the modules object (__webpack_modules__)
        /******/ __nested_webpack_require_872474__.m = __webpack_modules__;
        /******/ /************************************************************************/ /******/ /* webpack/runtime/define property getters */ /******/ (()=>{
            /******/ // define getter functions for harmony exports
            /******/ __nested_webpack_require_872474__.d = (exports1, definition)=>{
                /******/ for(var key in definition){
                    /******/ if (__nested_webpack_require_872474__.o(definition, key) && !__nested_webpack_require_872474__.o(exports1, key)) {
                        /******/ Object.defineProperty(exports1, key, {
                            enumerable: true,
                            get: definition[key]
                        });
                    /******/ }
                /******/ }
            /******/ };
        /******/ })();
        /******/ /******/ /* webpack/runtime/global */ /******/ (()=>{
            /******/ __nested_webpack_require_872474__.g = function() {
                /******/ if (typeof globalThis === 'object') return globalThis;
                /******/ try {
                    /******/ return this || new Function('return this')();
                /******/ } catch (e) {
                    /******/ if (typeof window === 'object') return window;
                /******/ }
            /******/ }();
        /******/ })();
        /******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/ (()=>{
            /******/ __nested_webpack_require_872474__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
        /******/ })();
        /******/ /******/ /* webpack/runtime/make namespace object */ /******/ (()=>{
            /******/ // define __esModule on exports
            /******/ __nested_webpack_require_872474__.r = (exports1)=>{
                /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                    /******/ Object.defineProperty(exports1, Symbol.toStringTag, {
                        value: 'Module'
                    });
                /******/ }
                /******/ Object.defineProperty(exports1, '__esModule', {
                    value: true
                });
            /******/ };
        /******/ })();
        /******/ /******/ /* webpack/runtime/importScripts chunk loading */ /******/ (()=>{
            /******/ __nested_webpack_require_872474__.b = self.location + "";
            /******/ /******/ // object to store loaded chunks
            /******/ // "1" means "already loaded"
            /******/ var installedChunks = {
                /******/ 636: 1
            };
        /******/ /******/ // no chunk install function needed
        /******/ // no chunk loading
        /******/ /******/ // no HMR
        /******/ /******/ // no HMR manifest
        /******/ })();
        /******/ /************************************************************************/ var __nested_webpack_exports__ = {};
        // This entry need to be wrapped in an IIFE because it need to be in strict mode.
        (()=>{
            "use strict";
            // ESM COMPAT FLAG
            __nested_webpack_require_872474__.r(__nested_webpack_exports__);
            // EXPORTS
            __nested_webpack_require_872474__.d(__nested_webpack_exports__, {
                AceZigLinter: ()=>/* binding */ AceZigLinter
            });
            ; // CONCATENATED MODULE: ../../node_modules/@wasm-fmt/zig_fmt/zig_fmt.js
            /* provided dependency */ var console = __nested_webpack_require_872474__(4364);
            let wasm;
            async function init(input) {
                if (wasm !== undefined) return wasm;
                if (typeof input === "undefined") {
                    input = new URL(/* asset import */ __nested_webpack_require_872474__(3996), __nested_webpack_require_872474__.b);
                }
                if (typeof input === 'string' || typeof Request === 'function' && input instanceof Request || typeof URL === 'function' && input instanceof URL) {
                    input = fetch(input);
                }
                const imports = get_imports();
                const { instance, module: module1 } = await load(await input, imports);
                return finalize_init(instance, module1);
            }
            async function load(module1, imports) {
                if (typeof Response === "function" && module1 instanceof Response) {
                    if (typeof WebAssembly.instantiateStreaming === "function") {
                        try {
                            return await WebAssembly.instantiateStreaming(module1, imports);
                        } catch (e) {
                            if (module1.headers.get("Content-Type") != "application/wasm") {
                                console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
                            } else {
                                throw e;
                            }
                        }
                    }
                    const bytes = await module1.arrayBuffer();
                    return await WebAssembly.instantiate(bytes, imports);
                } else {
                    const instance = await WebAssembly.instantiate(module1, imports);
                    if (instance instanceof WebAssembly.Instance) {
                        return {
                            instance,
                            module: module1
                        };
                    } else {
                        return instance;
                    }
                }
            }
            function finalize_init(instance, module1) {
                wasm = instance.exports;
                return wasm;
            }
            const decoder = new TextDecoder();
            const encoder = new TextEncoder();
            const WASI_ESUCCESS = 0;
            const WASI_EBADF = 8;
            function get_imports() {
                return {
                    wasi_snapshot_preview1: {
                        fd_write (fd, iovs_ptr, iovs_len, nwritten_ptr) {
                            switch(fd){
                                case 1:
                                case 2:
                                    {
                                        const buffer = new DataView(wasm.memory.buffer);
                                        const buffer8 = new Uint8Array(wasm.memory.buffer);
                                        const iovecs = read_bytes_array(buffer, iovs_ptr, iovs_len);
                                        const nwritten = fds[fd].fd_write(buffer8, iovecs);
                                        buffer.setUint32(nwritten_ptr, nwritten, true);
                                        return WASI_ESUCCESS;
                                    }
                                default:
                                    return WASI_EBADF;
                            }
                        },
                        fd_read (fd, iovs_ptr, iovs_len, nread_ptr) {
                            if (fd !== 0) {
                                return WASI_EBADF;
                            }
                            const buffer = new DataView(wasm.memory.buffer);
                            const buffer8 = new Uint8Array(wasm.memory.buffer);
                            const iovecs = read_bytes_array(buffer, iovs_ptr, iovs_len);
                            const nread = fds[fd].fd_read(buffer8, iovecs);
                            buffer.setUint32(nread_ptr, nread, true);
                            return WASI_ESUCCESS;
                        },
                        proc_exit (rval) {
                            return_value = rval;
                            return WASI_ESUCCESS;
                        }
                    }
                };
            }
            function read_bytes(view, ptr) {
                const buf = view.getUint32(ptr, true);
                const len = view.getUint32(ptr + 4, true);
                return [
                    buf,
                    len
                ];
            }
            function read_bytes_array(view, iovs_ptr, iovs_len) {
                const iovecs = [];
                for(let i = 0; i < iovs_len; i++){
                    iovecs.push(read_bytes(view, iovs_ptr + 8 * i));
                }
                return iovecs;
            }
            class StdIO {
                set string(input) {
                    this.data = encoder.encode(input);
                    this.position = 0;
                }
                get string() {
                    return decoder.decode(this.data);
                }
                fd_read(view8, iovs) {
                    let nread = 0;
                    for (const [ptr, len] of iovs){
                        const buf = new Uint8Array(view8.buffer, ptr, len);
                        const data = this.data.subarray(this.position, this.position + len);
                        buf.set(data);
                        this.position += data.length;
                        nread += data.length;
                    }
                    return nread;
                }
                fd_write(view8, iovs) {
                    const total_len = iovs.reduce((acc, [_, len])=>acc + len, 0);
                    const data = new Uint8Array(total_len);
                    let nwritten = 0;
                    for (const [ptr, len] of iovs){
                        const buf = new Uint8Array(view8.buffer, ptr, len);
                        data.set(buf, nwritten);
                        nwritten += buf.length;
                    }
                    if (this.data) {
                        const new_data = new Uint8Array(this.data.length + data.length);
                        new_data.set(this.data);
                        new_data.set(data, this.data.length);
                        this.data = new_data;
                    } else {
                        this.data = data;
                    }
                    return nwritten;
                }
                dispose() {
                    this.data = undefined;
                    this.position = 0;
                }
                constructor(){
                    _define_property(this, "data", new Uint8Array());
                    _define_property(this, "position", 0);
                }
            }
            const fds = [
                new StdIO(),
                new StdIO(),
                new StdIO()
            ];
            let return_value = 0;
            function format(input) {
                fds[0].string = input;
                let stdout, stderr, error;
                try {
                    wasm._start();
                } catch (err) {
                    error = err;
                } finally{
                    stdout = fds[1].string;
                    stderr = fds[2].string;
                    fds.forEach((fd)=>fd.dispose());
                }
                if (return_value !== 0) {
                    throw Error(stderr);
                }
                return stdout;
            }
            // EXTERNAL MODULE: ../../node_modules/vscode-languageserver-protocol/lib/browser/main.js
            var main = __nested_webpack_require_872474__(5501);
            ; // CONCATENATED MODULE: ../ace-linters/src/utils.ts
            function mergeObjects(obj1, obj2, excludeUndefined = false) {
                if (!obj1) return obj2;
                if (!obj2) return obj1;
                if (excludeUndefined) {
                    obj1 = excludeUndefinedValues(obj1);
                    obj2 = excludeUndefinedValues(obj2);
                }
                const mergedObjects = {
                    ...obj2,
                    ...obj1
                }; // Give priority to obj1 values by spreading obj2 first, then obj1
                for (const key of Object.keys(mergedObjects)){
                    if (obj1[key] && obj2[key]) {
                        if (Array.isArray(obj1[key])) {
                            mergedObjects[key] = obj1[key].concat(obj2[key]);
                        } else if (Array.isArray(obj2[key])) {
                            mergedObjects[key] = obj2[key].concat(obj1[key]);
                        } else if (typeof obj1[key] === 'object' && typeof obj2[key] === 'object') {
                            mergedObjects[key] = mergeObjects(obj1[key], obj2[key]);
                        }
                    }
                }
                return mergedObjects;
            }
            function excludeUndefinedValues(obj) {
                const filteredEntries = Object.entries(obj).filter(([_, value])=>value !== undefined);
                return Object.fromEntries(filteredEntries);
            }
            function notEmpty(value) {
                return value !== null && value !== undefined;
            }
            //taken with small changes from ace-code
            function mergeRanges(ranges) {
                var list = ranges;
                list = list.sort(function(a, b) {
                    return comparePoints(a.start, b.start);
                });
                var next = list[0], range;
                for(var i = 1; i < list.length; i++){
                    range = next;
                    next = list[i];
                    var cmp = comparePoints(range.end, next.start);
                    if (cmp < 0) continue;
                    if (cmp == 0 && !range.isEmpty() && !next.isEmpty()) continue;
                    if (comparePoints(range.end, next.end) < 0) {
                        range.end.row = next.end.row;
                        range.end.column = next.end.column;
                    }
                    list.splice(i, 1);
                    next = range;
                    i--;
                }
                return list;
            }
            function comparePoints(p1, p2) {
                return p1.row - p2.row || p1.column - p2.column;
            }
            function checkValueAgainstRegexpArray(value, regexpArray) {
                if (!regexpArray) {
                    return false;
                }
                for(let i = 0; i < regexpArray.length; i++){
                    if (regexpArray[i].test(value)) {
                        return true;
                    }
                }
                return false;
            }
            function convertToUri(filePath) {
                //already URI
                if (filePath.startsWith("file:///")) {
                    return filePath;
                }
                return URI.file(filePath).toString();
            }
            ; // CONCATENATED MODULE: ../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js
            /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ class FullTextDocument {
                get uri() {
                    return this._uri;
                }
                get languageId() {
                    return this._languageId;
                }
                get version() {
                    return this._version;
                }
                getText(range) {
                    if (range) {
                        const start = this.offsetAt(range.start);
                        const end = this.offsetAt(range.end);
                        return this._content.substring(start, end);
                    }
                    return this._content;
                }
                update(changes, version) {
                    for (const change of changes){
                        if (FullTextDocument.isIncremental(change)) {
                            // makes sure start is before end
                            const range = getWellformedRange(change.range);
                            // update content
                            const startOffset = this.offsetAt(range.start);
                            const endOffset = this.offsetAt(range.end);
                            this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
                            // update the offsets
                            const startLine = Math.max(range.start.line, 0);
                            const endLine = Math.max(range.end.line, 0);
                            let lineOffsets = this._lineOffsets;
                            const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
                            if (endLine - startLine === addedLineOffsets.length) {
                                for(let i = 0, len = addedLineOffsets.length; i < len; i++){
                                    lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                                }
                            } else {
                                if (addedLineOffsets.length < 10000) {
                                    lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);
                                } else {
                                    this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                                }
                            }
                            const diff = change.text.length - (endOffset - startOffset);
                            if (diff !== 0) {
                                for(let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++){
                                    lineOffsets[i] = lineOffsets[i] + diff;
                                }
                            }
                        } else if (FullTextDocument.isFull(change)) {
                            this._content = change.text;
                            this._lineOffsets = undefined;
                        } else {
                            throw new Error('Unknown change event received');
                        }
                    }
                    this._version = version;
                }
                getLineOffsets() {
                    if (this._lineOffsets === undefined) {
                        this._lineOffsets = computeLineOffsets(this._content, true);
                    }
                    return this._lineOffsets;
                }
                positionAt(offset) {
                    offset = Math.max(Math.min(offset, this._content.length), 0);
                    const lineOffsets = this.getLineOffsets();
                    let low = 0, high = lineOffsets.length;
                    if (high === 0) {
                        return {
                            line: 0,
                            character: offset
                        };
                    }
                    while(low < high){
                        const mid = Math.floor((low + high) / 2);
                        if (lineOffsets[mid] > offset) {
                            high = mid;
                        } else {
                            low = mid + 1;
                        }
                    }
                    // low is the least x for which the line offset is larger than the current offset
                    // or array.length if no line offset is larger than the current offset
                    const line = low - 1;
                    offset = this.ensureBeforeEOL(offset, lineOffsets[line]);
                    return {
                        line,
                        character: offset - lineOffsets[line]
                    };
                }
                offsetAt(position) {
                    const lineOffsets = this.getLineOffsets();
                    if (position.line >= lineOffsets.length) {
                        return this._content.length;
                    } else if (position.line < 0) {
                        return 0;
                    }
                    const lineOffset = lineOffsets[position.line];
                    if (position.character <= 0) {
                        return lineOffset;
                    }
                    const nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
                    const offset = Math.min(lineOffset + position.character, nextLineOffset);
                    return this.ensureBeforeEOL(offset, lineOffset);
                }
                ensureBeforeEOL(offset, lineOffset) {
                    while(offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))){
                        offset--;
                    }
                    return offset;
                }
                get lineCount() {
                    return this.getLineOffsets().length;
                }
                static isIncremental(event) {
                    const candidate = event;
                    return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range !== undefined && (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
                }
                static isFull(event) {
                    const candidate = event;
                    return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
                }
                constructor(uri, languageId, version, content){
                    this._uri = uri;
                    this._languageId = languageId;
                    this._version = version;
                    this._content = content;
                    this._lineOffsets = undefined;
                }
            }
            var TextDocument;
            (function(TextDocument) {
                /**
     * Creates a new text document.
     *
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param version The document's initial version number.
     * @param content The document's content.
     */ function create(uri, languageId, version, content) {
                    return new FullTextDocument(uri, languageId, version, content);
                }
                TextDocument.create = create;
                /**
     * Updates a TextDocument by modifying its content.
     *
     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.
     * @param changes the changes to apply to the document.
     * @param version the changes version for the document.
     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.
     *
     */ function update(document1, changes, version) {
                    if (document1 instanceof FullTextDocument) {
                        document1.update(changes, version);
                        return document1;
                    } else {
                        throw new Error('TextDocument.update: document must be created by TextDocument.create');
                    }
                }
                TextDocument.update = update;
                function applyEdits(document1, edits) {
                    const text = document1.getText();
                    const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b)=>{
                        const diff = a.range.start.line - b.range.start.line;
                        if (diff === 0) {
                            return a.range.start.character - b.range.start.character;
                        }
                        return diff;
                    });
                    let lastModifiedOffset = 0;
                    const spans = [];
                    for (const e of sortedEdits){
                        const startOffset = document1.offsetAt(e.range.start);
                        if (startOffset < lastModifiedOffset) {
                            throw new Error('Overlapping edit');
                        } else if (startOffset > lastModifiedOffset) {
                            spans.push(text.substring(lastModifiedOffset, startOffset));
                        }
                        if (e.newText.length) {
                            spans.push(e.newText);
                        }
                        lastModifiedOffset = document1.offsetAt(e.range.end);
                    }
                    spans.push(text.substr(lastModifiedOffset));
                    return spans.join('');
                }
                TextDocument.applyEdits = applyEdits;
            })(TextDocument || (TextDocument = {}));
            function mergeSort(data, compare) {
                if (data.length <= 1) {
                    // sorted
                    return data;
                }
                const p = data.length / 2 | 0;
                const left = data.slice(0, p);
                const right = data.slice(p);
                mergeSort(left, compare);
                mergeSort(right, compare);
                let leftIdx = 0;
                let rightIdx = 0;
                let i = 0;
                while(leftIdx < left.length && rightIdx < right.length){
                    const ret = compare(left[leftIdx], right[rightIdx]);
                    if (ret <= 0) {
                        // smaller_equal -> take left to preserve order
                        data[i++] = left[leftIdx++];
                    } else {
                        // greater -> take right
                        data[i++] = right[rightIdx++];
                    }
                }
                while(leftIdx < left.length){
                    data[i++] = left[leftIdx++];
                }
                while(rightIdx < right.length){
                    data[i++] = right[rightIdx++];
                }
                return data;
            }
            function computeLineOffsets(text, isAtLineStart, textOffset = 0) {
                const result = isAtLineStart ? [
                    textOffset
                ] : [];
                for(let i = 0; i < text.length; i++){
                    const ch = text.charCodeAt(i);
                    if (isEOL(ch)) {
                        if (ch === 13 /* CharCode.CarriageReturn */  && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */ ) {
                            i++;
                        }
                        result.push(textOffset + i + 1);
                    }
                }
                return result;
            }
            function isEOL(char) {
                return char === 13 /* CharCode.CarriageReturn */  || char === 10 /* CharCode.LineFeed */ ;
            }
            function getWellformedRange(range) {
                const start = range.start;
                const end = range.end;
                if (start.line > end.line || start.line === end.line && start.character > end.character) {
                    return {
                        start: end,
                        end: start
                    };
                }
                return range;
            }
            function getWellformedEdit(textEdit) {
                const range = getWellformedRange(textEdit.range);
                if (range !== textEdit.range) {
                    return {
                        newText: textEdit.newText,
                        range
                    };
                }
                return textEdit;
            }
            ; // CONCATENATED MODULE: ../ace-linters/src/services/base-service.ts
            function _define_property1(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }
            class BaseService {
                addDocument(document1) {
                    this.documents[document1.uri] = TextDocument.create(document1.uri, document1.languageId, document1.version, document1.text);
                }
                getDocument(uri) {
                    return this.documents[uri];
                }
                removeDocument(document1) {
                    delete this.documents[document1.uri];
                    if (this.options[document1.uri]) {
                        delete this.options[document1.uri];
                    }
                }
                renameDocument(document1, newDocumentUri) {
                    this.documents[newDocumentUri] = this.documents[document1.uri];
                    this.options[newDocumentUri] = this.options[document1.uri];
                    this.removeDocument(document1);
                }
                getDocumentValue(uri) {
                    var _this_getDocument;
                    return (_this_getDocument = this.getDocument(uri)) === null || _this_getDocument === void 0 ? void 0 : _this_getDocument.getText();
                }
                setValue(identifier, value) {
                    let document1 = this.getDocument(identifier.uri);
                    if (document1) {
                        document1 = TextDocument.create(document1.uri, document1.languageId, document1.version, value);
                        this.documents[document1.uri] = document1;
                    }
                }
                setGlobalOptions(options) {
                    this.globalOptions = options !== null && options !== void 0 ? options : {};
                }
                setWorkspace(workspaceUri) {
                    this.workspaceUri = workspaceUri;
                }
                setOptions(documentUri, options, merge = false) {
                    this.options[documentUri] = merge ? mergeObjects(options, this.options[documentUri]) : options;
                }
                getOption(documentUri, optionName) {
                    if (this.options[documentUri] && this.options[documentUri][optionName]) {
                        return this.options[documentUri][optionName];
                    } else {
                        return this.globalOptions[optionName];
                    }
                }
                applyDeltas(identifier, deltas) {
                    let document1 = this.getDocument(identifier.uri);
                    if (document1) TextDocument.update(document1, deltas, identifier.version);
                }
                async doComplete(document1, position) {
                    return null;
                }
                async doHover(document1, position) {
                    return null;
                }
                async doResolve(item) {
                    return null;
                }
                async doValidation(document1) {
                    return [];
                }
                format(document1, range, options) {
                    return Promise.resolve([]);
                }
                async provideSignatureHelp(document1, position) {
                    return null;
                }
                async findDocumentHighlights(document1, position) {
                    return [];
                }
                get optionsToFilterDiagnostics() {
                    var _this_globalOptions_errorCodesToIgnore, _this_globalOptions_errorCodesToTreatAsWarning, _this_globalOptions_errorCodesToTreatAsInfo, _this_globalOptions_errorMessagesToIgnore, _this_globalOptions_errorMessagesToTreatAsWarning, _this_globalOptions_errorMessagesToTreatAsInfo;
                    return {
                        errorCodesToIgnore: (_this_globalOptions_errorCodesToIgnore = this.globalOptions.errorCodesToIgnore) !== null && _this_globalOptions_errorCodesToIgnore !== void 0 ? _this_globalOptions_errorCodesToIgnore : [],
                        errorCodesToTreatAsWarning: (_this_globalOptions_errorCodesToTreatAsWarning = this.globalOptions.errorCodesToTreatAsWarning) !== null && _this_globalOptions_errorCodesToTreatAsWarning !== void 0 ? _this_globalOptions_errorCodesToTreatAsWarning : [],
                        errorCodesToTreatAsInfo: (_this_globalOptions_errorCodesToTreatAsInfo = this.globalOptions.errorCodesToTreatAsInfo) !== null && _this_globalOptions_errorCodesToTreatAsInfo !== void 0 ? _this_globalOptions_errorCodesToTreatAsInfo : [],
                        errorMessagesToIgnore: (_this_globalOptions_errorMessagesToIgnore = this.globalOptions.errorMessagesToIgnore) !== null && _this_globalOptions_errorMessagesToIgnore !== void 0 ? _this_globalOptions_errorMessagesToIgnore : [],
                        errorMessagesToTreatAsWarning: (_this_globalOptions_errorMessagesToTreatAsWarning = this.globalOptions.errorMessagesToTreatAsWarning) !== null && _this_globalOptions_errorMessagesToTreatAsWarning !== void 0 ? _this_globalOptions_errorMessagesToTreatAsWarning : [],
                        errorMessagesToTreatAsInfo: (_this_globalOptions_errorMessagesToTreatAsInfo = this.globalOptions.errorMessagesToTreatAsInfo) !== null && _this_globalOptions_errorMessagesToTreatAsInfo !== void 0 ? _this_globalOptions_errorMessagesToTreatAsInfo : []
                    };
                }
                getSemanticTokens(document1, range) {
                    return Promise.resolve(null);
                }
                dispose() {
                    return Promise.resolve();
                }
                closeConnection() {
                    return Promise.resolve();
                }
                getCodeActions(document1, range, context) {
                    return Promise.resolve(null);
                }
                executeCommand(command, args) {
                    return Promise.resolve(null);
                }
                sendAppliedResult(result, callbackId) {}
                constructor(mode, workspaceUri){
                    _define_property1(this, "serviceName", void 0);
                    _define_property1(this, "mode", void 0);
                    _define_property1(this, "documents", {});
                    _define_property1(this, "options", {});
                    _define_property1(this, "globalOptions", {});
                    _define_property1(this, "serviceData", void 0);
                    _define_property1(this, "serviceCapabilities", {});
                    _define_property1(this, "workspaceUri", void 0);
                    _define_property1(this, "clientCapabilities", {
                        textDocument: {
                            diagnostic: {
                                dynamicRegistration: true,
                                relatedDocumentSupport: true
                            },
                            publishDiagnostics: {
                                relatedInformation: true,
                                versionSupport: false,
                                tagSupport: {
                                    valueSet: [
                                        main.DiagnosticTag.Unnecessary,
                                        main.DiagnosticTag.Deprecated
                                    ]
                                }
                            },
                            hover: {
                                dynamicRegistration: true,
                                contentFormat: [
                                    'markdown',
                                    'plaintext'
                                ]
                            },
                            synchronization: {
                                dynamicRegistration: true,
                                willSave: false,
                                didSave: false,
                                willSaveWaitUntil: false
                            },
                            formatting: {
                                dynamicRegistration: true
                            },
                            completion: {
                                dynamicRegistration: true,
                                completionItem: {
                                    snippetSupport: true,
                                    commitCharactersSupport: false,
                                    documentationFormat: [
                                        'markdown',
                                        'plaintext'
                                    ],
                                    deprecatedSupport: false,
                                    preselectSupport: false
                                },
                                contextSupport: false
                            },
                            signatureHelp: {
                                signatureInformation: {
                                    documentationFormat: [
                                        'markdown',
                                        'plaintext'
                                    ],
                                    activeParameterSupport: true
                                }
                            },
                            documentHighlight: {
                                dynamicRegistration: true
                            },
                            semanticTokens: {
                                multilineTokenSupport: false,
                                overlappingTokenSupport: false,
                                tokenTypes: [],
                                tokenModifiers: [],
                                formats: [
                                    "relative"
                                ],
                                requests: {
                                    full: {
                                        delta: false
                                    },
                                    range: true
                                },
                                augmentsSyntaxTokens: true
                            },
                            codeAction: {
                                dynamicRegistration: true
                            }
                        },
                        workspace: {
                            didChangeConfiguration: {
                                dynamicRegistration: true
                            },
                            executeCommand: {
                                dynamicRegistration: true
                            },
                            applyEdit: true,
                            workspaceEdit: {
                                failureHandling: "abort",
                                normalizesLineEndings: false,
                                documentChanges: false
                            }
                        }
                    });
                    this.mode = mode;
                    this.workspaceUri = workspaceUri;
                }
            }
            ; // CONCATENATED MODULE: ./src/ace-zig-linter-converters.ts
            function toTextEdits(input, range) {
                return [
                    {
                        range: range,
                        newText: input
                    }
                ];
            }
            ; // CONCATENATED MODULE: ./src/ace-zig-linter.ts
            /* provided dependency */ var ace_zig_linter_console = __nested_webpack_require_872474__(4364);
            function ace_zig_linter_define_property(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }
            class AceZigLinter extends BaseService {
                async init() {
                    await init();
                    this.inited = true;
                }
                async format(document1, range, options) {
                    if (!this.inited) {
                        await this.init();
                    }
                    let fullDocument = this.getDocument(document1.uri);
                    if (!fullDocument) return Promise.resolve([]);
                    const text = fullDocument.getText(range);
                    try {
                        const output = format(text);
                        return Promise.resolve(toTextEdits(output, range));
                    } catch (e) {
                        ace_zig_linter_console.log(e);
                        return Promise.resolve([]);
                    }
                }
                constructor(mode){
                    super(mode);
                    ace_zig_linter_define_property(this, "$service", void 0);
                    ace_zig_linter_define_property(this, "inited", false);
                    ace_zig_linter_define_property(this, "serviceCapabilities", {
                        documentFormattingProvider: true,
                        rangeFormattingProvider: true
                    });
                }
            }
        })();
        /******/ return __nested_webpack_exports__;
    /******/ })();
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTtvQkFDTjZDLCtCQUErQixJQUFJLEVBQUUsWUFBWSxLQUFLO29CQUN0REEsK0JBQStCLElBQUksRUFBRSxVQUFVO29CQUMvQ0EsK0JBQStCLElBQUksRUFBRSx1QkFBdUI7d0JBQ3hERyw0QkFBNEI7d0JBQzVCQyx5QkFBeUI7b0JBQzdCO2dCQUNKO1lBQ0o7UUFFQTtRQUVBLE1BQU0sR0FBSSxPQUFPdmIsMEJBQW1CQTtJQUNwQyxNQUFNLEdBQUc7QUFFVCIsInNvdXJjZXMiOlsid2VicGFjazovL2FjZS1saW50ZXJzLXJvb3QvLi9wYWNrYWdlcy9hY2UtemlnLWxpbnRlci9idWlsZC9hY2UtemlnLWxpbnRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gZmFjdG9yeSgpO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkodGhpcywgKCkgPT4ge1xucmV0dXJuIC8qKioqKiovICgoKSA9PiB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyA2MDkzOlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIHByb3ZpZGVkIGRlcGVuZGVuY3kgKi8gdmFyIHByb2Nlc3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5MDcpO1xuLyogcHJvdmlkZWQgZGVwZW5kZW5jeSAqLyB2YXIgY29uc29sZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDM2NCk7XG4vLyBDdXJyZW50bHkgaW4gc3luYyB3aXRoIE5vZGUuanMgbGliL2Fzc2VydC5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC8yYTUxYWU0MjRhNTEzZWM5YTZhYTM0NjZiYWEwY2MxZDU1ZGQ0ZjNiXG4vLyBPcmlnaW5hbGx5IGZyb20gbmFyd2hhbC5qcyAoaHR0cDovL25hcndoYWxqcy5vcmcpXG4vLyBDb3B5cmlnaHQgKGMpIDIwMDkgVGhvbWFzIFJvYmluc29uIDwyODBub3J0aC5jb20+XG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgJ1NvZnR3YXJlJyksIHRvXG4vLyBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZVxuLy8gcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yXG4vLyBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICdBUyBJUycsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTlxuLy8gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuLy8gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzQyKSxcbiAgICBfcmVxdWlyZSRjb2RlcyA9IF9yZXF1aXJlLmNvZGVzLFxuICAgIEVSUl9BTUJJR1VPVVNfQVJHVU1FTlQgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfQU1CSUdVT1VTX0FSR1VNRU5ULFxuICAgIEVSUl9JTlZBTElEX0FSR19UWVBFID0gX3JlcXVpcmUkY29kZXMuRVJSX0lOVkFMSURfQVJHX1RZUEUsXG4gICAgRVJSX0lOVkFMSURfQVJHX1ZBTFVFID0gX3JlcXVpcmUkY29kZXMuRVJSX0lOVkFMSURfQVJHX1ZBTFVFLFxuICAgIEVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRSxcbiAgICBFUlJfTUlTU0lOR19BUkdTID0gX3JlcXVpcmUkY29kZXMuRVJSX01JU1NJTkdfQVJHUztcblxudmFyIEFzc2VydGlvbkVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5ODAxKTtcblxudmFyIF9yZXF1aXJlMiA9IF9fd2VicGFja19yZXF1aXJlX18oOTIwOCksXG4gICAgaW5zcGVjdCA9IF9yZXF1aXJlMi5pbnNwZWN0O1xuXG52YXIgX3JlcXVpcmUkdHlwZXMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXyg5MjA4KS50eXBlcyksXG4gICAgaXNQcm9taXNlID0gX3JlcXVpcmUkdHlwZXMuaXNQcm9taXNlLFxuICAgIGlzUmVnRXhwID0gX3JlcXVpcmUkdHlwZXMuaXNSZWdFeHA7XG5cbnZhciBvYmplY3RBc3NpZ24gPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbiA6IChfX3dlYnBhY2tfcmVxdWlyZV9fKDMwNDYpLmFzc2lnbik7XG52YXIgb2JqZWN0SXMgPSBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5NjgpO1xudmFyIGVycm9yQ2FjaGUgPSBuZXcgTWFwKCk7XG52YXIgaXNEZWVwRXF1YWw7XG52YXIgaXNEZWVwU3RyaWN0RXF1YWw7XG52YXIgcGFyc2VFeHByZXNzaW9uQXQ7XG52YXIgZmluZE5vZGVBcm91bmQ7XG52YXIgZGVjb2RlcjtcblxuZnVuY3Rpb24gbGF6eUxvYWRDb21wYXJpc29uKCkge1xuICB2YXIgY29tcGFyaXNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNTY1Nik7XG5cbiAgaXNEZWVwRXF1YWwgPSBjb21wYXJpc29uLmlzRGVlcEVxdWFsO1xuICBpc0RlZXBTdHJpY3RFcXVhbCA9IGNvbXBhcmlzb24uaXNEZWVwU3RyaWN0RXF1YWw7XG59IC8vIEVzY2FwZSBjb250cm9sIGNoYXJhY3RlcnMgYnV0IG5vdCBcXG4gYW5kIFxcdCB0byBrZWVwIHRoZSBsaW5lIGJyZWFrcyBhbmRcbi8vIGluZGVudGF0aW9uIGludGFjdC5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG5cblxudmFyIGVzY2FwZVNlcXVlbmNlc1JlZ0V4cCA9IC9bXFx4MDAtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZdL2c7XG52YXIgbWV0YSA9ICgvKiB1bnVzZWQgcHVyZSBleHByZXNzaW9uIG9yIHN1cGVyICovIG51bGwgJiYgKFtcIlxcXFx1MDAwMFwiLCBcIlxcXFx1MDAwMVwiLCBcIlxcXFx1MDAwMlwiLCBcIlxcXFx1MDAwM1wiLCBcIlxcXFx1MDAwNFwiLCBcIlxcXFx1MDAwNVwiLCBcIlxcXFx1MDAwNlwiLCBcIlxcXFx1MDAwN1wiLCAnXFxcXGInLCAnJywgJycsIFwiXFxcXHUwMDBiXCIsICdcXFxcZicsICcnLCBcIlxcXFx1MDAwZVwiLCBcIlxcXFx1MDAwZlwiLCBcIlxcXFx1MDAxMFwiLCBcIlxcXFx1MDAxMVwiLCBcIlxcXFx1MDAxMlwiLCBcIlxcXFx1MDAxM1wiLCBcIlxcXFx1MDAxNFwiLCBcIlxcXFx1MDAxNVwiLCBcIlxcXFx1MDAxNlwiLCBcIlxcXFx1MDAxN1wiLCBcIlxcXFx1MDAxOFwiLCBcIlxcXFx1MDAxOVwiLCBcIlxcXFx1MDAxYVwiLCBcIlxcXFx1MDAxYlwiLCBcIlxcXFx1MDAxY1wiLCBcIlxcXFx1MDAxZFwiLCBcIlxcXFx1MDAxZVwiLCBcIlxcXFx1MDAxZlwiXSkpO1xuXG52YXIgZXNjYXBlRm4gPSBmdW5jdGlvbiBlc2NhcGVGbihzdHIpIHtcbiAgcmV0dXJuIG1ldGFbc3RyLmNoYXJDb2RlQXQoMCldO1xufTtcblxudmFyIHdhcm5lZCA9IGZhbHNlOyAvLyBUaGUgYXNzZXJ0IG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbnMgdGhhdCB0aHJvd1xuLy8gQXNzZXJ0aW9uRXJyb3IncyB3aGVuIHBhcnRpY3VsYXIgY29uZGl0aW9ucyBhcmUgbm90IG1ldC4gVGhlXG4vLyBhc3NlcnQgbW9kdWxlIG11c3QgY29uZm9ybSB0byB0aGUgZm9sbG93aW5nIGludGVyZmFjZS5cblxudmFyIGFzc2VydCA9IG1vZHVsZS5leHBvcnRzID0gb2s7XG52YXIgTk9fRVhDRVBUSU9OX1NFTlRJTkVMID0ge307IC8vIEFsbCBvZiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBtdXN0IHRocm93IGFuIEFzc2VydGlvbkVycm9yXG4vLyB3aGVuIGEgY29ycmVzcG9uZGluZyBjb25kaXRpb24gaXMgbm90IG1ldCwgd2l0aCBhIG1lc3NhZ2UgdGhhdFxuLy8gbWF5IGJlIHVuZGVmaW5lZCBpZiBub3QgcHJvdmlkZWQuIEFsbCBhc3NlcnRpb24gbWV0aG9kcyBwcm92aWRlXG4vLyBib3RoIHRoZSBhY3R1YWwgYW5kIGV4cGVjdGVkIHZhbHVlcyB0byB0aGUgYXNzZXJ0aW9uIGVycm9yIGZvclxuLy8gZGlzcGxheSBwdXJwb3Nlcy5cblxuZnVuY3Rpb24gaW5uZXJGYWlsKG9iaikge1xuICBpZiAob2JqLm1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikgdGhyb3cgb2JqLm1lc3NhZ2U7XG4gIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihvYmopO1xufVxuXG5mdW5jdGlvbiBmYWlsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UsIG9wZXJhdG9yLCBzdGFja1N0YXJ0Rm4pIHtcbiAgdmFyIGFyZ3NMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW50ZXJuYWxNZXNzYWdlO1xuXG4gIGlmIChhcmdzTGVuID09PSAwKSB7XG4gICAgaW50ZXJuYWxNZXNzYWdlID0gJ0ZhaWxlZCc7XG4gIH0gZWxzZSBpZiAoYXJnc0xlbiA9PT0gMSkge1xuICAgIG1lc3NhZ2UgPSBhY3R1YWw7XG4gICAgYWN0dWFsID0gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIGlmICh3YXJuZWQgPT09IGZhbHNlKSB7XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgdmFyIHdhcm4gPSBwcm9jZXNzLmVtaXRXYXJuaW5nID8gcHJvY2Vzcy5lbWl0V2FybmluZyA6IGNvbnNvbGUud2Fybi5iaW5kKGNvbnNvbGUpO1xuICAgICAgd2FybignYXNzZXJ0LmZhaWwoKSB3aXRoIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQgaXMgZGVwcmVjYXRlZC4gJyArICdQbGVhc2UgdXNlIGFzc2VydC5zdHJpY3RFcXVhbCgpIGluc3RlYWQgb3Igb25seSBwYXNzIGEgbWVzc2FnZS4nLCAnRGVwcmVjYXRpb25XYXJuaW5nJywgJ0RFUDAwOTQnKTtcbiAgICB9XG5cbiAgICBpZiAoYXJnc0xlbiA9PT0gMikgb3BlcmF0b3IgPSAnIT0nO1xuICB9XG5cbiAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikgdGhyb3cgbWVzc2FnZTtcbiAgdmFyIGVyckFyZ3MgPSB7XG4gICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgIG9wZXJhdG9yOiBvcGVyYXRvciA9PT0gdW5kZWZpbmVkID8gJ2ZhaWwnIDogb3BlcmF0b3IsXG4gICAgc3RhY2tTdGFydEZuOiBzdGFja1N0YXJ0Rm4gfHwgZmFpbFxuICB9O1xuXG4gIGlmIChtZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlcnJBcmdzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB9XG5cbiAgdmFyIGVyciA9IG5ldyBBc3NlcnRpb25FcnJvcihlcnJBcmdzKTtcblxuICBpZiAoaW50ZXJuYWxNZXNzYWdlKSB7XG4gICAgZXJyLm1lc3NhZ2UgPSBpbnRlcm5hbE1lc3NhZ2U7XG4gICAgZXJyLmdlbmVyYXRlZE1lc3NhZ2UgPSB0cnVlO1xuICB9XG5cbiAgdGhyb3cgZXJyO1xufVxuXG5hc3NlcnQuZmFpbCA9IGZhaWw7IC8vIFRoZSBBc3NlcnRpb25FcnJvciBpcyBkZWZpbmVkIGluIGludGVybmFsL2Vycm9yLlxuXG5hc3NlcnQuQXNzZXJ0aW9uRXJyb3IgPSBBc3NlcnRpb25FcnJvcjtcblxuZnVuY3Rpb24gaW5uZXJPayhmbiwgYXJnTGVuLCB2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgdmFyIGdlbmVyYXRlZE1lc3NhZ2UgPSBmYWxzZTtcblxuICAgIGlmIChhcmdMZW4gPT09IDApIHtcbiAgICAgIGdlbmVyYXRlZE1lc3NhZ2UgPSB0cnVlO1xuICAgICAgbWVzc2FnZSA9ICdObyB2YWx1ZSBhcmd1bWVudCBwYXNzZWQgdG8gYGFzc2VydC5vaygpYCc7XG4gICAgfSBlbHNlIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRocm93IG1lc3NhZ2U7XG4gICAgfVxuXG4gICAgdmFyIGVyciA9IG5ldyBBc3NlcnRpb25FcnJvcih7XG4gICAgICBhY3R1YWw6IHZhbHVlLFxuICAgICAgZXhwZWN0ZWQ6IHRydWUsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICc9PScsXG4gICAgICBzdGFja1N0YXJ0Rm46IGZuXG4gICAgfSk7XG4gICAgZXJyLmdlbmVyYXRlZE1lc3NhZ2UgPSBnZW5lcmF0ZWRNZXNzYWdlO1xuICAgIHRocm93IGVycjtcbiAgfVxufSAvLyBQdXJlIGFzc2VydGlvbiB0ZXN0cyB3aGV0aGVyIGEgdmFsdWUgaXMgdHJ1dGh5LCBhcyBkZXRlcm1pbmVkXG4vLyBieSAhIXZhbHVlLlxuXG5cbmZ1bmN0aW9uIG9rKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaW5uZXJPay5hcHBseSh2b2lkIDAsIFtvaywgYXJncy5sZW5ndGhdLmNvbmNhdChhcmdzKSk7XG59XG5cbmFzc2VydC5vayA9IG9rOyAvLyBUaGUgZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIHNoYWxsb3csIGNvZXJjaXZlIGVxdWFsaXR5IHdpdGggPT0uXG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllcyAqL1xuXG5hc3NlcnQuZXF1YWwgPSBmdW5jdGlvbiBlcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cblxuICBpZiAoYWN0dWFsICE9IGV4cGVjdGVkKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnPT0nLFxuICAgICAgc3RhY2tTdGFydEZuOiBlcXVhbFxuICAgIH0pO1xuICB9XG59OyAvLyBUaGUgbm9uLWVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBmb3Igd2hldGhlciB0d28gb2JqZWN0cyBhcmUgbm90XG4vLyBlcXVhbCB3aXRoICE9LlxuXG5cbmFzc2VydC5ub3RFcXVhbCA9IGZ1bmN0aW9uIG5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblxuXG4gIGlmIChhY3R1YWwgPT0gZXhwZWN0ZWQpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICchPScsXG4gICAgICBzdGFja1N0YXJ0Rm46IG5vdEVxdWFsXG4gICAgfSk7XG4gIH1cbn07IC8vIFRoZSBlcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgYSBkZWVwIGVxdWFsaXR5IHJlbGF0aW9uLlxuXG5cbmFzc2VydC5kZWVwRXF1YWwgPSBmdW5jdGlvbiBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAoaXNEZWVwRXF1YWwgPT09IHVuZGVmaW5lZCkgbGF6eUxvYWRDb21wYXJpc29uKCk7XG5cbiAgaWYgKCFpc0RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJ2RlZXBFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IGRlZXBFcXVhbFxuICAgIH0pO1xuICB9XG59OyAvLyBUaGUgbm9uLWVxdWl2YWxlbmNlIGFzc2VydGlvbiB0ZXN0cyBmb3IgYW55IGRlZXAgaW5lcXVhbGl0eS5cblxuXG5hc3NlcnQubm90RGVlcEVxdWFsID0gZnVuY3Rpb24gbm90RGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKGlzRGVlcEVxdWFsID09PSB1bmRlZmluZWQpIGxhenlMb2FkQ29tcGFyaXNvbigpO1xuXG4gIGlmIChpc0RlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJ25vdERlZXBFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IG5vdERlZXBFcXVhbFxuICAgIH0pO1xuICB9XG59O1xuLyogZXNsaW50LWVuYWJsZSAqL1xuXG5cbmFzc2VydC5kZWVwU3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBkZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAoaXNEZWVwRXF1YWwgPT09IHVuZGVmaW5lZCkgbGF6eUxvYWRDb21wYXJpc29uKCk7XG5cbiAgaWYgKCFpc0RlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJ2RlZXBTdHJpY3RFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IGRlZXBTdHJpY3RFcXVhbFxuICAgIH0pO1xuICB9XG59O1xuXG5hc3NlcnQubm90RGVlcFN0cmljdEVxdWFsID0gbm90RGVlcFN0cmljdEVxdWFsO1xuXG5mdW5jdGlvbiBub3REZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAoaXNEZWVwRXF1YWwgPT09IHVuZGVmaW5lZCkgbGF6eUxvYWRDb21wYXJpc29uKCk7XG5cbiAgaWYgKGlzRGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnbm90RGVlcFN0cmljdEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogbm90RGVlcFN0cmljdEVxdWFsXG4gICAgfSk7XG4gIH1cbn1cblxuYXNzZXJ0LnN0cmljdEVxdWFsID0gZnVuY3Rpb24gc3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAoIW9iamVjdElzKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnc3RyaWN0RXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBzdHJpY3RFcXVhbFxuICAgIH0pO1xuICB9XG59O1xuXG5hc3NlcnQubm90U3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBub3RTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmIChvYmplY3RJcyhhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJ25vdFN0cmljdEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogbm90U3RyaWN0RXF1YWxcbiAgICB9KTtcbiAgfVxufTtcblxudmFyIENvbXBhcmlzb24gPSBmdW5jdGlvbiBDb21wYXJpc29uKG9iaiwga2V5cywgYWN0dWFsKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXBhcmlzb24pO1xuXG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChhY3R1YWwgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgYWN0dWFsW2tleV0gPT09ICdzdHJpbmcnICYmIGlzUmVnRXhwKG9ialtrZXldKSAmJiBvYmpba2V5XS50ZXN0KGFjdHVhbFtrZXldKSkge1xuICAgICAgICBfdGhpc1trZXldID0gYWN0dWFsW2tleV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpc1trZXldID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGNvbXBhcmVFeGNlcHRpb25LZXkoYWN0dWFsLCBleHBlY3RlZCwga2V5LCBtZXNzYWdlLCBrZXlzLCBmbikge1xuICBpZiAoIShrZXkgaW4gYWN0dWFsKSB8fCAhaXNEZWVwU3RyaWN0RXF1YWwoYWN0dWFsW2tleV0sIGV4cGVjdGVkW2tleV0pKSB7XG4gICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAvLyBDcmVhdGUgcGxhY2Vob2xkZXIgb2JqZWN0cyB0byBjcmVhdGUgYSBuaWNlIG91dHB1dC5cbiAgICAgIHZhciBhID0gbmV3IENvbXBhcmlzb24oYWN0dWFsLCBrZXlzKTtcbiAgICAgIHZhciBiID0gbmV3IENvbXBhcmlzb24oZXhwZWN0ZWQsIGtleXMsIGFjdHVhbCk7XG4gICAgICB2YXIgZXJyID0gbmV3IEFzc2VydGlvbkVycm9yKHtcbiAgICAgICAgYWN0dWFsOiBhLFxuICAgICAgICBleHBlY3RlZDogYixcbiAgICAgICAgb3BlcmF0b3I6ICdkZWVwU3RyaWN0RXF1YWwnLFxuICAgICAgICBzdGFja1N0YXJ0Rm46IGZuXG4gICAgICB9KTtcbiAgICAgIGVyci5hY3R1YWwgPSBhY3R1YWw7XG4gICAgICBlcnIuZXhwZWN0ZWQgPSBleHBlY3RlZDtcbiAgICAgIGVyci5vcGVyYXRvciA9IGZuLm5hbWU7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiBmbi5uYW1lLFxuICAgICAgc3RhY2tTdGFydEZuOiBmblxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXhwZWN0ZWQsIG1zZywgZm4pIHtcbiAgaWYgKHR5cGVvZiBleHBlY3RlZCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChpc1JlZ0V4cChleHBlY3RlZCkpIHJldHVybiBleHBlY3RlZC50ZXN0KGFjdHVhbCk7IC8vIGFzc2VydC5kb2VzTm90VGhyb3cgZG9lcyBub3QgYWNjZXB0IG9iamVjdHMuXG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdleHBlY3RlZCcsIFsnRnVuY3Rpb24nLCAnUmVnRXhwJ10sIGV4cGVjdGVkKTtcbiAgICB9IC8vIEhhbmRsZSBwcmltaXRpdmVzIHByb3Blcmx5LlxuXG5cbiAgICBpZiAoX3R5cGVvZihhY3R1YWwpICE9PSAnb2JqZWN0JyB8fCBhY3R1YWwgPT09IG51bGwpIHtcbiAgICAgIHZhciBlcnIgPSBuZXcgQXNzZXJ0aW9uRXJyb3Ioe1xuICAgICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgICBtZXNzYWdlOiBtc2csXG4gICAgICAgIG9wZXJhdG9yOiAnZGVlcFN0cmljdEVxdWFsJyxcbiAgICAgICAgc3RhY2tTdGFydEZuOiBmblxuICAgICAgfSk7XG4gICAgICBlcnIub3BlcmF0b3IgPSBmbi5uYW1lO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXhwZWN0ZWQpOyAvLyBTcGVjaWFsIGhhbmRsZSBlcnJvcnMgdG8gbWFrZSBzdXJlIHRoZSBuYW1lIGFuZCB0aGUgbWVzc2FnZSBhcmUgY29tcGFyZWRcbiAgICAvLyBhcyB3ZWxsLlxuXG4gICAgaWYgKGV4cGVjdGVkIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGtleXMucHVzaCgnbmFtZScsICdtZXNzYWdlJyk7XG4gICAgfSBlbHNlIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19WQUxVRSgnZXJyb3InLCBleHBlY3RlZCwgJ21heSBub3QgYmUgYW4gZW1wdHkgb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGVlcEVxdWFsID09PSB1bmRlZmluZWQpIGxhenlMb2FkQ29tcGFyaXNvbigpO1xuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGFjdHVhbFtrZXldID09PSAnc3RyaW5nJyAmJiBpc1JlZ0V4cChleHBlY3RlZFtrZXldKSAmJiBleHBlY3RlZFtrZXldLnRlc3QoYWN0dWFsW2tleV0pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29tcGFyZUV4Y2VwdGlvbktleShhY3R1YWwsIGV4cGVjdGVkLCBrZXksIG1zZywga2V5cywgZm4pO1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIEd1YXJkIGluc3RhbmNlb2YgYWdhaW5zdCBhcnJvdyBmdW5jdGlvbnMgYXMgdGhleSBkb24ndCBoYXZlIGEgcHJvdG90eXBlLlxuXG5cbiAgaWYgKGV4cGVjdGVkLnByb3RvdHlwZSAhPT0gdW5kZWZpbmVkICYmIGFjdHVhbCBpbnN0YW5jZW9mIGV4cGVjdGVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoRXJyb3IuaXNQcm90b3R5cGVPZihleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZXhwZWN0ZWQuY2FsbCh7fSwgYWN0dWFsKSA9PT0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0QWN0dWFsKGZuKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2ZuJywgJ0Z1bmN0aW9uJywgZm4pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBmbigpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGU7XG4gIH1cblxuICByZXR1cm4gTk9fRVhDRVBUSU9OX1NFTlRJTkVMO1xufVxuXG5mdW5jdGlvbiBjaGVja0lzUHJvbWlzZShvYmopIHtcbiAgLy8gQWNjZXB0IG5hdGl2ZSBFUzYgcHJvbWlzZXMgYW5kIHByb21pc2VzIHRoYXQgYXJlIGltcGxlbWVudGVkIGluIGEgc2ltaWxhclxuICAvLyB3YXkuIERvIG5vdCBhY2NlcHQgdGhlbmFibGVzIHRoYXQgdXNlIGEgZnVuY3Rpb24gYXMgYG9iamAgYW5kIHRoYXQgaGF2ZSBub1xuICAvLyBgY2F0Y2hgIGhhbmRsZXIuXG4gIC8vIFRPRE86IHRoZW5hYmxlcyBhcmUgY2hlY2tlZCB1cCB1bnRpbCB0aGV5IGhhdmUgdGhlIGNvcnJlY3QgbWV0aG9kcyxcbiAgLy8gYnV0IGFjY29yZGluZyB0byBkb2N1bWVudGF0aW9uLCB0aGUgYHRoZW5gIG1ldGhvZCBzaG91bGQgcmVjZWl2ZVxuICAvLyB0aGUgYGZ1bGZpbGxgIGFuZCBgcmVqZWN0YCBhcmd1bWVudHMgYXMgd2VsbCBvciBpdCBtYXkgYmUgbmV2ZXIgcmVzb2x2ZWQuXG4gIHJldHVybiBpc1Byb21pc2Uob2JqKSB8fCBvYmogIT09IG51bGwgJiYgX3R5cGVvZihvYmopID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5jYXRjaCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gd2FpdEZvckFjdHVhbChwcm9taXNlRm4pIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHRQcm9taXNlO1xuXG4gICAgaWYgKHR5cGVvZiBwcm9taXNlRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFJldHVybiBhIHJlamVjdGVkIHByb21pc2UgaWYgYHByb21pc2VGbmAgdGhyb3dzIHN5bmNocm9ub3VzbHkuXG4gICAgICByZXN1bHRQcm9taXNlID0gcHJvbWlzZUZuKCk7IC8vIEZhaWwgaW4gY2FzZSBubyBwcm9taXNlIGlzIHJldHVybmVkLlxuXG4gICAgICBpZiAoIWNoZWNrSXNQcm9taXNlKHJlc3VsdFByb21pc2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9SRVRVUk5fVkFMVUUoJ2luc3RhbmNlIG9mIFByb21pc2UnLCAncHJvbWlzZUZuJywgcmVzdWx0UHJvbWlzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGVja0lzUHJvbWlzZShwcm9taXNlRm4pKSB7XG4gICAgICByZXN1bHRQcm9taXNlID0gcHJvbWlzZUZuO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ3Byb21pc2VGbicsIFsnRnVuY3Rpb24nLCAnUHJvbWlzZSddLCBwcm9taXNlRm4pO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXN1bHRQcm9taXNlO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIE5PX0VYQ0VQVElPTl9TRU5USU5FTDtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgcmV0dXJuIGU7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBleHBlY3RzRXJyb3Ioc3RhY2tTdGFydEZuLCBhY3R1YWwsIGVycm9yLCBtZXNzYWdlKSB7XG4gIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQpIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnZXJyb3InLCBbJ09iamVjdCcsICdFcnJvcicsICdGdW5jdGlvbicsICdSZWdFeHAnXSwgZXJyb3IpO1xuICAgIH1cblxuICAgIGlmIChfdHlwZW9mKGFjdHVhbCkgPT09ICdvYmplY3QnICYmIGFjdHVhbCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGFjdHVhbC5tZXNzYWdlID09PSBlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgRVJSX0FNQklHVU9VU19BUkdVTUVOVCgnZXJyb3IvbWVzc2FnZScsIFwiVGhlIGVycm9yIG1lc3NhZ2UgXFxcIlwiLmNvbmNhdChhY3R1YWwubWVzc2FnZSwgXCJcXFwiIGlzIGlkZW50aWNhbCB0byB0aGUgbWVzc2FnZS5cIikpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWN0dWFsID09PSBlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVSUl9BTUJJR1VPVVNfQVJHVU1FTlQoJ2Vycm9yL21lc3NhZ2UnLCBcIlRoZSBlcnJvciBcXFwiXCIuY29uY2F0KGFjdHVhbCwgXCJcXFwiIGlzIGlkZW50aWNhbCB0byB0aGUgbWVzc2FnZS5cIikpO1xuICAgIH1cblxuICAgIG1lc3NhZ2UgPSBlcnJvcjtcbiAgICBlcnJvciA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIGlmIChlcnJvciAhPSBudWxsICYmIF90eXBlb2YoZXJyb3IpICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgZXJyb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2Vycm9yJywgWydPYmplY3QnLCAnRXJyb3InLCAnRnVuY3Rpb24nLCAnUmVnRXhwJ10sIGVycm9yKTtcbiAgfVxuXG4gIGlmIChhY3R1YWwgPT09IE5PX0VYQ0VQVElPTl9TRU5USU5FTCkge1xuICAgIHZhciBkZXRhaWxzID0gJyc7XG5cbiAgICBpZiAoZXJyb3IgJiYgZXJyb3IubmFtZSkge1xuICAgICAgZGV0YWlscyArPSBcIiAoXCIuY29uY2F0KGVycm9yLm5hbWUsIFwiKVwiKTtcbiAgICB9XG5cbiAgICBkZXRhaWxzICs9IG1lc3NhZ2UgPyBcIjogXCIuY29uY2F0KG1lc3NhZ2UpIDogJy4nO1xuICAgIHZhciBmblR5cGUgPSBzdGFja1N0YXJ0Rm4ubmFtZSA9PT0gJ3JlamVjdHMnID8gJ3JlamVjdGlvbicgOiAnZXhjZXB0aW9uJztcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiB1bmRlZmluZWQsXG4gICAgICBleHBlY3RlZDogZXJyb3IsXG4gICAgICBvcGVyYXRvcjogc3RhY2tTdGFydEZuLm5hbWUsXG4gICAgICBtZXNzYWdlOiBcIk1pc3NpbmcgZXhwZWN0ZWQgXCIuY29uY2F0KGZuVHlwZSkuY29uY2F0KGRldGFpbHMpLFxuICAgICAgc3RhY2tTdGFydEZuOiBzdGFja1N0YXJ0Rm5cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChlcnJvciAmJiAhZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBlcnJvciwgbWVzc2FnZSwgc3RhY2tTdGFydEZuKSkge1xuICAgIHRocm93IGFjdHVhbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHBlY3RzTm9FcnJvcihzdGFja1N0YXJ0Rm4sIGFjdHVhbCwgZXJyb3IsIG1lc3NhZ2UpIHtcbiAgaWYgKGFjdHVhbCA9PT0gTk9fRVhDRVBUSU9OX1NFTlRJTkVMKSByZXR1cm47XG5cbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICBtZXNzYWdlID0gZXJyb3I7XG4gICAgZXJyb3IgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoIWVycm9yIHx8IGV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXJyb3IpKSB7XG4gICAgdmFyIGRldGFpbHMgPSBtZXNzYWdlID8gXCI6IFwiLmNvbmNhdChtZXNzYWdlKSA6ICcuJztcbiAgICB2YXIgZm5UeXBlID0gc3RhY2tTdGFydEZuLm5hbWUgPT09ICdkb2VzTm90UmVqZWN0JyA/ICdyZWplY3Rpb24nIDogJ2V4Y2VwdGlvbic7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGVycm9yLFxuICAgICAgb3BlcmF0b3I6IHN0YWNrU3RhcnRGbi5uYW1lLFxuICAgICAgbWVzc2FnZTogXCJHb3QgdW53YW50ZWQgXCIuY29uY2F0KGZuVHlwZSkuY29uY2F0KGRldGFpbHMsIFwiXFxuXCIpICsgXCJBY3R1YWwgbWVzc2FnZTogXFxcIlwiLmNvbmNhdChhY3R1YWwgJiYgYWN0dWFsLm1lc3NhZ2UsIFwiXFxcIlwiKSxcbiAgICAgIHN0YWNrU3RhcnRGbjogc3RhY2tTdGFydEZuXG4gICAgfSk7XG4gIH1cblxuICB0aHJvdyBhY3R1YWw7XG59XG5cbmFzc2VydC50aHJvd3MgPSBmdW5jdGlvbiB0aHJvd3MocHJvbWlzZUZuKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIGV4cGVjdHNFcnJvci5hcHBseSh2b2lkIDAsIFt0aHJvd3MsIGdldEFjdHVhbChwcm9taXNlRm4pXS5jb25jYXQoYXJncykpO1xufTtcblxuYXNzZXJ0LnJlamVjdHMgPSBmdW5jdGlvbiByZWplY3RzKHByb21pc2VGbikge1xuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMgPiAxID8gX2xlbjMgLSAxIDogMCksIF9rZXkzID0gMTsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgIGFyZ3NbX2tleTMgLSAxXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICByZXR1cm4gd2FpdEZvckFjdHVhbChwcm9taXNlRm4pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHJldHVybiBleHBlY3RzRXJyb3IuYXBwbHkodm9pZCAwLCBbcmVqZWN0cywgcmVzdWx0XS5jb25jYXQoYXJncykpO1xuICB9KTtcbn07XG5cbmFzc2VydC5kb2VzTm90VGhyb3cgPSBmdW5jdGlvbiBkb2VzTm90VGhyb3coZm4pIHtcbiAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICBhcmdzW19rZXk0IC0gMV0gPSBhcmd1bWVudHNbX2tleTRdO1xuICB9XG5cbiAgZXhwZWN0c05vRXJyb3IuYXBwbHkodm9pZCAwLCBbZG9lc05vdFRocm93LCBnZXRBY3R1YWwoZm4pXS5jb25jYXQoYXJncykpO1xufTtcblxuYXNzZXJ0LmRvZXNOb3RSZWplY3QgPSBmdW5jdGlvbiBkb2VzTm90UmVqZWN0KGZuKSB7XG4gIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSA+IDEgPyBfbGVuNSAtIDEgOiAwKSwgX2tleTUgPSAxOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgYXJnc1tfa2V5NSAtIDFdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgfVxuXG4gIHJldHVybiB3YWl0Rm9yQWN0dWFsKGZuKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICByZXR1cm4gZXhwZWN0c05vRXJyb3IuYXBwbHkodm9pZCAwLCBbZG9lc05vdFJlamVjdCwgcmVzdWx0XS5jb25jYXQoYXJncykpO1xuICB9KTtcbn07XG5cbmFzc2VydC5pZkVycm9yID0gZnVuY3Rpb24gaWZFcnJvcihlcnIpIHtcbiAgaWYgKGVyciAhPT0gbnVsbCAmJiBlcnIgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBtZXNzYWdlID0gJ2lmRXJyb3IgZ290IHVud2FudGVkIGV4Y2VwdGlvbjogJztcblxuICAgIGlmIChfdHlwZW9mKGVycikgPT09ICdvYmplY3QnICYmIHR5cGVvZiBlcnIubWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChlcnIubWVzc2FnZS5sZW5ndGggPT09IDAgJiYgZXJyLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gZXJyLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlICs9IGVyci5tZXNzYWdlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlICs9IGluc3BlY3QoZXJyKTtcbiAgICB9XG5cbiAgICB2YXIgbmV3RXJyID0gbmV3IEFzc2VydGlvbkVycm9yKHtcbiAgICAgIGFjdHVhbDogZXJyLFxuICAgICAgZXhwZWN0ZWQ6IG51bGwsXG4gICAgICBvcGVyYXRvcjogJ2lmRXJyb3InLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIHN0YWNrU3RhcnRGbjogaWZFcnJvclxuICAgIH0pOyAvLyBNYWtlIHN1cmUgd2UgYWN0dWFsbHkgaGF2ZSBhIHN0YWNrIHRyYWNlIVxuXG4gICAgdmFyIG9yaWdTdGFjayA9IGVyci5zdGFjaztcblxuICAgIGlmICh0eXBlb2Ygb3JpZ1N0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gVGhpcyB3aWxsIHJlbW92ZSBhbnkgZHVwbGljYXRlZCBmcmFtZXMgZnJvbSB0aGUgZXJyb3IgZnJhbWVzIHRha2VuXG4gICAgICAvLyBmcm9tIHdpdGhpbiBgaWZFcnJvcmAgYW5kIGFkZCB0aGUgb3JpZ2luYWwgZXJyb3IgZnJhbWVzIHRvIHRoZSBuZXdseVxuICAgICAgLy8gY3JlYXRlZCBvbmVzLlxuICAgICAgdmFyIHRtcDIgPSBvcmlnU3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgdG1wMi5zaGlmdCgpOyAvLyBGaWx0ZXIgYWxsIGZyYW1lcyBleGlzdGluZyBpbiBlcnIuc3RhY2suXG5cbiAgICAgIHZhciB0bXAxID0gbmV3RXJyLnN0YWNrLnNwbGl0KCdcXG4nKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0bXAyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIEZpbmQgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgdGhlIGZyYW1lLlxuICAgICAgICB2YXIgcG9zID0gdG1wMS5pbmRleE9mKHRtcDJbaV0pO1xuXG4gICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgLy8gT25seSBrZWVwIG5ldyBmcmFtZXMuXG4gICAgICAgICAgdG1wMSA9IHRtcDEuc2xpY2UoMCwgcG9zKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBuZXdFcnIuc3RhY2sgPSBcIlwiLmNvbmNhdCh0bXAxLmpvaW4oJ1xcbicpLCBcIlxcblwiKS5jb25jYXQodG1wMi5qb2luKCdcXG4nKSk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3RXJyO1xuICB9XG59OyAvLyBFeHBvc2UgYSBzdHJpY3Qgb25seSB2YXJpYW50IG9mIGFzc2VydFxuXG5cbmZ1bmN0aW9uIHN0cmljdCgpIHtcbiAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42KSwgX2tleTYgPSAwOyBfa2V5NiA8IF9sZW42OyBfa2V5NisrKSB7XG4gICAgYXJnc1tfa2V5Nl0gPSBhcmd1bWVudHNbX2tleTZdO1xuICB9XG5cbiAgaW5uZXJPay5hcHBseSh2b2lkIDAsIFtzdHJpY3QsIGFyZ3MubGVuZ3RoXS5jb25jYXQoYXJncykpO1xufVxuXG5hc3NlcnQuc3RyaWN0ID0gb2JqZWN0QXNzaWduKHN0cmljdCwgYXNzZXJ0LCB7XG4gIGVxdWFsOiBhc3NlcnQuc3RyaWN0RXF1YWwsXG4gIGRlZXBFcXVhbDogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCxcbiAgbm90RXF1YWw6IGFzc2VydC5ub3RTdHJpY3RFcXVhbCxcbiAgbm90RGVlcEVxdWFsOiBhc3NlcnQubm90RGVlcFN0cmljdEVxdWFsXG59KTtcbmFzc2VydC5zdHJpY3Quc3RyaWN0ID0gYXNzZXJ0LnN0cmljdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIDk4MDE6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogcHJvdmlkZWQgZGVwZW5kZW5jeSAqLyB2YXIgcHJvY2VzcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTkwNyk7XG4vLyBDdXJyZW50bHkgaW4gc3luYyB3aXRoIE5vZGUuanMgbGliL2ludGVybmFsL2Fzc2VydC9hc3NlcnRpb25fZXJyb3IuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9jb21taXQvMDgxNzg0MGY3NzUwMzIxNjlkZGQ3MGM4NWFjMDU5ZjE4ZmZjYzgxY1xuXG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykgeyBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlOyB9KSk7IH0gb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7IHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7IF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7IGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7IGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHsgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7IF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpOyB9IGZ1bmN0aW9uIFdyYXBwZXIoKSB7IHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7IH0gV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogV3JhcHBlciwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7IH07IHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTsgfVxuXG5mdW5jdGlvbiBpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7IGlmIChpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgeyBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7IH0gZWxzZSB7IF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgdmFyIGEgPSBbbnVsbF07IGEucHVzaC5hcHBseShhLCBhcmdzKTsgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpOyB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7IHJldHVybiBpbnN0YW5jZTsgfTsgfSByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7IHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyMDgpLFxuICAgIGluc3BlY3QgPSBfcmVxdWlyZS5pbnNwZWN0O1xuXG52YXIgX3JlcXVpcmUyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzQyKSxcbiAgICBFUlJfSU5WQUxJRF9BUkdfVFlQRSA9IF9yZXF1aXJlMi5jb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRTsgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2VuZHNXaXRoXG5cblxuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2gsIHRoaXNfbGVuKSB7XG4gIGlmICh0aGlzX2xlbiA9PT0gdW5kZWZpbmVkIHx8IHRoaXNfbGVuID4gc3RyLmxlbmd0aCkge1xuICAgIHRoaXNfbGVuID0gc3RyLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKHRoaXNfbGVuIC0gc2VhcmNoLmxlbmd0aCwgdGhpc19sZW4pID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9yZXBlYXRcblxuXG5mdW5jdGlvbiByZXBlYXQoc3RyLCBjb3VudCkge1xuICBjb3VudCA9IE1hdGguZmxvb3IoY291bnQpO1xuICBpZiAoc3RyLmxlbmd0aCA9PSAwIHx8IGNvdW50ID09IDApIHJldHVybiAnJztcbiAgdmFyIG1heENvdW50ID0gc3RyLmxlbmd0aCAqIGNvdW50O1xuICBjb3VudCA9IE1hdGguZmxvb3IoTWF0aC5sb2coY291bnQpIC8gTWF0aC5sb2coMikpO1xuXG4gIHdoaWxlIChjb3VudCkge1xuICAgIHN0ciArPSBzdHI7XG4gICAgY291bnQtLTtcbiAgfVxuXG4gIHN0ciArPSBzdHIuc3Vic3RyaW5nKDAsIG1heENvdW50IC0gc3RyLmxlbmd0aCk7XG4gIHJldHVybiBzdHI7XG59XG5cbnZhciBibHVlID0gJyc7XG52YXIgZ3JlZW4gPSAnJztcbnZhciByZWQgPSAnJztcbnZhciB3aGl0ZSA9ICcnO1xudmFyIGtSZWFkYWJsZU9wZXJhdG9yID0ge1xuICBkZWVwU3RyaWN0RXF1YWw6ICdFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgc3RyaWN0bHkgZGVlcC1lcXVhbDonLFxuICBzdHJpY3RFcXVhbDogJ0V4cGVjdGVkIHZhbHVlcyB0byBiZSBzdHJpY3RseSBlcXVhbDonLFxuICBzdHJpY3RFcXVhbE9iamVjdDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgdG8gYmUgcmVmZXJlbmNlLWVxdWFsIHRvIFwiZXhwZWN0ZWRcIjonLFxuICBkZWVwRXF1YWw6ICdFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgbG9vc2VseSBkZWVwLWVxdWFsOicsXG4gIGVxdWFsOiAnRXhwZWN0ZWQgdmFsdWVzIHRvIGJlIGxvb3NlbHkgZXF1YWw6JyxcbiAgbm90RGVlcFN0cmljdEVxdWFsOiAnRXhwZWN0ZWQgXCJhY3R1YWxcIiBub3QgdG8gYmUgc3RyaWN0bHkgZGVlcC1lcXVhbCB0bzonLFxuICBub3RTdHJpY3RFcXVhbDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgdG8gYmUgc3RyaWN0bHkgdW5lcXVhbCB0bzonLFxuICBub3RTdHJpY3RFcXVhbE9iamVjdDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgbm90IHRvIGJlIHJlZmVyZW5jZS1lcXVhbCB0byBcImV4cGVjdGVkXCI6JyxcbiAgbm90RGVlcEVxdWFsOiAnRXhwZWN0ZWQgXCJhY3R1YWxcIiBub3QgdG8gYmUgbG9vc2VseSBkZWVwLWVxdWFsIHRvOicsXG4gIG5vdEVxdWFsOiAnRXhwZWN0ZWQgXCJhY3R1YWxcIiB0byBiZSBsb29zZWx5IHVuZXF1YWwgdG86JyxcbiAgbm90SWRlbnRpY2FsOiAnVmFsdWVzIGlkZW50aWNhbCBidXQgbm90IHJlZmVyZW5jZS1lcXVhbDonXG59OyAvLyBDb21wYXJpbmcgc2hvcnQgcHJpbWl0aXZlcyBzaG91bGQganVzdCBzaG93ID09PSAvICE9PSBpbnN0ZWFkIG9mIHVzaW5nIHRoZVxuLy8gZGlmZi5cblxudmFyIGtNYXhTaG9ydExlbmd0aCA9IDEwO1xuXG5mdW5jdGlvbiBjb3B5RXJyb3Ioc291cmNlKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIHRhcmdldCA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZSkpO1xuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH0pO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCAnbWVzc2FnZScsIHtcbiAgICB2YWx1ZTogc291cmNlLm1lc3NhZ2VcbiAgfSk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGluc3BlY3RWYWx1ZSh2YWwpIHtcbiAgLy8gVGhlIHV0aWwuaW5zcGVjdCBkZWZhdWx0IHZhbHVlcyBjb3VsZCBiZSBjaGFuZ2VkLiBUaGlzIG1ha2VzIHN1cmUgdGhlXG4gIC8vIGVycm9yIG1lc3NhZ2VzIGNvbnRhaW4gdGhlIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbiBuZXZlcnRoZWxlc3MuXG4gIHJldHVybiBpbnNwZWN0KHZhbCwge1xuICAgIGNvbXBhY3Q6IGZhbHNlLFxuICAgIGN1c3RvbUluc3BlY3Q6IGZhbHNlLFxuICAgIGRlcHRoOiAxMDAwLFxuICAgIG1heEFycmF5TGVuZ3RoOiBJbmZpbml0eSxcbiAgICAvLyBBc3NlcnQgY29tcGFyZXMgb25seSBlbnVtZXJhYmxlIHByb3BlcnRpZXMgKHdpdGggYSBmZXcgZXhjZXB0aW9ucykuXG4gICAgc2hvd0hpZGRlbjogZmFsc2UsXG4gICAgLy8gSGF2aW5nIGEgbG9uZyBsaW5lIGFzIGVycm9yIGlzIGJldHRlciB0aGFuIHdyYXBwaW5nIHRoZSBsaW5lIGZvclxuICAgIC8vIGNvbXBhcmlzb24gZm9yIG5vdy5cbiAgICAvLyBUT0RPKEJyaWRnZUFSKTogYGJyZWFrTGVuZ3RoYCBzaG91bGQgYmUgbGltaXRlZCBhcyBzb29uIGFzIHNvb24gYXMgd2VcbiAgICAvLyBoYXZlIG1ldGEgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGluc3BlY3RlZCBwcm9wZXJ0aWVzIChpLmUuLCBrbm93IHdoZXJlXG4gICAgLy8gaW4gd2hhdCBsaW5lIHRoZSBwcm9wZXJ0eSBzdGFydHMgYW5kIGVuZHMpLlxuICAgIGJyZWFrTGVuZ3RoOiBJbmZpbml0eSxcbiAgICAvLyBBc3NlcnQgZG9lcyBub3QgZGV0ZWN0IHByb3hpZXMgY3VycmVudGx5LlxuICAgIHNob3dQcm94eTogZmFsc2UsXG4gICAgc29ydGVkOiB0cnVlLFxuICAgIC8vIEluc3BlY3QgZ2V0dGVycyBhcyB3ZSBhbHNvIGNoZWNrIHRoZW0gd2hlbiBjb21wYXJpbmcgZW50cmllcy5cbiAgICBnZXR0ZXJzOiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFcnJEaWZmKGFjdHVhbCwgZXhwZWN0ZWQsIG9wZXJhdG9yKSB7XG4gIHZhciBvdGhlciA9ICcnO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBsYXN0UG9zID0gMDtcbiAgdmFyIGVuZCA9ICcnO1xuICB2YXIgc2tpcHBlZCA9IGZhbHNlO1xuICB2YXIgYWN0dWFsSW5zcGVjdGVkID0gaW5zcGVjdFZhbHVlKGFjdHVhbCk7XG4gIHZhciBhY3R1YWxMaW5lcyA9IGFjdHVhbEluc3BlY3RlZC5zcGxpdCgnXFxuJyk7XG4gIHZhciBleHBlY3RlZExpbmVzID0gaW5zcGVjdFZhbHVlKGV4cGVjdGVkKS5zcGxpdCgnXFxuJyk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGluZGljYXRvciA9ICcnOyAvLyBJbiBjYXNlIGJvdGggdmFsdWVzIGFyZSBvYmplY3RzIGV4cGxpY2l0bHkgbWFyayB0aGVtIGFzIG5vdCByZWZlcmVuY2UgZXF1YWxcbiAgLy8gZm9yIHRoZSBgc3RyaWN0RXF1YWxgIG9wZXJhdG9yLlxuXG4gIGlmIChvcGVyYXRvciA9PT0gJ3N0cmljdEVxdWFsJyAmJiBfdHlwZW9mKGFjdHVhbCkgPT09ICdvYmplY3QnICYmIF90eXBlb2YoZXhwZWN0ZWQpID09PSAnb2JqZWN0JyAmJiBhY3R1YWwgIT09IG51bGwgJiYgZXhwZWN0ZWQgIT09IG51bGwpIHtcbiAgICBvcGVyYXRvciA9ICdzdHJpY3RFcXVhbE9iamVjdCc7XG4gIH0gLy8gSWYgXCJhY3R1YWxcIiBhbmQgXCJleHBlY3RlZFwiIGZpdCBvbiBhIHNpbmdsZSBsaW5lIGFuZCB0aGV5IGFyZSBub3Qgc3RyaWN0bHlcbiAgLy8gZXF1YWwsIGNoZWNrIGZ1cnRoZXIgc3BlY2lhbCBoYW5kbGluZy5cblxuXG4gIGlmIChhY3R1YWxMaW5lcy5sZW5ndGggPT09IDEgJiYgZXhwZWN0ZWRMaW5lcy5sZW5ndGggPT09IDEgJiYgYWN0dWFsTGluZXNbMF0gIT09IGV4cGVjdGVkTGluZXNbMF0pIHtcbiAgICB2YXIgaW5wdXRMZW5ndGggPSBhY3R1YWxMaW5lc1swXS5sZW5ndGggKyBleHBlY3RlZExpbmVzWzBdLmxlbmd0aDsgLy8gSWYgdGhlIGNoYXJhY3RlciBsZW5ndGggb2YgXCJhY3R1YWxcIiBhbmQgXCJleHBlY3RlZFwiIHRvZ2V0aGVyIGlzIGxlc3MgdGhhblxuICAgIC8vIGtNYXhTaG9ydExlbmd0aCBhbmQgaWYgbmVpdGhlciBpcyBhbiBvYmplY3QgYW5kIGF0IGxlYXN0IG9uZSBvZiB0aGVtIGlzXG4gICAgLy8gbm90IGB6ZXJvYCwgdXNlIHRoZSBzdHJpY3QgZXF1YWwgY29tcGFyaXNvbiB0byB2aXN1YWxpemUgdGhlIG91dHB1dC5cblxuICAgIGlmIChpbnB1dExlbmd0aCA8PSBrTWF4U2hvcnRMZW5ndGgpIHtcbiAgICAgIGlmICgoX3R5cGVvZihhY3R1YWwpICE9PSAnb2JqZWN0JyB8fCBhY3R1YWwgPT09IG51bGwpICYmIChfdHlwZW9mKGV4cGVjdGVkKSAhPT0gJ29iamVjdCcgfHwgZXhwZWN0ZWQgPT09IG51bGwpICYmIChhY3R1YWwgIT09IDAgfHwgZXhwZWN0ZWQgIT09IDApKSB7XG4gICAgICAgIC8vIC0wID09PSArMFxuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoa1JlYWRhYmxlT3BlcmF0b3Jbb3BlcmF0b3JdLCBcIlxcblxcblwiKSArIFwiXCIuY29uY2F0KGFjdHVhbExpbmVzWzBdLCBcIiAhPT0gXCIpLmNvbmNhdChleHBlY3RlZExpbmVzWzBdLCBcIlxcblwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9wZXJhdG9yICE9PSAnc3RyaWN0RXF1YWxPYmplY3QnKSB7XG4gICAgICAvLyBJZiB0aGUgc3RkZXJyIGlzIGEgdHR5IGFuZCB0aGUgaW5wdXQgbGVuZ3RoIGlzIGxvd2VyIHRoYW4gdGhlIGN1cnJlbnRcbiAgICAgIC8vIGNvbHVtbnMgcGVyIGxpbmUsIGFkZCBhIG1pc21hdGNoIGluZGljYXRvciBiZWxvdyB0aGUgb3V0cHV0LiBJZiBpdCBpc1xuICAgICAgLy8gbm90IGEgdHR5LCB1c2UgYSBkZWZhdWx0IHZhbHVlIG9mIDgwIGNoYXJhY3RlcnMuXG4gICAgICB2YXIgbWF4TGVuZ3RoID0gcHJvY2Vzcy5zdGRlcnIgJiYgcHJvY2Vzcy5zdGRlcnIuaXNUVFkgPyBwcm9jZXNzLnN0ZGVyci5jb2x1bW5zIDogODA7XG5cbiAgICAgIGlmIChpbnB1dExlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB3aGlsZSAoYWN0dWFsTGluZXNbMF1baV0gPT09IGV4cGVjdGVkTGluZXNbMF1baV0pIHtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH0gLy8gSWdub3JlIHRoZSBmaXJzdCBjaGFyYWN0ZXJzLlxuXG5cbiAgICAgICAgaWYgKGkgPiAyKSB7XG4gICAgICAgICAgLy8gQWRkIHBvc2l0aW9uIGluZGljYXRvciBmb3IgdGhlIGZpcnN0IG1pc21hdGNoIGluIGNhc2UgaXQgaXMgYVxuICAgICAgICAgIC8vIHNpbmdsZSBsaW5lIGFuZCB0aGUgaW5wdXQgbGVuZ3RoIGlzIGxlc3MgdGhhbiB0aGUgY29sdW1uIGxlbmd0aC5cbiAgICAgICAgICBpbmRpY2F0b3IgPSBcIlxcbiAgXCIuY29uY2F0KHJlcGVhdCgnICcsIGkpLCBcIl5cIik7XG4gICAgICAgICAgaSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gUmVtb3ZlIGFsbCBlbmRpbmcgbGluZXMgdGhhdCBtYXRjaCAodGhpcyBvcHRpbWl6ZXMgdGhlIG91dHB1dCBmb3JcbiAgLy8gcmVhZGFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIG51bWJlciBvZiB0b3RhbCBjaGFuZ2VkIGxpbmVzKS5cblxuXG4gIHZhciBhID0gYWN0dWFsTGluZXNbYWN0dWFsTGluZXMubGVuZ3RoIC0gMV07XG4gIHZhciBiID0gZXhwZWN0ZWRMaW5lc1tleHBlY3RlZExpbmVzLmxlbmd0aCAtIDFdO1xuXG4gIHdoaWxlIChhID09PSBiKSB7XG4gICAgaWYgKGkrKyA8IDIpIHtcbiAgICAgIGVuZCA9IFwiXFxuICBcIi5jb25jYXQoYSkuY29uY2F0KGVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG90aGVyID0gYTtcbiAgICB9XG5cbiAgICBhY3R1YWxMaW5lcy5wb3AoKTtcbiAgICBleHBlY3RlZExpbmVzLnBvcCgpO1xuICAgIGlmIChhY3R1YWxMaW5lcy5sZW5ndGggPT09IDAgfHwgZXhwZWN0ZWRMaW5lcy5sZW5ndGggPT09IDApIGJyZWFrO1xuICAgIGEgPSBhY3R1YWxMaW5lc1thY3R1YWxMaW5lcy5sZW5ndGggLSAxXTtcbiAgICBiID0gZXhwZWN0ZWRMaW5lc1tleHBlY3RlZExpbmVzLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgdmFyIG1heExpbmVzID0gTWF0aC5tYXgoYWN0dWFsTGluZXMubGVuZ3RoLCBleHBlY3RlZExpbmVzLmxlbmd0aCk7IC8vIFN0cmljdCBlcXVhbCB3aXRoIGlkZW50aWNhbCBvYmplY3RzIHRoYXQgYXJlIG5vdCBpZGVudGljYWwgYnkgcmVmZXJlbmNlLlxuICAvLyBFLmcuLCBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKHsgYTogU3ltYm9sKCkgfSwgeyBhOiBTeW1ib2woKSB9KVxuXG4gIGlmIChtYXhMaW5lcyA9PT0gMCkge1xuICAgIC8vIFdlIGhhdmUgdG8gZ2V0IHRoZSByZXN1bHQgYWdhaW4uIFRoZSBsaW5lcyB3ZXJlIGFsbCByZW1vdmVkIGJlZm9yZS5cbiAgICB2YXIgX2FjdHVhbExpbmVzID0gYWN0dWFsSW5zcGVjdGVkLnNwbGl0KCdcXG4nKTsgLy8gT25seSByZW1vdmUgbGluZXMgaW4gY2FzZSBpdCBtYWtlcyBzZW5zZSB0byBjb2xsYXBzZSB0aG9zZS5cbiAgICAvLyBUT0RPOiBBY2NlcHQgZW52IHRvIGFsd2F5cyBzaG93IHRoZSBmdWxsIGVycm9yLlxuXG5cbiAgICBpZiAoX2FjdHVhbExpbmVzLmxlbmd0aCA+IDMwKSB7XG4gICAgICBfYWN0dWFsTGluZXNbMjZdID0gXCJcIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcblxuICAgICAgd2hpbGUgKF9hY3R1YWxMaW5lcy5sZW5ndGggPiAyNykge1xuICAgICAgICBfYWN0dWFsTGluZXMucG9wKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGtSZWFkYWJsZU9wZXJhdG9yLm5vdElkZW50aWNhbCwgXCJcXG5cXG5cIikuY29uY2F0KF9hY3R1YWxMaW5lcy5qb2luKCdcXG4nKSwgXCJcXG5cIik7XG4gIH1cblxuICBpZiAoaSA+IDMpIHtcbiAgICBlbmQgPSBcIlxcblwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpLmNvbmNhdChlbmQpO1xuICAgIHNraXBwZWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKG90aGVyICE9PSAnJykge1xuICAgIGVuZCA9IFwiXFxuICBcIi5jb25jYXQob3RoZXIpLmNvbmNhdChlbmQpO1xuICAgIG90aGVyID0gJyc7XG4gIH1cblxuICB2YXIgcHJpbnRlZExpbmVzID0gMDtcbiAgdmFyIG1zZyA9IGtSZWFkYWJsZU9wZXJhdG9yW29wZXJhdG9yXSArIFwiXFxuXCIuY29uY2F0KGdyZWVuLCBcIisgYWN0dWFsXCIpLmNvbmNhdCh3aGl0ZSwgXCIgXCIpLmNvbmNhdChyZWQsIFwiLSBleHBlY3RlZFwiKS5jb25jYXQod2hpdGUpO1xuICB2YXIgc2tpcHBlZE1zZyA9IFwiIFwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUsIFwiIExpbmVzIHNraXBwZWRcIik7XG5cbiAgZm9yIChpID0gMDsgaSA8IG1heExpbmVzOyBpKyspIHtcbiAgICAvLyBPbmx5IGV4dHJhIGV4cGVjdGVkIGxpbmVzIGV4aXN0XG4gICAgdmFyIGN1ciA9IGkgLSBsYXN0UG9zO1xuXG4gICAgaWYgKGFjdHVhbExpbmVzLmxlbmd0aCA8IGkgKyAxKSB7XG4gICAgICAvLyBJZiB0aGUgbGFzdCBkaXZlcmdpbmcgbGluZSBpcyBtb3JlIHRoYW4gb25lIGxpbmUgYWJvdmUgYW5kIHRoZVxuICAgICAgLy8gY3VycmVudCBsaW5lIGlzIGF0IGxlYXN0IGxpbmUgdGhyZWUsIGFkZCBzb21lIG9mIHRoZSBmb3JtZXIgbGluZXMgYW5kXG4gICAgICAvLyBhbHNvIGFkZCBkb3RzIHRvIGluZGljYXRlIHNraXBwZWQgZW50cmllcy5cbiAgICAgIGlmIChjdXIgPiAxICYmIGkgPiAyKSB7XG4gICAgICAgIGlmIChjdXIgPiA0KSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG4gICAgICAgICAgc2tpcHBlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VyID4gMykge1xuICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGV4cGVjdGVkTGluZXNbaSAtIDJdKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGV4cGVjdGVkTGluZXNbaSAtIDFdKTtcbiAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICB9IC8vIE1hcmsgdGhlIGN1cnJlbnQgbGluZSBhcyB0aGUgbGFzdCBkaXZlcmdpbmcgb25lLlxuXG5cbiAgICAgIGxhc3RQb3MgPSBpOyAvLyBBZGQgdGhlIGV4cGVjdGVkIGxpbmUgdG8gdGhlIGNhY2hlLlxuXG4gICAgICBvdGhlciArPSBcIlxcblwiLmNvbmNhdChyZWQsIFwiLVwiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRMaW5lc1tpXSk7XG4gICAgICBwcmludGVkTGluZXMrKzsgLy8gT25seSBleHRyYSBhY3R1YWwgbGluZXMgZXhpc3RcbiAgICB9IGVsc2UgaWYgKGV4cGVjdGVkTGluZXMubGVuZ3RoIDwgaSArIDEpIHtcbiAgICAgIC8vIElmIHRoZSBsYXN0IGRpdmVyZ2luZyBsaW5lIGlzIG1vcmUgdGhhbiBvbmUgbGluZSBhYm92ZSBhbmQgdGhlXG4gICAgICAvLyBjdXJyZW50IGxpbmUgaXMgYXQgbGVhc3QgbGluZSB0aHJlZSwgYWRkIHNvbWUgb2YgdGhlIGZvcm1lciBsaW5lcyBhbmRcbiAgICAgIC8vIGFsc28gYWRkIGRvdHMgdG8gaW5kaWNhdGUgc2tpcHBlZCBlbnRyaWVzLlxuICAgICAgaWYgKGN1ciA+IDEgJiYgaSA+IDIpIHtcbiAgICAgICAgaWYgKGN1ciA+IDQpIHtcbiAgICAgICAgICByZXMgKz0gXCJcXG5cIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcbiAgICAgICAgICBza2lwcGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXIgPiAzKSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoYWN0dWFsTGluZXNbaSAtIDJdKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmVzW2kgLSAxXSk7XG4gICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgfSAvLyBNYXJrIHRoZSBjdXJyZW50IGxpbmUgYXMgdGhlIGxhc3QgZGl2ZXJnaW5nIG9uZS5cblxuXG4gICAgICBsYXN0UG9zID0gaTsgLy8gQWRkIHRoZSBhY3R1YWwgbGluZSB0byB0aGUgcmVzdWx0LlxuXG4gICAgICByZXMgKz0gXCJcXG5cIi5jb25jYXQoZ3JlZW4sIFwiK1wiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQoYWN0dWFsTGluZXNbaV0pO1xuICAgICAgcHJpbnRlZExpbmVzKys7IC8vIExpbmVzIGRpdmVyZ2VcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGV4cGVjdGVkTGluZSA9IGV4cGVjdGVkTGluZXNbaV07XG4gICAgICB2YXIgYWN0dWFsTGluZSA9IGFjdHVhbExpbmVzW2ldOyAvLyBJZiB0aGUgbGluZXMgZGl2ZXJnZSwgc3BlY2lmaWNhbGx5IGNoZWNrIGZvciBsaW5lcyB0aGF0IG9ubHkgZGl2ZXJnZSBieVxuICAgICAgLy8gYSB0cmFpbGluZyBjb21tYS4gSW4gdGhhdCBjYXNlIGl0IGlzIGFjdHVhbGx5IGlkZW50aWNhbCBhbmQgd2Ugc2hvdWxkXG4gICAgICAvLyBtYXJrIGl0IGFzIHN1Y2guXG5cbiAgICAgIHZhciBkaXZlcmdpbmdMaW5lcyA9IGFjdHVhbExpbmUgIT09IGV4cGVjdGVkTGluZSAmJiAoIWVuZHNXaXRoKGFjdHVhbExpbmUsICcsJykgfHwgYWN0dWFsTGluZS5zbGljZSgwLCAtMSkgIT09IGV4cGVjdGVkTGluZSk7IC8vIElmIHRoZSBleHBlY3RlZCBsaW5lIGhhcyBhIHRyYWlsaW5nIGNvbW1hIGJ1dCBpcyBvdGhlcndpc2UgaWRlbnRpY2FsLFxuICAgICAgLy8gYWRkIGEgY29tbWEgYXQgdGhlIGVuZCBvZiB0aGUgYWN0dWFsIGxpbmUuIE90aGVyd2lzZSB0aGUgb3V0cHV0IGNvdWxkXG4gICAgICAvLyBsb29rIHdlaXJkIGFzIGluOlxuICAgICAgLy9cbiAgICAgIC8vICAgW1xuICAgICAgLy8gICAgIDEgICAgICAgICAvLyBObyBjb21tYSBhdCB0aGUgZW5kIVxuICAgICAgLy8gKyAgIDJcbiAgICAgIC8vICAgXVxuICAgICAgLy9cblxuICAgICAgaWYgKGRpdmVyZ2luZ0xpbmVzICYmIGVuZHNXaXRoKGV4cGVjdGVkTGluZSwgJywnKSAmJiBleHBlY3RlZExpbmUuc2xpY2UoMCwgLTEpID09PSBhY3R1YWxMaW5lKSB7XG4gICAgICAgIGRpdmVyZ2luZ0xpbmVzID0gZmFsc2U7XG4gICAgICAgIGFjdHVhbExpbmUgKz0gJywnO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGl2ZXJnaW5nTGluZXMpIHtcbiAgICAgICAgLy8gSWYgdGhlIGxhc3QgZGl2ZXJnaW5nIGxpbmUgaXMgbW9yZSB0aGFuIG9uZSBsaW5lIGFib3ZlIGFuZCB0aGVcbiAgICAgICAgLy8gY3VycmVudCBsaW5lIGlzIGF0IGxlYXN0IGxpbmUgdGhyZWUsIGFkZCBzb21lIG9mIHRoZSBmb3JtZXIgbGluZXMgYW5kXG4gICAgICAgIC8vIGFsc28gYWRkIGRvdHMgdG8gaW5kaWNhdGUgc2tpcHBlZCBlbnRyaWVzLlxuICAgICAgICBpZiAoY3VyID4gMSAmJiBpID4gMikge1xuICAgICAgICAgIGlmIChjdXIgPiA0KSB7XG4gICAgICAgICAgICByZXMgKz0gXCJcXG5cIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcbiAgICAgICAgICAgIHNraXBwZWQgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY3VyID4gMykge1xuICAgICAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoYWN0dWFsTGluZXNbaSAtIDJdKTtcbiAgICAgICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmVzW2kgLSAxXSk7XG4gICAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICAgIH0gLy8gTWFyayB0aGUgY3VycmVudCBsaW5lIGFzIHRoZSBsYXN0IGRpdmVyZ2luZyBvbmUuXG5cblxuICAgICAgICBsYXN0UG9zID0gaTsgLy8gQWRkIHRoZSBhY3R1YWwgbGluZSB0byB0aGUgcmVzdWx0IGFuZCBjYWNoZSB0aGUgZXhwZWN0ZWQgZGl2ZXJnaW5nXG4gICAgICAgIC8vIGxpbmUgc28gY29uc2VjdXRpdmUgZGl2ZXJnaW5nIGxpbmVzIHNob3cgdXAgYXMgKysrLS0tIGFuZCBub3QgKy0rLSstLlxuXG4gICAgICAgIHJlcyArPSBcIlxcblwiLmNvbmNhdChncmVlbiwgXCIrXCIpLmNvbmNhdCh3aGl0ZSwgXCIgXCIpLmNvbmNhdChhY3R1YWxMaW5lKTtcbiAgICAgICAgb3RoZXIgKz0gXCJcXG5cIi5jb25jYXQocmVkLCBcIi1cIikuY29uY2F0KHdoaXRlLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkTGluZSk7XG4gICAgICAgIHByaW50ZWRMaW5lcyArPSAyOyAvLyBMaW5lcyBhcmUgaWRlbnRpY2FsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBZGQgYWxsIGNhY2hlZCBpbmZvcm1hdGlvbiB0byB0aGUgcmVzdWx0IGJlZm9yZSBhZGRpbmcgb3RoZXIgdGhpbmdzXG4gICAgICAgIC8vIGFuZCByZXNldCB0aGUgY2FjaGUuXG4gICAgICAgIHJlcyArPSBvdGhlcjtcbiAgICAgICAgb3RoZXIgPSAnJzsgLy8gSWYgdGhlIGxhc3QgZGl2ZXJnaW5nIGxpbmUgaXMgZXhhY3RseSBvbmUgbGluZSBhYm92ZSBvciBpZiBpdCBpcyB0aGVcbiAgICAgICAgLy8gdmVyeSBmaXJzdCBsaW5lLCBhZGQgdGhlIGxpbmUgdG8gdGhlIHJlc3VsdC5cblxuICAgICAgICBpZiAoY3VyID09PSAxIHx8IGkgPT09IDApIHtcbiAgICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChhY3R1YWxMaW5lKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gSW5zcGVjdGVkIG9iamVjdCB0byBiaWcgKFNob3cgfjIwIHJvd3MgbWF4KVxuXG5cbiAgICBpZiAocHJpbnRlZExpbmVzID4gMjAgJiYgaSA8IG1heExpbmVzIC0gMikge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KG1zZykuY29uY2F0KHNraXBwZWRNc2csIFwiXFxuXCIpLmNvbmNhdChyZXMsIFwiXFxuXCIpLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpLmNvbmNhdChvdGhlciwgXCJcXG5cIikgKyBcIlwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdChtc2cpLmNvbmNhdChza2lwcGVkID8gc2tpcHBlZE1zZyA6ICcnLCBcIlxcblwiKS5jb25jYXQocmVzKS5jb25jYXQob3RoZXIpLmNvbmNhdChlbmQpLmNvbmNhdChpbmRpY2F0b3IpO1xufVxuXG52YXIgQXNzZXJ0aW9uRXJyb3IgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9FcnJvcikge1xuICBfaW5oZXJpdHMoQXNzZXJ0aW9uRXJyb3IsIF9FcnJvcik7XG5cbiAgZnVuY3Rpb24gQXNzZXJ0aW9uRXJyb3Iob3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBc3NlcnRpb25FcnJvcik7XG5cbiAgICBpZiAoX3R5cGVvZihvcHRpb25zKSAhPT0gJ29iamVjdCcgfHwgb3B0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdvcHRpb25zJywgJ09iamVjdCcsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBtZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlLFxuICAgICAgICBvcGVyYXRvciA9IG9wdGlvbnMub3BlcmF0b3IsXG4gICAgICAgIHN0YWNrU3RhcnRGbiA9IG9wdGlvbnMuc3RhY2tTdGFydEZuO1xuICAgIHZhciBhY3R1YWwgPSBvcHRpb25zLmFjdHVhbCxcbiAgICAgICAgZXhwZWN0ZWQgPSBvcHRpb25zLmV4cGVjdGVkO1xuICAgIHZhciBsaW1pdCA9IEVycm9yLnN0YWNrVHJhY2VMaW1pdDtcbiAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSAwO1xuXG4gICAgaWYgKG1lc3NhZ2UgIT0gbnVsbCkge1xuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXNzZXJ0aW9uRXJyb3IpLmNhbGwodGhpcywgU3RyaW5nKG1lc3NhZ2UpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLnN0ZGVyciAmJiBwcm9jZXNzLnN0ZGVyci5pc1RUWSkge1xuICAgICAgICAvLyBSZXNldCBvbiBlYWNoIGNhbGwgdG8gbWFrZSBzdXJlIHdlIGhhbmRsZSBkeW5hbWljYWxseSBzZXQgZW52aXJvbm1lbnRcbiAgICAgICAgLy8gdmFyaWFibGVzIGNvcnJlY3QuXG4gICAgICAgIGlmIChwcm9jZXNzLnN0ZGVyciAmJiBwcm9jZXNzLnN0ZGVyci5nZXRDb2xvckRlcHRoICYmIHByb2Nlc3Muc3RkZXJyLmdldENvbG9yRGVwdGgoKSAhPT0gMSkge1xuICAgICAgICAgIGJsdWUgPSBcIlxceDFCWzM0bVwiO1xuICAgICAgICAgIGdyZWVuID0gXCJcXHgxQlszMm1cIjtcbiAgICAgICAgICB3aGl0ZSA9IFwiXFx4MUJbMzltXCI7XG4gICAgICAgICAgcmVkID0gXCJcXHgxQlszMW1cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBibHVlID0gJyc7XG4gICAgICAgICAgZ3JlZW4gPSAnJztcbiAgICAgICAgICB3aGl0ZSA9ICcnO1xuICAgICAgICAgIHJlZCA9ICcnO1xuICAgICAgICB9XG4gICAgICB9IC8vIFByZXZlbnQgdGhlIGVycm9yIHN0YWNrIGZyb20gYmVpbmcgdmlzaWJsZSBieSBkdXBsaWNhdGluZyB0aGUgZXJyb3JcbiAgICAgIC8vIGluIGEgdmVyeSBjbG9zZSB3YXkgdG8gdGhlIG9yaWdpbmFsIGluIGNhc2UgYm90aCBzaWRlcyBhcmUgYWN0dWFsbHlcbiAgICAgIC8vIGluc3RhbmNlcyBvZiBFcnJvci5cblxuXG4gICAgICBpZiAoX3R5cGVvZihhY3R1YWwpID09PSAnb2JqZWN0JyAmJiBhY3R1YWwgIT09IG51bGwgJiYgX3R5cGVvZihleHBlY3RlZCkgPT09ICdvYmplY3QnICYmIGV4cGVjdGVkICE9PSBudWxsICYmICdzdGFjaycgaW4gYWN0dWFsICYmIGFjdHVhbCBpbnN0YW5jZW9mIEVycm9yICYmICdzdGFjaycgaW4gZXhwZWN0ZWQgJiYgZXhwZWN0ZWQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBhY3R1YWwgPSBjb3B5RXJyb3IoYWN0dWFsKTtcbiAgICAgICAgZXhwZWN0ZWQgPSBjb3B5RXJyb3IoZXhwZWN0ZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3BlcmF0b3IgPT09ICdkZWVwU3RyaWN0RXF1YWwnIHx8IG9wZXJhdG9yID09PSAnc3RyaWN0RXF1YWwnKSB7XG4gICAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFzc2VydGlvbkVycm9yKS5jYWxsKHRoaXMsIGNyZWF0ZUVyckRpZmYoYWN0dWFsLCBleHBlY3RlZCwgb3BlcmF0b3IpKSk7XG4gICAgICB9IGVsc2UgaWYgKG9wZXJhdG9yID09PSAnbm90RGVlcFN0cmljdEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ25vdFN0cmljdEVxdWFsJykge1xuICAgICAgICAvLyBJbiBjYXNlIHRoZSBvYmplY3RzIGFyZSBlcXVhbCBidXQgdGhlIG9wZXJhdG9yIHJlcXVpcmVzIHVuZXF1YWwsIHNob3dcbiAgICAgICAgLy8gdGhlIGZpcnN0IG9iamVjdCBhbmQgc2F5IEEgZXF1YWxzIEJcbiAgICAgICAgdmFyIGJhc2UgPSBrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl07XG4gICAgICAgIHZhciByZXMgPSBpbnNwZWN0VmFsdWUoYWN0dWFsKS5zcGxpdCgnXFxuJyk7IC8vIEluIGNhc2UgXCJhY3R1YWxcIiBpcyBhbiBvYmplY3QsIGl0IHNob3VsZCBub3QgYmUgcmVmZXJlbmNlIGVxdWFsLlxuXG4gICAgICAgIGlmIChvcGVyYXRvciA9PT0gJ25vdFN0cmljdEVxdWFsJyAmJiBfdHlwZW9mKGFjdHVhbCkgPT09ICdvYmplY3QnICYmIGFjdHVhbCAhPT0gbnVsbCkge1xuICAgICAgICAgIGJhc2UgPSBrUmVhZGFibGVPcGVyYXRvci5ub3RTdHJpY3RFcXVhbE9iamVjdDtcbiAgICAgICAgfSAvLyBPbmx5IHJlbW92ZSBsaW5lcyBpbiBjYXNlIGl0IG1ha2VzIHNlbnNlIHRvIGNvbGxhcHNlIHRob3NlLlxuICAgICAgICAvLyBUT0RPOiBBY2NlcHQgZW52IHRvIGFsd2F5cyBzaG93IHRoZSBmdWxsIGVycm9yLlxuXG5cbiAgICAgICAgaWYgKHJlcy5sZW5ndGggPiAzMCkge1xuICAgICAgICAgIHJlc1syNl0gPSBcIlwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuXG4gICAgICAgICAgd2hpbGUgKHJlcy5sZW5ndGggPiAyNykge1xuICAgICAgICAgICAgcmVzLnBvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBPbmx5IHByaW50IGEgc2luZ2xlIGlucHV0LlxuXG5cbiAgICAgICAgaWYgKHJlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBc3NlcnRpb25FcnJvcikuY2FsbCh0aGlzLCBcIlwiLmNvbmNhdChiYXNlLCBcIiBcIikuY29uY2F0KHJlc1swXSkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBc3NlcnRpb25FcnJvcikuY2FsbCh0aGlzLCBcIlwiLmNvbmNhdChiYXNlLCBcIlxcblxcblwiKS5jb25jYXQocmVzLmpvaW4oJ1xcbicpLCBcIlxcblwiKSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3JlcyA9IGluc3BlY3RWYWx1ZShhY3R1YWwpO1xuXG4gICAgICAgIHZhciBvdGhlciA9ICcnO1xuICAgICAgICB2YXIga25vd25PcGVyYXRvcnMgPSBrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl07XG5cbiAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnbm90RGVlcEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ25vdEVxdWFsJykge1xuICAgICAgICAgIF9yZXMgPSBcIlwiLmNvbmNhdChrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl0sIFwiXFxuXFxuXCIpLmNvbmNhdChfcmVzKTtcblxuICAgICAgICAgIGlmIChfcmVzLmxlbmd0aCA+IDEwMjQpIHtcbiAgICAgICAgICAgIF9yZXMgPSBcIlwiLmNvbmNhdChfcmVzLnNsaWNlKDAsIDEwMjEpLCBcIi4uLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3RoZXIgPSBcIlwiLmNvbmNhdChpbnNwZWN0VmFsdWUoZXhwZWN0ZWQpKTtcblxuICAgICAgICAgIGlmIChfcmVzLmxlbmd0aCA+IDUxMikge1xuICAgICAgICAgICAgX3JlcyA9IFwiXCIuY29uY2F0KF9yZXMuc2xpY2UoMCwgNTA5KSwgXCIuLi5cIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG90aGVyLmxlbmd0aCA+IDUxMikge1xuICAgICAgICAgICAgb3RoZXIgPSBcIlwiLmNvbmNhdChvdGhlci5zbGljZSgwLCA1MDkpLCBcIi4uLlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3BlcmF0b3IgPT09ICdkZWVwRXF1YWwnIHx8IG9wZXJhdG9yID09PSAnZXF1YWwnKSB7XG4gICAgICAgICAgICBfcmVzID0gXCJcIi5jb25jYXQoa25vd25PcGVyYXRvcnMsIFwiXFxuXFxuXCIpLmNvbmNhdChfcmVzLCBcIlxcblxcbnNob3VsZCBlcXVhbFxcblxcblwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3RoZXIgPSBcIiBcIi5jb25jYXQob3BlcmF0b3IsIFwiIFwiKS5jb25jYXQob3RoZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFzc2VydGlvbkVycm9yKS5jYWxsKHRoaXMsIFwiXCIuY29uY2F0KF9yZXMpLmNvbmNhdChvdGhlcikpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSBsaW1pdDtcbiAgICBfdGhpcy5nZW5lcmF0ZWRNZXNzYWdlID0gIW1lc3NhZ2U7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAnbmFtZScsIHtcbiAgICAgIHZhbHVlOiAnQXNzZXJ0aW9uRXJyb3IgW0VSUl9BU1NFUlRJT05dJyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBfdGhpcy5jb2RlID0gJ0VSUl9BU1NFUlRJT04nO1xuICAgIF90aGlzLmFjdHVhbCA9IGFjdHVhbDtcbiAgICBfdGhpcy5leHBlY3RlZCA9IGV4cGVjdGVkO1xuICAgIF90aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG5cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIHN0YWNrU3RhcnRGbik7XG4gICAgfSAvLyBDcmVhdGUgZXJyb3IgbWVzc2FnZSBpbmNsdWRpbmcgdGhlIGVycm9yIGNvZGUgaW4gdGhlIG5hbWUuXG5cblxuICAgIF90aGlzLnN0YWNrOyAvLyBSZXNldCB0aGUgbmFtZS5cblxuICAgIF90aGlzLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQXNzZXJ0aW9uRXJyb3IsIFt7XG4gICAga2V5OiBcInRvU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCIgW1wiKS5jb25jYXQodGhpcy5jb2RlLCBcIl06IFwiKS5jb25jYXQodGhpcy5tZXNzYWdlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IGluc3BlY3QuY3VzdG9tLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZShyZWN1cnNlVGltZXMsIGN0eCkge1xuICAgICAgLy8gVGhpcyBsaW1pdHMgdGhlIGBhY3R1YWxgIGFuZCBgZXhwZWN0ZWRgIHByb3BlcnR5IGRlZmF1bHQgaW5zcGVjdGlvbiB0b1xuICAgICAgLy8gdGhlIG1pbmltdW0gZGVwdGguIE90aGVyd2lzZSB0aG9zZSB2YWx1ZXMgd291bGQgYmUgdG9vIHZlcmJvc2UgY29tcGFyZWRcbiAgICAgIC8vIHRvIHRoZSBhY3R1YWwgZXJyb3IgbWVzc2FnZSB3aGljaCBjb250YWlucyBhIGNvbWJpbmVkIHZpZXcgb2YgdGhlc2UgdHdvXG4gICAgICAvLyBpbnB1dCB2YWx1ZXMuXG4gICAgICByZXR1cm4gaW5zcGVjdCh0aGlzLCBfb2JqZWN0U3ByZWFkKHt9LCBjdHgsIHtcbiAgICAgICAgY3VzdG9tSW5zcGVjdDogZmFsc2UsXG4gICAgICAgIGRlcHRoOiAwXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFzc2VydGlvbkVycm9yO1xufShfd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXNzZXJ0aW9uRXJyb3I7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMzQyOlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIEN1cnJlbnRseSBpbiBzeW5jIHdpdGggTm9kZS5qcyBsaWIvaW50ZXJuYWwvZXJyb3JzLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzNiMDQ0OTYyYzQ4ZmUzMTM5MDU4NzdhOTZiNWQwODk0YTU0MDRmNmZcblxuLyogZXNsaW50IG5vZGUtY29yZS9kb2N1bWVudGVkLWVycm9yczogXCJlcnJvclwiICovXG5cbi8qIGVzbGludCBub2RlLWNvcmUvYWxwaGFiZXRpemUtZXJyb3JzOiBcImVycm9yXCIgKi9cblxuLyogZXNsaW50IG5vZGUtY29yZS9wcmVmZXItdXRpbC1mb3JtYXQtZXJyb3JzOiBcImVycm9yXCIgKi9cbiAvLyBUaGUgd2hvbGUgcG9pbnQgYmVoaW5kIHRoaXMgaW50ZXJuYWwgbW9kdWxlIGlzIHRvIGFsbG93IE5vZGUuanMgdG8gbm9cbi8vIGxvbmdlciBiZSBmb3JjZWQgdG8gdHJlYXQgZXZlcnkgZXJyb3IgbWVzc2FnZSBjaGFuZ2UgYXMgYSBzZW12ZXItbWFqb3Jcbi8vIGNoYW5nZS4gVGhlIE5vZGVFcnJvciBjbGFzc2VzIGhlcmUgYWxsIGV4cG9zZSBhIGBjb2RlYCBwcm9wZXJ0eSB3aG9zZVxuLy8gdmFsdWUgc3RhdGljYWxseSBhbmQgcGVybWFuZW50bHkgaWRlbnRpZmllcyB0aGUgZXJyb3IuIFdoaWxlIHRoZSBlcnJvclxuLy8gbWVzc2FnZSBtYXkgY2hhbmdlLCB0aGUgY29kZSBzaG91bGQgbm90LlxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbnZhciBjb2RlcyA9IHt9OyAvLyBMYXp5IGxvYWRlZFxuXG52YXIgYXNzZXJ0O1xudmFyIHV0aWw7XG5cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yVHlwZShjb2RlLCBtZXNzYWdlLCBCYXNlKSB7XG4gIGlmICghQmFzZSkge1xuICAgIEJhc2UgPSBFcnJvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB9XG4gIH1cblxuICB2YXIgTm9kZUVycm9yID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0Jhc2UpIHtcbiAgICBfaW5oZXJpdHMoTm9kZUVycm9yLCBfQmFzZSk7XG5cbiAgICBmdW5jdGlvbiBOb2RlRXJyb3IoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9kZUVycm9yKTtcblxuICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoTm9kZUVycm9yKS5jYWxsKHRoaXMsIGdldE1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMykpKTtcbiAgICAgIF90aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHJldHVybiBOb2RlRXJyb3I7XG4gIH0oQmFzZSk7XG5cbiAgY29kZXNbY29kZV0gPSBOb2RlRXJyb3I7XG59IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iL3YxMC44LjAvbGliL2ludGVybmFsL2Vycm9ycy5qc1xuXG5cbmZ1bmN0aW9uIG9uZU9mKGV4cGVjdGVkLCB0aGluZykge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3RlZCkpIHtcbiAgICB2YXIgbGVuID0gZXhwZWN0ZWQubGVuZ3RoO1xuICAgIGV4cGVjdGVkID0gZXhwZWN0ZWQubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGkpO1xuICAgIH0pO1xuXG4gICAgaWYgKGxlbiA+IDIpIHtcbiAgICAgIHJldHVybiBcIm9uZSBvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWQuc2xpY2UoMCwgbGVuIC0gMSkuam9pbignLCAnKSwgXCIsIG9yIFwiKSArIGV4cGVjdGVkW2xlbiAtIDFdO1xuICAgIH0gZWxzZSBpZiAobGVuID09PSAyKSB7XG4gICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkWzBdLCBcIiBvciBcIikuY29uY2F0KGV4cGVjdGVkWzFdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwib2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkWzBdKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwib2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KFN0cmluZyhleHBlY3RlZCkpO1xuICB9XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9zdGFydHNXaXRoXG5cblxuZnVuY3Rpb24gc3RhcnRzV2l0aChzdHIsIHNlYXJjaCwgcG9zKSB7XG4gIHJldHVybiBzdHIuc3Vic3RyKCFwb3MgfHwgcG9zIDwgMCA/IDAgOiArcG9zLCBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvZW5kc1dpdGhcblxuXG5mdW5jdGlvbiBlbmRzV2l0aChzdHIsIHNlYXJjaCwgdGhpc19sZW4pIHtcbiAgaWYgKHRoaXNfbGVuID09PSB1bmRlZmluZWQgfHwgdGhpc19sZW4gPiBzdHIubGVuZ3RoKSB7XG4gICAgdGhpc19sZW4gPSBzdHIubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIHN0ci5zdWJzdHJpbmcodGhpc19sZW4gLSBzZWFyY2gubGVuZ3RoLCB0aGlzX2xlbikgPT09IHNlYXJjaDtcbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2luY2x1ZGVzXG5cblxuZnVuY3Rpb24gaW5jbHVkZXMoc3RyLCBzZWFyY2gsIHN0YXJ0KSB7XG4gIGlmICh0eXBlb2Ygc3RhcnQgIT09ICdudW1iZXInKSB7XG4gICAgc3RhcnQgPSAwO1xuICB9XG5cbiAgaWYgKHN0YXJ0ICsgc2VhcmNoLmxlbmd0aCA+IHN0ci5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0ci5pbmRleE9mKHNlYXJjaCwgc3RhcnQpICE9PSAtMTtcbiAgfVxufVxuXG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9BTUJJR1VPVVNfQVJHVU1FTlQnLCAnVGhlIFwiJXNcIiBhcmd1bWVudCBpcyBhbWJpZ3VvdXMuICVzJywgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLCBmdW5jdGlvbiAobmFtZSwgZXhwZWN0ZWQsIGFjdHVhbCkge1xuICBpZiAoYXNzZXJ0ID09PSB1bmRlZmluZWQpIGFzc2VydCA9IF9fd2VicGFja19yZXF1aXJlX18oNjA5Myk7XG4gIGFzc2VydCh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycsIFwiJ25hbWUnIG11c3QgYmUgYSBzdHJpbmdcIik7IC8vIGRldGVybWluZXI6ICdtdXN0IGJlJyBvciAnbXVzdCBub3QgYmUnXG5cbiAgdmFyIGRldGVybWluZXI7XG5cbiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycgJiYgc3RhcnRzV2l0aChleHBlY3RlZCwgJ25vdCAnKSkge1xuICAgIGRldGVybWluZXIgPSAnbXVzdCBub3QgYmUnO1xuICAgIGV4cGVjdGVkID0gZXhwZWN0ZWQucmVwbGFjZSgvXm5vdCAvLCAnJyk7XG4gIH0gZWxzZSB7XG4gICAgZGV0ZXJtaW5lciA9ICdtdXN0IGJlJztcbiAgfVxuXG4gIHZhciBtc2c7XG5cbiAgaWYgKGVuZHNXaXRoKG5hbWUsICcgYXJndW1lbnQnKSkge1xuICAgIC8vIEZvciBjYXNlcyBsaWtlICdmaXJzdCBhcmd1bWVudCdcbiAgICBtc2cgPSBcIlRoZSBcIi5jb25jYXQobmFtZSwgXCIgXCIpLmNvbmNhdChkZXRlcm1pbmVyLCBcIiBcIikuY29uY2F0KG9uZU9mKGV4cGVjdGVkLCAndHlwZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdHlwZSA9IGluY2x1ZGVzKG5hbWUsICcuJykgPyAncHJvcGVydHknIDogJ2FyZ3VtZW50JztcbiAgICBtc2cgPSBcIlRoZSBcXFwiXCIuY29uY2F0KG5hbWUsIFwiXFxcIiBcIikuY29uY2F0KHR5cGUsIFwiIFwiKS5jb25jYXQoZGV0ZXJtaW5lciwgXCIgXCIpLmNvbmNhdChvbmVPZihleHBlY3RlZCwgJ3R5cGUnKSk7XG4gIH0gLy8gVE9ETyhCcmlkZ2VBUik6IEltcHJvdmUgdGhlIG91dHB1dCBieSBzaG93aW5nIGBudWxsYCBhbmQgc2ltaWxhci5cblxuXG4gIG1zZyArPSBcIi4gUmVjZWl2ZWQgdHlwZSBcIi5jb25jYXQoX3R5cGVvZihhY3R1YWwpKTtcbiAgcmV0dXJuIG1zZztcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9JTlZBTElEX0FSR19WQUxVRScsIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICB2YXIgcmVhc29uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnaXMgaW52YWxpZCc7XG4gIGlmICh1dGlsID09PSB1bmRlZmluZWQpIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyMDgpO1xuICB2YXIgaW5zcGVjdGVkID0gdXRpbC5pbnNwZWN0KHZhbHVlKTtcblxuICBpZiAoaW5zcGVjdGVkLmxlbmd0aCA+IDEyOCkge1xuICAgIGluc3BlY3RlZCA9IFwiXCIuY29uY2F0KGluc3BlY3RlZC5zbGljZSgwLCAxMjgpLCBcIi4uLlwiKTtcbiAgfVxuXG4gIHJldHVybiBcIlRoZSBhcmd1bWVudCAnXCIuY29uY2F0KG5hbWUsIFwiJyBcIikuY29uY2F0KHJlYXNvbiwgXCIuIFJlY2VpdmVkIFwiKS5jb25jYXQoaW5zcGVjdGVkKTtcbn0sIFR5cGVFcnJvciwgUmFuZ2VFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9JTlZBTElEX1JFVFVSTl9WQUxVRScsIGZ1bmN0aW9uIChpbnB1dCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR5cGU7XG5cbiAgaWYgKHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICB0eXBlID0gXCJpbnN0YW5jZSBvZiBcIi5jb25jYXQodmFsdWUuY29uc3RydWN0b3IubmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgdHlwZSA9IFwidHlwZSBcIi5jb25jYXQoX3R5cGVvZih2YWx1ZSkpO1xuICB9XG5cbiAgcmV0dXJuIFwiRXhwZWN0ZWQgXCIuY29uY2F0KGlucHV0LCBcIiB0byBiZSByZXR1cm5lZCBmcm9tIHRoZSBcXFwiXCIpLmNvbmNhdChuYW1lLCBcIlxcXCJcIikgKyBcIiBmdW5jdGlvbiBidXQgZ290IFwiLmNvbmNhdCh0eXBlLCBcIi5cIik7XG59LCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfTUlTU0lOR19BUkdTJywgZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGFzc2VydCA9PT0gdW5kZWZpbmVkKSBhc3NlcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwOTMpO1xuICBhc3NlcnQoYXJncy5sZW5ndGggPiAwLCAnQXQgbGVhc3Qgb25lIGFyZyBuZWVkcyB0byBiZSBzcGVjaWZpZWQnKTtcbiAgdmFyIG1zZyA9ICdUaGUgJztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICBhcmdzID0gYXJncy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KGEsIFwiXFxcIlwiKTtcbiAgfSk7XG5cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDE6XG4gICAgICBtc2cgKz0gXCJcIi5jb25jYXQoYXJnc1swXSwgXCIgYXJndW1lbnRcIik7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgMjpcbiAgICAgIG1zZyArPSBcIlwiLmNvbmNhdChhcmdzWzBdLCBcIiBhbmQgXCIpLmNvbmNhdChhcmdzWzFdLCBcIiBhcmd1bWVudHNcIik7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBtc2cgKz0gYXJncy5zbGljZSgwLCBsZW4gLSAxKS5qb2luKCcsICcpO1xuICAgICAgbXNnICs9IFwiLCBhbmQgXCIuY29uY2F0KGFyZ3NbbGVuIC0gMV0sIFwiIGFyZ3VtZW50c1wiKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KG1zZywgXCIgbXVzdCBiZSBzcGVjaWZpZWRcIik7XG59LCBUeXBlRXJyb3IpO1xubW9kdWxlLmV4cG9ydHMuY29kZXMgPSBjb2RlcztcblxuLyoqKi8gfSksXG5cbi8qKiovIDU2NTY6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9pbnRlcm5hbC91dGlsL2NvbXBhcmlzb25zLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzExMmNjN2MyNzU1MTI1NGFhMmIxNzA5OGZiNzc0ODY3ZjA1ZWQwZDlcblxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxudmFyIHJlZ2V4RmxhZ3NTdXBwb3J0ZWQgPSAvYS9nLmZsYWdzICE9PSB1bmRlZmluZWQ7XG5cbnZhciBhcnJheUZyb21TZXQgPSBmdW5jdGlvbiBhcnJheUZyb21TZXQoc2V0KSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBzZXQuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gYXJyYXkucHVzaCh2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4gYXJyYXk7XG59O1xuXG52YXIgYXJyYXlGcm9tTWFwID0gZnVuY3Rpb24gYXJyYXlGcm9tTWFwKG1hcCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgbWFwLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICByZXR1cm4gYXJyYXkucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9KTtcbiAgcmV0dXJuIGFycmF5O1xufTtcblxudmFyIG9iamVjdElzID0gT2JqZWN0LmlzID8gT2JqZWN0LmlzIDogX193ZWJwYWNrX3JlcXVpcmVfXyg1OTY4KTtcbnZhciBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFtdO1xufTtcbnZhciBudW1iZXJJc05hTiA9IE51bWJlci5pc05hTiA/IE51bWJlci5pc05hTiA6IF9fd2VicGFja19yZXF1aXJlX18oNzgzOCk7XG5cbmZ1bmN0aW9uIHVuY3VycnlUaGlzKGYpIHtcbiAgcmV0dXJuIGYuY2FsbC5iaW5kKGYpO1xufVxuXG52YXIgaGFzT3duUHJvcGVydHkgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUpO1xudmFyIG9iamVjdFRvU3RyaW5nID0gdW5jdXJyeVRoaXMoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyk7XG5cbnZhciBfcmVxdWlyZSR0eXBlcyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDkyMDgpLnR5cGVzKSxcbiAgICBpc0FueUFycmF5QnVmZmVyID0gX3JlcXVpcmUkdHlwZXMuaXNBbnlBcnJheUJ1ZmZlcixcbiAgICBpc0FycmF5QnVmZmVyVmlldyA9IF9yZXF1aXJlJHR5cGVzLmlzQXJyYXlCdWZmZXJWaWV3LFxuICAgIGlzRGF0ZSA9IF9yZXF1aXJlJHR5cGVzLmlzRGF0ZSxcbiAgICBpc01hcCA9IF9yZXF1aXJlJHR5cGVzLmlzTWFwLFxuICAgIGlzUmVnRXhwID0gX3JlcXVpcmUkdHlwZXMuaXNSZWdFeHAsXG4gICAgaXNTZXQgPSBfcmVxdWlyZSR0eXBlcy5pc1NldCxcbiAgICBpc05hdGl2ZUVycm9yID0gX3JlcXVpcmUkdHlwZXMuaXNOYXRpdmVFcnJvcixcbiAgICBpc0JveGVkUHJpbWl0aXZlID0gX3JlcXVpcmUkdHlwZXMuaXNCb3hlZFByaW1pdGl2ZSxcbiAgICBpc051bWJlck9iamVjdCA9IF9yZXF1aXJlJHR5cGVzLmlzTnVtYmVyT2JqZWN0LFxuICAgIGlzU3RyaW5nT2JqZWN0ID0gX3JlcXVpcmUkdHlwZXMuaXNTdHJpbmdPYmplY3QsXG4gICAgaXNCb29sZWFuT2JqZWN0ID0gX3JlcXVpcmUkdHlwZXMuaXNCb29sZWFuT2JqZWN0LFxuICAgIGlzQmlnSW50T2JqZWN0ID0gX3JlcXVpcmUkdHlwZXMuaXNCaWdJbnRPYmplY3QsXG4gICAgaXNTeW1ib2xPYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc1N5bWJvbE9iamVjdCxcbiAgICBpc0Zsb2F0MzJBcnJheSA9IF9yZXF1aXJlJHR5cGVzLmlzRmxvYXQzMkFycmF5LFxuICAgIGlzRmxvYXQ2NEFycmF5ID0gX3JlcXVpcmUkdHlwZXMuaXNGbG9hdDY0QXJyYXk7XG5cbmZ1bmN0aW9uIGlzTm9uSW5kZXgoa2V5KSB7XG4gIGlmIChrZXkubGVuZ3RoID09PSAwIHx8IGtleS5sZW5ndGggPiAxMCkgcmV0dXJuIHRydWU7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY29kZSA9IGtleS5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IDU3KSByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBUaGUgbWF4aW11bSBzaXplIGZvciBhbiBhcnJheSBpcyAyICoqIDMyIC0xLlxuXG5cbiAgcmV0dXJuIGtleS5sZW5ndGggPT09IDEwICYmIGtleSA+PSBNYXRoLnBvdygyLCAzMik7XG59XG5cbmZ1bmN0aW9uIGdldE93bk5vbkluZGV4UHJvcGVydGllcyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpLmZpbHRlcihpc05vbkluZGV4KS5jb25jYXQob2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzKHZhbHVlKS5maWx0ZXIoT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5iaW5kKHZhbHVlKSkpO1xufSAvLyBUYWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2Jsb2IvNjgwZTllNWU0ODhmMjJhYWMyNzU5OWE1N2RjODQ0YTYzMTU5MjhkZC9pbmRleC5qc1xuLy8gb3JpZ2luYWwgbm90aWNlOlxuXG4vKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG5cblxuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICB2YXIgeCA9IGEubGVuZ3RoO1xuICB2YXIgeSA9IGIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldO1xuICAgICAgeSA9IGJbaV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICBpZiAoeSA8IHgpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG52YXIgT05MWV9FTlVNRVJBQkxFID0gdW5kZWZpbmVkO1xudmFyIGtTdHJpY3QgPSB0cnVlO1xudmFyIGtMb29zZSA9IGZhbHNlO1xudmFyIGtOb0l0ZXJhdG9yID0gMDtcbnZhciBrSXNBcnJheSA9IDE7XG52YXIga0lzU2V0ID0gMjtcbnZhciBrSXNNYXAgPSAzOyAvLyBDaGVjayBpZiB0aGV5IGhhdmUgdGhlIHNhbWUgc291cmNlIGFuZCBmbGFnc1xuXG5mdW5jdGlvbiBhcmVTaW1pbGFyUmVnRXhwcyhhLCBiKSB7XG4gIHJldHVybiByZWdleEZsYWdzU3VwcG9ydGVkID8gYS5zb3VyY2UgPT09IGIuc291cmNlICYmIGEuZmxhZ3MgPT09IGIuZmxhZ3MgOiBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSkgPT09IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTtcbn1cblxuZnVuY3Rpb24gYXJlU2ltaWxhckZsb2F0QXJyYXlzKGEsIGIpIHtcbiAgaWYgKGEuYnl0ZUxlbmd0aCAhPT0gYi5ieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgYS5ieXRlTGVuZ3RoOyBvZmZzZXQrKykge1xuICAgIGlmIChhW29mZnNldF0gIT09IGJbb2Zmc2V0XSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBhcmVTaW1pbGFyVHlwZWRBcnJheXMoYSwgYikge1xuICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY29tcGFyZShuZXcgVWludDhBcnJheShhLmJ1ZmZlciwgYS5ieXRlT2Zmc2V0LCBhLmJ5dGVMZW5ndGgpLCBuZXcgVWludDhBcnJheShiLmJ1ZmZlciwgYi5ieXRlT2Zmc2V0LCBiLmJ5dGVMZW5ndGgpKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gYXJlRXF1YWxBcnJheUJ1ZmZlcnMoYnVmMSwgYnVmMikge1xuICByZXR1cm4gYnVmMS5ieXRlTGVuZ3RoID09PSBidWYyLmJ5dGVMZW5ndGggJiYgY29tcGFyZShuZXcgVWludDhBcnJheShidWYxKSwgbmV3IFVpbnQ4QXJyYXkoYnVmMikpID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc0VxdWFsQm94ZWRQcmltaXRpdmUodmFsMSwgdmFsMikge1xuICBpZiAoaXNOdW1iZXJPYmplY3QodmFsMSkpIHtcbiAgICByZXR1cm4gaXNOdW1iZXJPYmplY3QodmFsMikgJiYgb2JqZWN0SXMoTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMSksIE51bWJlci5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDIpKTtcbiAgfVxuXG4gIGlmIChpc1N0cmluZ09iamVjdCh2YWwxKSkge1xuICAgIHJldHVybiBpc1N0cmluZ09iamVjdCh2YWwyKSAmJiBTdHJpbmcucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSA9PT0gU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMik7XG4gIH1cblxuICBpZiAoaXNCb29sZWFuT2JqZWN0KHZhbDEpKSB7XG4gICAgcmV0dXJuIGlzQm9vbGVhbk9iamVjdCh2YWwyKSAmJiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMSkgPT09IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKTtcbiAgfVxuXG4gIGlmIChpc0JpZ0ludE9iamVjdCh2YWwxKSkge1xuICAgIHJldHVybiBpc0JpZ0ludE9iamVjdCh2YWwyKSAmJiBCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSA9PT0gQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMik7XG4gIH1cblxuICByZXR1cm4gaXNTeW1ib2xPYmplY3QodmFsMikgJiYgU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMSkgPT09IFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDIpO1xufSAvLyBOb3RlczogVHlwZSB0YWdzIGFyZSBoaXN0b3JpY2FsIFtbQ2xhc3NdXSBwcm9wZXJ0aWVzIHRoYXQgY2FuIGJlIHNldCBieVxuLy8gRnVuY3Rpb25UZW1wbGF0ZTo6U2V0Q2xhc3NOYW1lKCkgaW4gQysrIG9yIFN5bWJvbC50b1N0cmluZ1RhZyBpbiBKU1xuLy8gYW5kIHJldHJpZXZlZCB1c2luZyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSBpbiBKU1xuLy8gU2VlIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbi8vIGZvciBhIGxpc3Qgb2YgdGFncyBwcmUtZGVmaW5lZCBpbiB0aGUgc3BlYy5cbi8vIFRoZXJlIGFyZSBzb21lIHVuc3BlY2lmaWVkIHRhZ3MgaW4gdGhlIHdpbGQgdG9vIChlLmcuIHR5cGVkIGFycmF5IHRhZ3MpLlxuLy8gU2luY2UgdGFncyBjYW4gYmUgYWx0ZXJlZCwgdGhleSBvbmx5IHNlcnZlIGZhc3QgZmFpbHVyZXNcbi8vXG4vLyBUeXBlZCBhcnJheXMgYW5kIGJ1ZmZlcnMgYXJlIGNoZWNrZWQgYnkgY29tcGFyaW5nIHRoZSBjb250ZW50IGluIHRoZWlyXG4vLyB1bmRlcmx5aW5nIEFycmF5QnVmZmVyLiBUaGlzIG9wdGltaXphdGlvbiByZXF1aXJlcyB0aGF0IGl0J3Ncbi8vIHJlYXNvbmFibGUgdG8gaW50ZXJwcmV0IHRoZWlyIHVuZGVybHlpbmcgbWVtb3J5IGluIHRoZSBzYW1lIHdheSxcbi8vIHdoaWNoIGlzIGNoZWNrZWQgYnkgY29tcGFyaW5nIHRoZWlyIHR5cGUgdGFncy5cbi8vIChlLmcuIGEgVWludDhBcnJheSBhbmQgYSBVaW50MTZBcnJheSB3aXRoIHRoZSBzYW1lIG1lbW9yeSBjb250ZW50XG4vLyBjb3VsZCBzdGlsbCBiZSBkaWZmZXJlbnQgYmVjYXVzZSB0aGV5IHdpbGwgYmUgaW50ZXJwcmV0ZWQgZGlmZmVyZW50bHkpLlxuLy9cbi8vIEZvciBzdHJpY3QgY29tcGFyaXNvbiwgb2JqZWN0cyBzaG91bGQgaGF2ZVxuLy8gYSkgVGhlIHNhbWUgYnVpbHQtaW4gdHlwZSB0YWdzXG4vLyBiKSBUaGUgc2FtZSBwcm90b3R5cGVzLlxuXG5cbmZ1bmN0aW9uIGlubmVyRGVlcEVxdWFsKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MpIHtcbiAgLy8gQWxsIGlkZW50aWNhbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGFzIGRldGVybWluZWQgYnkgPT09LlxuICBpZiAodmFsMSA9PT0gdmFsMikge1xuICAgIGlmICh2YWwxICE9PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gc3RyaWN0ID8gb2JqZWN0SXModmFsMSwgdmFsMikgOiB0cnVlO1xuICB9IC8vIENoZWNrIG1vcmUgY2xvc2VseSBpZiB2YWwxIGFuZCB2YWwyIGFyZSBlcXVhbC5cblxuXG4gIGlmIChzdHJpY3QpIHtcbiAgICBpZiAoX3R5cGVvZih2YWwxKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsMSA9PT0gJ251bWJlcicgJiYgbnVtYmVySXNOYU4odmFsMSkgJiYgbnVtYmVySXNOYU4odmFsMik7XG4gICAgfVxuXG4gICAgaWYgKF90eXBlb2YodmFsMikgIT09ICdvYmplY3QnIHx8IHZhbDEgPT09IG51bGwgfHwgdmFsMiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsMSkgIT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsMSA9PT0gbnVsbCB8fCBfdHlwZW9mKHZhbDEpICE9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHZhbDIgPT09IG51bGwgfHwgX3R5cGVvZih2YWwyKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgICAgICByZXR1cm4gdmFsMSA9PSB2YWwyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHZhbDIgPT09IG51bGwgfHwgX3R5cGVvZih2YWwyKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB2YXIgdmFsMVRhZyA9IG9iamVjdFRvU3RyaW5nKHZhbDEpO1xuICB2YXIgdmFsMlRhZyA9IG9iamVjdFRvU3RyaW5nKHZhbDIpO1xuXG4gIGlmICh2YWwxVGFnICE9PSB2YWwyVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsMSkpIHtcbiAgICAvLyBDaGVjayBmb3Igc3BhcnNlIGFycmF5cyBhbmQgZ2VuZXJhbCBmYXN0IHBhdGhcbiAgICBpZiAodmFsMS5sZW5ndGggIT09IHZhbDIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGtleXMxID0gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbDEsIE9OTFlfRU5VTUVSQUJMRSk7XG4gICAgdmFyIGtleXMyID0gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbDIsIE9OTFlfRU5VTUVSQUJMRSk7XG5cbiAgICBpZiAoa2V5czEubGVuZ3RoICE9PSBrZXlzMi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga0lzQXJyYXksIGtleXMxKTtcbiAgfSAvLyBbYnJvd3NlcmlmeV0gVGhpcyB0cmlnZ2VycyBvbiBjZXJ0YWluIHR5cGVzIGluIElFIChNYXAvU2V0KSBzbyB3ZSBkb24ndFxuICAvLyB3YW4ndCB0byBlYXJseSByZXR1cm4gb3V0IG9mIHRoZSByZXN0IG9mIHRoZSBjaGVja3MuIEhvd2V2ZXIgd2UgY2FuIGNoZWNrXG4gIC8vIGlmIHRoZSBzZWNvbmQgdmFsdWUgaXMgb25lIG9mIHRoZXNlIHZhbHVlcyBhbmQgdGhlIGZpcnN0IGlzbid0LlxuXG5cbiAgaWYgKHZhbDFUYWcgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgLy8gcmV0dXJuIGtleUNoZWNrKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MsIGtOb0l0ZXJhdG9yKTtcbiAgICBpZiAoIWlzTWFwKHZhbDEpICYmIGlzTWFwKHZhbDIpIHx8ICFpc1NldCh2YWwxKSAmJiBpc1NldCh2YWwyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc0RhdGUodmFsMSkpIHtcbiAgICBpZiAoIWlzRGF0ZSh2YWwyKSB8fCBEYXRlLnByb3RvdHlwZS5nZXRUaW1lLmNhbGwodmFsMSkgIT09IERhdGUucHJvdG90eXBlLmdldFRpbWUuY2FsbCh2YWwyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1JlZ0V4cCh2YWwxKSkge1xuICAgIGlmICghaXNSZWdFeHAodmFsMikgfHwgIWFyZVNpbWlsYXJSZWdFeHBzKHZhbDEsIHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzTmF0aXZlRXJyb3IodmFsMSkgfHwgdmFsMSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgLy8gRG8gbm90IGNvbXBhcmUgdGhlIHN0YWNrIGFzIGl0IG1pZ2h0IGRpZmZlciBldmVuIHRob3VnaCB0aGUgZXJyb3IgaXRzZWxmXG4gICAgLy8gaXMgb3RoZXJ3aXNlIGlkZW50aWNhbC5cbiAgICBpZiAodmFsMS5tZXNzYWdlICE9PSB2YWwyLm1lc3NhZ2UgfHwgdmFsMS5uYW1lICE9PSB2YWwyLm5hbWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNBcnJheUJ1ZmZlclZpZXcodmFsMSkpIHtcbiAgICBpZiAoIXN0cmljdCAmJiAoaXNGbG9hdDMyQXJyYXkodmFsMSkgfHwgaXNGbG9hdDY0QXJyYXkodmFsMSkpKSB7XG4gICAgICBpZiAoIWFyZVNpbWlsYXJGbG9hdEFycmF5cyh2YWwxLCB2YWwyKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYXJlU2ltaWxhclR5cGVkQXJyYXlzKHZhbDEsIHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBCdWZmZXIuY29tcGFyZSByZXR1cm5zIHRydWUsIHNvIHZhbDEubGVuZ3RoID09PSB2YWwyLmxlbmd0aC4gSWYgdGhleSBib3RoXG4gICAgLy8gb25seSBjb250YWluIG51bWVyaWMga2V5cywgd2UgZG9uJ3QgbmVlZCB0byBleGFtIGZ1cnRoZXIgdGhhbiBjaGVja2luZ1xuICAgIC8vIHRoZSBzeW1ib2xzLlxuXG5cbiAgICB2YXIgX2tleXMgPSBnZXRPd25Ob25JbmRleFByb3BlcnRpZXModmFsMSwgT05MWV9FTlVNRVJBQkxFKTtcblxuICAgIHZhciBfa2V5czIgPSBnZXRPd25Ob25JbmRleFByb3BlcnRpZXModmFsMiwgT05MWV9FTlVNRVJBQkxFKTtcblxuICAgIGlmIChfa2V5cy5sZW5ndGggIT09IF9rZXlzMi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga05vSXRlcmF0b3IsIF9rZXlzKTtcbiAgfSBlbHNlIGlmIChpc1NldCh2YWwxKSkge1xuICAgIGlmICghaXNTZXQodmFsMikgfHwgdmFsMS5zaXplICE9PSB2YWwyLnNpemUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga0lzU2V0KTtcbiAgfSBlbHNlIGlmIChpc01hcCh2YWwxKSkge1xuICAgIGlmICghaXNNYXAodmFsMikgfHwgdmFsMS5zaXplICE9PSB2YWwyLnNpemUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga0lzTWFwKTtcbiAgfSBlbHNlIGlmIChpc0FueUFycmF5QnVmZmVyKHZhbDEpKSB7XG4gICAgaWYgKCFhcmVFcXVhbEFycmF5QnVmZmVycyh2YWwxLCB2YWwyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0JveGVkUHJpbWl0aXZlKHZhbDEpICYmICFpc0VxdWFsQm94ZWRQcmltaXRpdmUodmFsMSwgdmFsMikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga05vSXRlcmF0b3IpO1xufVxuXG5mdW5jdGlvbiBnZXRFbnVtZXJhYmxlcyh2YWwsIGtleXMpIHtcbiAgcmV0dXJuIGtleXMuZmlsdGVyKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlKHZhbCwgayk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBpdGVyYXRpb25UeXBlLCBhS2V5cykge1xuICAvLyBGb3IgYWxsIHJlbWFpbmluZyBPYmplY3QgcGFpcnMsIGluY2x1ZGluZyBBcnJheSwgb2JqZWN0cyBhbmQgTWFwcyxcbiAgLy8gZXF1aXZhbGVuY2UgaXMgZGV0ZXJtaW5lZCBieSBoYXZpbmc6XG4gIC8vIGEpIFRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgLy8gYikgVGhlIHNhbWUgc2V0IG9mIGtleXMvaW5kZXhlcyAoYWx0aG91Z2ggbm90IG5lY2Vzc2FyaWx5IHRoZSBzYW1lIG9yZGVyKVxuICAvLyBjKSBFcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXkvaW5kZXhcbiAgLy8gZCkgRm9yIFNldHMgYW5kIE1hcHMsIGVxdWFsIGNvbnRlbnRzXG4gIC8vIE5vdGU6IHRoaXMgYWNjb3VudHMgZm9yIGJvdGggbmFtZWQgYW5kIGluZGV4ZWQgcHJvcGVydGllcyBvbiBBcnJheXMuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA1KSB7XG4gICAgYUtleXMgPSBPYmplY3Qua2V5cyh2YWwxKTtcbiAgICB2YXIgYktleXMgPSBPYmplY3Qua2V5cyh2YWwyKTsgLy8gVGhlIHBhaXIgbXVzdCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBvd25lZCBwcm9wZXJ0aWVzLlxuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IC8vIENoZWFwIGtleSB0ZXN0XG5cblxuICB2YXIgaSA9IDA7XG5cbiAgZm9yICg7IGkgPCBhS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkodmFsMiwgYUtleXNbaV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0cmljdCAmJiBhcmd1bWVudHMubGVuZ3RoID09PSA1KSB7XG4gICAgdmFyIHN5bWJvbEtleXNBID0gb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzKHZhbDEpO1xuXG4gICAgaWYgKHN5bWJvbEtleXNBLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdmFyIGNvdW50ID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHN5bWJvbEtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBzeW1ib2xLZXlzQVtpXTtcblxuICAgICAgICBpZiAocHJvcGVydHlJc0VudW1lcmFibGUodmFsMSwga2V5KSkge1xuICAgICAgICAgIGlmICghcHJvcGVydHlJc0VudW1lcmFibGUodmFsMiwga2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5SXNFbnVtZXJhYmxlKHZhbDIsIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHN5bWJvbEtleXNCID0gb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzKHZhbDIpO1xuXG4gICAgICBpZiAoc3ltYm9sS2V5c0EubGVuZ3RoICE9PSBzeW1ib2xLZXlzQi5sZW5ndGggJiYgZ2V0RW51bWVyYWJsZXModmFsMiwgc3ltYm9sS2V5c0IpLmxlbmd0aCAhPT0gY291bnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX3N5bWJvbEtleXNCID0gb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzKHZhbDIpO1xuXG4gICAgICBpZiAoX3N5bWJvbEtleXNCLmxlbmd0aCAhPT0gMCAmJiBnZXRFbnVtZXJhYmxlcyh2YWwyLCBfc3ltYm9sS2V5c0IpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGFLZXlzLmxlbmd0aCA9PT0gMCAmJiAoaXRlcmF0aW9uVHlwZSA9PT0ga05vSXRlcmF0b3IgfHwgaXRlcmF0aW9uVHlwZSA9PT0ga0lzQXJyYXkgJiYgdmFsMS5sZW5ndGggPT09IDAgfHwgdmFsMS5zaXplID09PSAwKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIFVzZSBtZW1vcyB0byBoYW5kbGUgY3ljbGVzLlxuXG5cbiAgaWYgKG1lbW9zID09PSB1bmRlZmluZWQpIHtcbiAgICBtZW1vcyA9IHtcbiAgICAgIHZhbDE6IG5ldyBNYXAoKSxcbiAgICAgIHZhbDI6IG5ldyBNYXAoKSxcbiAgICAgIHBvc2l0aW9uOiAwXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXZSBwcmV2ZW50IHVwIHRvIHR3byBtYXAuaGFzKHgpIGNhbGxzIGJ5IGRpcmVjdGx5IHJldHJpZXZpbmcgdGhlIHZhbHVlXG4gICAgLy8gYW5kIGNoZWNraW5nIGZvciB1bmRlZmluZWQuIFRoZSBtYXAgY2FuIG9ubHkgY29udGFpbiBudW1iZXJzLCBzbyBpdCBpc1xuICAgIC8vIHNhZmUgdG8gY2hlY2sgZm9yIHVuZGVmaW5lZCBvbmx5LlxuICAgIHZhciB2YWwyTWVtb0EgPSBtZW1vcy52YWwxLmdldCh2YWwxKTtcblxuICAgIGlmICh2YWwyTWVtb0EgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHZhbDJNZW1vQiA9IG1lbW9zLnZhbDIuZ2V0KHZhbDIpO1xuXG4gICAgICBpZiAodmFsMk1lbW9CICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHZhbDJNZW1vQSA9PT0gdmFsMk1lbW9CO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9zLnBvc2l0aW9uKys7XG4gIH1cblxuICBtZW1vcy52YWwxLnNldCh2YWwxLCBtZW1vcy5wb3NpdGlvbik7XG4gIG1lbW9zLnZhbDIuc2V0KHZhbDIsIG1lbW9zLnBvc2l0aW9uKTtcbiAgdmFyIGFyZUVxID0gb2JqRXF1aXYodmFsMSwgdmFsMiwgc3RyaWN0LCBhS2V5cywgbWVtb3MsIGl0ZXJhdGlvblR5cGUpO1xuICBtZW1vcy52YWwxLmRlbGV0ZSh2YWwxKTtcbiAgbWVtb3MudmFsMi5kZWxldGUodmFsMik7XG4gIHJldHVybiBhcmVFcTtcbn1cblxuZnVuY3Rpb24gc2V0SGFzRXF1YWxFbGVtZW50KHNldCwgdmFsMSwgc3RyaWN0LCBtZW1vKSB7XG4gIC8vIEdvIGxvb2tpbmcuXG4gIHZhciBzZXRWYWx1ZXMgPSBhcnJheUZyb21TZXQoc2V0KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNldFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWwyID0gc2V0VmFsdWVzW2ldO1xuXG4gICAgaWYgKGlubmVyRGVlcEVxdWFsKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtbykpIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgbWF0Y2hpbmcgZWxlbWVudCB0byBtYWtlIHN1cmUgd2UgZG8gbm90IGNoZWNrIHRoYXQgYWdhaW4uXG4gICAgICBzZXQuZGVsZXRlKHZhbDIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSAvLyBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9FcXVhbGl0eV9jb21wYXJpc29uc19hbmRfc2FtZW5lc3MjTG9vc2VfZXF1YWxpdHlfdXNpbmdcbi8vIFNhZGx5IGl0IGlzIG5vdCBwb3NzaWJsZSB0byBkZXRlY3QgY29ycmVzcG9uZGluZyB2YWx1ZXMgcHJvcGVybHkgaW4gY2FzZSB0aGVcbi8vIHR5cGUgaXMgYSBzdHJpbmcsIG51bWJlciwgYmlnaW50IG9yIGJvb2xlYW4uIFRoZSByZWFzb24gaXMgdGhhdCB0aG9zZSB2YWx1ZXNcbi8vIGNhbiBtYXRjaCBsb3RzIG9mIGRpZmZlcmVudCBzdHJpbmcgdmFsdWVzIChlLmcuLCAxbiA9PSAnKzAwMDAxJykuXG5cblxuZnVuY3Rpb24gZmluZExvb3NlTWF0Y2hpbmdQcmltaXRpdmVzKHByaW0pIHtcbiAgc3dpdGNoIChfdHlwZW9mKHByaW0pKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIC8vIE9ubHkgcGFzcyBpbiBudWxsIGFzIG9iamVjdCFcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICBjYXNlICdzeW1ib2wnOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHByaW0gPSArcHJpbTtcbiAgICAvLyBMb29zZSBlcXVhbCBlbnRyaWVzIGV4aXN0IG9ubHkgaWYgdGhlIHN0cmluZyBpcyBwb3NzaWJsZSB0byBjb252ZXJ0IHRvXG4gICAgLy8gYSByZWd1bGFyIG51bWJlciBhbmQgbm90IE5hTi5cbiAgICAvLyBGYWxsIHRocm91Z2hcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAobnVtYmVySXNOYU4ocHJpbSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2V0TWlnaHRIYXZlTG9vc2VQcmltKGEsIGIsIHByaW0pIHtcbiAgdmFyIGFsdFZhbHVlID0gZmluZExvb3NlTWF0Y2hpbmdQcmltaXRpdmVzKHByaW0pO1xuICBpZiAoYWx0VmFsdWUgIT0gbnVsbCkgcmV0dXJuIGFsdFZhbHVlO1xuICByZXR1cm4gYi5oYXMoYWx0VmFsdWUpICYmICFhLmhhcyhhbHRWYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIG1hcE1pZ2h0SGF2ZUxvb3NlUHJpbShhLCBiLCBwcmltLCBpdGVtLCBtZW1vKSB7XG4gIHZhciBhbHRWYWx1ZSA9IGZpbmRMb29zZU1hdGNoaW5nUHJpbWl0aXZlcyhwcmltKTtcblxuICBpZiAoYWx0VmFsdWUgIT0gbnVsbCkge1xuICAgIHJldHVybiBhbHRWYWx1ZTtcbiAgfVxuXG4gIHZhciBjdXJCID0gYi5nZXQoYWx0VmFsdWUpO1xuXG4gIGlmIChjdXJCID09PSB1bmRlZmluZWQgJiYgIWIuaGFzKGFsdFZhbHVlKSB8fCAhaW5uZXJEZWVwRXF1YWwoaXRlbSwgY3VyQiwgZmFsc2UsIG1lbW8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuICFhLmhhcyhhbHRWYWx1ZSkgJiYgaW5uZXJEZWVwRXF1YWwoaXRlbSwgY3VyQiwgZmFsc2UsIG1lbW8pO1xufVxuXG5mdW5jdGlvbiBzZXRFcXVpdihhLCBiLCBzdHJpY3QsIG1lbW8pIHtcbiAgLy8gVGhpcyBpcyBhIGxhemlseSBpbml0aWF0ZWQgU2V0IG9mIGVudHJpZXMgd2hpY2ggaGF2ZSB0byBiZSBjb21wYXJlZFxuICAvLyBwYWlyd2lzZS5cbiAgdmFyIHNldCA9IG51bGw7XG4gIHZhciBhVmFsdWVzID0gYXJyYXlGcm9tU2V0KGEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYVZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB2YWwgPSBhVmFsdWVzW2ldOyAvLyBOb3RlOiBDaGVja2luZyBmb3IgdGhlIG9iamVjdHMgZmlyc3QgaW1wcm92ZXMgdGhlIHBlcmZvcm1hbmNlIGZvciBvYmplY3RcbiAgICAvLyBoZWF2eSBzZXRzIGJ1dCBpdCBpcyBhIG1pbm9yIHNsb3cgZG93biBmb3IgcHJpbWl0aXZlcy4gQXMgdGhleSBhcmUgZmFzdFxuICAgIC8vIHRvIGNoZWNrIHRoaXMgaW1wcm92ZXMgdGhlIHdvcnN0IGNhc2Ugc2NlbmFyaW8gaW5zdGVhZC5cblxuICAgIGlmIChfdHlwZW9mKHZhbCkgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCkge1xuICAgICAgaWYgKHNldCA9PT0gbnVsbCkge1xuICAgICAgICBzZXQgPSBuZXcgU2V0KCk7XG4gICAgICB9IC8vIElmIHRoZSBzcGVjaWZpZWQgdmFsdWUgZG9lc24ndCBleGlzdCBpbiB0aGUgc2Vjb25kIHNldCBpdHMgYW4gbm90IG51bGxcbiAgICAgIC8vIG9iamVjdCAob3Igbm9uIHN0cmljdCBvbmx5OiBhIG5vdCBtYXRjaGluZyBwcmltaXRpdmUpIHdlJ2xsIG5lZWQgdG8gZ29cbiAgICAgIC8vIGh1bnRpbmcgZm9yIHNvbWV0aGluZyB0aGF0cyBkZWVwLShzdHJpY3QtKWVxdWFsIHRvIGl0LiBUbyBtYWtlIHRoaXNcbiAgICAgIC8vIE8obiBsb2cgbikgY29tcGxleGl0eSB3ZSBoYXZlIHRvIGNvcHkgdGhlc2UgdmFsdWVzIGluIGEgbmV3IHNldCBmaXJzdC5cblxuXG4gICAgICBzZXQuYWRkKHZhbCk7XG4gICAgfSBlbHNlIGlmICghYi5oYXModmFsKSkge1xuICAgICAgaWYgKHN0cmljdCkgcmV0dXJuIGZhbHNlOyAvLyBGYXN0IHBhdGggdG8gZGV0ZWN0IG1pc3Npbmcgc3RyaW5nLCBzeW1ib2wsIHVuZGVmaW5lZCBhbmQgbnVsbCB2YWx1ZXMuXG5cbiAgICAgIGlmICghc2V0TWlnaHRIYXZlTG9vc2VQcmltKGEsIGIsIHZhbCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2V0ID09PSBudWxsKSB7XG4gICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgIH1cblxuICAgICAgc2V0LmFkZCh2YWwpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzZXQgIT09IG51bGwpIHtcbiAgICB2YXIgYlZhbHVlcyA9IGFycmF5RnJvbVNldChiKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBiVmFsdWVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF92YWwgPSBiVmFsdWVzW19pXTsgLy8gV2UgaGF2ZSB0byBjaGVjayBpZiBhIHByaW1pdGl2ZSB2YWx1ZSBpcyBhbHJlYWR5XG4gICAgICAvLyBtYXRjaGluZyBhbmQgb25seSBpZiBpdCdzIG5vdCwgZ28gaHVudGluZyBmb3IgaXQuXG5cbiAgICAgIGlmIChfdHlwZW9mKF92YWwpID09PSAnb2JqZWN0JyAmJiBfdmFsICE9PSBudWxsKSB7XG4gICAgICAgIGlmICghc2V0SGFzRXF1YWxFbGVtZW50KHNldCwgX3ZhbCwgc3RyaWN0LCBtZW1vKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmICFhLmhhcyhfdmFsKSAmJiAhc2V0SGFzRXF1YWxFbGVtZW50KHNldCwgX3ZhbCwgc3RyaWN0LCBtZW1vKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNldC5zaXplID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG1hcEhhc0VxdWFsRW50cnkoc2V0LCBtYXAsIGtleTEsIGl0ZW0xLCBzdHJpY3QsIG1lbW8pIHtcbiAgLy8gVG8gYmUgYWJsZSB0byBoYW5kbGUgY2FzZXMgbGlrZTpcbiAgLy8gICBNYXAoW1t7fSwgJ2EnXSwgW3t9LCAnYiddXSkgdnMgTWFwKFtbe30sICdiJ10sIFt7fSwgJ2EnXV0pXG4gIC8vIC4uLiB3ZSBuZWVkIHRvIGNvbnNpZGVyICphbGwqIG1hdGNoaW5nIGtleXMsIG5vdCBqdXN0IHRoZSBmaXJzdCB3ZSBmaW5kLlxuICB2YXIgc2V0VmFsdWVzID0gYXJyYXlGcm9tU2V0KHNldCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5MiA9IHNldFZhbHVlc1tpXTtcblxuICAgIGlmIChpbm5lckRlZXBFcXVhbChrZXkxLCBrZXkyLCBzdHJpY3QsIG1lbW8pICYmIGlubmVyRGVlcEVxdWFsKGl0ZW0xLCBtYXAuZ2V0KGtleTIpLCBzdHJpY3QsIG1lbW8pKSB7XG4gICAgICBzZXQuZGVsZXRlKGtleTIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBtYXBFcXVpdihhLCBiLCBzdHJpY3QsIG1lbW8pIHtcbiAgdmFyIHNldCA9IG51bGw7XG4gIHZhciBhRW50cmllcyA9IGFycmF5RnJvbU1hcChhKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFFbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9hRW50cmllcyRpID0gX3NsaWNlZFRvQXJyYXkoYUVudHJpZXNbaV0sIDIpLFxuICAgICAgICBrZXkgPSBfYUVudHJpZXMkaVswXSxcbiAgICAgICAgaXRlbTEgPSBfYUVudHJpZXMkaVsxXTtcblxuICAgIGlmIChfdHlwZW9mKGtleSkgPT09ICdvYmplY3QnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHNldCA9PT0gbnVsbCkge1xuICAgICAgICBzZXQgPSBuZXcgU2V0KCk7XG4gICAgICB9XG5cbiAgICAgIHNldC5hZGQoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQnkgZGlyZWN0bHkgcmV0cmlldmluZyB0aGUgdmFsdWUgd2UgcHJldmVudCBhbm90aGVyIGIuaGFzKGtleSkgY2hlY2sgaW5cbiAgICAgIC8vIGFsbW9zdCBhbGwgcG9zc2libGUgY2FzZXMuXG4gICAgICB2YXIgaXRlbTIgPSBiLmdldChrZXkpO1xuXG4gICAgICBpZiAoaXRlbTIgPT09IHVuZGVmaW5lZCAmJiAhYi5oYXMoa2V5KSB8fCAhaW5uZXJEZWVwRXF1YWwoaXRlbTEsIGl0ZW0yLCBzdHJpY3QsIG1lbW8pKSB7XG4gICAgICAgIGlmIChzdHJpY3QpIHJldHVybiBmYWxzZTsgLy8gRmFzdCBwYXRoIHRvIGRldGVjdCBtaXNzaW5nIHN0cmluZywgc3ltYm9sLCB1bmRlZmluZWQgYW5kIG51bGxcbiAgICAgICAgLy8ga2V5cy5cblxuICAgICAgICBpZiAoIW1hcE1pZ2h0SGF2ZUxvb3NlUHJpbShhLCBiLCBrZXksIGl0ZW0xLCBtZW1vKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmIChzZXQgPT09IG51bGwpIHtcbiAgICAgICAgICBzZXQgPSBuZXcgU2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXQuYWRkKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHNldCAhPT0gbnVsbCkge1xuICAgIHZhciBiRW50cmllcyA9IGFycmF5RnJvbU1hcChiKTtcblxuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGJFbnRyaWVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHZhciBfYkVudHJpZXMkX2kgPSBfc2xpY2VkVG9BcnJheShiRW50cmllc1tfaTJdLCAyKSxcbiAgICAgICAgICBrZXkgPSBfYkVudHJpZXMkX2lbMF0sXG4gICAgICAgICAgaXRlbSA9IF9iRW50cmllcyRfaVsxXTtcblxuICAgICAgaWYgKF90eXBlb2Yoa2V5KSA9PT0gJ29iamVjdCcgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICAgIGlmICghbWFwSGFzRXF1YWxFbnRyeShzZXQsIGEsIGtleSwgaXRlbSwgc3RyaWN0LCBtZW1vKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmICghYS5oYXMoa2V5KSB8fCAhaW5uZXJEZWVwRXF1YWwoYS5nZXQoa2V5KSwgaXRlbSwgZmFsc2UsIG1lbW8pKSAmJiAhbWFwSGFzRXF1YWxFbnRyeShzZXQsIGEsIGtleSwgaXRlbSwgZmFsc2UsIG1lbW8pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2V0LnNpemUgPT09IDA7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb2JqRXF1aXYoYSwgYiwgc3RyaWN0LCBrZXlzLCBtZW1vcywgaXRlcmF0aW9uVHlwZSkge1xuICAvLyBTZXRzIGFuZCBtYXBzIGRvbid0IGhhdmUgdGhlaXIgZW50cmllcyBhY2Nlc3NpYmxlIHZpYSBub3JtYWwgb2JqZWN0XG4gIC8vIHByb3BlcnRpZXMuXG4gIHZhciBpID0gMDtcblxuICBpZiAoaXRlcmF0aW9uVHlwZSA9PT0ga0lzU2V0KSB7XG4gICAgaWYgKCFzZXRFcXVpdihhLCBiLCBzdHJpY3QsIG1lbW9zKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpdGVyYXRpb25UeXBlID09PSBrSXNNYXApIHtcbiAgICBpZiAoIW1hcEVxdWl2KGEsIGIsIHN0cmljdCwgbWVtb3MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGl0ZXJhdGlvblR5cGUgPT09IGtJc0FycmF5KSB7XG4gICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkoYSwgaSkpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShiLCBpKSB8fCAhaW5uZXJEZWVwRXF1YWwoYVtpXSwgYltpXSwgc3RyaWN0LCBtZW1vcykpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaGFzT3duUHJvcGVydHkoYiwgaSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXJyYXkgaXMgc3BhcnNlLlxuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcblxuICAgICAgICBmb3IgKDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IGtleXNBW2ldO1xuXG4gICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShiLCBrZXkpIHx8ICFpbm5lckRlZXBFcXVhbChhW2tleV0sIGJba2V5XSwgc3RyaWN0LCBtZW1vcykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gVGhlIHBhaXIgbXVzdCBoYXZlIGVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleS5cbiAgLy8gUG9zc2libHkgZXhwZW5zaXZlIGRlZXAgdGVzdDpcblxuXG4gIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9rZXkgPSBrZXlzW2ldO1xuXG4gICAgaWYgKCFpbm5lckRlZXBFcXVhbChhW19rZXldLCBiW19rZXldLCBzdHJpY3QsIG1lbW9zKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBpc0RlZXBFcXVhbCh2YWwxLCB2YWwyKSB7XG4gIHJldHVybiBpbm5lckRlZXBFcXVhbCh2YWwxLCB2YWwyLCBrTG9vc2UpO1xufVxuXG5mdW5jdGlvbiBpc0RlZXBTdHJpY3RFcXVhbCh2YWwxLCB2YWwyKSB7XG4gIHJldHVybiBpbm5lckRlZXBFcXVhbCh2YWwxLCB2YWwyLCBrU3RyaWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzRGVlcEVxdWFsOiBpc0RlZXBFcXVhbCxcbiAgaXNEZWVwU3RyaWN0RXF1YWw6IGlzRGVlcFN0cmljdEVxdWFsXG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gOTgxODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIEdldEludHJpbnNpYyA9IF9fd2VicGFja19yZXF1aXJlX18oNTI4KTtcblxudmFyIGNhbGxCaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDk4KTtcblxudmFyICRpbmRleE9mID0gY2FsbEJpbmQoR2V0SW50cmluc2ljKCdTdHJpbmcucHJvdG90eXBlLmluZGV4T2YnKSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJvdW5kSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHR2YXIgaW50cmluc2ljID0gR2V0SW50cmluc2ljKG5hbWUsICEhYWxsb3dNaXNzaW5nKTtcblx0aWYgKHR5cGVvZiBpbnRyaW5zaWMgPT09ICdmdW5jdGlvbicgJiYgJGluZGV4T2YobmFtZSwgJy5wcm90b3R5cGUuJykgPiAtMSkge1xuXHRcdHJldHVybiBjYWxsQmluZChpbnRyaW5zaWMpO1xuXHR9XG5cdHJldHVybiBpbnRyaW5zaWM7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4NDk4OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgYmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oOTEzOCk7XG52YXIgR2V0SW50cmluc2ljID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MjgpO1xudmFyIHNldEZ1bmN0aW9uTGVuZ3RoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MTA4KTtcblxudmFyICRUeXBlRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0NjgpO1xudmFyICRhcHBseSA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSUnKTtcbnZhciAkY2FsbCA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsJScpO1xudmFyICRyZWZsZWN0QXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVSZWZsZWN0LmFwcGx5JScsIHRydWUpIHx8IGJpbmQuY2FsbCgkY2FsbCwgJGFwcGx5KTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNDk0MCk7XG52YXIgJG1heCA9IEdldEludHJpbnNpYygnJU1hdGgubWF4JScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCaW5kKG9yaWdpbmFsRnVuY3Rpb24pIHtcblx0aWYgKHR5cGVvZiBvcmlnaW5hbEZ1bmN0aW9uICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2EgZnVuY3Rpb24gaXMgcmVxdWlyZWQnKTtcblx0fVxuXHR2YXIgZnVuYyA9ICRyZWZsZWN0QXBwbHkoYmluZCwgJGNhbGwsIGFyZ3VtZW50cyk7XG5cdHJldHVybiBzZXRGdW5jdGlvbkxlbmd0aChcblx0XHRmdW5jLFxuXHRcdDEgKyAkbWF4KDAsIG9yaWdpbmFsRnVuY3Rpb24ubGVuZ3RoIC0gKGFyZ3VtZW50cy5sZW5ndGggLSAxKSksXG5cdFx0dHJ1ZVxuXHQpO1xufTtcblxudmFyIGFwcGx5QmluZCA9IGZ1bmN0aW9uIGFwcGx5QmluZCgpIHtcblx0cmV0dXJuICRyZWZsZWN0QXBwbHkoYmluZCwgJGFwcGx5LCBhcmd1bWVudHMpO1xufTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHQkZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdhcHBseScsIHsgdmFsdWU6IGFwcGx5QmluZCB9KTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzLmFwcGx5ID0gYXBwbHlCaW5kO1xufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0MzY0OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG4vKmdsb2JhbCB3aW5kb3csIGdsb2JhbCovXG52YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oOTIwOClcbnZhciBhc3NlcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwOTMpXG5mdW5jdGlvbiBub3coKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSB9XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZVxudmFyIGNvbnNvbGVcbnZhciB0aW1lcyA9IHt9XG5cbmlmICh0eXBlb2YgX193ZWJwYWNrX3JlcXVpcmVfXy5nICE9PSBcInVuZGVmaW5lZFwiICYmIF9fd2VicGFja19yZXF1aXJlX18uZy5jb25zb2xlKSB7XG4gICAgY29uc29sZSA9IF9fd2VicGFja19yZXF1aXJlX18uZy5jb25zb2xlXG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmNvbnNvbGUpIHtcbiAgICBjb25zb2xlID0gd2luZG93LmNvbnNvbGVcbn0gZWxzZSB7XG4gICAgY29uc29sZSA9IHt9XG59XG5cbnZhciBmdW5jdGlvbnMgPSBbXG4gICAgW2xvZywgXCJsb2dcIl0sXG4gICAgW2luZm8sIFwiaW5mb1wiXSxcbiAgICBbd2FybiwgXCJ3YXJuXCJdLFxuICAgIFtlcnJvciwgXCJlcnJvclwiXSxcbiAgICBbdGltZSwgXCJ0aW1lXCJdLFxuICAgIFt0aW1lRW5kLCBcInRpbWVFbmRcIl0sXG4gICAgW3RyYWNlLCBcInRyYWNlXCJdLFxuICAgIFtkaXIsIFwiZGlyXCJdLFxuICAgIFtjb25zb2xlQXNzZXJ0LCBcImFzc2VydFwiXVxuXVxuXG5mb3IgKHZhciBpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0dXBsZSA9IGZ1bmN0aW9uc1tpXVxuICAgIHZhciBmID0gdHVwbGVbMF1cbiAgICB2YXIgbmFtZSA9IHR1cGxlWzFdXG5cbiAgICBpZiAoIWNvbnNvbGVbbmFtZV0pIHtcbiAgICAgICAgY29uc29sZVtuYW1lXSA9IGZcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29uc29sZVxuXG5mdW5jdGlvbiBsb2coKSB7fVxuXG5mdW5jdGlvbiBpbmZvKCkge1xuICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cylcbn1cblxuZnVuY3Rpb24gd2FybigpIHtcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIGVycm9yKCkge1xuICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIHRpbWUobGFiZWwpIHtcbiAgICB0aW1lc1tsYWJlbF0gPSBub3coKVxufVxuXG5mdW5jdGlvbiB0aW1lRW5kKGxhYmVsKSB7XG4gICAgdmFyIHRpbWUgPSB0aW1lc1tsYWJlbF1cbiAgICBpZiAoIXRpbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gc3VjaCBsYWJlbDogXCIgKyBsYWJlbClcbiAgICB9XG5cbiAgICBkZWxldGUgdGltZXNbbGFiZWxdXG4gICAgdmFyIGR1cmF0aW9uID0gbm93KCkgLSB0aW1lXG4gICAgY29uc29sZS5sb2cobGFiZWwgKyBcIjogXCIgKyBkdXJhdGlvbiArIFwibXNcIilcbn1cblxuZnVuY3Rpb24gdHJhY2UoKSB7XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcigpXG4gICAgZXJyLm5hbWUgPSBcIlRyYWNlXCJcbiAgICBlcnIubWVzc2FnZSA9IHV0aWwuZm9ybWF0LmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICBjb25zb2xlLmVycm9yKGVyci5zdGFjaylcbn1cblxuZnVuY3Rpb24gZGlyKG9iamVjdCkge1xuICAgIGNvbnNvbGUubG9nKHV0aWwuaW5zcGVjdChvYmplY3QpICsgXCJcXG5cIilcbn1cblxuZnVuY3Rpb24gY29uc29sZUFzc2VydChleHByZXNzaW9uKSB7XG4gICAgaWYgKCFleHByZXNzaW9uKSB7XG4gICAgICAgIHZhciBhcnIgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgICAgICAgYXNzZXJ0Lm9rKGZhbHNlLCB1dGlsLmZvcm1hdC5hcHBseShudWxsLCBhcnIpKVxuICAgIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjg2OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OTQwKTtcblxudmFyICRTeW50YXhFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oNTczMSk7XG52YXIgJFR5cGVFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMzQ2OCk7XG5cbnZhciBnb3BkID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MzM2KTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lRGF0YVByb3BlcnR5KFxuXHRvYmosXG5cdHByb3BlcnR5LFxuXHR2YWx1ZVxuKSB7XG5cdGlmICghb2JqIHx8ICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgb2JqYCBtdXN0IGJlIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uYCcpO1xuXHR9XG5cdGlmICh0eXBlb2YgcHJvcGVydHkgIT09ICdzdHJpbmcnICYmIHR5cGVvZiBwcm9wZXJ0eSAhPT0gJ3N5bWJvbCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYHByb3BlcnR5YCBtdXN0IGJlIGEgc3RyaW5nIG9yIGEgc3ltYm9sYCcpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMyAmJiB0eXBlb2YgYXJndW1lbnRzWzNdICE9PSAnYm9vbGVhbicgJiYgYXJndW1lbnRzWzNdICE9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Bub25FbnVtZXJhYmxlYCwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYSBib29sZWFuIG9yIG51bGwnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgdHlwZW9mIGFyZ3VtZW50c1s0XSAhPT0gJ2Jvb2xlYW4nICYmIGFyZ3VtZW50c1s0XSAhPT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbm9uV3JpdGFibGVgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4gb3IgbnVsbCcpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gNSAmJiB0eXBlb2YgYXJndW1lbnRzWzVdICE9PSAnYm9vbGVhbicgJiYgYXJndW1lbnRzWzVdICE9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Bub25Db25maWd1cmFibGVgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4gb3IgbnVsbCcpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gNiAmJiB0eXBlb2YgYXJndW1lbnRzWzZdICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYGxvb3NlYCwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblxuXHR2YXIgbm9uRW51bWVyYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblx0dmFyIG5vbldyaXRhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgPyBhcmd1bWVudHNbNF0gOiBudWxsO1xuXHR2YXIgbm9uQ29uZmlndXJhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgPyBhcmd1bWVudHNbNV0gOiBudWxsO1xuXHR2YXIgbG9vc2UgPSBhcmd1bWVudHMubGVuZ3RoID4gNiA/IGFyZ3VtZW50c1s2XSA6IGZhbHNlO1xuXG5cdC8qIEB0eXBlIHtmYWxzZSB8IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPHVua25vd24+fSAqL1xuXHR2YXIgZGVzYyA9ICEhZ29wZCAmJiBnb3BkKG9iaiwgcHJvcGVydHkpO1xuXG5cdGlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0XHQkZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wZXJ0eSwge1xuXHRcdFx0Y29uZmlndXJhYmxlOiBub25Db25maWd1cmFibGUgPT09IG51bGwgJiYgZGVzYyA/IGRlc2MuY29uZmlndXJhYmxlIDogIW5vbkNvbmZpZ3VyYWJsZSxcblx0XHRcdGVudW1lcmFibGU6IG5vbkVudW1lcmFibGUgPT09IG51bGwgJiYgZGVzYyA/IGRlc2MuZW51bWVyYWJsZSA6ICFub25FbnVtZXJhYmxlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IG5vbldyaXRhYmxlID09PSBudWxsICYmIGRlc2MgPyBkZXNjLndyaXRhYmxlIDogIW5vbldyaXRhYmxlXG5cdFx0fSk7XG5cdH0gZWxzZSBpZiAobG9vc2UgfHwgKCFub25FbnVtZXJhYmxlICYmICFub25Xcml0YWJsZSAmJiAhbm9uQ29uZmlndXJhYmxlKSkge1xuXHRcdC8vIG11c3QgZmFsbCBiYWNrIHRvIFtbU2V0XV0sIGFuZCB3YXMgbm90IGV4cGxpY2l0bHkgYXNrZWQgdG8gbWFrZSBub24tZW51bWVyYWJsZSwgbm9uLXdyaXRhYmxlLCBvciBub24tY29uZmlndXJhYmxlXG5cdFx0b2JqW3Byb3BlcnR5XSA9IHZhbHVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignVGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IGRlZmluaW5nIGEgcHJvcGVydHkgYXMgbm9uLWNvbmZpZ3VyYWJsZSwgbm9uLXdyaXRhYmxlLCBvciBub24tZW51bWVyYWJsZS4nKTtcblx0fVxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTg1Nzpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGtleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyMjgpO1xudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2woJ2ZvbycpID09PSAnc3ltYm9sJztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBjb25jYXQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0O1xudmFyIG9yaWdEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjM5KSgpO1xuXG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IG9yaWdEZWZpbmVQcm9wZXJ0eSAmJiBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCB2YWx1ZSwgcHJlZGljYXRlKSB7XG5cdGlmIChuYW1lIGluIG9iamVjdCkge1xuXHRcdGlmIChwcmVkaWNhdGUgPT09IHRydWUpIHtcblx0XHRcdGlmIChvYmplY3RbbmFtZV0gPT09IHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKCFpc0Z1bmN0aW9uKHByZWRpY2F0ZSkgfHwgIXByZWRpY2F0ZSgpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHR9XG5cdGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0b3JpZ0RlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdG9iamVjdFtuYW1lXSA9IHZhbHVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdH1cbn07XG5cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwKSB7XG5cdHZhciBwcmVkaWNhdGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB7fTtcblx0dmFyIHByb3BzID0ga2V5cyhtYXApO1xuXHRpZiAoaGFzU3ltYm9scykge1xuXHRcdHByb3BzID0gY29uY2F0LmNhbGwocHJvcHMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWFwKSk7XG5cdH1cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcHNbaV0sIG1hcFtwcm9wc1tpXV0sIHByZWRpY2F0ZXNbcHJvcHNbaV1dKTtcblx0fVxufTtcblxuZGVmaW5lUHJvcGVydGllcy5zdXBwb3J0c0Rlc2NyaXB0b3JzID0gISFzdXBwb3J0c0Rlc2NyaXB0b3JzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnRpZXM7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ5NDA6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBHZXRJbnRyaW5zaWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyOCk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG52YXIgJGRlZmluZVByb3BlcnR5ID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmRlZmluZVByb3BlcnR5JScsIHRydWUpIHx8IGZhbHNlO1xuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHR0cnkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHQkZGVmaW5lUHJvcGVydHkgPSBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRkZWZpbmVQcm9wZXJ0eTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTExMDpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2V2YWwnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gRXZhbEVycm9yO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5ODM4OlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gRXJyb3I7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDExNTU6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9yYW5nZScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBSYW5nZUVycm9yO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0OTQzOlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vcmVmJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFJlZmVyZW5jZUVycm9yO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1NzMxOlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vc3ludGF4Jyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRheEVycm9yO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNDY4OlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vdHlwZScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBUeXBlRXJyb3I7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDIxNDA6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKiogQHR5cGUge2ltcG9ydCgnLi91cmknKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gVVJJRXJyb3I7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDMwNDY6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29kZSByZWZhY3RvcmVkIGZyb20gTW96aWxsYSBEZXZlbG9wZXIgTmV0d29yazpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9hc3NpZ25cbiAqL1xuXG5cblxuZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgZmlyc3RTb3VyY2UpIHtcbiAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldCA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGZpcnN0IGFyZ3VtZW50IHRvIG9iamVjdCcpO1xuICB9XG5cbiAgdmFyIHRvID0gT2JqZWN0KHRhcmdldCk7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5leHRTb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgaWYgKG5leHRTb3VyY2UgPT09IHVuZGVmaW5lZCB8fCBuZXh0U291cmNlID09PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIga2V5c0FycmF5ID0gT2JqZWN0LmtleXMoT2JqZWN0KG5leHRTb3VyY2UpKTtcbiAgICBmb3IgKHZhciBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCsrKSB7XG4gICAgICB2YXIgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCAmJiBkZXNjLmVudW1lcmFibGUpIHtcbiAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5cbmZ1bmN0aW9uIHBvbHlmaWxsKCkge1xuICBpZiAoIU9iamVjdC5hc3NpZ24pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LCAnYXNzaWduJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBhc3NpZ25cbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYXNzaWduOiBhc3NpZ24sXG4gIHBvbHlmaWxsOiBwb2x5ZmlsbFxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzA1OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaXNDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTYxNyk7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm9yRWFjaEFycmF5ID0gZnVuY3Rpb24gZm9yRWFjaEFycmF5KGFycmF5LCBpdGVyYXRvciwgcmVjZWl2ZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksIGkpKSB7XG4gICAgICAgICAgICBpZiAocmVjZWl2ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yKGFycmF5W2ldLCBpLCBhcnJheSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwocmVjZWl2ZXIsIGFycmF5W2ldLCBpLCBhcnJheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgZm9yRWFjaFN0cmluZyA9IGZ1bmN0aW9uIGZvckVhY2hTdHJpbmcoc3RyaW5nLCBpdGVyYXRvciwgcmVjZWl2ZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc3RyaW5nLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIC8vIG5vIHN1Y2ggdGhpbmcgYXMgYSBzcGFyc2Ugc3RyaW5nLlxuICAgICAgICBpZiAocmVjZWl2ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgaXRlcmF0b3Ioc3RyaW5nLmNoYXJBdChpKSwgaSwgc3RyaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwocmVjZWl2ZXIsIHN0cmluZy5jaGFyQXQoaSksIGksIHN0cmluZyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgZm9yRWFjaE9iamVjdCA9IGZ1bmN0aW9uIGZvckVhY2hPYmplY3Qob2JqZWN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpIHtcbiAgICBmb3IgKHZhciBrIGluIG9iamVjdCkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGspKSB7XG4gICAgICAgICAgICBpZiAocmVjZWl2ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yKG9iamVjdFtrXSwgaywgb2JqZWN0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IuY2FsbChyZWNlaXZlciwgb2JqZWN0W2tdLCBrLCBvYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGxpc3QsIGl0ZXJhdG9yLCB0aGlzQXJnKSB7XG4gICAgaWYgKCFpc0NhbGxhYmxlKGl0ZXJhdG9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpdGVyYXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICB2YXIgcmVjZWl2ZXI7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykge1xuICAgICAgICByZWNlaXZlciA9IHRoaXNBcmc7XG4gICAgfVxuXG4gICAgaWYgKHRvU3RyLmNhbGwobGlzdCkgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgICAgZm9yRWFjaEFycmF5KGxpc3QsIGl0ZXJhdG9yLCByZWNlaXZlcik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZm9yRWFjaFN0cmluZyhsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvckVhY2hPYmplY3QobGlzdCwgaXRlcmF0b3IsIHJlY2VpdmVyKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2g7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDg3OTQ6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG52YXIgY29uY2F0dHkgPSBmdW5jdGlvbiBjb25jYXR0eShhLCBiKSB7XG4gICAgdmFyIGFyciA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFycltpXSA9IGFbaV07XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgYi5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBhcnJbaiArIGEubGVuZ3RoXSA9IGJbal07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycjtcbn07XG5cbnZhciBzbGljeSA9IGZ1bmN0aW9uIHNsaWN5KGFyckxpa2UsIG9mZnNldCkge1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gb2Zmc2V0IHx8IDAsIGogPSAwOyBpIDwgYXJyTGlrZS5sZW5ndGg7IGkgKz0gMSwgaiArPSAxKSB7XG4gICAgICAgIGFycltqXSA9IGFyckxpa2VbaV07XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59O1xuXG52YXIgam9pbnkgPSBmdW5jdGlvbiAoYXJyLCBqb2luZXIpIHtcbiAgICB2YXIgc3RyID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IGFycltpXTtcbiAgICAgICAgaWYgKGkgKyAxIDwgYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgc3RyICs9IGpvaW5lcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5hcHBseSh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWN5KGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGNvbmNhdHR5KGFyZ3MsIGFyZ3VtZW50cylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgIGNvbmNhdHR5KGFyZ3MsIGFyZ3VtZW50cylcbiAgICAgICAgKTtcblxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBtYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJnc1tpXSA9ICckJyArIGk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGpvaW55KGJvdW5kQXJncywgJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5MTM4OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaW1wbGVtZW50YXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3OTQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IGltcGxlbWVudGF0aW9uO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1Mjg6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB1bmRlZmluZWQ7XG5cbnZhciAkRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4MzgpO1xudmFyICRFdmFsRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxMTApO1xudmFyICRSYW5nZUVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTU1KTtcbnZhciAkUmVmZXJlbmNlRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5NDMpO1xudmFyICRTeW50YXhFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oNTczMSk7XG52YXIgJFR5cGVFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMzQ2OCk7XG52YXIgJFVSSUVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMTQwKTtcblxudmFyICRGdW5jdGlvbiA9IEZ1bmN0aW9uO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbnZhciBnZXRFdmFsbGVkQ29uc3RydWN0b3IgPSBmdW5jdGlvbiAoZXhwcmVzc2lvblN5bnRheCkge1xuXHR0cnkge1xuXHRcdHJldHVybiAkRnVuY3Rpb24oJ1widXNlIHN0cmljdFwiOyByZXR1cm4gKCcgKyBleHByZXNzaW9uU3ludGF4ICsgJykuY29uc3RydWN0b3I7JykoKTtcblx0fSBjYXRjaCAoZSkge31cbn07XG5cbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRCh7fSwgJycpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0JGdPUEQgPSBudWxsOyAvLyB0aGlzIGlzIElFIDgsIHdoaWNoIGhhcyBhIGJyb2tlbiBnT1BEXG5cdH1cbn1cblxudmFyIHRocm93VHlwZUVycm9yID0gZnVuY3Rpb24gKCkge1xuXHR0aHJvdyBuZXcgJFR5cGVFcnJvcigpO1xufTtcbnZhciBUaHJvd1R5cGVFcnJvciA9ICRnT1BEXG5cdD8gKGZ1bmN0aW9uICgpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9ucywgbm8tY2FsbGVyLCBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcblx0XHRcdGFyZ3VtZW50cy5jYWxsZWU7IC8vIElFIDggZG9lcyBub3QgdGhyb3cgaGVyZVxuXHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdH0gY2F0Y2ggKGNhbGxlZVRocm93cykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gSUUgOCB0aHJvd3Mgb24gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhcmd1bWVudHMsICcnKVxuXHRcdFx0XHRyZXR1cm4gJGdPUEQoYXJndW1lbnRzLCAnY2FsbGVlJykuZ2V0O1xuXHRcdFx0fSBjYXRjaCAoZ09QRHRocm93cykge1xuXHRcdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KCkpXG5cdDogdGhyb3dUeXBlRXJyb3I7XG5cbnZhciBoYXNTeW1ib2xzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNTU4KSgpO1xudmFyIGhhc1Byb3RvID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2ODY5KSgpO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgKFxuXHRoYXNQcm90b1xuXHRcdD8gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguX19wcm90b19fOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblx0XHQ6IG51bGxcbik7XG5cbnZhciBuZWVkc0V2YWwgPSB7fTtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8oVWludDhBcnJheSk7XG5cbnZhciBJTlRSSU5TSUNTID0ge1xuXHRfX3Byb3RvX186IG51bGwsXG5cdCclQWdncmVnYXRlRXJyb3IlJzogdHlwZW9mIEFnZ3JlZ2F0ZUVycm9yID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFnZ3JlZ2F0ZUVycm9yLFxuXHQnJUFycmF5JSc6IEFycmF5LFxuXHQnJUFycmF5QnVmZmVyJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlcixcblx0JyVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogbmVlZHNFdmFsLFxuXHQnJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyVCaWdJbnQlJzogdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQsXG5cdCclQmlnSW50NjRBcnJheSUnOiB0eXBlb2YgQmlnSW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQ2NEFycmF5LFxuXHQnJUJpZ1VpbnQ2NEFycmF5JSc6IHR5cGVvZiBCaWdVaW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdVaW50NjRBcnJheSxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6ICRFcnJvcixcblx0JyVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJUV2YWxFcnJvciUnOiAkRXZhbEVycm9yLFxuXHQnJUZsb2F0MzJBcnJheSUnOiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MzJBcnJheSxcblx0JyVGbG9hdDY0QXJyYXklJzogdHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDY0QXJyYXksXG5cdCclRmluYWxpemF0aW9uUmVnaXN0cnklJzogdHlwZW9mIEZpbmFsaXphdGlvblJlZ2lzdHJ5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZpbmFsaXphdGlvblJlZ2lzdHJ5LFxuXHQnJUZ1bmN0aW9uJSc6ICRGdW5jdGlvbixcblx0JyVHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclSW50OEFycmF5JSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LFxuXHQnJUludDE2QXJyYXklJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MTZBcnJheSxcblx0JyVJbnQzMkFycmF5JSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXksXG5cdCclaXNGaW5pdGUlJzogaXNGaW5pdGUsXG5cdCclaXNOYU4lJzogaXNOYU4sXG5cdCclSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkpIDogdW5kZWZpbmVkLFxuXHQnJUpTT04lJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTiA6IHVuZGVmaW5lZCxcblx0JyVNYXAlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAsXG5cdCclTWFwSXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IE1hcCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclTWF0aCUnOiBNYXRoLFxuXHQnJU51bWJlciUnOiBOdW1iZXIsXG5cdCclT2JqZWN0JSc6IE9iamVjdCxcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6ICRSYW5nZUVycm9yLFxuXHQnJVJlZmVyZW5jZUVycm9yJSc6ICRSZWZlcmVuY2VFcnJvcixcblx0JyVSZWZsZWN0JSc6IHR5cGVvZiBSZWZsZWN0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFJlZmxlY3QsXG5cdCclUmVnRXhwJSc6IFJlZ0V4cCxcblx0JyVTZXQlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTZXQsXG5cdCclU2V0SXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IFNldCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclU2hhcmVkQXJyYXlCdWZmZXIlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLFxuXHQnJVN0cmluZyUnOiBTdHJpbmcsXG5cdCclU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclU3ltYm9sJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wgOiB1bmRlZmluZWQsXG5cdCclU3ludGF4RXJyb3IlJzogJFN5bnRheEVycm9yLFxuXHQnJVRocm93VHlwZUVycm9yJSc6IFRocm93VHlwZUVycm9yLFxuXHQnJVR5cGVkQXJyYXklJzogVHlwZWRBcnJheSxcblx0JyVUeXBlRXJyb3IlJzogJFR5cGVFcnJvcixcblx0JyVVaW50OEFycmF5JSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXksXG5cdCclVWludDhDbGFtcGVkQXJyYXklJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuXHQnJVVpbnQxNkFycmF5JSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheSxcblx0JyVVaW50MzJBcnJheSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXksXG5cdCclVVJJRXJyb3IlJzogJFVSSUVycm9yLFxuXHQnJVdlYWtNYXAlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcCxcblx0JyVXZWFrUmVmJSc6IHR5cGVvZiBXZWFrUmVmID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtSZWYsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0XG59O1xuXG5pZiAoZ2V0UHJvdG8pIHtcblx0dHJ5IHtcblx0XHRudWxsLmVycm9yOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2hhZG93cmVhbG0vcHVsbC8zODQjaXNzdWVjb21tZW50LTEzNjQyNjQyMjlcblx0XHR2YXIgZXJyb3JQcm90byA9IGdldFByb3RvKGdldFByb3RvKGUpKTtcblx0XHRJTlRSSU5TSUNTWyclRXJyb3IucHJvdG90eXBlJSddID0gZXJyb3JQcm90bztcblx0fVxufVxuXG52YXIgZG9FdmFsID0gZnVuY3Rpb24gZG9FdmFsKG5hbWUpIHtcblx0dmFyIHZhbHVlO1xuXHRpZiAobmFtZSA9PT0gJyVBc3luY0Z1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24gKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUdlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvciUnKSB7XG5cdFx0dmFyIGZuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKTtcblx0XHRpZiAoZm4pIHtcblx0XHRcdHZhbHVlID0gZm4ucHJvdG90eXBlO1xuXHRcdH1cblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJykge1xuXHRcdHZhciBnZW4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvciUnKTtcblx0XHRpZiAoZ2VuICYmIGdldFByb3RvKSB7XG5cdFx0XHR2YWx1ZSA9IGdldFByb3RvKGdlbi5wcm90b3R5cGUpO1xuXHRcdH1cblx0fVxuXG5cdElOVFJJTlNJQ1NbbmFtZV0gPSB2YWx1ZTtcblxuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgTEVHQUNZX0FMSUFTRVMgPSB7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0JyVBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ0FycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG90eXBlJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b19lbnRyaWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2VudHJpZXMnXSxcblx0JyVBcnJheVByb3RvX2ZvckVhY2glJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZm9yRWFjaCddLFxuXHQnJUFycmF5UHJvdG9fa2V5cyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdrZXlzJ10sXG5cdCclQXJyYXlQcm90b192YWx1ZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAndmFsdWVzJ10sXG5cdCclQXN5bmNGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0FzeW5jRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclQm9vbGVhblByb3RvdHlwZSUnOiBbJ0Jvb2xlYW4nLCAncHJvdG90eXBlJ10sXG5cdCclRGF0YVZpZXdQcm90b3R5cGUlJzogWydEYXRhVmlldycsICdwcm90b3R5cGUnXSxcblx0JyVEYXRlUHJvdG90eXBlJSc6IFsnRGF0ZScsICdwcm90b3R5cGUnXSxcblx0JyVFcnJvclByb3RvdHlwZSUnOiBbJ0Vycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUV2YWxFcnJvclByb3RvdHlwZSUnOiBbJ0V2YWxFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDMyQXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQ2NEFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQ2NEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZ1bmN0aW9uUHJvdG90eXBlJSc6IFsnRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDhBcnJheVByb3RvdHlwZSUnOiBbJ0ludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnSW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnSW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVKU09OUGFyc2UlJzogWydKU09OJywgJ3BhcnNlJ10sXG5cdCclSlNPTlN0cmluZ2lmeSUnOiBbJ0pTT04nLCAnc3RyaW5naWZ5J10sXG5cdCclTWFwUHJvdG90eXBlJSc6IFsnTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJU51bWJlclByb3RvdHlwZSUnOiBbJ051bWJlcicsICdwcm90b3R5cGUnXSxcblx0JyVPYmplY3RQcm90b3R5cGUlJzogWydPYmplY3QnLCAncHJvdG90eXBlJ10sXG5cdCclT2JqUHJvdG9fdG9TdHJpbmclJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3RvU3RyaW5nJ10sXG5cdCclT2JqUHJvdG9fdmFsdWVPZiUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndmFsdWVPZiddLFxuXHQnJVByb21pc2VQcm90b3R5cGUlJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZSddLFxuXHQnJVByb21pc2VQcm90b190aGVuJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnLCAndGhlbiddLFxuXHQnJVByb21pc2VfYWxsJSc6IFsnUHJvbWlzZScsICdhbGwnXSxcblx0JyVQcm9taXNlX3JlamVjdCUnOiBbJ1Byb21pc2UnLCAncmVqZWN0J10sXG5cdCclUHJvbWlzZV9yZXNvbHZlJSc6IFsnUHJvbWlzZScsICdyZXNvbHZlJ10sXG5cdCclUmFuZ2VFcnJvclByb3RvdHlwZSUnOiBbJ1JhbmdlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVmZXJlbmNlRXJyb3JQcm90b3R5cGUlJzogWydSZWZlcmVuY2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWdFeHBQcm90b3R5cGUlJzogWydSZWdFeHAnLCAncHJvdG90eXBlJ10sXG5cdCclU2V0UHJvdG90eXBlJSc6IFsnU2V0JywgJ3Byb3RvdHlwZSddLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnU2hhcmVkQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclU3RyaW5nUHJvdG90eXBlJSc6IFsnU3RyaW5nJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bWJvbFByb3RvdHlwZSUnOiBbJ1N5bWJvbCcsICdwcm90b3R5cGUnXSxcblx0JyVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBbJ1N5bnRheEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogWydUeXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVFcnJvclByb3RvdHlwZSUnOiBbJ1R5cGVFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnVWludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDMyQXJyYXlQcm90b3R5cGUlJzogWydVaW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVUklFcnJvclByb3RvdHlwZSUnOiBbJ1VSSUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtNYXBQcm90b3R5cGUlJzogWydXZWFrTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtTZXRQcm90b3R5cGUlJzogWydXZWFrU2V0JywgJ3Byb3RvdHlwZSddXG59O1xuXG52YXIgYmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oOTEzOCk7XG52YXIgaGFzT3duID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NTU0KTtcbnZhciAkY29uY2F0ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xudmFyICRzcGxpY2VBcHBseSA9IGJpbmQuY2FsbChGdW5jdGlvbi5hcHBseSwgQXJyYXkucHJvdG90eXBlLnNwbGljZSk7XG52YXIgJHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciAkc3RyU2xpY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5zbGljZSk7XG52YXIgJGV4ZWMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgUmVnRXhwLnByb3RvdHlwZS5leGVjKTtcblxuLyogYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvNC4xNy4xNS9kaXN0L2xvZGFzaC5qcyNMNjczNS1MNjc0NCAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14lLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCUkKSkvZztcbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZzsgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgc3RyaW5nVG9QYXRoID0gZnVuY3Rpb24gc3RyaW5nVG9QYXRoKHN0cmluZykge1xuXHR2YXIgZmlyc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAwLCAxKTtcblx0dmFyIGxhc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAtMSk7XG5cdGlmIChmaXJzdCA9PT0gJyUnICYmIGxhc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgY2xvc2luZyBgJWAnKTtcblx0fSBlbHNlIGlmIChsYXN0ID09PSAnJScgJiYgZmlyc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgb3BlbmluZyBgJWAnKTtcblx0fVxuXHR2YXIgcmVzdWx0ID0gW107XG5cdCRyZXBsYWNlKHN0cmluZywgcmVQcm9wTmFtZSwgZnVuY3Rpb24gKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcblx0XHRyZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBxdW90ZSA/ICRyZXBsYWNlKHN1YlN0cmluZywgcmVFc2NhcGVDaGFyLCAnJDEnKSA6IG51bWJlciB8fCBtYXRjaDtcblx0fSk7XG5cdHJldHVybiByZXN1bHQ7XG59O1xuLyogZW5kIGFkYXB0YXRpb24gKi9cblxudmFyIGdldEJhc2VJbnRyaW5zaWMgPSBmdW5jdGlvbiBnZXRCYXNlSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHR2YXIgaW50cmluc2ljTmFtZSA9IG5hbWU7XG5cdHZhciBhbGlhcztcblx0aWYgKGhhc093bihMRUdBQ1lfQUxJQVNFUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHRhbGlhcyA9IExFR0FDWV9BTElBU0VTW2ludHJpbnNpY05hbWVdO1xuXHRcdGludHJpbnNpY05hbWUgPSAnJScgKyBhbGlhc1swXSArICclJztcblx0fVxuXG5cdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHR2YXIgdmFsdWUgPSBJTlRSSU5TSUNTW2ludHJpbnNpY05hbWVdO1xuXHRcdGlmICh2YWx1ZSA9PT0gbmVlZHNFdmFsKSB7XG5cdFx0XHR2YWx1ZSA9IGRvRXZhbChpbnRyaW5zaWNOYW1lKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgJiYgIWFsbG93TWlzc2luZykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIGZpbGUgYW4gaXNzdWUhJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGFsaWFzOiBhbGlhcyxcblx0XHRcdG5hbWU6IGludHJpbnNpY05hbWUsXG5cdFx0XHR2YWx1ZTogdmFsdWVcblx0XHR9O1xuXHR9XG5cblx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBkb2VzIG5vdCBleGlzdCEnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0SW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhbGxvd01pc3NpbmcgIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdcImFsbG93TWlzc2luZ1wiIGFyZ3VtZW50IG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblxuXHRpZiAoJGV4ZWMoL14lP1teJV0qJT8kLywgbmFtZSkgPT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdgJWAgbWF5IG5vdCBiZSBwcmVzZW50IGFueXdoZXJlIGJ1dCBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgdGhlIGludHJpbnNpYyBuYW1lJyk7XG5cdH1cblx0dmFyIHBhcnRzID0gc3RyaW5nVG9QYXRoKG5hbWUpO1xuXHR2YXIgaW50cmluc2ljQmFzZU5hbWUgPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJztcblxuXHR2YXIgaW50cmluc2ljID0gZ2V0QmFzZUludHJpbnNpYygnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJywgYWxsb3dNaXNzaW5nKTtcblx0dmFyIGludHJpbnNpY1JlYWxOYW1lID0gaW50cmluc2ljLm5hbWU7XG5cdHZhciB2YWx1ZSA9IGludHJpbnNpYy52YWx1ZTtcblx0dmFyIHNraXBGdXJ0aGVyQ2FjaGluZyA9IGZhbHNlO1xuXG5cdHZhciBhbGlhcyA9IGludHJpbnNpYy5hbGlhcztcblx0aWYgKGFsaWFzKSB7XG5cdFx0aW50cmluc2ljQmFzZU5hbWUgPSBhbGlhc1swXTtcblx0XHQkc3BsaWNlQXBwbHkocGFydHMsICRjb25jYXQoWzAsIDFdLCBhbGlhcykpO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDEsIGlzT3duID0gdHJ1ZTsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0dmFyIHBhcnQgPSBwYXJ0c1tpXTtcblx0XHR2YXIgZmlyc3QgPSAkc3RyU2xpY2UocGFydCwgMCwgMSk7XG5cdFx0dmFyIGxhc3QgPSAkc3RyU2xpY2UocGFydCwgLTEpO1xuXHRcdGlmIChcblx0XHRcdChcblx0XHRcdFx0KGZpcnN0ID09PSAnXCInIHx8IGZpcnN0ID09PSBcIidcIiB8fCBmaXJzdCA9PT0gJ2AnKVxuXHRcdFx0XHR8fCAobGFzdCA9PT0gJ1wiJyB8fCBsYXN0ID09PSBcIidcIiB8fCBsYXN0ID09PSAnYCcpXG5cdFx0XHQpXG5cdFx0XHQmJiBmaXJzdCAhPT0gbGFzdFxuXHRcdCkge1xuXHRcdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcigncHJvcGVydHkgbmFtZXMgd2l0aCBxdW90ZXMgbXVzdCBoYXZlIG1hdGNoaW5nIHF1b3RlcycpO1xuXHRcdH1cblx0XHRpZiAocGFydCA9PT0gJ2NvbnN0cnVjdG9yJyB8fCAhaXNPd24pIHtcblx0XHRcdHNraXBGdXJ0aGVyQ2FjaGluZyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aW50cmluc2ljQmFzZU5hbWUgKz0gJy4nICsgcGFydDtcblx0XHRpbnRyaW5zaWNSZWFsTmFtZSA9ICclJyArIGludHJpbnNpY0Jhc2VOYW1lICsgJyUnO1xuXG5cdFx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNSZWFsTmFtZSkpIHtcblx0XHRcdHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV07XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIShwYXJ0IGluIHZhbHVlKSkge1xuXHRcdFx0XHRpZiAoIWFsbG93TWlzc2luZykge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdiYXNlIGludHJpbnNpYyBmb3IgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IHRoZSBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlLicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2b2lkIHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGlmICgkZ09QRCAmJiAoaSArIDEpID49IHBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgZGVzYyA9ICRnT1BEKHZhbHVlLCBwYXJ0KTtcblx0XHRcdFx0aXNPd24gPSAhIWRlc2M7XG5cblx0XHRcdFx0Ly8gQnkgY29udmVudGlvbiwgd2hlbiBhIGRhdGEgcHJvcGVydHkgaXMgY29udmVydGVkIHRvIGFuIGFjY2Vzc29yXG5cdFx0XHRcdC8vIHByb3BlcnR5IHRvIGVtdWxhdGUgYSBkYXRhIHByb3BlcnR5IHRoYXQgZG9lcyBub3Qgc3VmZmVyIGZyb21cblx0XHRcdFx0Ly8gdGhlIG92ZXJyaWRlIG1pc3Rha2UsIHRoYXQgYWNjZXNzb3IncyBnZXR0ZXIgaXMgbWFya2VkIHdpdGhcblx0XHRcdFx0Ly8gYW4gYG9yaWdpbmFsVmFsdWVgIHByb3BlcnR5LiBIZXJlLCB3aGVuIHdlIGRldGVjdCB0aGlzLCB3ZVxuXHRcdFx0XHQvLyB1cGhvbGQgdGhlIGlsbHVzaW9uIGJ5IHByZXRlbmRpbmcgdG8gc2VlIHRoYXQgb3JpZ2luYWwgZGF0YVxuXHRcdFx0XHQvLyBwcm9wZXJ0eSwgaS5lLiwgcmV0dXJuaW5nIHRoZSB2YWx1ZSByYXRoZXIgdGhhbiB0aGUgZ2V0dGVyXG5cdFx0XHRcdC8vIGl0c2VsZi5cblx0XHRcdFx0aWYgKGlzT3duICYmICdnZXQnIGluIGRlc2MgJiYgISgnb3JpZ2luYWxWYWx1ZScgaW4gZGVzYy5nZXQpKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBkZXNjLmdldDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpc093biA9IGhhc093bih2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc093biAmJiAhc2tpcEZ1cnRoZXJDYWNoaW5nKSB7XG5cdFx0XHRcdElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDkzMzY6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBHZXRJbnRyaW5zaWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyOCk7XG5cbnZhciAkZ09QRCA9IEdldEludHJpbnNpYygnJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlJywgdHJ1ZSk7XG5cbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0JGdPUEQgPSBudWxsO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gJGdPUEQ7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDcyMzk6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5NDApO1xuXG52YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9ycyA9IGZ1bmN0aW9uIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMoKSB7XG5cdHJldHVybiAhISRkZWZpbmVQcm9wZXJ0eTtcbn07XG5cbmhhc1Byb3BlcnR5RGVzY3JpcHRvcnMuaGFzQXJyYXlMZW5ndGhEZWZpbmVCdWcgPSBmdW5jdGlvbiBoYXNBcnJheUxlbmd0aERlZmluZUJ1ZygpIHtcblx0Ly8gbm9kZSB2MC42IGhhcyBhIGJ1ZyB3aGVyZSBhcnJheSBsZW5ndGhzIGNhbiBiZSBTZXQgYnV0IG5vdCBEZWZpbmVkXG5cdGlmICghJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0dHJ5IHtcblx0XHRyZXR1cm4gJGRlZmluZVByb3BlcnR5KFtdLCAnbGVuZ3RoJywgeyB2YWx1ZTogMSB9KS5sZW5ndGggIT09IDE7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJbiBGaXJlZm94IDQtMjIsIGRlZmluaW5nIGxlbmd0aCBvbiBhbiBhcnJheSB0aHJvd3MgYW4gZXhjZXB0aW9uLlxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvcnM7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDY4Njk6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdGVzdCA9IHtcblx0Zm9vOiB7fVxufTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzUHJvdG8oKSB7XG5cdHJldHVybiB7IF9fcHJvdG9fXzogdGVzdCB9LmZvbyA9PT0gdGVzdC5mb28gJiYgISh7IF9fcHJvdG9fXzogbnVsbCB9IGluc3RhbmNlb2YgJE9iamVjdCk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNTU4OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgb3JpZ1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTA4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNOYXRpdmVTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIG9yaWdTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIG9yaWdTeW1ib2woJ2ZvbycpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2woJ2JhcicpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRyZXR1cm4gaGFzU3ltYm9sU2hhbSgpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjkwODpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qIGVzbGludCBjb21wbGV4aXR5OiBbMiwgMThdLCBtYXgtc3RhdGVtZW50czogWzIsIDMzXSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7IHJldHVybiB0cnVlOyB9XG5cblx0dmFyIG9iaiA9IHt9O1xuXHR2YXIgc3ltID0gU3ltYm9sKCd0ZXN0Jyk7XG5cdHZhciBzeW1PYmogPSBPYmplY3Qoc3ltKTtcblx0aWYgKHR5cGVvZiBzeW0gPT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9vYmplY3QuYXNzaWduL2lzc3Vlcy8xN1xuXHQvLyBpZiAoc3ltIGluc3RhbmNlb2YgU3ltYm9sKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzRcblx0Ly8gaWYgKCEoc3ltT2JqIGluc3RhbmNlb2YgU3ltYm9sKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBpZiAodHlwZW9mIFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIGlmIChTdHJpbmcoc3ltKSAhPT0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bVZhbCA9IDQyO1xuXHRvYmpbc3ltXSA9IHN5bVZhbDtcblx0Zm9yIChzeW0gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby11bnJlYWNoYWJsZS1sb29wXG5cdGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKTtcblx0aWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKTtcblx0XHRpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTkxMzpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGhhc1N5bWJvbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5MDgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc1RvU3RyaW5nVGFnU2hhbXMoKSB7XG5cdHJldHVybiBoYXNTeW1ib2xzKCkgJiYgISFTeW1ib2wudG9TdHJpbmdUYWc7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4NTU0OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xudmFyICRoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxMzgpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBiaW5kLmNhbGwoY2FsbCwgJGhhc093bik7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDU2MTU6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5pZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gICAgfVxuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDUzODc6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBoYXNUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oMTkxMykoKTtcbnZhciBjYWxsQm91bmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4MTgpO1xuXG52YXIgJHRvU3RyaW5nID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG5cbnZhciBpc1N0YW5kYXJkQXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0aWYgKGhhc1RvU3RyaW5nVGFnICYmIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbHVlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiAkdG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcbn07XG5cbnZhciBpc0xlZ2FjeUFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdGlmIChpc1N0YW5kYXJkQXJndW1lbnRzKHZhbHVlKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHR0eXBlb2YgdmFsdWUubGVuZ3RoID09PSAnbnVtYmVyJyAmJlxuXHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0JHRvU3RyaW5nKHZhbHVlKSAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuXHRcdCR0b1N0cmluZyh2YWx1ZS5jYWxsZWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufTtcblxudmFyIHN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gaXNTdGFuZGFyZEFyZ3VtZW50cyhhcmd1bWVudHMpO1xufSgpKTtcblxuaXNTdGFuZGFyZEFyZ3VtZW50cy5pc0xlZ2FjeUFyZ3VtZW50cyA9IGlzTGVnYWN5QXJndW1lbnRzOyAvLyBmb3IgdGVzdHNcblxubW9kdWxlLmV4cG9ydHMgPSBzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzID8gaXNTdGFuZGFyZEFyZ3VtZW50cyA6IGlzTGVnYWN5QXJndW1lbnRzO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5NjE3OlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGZuVG9TdHIgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgcmVmbGVjdEFwcGx5ID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnICYmIFJlZmxlY3QgIT09IG51bGwgJiYgUmVmbGVjdC5hcHBseTtcbnZhciBiYWRBcnJheUxpa2U7XG52YXIgaXNDYWxsYWJsZU1hcmtlcjtcbmlmICh0eXBlb2YgcmVmbGVjdEFwcGx5ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcblx0dHJ5IHtcblx0XHRiYWRBcnJheUxpa2UgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdsZW5ndGgnLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dGhyb3cgaXNDYWxsYWJsZU1hcmtlcjtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRpc0NhbGxhYmxlTWFya2VyID0ge307XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcblx0XHRyZWZsZWN0QXBwbHkoZnVuY3Rpb24gKCkgeyB0aHJvdyA0MjsgfSwgbnVsbCwgYmFkQXJyYXlMaWtlKTtcblx0fSBjYXRjaCAoXykge1xuXHRcdGlmIChfICE9PSBpc0NhbGxhYmxlTWFya2VyKSB7XG5cdFx0XHRyZWZsZWN0QXBwbHkgPSBudWxsO1xuXHRcdH1cblx0fVxufSBlbHNlIHtcblx0cmVmbGVjdEFwcGx5ID0gbnVsbDtcbn1cblxudmFyIGNvbnN0cnVjdG9yUmVnZXggPSAvXlxccypjbGFzc1xcYi87XG52YXIgaXNFUzZDbGFzc0ZuID0gZnVuY3Rpb24gaXNFUzZDbGFzc0Z1bmN0aW9uKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0dmFyIGZuU3RyID0gZm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gY29uc3RydWN0b3JSZWdleC50ZXN0KGZuU3RyKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTsgLy8gbm90IGEgZnVuY3Rpb25cblx0fVxufTtcblxudmFyIHRyeUZ1bmN0aW9uT2JqZWN0ID0gZnVuY3Rpb24gdHJ5RnVuY3Rpb25Ub1N0cih2YWx1ZSkge1xuXHR0cnkge1xuXHRcdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGZuVG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG9iamVjdENsYXNzID0gJ1tvYmplY3QgT2JqZWN0XSc7XG52YXIgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG52YXIgZ2VuQ2xhc3MgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xudmFyIGRkYUNsYXNzID0gJ1tvYmplY3QgSFRNTEFsbENvbGxlY3Rpb25dJzsgLy8gSUUgMTFcbnZhciBkZGFDbGFzczIgPSAnW29iamVjdCBIVE1MIGRvY3VtZW50LmFsbCBjbGFzc10nO1xudmFyIGRkYUNsYXNzMyA9ICdbb2JqZWN0IEhUTUxDb2xsZWN0aW9uXSc7IC8vIElFIDktMTBcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgISFTeW1ib2wudG9TdHJpbmdUYWc7IC8vIGJldHRlcjogdXNlIGBoYXMtdG9zdHJpbmd0YWdgXG5cbnZhciBpc0lFNjggPSAhKDAgaW4gWyxdKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zcGFyc2UtYXJyYXlzLCBjb21tYS1zcGFjaW5nXG5cbnZhciBpc0REQSA9IGZ1bmN0aW9uIGlzRG9jdW1lbnREb3RBbGwoKSB7IHJldHVybiBmYWxzZTsgfTtcbmlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICdvYmplY3QnKSB7XG5cdC8vIEZpcmVmb3ggMyBjYW5vbmljYWxpemVzIEREQSB0byB1bmRlZmluZWQgd2hlbiBpdCdzIG5vdCBhY2Nlc3NlZCBkaXJlY3RseVxuXHR2YXIgYWxsID0gZG9jdW1lbnQuYWxsO1xuXHRpZiAodG9TdHIuY2FsbChhbGwpID09PSB0b1N0ci5jYWxsKGRvY3VtZW50LmFsbCkpIHtcblx0XHRpc0REQSA9IGZ1bmN0aW9uIGlzRG9jdW1lbnREb3RBbGwodmFsdWUpIHtcblx0XHRcdC8qIGdsb2JhbHMgZG9jdW1lbnQ6IGZhbHNlICovXG5cdFx0XHQvLyBpbiBJRSA2LTgsIHR5cGVvZiBkb2N1bWVudC5hbGwgaXMgXCJvYmplY3RcIiBhbmQgaXQncyB0cnV0aHlcblx0XHRcdGlmICgoaXNJRTY4IHx8ICF2YWx1ZSkgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JykpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR2YXIgc3RyID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0XHRcdFx0cmV0dXJuIChcblx0XHRcdFx0XHRcdHN0ciA9PT0gZGRhQ2xhc3Ncblx0XHRcdFx0XHRcdHx8IHN0ciA9PT0gZGRhQ2xhc3MyXG5cdFx0XHRcdFx0XHR8fCBzdHIgPT09IGRkYUNsYXNzMyAvLyBvcGVyYSAxMi4xNlxuXHRcdFx0XHRcdFx0fHwgc3RyID09PSBvYmplY3RDbGFzcyAvLyBJRSA2LThcblx0XHRcdFx0XHQpICYmIHZhbHVlKCcnKSA9PSBudWxsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7IC8qKi8gfVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWZsZWN0QXBwbHlcblx0PyBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7XG5cdFx0aWYgKGlzRERBKHZhbHVlKSkgeyByZXR1cm4gdHJ1ZTsgfVxuXHRcdGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdHRyeSB7XG5cdFx0XHRyZWZsZWN0QXBwbHkodmFsdWUsIG51bGwsIGJhZEFycmF5TGlrZSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0aWYgKGUgIT09IGlzQ2FsbGFibGVNYXJrZXIpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0fVxuXHRcdHJldHVybiAhaXNFUzZDbGFzc0ZuKHZhbHVlKSAmJiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7XG5cdH1cblx0OiBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7XG5cdFx0aWYgKGlzRERBKHZhbHVlKSkgeyByZXR1cm4gdHJ1ZTsgfVxuXHRcdGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGlmIChoYXNUb1N0cmluZ1RhZykgeyByZXR1cm4gdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpOyB9XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0dmFyIHN0ckNsYXNzID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0aWYgKHN0ckNsYXNzICE9PSBmbkNsYXNzICYmIHN0ckNsYXNzICE9PSBnZW5DbGFzcyAmJiAhKC9eXFxbb2JqZWN0IEhUTUwvKS50ZXN0KHN0ckNsYXNzKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRyZXR1cm4gdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpO1xuXHR9O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyNjI1OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZuVG9TdHIgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgaXNGblJlZ2V4ID0gL15cXHMqKD86ZnVuY3Rpb24pP1xcKi87XG52YXIgaGFzVG9TdHJpbmdUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5MTMpKCk7XG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgZ2V0R2VuZXJhdG9yRnVuYyA9IGZ1bmN0aW9uICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gZnVuY3Rpb24qKCkge30nKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdH1cbn07XG52YXIgR2VuZXJhdG9yRnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNHZW5lcmF0b3JGdW5jdGlvbihmbikge1xuXHRpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmIChpc0ZuUmVnZXgudGVzdChmblRvU3RyLmNhbGwoZm4pKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHR2YXIgc3RyID0gdG9TdHIuY2FsbChmbik7XG5cdFx0cmV0dXJuIHN0ciA9PT0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJztcblx0fVxuXHRpZiAoIWdldFByb3RvKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmICh0eXBlb2YgR2VuZXJhdG9yRnVuY3Rpb24gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0dmFyIGdlbmVyYXRvckZ1bmMgPSBnZXRHZW5lcmF0b3JGdW5jKCk7XG5cdFx0R2VuZXJhdG9yRnVuY3Rpb24gPSBnZW5lcmF0b3JGdW5jID8gZ2V0UHJvdG8oZ2VuZXJhdG9yRnVuYykgOiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gZ2V0UHJvdG8oZm4pID09PSBHZW5lcmF0b3JGdW5jdGlvbjtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDgwMDY6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKiBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtbnVtYmVyLmlzbmFuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDc4Mzg6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBjYWxsQmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oODQ5OCk7XG52YXIgZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODU3KTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDA2KTtcbnZhciBnZXRQb2x5ZmlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTU5MSk7XG52YXIgc2hpbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTY0MSk7XG5cbnZhciBwb2x5ZmlsbCA9IGNhbGxCaW5kKGdldFBvbHlmaWxsKCksIE51bWJlcik7XG5cbi8qIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1udW1iZXIuaXNuYW4gKi9cblxuZGVmaW5lKHBvbHlmaWxsLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBwb2x5ZmlsbDtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTU5MTpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGltcGxlbWVudGF0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDA2KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0aWYgKE51bWJlci5pc05hTiAmJiBOdW1iZXIuaXNOYU4oTmFOKSAmJiAhTnVtYmVyLmlzTmFOKCdhJykpIHtcblx0XHRyZXR1cm4gTnVtYmVyLmlzTmFOO1xuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE2NDE6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4NTcpO1xudmFyIGdldFBvbHlmaWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTkxKTtcblxuLyogaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW51bWJlci5pc25hbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1OdW1iZXJJc05hTigpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE51bWJlciwgeyBpc05hTjogcG9seWZpbGwgfSwge1xuXHRcdGlzTmFOOiBmdW5jdGlvbiB0ZXN0SXNOYU4oKSB7XG5cdFx0XHRyZXR1cm4gTnVtYmVyLmlzTmFOICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1OTQzOlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgd2hpY2hUeXBlZEFycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzMwKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1R5cGVkQXJyYXkodmFsdWUpIHtcblx0cmV0dXJuICEhd2hpY2hUeXBlZEFycmF5KHZhbHVlKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDIzNzI6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgbnVtYmVySXNOYU4gPSBmdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXMoYSwgYikge1xuXHRpZiAoYSA9PT0gMCAmJiBiID09PSAwKSB7XG5cdFx0cmV0dXJuIDEgLyBhID09PSAxIC8gYjtcblx0fVxuXHRpZiAoYSA9PT0gYikge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmIChudW1iZXJJc05hTihhKSAmJiBudW1iZXJJc05hTihiKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTk2ODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGRlZmluZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTg1Nyk7XG52YXIgY2FsbEJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0OTgpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzNzIpO1xudmFyIGdldFBvbHlmaWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTM3KTtcbnZhciBzaGltID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MDg3KTtcblxudmFyIHBvbHlmaWxsID0gY2FsbEJpbmQoZ2V0UG9seWZpbGwoKSwgT2JqZWN0KTtcblxuZGVmaW5lKHBvbHlmaWxsLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBwb2x5ZmlsbDtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTkzNzpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGltcGxlbWVudGF0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMzcyKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBPYmplY3QuaXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QuaXMgOiBpbXBsZW1lbnRhdGlvbjtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDUwODc6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBnZXRQb2x5ZmlsbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTkzNyk7XG52YXIgZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODU3KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltT2JqZWN0SXMoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShPYmplY3QsIHsgaXM6IHBvbHlmaWxsIH0sIHtcblx0XHRpczogZnVuY3Rpb24gdGVzdE9iamVjdElzKCkge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5pcyAhPT0gcG9seWZpbGw7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODE2MDpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGtleXNTaGltO1xuaWYgKCFPYmplY3Qua2V5cykge1xuXHQvLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxuXHR2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblx0dmFyIGlzQXJncyA9IF9fd2VicGFja19yZXF1aXJlX18oOTY4KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBnbG9iYWwtcmVxdWlyZVxuXHR2YXIgaXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblx0dmFyIGhhc0RvbnRFbnVtQnVnID0gIWlzRW51bWVyYWJsZS5jYWxsKHsgdG9TdHJpbmc6IG51bGwgfSwgJ3RvU3RyaW5nJyk7XG5cdHZhciBoYXNQcm90b0VudW1CdWcgPSBpc0VudW1lcmFibGUuY2FsbChmdW5jdGlvbiAoKSB7fSwgJ3Byb3RvdHlwZScpO1xuXHR2YXIgZG9udEVudW1zID0gW1xuXHRcdCd0b1N0cmluZycsXG5cdFx0J3RvTG9jYWxlU3RyaW5nJyxcblx0XHQndmFsdWVPZicsXG5cdFx0J2hhc093blByb3BlcnR5Jyxcblx0XHQnaXNQcm90b3R5cGVPZicsXG5cdFx0J3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcblx0XHQnY29uc3RydWN0b3InXG5cdF07XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSA9IGZ1bmN0aW9uIChvKSB7XG5cdFx0dmFyIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvO1xuXHR9O1xuXHR2YXIgZXhjbHVkZWRLZXlzID0ge1xuXHRcdCRhcHBsaWNhdGlvbkNhY2hlOiB0cnVlLFxuXHRcdCRjb25zb2xlOiB0cnVlLFxuXHRcdCRleHRlcm5hbDogdHJ1ZSxcblx0XHQkZnJhbWU6IHRydWUsXG5cdFx0JGZyYW1lRWxlbWVudDogdHJ1ZSxcblx0XHQkZnJhbWVzOiB0cnVlLFxuXHRcdCRpbm5lckhlaWdodDogdHJ1ZSxcblx0XHQkaW5uZXJXaWR0aDogdHJ1ZSxcblx0XHQkb25tb3pmdWxsc2NyZWVuY2hhbmdlOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5lcnJvcjogdHJ1ZSxcblx0XHQkb3V0ZXJIZWlnaHQ6IHRydWUsXG5cdFx0JG91dGVyV2lkdGg6IHRydWUsXG5cdFx0JHBhZ2VYT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYWdlWU9mZnNldDogdHJ1ZSxcblx0XHQkcGFyZW50OiB0cnVlLFxuXHRcdCRzY3JvbGxMZWZ0OiB0cnVlLFxuXHRcdCRzY3JvbGxUb3A6IHRydWUsXG5cdFx0JHNjcm9sbFg6IHRydWUsXG5cdFx0JHNjcm9sbFk6IHRydWUsXG5cdFx0JHNlbGY6IHRydWUsXG5cdFx0JHdlYmtpdEluZGV4ZWREQjogdHJ1ZSxcblx0XHQkd2Via2l0U3RvcmFnZUluZm86IHRydWUsXG5cdFx0JHdpbmRvdzogdHJ1ZVxuXHR9O1xuXHR2YXIgaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnID0gKGZ1bmN0aW9uICgpIHtcblx0XHQvKiBnbG9iYWwgd2luZG93ICovXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGZvciAodmFyIGsgaW4gd2luZG93KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoIWV4Y2x1ZGVkS2V5c1snJCcgKyBrXSAmJiBoYXMuY2FsbCh3aW5kb3csIGspICYmIHdpbmRvd1trXSAhPT0gbnVsbCAmJiB0eXBlb2Ygd2luZG93W2tdID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSh3aW5kb3dba10pO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KCkpO1xuXHR2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5ID0gZnVuY3Rpb24gKG8pIHtcblx0XHQvKiBnbG9iYWwgd2luZG93ICovXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcpIHtcblx0XHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9O1xuXG5cdGtleXNTaGltID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcblx0XHR2YXIgaXNPYmplY3QgPSBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCc7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdFx0dmFyIGlzQXJndW1lbnRzID0gaXNBcmdzKG9iamVjdCk7XG5cdFx0dmFyIGlzU3RyaW5nID0gaXNPYmplY3QgJiYgdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBTdHJpbmddJztcblx0XHR2YXIgdGhlS2V5cyA9IFtdO1xuXG5cdFx0aWYgKCFpc09iamVjdCAmJiAhaXNGdW5jdGlvbiAmJiAhaXNBcmd1bWVudHMpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3QnKTtcblx0XHR9XG5cblx0XHR2YXIgc2tpcFByb3RvID0gaGFzUHJvdG9FbnVtQnVnICYmIGlzRnVuY3Rpb247XG5cdFx0aWYgKGlzU3RyaW5nICYmIG9iamVjdC5sZW5ndGggPiAwICYmICFoYXMuY2FsbChvYmplY3QsIDApKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGkpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaXNBcmd1bWVudHMgJiYgb2JqZWN0Lmxlbmd0aCA+IDApIHtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgb2JqZWN0Lmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaikpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuXHRcdFx0XHRpZiAoIShza2lwUHJvdG8gJiYgbmFtZSA9PT0gJ3Byb3RvdHlwZScpICYmIGhhcy5jYWxsKG9iamVjdCwgbmFtZSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKG5hbWUpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChoYXNEb250RW51bUJ1Zykge1xuXHRcdFx0dmFyIHNraXBDb25zdHJ1Y3RvciA9IGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneShvYmplY3QpO1xuXG5cdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGRvbnRFbnVtcy5sZW5ndGg7ICsraykge1xuXHRcdFx0XHRpZiAoIShza2lwQ29uc3RydWN0b3IgJiYgZG9udEVudW1zW2tdID09PSAnY29uc3RydWN0b3InKSAmJiBoYXMuY2FsbChvYmplY3QsIGRvbnRFbnVtc1trXSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goZG9udEVudW1zW2tdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhlS2V5cztcblx0fTtcbn1cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDkyMjg6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpc0FyZ3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2OCk7XG5cbnZhciBvcmlnS2V5cyA9IE9iamVjdC5rZXlzO1xudmFyIGtleXNTaGltID0gb3JpZ0tleXMgPyBmdW5jdGlvbiBrZXlzKG8pIHsgcmV0dXJuIG9yaWdLZXlzKG8pOyB9IDogX193ZWJwYWNrX3JlcXVpcmVfXyg4MTYwKTtcblxudmFyIG9yaWdpbmFsS2V5cyA9IE9iamVjdC5rZXlzO1xuXG5rZXlzU2hpbS5zaGltID0gZnVuY3Rpb24gc2hpbU9iamVjdEtleXMoKSB7XG5cdGlmIChPYmplY3Qua2V5cykge1xuXHRcdHZhciBrZXlzV29ya3NXaXRoQXJndW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcblx0XHRcdC8vIFNhZmFyaSA1LjAgYnVnXG5cdFx0XHR2YXIgYXJncyA9IE9iamVjdC5rZXlzKGFyZ3VtZW50cyk7XG5cdFx0XHRyZXR1cm4gYXJncyAmJiBhcmdzLmxlbmd0aCA9PT0gYXJndW1lbnRzLmxlbmd0aDtcblx0XHR9KDEsIDIpKTtcblx0XHRpZiAoIWtleXNXb3Jrc1dpdGhBcmd1bWVudHMpIHtcblx0XHRcdE9iamVjdC5rZXlzID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBmdW5jLW5hbWUtbWF0Y2hpbmdcblx0XHRcdFx0aWYgKGlzQXJncyhvYmplY3QpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhzbGljZS5jYWxsKG9iamVjdCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBvcmlnaW5hbEtleXMob2JqZWN0KTtcblx0XHRcdH07XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdE9iamVjdC5rZXlzID0ga2V5c1NoaW07XG5cdH1cblx0cmV0dXJuIE9iamVjdC5rZXlzIHx8IGtleXNTaGltO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTY4OlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHR2YXIgc3RyID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdHZhciBpc0FyZ3MgPSBzdHIgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXHRpZiAoIWlzQXJncykge1xuXHRcdGlzQXJncyA9IHN0ciAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuXHRcdFx0dmFsdWUgIT09IG51bGwgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdFx0dG9TdHIuY2FsbCh2YWx1ZS5jYWxsZWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHR9XG5cdHJldHVybiBpc0FyZ3M7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5OTA3OlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjEwODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIEdldEludHJpbnNpYyA9IF9fd2VicGFja19yZXF1aXJlX18oNTI4KTtcbnZhciBkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4Nik7XG52YXIgaGFzRGVzY3JpcHRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyMzkpKCk7XG52YXIgZ09QRCA9IF9fd2VicGFja19yZXF1aXJlX18oOTMzNik7XG5cbnZhciAkVHlwZUVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNDY4KTtcbnZhciAkZmxvb3IgPSBHZXRJbnRyaW5zaWMoJyVNYXRoLmZsb29yJScpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXRGdW5jdGlvbkxlbmd0aChmbiwgbGVuZ3RoKSB7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYGZuYCBpcyBub3QgYSBmdW5jdGlvbicpO1xuXHR9XG5cdGlmICh0eXBlb2YgbGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBsZW5ndGggPCAwIHx8IGxlbmd0aCA+IDB4RkZGRkZGRkYgfHwgJGZsb29yKGxlbmd0aCkgIT09IGxlbmd0aCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbGVuZ3RoYCBtdXN0IGJlIGEgcG9zaXRpdmUgMzItYml0IGludGVnZXInKTtcblx0fVxuXG5cdHZhciBsb29zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmICEhYXJndW1lbnRzWzJdO1xuXG5cdHZhciBmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlID0gdHJ1ZTtcblx0dmFyIGZ1bmN0aW9uTGVuZ3RoSXNXcml0YWJsZSA9IHRydWU7XG5cdGlmICgnbGVuZ3RoJyBpbiBmbiAmJiBnT1BEKSB7XG5cdFx0dmFyIGRlc2MgPSBnT1BEKGZuLCAnbGVuZ3RoJyk7XG5cdFx0aWYgKGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0XHRmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlID0gZmFsc2U7XG5cdFx0fVxuXHRcdGlmIChkZXNjICYmICFkZXNjLndyaXRhYmxlKSB7XG5cdFx0XHRmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUgPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRpZiAoZnVuY3Rpb25MZW5ndGhJc0NvbmZpZ3VyYWJsZSB8fCBmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUgfHwgIWxvb3NlKSB7XG5cdFx0aWYgKGhhc0Rlc2NyaXB0b3JzKSB7XG5cdFx0XHRkZWZpbmUoLyoqIEB0eXBlIHtQYXJhbWV0ZXJzPGRlZmluZT5bMF19ICovIChmbiksICdsZW5ndGgnLCBsZW5ndGgsIHRydWUsIHRydWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZWZpbmUoLyoqIEB0eXBlIHtQYXJhbWV0ZXJzPGRlZmluZT5bMF19ICovIChmbiksICdsZW5ndGgnLCBsZW5ndGgpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZm47XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1MjcyOlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTUzMTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDdXJyZW50bHkgaW4gc3luYyB3aXRoIE5vZGUuanMgbGliL2ludGVybmFsL3V0aWwvdHlwZXMuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9jb21taXQvMTEyY2M3YzI3NTUxMjU0YWEyYjE3MDk4ZmI3NzQ4NjdmMDVlZDBkOVxuXG5cblxudmFyIGlzQXJndW1lbnRzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Mzg3KTtcbnZhciBpc0dlbmVyYXRvckZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjI1KTtcbnZhciB3aGljaFR5cGVkQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3MzApO1xudmFyIGlzVHlwZWRBcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oNTk0Myk7XG5cbmZ1bmN0aW9uIHVuY3VycnlUaGlzKGYpIHtcbiAgcmV0dXJuIGYuY2FsbC5iaW5kKGYpO1xufVxuXG52YXIgQmlnSW50U3VwcG9ydGVkID0gdHlwZW9mIEJpZ0ludCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgU3ltYm9sU3VwcG9ydGVkID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciBPYmplY3RUb1N0cmluZyA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpO1xuXG52YXIgbnVtYmVyVmFsdWUgPSB1bmN1cnJ5VGhpcyhOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YpO1xudmFyIHN0cmluZ1ZhbHVlID0gdW5jdXJyeVRoaXMoU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mKTtcbnZhciBib29sZWFuVmFsdWUgPSB1bmN1cnJ5VGhpcyhCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mKTtcblxuaWYgKEJpZ0ludFN1cHBvcnRlZCkge1xuICB2YXIgYmlnSW50VmFsdWUgPSB1bmN1cnJ5VGhpcyhCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YpO1xufVxuXG5pZiAoU3ltYm9sU3VwcG9ydGVkKSB7XG4gIHZhciBzeW1ib2xWYWx1ZSA9IHVuY3VycnlUaGlzKFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZik7XG59XG5cbmZ1bmN0aW9uIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIHByb3RvdHlwZVZhbHVlT2YpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgICBwcm90b3R5cGVWYWx1ZU9mKHZhbHVlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydHMuaXNBcmd1bWVudHNPYmplY3QgPSBpc0FyZ3VtZW50c09iamVjdDtcbmV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGlzR2VuZXJhdG9yRnVuY3Rpb247XG5leHBvcnRzLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcblxuLy8gVGFrZW4gZnJvbSBoZXJlIGFuZCBtb2RpZmllZCBmb3IgYmV0dGVyIGJyb3dzZXIgc3VwcG9ydFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9wLWlzLXByb21pc2UvYmxvYi9jZGEzNWE1MTNiZGEwM2Y5NzdhZDVjZGUzYTA3OWQyMzdlODJkN2VmL2luZGV4LmpzXG5mdW5jdGlvbiBpc1Byb21pc2UoaW5wdXQpIHtcblx0cmV0dXJuIChcblx0XHQoXG5cdFx0XHR0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiZcblx0XHRcdGlucHV0IGluc3RhbmNlb2YgUHJvbWlzZVxuXHRcdCkgfHxcblx0XHQoXG5cdFx0XHRpbnB1dCAhPT0gbnVsbCAmJlxuXHRcdFx0dHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0dHlwZW9mIGlucHV0LnRoZW4gPT09ICdmdW5jdGlvbicgJiZcblx0XHRcdHR5cGVvZiBpbnB1dC5jYXRjaCA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdClcblx0KTtcbn1cbmV4cG9ydHMuaXNQcm9taXNlID0gaXNQcm9taXNlO1xuXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWx1ZSkge1xuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcpIHtcbiAgICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgaXNUeXBlZEFycmF5KHZhbHVlKSB8fFxuICAgIGlzRGF0YVZpZXcodmFsdWUpXG4gICk7XG59XG5leHBvcnRzLmlzQXJyYXlCdWZmZXJWaWV3ID0gaXNBcnJheUJ1ZmZlclZpZXc7XG5cblxuZnVuY3Rpb24gaXNVaW50OEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnVWludDhBcnJheSc7XG59XG5leHBvcnRzLmlzVWludDhBcnJheSA9IGlzVWludDhBcnJheTtcblxuZnVuY3Rpb24gaXNVaW50OENsYW1wZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ1VpbnQ4Q2xhbXBlZEFycmF5Jztcbn1cbmV4cG9ydHMuaXNVaW50OENsYW1wZWRBcnJheSA9IGlzVWludDhDbGFtcGVkQXJyYXk7XG5cbmZ1bmN0aW9uIGlzVWludDE2QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdVaW50MTZBcnJheSc7XG59XG5leHBvcnRzLmlzVWludDE2QXJyYXkgPSBpc1VpbnQxNkFycmF5O1xuXG5mdW5jdGlvbiBpc1VpbnQzMkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnVWludDMyQXJyYXknO1xufVxuZXhwb3J0cy5pc1VpbnQzMkFycmF5ID0gaXNVaW50MzJBcnJheTtcblxuZnVuY3Rpb24gaXNJbnQ4QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdJbnQ4QXJyYXknO1xufVxuZXhwb3J0cy5pc0ludDhBcnJheSA9IGlzSW50OEFycmF5O1xuXG5mdW5jdGlvbiBpc0ludDE2QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdJbnQxNkFycmF5Jztcbn1cbmV4cG9ydHMuaXNJbnQxNkFycmF5ID0gaXNJbnQxNkFycmF5O1xuXG5mdW5jdGlvbiBpc0ludDMyQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdJbnQzMkFycmF5Jztcbn1cbmV4cG9ydHMuaXNJbnQzMkFycmF5ID0gaXNJbnQzMkFycmF5O1xuXG5mdW5jdGlvbiBpc0Zsb2F0MzJBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0Zsb2F0MzJBcnJheSc7XG59XG5leHBvcnRzLmlzRmxvYXQzMkFycmF5ID0gaXNGbG9hdDMyQXJyYXk7XG5cbmZ1bmN0aW9uIGlzRmxvYXQ2NEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnRmxvYXQ2NEFycmF5Jztcbn1cbmV4cG9ydHMuaXNGbG9hdDY0QXJyYXkgPSBpc0Zsb2F0NjRBcnJheTtcblxuZnVuY3Rpb24gaXNCaWdJbnQ2NEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnQmlnSW50NjRBcnJheSc7XG59XG5leHBvcnRzLmlzQmlnSW50NjRBcnJheSA9IGlzQmlnSW50NjRBcnJheTtcblxuZnVuY3Rpb24gaXNCaWdVaW50NjRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0JpZ1VpbnQ2NEFycmF5Jztcbn1cbmV4cG9ydHMuaXNCaWdVaW50NjRBcnJheSA9IGlzQmlnVWludDY0QXJyYXk7XG5cbmZ1bmN0aW9uIGlzTWFwVG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgTWFwXSc7XG59XG5pc01hcFRvU3RyaW5nLndvcmtpbmcgPSAoXG4gIHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzTWFwVG9TdHJpbmcobmV3IE1hcCgpKVxuKTtcblxuZnVuY3Rpb24gaXNNYXAodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBNYXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzTWFwVG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNNYXBUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgTWFwO1xufVxuZXhwb3J0cy5pc01hcCA9IGlzTWFwO1xuXG5mdW5jdGlvbiBpc1NldFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IFNldF0nO1xufVxuaXNTZXRUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc1NldFRvU3RyaW5nKG5ldyBTZXQoKSlcbik7XG5mdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNTZXRUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc1NldFRvU3RyaW5nKHZhbHVlKVxuICAgIDogdmFsdWUgaW5zdGFuY2VvZiBTZXQ7XG59XG5leHBvcnRzLmlzU2V0ID0gaXNTZXQ7XG5cbmZ1bmN0aW9uIGlzV2Vha01hcFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IFdlYWtNYXBdJztcbn1cbmlzV2Vha01hcFRvU3RyaW5nLndvcmtpbmcgPSAoXG4gIHR5cGVvZiBXZWFrTWFwICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc1dlYWtNYXBUb1N0cmluZyhuZXcgV2Vha01hcCgpKVxuKTtcbmZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzV2Vha01hcFRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzV2Vha01hcFRvU3RyaW5nKHZhbHVlKVxuICAgIDogdmFsdWUgaW5zdGFuY2VvZiBXZWFrTWFwO1xufVxuZXhwb3J0cy5pc1dlYWtNYXAgPSBpc1dlYWtNYXA7XG5cbmZ1bmN0aW9uIGlzV2Vha1NldFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IFdlYWtTZXRdJztcbn1cbmlzV2Vha1NldFRvU3RyaW5nLndvcmtpbmcgPSAoXG4gIHR5cGVvZiBXZWFrU2V0ICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc1dlYWtTZXRUb1N0cmluZyhuZXcgV2Vha1NldCgpKVxuKTtcbmZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICByZXR1cm4gaXNXZWFrU2V0VG9TdHJpbmcodmFsdWUpO1xufVxuZXhwb3J0cy5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG5cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuaXNBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmcgPSAoXG4gIHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNBcnJheUJ1ZmZlclRvU3RyaW5nKG5ldyBBcnJheUJ1ZmZlcigpKVxuKTtcbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI7XG59XG5leHBvcnRzLmlzQXJyYXlCdWZmZXIgPSBpc0FycmF5QnVmZmVyO1xuXG5mdW5jdGlvbiBpc0RhdGFWaWV3VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0YVZpZXddJztcbn1cbmlzRGF0YVZpZXdUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gIHR5cGVvZiBEYXRhVmlldyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNEYXRhVmlld1RvU3RyaW5nKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSksIDAsIDEpKVxuKTtcbmZ1bmN0aW9uIGlzRGF0YVZpZXcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBEYXRhVmlldyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNEYXRhVmlld1RvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzRGF0YVZpZXdUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgRGF0YVZpZXc7XG59XG5leHBvcnRzLmlzRGF0YVZpZXcgPSBpc0RhdGFWaWV3O1xuXG4vLyBTdG9yZSBhIGNvcHkgb2YgU2hhcmVkQXJyYXlCdWZmZXIgaW4gY2FzZSBpdCdzIGRlbGV0ZWQgZWxzZXdoZXJlXG52YXIgU2hhcmVkQXJyYXlCdWZmZXJDb3B5ID0gdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyA/IFNoYXJlZEFycmF5QnVmZmVyIDogdW5kZWZpbmVkO1xuZnVuY3Rpb24gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IFNoYXJlZEFycmF5QnVmZmVyXSc7XG59XG5mdW5jdGlvbiBpc1NoYXJlZEFycmF5QnVmZmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXJDb3B5ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmcgPSBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcobmV3IFNoYXJlZEFycmF5QnVmZmVyQ29weSgpKTtcbiAgfVxuXG4gIHJldHVybiBpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nKHZhbHVlKVxuICAgIDogdmFsdWUgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlckNvcHk7XG59XG5leHBvcnRzLmlzU2hhcmVkQXJyYXlCdWZmZXIgPSBpc1NoYXJlZEFycmF5QnVmZmVyO1xuXG5mdW5jdGlvbiBpc0FzeW5jRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nO1xufVxuZXhwb3J0cy5pc0FzeW5jRnVuY3Rpb24gPSBpc0FzeW5jRnVuY3Rpb247XG5cbmZ1bmN0aW9uIGlzTWFwSXRlcmF0b3IodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgTWFwIEl0ZXJhdG9yXSc7XG59XG5leHBvcnRzLmlzTWFwSXRlcmF0b3IgPSBpc01hcEl0ZXJhdG9yO1xuXG5mdW5jdGlvbiBpc1NldEl0ZXJhdG9yKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IFNldCBJdGVyYXRvcl0nO1xufVxuZXhwb3J0cy5pc1NldEl0ZXJhdG9yID0gaXNTZXRJdGVyYXRvcjtcblxuZnVuY3Rpb24gaXNHZW5lcmF0b3JPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgR2VuZXJhdG9yXSc7XG59XG5leHBvcnRzLmlzR2VuZXJhdG9yT2JqZWN0ID0gaXNHZW5lcmF0b3JPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzV2ViQXNzZW1ibHlDb21waWxlZE1vZHVsZSh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBXZWJBc3NlbWJseS5Nb2R1bGVdJztcbn1cbmV4cG9ydHMuaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlID0gaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlO1xuXG5mdW5jdGlvbiBpc051bWJlck9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgbnVtYmVyVmFsdWUpO1xufVxuZXhwb3J0cy5pc051bWJlck9iamVjdCA9IGlzTnVtYmVyT2JqZWN0O1xuXG5mdW5jdGlvbiBpc1N0cmluZ09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgc3RyaW5nVmFsdWUpO1xufVxuZXhwb3J0cy5pc1N0cmluZ09iamVjdCA9IGlzU3RyaW5nT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW5PYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIGJvb2xlYW5WYWx1ZSk7XG59XG5leHBvcnRzLmlzQm9vbGVhbk9iamVjdCA9IGlzQm9vbGVhbk9iamVjdDtcblxuZnVuY3Rpb24gaXNCaWdJbnRPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIEJpZ0ludFN1cHBvcnRlZCAmJiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBiaWdJbnRWYWx1ZSk7XG59XG5leHBvcnRzLmlzQmlnSW50T2JqZWN0ID0gaXNCaWdJbnRPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBTeW1ib2xTdXBwb3J0ZWQgJiYgY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgc3ltYm9sVmFsdWUpO1xufVxuZXhwb3J0cy5pc1N5bWJvbE9iamVjdCA9IGlzU3ltYm9sT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0JveGVkUHJpbWl0aXZlKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgaXNOdW1iZXJPYmplY3QodmFsdWUpIHx8XG4gICAgaXNTdHJpbmdPYmplY3QodmFsdWUpIHx8XG4gICAgaXNCb29sZWFuT2JqZWN0KHZhbHVlKSB8fFxuICAgIGlzQmlnSW50T2JqZWN0KHZhbHVlKSB8fFxuICAgIGlzU3ltYm9sT2JqZWN0KHZhbHVlKVxuICApO1xufVxuZXhwb3J0cy5pc0JveGVkUHJpbWl0aXZlID0gaXNCb3hlZFByaW1pdGl2ZTtcblxuZnVuY3Rpb24gaXNBbnlBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIChcbiAgICBpc0FycmF5QnVmZmVyKHZhbHVlKSB8fFxuICAgIGlzU2hhcmVkQXJyYXlCdWZmZXIodmFsdWUpXG4gICk7XG59XG5leHBvcnRzLmlzQW55QXJyYXlCdWZmZXIgPSBpc0FueUFycmF5QnVmZmVyO1xuXG5bJ2lzUHJveHknLCAnaXNFeHRlcm5hbCcsICdpc01vZHVsZU5hbWVzcGFjZU9iamVjdCddLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBtZXRob2QsIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgJyBpcyBub3Qgc3VwcG9ydGVkIGluIHVzZXJsYW5kJyk7XG4gICAgfVxuICB9KTtcbn0pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5MjA4OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG4vKiBwcm92aWRlZCBkZXBlbmRlbmN5ICovIHZhciBwcm9jZXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OTA3KTtcbi8qIHByb3ZpZGVkIGRlcGVuZGVuY3kgKi8gdmFyIGNvbnNvbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzNjQpO1xuLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgfHxcbiAgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgdmFyIGRlc2NyaXB0b3JzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXNjcmlwdG9yc1trZXlzW2ldXSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXlzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc2NyaXB0b3JzO1xuICB9O1xuXG52YXIgZm9ybWF0UmVnRXhwID0gLyVbc2RqJV0vZztcbmV4cG9ydHMuZm9ybWF0ID0gZnVuY3Rpb24oZikge1xuICBpZiAoIWlzU3RyaW5nKGYpKSB7XG4gICAgdmFyIG9iamVjdHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqZWN0cy5wdXNoKGluc3BlY3QoYXJndW1lbnRzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3RzLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHZhciBpID0gMTtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgdmFyIHN0ciA9IFN0cmluZyhmKS5yZXBsYWNlKGZvcm1hdFJlZ0V4cCwgZnVuY3Rpb24oeCkge1xuICAgIGlmICh4ID09PSAnJSUnKSByZXR1cm4gJyUnO1xuICAgIGlmIChpID49IGxlbikgcmV0dXJuIHg7XG4gICAgc3dpdGNoICh4KSB7XG4gICAgICBjYXNlICclcyc6IHJldHVybiBTdHJpbmcoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVkJzogcmV0dXJuIE51bWJlcihhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWonOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmdzW2krK10pO1xuICAgICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICB9KTtcbiAgZm9yICh2YXIgeCA9IGFyZ3NbaV07IGkgPCBsZW47IHggPSBhcmdzWysraV0pIHtcbiAgICBpZiAoaXNOdWxsKHgpIHx8ICFpc09iamVjdCh4KSkge1xuICAgICAgc3RyICs9ICcgJyArIHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciArPSAnICcgKyBpbnNwZWN0KHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxuXG4vLyBNYXJrIHRoYXQgYSBtZXRob2Qgc2hvdWxkIG5vdCBiZSB1c2VkLlxuLy8gUmV0dXJucyBhIG1vZGlmaWVkIGZ1bmN0aW9uIHdoaWNoIHdhcm5zIG9uY2UgYnkgZGVmYXVsdC5cbi8vIElmIC0tbm8tZGVwcmVjYXRpb24gaXMgc2V0LCB0aGVuIGl0IGlzIGEgbm8tb3AuXG5leHBvcnRzLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKGZuLCBtc2cpIHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLm5vRGVwcmVjYXRpb24gPT09IHRydWUpIHtcbiAgICByZXR1cm4gZm47XG4gIH1cblxuICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxuICBpZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuZGVwcmVjYXRlKGZuLCBtc2cpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0VudlJlZ2V4ID0gL14kLztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfREVCVUcpIHtcbiAgdmFyIGRlYnVnRW52ID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRztcbiAgZGVidWdFbnYgPSBkZWJ1Z0Vudi5yZXBsYWNlKC9bfFxcXFx7fSgpW1xcXV4kKz8uXS9nLCAnXFxcXCQmJylcbiAgICAucmVwbGFjZSgvXFwqL2csICcuKicpXG4gICAgLnJlcGxhY2UoLywvZywgJyR8XicpXG4gICAgLnRvVXBwZXJDYXNlKCk7XG4gIGRlYnVnRW52UmVnZXggPSBuZXcgUmVnRXhwKCdeJyArIGRlYnVnRW52ICsgJyQnLCAnaScpO1xufVxuZXhwb3J0cy5kZWJ1Z2xvZyA9IGZ1bmN0aW9uKHNldCkge1xuICBzZXQgPSBzZXQudG9VcHBlckNhc2UoKTtcbiAgaWYgKCFkZWJ1Z3Nbc2V0XSkge1xuICAgIGlmIChkZWJ1Z0VudlJlZ2V4LnRlc3Qoc2V0KSkge1xuICAgICAgdmFyIHBpZCA9IHByb2Nlc3MucGlkO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJyVzICVkOiAlcycsIHNldCwgcGlkLCBtc2cpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVidWdzW3NldF07XG59O1xuXG5cbi8qKlxuICogRWNob3MgdGhlIHZhbHVlIG9mIGEgdmFsdWUuIFRyeXMgdG8gcHJpbnQgdGhlIHZhbHVlIG91dFxuICogaW4gdGhlIGJlc3Qgd2F5IHBvc3NpYmxlIGdpdmVuIHRoZSBkaWZmZXJlbnQgdHlwZXMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHByaW50IG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIE9wdGlvbmFsIG9wdGlvbnMgb2JqZWN0IHRoYXQgYWx0ZXJzIHRoZSBvdXRwdXQuXG4gKi9cbi8qIGxlZ2FjeTogb2JqLCBzaG93SGlkZGVuLCBkZXB0aCwgY29sb3JzKi9cbmZ1bmN0aW9uIGluc3BlY3Qob2JqLCBvcHRzKSB7XG4gIC8vIGRlZmF1bHQgb3B0aW9uc1xuICB2YXIgY3R4ID0ge1xuICAgIHNlZW46IFtdLFxuICAgIHN0eWxpemU6IHN0eWxpemVOb0NvbG9yXG4gIH07XG4gIC8vIGxlZ2FjeS4uLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSBjdHguZGVwdGggPSBhcmd1bWVudHNbMl07XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDQpIGN0eC5jb2xvcnMgPSBhcmd1bWVudHNbM107XG4gIGlmIChpc0Jvb2xlYW4ob3B0cykpIHtcbiAgICAvLyBsZWdhY3kuLi5cbiAgICBjdHguc2hvd0hpZGRlbiA9IG9wdHM7XG4gIH0gZWxzZSBpZiAob3B0cykge1xuICAgIC8vIGdvdCBhbiBcIm9wdGlvbnNcIiBvYmplY3RcbiAgICBleHBvcnRzLl9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5leHBvcnRzLmluc3BlY3QgPSBpbnNwZWN0O1xuXG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gZXhwb3J0cy5pbnNwZWN0ICYmXG4gICAgICAvLyBBbHNvIGZpbHRlciBvdXQgYW55IHByb3RvdHlwZSBvYmplY3RzIHVzaW5nIHRoZSBjaXJjdWxhciBjaGVjay5cbiAgICAgICEodmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IucHJvdG90eXBlID09PSB2YWx1ZSkpIHtcbiAgICB2YXIgcmV0ID0gdmFsdWUuaW5zcGVjdChyZWN1cnNlVGltZXMsIGN0eCk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcbiAgdmFyIHZpc2libGVLZXlzID0gYXJyYXlUb0hhc2goa2V5cyk7XG5cbiAgaWYgKGN0eC5zaG93SGlkZGVuKSB7XG4gICAga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHZhbHVlKTtcbiAgfVxuXG4gIC8vIElFIGRvZXNuJ3QgbWFrZSBlcnJvciBmaWVsZHMgbm9uLWVudW1lcmFibGVcbiAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2R3dzUyc2J0KHY9dnMuOTQpLmFzcHhcbiAgaWYgKGlzRXJyb3IodmFsdWUpXG4gICAgICAmJiAoa2V5cy5pbmRleE9mKCdtZXNzYWdlJykgPj0gMCB8fCBrZXlzLmluZGV4T2YoJ2Rlc2NyaXB0aW9uJykgPj0gMCkpIHtcbiAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgLy8gU29tZSB0eXBlIG9mIG9iamVjdCB3aXRob3V0IHByb3BlcnRpZXMgY2FuIGJlIHNob3J0Y3V0dGVkLlxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgIHZhciBuYW1lID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tGdW5jdGlvbicgKyBuYW1lICsgJ10nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH1cbiAgICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAnZGF0ZScpO1xuICAgIH1cbiAgICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2UgPSAnJywgYXJyYXkgPSBmYWxzZSwgYnJhY2VzID0gWyd7JywgJ30nXTtcblxuICAvLyBNYWtlIEFycmF5IHNheSB0aGF0IHRoZXkgYXJlIEFycmF5XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIGFycmF5ID0gdHJ1ZTtcbiAgICBicmFjZXMgPSBbJ1snLCAnXSddO1xuICB9XG5cbiAgLy8gTWFrZSBmdW5jdGlvbnMgc2F5IHRoYXQgdGhleSBhcmUgZnVuY3Rpb25zXG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciBuID0gdmFsdWUubmFtZSA/ICc6ICcgKyB2YWx1ZS5uYW1lIDogJyc7XG4gICAgYmFzZSA9ICcgW0Z1bmN0aW9uJyArIG4gKyAnXSc7XG4gIH1cblxuICAvLyBNYWtlIFJlZ0V4cHMgc2F5IHRoYXQgdGhleSBhcmUgUmVnRXhwc1xuICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGRhdGVzIHdpdGggcHJvcGVydGllcyBmaXJzdCBzYXkgdGhlIGRhdGVcbiAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIH1cblxuICAvLyBNYWtlIGVycm9yIHdpdGggbWVzc2FnZSBmaXJzdCBzYXkgdGhlIGVycm9yXG4gIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDAgJiYgKCFhcnJheSB8fCB2YWx1ZS5sZW5ndGggPT0gMCkpIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArIGJyYWNlc1sxXTtcbiAgfVxuXG4gIGlmIChyZWN1cnNlVGltZXMgPCAwKSB7XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbT2JqZWN0XScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG5cbiAgY3R4LnNlZW4ucHVzaCh2YWx1ZSk7XG5cbiAgdmFyIG91dHB1dDtcbiAgaWYgKGFycmF5KSB7XG4gICAgb3V0cHV0ID0gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cyk7XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0ga2V5cy5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSk7XG4gICAgfSk7XG4gIH1cblxuICBjdHguc2Vlbi5wb3AoKTtcblxuICByZXR1cm4gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKSB7XG4gIGlmIChpc1VuZGVmaW5lZCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCd1bmRlZmluZWQnLCAndW5kZWZpbmVkJyk7XG4gIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICB2YXIgc2ltcGxlID0gJ1xcJycgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJykgKyAnXFwnJztcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoc2ltcGxlLCAnc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ251bWJlcicpO1xuICBpZiAoaXNCb29sZWFuKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJycgKyB2YWx1ZSwgJ2Jvb2xlYW4nKTtcbiAgLy8gRm9yIHNvbWUgcmVhc29uIHR5cGVvZiBudWxsIGlzIFwib2JqZWN0XCIsIHNvIHNwZWNpYWwgY2FzZSBoZXJlLlxuICBpZiAoaXNOdWxsKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ251bGwnLCAnbnVsbCcpO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiAnWycgKyBFcnJvci5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgKyAnXSc7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5cykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KHZhbHVlLCBTdHJpbmcoaSkpKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIFN0cmluZyhpKSwgdHJ1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQucHVzaCgnJyk7XG4gICAgfVxuICB9XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoIWtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAga2V5LCB0cnVlKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KSB7XG4gIHZhciBuYW1lLCBzdHIsIGRlc2M7XG4gIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHZhbHVlLCBrZXkpIHx8IHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbiAgaWYgKGRlc2MuZ2V0KSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlci9TZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlc2Muc2V0KSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChjdHguc2Vlbi5pbmRleE9mKGRlc2MudmFsdWUpIDwgMCkge1xuICAgICAgaWYgKGlzTnVsbChyZWN1cnNlVGltZXMpKSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIHJlY3Vyc2VUaW1lcyAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIHN0ciA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKS5zbGljZSgyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDEsIC0xKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnbmFtZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKF5cInxcIiQpL2csIFwiJ1wiKTtcbiAgICAgIG5hbWUgPSBjdHguc3R5bGl6ZShuYW1lLCAnc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWUgKyAnOiAnICsgc3RyO1xufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKSB7XG4gIHZhciBudW1MaW5lc0VzdCA9IDA7XG4gIHZhciBsZW5ndGggPSBvdXRwdXQucmVkdWNlKGZ1bmN0aW9uKHByZXYsIGN1cikge1xuICAgIG51bUxpbmVzRXN0Kys7XG4gICAgaWYgKGN1ci5pbmRleE9mKCdcXG4nKSA+PSAwKSBudW1MaW5lc0VzdCsrO1xuICAgIHJldHVybiBwcmV2ICsgY3VyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGRcXGQ/bS9nLCAnJykubGVuZ3RoICsgMTtcbiAgfSwgMCk7XG5cbiAgaWYgKGxlbmd0aCA+IDYwKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArXG4gICAgICAgICAgIChiYXNlID09PSAnJyA/ICcnIDogYmFzZSArICdcXG4gJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBvdXRwdXQuam9pbignLFxcbiAgJykgK1xuICAgICAgICAgICAnICcgK1xuICAgICAgICAgICBicmFjZXNbMV07XG4gIH1cblxuICByZXR1cm4gYnJhY2VzWzBdICsgYmFzZSArICcgJyArIG91dHB1dC5qb2luKCcsICcpICsgJyAnICsgYnJhY2VzWzFdO1xufVxuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5leHBvcnRzLnR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTMxKTtcblxuZnVuY3Rpb24gaXNBcnJheShhcikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcik7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBpc09iamVjdChyZSkgJiYgb2JqZWN0VG9TdHJpbmcocmUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cbmV4cG9ydHMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbmV4cG9ydHMudHlwZXMuaXNSZWdFeHAgPSBpc1JlZ0V4cDtcblxuZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG59XG5leHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG5cbmZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuZXhwb3J0cy5pc0RhdGUgPSBpc0RhdGU7XG5leHBvcnRzLnR5cGVzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5leHBvcnRzLmlzRXJyb3IgPSBpc0Vycm9yO1xuZXhwb3J0cy50eXBlcy5pc05hdGl2ZUVycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IF9fd2VicGFja19yZXF1aXJlX18oNTI3Mik7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydHMubG9nID0gZnVuY3Rpb24oKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGV4cG9ydHMuZm9ybWF0LmFwcGx5KGV4cG9ydHMsIGFyZ3VtZW50cykpO1xufTtcblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuZXhwb3J0cy5pbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNTYxNSk7XG5cbmV4cG9ydHMuX2V4dGVuZCA9IGZ1bmN0aW9uKG9yaWdpbiwgYWRkKSB7XG4gIC8vIERvbid0IGRvIGFueXRoaW5nIGlmIGFkZCBpc24ndCBhbiBvYmplY3RcbiAgaWYgKCFhZGQgfHwgIWlzT2JqZWN0KGFkZCkpIHJldHVybiBvcmlnaW47XG5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuXG52YXIga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2woJ3V0aWwucHJvbWlzaWZ5LmN1c3RvbScpIDogdW5kZWZpbmVkO1xuXG5leHBvcnRzLnByb21pc2lmeSA9IGZ1bmN0aW9uIHByb21pc2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCAmJiBvcmlnaW5hbFtrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2xdKSB7XG4gICAgdmFyIGZuID0gb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXTtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ1dGlsLnByb21pc2lmeS5jdXN0b21cIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgZnVuY3Rpb24gZm4oKSB7XG4gICAgdmFyIHByb21pc2VSZXNvbHZlLCBwcm9taXNlUmVqZWN0O1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcHJvbWlzZVJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgcHJvbWlzZVJlamVjdCA9IHJlamVjdDtcbiAgICB9KTtcblxuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cbiAgICBhcmdzLnB1c2goZnVuY3Rpb24gKGVyciwgdmFsdWUpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZVJlc29sdmUodmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcHJvbWlzZVJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGZuLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcblxuICBpZiAoa0N1c3RvbVByb21pc2lmaWVkU3ltYm9sKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCwge1xuICAgIHZhbHVlOiBmbiwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoXG4gICAgZm4sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbClcbiAgKTtcbn1cblxuZXhwb3J0cy5wcm9taXNpZnkuY3VzdG9tID0ga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXG5cbmZ1bmN0aW9uIGNhbGxiYWNraWZ5T25SZWplY3RlZChyZWFzb24sIGNiKSB7XG4gIC8vIGAhcmVhc29uYCBndWFyZCBpbnNwaXJlZCBieSBibHVlYmlyZCAoUmVmOiBodHRwczovL2dvby5nbC90NUlTNk0pLlxuICAvLyBCZWNhdXNlIGBudWxsYCBpcyBhIHNwZWNpYWwgZXJyb3IgdmFsdWUgaW4gY2FsbGJhY2tzIHdoaWNoIG1lYW5zIFwibm8gZXJyb3JcbiAgLy8gb2NjdXJyZWRcIiwgd2UgZXJyb3Itd3JhcCBzbyB0aGUgY2FsbGJhY2sgY29uc3VtZXIgY2FuIGRpc3Rpbmd1aXNoIGJldHdlZW5cbiAgLy8gXCJ0aGUgcHJvbWlzZSByZWplY3RlZCB3aXRoIG51bGxcIiBvciBcInRoZSBwcm9taXNlIGZ1bGZpbGxlZCB3aXRoIHVuZGVmaW5lZFwiLlxuICBpZiAoIXJlYXNvbikge1xuICAgIHZhciBuZXdSZWFzb24gPSBuZXcgRXJyb3IoJ1Byb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggYSBmYWxzeSB2YWx1ZScpO1xuICAgIG5ld1JlYXNvbi5yZWFzb24gPSByZWFzb247XG4gICAgcmVhc29uID0gbmV3UmVhc29uO1xuICB9XG4gIHJldHVybiBjYihyZWFzb24pO1xufVxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeShvcmlnaW5hbCkge1xuICBpZiAodHlwZW9mIG9yaWdpbmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwib3JpZ2luYWxcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgfVxuXG4gIC8vIFdlIERPIE5PVCByZXR1cm4gdGhlIHByb21pc2UgYXMgaXQgZ2l2ZXMgdGhlIHVzZXIgYSBmYWxzZSBzZW5zZSB0aGF0XG4gIC8vIHRoZSBwcm9taXNlIGlzIGFjdHVhbGx5IHNvbWVob3cgcmVsYXRlZCB0byB0aGUgY2FsbGJhY2sncyBleGVjdXRpb25cbiAgLy8gYW5kIHRoYXQgdGhlIGNhbGxiYWNrIHRocm93aW5nIHdpbGwgcmVqZWN0IHRoZSBwcm9taXNlLlxuICBmdW5jdGlvbiBjYWxsYmFja2lmaWVkKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIHZhciBtYXliZUNiID0gYXJncy5wb3AoKTtcbiAgICBpZiAodHlwZW9mIG1heWJlQ2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBsYXN0IGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGNiID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbWF5YmVDYi5hcHBseShzZWxmLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgLy8gSW4gdHJ1ZSBub2RlIHN0eWxlIHdlIHByb2Nlc3MgdGhlIGNhbGxiYWNrIG9uIGBuZXh0VGlja2Agd2l0aCBhbGwgdGhlXG4gICAgLy8gaW1wbGljYXRpb25zIChzdGFjaywgYHVuY2F1Z2h0RXhjZXB0aW9uYCwgYGFzeW5jX2hvb2tzYClcbiAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKVxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmV0KSB7IHByb2Nlc3MubmV4dFRpY2soY2IuYmluZChudWxsLCBudWxsLCByZXQpKSB9LFxuICAgICAgICAgICAgZnVuY3Rpb24ocmVqKSB7IHByb2Nlc3MubmV4dFRpY2soY2FsbGJhY2tpZnlPblJlamVjdGVkLmJpbmQobnVsbCwgcmVqLCBjYikpIH0pO1xuICB9XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGNhbGxiYWNraWZpZWQsIE9iamVjdC5nZXRQcm90b3R5cGVPZihvcmlnaW5hbCkpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjYWxsYmFja2lmaWVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9yaWdpbmFsKSk7XG4gIHJldHVybiBjYWxsYmFja2lmaWVkO1xufVxuZXhwb3J0cy5jYWxsYmFja2lmeSA9IGNhbGxiYWNraWZ5O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2ODI3OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NzI5KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDY3Mjk6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLmNyZWF0ZU1lc3NhZ2VDb25uZWN0aW9uID0gZXhwb3J0cy5Ccm93c2VyTWVzc2FnZVdyaXRlciA9IGV4cG9ydHMuQnJvd3Nlck1lc3NhZ2VSZWFkZXIgPSB2b2lkIDA7XG5jb25zdCByaWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzMxMik7XG4vLyBJbnN0YWxsIHRoZSBicm93c2VyIHJ1bnRpbWUgYWJzdHJhY3QuXG5yaWxfMS5kZWZhdWx0Lmluc3RhbGwoKTtcbmNvbnN0IGFwaV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NjcyKTtcbl9fZXhwb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDc2NzIpLCBleHBvcnRzKTtcbmNsYXNzIEJyb3dzZXJNZXNzYWdlUmVhZGVyIGV4dGVuZHMgYXBpXzEuQWJzdHJhY3RNZXNzYWdlUmVhZGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3J0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX29uRGF0YSA9IG5ldyBhcGlfMS5FbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VMaXN0ZW5lciA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25EYXRhLmZpcmUoZXZlbnQuZGF0YSk7XG4gICAgICAgIH07XG4gICAgICAgIHBvcnQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoZXZlbnQpID0+IHRoaXMuZmlyZUVycm9yKGV2ZW50KSk7XG4gICAgICAgIHBvcnQub25tZXNzYWdlID0gdGhpcy5fbWVzc2FnZUxpc3RlbmVyO1xuICAgIH1cbiAgICBsaXN0ZW4oY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uRGF0YS5ldmVudChjYWxsYmFjayk7XG4gICAgfVxufVxuZXhwb3J0cy5Ccm93c2VyTWVzc2FnZVJlYWRlciA9IEJyb3dzZXJNZXNzYWdlUmVhZGVyO1xuY2xhc3MgQnJvd3Nlck1lc3NhZ2VXcml0ZXIgZXh0ZW5kcyBhcGlfMS5BYnN0cmFjdE1lc3NhZ2VXcml0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHBvcnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5wb3J0ID0gcG9ydDtcbiAgICAgICAgdGhpcy5lcnJvckNvdW50ID0gMDtcbiAgICAgICAgcG9ydC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIChldmVudCkgPT4gdGhpcy5maXJlRXJyb3IoZXZlbnQpKTtcbiAgICB9XG4gICAgd3JpdGUobXNnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLnBvcnQucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IsIG1zZyk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhbmRsZUVycm9yKGVycm9yLCBtc2cpIHtcbiAgICAgICAgdGhpcy5lcnJvckNvdW50Kys7XG4gICAgICAgIHRoaXMuZmlyZUVycm9yKGVycm9yLCBtc2csIHRoaXMuZXJyb3JDb3VudCk7XG4gICAgfVxuICAgIGVuZCgpIHtcbiAgICB9XG59XG5leHBvcnRzLkJyb3dzZXJNZXNzYWdlV3JpdGVyID0gQnJvd3Nlck1lc3NhZ2VXcml0ZXI7XG5mdW5jdGlvbiBjcmVhdGVNZXNzYWdlQ29ubmVjdGlvbihyZWFkZXIsIHdyaXRlciwgbG9nZ2VyLCBvcHRpb25zKSB7XG4gICAgaWYgKGxvZ2dlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvZ2dlciA9IGFwaV8xLk51bGxMb2dnZXI7XG4gICAgfVxuICAgIGlmIChhcGlfMS5Db25uZWN0aW9uU3RyYXRlZ3kuaXMob3B0aW9ucykpIHtcbiAgICAgICAgb3B0aW9ucyA9IHsgY29ubmVjdGlvblN0cmF0ZWd5OiBvcHRpb25zIH07XG4gICAgfVxuICAgIHJldHVybiAoMCwgYXBpXzEuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24pKHJlYWRlciwgd3JpdGVyLCBsb2dnZXIsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5jcmVhdGVNZXNzYWdlQ29ubmVjdGlvbiA9IGNyZWF0ZU1lc3NhZ2VDb25uZWN0aW9uO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMzEyOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIHByb3ZpZGVkIGRlcGVuZGVuY3kgKi8gdmFyIGNvbnNvbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzNjQpO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmNvbnN0IGFwaV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NjcyKTtcbmNsYXNzIE1lc3NhZ2VCdWZmZXIgZXh0ZW5kcyBhcGlfMS5BYnN0cmFjdE1lc3NhZ2VCdWZmZXIge1xuICAgIGNvbnN0cnVjdG9yKGVuY29kaW5nID0gJ3V0Zi04Jykge1xuICAgICAgICBzdXBlcihlbmNvZGluZyk7XG4gICAgICAgIHRoaXMuYXNjaWlEZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCdhc2NpaScpO1xuICAgIH1cbiAgICBlbXB0eUJ1ZmZlcigpIHtcbiAgICAgICAgcmV0dXJuIE1lc3NhZ2VCdWZmZXIuZW1wdHlCdWZmZXI7XG4gICAgfVxuICAgIGZyb21TdHJpbmcodmFsdWUsIF9lbmNvZGluZykge1xuICAgICAgICByZXR1cm4gKG5ldyBUZXh0RW5jb2RlcigpKS5lbmNvZGUodmFsdWUpO1xuICAgIH1cbiAgICB0b1N0cmluZyh2YWx1ZSwgZW5jb2RpbmcpIHtcbiAgICAgICAgaWYgKGVuY29kaW5nID09PSAnYXNjaWknKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hc2NpaURlY29kZXIuZGVjb2RlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAobmV3IFRleHREZWNvZGVyKGVuY29kaW5nKSkuZGVjb2RlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc05hdGl2ZShidWZmZXIsIGxlbmd0aCkge1xuICAgICAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKDAsIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWxsb2NOYXRpdmUobGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIH1cbn1cbk1lc3NhZ2VCdWZmZXIuZW1wdHlCdWZmZXIgPSBuZXcgVWludDhBcnJheSgwKTtcbmNsYXNzIFJlYWRhYmxlU3RyZWFtV3JhcHBlciB7XG4gICAgY29uc3RydWN0b3Ioc29ja2V0KSB7XG4gICAgICAgIHRoaXMuc29ja2V0ID0gc29ja2V0O1xuICAgICAgICB0aGlzLl9vbkRhdGEgPSBuZXcgYXBpXzEuRW1pdHRlcigpO1xuICAgICAgICB0aGlzLl9tZXNzYWdlTGlzdGVuZXIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJsb2IgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgYmxvYi5hcnJheUJ1ZmZlcigpLnRoZW4oKGJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRGF0YS5maXJlKG5ldyBVaW50OEFycmF5KGJ1ZmZlcikpO1xuICAgICAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICgwLCBhcGlfMS5SQUwpKCkuY29uc29sZS5lcnJvcihgQ29udmVydGluZyBibG9iIHRvIGFycmF5IGJ1ZmZlciBmYWlsZWQuYCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuX21lc3NhZ2VMaXN0ZW5lcik7XG4gICAgfVxuICAgIG9uQ2xvc2UobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiBhcGlfMS5EaXNwb3NhYmxlLmNyZWF0ZSgoKSA9PiB0aGlzLnNvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbG9zZScsIGxpc3RlbmVyKSk7XG4gICAgfVxuICAgIG9uRXJyb3IobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiBhcGlfMS5EaXNwb3NhYmxlLmNyZWF0ZSgoKSA9PiB0aGlzLnNvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGxpc3RlbmVyKSk7XG4gICAgfVxuICAgIG9uRW5kKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2VuZCcsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIGFwaV8xLkRpc3Bvc2FibGUuY3JlYXRlKCgpID0+IHRoaXMuc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZCcsIGxpc3RlbmVyKSk7XG4gICAgfVxuICAgIG9uRGF0YShsaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fb25EYXRhLmV2ZW50KGxpc3RlbmVyKTtcbiAgICB9XG59XG5jbGFzcyBXcml0YWJsZVN0cmVhbVdyYXBwZXIge1xuICAgIGNvbnN0cnVjdG9yKHNvY2tldCkge1xuICAgICAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcbiAgICB9XG4gICAgb25DbG9zZShsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIGFwaV8xLkRpc3Bvc2FibGUuY3JlYXRlKCgpID0+IHRoaXMuc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgbGlzdGVuZXIpKTtcbiAgICB9XG4gICAgb25FcnJvcihsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIGFwaV8xLkRpc3Bvc2FibGUuY3JlYXRlKCgpID0+IHRoaXMuc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgbGlzdGVuZXIpKTtcbiAgICB9XG4gICAgb25FbmQobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignZW5kJywgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gYXBpXzEuRGlzcG9zYWJsZS5jcmVhdGUoKCkgPT4gdGhpcy5zb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW5kJywgbGlzdGVuZXIpKTtcbiAgICB9XG4gICAgd3JpdGUoZGF0YSwgZW5jb2RpbmcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgZW5jb2RpbmcgIT09ICd1dGYtOCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluIGEgQnJvd3NlciBlbnZpcm9ubWVudHMgb25seSB1dGYtOCB0ZXh0IGVuY29kaW5nIGlzIHN1cHBvcnRlZC4gQnV0IGdvdCBlbmNvZGluZzogJHtlbmNvZGluZ31gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc29ja2V0LnNlbmQoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5zZW5kKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgZW5kKCkge1xuICAgICAgICB0aGlzLnNvY2tldC5jbG9zZSgpO1xuICAgIH1cbn1cbmNvbnN0IF90ZXh0RW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuY29uc3QgX3JpbCA9IE9iamVjdC5mcmVlemUoe1xuICAgIG1lc3NhZ2VCdWZmZXI6IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBjcmVhdGU6IChlbmNvZGluZykgPT4gbmV3IE1lc3NhZ2VCdWZmZXIoZW5jb2RpbmcpXG4gICAgfSksXG4gICAgYXBwbGljYXRpb25Kc29uOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgZW5jb2RlcjogT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgICAgICBuYW1lOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICBlbmNvZGU6IChtc2csIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5jaGFyc2V0ICE9PSAndXRmLTgnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW4gYSBCcm93c2VyIGVudmlyb25tZW50cyBvbmx5IHV0Zi04IHRleHQgZW5jb2RpbmcgaXMgc3VwcG9ydGVkLiBCdXQgZ290IGVuY29kaW5nOiAke29wdGlvbnMuY2hhcnNldH1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShfdGV4dEVuY29kZXIuZW5jb2RlKEpTT04uc3RyaW5naWZ5KG1zZywgdW5kZWZpbmVkLCAwKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgZGVjb2RlcjogT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgICAgICBuYW1lOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICBkZWNvZGU6IChidWZmZXIsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIShidWZmZXIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluIGEgQnJvd3NlciBlbnZpcm9ubWVudHMgb25seSBVaW50OEFycmF5cyBhcmUgc3VwcG9ydGVkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKEpTT04ucGFyc2UobmV3IFRleHREZWNvZGVyKG9wdGlvbnMuY2hhcnNldCkuZGVjb2RlKGJ1ZmZlcikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9KSxcbiAgICBzdHJlYW06IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBhc1JlYWRhYmxlU3RyZWFtOiAoc29ja2V0KSA9PiBuZXcgUmVhZGFibGVTdHJlYW1XcmFwcGVyKHNvY2tldCksXG4gICAgICAgIGFzV3JpdGFibGVTdHJlYW06IChzb2NrZXQpID0+IG5ldyBXcml0YWJsZVN0cmVhbVdyYXBwZXIoc29ja2V0KVxuICAgIH0pLFxuICAgIGNvbnNvbGU6IGNvbnNvbGUsXG4gICAgdGltZXI6IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCBtcywgLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlID0gc2V0VGltZW91dChjYWxsYmFjaywgbXMsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHsgZGlzcG9zZTogKCkgPT4gY2xlYXJUaW1lb3V0KGhhbmRsZSkgfTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0SW1tZWRpYXRlKGNhbGxiYWNrLCAuLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCBoYW5kbGUgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IGNsZWFyVGltZW91dChoYW5kbGUpIH07XG4gICAgICAgIH0sXG4gICAgICAgIHNldEludGVydmFsKGNhbGxiYWNrLCBtcywgLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlID0gc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIG1zLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IGNsZWFySW50ZXJ2YWwoaGFuZGxlKSB9O1xuICAgICAgICB9LFxuICAgIH0pXG59KTtcbmZ1bmN0aW9uIFJJTCgpIHtcbiAgICByZXR1cm4gX3JpbDtcbn1cbihmdW5jdGlvbiAoUklMKSB7XG4gICAgZnVuY3Rpb24gaW5zdGFsbCgpIHtcbiAgICAgICAgYXBpXzEuUkFMLmluc3RhbGwoX3JpbCk7XG4gICAgfVxuICAgIFJJTC5pbnN0YWxsID0gaW5zdGFsbDtcbn0pKFJJTCB8fCAoUklMID0ge30pKTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gUklMO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3NjcyOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uLy4uL3R5cGluZ3MvdGhlbmFibGUuZC50c1wiIC8+XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuUHJvZ3Jlc3NUeXBlID0gZXhwb3J0cy5Qcm9ncmVzc1Rva2VuID0gZXhwb3J0cy5jcmVhdGVNZXNzYWdlQ29ubmVjdGlvbiA9IGV4cG9ydHMuTnVsbExvZ2dlciA9IGV4cG9ydHMuQ29ubmVjdGlvbk9wdGlvbnMgPSBleHBvcnRzLkNvbm5lY3Rpb25TdHJhdGVneSA9IGV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlQnVmZmVyID0gZXhwb3J0cy5Xcml0ZWFibGVTdHJlYW1NZXNzYWdlV3JpdGVyID0gZXhwb3J0cy5BYnN0cmFjdE1lc3NhZ2VXcml0ZXIgPSBleHBvcnRzLk1lc3NhZ2VXcml0ZXIgPSBleHBvcnRzLlJlYWRhYmxlU3RyZWFtTWVzc2FnZVJlYWRlciA9IGV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlUmVhZGVyID0gZXhwb3J0cy5NZXNzYWdlUmVhZGVyID0gZXhwb3J0cy5TaGFyZWRBcnJheVJlY2VpdmVyU3RyYXRlZ3kgPSBleHBvcnRzLlNoYXJlZEFycmF5U2VuZGVyU3RyYXRlZ3kgPSBleHBvcnRzLkNhbmNlbGxhdGlvblRva2VuID0gZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlblNvdXJjZSA9IGV4cG9ydHMuRW1pdHRlciA9IGV4cG9ydHMuRXZlbnQgPSBleHBvcnRzLkRpc3Bvc2FibGUgPSBleHBvcnRzLkxSVUNhY2hlID0gZXhwb3J0cy5Ub3VjaCA9IGV4cG9ydHMuTGlua2VkTWFwID0gZXhwb3J0cy5QYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlOSA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTggPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGU3ID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNiA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTUgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGU0ID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMyA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTIgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGUxID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMCA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZSA9IGV4cG9ydHMuRXJyb3JDb2RlcyA9IGV4cG9ydHMuUmVzcG9uc2VFcnJvciA9IGV4cG9ydHMuUmVxdWVzdFR5cGU5ID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTggPSBleHBvcnRzLlJlcXVlc3RUeXBlNyA9IGV4cG9ydHMuUmVxdWVzdFR5cGU2ID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTUgPSBleHBvcnRzLlJlcXVlc3RUeXBlNCA9IGV4cG9ydHMuUmVxdWVzdFR5cGUzID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTIgPSBleHBvcnRzLlJlcXVlc3RUeXBlMSA9IGV4cG9ydHMuUmVxdWVzdFR5cGUwID0gZXhwb3J0cy5SZXF1ZXN0VHlwZSA9IGV4cG9ydHMuTWVzc2FnZSA9IGV4cG9ydHMuUkFMID0gdm9pZCAwO1xuZXhwb3J0cy5NZXNzYWdlU3RyYXRlZ3kgPSBleHBvcnRzLkNhbmNlbGxhdGlvblN0cmF0ZWd5ID0gZXhwb3J0cy5DYW5jZWxsYXRpb25TZW5kZXJTdHJhdGVneSA9IGV4cG9ydHMuQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IGV4cG9ydHMuQ29ubmVjdGlvbkVycm9yID0gZXhwb3J0cy5Db25uZWN0aW9uRXJyb3JzID0gZXhwb3J0cy5Mb2dUcmFjZU5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuU2V0VHJhY2VOb3RpZmljYXRpb24gPSBleHBvcnRzLlRyYWNlRm9ybWF0ID0gZXhwb3J0cy5UcmFjZVZhbHVlcyA9IGV4cG9ydHMuVHJhY2UgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MTYyKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1lc3NhZ2VcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLk1lc3NhZ2U7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVxdWVzdFR5cGVcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RUeXBlMFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuUmVxdWVzdFR5cGUwOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RUeXBlMVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuUmVxdWVzdFR5cGUxOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RUeXBlMlwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuUmVxdWVzdFR5cGUyOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RUeXBlM1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuUmVxdWVzdFR5cGUzOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RUeXBlNFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuUmVxdWVzdFR5cGU0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RUeXBlNVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuUmVxdWVzdFR5cGU1OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RUeXBlNlwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuUmVxdWVzdFR5cGU2OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RUeXBlN1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuUmVxdWVzdFR5cGU3OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RUeXBlOFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuUmVxdWVzdFR5cGU4OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RUeXBlOVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuUmVxdWVzdFR5cGU5OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlc3BvbnNlRXJyb3JcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3I7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXJyb3JDb2Rlc1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuRXJyb3JDb2RlczsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25UeXBlXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGlmaWNhdGlvblR5cGUwXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlMDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25UeXBlMVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTE7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90aWZpY2F0aW9uVHlwZTJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLk5vdGlmaWNhdGlvblR5cGUyOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGlmaWNhdGlvblR5cGUzXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlMzsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25UeXBlNFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTQ7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90aWZpY2F0aW9uVHlwZTVcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLk5vdGlmaWNhdGlvblR5cGU1OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGlmaWNhdGlvblR5cGU2XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlNjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25UeXBlN1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTc7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90aWZpY2F0aW9uVHlwZThcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLk5vdGlmaWNhdGlvblR5cGU4OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGlmaWNhdGlvblR5cGU5XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlOTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXJhbWV0ZXJTdHJ1Y3R1cmVzXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzOyB9IH0pKTtcbmNvbnN0IGxpbmtlZE1hcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTA5KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkxpbmtlZE1hcFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpbmtlZE1hcF8xLkxpbmtlZE1hcDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMUlVDYWNoZVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpbmtlZE1hcF8xLkxSVUNhY2hlOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRvdWNoXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbGlua2VkTWFwXzEuVG91Y2g7IH0gfSkpO1xuY29uc3QgZGlzcG9zYWJsZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4ODQ0KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpc3Bvc2FibGVcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXNwb3NhYmxlXzEuRGlzcG9zYWJsZTsgfSB9KSk7XG5jb25zdCBldmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjQ3OSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFdmVudFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGV2ZW50c18xLkV2ZW50OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVtaXR0ZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBldmVudHNfMS5FbWl0dGVyOyB9IH0pKTtcbmNvbnN0IGNhbmNlbGxhdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTU3KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhbmNlbGxhdGlvblRva2VuU291cmNlXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FuY2VsbGF0aW9uXzEuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2U7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FuY2VsbGF0aW9uVG9rZW5cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjYW5jZWxsYXRpb25fMS5DYW5jZWxsYXRpb25Ub2tlbjsgfSB9KSk7XG5jb25zdCBzaGFyZWRBcnJheUNhbmNlbGxhdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNDg5KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNoYXJlZEFycmF5U2VuZGVyU3RyYXRlZ3lcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzaGFyZWRBcnJheUNhbmNlbGxhdGlvbl8xLlNoYXJlZEFycmF5U2VuZGVyU3RyYXRlZ3k7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2hhcmVkQXJyYXlSZWNlaXZlclN0cmF0ZWd5XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2hhcmVkQXJyYXlDYW5jZWxsYXRpb25fMS5TaGFyZWRBcnJheVJlY2VpdmVyU3RyYXRlZ3k7IH0gfSkpO1xuY29uc3QgbWVzc2FnZVJlYWRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NTYpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWVzc2FnZVJlYWRlclwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VSZWFkZXJfMS5NZXNzYWdlUmVhZGVyOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFic3RyYWN0TWVzc2FnZVJlYWRlclwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VSZWFkZXJfMS5BYnN0cmFjdE1lc3NhZ2VSZWFkZXI7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVhZGFibGVTdHJlYW1NZXNzYWdlUmVhZGVyXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZVJlYWRlcl8xLlJlYWRhYmxlU3RyZWFtTWVzc2FnZVJlYWRlcjsgfSB9KSk7XG5jb25zdCBtZXNzYWdlV3JpdGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkwMzYpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWVzc2FnZVdyaXRlclwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VXcml0ZXJfMS5NZXNzYWdlV3JpdGVyOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkFic3RyYWN0TWVzc2FnZVdyaXRlclwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VXcml0ZXJfMS5BYnN0cmFjdE1lc3NhZ2VXcml0ZXI7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV3JpdGVhYmxlU3RyZWFtTWVzc2FnZVdyaXRlclwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VXcml0ZXJfMS5Xcml0ZWFibGVTdHJlYW1NZXNzYWdlV3JpdGVyOyB9IH0pKTtcbmNvbnN0IG1lc3NhZ2VCdWZmZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTgwNSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBYnN0cmFjdE1lc3NhZ2VCdWZmZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlQnVmZmVyXzEuQWJzdHJhY3RNZXNzYWdlQnVmZmVyOyB9IH0pKTtcbmNvbnN0IGNvbm5lY3Rpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDA1NCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25uZWN0aW9uU3RyYXRlZ3lcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuQ29ubmVjdGlvblN0cmF0ZWd5OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbm5lY3Rpb25PcHRpb25zXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLkNvbm5lY3Rpb25PcHRpb25zOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk51bGxMb2dnZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuTnVsbExvZ2dlcjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVNZXNzYWdlQ29ubmVjdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5jcmVhdGVNZXNzYWdlQ29ubmVjdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQcm9ncmVzc1Rva2VuXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLlByb2dyZXNzVG9rZW47IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUHJvZ3Jlc3NUeXBlXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLlByb2dyZXNzVHlwZTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUcmFjZVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5UcmFjZTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUcmFjZVZhbHVlc1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5UcmFjZVZhbHVlczsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUcmFjZUZvcm1hdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5UcmFjZUZvcm1hdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZXRUcmFjZU5vdGlmaWNhdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5TZXRUcmFjZU5vdGlmaWNhdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMb2dUcmFjZU5vdGlmaWNhdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5Mb2dUcmFjZU5vdGlmaWNhdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25uZWN0aW9uRXJyb3JzXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLkNvbm5lY3Rpb25FcnJvcnM7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29ubmVjdGlvbkVycm9yXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLkNvbm5lY3Rpb25FcnJvcjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLkNhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3k7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3lcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3k7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FuY2VsbGF0aW9uU3RyYXRlZ3lcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuQ2FuY2VsbGF0aW9uU3RyYXRlZ3k7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTWVzc2FnZVN0cmF0ZWd5XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLk1lc3NhZ2VTdHJhdGVneTsgfSB9KSk7XG5jb25zdCByYWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTA5MSk7XG5leHBvcnRzLlJBTCA9IHJhbF8xLmRlZmF1bHQ7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDY5NTc6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlblNvdXJjZSA9IGV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW4gPSB2b2lkIDA7XG5jb25zdCByYWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTA5MSk7XG5jb25zdCBJcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjYxOCk7XG5jb25zdCBldmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjQ3OSk7XG52YXIgQ2FuY2VsbGF0aW9uVG9rZW47XG4oZnVuY3Rpb24gKENhbmNlbGxhdGlvblRva2VuKSB7XG4gICAgQ2FuY2VsbGF0aW9uVG9rZW4uTm9uZSA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZDogZmFsc2UsXG4gICAgICAgIG9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiBldmVudHNfMS5FdmVudC5Ob25lXG4gICAgfSk7XG4gICAgQ2FuY2VsbGF0aW9uVG9rZW4uQ2FuY2VsbGVkID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIGlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkOiB0cnVlLFxuICAgICAgICBvbkNhbmNlbGxhdGlvblJlcXVlc3RlZDogZXZlbnRzXzEuRXZlbnQuTm9uZVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIChjYW5kaWRhdGUgPT09IENhbmNlbGxhdGlvblRva2VuLk5vbmVcbiAgICAgICAgICAgIHx8IGNhbmRpZGF0ZSA9PT0gQ2FuY2VsbGF0aW9uVG9rZW4uQ2FuY2VsbGVkXG4gICAgICAgICAgICB8fCAoSXMuYm9vbGVhbihjYW5kaWRhdGUuaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQpICYmICEhY2FuZGlkYXRlLm9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKSk7XG4gICAgfVxuICAgIENhbmNlbGxhdGlvblRva2VuLmlzID0gaXM7XG59KShDYW5jZWxsYXRpb25Ub2tlbiB8fCAoZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlbiA9IENhbmNlbGxhdGlvblRva2VuID0ge30pKTtcbmNvbnN0IHNob3J0Y3V0RXZlbnQgPSBPYmplY3QuZnJlZXplKGZ1bmN0aW9uIChjYWxsYmFjaywgY29udGV4dCkge1xuICAgIGNvbnN0IGhhbmRsZSA9ICgwLCByYWxfMS5kZWZhdWx0KSgpLnRpbWVyLnNldFRpbWVvdXQoY2FsbGJhY2suYmluZChjb250ZXh0KSwgMCk7XG4gICAgcmV0dXJuIHsgZGlzcG9zZSgpIHsgaGFuZGxlLmRpc3Bvc2UoKTsgfSB9O1xufSk7XG5jbGFzcyBNdXRhYmxlVG9rZW4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNDYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbWl0dGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5maXJlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNDYW5jZWxsZWQ7XG4gICAgfVxuICAgIGdldCBvbkNhbmNlbGxhdGlvblJlcXVlc3RlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzQ2FuY2VsbGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc2hvcnRjdXRFdmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2VtaXR0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9lbWl0dGVyLmV2ZW50O1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fZW1pdHRlcikge1xuICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuY2xhc3MgQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2Uge1xuICAgIGdldCB0b2tlbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbikge1xuICAgICAgICAgICAgLy8gYmUgbGF6eSBhbmQgY3JlYXRlIHRoZSB0b2tlbiBvbmx5IHdoZW5cbiAgICAgICAgICAgIC8vIGFjdHVhbGx5IG5lZWRlZFxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBuZXcgTXV0YWJsZVRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rva2VuO1xuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIGlmICghdGhpcy5fdG9rZW4pIHtcbiAgICAgICAgICAgIC8vIHNhdmUgYW4gb2JqZWN0IGJ5IHJldHVybmluZyB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgLy8gY2FuY2VsbGVkIHRva2VuIHdoZW4gY2FuY2VsbGF0aW9uIGhhcHBlbnNcbiAgICAgICAgICAgIC8vIGJlZm9yZSBzb21lb25lIGFza3MgZm9yIHRoZSB0b2tlblxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbi5DYW5jZWxsZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl90b2tlbi5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3Rva2VuKSB7XG4gICAgICAgICAgICAvLyBlbnN1cmUgdG8gaW5pdGlhbGl6ZSB3aXRoIGFuIGVtcHR5IHRva2VuIGlmIHdlIGhhZCBub25lXG4gICAgICAgICAgICB0aGlzLl90b2tlbiA9IENhbmNlbGxhdGlvblRva2VuLk5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fdG9rZW4gaW5zdGFuY2VvZiBNdXRhYmxlVG9rZW4pIHtcbiAgICAgICAgICAgIC8vIGFjdHVhbGx5IGRpc3Bvc2VcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UgPSBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDA1NDpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5jcmVhdGVNZXNzYWdlQ29ubmVjdGlvbiA9IGV4cG9ydHMuQ29ubmVjdGlvbk9wdGlvbnMgPSBleHBvcnRzLk1lc3NhZ2VTdHJhdGVneSA9IGV4cG9ydHMuQ2FuY2VsbGF0aW9uU3RyYXRlZ3kgPSBleHBvcnRzLkNhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5ID0gZXhwb3J0cy5DYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5ID0gZXhwb3J0cy5SZXF1ZXN0Q2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IGV4cG9ydHMuSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5ID0gZXhwb3J0cy5Db25uZWN0aW9uU3RyYXRlZ3kgPSBleHBvcnRzLkNvbm5lY3Rpb25FcnJvciA9IGV4cG9ydHMuQ29ubmVjdGlvbkVycm9ycyA9IGV4cG9ydHMuTG9nVHJhY2VOb3RpZmljYXRpb24gPSBleHBvcnRzLlNldFRyYWNlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5UcmFjZUZvcm1hdCA9IGV4cG9ydHMuVHJhY2VWYWx1ZXMgPSBleHBvcnRzLlRyYWNlID0gZXhwb3J0cy5OdWxsTG9nZ2VyID0gZXhwb3J0cy5Qcm9ncmVzc1R5cGUgPSBleHBvcnRzLlByb2dyZXNzVG9rZW4gPSB2b2lkIDA7XG5jb25zdCByYWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTA5MSk7XG5jb25zdCBJcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjYxOCk7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MTYyKTtcbmNvbnN0IGxpbmtlZE1hcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTA5KTtcbmNvbnN0IGV2ZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNDc5KTtcbmNvbnN0IGNhbmNlbGxhdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTU3KTtcbnZhciBDYW5jZWxOb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKENhbmNlbE5vdGlmaWNhdGlvbikge1xuICAgIENhbmNlbE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZSgnJC9jYW5jZWxSZXF1ZXN0Jyk7XG59KShDYW5jZWxOb3RpZmljYXRpb24gfHwgKENhbmNlbE5vdGlmaWNhdGlvbiA9IHt9KSk7XG52YXIgUHJvZ3Jlc3NUb2tlbjtcbihmdW5jdGlvbiAoUHJvZ3Jlc3NUb2tlbikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG4gICAgfVxuICAgIFByb2dyZXNzVG9rZW4uaXMgPSBpcztcbn0pKFByb2dyZXNzVG9rZW4gfHwgKGV4cG9ydHMuUHJvZ3Jlc3NUb2tlbiA9IFByb2dyZXNzVG9rZW4gPSB7fSkpO1xudmFyIFByb2dyZXNzTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChQcm9ncmVzc05vdGlmaWNhdGlvbikge1xuICAgIFByb2dyZXNzTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlKCckL3Byb2dyZXNzJyk7XG59KShQcm9ncmVzc05vdGlmaWNhdGlvbiB8fCAoUHJvZ3Jlc3NOb3RpZmljYXRpb24gPSB7fSkpO1xuY2xhc3MgUHJvZ3Jlc3NUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICB9XG59XG5leHBvcnRzLlByb2dyZXNzVHlwZSA9IFByb2dyZXNzVHlwZTtcbnZhciBTdGFyUmVxdWVzdEhhbmRsZXI7XG4oZnVuY3Rpb24gKFN0YXJSZXF1ZXN0SGFuZGxlcikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBJcy5mdW5jKHZhbHVlKTtcbiAgICB9XG4gICAgU3RhclJlcXVlc3RIYW5kbGVyLmlzID0gaXM7XG59KShTdGFyUmVxdWVzdEhhbmRsZXIgfHwgKFN0YXJSZXF1ZXN0SGFuZGxlciA9IHt9KSk7XG5leHBvcnRzLk51bGxMb2dnZXIgPSBPYmplY3QuZnJlZXplKHtcbiAgICBlcnJvcjogKCkgPT4geyB9LFxuICAgIHdhcm46ICgpID0+IHsgfSxcbiAgICBpbmZvOiAoKSA9PiB7IH0sXG4gICAgbG9nOiAoKSA9PiB7IH1cbn0pO1xudmFyIFRyYWNlO1xuKGZ1bmN0aW9uIChUcmFjZSkge1xuICAgIFRyYWNlW1RyYWNlW1wiT2ZmXCJdID0gMF0gPSBcIk9mZlwiO1xuICAgIFRyYWNlW1RyYWNlW1wiTWVzc2FnZXNcIl0gPSAxXSA9IFwiTWVzc2FnZXNcIjtcbiAgICBUcmFjZVtUcmFjZVtcIkNvbXBhY3RcIl0gPSAyXSA9IFwiQ29tcGFjdFwiO1xuICAgIFRyYWNlW1RyYWNlW1wiVmVyYm9zZVwiXSA9IDNdID0gXCJWZXJib3NlXCI7XG59KShUcmFjZSB8fCAoZXhwb3J0cy5UcmFjZSA9IFRyYWNlID0ge30pKTtcbnZhciBUcmFjZVZhbHVlcztcbihmdW5jdGlvbiAoVHJhY2VWYWx1ZXMpIHtcbiAgICAvKipcbiAgICAgKiBUdXJuIHRyYWNpbmcgb2ZmLlxuICAgICAqL1xuICAgIFRyYWNlVmFsdWVzLk9mZiA9ICdvZmYnO1xuICAgIC8qKlxuICAgICAqIFRyYWNlIG1lc3NhZ2VzIG9ubHkuXG4gICAgICovXG4gICAgVHJhY2VWYWx1ZXMuTWVzc2FnZXMgPSAnbWVzc2FnZXMnO1xuICAgIC8qKlxuICAgICAqIENvbXBhY3QgbWVzc2FnZSB0cmFjaW5nLlxuICAgICAqL1xuICAgIFRyYWNlVmFsdWVzLkNvbXBhY3QgPSAnY29tcGFjdCc7XG4gICAgLyoqXG4gICAgICogVmVyYm9zZSBtZXNzYWdlIHRyYWNpbmcuXG4gICAgICovXG4gICAgVHJhY2VWYWx1ZXMuVmVyYm9zZSA9ICd2ZXJib3NlJztcbn0pKFRyYWNlVmFsdWVzIHx8IChleHBvcnRzLlRyYWNlVmFsdWVzID0gVHJhY2VWYWx1ZXMgPSB7fSkpO1xuKGZ1bmN0aW9uIChUcmFjZSkge1xuICAgIGZ1bmN0aW9uIGZyb21TdHJpbmcodmFsdWUpIHtcbiAgICAgICAgaWYgKCFJcy5zdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gVHJhY2UuT2ZmO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnb2ZmJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gVHJhY2UuT2ZmO1xuICAgICAgICAgICAgY2FzZSAnbWVzc2FnZXMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBUcmFjZS5NZXNzYWdlcztcbiAgICAgICAgICAgIGNhc2UgJ2NvbXBhY3QnOlxuICAgICAgICAgICAgICAgIHJldHVybiBUcmFjZS5Db21wYWN0O1xuICAgICAgICAgICAgY2FzZSAndmVyYm9zZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRyYWNlLlZlcmJvc2U7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBUcmFjZS5PZmY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVHJhY2UuZnJvbVN0cmluZyA9IGZyb21TdHJpbmc7XG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBUcmFjZS5PZmY6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdvZmYnO1xuICAgICAgICAgICAgY2FzZSBUcmFjZS5NZXNzYWdlczpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ21lc3NhZ2VzJztcbiAgICAgICAgICAgIGNhc2UgVHJhY2UuQ29tcGFjdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2NvbXBhY3QnO1xuICAgICAgICAgICAgY2FzZSBUcmFjZS5WZXJib3NlOlxuICAgICAgICAgICAgICAgIHJldHVybiAndmVyYm9zZSc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAnb2ZmJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBUcmFjZS50b1N0cmluZyA9IHRvU3RyaW5nO1xufSkoVHJhY2UgfHwgKGV4cG9ydHMuVHJhY2UgPSBUcmFjZSA9IHt9KSk7XG52YXIgVHJhY2VGb3JtYXQ7XG4oZnVuY3Rpb24gKFRyYWNlRm9ybWF0KSB7XG4gICAgVHJhY2VGb3JtYXRbXCJUZXh0XCJdID0gXCJ0ZXh0XCI7XG4gICAgVHJhY2VGb3JtYXRbXCJKU09OXCJdID0gXCJqc29uXCI7XG59KShUcmFjZUZvcm1hdCB8fCAoZXhwb3J0cy5UcmFjZUZvcm1hdCA9IFRyYWNlRm9ybWF0ID0ge30pKTtcbihmdW5jdGlvbiAoVHJhY2VGb3JtYXQpIHtcbiAgICBmdW5jdGlvbiBmcm9tU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIGlmICghSXMuc3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFRyYWNlRm9ybWF0LlRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodmFsdWUgPT09ICdqc29uJykge1xuICAgICAgICAgICAgcmV0dXJuIFRyYWNlRm9ybWF0LkpTT047XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gVHJhY2VGb3JtYXQuVGV4dDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBUcmFjZUZvcm1hdC5mcm9tU3RyaW5nID0gZnJvbVN0cmluZztcbn0pKFRyYWNlRm9ybWF0IHx8IChleHBvcnRzLlRyYWNlRm9ybWF0ID0gVHJhY2VGb3JtYXQgPSB7fSkpO1xudmFyIFNldFRyYWNlTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChTZXRUcmFjZU5vdGlmaWNhdGlvbikge1xuICAgIFNldFRyYWNlTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlKCckL3NldFRyYWNlJyk7XG59KShTZXRUcmFjZU5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5TZXRUcmFjZU5vdGlmaWNhdGlvbiA9IFNldFRyYWNlTm90aWZpY2F0aW9uID0ge30pKTtcbnZhciBMb2dUcmFjZU5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoTG9nVHJhY2VOb3RpZmljYXRpb24pIHtcbiAgICBMb2dUcmFjZU5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZSgnJC9sb2dUcmFjZScpO1xufSkoTG9nVHJhY2VOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuTG9nVHJhY2VOb3RpZmljYXRpb24gPSBMb2dUcmFjZU5vdGlmaWNhdGlvbiA9IHt9KSk7XG52YXIgQ29ubmVjdGlvbkVycm9ycztcbihmdW5jdGlvbiAoQ29ubmVjdGlvbkVycm9ycykge1xuICAgIC8qKlxuICAgICAqIFRoZSBjb25uZWN0aW9uIGlzIGNsb3NlZC5cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uRXJyb3JzW0Nvbm5lY3Rpb25FcnJvcnNbXCJDbG9zZWRcIl0gPSAxXSA9IFwiQ2xvc2VkXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbm5lY3Rpb24gZ290IGRpc3Bvc2VkLlxuICAgICAqL1xuICAgIENvbm5lY3Rpb25FcnJvcnNbQ29ubmVjdGlvbkVycm9yc1tcIkRpc3Bvc2VkXCJdID0gMl0gPSBcIkRpc3Bvc2VkXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBpbiBsaXN0ZW5pbmcgbW9kZS5cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uRXJyb3JzW0Nvbm5lY3Rpb25FcnJvcnNbXCJBbHJlYWR5TGlzdGVuaW5nXCJdID0gM10gPSBcIkFscmVhZHlMaXN0ZW5pbmdcIjtcbn0pKENvbm5lY3Rpb25FcnJvcnMgfHwgKGV4cG9ydHMuQ29ubmVjdGlvbkVycm9ycyA9IENvbm5lY3Rpb25FcnJvcnMgPSB7fSkpO1xuY2xhc3MgQ29ubmVjdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDb25uZWN0aW9uRXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnRzLkNvbm5lY3Rpb25FcnJvciA9IENvbm5lY3Rpb25FcnJvcjtcbnZhciBDb25uZWN0aW9uU3RyYXRlZ3k7XG4oZnVuY3Rpb24gKENvbm5lY3Rpb25TdHJhdGVneSkge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLmZ1bmMoY2FuZGlkYXRlLmNhbmNlbFVuZGlzcGF0Y2hlZCk7XG4gICAgfVxuICAgIENvbm5lY3Rpb25TdHJhdGVneS5pcyA9IGlzO1xufSkoQ29ubmVjdGlvblN0cmF0ZWd5IHx8IChleHBvcnRzLkNvbm5lY3Rpb25TdHJhdGVneSA9IENvbm5lY3Rpb25TdHJhdGVneSA9IHt9KSk7XG52YXIgSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5O1xuKGZ1bmN0aW9uIChJZENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiAoY2FuZGlkYXRlLmtpbmQgPT09IHVuZGVmaW5lZCB8fCBjYW5kaWRhdGUua2luZCA9PT0gJ2lkJykgJiYgSXMuZnVuYyhjYW5kaWRhdGUuY3JlYXRlQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UpICYmIChjYW5kaWRhdGUuZGlzcG9zZSA9PT0gdW5kZWZpbmVkIHx8IElzLmZ1bmMoY2FuZGlkYXRlLmRpc3Bvc2UpKTtcbiAgICB9XG4gICAgSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5LmlzID0gaXM7XG59KShJZENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kgfHwgKGV4cG9ydHMuSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5ID0gSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5ID0ge30pKTtcbnZhciBSZXF1ZXN0Q2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneTtcbihmdW5jdGlvbiAoUmVxdWVzdENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBjYW5kaWRhdGUua2luZCA9PT0gJ3JlcXVlc3QnICYmIElzLmZ1bmMoY2FuZGlkYXRlLmNyZWF0ZUNhbmNlbGxhdGlvblRva2VuU291cmNlKSAmJiAoY2FuZGlkYXRlLmRpc3Bvc2UgPT09IHVuZGVmaW5lZCB8fCBJcy5mdW5jKGNhbmRpZGF0ZS5kaXNwb3NlKSk7XG4gICAgfVxuICAgIFJlcXVlc3RDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5LmlzID0gaXM7XG59KShSZXF1ZXN0Q2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSB8fCAoZXhwb3J0cy5SZXF1ZXN0Q2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IFJlcXVlc3RDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5ID0ge30pKTtcbnZhciBDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5O1xuKGZ1bmN0aW9uIChDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5KSB7XG4gICAgQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5NZXNzYWdlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIGNyZWF0ZUNhbmNlbGxhdGlvblRva2VuU291cmNlKF8pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2FuY2VsbGF0aW9uXzEuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBJZENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kuaXModmFsdWUpIHx8IFJlcXVlc3RDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5LmlzKHZhbHVlKTtcbiAgICB9XG4gICAgQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5pcyA9IGlzO1xufSkoQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSB8fCAoZXhwb3J0cy5DYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5ID0gQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IHt9KSk7XG52YXIgQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3k7XG4oZnVuY3Rpb24gKENhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5KSB7XG4gICAgQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3kuTWVzc2FnZSA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBzZW5kQ2FuY2VsbGF0aW9uKGNvbm4sIGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gY29ubi5zZW5kTm90aWZpY2F0aW9uKENhbmNlbE5vdGlmaWNhdGlvbi50eXBlLCB7IGlkIH0pO1xuICAgICAgICB9LFxuICAgICAgICBjbGVhbnVwKF8pIHsgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLmZ1bmMoY2FuZGlkYXRlLnNlbmRDYW5jZWxsYXRpb24pICYmIElzLmZ1bmMoY2FuZGlkYXRlLmNsZWFudXApO1xuICAgIH1cbiAgICBDYW5jZWxsYXRpb25TZW5kZXJTdHJhdGVneS5pcyA9IGlzO1xufSkoQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3kgfHwgKGV4cG9ydHMuQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3kgPSBDYW5jZWxsYXRpb25TZW5kZXJTdHJhdGVneSA9IHt9KSk7XG52YXIgQ2FuY2VsbGF0aW9uU3RyYXRlZ3k7XG4oZnVuY3Rpb24gKENhbmNlbGxhdGlvblN0cmF0ZWd5KSB7XG4gICAgQ2FuY2VsbGF0aW9uU3RyYXRlZ3kuTWVzc2FnZSA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICByZWNlaXZlcjogQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5NZXNzYWdlLFxuICAgICAgICBzZW5kZXI6IENhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5Lk1lc3NhZ2VcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5LmlzKGNhbmRpZGF0ZS5yZWNlaXZlcikgJiYgQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3kuaXMoY2FuZGlkYXRlLnNlbmRlcik7XG4gICAgfVxuICAgIENhbmNlbGxhdGlvblN0cmF0ZWd5LmlzID0gaXM7XG59KShDYW5jZWxsYXRpb25TdHJhdGVneSB8fCAoZXhwb3J0cy5DYW5jZWxsYXRpb25TdHJhdGVneSA9IENhbmNlbGxhdGlvblN0cmF0ZWd5ID0ge30pKTtcbnZhciBNZXNzYWdlU3RyYXRlZ3k7XG4oZnVuY3Rpb24gKE1lc3NhZ2VTdHJhdGVneSkge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLmZ1bmMoY2FuZGlkYXRlLmhhbmRsZU1lc3NhZ2UpO1xuICAgIH1cbiAgICBNZXNzYWdlU3RyYXRlZ3kuaXMgPSBpcztcbn0pKE1lc3NhZ2VTdHJhdGVneSB8fCAoZXhwb3J0cy5NZXNzYWdlU3RyYXRlZ3kgPSBNZXNzYWdlU3RyYXRlZ3kgPSB7fSkpO1xudmFyIENvbm5lY3Rpb25PcHRpb25zO1xuKGZ1bmN0aW9uIChDb25uZWN0aW9uT3B0aW9ucykge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIChDYW5jZWxsYXRpb25TdHJhdGVneS5pcyhjYW5kaWRhdGUuY2FuY2VsbGF0aW9uU3RyYXRlZ3kpIHx8IENvbm5lY3Rpb25TdHJhdGVneS5pcyhjYW5kaWRhdGUuY29ubmVjdGlvblN0cmF0ZWd5KSB8fCBNZXNzYWdlU3RyYXRlZ3kuaXMoY2FuZGlkYXRlLm1lc3NhZ2VTdHJhdGVneSkpO1xuICAgIH1cbiAgICBDb25uZWN0aW9uT3B0aW9ucy5pcyA9IGlzO1xufSkoQ29ubmVjdGlvbk9wdGlvbnMgfHwgKGV4cG9ydHMuQ29ubmVjdGlvbk9wdGlvbnMgPSBDb25uZWN0aW9uT3B0aW9ucyA9IHt9KSk7XG52YXIgQ29ubmVjdGlvblN0YXRlO1xuKGZ1bmN0aW9uIChDb25uZWN0aW9uU3RhdGUpIHtcbiAgICBDb25uZWN0aW9uU3RhdGVbQ29ubmVjdGlvblN0YXRlW1wiTmV3XCJdID0gMV0gPSBcIk5ld1wiO1xuICAgIENvbm5lY3Rpb25TdGF0ZVtDb25uZWN0aW9uU3RhdGVbXCJMaXN0ZW5pbmdcIl0gPSAyXSA9IFwiTGlzdGVuaW5nXCI7XG4gICAgQ29ubmVjdGlvblN0YXRlW0Nvbm5lY3Rpb25TdGF0ZVtcIkNsb3NlZFwiXSA9IDNdID0gXCJDbG9zZWRcIjtcbiAgICBDb25uZWN0aW9uU3RhdGVbQ29ubmVjdGlvblN0YXRlW1wiRGlzcG9zZWRcIl0gPSA0XSA9IFwiRGlzcG9zZWRcIjtcbn0pKENvbm5lY3Rpb25TdGF0ZSB8fCAoQ29ubmVjdGlvblN0YXRlID0ge30pKTtcbmZ1bmN0aW9uIGNyZWF0ZU1lc3NhZ2VDb25uZWN0aW9uKG1lc3NhZ2VSZWFkZXIsIG1lc3NhZ2VXcml0ZXIsIF9sb2dnZXIsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsb2dnZXIgPSBfbG9nZ2VyICE9PSB1bmRlZmluZWQgPyBfbG9nZ2VyIDogZXhwb3J0cy5OdWxsTG9nZ2VyO1xuICAgIGxldCBzZXF1ZW5jZU51bWJlciA9IDA7XG4gICAgbGV0IG5vdGlmaWNhdGlvblNlcXVlbmNlTnVtYmVyID0gMDtcbiAgICBsZXQgdW5rbm93blJlc3BvbnNlU2VxdWVuY2VOdW1iZXIgPSAwO1xuICAgIGNvbnN0IHZlcnNpb24gPSAnMi4wJztcbiAgICBsZXQgc3RhclJlcXVlc3RIYW5kbGVyID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHJlcXVlc3RIYW5kbGVycyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgc3Rhck5vdGlmaWNhdGlvbkhhbmRsZXIgPSB1bmRlZmluZWQ7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uSGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgcHJvZ3Jlc3NIYW5kbGVycyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgdGltZXI7XG4gICAgbGV0IG1lc3NhZ2VRdWV1ZSA9IG5ldyBsaW5rZWRNYXBfMS5MaW5rZWRNYXAoKTtcbiAgICBsZXQgcmVzcG9uc2VQcm9taXNlcyA9IG5ldyBNYXAoKTtcbiAgICBsZXQga25vd25DYW5jZWxlZFJlcXVlc3RzID0gbmV3IFNldCgpO1xuICAgIGxldCByZXF1ZXN0VG9rZW5zID0gbmV3IE1hcCgpO1xuICAgIGxldCB0cmFjZSA9IFRyYWNlLk9mZjtcbiAgICBsZXQgdHJhY2VGb3JtYXQgPSBUcmFjZUZvcm1hdC5UZXh0O1xuICAgIGxldCB0cmFjZXI7XG4gICAgbGV0IHN0YXRlID0gQ29ubmVjdGlvblN0YXRlLk5ldztcbiAgICBjb25zdCBlcnJvckVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgIGNvbnN0IGNsb3NlRW1pdHRlciA9IG5ldyBldmVudHNfMS5FbWl0dGVyKCk7XG4gICAgY29uc3QgdW5oYW5kbGVkTm90aWZpY2F0aW9uRW1pdHRlciA9IG5ldyBldmVudHNfMS5FbWl0dGVyKCk7XG4gICAgY29uc3QgdW5oYW5kbGVkUHJvZ3Jlc3NFbWl0dGVyID0gbmV3IGV2ZW50c18xLkVtaXR0ZXIoKTtcbiAgICBjb25zdCBkaXNwb3NlRW1pdHRlciA9IG5ldyBldmVudHNfMS5FbWl0dGVyKCk7XG4gICAgY29uc3QgY2FuY2VsbGF0aW9uU3RyYXRlZ3kgPSAob3B0aW9ucyAmJiBvcHRpb25zLmNhbmNlbGxhdGlvblN0cmF0ZWd5KSA/IG9wdGlvbnMuY2FuY2VsbGF0aW9uU3RyYXRlZ3kgOiBDYW5jZWxsYXRpb25TdHJhdGVneS5NZXNzYWdlO1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3RRdWV1ZUtleShpZCkge1xuICAgICAgICBpZiAoaWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3Qgc2VuZCByZXF1ZXN0cyB3aXRoIGlkIG51bGwgc2luY2UgdGhlIHJlc3BvbnNlIGNhbid0IGJlIGNvcnJlbGF0ZWQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdyZXEtJyArIGlkLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlUXVldWVLZXkoaWQpIHtcbiAgICAgICAgaWYgKGlkID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3Jlcy11bmtub3duLScgKyAoKyt1bmtub3duUmVzcG9uc2VTZXF1ZW5jZU51bWJlcikudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAncmVzLScgKyBpZC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvblF1ZXVlS2V5KCkge1xuICAgICAgICByZXR1cm4gJ25vdC0nICsgKCsrbm90aWZpY2F0aW9uU2VxdWVuY2VOdW1iZXIpLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZE1lc3NhZ2VUb1F1ZXVlKHF1ZXVlLCBtZXNzYWdlKSB7XG4gICAgICAgIGlmIChtZXNzYWdlc18xLk1lc3NhZ2UuaXNSZXF1ZXN0KG1lc3NhZ2UpKSB7XG4gICAgICAgICAgICBxdWV1ZS5zZXQoY3JlYXRlUmVxdWVzdFF1ZXVlS2V5KG1lc3NhZ2UuaWQpLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtZXNzYWdlc18xLk1lc3NhZ2UuaXNSZXNwb25zZShtZXNzYWdlKSkge1xuICAgICAgICAgICAgcXVldWUuc2V0KGNyZWF0ZVJlc3BvbnNlUXVldWVLZXkobWVzc2FnZS5pZCksIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcXVldWUuc2V0KGNyZWF0ZU5vdGlmaWNhdGlvblF1ZXVlS2V5KCksIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNhbmNlbFVuZGlzcGF0Y2hlZChfbWVzc2FnZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0xpc3RlbmluZygpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlID09PSBDb25uZWN0aW9uU3RhdGUuTGlzdGVuaW5nO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0Nsb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlID09PSBDb25uZWN0aW9uU3RhdGUuQ2xvc2VkO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0Rpc3Bvc2VkKCkge1xuICAgICAgICByZXR1cm4gc3RhdGUgPT09IENvbm5lY3Rpb25TdGF0ZS5EaXNwb3NlZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xvc2VIYW5kbGVyKCkge1xuICAgICAgICBpZiAoc3RhdGUgPT09IENvbm5lY3Rpb25TdGF0ZS5OZXcgfHwgc3RhdGUgPT09IENvbm5lY3Rpb25TdGF0ZS5MaXN0ZW5pbmcpIHtcbiAgICAgICAgICAgIHN0YXRlID0gQ29ubmVjdGlvblN0YXRlLkNsb3NlZDtcbiAgICAgICAgICAgIGNsb3NlRW1pdHRlci5maXJlKHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgdGhlIGNvbm5lY3Rpb24gaXMgZGlzcG9zZWQgZG9uJ3Qgc2VudCBjbG9zZSBldmVudHMuXG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlYWRFcnJvckhhbmRsZXIoZXJyb3IpIHtcbiAgICAgICAgZXJyb3JFbWl0dGVyLmZpcmUoW2Vycm9yLCB1bmRlZmluZWQsIHVuZGVmaW5lZF0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3cml0ZUVycm9ySGFuZGxlcihkYXRhKSB7XG4gICAgICAgIGVycm9yRW1pdHRlci5maXJlKGRhdGEpO1xuICAgIH1cbiAgICBtZXNzYWdlUmVhZGVyLm9uQ2xvc2UoY2xvc2VIYW5kbGVyKTtcbiAgICBtZXNzYWdlUmVhZGVyLm9uRXJyb3IocmVhZEVycm9ySGFuZGxlcik7XG4gICAgbWVzc2FnZVdyaXRlci5vbkNsb3NlKGNsb3NlSGFuZGxlcik7XG4gICAgbWVzc2FnZVdyaXRlci5vbkVycm9yKHdyaXRlRXJyb3JIYW5kbGVyKTtcbiAgICBmdW5jdGlvbiB0cmlnZ2VyTWVzc2FnZVF1ZXVlKCkge1xuICAgICAgICBpZiAodGltZXIgfHwgbWVzc2FnZVF1ZXVlLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aW1lciA9ICgwLCByYWxfMS5kZWZhdWx0KSgpLnRpbWVyLnNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICAgICAgICB0aW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHByb2Nlc3NNZXNzYWdlUXVldWUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICBpZiAobWVzc2FnZXNfMS5NZXNzYWdlLmlzUmVxdWVzdChtZXNzYWdlKSkge1xuICAgICAgICAgICAgaGFuZGxlUmVxdWVzdChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtZXNzYWdlc18xLk1lc3NhZ2UuaXNOb3RpZmljYXRpb24obWVzc2FnZSkpIHtcbiAgICAgICAgICAgIGhhbmRsZU5vdGlmaWNhdGlvbihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtZXNzYWdlc18xLk1lc3NhZ2UuaXNSZXNwb25zZShtZXNzYWdlKSkge1xuICAgICAgICAgICAgaGFuZGxlUmVzcG9uc2UobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVJbnZhbGlkTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9jZXNzTWVzc2FnZVF1ZXVlKCkge1xuICAgICAgICBpZiAobWVzc2FnZVF1ZXVlLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXNzYWdlID0gbWVzc2FnZVF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlU3RyYXRlZ3kgPSBvcHRpb25zPy5tZXNzYWdlU3RyYXRlZ3k7XG4gICAgICAgICAgICBpZiAoTWVzc2FnZVN0cmF0ZWd5LmlzKG1lc3NhZ2VTdHJhdGVneSkpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlU3RyYXRlZ3kuaGFuZGxlTWVzc2FnZShtZXNzYWdlLCBoYW5kbGVNZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhhbmRsZU1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cmlnZ2VyTWVzc2FnZVF1ZXVlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY2FsbGJhY2sgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2UgaGF2ZSByZWNlaXZlZCBhIGNhbmNlbGxhdGlvbiBtZXNzYWdlLiBDaGVjayBpZiB0aGUgbWVzc2FnZSBpcyBzdGlsbCBpbiB0aGUgcXVldWVcbiAgICAgICAgICAgIC8vIGFuZCBjYW5jZWwgaXQgaWYgYWxsb3dlZCB0byBkbyBzby5cbiAgICAgICAgICAgIGlmIChtZXNzYWdlc18xLk1lc3NhZ2UuaXNOb3RpZmljYXRpb24obWVzc2FnZSkgJiYgbWVzc2FnZS5tZXRob2QgPT09IENhbmNlbE5vdGlmaWNhdGlvbi50eXBlLm1ldGhvZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbmNlbElkID0gbWVzc2FnZS5wYXJhbXMuaWQ7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gY3JlYXRlUmVxdWVzdFF1ZXVlS2V5KGNhbmNlbElkKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b0NhbmNlbCA9IG1lc3NhZ2VRdWV1ZS5nZXQoa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZXNfMS5NZXNzYWdlLmlzUmVxdWVzdCh0b0NhbmNlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyYXRlZ3kgPSBvcHRpb25zPy5jb25uZWN0aW9uU3RyYXRlZ3k7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gKHN0cmF0ZWd5ICYmIHN0cmF0ZWd5LmNhbmNlbFVuZGlzcGF0Y2hlZCkgPyBzdHJhdGVneS5jYW5jZWxVbmRpc3BhdGNoZWQodG9DYW5jZWwsIGNhbmNlbFVuZGlzcGF0Y2hlZCkgOiBjYW5jZWxVbmRpc3BhdGNoZWQodG9DYW5jZWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgKHJlc3BvbnNlLmVycm9yICE9PSB1bmRlZmluZWQgfHwgcmVzcG9uc2UucmVzdWx0ICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlUXVldWUuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VG9rZW5zLmRlbGV0ZShjYW5jZWxJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5pZCA9IHRvQ2FuY2VsLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2VTZW5kaW5nUmVzcG9uc2UocmVzcG9uc2UsIG1lc3NhZ2UubWV0aG9kLCBEYXRlLm5vdygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VXcml0ZXIud3JpdGUocmVzcG9uc2UpLmNhdGNoKCgpID0+IGxvZ2dlci5lcnJvcihgU2VuZGluZyByZXNwb25zZSBmb3IgY2FuY2VsZWQgbWVzc2FnZSBmYWlsZWQuYCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNhbmNlbGxhdGlvblRva2VuID0gcmVxdWVzdFRva2Vucy5nZXQoY2FuY2VsSWQpO1xuICAgICAgICAgICAgICAgIC8vIFRoZSByZXF1ZXN0IGlzIGFscmVhZHkgcnVubmluZy4gQ2FuY2VsIHRoZSB0b2tlblxuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxsYXRpb25Ub2tlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbGxhdGlvblRva2VuLmNhbmNlbCgpO1xuICAgICAgICAgICAgICAgICAgICB0cmFjZVJlY2VpdmVkTm90aWZpY2F0aW9uKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBSZW1lbWJlciB0aGUgY2FuY2VsIGJ1dCBzdGlsbCBxdWV1ZSB0aGUgbWVzc2FnZSB0b1xuICAgICAgICAgICAgICAgICAgICAvLyBjbGVhbiB1cCBzdGF0ZSBpbiBwcm9jZXNzIG1lc3NhZ2UuXG4gICAgICAgICAgICAgICAgICAgIGtub3duQ2FuY2VsZWRSZXF1ZXN0cy5hZGQoY2FuY2VsSWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZE1lc3NhZ2VUb1F1ZXVlKG1lc3NhZ2VRdWV1ZSwgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cmlnZ2VyTWVzc2FnZVF1ZXVlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3QocmVxdWVzdE1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKGlzRGlzcG9zZWQoKSkge1xuICAgICAgICAgICAgLy8gd2UgcmV0dXJuIGhlcmUgc2lsZW50bHkgc2luY2Ugd2UgZmlyZWQgYW4gZXZlbnQgd2hlbiB0aGVcbiAgICAgICAgICAgIC8vIGNvbm5lY3Rpb24gZ290IGRpc3Bvc2VkLlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlcGx5KHJlc3VsdE9yRXJyb3IsIG1ldGhvZCwgc3RhcnRUaW1lKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIGpzb25ycGM6IHZlcnNpb24sXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3RNZXNzYWdlLmlkXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHJlc3VsdE9yRXJyb3IgaW5zdGFuY2VvZiBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmVycm9yID0gcmVzdWx0T3JFcnJvci50b0pzb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVzdWx0ID0gcmVzdWx0T3JFcnJvciA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHJlc3VsdE9yRXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZVNlbmRpbmdSZXNwb25zZShtZXNzYWdlLCBtZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICBtZXNzYWdlV3JpdGVyLndyaXRlKG1lc3NhZ2UpLmNhdGNoKCgpID0+IGxvZ2dlci5lcnJvcihgU2VuZGluZyByZXNwb25zZSBmYWlsZWQuYCkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlcGx5RXJyb3IoZXJyb3IsIG1ldGhvZCwgc3RhcnRUaW1lKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIGpzb25ycGM6IHZlcnNpb24sXG4gICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3RNZXNzYWdlLmlkLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvci50b0pzb24oKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyYWNlU2VuZGluZ1Jlc3BvbnNlKG1lc3NhZ2UsIG1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgIG1lc3NhZ2VXcml0ZXIud3JpdGUobWVzc2FnZSkuY2F0Y2goKCkgPT4gbG9nZ2VyLmVycm9yKGBTZW5kaW5nIHJlc3BvbnNlIGZhaWxlZC5gKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVwbHlTdWNjZXNzKHJlc3VsdCwgbWV0aG9kLCBzdGFydFRpbWUpIHtcbiAgICAgICAgICAgIC8vIFRoZSBKU09OIFJQQyBkZWZpbmVzIHRoYXQgYSByZXNwb25zZSBtdXN0IGVpdGhlciBoYXZlIGEgcmVzdWx0IG9yIGFuIGVycm9yXG4gICAgICAgICAgICAvLyBTbyB3ZSBjYW4ndCB0cmVhdCB1bmRlZmluZWQgYXMgYSB2YWxpZCByZXNwb25zZSByZXN1bHQuXG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICBqc29ucnBjOiB2ZXJzaW9uLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0TWVzc2FnZS5pZCxcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHJlc3VsdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyYWNlU2VuZGluZ1Jlc3BvbnNlKG1lc3NhZ2UsIG1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgIG1lc3NhZ2VXcml0ZXIud3JpdGUobWVzc2FnZSkuY2F0Y2goKCkgPT4gbG9nZ2VyLmVycm9yKGBTZW5kaW5nIHJlc3BvbnNlIGZhaWxlZC5gKSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJhY2VSZWNlaXZlZFJlcXVlc3QocmVxdWVzdE1lc3NhZ2UpO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gcmVxdWVzdEhhbmRsZXJzLmdldChyZXF1ZXN0TWVzc2FnZS5tZXRob2QpO1xuICAgICAgICBsZXQgdHlwZTtcbiAgICAgICAgbGV0IHJlcXVlc3RIYW5kbGVyO1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgICAgICAgICAgIHJlcXVlc3RIYW5kbGVyID0gZWxlbWVudC5oYW5kbGVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIGlmIChyZXF1ZXN0SGFuZGxlciB8fCBzdGFyUmVxdWVzdEhhbmRsZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VuS2V5ID0gcmVxdWVzdE1lc3NhZ2UuaWQgPz8gU3RyaW5nKERhdGUubm93KCkpOyAvL1xuICAgICAgICAgICAgY29uc3QgY2FuY2VsbGF0aW9uU291cmNlID0gSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5LmlzKGNhbmNlbGxhdGlvblN0cmF0ZWd5LnJlY2VpdmVyKVxuICAgICAgICAgICAgICAgID8gY2FuY2VsbGF0aW9uU3RyYXRlZ3kucmVjZWl2ZXIuY3JlYXRlQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UodG9rZW5LZXkpXG4gICAgICAgICAgICAgICAgOiBjYW5jZWxsYXRpb25TdHJhdGVneS5yZWNlaXZlci5jcmVhdGVDYW5jZWxsYXRpb25Ub2tlblNvdXJjZShyZXF1ZXN0TWVzc2FnZSk7XG4gICAgICAgICAgICBpZiAocmVxdWVzdE1lc3NhZ2UuaWQgIT09IG51bGwgJiYga25vd25DYW5jZWxlZFJlcXVlc3RzLmhhcyhyZXF1ZXN0TWVzc2FnZS5pZCkpIHtcbiAgICAgICAgICAgICAgICBjYW5jZWxsYXRpb25Tb3VyY2UuY2FuY2VsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVxdWVzdE1lc3NhZ2UuaWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0VG9rZW5zLnNldCh0b2tlbktleSwgY2FuY2VsbGF0aW9uU291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IGhhbmRsZXJSZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0TWVzc2FnZS5wYXJhbXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlLm51bWJlck9mUGFyYW1zICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbHlFcnJvcihuZXcgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKG1lc3NhZ2VzXzEuRXJyb3JDb2Rlcy5JbnZhbGlkUGFyYW1zLCBgUmVxdWVzdCAke3JlcXVlc3RNZXNzYWdlLm1ldGhvZH0gZGVmaW5lcyAke3R5cGUubnVtYmVyT2ZQYXJhbXN9IHBhcmFtcyBidXQgcmVjZWl2ZWQgbm9uZS5gKSwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXJSZXN1bHQgPSByZXF1ZXN0SGFuZGxlcihjYW5jZWxsYXRpb25Tb3VyY2UudG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVxdWVzdE1lc3NhZ2UucGFyYW1zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlLnBhcmFtZXRlclN0cnVjdHVyZXMgPT09IG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBseUVycm9yKG5ldyBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IobWVzc2FnZXNfMS5FcnJvckNvZGVzLkludmFsaWRQYXJhbXMsIGBSZXF1ZXN0ICR7cmVxdWVzdE1lc3NhZ2UubWV0aG9kfSBkZWZpbmVzIHBhcmFtZXRlcnMgYnkgbmFtZSBidXQgcmVjZWl2ZWQgcGFyYW1ldGVycyBieSBwb3NpdGlvbmApLCByZXF1ZXN0TWVzc2FnZS5tZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlclJlc3VsdCA9IHJlcXVlc3RIYW5kbGVyKC4uLnJlcXVlc3RNZXNzYWdlLnBhcmFtcywgY2FuY2VsbGF0aW9uU291cmNlLnRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQgJiYgdHlwZS5wYXJhbWV0ZXJTdHJ1Y3R1cmVzID09PSBtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYnlQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGx5RXJyb3IobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihtZXNzYWdlc18xLkVycm9yQ29kZXMuSW52YWxpZFBhcmFtcywgYFJlcXVlc3QgJHtyZXF1ZXN0TWVzc2FnZS5tZXRob2R9IGRlZmluZXMgcGFyYW1ldGVycyBieSBwb3NpdGlvbiBidXQgcmVjZWl2ZWQgcGFyYW1ldGVycyBieSBuYW1lYCksIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyUmVzdWx0ID0gcmVxdWVzdEhhbmRsZXIocmVxdWVzdE1lc3NhZ2UucGFyYW1zLCBjYW5jZWxsYXRpb25Tb3VyY2UudG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXJSZXF1ZXN0SGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyUmVzdWx0ID0gc3RhclJlcXVlc3RIYW5kbGVyKHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgcmVxdWVzdE1lc3NhZ2UucGFyYW1zLCBjYW5jZWxsYXRpb25Tb3VyY2UudG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gaGFuZGxlclJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoIWhhbmRsZXJSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFRva2Vucy5kZWxldGUodG9rZW5LZXkpO1xuICAgICAgICAgICAgICAgICAgICByZXBseVN1Y2Nlc3MoaGFuZGxlclJlc3VsdCwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9taXNlLnRoZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKChyZXN1bHRPckVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VG9rZW5zLmRlbGV0ZSh0b2tlbktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXBseShyZXN1bHRPckVycm9yLCByZXF1ZXN0TWVzc2FnZS5tZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RUb2tlbnMuZGVsZXRlKHRva2VuS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGx5RXJyb3IoZXJyb3IsIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVycm9yICYmIElzLnN0cmluZyhlcnJvci5tZXNzYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGx5RXJyb3IobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihtZXNzYWdlc18xLkVycm9yQ29kZXMuSW50ZXJuYWxFcnJvciwgYFJlcXVlc3QgJHtyZXF1ZXN0TWVzc2FnZS5tZXRob2R9IGZhaWxlZCB3aXRoIG1lc3NhZ2U6ICR7ZXJyb3IubWVzc2FnZX1gKSwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbHlFcnJvcihuZXcgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKG1lc3NhZ2VzXzEuRXJyb3JDb2Rlcy5JbnRlcm5hbEVycm9yLCBgUmVxdWVzdCAke3JlcXVlc3RNZXNzYWdlLm1ldGhvZH0gZmFpbGVkIHVuZXhwZWN0ZWRseSB3aXRob3V0IHByb3ZpZGluZyBhbnkgZGV0YWlscy5gKSwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RUb2tlbnMuZGVsZXRlKHRva2VuS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgcmVwbHkoaGFuZGxlclJlc3VsdCwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlcXVlc3RUb2tlbnMuZGVsZXRlKHRva2VuS2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVwbHkoZXJyb3IsIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXJyb3IgJiYgSXMuc3RyaW5nKGVycm9yLm1lc3NhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5RXJyb3IobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihtZXNzYWdlc18xLkVycm9yQ29kZXMuSW50ZXJuYWxFcnJvciwgYFJlcXVlc3QgJHtyZXF1ZXN0TWVzc2FnZS5tZXRob2R9IGZhaWxlZCB3aXRoIG1lc3NhZ2U6ICR7ZXJyb3IubWVzc2FnZX1gKSwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVwbHlFcnJvcihuZXcgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKG1lc3NhZ2VzXzEuRXJyb3JDb2Rlcy5JbnRlcm5hbEVycm9yLCBgUmVxdWVzdCAke3JlcXVlc3RNZXNzYWdlLm1ldGhvZH0gZmFpbGVkIHVuZXhwZWN0ZWRseSB3aXRob3V0IHByb3ZpZGluZyBhbnkgZGV0YWlscy5gKSwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcGx5RXJyb3IobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihtZXNzYWdlc18xLkVycm9yQ29kZXMuTWV0aG9kTm90Rm91bmQsIGBVbmhhbmRsZWQgbWV0aG9kICR7cmVxdWVzdE1lc3NhZ2UubWV0aG9kfWApLCByZXF1ZXN0TWVzc2FnZS5tZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2VNZXNzYWdlKSB7XG4gICAgICAgIGlmIChpc0Rpc3Bvc2VkKCkpIHtcbiAgICAgICAgICAgIC8vIFNlZSBoYW5kbGUgcmVxdWVzdC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzcG9uc2VNZXNzYWdlLmlkID09PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VNZXNzYWdlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBSZWNlaXZlZCByZXNwb25zZSBtZXNzYWdlIHdpdGhvdXQgaWQ6IEVycm9yIGlzOiBcXG4ke0pTT04uc3RyaW5naWZ5KHJlc3BvbnNlTWVzc2FnZS5lcnJvciwgdW5kZWZpbmVkLCA0KX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgUmVjZWl2ZWQgcmVzcG9uc2UgbWVzc2FnZSB3aXRob3V0IGlkLiBObyBmdXJ0aGVyIGVycm9yIGluZm9ybWF0aW9uIHByb3ZpZGVkLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gcmVzcG9uc2VNZXNzYWdlLmlkO1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VQcm9taXNlID0gcmVzcG9uc2VQcm9taXNlcy5nZXQoa2V5KTtcbiAgICAgICAgICAgIHRyYWNlUmVjZWl2ZWRSZXNwb25zZShyZXNwb25zZU1lc3NhZ2UsIHJlc3BvbnNlUHJvbWlzZSk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VQcm9taXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZVByb21pc2VzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZU1lc3NhZ2UuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gcmVzcG9uc2VNZXNzYWdlLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VQcm9taXNlLnJlamVjdChuZXcgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKGVycm9yLmNvZGUsIGVycm9yLm1lc3NhZ2UsIGVycm9yLmRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXNwb25zZU1lc3NhZ2UucmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlTWVzc2FnZS5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaG91bGQgbmV2ZXIgaGFwcGVuLicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBSZXNwb25zZSBoYW5kbGVyICcke3Jlc3BvbnNlUHJvbWlzZS5tZXRob2R9JyBmYWlsZWQgd2l0aCBtZXNzYWdlOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoYFJlc3BvbnNlIGhhbmRsZXIgJyR7cmVzcG9uc2VQcm9taXNlLm1ldGhvZH0nIGZhaWxlZCB1bmV4cGVjdGVkbHkuYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlTm90aWZpY2F0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKGlzRGlzcG9zZWQoKSkge1xuICAgICAgICAgICAgLy8gU2VlIGhhbmRsZSByZXF1ZXN0LlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICBsZXQgbm90aWZpY2F0aW9uSGFuZGxlcjtcbiAgICAgICAgaWYgKG1lc3NhZ2UubWV0aG9kID09PSBDYW5jZWxOb3RpZmljYXRpb24udHlwZS5tZXRob2QpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbElkID0gbWVzc2FnZS5wYXJhbXMuaWQ7XG4gICAgICAgICAgICBrbm93bkNhbmNlbGVkUmVxdWVzdHMuZGVsZXRlKGNhbmNlbElkKTtcbiAgICAgICAgICAgIHRyYWNlUmVjZWl2ZWROb3RpZmljYXRpb24obWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gbm90aWZpY2F0aW9uSGFuZGxlcnMuZ2V0KG1lc3NhZ2UubWV0aG9kKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uSGFuZGxlciA9IGVsZW1lbnQuaGFuZGxlcjtcbiAgICAgICAgICAgICAgICB0eXBlID0gZWxlbWVudC50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChub3RpZmljYXRpb25IYW5kbGVyIHx8IHN0YXJOb3RpZmljYXRpb25IYW5kbGVyKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRyYWNlUmVjZWl2ZWROb3RpZmljYXRpb24obWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgaWYgKG5vdGlmaWNhdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucGFyYW1zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZS5udW1iZXJPZlBhcmFtcyAhPT0gMCAmJiB0eXBlLnBhcmFtZXRlclN0cnVjdHVyZXMgIT09IG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBOb3RpZmljYXRpb24gJHttZXNzYWdlLm1ldGhvZH0gZGVmaW5lcyAke3R5cGUubnVtYmVyT2ZQYXJhbXN9IHBhcmFtcyBidXQgcmVjZWl2ZWQgbm9uZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25IYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShtZXNzYWdlLnBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBKU09OLVJQQyBsaWJyYXJpZXMgdGhhdCBzZW5kIHByb2dyZXNzIG1lc3NhZ2UgYXMgcG9zaXRpb25hbCBwYXJhbXMgYWx0aG91Z2hcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpZmllZCBhcyBuYW1lZC4gU28gY29udmVydCB0aGVtIGlmIHRoaXMgaXMgdGhlIGNhc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBtZXNzYWdlLnBhcmFtcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLm1ldGhvZCA9PT0gUHJvZ3Jlc3NOb3RpZmljYXRpb24udHlwZS5tZXRob2QgJiYgcGFyYW1zLmxlbmd0aCA9PT0gMiAmJiBQcm9ncmVzc1Rva2VuLmlzKHBhcmFtc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25IYW5kbGVyKHsgdG9rZW46IHBhcmFtc1swXSwgdmFsdWU6IHBhcmFtc1sxXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUucGFyYW1ldGVyU3RydWN0dXJlcyA9PT0gbWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBOb3RpZmljYXRpb24gJHttZXNzYWdlLm1ldGhvZH0gZGVmaW5lcyBwYXJhbWV0ZXJzIGJ5IG5hbWUgYnV0IHJlY2VpdmVkIHBhcmFtZXRlcnMgYnkgcG9zaXRpb25gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZS5udW1iZXJPZlBhcmFtcyAhPT0gbWVzc2FnZS5wYXJhbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoYE5vdGlmaWNhdGlvbiAke21lc3NhZ2UubWV0aG9kfSBkZWZpbmVzICR7dHlwZS5udW1iZXJPZlBhcmFtc30gcGFyYW1zIGJ1dCByZWNlaXZlZCAke3BhcmFtcy5sZW5ndGh9IGFyZ3VtZW50c2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkhhbmRsZXIoLi4ucGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQgJiYgdHlwZS5wYXJhbWV0ZXJTdHJ1Y3R1cmVzID09PSBtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYnlQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgTm90aWZpY2F0aW9uICR7bWVzc2FnZS5tZXRob2R9IGRlZmluZXMgcGFyYW1ldGVycyBieSBwb3NpdGlvbiBidXQgcmVjZWl2ZWQgcGFyYW1ldGVycyBieSBuYW1lYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25IYW5kbGVyKG1lc3NhZ2UucGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGFyTm90aWZpY2F0aW9uSGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBzdGFyTm90aWZpY2F0aW9uSGFuZGxlcihtZXNzYWdlLm1ldGhvZCwgbWVzc2FnZS5wYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgTm90aWZpY2F0aW9uIGhhbmRsZXIgJyR7bWVzc2FnZS5tZXRob2R9JyBmYWlsZWQgd2l0aCBtZXNzYWdlOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoYE5vdGlmaWNhdGlvbiBoYW5kbGVyICcke21lc3NhZ2UubWV0aG9kfScgZmFpbGVkIHVuZXhwZWN0ZWRseS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB1bmhhbmRsZWROb3RpZmljYXRpb25FbWl0dGVyLmZpcmUobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlSW52YWxpZE1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignUmVjZWl2ZWQgZW1wdHkgbWVzc2FnZS4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsb2dnZXIuZXJyb3IoYFJlY2VpdmVkIG1lc3NhZ2Ugd2hpY2ggaXMgbmVpdGhlciBhIHJlc3BvbnNlIG5vciBhIG5vdGlmaWNhdGlvbiBtZXNzYWdlOlxcbiR7SlNPTi5zdHJpbmdpZnkobWVzc2FnZSwgbnVsbCwgNCl9YCk7XG4gICAgICAgIC8vIFRlc3Qgd2hldGhlciB3ZSBmaW5kIGFuIGlkIHRvIHJlamVjdCB0aGUgcHJvbWlzZVxuICAgICAgICBjb25zdCByZXNwb25zZU1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICBpZiAoSXMuc3RyaW5nKHJlc3BvbnNlTWVzc2FnZS5pZCkgfHwgSXMubnVtYmVyKHJlc3BvbnNlTWVzc2FnZS5pZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHJlc3BvbnNlTWVzc2FnZS5pZDtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlSGFuZGxlciA9IHJlc3BvbnNlUHJvbWlzZXMuZ2V0KGtleSk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VIYW5kbGVyLnJlamVjdChuZXcgRXJyb3IoJ1RoZSByZWNlaXZlZCByZXNwb25zZSBoYXMgbmVpdGhlciBhIHJlc3VsdCBub3IgYW4gZXJyb3IgcHJvcGVydHkuJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0cmluZ2lmeVRyYWNlKHBhcmFtcykge1xuICAgICAgICBpZiAocGFyYW1zID09PSB1bmRlZmluZWQgfHwgcGFyYW1zID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodHJhY2UpIHtcbiAgICAgICAgICAgIGNhc2UgVHJhY2UuVmVyYm9zZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocGFyYW1zLCBudWxsLCA0KTtcbiAgICAgICAgICAgIGNhc2UgVHJhY2UuQ29tcGFjdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocGFyYW1zKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFjZVNlbmRpbmdSZXF1ZXN0KG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHRyYWNlID09PSBUcmFjZS5PZmYgfHwgIXRyYWNlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFjZUZvcm1hdCA9PT0gVHJhY2VGb3JtYXQuVGV4dCkge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoKHRyYWNlID09PSBUcmFjZS5WZXJib3NlIHx8IHRyYWNlID09PSBUcmFjZS5Db21wYWN0KSAmJiBtZXNzYWdlLnBhcmFtcykge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBgUGFyYW1zOiAke3N0cmluZ2lmeVRyYWNlKG1lc3NhZ2UucGFyYW1zKX1cXG5cXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhY2VyLmxvZyhgU2VuZGluZyByZXF1ZXN0ICcke21lc3NhZ2UubWV0aG9kfSAtICgke21lc3NhZ2UuaWR9KScuYCwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dMU1BNZXNzYWdlKCdzZW5kLXJlcXVlc3QnLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFjZVNlbmRpbmdOb3RpZmljYXRpb24obWVzc2FnZSkge1xuICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLk9mZiB8fCAhdHJhY2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYWNlRm9ybWF0ID09PSBUcmFjZUZvcm1hdC5UZXh0KSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuVmVyYm9zZSB8fCB0cmFjZSA9PT0gVHJhY2UuQ29tcGFjdCkge1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gYFBhcmFtczogJHtzdHJpbmdpZnlUcmFjZShtZXNzYWdlLnBhcmFtcyl9XFxuXFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSAnTm8gcGFyYW1ldGVycyBwcm92aWRlZC5cXG5cXG4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNlci5sb2coYFNlbmRpbmcgbm90aWZpY2F0aW9uICcke21lc3NhZ2UubWV0aG9kfScuYCwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsb2dMU1BNZXNzYWdlKCdzZW5kLW5vdGlmaWNhdGlvbicsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYWNlU2VuZGluZ1Jlc3BvbnNlKG1lc3NhZ2UsIG1ldGhvZCwgc3RhcnRUaW1lKSB7XG4gICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuT2ZmIHx8ICF0cmFjZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhY2VGb3JtYXQgPT09IFRyYWNlRm9ybWF0LlRleHQpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHRyYWNlID09PSBUcmFjZS5WZXJib3NlIHx8IHRyYWNlID09PSBUcmFjZS5Db21wYWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZXJyb3IgJiYgbWVzc2FnZS5lcnJvci5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBgRXJyb3IgZGF0YTogJHtzdHJpbmdpZnlUcmFjZShtZXNzYWdlLmVycm9yLmRhdGEpfVxcblxcbmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBgUmVzdWx0OiAke3N0cmluZ2lmeVRyYWNlKG1lc3NhZ2UucmVzdWx0KX1cXG5cXG5gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1lc3NhZ2UuZXJyb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9ICdObyByZXN1bHQgcmV0dXJuZWQuXFxuXFxuJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNlci5sb2coYFNlbmRpbmcgcmVzcG9uc2UgJyR7bWV0aG9kfSAtICgke21lc3NhZ2UuaWR9KScuIFByb2Nlc3NpbmcgcmVxdWVzdCB0b29rICR7RGF0ZS5ub3coKSAtIHN0YXJ0VGltZX1tc2AsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nTFNQTWVzc2FnZSgnc2VuZC1yZXNwb25zZScsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYWNlUmVjZWl2ZWRSZXF1ZXN0KG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHRyYWNlID09PSBUcmFjZS5PZmYgfHwgIXRyYWNlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFjZUZvcm1hdCA9PT0gVHJhY2VGb3JtYXQuVGV4dCkge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoKHRyYWNlID09PSBUcmFjZS5WZXJib3NlIHx8IHRyYWNlID09PSBUcmFjZS5Db21wYWN0KSAmJiBtZXNzYWdlLnBhcmFtcykge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBgUGFyYW1zOiAke3N0cmluZ2lmeVRyYWNlKG1lc3NhZ2UucGFyYW1zKX1cXG5cXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhY2VyLmxvZyhgUmVjZWl2ZWQgcmVxdWVzdCAnJHttZXNzYWdlLm1ldGhvZH0gLSAoJHttZXNzYWdlLmlkfSknLmAsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nTFNQTWVzc2FnZSgncmVjZWl2ZS1yZXF1ZXN0JywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhY2VSZWNlaXZlZE5vdGlmaWNhdGlvbihtZXNzYWdlKSB7XG4gICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuT2ZmIHx8ICF0cmFjZXIgfHwgbWVzc2FnZS5tZXRob2QgPT09IExvZ1RyYWNlTm90aWZpY2F0aW9uLnR5cGUubWV0aG9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYWNlRm9ybWF0ID09PSBUcmFjZUZvcm1hdC5UZXh0KSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuVmVyYm9zZSB8fCB0cmFjZSA9PT0gVHJhY2UuQ29tcGFjdCkge1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gYFBhcmFtczogJHtzdHJpbmdpZnlUcmFjZShtZXNzYWdlLnBhcmFtcyl9XFxuXFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSAnTm8gcGFyYW1ldGVycyBwcm92aWRlZC5cXG5cXG4nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNlci5sb2coYFJlY2VpdmVkIG5vdGlmaWNhdGlvbiAnJHttZXNzYWdlLm1ldGhvZH0nLmAsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nTFNQTWVzc2FnZSgncmVjZWl2ZS1ub3RpZmljYXRpb24nLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFjZVJlY2VpdmVkUmVzcG9uc2UobWVzc2FnZSwgcmVzcG9uc2VQcm9taXNlKSB7XG4gICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuT2ZmIHx8ICF0cmFjZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhY2VGb3JtYXQgPT09IFRyYWNlRm9ybWF0LlRleHQpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHRyYWNlID09PSBUcmFjZS5WZXJib3NlIHx8IHRyYWNlID09PSBUcmFjZS5Db21wYWN0KSB7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZXJyb3IgJiYgbWVzc2FnZS5lcnJvci5kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBgRXJyb3IgZGF0YTogJHtzdHJpbmdpZnlUcmFjZShtZXNzYWdlLmVycm9yLmRhdGEpfVxcblxcbmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBgUmVzdWx0OiAke3N0cmluZ2lmeVRyYWNlKG1lc3NhZ2UucmVzdWx0KX1cXG5cXG5gO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1lc3NhZ2UuZXJyb3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9ICdObyByZXN1bHQgcmV0dXJuZWQuXFxuXFxuJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXNwb25zZVByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG1lc3NhZ2UuZXJyb3IgPyBgIFJlcXVlc3QgZmFpbGVkOiAke21lc3NhZ2UuZXJyb3IubWVzc2FnZX0gKCR7bWVzc2FnZS5lcnJvci5jb2RlfSkuYCA6ICcnO1xuICAgICAgICAgICAgICAgIHRyYWNlci5sb2coYFJlY2VpdmVkIHJlc3BvbnNlICcke3Jlc3BvbnNlUHJvbWlzZS5tZXRob2R9IC0gKCR7bWVzc2FnZS5pZH0pJyBpbiAke0RhdGUubm93KCkgLSByZXNwb25zZVByb21pc2UudGltZXJTdGFydH1tcy4ke2Vycm9yfWAsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJhY2VyLmxvZyhgUmVjZWl2ZWQgcmVzcG9uc2UgJHttZXNzYWdlLmlkfSB3aXRob3V0IGFjdGl2ZSByZXNwb25zZSBwcm9taXNlLmAsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nTFNQTWVzc2FnZSgncmVjZWl2ZS1yZXNwb25zZScsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGxvZ0xTUE1lc3NhZ2UodHlwZSwgbWVzc2FnZSkge1xuICAgICAgICBpZiAoIXRyYWNlciB8fCB0cmFjZSA9PT0gVHJhY2UuT2ZmKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbHNwTWVzc2FnZSA9IHtcbiAgICAgICAgICAgIGlzTFNQTWVzc2FnZTogdHJ1ZSxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpXG4gICAgICAgIH07XG4gICAgICAgIHRyYWNlci5sb2cobHNwTWVzc2FnZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRocm93SWZDbG9zZWRPckRpc3Bvc2VkKCkge1xuICAgICAgICBpZiAoaXNDbG9zZWQoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENvbm5lY3Rpb25FcnJvcihDb25uZWN0aW9uRXJyb3JzLkNsb3NlZCwgJ0Nvbm5lY3Rpb24gaXMgY2xvc2VkLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Rpc3Bvc2VkKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDb25uZWN0aW9uRXJyb3IoQ29ubmVjdGlvbkVycm9ycy5EaXNwb3NlZCwgJ0Nvbm5lY3Rpb24gaXMgZGlzcG9zZWQuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGhyb3dJZkxpc3RlbmluZygpIHtcbiAgICAgICAgaWYgKGlzTGlzdGVuaW5nKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDb25uZWN0aW9uRXJyb3IoQ29ubmVjdGlvbkVycm9ycy5BbHJlYWR5TGlzdGVuaW5nLCAnQ29ubmVjdGlvbiBpcyBhbHJlYWR5IGxpc3RlbmluZycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRocm93SWZOb3RMaXN0ZW5pbmcoKSB7XG4gICAgICAgIGlmICghaXNMaXN0ZW5pbmcoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsIGxpc3RlbigpIGZpcnN0LicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVuZGVmaW5lZFRvTnVsbChwYXJhbSkge1xuICAgICAgICBpZiAocGFyYW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbnVsbFRvVW5kZWZpbmVkKHBhcmFtKSB7XG4gICAgICAgIGlmIChwYXJhbSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBpc05hbWVkUGFyYW0ocGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtICE9PSB1bmRlZmluZWQgJiYgcGFyYW0gIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkocGFyYW0pICYmIHR5cGVvZiBwYXJhbSA9PT0gJ29iamVjdCc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVTaW5nbGVQYXJhbShwYXJhbWV0ZXJTdHJ1Y3R1cmVzLCBwYXJhbSkge1xuICAgICAgICBzd2l0Y2ggKHBhcmFtZXRlclN0cnVjdHVyZXMpIHtcbiAgICAgICAgICAgIGNhc2UgbWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmF1dG86XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFtZWRQYXJhbShwYXJhbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxUb1VuZGVmaW5lZChwYXJhbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3VuZGVmaW5lZFRvTnVsbChwYXJhbSldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgbWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5TmFtZTpcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFtZWRQYXJhbShwYXJhbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSZWNlaXZlZCBwYXJhbWV0ZXJzIGJ5IG5hbWUgYnV0IHBhcmFtIGlzIG5vdCBhbiBvYmplY3QgbGl0ZXJhbC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxUb1VuZGVmaW5lZChwYXJhbSk7XG4gICAgICAgICAgICBjYXNlIG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieVBvc2l0aW9uOlxuICAgICAgICAgICAgICAgIHJldHVybiBbdW5kZWZpbmVkVG9OdWxsKHBhcmFtKV07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBwYXJhbWV0ZXIgc3RydWN0dXJlICR7cGFyYW1ldGVyU3RydWN0dXJlcy50b1N0cmluZygpfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVNZXNzYWdlUGFyYW1zKHR5cGUsIHBhcmFtcykge1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBjb25zdCBudW1iZXJPZlBhcmFtcyA9IHR5cGUubnVtYmVyT2ZQYXJhbXM7XG4gICAgICAgIHN3aXRjaCAobnVtYmVyT2ZQYXJhbXMpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29tcHV0ZVNpbmdsZVBhcmFtKHR5cGUucGFyYW1ldGVyU3RydWN0dXJlcywgcGFyYW1zWzBdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoICYmIGkgPCBudW1iZXJPZlBhcmFtczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHVuZGVmaW5lZFRvTnVsbChwYXJhbXNbaV0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGggPCBudW1iZXJPZlBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gcGFyYW1zLmxlbmd0aDsgaSA8IG51bWJlck9mUGFyYW1zOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNvbnN0IGNvbm5lY3Rpb24gPSB7XG4gICAgICAgIHNlbmROb3RpZmljYXRpb246ICh0eXBlLCAuLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICB0aHJvd0lmQ2xvc2VkT3JEaXNwb3NlZCgpO1xuICAgICAgICAgICAgbGV0IG1ldGhvZDtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlUGFyYW1zO1xuICAgICAgICAgICAgaWYgKElzLnN0cmluZyh0eXBlKSkge1xuICAgICAgICAgICAgICAgIG1ldGhvZCA9IHR5cGU7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3QgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIGxldCBwYXJhbVN0YXJ0ID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1ldGVyU3RydWN0dXJlcyA9IG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuaXMoZmlyc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtU3RhcnQgPSAxO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gZmlyc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBwYXJhbUVuZCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGNvbnN0IG51bWJlck9mUGFyYW1zID0gcGFyYW1FbmQgLSBwYXJhbVN0YXJ0O1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobnVtYmVyT2ZQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVBhcmFtcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlUGFyYW1zID0gY29tcHV0ZVNpbmdsZVBhcmFtKHBhcmFtZXRlclN0cnVjdHVyZXMsIGFyZ3NbcGFyYW1TdGFydF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1ldGVyU3RydWN0dXJlcyA9PT0gbWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVjZWl2ZWQgJHtudW1iZXJPZlBhcmFtc30gcGFyYW1ldGVycyBmb3IgJ2J5IE5hbWUnIG5vdGlmaWNhdGlvbiBwYXJhbWV0ZXIgc3RydWN0dXJlLmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVBhcmFtcyA9IGFyZ3Muc2xpY2UocGFyYW1TdGFydCwgcGFyYW1FbmQpLm1hcCh2YWx1ZSA9PiB1bmRlZmluZWRUb051bGwodmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgbWV0aG9kID0gdHlwZS5tZXRob2Q7XG4gICAgICAgICAgICAgICAgbWVzc2FnZVBhcmFtcyA9IGNvbXB1dGVNZXNzYWdlUGFyYW1zKHR5cGUsIHBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBub3RpZmljYXRpb25NZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIGpzb25ycGM6IHZlcnNpb24sXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBtZXNzYWdlUGFyYW1zXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdHJhY2VTZW5kaW5nTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbk1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VXcml0ZXIud3JpdGUobm90aWZpY2F0aW9uTWVzc2FnZSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBTZW5kaW5nIG5vdGlmaWNhdGlvbiBmYWlsZWQuYCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Ob3RpZmljYXRpb246ICh0eXBlLCBoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgICB0aHJvd0lmQ2xvc2VkT3JEaXNwb3NlZCgpO1xuICAgICAgICAgICAgbGV0IG1ldGhvZDtcbiAgICAgICAgICAgIGlmIChJcy5mdW5jKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgc3Rhck5vdGlmaWNhdGlvbkhhbmRsZXIgPSB0eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGlmIChJcy5zdHJpbmcodHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uSGFuZGxlcnMuc2V0KHR5cGUsIHsgdHlwZTogdW5kZWZpbmVkLCBoYW5kbGVyIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gdHlwZS5tZXRob2Q7XG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkhhbmRsZXJzLnNldCh0eXBlLm1ldGhvZCwgeyB0eXBlLCBoYW5kbGVyIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkhhbmRsZXJzLmRlbGV0ZShtZXRob2QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Rhck5vdGlmaWNhdGlvbkhhbmRsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBvblByb2dyZXNzOiAoX3R5cGUsIHRva2VuLCBoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAocHJvZ3Jlc3NIYW5kbGVycy5oYXModG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm9ncmVzcyBoYW5kbGVyIGZvciB0b2tlbiAke3Rva2VufSBhbHJlYWR5IHJlZ2lzdGVyZWRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb2dyZXNzSGFuZGxlcnMuc2V0KHRva2VuLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc0hhbmRsZXJzLmRlbGV0ZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgc2VuZFByb2dyZXNzOiAoX3R5cGUsIHRva2VuLCB2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgbm90IGF3YWl0IGJ1dCBzaW1wbGUgcmV0dXJuIHRvIGVuc3VyZSB0aGF0IHdlIGRvbid0IGhhdmUgYW5vdGhlclxuICAgICAgICAgICAgLy8gYXN5bmMgc2NoZWR1bGluZy4gT3RoZXJ3aXNlIG9uZSBzZW5kIGNvdWxkIG92ZXJ0YWtlIGFub3RoZXIgc2VuZC5cbiAgICAgICAgICAgIHJldHVybiBjb25uZWN0aW9uLnNlbmROb3RpZmljYXRpb24oUHJvZ3Jlc3NOb3RpZmljYXRpb24udHlwZSwgeyB0b2tlbiwgdmFsdWUgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uVW5oYW5kbGVkUHJvZ3Jlc3M6IHVuaGFuZGxlZFByb2dyZXNzRW1pdHRlci5ldmVudCxcbiAgICAgICAgc2VuZFJlcXVlc3Q6ICh0eXBlLCAuLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICB0aHJvd0lmQ2xvc2VkT3JEaXNwb3NlZCgpO1xuICAgICAgICAgICAgdGhyb3dJZk5vdExpc3RlbmluZygpO1xuICAgICAgICAgICAgbGV0IG1ldGhvZDtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlUGFyYW1zO1xuICAgICAgICAgICAgbGV0IHRva2VuID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKElzLnN0cmluZyh0eXBlKSkge1xuICAgICAgICAgICAgICAgIG1ldGhvZCA9IHR5cGU7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3QgPSBhcmdzWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3QgPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtU3RhcnQgPSAwO1xuICAgICAgICAgICAgICAgIGxldCBwYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gbWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmF1dG87XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5pcyhmaXJzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1TdGFydCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlclN0cnVjdHVyZXMgPSBmaXJzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtRW5kID0gYXJncy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbGxhdGlvbl8xLkNhbmNlbGxhdGlvblRva2VuLmlzKGxhc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtRW5kID0gcGFyYW1FbmQgLSAxO1xuICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IGxhc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IG51bWJlck9mUGFyYW1zID0gcGFyYW1FbmQgLSBwYXJhbVN0YXJ0O1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobnVtYmVyT2ZQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVBhcmFtcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlUGFyYW1zID0gY29tcHV0ZVNpbmdsZVBhcmFtKHBhcmFtZXRlclN0cnVjdHVyZXMsIGFyZ3NbcGFyYW1TdGFydF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1ldGVyU3RydWN0dXJlcyA9PT0gbWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVjZWl2ZWQgJHtudW1iZXJPZlBhcmFtc30gcGFyYW1ldGVycyBmb3IgJ2J5IE5hbWUnIHJlcXVlc3QgcGFyYW1ldGVyIHN0cnVjdHVyZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VQYXJhbXMgPSBhcmdzLnNsaWNlKHBhcmFtU3RhcnQsIHBhcmFtRW5kKS5tYXAodmFsdWUgPT4gdW5kZWZpbmVkVG9OdWxsKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBhcmdzO1xuICAgICAgICAgICAgICAgIG1ldGhvZCA9IHR5cGUubWV0aG9kO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VQYXJhbXMgPSBjb21wdXRlTWVzc2FnZVBhcmFtcyh0eXBlLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG51bWJlck9mUGFyYW1zID0gdHlwZS5udW1iZXJPZlBhcmFtcztcbiAgICAgICAgICAgICAgICB0b2tlbiA9IGNhbmNlbGxhdGlvbl8xLkNhbmNlbGxhdGlvblRva2VuLmlzKHBhcmFtc1tudW1iZXJPZlBhcmFtc10pID8gcGFyYW1zW251bWJlck9mUGFyYW1zXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGlkID0gc2VxdWVuY2VOdW1iZXIrKztcbiAgICAgICAgICAgIGxldCBkaXNwb3NhYmxlO1xuICAgICAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICAgICAgZGlzcG9zYWJsZSA9IHRva2VuLm9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IGNhbmNlbGxhdGlvblN0cmF0ZWd5LnNlbmRlci5zZW5kQ2FuY2VsbGF0aW9uKGNvbm5lY3Rpb24sIGlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhgUmVjZWl2ZWQgbm8gcHJvbWlzZSBmcm9tIGNhbmNlbGxhdGlvbiBzdHJhdGVneSB3aGVuIGNhbmNlbGxpbmcgaWQgJHtpZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIubG9nKGBTZW5kaW5nIGNhbmNlbGxhdGlvbiBtZXNzYWdlcyBmb3IgaWQgJHtpZH0gZmFpbGVkYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAganNvbnJwYzogdmVyc2lvbixcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1zOiBtZXNzYWdlUGFyYW1zXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdHJhY2VTZW5kaW5nUmVxdWVzdChyZXF1ZXN0TWVzc2FnZSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbmNlbGxhdGlvblN0cmF0ZWd5LnNlbmRlci5lbmFibGVDYW5jZWxsYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjYW5jZWxsYXRpb25TdHJhdGVneS5zZW5kZXIuZW5hYmxlQ2FuY2VsbGF0aW9uKHJlcXVlc3RNZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb2x2ZVdpdGhDbGVhbnVwID0gKHIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyKTtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9uU3RyYXRlZ3kuc2VuZGVyLmNsZWFudXAoaWQpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwb3NhYmxlPy5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWplY3RXaXRoQ2xlYW51cCA9IChyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChyKTtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9uU3RyYXRlZ3kuc2VuZGVyLmNsZWFudXAoaWQpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwb3NhYmxlPy5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZVByb21pc2UgPSB7IG1ldGhvZDogbWV0aG9kLCB0aW1lclN0YXJ0OiBEYXRlLm5vdygpLCByZXNvbHZlOiByZXNvbHZlV2l0aENsZWFudXAsIHJlamVjdDogcmVqZWN0V2l0aENsZWFudXAgfTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBtZXNzYWdlV3JpdGVyLndyaXRlKHJlcXVlc3RNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VQcm9taXNlcy5zZXQoaWQsIHJlc3BvbnNlUHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoYFNlbmRpbmcgcmVxdWVzdCBmYWlsZWQuYCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdyaXRpbmcgdGhlIG1lc3NhZ2UgZmFpbGVkLiBTbyB3ZSBuZWVkIHRvIHJlamVjdCB0aGUgcHJvbWlzZS5cbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VQcm9taXNlLnJlamVjdChuZXcgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKG1lc3NhZ2VzXzEuRXJyb3JDb2Rlcy5NZXNzYWdlV3JpdGVFcnJvciwgZXJyb3IubWVzc2FnZSA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biByZWFzb24nKSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvblJlcXVlc3Q6ICh0eXBlLCBoYW5kbGVyKSA9PiB7XG4gICAgICAgICAgICB0aHJvd0lmQ2xvc2VkT3JEaXNwb3NlZCgpO1xuICAgICAgICAgICAgbGV0IG1ldGhvZCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoU3RhclJlcXVlc3RIYW5kbGVyLmlzKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHN0YXJSZXF1ZXN0SGFuZGxlciA9IHR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChJcy5zdHJpbmcodHlwZSkpIHtcbiAgICAgICAgICAgICAgICBtZXRob2QgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEhhbmRsZXJzLnNldCh0eXBlLCB7IGhhbmRsZXI6IGhhbmRsZXIsIHR5cGU6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IHR5cGUubWV0aG9kO1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SGFuZGxlcnMuc2V0KHR5cGUubWV0aG9kLCB7IHR5cGUsIGhhbmRsZXIgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXRob2QgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RIYW5kbGVycy5kZWxldGUobWV0aG9kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJSZXF1ZXN0SGFuZGxlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGhhc1BlbmRpbmdSZXNwb25zZTogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlUHJvbWlzZXMuc2l6ZSA+IDA7XG4gICAgICAgIH0sXG4gICAgICAgIHRyYWNlOiBhc3luYyAoX3ZhbHVlLCBfdHJhY2VyLCBzZW5kTm90aWZpY2F0aW9uT3JUcmFjZU9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgIGxldCBfc2VuZE5vdGlmaWNhdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IF90cmFjZUZvcm1hdCA9IFRyYWNlRm9ybWF0LlRleHQ7XG4gICAgICAgICAgICBpZiAoc2VuZE5vdGlmaWNhdGlvbk9yVHJhY2VPcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoSXMuYm9vbGVhbihzZW5kTm90aWZpY2F0aW9uT3JUcmFjZU9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zZW5kTm90aWZpY2F0aW9uID0gc2VuZE5vdGlmaWNhdGlvbk9yVHJhY2VPcHRpb25zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3NlbmROb3RpZmljYXRpb24gPSBzZW5kTm90aWZpY2F0aW9uT3JUcmFjZU9wdGlvbnMuc2VuZE5vdGlmaWNhdGlvbiB8fCBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgX3RyYWNlRm9ybWF0ID0gc2VuZE5vdGlmaWNhdGlvbk9yVHJhY2VPcHRpb25zLnRyYWNlRm9ybWF0IHx8IFRyYWNlRm9ybWF0LlRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhY2UgPSBfdmFsdWU7XG4gICAgICAgICAgICB0cmFjZUZvcm1hdCA9IF90cmFjZUZvcm1hdDtcbiAgICAgICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuT2ZmKSB7XG4gICAgICAgICAgICAgICAgdHJhY2VyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJhY2VyID0gX3RyYWNlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfc2VuZE5vdGlmaWNhdGlvbiAmJiAhaXNDbG9zZWQoKSAmJiAhaXNEaXNwb3NlZCgpKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY29ubmVjdGlvbi5zZW5kTm90aWZpY2F0aW9uKFNldFRyYWNlTm90aWZpY2F0aW9uLnR5cGUsIHsgdmFsdWU6IFRyYWNlLnRvU3RyaW5nKF92YWx1ZSkgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uRXJyb3I6IGVycm9yRW1pdHRlci5ldmVudCxcbiAgICAgICAgb25DbG9zZTogY2xvc2VFbWl0dGVyLmV2ZW50LFxuICAgICAgICBvblVuaGFuZGxlZE5vdGlmaWNhdGlvbjogdW5oYW5kbGVkTm90aWZpY2F0aW9uRW1pdHRlci5ldmVudCxcbiAgICAgICAgb25EaXNwb3NlOiBkaXNwb3NlRW1pdHRlci5ldmVudCxcbiAgICAgICAgZW5kOiAoKSA9PiB7XG4gICAgICAgICAgICBtZXNzYWdlV3JpdGVyLmVuZCgpO1xuICAgICAgICB9LFxuICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNEaXNwb3NlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhdGUgPSBDb25uZWN0aW9uU3RhdGUuRGlzcG9zZWQ7XG4gICAgICAgICAgICBkaXNwb3NlRW1pdHRlci5maXJlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IobWVzc2FnZXNfMS5FcnJvckNvZGVzLlBlbmRpbmdSZXNwb25zZVJlamVjdGVkLCAnUGVuZGluZyByZXNwb25zZSByZWplY3RlZCBzaW5jZSBjb25uZWN0aW9uIGdvdCBkaXNwb3NlZCcpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBwcm9taXNlIG9mIHJlc3BvbnNlUHJvbWlzZXMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNwb25zZVByb21pc2VzID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgcmVxdWVzdFRva2VucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGtub3duQ2FuY2VsZWRSZXF1ZXN0cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgIG1lc3NhZ2VRdWV1ZSA9IG5ldyBsaW5rZWRNYXBfMS5MaW5rZWRNYXAoKTtcbiAgICAgICAgICAgIC8vIFRlc3QgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgICBpZiAoSXMuZnVuYyhtZXNzYWdlV3JpdGVyLmRpc3Bvc2UpKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZVdyaXRlci5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoSXMuZnVuYyhtZXNzYWdlUmVhZGVyLmRpc3Bvc2UpKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZVJlYWRlci5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxpc3RlbjogKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3dJZkNsb3NlZE9yRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIHRocm93SWZMaXN0ZW5pbmcoKTtcbiAgICAgICAgICAgIHN0YXRlID0gQ29ubmVjdGlvblN0YXRlLkxpc3RlbmluZztcbiAgICAgICAgICAgIG1lc3NhZ2VSZWFkZXIubGlzdGVuKGNhbGxiYWNrKTtcbiAgICAgICAgfSxcbiAgICAgICAgaW5zcGVjdDogKCkgPT4ge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICgwLCByYWxfMS5kZWZhdWx0KSgpLmNvbnNvbGUubG9nKCdpbnNwZWN0Jyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbm5lY3Rpb24ub25Ob3RpZmljYXRpb24oTG9nVHJhY2VOb3RpZmljYXRpb24udHlwZSwgKHBhcmFtcykgPT4ge1xuICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLk9mZiB8fCAhdHJhY2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmVyYm9zZSA9IHRyYWNlID09PSBUcmFjZS5WZXJib3NlIHx8IHRyYWNlID09PSBUcmFjZS5Db21wYWN0O1xuICAgICAgICB0cmFjZXIubG9nKHBhcmFtcy5tZXNzYWdlLCB2ZXJib3NlID8gcGFyYW1zLnZlcmJvc2UgOiB1bmRlZmluZWQpO1xuICAgIH0pO1xuICAgIGNvbm5lY3Rpb24ub25Ob3RpZmljYXRpb24oUHJvZ3Jlc3NOb3RpZmljYXRpb24udHlwZSwgKHBhcmFtcykgPT4ge1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gcHJvZ3Jlc3NIYW5kbGVycy5nZXQocGFyYW1zLnRva2VuKTtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGhhbmRsZXIocGFyYW1zLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHVuaGFuZGxlZFByb2dyZXNzRW1pdHRlci5maXJlKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY29ubmVjdGlvbjtcbn1cbmV4cG9ydHMuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24gPSBjcmVhdGVNZXNzYWdlQ29ubmVjdGlvbjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODg0NDpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkRpc3Bvc2FibGUgPSB2b2lkIDA7XG52YXIgRGlzcG9zYWJsZTtcbihmdW5jdGlvbiAoRGlzcG9zYWJsZSkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShmdW5jKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwb3NlOiBmdW5jXG4gICAgICAgIH07XG4gICAgfVxuICAgIERpc3Bvc2FibGUuY3JlYXRlID0gY3JlYXRlO1xufSkoRGlzcG9zYWJsZSB8fCAoZXhwb3J0cy5EaXNwb3NhYmxlID0gRGlzcG9zYWJsZSA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDI0Nzk6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuRW1pdHRlciA9IGV4cG9ydHMuRXZlbnQgPSB2b2lkIDA7XG5jb25zdCByYWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTA5MSk7XG52YXIgRXZlbnQ7XG4oZnVuY3Rpb24gKEV2ZW50KSB7XG4gICAgY29uc3QgX2Rpc3Bvc2FibGUgPSB7IGRpc3Bvc2UoKSB7IH0gfTtcbiAgICBFdmVudC5Ob25lID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX2Rpc3Bvc2FibGU7IH07XG59KShFdmVudCB8fCAoZXhwb3J0cy5FdmVudCA9IEV2ZW50ID0ge30pKTtcbmNsYXNzIENhbGxiYWNrTGlzdCB7XG4gICAgYWRkKGNhbGxiYWNrLCBjb250ZXh0ID0gbnVsbCwgYnVja2V0KSB7XG4gICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHRzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB0aGlzLl9jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShidWNrZXQpKSB7XG4gICAgICAgICAgICBidWNrZXQucHVzaCh7IGRpc3Bvc2U6ICgpID0+IHRoaXMucmVtb3ZlKGNhbGxiYWNrLCBjb250ZXh0KSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUoY2FsbGJhY2ssIGNvbnRleHQgPSBudWxsKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZvdW5kQ2FsbGJhY2tXaXRoRGlmZmVyZW50Q29udGV4dCA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5fY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FsbGJhY2tzW2ldID09PSBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb250ZXh0c1tpXSA9PT0gY29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjYWxsYmFjayAmIGNvbnRleHQgbWF0Y2ggPT4gcmVtb3ZlIGl0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRleHRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmRDYWxsYmFja1dpdGhEaWZmZXJlbnRDb250ZXh0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvdW5kQ2FsbGJhY2tXaXRoRGlmZmVyZW50Q29udGV4dCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXaGVuIGFkZGluZyBhIGxpc3RlbmVyIHdpdGggYSBjb250ZXh0LCB5b3Ugc2hvdWxkIHJlbW92ZSBpdCB3aXRoIHRoZSBzYW1lIGNvbnRleHQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbnZva2UoLi4uYXJncykge1xuICAgICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrcykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJldCA9IFtdLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3Muc2xpY2UoMCksIGNvbnRleHRzID0gdGhpcy5fY29udGV4dHMuc2xpY2UoMCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0LnB1c2goY2FsbGJhY2tzW2ldLmFwcGx5KGNvbnRleHRzW2ldLCBhcmdzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgKDAsIHJhbF8xLmRlZmF1bHQpKCkuY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuX2NhbGxiYWNrcyB8fCB0aGlzLl9jYWxsYmFja3MubGVuZ3RoID09PSAwO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2NvbnRleHRzID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmNsYXNzIEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKF9vcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBfb3B0aW9ucztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9yIHRoZSBwdWJsaWMgdG8gYWxsb3cgdG8gc3Vic2NyaWJlXG4gICAgICogdG8gZXZlbnRzIGZyb20gdGhpcyBFbWl0dGVyXG4gICAgICovXG4gICAgZ2V0IGV2ZW50KCkge1xuICAgICAgICBpZiAoIXRoaXMuX2V2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudCA9IChsaXN0ZW5lciwgdGhpc0FyZ3MsIGRpc3Bvc2FibGVzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gbmV3IENhbGxiYWNrTGlzdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucyAmJiB0aGlzLl9vcHRpb25zLm9uRmlyc3RMaXN0ZW5lckFkZCAmJiB0aGlzLl9jYWxsYmFja3MuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMub25GaXJzdExpc3RlbmVyQWRkKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MuYWRkKGxpc3RlbmVyLCB0aGlzQXJncyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpc3Bvc2FibGUgaXMgZGlzcG9zZWQgYWZ0ZXIgZW1pdHRlciBpcyBkaXNwb3NlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MucmVtb3ZlKGxpc3RlbmVyLCB0aGlzQXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZGlzcG9zZSA9IEVtaXR0ZXIuX25vb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucyAmJiB0aGlzLl9vcHRpb25zLm9uTGFzdExpc3RlbmVyUmVtb3ZlICYmIHRoaXMuX2NhbGxiYWNrcy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm9uTGFzdExpc3RlbmVyUmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkaXNwb3NhYmxlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zYWJsZXMucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRvIGJlIGtlcHQgcHJpdmF0ZSB0byBmaXJlIGFuIGV2ZW50IHRvXG4gICAgICogc3Vic2NyaWJlcnNcbiAgICAgKi9cbiAgICBmaXJlKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9jYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcy5pbnZva2UuY2FsbCh0aGlzLl9jYWxsYmFja3MsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5FbWl0dGVyID0gRW1pdHRlcjtcbkVtaXR0ZXIuX25vb3AgPSBmdW5jdGlvbiAoKSB7IH07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDY2MTg6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuc3RyaW5nQXJyYXkgPSBleHBvcnRzLmFycmF5ID0gZXhwb3J0cy5mdW5jID0gZXhwb3J0cy5lcnJvciA9IGV4cG9ydHMubnVtYmVyID0gZXhwb3J0cy5zdHJpbmcgPSBleHBvcnRzLmJvb2xlYW4gPSB2b2lkIDA7XG5mdW5jdGlvbiBib29sZWFuKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZTtcbn1cbmV4cG9ydHMuYm9vbGVhbiA9IGJvb2xlYW47XG5mdW5jdGlvbiBzdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZztcbn1cbmV4cG9ydHMuc3RyaW5nID0gc3RyaW5nO1xuZnVuY3Rpb24gbnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXI7XG59XG5leHBvcnRzLm51bWJlciA9IG51bWJlcjtcbmZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRXJyb3I7XG59XG5leHBvcnRzLmVycm9yID0gZXJyb3I7XG5mdW5jdGlvbiBmdW5jKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuZnVuYyA9IGZ1bmM7XG5mdW5jdGlvbiBhcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cbmV4cG9ydHMuYXJyYXkgPSBhcnJheTtcbmZ1bmN0aW9uIHN0cmluZ0FycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIGFycmF5KHZhbHVlKSAmJiB2YWx1ZS5ldmVyeShlbGVtID0+IHN0cmluZyhlbGVtKSk7XG59XG5leHBvcnRzLnN0cmluZ0FycmF5ID0gc3RyaW5nQXJyYXk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDExMDk6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbnZhciBfYTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5MUlVDYWNoZSA9IGV4cG9ydHMuTGlua2VkTWFwID0gZXhwb3J0cy5Ub3VjaCA9IHZvaWQgMDtcbnZhciBUb3VjaDtcbihmdW5jdGlvbiAoVG91Y2gpIHtcbiAgICBUb3VjaC5Ob25lID0gMDtcbiAgICBUb3VjaC5GaXJzdCA9IDE7XG4gICAgVG91Y2guQXNPbGQgPSBUb3VjaC5GaXJzdDtcbiAgICBUb3VjaC5MYXN0ID0gMjtcbiAgICBUb3VjaC5Bc05ldyA9IFRvdWNoLkxhc3Q7XG59KShUb3VjaCB8fCAoZXhwb3J0cy5Ub3VjaCA9IFRvdWNoID0ge30pKTtcbmNsYXNzIExpbmtlZE1hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXNbX2FdID0gJ0xpbmtlZE1hcCc7XG4gICAgICAgIHRoaXMuX21hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5faGVhZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdGFpbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gMDtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuX21hcC5jbGVhcigpO1xuICAgICAgICB0aGlzLl9oZWFkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl90YWlsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICAgICAgdGhpcy5fc3RhdGUrKztcbiAgICB9XG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9oZWFkICYmICF0aGlzLl90YWlsO1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gICAgfVxuICAgIGdldCBmaXJzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWQ/LnZhbHVlO1xuICAgIH1cbiAgICBnZXQgbGFzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhaWw/LnZhbHVlO1xuICAgIH1cbiAgICBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAuaGFzKGtleSk7XG4gICAgfVxuICAgIGdldChrZXksIHRvdWNoID0gVG91Y2guTm9uZSkge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5fbWFwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvdWNoICE9PSBUb3VjaC5Ob25lKSB7XG4gICAgICAgICAgICB0aGlzLnRvdWNoKGl0ZW0sIHRvdWNoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUsIHRvdWNoID0gVG91Y2guTm9uZSkge1xuICAgICAgICBsZXQgaXRlbSA9IHRoaXMuX21hcC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgIGl0ZW0udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmICh0b3VjaCAhPT0gVG91Y2guTm9uZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudG91Y2goaXRlbSwgdG91Y2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXRlbSA9IHsga2V5LCB2YWx1ZSwgbmV4dDogdW5kZWZpbmVkLCBwcmV2aW91czogdW5kZWZpbmVkIH07XG4gICAgICAgICAgICBzd2l0Y2ggKHRvdWNoKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBUb3VjaC5Ob25lOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEl0ZW1MYXN0KGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFRvdWNoLkZpcnN0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEl0ZW1GaXJzdChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUb3VjaC5MYXN0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEl0ZW1MYXN0KGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEl0ZW1MYXN0KGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX21hcC5zZXQoa2V5LCBpdGVtKTtcbiAgICAgICAgICAgIHRoaXMuX3NpemUrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICByZXR1cm4gISF0aGlzLnJlbW92ZShrZXkpO1xuICAgIH1cbiAgICByZW1vdmUoa2V5KSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9tYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tYXAuZGVsZXRlKGtleSk7XG4gICAgICAgIHRoaXMucmVtb3ZlSXRlbShpdGVtKTtcbiAgICAgICAgdGhpcy5fc2l6ZS0tO1xuICAgICAgICByZXR1cm4gaXRlbS52YWx1ZTtcbiAgICB9XG4gICAgc2hpZnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5faGVhZCAmJiAhdGhpcy5fdGFpbCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2hlYWQgfHwgIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsaXN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuX2hlYWQ7XG4gICAgICAgIHRoaXMuX21hcC5kZWxldGUoaXRlbS5rZXkpO1xuICAgICAgICB0aGlzLnJlbW92ZUl0ZW0oaXRlbSk7XG4gICAgICAgIHRoaXMuX3NpemUtLTtcbiAgICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfVxuICAgIGZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZykge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAodGhpc0FyZykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrZm4uYmluZCh0aGlzQXJnKShjdXJyZW50LnZhbHVlLCBjdXJyZW50LmtleSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja2ZuKGN1cnJlbnQudmFsdWUsIGN1cnJlbnQua2V5LCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExpbmtlZE1hcCBnb3QgbW9kaWZpZWQgZHVyaW5nIGl0ZXJhdGlvbi5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAga2V5cygpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLl9oZWFkO1xuICAgICAgICBjb25zdCBpdGVyYXRvciA9IHtcbiAgICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUgIT09IHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTGlua2VkTWFwIGdvdCBtb2RpZmllZCBkdXJpbmcgaXRlcmF0aW9uLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IHZhbHVlOiBjdXJyZW50LmtleSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICB9XG4gICAgdmFsdWVzKCkge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgIGNvbnN0IGl0ZXJhdG9yID0ge1xuICAgICAgICAgICAgW1N5bWJvbC5pdGVyYXRvcl06ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5rZWRNYXAgZ290IG1vZGlmaWVkIGR1cmluZyBpdGVyYXRpb24uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgdmFsdWU6IGN1cnJlbnQudmFsdWUsIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfVxuICAgIGVudHJpZXMoKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5faGVhZDtcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSB7XG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlICE9PSBzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExpbmtlZE1hcCBnb3QgbW9kaWZpZWQgZHVyaW5nIGl0ZXJhdGlvbi5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geyB2YWx1ZTogW2N1cnJlbnQua2V5LCBjdXJyZW50LnZhbHVlXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICB9XG4gICAgWyhfYSA9IFN5bWJvbC50b1N0cmluZ1RhZywgU3ltYm9sLml0ZXJhdG9yKV0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMoKTtcbiAgICB9XG4gICAgdHJpbU9sZChuZXdTaXplKSB7XG4gICAgICAgIGlmIChuZXdTaXplID49IHRoaXMuc2l6ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXdTaXplID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLl9oZWFkO1xuICAgICAgICBsZXQgY3VycmVudFNpemUgPSB0aGlzLnNpemU7XG4gICAgICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnRTaXplID4gbmV3U2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5fbWFwLmRlbGV0ZShjdXJyZW50LmtleSk7XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgICAgICAgICAgY3VycmVudFNpemUtLTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oZWFkID0gY3VycmVudDtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IGN1cnJlbnRTaXplO1xuICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgY3VycmVudC5wcmV2aW91cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGF0ZSsrO1xuICAgIH1cbiAgICBhZGRJdGVtRmlyc3QoaXRlbSkge1xuICAgICAgICAvLyBGaXJzdCB0aW1lIEluc2VydFxuICAgICAgICBpZiAoIXRoaXMuX2hlYWQgJiYgIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLl9oZWFkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5uZXh0ID0gdGhpcy5faGVhZDtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQucHJldmlvdXMgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hlYWQgPSBpdGVtO1xuICAgICAgICB0aGlzLl9zdGF0ZSsrO1xuICAgIH1cbiAgICBhZGRJdGVtTGFzdChpdGVtKSB7XG4gICAgICAgIC8vIEZpcnN0IHRpbWUgSW5zZXJ0XG4gICAgICAgIGlmICghdGhpcy5faGVhZCAmJiAhdGhpcy5fdGFpbCkge1xuICAgICAgICAgICAgdGhpcy5faGVhZCA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsaXN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpdGVtLnByZXZpb3VzID0gdGhpcy5fdGFpbDtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwubmV4dCA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGFpbCA9IGl0ZW07XG4gICAgICAgIHRoaXMuX3N0YXRlKys7XG4gICAgfVxuICAgIHJlbW92ZUl0ZW0oaXRlbSkge1xuICAgICAgICBpZiAoaXRlbSA9PT0gdGhpcy5faGVhZCAmJiBpdGVtID09PSB0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5fdGFpbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpdGVtID09PSB0aGlzLl9oZWFkKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGNhbiBvbmx5IGhhcHBlbmVkIGlmIHNpemUgPT09IDEgd2hpY2ggaXMgaGFuZGxlXG4gICAgICAgICAgICAvLyBieSB0aGUgY2FzZSBhYm92ZS5cbiAgICAgICAgICAgIGlmICghaXRlbS5uZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxpc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW0ubmV4dC5wcmV2aW91cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQgPSBpdGVtLm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXRlbSA9PT0gdGhpcy5fdGFpbCkge1xuICAgICAgICAgICAgLy8gVGhpcyBjYW4gb25seSBoYXBwZW5lZCBpZiBzaXplID09PSAxIHdoaWNoIGlzIGhhbmRsZVxuICAgICAgICAgICAgLy8gYnkgdGhlIGNhc2UgYWJvdmUuXG4gICAgICAgICAgICBpZiAoIWl0ZW0ucHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbS5wcmV2aW91cy5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5fdGFpbCA9IGl0ZW0ucHJldmlvdXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gaXRlbS5uZXh0O1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXMgPSBpdGVtLnByZXZpb3VzO1xuICAgICAgICAgICAgaWYgKCFuZXh0IHx8ICFwcmV2aW91cykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsaXN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0LnByZXZpb3VzID0gcHJldmlvdXM7XG4gICAgICAgICAgICBwcmV2aW91cy5uZXh0ID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBpdGVtLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGl0ZW0ucHJldmlvdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3N0YXRlKys7XG4gICAgfVxuICAgIHRvdWNoKGl0ZW0sIHRvdWNoKSB7XG4gICAgICAgIGlmICghdGhpcy5faGVhZCB8fCAhdGhpcy5fdGFpbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxpc3QnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHRvdWNoICE9PSBUb3VjaC5GaXJzdCAmJiB0b3VjaCAhPT0gVG91Y2guTGFzdCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG91Y2ggPT09IFRvdWNoLkZpcnN0KSB7XG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gdGhpcy5faGVhZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBpdGVtLm5leHQ7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IGl0ZW0ucHJldmlvdXM7XG4gICAgICAgICAgICAvLyBVbmxpbmsgdGhlIGl0ZW1cbiAgICAgICAgICAgIGlmIChpdGVtID09PSB0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICAgICAgLy8gcHJldmlvdXMgbXVzdCBiZSBkZWZpbmVkIHNpbmNlIGl0ZW0gd2FzIG5vdCBoZWFkIGJ1dCBpcyB0YWlsXG4gICAgICAgICAgICAgICAgLy8gU28gdGhlcmUgYXJlIG1vcmUgdGhhbiBvbiBpdGVtIGluIHRoZSBtYXBcbiAgICAgICAgICAgICAgICBwcmV2aW91cy5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RhaWwgPSBwcmV2aW91cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEJvdGggbmV4dCBhbmQgcHJldmlvdXMgYXJlIG5vdCB1bmRlZmluZWQgc2luY2UgaXRlbSB3YXMgbmVpdGhlciBoZWFkIG5vciB0YWlsLlxuICAgICAgICAgICAgICAgIG5leHQucHJldmlvdXMgPSBwcmV2aW91cztcbiAgICAgICAgICAgICAgICBwcmV2aW91cy5uZXh0ID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEluc2VydCB0aGUgbm9kZSBhdCBoZWFkXG4gICAgICAgICAgICBpdGVtLnByZXZpb3VzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaXRlbS5uZXh0ID0gdGhpcy5faGVhZDtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQucHJldmlvdXMgPSBpdGVtO1xuICAgICAgICAgICAgdGhpcy5faGVhZCA9IGl0ZW07XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRvdWNoID09PSBUb3VjaC5MYXN0KSB7XG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gdGhpcy5fdGFpbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5leHQgPSBpdGVtLm5leHQ7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IGl0ZW0ucHJldmlvdXM7XG4gICAgICAgICAgICAvLyBVbmxpbmsgdGhlIGl0ZW0uXG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gdGhpcy5faGVhZCkge1xuICAgICAgICAgICAgICAgIC8vIG5leHQgbXVzdCBiZSBkZWZpbmVkIHNpbmNlIGl0ZW0gd2FzIG5vdCB0YWlsIGJ1dCBpcyBoZWFkXG4gICAgICAgICAgICAgICAgLy8gU28gdGhlcmUgYXJlIG1vcmUgdGhhbiBvbiBpdGVtIGluIHRoZSBtYXBcbiAgICAgICAgICAgICAgICBuZXh0LnByZXZpb3VzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIHRoaXMuX2hlYWQgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQm90aCBuZXh0IGFuZCBwcmV2aW91cyBhcmUgbm90IHVuZGVmaW5lZCBzaW5jZSBpdGVtIHdhcyBuZWl0aGVyIGhlYWQgbm9yIHRhaWwuXG4gICAgICAgICAgICAgICAgbmV4dC5wcmV2aW91cyA9IHByZXZpb3VzO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzLm5leHQgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbS5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaXRlbS5wcmV2aW91cyA9IHRoaXMuX3RhaWw7XG4gICAgICAgICAgICB0aGlzLl90YWlsLm5leHQgPSBpdGVtO1xuICAgICAgICAgICAgdGhpcy5fdGFpbCA9IGl0ZW07XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IFtdO1xuICAgICAgICB0aGlzLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGZyb21KU09OKGRhdGEpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuTGlua2VkTWFwID0gTGlua2VkTWFwO1xuY2xhc3MgTFJVQ2FjaGUgZXh0ZW5kcyBMaW5rZWRNYXAge1xuICAgIGNvbnN0cnVjdG9yKGxpbWl0LCByYXRpbyA9IDEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fbGltaXQgPSBsaW1pdDtcbiAgICAgICAgdGhpcy5fcmF0aW8gPSBNYXRoLm1pbihNYXRoLm1heCgwLCByYXRpbyksIDEpO1xuICAgIH1cbiAgICBnZXQgbGltaXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9saW1pdDtcbiAgICB9XG4gICAgc2V0IGxpbWl0KGxpbWl0KSB7XG4gICAgICAgIHRoaXMuX2xpbWl0ID0gbGltaXQ7XG4gICAgICAgIHRoaXMuY2hlY2tUcmltKCk7XG4gICAgfVxuICAgIGdldCByYXRpbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JhdGlvO1xuICAgIH1cbiAgICBzZXQgcmF0aW8ocmF0aW8pIHtcbiAgICAgICAgdGhpcy5fcmF0aW8gPSBNYXRoLm1pbihNYXRoLm1heCgwLCByYXRpbyksIDEpO1xuICAgICAgICB0aGlzLmNoZWNrVHJpbSgpO1xuICAgIH1cbiAgICBnZXQoa2V5LCB0b3VjaCA9IFRvdWNoLkFzTmV3KSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXQoa2V5LCB0b3VjaCk7XG4gICAgfVxuICAgIHBlZWsoa2V5KSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXQoa2V5LCBUb3VjaC5Ob25lKTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgc3VwZXIuc2V0KGtleSwgdmFsdWUsIFRvdWNoLkxhc3QpO1xuICAgICAgICB0aGlzLmNoZWNrVHJpbSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY2hlY2tUcmltKCkge1xuICAgICAgICBpZiAodGhpcy5zaXplID4gdGhpcy5fbGltaXQpIHtcbiAgICAgICAgICAgIHRoaXMudHJpbU9sZChNYXRoLnJvdW5kKHRoaXMuX2xpbWl0ICogdGhpcy5fcmF0aW8pKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuTFJVQ2FjaGUgPSBMUlVDYWNoZTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTgwNTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkFic3RyYWN0TWVzc2FnZUJ1ZmZlciA9IHZvaWQgMDtcbmNvbnN0IENSID0gMTM7XG5jb25zdCBMRiA9IDEwO1xuY29uc3QgQ1JMRiA9ICdcXHJcXG4nO1xuY2xhc3MgQWJzdHJhY3RNZXNzYWdlQnVmZmVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbmNvZGluZyA9ICd1dGYtOCcpIHtcbiAgICAgICAgdGhpcy5fZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgICAgICAgdGhpcy5fY2h1bmtzID0gW107XG4gICAgICAgIHRoaXMuX3RvdGFsTGVuZ3RoID0gMDtcbiAgICB9XG4gICAgZ2V0IGVuY29kaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5jb2Rpbmc7XG4gICAgfVxuICAgIGFwcGVuZChjaHVuaykge1xuICAgICAgICBjb25zdCB0b0FwcGVuZCA9IHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycgPyB0aGlzLmZyb21TdHJpbmcoY2h1bmssIHRoaXMuX2VuY29kaW5nKSA6IGNodW5rO1xuICAgICAgICB0aGlzLl9jaHVua3MucHVzaCh0b0FwcGVuZCk7XG4gICAgICAgIHRoaXMuX3RvdGFsTGVuZ3RoICs9IHRvQXBwZW5kLmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIHRyeVJlYWRIZWFkZXJzKGxvd2VyQ2FzZUtleXMgPSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5fY2h1bmtzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3RhdGUgPSAwO1xuICAgICAgICBsZXQgY2h1bmtJbmRleCA9IDA7XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICBsZXQgY2h1bmtCeXRlc1JlYWQgPSAwO1xuICAgICAgICByb3c6IHdoaWxlIChjaHVua0luZGV4IDwgdGhpcy5fY2h1bmtzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLl9jaHVua3NbY2h1bmtJbmRleF07XG4gICAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICAgICAgY29sdW1uOiB3aGlsZSAob2Zmc2V0IDwgY2h1bmsubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjaHVua1tvZmZzZXRdO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBDUjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIExGOlxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIHJvdztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaHVua0J5dGVzUmVhZCArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgY2h1bmtJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZSAhPT0gNCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgYnVmZmVyIGNvbnRhaW5zIHRoZSB0d28gQ1JMRiBhdCB0aGUgZW5kLiBTbyB3ZSB3aWxsXG4gICAgICAgIC8vIGhhdmUgdHdvIGVtcHR5IGxpbmVzIGFmdGVyIHRoZSBzcGxpdCBhdCB0aGUgZW5kIGFzIHdlbGwuXG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuX3JlYWQoY2h1bmtCeXRlc1JlYWQgKyBvZmZzZXQpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWFwKCk7XG4gICAgICAgIGNvbnN0IGhlYWRlcnMgPSB0aGlzLnRvU3RyaW5nKGJ1ZmZlciwgJ2FzY2lpJykuc3BsaXQoQ1JMRik7XG4gICAgICAgIGlmIChoZWFkZXJzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWFkZXJzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gaGVhZGVyc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gaGVhZGVyLmluZGV4T2YoJzonKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1lc3NhZ2UgaGVhZGVyIG11c3Qgc2VwYXJhdGUga2V5IGFuZCB2YWx1ZSB1c2luZyAnOidcXG4ke2hlYWRlcn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGhlYWRlci5zdWJzdHIoMCwgaW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBoZWFkZXIuc3Vic3RyKGluZGV4ICsgMSkudHJpbSgpO1xuICAgICAgICAgICAgcmVzdWx0LnNldChsb3dlckNhc2VLZXlzID8ga2V5LnRvTG93ZXJDYXNlKCkgOiBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB0cnlSZWFkQm9keShsZW5ndGgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RvdGFsTGVuZ3RoIDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWFkKGxlbmd0aCk7XG4gICAgfVxuICAgIGdldCBudW1iZXJPZkJ5dGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdG90YWxMZW5ndGg7XG4gICAgfVxuICAgIF9yZWFkKGJ5dGVDb3VudCkge1xuICAgICAgICBpZiAoYnl0ZUNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbXB0eUJ1ZmZlcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChieXRlQ291bnQgPiB0aGlzLl90b3RhbExlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcmVhZCBzbyBtYW55IGJ5dGVzIWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jaHVua3NbMF0uYnl0ZUxlbmd0aCA9PT0gYnl0ZUNvdW50KSB7XG4gICAgICAgICAgICAvLyBzdXBlciBmYXN0IHBhdGgsIHByZWNpc2VseSBmaXJzdCBjaHVuayBtdXN0IGJlIHJldHVybmVkXG4gICAgICAgICAgICBjb25zdCBjaHVuayA9IHRoaXMuX2NodW5rc1swXTtcbiAgICAgICAgICAgIHRoaXMuX2NodW5rcy5zaGlmdCgpO1xuICAgICAgICAgICAgdGhpcy5fdG90YWxMZW5ndGggLT0gYnl0ZUNvdW50O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXNOYXRpdmUoY2h1bmspO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jaHVua3NbMF0uYnl0ZUxlbmd0aCA+IGJ5dGVDb3VudCkge1xuICAgICAgICAgICAgLy8gZmFzdCBwYXRoLCB0aGUgcmVhZGluZyBpcyBlbnRpcmVseSB3aXRoaW4gdGhlIGZpcnN0IGNodW5rXG4gICAgICAgICAgICBjb25zdCBjaHVuayA9IHRoaXMuX2NodW5rc1swXTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYXNOYXRpdmUoY2h1bmssIGJ5dGVDb3VudCk7XG4gICAgICAgICAgICB0aGlzLl9jaHVua3NbMF0gPSBjaHVuay5zbGljZShieXRlQ291bnQpO1xuICAgICAgICAgICAgdGhpcy5fdG90YWxMZW5ndGggLT0gYnl0ZUNvdW50O1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmFsbG9jTmF0aXZlKGJ5dGVDb3VudCk7XG4gICAgICAgIGxldCByZXN1bHRPZmZzZXQgPSAwO1xuICAgICAgICBsZXQgY2h1bmtJbmRleCA9IDA7XG4gICAgICAgIHdoaWxlIChieXRlQ291bnQgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBjaHVuayA9IHRoaXMuX2NodW5rc1tjaHVua0luZGV4XTtcbiAgICAgICAgICAgIGlmIChjaHVuay5ieXRlTGVuZ3RoID4gYnl0ZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBjaHVuayB3aWxsIHN1cnZpdmVcbiAgICAgICAgICAgICAgICBjb25zdCBjaHVua1BhcnQgPSBjaHVuay5zbGljZSgwLCBieXRlQ291bnQpO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5zZXQoY2h1bmtQYXJ0LCByZXN1bHRPZmZzZXQpO1xuICAgICAgICAgICAgICAgIHJlc3VsdE9mZnNldCArPSBieXRlQ291bnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2h1bmtzW2NodW5rSW5kZXhdID0gY2h1bmsuc2xpY2UoYnl0ZUNvdW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLl90b3RhbExlbmd0aCAtPSBieXRlQ291bnQ7XG4gICAgICAgICAgICAgICAgYnl0ZUNvdW50IC09IGJ5dGVDb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgY2h1bmsgd2lsbCBiZSBlbnRpcmVseSByZWFkXG4gICAgICAgICAgICAgICAgcmVzdWx0LnNldChjaHVuaywgcmVzdWx0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICByZXN1bHRPZmZzZXQgKz0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaHVua3Muc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90b3RhbExlbmd0aCAtPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIGJ5dGVDb3VudCAtPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZXhwb3J0cy5BYnN0cmFjdE1lc3NhZ2VCdWZmZXIgPSBBYnN0cmFjdE1lc3NhZ2VCdWZmZXI7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDY1Njpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5SZWFkYWJsZVN0cmVhbU1lc3NhZ2VSZWFkZXIgPSBleHBvcnRzLkFic3RyYWN0TWVzc2FnZVJlYWRlciA9IGV4cG9ydHMuTWVzc2FnZVJlYWRlciA9IHZvaWQgMDtcbmNvbnN0IHJhbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MDkxKTtcbmNvbnN0IElzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NjE4KTtcbmNvbnN0IGV2ZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNDc5KTtcbmNvbnN0IHNlbWFwaG9yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MTgpO1xudmFyIE1lc3NhZ2VSZWFkZXI7XG4oZnVuY3Rpb24gKE1lc3NhZ2VSZWFkZXIpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgSXMuZnVuYyhjYW5kaWRhdGUubGlzdGVuKSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5kaXNwb3NlKSAmJlxuICAgICAgICAgICAgSXMuZnVuYyhjYW5kaWRhdGUub25FcnJvcikgJiYgSXMuZnVuYyhjYW5kaWRhdGUub25DbG9zZSkgJiYgSXMuZnVuYyhjYW5kaWRhdGUub25QYXJ0aWFsTWVzc2FnZSk7XG4gICAgfVxuICAgIE1lc3NhZ2VSZWFkZXIuaXMgPSBpcztcbn0pKE1lc3NhZ2VSZWFkZXIgfHwgKGV4cG9ydHMuTWVzc2FnZVJlYWRlciA9IE1lc3NhZ2VSZWFkZXIgPSB7fSkpO1xuY2xhc3MgQWJzdHJhY3RNZXNzYWdlUmVhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lcnJvckVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgICAgICB0aGlzLmNsb3NlRW1pdHRlciA9IG5ldyBldmVudHNfMS5FbWl0dGVyKCk7XG4gICAgICAgIHRoaXMucGFydGlhbE1lc3NhZ2VFbWl0dGVyID0gbmV3IGV2ZW50c18xLkVtaXR0ZXIoKTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5lcnJvckVtaXR0ZXIuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLmNsb3NlRW1pdHRlci5kaXNwb3NlKCk7XG4gICAgfVxuICAgIGdldCBvbkVycm9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvckVtaXR0ZXIuZXZlbnQ7XG4gICAgfVxuICAgIGZpcmVFcnJvcihlcnJvcikge1xuICAgICAgICB0aGlzLmVycm9yRW1pdHRlci5maXJlKHRoaXMuYXNFcnJvcihlcnJvcikpO1xuICAgIH1cbiAgICBnZXQgb25DbG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2VFbWl0dGVyLmV2ZW50O1xuICAgIH1cbiAgICBmaXJlQ2xvc2UoKSB7XG4gICAgICAgIHRoaXMuY2xvc2VFbWl0dGVyLmZpcmUodW5kZWZpbmVkKTtcbiAgICB9XG4gICAgZ2V0IG9uUGFydGlhbE1lc3NhZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnRpYWxNZXNzYWdlRW1pdHRlci5ldmVudDtcbiAgICB9XG4gICAgZmlyZVBhcnRpYWxNZXNzYWdlKGluZm8pIHtcbiAgICAgICAgdGhpcy5wYXJ0aWFsTWVzc2FnZUVtaXR0ZXIuZmlyZShpbmZvKTtcbiAgICB9XG4gICAgYXNFcnJvcihlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihgUmVhZGVyIHJlY2VpdmVkIGVycm9yLiBSZWFzb246ICR7SXMuc3RyaW5nKGVycm9yLm1lc3NhZ2UpID8gZXJyb3IubWVzc2FnZSA6ICd1bmtub3duJ31gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlUmVhZGVyID0gQWJzdHJhY3RNZXNzYWdlUmVhZGVyO1xudmFyIFJlc29sdmVkTWVzc2FnZVJlYWRlck9wdGlvbnM7XG4oZnVuY3Rpb24gKFJlc29sdmVkTWVzc2FnZVJlYWRlck9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiBmcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGxldCBjaGFyc2V0O1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICBsZXQgY29udGVudERlY29kZXI7XG4gICAgICAgIGNvbnN0IGNvbnRlbnREZWNvZGVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgbGV0IGNvbnRlbnRUeXBlRGVjb2RlcjtcbiAgICAgICAgY29uc3QgY29udGVudFR5cGVEZWNvZGVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNoYXJzZXQgPSBvcHRpb25zID8/ICd1dGYtOCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjaGFyc2V0ID0gb3B0aW9ucy5jaGFyc2V0ID8/ICd1dGYtOCc7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jb250ZW50RGVjb2RlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGVudERlY29kZXIgPSBvcHRpb25zLmNvbnRlbnREZWNvZGVyO1xuICAgICAgICAgICAgICAgIGNvbnRlbnREZWNvZGVycy5zZXQoY29udGVudERlY29kZXIubmFtZSwgY29udGVudERlY29kZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29udGVudERlY29kZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRlY29kZXIgb2Ygb3B0aW9ucy5jb250ZW50RGVjb2RlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudERlY29kZXJzLnNldChkZWNvZGVyLm5hbWUsIGRlY29kZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNvbnRlbnRUeXBlRGVjb2RlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGVudFR5cGVEZWNvZGVyID0gb3B0aW9ucy5jb250ZW50VHlwZURlY29kZXI7XG4gICAgICAgICAgICAgICAgY29udGVudFR5cGVEZWNvZGVycy5zZXQoY29udGVudFR5cGVEZWNvZGVyLm5hbWUsIGNvbnRlbnRUeXBlRGVjb2Rlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jb250ZW50VHlwZURlY29kZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRlY29kZXIgb2Ygb3B0aW9ucy5jb250ZW50VHlwZURlY29kZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlRGVjb2RlcnMuc2V0KGRlY29kZXIubmFtZSwgZGVjb2Rlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZW50VHlwZURlY29kZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29udGVudFR5cGVEZWNvZGVyID0gKDAsIHJhbF8xLmRlZmF1bHQpKCkuYXBwbGljYXRpb25Kc29uLmRlY29kZXI7XG4gICAgICAgICAgICBjb250ZW50VHlwZURlY29kZXJzLnNldChjb250ZW50VHlwZURlY29kZXIubmFtZSwgY29udGVudFR5cGVEZWNvZGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBjaGFyc2V0LCBjb250ZW50RGVjb2RlciwgY29udGVudERlY29kZXJzLCBjb250ZW50VHlwZURlY29kZXIsIGNvbnRlbnRUeXBlRGVjb2RlcnMgfTtcbiAgICB9XG4gICAgUmVzb2x2ZWRNZXNzYWdlUmVhZGVyT3B0aW9ucy5mcm9tT3B0aW9ucyA9IGZyb21PcHRpb25zO1xufSkoUmVzb2x2ZWRNZXNzYWdlUmVhZGVyT3B0aW9ucyB8fCAoUmVzb2x2ZWRNZXNzYWdlUmVhZGVyT3B0aW9ucyA9IHt9KSk7XG5jbGFzcyBSZWFkYWJsZVN0cmVhbU1lc3NhZ2VSZWFkZXIgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VSZWFkZXIge1xuICAgIGNvbnN0cnVjdG9yKHJlYWRhYmxlLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucmVhZGFibGUgPSByZWFkYWJsZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gUmVzb2x2ZWRNZXNzYWdlUmVhZGVyT3B0aW9ucy5mcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgdGhpcy5idWZmZXIgPSAoMCwgcmFsXzEuZGVmYXVsdCkoKS5tZXNzYWdlQnVmZmVyLmNyZWF0ZSh0aGlzLm9wdGlvbnMuY2hhcnNldCk7XG4gICAgICAgIHRoaXMuX3BhcnRpYWxNZXNzYWdlVGltZW91dCA9IDEwMDAwO1xuICAgICAgICB0aGlzLm5leHRNZXNzYWdlTGVuZ3RoID0gLTE7XG4gICAgICAgIHRoaXMubWVzc2FnZVRva2VuID0gMDtcbiAgICAgICAgdGhpcy5yZWFkU2VtYXBob3JlID0gbmV3IHNlbWFwaG9yZV8xLlNlbWFwaG9yZSgxKTtcbiAgICB9XG4gICAgc2V0IHBhcnRpYWxNZXNzYWdlVGltZW91dCh0aW1lb3V0KSB7XG4gICAgICAgIHRoaXMuX3BhcnRpYWxNZXNzYWdlVGltZW91dCA9IHRpbWVvdXQ7XG4gICAgfVxuICAgIGdldCBwYXJ0aWFsTWVzc2FnZVRpbWVvdXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJ0aWFsTWVzc2FnZVRpbWVvdXQ7XG4gICAgfVxuICAgIGxpc3RlbihjYWxsYmFjaykge1xuICAgICAgICB0aGlzLm5leHRNZXNzYWdlTGVuZ3RoID0gLTE7XG4gICAgICAgIHRoaXMubWVzc2FnZVRva2VuID0gMDtcbiAgICAgICAgdGhpcy5wYXJ0aWFsTWVzc2FnZVRpbWVyID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucmVhZGFibGUub25EYXRhKChkYXRhKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm9uRGF0YShkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucmVhZGFibGUub25FcnJvcigoZXJyb3IpID0+IHRoaXMuZmlyZUVycm9yKGVycm9yKSk7XG4gICAgICAgIHRoaXMucmVhZGFibGUub25DbG9zZSgoKSA9PiB0aGlzLmZpcmVDbG9zZSgpKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgb25EYXRhKGRhdGEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLmFwcGVuZChkYXRhKTtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmV4dE1lc3NhZ2VMZW5ndGggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSB0aGlzLmJ1ZmZlci50cnlSZWFkSGVhZGVycyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudExlbmd0aCA9IGhlYWRlcnMuZ2V0KCdjb250ZW50LWxlbmd0aCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRlbnRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZUVycm9yKG5ldyBFcnJvcihgSGVhZGVyIG11c3QgcHJvdmlkZSBhIENvbnRlbnQtTGVuZ3RoIHByb3BlcnR5LlxcbiR7SlNPTi5zdHJpbmdpZnkoT2JqZWN0LmZyb21FbnRyaWVzKGhlYWRlcnMpKX1gKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gcGFyc2VJbnQoY29udGVudExlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihsZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmVFcnJvcihuZXcgRXJyb3IoYENvbnRlbnQtTGVuZ3RoIHZhbHVlIG11c3QgYmUgYSBudW1iZXIuIEdvdCAke2NvbnRlbnRMZW5ndGh9YCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dE1lc3NhZ2VMZW5ndGggPSBsZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLmJ1ZmZlci50cnlSZWFkQm9keSh0aGlzLm5leHRNZXNzYWdlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBpZiAoYm9keSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8qKiBXZSBoYXZlbid0IHJlY2VpdmVkIHRoZSBmdWxsIG1lc3NhZ2UgeWV0LiAqL1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFBhcnRpYWxNZXNzYWdlVGltZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyUGFydGlhbE1lc3NhZ2VUaW1lcigpO1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dE1lc3NhZ2VMZW5ndGggPSAtMTtcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhhdCB3ZSBjb252ZXJ0IG9uZSByZWNlaXZlZCBtZXNzYWdlIGFmdGVyIHRoZVxuICAgICAgICAgICAgICAgIC8vIG90aGVyLiBPdGhlcndpc2UgaXQgY291bGQgaGFwcGVuIHRoYXQgYSBkZWNvZGluZyBvZiBhIHNlY29uZFxuICAgICAgICAgICAgICAgIC8vIHNtYWxsZXIgbWVzc2FnZSBmaW5pc2hlZCBiZWZvcmUgdGhlIGRlY29kaW5nIG9mIGEgZmlyc3QgbGFyZ2VyXG4gICAgICAgICAgICAgICAgLy8gbWVzc2FnZSBhbmQgdGhlbiB3ZSB3b3VsZCBkZWxpdmVyIHRoZSBzZWNvbmQgbWVzc2FnZSBmaXJzdC5cbiAgICAgICAgICAgICAgICB0aGlzLnJlYWRTZW1hcGhvcmUubG9jayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5vcHRpb25zLmNvbnRlbnREZWNvZGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYXdhaXQgdGhpcy5vcHRpb25zLmNvbnRlbnREZWNvZGVyLmRlY29kZShib2R5KVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBib2R5O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYXdhaXQgdGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlRGVjb2Rlci5kZWNvZGUoYnl0ZXMsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2sobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZUVycm9yKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbGVhclBhcnRpYWxNZXNzYWdlVGltZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcnRpYWxNZXNzYWdlVGltZXIpIHtcbiAgICAgICAgICAgIHRoaXMucGFydGlhbE1lc3NhZ2VUaW1lci5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLnBhcnRpYWxNZXNzYWdlVGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0UGFydGlhbE1lc3NhZ2VUaW1lcigpIHtcbiAgICAgICAgdGhpcy5jbGVhclBhcnRpYWxNZXNzYWdlVGltZXIoKTtcbiAgICAgICAgaWYgKHRoaXMuX3BhcnRpYWxNZXNzYWdlVGltZW91dCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJ0aWFsTWVzc2FnZVRpbWVyID0gKDAsIHJhbF8xLmRlZmF1bHQpKCkudGltZXIuc2V0VGltZW91dCgodG9rZW4sIHRpbWVvdXQpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGFydGlhbE1lc3NhZ2VUaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh0b2tlbiA9PT0gdGhpcy5tZXNzYWdlVG9rZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmVQYXJ0aWFsTWVzc2FnZSh7IG1lc3NhZ2VUb2tlbjogdG9rZW4sIHdhaXRpbmdUaW1lOiB0aW1lb3V0IH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0UGFydGlhbE1lc3NhZ2VUaW1lcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzLl9wYXJ0aWFsTWVzc2FnZVRpbWVvdXQsIHRoaXMubWVzc2FnZVRva2VuLCB0aGlzLl9wYXJ0aWFsTWVzc2FnZVRpbWVvdXQpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVhZGFibGVTdHJlYW1NZXNzYWdlUmVhZGVyID0gUmVhZGFibGVTdHJlYW1NZXNzYWdlUmVhZGVyO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5MDM2OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLldyaXRlYWJsZVN0cmVhbU1lc3NhZ2VXcml0ZXIgPSBleHBvcnRzLkFic3RyYWN0TWVzc2FnZVdyaXRlciA9IGV4cG9ydHMuTWVzc2FnZVdyaXRlciA9IHZvaWQgMDtcbmNvbnN0IHJhbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MDkxKTtcbmNvbnN0IElzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NjE4KTtcbmNvbnN0IHNlbWFwaG9yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MTgpO1xuY29uc3QgZXZlbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0NzkpO1xuY29uc3QgQ29udGVudExlbmd0aCA9ICdDb250ZW50LUxlbmd0aDogJztcbmNvbnN0IENSTEYgPSAnXFxyXFxuJztcbnZhciBNZXNzYWdlV3JpdGVyO1xuKGZ1bmN0aW9uIChNZXNzYWdlV3JpdGVyKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLmZ1bmMoY2FuZGlkYXRlLmRpc3Bvc2UpICYmIElzLmZ1bmMoY2FuZGlkYXRlLm9uQ2xvc2UpICYmXG4gICAgICAgICAgICBJcy5mdW5jKGNhbmRpZGF0ZS5vbkVycm9yKSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS53cml0ZSk7XG4gICAgfVxuICAgIE1lc3NhZ2VXcml0ZXIuaXMgPSBpcztcbn0pKE1lc3NhZ2VXcml0ZXIgfHwgKGV4cG9ydHMuTWVzc2FnZVdyaXRlciA9IE1lc3NhZ2VXcml0ZXIgPSB7fSkpO1xuY2xhc3MgQWJzdHJhY3RNZXNzYWdlV3JpdGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lcnJvckVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgICAgICB0aGlzLmNsb3NlRW1pdHRlciA9IG5ldyBldmVudHNfMS5FbWl0dGVyKCk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuZXJyb3JFbWl0dGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5jbG9zZUVtaXR0ZXIuZGlzcG9zZSgpO1xuICAgIH1cbiAgICBnZXQgb25FcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JFbWl0dGVyLmV2ZW50O1xuICAgIH1cbiAgICBmaXJlRXJyb3IoZXJyb3IsIG1lc3NhZ2UsIGNvdW50KSB7XG4gICAgICAgIHRoaXMuZXJyb3JFbWl0dGVyLmZpcmUoW3RoaXMuYXNFcnJvcihlcnJvciksIG1lc3NhZ2UsIGNvdW50XSk7XG4gICAgfVxuICAgIGdldCBvbkNsb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9zZUVtaXR0ZXIuZXZlbnQ7XG4gICAgfVxuICAgIGZpcmVDbG9zZSgpIHtcbiAgICAgICAgdGhpcy5jbG9zZUVtaXR0ZXIuZmlyZSh1bmRlZmluZWQpO1xuICAgIH1cbiAgICBhc0Vycm9yKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKGBXcml0ZXIgcmVjZWl2ZWQgZXJyb3IuIFJlYXNvbjogJHtJcy5zdHJpbmcoZXJyb3IubWVzc2FnZSkgPyBlcnJvci5tZXNzYWdlIDogJ3Vua25vd24nfWApO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5BYnN0cmFjdE1lc3NhZ2VXcml0ZXIgPSBBYnN0cmFjdE1lc3NhZ2VXcml0ZXI7XG52YXIgUmVzb2x2ZWRNZXNzYWdlV3JpdGVyT3B0aW9ucztcbihmdW5jdGlvbiAoUmVzb2x2ZWRNZXNzYWdlV3JpdGVyT3B0aW9ucykge1xuICAgIGZ1bmN0aW9uIGZyb21PcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGNoYXJzZXQ6IG9wdGlvbnMgPz8gJ3V0Zi04JywgY29udGVudFR5cGVFbmNvZGVyOiAoMCwgcmFsXzEuZGVmYXVsdCkoKS5hcHBsaWNhdGlvbkpzb24uZW5jb2RlciB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHsgY2hhcnNldDogb3B0aW9ucy5jaGFyc2V0ID8/ICd1dGYtOCcsIGNvbnRlbnRFbmNvZGVyOiBvcHRpb25zLmNvbnRlbnRFbmNvZGVyLCBjb250ZW50VHlwZUVuY29kZXI6IG9wdGlvbnMuY29udGVudFR5cGVFbmNvZGVyID8/ICgwLCByYWxfMS5kZWZhdWx0KSgpLmFwcGxpY2F0aW9uSnNvbi5lbmNvZGVyIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgUmVzb2x2ZWRNZXNzYWdlV3JpdGVyT3B0aW9ucy5mcm9tT3B0aW9ucyA9IGZyb21PcHRpb25zO1xufSkoUmVzb2x2ZWRNZXNzYWdlV3JpdGVyT3B0aW9ucyB8fCAoUmVzb2x2ZWRNZXNzYWdlV3JpdGVyT3B0aW9ucyA9IHt9KSk7XG5jbGFzcyBXcml0ZWFibGVTdHJlYW1NZXNzYWdlV3JpdGVyIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlV3JpdGVyIHtcbiAgICBjb25zdHJ1Y3Rvcih3cml0YWJsZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLndyaXRhYmxlID0gd3JpdGFibGU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IFJlc29sdmVkTWVzc2FnZVdyaXRlck9wdGlvbnMuZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZXJyb3JDb3VudCA9IDA7XG4gICAgICAgIHRoaXMud3JpdGVTZW1hcGhvcmUgPSBuZXcgc2VtYXBob3JlXzEuU2VtYXBob3JlKDEpO1xuICAgICAgICB0aGlzLndyaXRhYmxlLm9uRXJyb3IoKGVycm9yKSA9PiB0aGlzLmZpcmVFcnJvcihlcnJvcikpO1xuICAgICAgICB0aGlzLndyaXRhYmxlLm9uQ2xvc2UoKCkgPT4gdGhpcy5maXJlQ2xvc2UoKSk7XG4gICAgfVxuICAgIGFzeW5jIHdyaXRlKG1zZykge1xuICAgICAgICByZXR1cm4gdGhpcy53cml0ZVNlbWFwaG9yZS5sb2NrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSB0aGlzLm9wdGlvbnMuY29udGVudFR5cGVFbmNvZGVyLmVuY29kZShtc2csIHRoaXMub3B0aW9ucykudGhlbigoYnVmZmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jb250ZW50RW5jb2RlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY29udGVudEVuY29kZXIuZW5jb2RlKGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQudGhlbigoYnVmZmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IFtdO1xuICAgICAgICAgICAgICAgIGhlYWRlcnMucHVzaChDb250ZW50TGVuZ3RoLCBidWZmZXIuYnl0ZUxlbmd0aC50b1N0cmluZygpLCBDUkxGKTtcbiAgICAgICAgICAgICAgICBoZWFkZXJzLnB1c2goQ1JMRik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9Xcml0ZShtc2csIGhlYWRlcnMsIGJ1ZmZlcik7XG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGRvV3JpdGUobXNnLCBoZWFkZXJzLCBkYXRhKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLndyaXRhYmxlLndyaXRlKGhlYWRlcnMuam9pbignJyksICdhc2NpaScpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud3JpdGFibGUud3JpdGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCBtc2cpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVFcnJvcihlcnJvciwgbXNnKSB7XG4gICAgICAgIHRoaXMuZXJyb3JDb3VudCsrO1xuICAgICAgICB0aGlzLmZpcmVFcnJvcihlcnJvciwgbXNnLCB0aGlzLmVycm9yQ291bnQpO1xuICAgIH1cbiAgICBlbmQoKSB7XG4gICAgICAgIHRoaXMud3JpdGFibGUuZW5kKCk7XG4gICAgfVxufVxuZXhwb3J0cy5Xcml0ZWFibGVTdHJlYW1NZXNzYWdlV3JpdGVyID0gV3JpdGVhYmxlU3RyZWFtTWVzc2FnZVdyaXRlcjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzE2Mjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5NZXNzYWdlID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlOSA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTggPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGU3ID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNiA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTUgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGU0ID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMyA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTIgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGUxID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMCA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZSA9IGV4cG9ydHMuUmVxdWVzdFR5cGU5ID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTggPSBleHBvcnRzLlJlcXVlc3RUeXBlNyA9IGV4cG9ydHMuUmVxdWVzdFR5cGU2ID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTUgPSBleHBvcnRzLlJlcXVlc3RUeXBlNCA9IGV4cG9ydHMuUmVxdWVzdFR5cGUzID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTIgPSBleHBvcnRzLlJlcXVlc3RUeXBlMSA9IGV4cG9ydHMuUmVxdWVzdFR5cGUgPSBleHBvcnRzLlJlcXVlc3RUeXBlMCA9IGV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlID0gZXhwb3J0cy5QYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gZXhwb3J0cy5SZXNwb25zZUVycm9yID0gZXhwb3J0cy5FcnJvckNvZGVzID0gdm9pZCAwO1xuY29uc3QgaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2MTgpO1xuLyoqXG4gKiBQcmVkZWZpbmVkIGVycm9yIGNvZGVzLlxuICovXG52YXIgRXJyb3JDb2RlcztcbihmdW5jdGlvbiAoRXJyb3JDb2Rlcykge1xuICAgIC8vIERlZmluZWQgYnkgSlNPTiBSUENcbiAgICBFcnJvckNvZGVzLlBhcnNlRXJyb3IgPSAtMzI3MDA7XG4gICAgRXJyb3JDb2Rlcy5JbnZhbGlkUmVxdWVzdCA9IC0zMjYwMDtcbiAgICBFcnJvckNvZGVzLk1ldGhvZE5vdEZvdW5kID0gLTMyNjAxO1xuICAgIEVycm9yQ29kZXMuSW52YWxpZFBhcmFtcyA9IC0zMjYwMjtcbiAgICBFcnJvckNvZGVzLkludGVybmFsRXJyb3IgPSAtMzI2MDM7XG4gICAgLyoqXG4gICAgICogVGhpcyBpcyB0aGUgc3RhcnQgcmFuZ2Ugb2YgSlNPTiBSUEMgcmVzZXJ2ZWQgZXJyb3IgY29kZXMuXG4gICAgICogSXQgZG9lc24ndCBkZW5vdGUgYSByZWFsIGVycm9yIGNvZGUuIE5vIGFwcGxpY2F0aW9uIGVycm9yIGNvZGVzIHNob3VsZFxuICAgICAqIGJlIGRlZmluZWQgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCByYW5nZS4gRm9yIGJhY2t3YXJkc1xuICAgICAqIGNvbXBhdGliaWxpdHkgdGhlIGBTZXJ2ZXJOb3RJbml0aWFsaXplZGAgYW5kIHRoZSBgVW5rbm93bkVycm9yQ29kZWBcbiAgICAgKiBhcmUgbGVmdCBpbiB0aGUgcmFuZ2UuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMy4xNi4wXG4gICAgKi9cbiAgICBFcnJvckNvZGVzLmpzb25ycGNSZXNlcnZlZEVycm9yUmFuZ2VTdGFydCA9IC0zMjA5OTtcbiAgICAvKiogQGRlcHJlY2F0ZWQgdXNlICBqc29ucnBjUmVzZXJ2ZWRFcnJvclJhbmdlU3RhcnQgKi9cbiAgICBFcnJvckNvZGVzLnNlcnZlckVycm9yU3RhcnQgPSAtMzIwOTk7XG4gICAgLyoqXG4gICAgICogQW4gZXJyb3Igb2NjdXJyZWQgd2hlbiB3cml0ZSBhIG1lc3NhZ2UgdG8gdGhlIHRyYW5zcG9ydCBsYXllci5cbiAgICAgKi9cbiAgICBFcnJvckNvZGVzLk1lc3NhZ2VXcml0ZUVycm9yID0gLTMyMDk5O1xuICAgIC8qKlxuICAgICAqIEFuIGVycm9yIG9jY3VycmVkIHdoZW4gcmVhZGluZyBhIG1lc3NhZ2UgZnJvbSB0aGUgdHJhbnNwb3J0IGxheWVyLlxuICAgICAqL1xuICAgIEVycm9yQ29kZXMuTWVzc2FnZVJlYWRFcnJvciA9IC0zMjA5ODtcbiAgICAvKipcbiAgICAgKiBUaGUgY29ubmVjdGlvbiBnb3QgZGlzcG9zZWQgb3IgbG9zdCBhbmQgYWxsIHBlbmRpbmcgcmVzcG9uc2VzIGdvdFxuICAgICAqIHJlamVjdGVkLlxuICAgICAqL1xuICAgIEVycm9yQ29kZXMuUGVuZGluZ1Jlc3BvbnNlUmVqZWN0ZWQgPSAtMzIwOTc7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbm5lY3Rpb24gaXMgaW5hY3RpdmUgYW5kIGEgdXNlIG9mIGl0IGZhaWxlZC5cbiAgICAgKi9cbiAgICBFcnJvckNvZGVzLkNvbm5lY3Rpb25JbmFjdGl2ZSA9IC0zMjA5NjtcbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlIGluZGljYXRpbmcgdGhhdCBhIHNlcnZlciByZWNlaXZlZCBhIG5vdGlmaWNhdGlvbiBvclxuICAgICAqIHJlcXVlc3QgYmVmb3JlIHRoZSBzZXJ2ZXIgaGFzIHJlY2VpdmVkIHRoZSBgaW5pdGlhbGl6ZWAgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBFcnJvckNvZGVzLlNlcnZlck5vdEluaXRpYWxpemVkID0gLTMyMDAyO1xuICAgIEVycm9yQ29kZXMuVW5rbm93bkVycm9yQ29kZSA9IC0zMjAwMTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIHRoZSBlbmQgcmFuZ2Ugb2YgSlNPTiBSUEMgcmVzZXJ2ZWQgZXJyb3IgY29kZXMuXG4gICAgICogSXQgZG9lc24ndCBkZW5vdGUgYSByZWFsIGVycm9yIGNvZGUuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMy4xNi4wXG4gICAgKi9cbiAgICBFcnJvckNvZGVzLmpzb25ycGNSZXNlcnZlZEVycm9yUmFuZ2VFbmQgPSAtMzIwMDA7XG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZSAganNvbnJwY1Jlc2VydmVkRXJyb3JSYW5nZUVuZCAqL1xuICAgIEVycm9yQ29kZXMuc2VydmVyRXJyb3JFbmQgPSAtMzIwMDA7XG59KShFcnJvckNvZGVzIHx8IChleHBvcnRzLkVycm9yQ29kZXMgPSBFcnJvckNvZGVzID0ge30pKTtcbi8qKlxuICogQW4gZXJyb3Igb2JqZWN0IHJldHVybiBpbiBhIHJlc3BvbnNlIGluIGNhc2UgYSByZXF1ZXN0XG4gKiBoYXMgZmFpbGVkLlxuICovXG5jbGFzcyBSZXNwb25zZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNvZGUsIG1lc3NhZ2UsIGRhdGEpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9IGlzLm51bWJlcihjb2RlKSA/IGNvZGUgOiBFcnJvckNvZGVzLlVua25vd25FcnJvckNvZGU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSZXNwb25zZUVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxuICAgIHRvSnNvbigpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5leHBvcnRzLlJlc3BvbnNlRXJyb3IgPSBSZXNwb25zZUVycm9yO1xuY2xhc3MgUGFyYW1ldGVyU3RydWN0dXJlcyB7XG4gICAgY29uc3RydWN0b3Ioa2luZCkge1xuICAgICAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgIH1cbiAgICBzdGF0aWMgaXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBQYXJhbWV0ZXJTdHJ1Y3R1cmVzLmF1dG8gfHwgdmFsdWUgPT09IFBhcmFtZXRlclN0cnVjdHVyZXMuYnlOYW1lIHx8IHZhbHVlID09PSBQYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5UG9zaXRpb247XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5raW5kO1xuICAgIH1cbn1cbmV4cG9ydHMuUGFyYW1ldGVyU3RydWN0dXJlcyA9IFBhcmFtZXRlclN0cnVjdHVyZXM7XG4vKipcbiAqIFRoZSBwYXJhbWV0ZXIgc3RydWN0dXJlIGlzIGF1dG9tYXRpY2FsbHkgaW5mZXJyZWQgb24gdGhlIG51bWJlciBvZiBwYXJhbWV0ZXJzXG4gKiBhbmQgdGhlIHBhcmFtZXRlciB0eXBlIGluIGNhc2Ugb2YgYSBzaW5nbGUgcGFyYW0uXG4gKi9cblBhcmFtZXRlclN0cnVjdHVyZXMuYXV0byA9IG5ldyBQYXJhbWV0ZXJTdHJ1Y3R1cmVzKCdhdXRvJyk7XG4vKipcbiAqIEZvcmNlcyBgYnlQb3NpdGlvbmAgcGFyYW1ldGVyIHN0cnVjdHVyZS4gVGhpcyBpcyB1c2VmdWwgaWYgeW91IGhhdmUgYSBzaW5nbGVcbiAqIHBhcmFtZXRlciB3aGljaCBoYXMgYSBsaXRlcmFsIHR5cGUuXG4gKi9cblBhcmFtZXRlclN0cnVjdHVyZXMuYnlQb3NpdGlvbiA9IG5ldyBQYXJhbWV0ZXJTdHJ1Y3R1cmVzKCdieVBvc2l0aW9uJyk7XG4vKipcbiAqIEZvcmNlcyBgYnlOYW1lYCBwYXJhbWV0ZXIgc3RydWN0dXJlLiBUaGlzIGlzIG9ubHkgdXNlZnVsIHdoZW4gaGF2aW5nIGEgc2luZ2xlXG4gKiBwYXJhbWV0ZXIuIFRoZSBsaWJyYXJ5IHdpbGwgcmVwb3J0IGVycm9ycyBpZiB1c2VkIHdpdGggYSBkaWZmZXJlbnQgbnVtYmVyIG9mXG4gKiBwYXJhbWV0ZXJzLlxuICovXG5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5TmFtZSA9IG5ldyBQYXJhbWV0ZXJTdHJ1Y3R1cmVzKCdieU5hbWUnKTtcbi8qKlxuICogQW4gYWJzdHJhY3QgaW1wbGVtZW50YXRpb24gb2YgYSBNZXNzYWdlVHlwZS5cbiAqL1xuY2xhc3MgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QsIG51bWJlck9mUGFyYW1zKSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICB0aGlzLm51bWJlck9mUGFyYW1zID0gbnVtYmVyT2ZQYXJhbXM7XG4gICAgfVxuICAgIGdldCBwYXJhbWV0ZXJTdHJ1Y3R1cmVzKCkge1xuICAgICAgICByZXR1cm4gUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvO1xuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlID0gQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlO1xuLyoqXG4gKiBDbGFzc2VzIHRvIHR5cGUgcmVxdWVzdCByZXNwb25zZSBwYWlyc1xuICovXG5jbGFzcyBSZXF1ZXN0VHlwZTAgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDApO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdFR5cGUwID0gUmVxdWVzdFR5cGUwO1xuY2xhc3MgUmVxdWVzdFR5cGUgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCwgX3BhcmFtZXRlclN0cnVjdHVyZXMgPSBQYXJhbWV0ZXJTdHJ1Y3R1cmVzLmF1dG8pIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCAxKTtcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVyU3RydWN0dXJlcyA9IF9wYXJhbWV0ZXJTdHJ1Y3R1cmVzO1xuICAgIH1cbiAgICBnZXQgcGFyYW1ldGVyU3RydWN0dXJlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRlclN0cnVjdHVyZXM7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0VHlwZSA9IFJlcXVlc3RUeXBlO1xuY2xhc3MgUmVxdWVzdFR5cGUxIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QsIF9wYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgMSk7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlclN0cnVjdHVyZXMgPSBfcGFyYW1ldGVyU3RydWN0dXJlcztcbiAgICB9XG4gICAgZ2V0IHBhcmFtZXRlclN0cnVjdHVyZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJhbWV0ZXJTdHJ1Y3R1cmVzO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdFR5cGUxID0gUmVxdWVzdFR5cGUxO1xuY2xhc3MgUmVxdWVzdFR5cGUyIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCAyKTtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVlc3RUeXBlMiA9IFJlcXVlc3RUeXBlMjtcbmNsYXNzIFJlcXVlc3RUeXBlMyBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgMyk7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0VHlwZTMgPSBSZXF1ZXN0VHlwZTM7XG5jbGFzcyBSZXF1ZXN0VHlwZTQgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDQpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdFR5cGU0ID0gUmVxdWVzdFR5cGU0O1xuY2xhc3MgUmVxdWVzdFR5cGU1IGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCA1KTtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVlc3RUeXBlNSA9IFJlcXVlc3RUeXBlNTtcbmNsYXNzIFJlcXVlc3RUeXBlNiBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgNik7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0VHlwZTYgPSBSZXF1ZXN0VHlwZTY7XG5jbGFzcyBSZXF1ZXN0VHlwZTcgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDcpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdFR5cGU3ID0gUmVxdWVzdFR5cGU3O1xuY2xhc3MgUmVxdWVzdFR5cGU4IGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCA4KTtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVlc3RUeXBlOCA9IFJlcXVlc3RUeXBlODtcbmNsYXNzIFJlcXVlc3RUeXBlOSBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgOSk7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0VHlwZTkgPSBSZXF1ZXN0VHlwZTk7XG5jbGFzcyBOb3RpZmljYXRpb25UeXBlIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QsIF9wYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgMSk7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlclN0cnVjdHVyZXMgPSBfcGFyYW1ldGVyU3RydWN0dXJlcztcbiAgICB9XG4gICAgZ2V0IHBhcmFtZXRlclN0cnVjdHVyZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJhbWV0ZXJTdHJ1Y3R1cmVzO1xuICAgIH1cbn1cbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZSA9IE5vdGlmaWNhdGlvblR5cGU7XG5jbGFzcyBOb3RpZmljYXRpb25UeXBlMCBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgMCk7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMCA9IE5vdGlmaWNhdGlvblR5cGUwO1xuY2xhc3MgTm90aWZpY2F0aW9uVHlwZTEgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCwgX3BhcmFtZXRlclN0cnVjdHVyZXMgPSBQYXJhbWV0ZXJTdHJ1Y3R1cmVzLmF1dG8pIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCAxKTtcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVyU3RydWN0dXJlcyA9IF9wYXJhbWV0ZXJTdHJ1Y3R1cmVzO1xuICAgIH1cbiAgICBnZXQgcGFyYW1ldGVyU3RydWN0dXJlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRlclN0cnVjdHVyZXM7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMSA9IE5vdGlmaWNhdGlvblR5cGUxO1xuY2xhc3MgTm90aWZpY2F0aW9uVHlwZTIgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDIpO1xuICAgIH1cbn1cbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTIgPSBOb3RpZmljYXRpb25UeXBlMjtcbmNsYXNzIE5vdGlmaWNhdGlvblR5cGUzIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCAzKTtcbiAgICB9XG59XG5leHBvcnRzLk5vdGlmaWNhdGlvblR5cGUzID0gTm90aWZpY2F0aW9uVHlwZTM7XG5jbGFzcyBOb3RpZmljYXRpb25UeXBlNCBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgNCk7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNCA9IE5vdGlmaWNhdGlvblR5cGU0O1xuY2xhc3MgTm90aWZpY2F0aW9uVHlwZTUgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDUpO1xuICAgIH1cbn1cbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTUgPSBOb3RpZmljYXRpb25UeXBlNTtcbmNsYXNzIE5vdGlmaWNhdGlvblR5cGU2IGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCA2KTtcbiAgICB9XG59XG5leHBvcnRzLk5vdGlmaWNhdGlvblR5cGU2ID0gTm90aWZpY2F0aW9uVHlwZTY7XG5jbGFzcyBOb3RpZmljYXRpb25UeXBlNyBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgNyk7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNyA9IE5vdGlmaWNhdGlvblR5cGU3O1xuY2xhc3MgTm90aWZpY2F0aW9uVHlwZTggZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDgpO1xuICAgIH1cbn1cbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTggPSBOb3RpZmljYXRpb25UeXBlODtcbmNsYXNzIE5vdGlmaWNhdGlvblR5cGU5IGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCA5KTtcbiAgICB9XG59XG5leHBvcnRzLk5vdGlmaWNhdGlvblR5cGU5ID0gTm90aWZpY2F0aW9uVHlwZTk7XG52YXIgTWVzc2FnZTtcbihmdW5jdGlvbiAoTWVzc2FnZSkge1xuICAgIC8qKlxuICAgICAqIFRlc3RzIGlmIHRoZSBnaXZlbiBtZXNzYWdlIGlzIGEgcmVxdWVzdCBtZXNzYWdlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNSZXF1ZXN0KG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gbWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBpcy5zdHJpbmcoY2FuZGlkYXRlLm1ldGhvZCkgJiYgKGlzLnN0cmluZyhjYW5kaWRhdGUuaWQpIHx8IGlzLm51bWJlcihjYW5kaWRhdGUuaWQpKTtcbiAgICB9XG4gICAgTWVzc2FnZS5pc1JlcXVlc3QgPSBpc1JlcXVlc3Q7XG4gICAgLyoqXG4gICAgICogVGVzdHMgaWYgdGhlIGdpdmVuIG1lc3NhZ2UgaXMgYSBub3RpZmljYXRpb24gbWVzc2FnZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTm90aWZpY2F0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gbWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBpcy5zdHJpbmcoY2FuZGlkYXRlLm1ldGhvZCkgJiYgbWVzc2FnZS5pZCA9PT0gdm9pZCAwO1xuICAgIH1cbiAgICBNZXNzYWdlLmlzTm90aWZpY2F0aW9uID0gaXNOb3RpZmljYXRpb247XG4gICAgLyoqXG4gICAgICogVGVzdHMgaWYgdGhlIGdpdmVuIG1lc3NhZ2UgaXMgYSByZXNwb25zZSBtZXNzYWdlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNSZXNwb25zZShtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IG1lc3NhZ2U7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgKGNhbmRpZGF0ZS5yZXN1bHQgIT09IHZvaWQgMCB8fCAhIWNhbmRpZGF0ZS5lcnJvcikgJiYgKGlzLnN0cmluZyhjYW5kaWRhdGUuaWQpIHx8IGlzLm51bWJlcihjYW5kaWRhdGUuaWQpIHx8IGNhbmRpZGF0ZS5pZCA9PT0gbnVsbCk7XG4gICAgfVxuICAgIE1lc3NhZ2UuaXNSZXNwb25zZSA9IGlzUmVzcG9uc2U7XG59KShNZXNzYWdlIHx8IChleHBvcnRzLk1lc3NhZ2UgPSBNZXNzYWdlID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTA5MTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xubGV0IF9yYWw7XG5mdW5jdGlvbiBSQUwoKSB7XG4gICAgaWYgKF9yYWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHJ1bnRpbWUgYWJzdHJhY3Rpb24gbGF5ZXIgaW5zdGFsbGVkYCk7XG4gICAgfVxuICAgIHJldHVybiBfcmFsO1xufVxuKGZ1bmN0aW9uIChSQUwpIHtcbiAgICBmdW5jdGlvbiBpbnN0YWxsKHJhbCkge1xuICAgICAgICBpZiAocmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcnVudGltZSBhYnN0cmFjdGlvbiBsYXllciBwcm92aWRlZGApO1xuICAgICAgICB9XG4gICAgICAgIF9yYWwgPSByYWw7XG4gICAgfVxuICAgIFJBTC5pbnN0YWxsID0gaW5zdGFsbDtcbn0pKFJBTCB8fCAoUkFMID0ge30pKTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gUkFMO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0MTg6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuU2VtYXBob3JlID0gdm9pZCAwO1xuY29uc3QgcmFsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwOTEpO1xuY2xhc3MgU2VtYXBob3JlIHtcbiAgICBjb25zdHJ1Y3RvcihjYXBhY2l0eSA9IDEpIHtcbiAgICAgICAgaWYgKGNhcGFjaXR5IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FwYWNpdHkgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NhcGFjaXR5ID0gY2FwYWNpdHk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IDA7XG4gICAgICAgIHRoaXMuX3dhaXRpbmcgPSBbXTtcbiAgICB9XG4gICAgbG9jayh0aHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fd2FpdGluZy5wdXNoKHsgdGh1bmssIHJlc29sdmUsIHJlamVjdCB9KTtcbiAgICAgICAgICAgIHRoaXMucnVuTmV4dCgpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgICB9XG4gICAgcnVuTmV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dhaXRpbmcubGVuZ3RoID09PSAwIHx8IHRoaXMuX2FjdGl2ZSA9PT0gdGhpcy5fY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAoMCwgcmFsXzEuZGVmYXVsdCkoKS50aW1lci5zZXRJbW1lZGlhdGUoKCkgPT4gdGhpcy5kb1J1bk5leHQoKSk7XG4gICAgfVxuICAgIGRvUnVuTmV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dhaXRpbmcubGVuZ3RoID09PSAwIHx8IHRoaXMuX2FjdGl2ZSA9PT0gdGhpcy5fY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5fd2FpdGluZy5zaGlmdCgpO1xuICAgICAgICB0aGlzLl9hY3RpdmUrKztcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSA+IHRoaXMuX2NhcGFjaXR5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRvIG1hbnkgdGh1bmtzIGFjdGl2ZWApO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBuZXh0LnRodW5rKCk7XG4gICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmUtLTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5yZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5OZXh0KCk7XG4gICAgICAgICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmUtLTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dC5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5OZXh0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmUtLTtcbiAgICAgICAgICAgICAgICBuZXh0LnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnJ1bk5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUtLTtcbiAgICAgICAgICAgIG5leHQucmVqZWN0KGVycik7XG4gICAgICAgICAgICB0aGlzLnJ1bk5leHQoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuU2VtYXBob3JlID0gU2VtYXBob3JlO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNDg5OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLlNoYXJlZEFycmF5UmVjZWl2ZXJTdHJhdGVneSA9IGV4cG9ydHMuU2hhcmVkQXJyYXlTZW5kZXJTdHJhdGVneSA9IHZvaWQgMDtcbmNvbnN0IGNhbmNlbGxhdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTU3KTtcbnZhciBDYW5jZWxsYXRpb25TdGF0ZTtcbihmdW5jdGlvbiAoQ2FuY2VsbGF0aW9uU3RhdGUpIHtcbiAgICBDYW5jZWxsYXRpb25TdGF0ZS5Db250aW51ZSA9IDA7XG4gICAgQ2FuY2VsbGF0aW9uU3RhdGUuQ2FuY2VsbGVkID0gMTtcbn0pKENhbmNlbGxhdGlvblN0YXRlIHx8IChDYW5jZWxsYXRpb25TdGF0ZSA9IHt9KSk7XG5jbGFzcyBTaGFyZWRBcnJheVNlbmRlclN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5idWZmZXJzID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBlbmFibGVDYW5jZWxsYXRpb24ocmVxdWVzdCkge1xuICAgICAgICBpZiAocmVxdWVzdC5pZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBTaGFyZWRBcnJheUJ1ZmZlcig0KTtcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBJbnQzMkFycmF5KGJ1ZmZlciwgMCwgMSk7XG4gICAgICAgIGRhdGFbMF0gPSBDYW5jZWxsYXRpb25TdGF0ZS5Db250aW51ZTtcbiAgICAgICAgdGhpcy5idWZmZXJzLnNldChyZXF1ZXN0LmlkLCBidWZmZXIpO1xuICAgICAgICByZXF1ZXN0LiRjYW5jZWxsYXRpb25EYXRhID0gYnVmZmVyO1xuICAgIH1cbiAgICBhc3luYyBzZW5kQ2FuY2VsbGF0aW9uKF9jb25uLCBpZCkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSB0aGlzLmJ1ZmZlcnMuZ2V0KGlkKTtcbiAgICAgICAgaWYgKGJ1ZmZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBJbnQzMkFycmF5KGJ1ZmZlciwgMCwgMSk7XG4gICAgICAgIEF0b21pY3Muc3RvcmUoZGF0YSwgMCwgQ2FuY2VsbGF0aW9uU3RhdGUuQ2FuY2VsbGVkKTtcbiAgICB9XG4gICAgY2xlYW51cChpZCkge1xuICAgICAgICB0aGlzLmJ1ZmZlcnMuZGVsZXRlKGlkKTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5idWZmZXJzLmNsZWFyKCk7XG4gICAgfVxufVxuZXhwb3J0cy5TaGFyZWRBcnJheVNlbmRlclN0cmF0ZWd5ID0gU2hhcmVkQXJyYXlTZW5kZXJTdHJhdGVneTtcbmNsYXNzIFNoYXJlZEFycmF5QnVmZmVyQ2FuY2VsbGF0aW9uVG9rZW4ge1xuICAgIGNvbnN0cnVjdG9yKGJ1ZmZlcikge1xuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgSW50MzJBcnJheShidWZmZXIsIDAsIDEpO1xuICAgIH1cbiAgICBnZXQgaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoKSB7XG4gICAgICAgIHJldHVybiBBdG9taWNzLmxvYWQodGhpcy5kYXRhLCAwKSA9PT0gQ2FuY2VsbGF0aW9uU3RhdGUuQ2FuY2VsbGVkO1xuICAgIH1cbiAgICBnZXQgb25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuY2VsbGF0aW9uIG92ZXIgU2hhcmVkQXJyYXlCdWZmZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbGxhdGlvbiBldmVudHNgKTtcbiAgICB9XG59XG5jbGFzcyBTaGFyZWRBcnJheUJ1ZmZlckNhbmNlbGxhdGlvblRva2VuU291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcihidWZmZXIpIHtcbiAgICAgICAgdGhpcy50b2tlbiA9IG5ldyBTaGFyZWRBcnJheUJ1ZmZlckNhbmNlbGxhdGlvblRva2VuKGJ1ZmZlcik7XG4gICAgfVxuICAgIGNhbmNlbCgpIHtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICB9XG59XG5jbGFzcyBTaGFyZWRBcnJheVJlY2VpdmVyU3RyYXRlZ3kge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmtpbmQgPSAncmVxdWVzdCc7XG4gICAgfVxuICAgIGNyZWF0ZUNhbmNlbGxhdGlvblRva2VuU291cmNlKHJlcXVlc3QpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gcmVxdWVzdC4kY2FuY2VsbGF0aW9uRGF0YTtcbiAgICAgICAgaWYgKGJ1ZmZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGNhbmNlbGxhdGlvbl8xLkNhbmNlbGxhdGlvblRva2VuU291cmNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTaGFyZWRBcnJheUJ1ZmZlckNhbmNlbGxhdGlvblRva2VuU291cmNlKGJ1ZmZlcik7XG4gICAgfVxufVxuZXhwb3J0cy5TaGFyZWRBcnJheVJlY2VpdmVyU3RyYXRlZ3kgPSBTaGFyZWRBcnJheVJlY2VpdmVyU3RyYXRlZ3k7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDU1MDE6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLmNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGJyb3dzZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjgyNyk7XG5fX2V4cG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXyg2ODI3KSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygzMTQ3KSwgZXhwb3J0cyk7XG5mdW5jdGlvbiBjcmVhdGVQcm90b2NvbENvbm5lY3Rpb24ocmVhZGVyLCB3cml0ZXIsIGxvZ2dlciwgb3B0aW9ucykge1xuICAgIHJldHVybiAoMCwgYnJvd3Nlcl8xLmNyZWF0ZU1lc3NhZ2VDb25uZWN0aW9uKShyZWFkZXIsIHdyaXRlciwgbG9nZ2VyLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuY3JlYXRlUHJvdG9jb2xDb25uZWN0aW9uID0gY3JlYXRlUHJvdG9jb2xDb25uZWN0aW9uO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMTQ3OlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5MU1BFcnJvckNvZGVzID0gZXhwb3J0cy5jcmVhdGVQcm90b2NvbENvbm5lY3Rpb24gPSB2b2lkIDA7XG5fX2V4cG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXyg2NzI5KSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygyODUyKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygxODE1KSwgZXhwb3J0cyk7XG52YXIgY29ubmVjdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTEpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlUHJvdG9jb2xDb25uZWN0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLmNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbjsgfSB9KSk7XG52YXIgTFNQRXJyb3JDb2RlcztcbihmdW5jdGlvbiAoTFNQRXJyb3JDb2Rlcykge1xuICAgIC8qKlxuICAgICogVGhpcyBpcyB0aGUgc3RhcnQgcmFuZ2Ugb2YgTFNQIHJlc2VydmVkIGVycm9yIGNvZGVzLlxuICAgICogSXQgZG9lc24ndCBkZW5vdGUgYSByZWFsIGVycm9yIGNvZGUuXG4gICAgKlxuICAgICogQHNpbmNlIDMuMTYuMFxuICAgICovXG4gICAgTFNQRXJyb3JDb2Rlcy5sc3BSZXNlcnZlZEVycm9yUmFuZ2VTdGFydCA9IC0zMjg5OTtcbiAgICAvKipcbiAgICAgKiBBIHJlcXVlc3QgZmFpbGVkIGJ1dCBpdCB3YXMgc3ludGFjdGljYWxseSBjb3JyZWN0LCBlLmcgdGhlXG4gICAgICogbWV0aG9kIG5hbWUgd2FzIGtub3duIGFuZCB0aGUgcGFyYW1ldGVycyB3ZXJlIHZhbGlkLiBUaGUgZXJyb3JcbiAgICAgKiBtZXNzYWdlIHNob3VsZCBjb250YWluIGh1bWFuIHJlYWRhYmxlIGluZm9ybWF0aW9uIGFib3V0IHdoeVxuICAgICAqIHRoZSByZXF1ZXN0IGZhaWxlZC5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAzLjE3LjBcbiAgICAgKi9cbiAgICBMU1BFcnJvckNvZGVzLlJlcXVlc3RGYWlsZWQgPSAtMzI4MDM7XG4gICAgLyoqXG4gICAgICogVGhlIHNlcnZlciBjYW5jZWxsZWQgdGhlIHJlcXVlc3QuIFRoaXMgZXJyb3IgY29kZSBzaG91bGRcbiAgICAgKiBvbmx5IGJlIHVzZWQgZm9yIHJlcXVlc3RzIHRoYXQgZXhwbGljaXRseSBzdXBwb3J0IGJlaW5nXG4gICAgICogc2VydmVyIGNhbmNlbGxhYmxlLlxuICAgICAqXG4gICAgICogQHNpbmNlIDMuMTcuMFxuICAgICAqL1xuICAgIExTUEVycm9yQ29kZXMuU2VydmVyQ2FuY2VsbGVkID0gLTMyODAyO1xuICAgIC8qKlxuICAgICAqIFRoZSBzZXJ2ZXIgZGV0ZWN0ZWQgdGhhdCB0aGUgY29udGVudCBvZiBhIGRvY3VtZW50IGdvdFxuICAgICAqIG1vZGlmaWVkIG91dHNpZGUgbm9ybWFsIGNvbmRpdGlvbnMuIEEgc2VydmVyIHNob3VsZFxuICAgICAqIE5PVCBzZW5kIHRoaXMgZXJyb3IgY29kZSBpZiBpdCBkZXRlY3RzIGEgY29udGVudCBjaGFuZ2VcbiAgICAgKiBpbiBpdCB1bnByb2Nlc3NlZCBtZXNzYWdlcy4gVGhlIHJlc3VsdCBldmVuIGNvbXB1dGVkXG4gICAgICogb24gYW4gb2xkZXIgc3RhdGUgbWlnaHQgc3RpbGwgYmUgdXNlZnVsIGZvciB0aGUgY2xpZW50LlxuICAgICAqXG4gICAgICogSWYgYSBjbGllbnQgZGVjaWRlcyB0aGF0IGEgcmVzdWx0IGlzIG5vdCBvZiBhbnkgdXNlIGFueW1vcmVcbiAgICAgKiB0aGUgY2xpZW50IHNob3VsZCBjYW5jZWwgdGhlIHJlcXVlc3QuXG4gICAgICovXG4gICAgTFNQRXJyb3JDb2Rlcy5Db250ZW50TW9kaWZpZWQgPSAtMzI4MDE7XG4gICAgLyoqXG4gICAgICogVGhlIGNsaWVudCBoYXMgY2FuY2VsZWQgYSByZXF1ZXN0IGFuZCBhIHNlcnZlciBhcyBkZXRlY3RlZFxuICAgICAqIHRoZSBjYW5jZWwuXG4gICAgICovXG4gICAgTFNQRXJyb3JDb2Rlcy5SZXF1ZXN0Q2FuY2VsbGVkID0gLTMyODAwO1xuICAgIC8qKlxuICAgICogVGhpcyBpcyB0aGUgZW5kIHJhbmdlIG9mIExTUCByZXNlcnZlZCBlcnJvciBjb2Rlcy5cbiAgICAqIEl0IGRvZXNuJ3QgZGVub3RlIGEgcmVhbCBlcnJvciBjb2RlLlxuICAgICpcbiAgICAqIEBzaW5jZSAzLjE2LjBcbiAgICAqL1xuICAgIExTUEVycm9yQ29kZXMubHNwUmVzZXJ2ZWRFcnJvclJhbmdlRW5kID0gLTMyODAwO1xufSkoTFNQRXJyb3JDb2RlcyB8fCAoZXhwb3J0cy5MU1BFcnJvckNvZGVzID0gTFNQRXJyb3JDb2RlcyA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDI5MTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5jcmVhdGVQcm90b2NvbENvbm5lY3Rpb24gPSB2b2lkIDA7XG5jb25zdCB2c2NvZGVfanNvbnJwY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NzI5KTtcbmZ1bmN0aW9uIGNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbihpbnB1dCwgb3V0cHV0LCBsb2dnZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAodnNjb2RlX2pzb25ycGNfMS5Db25uZWN0aW9uU3RyYXRlZ3kuaXMob3B0aW9ucykpIHtcbiAgICAgICAgb3B0aW9ucyA9IHsgY29ubmVjdGlvblN0cmF0ZWd5OiBvcHRpb25zIH07XG4gICAgfVxuICAgIHJldHVybiAoMCwgdnNjb2RlX2pzb25ycGNfMS5jcmVhdGVNZXNzYWdlQ29ubmVjdGlvbikoaW5wdXQsIG91dHB1dCwgbG9nZ2VyLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuY3JlYXRlUHJvdG9jb2xDb25uZWN0aW9uID0gY3JlYXRlUHJvdG9jb2xDb25uZWN0aW9uO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4NDMxOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZSA9IGV4cG9ydHMuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlMCA9IGV4cG9ydHMuUHJvdG9jb2xSZXF1ZXN0VHlwZSA9IGV4cG9ydHMuUHJvdG9jb2xSZXF1ZXN0VHlwZTAgPSBleHBvcnRzLlJlZ2lzdHJhdGlvblR5cGUgPSBleHBvcnRzLk1lc3NhZ2VEaXJlY3Rpb24gPSB2b2lkIDA7XG5jb25zdCB2c2NvZGVfanNvbnJwY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NzI5KTtcbnZhciBNZXNzYWdlRGlyZWN0aW9uO1xuKGZ1bmN0aW9uIChNZXNzYWdlRGlyZWN0aW9uKSB7XG4gICAgTWVzc2FnZURpcmVjdGlvbltcImNsaWVudFRvU2VydmVyXCJdID0gXCJjbGllbnRUb1NlcnZlclwiO1xuICAgIE1lc3NhZ2VEaXJlY3Rpb25bXCJzZXJ2ZXJUb0NsaWVudFwiXSA9IFwic2VydmVyVG9DbGllbnRcIjtcbiAgICBNZXNzYWdlRGlyZWN0aW9uW1wiYm90aFwiXSA9IFwiYm90aFwiO1xufSkoTWVzc2FnZURpcmVjdGlvbiB8fCAoZXhwb3J0cy5NZXNzYWdlRGlyZWN0aW9uID0gTWVzc2FnZURpcmVjdGlvbiA9IHt9KSk7XG5jbGFzcyBSZWdpc3RyYXRpb25UeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XG4gICAgfVxufVxuZXhwb3J0cy5SZWdpc3RyYXRpb25UeXBlID0gUmVnaXN0cmF0aW9uVHlwZTtcbmNsYXNzIFByb3RvY29sUmVxdWVzdFR5cGUwIGV4dGVuZHMgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZTAge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QpO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvdG9jb2xSZXF1ZXN0VHlwZTAgPSBQcm90b2NvbFJlcXVlc3RUeXBlMDtcbmNsYXNzIFByb3RvY29sUmVxdWVzdFR5cGUgZXh0ZW5kcyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCB2c2NvZGVfanNvbnJwY18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYnlOYW1lKTtcbiAgICB9XG59XG5leHBvcnRzLlByb3RvY29sUmVxdWVzdFR5cGUgPSBQcm90b2NvbFJlcXVlc3RUeXBlO1xuY2xhc3MgUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlMCBleHRlbmRzIHZzY29kZV9qc29ucnBjXzEuTm90aWZpY2F0aW9uVHlwZTAge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QpO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlMCA9IFByb3RvY29sTm90aWZpY2F0aW9uVHlwZTA7XG5jbGFzcyBQcm90b2NvbE5vdGlmaWNhdGlvblR5cGUgZXh0ZW5kcyB2c2NvZGVfanNvbnJwY18xLk5vdGlmaWNhdGlvblR5cGUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIHZzY29kZV9qc29ucnBjXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlID0gUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3NjAyOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgVHlwZUZveCwgTWljcm9zb2Z0IGFuZCBvdGhlcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuQ2FsbEhpZXJhcmNoeU91dGdvaW5nQ2FsbHNSZXF1ZXN0ID0gZXhwb3J0cy5DYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3QgPSBleHBvcnRzLkNhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzdWx0IGEgYENhbGxIaWVyYXJjaHlJdGVtYCBpbiBhIGRvY3VtZW50IGF0IGEgZ2l2ZW4gcG9zaXRpb24uXG4gKiBDYW4gYmUgdXNlZCBhcyBhbiBpbnB1dCB0byBhbiBpbmNvbWluZyBvciBvdXRnb2luZyBjYWxsIGhpZXJhcmNoeS5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKENhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCkge1xuICAgIENhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3ByZXBhcmVDYWxsSGllcmFyY2h5JztcbiAgICBDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ2FsbEhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgfHwgKGV4cG9ydHMuQ2FsbEhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0ID0gQ2FsbEhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIGluY29taW5nIGNhbGxzIGZvciBhIGdpdmVuIGBDYWxsSGllcmFyY2h5SXRlbWAuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgQ2FsbEhpZXJhcmNoeUluY29taW5nQ2FsbHNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChDYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3QpIHtcbiAgICBDYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3QubWV0aG9kID0gJ2NhbGxIaWVyYXJjaHkvaW5jb21pbmdDYWxscyc7XG4gICAgQ2FsbEhpZXJhcmNoeUluY29taW5nQ2FsbHNSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgQ2FsbEhpZXJhcmNoeUluY29taW5nQ2FsbHNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKENhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdC5tZXRob2QpO1xufSkoQ2FsbEhpZXJhcmNoeUluY29taW5nQ2FsbHNSZXF1ZXN0IHx8IChleHBvcnRzLkNhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdCA9IENhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byByZXNvbHZlIHRoZSBvdXRnb2luZyBjYWxscyBmb3IgYSBnaXZlbiBgQ2FsbEhpZXJhcmNoeUl0ZW1gLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIENhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdDtcbihmdW5jdGlvbiAoQ2FsbEhpZXJhcmNoeU91dGdvaW5nQ2FsbHNSZXF1ZXN0KSB7XG4gICAgQ2FsbEhpZXJhcmNoeU91dGdvaW5nQ2FsbHNSZXF1ZXN0Lm1ldGhvZCA9ICdjYWxsSGllcmFyY2h5L291dGdvaW5nQ2FsbHMnO1xuICAgIENhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIENhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShDYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3QubWV0aG9kKTtcbn0pKENhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdCB8fCAoZXhwb3J0cy5DYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3QgPSBDYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNzQ3OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkNvbG9yUHJlc2VudGF0aW9uUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRDb2xvclJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIGxpc3QgYWxsIGNvbG9yIHN5bWJvbHMgZm91bmQgaW4gYSBnaXZlbiB0ZXh0IGRvY3VtZW50LiBUaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgRG9jdW1lbnRDb2xvclBhcmFtc30gdGhlXG4gKiByZXNwb25zZSBpcyBvZiB0eXBlIHtAbGluayBDb2xvckluZm9ybWF0aW9uIENvbG9ySW5mb3JtYXRpb25bXX0gb3IgYSBUaGVuYWJsZVxuICogdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgRG9jdW1lbnRDb2xvclJlcXVlc3Q7XG4oZnVuY3Rpb24gKERvY3VtZW50Q29sb3JSZXF1ZXN0KSB7XG4gICAgRG9jdW1lbnRDb2xvclJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9kb2N1bWVudENvbG9yJztcbiAgICBEb2N1bWVudENvbG9yUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERvY3VtZW50Q29sb3JSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50Q29sb3JSZXF1ZXN0Lm1ldGhvZCk7XG59KShEb2N1bWVudENvbG9yUmVxdWVzdCB8fCAoZXhwb3J0cy5Eb2N1bWVudENvbG9yUmVxdWVzdCA9IERvY3VtZW50Q29sb3JSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIGxpc3QgYWxsIHByZXNlbnRhdGlvbiBmb3IgYSBjb2xvci4gVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIENvbG9yUHJlc2VudGF0aW9uUGFyYW1zfSB0aGVcbiAqIHJlc3BvbnNlIGlzIG9mIHR5cGUge0BsaW5rIENvbG9ySW5mb3JtYXRpb24gQ29sb3JJbmZvcm1hdGlvbltdfSBvciBhIFRoZW5hYmxlXG4gKiB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBDb2xvclByZXNlbnRhdGlvblJlcXVlc3Q7XG4oZnVuY3Rpb24gKENvbG9yUHJlc2VudGF0aW9uUmVxdWVzdCkge1xuICAgIENvbG9yUHJlc2VudGF0aW9uUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2NvbG9yUHJlc2VudGF0aW9uJztcbiAgICBDb2xvclByZXNlbnRhdGlvblJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDb2xvclByZXNlbnRhdGlvblJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0Lm1ldGhvZCk7XG59KShDb2xvclByZXNlbnRhdGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0ID0gQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzYzOTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5Db25maWd1cmF0aW9uUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLy8tLS0tIEdldCBDb25maWd1cmF0aW9uIHJlcXVlc3QgLS0tLVxuLyoqXG4gKiBUaGUgJ3dvcmtzcGFjZS9jb25maWd1cmF0aW9uJyByZXF1ZXN0IGlzIHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgdG8gZmV0Y2ggYSBjZXJ0YWluXG4gKiBjb25maWd1cmF0aW9uIHNldHRpbmcuXG4gKlxuICogVGhpcyBwdWxsIG1vZGVsIHJlcGxhY2VzIHRoZSBvbGQgcHVzaCBtb2RlbCB3ZXJlIHRoZSBjbGllbnQgc2lnbmFsZWQgY29uZmlndXJhdGlvbiBjaGFuZ2UgdmlhIGFuXG4gKiBldmVudC4gSWYgdGhlIHNlcnZlciBzdGlsbCBuZWVkcyB0byByZWFjdCB0byBjb25maWd1cmF0aW9uIGNoYW5nZXMgKHNpbmNlIHRoZSBzZXJ2ZXIgY2FjaGVzIHRoZVxuICogcmVzdWx0IG9mIGB3b3Jrc3BhY2UvY29uZmlndXJhdGlvbmAgcmVxdWVzdHMpIHRoZSBzZXJ2ZXIgc2hvdWxkIHJlZ2lzdGVyIGZvciBhbiBlbXB0eSBjb25maWd1cmF0aW9uXG4gKiBjaGFuZ2UgZXZlbnQgYW5kIGVtcHR5IHRoZSBjYWNoZSBpZiBzdWNoIGFuIGV2ZW50IGlzIHJlY2VpdmVkLlxuICovXG52YXIgQ29uZmlndXJhdGlvblJlcXVlc3Q7XG4oZnVuY3Rpb24gKENvbmZpZ3VyYXRpb25SZXF1ZXN0KSB7XG4gICAgQ29uZmlndXJhdGlvblJlcXVlc3QubWV0aG9kID0gJ3dvcmtzcGFjZS9jb25maWd1cmF0aW9uJztcbiAgICBDb25maWd1cmF0aW9uUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIENvbmZpZ3VyYXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKENvbmZpZ3VyYXRpb25SZXF1ZXN0Lm1ldGhvZCk7XG59KShDb25maWd1cmF0aW9uUmVxdWVzdCB8fCAoZXhwb3J0cy5Db25maWd1cmF0aW9uUmVxdWVzdCA9IENvbmZpZ3VyYXRpb25SZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTU4MTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5EZWNsYXJhdGlvblJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8vIEB0cy1pZ25vcmU6IHRvIGF2b2lkIGlubGluaW5nIExvY2F0aW9uTGluayBhcyBkeW5hbWljIGltcG9ydFxubGV0IF9fbm9EeW5hbWljSW1wb3J0O1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSB0aGUgdHlwZSBkZWZpbml0aW9uIGxvY2F0aW9ucyBvZiBhIHN5bWJvbCBhdCBhIGdpdmVuIHRleHRcbiAqIGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZiB0eXBlIHtAbGluayBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtc31cbiAqIHRoZSByZXNwb25zZSBpcyBvZiB0eXBlIHtAbGluayBEZWNsYXJhdGlvbn0gb3IgYSB0eXBlZCBhcnJheSBvZiB7QGxpbmsgRGVjbGFyYXRpb25MaW5rfVxuICogb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBEZWNsYXJhdGlvblJlcXVlc3Q7XG4oZnVuY3Rpb24gKERlY2xhcmF0aW9uUmVxdWVzdCkge1xuICAgIERlY2xhcmF0aW9uUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2RlY2xhcmF0aW9uJztcbiAgICBEZWNsYXJhdGlvblJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEZWNsYXJhdGlvblJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoRGVjbGFyYXRpb25SZXF1ZXN0Lm1ldGhvZCk7XG59KShEZWNsYXJhdGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuRGVjbGFyYXRpb25SZXF1ZXN0ID0gRGVjbGFyYXRpb25SZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTQ5NDpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5EaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLldvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudERpYWdub3N0aWNSZXBvcnRLaW5kID0gZXhwb3J0cy5EaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YSA9IHZvaWQgMDtcbmNvbnN0IHZzY29kZV9qc29ucnBjXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY3MjkpO1xuY29uc3QgSXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2MzMpO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIERpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhO1xuKGZ1bmN0aW9uIChEaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YSkge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLmJvb2xlYW4oY2FuZGlkYXRlLnJldHJpZ2dlclJlcXVlc3QpO1xuICAgIH1cbiAgICBEaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YS5pcyA9IGlzO1xufSkoRGlhZ25vc3RpY1NlcnZlckNhbmNlbGxhdGlvbkRhdGEgfHwgKGV4cG9ydHMuRGlhZ25vc3RpY1NlcnZlckNhbmNlbGxhdGlvbkRhdGEgPSBEaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YSA9IHt9KSk7XG4vKipcbiAqIFRoZSBkb2N1bWVudCBkaWFnbm9zdGljIHJlcG9ydCBraW5kcy5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBEb2N1bWVudERpYWdub3N0aWNSZXBvcnRLaW5kO1xuKGZ1bmN0aW9uIChEb2N1bWVudERpYWdub3N0aWNSZXBvcnRLaW5kKSB7XG4gICAgLyoqXG4gICAgICogQSBkaWFnbm9zdGljIHJlcG9ydCB3aXRoIGEgZnVsbFxuICAgICAqIHNldCBvZiBwcm9ibGVtcy5cbiAgICAgKi9cbiAgICBEb2N1bWVudERpYWdub3N0aWNSZXBvcnRLaW5kLkZ1bGwgPSAnZnVsbCc7XG4gICAgLyoqXG4gICAgICogQSByZXBvcnQgaW5kaWNhdGluZyB0aGF0IHRoZSBsYXN0XG4gICAgICogcmV0dXJuZWQgcmVwb3J0IGlzIHN0aWxsIGFjY3VyYXRlLlxuICAgICAqL1xuICAgIERvY3VtZW50RGlhZ25vc3RpY1JlcG9ydEtpbmQuVW5jaGFuZ2VkID0gJ3VuY2hhbmdlZCc7XG59KShEb2N1bWVudERpYWdub3N0aWNSZXBvcnRLaW5kIHx8IChleHBvcnRzLkRvY3VtZW50RGlhZ25vc3RpY1JlcG9ydEtpbmQgPSBEb2N1bWVudERpYWdub3N0aWNSZXBvcnRLaW5kID0ge30pKTtcbi8qKlxuICogVGhlIGRvY3VtZW50IGRpYWdub3N0aWMgcmVxdWVzdCBkZWZpbml0aW9uLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIERvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3Q7XG4oZnVuY3Rpb24gKERvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3QpIHtcbiAgICBEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZGlhZ25vc3RpYyc7XG4gICAgRG9jdW1lbnREaWFnbm9zdGljUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoRG9jdW1lbnREaWFnbm9zdGljUmVxdWVzdC5tZXRob2QpO1xuICAgIERvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3QucGFydGlhbFJlc3VsdCA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlByb2dyZXNzVHlwZSgpO1xufSkoRG9jdW1lbnREaWFnbm9zdGljUmVxdWVzdCB8fCAoZXhwb3J0cy5Eb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0ID0gRG9jdW1lbnREaWFnbm9zdGljUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFRoZSB3b3Jrc3BhY2UgZGlhZ25vc3RpYyByZXF1ZXN0IGRlZmluaXRpb24uXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3Q7XG4oZnVuY3Rpb24gKFdvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0KSB7XG4gICAgV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3QubWV0aG9kID0gJ3dvcmtzcGFjZS9kaWFnbm9zdGljJztcbiAgICBXb3Jrc3BhY2VEaWFnbm9zdGljUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFdvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFdvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0Lm1ldGhvZCk7XG4gICAgV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3QucGFydGlhbFJlc3VsdCA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlByb2dyZXNzVHlwZSgpO1xufSkoV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3QgfHwgKGV4cG9ydHMuV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3QgPSBXb3Jrc3BhY2VEaWFnbm9zdGljUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBkaWFnbm9zdGljIHJlZnJlc2ggcmVxdWVzdCBkZWZpbml0aW9uLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIERpYWdub3N0aWNSZWZyZXNoUmVxdWVzdDtcbihmdW5jdGlvbiAoRGlhZ25vc3RpY1JlZnJlc2hSZXF1ZXN0KSB7XG4gICAgRGlhZ25vc3RpY1JlZnJlc2hSZXF1ZXN0Lm1ldGhvZCA9IGB3b3Jrc3BhY2UvZGlhZ25vc3RpYy9yZWZyZXNoYDtcbiAgICBEaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBEaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUwKERpYWdub3N0aWNSZWZyZXNoUmVxdWVzdC5tZXRob2QpO1xufSkoRGlhZ25vc3RpY1JlZnJlc2hSZXF1ZXN0IHx8IChleHBvcnRzLkRpYWdub3N0aWNSZWZyZXNoUmVxdWVzdCA9IERpYWdub3N0aWNSZWZyZXNoUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ3ODE6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuV2lsbERlbGV0ZUZpbGVzUmVxdWVzdCA9IGV4cG9ydHMuRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uID0gZXhwb3J0cy5XaWxsUmVuYW1lRmlsZXNSZXF1ZXN0ID0gZXhwb3J0cy5EaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV2lsbENyZWF0ZUZpbGVzUmVxdWVzdCA9IGV4cG9ydHMuRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgcGF0dGVybiBraW5kIGRlc2NyaWJpbmcgaWYgYSBnbG9iIHBhdHRlcm4gbWF0Y2hlcyBhIGZpbGUgYSBmb2xkZXIgb3JcbiAqIGJvdGguXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kO1xuKGZ1bmN0aW9uIChGaWxlT3BlcmF0aW9uUGF0dGVybktpbmQpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcGF0dGVybiBtYXRjaGVzIGEgZmlsZSBvbmx5LlxuICAgICAqL1xuICAgIEZpbGVPcGVyYXRpb25QYXR0ZXJuS2luZC5maWxlID0gJ2ZpbGUnO1xuICAgIC8qKlxuICAgICAqIFRoZSBwYXR0ZXJuIG1hdGNoZXMgYSBmb2xkZXIgb25seS5cbiAgICAgKi9cbiAgICBGaWxlT3BlcmF0aW9uUGF0dGVybktpbmQuZm9sZGVyID0gJ2ZvbGRlcic7XG59KShGaWxlT3BlcmF0aW9uUGF0dGVybktpbmQgfHwgKGV4cG9ydHMuRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kID0gRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kID0ge30pKTtcbi8qKlxuICogVGhlIHdpbGwgY3JlYXRlIGZpbGVzIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciBiZWZvcmUgZmlsZXMgYXJlIGFjdHVhbGx5XG4gKiBjcmVhdGVkIGFzIGxvbmcgYXMgdGhlIGNyZWF0aW9uIGlzIHRyaWdnZXJlZCBmcm9tIHdpdGhpbiB0aGUgY2xpZW50LlxuICpcbiAqIFRoZSByZXF1ZXN0IGNhbiByZXR1cm4gYSBgV29ya3NwYWNlRWRpdGAgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHdvcmtzcGFjZSBiZWZvcmUgdGhlXG4gKiBmaWxlcyBhcmUgY3JlYXRlZC4gSGVuY2UgdGhlIGBXb3Jrc3BhY2VFZGl0YCBjYW4gbm90IG1hbmlwdWxhdGUgdGhlIGNvbnRlbnQgb2YgdGhlIGZpbGVcbiAqIHRvIGJlIGNyZWF0ZWQuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgV2lsbENyZWF0ZUZpbGVzUmVxdWVzdDtcbihmdW5jdGlvbiAoV2lsbENyZWF0ZUZpbGVzUmVxdWVzdCkge1xuICAgIFdpbGxDcmVhdGVGaWxlc1JlcXVlc3QubWV0aG9kID0gJ3dvcmtzcGFjZS93aWxsQ3JlYXRlRmlsZXMnO1xuICAgIFdpbGxDcmVhdGVGaWxlc1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBXaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFdpbGxDcmVhdGVGaWxlc1JlcXVlc3QubWV0aG9kKTtcbn0pKFdpbGxDcmVhdGVGaWxlc1JlcXVlc3QgfHwgKGV4cG9ydHMuV2lsbENyZWF0ZUZpbGVzUmVxdWVzdCA9IFdpbGxDcmVhdGVGaWxlc1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBUaGUgZGlkIGNyZWF0ZSBmaWxlcyBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB3aGVuXG4gKiBmaWxlcyB3ZXJlIGNyZWF0ZWQgZnJvbSB3aXRoaW4gdGhlIGNsaWVudC5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBEaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb24pIHtcbiAgICBEaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvbi5tZXRob2QgPSAnd29ya3NwYWNlL2RpZENyZWF0ZUZpbGVzJztcbiAgICBEaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKERpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uID0gRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgd2lsbCByZW5hbWUgZmlsZXMgcmVxdWVzdCBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIGJlZm9yZSBmaWxlcyBhcmUgYWN0dWFsbHlcbiAqIHJlbmFtZWQgYXMgbG9uZyBhcyB0aGUgcmVuYW1lIGlzIHRyaWdnZXJlZCBmcm9tIHdpdGhpbiB0aGUgY2xpZW50LlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIFdpbGxSZW5hbWVGaWxlc1JlcXVlc3Q7XG4oZnVuY3Rpb24gKFdpbGxSZW5hbWVGaWxlc1JlcXVlc3QpIHtcbiAgICBXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0Lm1ldGhvZCA9ICd3b3Jrc3BhY2Uvd2lsbFJlbmFtZUZpbGVzJztcbiAgICBXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgV2lsbFJlbmFtZUZpbGVzUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0Lm1ldGhvZCk7XG59KShXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0IHx8IChleHBvcnRzLldpbGxSZW5hbWVGaWxlc1JlcXVlc3QgPSBXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogVGhlIGRpZCByZW5hbWUgZmlsZXMgbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgd2hlblxuICogZmlsZXMgd2VyZSByZW5hbWVkIGZyb20gd2l0aGluIHRoZSBjbGllbnQuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uKSB7XG4gICAgRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24ubWV0aG9kID0gJ3dvcmtzcGFjZS9kaWRSZW5hbWVGaWxlcyc7XG4gICAgRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShEaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5EaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvbiA9IERpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIHdpbGwgZGVsZXRlIGZpbGVzIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciBiZWZvcmUgZmlsZXMgYXJlIGFjdHVhbGx5XG4gKiBkZWxldGVkIGFzIGxvbmcgYXMgdGhlIGRlbGV0aW9uIGlzIHRyaWdnZXJlZCBmcm9tIHdpdGhpbiB0aGUgY2xpZW50LlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIERpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChEaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbikge1xuICAgIERpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uLm1ldGhvZCA9ICd3b3Jrc3BhY2UvZGlkRGVsZXRlRmlsZXMnO1xuICAgIERpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb24gPSBEaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBkaWQgZGVsZXRlIGZpbGVzIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIHdoZW5cbiAqIGZpbGVzIHdlcmUgZGVsZXRlZCBmcm9tIHdpdGhpbiB0aGUgY2xpZW50LlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIFdpbGxEZWxldGVGaWxlc1JlcXVlc3Q7XG4oZnVuY3Rpb24gKFdpbGxEZWxldGVGaWxlc1JlcXVlc3QpIHtcbiAgICBXaWxsRGVsZXRlRmlsZXNSZXF1ZXN0Lm1ldGhvZCA9ICd3b3Jrc3BhY2Uvd2lsbERlbGV0ZUZpbGVzJztcbiAgICBXaWxsRGVsZXRlRmlsZXNSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgV2lsbERlbGV0ZUZpbGVzUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShXaWxsRGVsZXRlRmlsZXNSZXF1ZXN0Lm1ldGhvZCk7XG59KShXaWxsRGVsZXRlRmlsZXNSZXF1ZXN0IHx8IChleHBvcnRzLldpbGxEZWxldGVGaWxlc1JlcXVlc3QgPSBXaWxsRGVsZXRlRmlsZXNSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTIwMzpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkZvbGRpbmdSYW5nZVJlZnJlc2hSZXF1ZXN0ID0gZXhwb3J0cy5Gb2xkaW5nUmFuZ2VSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBwcm92aWRlIGZvbGRpbmcgcmFuZ2VzIGluIGEgZG9jdW1lbnQuIFRoZSByZXF1ZXN0J3NcbiAqIHBhcmFtZXRlciBpcyBvZiB0eXBlIHtAbGluayBGb2xkaW5nUmFuZ2VQYXJhbXN9LCB0aGVcbiAqIHJlc3BvbnNlIGlzIG9mIHR5cGUge0BsaW5rIEZvbGRpbmdSYW5nZUxpc3R9IG9yIGEgVGhlbmFibGVcbiAqIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIEZvbGRpbmdSYW5nZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKEZvbGRpbmdSYW5nZVJlcXVlc3QpIHtcbiAgICBGb2xkaW5nUmFuZ2VSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZm9sZGluZ1JhbmdlJztcbiAgICBGb2xkaW5nUmFuZ2VSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRm9sZGluZ1JhbmdlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShGb2xkaW5nUmFuZ2VSZXF1ZXN0Lm1ldGhvZCk7XG59KShGb2xkaW5nUmFuZ2VSZXF1ZXN0IHx8IChleHBvcnRzLkZvbGRpbmdSYW5nZVJlcXVlc3QgPSBGb2xkaW5nUmFuZ2VSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQHNpbmNlIDMuMTguMFxuICogQHByb3Bvc2VkXG4gKi9cbnZhciBGb2xkaW5nUmFuZ2VSZWZyZXNoUmVxdWVzdDtcbihmdW5jdGlvbiAoRm9sZGluZ1JhbmdlUmVmcmVzaFJlcXVlc3QpIHtcbiAgICBGb2xkaW5nUmFuZ2VSZWZyZXNoUmVxdWVzdC5tZXRob2QgPSBgd29ya3NwYWNlL2ZvbGRpbmdSYW5nZS9yZWZyZXNoYDtcbiAgICBGb2xkaW5nUmFuZ2VSZWZyZXNoUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIEZvbGRpbmdSYW5nZVJlZnJlc2hSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlMChGb2xkaW5nUmFuZ2VSZWZyZXNoUmVxdWVzdC5tZXRob2QpO1xufSkoRm9sZGluZ1JhbmdlUmVmcmVzaFJlcXVlc3QgfHwgKGV4cG9ydHMuRm9sZGluZ1JhbmdlUmVmcmVzaFJlcXVlc3QgPSBGb2xkaW5nUmFuZ2VSZWZyZXNoUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDcyODc6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuSW1wbGVtZW50YXRpb25SZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vLyBAdHMtaWdub3JlOiB0byBhdm9pZCBpbmxpbmluZyBMb2NhdGlvbkxpbmsgYXMgZHluYW1pYyBpbXBvcnRcbmxldCBfX25vRHluYW1pY0ltcG9ydDtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIGltcGxlbWVudGF0aW9uIGxvY2F0aW9ucyBvZiBhIHN5bWJvbCBhdCBhIGdpdmVuIHRleHRcbiAqIGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZiB0eXBlIHtAbGluayBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtc31cbiAqIHRoZSByZXNwb25zZSBpcyBvZiB0eXBlIHtAbGluayBEZWZpbml0aW9ufSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIEltcGxlbWVudGF0aW9uUmVxdWVzdDtcbihmdW5jdGlvbiAoSW1wbGVtZW50YXRpb25SZXF1ZXN0KSB7XG4gICAgSW1wbGVtZW50YXRpb25SZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvaW1wbGVtZW50YXRpb24nO1xuICAgIEltcGxlbWVudGF0aW9uUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIEltcGxlbWVudGF0aW9uUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShJbXBsZW1lbnRhdGlvblJlcXVlc3QubWV0aG9kKTtcbn0pKEltcGxlbWVudGF0aW9uUmVxdWVzdCB8fCAoZXhwb3J0cy5JbXBsZW1lbnRhdGlvblJlcXVlc3QgPSBJbXBsZW1lbnRhdGlvblJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5MzgzOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuSW5sYXlIaW50UmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLklubGF5SGludFJlc29sdmVSZXF1ZXN0ID0gZXhwb3J0cy5JbmxheUhpbnRSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBwcm92aWRlIGlubGF5IGhpbnRzIGluIGEgZG9jdW1lbnQuIFRoZSByZXF1ZXN0J3MgcGFyYW1ldGVyIGlzIG9mXG4gKiB0eXBlIHtAbGluayBJbmxheUhpbnRzUGFyYW1zfSwgdGhlIHJlc3BvbnNlIGlzIG9mIHR5cGVcbiAqIHtAbGluayBJbmxheUhpbnQgSW5sYXlIaW50W119IG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIElubGF5SGludFJlcXVlc3Q7XG4oZnVuY3Rpb24gKElubGF5SGludFJlcXVlc3QpIHtcbiAgICBJbmxheUhpbnRSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvaW5sYXlIaW50JztcbiAgICBJbmxheUhpbnRSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgSW5sYXlIaW50UmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShJbmxheUhpbnRSZXF1ZXN0Lm1ldGhvZCk7XG59KShJbmxheUhpbnRSZXF1ZXN0IHx8IChleHBvcnRzLklubGF5SGludFJlcXVlc3QgPSBJbmxheUhpbnRSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGZvciBhbiBpbmxheSBoaW50LlxuICogVGhlIHJlcXVlc3QncyBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgSW5sYXlIaW50fSwgdGhlIHJlc3BvbnNlIGlzXG4gKiBvZiB0eXBlIHtAbGluayBJbmxheUhpbnR9IG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIElubGF5SGludFJlc29sdmVSZXF1ZXN0O1xuKGZ1bmN0aW9uIChJbmxheUhpbnRSZXNvbHZlUmVxdWVzdCkge1xuICAgIElubGF5SGludFJlc29sdmVSZXF1ZXN0Lm1ldGhvZCA9ICdpbmxheUhpbnQvcmVzb2x2ZSc7XG4gICAgSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBJbmxheUhpbnRSZXNvbHZlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShJbmxheUhpbnRSZXNvbHZlUmVxdWVzdC5tZXRob2QpO1xufSkoSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QgfHwgKGV4cG9ydHMuSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QgPSBJbmxheUhpbnRSZXNvbHZlUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIElubGF5SGludFJlZnJlc2hSZXF1ZXN0O1xuKGZ1bmN0aW9uIChJbmxheUhpbnRSZWZyZXNoUmVxdWVzdCkge1xuICAgIElubGF5SGludFJlZnJlc2hSZXF1ZXN0Lm1ldGhvZCA9IGB3b3Jrc3BhY2UvaW5sYXlIaW50L3JlZnJlc2hgO1xuICAgIElubGF5SGludFJlZnJlc2hSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgSW5sYXlIaW50UmVmcmVzaFJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUwKElubGF5SGludFJlZnJlc2hSZXF1ZXN0Lm1ldGhvZCk7XG59KShJbmxheUhpbnRSZWZyZXNoUmVxdWVzdCB8fCAoZXhwb3J0cy5JbmxheUhpbnRSZWZyZXNoUmVxdWVzdCA9IElubGF5SGludFJlZnJlc2hSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjMyMjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLklubGluZUNvbXBsZXRpb25SZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBwcm92aWRlIGlubGluZSBjb21wbGV0aW9ucyBpbiBhIGRvY3VtZW50LiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZlxuICogdHlwZSB7QGxpbmsgSW5saW5lQ29tcGxldGlvblBhcmFtc30sIHRoZSByZXNwb25zZSBpcyBvZiB0eXBlXG4gKiB7QGxpbmsgSW5saW5lQ29tcGxldGlvbiBJbmxpbmVDb21wbGV0aW9uW119IG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICpcbiAqIEBzaW5jZSAzLjE4LjBcbiAqIEBwcm9wb3NlZFxuICovXG52YXIgSW5saW5lQ29tcGxldGlvblJlcXVlc3Q7XG4oZnVuY3Rpb24gKElubGluZUNvbXBsZXRpb25SZXF1ZXN0KSB7XG4gICAgSW5saW5lQ29tcGxldGlvblJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9pbmxpbmVDb21wbGV0aW9uJztcbiAgICBJbmxpbmVDb21wbGV0aW9uUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIElubGluZUNvbXBsZXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKElubGluZUNvbXBsZXRpb25SZXF1ZXN0Lm1ldGhvZCk7XG59KShJbmxpbmVDb21wbGV0aW9uUmVxdWVzdCB8fCAoZXhwb3J0cy5JbmxpbmVDb21wbGV0aW9uUmVxdWVzdCA9IElubGluZUNvbXBsZXRpb25SZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzQ5MTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLklubGluZVZhbHVlUmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLklubGluZVZhbHVlUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcHJvdmlkZSBpbmxpbmUgdmFsdWVzIGluIGEgZG9jdW1lbnQuIFRoZSByZXF1ZXN0J3MgcGFyYW1ldGVyIGlzIG9mXG4gKiB0eXBlIHtAbGluayBJbmxpbmVWYWx1ZVBhcmFtc30sIHRoZSByZXNwb25zZSBpcyBvZiB0eXBlXG4gKiB7QGxpbmsgSW5saW5lVmFsdWUgSW5saW5lVmFsdWVbXX0gb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgSW5saW5lVmFsdWVSZXF1ZXN0O1xuKGZ1bmN0aW9uIChJbmxpbmVWYWx1ZVJlcXVlc3QpIHtcbiAgICBJbmxpbmVWYWx1ZVJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9pbmxpbmVWYWx1ZSc7XG4gICAgSW5saW5lVmFsdWVSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgSW5saW5lVmFsdWVSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKElubGluZVZhbHVlUmVxdWVzdC5tZXRob2QpO1xufSkoSW5saW5lVmFsdWVSZXF1ZXN0IHx8IChleHBvcnRzLklubGluZVZhbHVlUmVxdWVzdCA9IElubGluZVZhbHVlUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIElubGluZVZhbHVlUmVmcmVzaFJlcXVlc3Q7XG4oZnVuY3Rpb24gKElubGluZVZhbHVlUmVmcmVzaFJlcXVlc3QpIHtcbiAgICBJbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0Lm1ldGhvZCA9IGB3b3Jrc3BhY2UvaW5saW5lVmFsdWUvcmVmcmVzaGA7XG4gICAgSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIElubGluZVZhbHVlUmVmcmVzaFJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUwKElubGluZVZhbHVlUmVmcmVzaFJlcXVlc3QubWV0aG9kKTtcbn0pKElubGluZVZhbHVlUmVmcmVzaFJlcXVlc3QgfHwgKGV4cG9ydHMuSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdCA9IElubGluZVZhbHVlUmVmcmVzaFJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxODE1OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLldvcmtzcGFjZVN5bWJvbFJlcXVlc3QgPSBleHBvcnRzLkNvZGVBY3Rpb25SZXNvbHZlUmVxdWVzdCA9IGV4cG9ydHMuQ29kZUFjdGlvblJlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50U3ltYm9sUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0ID0gZXhwb3J0cy5SZWZlcmVuY2VzUmVxdWVzdCA9IGV4cG9ydHMuRGVmaW5pdGlvblJlcXVlc3QgPSBleHBvcnRzLlNpZ25hdHVyZUhlbHBSZXF1ZXN0ID0gZXhwb3J0cy5TaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQgPSBleHBvcnRzLkhvdmVyUmVxdWVzdCA9IGV4cG9ydHMuQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0ID0gZXhwb3J0cy5Db21wbGV0aW9uUmVxdWVzdCA9IGV4cG9ydHMuQ29tcGxldGlvblRyaWdnZXJLaW5kID0gZXhwb3J0cy5QdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb24gPSBleHBvcnRzLldhdGNoS2luZCA9IGV4cG9ydHMuUmVsYXRpdmVQYXR0ZXJuID0gZXhwb3J0cy5GaWxlQ2hhbmdlVHlwZSA9IGV4cG9ydHMuRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzTm90aWZpY2F0aW9uID0gZXhwb3J0cy5XaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QgPSBleHBvcnRzLldpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5UZXh0RG9jdW1lbnRTYXZlUmVhc29uID0gZXhwb3J0cy5EaWRTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5UZXh0RG9jdW1lbnRDb250ZW50Q2hhbmdlRXZlbnQgPSBleHBvcnRzLkRpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLlRleHREb2N1bWVudFN5bmNLaW5kID0gZXhwb3J0cy5UZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuTG9nTWVzc2FnZU5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuU2hvd01lc3NhZ2VSZXF1ZXN0ID0gZXhwb3J0cy5TaG93TWVzc2FnZU5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuTWVzc2FnZVR5cGUgPSBleHBvcnRzLkRpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24gPSBleHBvcnRzLkV4aXROb3RpZmljYXRpb24gPSBleHBvcnRzLlNodXRkb3duUmVxdWVzdCA9IGV4cG9ydHMuSW5pdGlhbGl6ZWROb3RpZmljYXRpb24gPSBleHBvcnRzLkluaXRpYWxpemVFcnJvckNvZGVzID0gZXhwb3J0cy5Jbml0aWFsaXplUmVxdWVzdCA9IGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzc09wdGlvbnMgPSBleHBvcnRzLlRleHREb2N1bWVudFJlZ2lzdHJhdGlvbk9wdGlvbnMgPSBleHBvcnRzLlN0YXRpY1JlZ2lzdHJhdGlvbk9wdGlvbnMgPSBleHBvcnRzLlBvc2l0aW9uRW5jb2RpbmdLaW5kID0gZXhwb3J0cy5GYWlsdXJlSGFuZGxpbmdLaW5kID0gZXhwb3J0cy5SZXNvdXJjZU9wZXJhdGlvbktpbmQgPSBleHBvcnRzLlVucmVnaXN0cmF0aW9uUmVxdWVzdCA9IGV4cG9ydHMuUmVnaXN0cmF0aW9uUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRTZWxlY3RvciA9IGV4cG9ydHMuTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyID0gZXhwb3J0cy5Ob3RlYm9va0RvY3VtZW50RmlsdGVyID0gZXhwb3J0cy5UZXh0RG9jdW1lbnRGaWx0ZXIgPSB2b2lkIDA7XG5leHBvcnRzLk1vbmlrZXJSZXF1ZXN0ID0gZXhwb3J0cy5Nb25pa2VyS2luZCA9IGV4cG9ydHMuVW5pcXVlbmVzc0xldmVsID0gZXhwb3J0cy5XaWxsRGVsZXRlRmlsZXNSZXF1ZXN0ID0gZXhwb3J0cy5EaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV2lsbFJlbmFtZUZpbGVzUmVxdWVzdCA9IGV4cG9ydHMuRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24gPSBleHBvcnRzLldpbGxDcmVhdGVGaWxlc1JlcXVlc3QgPSBleHBvcnRzLkRpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uID0gZXhwb3J0cy5GaWxlT3BlcmF0aW9uUGF0dGVybktpbmQgPSBleHBvcnRzLkxpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3QgPSBleHBvcnRzLlNob3dEb2N1bWVudFJlcXVlc3QgPSBleHBvcnRzLlNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZSA9IGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdCA9IGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QgPSBleHBvcnRzLlNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0ID0gZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc1JlcXVlc3QgPSBleHBvcnRzLlRva2VuRm9ybWF0ID0gZXhwb3J0cy5DYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgPSBleHBvcnRzLkNhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdCA9IGV4cG9ydHMuQ2FsbEhpZXJhcmNoeUluY29taW5nQ2FsbHNSZXF1ZXN0ID0gZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uID0gZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdCA9IGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzcyA9IGV4cG9ydHMuU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0ID0gZXhwb3J0cy5EZWNsYXJhdGlvblJlcXVlc3QgPSBleHBvcnRzLkZvbGRpbmdSYW5nZVJlZnJlc2hSZXF1ZXN0ID0gZXhwb3J0cy5Gb2xkaW5nUmFuZ2VSZXF1ZXN0ID0gZXhwb3J0cy5Db2xvclByZXNlbnRhdGlvblJlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50Q29sb3JSZXF1ZXN0ID0gZXhwb3J0cy5Db25maWd1cmF0aW9uUmVxdWVzdCA9IGV4cG9ydHMuRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV29ya3NwYWNlRm9sZGVyc1JlcXVlc3QgPSBleHBvcnRzLlR5cGVEZWZpbml0aW9uUmVxdWVzdCA9IGV4cG9ydHMuSW1wbGVtZW50YXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5BcHBseVdvcmtzcGFjZUVkaXRSZXF1ZXN0ID0gZXhwb3J0cy5FeGVjdXRlQ29tbWFuZFJlcXVlc3QgPSBleHBvcnRzLlByZXBhcmVSZW5hbWVSZXF1ZXN0ID0gZXhwb3J0cy5SZW5hbWVSZXF1ZXN0ID0gZXhwb3J0cy5QcmVwYXJlU3VwcG9ydERlZmF1bHRCZWhhdmlvciA9IGV4cG9ydHMuRG9jdW1lbnRPblR5cGVGb3JtYXR0aW5nUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRSYW5nZXNGb3JtYXR0aW5nUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudEZvcm1hdHRpbmdSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRMaW5rUmVxdWVzdCA9IGV4cG9ydHMuQ29kZUxlbnNSZWZyZXNoUmVxdWVzdCA9IGV4cG9ydHMuQ29kZUxlbnNSZXNvbHZlUmVxdWVzdCA9IGV4cG9ydHMuQ29kZUxlbnNSZXF1ZXN0ID0gZXhwb3J0cy5Xb3Jrc3BhY2VTeW1ib2xSZXNvbHZlUmVxdWVzdCA9IHZvaWQgMDtcbmV4cG9ydHMuSW5saW5lQ29tcGxldGlvblJlcXVlc3QgPSBleHBvcnRzLkRpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLk5vdGVib29rQ2VsbEFycmF5Q2hhbmdlID0gZXhwb3J0cy5EaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlID0gZXhwb3J0cy5Ob3RlYm9va0RvY3VtZW50ID0gZXhwb3J0cy5Ob3RlYm9va0NlbGwgPSBleHBvcnRzLkV4ZWN1dGlvblN1bW1hcnkgPSBleHBvcnRzLk5vdGVib29rQ2VsbEtpbmQgPSBleHBvcnRzLkRpYWdub3N0aWNSZWZyZXNoUmVxdWVzdCA9IGV4cG9ydHMuV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50RGlhZ25vc3RpY1JlcG9ydEtpbmQgPSBleHBvcnRzLkRpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhID0gZXhwb3J0cy5JbmxheUhpbnRSZWZyZXNoUmVxdWVzdCA9IGV4cG9ydHMuSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QgPSBleHBvcnRzLklubGF5SGludFJlcXVlc3QgPSBleHBvcnRzLklubGluZVZhbHVlUmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLklubGluZVZhbHVlUmVxdWVzdCA9IGV4cG9ydHMuVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0ID0gZXhwb3J0cy5UeXBlSGllcmFyY2h5U3VidHlwZXNSZXF1ZXN0ID0gZXhwb3J0cy5UeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbmNvbnN0IHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyODUyKTtcbmNvbnN0IElzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NjMzKTtcbmNvbnN0IHByb3RvY29sX2ltcGxlbWVudGF0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyODcpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW1wbGVtZW50YXRpb25SZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfaW1wbGVtZW50YXRpb25fMS5JbXBsZW1lbnRhdGlvblJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfdHlwZURlZmluaXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTI2NCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUeXBlRGVmaW5pdGlvblJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF90eXBlRGVmaW5pdGlvbl8xLlR5cGVEZWZpbml0aW9uUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF93b3Jrc3BhY2VGb2xkZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjg2MCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX3dvcmtzcGFjZUZvbGRlcl8xLldvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb25cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF93b3Jrc3BhY2VGb2xkZXJfMS5EaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uOyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX2NvbmZpZ3VyYXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzYzOSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25maWd1cmF0aW9uUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2NvbmZpZ3VyYXRpb25fMS5Db25maWd1cmF0aW9uUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9jb2xvclByb3ZpZGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3NDcpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRG9jdW1lbnRDb2xvclJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9jb2xvclByb3ZpZGVyXzEuRG9jdW1lbnRDb2xvclJlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfY29sb3JQcm92aWRlcl8xLkNvbG9yUHJlc2VudGF0aW9uUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9mb2xkaW5nUmFuZ2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIwMyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGb2xkaW5nUmFuZ2VSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZm9sZGluZ1JhbmdlXzEuRm9sZGluZ1JhbmdlUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGb2xkaW5nUmFuZ2VSZWZyZXNoUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2ZvbGRpbmdSYW5nZV8xLkZvbGRpbmdSYW5nZVJlZnJlc2hSZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX2RlY2xhcmF0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1ODEpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVjbGFyYXRpb25SZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZGVjbGFyYXRpb25fMS5EZWNsYXJhdGlvblJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfc2VsZWN0aW9uUmFuZ2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTUzMCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZWxlY3Rpb25SYW5nZVJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9zZWxlY3Rpb25SYW5nZV8xLlNlbGVjdGlvblJhbmdlUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9wcm9ncmVzc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MTY2KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldvcmtEb25lUHJvZ3Jlc3NcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9wcm9ncmVzc18xLldvcmtEb25lUHJvZ3Jlc3M7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9wcm9ncmVzc18xLldvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb25cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9wcm9ncmVzc18xLldvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb247IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfY2FsbEhpZXJhcmNoeV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NjAyKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2NhbGxIaWVyYXJjaHlfMS5DYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FsbEhpZXJhcmNoeU91dGdvaW5nQ2FsbHNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfY2FsbEhpZXJhcmNoeV8xLkNhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9jYWxsSGllcmFyY2h5XzEuQ2FsbEhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX3NlbWFudGljVG9rZW5zXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwNjcpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG9rZW5Gb3JtYXRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9zZW1hbnRpY1Rva2Vuc18xLlRva2VuRm9ybWF0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlbWFudGljVG9rZW5zUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX3NlbWFudGljVG9rZW5zXzEuU2VtYW50aWNUb2tlbnNSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfc2VtYW50aWNUb2tlbnNfMS5TZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX3NlbWFudGljVG9rZW5zXzEuU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX3NlbWFudGljVG9rZW5zXzEuU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGVcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9zZW1hbnRpY1Rva2Vuc18xLlNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZTsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9zaG93RG9jdW1lbnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDMzMyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTaG93RG9jdW1lbnRSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfc2hvd0RvY3VtZW50XzEuU2hvd0RvY3VtZW50UmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9saW5rZWRFZGl0aW5nUmFuZ2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjI0OSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbGlua2VkRWRpdGluZ1JhbmdlXzEuTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9maWxlT3BlcmF0aW9uc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzgxKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZpbGVPcGVyYXRpb25QYXR0ZXJuS2luZFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2ZpbGVPcGVyYXRpb25zXzEuRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMS5EaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMS5XaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMS5EaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMS5XaWxsUmVuYW1lRmlsZXNSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMS5EaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXaWxsRGVsZXRlRmlsZXNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMS5XaWxsRGVsZXRlRmlsZXNSZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX21vbmlrZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzY4NCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVbmlxdWVuZXNzTGV2ZWxcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9tb25pa2VyXzEuVW5pcXVlbmVzc0xldmVsOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1vbmlrZXJLaW5kXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbW9uaWtlcl8xLk1vbmlrZXJLaW5kOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1vbmlrZXJSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbW9uaWtlcl8xLk1vbmlrZXJSZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX3R5cGVIaWVyYXJjaHlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzA2Mik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF90eXBlSGllcmFyY2h5XzEuVHlwZUhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF90eXBlSGllcmFyY2h5XzEuVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUeXBlSGllcmFyY2h5U3VwZXJ0eXBlc1JlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF90eXBlSGllcmFyY2h5XzEuVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX2lubGluZVZhbHVlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0OTEpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5saW5lVmFsdWVSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfaW5saW5lVmFsdWVfMS5JbmxpbmVWYWx1ZVJlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2lubGluZVZhbHVlXzEuSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9pbmxheUhpbnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTM4Myk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbmxheUhpbnRSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfaW5sYXlIaW50XzEuSW5sYXlIaW50UmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbmxheUhpbnRSZXNvbHZlUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2lubGF5SGludF8xLklubGF5SGludFJlc29sdmVSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklubGF5SGludFJlZnJlc2hSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfaW5sYXlIaW50XzEuSW5sYXlIaW50UmVmcmVzaFJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfZGlhZ25vc3RpY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDk0KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZGlhZ25vc3RpY18xLkRpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRvY3VtZW50RGlhZ25vc3RpY1JlcG9ydEtpbmRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9kaWFnbm9zdGljXzEuRG9jdW1lbnREaWFnbm9zdGljUmVwb3J0S2luZDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZGlhZ25vc3RpY18xLkRvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9kaWFnbm9zdGljXzEuV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlhZ25vc3RpY1JlZnJlc2hSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZGlhZ25vc3RpY18xLkRpYWdub3N0aWNSZWZyZXNoUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9ub3RlYm9va18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzkyKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGVib29rQ2VsbEtpbmRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9ub3RlYm9va18xLk5vdGVib29rQ2VsbEtpbmQ7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXhlY3V0aW9uU3VtbWFyeVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuRXhlY3V0aW9uU3VtbWFyeTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RlYm9va0NlbGxcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9ub3RlYm9va18xLk5vdGVib29rQ2VsbDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RlYm9va0RvY3VtZW50XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbm90ZWJvb2tfMS5Ob3RlYm9va0RvY3VtZW50OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbm90ZWJvb2tfMS5EaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RlYm9va0NlbGxBcnJheUNoYW5nZVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuTm90ZWJvb2tDZWxsQXJyYXlDaGFuZ2U7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlkQ2xvc2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbm90ZWJvb2tfMS5EaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb247IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfaW5saW5lQ29tcGxldGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMzIyKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklubGluZUNvbXBsZXRpb25SZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfaW5saW5lQ29tcGxldGlvbl8xLklubGluZUNvbXBsZXRpb25SZXF1ZXN0OyB9IH0pKTtcbi8vIEB0cy1pZ25vcmU6IHRvIGF2b2lkIGlubGluaW5nIExvY2F0aW9uTGluayBhcyBkeW5hbWljIGltcG9ydFxubGV0IF9fbm9EeW5hbWljSW1wb3J0O1xuLyoqXG4gKiBUaGUgVGV4dERvY3VtZW50RmlsdGVyIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFRleHREb2N1bWVudEZpbHRlcn0gbGl0ZXJhbHMuXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgVGV4dERvY3VtZW50RmlsdGVyO1xuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnRGaWx0ZXIpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLnN0cmluZyhjYW5kaWRhdGUpIHx8IChJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnNjaGVtZSkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5wYXR0ZXJuKSk7XG4gICAgfVxuICAgIFRleHREb2N1bWVudEZpbHRlci5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50RmlsdGVyIHx8IChleHBvcnRzLlRleHREb2N1bWVudEZpbHRlciA9IFRleHREb2N1bWVudEZpbHRlciA9IHt9KSk7XG4vKipcbiAqIFRoZSBOb3RlYm9va0RvY3VtZW50RmlsdGVyIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIE5vdGVib29rRG9jdW1lbnRGaWx0ZXJ9IGxpdGVyYWxzLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIE5vdGVib29rRG9jdW1lbnRGaWx0ZXI7XG4oZnVuY3Rpb24gKE5vdGVib29rRG9jdW1lbnRGaWx0ZXIpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5ub3RlYm9va1R5cGUpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUuc2NoZW1lKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnBhdHRlcm4pKTtcbiAgICB9XG4gICAgTm90ZWJvb2tEb2N1bWVudEZpbHRlci5pcyA9IGlzO1xufSkoTm90ZWJvb2tEb2N1bWVudEZpbHRlciB8fCAoZXhwb3J0cy5Ob3RlYm9va0RvY3VtZW50RmlsdGVyID0gTm90ZWJvb2tEb2N1bWVudEZpbHRlciA9IHt9KSk7XG4vKipcbiAqIFRoZSBOb3RlYm9va0NlbGxUZXh0RG9jdW1lbnRGaWx0ZXIgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyfSBsaXRlcmFscy5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBOb3RlYm9va0NlbGxUZXh0RG9jdW1lbnRGaWx0ZXI7XG4oZnVuY3Rpb24gKE5vdGVib29rQ2VsbFRleHREb2N1bWVudEZpbHRlcikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpXG4gICAgICAgICAgICAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5ub3RlYm9vaykgfHwgTm90ZWJvb2tEb2N1bWVudEZpbHRlci5pcyhjYW5kaWRhdGUubm90ZWJvb2spKVxuICAgICAgICAgICAgJiYgKGNhbmRpZGF0ZS5sYW5ndWFnZSA9PT0gdW5kZWZpbmVkIHx8IElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2UpKTtcbiAgICB9XG4gICAgTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyLmlzID0gaXM7XG59KShOb3RlYm9va0NlbGxUZXh0RG9jdW1lbnRGaWx0ZXIgfHwgKGV4cG9ydHMuTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyID0gTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyID0ge30pKTtcbi8qKlxuICogVGhlIERvY3VtZW50U2VsZWN0b3IgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgRG9jdW1lbnRTZWxlY3Rvcn1zLlxuICovXG52YXIgRG9jdW1lbnRTZWxlY3RvcjtcbihmdW5jdGlvbiAoRG9jdW1lbnRTZWxlY3Rvcikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBlbGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIUlzLnN0cmluZyhlbGVtKSAmJiAhVGV4dERvY3VtZW50RmlsdGVyLmlzKGVsZW0pICYmICFOb3RlYm9va0NlbGxUZXh0RG9jdW1lbnRGaWx0ZXIuaXMoZWxlbSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIERvY3VtZW50U2VsZWN0b3IuaXMgPSBpcztcbn0pKERvY3VtZW50U2VsZWN0b3IgfHwgKGV4cG9ydHMuRG9jdW1lbnRTZWxlY3RvciA9IERvY3VtZW50U2VsZWN0b3IgPSB7fSkpO1xuLyoqXG4gKiBUaGUgYGNsaWVudC9yZWdpc3RlckNhcGFiaWxpdHlgIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byByZWdpc3RlciBhIG5ldyBjYXBhYmlsaXR5XG4gKiBoYW5kbGVyIG9uIHRoZSBjbGllbnQgc2lkZS5cbiAqL1xudmFyIFJlZ2lzdHJhdGlvblJlcXVlc3Q7XG4oZnVuY3Rpb24gKFJlZ2lzdHJhdGlvblJlcXVlc3QpIHtcbiAgICBSZWdpc3RyYXRpb25SZXF1ZXN0Lm1ldGhvZCA9ICdjbGllbnQvcmVnaXN0ZXJDYXBhYmlsaXR5JztcbiAgICBSZWdpc3RyYXRpb25SZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgUmVnaXN0cmF0aW9uUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShSZWdpc3RyYXRpb25SZXF1ZXN0Lm1ldGhvZCk7XG59KShSZWdpc3RyYXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLlJlZ2lzdHJhdGlvblJlcXVlc3QgPSBSZWdpc3RyYXRpb25SZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogVGhlIGBjbGllbnQvdW5yZWdpc3RlckNhcGFiaWxpdHlgIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byB1bnJlZ2lzdGVyIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIGNhcGFiaWxpdHlcbiAqIGhhbmRsZXIgb24gdGhlIGNsaWVudCBzaWRlLlxuICovXG52YXIgVW5yZWdpc3RyYXRpb25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChVbnJlZ2lzdHJhdGlvblJlcXVlc3QpIHtcbiAgICBVbnJlZ2lzdHJhdGlvblJlcXVlc3QubWV0aG9kID0gJ2NsaWVudC91bnJlZ2lzdGVyQ2FwYWJpbGl0eSc7XG4gICAgVW5yZWdpc3RyYXRpb25SZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgVW5yZWdpc3RyYXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFVucmVnaXN0cmF0aW9uUmVxdWVzdC5tZXRob2QpO1xufSkoVW5yZWdpc3RyYXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLlVucmVnaXN0cmF0aW9uUmVxdWVzdCA9IFVucmVnaXN0cmF0aW9uUmVxdWVzdCA9IHt9KSk7XG52YXIgUmVzb3VyY2VPcGVyYXRpb25LaW5kO1xuKGZ1bmN0aW9uIChSZXNvdXJjZU9wZXJhdGlvbktpbmQpIHtcbiAgICAvKipcbiAgICAgKiBTdXBwb3J0cyBjcmVhdGluZyBuZXcgZmlsZXMgYW5kIGZvbGRlcnMuXG4gICAgICovXG4gICAgUmVzb3VyY2VPcGVyYXRpb25LaW5kLkNyZWF0ZSA9ICdjcmVhdGUnO1xuICAgIC8qKlxuICAgICAqIFN1cHBvcnRzIHJlbmFtaW5nIGV4aXN0aW5nIGZpbGVzIGFuZCBmb2xkZXJzLlxuICAgICAqL1xuICAgIFJlc291cmNlT3BlcmF0aW9uS2luZC5SZW5hbWUgPSAncmVuYW1lJztcbiAgICAvKipcbiAgICAgKiBTdXBwb3J0cyBkZWxldGluZyBleGlzdGluZyBmaWxlcyBhbmQgZm9sZGVycy5cbiAgICAgKi9cbiAgICBSZXNvdXJjZU9wZXJhdGlvbktpbmQuRGVsZXRlID0gJ2RlbGV0ZSc7XG59KShSZXNvdXJjZU9wZXJhdGlvbktpbmQgfHwgKGV4cG9ydHMuUmVzb3VyY2VPcGVyYXRpb25LaW5kID0gUmVzb3VyY2VPcGVyYXRpb25LaW5kID0ge30pKTtcbnZhciBGYWlsdXJlSGFuZGxpbmdLaW5kO1xuKGZ1bmN0aW9uIChGYWlsdXJlSGFuZGxpbmdLaW5kKSB7XG4gICAgLyoqXG4gICAgICogQXBwbHlpbmcgdGhlIHdvcmtzcGFjZSBjaGFuZ2UgaXMgc2ltcGx5IGFib3J0ZWQgaWYgb25lIG9mIHRoZSBjaGFuZ2VzIHByb3ZpZGVkXG4gICAgICogZmFpbHMuIEFsbCBvcGVyYXRpb25zIGV4ZWN1dGVkIGJlZm9yZSB0aGUgZmFpbGluZyBvcGVyYXRpb24gc3RheSBleGVjdXRlZC5cbiAgICAgKi9cbiAgICBGYWlsdXJlSGFuZGxpbmdLaW5kLkFib3J0ID0gJ2Fib3J0JztcbiAgICAvKipcbiAgICAgKiBBbGwgb3BlcmF0aW9ucyBhcmUgZXhlY3V0ZWQgdHJhbnNhY3Rpb25hbC4gVGhhdCBtZWFucyB0aGV5IGVpdGhlciBhbGxcbiAgICAgKiBzdWNjZWVkIG9yIG5vIGNoYW5nZXMgYXQgYWxsIGFyZSBhcHBsaWVkIHRvIHRoZSB3b3Jrc3BhY2UuXG4gICAgICovXG4gICAgRmFpbHVyZUhhbmRsaW5nS2luZC5UcmFuc2FjdGlvbmFsID0gJ3RyYW5zYWN0aW9uYWwnO1xuICAgIC8qKlxuICAgICAqIElmIHRoZSB3b3Jrc3BhY2UgZWRpdCBjb250YWlucyBvbmx5IHRleHR1YWwgZmlsZSBjaGFuZ2VzIHRoZXkgYXJlIGV4ZWN1dGVkIHRyYW5zYWN0aW9uYWwuXG4gICAgICogSWYgcmVzb3VyY2UgY2hhbmdlcyAoY3JlYXRlLCByZW5hbWUgb3IgZGVsZXRlIGZpbGUpIGFyZSBwYXJ0IG9mIHRoZSBjaGFuZ2UgdGhlIGZhaWx1cmVcbiAgICAgKiBoYW5kbGluZyBzdHJhdGVneSBpcyBhYm9ydC5cbiAgICAgKi9cbiAgICBGYWlsdXJlSGFuZGxpbmdLaW5kLlRleHRPbmx5VHJhbnNhY3Rpb25hbCA9ICd0ZXh0T25seVRyYW5zYWN0aW9uYWwnO1xuICAgIC8qKlxuICAgICAqIFRoZSBjbGllbnQgdHJpZXMgdG8gdW5kbyB0aGUgb3BlcmF0aW9ucyBhbHJlYWR5IGV4ZWN1dGVkLiBCdXQgdGhlcmUgaXMgbm9cbiAgICAgKiBndWFyYW50ZWUgdGhhdCB0aGlzIGlzIHN1Y2NlZWRpbmcuXG4gICAgICovXG4gICAgRmFpbHVyZUhhbmRsaW5nS2luZC5VbmRvID0gJ3VuZG8nO1xufSkoRmFpbHVyZUhhbmRsaW5nS2luZCB8fCAoZXhwb3J0cy5GYWlsdXJlSGFuZGxpbmdLaW5kID0gRmFpbHVyZUhhbmRsaW5nS2luZCA9IHt9KSk7XG4vKipcbiAqIEEgc2V0IG9mIHByZWRlZmluZWQgcG9zaXRpb24gZW5jb2Rpbmcga2luZHMuXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgUG9zaXRpb25FbmNvZGluZ0tpbmQ7XG4oZnVuY3Rpb24gKFBvc2l0aW9uRW5jb2RpbmdLaW5kKSB7XG4gICAgLyoqXG4gICAgICogQ2hhcmFjdGVyIG9mZnNldHMgY291bnQgVVRGLTggY29kZSB1bml0cyAoZS5nLiBieXRlcykuXG4gICAgICovXG4gICAgUG9zaXRpb25FbmNvZGluZ0tpbmQuVVRGOCA9ICd1dGYtOCc7XG4gICAgLyoqXG4gICAgICogQ2hhcmFjdGVyIG9mZnNldHMgY291bnQgVVRGLTE2IGNvZGUgdW5pdHMuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFuZCBtdXN0IGFsd2F5cyBiZSBzdXBwb3J0ZWRcbiAgICAgKiBieSBzZXJ2ZXJzXG4gICAgICovXG4gICAgUG9zaXRpb25FbmNvZGluZ0tpbmQuVVRGMTYgPSAndXRmLTE2JztcbiAgICAvKipcbiAgICAgKiBDaGFyYWN0ZXIgb2Zmc2V0cyBjb3VudCBVVEYtMzIgY29kZSB1bml0cy5cbiAgICAgKlxuICAgICAqIEltcGxlbWVudGF0aW9uIG5vdGU6IHRoZXNlIGFyZSB0aGUgc2FtZSBhcyBVbmljb2RlIGNvZGVwb2ludHMsXG4gICAgICogc28gdGhpcyBgUG9zaXRpb25FbmNvZGluZ0tpbmRgIG1heSBhbHNvIGJlIHVzZWQgZm9yIGFuXG4gICAgICogZW5jb2RpbmctYWdub3N0aWMgcmVwcmVzZW50YXRpb24gb2YgY2hhcmFjdGVyIG9mZnNldHMuXG4gICAgICovXG4gICAgUG9zaXRpb25FbmNvZGluZ0tpbmQuVVRGMzIgPSAndXRmLTMyJztcbn0pKFBvc2l0aW9uRW5jb2RpbmdLaW5kIHx8IChleHBvcnRzLlBvc2l0aW9uRW5jb2RpbmdLaW5kID0gUG9zaXRpb25FbmNvZGluZ0tpbmQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgU3RhdGljUmVnaXN0cmF0aW9uT3B0aW9ucyBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBTdGF0aWNSZWdpc3RyYXRpb25PcHRpb25zfSBsaXRlcmFscy5cbiAqL1xudmFyIFN0YXRpY1JlZ2lzdHJhdGlvbk9wdGlvbnM7XG4oZnVuY3Rpb24gKFN0YXRpY1JlZ2lzdHJhdGlvbk9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiBoYXNJZCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmlkKSAmJiBjYW5kaWRhdGUuaWQubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgU3RhdGljUmVnaXN0cmF0aW9uT3B0aW9ucy5oYXNJZCA9IGhhc0lkO1xufSkoU3RhdGljUmVnaXN0cmF0aW9uT3B0aW9ucyB8fCAoZXhwb3J0cy5TdGF0aWNSZWdpc3RyYXRpb25PcHRpb25zID0gU3RhdGljUmVnaXN0cmF0aW9uT3B0aW9ucyA9IHt9KSk7XG4vKipcbiAqIFRoZSBUZXh0RG9jdW1lbnRSZWdpc3RyYXRpb25PcHRpb25zIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFRleHREb2N1bWVudFJlZ2lzdHJhdGlvbk9wdGlvbnN9IGxpdGVyYWxzLlxuICovXG52YXIgVGV4dERvY3VtZW50UmVnaXN0cmF0aW9uT3B0aW9ucztcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50UmVnaXN0cmF0aW9uT3B0aW9ucykge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIChjYW5kaWRhdGUuZG9jdW1lbnRTZWxlY3RvciA9PT0gbnVsbCB8fCBEb2N1bWVudFNlbGVjdG9yLmlzKGNhbmRpZGF0ZS5kb2N1bWVudFNlbGVjdG9yKSk7XG4gICAgfVxuICAgIFRleHREb2N1bWVudFJlZ2lzdHJhdGlvbk9wdGlvbnMuaXMgPSBpcztcbn0pKFRleHREb2N1bWVudFJlZ2lzdHJhdGlvbk9wdGlvbnMgfHwgKGV4cG9ydHMuVGV4dERvY3VtZW50UmVnaXN0cmF0aW9uT3B0aW9ucyA9IFRleHREb2N1bWVudFJlZ2lzdHJhdGlvbk9wdGlvbnMgPSB7fSkpO1xuLyoqXG4gKiBUaGUgV29ya0RvbmVQcm9ncmVzc09wdGlvbnMgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgV29ya0RvbmVQcm9ncmVzc09wdGlvbnN9IGxpdGVyYWxzLlxuICovXG52YXIgV29ya0RvbmVQcm9ncmVzc09wdGlvbnM7XG4oZnVuY3Rpb24gKFdvcmtEb25lUHJvZ3Jlc3NPcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgKGNhbmRpZGF0ZS53b3JrRG9uZVByb2dyZXNzID09PSB1bmRlZmluZWQgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUud29ya0RvbmVQcm9ncmVzcykpO1xuICAgIH1cbiAgICBXb3JrRG9uZVByb2dyZXNzT3B0aW9ucy5pcyA9IGlzO1xuICAgIGZ1bmN0aW9uIGhhc1dvcmtEb25lUHJvZ3Jlc3ModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgSXMuYm9vbGVhbihjYW5kaWRhdGUud29ya0RvbmVQcm9ncmVzcyk7XG4gICAgfVxuICAgIFdvcmtEb25lUHJvZ3Jlc3NPcHRpb25zLmhhc1dvcmtEb25lUHJvZ3Jlc3MgPSBoYXNXb3JrRG9uZVByb2dyZXNzO1xufSkoV29ya0RvbmVQcm9ncmVzc09wdGlvbnMgfHwgKGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzc09wdGlvbnMgPSBXb3JrRG9uZVByb2dyZXNzT3B0aW9ucyA9IHt9KSk7XG4vKipcbiAqIFRoZSBpbml0aWFsaXplIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlci5cbiAqIEl0IGlzIHNlbnQgb25jZSBhcyB0aGUgcmVxdWVzdCBhZnRlciBzdGFydGluZyB1cCB0aGUgc2VydmVyLlxuICogVGhlIHJlcXVlc3RzIHBhcmFtZXRlciBpcyBvZiB0eXBlIHtAbGluayBJbml0aWFsaXplUGFyYW1zfVxuICogdGhlIHJlc3BvbnNlIGlmIG9mIHR5cGUge0BsaW5rIEluaXRpYWxpemVSZXN1bHR9IG9mIGEgVGhlbmFibGUgdGhhdFxuICogcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIEluaXRpYWxpemVSZXF1ZXN0O1xuKGZ1bmN0aW9uIChJbml0aWFsaXplUmVxdWVzdCkge1xuICAgIEluaXRpYWxpemVSZXF1ZXN0Lm1ldGhvZCA9ICdpbml0aWFsaXplJztcbiAgICBJbml0aWFsaXplUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIEluaXRpYWxpemVSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKEluaXRpYWxpemVSZXF1ZXN0Lm1ldGhvZCk7XG59KShJbml0aWFsaXplUmVxdWVzdCB8fCAoZXhwb3J0cy5Jbml0aWFsaXplUmVxdWVzdCA9IEluaXRpYWxpemVSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogS25vd24gZXJyb3IgY29kZXMgZm9yIGFuIGBJbml0aWFsaXplRXJyb3JDb2Rlc2A7XG4gKi9cbnZhciBJbml0aWFsaXplRXJyb3JDb2RlcztcbihmdW5jdGlvbiAoSW5pdGlhbGl6ZUVycm9yQ29kZXMpIHtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgcHJvdG9jb2wgdmVyc2lvbiBwcm92aWRlZCBieSB0aGUgY2xpZW50IGNhbid0IGJlIGhhbmRsZWQgYnkgdGhlIHNlcnZlci5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIFRoaXMgaW5pdGlhbGl6ZSBlcnJvciBnb3QgcmVwbGFjZWQgYnkgY2xpZW50IGNhcGFiaWxpdGllcy4gVGhlcmUgaXNcbiAgICAgKiBubyB2ZXJzaW9uIGhhbmRzaGFrZSBpbiB2ZXJzaW9uIDMuMHhcbiAgICAgKi9cbiAgICBJbml0aWFsaXplRXJyb3JDb2Rlcy51bmtub3duUHJvdG9jb2xWZXJzaW9uID0gMTtcbn0pKEluaXRpYWxpemVFcnJvckNvZGVzIHx8IChleHBvcnRzLkluaXRpYWxpemVFcnJvckNvZGVzID0gSW5pdGlhbGl6ZUVycm9yQ29kZXMgPSB7fSkpO1xuLyoqXG4gKiBUaGUgaW5pdGlhbGl6ZWQgbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZVxuICogc2VydmVyIGFmdGVyIHRoZSBjbGllbnQgaXMgZnVsbHkgaW5pdGlhbGl6ZWQgYW5kIHRoZSBzZXJ2ZXJcbiAqIGlzIGFsbG93ZWQgdG8gc2VuZCByZXF1ZXN0cyBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudC5cbiAqL1xudmFyIEluaXRpYWxpemVkTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChJbml0aWFsaXplZE5vdGlmaWNhdGlvbikge1xuICAgIEluaXRpYWxpemVkTm90aWZpY2F0aW9uLm1ldGhvZCA9ICdpbml0aWFsaXplZCc7XG4gICAgSW5pdGlhbGl6ZWROb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBJbml0aWFsaXplZE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKEluaXRpYWxpemVkTm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShJbml0aWFsaXplZE5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5Jbml0aWFsaXplZE5vdGlmaWNhdGlvbiA9IEluaXRpYWxpemVkTm90aWZpY2F0aW9uID0ge30pKTtcbi8vLS0tLSBTaHV0ZG93biBNZXRob2QgLS0tLVxuLyoqXG4gKiBBIHNodXRkb3duIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlci5cbiAqIEl0IGlzIHNlbnQgb25jZSB3aGVuIHRoZSBjbGllbnQgZGVjaWRlcyB0byBzaHV0ZG93biB0aGVcbiAqIHNlcnZlci4gVGhlIG9ubHkgbm90aWZpY2F0aW9uIHRoYXQgaXMgc2VudCBhZnRlciBhIHNodXRkb3duIHJlcXVlc3RcbiAqIGlzIHRoZSBleGl0IGV2ZW50LlxuICovXG52YXIgU2h1dGRvd25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChTaHV0ZG93blJlcXVlc3QpIHtcbiAgICBTaHV0ZG93blJlcXVlc3QubWV0aG9kID0gJ3NodXRkb3duJztcbiAgICBTaHV0ZG93blJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBTaHV0ZG93blJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUwKFNodXRkb3duUmVxdWVzdC5tZXRob2QpO1xufSkoU2h1dGRvd25SZXF1ZXN0IHx8IChleHBvcnRzLlNodXRkb3duUmVxdWVzdCA9IFNodXRkb3duUmVxdWVzdCA9IHt9KSk7XG4vLy0tLS0gRXhpdCBOb3RpZmljYXRpb24gLS0tLVxuLyoqXG4gKiBUaGUgZXhpdCBldmVudCBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIHRvXG4gKiBhc2sgdGhlIHNlcnZlciB0byBleGl0IGl0cyBwcm9jZXNzLlxuICovXG52YXIgRXhpdE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRXhpdE5vdGlmaWNhdGlvbikge1xuICAgIEV4aXROb3RpZmljYXRpb24ubWV0aG9kID0gJ2V4aXQnO1xuICAgIEV4aXROb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBFeGl0Tm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUwKEV4aXROb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKEV4aXROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRXhpdE5vdGlmaWNhdGlvbiA9IEV4aXROb3RpZmljYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgY29uZmlndXJhdGlvbiBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXJcbiAqIHdoZW4gdGhlIGNsaWVudCdzIGNvbmZpZ3VyYXRpb24gaGFzIGNoYW5nZWQuIFRoZSBub3RpZmljYXRpb24gY29udGFpbnNcbiAqIHRoZSBjaGFuZ2VkIGNvbmZpZ3VyYXRpb24gYXMgZGVmaW5lZCBieSB0aGUgbGFuZ3VhZ2UgY2xpZW50LlxuICovXG52YXIgRGlkQ2hhbmdlQ29uZmlndXJhdGlvbk5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkQ2hhbmdlQ29uZmlndXJhdGlvbk5vdGlmaWNhdGlvbikge1xuICAgIERpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24ubWV0aG9kID0gJ3dvcmtzcGFjZS9kaWRDaGFuZ2VDb25maWd1cmF0aW9uJztcbiAgICBEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkQ2hhbmdlQ29uZmlndXJhdGlvbk5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKERpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkQ2hhbmdlQ29uZmlndXJhdGlvbk5vdGlmaWNhdGlvbiA9IERpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24gPSB7fSkpO1xuLy8tLS0tIE1lc3NhZ2Ugc2hvdyBhbmQgbG9nIG5vdGlmaWNhdGlvbnMgLS0tLVxuLyoqXG4gKiBUaGUgbWVzc2FnZSB0eXBlXG4gKi9cbnZhciBNZXNzYWdlVHlwZTtcbihmdW5jdGlvbiAoTWVzc2FnZVR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBBbiBlcnJvciBtZXNzYWdlLlxuICAgICAqL1xuICAgIE1lc3NhZ2VUeXBlLkVycm9yID0gMTtcbiAgICAvKipcbiAgICAgKiBBIHdhcm5pbmcgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBNZXNzYWdlVHlwZS5XYXJuaW5nID0gMjtcbiAgICAvKipcbiAgICAgKiBBbiBpbmZvcm1hdGlvbiBtZXNzYWdlLlxuICAgICAqL1xuICAgIE1lc3NhZ2VUeXBlLkluZm8gPSAzO1xuICAgIC8qKlxuICAgICAqIEEgbG9nIG1lc3NhZ2UuXG4gICAgICovXG4gICAgTWVzc2FnZVR5cGUuTG9nID0gNDtcbiAgICAvKipcbiAgICAgKiBBIGRlYnVnIG1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMy4xOC4wXG4gICAgICovXG4gICAgTWVzc2FnZVR5cGUuRGVidWcgPSA1O1xufSkoTWVzc2FnZVR5cGUgfHwgKGV4cG9ydHMuTWVzc2FnZVR5cGUgPSBNZXNzYWdlVHlwZSA9IHt9KSk7XG4vKipcbiAqIFRoZSBzaG93IG1lc3NhZ2Ugbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSBhIHNlcnZlciB0byBhIGNsaWVudCB0byBhc2tcbiAqIHRoZSBjbGllbnQgdG8gZGlzcGxheSBhIHBhcnRpY3VsYXIgbWVzc2FnZSBpbiB0aGUgdXNlciBpbnRlcmZhY2UuXG4gKi9cbnZhciBTaG93TWVzc2FnZU5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoU2hvd01lc3NhZ2VOb3RpZmljYXRpb24pIHtcbiAgICBTaG93TWVzc2FnZU5vdGlmaWNhdGlvbi5tZXRob2QgPSAnd2luZG93L3Nob3dNZXNzYWdlJztcbiAgICBTaG93TWVzc2FnZU5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIFNob3dNZXNzYWdlTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoU2hvd01lc3NhZ2VOb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKFNob3dNZXNzYWdlTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLlNob3dNZXNzYWdlTm90aWZpY2F0aW9uID0gU2hvd01lc3NhZ2VOb3RpZmljYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgc2hvdyBtZXNzYWdlIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBzaG93IGEgbWVzc2FnZVxuICogYW5kIGEgc2V0IG9mIG9wdGlvbnMgYWN0aW9ucyB0byB0aGUgdXNlci5cbiAqL1xudmFyIFNob3dNZXNzYWdlUmVxdWVzdDtcbihmdW5jdGlvbiAoU2hvd01lc3NhZ2VSZXF1ZXN0KSB7XG4gICAgU2hvd01lc3NhZ2VSZXF1ZXN0Lm1ldGhvZCA9ICd3aW5kb3cvc2hvd01lc3NhZ2VSZXF1ZXN0JztcbiAgICBTaG93TWVzc2FnZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBTaG93TWVzc2FnZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoU2hvd01lc3NhZ2VSZXF1ZXN0Lm1ldGhvZCk7XG59KShTaG93TWVzc2FnZVJlcXVlc3QgfHwgKGV4cG9ydHMuU2hvd01lc3NhZ2VSZXF1ZXN0ID0gU2hvd01lc3NhZ2VSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogVGhlIGxvZyBtZXNzYWdlIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IHRvIGFza1xuICogdGhlIGNsaWVudCB0byBsb2cgYSBwYXJ0aWN1bGFyIG1lc3NhZ2UuXG4gKi9cbnZhciBMb2dNZXNzYWdlTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChMb2dNZXNzYWdlTm90aWZpY2F0aW9uKSB7XG4gICAgTG9nTWVzc2FnZU5vdGlmaWNhdGlvbi5tZXRob2QgPSAnd2luZG93L2xvZ01lc3NhZ2UnO1xuICAgIExvZ01lc3NhZ2VOb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBMb2dNZXNzYWdlTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoTG9nTWVzc2FnZU5vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoTG9nTWVzc2FnZU5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5Mb2dNZXNzYWdlTm90aWZpY2F0aW9uID0gTG9nTWVzc2FnZU5vdGlmaWNhdGlvbiA9IHt9KSk7XG4vLy0tLS0gVGVsZW1ldHJ5IG5vdGlmaWNhdGlvblxuLyoqXG4gKiBUaGUgdGVsZW1ldHJ5IGV2ZW50IG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IHRvIGFza1xuICogdGhlIGNsaWVudCB0byBsb2cgdGVsZW1ldHJ5IGRhdGEuXG4gKi9cbnZhciBUZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb24pIHtcbiAgICBUZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbi5tZXRob2QgPSAndGVsZW1ldHJ5L2V2ZW50JztcbiAgICBUZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIFRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKFRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLlRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uID0gVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBEZWZpbmVzIGhvdyB0aGUgaG9zdCAoZWRpdG9yKSBzaG91bGQgc3luY1xuICogZG9jdW1lbnQgY2hhbmdlcyB0byB0aGUgbGFuZ3VhZ2Ugc2VydmVyLlxuICovXG52YXIgVGV4dERvY3VtZW50U3luY0tpbmQ7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudFN5bmNLaW5kKSB7XG4gICAgLyoqXG4gICAgICogRG9jdW1lbnRzIHNob3VsZCBub3QgYmUgc3luY2VkIGF0IGFsbC5cbiAgICAgKi9cbiAgICBUZXh0RG9jdW1lbnRTeW5jS2luZC5Ob25lID0gMDtcbiAgICAvKipcbiAgICAgKiBEb2N1bWVudHMgYXJlIHN5bmNlZCBieSBhbHdheXMgc2VuZGluZyB0aGUgZnVsbCBjb250ZW50XG4gICAgICogb2YgdGhlIGRvY3VtZW50LlxuICAgICAqL1xuICAgIFRleHREb2N1bWVudFN5bmNLaW5kLkZ1bGwgPSAxO1xuICAgIC8qKlxuICAgICAqIERvY3VtZW50cyBhcmUgc3luY2VkIGJ5IHNlbmRpbmcgdGhlIGZ1bGwgY29udGVudCBvbiBvcGVuLlxuICAgICAqIEFmdGVyIHRoYXQgb25seSBpbmNyZW1lbnRhbCB1cGRhdGVzIHRvIHRoZSBkb2N1bWVudCBhcmVcbiAgICAgKiBzZW5kLlxuICAgICAqL1xuICAgIFRleHREb2N1bWVudFN5bmNLaW5kLkluY3JlbWVudGFsID0gMjtcbn0pKFRleHREb2N1bWVudFN5bmNLaW5kIHx8IChleHBvcnRzLlRleHREb2N1bWVudFN5bmNLaW5kID0gVGV4dERvY3VtZW50U3luY0tpbmQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgZG9jdW1lbnQgb3BlbiBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB0byBzaWduYWxcbiAqIG5ld2x5IG9wZW5lZCB0ZXh0IGRvY3VtZW50cy4gVGhlIGRvY3VtZW50J3MgdHJ1dGggaXMgbm93IG1hbmFnZWQgYnkgdGhlIGNsaWVudFxuICogYW5kIHRoZSBzZXJ2ZXIgbXVzdCBub3QgdHJ5IHRvIHJlYWQgdGhlIGRvY3VtZW50J3MgdHJ1dGggdXNpbmcgdGhlIGRvY3VtZW50J3NcbiAqIHVyaS4gT3BlbiBpbiB0aGlzIHNlbnNlIG1lYW5zIGl0IGlzIG1hbmFnZWQgYnkgdGhlIGNsaWVudC4gSXQgZG9lc24ndCBuZWNlc3NhcmlseVxuICogbWVhbiB0aGF0IGl0cyBjb250ZW50IGlzIHByZXNlbnRlZCBpbiBhbiBlZGl0b3IuIEFuIG9wZW4gbm90aWZpY2F0aW9uIG11c3Qgbm90XG4gKiBiZSBzZW50IG1vcmUgdGhhbiBvbmNlIHdpdGhvdXQgYSBjb3JyZXNwb25kaW5nIGNsb3NlIG5vdGlmaWNhdGlvbiBzZW5kIGJlZm9yZS5cbiAqIFRoaXMgbWVhbnMgb3BlbiBhbmQgY2xvc2Ugbm90aWZpY2F0aW9uIG11c3QgYmUgYmFsYW5jZWQgYW5kIHRoZSBtYXggb3BlbiBjb3VudFxuICogaXMgb25lLlxuICovXG52YXIgRGlkT3BlblRleHREb2N1bWVudE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkT3BlblRleHREb2N1bWVudE5vdGlmaWNhdGlvbikge1xuICAgIERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kID0gJ3RleHREb2N1bWVudC9kaWRPcGVuJztcbiAgICBEaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkT3BlblRleHREb2N1bWVudE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkT3BlblRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSB7fSkpO1xudmFyIFRleHREb2N1bWVudENvbnRlbnRDaGFuZ2VFdmVudDtcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50Q29udGVudENoYW5nZUV2ZW50KSB7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGluZm9ybWF0aW9uIGRlc2NyaWJlcyBhIGRlbHRhIGV2ZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5jcmVtZW50YWwoZXZlbnQpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IGV2ZW50O1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB1bmRlZmluZWQgJiYgY2FuZGlkYXRlICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgY2FuZGlkYXRlLnRleHQgPT09ICdzdHJpbmcnICYmIGNhbmRpZGF0ZS5yYW5nZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLnJhbmdlTGVuZ3RoID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGNhbmRpZGF0ZS5yYW5nZUxlbmd0aCA9PT0gJ251bWJlcicpO1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRDb250ZW50Q2hhbmdlRXZlbnQuaXNJbmNyZW1lbnRhbCA9IGlzSW5jcmVtZW50YWw7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGluZm9ybWF0aW9uIGRlc2NyaWJlcyBhIGZ1bGwgcmVwbGFjZW1lbnQgZXZlbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdWxsKGV2ZW50KSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSBldmVudDtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGNhbmRpZGF0ZS50ZXh0ID09PSAnc3RyaW5nJyAmJiBjYW5kaWRhdGUucmFuZ2UgPT09IHVuZGVmaW5lZCAmJiBjYW5kaWRhdGUucmFuZ2VMZW5ndGggPT09IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50Q29udGVudENoYW5nZUV2ZW50LmlzRnVsbCA9IGlzRnVsbDtcbn0pKFRleHREb2N1bWVudENvbnRlbnRDaGFuZ2VFdmVudCB8fCAoZXhwb3J0cy5UZXh0RG9jdW1lbnRDb250ZW50Q2hhbmdlRXZlbnQgPSBUZXh0RG9jdW1lbnRDb250ZW50Q2hhbmdlRXZlbnQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgZG9jdW1lbnQgY2hhbmdlIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIHRvIHNpZ25hbFxuICogY2hhbmdlcyB0byBhIHRleHQgZG9jdW1lbnQuXG4gKi9cbnZhciBEaWRDaGFuZ2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbikge1xuICAgIERpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi5tZXRob2QgPSAndGV4dERvY3VtZW50L2RpZENoYW5nZSc7XG4gICAgRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShEaWRDaGFuZ2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0gRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIGRvY3VtZW50IGNsb3NlIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIHdoZW5cbiAqIHRoZSBkb2N1bWVudCBnb3QgY2xvc2VkIGluIHRoZSBjbGllbnQuIFRoZSBkb2N1bWVudCdzIHRydXRoIG5vdyBleGlzdHMgd2hlcmVcbiAqIHRoZSBkb2N1bWVudCdzIHVyaSBwb2ludHMgdG8gKGUuZy4gaWYgdGhlIGRvY3VtZW50J3MgdXJpIGlzIGEgZmlsZSB1cmkgdGhlXG4gKiB0cnV0aCBub3cgZXhpc3RzIG9uIGRpc2spLiBBcyB3aXRoIHRoZSBvcGVuIG5vdGlmaWNhdGlvbiB0aGUgY2xvc2Ugbm90aWZpY2F0aW9uXG4gKiBpcyBhYm91dCBtYW5hZ2luZyB0aGUgZG9jdW1lbnQncyBjb250ZW50LiBSZWNlaXZpbmcgYSBjbG9zZSBub3RpZmljYXRpb25cbiAqIGRvZXNuJ3QgbWVhbiB0aGF0IHRoZSBkb2N1bWVudCB3YXMgb3BlbiBpbiBhbiBlZGl0b3IgYmVmb3JlLiBBIGNsb3NlXG4gKiBub3RpZmljYXRpb24gcmVxdWlyZXMgYSBwcmV2aW91cyBvcGVuIG5vdGlmaWNhdGlvbiB0byBiZSBzZW50LlxuICovXG52YXIgRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZENsb3NlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uKSB7XG4gICAgRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kID0gJ3RleHREb2N1bWVudC9kaWRDbG9zZSc7XG4gICAgRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZENsb3NlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShEaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5EaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IERpZENsb3NlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIGRvY3VtZW50IHNhdmUgbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgd2hlblxuICogdGhlIGRvY3VtZW50IGdvdCBzYXZlZCBpbiB0aGUgY2xpZW50LlxuICovXG52YXIgRGlkU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbikge1xuICAgIERpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kID0gJ3RleHREb2N1bWVudC9kaWRTYXZlJztcbiAgICBEaWRTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKERpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IERpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBSZXByZXNlbnRzIHJlYXNvbnMgd2h5IGEgdGV4dCBkb2N1bWVudCBpcyBzYXZlZC5cbiAqL1xudmFyIFRleHREb2N1bWVudFNhdmVSZWFzb247XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudFNhdmVSZWFzb24pIHtcbiAgICAvKipcbiAgICAgKiBNYW51YWxseSB0cmlnZ2VyZWQsIGUuZy4gYnkgdGhlIHVzZXIgcHJlc3Npbmcgc2F2ZSwgYnkgc3RhcnRpbmcgZGVidWdnaW5nLFxuICAgICAqIG9yIGJ5IGFuIEFQSSBjYWxsLlxuICAgICAqL1xuICAgIFRleHREb2N1bWVudFNhdmVSZWFzb24uTWFudWFsID0gMTtcbiAgICAvKipcbiAgICAgKiBBdXRvbWF0aWMgYWZ0ZXIgYSBkZWxheS5cbiAgICAgKi9cbiAgICBUZXh0RG9jdW1lbnRTYXZlUmVhc29uLkFmdGVyRGVsYXkgPSAyO1xuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGVkaXRvciBsb3N0IGZvY3VzLlxuICAgICAqL1xuICAgIFRleHREb2N1bWVudFNhdmVSZWFzb24uRm9jdXNPdXQgPSAzO1xufSkoVGV4dERvY3VtZW50U2F2ZVJlYXNvbiB8fCAoZXhwb3J0cy5UZXh0RG9jdW1lbnRTYXZlUmVhc29uID0gVGV4dERvY3VtZW50U2F2ZVJlYXNvbiA9IHt9KSk7XG4vKipcbiAqIEEgZG9jdW1lbnQgd2lsbCBzYXZlIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIGJlZm9yZVxuICogdGhlIGRvY3VtZW50IGlzIGFjdHVhbGx5IHNhdmVkLlxuICovXG52YXIgV2lsbFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKFdpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uKSB7XG4gICAgV2lsbFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kID0gJ3RleHREb2N1bWVudC93aWxsU2F2ZSc7XG4gICAgV2lsbFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBXaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKFdpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShXaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5XaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IFdpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogQSBkb2N1bWVudCB3aWxsIHNhdmUgcmVxdWVzdCBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIGJlZm9yZVxuICogdGhlIGRvY3VtZW50IGlzIGFjdHVhbGx5IHNhdmVkLiBUaGUgcmVxdWVzdCBjYW4gcmV0dXJuIGFuIGFycmF5IG9mIFRleHRFZGl0c1xuICogd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSB0ZXh0IGRvY3VtZW50IGJlZm9yZSBpdCBpcyBzYXZlZC4gUGxlYXNlIG5vdGUgdGhhdFxuICogY2xpZW50cyBtaWdodCBkcm9wIHJlc3VsdHMgaWYgY29tcHV0aW5nIHRoZSB0ZXh0IGVkaXRzIHRvb2sgdG9vIGxvbmcgb3IgaWYgYVxuICogc2VydmVyIGNvbnN0YW50bHkgZmFpbHMgb24gdGhpcyByZXF1ZXN0LiBUaGlzIGlzIGRvbmUgdG8ga2VlcCB0aGUgc2F2ZSBmYXN0IGFuZFxuICogcmVsaWFibGUuXG4gKi9cbnZhciBXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3Q7XG4oZnVuY3Rpb24gKFdpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdCkge1xuICAgIFdpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3dpbGxTYXZlV2FpdFVudGlsJztcbiAgICBXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoV2lsbFNhdmVUZXh0RG9jdW1lbnRXYWl0VW50aWxSZXF1ZXN0Lm1ldGhvZCk7XG59KShXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QgfHwgKGV4cG9ydHMuV2lsbFNhdmVUZXh0RG9jdW1lbnRXYWl0VW50aWxSZXF1ZXN0ID0gV2lsbFNhdmVUZXh0RG9jdW1lbnRXYWl0VW50aWxSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogVGhlIHdhdGNoZWQgZmlsZXMgbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgd2hlblxuICogdGhlIGNsaWVudCBkZXRlY3RzIGNoYW5nZXMgdG8gZmlsZSB3YXRjaGVkIGJ5IHRoZSBsYW5ndWFnZSBjbGllbnQuXG4gKi9cbnZhciBEaWRDaGFuZ2VXYXRjaGVkRmlsZXNOb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbikge1xuICAgIERpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbi5tZXRob2QgPSAnd29ya3NwYWNlL2RpZENoYW5nZVdhdGNoZWRGaWxlcyc7XG4gICAgRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzTm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShEaWRDaGFuZ2VXYXRjaGVkRmlsZXNOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzTm90aWZpY2F0aW9uID0gRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzTm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIGZpbGUgZXZlbnQgdHlwZVxuICovXG52YXIgRmlsZUNoYW5nZVR5cGU7XG4oZnVuY3Rpb24gKEZpbGVDaGFuZ2VUeXBlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGZpbGUgZ290IGNyZWF0ZWQuXG4gICAgICovXG4gICAgRmlsZUNoYW5nZVR5cGUuQ3JlYXRlZCA9IDE7XG4gICAgLyoqXG4gICAgICogVGhlIGZpbGUgZ290IGNoYW5nZWQuXG4gICAgICovXG4gICAgRmlsZUNoYW5nZVR5cGUuQ2hhbmdlZCA9IDI7XG4gICAgLyoqXG4gICAgICogVGhlIGZpbGUgZ290IGRlbGV0ZWQuXG4gICAgICovXG4gICAgRmlsZUNoYW5nZVR5cGUuRGVsZXRlZCA9IDM7XG59KShGaWxlQ2hhbmdlVHlwZSB8fCAoZXhwb3J0cy5GaWxlQ2hhbmdlVHlwZSA9IEZpbGVDaGFuZ2VUeXBlID0ge30pKTtcbnZhciBSZWxhdGl2ZVBhdHRlcm47XG4oZnVuY3Rpb24gKFJlbGF0aXZlUGF0dGVybikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmICh2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS5VUkkuaXMoY2FuZGlkYXRlLmJhc2VVcmkpIHx8IHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xLldvcmtzcGFjZUZvbGRlci5pcyhjYW5kaWRhdGUuYmFzZVVyaSkpICYmIElzLnN0cmluZyhjYW5kaWRhdGUucGF0dGVybik7XG4gICAgfVxuICAgIFJlbGF0aXZlUGF0dGVybi5pcyA9IGlzO1xufSkoUmVsYXRpdmVQYXR0ZXJuIHx8IChleHBvcnRzLlJlbGF0aXZlUGF0dGVybiA9IFJlbGF0aXZlUGF0dGVybiA9IHt9KSk7XG52YXIgV2F0Y2hLaW5kO1xuKGZ1bmN0aW9uIChXYXRjaEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBJbnRlcmVzdGVkIGluIGNyZWF0ZSBldmVudHMuXG4gICAgICovXG4gICAgV2F0Y2hLaW5kLkNyZWF0ZSA9IDE7XG4gICAgLyoqXG4gICAgICogSW50ZXJlc3RlZCBpbiBjaGFuZ2UgZXZlbnRzXG4gICAgICovXG4gICAgV2F0Y2hLaW5kLkNoYW5nZSA9IDI7XG4gICAgLyoqXG4gICAgICogSW50ZXJlc3RlZCBpbiBkZWxldGUgZXZlbnRzXG4gICAgICovXG4gICAgV2F0Y2hLaW5kLkRlbGV0ZSA9IDQ7XG59KShXYXRjaEtpbmQgfHwgKGV4cG9ydHMuV2F0Y2hLaW5kID0gV2F0Y2hLaW5kID0ge30pKTtcbi8qKlxuICogRGlhZ25vc3RpY3Mgbm90aWZpY2F0aW9uIGFyZSBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IHRvIHNpZ25hbFxuICogcmVzdWx0cyBvZiB2YWxpZGF0aW9uIHJ1bnMuXG4gKi9cbnZhciBQdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKFB1Ymxpc2hEaWFnbm9zdGljc05vdGlmaWNhdGlvbikge1xuICAgIFB1Ymxpc2hEaWFnbm9zdGljc05vdGlmaWNhdGlvbi5tZXRob2QgPSAndGV4dERvY3VtZW50L3B1Ymxpc2hEaWFnbm9zdGljcyc7XG4gICAgUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShQdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uID0gUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogSG93IGEgY29tcGxldGlvbiB3YXMgdHJpZ2dlcmVkXG4gKi9cbnZhciBDb21wbGV0aW9uVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKENvbXBsZXRpb25UcmlnZ2VyS2luZCkge1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBieSB0eXBpbmcgYW4gaWRlbnRpZmllciAoMjR4NyBjb2RlXG4gICAgICogY29tcGxldGUpLCBtYW51YWwgaW52b2NhdGlvbiAoZS5nIEN0cmwrU3BhY2UpIG9yIHZpYSBBUEkuXG4gICAgICovXG4gICAgQ29tcGxldGlvblRyaWdnZXJLaW5kLkludm9rZWQgPSAxO1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBieSBhIHRyaWdnZXIgY2hhcmFjdGVyIHNwZWNpZmllZCBieVxuICAgICAqIHRoZSBgdHJpZ2dlckNoYXJhY3RlcnNgIHByb3BlcnRpZXMgb2YgdGhlIGBDb21wbGV0aW9uUmVnaXN0cmF0aW9uT3B0aW9uc2AuXG4gICAgICovXG4gICAgQ29tcGxldGlvblRyaWdnZXJLaW5kLlRyaWdnZXJDaGFyYWN0ZXIgPSAyO1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRpb24gd2FzIHJlLXRyaWdnZXJlZCBhcyBjdXJyZW50IGNvbXBsZXRpb24gbGlzdCBpcyBpbmNvbXBsZXRlXG4gICAgICovXG4gICAgQ29tcGxldGlvblRyaWdnZXJLaW5kLlRyaWdnZXJGb3JJbmNvbXBsZXRlQ29tcGxldGlvbnMgPSAzO1xufSkoQ29tcGxldGlvblRyaWdnZXJLaW5kIHx8IChleHBvcnRzLkNvbXBsZXRpb25UcmlnZ2VyS2luZCA9IENvbXBsZXRpb25UcmlnZ2VyS2luZCA9IHt9KSk7XG4vKipcbiAqIFJlcXVlc3QgdG8gcmVxdWVzdCBjb21wbGV0aW9uIGF0IGEgZ2l2ZW4gdGV4dCBkb2N1bWVudCBwb3NpdGlvbi4gVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIFRleHREb2N1bWVudFBvc2l0aW9ufSB0aGUgcmVzcG9uc2VcbiAqIGlzIG9mIHR5cGUge0BsaW5rIENvbXBsZXRpb25JdGVtIENvbXBsZXRpb25JdGVtW119IG9yIHtAbGluayBDb21wbGV0aW9uTGlzdH1cbiAqIG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICpcbiAqIFRoZSByZXF1ZXN0IGNhbiBkZWxheSB0aGUgY29tcHV0YXRpb24gb2YgdGhlIHtAbGluayBDb21wbGV0aW9uSXRlbS5kZXRhaWwgYGRldGFpbGB9XG4gKiBhbmQge0BsaW5rIENvbXBsZXRpb25JdGVtLmRvY3VtZW50YXRpb24gYGRvY3VtZW50YXRpb25gfSBwcm9wZXJ0aWVzIHRvIHRoZSBgY29tcGxldGlvbkl0ZW0vcmVzb2x2ZWBcbiAqIHJlcXVlc3QuIEhvd2V2ZXIsIHByb3BlcnRpZXMgdGhhdCBhcmUgbmVlZGVkIGZvciB0aGUgaW5pdGlhbCBzb3J0aW5nIGFuZCBmaWx0ZXJpbmcsIGxpa2UgYHNvcnRUZXh0YCxcbiAqIGBmaWx0ZXJUZXh0YCwgYGluc2VydFRleHRgLCBhbmQgYHRleHRFZGl0YCwgbXVzdCBub3QgYmUgY2hhbmdlZCBkdXJpbmcgcmVzb2x2ZS5cbiAqL1xudmFyIENvbXBsZXRpb25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uUmVxdWVzdCkge1xuICAgIENvbXBsZXRpb25SZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvY29tcGxldGlvbic7XG4gICAgQ29tcGxldGlvblJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDb21wbGV0aW9uUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShDb21wbGV0aW9uUmVxdWVzdC5tZXRob2QpO1xufSkoQ29tcGxldGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuQ29tcGxldGlvblJlcXVlc3QgPSBDb21wbGV0aW9uUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFJlcXVlc3QgdG8gcmVzb2x2ZSBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGZvciBhIGdpdmVuIGNvbXBsZXRpb24gaXRlbS5UaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgQ29tcGxldGlvbkl0ZW19IHRoZSByZXNwb25zZVxuICogaXMgb2YgdHlwZSB7QGxpbmsgQ29tcGxldGlvbkl0ZW19IG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0O1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QpIHtcbiAgICBDb21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QubWV0aG9kID0gJ2NvbXBsZXRpb25JdGVtL3Jlc29sdmUnO1xuICAgIENvbXBsZXRpb25SZXNvbHZlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIENvbXBsZXRpb25SZXNvbHZlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShDb21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QubWV0aG9kKTtcbn0pKENvbXBsZXRpb25SZXNvbHZlUmVxdWVzdCB8fCAoZXhwb3J0cy5Db21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QgPSBDb21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBSZXF1ZXN0IHRvIHJlcXVlc3QgaG92ZXIgaW5mb3JtYXRpb24gYXQgYSBnaXZlbiB0ZXh0IGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgVGV4dERvY3VtZW50UG9zaXRpb259IHRoZSByZXNwb25zZSBpcyBvZlxuICogdHlwZSB7QGxpbmsgSG92ZXJ9IG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgSG92ZXJSZXF1ZXN0O1xuKGZ1bmN0aW9uIChIb3ZlclJlcXVlc3QpIHtcbiAgICBIb3ZlclJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9ob3Zlcic7XG4gICAgSG92ZXJSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgSG92ZXJSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKEhvdmVyUmVxdWVzdC5tZXRob2QpO1xufSkoSG92ZXJSZXF1ZXN0IHx8IChleHBvcnRzLkhvdmVyUmVxdWVzdCA9IEhvdmVyUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEhvdyBhIHNpZ25hdHVyZSBoZWxwIHdhcyB0cmlnZ2VyZWQuXG4gKlxuICogQHNpbmNlIDMuMTUuMFxuICovXG52YXIgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQpIHtcbiAgICAvKipcbiAgICAgKiBTaWduYXR1cmUgaGVscCB3YXMgaW52b2tlZCBtYW51YWxseSBieSB0aGUgdXNlciBvciBieSBhIGNvbW1hbmQuXG4gICAgICovXG4gICAgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kLkludm9rZWQgPSAxO1xuICAgIC8qKlxuICAgICAqIFNpZ25hdHVyZSBoZWxwIHdhcyB0cmlnZ2VyZWQgYnkgYSB0cmlnZ2VyIGNoYXJhY3Rlci5cbiAgICAgKi9cbiAgICBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQuVHJpZ2dlckNoYXJhY3RlciA9IDI7XG4gICAgLyoqXG4gICAgICogU2lnbmF0dXJlIGhlbHAgd2FzIHRyaWdnZXJlZCBieSB0aGUgY3Vyc29yIG1vdmluZyBvciBieSB0aGUgZG9jdW1lbnQgY29udGVudCBjaGFuZ2luZy5cbiAgICAgKi9cbiAgICBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQuQ29udGVudENoYW5nZSA9IDM7XG59KShTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQgfHwgKGV4cG9ydHMuU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kID0gU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kID0ge30pKTtcbnZhciBTaWduYXR1cmVIZWxwUmVxdWVzdDtcbihmdW5jdGlvbiAoU2lnbmF0dXJlSGVscFJlcXVlc3QpIHtcbiAgICBTaWduYXR1cmVIZWxwUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3NpZ25hdHVyZUhlbHAnO1xuICAgIFNpZ25hdHVyZUhlbHBSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgU2lnbmF0dXJlSGVscFJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoU2lnbmF0dXJlSGVscFJlcXVlc3QubWV0aG9kKTtcbn0pKFNpZ25hdHVyZUhlbHBSZXF1ZXN0IHx8IChleHBvcnRzLlNpZ25hdHVyZUhlbHBSZXF1ZXN0ID0gU2lnbmF0dXJlSGVscFJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSB0aGUgZGVmaW5pdGlvbiBsb2NhdGlvbiBvZiBhIHN5bWJvbCBhdCBhIGdpdmVuIHRleHRcbiAqIGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZiB0eXBlIHtAbGluayBUZXh0RG9jdW1lbnRQb3NpdGlvbn1cbiAqIHRoZSByZXNwb25zZSBpcyBvZiBlaXRoZXIgdHlwZSB7QGxpbmsgRGVmaW5pdGlvbn0gb3IgYSB0eXBlZCBhcnJheSBvZlxuICoge0BsaW5rIERlZmluaXRpb25MaW5rfSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIERlZmluaXRpb25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChEZWZpbml0aW9uUmVxdWVzdCkge1xuICAgIERlZmluaXRpb25SZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZGVmaW5pdGlvbic7XG4gICAgRGVmaW5pdGlvblJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEZWZpbml0aW9uUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShEZWZpbml0aW9uUmVxdWVzdC5tZXRob2QpO1xufSkoRGVmaW5pdGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuRGVmaW5pdGlvblJlcXVlc3QgPSBEZWZpbml0aW9uUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byByZXNvbHZlIHByb2plY3Qtd2lkZSByZWZlcmVuY2VzIGZvciB0aGUgc3ltYm9sIGRlbm90ZWRcbiAqIGJ5IHRoZSBnaXZlbiB0ZXh0IGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZlxuICogdHlwZSB7QGxpbmsgUmVmZXJlbmNlUGFyYW1zfSB0aGUgcmVzcG9uc2UgaXMgb2YgdHlwZVxuICoge0BsaW5rIExvY2F0aW9uIExvY2F0aW9uW119IG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgUmVmZXJlbmNlc1JlcXVlc3Q7XG4oZnVuY3Rpb24gKFJlZmVyZW5jZXNSZXF1ZXN0KSB7XG4gICAgUmVmZXJlbmNlc1JlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9yZWZlcmVuY2VzJztcbiAgICBSZWZlcmVuY2VzUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFJlZmVyZW5jZXNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFJlZmVyZW5jZXNSZXF1ZXN0Lm1ldGhvZCk7XG59KShSZWZlcmVuY2VzUmVxdWVzdCB8fCAoZXhwb3J0cy5SZWZlcmVuY2VzUmVxdWVzdCA9IFJlZmVyZW5jZXNSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogUmVxdWVzdCB0byByZXNvbHZlIGEge0BsaW5rIERvY3VtZW50SGlnaGxpZ2h0fSBmb3IgYSBnaXZlblxuICogdGV4dCBkb2N1bWVudCBwb3NpdGlvbi4gVGhlIHJlcXVlc3QncyBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgVGV4dERvY3VtZW50UG9zaXRpb259XG4gKiB0aGUgcmVxdWVzdCByZXNwb25zZSBpcyBhbiBhcnJheSBvZiB0eXBlIHtAbGluayBEb2N1bWVudEhpZ2hsaWdodH1cbiAqIG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0O1xuKGZ1bmN0aW9uIChEb2N1bWVudEhpZ2hsaWdodFJlcXVlc3QpIHtcbiAgICBEb2N1bWVudEhpZ2hsaWdodFJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9kb2N1bWVudEhpZ2hsaWdodCc7XG4gICAgRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdC5tZXRob2QpO1xufSkoRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0IHx8IChleHBvcnRzLkRvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdCA9IERvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBsaXN0IGFsbCBzeW1ib2xzIGZvdW5kIGluIGEgZ2l2ZW4gdGV4dCBkb2N1bWVudC4gVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIFRleHREb2N1bWVudElkZW50aWZpZXJ9IHRoZVxuICogcmVzcG9uc2UgaXMgb2YgdHlwZSB7QGxpbmsgU3ltYm9sSW5mb3JtYXRpb24gU3ltYm9sSW5mb3JtYXRpb25bXX0gb3IgYSBUaGVuYWJsZVxuICogdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgRG9jdW1lbnRTeW1ib2xSZXF1ZXN0O1xuKGZ1bmN0aW9uIChEb2N1bWVudFN5bWJvbFJlcXVlc3QpIHtcbiAgICBEb2N1bWVudFN5bWJvbFJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9kb2N1bWVudFN5bWJvbCc7XG4gICAgRG9jdW1lbnRTeW1ib2xSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRG9jdW1lbnRTeW1ib2xSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50U3ltYm9sUmVxdWVzdC5tZXRob2QpO1xufSkoRG9jdW1lbnRTeW1ib2xSZXF1ZXN0IHx8IChleHBvcnRzLkRvY3VtZW50U3ltYm9sUmVxdWVzdCA9IERvY3VtZW50U3ltYm9sUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBwcm92aWRlIGNvbW1hbmRzIGZvciB0aGUgZ2l2ZW4gdGV4dCBkb2N1bWVudCBhbmQgcmFuZ2UuXG4gKi9cbnZhciBDb2RlQWN0aW9uUmVxdWVzdDtcbihmdW5jdGlvbiAoQ29kZUFjdGlvblJlcXVlc3QpIHtcbiAgICBDb2RlQWN0aW9uUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2NvZGVBY3Rpb24nO1xuICAgIENvZGVBY3Rpb25SZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgQ29kZUFjdGlvblJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ29kZUFjdGlvblJlcXVlc3QubWV0aG9kKTtcbn0pKENvZGVBY3Rpb25SZXF1ZXN0IHx8IChleHBvcnRzLkNvZGVBY3Rpb25SZXF1ZXN0ID0gQ29kZUFjdGlvblJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBSZXF1ZXN0IHRvIHJlc29sdmUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgYSBnaXZlbiBjb2RlIGFjdGlvbi5UaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgQ29kZUFjdGlvbn0gdGhlIHJlc3BvbnNlXG4gKiBpcyBvZiB0eXBlIHtAbGluayBDb2RlQWN0aW9ufSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIENvZGVBY3Rpb25SZXNvbHZlUmVxdWVzdDtcbihmdW5jdGlvbiAoQ29kZUFjdGlvblJlc29sdmVSZXF1ZXN0KSB7XG4gICAgQ29kZUFjdGlvblJlc29sdmVSZXF1ZXN0Lm1ldGhvZCA9ICdjb2RlQWN0aW9uL3Jlc29sdmUnO1xuICAgIENvZGVBY3Rpb25SZXNvbHZlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIENvZGVBY3Rpb25SZXNvbHZlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShDb2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QubWV0aG9kKTtcbn0pKENvZGVBY3Rpb25SZXNvbHZlUmVxdWVzdCB8fCAoZXhwb3J0cy5Db2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QgPSBDb2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gbGlzdCBwcm9qZWN0LXdpZGUgc3ltYm9scyBtYXRjaGluZyB0aGUgcXVlcnkgc3RyaW5nIGdpdmVuXG4gKiBieSB0aGUge0BsaW5rIFdvcmtzcGFjZVN5bWJvbFBhcmFtc30uIFRoZSByZXNwb25zZSBpc1xuICogb2YgdHlwZSB7QGxpbmsgU3ltYm9sSW5mb3JtYXRpb24gU3ltYm9sSW5mb3JtYXRpb25bXX0gb3IgYSBUaGVuYWJsZSB0aGF0XG4gKiByZXNvbHZlcyB0byBzdWNoLlxuICpcbiAqIEBzaW5jZSAzLjE3LjAgLSBzdXBwb3J0IGZvciBXb3Jrc3BhY2VTeW1ib2wgaW4gdGhlIHJldHVybmVkIGRhdGEuIENsaWVudHNcbiAqICBuZWVkIHRvIGFkdmVydGlzZSBzdXBwb3J0IGZvciBXb3Jrc3BhY2VTeW1ib2xzIHZpYSB0aGUgY2xpZW50IGNhcGFiaWxpdHlcbiAqICBgd29ya3NwYWNlLnN5bWJvbC5yZXNvbHZlU3VwcG9ydGAuXG4gKlxuICovXG52YXIgV29ya3NwYWNlU3ltYm9sUmVxdWVzdDtcbihmdW5jdGlvbiAoV29ya3NwYWNlU3ltYm9sUmVxdWVzdCkge1xuICAgIFdvcmtzcGFjZVN5bWJvbFJlcXVlc3QubWV0aG9kID0gJ3dvcmtzcGFjZS9zeW1ib2wnO1xuICAgIFdvcmtzcGFjZVN5bWJvbFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBXb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFdvcmtzcGFjZVN5bWJvbFJlcXVlc3QubWV0aG9kKTtcbn0pKFdvcmtzcGFjZVN5bWJvbFJlcXVlc3QgfHwgKGV4cG9ydHMuV29ya3NwYWNlU3ltYm9sUmVxdWVzdCA9IFdvcmtzcGFjZVN5bWJvbFJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSB0aGUgcmFuZ2UgaW5zaWRlIHRoZSB3b3Jrc3BhY2VcbiAqIHN5bWJvbCdzIGxvY2F0aW9uLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIFdvcmtzcGFjZVN5bWJvbFJlc29sdmVSZXF1ZXN0O1xuKGZ1bmN0aW9uIChXb3Jrc3BhY2VTeW1ib2xSZXNvbHZlUmVxdWVzdCkge1xuICAgIFdvcmtzcGFjZVN5bWJvbFJlc29sdmVSZXF1ZXN0Lm1ldGhvZCA9ICd3b3Jrc3BhY2VTeW1ib2wvcmVzb2x2ZSc7XG4gICAgV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBXb3Jrc3BhY2VTeW1ib2xSZXNvbHZlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShXb3Jrc3BhY2VTeW1ib2xSZXNvbHZlUmVxdWVzdC5tZXRob2QpO1xufSkoV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QgfHwgKGV4cG9ydHMuV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QgPSBXb3Jrc3BhY2VTeW1ib2xSZXNvbHZlUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBwcm92aWRlIGNvZGUgbGVucyBmb3IgdGhlIGdpdmVuIHRleHQgZG9jdW1lbnQuXG4gKi9cbnZhciBDb2RlTGVuc1JlcXVlc3Q7XG4oZnVuY3Rpb24gKENvZGVMZW5zUmVxdWVzdCkge1xuICAgIENvZGVMZW5zUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2NvZGVMZW5zJztcbiAgICBDb2RlTGVuc1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDb2RlTGVuc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ29kZUxlbnNSZXF1ZXN0Lm1ldGhvZCk7XG59KShDb2RlTGVuc1JlcXVlc3QgfHwgKGV4cG9ydHMuQ29kZUxlbnNSZXF1ZXN0ID0gQ29kZUxlbnNSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgYSBjb21tYW5kIGZvciBhIGdpdmVuIGNvZGUgbGVucy5cbiAqL1xudmFyIENvZGVMZW5zUmVzb2x2ZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKENvZGVMZW5zUmVzb2x2ZVJlcXVlc3QpIHtcbiAgICBDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0Lm1ldGhvZCA9ICdjb2RlTGVucy9yZXNvbHZlJztcbiAgICBDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgQ29kZUxlbnNSZXNvbHZlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0IHx8IChleHBvcnRzLkNvZGVMZW5zUmVzb2x2ZVJlcXVlc3QgPSBDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlZnJlc2ggYWxsIGNvZGUgYWN0aW9uc1xuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIENvZGVMZW5zUmVmcmVzaFJlcXVlc3Q7XG4oZnVuY3Rpb24gKENvZGVMZW5zUmVmcmVzaFJlcXVlc3QpIHtcbiAgICBDb2RlTGVuc1JlZnJlc2hSZXF1ZXN0Lm1ldGhvZCA9IGB3b3Jrc3BhY2UvY29kZUxlbnMvcmVmcmVzaGA7XG4gICAgQ29kZUxlbnNSZWZyZXNoUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIENvZGVMZW5zUmVmcmVzaFJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUwKENvZGVMZW5zUmVmcmVzaFJlcXVlc3QubWV0aG9kKTtcbn0pKENvZGVMZW5zUmVmcmVzaFJlcXVlc3QgfHwgKGV4cG9ydHMuQ29kZUxlbnNSZWZyZXNoUmVxdWVzdCA9IENvZGVMZW5zUmVmcmVzaFJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcHJvdmlkZSBkb2N1bWVudCBsaW5rc1xuICovXG52YXIgRG9jdW1lbnRMaW5rUmVxdWVzdDtcbihmdW5jdGlvbiAoRG9jdW1lbnRMaW5rUmVxdWVzdCkge1xuICAgIERvY3VtZW50TGlua1JlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9kb2N1bWVudExpbmsnO1xuICAgIERvY3VtZW50TGlua1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEb2N1bWVudExpbmtSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50TGlua1JlcXVlc3QubWV0aG9kKTtcbn0pKERvY3VtZW50TGlua1JlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRMaW5rUmVxdWVzdCA9IERvY3VtZW50TGlua1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBSZXF1ZXN0IHRvIHJlc29sdmUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgYSBnaXZlbiBkb2N1bWVudCBsaW5rLiBUaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgRG9jdW1lbnRMaW5rfSB0aGUgcmVzcG9uc2VcbiAqIGlzIG9mIHR5cGUge0BsaW5rIERvY3VtZW50TGlua30gb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBEb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdDtcbihmdW5jdGlvbiAoRG9jdW1lbnRMaW5rUmVzb2x2ZVJlcXVlc3QpIHtcbiAgICBEb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdC5tZXRob2QgPSAnZG9jdW1lbnRMaW5rL3Jlc29sdmUnO1xuICAgIERvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRG9jdW1lbnRMaW5rUmVzb2x2ZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoRG9jdW1lbnRMaW5rUmVzb2x2ZVJlcXVlc3QubWV0aG9kKTtcbn0pKERvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0IHx8IChleHBvcnRzLkRvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0ID0gRG9jdW1lbnRMaW5rUmVzb2x2ZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gZm9ybWF0IGEgd2hvbGUgZG9jdW1lbnQuXG4gKi9cbnZhciBEb2N1bWVudEZvcm1hdHRpbmdSZXF1ZXN0O1xuKGZ1bmN0aW9uIChEb2N1bWVudEZvcm1hdHRpbmdSZXF1ZXN0KSB7XG4gICAgRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2Zvcm1hdHRpbmcnO1xuICAgIERvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEb2N1bWVudEZvcm1hdHRpbmdSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3QubWV0aG9kKTtcbn0pKERvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdCA9IERvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gZm9ybWF0IGEgcmFuZ2UgaW4gYSBkb2N1bWVudC5cbiAqL1xudmFyIERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdDtcbihmdW5jdGlvbiAoRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0KSB7XG4gICAgRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvcmFuZ2VGb3JtYXR0aW5nJztcbiAgICBEb2N1bWVudFJhbmdlRm9ybWF0dGluZ1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEb2N1bWVudFJhbmdlRm9ybWF0dGluZ1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0Lm1ldGhvZCk7XG59KShEb2N1bWVudFJhbmdlRm9ybWF0dGluZ1JlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0ID0gRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIGZvcm1hdCByYW5nZXMgaW4gYSBkb2N1bWVudC5cbiAqXG4gKiBAc2luY2UgMy4xOC4wXG4gKiBAcHJvcG9zZWRcbiAqL1xudmFyIERvY3VtZW50UmFuZ2VzRm9ybWF0dGluZ1JlcXVlc3Q7XG4oZnVuY3Rpb24gKERvY3VtZW50UmFuZ2VzRm9ybWF0dGluZ1JlcXVlc3QpIHtcbiAgICBEb2N1bWVudFJhbmdlc0Zvcm1hdHRpbmdSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvcmFuZ2VzRm9ybWF0dGluZyc7XG4gICAgRG9jdW1lbnRSYW5nZXNGb3JtYXR0aW5nUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERvY3VtZW50UmFuZ2VzRm9ybWF0dGluZ1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoRG9jdW1lbnRSYW5nZXNGb3JtYXR0aW5nUmVxdWVzdC5tZXRob2QpO1xufSkoRG9jdW1lbnRSYW5nZXNGb3JtYXR0aW5nUmVxdWVzdCB8fCAoZXhwb3J0cy5Eb2N1bWVudFJhbmdlc0Zvcm1hdHRpbmdSZXF1ZXN0ID0gRG9jdW1lbnRSYW5nZXNGb3JtYXR0aW5nUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBmb3JtYXQgYSBkb2N1bWVudCBvbiB0eXBlLlxuICovXG52YXIgRG9jdW1lbnRPblR5cGVGb3JtYXR0aW5nUmVxdWVzdDtcbihmdW5jdGlvbiAoRG9jdW1lbnRPblR5cGVGb3JtYXR0aW5nUmVxdWVzdCkge1xuICAgIERvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9vblR5cGVGb3JtYXR0aW5nJztcbiAgICBEb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRG9jdW1lbnRPblR5cGVGb3JtYXR0aW5nUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShEb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0Lm1ldGhvZCk7XG59KShEb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0IHx8IChleHBvcnRzLkRvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QgPSBEb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0ID0ge30pKTtcbi8vLS0tLSBSZW5hbWUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxudmFyIFByZXBhcmVTdXBwb3J0RGVmYXVsdEJlaGF2aW9yO1xuKGZ1bmN0aW9uIChQcmVwYXJlU3VwcG9ydERlZmF1bHRCZWhhdmlvcikge1xuICAgIC8qKlxuICAgICAqIFRoZSBjbGllbnQncyBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHNlbGVjdCB0aGUgaWRlbnRpZmllclxuICAgICAqIGFjY29yZGluZyB0aGUgdG8gbGFuZ3VhZ2UncyBzeW50YXggcnVsZS5cbiAgICAgKi9cbiAgICBQcmVwYXJlU3VwcG9ydERlZmF1bHRCZWhhdmlvci5JZGVudGlmaWVyID0gMTtcbn0pKFByZXBhcmVTdXBwb3J0RGVmYXVsdEJlaGF2aW9yIHx8IChleHBvcnRzLlByZXBhcmVTdXBwb3J0RGVmYXVsdEJlaGF2aW9yID0gUHJlcGFyZVN1cHBvcnREZWZhdWx0QmVoYXZpb3IgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVuYW1lIGEgc3ltYm9sLlxuICovXG52YXIgUmVuYW1lUmVxdWVzdDtcbihmdW5jdGlvbiAoUmVuYW1lUmVxdWVzdCkge1xuICAgIFJlbmFtZVJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9yZW5hbWUnO1xuICAgIFJlbmFtZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBSZW5hbWVSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFJlbmFtZVJlcXVlc3QubWV0aG9kKTtcbn0pKFJlbmFtZVJlcXVlc3QgfHwgKGV4cG9ydHMuUmVuYW1lUmVxdWVzdCA9IFJlbmFtZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gdGVzdCBhbmQgcGVyZm9ybSB0aGUgc2V0dXAgbmVjZXNzYXJ5IGZvciBhIHJlbmFtZS5cbiAqXG4gKiBAc2luY2UgMy4xNiAtIHN1cHBvcnQgZm9yIGRlZmF1bHQgYmVoYXZpb3JcbiAqL1xudmFyIFByZXBhcmVSZW5hbWVSZXF1ZXN0O1xuKGZ1bmN0aW9uIChQcmVwYXJlUmVuYW1lUmVxdWVzdCkge1xuICAgIFByZXBhcmVSZW5hbWVSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvcHJlcGFyZVJlbmFtZSc7XG4gICAgUHJlcGFyZVJlbmFtZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBQcmVwYXJlUmVuYW1lUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShQcmVwYXJlUmVuYW1lUmVxdWVzdC5tZXRob2QpO1xufSkoUHJlcGFyZVJlbmFtZVJlcXVlc3QgfHwgKGV4cG9ydHMuUHJlcGFyZVJlbmFtZVJlcXVlc3QgPSBQcmVwYXJlUmVuYW1lUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCBzZW5kIGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIHRvIGV4ZWN1dGUgYSBjb21tYW5kLiBUaGUgcmVxdWVzdCBtaWdodCByZXR1cm5cbiAqIGEgd29ya3NwYWNlIGVkaXQgd2hpY2ggdGhlIGNsaWVudCB3aWxsIGFwcGx5IHRvIHRoZSB3b3Jrc3BhY2UuXG4gKi9cbnZhciBFeGVjdXRlQ29tbWFuZFJlcXVlc3Q7XG4oZnVuY3Rpb24gKEV4ZWN1dGVDb21tYW5kUmVxdWVzdCkge1xuICAgIEV4ZWN1dGVDb21tYW5kUmVxdWVzdC5tZXRob2QgPSAnd29ya3NwYWNlL2V4ZWN1dGVDb21tYW5kJztcbiAgICBFeGVjdXRlQ29tbWFuZFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBFeGVjdXRlQ29tbWFuZFJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0Lm1ldGhvZCk7XG59KShFeGVjdXRlQ29tbWFuZFJlcXVlc3QgfHwgKGV4cG9ydHMuRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0ID0gRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgdG8gbW9kaWZpZWQgY2VydGFpbiByZXNvdXJjZXMuXG4gKi9cbnZhciBBcHBseVdvcmtzcGFjZUVkaXRSZXF1ZXN0O1xuKGZ1bmN0aW9uIChBcHBseVdvcmtzcGFjZUVkaXRSZXF1ZXN0KSB7XG4gICAgQXBwbHlXb3Jrc3BhY2VFZGl0UmVxdWVzdC5tZXRob2QgPSAnd29ya3NwYWNlL2FwcGx5RWRpdCc7XG4gICAgQXBwbHlXb3Jrc3BhY2VFZGl0UmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIEFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoJ3dvcmtzcGFjZS9hcHBseUVkaXQnKTtcbn0pKEFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QgfHwgKGV4cG9ydHMuQXBwbHlXb3Jrc3BhY2VFZGl0UmVxdWVzdCA9IEFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyMjQ5OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcHJvdmlkZSByYW5nZXMgdGhhdCBjYW4gYmUgZWRpdGVkIHRvZ2V0aGVyLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIExpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKExpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3QpIHtcbiAgICBMaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvbGlua2VkRWRpdGluZ1JhbmdlJztcbiAgICBMaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShMaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0Lm1ldGhvZCk7XG59KShMaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0IHx8IChleHBvcnRzLkxpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3QgPSBMaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzY4NDpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5Nb25pa2VyUmVxdWVzdCA9IGV4cG9ydHMuTW9uaWtlcktpbmQgPSBleHBvcnRzLlVuaXF1ZW5lc3NMZXZlbCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBNb25pa2VyIHVuaXF1ZW5lc3MgbGV2ZWwgdG8gZGVmaW5lIHNjb3BlIG9mIHRoZSBtb25pa2VyLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIFVuaXF1ZW5lc3NMZXZlbDtcbihmdW5jdGlvbiAoVW5pcXVlbmVzc0xldmVsKSB7XG4gICAgLyoqXG4gICAgICogVGhlIG1vbmlrZXIgaXMgb25seSB1bmlxdWUgaW5zaWRlIGEgZG9jdW1lbnRcbiAgICAgKi9cbiAgICBVbmlxdWVuZXNzTGV2ZWwuZG9jdW1lbnQgPSAnZG9jdW1lbnQnO1xuICAgIC8qKlxuICAgICAqIFRoZSBtb25pa2VyIGlzIHVuaXF1ZSBpbnNpZGUgYSBwcm9qZWN0IGZvciB3aGljaCBhIGR1bXAgZ290IGNyZWF0ZWRcbiAgICAgKi9cbiAgICBVbmlxdWVuZXNzTGV2ZWwucHJvamVjdCA9ICdwcm9qZWN0JztcbiAgICAvKipcbiAgICAgKiBUaGUgbW9uaWtlciBpcyB1bmlxdWUgaW5zaWRlIHRoZSBncm91cCB0byB3aGljaCBhIHByb2plY3QgYmVsb25nc1xuICAgICAqL1xuICAgIFVuaXF1ZW5lc3NMZXZlbC5ncm91cCA9ICdncm91cCc7XG4gICAgLyoqXG4gICAgICogVGhlIG1vbmlrZXIgaXMgdW5pcXVlIGluc2lkZSB0aGUgbW9uaWtlciBzY2hlbWUuXG4gICAgICovXG4gICAgVW5pcXVlbmVzc0xldmVsLnNjaGVtZSA9ICdzY2hlbWUnO1xuICAgIC8qKlxuICAgICAqIFRoZSBtb25pa2VyIGlzIGdsb2JhbGx5IHVuaXF1ZVxuICAgICAqL1xuICAgIFVuaXF1ZW5lc3NMZXZlbC5nbG9iYWwgPSAnZ2xvYmFsJztcbn0pKFVuaXF1ZW5lc3NMZXZlbCB8fCAoZXhwb3J0cy5VbmlxdWVuZXNzTGV2ZWwgPSBVbmlxdWVuZXNzTGV2ZWwgPSB7fSkpO1xuLyoqXG4gKiBUaGUgbW9uaWtlciBraW5kLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIE1vbmlrZXJLaW5kO1xuKGZ1bmN0aW9uIChNb25pa2VyS2luZCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBtb25pa2VyIHJlcHJlc2VudCBhIHN5bWJvbCB0aGF0IGlzIGltcG9ydGVkIGludG8gYSBwcm9qZWN0XG4gICAgICovXG4gICAgTW9uaWtlcktpbmQuJGltcG9ydCA9ICdpbXBvcnQnO1xuICAgIC8qKlxuICAgICAqIFRoZSBtb25pa2VyIHJlcHJlc2VudHMgYSBzeW1ib2wgdGhhdCBpcyBleHBvcnRlZCBmcm9tIGEgcHJvamVjdFxuICAgICAqL1xuICAgIE1vbmlrZXJLaW5kLiRleHBvcnQgPSAnZXhwb3J0JztcbiAgICAvKipcbiAgICAgKiBUaGUgbW9uaWtlciByZXByZXNlbnRzIGEgc3ltYm9sIHRoYXQgaXMgbG9jYWwgdG8gYSBwcm9qZWN0IChlLmcuIGEgbG9jYWxcbiAgICAgKiB2YXJpYWJsZSBvZiBhIGZ1bmN0aW9uLCBhIGNsYXNzIG5vdCB2aXNpYmxlIG91dHNpZGUgdGhlIHByb2plY3QsIC4uLilcbiAgICAgKi9cbiAgICBNb25pa2VyS2luZC5sb2NhbCA9ICdsb2NhbCc7XG59KShNb25pa2VyS2luZCB8fCAoZXhwb3J0cy5Nb25pa2VyS2luZCA9IE1vbmlrZXJLaW5kID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIGdldCB0aGUgbW9uaWtlciBvZiBhIHN5bWJvbCBhdCBhIGdpdmVuIHRleHQgZG9jdW1lbnQgcG9zaXRpb24uXG4gKiBUaGUgcmVxdWVzdCBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXN9LlxuICogVGhlIHJlc3BvbnNlIGlzIG9mIHR5cGUge0BsaW5rIE1vbmlrZXIgTW9uaWtlcltdfSBvciBgbnVsbGAuXG4gKi9cbnZhciBNb25pa2VyUmVxdWVzdDtcbihmdW5jdGlvbiAoTW9uaWtlclJlcXVlc3QpIHtcbiAgICBNb25pa2VyUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L21vbmlrZXInO1xuICAgIE1vbmlrZXJSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgTW9uaWtlclJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoTW9uaWtlclJlcXVlc3QubWV0aG9kKTtcbn0pKE1vbmlrZXJSZXF1ZXN0IHx8IChleHBvcnRzLk1vbmlrZXJSZXF1ZXN0ID0gTW9uaWtlclJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0NzkyOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkRpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLk5vdGVib29rQ2VsbEFycmF5Q2hhbmdlID0gZXhwb3J0cy5EaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlID0gZXhwb3J0cy5Ob3RlYm9va0RvY3VtZW50ID0gZXhwb3J0cy5Ob3RlYm9va0NlbGwgPSBleHBvcnRzLkV4ZWN1dGlvblN1bW1hcnkgPSBleHBvcnRzLk5vdGVib29rQ2VsbEtpbmQgPSB2b2lkIDA7XG5jb25zdCB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjg1Mik7XG5jb25zdCBJcyA9IF9fd2VicGFja19yZXF1aXJlX18oODYzMyk7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogQSBub3RlYm9vayBjZWxsIGtpbmQuXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgTm90ZWJvb2tDZWxsS2luZDtcbihmdW5jdGlvbiAoTm90ZWJvb2tDZWxsS2luZCkge1xuICAgIC8qKlxuICAgICAqIEEgbWFya3VwLWNlbGwgaXMgZm9ybWF0dGVkIHNvdXJjZSB0aGF0IGlzIHVzZWQgZm9yIGRpc3BsYXkuXG4gICAgICovXG4gICAgTm90ZWJvb2tDZWxsS2luZC5NYXJrdXAgPSAxO1xuICAgIC8qKlxuICAgICAqIEEgY29kZS1jZWxsIGlzIHNvdXJjZSBjb2RlLlxuICAgICAqL1xuICAgIE5vdGVib29rQ2VsbEtpbmQuQ29kZSA9IDI7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAxIHx8IHZhbHVlID09PSAyO1xuICAgIH1cbiAgICBOb3RlYm9va0NlbGxLaW5kLmlzID0gaXM7XG59KShOb3RlYm9va0NlbGxLaW5kIHx8IChleHBvcnRzLk5vdGVib29rQ2VsbEtpbmQgPSBOb3RlYm9va0NlbGxLaW5kID0ge30pKTtcbnZhciBFeGVjdXRpb25TdW1tYXJ5O1xuKGZ1bmN0aW9uIChFeGVjdXRpb25TdW1tYXJ5KSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKGV4ZWN1dGlvbk9yZGVyLCBzdWNjZXNzKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgZXhlY3V0aW9uT3JkZXIgfTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MgPT09IHRydWUgfHwgc3VjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJlc3VsdC5zdWNjZXNzID0gc3VjY2VzcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBFeGVjdXRpb25TdW1tYXJ5LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS51aW50ZWdlci5pcyhjYW5kaWRhdGUuZXhlY3V0aW9uT3JkZXIpICYmIChjYW5kaWRhdGUuc3VjY2VzcyA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLnN1Y2Nlc3MpKTtcbiAgICB9XG4gICAgRXhlY3V0aW9uU3VtbWFyeS5pcyA9IGlzO1xuICAgIGZ1bmN0aW9uIGVxdWFscyhvbmUsIG90aGVyKSB7XG4gICAgICAgIGlmIChvbmUgPT09IG90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob25lID09PSBudWxsIHx8IG9uZSA9PT0gdW5kZWZpbmVkIHx8IG90aGVyID09PSBudWxsIHx8IG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb25lLmV4ZWN1dGlvbk9yZGVyID09PSBvdGhlci5leGVjdXRpb25PcmRlciAmJiBvbmUuc3VjY2VzcyA9PT0gb3RoZXIuc3VjY2VzcztcbiAgICB9XG4gICAgRXhlY3V0aW9uU3VtbWFyeS5lcXVhbHMgPSBlcXVhbHM7XG59KShFeGVjdXRpb25TdW1tYXJ5IHx8IChleHBvcnRzLkV4ZWN1dGlvblN1bW1hcnkgPSBFeGVjdXRpb25TdW1tYXJ5ID0ge30pKTtcbnZhciBOb3RlYm9va0NlbGw7XG4oZnVuY3Rpb24gKE5vdGVib29rQ2VsbCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShraW5kLCBkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4geyBraW5kLCBkb2N1bWVudCB9O1xuICAgIH1cbiAgICBOb3RlYm9va0NlbGwuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIE5vdGVib29rQ2VsbEtpbmQuaXMoY2FuZGlkYXRlLmtpbmQpICYmIHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xLkRvY3VtZW50VXJpLmlzKGNhbmRpZGF0ZS5kb2N1bWVudCkgJiZcbiAgICAgICAgICAgIChjYW5kaWRhdGUubWV0YWRhdGEgPT09IHVuZGVmaW5lZCB8fCBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZS5tZXRhZGF0YSkpO1xuICAgIH1cbiAgICBOb3RlYm9va0NlbGwuaXMgPSBpcztcbiAgICBmdW5jdGlvbiBkaWZmKG9uZSwgdHdvKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBTZXQoKTtcbiAgICAgICAgaWYgKG9uZS5kb2N1bWVudCAhPT0gdHdvLmRvY3VtZW50KSB7XG4gICAgICAgICAgICByZXN1bHQuYWRkKCdkb2N1bWVudCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbmUua2luZCAhPT0gdHdvLmtpbmQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hZGQoJ2tpbmQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob25lLmV4ZWN1dGlvblN1bW1hcnkgIT09IHR3by5leGVjdXRpb25TdW1tYXJ5KSB7XG4gICAgICAgICAgICByZXN1bHQuYWRkKCdleGVjdXRpb25TdW1tYXJ5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChvbmUubWV0YWRhdGEgIT09IHVuZGVmaW5lZCB8fCB0d28ubWV0YWRhdGEgIT09IHVuZGVmaW5lZCkgJiYgIWVxdWFsc01ldGFkYXRhKG9uZS5tZXRhZGF0YSwgdHdvLm1ldGFkYXRhKSkge1xuICAgICAgICAgICAgcmVzdWx0LmFkZCgnbWV0YWRhdGEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKG9uZS5leGVjdXRpb25TdW1tYXJ5ICE9PSB1bmRlZmluZWQgfHwgdHdvLmV4ZWN1dGlvblN1bW1hcnkgIT09IHVuZGVmaW5lZCkgJiYgIUV4ZWN1dGlvblN1bW1hcnkuZXF1YWxzKG9uZS5leGVjdXRpb25TdW1tYXJ5LCB0d28uZXhlY3V0aW9uU3VtbWFyeSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hZGQoJ2V4ZWN1dGlvblN1bW1hcnknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBOb3RlYm9va0NlbGwuZGlmZiA9IGRpZmY7XG4gICAgZnVuY3Rpb24gZXF1YWxzTWV0YWRhdGEob25lLCBvdGhlcikge1xuICAgICAgICBpZiAob25lID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9uZSA9PT0gbnVsbCB8fCBvbmUgPT09IHVuZGVmaW5lZCB8fCBvdGhlciA9PT0gbnVsbCB8fCBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvbmUgIT09IHR5cGVvZiBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb25lICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9uZUFycmF5ID0gQXJyYXkuaXNBcnJheShvbmUpO1xuICAgICAgICBjb25zdCBvdGhlckFycmF5ID0gQXJyYXkuaXNBcnJheShvdGhlcik7XG4gICAgICAgIGlmIChvbmVBcnJheSAhPT0gb3RoZXJBcnJheSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbmVBcnJheSAmJiBvdGhlckFycmF5KSB7XG4gICAgICAgICAgICBpZiAob25lLmxlbmd0aCAhPT0gb3RoZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvbmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVxdWFsc01ldGFkYXRhKG9uZVtpXSwgb3RoZXJbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKElzLm9iamVjdExpdGVyYWwob25lKSAmJiBJcy5vYmplY3RMaXRlcmFsKG90aGVyKSkge1xuICAgICAgICAgICAgY29uc3Qgb25lS2V5cyA9IE9iamVjdC5rZXlzKG9uZSk7XG4gICAgICAgICAgICBjb25zdCBvdGhlcktleXMgPSBPYmplY3Qua2V5cyhvdGhlcik7XG4gICAgICAgICAgICBpZiAob25lS2V5cy5sZW5ndGggIT09IG90aGVyS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbmVLZXlzLnNvcnQoKTtcbiAgICAgICAgICAgIG90aGVyS2V5cy5zb3J0KCk7XG4gICAgICAgICAgICBpZiAoIWVxdWFsc01ldGFkYXRhKG9uZUtleXMsIG90aGVyS2V5cykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9uZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gb25lS2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIWVxdWFsc01ldGFkYXRhKG9uZVtwcm9wXSwgb3RoZXJbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufSkoTm90ZWJvb2tDZWxsIHx8IChleHBvcnRzLk5vdGVib29rQ2VsbCA9IE5vdGVib29rQ2VsbCA9IHt9KSk7XG52YXIgTm90ZWJvb2tEb2N1bWVudDtcbihmdW5jdGlvbiAoTm90ZWJvb2tEb2N1bWVudCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIG5vdGVib29rVHlwZSwgdmVyc2lvbiwgY2VsbHMpIHtcbiAgICAgICAgcmV0dXJuIHsgdXJpLCBub3RlYm9va1R5cGUsIHZlcnNpb24sIGNlbGxzIH07XG4gICAgfVxuICAgIE5vdGVib29rRG9jdW1lbnQuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS5pbnRlZ2VyLmlzKGNhbmRpZGF0ZS52ZXJzaW9uKSAmJiBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5jZWxscywgTm90ZWJvb2tDZWxsLmlzKTtcbiAgICB9XG4gICAgTm90ZWJvb2tEb2N1bWVudC5pcyA9IGlzO1xufSkoTm90ZWJvb2tEb2N1bWVudCB8fCAoZXhwb3J0cy5Ob3RlYm9va0RvY3VtZW50ID0gTm90ZWJvb2tEb2N1bWVudCA9IHt9KSk7XG52YXIgTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlO1xuKGZ1bmN0aW9uIChOb3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGUpIHtcbiAgICBOb3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGUubWV0aG9kID0gJ25vdGVib29rRG9jdW1lbnQvc3luYyc7XG4gICAgTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5SZWdpc3RyYXRpb25UeXBlKE5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZS5tZXRob2QpO1xufSkoTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlIHx8IChleHBvcnRzLk5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZSA9IE5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZSA9IHt9KSk7XG4vKipcbiAqIEEgbm90aWZpY2F0aW9uIHNlbnQgd2hlbiBhIG5vdGVib29rIG9wZW5zLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIERpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChEaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbikge1xuICAgIERpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICdub3RlYm9va0RvY3VtZW50L2RpZE9wZW4nO1xuICAgIERpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5tZXRob2QpO1xuICAgIERpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLnJlZ2lzdHJhdGlvbk1ldGhvZCA9IE5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZS5tZXRob2Q7XG59KShEaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5EaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IERpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0ge30pKTtcbnZhciBOb3RlYm9va0NlbGxBcnJheUNoYW5nZTtcbihmdW5jdGlvbiAoTm90ZWJvb2tDZWxsQXJyYXlDaGFuZ2UpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS51aW50ZWdlci5pcyhjYW5kaWRhdGUuc3RhcnQpICYmIHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xLnVpbnRlZ2VyLmlzKGNhbmRpZGF0ZS5kZWxldGVDb3VudCkgJiYgKGNhbmRpZGF0ZS5jZWxscyA9PT0gdW5kZWZpbmVkIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmNlbGxzLCBOb3RlYm9va0NlbGwuaXMpKTtcbiAgICB9XG4gICAgTm90ZWJvb2tDZWxsQXJyYXlDaGFuZ2UuaXMgPSBpcztcbiAgICBmdW5jdGlvbiBjcmVhdGUoc3RhcnQsIGRlbGV0ZUNvdW50LCBjZWxscykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7IHN0YXJ0LCBkZWxldGVDb3VudCB9O1xuICAgICAgICBpZiAoY2VsbHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmNlbGxzID0gY2VsbHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTm90ZWJvb2tDZWxsQXJyYXlDaGFuZ2UuY3JlYXRlID0gY3JlYXRlO1xufSkoTm90ZWJvb2tDZWxsQXJyYXlDaGFuZ2UgfHwgKGV4cG9ydHMuTm90ZWJvb2tDZWxsQXJyYXlDaGFuZ2UgPSBOb3RlYm9va0NlbGxBcnJheUNoYW5nZSA9IHt9KSk7XG52YXIgRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbikge1xuICAgIERpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kID0gJ25vdGVib29rRG9jdW1lbnQvZGlkQ2hhbmdlJztcbiAgICBEaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kKTtcbiAgICBEaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLnJlZ2lzdHJhdGlvbk1ldGhvZCA9IE5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZS5tZXRob2Q7XG59KShEaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBEaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogQSBub3RpZmljYXRpb24gc2VudCB3aGVuIGEgbm90ZWJvb2sgZG9jdW1lbnQgaXMgc2F2ZWQuXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uKSB7XG4gICAgRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kID0gJ25vdGVib29rRG9jdW1lbnQvZGlkU2F2ZSc7XG4gICAgRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCk7XG4gICAgRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ucmVnaXN0cmF0aW9uTWV0aG9kID0gTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlLm1ldGhvZDtcbn0pKERpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0gRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBBIG5vdGlmaWNhdGlvbiBzZW50IHdoZW4gYSBub3RlYm9vayBjbG9zZXMuXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgRGlkQ2xvc2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24pIHtcbiAgICBEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kID0gJ25vdGVib29rRG9jdW1lbnQvZGlkQ2xvc2UnO1xuICAgIERpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5tZXRob2QpO1xuICAgIERpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5yZWdpc3RyYXRpb25NZXRob2QgPSBOb3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGUubWV0aG9kO1xufSkoRGlkQ2xvc2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IERpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQxNjY6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3QgPSBleHBvcnRzLldvcmtEb25lUHJvZ3Jlc3MgPSB2b2lkIDA7XG5jb25zdCB2c2NvZGVfanNvbnJwY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NzI5KTtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xudmFyIFdvcmtEb25lUHJvZ3Jlc3M7XG4oZnVuY3Rpb24gKFdvcmtEb25lUHJvZ3Jlc3MpIHtcbiAgICBXb3JrRG9uZVByb2dyZXNzLnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5Qcm9ncmVzc1R5cGUoKTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IFdvcmtEb25lUHJvZ3Jlc3MudHlwZTtcbiAgICB9XG4gICAgV29ya0RvbmVQcm9ncmVzcy5pcyA9IGlzO1xufSkoV29ya0RvbmVQcm9ncmVzcyB8fCAoZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzID0gV29ya0RvbmVQcm9ncmVzcyA9IHt9KSk7XG4vKipcbiAqIFRoZSBgd2luZG93L3dvcmtEb25lUHJvZ3Jlc3MvY3JlYXRlYCByZXF1ZXN0IGlzIHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgdG8gaW5pdGlhdGUgcHJvZ3Jlc3NcbiAqIHJlcG9ydGluZyBmcm9tIHRoZSBzZXJ2ZXIuXG4gKi9cbnZhciBXb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdDtcbihmdW5jdGlvbiAoV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3QpIHtcbiAgICBXb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdC5tZXRob2QgPSAnd2luZG93L3dvcmtEb25lUHJvZ3Jlc3MvY3JlYXRlJztcbiAgICBXb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIFdvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFdvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0Lm1ldGhvZCk7XG59KShXb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdCB8fCAoZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdCA9IFdvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogVGhlIGB3aW5kb3cvd29ya0RvbmVQcm9ncmVzcy9jYW5jZWxgIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB0byBjYW5jZWwgYSBwcm9ncmVzc1xuICogaW5pdGlhdGVkIG9uIHRoZSBzZXJ2ZXIgc2lkZS5cbiAqL1xudmFyIFdvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKFdvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb24pIHtcbiAgICBXb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uLm1ldGhvZCA9ICd3aW5kb3cvd29ya0RvbmVQcm9ncmVzcy9jYW5jZWwnO1xuICAgIFdvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBXb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uID0gV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbiA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE1MzA6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5TZWxlY3Rpb25SYW5nZVJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHByb3ZpZGUgc2VsZWN0aW9uIHJhbmdlcyBpbiBhIGRvY3VtZW50LiBUaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgU2VsZWN0aW9uUmFuZ2VQYXJhbXN9LCB0aGVcbiAqIHJlc3BvbnNlIGlzIG9mIHR5cGUge0BsaW5rIFNlbGVjdGlvblJhbmdlIFNlbGVjdGlvblJhbmdlW119IG9yIGEgVGhlbmFibGVcbiAqIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIFNlbGVjdGlvblJhbmdlUmVxdWVzdDtcbihmdW5jdGlvbiAoU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0KSB7XG4gICAgU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvc2VsZWN0aW9uUmFuZ2UnO1xuICAgIFNlbGVjdGlvblJhbmdlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFNlbGVjdGlvblJhbmdlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShTZWxlY3Rpb25SYW5nZVJlcXVlc3QubWV0aG9kKTtcbn0pKFNlbGVjdGlvblJhbmdlUmVxdWVzdCB8fCAoZXhwb3J0cy5TZWxlY3Rpb25SYW5nZVJlcXVlc3QgPSBTZWxlY3Rpb25SYW5nZVJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyMDY3OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLlNlbWFudGljVG9rZW5zUmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLlNlbWFudGljVG9rZW5zUmFuZ2VSZXF1ZXN0ID0gZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdCA9IGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSZXF1ZXN0ID0gZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUgPSBleHBvcnRzLlRva2VuRm9ybWF0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vLy0tLS0tLS0gJ3RleHREb2N1bWVudC9zZW1hbnRpY1Rva2VucycgLS0tLS1cbnZhciBUb2tlbkZvcm1hdDtcbihmdW5jdGlvbiAoVG9rZW5Gb3JtYXQpIHtcbiAgICBUb2tlbkZvcm1hdC5SZWxhdGl2ZSA9ICdyZWxhdGl2ZSc7XG59KShUb2tlbkZvcm1hdCB8fCAoZXhwb3J0cy5Ub2tlbkZvcm1hdCA9IFRva2VuRm9ybWF0ID0ge30pKTtcbnZhciBTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGU7XG4oZnVuY3Rpb24gKFNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZSkge1xuICAgIFNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZS5tZXRob2QgPSAndGV4dERvY3VtZW50L3NlbWFudGljVG9rZW5zJztcbiAgICBTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUudHlwZSA9IG5ldyBtZXNzYWdlc18xLlJlZ2lzdHJhdGlvblR5cGUoU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlLm1ldGhvZCk7XG59KShTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUgfHwgKGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlID0gU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlID0ge30pKTtcbi8qKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgU2VtYW50aWNUb2tlbnNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChTZW1hbnRpY1Rva2Vuc1JlcXVlc3QpIHtcbiAgICBTZW1hbnRpY1Rva2Vuc1JlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9zZW1hbnRpY1Rva2Vucy9mdWxsJztcbiAgICBTZW1hbnRpY1Rva2Vuc1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBTZW1hbnRpY1Rva2Vuc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoU2VtYW50aWNUb2tlbnNSZXF1ZXN0Lm1ldGhvZCk7XG4gICAgU2VtYW50aWNUb2tlbnNSZXF1ZXN0LnJlZ2lzdHJhdGlvbk1ldGhvZCA9IFNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZS5tZXRob2Q7XG59KShTZW1hbnRpY1Rva2Vuc1JlcXVlc3QgfHwgKGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSZXF1ZXN0ID0gU2VtYW50aWNUb2tlbnNSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgU2VtYW50aWNUb2tlbnNEZWx0YVJlcXVlc3Q7XG4oZnVuY3Rpb24gKFNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0KSB7XG4gICAgU2VtYW50aWNUb2tlbnNEZWx0YVJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9zZW1hbnRpY1Rva2Vucy9mdWxsL2RlbHRhJztcbiAgICBTZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0Lm1ldGhvZCk7XG4gICAgU2VtYW50aWNUb2tlbnNEZWx0YVJlcXVlc3QucmVnaXN0cmF0aW9uTWV0aG9kID0gU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlLm1ldGhvZDtcbn0pKFNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0IHx8IChleHBvcnRzLlNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0ID0gU2VtYW50aWNUb2tlbnNEZWx0YVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBTZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdDtcbihmdW5jdGlvbiAoU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QpIHtcbiAgICBTZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3NlbWFudGljVG9rZW5zL3JhbmdlJztcbiAgICBTZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFNlbWFudGljVG9rZW5zUmFuZ2VSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFNlbWFudGljVG9rZW5zUmFuZ2VSZXF1ZXN0Lm1ldGhvZCk7XG4gICAgU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QucmVnaXN0cmF0aW9uTWV0aG9kID0gU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlLm1ldGhvZDtcbn0pKFNlbWFudGljVG9rZW5zUmFuZ2VSZXF1ZXN0IHx8IChleHBvcnRzLlNlbWFudGljVG9rZW5zUmFuZ2VSZXF1ZXN0ID0gU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0O1xuKGZ1bmN0aW9uIChTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0KSB7XG4gICAgU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdC5tZXRob2QgPSBgd29ya3NwYWNlL3NlbWFudGljVG9rZW5zL3JlZnJlc2hgO1xuICAgIFNlbWFudGljVG9rZW5zUmVmcmVzaFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlMChTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0Lm1ldGhvZCk7XG59KShTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0IHx8IChleHBvcnRzLlNlbWFudGljVG9rZW5zUmVmcmVzaFJlcXVlc3QgPSBTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDMzMzpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5TaG93RG9jdW1lbnRSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBzaG93IGEgZG9jdW1lbnQuIFRoaXMgcmVxdWVzdCBtaWdodCBvcGVuIGFuXG4gKiBleHRlcm5hbCBwcm9ncmFtIGRlcGVuZGluZyBvbiB0aGUgdmFsdWUgb2YgdGhlIFVSSSB0byBvcGVuLlxuICogRm9yIGV4YW1wbGUgYSByZXF1ZXN0IHRvIG9wZW4gYGh0dHBzOi8vY29kZS52aXN1YWxzdHVkaW8uY29tL2BcbiAqIHdpbGwgdmVyeSBsaWtlbHkgb3BlbiB0aGUgVVJJIGluIGEgV0VCIGJyb3dzZXIuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuKi9cbnZhciBTaG93RG9jdW1lbnRSZXF1ZXN0O1xuKGZ1bmN0aW9uIChTaG93RG9jdW1lbnRSZXF1ZXN0KSB7XG4gICAgU2hvd0RvY3VtZW50UmVxdWVzdC5tZXRob2QgPSAnd2luZG93L3Nob3dEb2N1bWVudCc7XG4gICAgU2hvd0RvY3VtZW50UmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIFNob3dEb2N1bWVudFJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoU2hvd0RvY3VtZW50UmVxdWVzdC5tZXRob2QpO1xufSkoU2hvd0RvY3VtZW50UmVxdWVzdCB8fCAoZXhwb3J0cy5TaG93RG9jdW1lbnRSZXF1ZXN0ID0gU2hvd0RvY3VtZW50UmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDkyNjQ6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuVHlwZURlZmluaXRpb25SZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vLyBAdHMtaWdub3JlOiB0byBhdm9pZCBpbmxpbmluZyBMb2NhdGlvTGluayBhcyBkeW5hbWljIGltcG9ydFxubGV0IF9fbm9EeW5hbWljSW1wb3J0O1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSB0aGUgdHlwZSBkZWZpbml0aW9uIGxvY2F0aW9ucyBvZiBhIHN5bWJvbCBhdCBhIGdpdmVuIHRleHRcbiAqIGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZiB0eXBlIHtAbGluayBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtc31cbiAqIHRoZSByZXNwb25zZSBpcyBvZiB0eXBlIHtAbGluayBEZWZpbml0aW9ufSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIFR5cGVEZWZpbml0aW9uUmVxdWVzdDtcbihmdW5jdGlvbiAoVHlwZURlZmluaXRpb25SZXF1ZXN0KSB7XG4gICAgVHlwZURlZmluaXRpb25SZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvdHlwZURlZmluaXRpb24nO1xuICAgIFR5cGVEZWZpbml0aW9uUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFR5cGVEZWZpbml0aW9uUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShUeXBlRGVmaW5pdGlvblJlcXVlc3QubWV0aG9kKTtcbn0pKFR5cGVEZWZpbml0aW9uUmVxdWVzdCB8fCAoZXhwb3J0cy5UeXBlRGVmaW5pdGlvblJlcXVlc3QgPSBUeXBlRGVmaW5pdGlvblJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3MDYyOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgVHlwZUZveCwgTWljcm9zb2Z0IGFuZCBvdGhlcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdCA9IGV4cG9ydHMuVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0ID0gZXhwb3J0cy5UeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc3VsdCBhIGBUeXBlSGllcmFyY2h5SXRlbWAgaW4gYSBkb2N1bWVudCBhdCBhIGdpdmVuIHBvc2l0aW9uLlxuICogQ2FuIGJlIHVzZWQgYXMgYW4gaW5wdXQgdG8gYSBzdWJ0eXBlcyBvciBzdXBlcnR5cGVzIHR5cGUgaGllcmFyY2h5LlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIFR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdDtcbihmdW5jdGlvbiAoVHlwZUhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0KSB7XG4gICAgVHlwZUhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvcHJlcGFyZVR5cGVIaWVyYXJjaHknO1xuICAgIFR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShUeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QubWV0aG9kKTtcbn0pKFR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCB8fCAoZXhwb3J0cy5UeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgPSBUeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSB0aGUgc3VwZXJ0eXBlcyBmb3IgYSBnaXZlbiBgVHlwZUhpZXJhcmNoeUl0ZW1gLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIFR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdDtcbihmdW5jdGlvbiAoVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0KSB7XG4gICAgVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0Lm1ldGhvZCA9ICd0eXBlSGllcmFyY2h5L3N1cGVydHlwZXMnO1xuICAgIFR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShUeXBlSGllcmFyY2h5U3VwZXJ0eXBlc1JlcXVlc3QubWV0aG9kKTtcbn0pKFR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdCB8fCAoZXhwb3J0cy5UeXBlSGllcmFyY2h5U3VwZXJ0eXBlc1JlcXVlc3QgPSBUeXBlSGllcmFyY2h5U3VwZXJ0eXBlc1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSB0aGUgc3VidHlwZXMgZm9yIGEgZ2l2ZW4gYFR5cGVIaWVyYXJjaHlJdGVtYC5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBUeXBlSGllcmFyY2h5U3VidHlwZXNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChUeXBlSGllcmFyY2h5U3VidHlwZXNSZXF1ZXN0KSB7XG4gICAgVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdC5tZXRob2QgPSAndHlwZUhpZXJhcmNoeS9zdWJ0eXBlcyc7XG4gICAgVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdC5tZXRob2QpO1xufSkoVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdCB8fCAoZXhwb3J0cy5UeXBlSGllcmFyY2h5U3VidHlwZXNSZXF1ZXN0ID0gVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDY4NjA6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV29ya3NwYWNlRm9sZGVyc1JlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogVGhlIGB3b3Jrc3BhY2Uvd29ya3NwYWNlRm9sZGVyc2AgaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBmZXRjaCB0aGUgb3BlbiB3b3Jrc3BhY2UgZm9sZGVycy5cbiAqL1xudmFyIFdvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChXb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdCkge1xuICAgIFdvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0Lm1ldGhvZCA9ICd3b3Jrc3BhY2Uvd29ya3NwYWNlRm9sZGVycyc7XG4gICAgV29ya3NwYWNlRm9sZGVyc1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBXb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZTAoV29ya3NwYWNlRm9sZGVyc1JlcXVlc3QubWV0aG9kKTtcbn0pKFdvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0IHx8IChleHBvcnRzLldvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0ID0gV29ya3NwYWNlRm9sZGVyc1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBUaGUgYHdvcmtzcGFjZS9kaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzYCBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB3aGVuIHRoZSB3b3Jrc3BhY2VcbiAqIGZvbGRlciBjb25maWd1cmF0aW9uIGNoYW5nZXMuXG4gKi9cbnZhciBEaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChEaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uKSB7XG4gICAgRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbi5tZXRob2QgPSAnd29ya3NwYWNlL2RpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnMnO1xuICAgIERpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5EaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uID0gRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbiA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDg2MzM6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMub2JqZWN0TGl0ZXJhbCA9IGV4cG9ydHMudHlwZWRBcnJheSA9IGV4cG9ydHMuc3RyaW5nQXJyYXkgPSBleHBvcnRzLmFycmF5ID0gZXhwb3J0cy5mdW5jID0gZXhwb3J0cy5lcnJvciA9IGV4cG9ydHMubnVtYmVyID0gZXhwb3J0cy5zdHJpbmcgPSBleHBvcnRzLmJvb2xlYW4gPSB2b2lkIDA7XG5mdW5jdGlvbiBib29sZWFuKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZTtcbn1cbmV4cG9ydHMuYm9vbGVhbiA9IGJvb2xlYW47XG5mdW5jdGlvbiBzdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZztcbn1cbmV4cG9ydHMuc3RyaW5nID0gc3RyaW5nO1xuZnVuY3Rpb24gbnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXI7XG59XG5leHBvcnRzLm51bWJlciA9IG51bWJlcjtcbmZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRXJyb3I7XG59XG5leHBvcnRzLmVycm9yID0gZXJyb3I7XG5mdW5jdGlvbiBmdW5jKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuZnVuYyA9IGZ1bmM7XG5mdW5jdGlvbiBhcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cbmV4cG9ydHMuYXJyYXkgPSBhcnJheTtcbmZ1bmN0aW9uIHN0cmluZ0FycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIGFycmF5KHZhbHVlKSAmJiB2YWx1ZS5ldmVyeShlbGVtID0+IHN0cmluZyhlbGVtKSk7XG59XG5leHBvcnRzLnN0cmluZ0FycmF5ID0gc3RyaW5nQXJyYXk7XG5mdW5jdGlvbiB0eXBlZEFycmF5KHZhbHVlLCBjaGVjaykge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5ldmVyeShjaGVjayk7XG59XG5leHBvcnRzLnR5cGVkQXJyYXkgPSB0eXBlZEFycmF5O1xuZnVuY3Rpb24gb2JqZWN0TGl0ZXJhbCh2YWx1ZSkge1xuICAgIC8vIFN0cmljdGx5IHNwZWFraW5nIGNsYXNzIGluc3RhbmNlcyBwYXNzIHRoaXMgY2hlY2sgYXMgd2VsbC4gU2luY2UgdGhlIExTUFxuICAgIC8vIGRvZXNuJ3QgdXNlIGNsYXNzZXMgd2UgaWdub3JlIHRoaXMgZm9yIG5vdy4gSWYgd2UgZG8gd2UgbmVlZCB0byBhZGQgc29tZXRoaW5nXG4gICAgLy8gbGlrZSB0aGlzOiBgT2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZih4KSkgPT09IG51bGxgXG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG59XG5leHBvcnRzLm9iamVjdExpdGVyYWwgPSBvYmplY3RMaXRlcmFsO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyNzMwOlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZm9yRWFjaCA9IF9fd2VicGFja19yZXF1aXJlX18oNzA1KTtcbnZhciBhdmFpbGFibGVUeXBlZEFycmF5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDgzNCk7XG52YXIgY2FsbEJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0OTgpO1xudmFyIGNhbGxCb3VuZCA9IF9fd2VicGFja19yZXF1aXJlX18oOTgxOCk7XG52YXIgZ09QRCA9IF9fd2VicGFja19yZXF1aXJlX18oOTMzNik7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcbnZhciBoYXNUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oMTkxMykoKTtcblxudmFyIGcgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfcmVxdWlyZV9fLmcgOiBnbG9iYWxUaGlzO1xudmFyIHR5cGVkQXJyYXlzID0gYXZhaWxhYmxlVHlwZWRBcnJheXMoKTtcblxudmFyICRzbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mOyAvLyByZXF1aXJlKCdnZXRwcm90b3R5cGVvZicpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQm91bmQoJ0FycmF5LnByb3RvdHlwZS5pbmRleE9mJywgdHJ1ZSkgfHwgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcblx0XHRcdHJldHVybiBpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gLTE7XG59O1xudmFyIGNhY2hlID0geyBfX3Byb3RvX186IG51bGwgfTtcbmlmIChoYXNUb1N0cmluZ1RhZyAmJiBnT1BEICYmIGdldFByb3RvdHlwZU9mKSB7XG5cdGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdFx0dmFyIGFyciA9IG5ldyBnW3R5cGVkQXJyYXldKCk7XG5cdFx0aWYgKFN5bWJvbC50b1N0cmluZ1RhZyBpbiBhcnIpIHtcblx0XHRcdHZhciBwcm90byA9IGdldFByb3RvdHlwZU9mKGFycik7XG5cdFx0XHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHRpZiAoIWRlc2NyaXB0b3IpIHtcblx0XHRcdFx0dmFyIHN1cGVyUHJvdG8gPSBnZXRQcm90b3R5cGVPZihwcm90byk7XG5cdFx0XHRcdGRlc2NyaXB0b3IgPSBnT1BEKHN1cGVyUHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHR9XG5cdFx0XHRjYWNoZVsnJCcgKyB0eXBlZEFycmF5XSA9IGNhbGxCaW5kKGRlc2NyaXB0b3IuZ2V0KTtcblx0XHR9XG5cdH0pO1xufSBlbHNlIHtcblx0Zm9yRWFjaCh0eXBlZEFycmF5cywgZnVuY3Rpb24gKHR5cGVkQXJyYXkpIHtcblx0XHR2YXIgYXJyID0gbmV3IGdbdHlwZWRBcnJheV0oKTtcblx0XHRjYWNoZVsnJCcgKyB0eXBlZEFycmF5XSA9IGNhbGxCaW5kKGFyci5zbGljZSk7XG5cdH0pO1xufVxuXG52YXIgdHJ5VHlwZWRBcnJheXMgPSBmdW5jdGlvbiB0cnlBbGxUeXBlZEFycmF5cyh2YWx1ZSkge1xuXHR2YXIgZm91bmQgPSBmYWxzZTtcblx0Zm9yRWFjaChjYWNoZSwgZnVuY3Rpb24gKGdldHRlciwgdHlwZWRBcnJheSkge1xuXHRcdGlmICghZm91bmQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICgnJCcgKyBnZXR0ZXIodmFsdWUpID09PSB0eXBlZEFycmF5KSB7XG5cdFx0XHRcdFx0Zm91bmQgPSAkc2xpY2UodHlwZWRBcnJheSwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGZvdW5kO1xufTtcblxudmFyIHRyeVNsaWNlcyA9IGZ1bmN0aW9uIHRyeUFsbFNsaWNlcyh2YWx1ZSkge1xuXHR2YXIgZm91bmQgPSBmYWxzZTtcblx0Zm9yRWFjaChjYWNoZSwgZnVuY3Rpb24gKGdldHRlciwgbmFtZSkge1xuXHRcdGlmICghZm91bmQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGdldHRlcih2YWx1ZSk7XG5cdFx0XHRcdGZvdW5kID0gJHNsaWNlKG5hbWUsIDEpO1xuXHRcdFx0fSBjYXRjaCAoZSkgeyAvKiovIH1cblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gZm91bmQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHR2YXIgdGFnID0gJHNsaWNlKCR0b1N0cmluZyh2YWx1ZSksIDgsIC0xKTtcblx0XHRpZiAoJGluZGV4T2YodHlwZWRBcnJheXMsIHRhZykgPiAtMSkge1xuXHRcdFx0cmV0dXJuIHRhZztcblx0XHR9XG5cdFx0aWYgKHRhZyAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0Ly8gbm9kZSA8IDAuNiBoaXRzIGhlcmUgb24gcmVhbCBUeXBlZCBBcnJheXNcblx0XHRyZXR1cm4gdHJ5U2xpY2VzKHZhbHVlKTtcblx0fVxuXHRpZiAoIWdPUEQpIHsgcmV0dXJuIG51bGw7IH0gLy8gdW5rbm93biBlbmdpbmVcblx0cmV0dXJuIHRyeVR5cGVkQXJyYXlzKHZhbHVlKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM5OTY6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gXCJkYXRhOmFwcGxpY2F0aW9uL3dhc207YmFzZTY0LEFHRnpiUUVBQUFBQmRoRmdCWDkvZjM5L0FHQUdmMzkvZjM5L0FYOWdCSDkvZjM4QmYyQUJmd0JnQTM5L2Z3QmdBbjkvQUdBRWYzOS9md0JnQTM5L2Z3Ri9ZQUFBWUFKL2Z3Ri9ZQUYvQVg5Z0FYOEJmbUFGZjM5L2YzOEJmMkFIZjM5L2YzOS9md0YvWUFaL2YzOS9mMzhBWUFKL2Z3RitZQVYvZm41K2ZnQUNad01XZDJGemFWOXpibUZ3YzJodmRGOXdjbVYyYVdWM01RaG1aRjkzY21sMFpRQUNGbmRoYzJsZmMyNWhjSE5vYjNSZmNISmxkbWxsZHpFSFptUmZjbVZoWkFBQ0ZuZGhjMmxmYzI1aGNITm9iM1JmY0hKbGRtbGxkekVKY0hKdlkxOWxlR2wwQUFNRDJnSFlBUU1FQlFZREJBSUNBd01EQkFjSUNRa0NCQWtGQ1FrRkJ3VUZCQWtLQlFJRUFnUUVBd01HQ1FjRkJBSUpCd0lLQVFBSkFnUUVCQVFHQndRRUJRVUZDUW9IQ1FNRkJBVUZDUVVGQkFNRUJ3VUVCQVFFQkFjSkJRVUZCd2NGQkFVRkJ3UUVCQVlGQkFVRkJRVUZCUVFGQlFRRkJRVUZCQVFIQ2drRkJRb0VDUW9KQndjQ0J3a0VDd0lLQXdrSENRY0VBZ1FGQndjRUJ3UU1EUVFHQndZRURBUUhDZ1FIQWdrRkJBd0pBQVFGQlFVRkJRVUZCUVFGQlFVRkRnWUhCQUlKQlFZSEJ3UUVCQVFKREFRSkNRUUVCd1VKQndjQ0R4QUhCd1FGQVhBQkJBUUZBd0VBRVFZSkFYOEJRWUNBd0FBTEJ4TUNCbTFsYlc5eWVRSUFCbDl6ZEdGeWRBQVFDUWtCQUVFQkN3TXdNak1LbnFJSTJBRS9BUUYvSTRDQWdJQUFRUkJySWdFa2dJQ0FnQUFnQVNBQUtRSU1Od01JSUFGQkNHb2dBQ2dDQUNBQUtBSUlFSVNBZ0lBQUlBRkJFR29rZ0lDQWdBQUxPZ0lCZndGK0FrQWdBa0VBSUFJYklnTkZEUUFnQUNrQ0FDSUVweUFCUVFJZ0Foc2dBMEVCUVFBZ0JFSWdpS2NvQWdnUmdJQ0FnQUFBQ3d0OUFRRi9Ba0FDUUNBQlFmLy8vd0J4SWdKQmdBRlBEUUJCQUNnQ3ZJSEFnQUFoQVF3QkN3SkFJQUpCL3c5TERRQkJBQ2dDd0lIQWdBQWhBUXdCQ3dKQUlBRkIvLy8vQUhFaUFVSC8vd05MRFFCQkFDZ0N4SUhBZ0FBaEFRd0JDMEVBS0FMSWdjQ0FBRUVjSUFGQmdJREVBRWtiSVFFTElBQWdBVFlCQUF1cEFnRUNmeU9BZ0lDQUFFRVFheUlFSklDQWdJQUFJQVJCREdvZ0FSQ0ZnSUNBQUFKQUFrQWdCQzhCRENJRlJRMEFJQUFnQlRzQkFBd0JDd0pBQWtBQ1FBSkFBa0FnQkMwQURpSUZRWDlxRGdRQUFRSURBQXNnQWlBQk9nQUFEQU1MSUFJZ0FVRS9jVUdBQVhJNkFBRWdBaUFCUVFaMlFjQUJjam9BQUF3Q0N3SkFJQUZCZ1BEL0FIRkJnTEFEUncwQUlBQkJIVFlCQUF3REN5QUNJQUZCUDNGQmdBRnlPZ0FDSUFJZ0FVRU1ka0hnQVhJNkFBQWdBaUFCUVFaMlFUOXhRWUFCY2pvQUFRd0JDeUFDSUFGQlAzRkJnQUZ5T2dBRElBSWdBVUVHZGtFL2NVR0FBWEk2QUFJZ0FpQUJRUXgyUVQ5eFFZQUJjam9BQVNBQ0lBRkJnSUR3QUhGQkVuWkI4QUZ5T2dBQUN5QUFJQVU2QUFJZ0FFRUFPd0VBQ3lBRVFSQnFKSUNBZ0lBQUN6OEJBWDhqZ0lDQWdBQkJFR3NpQVNTQWdJQ0FBQ0FCSUFBcEFndzNBd2dnQVVFSWFpQUFLQUlBSUFBb0FnZ1FpSUNBZ0FBZ0FVRVFhaVNBZ0lDQUFBcytBZ0YvQVg0Q1FDQUNRUUFnQWhzaUEwVU5BQ0FBS1FJQUlnU25JQUZCcXRXcTFYb2dBaHNnQTBFQVFRQWdCRUlnaUtjb0FnZ1JnSUNBZ0FBQUN3c2tBUUYvUVFBaEJBSkFJQU1nQVVzTkFDQUFJQU1nQWlBREVJcUFnSUFBSVFRTElBUUxqUU1CQlg4amdJQ0FnQUJCRUdzaUJDU0FnSUNBQUFKQUFrQWdBVUVBSUFFYklnVWdBMEVBSUFNYlJ3MEFRUUVoQmlBRlJRMEJJQUJCcXRXcTFYb2dBUnNpQnlBQ1FhclZxdFY2SUFNYklnaEdEUUVDUUNBRlFSQkxEUUFDUUNBRlFRUlBEUUFnQnkwQUFDQUlMUUFBUmlBSElBVkJmMm9pQTJvdEFBQWdDQ0FEYWkwQUFFWnhJQWNnQlVFQmRpSURhaTBBQUNBSUlBTnFMUUFBUm5FaEJnd0RDMEVBSVFNZ0JFRUFOZ0lBSUFRZ0JVRjhhaUlCTmdJRUlBUWdCVUVCZGtIOC8vLy9CM0VpQmpZQ0NDQUVJQUVnQm1zMkFneEJBQ0VCQWtBRFFDQURRUkJHRFFFZ0NDQUVJQU5xS0FJQUlnWnFLQUFBSUFjZ0Jtb29BQUJ6SUFGeUlRRWdBMEVFYWlFRERBQUxDeUFCUlNFR0RBSUxJQVZCZjJwQkFuWkJBV29oQmlBSElRTWdDQ0VCQWtBRFFDQUdRWDlxSWdaRkRRRWdBU2dBQUNFQ0lBTW9BQUFoQUNBRFFRUnFJUU1nQVVFRWFpRUJJQUFnQWtjTkFnd0FDd3NnQnlBRlFYeHFJZ05xS0FBQUlBZ2dBMm9vQUFCR0lRWU1BUXRCQUNFR0N5QUVRUkJxSklDQWdJQUFJQVlMcHdJQ0JYOEJmaU9BZ0lDQUFFRWdheUlCSklDQWdJQUFRUUFoQWdKQUFrQWdBRUVVYWlnQ0FDSUREUUJCQUNFRVFRQWhCUXdCQ3lBQVFSQnFLQUlBSVFVZ0FFRU1haWdDQUNFRUN5QUJJQU0yQWh3Z0FTQUZOZ0lZSUFFZ0JEWUNGQ0FCUVJScUVJeUFnSUFBQWtBQ1FDQUFRU2hxS0FJQUlnTU5BRUVBSVFRTUFRc2dBRUVrYWlnQ0FDRUVJQUJCSEdvb0FnQWhBZ3NnQVNBRE5nSWNJQUVnQkRZQ0dDQUJJQUkyQWhRZ0FVRVVhaENOZ0lDQUFDQUJRUUFwQTdDQXdJQUFJZ1kzQXdnZ0FVRUlhaUFBS0FJc0lBQkJNR29vQWdBUWpvQ0FnQUFDUUNBQVFUaHFLQUlBSWdKQkEzUkJBQ0FDR3lJRFJRMEFJQWFuSUFBb0FqUkJCQ0FDR3lBRFFRSkJBQ0FHUWlDSXB5Z0NDQkdBZ0lDQUFBQUxJQUZCSUdva2dJQ0FnQUFMUmdFQmZ5T0FnSUNBQUVFUWF5SUJKSUNBZ0lBQUlBRkJBQ2tEc0lEQWdBQTNBd2dnQVVFSWFpQUFLQUlBSUFBb0FnaEJCV3dRdVlDQWdBQWdBVUVRYWlTQWdJQ0FBQXRHQVFGL0k0Q0FnSUFBUVJCcklnRWtnSUNBZ0FBZ0FVRUFLUU93Z01DQUFEY0RDQ0FCUVFocUlBQW9BZ0FnQUNnQ0NFRU5iQkM1Z0lDQUFDQUJRUkJxSklDQWdJQUFDejBDQVg4QmZnSkFJQUpCQW5SQkFDQUNHeUlEUlEwQUlBQXBBZ0FpQktjZ0FVRUVJQUliSUFOQkFrRUFJQVJDSUlpbktBSUlFWUNBZ0lBQUFBc0x0QUlDQTM4QmZpT0FnSUNBQUVFUWF5SURKSUNBZ0lBQVFRQWhCQUpBQTBBQ1FDQUNJQVJIRFFCQkFDRUZEQUlMSUFBb0FnQWhCU0FESUFJZ0JHczJBZ2dnQXlBQklBUnFOZ0lFUW9DQWdJRHdBU0VHQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FGSUFOQkJHcEJBU0FEUVF4cUVJQ0FnSUFBUWYvL0EzRWlCVUZ0YWc0RUFRY0hBZ0FMQWtBZ0JVRkJhZzRDQmdVQUN5QUZRY3dBUmcwRkFrQWdCVUVJUmcwQUlBVkJIVVlOQXlBRlFUTkdEUVFnQlEwSElBTTFBZ3doQmd3SEMwS0FnSUNBc0FFaEJnd0dDMEtBZ0lDQUVDRUdEQVVMUW9DQWdJQWdJUVlNQkF0Q2dJQ0FnREFoQmd3REMwS0FnSUNBd0FBaEJnd0NDMEtBZ0lDQWdBRWhCZ3dCQzBLQWdJQ0E4QUFoQmdzZ0JDQUdwMm9oQkNBR1FpQ0lweUlGUlEwQUN3c2dBMEVRYWlTQWdJQ0FBQ0FGQzRJbUJRRi9BWDRJZndGK0NIOGpnSUNBZ0FCQmtBUnJJZ0FrZ0lDQWdBQWdBRUVCTmdJSUlBQkNBamNDd0FFZ0FFRUFOZ0xJQVNBQVFRQXBBN0NBd0lBQUlnRTNBc3dCQWtBQ1FDQUFRY0FCYWtHQkNCQ1JnSUNBQUNJQ1FmLy9BM0VOQUNBQVFiQURha0VRYWlBQVFjQUJha0VRYWlnQ0FEWUNBQ0FBUWJBRGFrRUlhaUFBUWNBQmFrRUlhaWtDQURjREFDQUFJQUFwQXNBQk53T3dBd0pBQWtBQ1FDQUFRYkFEYWtHQUlCQ1NnSUNBQUNJRFFmLy9BM0VOQUNBQUtBSzBBeUVFQTBBZ0FDQUFLQUs0QXlJRk5nSzBBeUFGSUFScklRSWdBQ2dDc0FNaUJpQUVhaUVIUVFBaENBSkFBMEFnQWlBSUlnTk5EUUVnQUNBQ0lBTnJOZ0xFQVNBQUlBY2dBMm8yQXNBQkFrQkJBQ0FBUWNBQmFrRUJJQUJCbUFGcUVJR0FnSUFBUWYvL0EzRWlDRVVOQUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBaEJZMm9PQXdZQkJ3QUxBa0FnQ0VHM2Yyb09CQU1CQVFRQUN5QUlRUWhHRFFRZ0NFRVBSZzBCSUFoQktrWU5CeUFJUVRCR0RRY2dDRUUxUmcwSUMwRVBJUU1NREF0QkRpRUREQXNMUVJBaEF3d0tDMEVISVFNTUNRdEJFU0VEREFnTFFRTWhBd3dIQzBFVElRTU1CZ3RCQ1NFRERBVUxRUlFoQXd3RUN5QUFLQUtZQVNJSklBTnFJUWdnQ1EwQUN3c2dBeUFFYWlFRUFrQWdBaUFEUmcwQUlBQWdBQ2tDdkFNaUNqY0RnQUVDUUFKQUlBQkJnQUZxSUFZZ0JTQUVFSk9BZ0lBQVFRRnhSUTBBSUFRaEF5QUdJUUlNQVFzZ0FDQUtOd1B3QXlBQVFjQUJhaUFBUWZBRGFpQUVFSlNBZ0lBQUFrQWdBQzhCeUFGRkRRQWdCU0VESUFZaEFnd0JDeUFBS0FMQUFTSUNJQVlnQUNnQ3hBRWlBeERhZ1lDQUFCb2dBQ0FLTndPWUFTQUFRWmdCYWlBR0lBVVFoSUNBZ0FBZ0F5RUVDeUFBSUFNMkFyZ0RJQUFnQWpZQ3NBTWdBQ0FFTmdLMEF5QUFRYkFEYWlBRVFRRnFFSkdBZ0lBQUlnSkIvLzhEY1VVTkF3d0VDeUFBUWJBRGFpQUVRUUZxRUpLQWdJQUFJZ05CLy84RGNVVU5BQXNMUVFJZ0F5QURRZi8vQTNGQkZrWWJJUUlnQUVHd0Eyb1FnNENBZ0FBTUFnc2dBQ2dDc0FNaUJTQUFLQUswQXlJRWFrRUFPZ0FBSUFBZ0JFRUJhaUlETmdLMEF5QUFLQUs0QXlFSUlBQWdBQ2tDdkFNaUNqY0Q4QU1DUUFKQUlBQkI4QU5xSUFVZ0NDQURFSk9BZ0lBQVFRRnhSUTBBSUFCQkFEWUN1QU1nQUVJQ053T3dBd3dCQ3lBQVFjQUJhaUFBUWZBRGFpQURFSlNBZ0lBQUlBQXZBY2dCSWdJTkFTQUFLQUxBQVNBRklBQW9Bc1FCSWdNUTJvR0FnQUFoQWlBQUlBbzNBNWdCSUFCQm1BRnFJQVVnQ0JDRWdJQ0FBQ0FBUWdBM0FyUURJQU5CZjJvaEJDQUNJUVVMSUFCQnNBTnFFSU9BZ0lBQVFXQWhBd0pBQTBBZ0EwRUlhaUlDUlEwQklBTkJwSURBZ0FCcUlRZ2dBMEdnZ01DQUFHb2hDU0FDSVFNZ0JTQUVJQWtvQWdBZ0NDZ0NBQkNKZ0lDQUFFRUJjVVVOQUFzZ0FhY2dCU0FFUVFGcVFRRkJBQ0FCUWlDSXB5Z0NDQkdBZ0lDQUFBQkJGeUVDREFJTEFrQWdCU0FFUWVXWndJQUFRUUlRaVlDQWdBQkJBWEZGRFFBZ0FDQUJOd0xNQVNBQVFxclZxdFVLTndMQUFTQUFRUUEyQXNnQkFrQUNRQUpBQWtBZ0FFSEFBV29nQkVFQmRrRUFJQVFiSWdoQkFXb1FsWUNBZ0FBaUFrSC8vd054RFFBZ0JVR3ExYXJWZWlBRUd5RUNJQUJCc0FOcVFSQnFJQUJCd0FGcVFSQnFLQUlBTmdJQUlBQkJzQU5xUVFocUlBQkJ3QUZxUVFocUtRSUFOd01BSUFBZ0FDa0N3QUVpQ2pjRHNBTWdDRUVCZENFSklBcW5JUVlnQUNnQ3RBTWhBd0pBQTBBZ0NFVU5BU0FDTHdFQUlnZEIvd0JMRFFFZ0JpQURhaUFIT2dBQUlBbEJmbW9oQ1NBSVFYOXFJUWdnQWtFQ2FpRUNJQU5CQVdvaEF3d0FDd3NnQUNBRE5nSzBBeUFKUVFBZ0NCc2hDeUFDUVFJZ0NCc2hERUVBSVFJZ0F5RUlBMEFDUUFKQUFrQWdBaUFMUmcwQUlBSkJBbW9oQ1FKQUFrQUNRQ0FNSUFKcUx3QUFJZ2RCZ1BnRGNTSUdRWUN3QTBZTkFDQUdRWUM0QTBjTkJFRWFJUUlNQVFzQ1FDQUpJQXRKRFFCQkdDRUNEQUVMSUF3Z0NXb3ZBQUFpQ1VHQStBTnhRWUM0QTBZTkFVRVpJUUlMSUFCQnNBTnFFSWVBZ0lBQURBVUxJQUFnQjBIL0IzRkJDblFnQ1VIL0IzRnlRWUNBQkdvaUNUc0JnQUVnQUNBSlFSQjJPZ0NDQVNBQ1FRUnFJUWtnQUVHQUFXb2hBZ3dDQ3dKQUlBQkJzQU5xSUFOQkFXb1FsWUNBZ0FBaUFrSC8vd054RFFBZ0FDZ0NzQU1nQUNnQ3RBTWlBMnBCQURvQUFDQUFJQU5CQVdvMkFyUURJQUJCd0FGcUlBQkJzQU5xRUphQWdJQUFJQUF2QWNnQklnSU5BQ0FBUVFBN0FmZ0NJQUFnQUNnQ3dBRTJBdkFDSUFBZ0FDZ0N4QUZCZjJvMkF2UUNJQUJCOEFKcUlRTU1CUXNnQUVHd0Eyb1FoNENBZ0FBTUF3c2dBRUVBT2dEQ0FTQUFJQWM3QWNBQklBQkJ3QUZxSVFJTElBQkI4QU5xSUFJdkFRQWdBa0VDYWkwQUFFRVFkSElpQnhDRmdJQ0FBQUpBSUFCQnNBTnFJQU1nQUMwQThnTWlCbW9pQXhDWGdJQ0FBQ0lDUWYvL0EzRkZEUUFnQUVHd0Eyb1FoNENBZ0FBTUFnc2dBQ2dDc0FNaEFpQUFJQU0yQXJRRElBQkJtQUZxSUFjZ0FpQUlhaUFESUFockVJYUFnSUFBSUFnZ0Jtb2hDQ0FKSVFJTUFBc0xRWmlBd0lBQUlRTWdBa0ZvYWtILy93TnhRUUpMRFFFTElBR25JZ0lnQlNBRVFRRnFJZ2hCQVVFQUlBRkNJSWluSWdrb0FnZ1JnSUNBZ0FBQUFrQWdBeThCQ0EwQUlBTW9BZ1FoQkNBREtBSUFJUVVNQXdzZ0FpQUZJQWhCQVVFQUlBa29BZ2dSZ0lDQWdBQUFJQU12QVFnaEFpQURLQUlFSVFRZ0F5Z0NBQ0VGREFFTElBR25JQVVnQkVFQmFrRUJRUUFnQVVJZ2lLY29BZ2dSZ0lDQWdBQUFDeUFDUWYvL0EzRU5BZ3NnQUVIZ0FHcEJBRFlDQUNBQVFnQTNBMWdDUUNBQVFkZ0FhaUFFUVFOMkVKaUFnSUFBSWdKQi8vOERjUTBBSUFVZ0JFSG9tY0NBQUVFREVJbUFnSUFBSVFNZ0FFSEVBMnBDQURjQ0FDQUFRZ0EzQXJ3RElBQWdCRFlDdEFNZ0FDQUZOZ0t3QXlBQVFRTkJBQ0FEUVFGeEd6WUN1QU1nQUNnQ1hDRUNBMEFnQUVIb0FHb2dBRUd3QTJvUW1ZQ0FnQUFnQUNBQUxRQndRZjhBY1NJSk9nQjBJQUFvQW1naEJ5QUFRZGdBYWlBQ1FRRnFFSmlBZ0lBQUlnSkIvLzhEY1EwQklBQW9BbGdpQ0NBQUtBSmdRUUowYWlJR0lBQW9BbHdpQTJvZ0FDMEFkRUgvQUhFNkFBQWdDQ0FEUVFKMGFpQUhOZ0lBSUFBZ0EwRUJhaUlDTmdKY0lBbEJCa2NOQUFzZ0FFSE1BV29nQkRZQ0FDQUFRZHdCYWlBQ05nSUFJQUJCMUFGcUlBSTJBZ0FnQUVIc0FXcEJBQ2dDa0lIQWdBQTJBZ0FnQUVINEFXcEJBRFlDQUNBQVFZUUNha0VBS0FLRWdjQ0FBQ0lDTmdJQUlBQkJrQUpxSUFJMkFnQWdBQ0FGTmdMSUFTQUFJQWcyQXRnQklBQWdCallDMEFFZ0FDQUJOd1BBQVNBQVFnQTNBL0FCSUFCQkFDa0NpSUhBZ0FBM0F1UUJJQUJCQUNrQy9JREFnQUFpQ2pjQy9BRWdBQ0FLTndPSUFpQUFRUUEyQXVBQklBQkJpQUpxSVFZZ0FFSDhBV29oQ1NBQVFlUUJhaUVIQWtBZ0FFSHdBV29pQ0VHd2dNQ0FBQ0FEUVFOcVFRRjJFSnFBZ0lBQUlnSkIvLzhEY1EwQUlBaEJ1SURBZ0FBUW00Q0FnQUFnQUVId0Ftb2dBRUhBQVdvUW5JQ0FnQUFnQUM4QmdBTWlBZzBBSUFCQjhBTnFRUWhxSUFCQjhBSnFRUWhxS1FJQU53TUFJQUFnQUNrQzhBSTNBL0FESUFCQmdBRnFJQUJCOEFOcUlBQkJ3QUZxRUoyQWdJQUFJQUF2QVlnQklnSU5BQ0FBS0FLRUFTRURJQUFvQW9BQklRc0NRQ0FBS0FMUUFTQUFLQUxnQVdvdEFBQkIvd0J4UVFaR0RRQWdBRUhBQVdwQkJoQ2VnSUNBQUNJQ1FmLy9BM0VOQVFzZ0NCQ2ZnSUNBQUNJQ0lBTTJBZ1FnQWlBTE5nSUFJQUJCMkFCcVFRaHFJZ0lvQWdBaEF5QUNRUUEyQWdBZ0FDZ0NYQ0VNSUFBb0FsZ2hDeUFBUWdBM0ExZ2dBRUdZQVdvZ0NCQ2dnSUNBQUNBSVFRaHFRUUEyQWdBZ0NFSUFOd01BSUFBZ0FUY0RlQUpBQWtBZ0FFSDRBR29nQUNnQy9BRWdBRUdFQW1vb0FnQWdBRUdBQW1vb0FnQVFvWUNBZ0FCQkFYRkZEUUFnQUNnQ2dBSWhEU0FBS0FMOEFTRU9JQWxCQ0dwQkFDZ0NoSUhBZ0FBMkFnQWdDVUVBS1FMOGdNQ0FBRGNDQUF3QkN5QUFJQUUzQTRBQklBQkI4QUpxSUFCQmdBRnFJQUFvQW9BQ0VLS0FnSUFBSUFBdkFmZ0NJZ0lOQVNBQUtBTHdBaUlPSUFBb0F2d0JJQUFvQXZRQ0lnMUJBblFRMm9HQWdBQWFJQUFnQVRjRDhBTWdBRUh3QTJvZ0FDZ0MvQUVnQUNnQ2hBSVFqb0NBZ0FBZ0FFSUFOd09BQWdzZ0FDQUJOd040QWtBQ1FDQUFRZmdBYWlBQUtBTGtBU0FBUWV3QmFpZ0NBQ0FBUWVnQmFpZ0NBQkNqZ0lDQUFFRUJjVVVOQUNBQUtBTG9BU0VQSUFBb0F1UUJJUkFnQjBFSWFrRUFLQUtRZ2NDQUFEWUNBQ0FIUVFBcEFvaUJ3SUFBTndJQURBRUxJQUFnQVRjRGdBRWdBRUh3QW1vZ0FFR0FBV29nQUNnQzZBRVFwSUNBZ0FBZ0FDOEIrQUlpQWcwQklBQW9BdkFDSWhBZ0FDZ0M1QUVnQUNnQzlBSWlEMEVEZEJEYWdZQ0FBQm9nQUNBQk53UHdBeUFBUWZBRGFpQUFLQUxrQVNBQUtBTHNBUkNsZ0lDQUFDQUFRZ0EzQStnQkN5QUFRUXhxUVNCcUlnSWdBRUdnQVdvcEFnQTNBZ0FnQUVFMGFpSVJJQUJCbUFGcVFSQnFLQUlBTmdJQUlBQWdBQ2tDbUFFM0FpUWdBRUVBT2dDOEFTQUdFS2FBZ0lBQUlBa1Fwb0NBZ0FBZ0NCQ05nSUNBQUNBSEVLZUFnSUFBSUFCQjJBQnFFSXlBZ0lBQUlBQkJER3BCTkdvaUVpQVFOZ0lBSUFCQkFEb0FTQ0FBSUE4MkFrUWdBQ0FOTmdJOElBQWdEallDT0NBQUlBTTJBaUFnQUNBTU5nSWNJQUFnQ3pZQ0dDQUFJQXNnQTBFQ2RHb2lDRFlDRkNBQUlBUTJBaEFnQUNBRk5nSU1JQUFnQVRjQ2pBRWdBRUVBTmdLSUFTQUFRcXJWcXRVS053S0FBU0FDS0FJQUlRa2dFU2dDQUNFSElBQXBBaVFoQ2lBQUtBSXdJUVlnQUVINkFHb2dBRUhMQUdvaUFpMEFBRG9BQUNBQUlBQXZBRWs3QVhnZ0FFSEFBV3BCTkdvZ0J6WUNBQ0FBUWZBQmFpQUdOZ0lBSUFCQndBRnFRU3hxSUFrMkFnQWdBRUhrQVdvZ0NqY0NBQ0FBUWNBQmFrRWdhaUFETmdJQUlBQkIzQUZxSUF3MkFnQWdBRUhZQVdvZ0N6WUNBQ0FBUWRRQmFpQUlOZ0lBSUFCQndBRnFRUkJxSUFRMkFnQWdBQ0FGTmdMTUFTQUFJQUUzQThBQklBQkJBVG9BdkFFZ0FFRUFOZ0swQVNBQVFnQTNBcXdCSUFCQ2dJQ0FnTUFBTndLa0FTQUFRZ0EzQXB3QklBQkJBVG9BdUFFZ0FDQUFRWmdCYWpZQ3lBRWdBQ0FBUVlBQmFqWUNtQUVnQUVIQUFXcEJ5QUJxUVFBNkFBQWdBRUdFQW1wQkFEWUNBQ0FBUVlBQ2FpQVNLQUlBTmdJQUlBQkIrQUZxSUFBcEFqZzNBd0FnQUVHTEFtb2dBaTBBQURvQUFDQUFRWWtDYWlBQUx3QkpPd0FBSUFCQmpBSnFRUUJCNEFBUTJZR0FnQUFhSUFCQjJBQnFJQUJCd0FGcVFRQWdDMEdxMWFyVmVpQURHeWdDQUJDb2dJQ0FBQUpBQWtBZ0FDOEJXQ0lDRFFBQ1FDQUlRYXJWcXRWNklBTWJMUUFBUWY4QWNVSElBRWNOQUNBQVFjQUJha0VBRUttQWdJQUFJZ0pCLy84RGNRMEJDd0pBQWtCQkFRMEFJQUJCd0FGcUlBbEJxdFdxMVhvZ0J4c29BZ0JCQWhDcWdJQ0FBQ0lDUWYvL0EzRU5BZ3dCQ3lBQVFhUURhaUFBUVF4cVFTeHFJZ0pCQ0dvb0FnQTJBZ0FnQUVHdkEyb2dBRUg2QUdvdEFBQTZBQUFnQUNBSE5nS1lBeUFBSUFZMkFwUURJQUFnQ1RZQ2tBTWdBQ0FLTndLSUF5QUFJQU0yQW9RRElBQWdERFlDZ0FNZ0FDQUxOZ0w4QWlBQUlBZzJBdmdDSUFBZ0JEWUM5QUlnQUNBRk5nTHdBaUFBUVFBNkFLd0RJQUJCQURZQ3FBTWdBQ0FBTHdGNE93Q3RBeUFBSUFJcEFnQTNBcHdESUFBZ0FFSHdBbW9RcTRDQWdBQWdBQ2dDQkNFSUlBQW9BZ0FoQ1NBQVFiQURhaUFBUWN3QmFrSEFBQkRhZ1lDQUFCb2dDRVVOQUVFQklRY2dDQ0VESUFraEFnTkFBa0FDUUNBRFJRMEFJQUJCOEFOcUlBQkJzQU5xSUFJb0FnQVFySUNBZ0FBZ0FDMEFqQVJGRFFFZ0FDMEFpQVJCQVhFTkFVRUNJUWNMSUFCQndBRnFJQWNnQ1NnQ0FFRUNFSzJBZ0lBQUlnSkIvLzhEY1EwRElBbEJCR29oQXdOQUlBaEJmMm9pQ0VVTkF5QUFRY0FCYWlBREtBSUFJZ2tRcm9DQWdBQWlBa0gvL3dOeERRUWdBMEVFYWlFRElBQkJ3QUZxSUFjZ0NVRUNFSzJBZ0lBQUlnSkIvLzhEY1VVTkFBd0VDd3NnQTBGL2FpRURJQUpCQkdvaEFnd0FDd3NDUUNBQVFhQUJhaTBBQUVVTkFDQUFJQUFvQXBnQk5nSm9JQUJCNkFCcUlBVWdBQ2dDbkFFaUEyb2dCQ0FEYXhDdmdJQ0FBQ0lDUWYvL0EzRU5BUXNnQUVITUFHb2dBRUdBQVdvUWxvQ0FnQUFnQUVHQUFXb1FoNENBZ0FBZ0FDOEJWQ0lDRFFFZ0FFRUlhaUFBS0FKTUlnTWdBQ2dDVUNJSUVJK0FnSUFBSVFKQnNJREFnQUFnQXlBSUVJaUFnSUFBSUFCQkRHb1FpNENBZ0FCQkFDRURJQUpCLy84RGNRMEZEQVlMSUFCQmdBRnFFSWVBZ0lBQUN5QUFRUXhxRUl1QWdJQUFEQU1MSUFZUXBvQ0FnQUFnQ1JDbWdJQ0FBQ0FJRUkyQWdJQUFJQWNRcDRDQWdBQUxJQUJCMkFCcUVJeUFnSUFBREFFTElBQkJzQU5xRUlPQWdJQUFDeUFDd1VFRGRDSURRYVNYd0lBQWFpRUNJQU5Cb0pmQWdBQnFJUU1DUUVFQUxRQ2Nvc0NBQUEwQVFRQkJBVG9BbktMQWdBQUxJQUlvQWdBaEFpQURLQUlBSVFNZ0FFRUNOZ0x3QWdKQUlBQkI4QUpxUVl5ZHdJQUFRUWNRajRDQWdBQkIvLzhEY1EwQUlBQkJBallDd0FFZ0FFSEFBV29nQXlBQ0VJK0FnSUFBUWYvL0EzRU5BQ0FBUVFJMkFyQURJQUJCc0FOcVFaYWR3SUFBUVFFUWo0Q0FnQUFhQzBFQVFRQTZBSnlpd0lBQVFRRWhBd3NnQXhDQ2dJQ0FBQUFMcVFFQkJYOGpnSUNBZ0FCQkVHc2lBaVNBZ0lDQUFFRUFJUU1DUUNBQUtBSUlJZ1FnQVU4TkFBSkFJQUJCREdvaUJTQUFLQUlBSWdZZ0JDQUJFSk9BZ0lBQVFRRnhEUUFnQWtFRWFpQUZJQUVRbElDQWdBQWdBaThCRENJRERRRWdBaWdDQ0NFQklBSW9BZ1FnQUNnQ0FDQUFLQUlFRU5xQmdJQUFJUU1nQlNBR0lBUVFoSUNBZ0FBZ0FDQUROZ0lBQ3lBQUlBRTJBZ2hCQUNFREN5QUNRUkJxSklDQWdJQUFJQU1MTFFFQ2YwRUFJUUlDUUNBQUtBSUlJZ01nQVU4TkFDQUFJQU1nQVJDMGdJQ0FBQkNSZ0lDQUFDRUNDeUFDQzNzQ0FuOEJmaU9BZ0lDQUFFRVFheUlFSklDQWdJQUFBa0FDUUNBRERRQWdCQ0FBS1FJQU53TUFJQVFnQVNBQ0VJU0FnSUFBUVFFaEJRd0JDMEVBSVFVZ0FrVU5BRUVBRFFBZ0FDa0NBQ0lHcHlBQklBSkJBU0FEUVFBZ0JrSWdpS2NvQWdRUmdZQ0FnQUFBSVFVTElBUkJFR29rZ0lDQWdBQWdCUXZJQVFJQ2Z3RitJNENBZ0lBQVFTQnJJZ01rZ0lDQWdBQkJFaUVFQWtBQ1FBSkFRUUFOQUFKQUlBSU5BRUwrLy8vL0R5RUZEQUlMUWdCQ2dJQ0FnS0FDSUFFcEFnQWlCYWNnQWtFQlFRQWdCVUlnaUtjb0FnQVJnb0NBZ0FBQUlnRWJJZ1ZDSUlpbklnUU5BQ0FGSUFHdGhDRUZEQUVMSUFNZ0JEc0JEQ0FEUVFScUlRSU1BUXNnQXlBQ05nSVVJQU1nQlQ0Q0VDQURRUUE3QVJnZ0EwRVFhaUVDQ3lBQUlBSXBBZ0EzQWdBZ0FFRUlhaUFDUVFocUtBSUFOZ0lBSUFOQklHb2tnSUNBZ0FBTHFRRUJCWDhqZ0lDQWdBQkJFR3NpQWlTQWdJQ0FBRUVBSVFNQ1FDQUFLQUlJSWdRZ0FVOE5BQUpBSUFCQkRHb2lCU0FBS0FJQUlnWWdCQ0FCRUxXQWdJQUFRUUZ4RFFBZ0FrRUVhaUFGSUFFUXRvQ0FnQUFnQWk4QkRDSUREUUVnQWlnQ0NDRUJJQUlvQWdRZ0FDZ0NBQ0FBS0FJRUVOcUJnSUFBSVFNZ0JTQUdJQVFRaUlDQWdBQWdBQ0FETmdJQUN5QUFJQUUyQWdoQkFDRURDeUFDUVJCcUpJQ0FnSUFBSUFNTC93RURBWDhCZmdKL0k0Q0FnSUFBUVNCcklnSWtnSUNBZ0FBZ0FpQUJLUUlNSWdNM0F3QUNRQUpBSUFJZ0FTZ0NBQ0FCS0FJSUlBRW9BZ1FRdFlDQWdBQkJBWEZGRFFBZ0FTQUROd0lNSUFGQkFEWUNDQ0FBUVFBN0FRZ2dBU2tDQUNFRElBRkNxdFdxMVFvM0FnQWdBQ0FETndJQURBRUxJQUpCREdvZ0FpQUJLQUlFRUxhQWdJQUFBa0FnQWk4QkZDSUVSUTBBSUFBZ0JEc0JDQXdCQ3lBQ0tBSU1JQUVvQWdBZ0FpZ0NFQ0lFRU5xQmdJQUFJUVVnQWlBQktRSU1Od01ZSUFKQkdHb2dBU2dDQUNBQktBSUlFSWlBZ0lBQUlBRkNBRGNDQkNBQUlBUTJBZ1FnQUNBRk5nSUFJQUJCQURzQkNBc2dBa0VnYWlTQWdJQ0FBQXN0QVFKL1FRQWhBZ0pBSUFBb0FnZ2lBeUFCVHcwQUlBQWdBeUFCRUxTQWdJQUFFSldBZ0lBQUlRSUxJQUlMcVFJREEzOEJmZ04vSTRDQWdJQUFRU0JySWdJa2dJQ0FnQUJCQUNFREFrQWdBQ2dDQ0NJRUlBRlBEUUFEUUNBRUlBUkJBWFpxUVFocUlnUWdBVWtOQUFzZ0FrRUFLUU93Z01DQUFDSUZOd01BSUFKQkRHb2dBaUFFUVFWc0VMZUFnSUFBSUFJdkFSUWlBdzBBSUFJb0Fnd2hBUUpBQWtBZ0FDZ0NCQ0lHRFFBZ0FpQUZOd01ZSUFKQkdHb2dBQ2dDQUNBQUtBSUlRUVZzRUxtQWdJQUFEQUVMSUFFZ0JFRUNkR29nQUNnQ0FDSUhJQUFvQWdnaUNFRUNkR3BCcXRXcTFYb2dDQnNnQmhEYWdZQ0FBQm9nQVNBSFFhclZxdFY2SUFnYklBWkJBblFRMm9HQWdBQWFJQUlnQlRjREdDQUNRUmhxSUFBb0FnQWdBQ2dDQ0VFRmJCQzVnSUNBQUNBQUlBWTJBZ1FMSUFBZ0JEWUNDQ0FBSUFFMkFnQUxJQUpCSUdva2dJQ0FnQUFnQXd2WEl3RUxmeU9BZ0lDQUFFRVFheUlDSklDQWdJQUFJQUZCREdvaEF3SkFBa0FnQVVFWWFpMEFBRVVOQUNBQUlBTXBBZ0EzQWdBZ0EwSUFOd0lBSUFCQkNHb2dBMEVJYWlJQktBSUFOZ0lBSUFGQ0FEY0NBQXdCQzBFQUlRUWdBa0VBT2dBSFFRWWhCU0FDUVFZNkFBd2dBa0VHT2dBSUlBRW9BZ2dpQmlFSFFRQWhDQUpBQWtBRFFDQUJLQUlBSWdrZ0Jtb3RBQUFpQ3NBaEN5QUJLQUlFSVF3Q1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQUNMUUFIUVQ5eERqRUFDd3dPRHhnUUVSSVRGQlVYRmcwYkdSb2NIUjREQkFVbktDb3BLeTR2TURFeUFnb0dCd2dKSHlBaElpTWtKU1lCQUFzQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQWdDa0YzYWc0NEh4OEJBUjhCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVmQndNQkFSRWVCQWtLRWhNT0hCc2RBUUVCQVFFQkFRRUJBUkFORkFZVkR3VUFDd0pBSUFwQnBYOXFEZ1FMRnd3V0FBc0NRQ0FLUVlWL2FnNEVHQWdaR2dBTElBcEZEUUVMQWtBZ0MwSGZBRVlOQUNBTFFWOXhRYjkvYWtIL0FYRkJHazhOSHdzZ0FrRUJPZ0FIUVFJaEJReFVDeUFDSUFWQi93QnhPZ0FJSUFZZ0RFWU5WaUFBSUFZMkFnQWdBRUVBT2dBSUlBRWdCa0VCYWlJS05nSUlJQUFnQ2pZQ0JDQUNRUUE2QUFnTVZ3dEJBeUVGSUFKQkF6b0FCd3hTQ3lBQ1FRWTZBQWNNVVFzZ0FrRXdPZ0FIREZBTElBSkJEem9BQnd4UEN5QUNRUkE2QUFjTVRnc2dBa0VST2dBSERFMExJQUVnQmtFQmFpSUdOZ0lJSUFKQkVEb0FDQXhQQ3lBQklBWkJBV29pQmpZQ0NDQUNRUkU2QUFnTVRnc2dBU0FHUVFGcUlnWTJBZ2dnQWtFWE9nQUlERTBMSUFFZ0JrRUJhaUlHTmdJSUlBSkJHRG9BQ0F4TUN5QUJJQVpCQVdvaUJqWUNDQ0FDUVJJNkFBZ01Td3NnQVNBR1FRRnFJZ1kyQWdnZ0FrRTNPZ0FJREVvTElBRWdCa0VCYWlJR05nSUlJQUpCT2pvQUNBeEpDeUFCSUFaQkFXb2lCallDQ0NBQ1FUUTZBQWdNU0FzZ0FrRWtPZ0FIREVRTElBSkJGVG9BQnd4REN5QUNRU1U2QUFjTVFnc2dBa0VvT2dBSERFRUxJQUpCS3pvQUJ3eEFDeUFDUVNNNkFBY01Qd3NnQWtFT09nQUhRUVFoQlF3K0N5QUJJQVpCQVdvaUJqWUNDQ0FDUVJVNkFBZ01RQXNnQVNBR1FRRnFJZ1kyQWdnZ0FrRVdPZ0FJREQ4TElBRWdCa0VCYWlJR05nSUlJQUpCeFFBNkFBZ01QZ3NnQWtFdE9nQUhERG9MSUFKQkVqb0FCd3c1Q3lBQ1FSZzZBQWNNT0FzZ0FrRWlPZ0FIRERjTElBWkJBV29oQnd3MkN3SkFJQXRCVUdwQi93RnhRUWxMRFFBZ0FrRWRPZ0FIUWNZQUlRVU1OZ3NnQUNBR05nSUVJQUFnQnpZQ0FDQUFRUUE2QUFnZ0FTQUdRUUZxTmdJSUlBSkJBRG9BQ0F3NUN5QUxRU0pHRFRFQ1FBSkFJQXRCM3dCR0RRQWdDMEZmY1VHL2YycEIvd0Z4UVJwUERRRUxJQUpCQWpvQUIwRUhJUVVNTlFzZ0FrRUFPZ0FJRERjTEFrQWdDMEU5UmcwQUlBSkJPRG9BQ0F3M0N5QUJJQVpCQVdvaUJqWUNDQ0FDUVRrNkFBZ01OZ3NDUUFKQUlBcEJKVVlOQUNBS1Fmd0FSZzBCQWtBZ0NrRXFSZzBBQWtBZ0NrRTlSZzBBSUFKQkxEb0FDQXc1Q3lBQklBWkJBV29pQmpZQ0NDQUNRUzA2QUFnTU9Bc2dBU0FHUVFGcUlnWTJBZ2dnQWtFdU9nQUlERGNMSUFKQkZqb0FCd3d6Q3lBQ1FSYzZBQWNNTWdzQ1FDQUxRVDFHRFFBZ0FrRXZPZ0FJRERVTElBRWdCa0VCYWlJR05nSUlJQUpCTURvQUNBdzBDd0pBSUF0QlBVWU5BQ0FDUVRFNkFBZ01OQXNnQVNBR1FRRnFJZ1kyQWdnZ0FrRXlPZ0FJRERNTEFrQWdDMEU5UmcwQUlBSkJFem9BQ0F3ekN5QUJJQVpCQVdvaUJqWUNDQ0FDUVJRNkFBZ01NZ3NDUUFKQUlBcEJKVVlOQUNBS1Fmd0FSZzBCQWtBZ0NrRXJSZzBBQWtBZ0NrRTlSZzBBSUFKQkh6b0FDQXcxQ3lBQklBWkJBV29pQmpZQ0NDQUNRU0U2QUFnTU5Bc2dBU0FHUVFGcUlnWTJBZ2dnQWtFZ09nQUlERE1MSUFKQkpqb0FCd3d2Q3lBQ1FTYzZBQWNNTGdzQ1FDQUxRVDFHRFFBZ0FrRWlPZ0FJRERFTElBRWdCa0VCYWlJR05nSUlJQUpCSXpvQUNBd3dDd0pBSUF0QlBVWU5BQ0FDUVNRNkFBZ01NQXNnQVNBR1FRRnFJZ1kyQWdnZ0FrRWxPZ0FJREM4TEFrQWdDMEU5UmcwQUlBSkJIVG9BQ0F3dkN5QUJJQVpCQVdvaUJqWUNDQ0FDUVI0NkFBZ01MZ3NnQzBGUWFrSC9BWEZCQ2trTktpQUxRZDhBUmcwcUlBdEJYM0ZCdjM5cVFmOEJjVUVhU1EwcUlBSWdCVUgvQUhFNkFBZ2dBa0VPYWlBSklBZHFJQVlnQjJzUXpZQ0FnQUFnQWkwQUQwVU5MU0FDSUFJdEFBNUIvd0J4T2dBSURDMExJQXRCVUdwQi93RnhRUXBKRFNrZ0MwSGZBRVlOS1NBTFFWOXhRYjkvYWtIL0FYRkJHazhOS3d3cEN3SkFJQXRCM0FCR0RRQWdBa0VBT2dBSURDd0xJQUpCQlRvQUJ3d29Dd0pBQWtBZ0NrVU5BQUpBQWtBZ0NrSGNBRVlOQUNBS1FRcEdEUU1nQ2tFaVJnMEJEQ0lMSUFKQkJEb0FCd3dxQ3lBQklBWkJBV29pQmpZQ0NDQUNJQVZCL3dCeE9nQUlEQ3dMSUFZZ0RFY05IeUFDUVFBNkFBZ01Ld3NnQWtFQU9nQUlEQ29MQWtBZ0NrVU5BQ0FLUVFwR0RRQWdBa0VET2dBSERDY0xJQUpCQURvQUNBd3BDd0pBQWtBQ1FDQUtRZHdBUmcwQUFrQWdDa1VOQUNBS1FRcEdEUUlDUUNBTFFVQklEUUFnQ2tHSWZtcEJDRWtOQUNBS1FTZEhEUVFMSUFKQkFEb0FDQXdzQ3lBQ1FRQTZBQWdNS3dzZ0FrRUhPZ0FIRENjTElBSkJBRG9BQ0F3cEN3SkFJQXRCWUhGQlFFY05BQ0FDUVF3NkFBZEJBU0VJRENZTEFrQWdDMEZ3Y1VGZ1J3MEFJQUpCRERvQUIwRUNJUWdNSmdzQ1FDQUxRWGh4UVhCSERRQWdBa0VNT2dBSFFRTWhDQXdtQ3lBQ1FRMDZBQWNNSlFzQ1FBSkFBa0FDUUFKQUlBcEJpMzlxRGdRREFRRUNBQXNnQ2tVTkF5QUtRUXBHRFFNTElBSkJEVG9BQnd3bkN5QUNRUWc2QUFkQkFDRUVEQ1lMSUFKQkNUb0FCd3dsQ3lBQ1FRQTZBQWdNSndzQ1FBSkFBa0FnQzBGUWFrSC9BWEZCQ2trTkFDQUxRVjl4UWI5L2FrSC9BWEZCQlVzTkFRc2dCRUVCYWlFS1FRSWhCQ0FLUVFKR0RRRWdDaUVFRENVTElBSkJBRG9BQ0F3bkN5QUNRUTA2QUFjTUl3c0NRQ0FLUWZzQVJnMEFBa0FnQ2tVTkFDQUNRUXM2QUFkQkFDRUZEQ1FMSUFKQkFEb0FDQXdtQ3lBQ1FRbzZBQWNNSWdzQ1FDQUtRZjBBUmcwQUFrQWdDa1VOQUNBTFFWQnFRZjhCY1VFS1NRMGpJQXRCWDNGQnYzOXFRZjhCY1VFR1NRMGpJQUpCQ3pvQUIwRUFJUVVNSXdzZ0FrRUFPZ0FJRENVTElBSkJEVG9BQnd3aEN5QUxRZjBBUmcwZ0lBdEJVR3BCL3dGeFFRcEpEU0FnQzBGZmNVRy9mMnBCL3dGeFFScFBEU0lNSUFzQ1FDQUxRU2RHRFFBZ0FrRUFPZ0FJRENNTElBRWdCa0VCYWlJR05nSUlJQUpCQlRvQUNBd2lDeUFMUWI5L1NnMGNJQWhCZjJvaUNBMGVJQUpCRFRvQUIwRUFJUWdNSGdzQ1FDQUtRWGRxRGdJZUFCUUxJQUVnQmtFQmFpSUdOZ0lJSUFJZ0JVSC9BSEU2QUFnTUlBc0NRQ0FMUVQxR0RRQWdBa0VJT2dBSURDQUxJQUVnQmtFQmFpSUdOZ0lJSUFKQkR6b0FDQXdmQ3dKQUFrQWdDa0U5UmcwQUlBcEIvQUJHRFFFZ0FrRUpPZ0FJRENBTElBRWdCa0VCYWlJR05nSUlJQUpCQ3pvQUNBd2ZDeUFCSUFaQkFXb2lCallDQ0NBQ1FRbzZBQWdNSGdzQ1FBSkFBa0FnQ2tGRGFnNENBUUlBQ3lBQ1FRdzZBQWdNSHdzZ0FTQUdRUUZxSWdZMkFnZ2dBa0VOT2dBSURCNExJQUVnQmtFQmFpSUdOZ0lJSUFKQkRqb0FDQXdkQ3dKQUFrQWdDa0VsUmcwQUlBcEIvQUJHRFFFQ1FBSkFBa0FnQ2tGRGFnNENBZ0VBQ3lBQ1FTWTZBQWdNSUFzZ0FTQUdRUUZxSWdZMkFnZ2dBa0V6T2dBSURCOExJQUVnQmtFQmFpSUdOZ0lJSUFKQkp6b0FDQXdlQ3lBQ1FSTTZBQWNNR2dzZ0FrRVVPZ0FIREJrTEFrQWdDMEU5UmcwQUlBSkJLRG9BQ0F3Y0N5QUJJQVpCQVdvaUJqWUNDQ0FDUVNrNkFBZ01Hd3NDUUNBTFFUMUdEUUFnQWtFcU9nQUlEQnNMSUFFZ0JrRUJhaUlHTmdJSUlBSkJLem9BQ0F3YUN3SkFBa0FDUUNBS1FVUnFEZ0lCQWdBTElBSkJPem9BQ0F3YkN5QUNRU2s2QUFjTUZ3c2dBU0FHUVFGcUlnWTJBZ2dnQWtFOE9nQUlEQmtMQWtBZ0NrSDhBRVlOQUFKQUlBcEJQVVlOQUNBQ1FUMDZBQWdNR2dzZ0FTQUdRUUZxSWdZMkFnZ2dBa0UrT2dBSURCa0xJQUpCS2pvQUJ3d1ZDd0pBSUF0QlBVWU5BQ0FDUVQ4NkFBZ01HQXNnQVNBR1FRRnFJZ1kyQWdnZ0FrSEFBRG9BQ0F3WEN3SkFBa0FDUUNBS1FVTnFEZ0lDQVFBTElBSkJ3UUE2QUFnTUdBc2dBa0VzT2dBSERCUUxJQUVnQmtFQmFpSUdOZ0lJSUFKQndnQTZBQWdNRmdzQ1FDQUxRVDFHRFFBZ0FrSERBRG9BQ0F3V0N5QUJJQVpCQVdvaUJqWUNDQ0FDUWNRQU9nQUlEQlVMQWtBQ1FBSkFJQXBCVm1vT0JRSUFBQUFCQUFzZ0FrRVpPZ0FJREJZTElBSkJMam9BQnd3U0N5QUNRUzg2QUFjTUVRc0NRQ0FMUVM1R0RRQWdBa0ViT2dBSURCUUxJQUVnQmtFQmFpSUdOZ0lJSUFKQkhEb0FDQXdUQ3dKQUlBdEJLa1lOQUNBQ1FSbzZBQWdNRXdzZ0FrRUJPZ0FJREJJTEFrQUNRQ0FLUVM5R0RRQWdDa0U5UmcwQklBSkJOVG9BQ0F3VEN5QUNRUms2QUFjTUR3c2dBU0FHUVFGcUlnWTJBZ2dnQWtFMk9nQUlEQkVMQWtBQ1FBSkFJQXBCZDJvT0FnSUJBQXNDUUNBS1FTRkdEUUFDUUNBS1FTOUdEUUFDUUNBS1JRMEFJQUpCR2pvQUJ3d0pDeUFDSUFWQi93QnhPZ0FJSUFZZ0RFWU5GQ0FCSUFaQkFXb2lCallDQ0NBQ1FRQTZBQWdNRkFzZ0FrRWJPZ0FIREJBTElBSkJIRG9BQjBISUFDRUZEQThMSUFKQkFEb0FCeUFHUVFGcUlRY01EZ3NnQWtFYU9nQUhEQTBMQWtBQ1FBSkFJQXBCZDJvT0FnRUNBQXNDUUNBS1FTOUdEUUFnQ2tVTkFpQUNRUnc2QUFjZ0FSRE9nSUNBQUVISEFDRUZEQThMSUFKQkdqb0FCd3dPQ3lBQ1FSdzZBQWRCeHdBaEJRd05DeUFDUWNjQU9nQUlEQThMQWtBQ1FDQUtRWGRxRGdJTkFRQUxJQW9OQXlBQ0lBVkIvd0J4T2dBSUlBWWdERVlORHlBQklBWkJBV29pQmpZQ0NDQUNRUUE2QUFnTUR3c2dBa0VBT2dBSElBWkJBV29oQnd3TEN5QUtRWGRxRGdJS0RBQUxJQXBGRFFzTElBRVF6b0NBZ0FBTUNBc0NRQUpBSUFwQkxrWU5BQ0FLUWNVQVJnMEJJQXBCMEFCR0RRRWdDa0hsQUVZTkFTQUtRZkFBUmcwQklBdEJVR3BCL3dGeFFRcEpEUWtnQzBHdmYycEIvd0Z4UVFwSkRRa2dDMEc2ZjJwQi93RnhRUXBKRFFrZ0MwRy9mMnBCL3dGeFFRUkpEUWtnQzBHUGYycEIvd0Z4UVFwSkRRa2dDMEdhZjJwQi93RnhRUXBKRFFrZ0MwSGZBRVlOQ1NBTFFaOS9ha0gvQVhGQkJFOE5Dd3dKQ3lBQ1FSODZBQWNNQ0FzZ0FrRWVPZ0FIREFjTEFrQUNRQ0FLUVZWcURnTUJBQUVBQ3lBQklBWkJmMm8yQWdnZ0FrRWRPZ0FIREFjTElBSkJJRG9BQnd3R0N5QUtRY1VBUmcwRUlBcEIwQUJHRFFRZ0NrSGxBRVlOQkNBS1FmQUFSZzBFQWtBQ1FDQUxRVkJxUWY4QmNVRUtTUTBBSUF0QnIzOXFRZjhCY1VFS1NRMEFJQXRCdW45cVFmOEJjVUVLU1EwQUlBdEJ2MzlxUWY4QmNVRUVTUTBBSUF0QmozOXFRZjhCY1VFS1NRMEFJQXRCbW45cVFmOEJjVUVLU1EwQUlBdEIzd0JHRFFBZ0MwR2ZmMnBCL3dGeFFRUlBEUUVMSUFKQklEb0FCd3dHQ3lBQklBWkJmMm9pQmpZQ0NDQUNJQVZCL3dCeE9nQUlEQWdMQWtBZ0NrSEZBRVlOQUNBS1FkQUFSZzBBSUFwQjVRQkdEUUFnQ2tId0FFWU5BQ0FMUVZCcVFmOEJjVUVLU1EwRklBdEJyMzlxUWY4QmNVRUtTUTBGSUF0QnVuOXFRZjhCY1VFS1NRMEZJQXRCdjM5cVFmOEJjVUVFU1EwRklBdEJqMzlxUWY4QmNVRUtTUTBGSUF0Qm1uOXFRZjhCY1VFS1NRMEZJQXRCM3dCR0RRVWdDMEdmZjJwQi93RnhRUVJQRFFjTUJRc2dBa0VoT2dBSERBUUxBa0FDUUNBS1FWVnFEZ01CQUFFQUN5QUJJQVpCZjJvMkFnZ2dBa0VnT2dBSERBUUxJQUpCSURvQUJ3d0RDeUFDUVFNNkFBZEJBaUVGREFJTElBSkJBRG9BQ0F3RUN5QUNRU0U2QUFjTElBRWdBU2dDQ0VFQmFpSUdOZ0lJREFBTEN5QUNJQVZCL3dCeE9nQUlDd0pBSUFJdEFBZ2lDa0gvQUhGQkJrY05BQ0FHSVFjZ0FTMEFHRVVOQUNBQUlBTXBBZ0EzQWdBZ0EwSUFOd0lBSUFCQkNHb2dBMEVJYWlJQktBSUFOZ0lBSUFGQ0FEY0NBQXdCQ3lBQUlBbzZBQWdnQUNBR05nSUVJQUFnQnpZQ0FBc2dBa0VRYWlTQWdJQ0FBQXZRQXdFSmZ5T0FnSUNBQUVIZ0FHc2lBeVNBZ0lDQUFFRUFJUVFDUUNBQUtBSUlJZ1VnQWs4TkFBTkFJQVVnQlVFQmRtcEJDR29pQlNBQ1NRMEFDeUFESUFFcEFnQTNBd2dnQTBFVWFpQURRUWhxSUFWQkRXd1F0NENBZ0FBZ0F5OEJIQ0lFRFFBZ0F5Z0NGQ0VDQWtBZ0FDZ0NCQ0lHRFFBZ0F5QUJLUUlBTndOQUlBTkJ3QUJxSUFBb0FnQWdBQ2dDQ0VFTmJCQzVnSUNBQUNBQUlBVTJBZ2dnQUNBQ05nSUFEQUVMSUFOQklHcEJDR29pQnlBRk5nSUFJQU1nQmpZQ0pDQURJQUkyQWlBZ0EwRXNhaUFBRUtDQWdJQUFJQU1vQWp3aEJTQURLQUlzSVFZZ0F5Z0NOQ0VJSUFNb0FqQWhDU0FEUWNBQWFpQURRU0JxRUtDQWdJQUFJQU1vQWtnaENpQURLQUpFSVFzZ0F5Z0NRRUdxMWFyVmVpQURLQUpRSWdJYklBWkJxdFdxMVhvZ0JSc2dBeWdDVEVFQUlBSWJJZ1lRMm9HQWdBQWFJQXRCcXRXcTFYb2dBaHNnQ1VHcTFhclZlaUFGR3lBR1FRSjBFTnFCZ0lBQUdpQUtRYXJWcXRWNklBSWJJQWhCcXRXcTFYb2dCUnNnQmtFRGRCRGFnWUNBQUJvZ0F5QUJLUUlBTndOWUlBTkIyQUJxSUFBb0FnQWdBRUVJYWlJRktBSUFRUTFzRUxtQWdJQUFJQVVnQnlnQ0FEWUNBQ0FBSUFNcEFpQTNBZ0FMSUFOQjRBQnFKSUNBZ0lBQUlBUUxId0VCZnlBQUlBQW9BZ1FpQWtFQmFqWUNCQ0FBSUFJZ0FSQzhnSUNBQUF2NUdBTVFmd0YrQVg4amdJQ0FnQUJCOEFGcklnSWtnSUNBZ0FBZ0FrRUFMUUNZZ2NDQUFDSURPZ0FBSUFGQnpBQnFLQUlBSVFRRFFDQUNRUVJxSUFGQnlBQVF2WUNBZ0FBZ0FpMEFDQTBBQ3lBQlFUQnFJUVVnQVVISUFHb2hCa0VBTFFDZ2djQ0FBQ0VIUVFBdEFQaUF3SUFBSVFoQkFDRUpRUUFoQ2dKQUFrQURRQ0FDUVF4cUlBRVF2b0NBZ0FBQ1FDQUNMd0VVSWd0RkRRQWdBQ0FMT3dFUURBSUxJQUl0QUJBaERDQUNLQUlNSVEwQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0FTZ0NFQ0lPSUFFb0FpQWlEMm90QUFCQi93QnhJaEJCcTM5cUlndEJGVXNOQUVFQklBdDBRWUxPQW5FTkFRSkFBa0FDUUFKQUFrQWdDMFVOQUNBTFFSVkhEUVVnQVNBUFFRRnFOZ0lnSUFKQjZBQnFJQUVRdjRDQWdBQWdBaThCYkNJTFJRMEJJQUFnQ3pzQkVBd1BDd0pBQWtBQ1FDQU9JQTlCQVdvaUMyb3RBQUJCL3dCeFFSVkdEUUFnQWtISUFHb2dBUkRBZ0lDQUFDQUNMd0ZNSWd0RkRRRWdDMEVlUmcwQ0lBRWdCRFlDVENBQVFRQXBBdUNBd0lBQU53SUFJQUJCQ0dwQkFDa0M2SURBZ0FBM0FnQWdBRUVRYWtFQUtBTHdnTUNBQURZQ0FBd1NDeUFNUWY4QmNVVU5CU0FDUVFBNkFDWWdBa0VuT3dFa0lBSWdEVFlDSUFKQUlBRWdBa0VnYWhEQmdJQ0FBQ0lMUWYvL0EzRU5BQ0FCS0FJZ0lnOUJBV29oQ3d3R0N5QUFJQXM3QVJBTUVBc2dBaWdDU0NFTEFrQUNRQUpBSUFJdEFBQWlBMEVEY1E0RUFBSUJBZ0FMSUFJZ0J6b0FBQ0FISVFNTUFRc2dCUkRDZ0lDQUFDRURJQUpCQURvQVZpQUNRUUk3QVZRZ0FpQURJQkZCQW5ScUtBSUFOZ0pRQWtBZ0FTQUNRZEFBYWhEQmdJQ0FBQ0lEUWYvL0EzRkZEUUFnQUNBRE93RVFEQkVMSUFKQkFEb0FYaUFDUWIwQ093RmNJQUlnQ2pZQ1dBSkFJQUVnQWtIWUFHb1F3WUNBZ0FBaUEwSC8vd054UlEwQUlBQWdBenNCRUF3UkN5QUNRUUE2QUdZZ0FrRytBanNCWkNBQ0lBODJBbUFDUUNBQklBSkI0QUJxRU1HQWdJQUFJZ05CLy84RGNVVU5BQ0FBSUFNN0FSQU1FUXNnQWlBSU9nQUFJQWdoQXdzQ1FDQUdJQUVnQ3hERGdJQ0FBQ0lMUWYvL0EzRkZEUUFnQUNBTE93RVFEQkFMSUFFb0FoQWdBU2dDSUNJTGFpMEFBRUgvQUhFaUVFRTNSZzBDUVFBaERpQVFRUVpHRFFvZ0VFRVdSZzBLSUFGQkxCREVnSUNBQUNJTFFmLy9BM0ZGRFFBZ0FDQUxPd0VRREE4TElBRVF4WUNBZ0FBZ0R5RUtEQTBMSUFJb0FtZ2lDMFVOQVNBQ1FRSWdBeUFEUVFOeFFRRkdJaEFiSWdOQkEzRTZBQUFDUUNBR0lBRWdDeEREZ0lDQUFDSVBRZi8vQTNFTkFDQUxJQkVnRUJzaEVRd0NDeUFBSUE4N0FSQU1EUXRCQVNFSklBRWdDMEVCYWpZQ0lDQVBJUW9NQ3dzZ0FTZ0NJQ0FCS0FJUWFrRi9haTBBQUVIL0FIRkJFa1loQ1F3S0N5QUJJQXMyQWlBZ0FrRW9haUFCRU1hQWdJQUFBa0FnQWk4QkxDSUxSUTBBQWtBZ0MwRWVSZzBBSUFFZ0JEWUNUQ0FBUVFBcEF1Q0F3SUFBTndJQUlBQkJDR3BCQUNrQzZJREFnQUEzQWdBZ0FFRVFha0VBS0FMd2dNQ0FBRFlDQUF3TkN5QUJFTVdBZ0lBQVFRQWhDUXdLQzBFQUlRa2dBaWdDS0NJTFJRMEpJQUlnQ3pZQ05DQUNJQTgyQWpBZ0FrR2VBVG9BUENBQ1FjQUFhaUFCSUFKQk1Hb1F4NENBZ0FBQ1FDQUNMd0ZFSWd0RkRRQWdBQ0FMT3dFUURBc0xJQUpCQWlBRElBTkJBM0ZCQVVZaUN4c2lBMEVEY1RvQUFDQUNLQUpBSWhBZ0VTQUxHeUVSUVFBaENTQUdJQUVnRUJERGdJQ0FBQ0lMUWYvL0EzRkZEUWtnQUNBTE93RVFEQW9MQWtBQ1FBSkFBa0FnRUVHUGYyb09Cd0lFQVFFQkF3UUFDeUFRUVFaR0RRUWdFRUVXUmcwRUN5QUNRWUFCYWlBQkVNaUFnSUFBSUFJdkFZQUJJZ3RGRFFRZ0MwRWVSZzBGSUFFZ0JEWUNUQ0FBUVFBcEF1Q0F3SUFBTndJQUlBQkJDR3BCQUNrQzZJREFnQUEzQWdBZ0FFRVFha0VBS0FMd2dNQ0FBRFlDQUF3TUN5QU1RZjhCY1VVTkNDQUNRUUE2QUI0Z0FrRW1Pd0VjSUFJZ0RUWUNHQUpBSUFFZ0FrRVlhaERCZ0lDQUFDSUxRZi8vQTNFTkFDQUJLQUlRSVE0Z0FTZ0NJQ0VQREFrTElBQWdDenNCRUF3S0N5QUNRZGdCYWlBQkVNbUFnSUFBQWtBZ0FpOEIzQUVpQzBVTkFBSkFJQXRCSGtjTkFDQUJFTVdBZ0lBQURBZ0xJQUJCRWpzQkVBd0tDeUFDS0FMWUFTSUxSUTBHSUFKQkFpQURJQU5CQTNGQkFVWWlFQnNpQTBFRGNUb0FBQUpBSUFZZ0FTQUxFTU9BZ0lBQUlnOUIvLzhEY1EwQUlBc2dFU0FRR3lFUkRBY0xJQUFnRHpzQkVBd0pDeUFDUWZBQWFpQUJFTCtBZ0lBQUFrQWdBaThCZENJTFJRMEFJQUFnQ3pzQkVBd0pDeUFDS0FKd0lndEZEUVFnQWtFQ0lBTWdBMEVEY1VFQlJpSVFHeUlEUVFOeE9nQUFBa0FnQmlBQklBc1F3NENBZ0FBaUQwSC8vd054RFFBZ0N5QVJJQkFiSVJFTUJRc2dBQ0FQT3dFUURBZ0xBa0FnREVIL0FYRU5BQ0FKSVE0TUF3c2dBa0VBT2dCK0lBSkJKVHNCZkNBQ0lBMDJBbmdnQ1NFT0lBRWdBa0g0QUdvUXdZQ0FnQUFpQzBILy93TnhSUTBDSUFBZ0N6c0JFQXdIQ3lBQ0xRQ0NBUTBGQ3lBQktBSWdJUXNnQWtHRUFXb2dBUkRBZ0lDQUFBSkFBa0FnQWk4QmlBRWlFRVVOQUNBUVFSNUdEUUVnQVNBRU5nSk1JQUJCQUNrQzRJREFnQUEzQWdBZ0FFRUlha0VBS1FMb2dNQ0FBRGNDQUNBQVFSQnFRUUFvQXZDQXdJQUFOZ0lBREFnTElBSW9Bb1FCSVJBQ1FBSkFBa0FnQWkwQUFDSURRUU54RGdRQkFnQUNBUXNnQlJEQ2dJQ0FBQ0VESUFKQkFEb0FrZ0VnQWtFQ093R1FBU0FDSUFNZ0VVRUNkR29vQWdBMkFvd0JBa0FnQVNBQ1FZd0JhaERCZ0lDQUFDSURRZi8vQTNGRkRRQWdBQ0FET3dFUURBa0xJQUpCQURvQW1nRWdBa0c5QWpzQm1BRWdBaUFLTmdLVUFRSkFJQUVnQWtHVUFXb1F3WUNBZ0FBaUEwSC8vd054UlEwQUlBQWdBenNCRUF3SkN5QUNRUUE2QUtJQklBSkJ2Z0k3QWFBQklBSWdDellDbkFFQ1FDQUJJQUpCbkFGcUVNR0FnSUFBSWdOQi8vOERjVVVOQUNBQUlBTTdBUkFNQ1FzZ0FpQUlPZ0FBSUFnaEF3d0JDeUFDSUFjNkFBQWdCeUVEQ3dKQUlBWWdBU0FRRU1PQWdJQUFJaEJCLy84RGNVVU5BQ0FBSUJBN0FSQU1Cd3NDUUNBQktBSVFJQUVvQWlBaUVHb3RBQUJCL3dCeElnOUJOMFlOQUVFQUlRNGdEMEVHUmcwQ0lBOUJGa1lOQWdKQUlBRkJMQkRFZ0lDQUFDSVFRZi8vQTNGRkRRQWdBQ0FRT3dFUURBZ0xJQUVvQWhBaUVDQUJLQUlnYWkwQUFFSC9BSEZCRWtjTkFTQVFJQXRxTFFBQVFmOEFjVUVDUncwQklBSkJBRG9BcWdFZ0FrRzVBanNCcUFFZ0FpQUxOZ0trQVNBQklBSkJwQUZxRU1HQWdJQUFJaEJCLy84RGNVVU5BU0FBSUJBN0FSQU1Cd3RCQVNFSklBRWdFRUVCYWpZQ0lDQUxJUW9NQlFzZ0FSREZnSUNBQUNBTElRb01CQXNnQVNnQ1NDQUVRUUowYWlFTEFrQUNRQUpBQWtBZ0FTZ0NUQ0FFYXlJRERnTUFBUUlEQ3lBQklBUTJBa3dnQUVFQU93RVFJQUJCQURZQ0NDQUFRZ0EzQWdBZ0FDQU9RUUZ4SWdFNkFBd2dBaUFCT2dDc0FRd0lDeUFBUVFBN0FSQWdBRUVBTmdJSUlBQkJBVFlDQUNBTEtBSUFJUXNnQVNBRU5nSk1JQUFnRGtFQmNTSUJPZ0FNSUFBZ0N6WUNCQ0FDSUFFNkFMQUJEQWNMSUFCQkFEc0JFQ0FBUVFJMkFnQWdDeWtDQUNFU0lBRWdCRFlDVENBQUlBNUJBWEVpQVRvQURDQUFJQkkzQWdRZ0FpQUJPZ0MwQVF3R0N5QUNRYmdCYWlBQklBc2dBeEM2Z0lDQUFBSkFJQUl2QWNBQklndEZEUUFnQUNBTE93RVFEQVVMSUFFZ0JEWUNUQ0FBUVFBN0FSQWdBQ0FDS1FLNEFUY0NCQ0FBSUFNMkFnQWdBQ0FPUVFGeElnRTZBQXdnQWlBQk9nREVBUXdGQ3lBQktBSWdJQUVvQWhCcVFYOXFMUUFBUWY4QWNVRVNSaUVKREFJTElBRW9BaUFnQVNnQ0VHcEJmMm90QUFCQi93QnhRUkpHSVFrTUFRc2dBU0FQUVFGcUlnczJBaUJCbUpMQWdBQWhEQUpBSUE0Z0Myb3RBQUJCL2dCeFFRSkhEUUFnQVNBUFFRSnFOZ0lnSUFKQkFUb0F6QUVnQWlBTE5nTElBU0FDUWNnQmFpRU1DeUFDUWRBQmFpQUJFTWFBZ0lBQUFrQUNRQ0FDTHdIVUFTSVFEUUFDUUNBQ0tBTFFBU0lMRFFBZ0FVRURFTXFBZ0lBQUlSQU1BUXNDUUFKQUlBd3RBQVFOQUVFQUlSQU1BUXNnRENnQ0FDRVFDeUFDSUFzMkF1QUJJQUlnRURZQzNBRWdBaUFQTmdMWUFTQUNRUUk2QU9RQklBSkI2QUZxSUFFZ0FrSFlBV29ReDRDQWdBQWdBaWtENkFFaUVrSWdpS2NoRUNBU3B5RUxEQUVMSUJNaEN3c0NRQ0FRUWYvL0EzRWlFRVVOQUFKQUlCQkJIa2NOQUNBQkVNV0FnSUFBUVFBaENTQUxJUk1NQWdzZ0FFRVNPd0VRREFJTFFRQWhDVUVBSVJNZ0MwVU5BQ0FDUVFJZ0F5QURRUU54UVFGR0loQWJJZ05CQTNFNkFBQWdDeUFSSUJBYklSRkJBQ0VKSUFzaEV5QUdJQUVnQ3hERGdJQ0FBQ0lMUWYvL0EzRkZEUUFMSUFBZ0N6c0JFQXNnQVNBRU5nSk1DeUFDUWZBQmFpU0FnSUNBQUF0MkFRTi9JNENBZ0lBQVFSQnJJZ01rZ0lDQWdBQWdBU2dDQ0NFRUlBRW9BZ1FoQlFKQUFrQWdBU2dDQUNJQlFRTlBEUUFnQXlBRU5nSU1JQU1nQlRZQ0NDQUFJQUlnQTBFSWFpQUJFTHFBZ0lBQURBRUxJQUFnQkRZQ0JDQUFJQVUyQWdBZ0FFRUFPd0VJQ3lBRFFSQnFKSUNBZ0lBQUMxMEJBWDhqZ0lDQWdBQkJFR3NpQWlTQWdJQ0FBQ0FDUVFBNkFBNGdBa0UvT3dFTUlBSWdBVUgvQUhFaUFUb0FCeUFDSUFBb0FpQTJBZ2dnQWlBQk9nQVBJQUFnQWtFSWFoREJnSUNBQUNFQUlBSkJFR29rZ0lDQWdBQWdBQXRnQVFKL0k0Q0FnSUFBUVNCcklnRWtnSUNBZ0FBZ0FVRUlhaUFBUVFocUtBSUFOZ0lBSUFFZ0FDa0NBRGNEQUNBQlFReHFJQUVRb0lDQWdBQWdBU2dDSENFQUlBRW9BaFFoQWlBQlFTQnFKSUNBZ0lBQUlBSkJxdFdxMVhvZ0FCc0xzd0VCQTM4amdJQ0FnQUJCSUdzaUFpU0FnSUNBQUNBQ0lBRW9BZ1EyQWhnZ0FpQUJLQUlJSWdNMkFod2dBU2dDQUNFRVFYUWhBUUpBQTBBZ0FVVU5BU0FDUVF4cUlBRkI0SURBZ0FCcUtBSUFRUUowYWlBRU5nSUFJQVFnQVVIVWdNQ0FBR29vQWdBZ0EyeHFJUVFnQVVFRWFpRUJEQUFMQ3lBQUlBSXBBZ3czQWdBZ0FFRVFhaUFDUVF4cVFSQnFLQUlBTmdJQUlBQkJDR29nQWtFTWFrRUlhaWtDQURjQ0FDQUNRU0JxSklDQWdJQUFDNVlCQWdKL0FYNGpnSUNBZ0FCQkVHc2lCQ1NBZ0lDQUFBSkFBa0FnQXcwQUlBUWdBQ2tDQURjREFDQUVJQUVnQWhDT2dJQ0FBRUVCSVFVTUFRdEJBQ0VGSUFKRkRRQWdCQ0FEUWYvLy8vOERTem9BRENBRFFZQ0FnSUFFVHcwQUlBQXBBZ0FpQnFjZ0FTQUNRUUowUVFJZ0EwRUNkRUVBSUFaQ0lJaW5LQUlFRVlHQWdJQUFBQ0VGQ3lBRVFSQnFKSUNBZ0lBQUlBVUxsUUVCQVg4amdJQ0FnQUJCTUdzaUF5U0FnSUNBQUNBRElBRXBBZ0EzQXdnZ0EwRVFhaUFEUVFocUlBSVE1WUNBZ0FBQ1FBSkFJQU12QVJRaUFVVU5BQ0FESUFFN0FTQWdBMEVZYWlFQ0RBRUxJQU5CQURzQkxDQURJQUkyQWlnZ0F5QURLQUlRTmdJa0lBTkJKR29oQWdzZ0FDQUNLUUlBTndJQUlBQkJDR29nQWtFSWFpZ0NBRFlDQUNBRFFUQnFKSUNBZ0lBQUM1WUJBZ0ovQVg0amdJQ0FnQUJCRUdzaUJDU0FnSUNBQUFKQUFrQWdBdzBBSUFRZ0FDa0NBRGNEQUNBRUlBRWdBaENsZ0lDQUFFRUJJUVVNQVF0QkFDRUZJQUpGRFFBZ0JDQURRZi8vLy84QlN6b0FEQ0FEUVlDQWdJQUNUdzBBSUFBcEFnQWlCcWNnQVNBQ1FRTjBRUUlnQTBFRGRFRUFJQVpDSUlpbktBSUVFWUdBZ0lBQUFDRUZDeUFFUVJCcUpJQ0FnSUFBSUFVTHlBRUNBWDhCZmlPQWdJQ0FBRUV3YXlJREpJQ0FnSUFBSUFFcEFnQWhCQ0FESUFKQi8vLy8vd0ZMT2dBc0FrQUNRQUpBQWtBZ0FrR0FnSUNBQWtrTkFFRVNJUUVNQVFzZ0F5QUVOd01ZSUFOQklHb2dBMEVZYWlBQ1FRTjBFTGlBZ0lBQUlBTXBBeUFpQkVJZ2lLY2lBVUgvL3dOeFJRMEJDeUFESUFFN0FRZ2dBeUVDREFFTElBTWdBallDRUNBRElBUStBZ3dnQTBFQU93RVVJQU5CREdvaEFnc2dBQ0FDS1FJQU53SUFJQUJCQ0dvZ0FrRUlhaWdDQURZQ0FDQURRVEJxSklDQWdJQUFDejBDQVg4QmZnSkFJQUpCQTNSQkFDQUNHeUlEUlEwQUlBQXBBZ0FpQktjZ0FVRUVJQUliSUFOQkFrRUFJQVJDSUlpbktBSUlFWUNBZ0lBQUFBc0xRd0VCZnlPQWdJQ0FBRUVRYXlJQkpJQ0FnSUFBSUFGQkFDa0RzSURBZ0FBM0F3Z2dBVUVJYWlBQUtBSUFJQUFvQWdnUWpvQ0FnQUFnQVVFUWFpU0FnSUNBQUF0REFRRi9JNENBZ0lBQVFSQnJJZ0VrZ0lDQWdBQWdBVUVBS1FPd2dNQ0FBRGNEQ0NBQlFRaHFJQUFvQWdBZ0FDZ0NDQkNsZ0lDQUFDQUJRUkJxSklDQWdJQUFDOGdIQVExL0k0Q0FnSUFBUWNBQWF5SUVKSUNBZ0lBQUlBTkJmMm9oQlNBQlFSQnFLQUlBSVFZZ0FTZ0NDQ0VISUFFb0Fnd2hDQ0FDSVFrQ1FBTkFJQVJCREdvZ0NDQUphaUlLSUFNZ0NXc1EvNENBZ0FBQ1FBSkFBa0FDUUNBRUxRQVFSUTBBSUFSQkZHb2dDQ0FFS0FJTUlnc2dDV29pREdvaUFTQURJQXhyUVFvUTVvQ0FnQUFnQkMwQUdBMEJRWmlTd0lBQUlRMUJuSkxBZ0FBaERpQUdJUThNQXdzZ0NTQUNSeUlCUlEwQklBZ2dDVUYvYWlJUGFpQURJQTlyRUlDQmdJQUFRUUZ4UlEwQklBWWdBMFlOQVNBSEVJR0JnSUFBSWc5Qi8vOERjVVVOQVNBQUlBODdBUUFNQkFzZ0JFRUJPZ0FjSUFRZ0JDZ0NGQ0FNYWlJUE5nSWdJQVJCSUdvaERTQUVRUnhxSVE0TUFRc2dBRUVBT3dFQUlBQWdBVG9BQWd3Q0N5QUVJQUVnRHlBTWF4RDRnSUNBQUNBRUtBSUVJUThnQkNnQ0FDRVFBa0FnQ1VVTkFBSkFJQWtnQWtjTkFDQUtJQXNRZ0lHQWdBQkJBWEZGRFFBQ1FDQUhFSUdCZ0lBQUlnRkIvLzhEY1VVTkFDQUFJQUU3QVFBTUJBc2dCeENCZ1lDQUFDSUJRZi8vQTNGRkRRRWdBQ0FCT3dFQURBTUxJQVJCSkdvZ0NpQUxRUW9RNW9DQWdBQUNRQ0FFTFFBb1JRMEFJQWNRZ1lHQWdBQWlBVUgvL3dOeFJRMEJJQUFnQVRzQkFBd0RDeUFKSUFKSERRQWdCQ0FITmdJc0lBUkJMR3BCSUJDQ2dZQ0FBQ0lCUWYvL0EzRkZEUUFnQUNBQk93RUFEQUlMSUFVaENRSkFJQTR0QUFCRkRRQWdEU2dDQUNFSkN5QVBRWDVxSVE1QkFpRUJJQkJCQW1vaENpQUpRUUZxSVFrQ1FBTkFBa0FnRHlBQlJ3MEFJQTRoQVF3Q0N5QUVRVGhxUWU2SndJQUFRUVlnRUNBQmFpMEFBQkRtZ0lDQUFBSkFJQVF0QUR4RkRRQWdBVUVCYWlFQkRBRUxDeUFCUVg1cUlRRUxJQTRnQVdzaERpQUtJQUZxSVFFQ1FBSkFBa0FnQnkwQUNFVU5BQ0FCSUE1QnpaekFnQUJCQ3hDS2dJQ0FBRUVCY1VVTkFRSkFJQWNnQ0NBSEtBSUVJZ0ZxSUF3Z0FXc1FyNENBZ0FBaUFVSC8vd054UlEwQUlBQWdBVHNCQUF3RkN3SkFJQWRCMlp6QWdBQkJEeENEZ1lDQUFDSUJRZi8vQTNGRkRRQWdBQ0FCT3dFQURBVUxJQWRDQURjQ0JBd0RDeUFCSUE1QjZaekFnQUJCREJDS2dJQ0FBRUVCY1VVTkFDQUVJQWMyQWpBZ0JFRXdha0gybk1DQUFFRVFFSVNCZ0lBQUlnRkIvLzhEY1VVTkFTQUFJQUU3QVFBTUF3c2dCQ0FITmdJMEFrQWdFQ0FQUWZTSndJQUFJQVJCTkdvUWhZR0FnQUFpQVVILy93TnhEUUFnQkNBSE5nSTRJQVJCT0dwQnpaN0FnQUJCQVJDRWdZQ0FBQ0lCUWYvL0EzRkZEUUlMSUFBZ0FUc0JBQXdDQ3lBSFFRRTZBQWdnQnlBSk5nSUVEQUFMQ3lBRVFjQUFhaVNBZ0lDQUFBdHVBUUovSUFCQkZHb29BZ0JCcXRXcTFYb2dBRUVnYWlnQ0FCc2hBZ0pBQWtBRFFFRUFJUU1DUUNBQ0lBRnFMUUFBUWY4QWNVRzVmMm9PQWdNQUFnc2dBQ0FCUVFJUWhvR0FnQUFpQTBILy93TnhEUUlnQVVFQmFpRUJEQUFMQ3lBQUlBRVFoNEdBZ0FBaEF3c2dBd3ZpMmdFRkQzOEJmZ1IvQTM0T2Z5T0FnSUNBQUVIQUNtc2lBeVNBZ0lDQUFDQUFRZkFBYWlFRUlBQkJER29oQlNBRFFhQUJhaUVHQWtBQ1FBSkFBa0FDUUFOQUlBTkJOR29nQlVIQUFCRGFnWUNBQUJvZ0EwSDBBR29nQlVIQUFCRGFnWUNBQUJvZ0F5Z0NpQUVoQnlBREtBSjhJUWdnQUNnQ0NDRUpRYXJWcXRWNklRcEJxdFdxMVhvaEMwR3ExYXJWZWlFTUFrQWdBeWdDbkFFaURVVU5BQ0FES0FLVUFTRU1JQU1vQW93QklRb2dBeWdDa0FFaEN3c2dBMEVvYWlBRUlBRVFpSUdBZ0FBQ1FBSkFBa0FnQXlnQ0tDSU9SUTBBSUFNb0Fpd2hEeUFESUFrMkFyUUJJQU5CdEFGcUlBNGdEeENFZ1lDQUFDSU9RZi8vQTNGRkRRRU1DQXNnQUNnQ2lBRWhFRUdZa3NDQUFDRVJJQUFvQW93QlJRMEJJQUVRaVlHQWdBQWhFZ0pBQWtBZ0VBMEFRUUFoRDBGL0lSTU1BUXNnRUVGOGFpZ0NBQ0lQUVg5cUlSTUxJQkJCZUdvaEZDQVRJQktuY1NFT0lCSkNPWWluSVJVRFFDQVFJQTVxTEFBQUloWkZEUUlnRDBVTkFnSkFJQlpCZjBvTkFDQVZJQlpCL3dCeFJ3MEFJQlFvQWdBZ0RrRUNkR29vQWdBZ0FVY05BQ0FEUVFFNkFMd0lJQU1nRGpZQ3VBZ2dBMEc0Q0dvaEVRd0RDeUFQUVg5cUlROGdEa0VCYWlBVGNTRU9EQUFMQ3lBQUtBSUlJUTlCQUNFT0FrQUNRQUpBQWtBQ1FDQUNRUWR4RGdZTEFBRUNBd1FMQ3lBRElBODJBcmdJSUFOQnVBaHFRU0FRZ29HQWdBQWhEZ3dLQ3lBUEVJR0JnSUFBSVE0TUNRc2dBeUFQTmdLNENDQURRYmdJYWtIUG5zQ0FBRUVDRUlTQmdJQUFJUTRNQ0FzZ0F5QVBOZ0s0Q0NBRFFiZ0lha0hTbnNDQUFFRUNFSVNCZ0lBQUlRNE1Cd3NnQXlBUE5nSzRDQ0FEUWJnSWFrSFZuc0NBQUVFQ0VJU0JnSUFBSVE0TUJnc0NRQ0FSTFFBRVJRMEFJQkJCZEdvb0FnQWdFU2dDQUVFQ2RHb29BZ0FoQVF3QkN5QUlRYXJWcXRWNklBY2JJUThDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQUtJQUZxTFFBQVFYbHFEcU1CQkFVSENDb2RIUjBkSFIwZEhSMGRIUjBkSFIwZEhSMGRIUjBkSFIwS0hSMGRIUjBkSFIwZEhSMGRIUjBkSFIwZEhSMGRIUjBjSEJ3Y0hCc2JIQm9hR1JrWkdSVVZGU3d0R0JnWUdCZ1lHQmdYRnhjWEZ4Y1hGeFlXRmhZV0ZoWVdFQkFQRHc4UEhnNE9EZzBOQ1F3TUJoc29LU2NSRVJFUkFDUWlJaUlpQVNNaUFpWVRFeElTSlJRVUZCUVVGQlFVRkJRVUZBQUFBQjhmSVNFZ0lBc0xBQUFESGdRTEFBc2dBQ0FMSUFGQkFuUnFLQUlBSUFKQkFCQ0tnWUNBQUNFT0RDNExJQWtvQWhRaEVDQUpRUUEyQWhRZ0NSQ0xnWUNBQUNJT1FmLy9BM0VOTFNBTUlBRkJBM1JxSWc1QkJHb2hFeUFPS0FJQUlSWUNRQU5BQWtBZ0ZpQVRLQUlBVFEwQUEwQWdFRVVOQXlBSkVJeUJnSUFBSUJCQmYyb2hFQXdBQ3dzZ0FDQVdRUUlRaG9HQWdBQWlEa0gvL3dOeERTOGdGa0VCYWlFV0RBQUxDMEVBSVE0Q1FBSkFBa0FnQWtFSGNRNEhNREF3QVFJQU1EQUxJQThnRm1vdEFBQkIvd0J4UVJKSERTOGdBQ0FXUVFJUWhvR0FnQUFoRGd3dkN5QVBJQlpxTFFBQVFmOEFjVUUzUncwdUlBQWdGa0VDRUlhQmdJQUFJUTRNTGdzZ0R5QVdhaTBBQUVIL0FIRkJOMGNOTFNBQUlCWkJBUkNHZ1lDQUFDRU9EQzBMSUFBZ0N5QUJRUUowYWlJUEtBSUFRUUFRaG9HQWdBQWlEa0gvL3dOeERTd2dBQ0FQS0FJQVFRRnFRUUFRaG9HQWdBQWlEa0gvL3dOeERTd2dBQ0FQS0FJQVFRSnFJQUpCQVJDS2dZQ0FBQ0VPREN3TElBd2dBVUVEZEdvaURpZ0NCQ0VXSUE0b0FnQWhEeUFBSUFzZ0FVRUNkR29vQWdCQkFSQ0dnWUNBQUNJT1FmLy9BM0VOS3lBV0lRRWdEMFVOSmlBQUlBOUJmMnBCQUJDR2dZQ0FBQ0lPUWYvL0EzRU5LeUFBSUE5QkFFRUFFSXFCZ0lBQUlnNUIvLzhEY1EwcklCWWhBU0FBSUE5QkFXcEJBUkNHZ1lDQUFDSU9RZi8vQTNGRkRTWU1Ld3NnQVVFQ2RDRU9JQXdnQVVFRGRHb29BZ1FoQVNBQUlBc2dEbW9vQWdCQkFSQ0dnWUNBQUNJT1FmLy9BM0ZGRFNVTUtnc2dBVUVDZENFT0lBd2dBVUVEZEdvb0FnQWhBU0FBSUFzZ0Rtb29BZ0JCQVJDR2dZQ0FBQ0lPUWYvL0EzRkZEU1FNS1FzZ0EwSDBBR29nQ3lBQlFRSjBhaWdDQUNJV0lBTkI5QUJxSUF3Z0FVRURkR29pRUNnQ0JCQ05nWUNBQUNJVEVJNkJnSUFBSVJVZ0FDQVFLQUlBUVFFUXFvQ0FnQUFpRGtILy93TnhEU2hCQVVFQ0lCVkJBWEViSVJVQ1FBSkFJQk1nRDJwQmYyb3RBQUJCL3dCeFFRbEhEUUFnQUNBV1FRRVFob0dBZ0FBaURrSC8vd054RFNvZ0FDQVdRUUZxUVFBUWhvR0FnQUFpRGtILy93TnhEU29nQUNBV1FRSnFRUUJCQUJDS2dZQ0FBQ0lPUWYvL0EzRU5LaUFBSUJaQkEyb2dGUkNHZ1lDQUFDSU9RZi8vQTNGRkRRRU1LZ3NnQUNBV0lCVVFob0dBZ0FBaURrSC8vd054RFNrTElBa2dDU2dDRkVFQmFqWUNGQ0FKSUFrb0FneEJBV28yQWd3Z0VFRUVhaWdDQUNFQkRDTUxJQXdnQVVFRGRHb2lEaWdDQkNFUUlBc2dBVUVDZEdvb0FnQWhEeUFBSUE0b0FnQWlGa0VBRUtxQWdJQUFJZzVCLy84RGNRMG5JQU5COUFCcUlBTkI5QUJxSUJZUWo0R0FnQUFpRGlBUFFRRnFJaE1Ram9HQWdBQWlGa0VCY1EwbUlBTkJOR29nRGlBUEVKQ0JnSUFBUVFGeERTVWdDUkNCZ1lDQUFDSU9RZi8vQTNGRkRTVU1Kd3NnRENBQlFRTjBhaUlPS0FJRUlROGdBQ0FPS0FJQVFRQVFxb0NBZ0FBaURrSC8vd054RFNZZ0N5QUJRUUowYWlnQ0FDRU9Ba0FnRDBVTkFDQVBJUUVnQUNBT1FRQVFob0dBZ0FBaURrSC8vd054UlEwaURDY0xJQUFnRGlBQ0VJYUJnSUFBSVE0TUpnc2dEQ0FCUVFOMGFpSU9LQUlBUVFKMEloWWdBeWdDb0FGcVFRUnFJUkFnRGlnQ0JDRVRJQU1vQW1BZ0Ztb29BZ0FoRmdKQUlBOGdBMEgwQUdvZ0FSQ05nWUNBQUVGL2FpSU9haTBBQUVIL0FIRkIxUUJIRFFBZ0FDQU9RUUVRaG9HQWdBQWlEa0gvL3dOeERTWUxBMEFDUUFKQUlCWkZEUUJCQVVGOElCWkJBVVliSVE0Q1FDQUtJQkFvQWdBaUQyb3RBQUJCZldwQi93RnhRUVJKRFFBZ0FDQVBJQTRRcW9DQWdBQWlEa0gvL3dOeERTa01BZ3NnQTBHNEFXb2dBMEgwQUdvZ0R4Q1JnWUNBQUNBQUlBTkJ1QUZxUVFFZ0RoQ1NnWUNBQUNJT1FmLy9BM0ZGRFFFTUtBc0NRQUpBSUFOQjlBQnFJQXNnQVVFQ2RHb29BZ0FpRGlBT1FRRnFFSTZCZ0lBQVFRRnhEUUFnQ1NBSktBSU1RUUZxTmdJTUlBQWdEa0VDRUlhQmdJQUFJZzVCLy84RGNRMHBJQWtRaklHQWdBQU1BUXNnQUNBT1FRRVFob0dBZ0FBaURrSC8vd054RFNnTElBa2dDU2dDRkVFQmFqWUNGQ0FKSUFrb0FneEJBV28yQWd3Z0V5RUJEQ0lMSUJCQkJHb2hFQ0FXUVg5cUlSWU1BQXNMUWFTT3dJQUFJUTRnQXlnQ21BRWhEd0pBQWtBQ1FBSkFJQU1vQW93QlFhclZxdFY2SUEwYklBRnFMUUFBUWR4K2FnNENBQUVEQ3lBREtBS1FBU0VPSUFNb0FwUUJJaFpCcXRXcTFYb2dEUnNnQVVFRGRHb2lFQ2dDQkNFVElCQW9BZ0FoRUNBRFFiZ0lha0VZYWlBRlFSaHFLQUlBTmdJQUlBTkJ1QWhxUVJCcUlBVkJFR29wQWdBM0F3QWdBMEc0Q0dwQkNHb2dCVUVJYWlrQ0FEY0RBQ0FEUWV3SWFpQUdRUWhxS1FJQU53SUFJQU5COUFocUlBWkJFR29vQWdBMkFnQWdBeUFGS1FJQU53TzRDQ0FESUEwMkF1QUlJQU1nRHpZQzNBZ2dBeUFXTmdMWUNDQURJQTQyQXRRSUlBTWdCaWtDQURjQzVBZ2dBeUFPUWFyVnF0VjZJQTBiSUFGQkFuUnFLQUlBTmdMNEJ5QURJQkEyQXZ3SElBTWdFellDaUFnZ0EwS3ExYXJWQ2pjQ2dBZ2dBMEdZQm1vZ0EwRzRDR29nQTBINEIyb1FrNEdBZ0FBZ0EwR1lCbW9oRGd3QkN5QURLQUtRQVNFV0lBTW9BcUFCSVE0Z0F5Z0NsQUVpRUVHcTFhclZlaUFOR3lBQlFRTjBhaUlUS0FJQUlSVWdFeWdDQkNFVElBTkJ1QWhxUVFocUlBVkJDR29wQWdBM0F3QWdBMEc0Q0dwQkVHb2dCVUVRYWlrQ0FEY0RBQ0FEUWJnSWFrRVlhaUFGUVJocUtBSUFOZ0lBSUFNZ0JTa0NBRGNEdUFnZ0F5QU9OZ0xrQ0NBRElBMDJBdUFJSUFNZ0R6WUMzQWdnQXlBUU5nTFlDQ0FESUJZMkF0UUlJQTRnRTBFQ2RHb2lEMEVJYWlnQ0FDRVRJQThvQWdBaEVDQVBRUVJxS0FJQUlROGdBMEc0Q0dwQk9Hb2dBMEgwQUdwQk9Hb3BBZ0EzQXdBZ0F5QURLUUtrQVRjRDZBZ2dGa0dxMWFyVmVpQU5HeUFCUVFKMGFpZ0NBQ0VXSUFOQmhBaHFJQThnRUdzMkFnQWdBeUFUTmdLSUNDQURJQTRnRUVFQ2RHbzJBb0FJSUFNZ0ZUWUMvQWNnQXlBV05nTDRCeUFEUVpnR2FpQURRYmdJYWlBRFFmZ0hhaENUZ1lDQUFDQURRWmdHYWlFT0N5QU9RUUU2QURRTElBNG9BakFoQnlBT0tBSXNJUXNnRGlnQ0tDRUJJQTRvQWlRaEV5QU9MUUFnSVFvZ0RpZ0NIQ0VJSUE0dEFCZ2hGaUFPS0FJVUlSQWdEaWdDRUNFTUlBNG9BZ3doRkNBT0tBSUVJUlVnRGlnQ0FDRVBJQU5CdUFocUlBVkJ3QUFRMm9HQWdBQWFJQU5CekFocUtBSUFJUkVnQXlnQ3dBZ2hCU0FBSUE5QkFSQ0dnWUNBQUNJT1FmLy9BM0VOSkFKQUFrQWdGa0gvQVhGRkRRQWdBQ0FRUVFFUWhvR0FnQUFpRGtILy93TnhEU1lnQUNBUVFRRnFRUUFRaG9HQWdBQWlEa0gvL3dOeERTWU1BUXNnQUNBUFFRRnFRUUFRaG9HQWdBQWlEa0gvL3dOeERTVUxJQVZCcXRXcTFYb2dFUnNoRmlBSklBa29BZ3hCQVdvMkFnd0NRQUpBQWtBQ1FBSkFBa0FnRkEwQUlBcEIvd0Z4UlEwQ0lBQWdGVUVCRUtxQWdJQUFJZzVCLy84RGNRMHFJQUFnQ0VGOWFrRUFFSWFCZ0lBQUlnNUIvLzhEY1EwcUlBQWdDRUYrYWtFQUVJYUJnSUFBSWc1Qi8vOERjUTBxSUFBZ0NFRi9ha0VCRUlhQmdJQUFJZzVCLy84RGNRMHFJQWhCQW1vaERBTkFJQUFnREVGK2FrRUFFSWFCZ0lBQUlnNUIvLzhEY1EwcklBeEJmMm9pRGlBV2FpMEFBRUgvQUhGQkVVWU5BaUFXSUF4cUxRQUFRZjhBY1VFUlJnMEVJQXhCQW1vaERDQUFJQTVCQVJDR2dZQ0FBQ0lPUWYvL0EzRU5Ld3dBQ3dzZ0FDQVZRUUlRcW9DQWdBQWlEa0gvL3dOeERTa2dDVUVDRUpTQmdJQUFJQU5CdUFocUlCVVFqNEdBZ0FBaUQwRUJhaUVPQWtBQ1FBSkFJQUVOQUNBQUlBNUJBaENHZ1lDQUFDSU9RZi8vQTNFTkxDQVBRUUpxSVE4TUFRc2dBQ0FPUVFFUWhvR0FnQUFpRGtILy93TnhEU3NnQ1NBSktBSU1RUUZxTmdJTUFrQURRQ0FUS0FJQUlSQWdBVUYvYWlJQlJRMEJJQk5CQkdvb0FnQWhEeUFBSUJCQkFCQ1ZnWUNBQUNJT1FmLy9BM0VOTFNBQUlBTkJ1QWhxSUE4UWpZR0FnQUJCZjJwQkFoQ0dnWUNBQUNJT1FmLy9BM0VOTFNBVFFRUnFJUk1nQUNBRFFiZ0lhaUFQRUkyQmdJQUFFSWVCZ0lBQUlnNUIvLzhEY1EwdERBQUxDeUFBSUJCQkF4Q1ZnWUNBQUNFT0FrQWdCdzBBSUFwQi93RnhEUUFnRGtILy93TnhEU3dNQWdzZ0RrSC8vd054RFNzZ0EwRzRDR29nRUJDUGdZQ0FBQ0VPSUFrUWpJR0FnQUFnRGtFQ2FpQU9RUUZxSWc0Z0ZpQU9haTBBQUVIL0FIRkJOMFliSVE4TEFrQWdCdzBBSUFBZ0QwRUNFSWFCZ0lBQUlnNUIvLzhEY1EwcklBOUJBV29oRGd3RkN5QUFJQTlCQVJDR2dZQ0FBQ0lPUWYvL0EzRU5LaUFKSUFrb0FneEJBV28yQWd3Q1FBTkFJQXNvQWdBaER5QUhRWDlxSWdkRkRRRWdDMEVFYWlnQ0FDRVFJQUFnRDBFQUVKYUJnSUFBSWc1Qi8vOERjUTBzSUFBZ0EwRzRDR29nRUJDTmdZQ0FBQ0lQUVg5cVFRSVFob0dBZ0FBaURrSC8vd054RFN3Z0MwRUVhaUVMSUFBZ0R4Q0hnWUNBQUNJT1FmLy9BM0VOTEF3QUN3c2dBQ0FQUVFNUWxvR0FnQUFoRGdKQUlBcEIvd0Z4UlEwQUlBNUIvLzhEY1EwcklBTkJ1QWhxSUE4UWo0R0FnQUFoRGlBSkVJeUJnSUFBSUE1QkFtb2dEa0VCYWlJT0lCWWdEbW90QUFCQi93QnhRVGRHR3lFT0RBVUxJQTVCLy84RGNRMHFDeUFKRUl5QmdJQUFJQWxCQkJDVWdZQ0FBQXdDQ3lBTVFYOXFJUXdNQVFzZ0FDQVZRUUFRcW9DQWdBQWlEa0gvL3dOeERTY0xJQWtRaklHQWdBQU1BUXNnQUNBT1FRRVFob0dBZ0FBaURrSC8vd054RFNVZ0NFRUNhaUVNQTBBQ1FDQU1RWDlxSWc4Z0Ztb3RBQUJCL3dCeFFSRkhEUUFnQ1VFRUVKU0JnSUFBSUFrUWpJR0FnQUFnQUNBTVFYNXFRUUlRaG9HQWdBQWlEa0gvL3dOeERTY2dERUYvYWlFTURBSUxBa0FnRmlBTWFpMEFBRUgvQUhGQkVVWU5BQ0FBSUF4QmZtcEJBQkNHZ1lDQUFDSU9RZi8vQTNFTkp5QU1RUUpxSVF3Z0FDQVBRUUVRaG9HQWdBQWlEa0gvL3dOeERTY01BUXNMSUFsQkJCQ1VnWUNBQUNBSkVJeUJnSUFBSUFBZ0RFRitha0VDRUlhQmdJQUFJZzVCLy84RGNRMGxDeUFBSUF3Z0FoQ0dnWUNBQUNFT0RDUUxRZnlOd0lBQUlRNGdBeWdDbUFFaER3SkFBa0FDUUFKQUlBTW9Bb3dCSWhaQnF0V3ExWG9nRFJzZ0FXb3RBQUJCakg5cURnSUFBUU1MSUFNb0FwQUJJUTRnQXlnQ2xBRWlFRUdxMWFyVmVpQU5HeUFCUVFOMGFpa0NBQ0VTSUFOQnVBaHFRUWhxSUFWQkNHb3BBZ0EzQXdBZ0EwRzRDR3BCRUdvZ0JVRVFhaWtDQURjREFDQURRZXdJYWlBR1FRaHFLUUlBTndJQUlBTkI5QWhxSUFaQkVHb29BZ0EyQWdBZ0F5QUZLUUlBTndPNENDQURJQTAyQXVBSUlBTWdEellDM0FnZ0F5QVFOZ0xZQ0NBRElBNDJBdFFJSUFNZ0ZqWUMwQWdnQXlBR0tRSUFOd0xrQ0NBRElBNUJxdFdxMVhvZ0RSc2dBVUVDZEdvb0FnQTJBdmdISUFNZ0VqY0MvQWNnQTBFQU5nS0VDQ0FEUVpnR2FpQURRYmdJYWlBRFFmZ0hhaENYZ1lDQUFDQURRWmdHYWlFT0RBRUxJQU1vQXBBQklRNGdBeWdDb0FFaEVDQURLQUtVQVNJVFFhclZxdFY2SUEwYklBRkJBM1JxSWhVb0FnQWhGQ0FWS0FJRUlSVWdBMEc0Q0dwQkNHb2dCVUVJYWlrQ0FEY0RBQ0FEUWJnSWFrRVFhaUFGUVJCcUtRSUFOd01BSUFNZ0JTa0NBRGNEdUFnZ0F5QVFOZ0xrQ0NBRElBMDJBdUFJSUFNZ0R6WUMzQWdnQXlBVE5nTFlDQ0FESUE0MkF0UUlJQU1nRmpZQzBBZ2dFQ0FWUVFKMGFpa0NBQ0VTSUFOQnVBaHFRVGhxSUFOQjlBQnFRVGhxS1FJQU53TUFJQU1nQXlrQ3BBRTNBK2dJSUE1QnF0V3ExWG9nRFJzZ0FVRUNkR29vQWdBaERpQURJQkkzQW9BSUlBTWdGRFlDL0FjZ0F5QU9OZ0w0QnlBRFFaZ0dhaUFEUWJnSWFpQURRZmdIYWhDWGdZQ0FBQ0FEUVpnR2FpRU9DeUFPUVFFNkFDUUxJQTRwQWdBaEVpQU9LUUlJSVJjZ0RpZ0NFQ0VQSUE0cEFoUWhHQ0FPS1FJY0lSa2dBMEhVQ0dwQ0FEY0NBQ0FEUWdBM0Fzd0lJQU1nR1RjQ3hBZ2dBMEVBTmdMQUNDQURJQmczQXJnSUlBTWdEellDN0FnZ0F5QVhOd0xrQ0NBRElCSTNBdHdJSUFBZ0EwRzRDR29nQWhDWWdZQ0FBQ0VPRENNTFFjeU53SUFBSVE0Z0F5Z0NtQUVoRHdKQUFrQUNRQUpBSUFNb0Fvd0JRYXJWcXRWNklBMGJJQUZxTFFBQVFZOS9hZzRDQUFFREN5QURRYmdJYWtFWWFpQUZRUmhxS0FJQU5nSUFJQU5CdUFocVFSQnFJQVZCRUdvcEFnQTNBd0FnQTBHNENHcEJDR29nQlVFSWFpa0NBRGNEQUNBRFFld0lhaUFHUVFocUtRSUFOd0lBSUFOQjlBaHFJQVpCRUdvb0FnQTJBZ0FnQXlBRktRSUFOd080Q0NBRElBWXBBZ0EzQXVRSUlBTWdEellDM0FnZ0F5QURLQUtVQVNJT05nTFlDQ0FESUFNb0FwQUJJZzgyQXRRSUlBTWdEVFlDNEFnZ0QwR3ExYXJWZWlBTkd5QUJRUUowYWlnQ0FDRVBJQTVCcXRXcTFYb2dEUnNnQVVFRGRHb2lEaWdDQkNFV0lBTkIrQWRxUVFocVFRRTJBZ0FnQTBFQU5nS0lDQ0FESUJZMkFvUUlJQU1nRGpZQy9BY2dBeUFQTmdMNEJ5QURRWmdHYWlBRFFiZ0lhaUFEUWZnSGFoQ1pnWUNBQUNBRFFaZ0dhaUVPREFFTElBTW9BcEFCSVE0Z0F5Z0NvQUVpRmlBREtBS1VBU0lWUWFyVnF0VjZJQTBiSUFGQkEzUnFJaEFvQWdRaUZFSC8vLy8vQjNFaUVTQVFLQUlBSWdwcVFRSjBhaUlMS0FJQUlRd2dBMEdrQVdvaEVFRUFJUk1DUUNBVVFYOUtEUUFnQzBFRWFpZ0NBQ0VUQ3lBRFFiZ0lha0VZYWlBRlFSaHFLQUlBTmdJQUlBTkJ1QWhxUVJCcUlBVkJFR29wQWdBM0F3QWdBMEc0Q0dwQkNHb2dCVUVJYWlrQ0FEY0RBQ0FEUWZBSWFpQVFRUWhxS1FJQU53TUFJQU1nRHpZQzNBZ2dBeUFWTmdMWUNDQURJQVVwQWdBM0E3Z0lJQU1nRUNrQ0FEY0Q2QWdnQXlBT05nTFVDQ0FESUEwMkF1QUlJQU1nRmpZQzVBZ2dEa0dxMWFyVmVpQU5HeUFCUVFKMGFpZ0NBQ0VPSUFOQitBZHFRUWhxSUJFMkFnQWdBeUFPTmdMNEJ5QURJQllnQ2tFQ2RHbzJBdndISUFNZ0REWUNoQWdnQXlBVE5nS0lDQ0FEUVpnR2FpQURRYmdJYWlBRFFmZ0hhaENaZ1lDQUFDQURRWmdHYWlFT0N5QU9RUUU2QUN3TElBNG9BaWdoQ2lBT0tBSWtJUThnRGkwQUdDRVdJQTRvQWhRaEV5QU9LQUlRSVF3Z0RpZ0NEQ0VMSUE0b0FnZ2hGU0FPS0FJRUlRRWdEaWdDQUNFUUlBQkJJR29vQWdBaEZDQUFRUnhxS0FJQUlSRWdBRUVVYWlnQ0FDRUZBa0FnRGkwQUlFVU5BQ0FBSUE0b0Fod2lCMEVBUVFFUWlvR0FnQUFpRGtILy93TnhEU01nQUNBSFFRRnFRUUVRaG9HQWdBQWlEa0gvL3dOeERTTUxBa0FnRmtIL0FYRkZEUUFnQUNBVFFRRVFob0dBZ0FBaURrSC8vd054RFNNTElBQWdFRUVCRUlhQmdJQUFJZzVCLy84RGNRMGlJQUFnRUVFQmFpQUJJQlZCQVJDYWdZQ0FBQ0lPUWYvL0EzRU5JaUFGUWFyVnF0VjZJQlFiSVJaQmZ5RVRBa0FnRHlBUlFRQWdGQnNpRUU4TkFDQVBJUTREUUNBUUlBNUdEUUVDUUNBV0lBNXFMUUFBUWY4QWNVRUpSdzBBSUE1QmYyb2hFd3dDQ3lBT1FRRnFJUTRNQUFzTEFrQUNRQ0FXSUJOcUxRQUFRZjhBY1VFM1J3MEFJQWtnQ1NnQ0hFRUJhallDSENBSklBa29BZ3hCQVdvMkFnd2dBQ0FQUVg5cVFRSVFob0dBZ0FBaURrSC8vd054RFNRZ0ZpQVBhaTBBQUNFT0EwQUNRQ0FPUWY4QWNVRXNSdzBBSUFBZ0QwRUFFSWFCZ0lBQUlnNUIvLzhEY1EwbUlBOUJBV29oRHdzZ0FDQVBRUUJCQUJDS2dZQ0FBQ0lPUWYvL0EzRU5KUUpBQWtBZ0ZpQVBRUUZxSWhCcUxRQUFJZzVCL3dCeFFUZEdEUUFnRUNFUERBRUxJQUFnRUVFQ0VJYUJnSUFBSWc1Qi8vOERjUTBtSUJZZ0QwRUNhaUlQYWkwQUFDRU9DeUFPUWY4QWNVRUpSdzBBQ3lBSkVJeUJnSUFBREFFTElBQWdEMEYvYWtFQUVJYUJnSUFBSWc1Qi8vOERjUTBqSUJZZ0Qyb3RBQUFoRGdOQUFrQWdEa0gvQUhGQkxFY05BQ0FBSUE5QkFCQ0dnWUNBQUNJT1FmLy9BM0VOSlNBUFFRRnFJUThMSUFBZ0QwRUFRUUFRaW9HQWdBQWlEa0gvL3dOeERTUUNRQUpBSUJZZ0QwRUJhaUlRYWkwQUFDSU9RZjhBY1VFM1JnMEFJQkFoRHd3QkN5QUFJQkJCQVJDR2dZQ0FBQ0lPUWYvL0EzRU5KU0FXSUE5QkFtb2lEMm90QUFBaERnc2dEa0gvQUhGQkNVY05BQXNMSUFBZ0R5QUxJQXBCbUpMQWdBQWdEQ0FDRUp1QmdJQUFJUTRNSWd0QmtJM0FnQUFoRGlBREtBS1lBU0VQQWtBQ1FBSkFBa0FDUUNBREtBS01BVUdxMWFyVmVpQU5HeUFCYWkwQUFFR1NmMm9PQXdBQkFnUUxJQU1vQXBBQklRNGdBeWdDbEFFaUZrR3ExYXJWZWlBTkd5QUJRUU4wYWlJUUtBSUVJUk1nRUNnQ0FDRVFJQU5CdUFocVFSaHFJQVZCR0dvb0FnQTJBZ0FnQTBHNENHcEJFR29nQlVFUWFpa0NBRGNEQUNBRFFiZ0lha0VJYWlBRlFRaHFLUUlBTndNQUlBTkI3QWhxSUFaQkNHb3BBZ0EzQWdBZ0EwSDBDR29nQmtFUWFpZ0NBRFlDQUNBRElBVXBBZ0EzQTdnSUlBTWdEVFlDNEFnZ0F5QVBOZ0xjQ0NBRElCWTJBdGdJSUFNZ0RqWUMxQWdnQXlBR0tRSUFOd0xrQ0NBRElBNUJxdFdxMVhvZ0RSc2dBVUVDZEdvb0FnQTJBdmdISUFNZ0VEWUMvQWNnQTBFQU5nS0FDQ0FESUJNMkFvUUlJQU5CQURZQ2lBZ2dBMEdZQm1vZ0EwRzRDR29nQTBINEIyb1FuSUdBZ0FBZ0EwR1lCbW9oRGd3Q0N5QURLQUtRQVNFT0lBTW9BcUFCSVJZZ0F5Z0NsQUVpRUVHcTFhclZlaUFOR3lBQlFRTjBhaUlUS0FJQUlSVWdFeWdDQkNFVElBTkJ1QWhxUVFocUlBVkJDR29wQWdBM0F3QWdBMEc0Q0dwQkVHb2dCVUVRYWlrQ0FEY0RBQ0FEUWJnSWFrRVlhaUFGUVJocUtBSUFOZ0lBSUFNZ0JTa0NBRGNEdUFnZ0F5QVdOZ0xrQ0NBRElBMDJBdUFJSUFNZ0R6WUMzQWdnQXlBUU5nTFlDQ0FESUE0MkF0UUlJQllnRTBFQ2RHb3BBZ0FoRWlBRFFiZ0lha0U0YWlBRFFmUUFha0U0YWlrQ0FEY0RBQ0FESUFNcEFxUUJOd1BvQ0NBT1FhclZxdFY2SUEwYklBRkJBblJxS0FJQUlRNGdBMEVBTmdLSUNDQURJQkkzQW9BSUlBTWdGVFlDL0FjZ0F5QU9OZ0w0QnlBRFFaZ0dhaUFEUWJnSWFpQURRZmdIYWhDY2dZQ0FBQ0FEUVpnR2FpRU9EQUVMSUFNb0FwQUJJUTRnQXlnQ29BRWhGaUFES0FLVUFTSVFRYXJWcXRWNklBMGJJQUZCQTNScUloTW9BZ0FoRlNBVEtBSUVJUk1nQTBHNENHcEJDR29nQlVFSWFpa0NBRGNEQUNBRFFiZ0lha0VRYWlBRlFSQnFLUUlBTndNQUlBTkJ1QWhxUVJocUlBVkJHR29vQWdBMkFnQWdBeUFGS1FJQU53TzRDQ0FESUJZMkF1UUlJQU1nRFRZQzRBZ2dBeUFQTmdMY0NDQURJQkEyQXRnSUlBTWdEallDMUFnZ0ZpQVRRUUowYWlJUEtRSUFJUklnRDBFSWFpZ0NBQ0VQSUFOQnVBaHFRVGhxSUFOQjlBQnFRVGhxS1FJQU53TUFJQU1nQXlrQ3BBRTNBK2dJSUE1QnF0V3ExWG9nRFJzZ0FVRUNkR29vQWdBaERpQURJQTgyQW9nSUlBTWdFamNDZ0FnZ0F5QVZOZ0w4QnlBRElBNDJBdmdISUFOQm1BWnFJQU5CdUFocUlBTkIrQWRxRUp5QmdJQUFJQU5CbUFacUlRNExJQTVCQVRvQU9Bc2dBMEg4QW1vZ0RrRThFTnFCZ0lBQUdpQUFJQU5CL0FKcUlBSVFtSUdBZ0FBaERnd2hDMEhzak1DQUFDRU9JQU1vQXBnQklROENRQUpBQWtBQ1FDQURLQUtNQVVHcTFhclZlaUFOR3lBQmFpMEFBRUdYZjJvT0JBQUFBUUVEQ3lBRFFiZ0lha0VZYWlBRlFSaHFLQUlBTmdJQUlBTkJ1QWhxUVJCcUlBVkJFR29wQWdBM0F3QWdBMEc0Q0dwQkNHb2dCVUVJYWlrQ0FEY0RBQ0FEUWV3SWFpQUdRUWhxS1FJQU53SUFJQU5COUFocUlBWkJFR29vQWdBMkFnQWdBeUFGS1FJQU53TzRDQ0FESUFZcEFnQTNBdVFJSUFNZ0R6WUMzQWdnQXlBREtBS1VBU0lPTmdMWUNDQURJQU1vQXBBQklnODJBdFFJSUFNZ0RUWUM0QWdnRGtHcTFhclZlaUFOR3lBQlFRTjBhaUlPS0FJQUlSWWdEMEdxMWFyVmVpQU5HeUFCUVFKMGFpZ0NBQ0VQSUFNZ0RpZ0NCRFlDaEFnZ0F5QVBOZ0tBQ0NBRElBNDJBdmdISUFNZ0ZrRUFSellDL0FjZ0EwR1lCbW9nQTBHNENHb2dBMEg0QjJvZ0FSQ2RnWUNBQUNBRFFaZ0dhaUVPREFFTElBTW9BcEFCSVJZZ0F5Z0NvQUVoRGlBREtBS1VBU0lRUWFyVnF0VjZJQTBiSUFGQkEzUnFJaE1vQWdRaEZTQVRLQUlBSVJNZ0EwRzRDR3BCQ0dvZ0JVRUlhaWtDQURjREFDQURRYmdJYWtFUWFpQUZRUkJxS1FJQU53TUFJQU5CdUFocVFSaHFJQVZCR0dvb0FnQTJBZ0FnQXlBRktRSUFOd080Q0NBRElBNDJBdVFJSUFNZ0RUWUM0QWdnQXlBUE5nTGNDQ0FESUJBMkF0Z0lJQU1nRmpZQzFBZ2dEaUFUUVFKMGFpSVFLQUlBSVE4Z0VFRUVhaWdDQUNFUUlBTkJ1QWhxUVRocUlBTkI5QUJxUVRocUtRSUFOd01BSUFNZ0F5a0NwQUUzQStnSUlCWkJxdFdxMVhvZ0RSc2dBVUVDZEdvb0FnQWhGaUFESUJVMkFvUUlJQU1nRmpZQ2dBZ2dBeUFRSUE5ck5nTDhCeUFESUE0Z0QwRUNkR28yQXZnSElBTkJtQVpxSUFOQnVBaHFJQU5CK0FkcUlBRVFuWUdBZ0FBZ0EwR1lCbW9oRGdzZ0RrRUJPZ0FnQ3lBT0tBSWNJUlFnRGlnQ0ZDRVdJQTRvQWhBaER5QU9MUUFNSVJFZ0RpZ0NDQ0VMSUE0dEFBUWhFeUFPS0FJQUlSVWdEaWdDR0NFUUlBTkJtQVpxSUFWQndBQVEyb0dBZ0FBYUlBTkJ1QWhxSUFWQndBQVEyb0dBZ0FBYUlBTkI0QWhxS0FJQUlRa2dBeWdDMEFnaEJTQURLQUxBQ0VHcTFhclZlaUFEUWN3SWFpZ0NBQnNpQnlBUVFYOXFJZ3BxTFFBQUlRd0NRQUpBSUJZTkFFRUFJUUVNQVFzZ0EwR1lCbW9nQTBHNENHb2dEeWdDQUJDTmdZQ0FBQ0FRRUpDQmdJQUFJUUVMQWtBZ0UwSC9BWEZGRFFBZ0FDQVZRUUVRaG9HQWdBQWlEa0gvL3dOeERTRUxBa0FDUUNBV0RRQWdBQ0FLUVFFUWhvR0FnQUFpRGtILy93TnhEU0lNQVFzQ1FDQVdRUUZISUFGeVFRRnhEUUFnQUNBUEtBSUFRUUVRcW9DQWdBQWlEa0gvL3dOeERTSU1BUXNDUUNBTVFmOEFjVUUzUmlBQmNrRUJjUTBBSUJaQkFXb2hGZ05BSUJaQmYyb2lGa1VOQWlBUEtBSUFJUTRnRDBFRWFpRVBJQUFnRGtFRUVLcUFnSUFBSWc1Qi8vOERjVVVOQUF3akN3c2dBQ0FQSUJZUW5vR0FnQUFpRGtILy93TnhEU0VMSUFBZ0VFRUJJQVZCcXRXcTFYb2dDUnNnRkdvdEFBQkJpQUZISWhZZ0VVSC9BWEVpRHhzUWhvR0FnQUFpRGtILy93TnhEU0FDUUNBUFJRMEFJQUFnQzBGL2FrRUFFSWFCZ0lBQUlnNUIvLzhEY1EwaEFrQWdCeUFMYWkwQUFFSC9BSEZCTEVZaUQwVU5BQ0FBSUF0QkFCQ0dnWUNBQUNJT1FmLy9BM0VOSWdzZ0FDQUxJQTlxSWc5QkFFRUFFSXFCZ0lBQUlnNUIvLzhEY1EwaEFrQWdCeUFQUVFGcUlnNXFMUUFBUWY4QWNVRTNSdzBBSUFBZ0RrRUJFSWFCZ0lBQUlnNUIvLzhEY1EwaUlBQWdEMEVDYWtFQVFRQVFpb0dBZ0FBaURrSC8vd054RFNJZ0FDQVBRUU5xSUJZUWhvR0FnQUFpRGtILy93TnhEU0lNQVFzZ0FDQU9JQllRaG9HQWdBQWlEa0gvL3dOeERTRUxJQUFnRkNBQ0VLcUFnSUFBSVE0TUlBc2dBeWdDb0FFaUZDQU1JQUZCQTNScUlnNG9BZ1JCQW5ScUlnOG9BZ0FoRXlBUFFRUnFLQUlBSVJVZ0N5QUJRUUowYWlnQ0FDRVBJQU5COUFCcUlBNG9BZ0FpRmhDUGdZQ0FBQ0VRSUFBZ0QwRUJFSWFCZ0lBQUlnNUIvLzhEY1EwZklBQWdEMEVCYWtFQUVJYUJnSUFBSWc1Qi8vOERjUTBmSUFBZ0ZrRUFFS3FBZ0lBQUlnNUIvLzhEY1EwZklBQWdFRUVCYWtFQkVJYUJnSUFBSWc1Qi8vOERjUTBmSUFrZ0NTZ0NIRUVCYWpZQ0hDQUpJQWtvQWd4QkFXbzJBZ3dnRUVFQ2FpRU9Ba0FDUUNBVklCTkhEUUFnQUNBT1FRQVFob0dBZ0FBaURrSC8vd054UlEwQkRDRUxJQUFnRGtFQ0VJYUJnSUFBSWc1Qi8vOERjUTBnSUFBZ0ZDQVRRUUowYWlBVklCTnJFSjZCZ0lBQUlnNUIvLzhEY1EwZ0N5QUpFSXlCZ0lBQUlBQWdBMEgwQUdvZ0FSQ1BnWUNBQUNBQ0VJYUJnSUFBSVE0TUh3c2dBMEd3QW1vZ0EwSDBBR29nQTBHc0Ftb2dBUkNmZ1lDQUFDQURRZmdIYWlBRlFjQUFFTnFCZ0lBQUdpQURRWmdHYWlBRlFjQUFFTnFCZ0lBQUdnSkFBa0FnQTBHc0Jtb29BZ0FOQUVHcTFhclZlaUVQUWFyVnF0VjZJUUVNQVFzZ0EwR2tCbW9vQWdBaEFTQURLQUtnQmlFUEN5QVBJQU5CMkFKcUtBSUFJaFpCQVdvaUVHb3RBQUFoRXlBQUlCWkJBUkNHZ1lDQUFDRU9Ba0FDUUNBVFFmOEFjVUVDUncwQUlBNUIvLzhEY1EwZ0lBQWdFRUVBUVFBUWlvR0FnQUFpRGtILy93TnhEU0FnRmtFQ2FpRVFEQUVMSUE1Qi8vOERjUTBmQ3lBRFFaZ0dhaUFEUWR3Q2FpZ0NBQ0lIRUkyQmdJQUFJZzVCZm1vZ0RrRi9haUlVSUE4Z0ZHb2lDeTBBQUVIL0FIRkJDRVliSVJVZ0FTQVVRUUowYWlnQ0FDRU9Ba0FnQTBIb0Ftb29BZ0FpRVVVTkFDQURRWmdHYWlBUkVJMkJnSUFBUVgxcUloWWdGU0FCSUJaQkFuUnFLQUlBSWhZZ0Rra2lFeHNoRlNBV0lBNGdFeHNoRGdzQ1FDQURRZXdDYWlnQ0FDSUZSUTBBSUFOQm1BWnFJQVVRallHQWdBQkJmV29pRmlBVklBRWdGa0VDZEdvb0FnQWlGaUFPU1NJVEd5RVZJQllnRGlBVEd5RU9Dd0pBSUFOQjhBSnFLQUlBSWdwRkRRQWdBMEdZQm1vZ0NoQ05nWUNBQUVGOWFpSVdJQlVnQVNBV1FRSjBhaWdDQUNJV0lBNUpJaE1iSVJVZ0ZpQU9JQk1iSVE0TEFrQWdBMEgwQW1vb0FnQWlERVVOQUNBRFFaZ0dhaUFNRUkyQmdJQUFRWDFxSWhZZ0ZTQUJJQlpCQW5ScUtBSUFJQTVKR3lFVkN3SkFBa0FDUUFKQUlCVWdEMnBCZjJvdEFBQkIvd0J4UVRkR0RRQWdBMEg0QjJvZ0VDQVZFSkNCZ0lBQVFRRnhEUUFnQUNBUVFRQVFob0dBZ0FBaURrSC8vd054RFNJZ0EwSGdBbW9vQWdBaENVRUFJUUVNQVFzZ0NTQUpLQUlNUVFGcU5nSU1JQUFnRUVFQ0VJYUJnSUFBSWc1Qi8vOERjUTBoSUFOQjRBSnFLQUlBSVFoQkFDRUJEQUVMQTBBQ1FBSkFBa0FnRHlBUVFRRnFJaFpxTFFBQUloTkIvd0J4SWc1Qk4wWU5BQUpBSUE1Qnh3QkhEUUFnRmlFUUlBQWdGa0VDRUlhQmdJQUFJZzVCLy84RGNRMGxEQVFMQWtBZ0RrSE9BRVlOQUNBT1FkVUFSZzBDSUE1QjR3QkdEUUlnRGtFUlJnMEdJQTVCSEVjTkF5QUFJQlpCQUJDR2dZQ0FBQ0lPUWYvL0EzRU5KUXdHQ3lBV0lSQWdBQ0FXUVFBUWhvR0FnQUFpRGtILy93TnhSUTBERENRTElCWWhFQ0FBSUJaQkFSQ0dnWUNBQUNJT1FmLy9BM0ZGRFFJTUl3c2dBQ0FXUVFFUWhvR0FnQUFpRGtILy93TnhEU0lnRHlBUVFRSnFJaFpxTFFBQUlSTUxBa0FDUUFKQUlCTkIvd0J4UVFKR0RRQWdGaUVRREFFTElBOGdGa0VCYWlJUWFpMEFBRUgvQUhGQk5FY05BU0FBSUJaQkFFRUFFSXFCZ0lBQUlnNUIvLzhEY1EwaklBQWdFRUVCRUlhQmdJQUFJZzVCLy84RGNRMGpJQThnRmtFQ2FpSVFhaTBBQUNFVEN5QVRRZjhBY1VIT0FFY05BQ0FBSUJCQkFCQ0dnWUNBQUNJT1FmLy9BM0ZGRFFFTUlnc2dBQ0FKSUFGQkFuUnFLQUlBSWhaQkFCQ3FnSUNBQUNJT1FmLy9BM0VOSVNBQlFRRnFJUUVnQTBHWUJtb2dGaENQZ1lDQUFDRVFEQUFMQ3dOQUFrQWdEeUFRUVFGcUloWnFMUUFBSWhOQi93QnhJZzVCeHdCSERRQWdGaUVRSUFBZ0ZrRUNFSWFCZ0lBQUlnNUIvLzhEY1EwaERBRUxBa0FDUUFKQUlBNUJ6Z0JHRFFBZ0RrSFZBRVlOQVNBT1FlTUFSZzBCQWtBZ0RrRVJSZzBBSUE1QkhFY05BeUFBSUJaQkF4Q0dnWUNBQUNJT1FmLy9BM0VOSkFzZ0NSQ01nWUNBQUF3RUN5QUFJQlpCQXhDR2dZQ0FBQ0lPUWYvL0EzRU5JaUFRUVFKcUlnNGdGaUFQSUE1cUxRQUFRZjhBY1VFM1Joc2hFQXdDQ3lBQUlCWkJBUkNHZ1lDQUFDSU9RZi8vQTNFTklTQVBJQkJCQW1vaUZtb3RBQUFoRXdzQ1FBSkFJQk5CL3dCeFFRSkhEUUFnRHlBV1FRRnFJaEJxTFFBQVFmOEFjVUUwUncwQklBQWdGa0VBUVFBUWlvR0FnQUFpRGtILy93TnhEU0lnQUNBUVFRRVFob0dBZ0FBaURrSC8vd054RFNJZ0R5QVdRUUpxSWhacUxRQUFJUk1MSUJOQi93QnhRYzRBUncwQUlBQWdGa0VERUlhQmdJQUFJZzVCLy84RGNRMGhJQlpCQVdvaURpQVdJQThnRG1vdEFBQkIvd0J4UVRkR0d5RVFEQUVMSUFBZ0NDQUJRUUowYWlnQ0FDSVdRUU1RcW9DQWdBQWlEa0gvL3dOeERTQWdBMEdZQm1vZ0ZoQ1BnWUNBQUNJT1FRRnFJaFlnRGlBUElCWnFMUUFBUWY4QWNVRTNSaHNoRUNBQlFRRnFJUUVNQUFzTElBQWdGVUVCRUlhQmdJQUFJZzVCLy84RGNRMGVBa0FnRVVVTkFDQURRWmdHYWlBUkVJMkJnSUFBSVE4Z0EwR1lCbW9nRVJDUGdZQ0FBQ0VXSUFBZ0QwRitha0VBRUlhQmdJQUFJZzVCLy84RGNRMGZJQUFnRDBGL2FrRUFFSWFCZ0lBQUlnNUIvLzhEY1EwZklBQWdFVUVBRUtxQWdJQUFJZzVCLy84RGNRMGZJQUFnRmtFQmFrRUJFSWFCZ0lBQUlnNUIvLzhEY1EwZkN3SkFJQVZGRFFBZ0EwR1lCbW9nQlJDTmdZQ0FBQ0VQSUFOQm1BWnFJQVVRajRHQWdBQWhGaUFBSUE5QmZtcEJBQkNHZ1lDQUFDSU9RZi8vQTNFTkh5QUFJQTlCZjJwQkFCQ0dnWUNBQUNJT1FmLy9BM0VOSHlBQUlBVkJBQkNxZ0lDQUFDSU9RZi8vQTNFTkh5QUFJQlpCQVdwQkFSQ0dnWUNBQUNJT1FmLy9BM0VOSHdzQ1FDQUtSUTBBSUFOQm1BWnFJQW9RallHQWdBQWhEeUFEUVpnR2FpQUtFSStCZ0lBQUlSWWdBQ0FQUVg1cVFRQVFob0dBZ0FBaURrSC8vd054RFI4Z0FDQVBRWDlxUVFBUWhvR0FnQUFpRGtILy93TnhEUjhnQUNBS1FRQVFxb0NBZ0FBaURrSC8vd054RFI4Z0FDQVdRUUZxUVFFUWhvR0FnQUFpRGtILy93TnhEUjhMSUFOQnVBaHFJQU5CbUFacVFjQUFFTnFCZ0lBQUdpQURRU0JxSUFOQnVBaHFJQU5CbUFacVFSeHFLQUlBUWFyVnF0VjZJQU5Cd0FacUtBSUFHeUFNUVFKMGFpZ0NBQkNnZ1lDQUFFSG9uc0NBQUVFR0lBTW9BaUFnQXlnQ0pCQ0tnSUNBQUNFT0FrQWdERVVOQUNBRFFiQUNha0VjYWkwQUFFRUFSeUFPY1EwQUlBTkJtQVpxSUF3UWpZR0FnQUFoRHlBRFFaZ0dhaUFNRUkrQmdJQUFJUllnQUNBUFFYNXFRUUFRaG9HQWdBQWlEa0gvL3dOeERSOGdBQ0FQUVg5cVFRQVFob0dBZ0FBaURrSC8vd054RFI4Z0FDQU1RUUFRcW9DQWdBQWlEa0gvL3dOeERSOGdBQ0FXUVFGcVFRRVFob0dBZ0FBaURrSC8vd054RFI4TEFrQWdDeTBBQUVIL0FIRkJDRWNOQUNBQUlCUkJBQkNHZ1lDQUFDSU9RZi8vQTNFTkh3c2dBQ0FISUFJUXFvQ0FnQUFoRGd3ZUN5QUFJQXNnQVVFQ2RHb29BZ0FnQXlnQ29BRWdEQ0FCUVFOMGFpSU9LQUlBSWc5QkFuUnFJQTRvQWdRZ0Qyc2dBaENoZ1lDQUFDRU9EQjBMQWtBZ0RDQUJRUU4wYWlJT0tBSUFJZzhOQUNBQUlBc2dBVUVDZEdvb0FnQkJxdFdxMVhwQkFDQUNFS0dCZ0lBQUlRNE1IUXNnQ3lBQlFRSjBhaWdDQUNFV0FrQWdEaWdDQkNJT0RRQWdBeUFQTmdLZ0FpQUFJQllnQTBHZ0FtcEJBU0FDRUtHQmdJQUFJUTRNSFFzZ0F5QU9OZ0tvQWlBRElBODJBcVFDSUFBZ0ZpQURRYVFDYWtFQ0lBSVFvWUdBZ0FBaERnd2NDeUFES0FLWUFTRU9Ba0FDUUFKQUFrQUNRQUpBQWtBQ1FDQURLQUtNQVNJUFFhclZxdFY2SUEwYklBRnFMUUFBSWhaQjhYNXFEZ3dCQVFNREFnSUVCQVlHQlFVQUMwSDhpOENBQUNFT0lCWU5CaUFEUWJnSWFpQUZRY0FBRU5xQmdJQUFHaUFEUVJocUlBTkJ1QWhxRUt1QWdJQUFJQU5CQVRvQXVBWWdBMEVBTmdLMEJpQURRZ0EzQXFRR0lBTkNBRGNEbUFZZ0F5QURLUU1ZTndLc0JpQURRWmdHYWlFT0RBWUxJQU1vQXBBQklSWWdBeWdDb0FFaEVDQURLQUtVQVNJVlFhclZxdFY2SUEwYklBRkJBM1JxSWhNb0FnUWhGQ0FUS0FJQUlSTWdBMEc0Q0dwQkVHb2dCVUVRYWlrQ0FEY0RBQ0FEUWJnSWFrRUlhaUFGUVFocUtRSUFOd01BSUFNZ0JTa0NBRGNEdUFnZ0F5QVFOZ0xrQ0NBRElBMDJBdUFJSUFNZ0RqWUMzQWdnQXlBVk5nTFlDQ0FESUJZMkF0UUlJQU1nRHpZQzBBZ2dBMEc0Q0dwQk9Hb2dBMEgwQUdwQk9Hb3BBZ0EzQXdBZ0F5QURLUUtrQVRjRDZBZ2dGa0dxMWFyVmVpQU5HeUFCUVFKMGFpZ0NBQ0VPSUFOQitBZHFRUkJxSUJRZ0UyczJBZ0FnQXlBT05nTDRCeUFEUVFBMkFvd0lJQU1nRUNBVFFRSjBhallDaEFnZ0EwSUFOd0w4QnlBRFFaZ0dhaUFEUWJnSWFpQURRZmdIYWhDaWdZQ0FBQ0FEUVFFNkFMZ0dJQU5CbUFacUlRNE1CUXNnQXlnQ2tBRWhFQ0FES0FLZ0FTRVdJQU1vQXBRQkloTkJxdFdxMVhvZ0RSc2dBVUVEZEdvaUZTZ0NBQ0VVSUJVb0FnUWhGU0FEUWJnSWFrRUlhaUFGUVFocUtRSUFOd01BSUFOQnVBaHFRUkJxSUFWQkVHb3BBZ0EzQXdBZ0F5QUZLUUlBTndPNENDQURJQlkyQXVRSUlBTWdEVFlDNEFnZ0F5QU9OZ0xjQ0NBRElCTTJBdGdJSUFNZ0VEWUMxQWdnQXlBUE5nTFFDQ0FXSUJWQkFuUnFJZzhvQWdBaERpQVBRUVJxS0FJQUlROGdBMEc0Q0dwQk9Hb2dBMEgwQUdwQk9Hb3BBZ0EzQXdBZ0F5QURLUUtrQVRjRDZBZ2dFRUdxMWFyVmVpQU5HeUFCUVFKMGFpZ0NBQ0VRSUFOQitBZHFRUkJxSUE4Z0RtczJBZ0FnQXlBVU5nS01DQ0FESUJZZ0RrRUNkR28yQW9RSUlBTkNBRGNDL0FjZ0F5QVFOZ0w0QnlBRFFaZ0dhaUFEUWJnSWFpQURRZmdIYWhDaWdZQ0FBQ0FEUVFFNkFMZ0dJQU5CbUFacUlRNE1CQXNnQXlnQ2tBRWhGaUFES0FLVUFTSVZRYXJWcXRWNklBMGJJQUZCQTNScUloTW9BZ0FoRUNBVEtBSUVJUk1nQTBHNENHcEJDR29nQlVFSWFpa0NBRGNEQUNBRFFiZ0lha0VRYWlBRlFSQnFLUUlBTndNQUlBTkI3QWhxSUFaQkNHb3BBZ0EzQWdBZ0EwSDBDR29nQmtFUWFpZ0NBRFlDQUNBRElCTTJBcHdDSUFNZ0VEWUNtQUlnQXlBRktRSUFOd080Q0NBRElBMDJBdUFJSUFNZ0RqWUMzQWdnQXlBVk5nTFlDQ0FESUJZMkF0UUlJQU1nRHpZQzBBZ2dBeUFHS1FJQU53TGtDQ0FXUWFyVnF0VjZJQTBiSUFGQkFuUnFLQUlBSVE0Z0EwRUFOZ0tNQ0NBRFFmZ0hha0VRYWtFQ0lCQkJBRWNnRXhzMkFnQWdBeUFPTmdMNEJ5QURRZ0EzQXZ3SElBTWdBMEdZQW1vMkFvUUlJQU5CbUFacUlBTkJ1QWhxSUFOQitBZHFFS0tCZ0lBQUlBTkJBVG9BdUFZZ0EwR1lCbW9oRGd3REN5QURLQUtnQVNFV0lBTW9BcEFCSWhWQnF0V3ExWG9nRFJzZ0FVRUNkR29vQWdBaEVDQURLQUtVQVNJVVFhclZxdFY2SUEwYklBRkJBM1JxSWhNb0FnUWhFU0FUS0FJQUlSTWdBMEc0Q0dwQkVHb2dCVUVRYWlrQ0FEY0RBQ0FEUWJnSWFrRUlhaUFGUVFocUtRSUFOd01BSUFOQitBZHFRUWhxUVFFNkFBQWdBMEg0QjJwQkVHb2dFU0FUYXpZQ0FDQURJQVVwQWdBM0E3Z0lJQU1nRmpZQzVBZ2dBeUFOTmdMZ0NDQURJQTQyQXR3SUlBTWdGRFlDMkFnZ0F5QVZOZ0xVQ0NBRElBODJBdEFJSUFOQnVBaHFRVGhxSUFOQjlBQnFRVGhxS1FJQU53TUFJQU5CQURZQ2pBZ2dBeUFRTmdMNEJ5QURJQkJCQW1vMkF2d0hJQU1nQXlrQ3BBRTNBK2dJSUFNZ0ZpQVRRUUowYWpZQ2hBZ2dBMEdZQm1vZ0EwRzRDR29nQTBINEIyb1Fvb0dBZ0FBZ0EwRUJPZ0M0QmlBRFFaZ0dhaUVPREFJTElBTW9BcUFCSVJZZ0F5Z0NrQUVpRTBHcTFhclZlaUFOR3lBQlFRSjBhaWdDQUNFUUlBTW9BcFFCSWhWQnF0V3ExWG9nRFJzZ0FVRURkR29pRkNnQ0FDRVJJQlFvQWdRaEZDQURRYmdJYWtFSWFpQUZRUWhxS1FJQU53TUFJQU5CdUFocVFSQnFJQVZCRUdvcEFnQTNBd0FnQXlBRktRSUFOd080Q0NBRElCWTJBdVFJSUFNZ0RUWUM0QWdnQXlBT05nTGNDQ0FESUJVMkF0Z0lJQU1nRXpZQzFBZ2dBeUFQTmdMUUNDQVdJQlJCQW5ScUlnOG9BZ0FoRGlBUFFRUnFLQUlBSVE4Z0EwRzRDR3BCT0dvZ0EwSDBBR3BCT0dvcEFnQTNBd0FnQXlBREtRS2tBVGNENkFnZ0EwSDRCMnBCRUdvZ0R5QU9hellDQUNBRFFmZ0hha0VJYWtFQk9nQUFJQU1nRVRZQ2pBZ2dBeUFXSUE1QkFuUnFOZ0tFQ0NBRElCQkJBbW8yQXZ3SElBTWdFRFlDK0FjZ0EwR1lCbW9nQTBHNENHb2dBMEg0QjJvUW9vR0FnQUFnQTBFQk9nQzRCaUFEUVpnR2FpRU9EQUVMSUFNb0FwQUJJUllnQXlnQ2xBRWlGVUdxMWFyVmVpQU5HeUFCUVFOMGFpSVRLQUlBSVJBZ0F5QVRLQUlFSWhRMkFwd0NJQU1nRURZQ21BSWdGa0dxMWFyVmVpQU5HeUFCUVFKMGFpZ0NBQ0VUSUFOQnVBaHFRUkJxSUFWQkVHb3BBZ0EzQXdBZ0EwRzRDR3BCQ0dvZ0JVRUlhaWtDQURjREFDQURRZXdJYWlBR1FRaHFLUUlBTndJQUlBTkI5QWhxSUFaQkVHb29BZ0EyQWdBZ0EwSDRCMnBCQ0dwQkFUb0FBQ0FEUVFBMkFvd0lJQU5CK0FkcVFSQnFRUUlnRUVFQVJ5QVVHellDQUNBRElBVXBBZ0EzQTdnSUlBTWdEVFlDNEFnZ0F5QU9OZ0xjQ0NBRElCVTJBdGdJSUFNZ0ZqWUMxQWdnQXlBUE5nTFFDQ0FESUFZcEFnQTNBdVFJSUFNZ0V6WUMrQWNnQXlBVFFRSnFOZ0w4QnlBRElBTkJtQUpxTmdLRUNDQURRWmdHYWlBRFFiZ0lhaUFEUWZnSGFoQ2lnWUNBQUNBRFFRRTZBTGdHSUFOQm1BWnFJUTRMSUE0b0Fod2hDaUFPS0FJWUlSRWdEaWdDRkNFVUlBNHRBQkFoRUNBT0tBSU1JUXdnRGlnQ0NDRVdJQTR0QUFRaER5QU9LQUlBSVE0Z0EwR1lCbW9nQlVIQUFCRGFnWUNBQUJvZ0EwRzRDR29nQlVIQUFCRGFnWUNBQUJvZ0EwSE1DR29vQWdBaEV5QURLQUxBQ0NFVkFrQWdEMFVOQUNBQUlBNUJBUkNHZ1lDQUFDSU9RZi8vQTNFTkhBc0NRQUpBSUJWQnF0V3ExWG9nRXhzaUZTQVdhaTBBQUVIL0FIRWlEa0hhQUVZTkFFRUNJUk1nRGtIdUFFY05BU0FVSVE4Z0VTRU9BMEFDUUNBT0RRQkJBU0VUREFNTElBTkJrQVZxSUFOQnVBaHFJQThvQWdBUXJJQ0FnQUFDUUNBRExRQ3NCVVVOQUNBRExRQ29CVUVCY1VVTkF3c2dEMEVFYWlFUElBNUJmMm9oRGd3QUN3dEJBQ0VUQ3dKQUFrQWdFRUgvQVhGRkRRQWdBQ0FXUVFBUWhvR0FnQUFpRGtILy93TnhEUjBnQUNBTVFYOXFRUUFRaG9HQWdBQWlEa0gvL3dOeERSMGdBQ0FNUVFBUWhvR0FnQUFpRGtILy93TnhEUjBnREVFQmFpRU9Ba0FnQ2tVTkFDQUFJQTVCQUJDR2dZQ0FBQ0lPUWYvL0EzRU5IaUFBSUFwQkFCQ3FnSUNBQUNJT1FmLy9BM0VOSGlBQUlBTkJ1QWhxSUFvUWo0R0FnQUFpRDBFQmFrRUFFSWFCZ0lBQUlnNUIvLzhEY1EwZUlBQWdEMEVDYWtFQkVJYUJnSUFBSWc1Qi8vOERjUTBlSUE5QkEyb2hEd3dDQ3lBQUlBNUJBUkNHZ1lDQUFDSU9RZi8vQTNFTkhTQU1RUUpxSVE4TUFRc0NRQ0FLUlEwQUlBQWdGa0VBRUlhQmdJQUFJZzVCLy84RGNRMGRJQUFnRmtFQmFrRUFFSWFCZ0lBQUlnNUIvLzhEY1EwZElBQWdDa0VBRUtxQWdJQUFJZzVCLy84RGNRMGRJQUFnQTBHNENHb2dDaENQZ1lDQUFDSVBRUUZxUVFFUWhvR0FnQUFpRGtILy93TnhEUjBnRDBFQ2FpRVBEQUVMSUFBZ0ZrRUJFSWFCZ0lBQUlnNUIvLzhEY1EwY0lCWkJBV29oRHdzZ0EwRzRDR29nQVJDUGdZQ0FBQ0VRQWtBQ1FBSkFBa0FDUUNBUkRRQWdDU0FKS0FJY1FRRnFOZ0ljSUFrZ0NTZ0NERUVCYWpZQ0RDQVZJQTlCQVdvaUZtb3RBQUJCL3dCeFFjZ0FSdzBCSUFBZ0QwRUNFSWFCZ0lBQUlnNUIvLzhEY1EwZ0lBQWdGaENwZ0lDQUFDSU9RZi8vQTNGRkRRTU1JQXNnRlNBUVFYOXFJaFpxTFFBQVFmOEFjVUUzUmcwQklBTkJtQVpxSUE4Z0VCQ1FnWUNBQUVFQmNRMEJJQU5CbUFacUlBOGdFQkNqZ1lDQUFFRUJjUTBCSUJVZ0QwRUJhaUlCYWlJT0xRQUFRZjhBY1VISUFFWU5BU0FXSUFGcklSWURRQUpBSUJZTkFDQVJRUUZxSVJZZ0ZDRU9Ba0FEUUNBV1FYOXFJaFpGRFFFZ0EwSDRCMm9nQTBHNENHb2dEaWdDQUJDc2dJQ0FBQ0FPUVFScUlRNGdBeTBBbEFoRkRRVU1BQXNMSUFBZ0QwRUJFSWFCZ0lBQUlnNUIvLzhEY1EwaElCRkJBV29oRHdOQUlBOUJmMm9pRDBVTkJpQVVLQUlBSVE0Z0ZFRUVhaUVVSUFBZ0V5QU9RUUVRcllDQWdBQWlEa0gvL3dOeFJRMEFEQ0lMQ3lBV1FYOXFJUllnRGkwQUFDRUJJQTVCQVdvaERpQUJRZjhBY1VISEFFWU5BZ3dBQ3dzZ0FDQVBRUUFRaG9HQWdBQWlEa0gvL3dOeERSNE1BUXNnQ1NBSktBSWNRUUZxTmdJY0lBa2dDU2dDREVFQmFqWUNEQ0FBSUE5QkFoQ0dnWUNBQUNJT1FmLy9BM0VOSFFKQUlCVWdEMEVCYWlJT2FpMEFBRUgvQUhGQnlBQkhEUUFnQUNBT0VLbUFnSUFBSWc1Qi8vOERjUTBlQ3lBREtBTFFDRUdxMWFyVmVpQURRZUFJYWlnQ0FCc2hGVUVBSVE4RFFDQVJJQTlHRFFFZ0ZDZ0NBQ0VXQWtBZ0QwVU5BQ0FBSUJZUXJvQ0FnQUFpRGtILy93TnhEUjhMQWtBQ1FDQVZJQlpxTFFBQVFlVUFha0gvQVhGQkEwa05BQ0FBSUJNZ0ZrRUNFSzJBZ0lBQUlnNUIvLzhEY1EwZ0RBRUxJQUFnRXlBV1FRTVFyWUNBZ0FBaURrSC8vd054RFI4TElCUkJCR29oRkNBUFFRRnFJUThNQUFzTElBa1FqSUdBZ0FBTElBQWdFQ0FDRUlhQmdJQUFJUTRNR3d0QjVJdkFnQUFoRGdKQUFrQUNRQUpBQWtBZ0F5Z0NqQUZCcXRXcTFYb2dEUnNnQVdvdEFBQkJ0bjlxRGdNQUFRSUVDeUFES0FLUUFVR3ExYXJWZWlBTkd5QUJRUUowYWlnQ0FDRVdJQU1vQXBRQlFhclZxdFY2SUEwYklBRkJBM1JxSWc0b0FnUWhFQ0FESUE0b0FnQWlEellDdUFoQkFDRVRJQU5CdUFocUlRNUJBQ0VWREFJTElBTW9BcEFCUWFyVnF0VjZJQTBiSUFGQkFuUnFLQUlBSVJZZ0F5Z0NsQUZCcXRXcTFYb2dEUnNnQVVFRGRHb2lEaWdDQkNFUUlBTWdEaWdDQUNJUE5nSzRDQ0FES0FLZ0FTQVFRUUowYWlJT0tBSUFJUkFnRGtFRWFpZ0NBQ0VUUVFBaEZTQURRYmdJYWlFT0RBRUxJQU1vQXBBQlFhclZxdFY2SUEwYklBRkJBblJxS0FJQUlSWWdBeWdDbEFGQnF0V3ExWG9nRFJzZ0FVRURkR29pRGlnQ0JDRVFJQU1nRGlnQ0FDSVBOZ0s0Q0NBREtBS2dBU0FRUVFKMGFpSU9LQUlBSVJBZ0RrRUlhaWdDQUNFVklBNUJCR29vQWdBaEV5QURRYmdJYWlFT0N5QU9RUUU2QUJRZ0RpQVZOZ0lRSUE0Z0V6WUNEQ0FPSUJBMkFnZ2dEaUFXTmdJRUN5QU9LQUlRSVJVZ0RpZ0NEQ0VXSUE0b0FnUWhGQ0FPS0FJSUlSQWdBMEc0Q0dvZ0JVSEFBQkRhZ1lDQUFCcEJBU0VUQWtBQ1FBSkFJQkFnQXlnQzBBaEJxdFdxMVhvZ0EwSGdDR29vQWdBYklnNXFMUUFBRUtTQmdJQUFRUUZ4UlEwQVFRQWhDVUVCSVJFZ0ZnMENEQUVMQWtBZ0ZnMEFRUUFoRXd3QkMwRUFJUWtnRGlBV2FpMEFBQkNrZ1lDQUFFRUJjU0lUSVJFTUFRc2dGVUVBUnlFUlFRRWhDUXNnQUNBUFFRQVFxb0NBZ0FBaURrSC8vd054RFJvZ0FDQVVRUUFRaG9HQWdBQWlEa0gvL3dOeERSb2dBMEc0Q0dvZ0VCQ1BnWUNBQUNFUElBQWdFQ0FURUtxQWdJQUFJZzVCLy84RGNRMGFJQUFnRDBFQmFpQVJFSWFCZ0lBQUlnNUIvLzhEY1EwYUFrQWdDUTBBSUFBZ0ZpQVZRUUJIRUtxQWdJQUFJZzVCLy84RGNRMGJDd0pBSUJWRkRRQWdBQ0FEUWJnSWFpQVZFSTJCZ0lBQVFYOXFRUUFRaG9HQWdBQWlEa0gvL3dOeERSc2dBQ0FWUVFBUXFvQ0FnQUFpRGtILy93TnhEUnNMSUFBZ0EwRzRDR29nQVJDUGdZQ0FBQ0FDRUlhQmdJQUFJUTRNR2d0QnlJdkFnQUFoRGlBREtBS1lBU0VQQWtBQ1FBSkFBa0FnQXlnQ2pBRkJxdFdxMVhvZ0RSc2dBV290QUFCQm9YOXFEZ2dCQVFFQkFBQUFBQU1MSUFNb0FwQUJJUllnQXlnQ29BRWhEaUFES0FLVUFTSVFRYXJWcXRWNklBMGJJQUZCQTNScUloTW9BZ0FoRlNBVEtBSUVJUk1nQTBHNENHcEJDR29nQlVFSWFpa0NBRGNEQUNBRFFiZ0lha0VRYWlBRlFSQnFLUUlBTndNQUlBTkJ1QWhxUVJocUlBVkJHR29vQWdBMkFnQWdBeUFGS1FJQU53TzRDQ0FESUE0MkF1UUlJQU1nRFRZQzRBZ2dBeUFQTmdMY0NDQURJQkEyQXRnSUlBTWdGallDMUFnZ0RpQVRRUUowYWlJUUtBSUFJUThnRUVFRWFpZ0NBQ0VRSUFOQnVBaHFRVGhxSUFOQjlBQnFRVGhxS1FJQU53TUFJQU1nQXlrQ3BBRTNBK2dJSUJaQnF0V3ExWG9nRFJzZ0FVRUNkR29vQWdBaEZpQURRWVFJYWlBUUlBOXJOZ0lBSUFNZ0RpQVBRUUowYWpZQ2dBZ2dBeUFWTmdMOEJ5QURJQlkyQXZnSElBTkJtQVpxSUFOQnVBaHFJQU5CK0FkcUVLV0JnSUFBSUFOQm1BWnFJUTRNQVFzZ0F5Z0NrQUVoRGlBREtBS1VBU0lRUWFyVnF0VjZJQTBiSUFGQkEzUnFJaFlvQWdBaEV5QVdLQUlFSVJZZ0EwRzRDR3BCQ0dvZ0JVRUlhaWtDQURjREFDQURRYmdJYWtFUWFpQUZRUkJxS1FJQU53TUFJQU5CdUFocVFSaHFJQVZCR0dvb0FnQTJBZ0FnQTBIc0NHb2dCa0VJYWlrQ0FEY0NBQ0FEUWZRSWFpQUdRUkJxS0FJQU5nSUFJQU1nQlNrQ0FEY0R1QWdnQXlBV05nS1VBaUFESUEwMkF1QUlJQU1nRHpZQzNBZ2dBeUFRTmdMWUNDQURJQTQyQXRRSUlBTWdCaWtDQURjQzVBZ2dEa0dxMWFyVmVpQU5HeUFCUVFKMGFpZ0NBQ0VPSUFOQmhBaHFJQlpCQUVjMkFnQWdBeUFPTmdMNEJ5QURJQk0yQXZ3SElBTWdBMEdVQW1vMkFvQUlJQU5CbUFacUlBTkJ1QWhxSUFOQitBZHFFS1dCZ0lBQUlBTkJtQVpxSVE0TElBNUJBVG9BR0FzZ0RpZ0NEQ0VXSUE0b0FnZ2hFQ0FPS0FJRUlROGdEaWdDQUNFVEFrQWdEaTBBRkVVTkFDQUFJQTRvQWhCQkFSQ0dnWUNBQUNJT1FmLy9BM0VOR2dzZ0FDQVBRUUFRcW9DQWdBQWlEa0gvL3dOeERSa2dBQ0FUSUJBZ0ZpQUNFSnFCZ0lBQUlRNE1HUXRCdEl2QWdBQWhEZ0pBQWtBQ1FBSkFBa0FDUUNBREtBS01BVUdxMWFyVmVpQU5HeUFCYWkwQUFFR3BmMm9PQ0FBQUFRRUNBZ01EQlFzZ0F5Z0NsQUZCcXRXcTFYb2dEUnNnQVVFRGRHb2lEaWdDQUNFV0lBTWdEaWdDQkNJT05nS01BaUFESUFNb0FwQUJRYXJWcXRWNklBMGJJQUZCQW5ScUtBSUFJZzgyQXJnSUlBNUJBRWNoRUNBRFFZd0NhaUVUSUFOQnVBaHFJUTRNQXdzZ0F5Z0NsQUZCcXRXcTFYb2dEUnNnQVVFRGRHb2lEeWdDQUNFT0lBTWdEeWdDQkNJUU5nS1FBaUFESUE0MkFvd0NJQU1nQXlnQ2tBRkJxdFdxMVhvZ0RSc2dBVUVDZEdvb0FnQWlEellDdUFoQkFDRVdRUUlnRGtFQVJ5QVFHeUVRSUFOQmpBSnFJUk1nQTBHNENHb2hEZ3dDQ3lBREtBS1VBVUdxMWFyVmVpQU5HeUFCUVFOMGFpSU9LQUlFSVJZZ0RpZ0NBQ0VPSUFNZ0F5Z0NrQUZCcXRXcTFYb2dEUnNnQVVFQ2RHb29BZ0FpRHpZQ3VBZ2dGaUFPYXlFUUlBTW9BcUFCSUE1QkFuUnFJUk5CQUNFV0lBTkJ1QWhxSVE0TUFRc2dBeWdDbEFGQnF0V3ExWG9nRFJzZ0FVRURkR29pRGlnQ0FDRVdJQTRvQWdRaERpQURJQU1vQXBBQlFhclZxdFY2SUEwYklBRkJBblJxS0FJQUlnODJBcmdJSUFNb0FxQUJJaE1nRGtFQ2RHb2lEa0VFYWlnQ0FDQU9LQUlBSWc1cklSQWdFeUFPUVFKMGFpRVRJQU5CdUFocUlRNExJQTVCQVRvQUVDQU9JQlkyQWd3Z0RpQVFOZ0lJSUE0Z0V6WUNCQXNnRGlnQ0RDRVdJQTRvQWdnaEV5QU9LQUlFSVJBZ0EwR1lCbW9nQlVIQUFCRGFnWUNBQUJvZ0EwRzRDR29nQlVIQUFCRGFnWUNBQUJvZ0EwSE1DR29vQWdBaEZTQURLQUxBQ0NFVUFrQUNRQ0FXRFFBZ0FDQVBRWDlxUVFBUWhvR0FnQUFpRGtILy93TnhSUTBCREJvTElBQWdGa0VBRUtxQWdJQUFJZzVCLy84RGNRMFpDd0pBQWtBZ0V3MEFJQWtnQ1NnQ0hFRUJhallDSENBSklBa29BZ3hCQVdvMkFnd2dBQ0FQUVFBUWhvR0FnQUFpRGtILy93TnhEUm9nQ1JDTWdZQ0FBQ0FQUVFGcUlSWU1BUXNDUUFKQUFrQWdBMEc0Q0dvZ0FSQ1BnWUNBQUNJV0lCUkJxdFdxMVhvZ0ZSdHFRWDlxTFFBQVFmOEFjVUUzUmcwQUlBTkJtQVpxSUE4Z0ZoQ1FnWUNBQUVFQmNVVU5BUXNnQ1NBSktBSWNRUUZxTmdJY0lBa2dDU2dDREVFQmFqWUNEQ0FBSUE5QkFoQ0dnWUNBQUNJT1FmLy9BM0VOR3lBQUlBOUJBV3BCQUJDR2dZQ0FBQ0lPUWYvL0EzRU5HeUFBSUE5QkFtcEJBVUVCRUlxQmdJQUFJZzVCLy84RGNRMGJJQU1nQXlnQzBBaEJxdFdxMVhvZ0EwSGdDR29vQWdBYklnRWdFQ2dDQUNJVmFpMEFBRUdJQVVjaURqb0ErQWNnQUNBUFFRTnFJQTRRaG9HQWdBQWlEa0gvL3dOeERSc2dBQ0FWUVFNUXBvR0FnQUFpRGtILy93TnhEUnNnRUVFRWFpRVBBMEFnRTBGL2FpSVRSUTBDSUFBZ0EwRzRDR29nRHlnQ0FDSVZFSTJCZ0lBQUloQkJmV29pRkJDSGdZQ0FBQ0lPUWYvL0EzRU5IQ0FBSUJSQkFCQ0dnWUNBQUNJT1FmLy9BM0VOSENBQUlCQkJmbXBCQVVFQkVJcUJnSUFBSWc1Qi8vOERjUTBjSUFNZ0FTQVZhaTBBQUVHSUFVY2lEam9BK0FjZ0FDQVFRWDlxSUE0UWhvR0FnQUFpRGtILy93TnhEUndnRDBFRWFpRVBJQUFnRlVFREVLYUJnSUFBSWc1Qi8vOERjVVVOQUF3Y0N3c2dBQ0FQUVFFUWhvR0FnQUFpRGtILy93TnhEUm9nRTBFQmFpRVRBMEFnRTBGL2FpSVRSUTBDSUFBZ0EwRzRDR29nRUNnQ0FDSVZFSTJCZ0lBQUlnOUJmV3BCQUJDR2dZQ0FBQ0lPUWYvL0EzRU5HeUFBSUE5QmZtcEJBVUVCRUlxQmdJQUFJZzVCLy84RGNRMGJJQUFnRDBGL2FrRUJFSWFCZ0lBQUlnNUIvLzhEY1EwYklCQkJCR29oRUNBQUlCVkJCQkNtZ1lDQUFDSU9RZi8vQTNGRkRRQU1Hd3NMSUFrUWpJR0FnQUFMSUFBZ0ZpQUNFSWFCZ0lBQUlRNE1HQXRCb0l2QWdBQWhEZ0pBQWtBQ1FBSkFBa0FDUUNBREtBS01BVUdxMWFyVmVpQU5HeUFCYWkwQUFFR3hmMm9PQ0FBQUFRRUNBZ01EQlFzZ0F5Z0NsQUZCcXRXcTFYb2dEUnNnQVVFRGRHb2lEaWdDQUNFV0lBTWdEaWdDQkNJT05nS0VBaUFESUFNb0FwQUJRYXJWcXRWNklBMGJJQUZCQW5ScUtBSUFJZzgyQXJnSUlBNUJBRWNoRUNBRFFZUUNhaUVUSUFOQnVBaHFJUTRNQXdzZ0F5Z0NsQUZCcXRXcTFYb2dEUnNnQVVFRGRHb2lEeWdDQUNFT0lBTWdEeWdDQkNJUU5nS0lBaUFESUE0MkFvUUNJQU1nQXlnQ2tBRkJxdFdxMVhvZ0RSc2dBVUVDZEdvb0FnQWlEellDdUFoQkFDRVdRUUlnRGtFQVJ5QVFHeUVRSUFOQmhBSnFJUk1nQTBHNENHb2hEZ3dDQ3lBREtBS1VBVUdxMWFyVmVpQU5HeUFCUVFOMGFpSU9LQUlFSVJZZ0RpZ0NBQ0VPSUFNZ0F5Z0NrQUZCcXRXcTFYb2dEUnNnQVVFQ2RHb29BZ0FpRHpZQ3VBZ2dGaUFPYXlFUUlBTW9BcUFCSUE1QkFuUnFJUk5CQUNFV0lBTkJ1QWhxSVE0TUFRc2dBeWdDbEFGQnF0V3ExWG9nRFJzZ0FVRURkR29pRGlnQ0FDRVdJQTRvQWdRaERpQURJQU1vQXBBQlFhclZxdFY2SUEwYklBRkJBblJxS0FJQUlnODJBcmdJSUFNb0FxQUJJaE1nRGtFQ2RHb2lEa0VFYWlnQ0FDQU9LQUlBSWc1cklSQWdFeUFPUVFKMGFpRVRJQU5CdUFocUlRNExJQTVCQVRvQUVDQU9JQlkyQWd3Z0RpQVFOZ0lJSUE0Z0V6WUNCQXNnRGlnQ0RDRVdJQTRvQWdnaEV5QU9LQUlFSVJBZ0EwRzRBMm9nQlVIQUFCRGFnWUNBQUJvZ0EwSDRBMm9nQlVIQUFCRGFnWUNBQUJvZ0F5QUFLUUlBSWhJM0E3Z0VJQU5CakFScUtBSUFJUlVnQXlnQ2dBUWhBUUpBQWtBZ0ZnMEFJQUFnRDBGL2FrRUFFSWFCZ0lBQUlnNUIvLzhEY1VVTkFRd1pDeUFBSUJaQkFCQ3FnSUNBQUNJT1FmLy9BM0VOR0FzQ1FDQVREUUFnQ1NBSktBSWNRUUZxTmdJY0lBa2dDU2dDREVFQmFqWUNEQ0FBSUE5QkFCQ0dnWUNBQUNJT1FmLy9BM0VOR0NBSkVJeUJnSUFBSUFBZ0QwRUJhaUFDRUlhQmdJQUFJUTRNR0FzZ0EwSDRBMm9nRTBFQ2RDQVFha0Y4YWlnQ0FCQ1BnWUNBQUNJT1FRSnFJQTVCQVdvaUZDQVVJQUZCcXRXcTFYb2dGUnNpRFdvdEFBQkIvd0J4UVRkR0lnRWJJUXNDUUNBVFFRRkhEUUFnQTBINEEyb2dFQ2dDQUNJUkVJMkJnSUFBSVJZZ0FRMEFJQTBnRm1vdEFBQkIvd0J4UVFSR0RRQWdBeWdDeEFOQnF0V3ExWG9nQXlnQ3pBTWJJaFlnQzBFQ2RHb29BZ0FnRmlBT1FRSjBhaWdDQUNJV2F5RU9JQU1vQXJnRElCWnFJUllDUUFOQUlBNUZEUUVnRGtGL2FpRU9JQll0QUFBaEZTQVdRUUZxSVJZZ0ZVRXZSZzBDREFBTEN5QUFJQTlCQUJDR2dZQ0FBQ0lPUWYvL0EzRU5HQ0FBSUJGQkFCQ3FnSUNBQUNJT1FmLy9BM0VOR0NBQUlBc2dBaENHZ1lDQUFDRU9EQmdMSUFOQnVBTnFJQThnQ3hDUWdZQ0FBQ0VPSUFOQnVBTnFJQThnQ3hDamdZQ0FBQ0VXQWtBQ1FBSkFJQUVOQUNBT1FRRnhEUUFnRmtFQmNRMEFJQk5CQVVjTkFTQUFJQTlCQUJDR2dZQ0FBQ0lPUWYvL0EzRU5HaUFBSUJBb0FnQkJBQkNxZ0lDQUFDSU9RZi8vQTNFTkdnd0NDeUFKSUFrb0FoeEJBV28yQWh3Z0NTQUpLQUlNUVFGcU5nSU1JQUFnRDBFQ0VJYUJnSUFBSWc1Qi8vOERjUTBaSUFCQnpBQnFJUm9nQTBIcEIyb2hHeUFEUVpnR2FrSE1BR29oSENBRFFhUUdhaUVkUVFBaEhnTkFJQk1nSG1zaEZDQURRY1FFYWlBRFFiZ0VhaUFVSUFOQnVBTnFJQkFnSGtFQ2RHb2lBU0FVSUFzUXA0R0FnQUFpSDJvUW9vQ0FnQUFnQXk4QnpBUWlEZzBhSUFNb0FzUUVRUUFnQXlnQ3lBUWlJRUVDZEJEWmdZQ0FBQ0VFSUFNZ0VqY0R1QW9nQTBHNENHb2dBMEc0Q21vZ0ZCRFBnSUNBQUFKQUlBTXZBYndJSWc1RkRRQWdBMEc0QkdvZ0JDQWdFSTZBZ0lBQUlBNGhEZ3diQzBFQUlROGdBeWdDdUFoQkFDQVVFTm1CZ0lBQUlRZ2dCQ0FVUVFKMGFpRWhJQU5CdUFOcUlBRWdGQ0FMRUtlQmdJQUFJUW9nQVNFV1FRQWhFVUVBSVE0RFFBSkFBa0FDUUNBVUlBNUhEUUFnRkNFVkRBRUxJQTlGRFFFZ0EwSDRBMm9nRmlnQ0FCQ1BnWUNBQUNFVklBTkIwQVJxSUFOQitBTnFRY0FBRU5xQmdJQUFHaUFEUWRBRWFpQURRZmdEYWlBQktBSUFFSTJCZ0lBQUlCVVFqb0dBZ0FCQkFYRU5BU0FEUVpBRmFpQURRZmdEYWtIQUFCRGFnWUNBQUJvQ1FDQURRWkFGYWlBRFFmZ0RhaUFCSUJGQkFuUnFLQUlBRUkyQmdJQUFJQlVRam9HQWdBQkJBWEVOQUNBRFFiZ0RhaUFXSUJRZ0Qyb2dDeENuZ1lDQUFDRUtJQTRoRVFzZ0RTQVZRUUZxSWhWcUxRQUFRZjhBY1VFM1J3MEJJQU5CdUFOcUlCVVFxSUdBZ0FCQkFYRkZEUUVnRGlBS2EwRUJhaUVWQ3lBRElCSTNBdHdGSUFOQkFEWUMyQVVnQTBLcTFhclZDamNDMEFVZ0EwSGtCV29nQTBHNEJHb2dGVUVCYWhDaWdJQ0FBQUpBSUFNdkFld0ZJZzVGRFFBZ0EwSFFCV29RaDRDQWdBQWdBMEc0QkdvZ0NDQVVFSWlBZ0lBQUlBTkJ1QVJxSUFRZ0lCQ09nSUNBQUNBT0lRNE1IUXNnRlNBZWFpRWVRUUVoRGlBRFFRRTZBSlFHUVFBaEZpQURRUUEyQW93R0lBTkNBRGNDaEFZZ0EwS0FnSUNBd0FBM0F2d0ZJQU5DQURjQzlBVWdBMEVCT2dDUUJpQURJQUFwQWdBM0E1Z0dJQU1nQTBIUUJXbzJBdkFGSUFNZ0EwSHdCV28yQXFBR0lBTW9BdWdGSVNJZ0F5Z0M1QVVoQnlBZElBVkJ3QUFRMm9HQWdBQWFJQndnR2tIZ0FCRGFnWUNBQUJwQkFDRU1RUUFoRHdOQUlBd2hJeUFPSVNRZ0QwRUNkQ0VPSUJZaENnSkFBMEFnRlNBUFJnMEJJQUVnRG1vaUJpZ0NBQ0VSSUFjZ0Rtb2dBeWdDMUFVaUZqWUNBQUpBSUE5QkFXb2lEQ0FWVHcwQUFrQWdBMEdZQm1vZ0VVRUFFS3FBZ0lBQUlneEIvLzhEY1VVTkFDQURRYmdFYWlBSElDSVFqb0NBZ0FBZ0EwSFFCV29RaDRDQWdBQWdBMEc0QkdvZ0NDQVVFSWlBZ0lBQUlBTkJ1QVJxSUFRZ0lCQ09nSUNBQUNBTUlRNE1JUXNnQTBIRUIyb2dBeWdDMEFVZ0Ztb2dBeWdDMUFVZ0Ztc2lKVUVLRU9hQWdJQUFJQVFnRG1vZ0pUWUNBRUVBSVE0Z0NDQVBhaUFETFFESUJ5SW1RUUJIT2dBQVFRRWhGa0VBSVF3Z0QwRUJhaUluSVE4Z0pnMERJQ0VnSXlBZmNFRUNkR29pRGlBT0tBSUFJZzRnSlNBT0lDVkxHellDQUNBRFFmZ0RhaUFSRUkrQmdJQUFJUTRnQmtFRWFpZ0NBQ0VQSUFOQitBZHFJQU5CK0FOcVFjQUFFTnFCZ0lBQUdpQURRZmdIYWlBT1FRRnFJQU5CK0FOcUlBOFFqWUdBZ0FBUWpvR0FnQUFnSkhFaERpQWpRUUZxSVF3Z0NpQW1RUUJIY2lFV0lDY2hEd3dEQ3dKQUlBTkJtQVpxSUJGQkF4Q3FnSUNBQUNJUlFmLy9BM0ZGRFFBZ0EwRzRCR29nQnlBaUVJNkFnSUFBSUFOQjBBVnFFSWVBZ0lBQUlBTkJ1QVJxSUFnZ0ZCQ0lnSUNBQUNBRFFiZ0VhaUFFSUNBUWpvQ0FnQUFnRVNFT0RDQUxJQU5CekFkcUlBTW9BdEFGSUJacUlBTW9BdFFGSWhFZ0ZrRi9jMnBCQ2hEbWdJQ0FBQ0FFSUE1cUlCRWdGbXRCZm1vaUZqWUNBQ0FJSUE5cUlBb2dBeTBBMEFkQkFFZHlJZ3BCQVhFaUR6b0FBQUpBSUE4TkFDQWhJQ01nSDNCQkFuUnFJZzhnRHlnQ0FDSVBJQllnRHlBV1N4czJBZ0FMSUE1QkJHb2hEaUFNSVE4TUFBc0xDeUFISUJWQkFuUnFJQU1vQXRRRk5nSUFJQjlCZjJvaEpTQWtJQjlCQVVkeElTWkJBQ0VrUVFBaERnTkFBa0FDUUFKQUFrQUNRQ0FPSUJWR0RRQWdCeUFPUVFGcUloRkJBblFpREdvb0FnQWdCeUFPUVFKMElncHFLQUlBSWc5cklSWWdBeWdDMEFVZ0Qyb2hEeUFCSUFwcUtBSUFJUVlDUUNBSUlBNXFJaU10QUFBTkFDQURJQWsyQXRRSElBTkIxQWRxSUE4Z0ZoQ0VnWUNBQUNJT1FmLy9BM0VOQkF3RkN5QWJJQU12QU8wSE93QUFJQnRCQW1vZ0EwSHRCMnBCQW1vdEFBQTZBQUFnQTBFS09nRG9CeUFEUW9DQWdJQVFOd0xnQnlBRElCWTJBdHdISUFNZ0R6WUMyQWNnQXlBSk5nTHdCeUFEUVJCcUlBTkIyQWRxRUttQmdJQUFJQU5COEFkcUlBTW9BaEFnQXlnQ0ZCQ0VnWUNBQUNJT1FmLy9BM0VOQWtFQUlSWURRQ0FEUVFocUlBTkIyQWRxRUttQmdJQUFJQU1vQWdnaURrVU5CUUpBQWtBZ0RpQURLQUlNSWc5QnlKekFnQUJCQWhDSmdJQ0FBQ0FXY1VFQmNVVU5BQ0FKRUlHQmdJQUFJaFpCLy84RGNVVU5BU0FEUWJnRWFpQUhJQ0lRam9DQWdBQWdBMEhRQldvUWg0Q0FnQUFnQTBHNEJHb2dDQ0FVRUlpQWdJQUFJQU5CdUFScUlBUWdJQkNPZ0lDQUFDQVdJUTRNSlFzZ0NSQ0xnWUNBQUNJV1FmLy9BM0VOQXdzZ0F5QUpOZ0wwQnlBUFJTRVdJQU5COUFkcUlBNGdEeENFZ1lDQUFDSU9RZi8vQTNGRkRRQUxJQU5CdUFScUlBY2dJaENPZ0lDQUFDQURRZEFGYWhDSGdJQ0FBQ0FEUWJnRWFpQUlJQlFRaUlDQWdBQWdBMEc0QkdvZ0JDQWdFSTZBZ0lBQUlBNGhEZ3dpQ3lBRFFiZ0VhaUFISUNJUWpvQ0FnQUFnQTBIUUJXb1FoNENBZ0FBZ0EwRzRCR29nQ0NBVUVJaUFnSUFBSUFOQnVBUnFJQVFnSUJDT2dJQ0FBQ0FlSUJOSERRY2dDUkNNZ1lDQUFDQUFJQXNnQWhDR2dZQ0FBQ0VPRENFTElBTkJ1QVJxSUFjZ0loQ09nSUNBQUNBRFFkQUZhaENIZ0lDQUFDQURRYmdFYWlBSUlCUVFpSUNBZ0FBZ0EwRzRCR29nQkNBZ0VJNkFnSUFBSUJZaERnd2dDeUFEUWJnRWFpQUhJQ0lRam9DQWdBQWdBMEhRQldvUWg0Q0FnQUFnQTBHNEJHb2dDQ0FVRUlpQWdJQUFJQU5CdUFScUlBUWdJQkNPZ0lDQUFDQU9JUTRNSHdzZ0EwRzRCR29nQnlBaUVJNkFnSUFBSUFOQjBBVnFFSWVBZ0lBQUlBTkJ1QVJxSUFnZ0ZCQ0lnSUNBQUNBRFFiZ0VhaUFFSUNBUWpvQ0FnQUFnRGlFT0RCNExJQkVoRGlBUklCVlBEUUFnQVNBTWFpZ0NBQ0VXSUFOQitBTnFJQVlRajRHQWdBQkJBV29oRHdKQUlDUWdKVVlOQUNBakxRQUFEUUFnQ0NBUmFpMEFBQTBBQWtBZ0FDQVBRUUVRaG9HQWdBQWlEa0gvL3dOeFJRMEFJQU5CdUFScUlBY2dJaENPZ0lDQUFDQURRZEFGYWhDSGdJQ0FBQ0FEUWJnRWFpQUlJQlFRaUlDQWdBQWdBMEc0QkdvZ0JDQWdFSTZBZ0lBQUlBNGhEZ3dmQ3lBRUlBcHFLQUlBSVE0Z0lTQWtJQjl3UVFKMGFpZ0NBQ0VQSUFOQnVBaHFRU0JCZ0FJUTJZR0FnQUFhSUE4Z0Rtc2hEZ0pBQTBBZ0RrVU5BU0FESUFrMkFyZ0tJQTRnRGtHQUFpQU9RWUFDU1JzaUQyc2hEaUFEUWJnS2FpQURRYmdJYWlBUEVJU0JnSUFBSWc5Qi8vOERjVVVOQUFzZ0EwRzRCR29nQnlBaUVJNkFnSUFBSUFOQjBBVnFFSWVBZ0lBQUlBTkJ1QVJxSUFnZ0ZCQ0lnSUNBQUNBRFFiZ0VhaUFFSUNBUWpvQ0FnQUFnRHlFT0RCOExJQ1JCQVdvaEpDQVJJUTRNQVFzQ1FDQW1SUTBBSUJFaERpQUFJQTlCQVJDR2dZQ0FBQ0lQUWYvL0EzRkZEUUVnQTBHNEJHb2dCeUFpRUk2QWdJQUFJQU5CMEFWcUVJZUFnSUFBSUFOQnVBUnFJQWdnRkJDSWdJQ0FBQ0FEUWJnRWFpQUVJQ0FRam9DQWdBQWdEeUVPREI0TEFrQWdBQ0FQUVFJUWhvR0FnQUFpRGtILy93TnhSUTBBSUFOQnVBUnFJQWNnSWhDT2dJQ0FBQ0FEUWRBRmFoQ0hnSUNBQUNBRFFiZ0VhaUFJSUJRUWlJQ0FnQUFnQTBHNEJHb2dCQ0FnRUk2QWdJQUFJQTRoRGd3ZUMwRUFJU1FnRVNFT0lBQWdGaEN1Z0lDQUFDSVBRZi8vQTNGRkRRQUxJQU5CdUFScUlBY2dJaENPZ0lDQUFDQURRZEFGYWhDSGdJQ0FBQ0FEUWJnRWFpQUlJQlFRaUlDQWdBQWdBMEc0QkdvZ0JDQWdFSTZBZ0lBQUlBOGhEZ3djQ3lBV1FRUnFJUllnRDBGL2FpRVBJQTVCQVdvaERnd0FDd3NMSUFBZ0QwRUJFSWFCZ0lBQUlnNUIvLzhEY1EwWUlCTkJBV29oRHdOQUlBOUJmMm9pRDBVTkFTQVFLQUlBSVE0Z0VFRUVhaUVRSUFBZ0RrRUVFS3FBZ0lBQUlnNUIvLzhEY1VVTkFBd1pDd3NnQUNBVUlBSVFob0dBZ0FBaERnd1hDMEhraXNDQUFDRU9JQU1vQXBnQklROENRQUpBQWtBQ1FBSkFBa0FnQXlnQ2pBRWlGa0dxMWFyVmVpQU5HeUFCYWkwQUFFRzZmMm9PQkFBQkFnTUZDeUFES0FLUUFTRU9JQU1vQXBRQkloQkJxdFdxMVhvZ0RSc2dBVUVEZEdvaUV5Z0NBQ0VWSUJNb0FnUWhFeUFEUWJnSWFrRVFhaUFGUVJCcUtRSUFOd01BSUFOQnVBaHFRUWhxSUFWQkNHb3BBZ0EzQXdBZ0EwSHNDR29nQmtFSWFpa0NBRGNDQUNBRFFmUUlhaUFHUVJCcUtBSUFOZ0lBSUFNZ0JTa0NBRGNEdUFnZ0F5QU5OZ0xnQ0NBRElBODJBdHdJSUFNZ0VEWUMyQWdnQXlBT05nTFVDQ0FESUJZMkF0QUlJQU1nQmlrQ0FEY0M1QWdnRGtHcTFhclZlaUFOR3lBQlFRSjBhaWdDQUNFT0lBTkIrQWRxUVJCcVFnQTNBZ0FnQXlBT05nTDRCeUFESUJNMkFwQUlJQU1nRlRZQy9BY2dBMElBTndLQUNDQURRWmdHYWlBRFFiZ0lhaUFEUWZnSGFoQ3FnWUNBQUNBRFFaZ0dhaUVPREFNTElBTW9BcEFCSVE0Z0F5Z0NsQUVpRUVHcTFhclZlaUFOR3lBQlFRTjBhaUlUS0FJRUlSVWdFeWdDQUNFVElBTkJ1QWhxUVJCcUlBVkJFR29wQWdBM0F3QWdBMEc0Q0dwQkNHb2dCVUVJYWlrQ0FEY0RBQ0FEUWV3SWFpQUdRUWhxS1FJQU53SUFJQU5COUFocUlBWkJFR29vQWdBMkFnQWdBeUFGS1FJQU53TzRDQ0FESUEwMkF1QUlJQU1nRHpZQzNBZ2dBeUFRTmdMWUNDQURJQTQyQXRRSUlBTWdGallDMEFnZ0F5QUdLUUlBTndMa0NDQURJQTVCcXRXcTFYb2dEUnNnQVVFQ2RHb29BZ0EyQXZnSElBTWdFellDaEFnZ0F5QVZOZ0tRQ0NBRFFnQTNBdndISUFOQ0FEY0NpQWdnQTBHWUJtb2dBMEc0Q0dvZ0EwSDRCMm9RcW9HQWdBQWdBMEdZQm1vaERnd0NDeUFES0FLUUFTRU9JQU1vQXFBQklSQWdBeWdDbEFFaUUwR3ExYXJWZWlBTkd5QUJRUU4wYWlJVktBSUVJUlFnRlNnQ0FDRVZJQU5CdUFocVFRaHFJQVZCQ0dvcEFnQTNBd0FnQTBHNENHcEJFR29nQlVFUWFpa0NBRGNEQUNBRElBVXBBZ0EzQTdnSUlBTWdFRFlDNUFnZ0F5QU5OZ0xnQ0NBRElBODJBdHdJSUFNZ0V6WUMyQWdnQXlBT05nTFVDQ0FESUJZMkF0QUlJQkFnRlVFQ2RHb2lEMEVFYWlrQ0FDRVNJQThvQWdBaER5QURRYmdJYWtFNGFpQURRZlFBYWtFNGFpa0NBRGNEQUNBRElBTXBBcVFCTndQb0NDQU9RYXJWcXRWNklBMGJJQUZCQW5ScUtBSUFJUTRnQXlBVU5nS1FDQ0FEUWdBM0FvZ0lJQU1nRHpZQ2hBZ2dBeUFTTndMOEJ5QURJQTQyQXZnSElBTkJtQVpxSUFOQnVBaHFJQU5CK0FkcUVLcUJnSUFBSUFOQm1BWnFJUTRNQVFzZ0F5Z0NrQUVoRGlBREtBS2dBU0VRSUFNb0FwUUJJaE5CcXRXcTFYb2dEUnNnQVVFRGRHb2lGU2dDQkNFVUlCVW9BZ0FoRlNBRFFiZ0lha0VJYWlBRlFRaHFLUUlBTndNQUlBTkJ1QWhxUVJCcUlBVkJFR29wQWdBM0F3QWdBeUFGS1FJQU53TzRDQ0FESUJBMkF1UUlJQU1nRFRZQzRBZ2dBeUFQTmdMY0NDQURJQk0yQXRnSUlBTWdEallDMUFnZ0F5QVdOZ0xRQ0NBUUlCVkJBblJxSWc5QkJHb3BBZ0FoRWlBUFFReHFLUUlBSVJjZ0R5Z0NBQ0VQSUFOQnVBaHFRVGhxSUFOQjlBQnFRVGhxS1FJQU53TUFJQU1nQXlrQ3BBRTNBK2dJSUE1QnF0V3ExWG9nRFJzZ0FVRUNkR29vQWdBaERpQURJQTgyQW9RSUlBTWdGemNDaUFnZ0F5QVVOZ0tRQ0NBRElCSTNBdndISUFNZ0RqWUMrQWNnQTBHWUJtb2dBMEc0Q0dvZ0EwSDRCMm9RcW9HQWdBQWdBMEdZQm1vaERnc2dEa0VCT2dBNEN5QU9LQUl3SVJBZ0RpZ0NMQ0VISUE0b0FpZ2hEQ0FPS0FJa0lSWWdEaWdDSUNFVUlBNG9BaHdoRXlBT0tBSVlJUThnRGkwQUZDRUtJQTRvQWhBaEN5QU9MUUFNSVJFZ0RpZ0NDQ0VKSUE0dEFBUWhGU0FPS0FJQUlRRWdEaTBBTkNFT0lBTkJ1QWhxSUFWQndBQVEyb0dBZ0FBYUFrQUNRQUpBQWtBQ1FBSkFJQTVCQTNFT0JBQUJBd0lBQ3dKQUlBTW9Bc0FJUWFyVnF0VjZJQU5CekFocUtBSUFHeUFQYWkwQUFFSC9BSEZCTGtjTkFDQVBJQU5CMUFocUtBSUFRYXJWcXRWNklBTkI0QWhxS0FJQUd5QVFRUUowYWlnQ0FFWU5CUXNnQUNBUFFRQVFob0dBZ0FBaURrSC8vd054UlEwRERCc0xJQUFnRDBGL2FrRUFFSWFCZ0lBQUlRNENRQ0FXRFFBZ0RrSC8vd054RFJzZ0FDQVBRUUFRaG9HQWdBQWlEa0gvL3dOeERSc2dBQ0FQUVFGcVFRQVFob0dBZ0FBaURrSC8vd054UlEwRERCc0xJQTVCLy84RGNRMGFJQUFnRDBFQUVJYUJnSUFBSWc1Qi8vOERjUTBhSUFBZ0QwRUJha0VBRUlhQmdJQUFJZzVCLy84RGNRMGFJQUFnRmtFQUVLcUFnSUFBSWc1Qi8vOERjUTBhSUFBZ0EwRzRDR29nRmhDUGdZQ0FBRUVCYWtFQUVJYUJnSUFBSWc1Qi8vOERjVVVOQWd3YUN5QUFJQTlCZjJwQkFCQ0dnWUNBQUNJT1FmLy9BM0VOR1NBQUlBOUJBQkNHZ1lDQUFDSU9RZi8vQTNFTkdTQUFJQTlCQVdwQkFCQ0dnWUNBQUNJT1FmLy9BM0VOR1NBQUlBOUJBbXBCQUJDR2dZQ0FBQ0lPUWYvL0EzRkZEUUVNR1FzZ0FDQVBRUUFRaG9HQWdBQWhEZ0pBSUJZTkFDQU9RZi8vQTNFTkdTQUFJQTlCQVdwQkFCQ0dnWUNBQUNJT1FmLy9BM0ZGRFFFTUdRc2dEa0gvL3dOeERSZ2dBQ0FQUVFGcVFRQVFob0dBZ0FBaURrSC8vd054RFJnZ0FDQVdRUUFRcW9DQWdBQWlEa0gvL3dOeERSZ2dBQ0FEUWJnSWFpQVdFSStCZ0lBQVFRRnFRUUFRaG9HQWdBQWlEa0gvL3dOeERSZ0xBa0FnRlVIL0FYRkZEUUFnQUNBQlFRRVFob0dBZ0FBaURrSC8vd054RFJnTEFrQWdFMFVOQUNBQUlBTkJ1QWhxSUJNUWpZR0FnQUFpRDBGK2FrRUFFSWFCZ0lBQUlnNUIvLzhEY1EwWUlBQWdEMEYvYWtFQUVJYUJnSUFBSWc1Qi8vOERjUTBZSUFBZ0UwRUFFS3FBZ0lBQUlnNUIvLzhEY1EwWUFrQWdERVVOQUNBQUlBTkJ1QWhxSUF3UWpZR0FnQUJCZjJwQkFCQ0dnWUNBQUNJT1FmLy9BM0VOR1NBQUlBeEJBQkNxZ0lDQUFDSU9RZi8vQTNFTkdTQUFJQU5CdUFocUlBY1FqWUdBZ0FCQmYycEJBQkNHZ1lDQUFDSU9RZi8vQTNFTkdTQUFJQWRCQUJDcWdJQ0FBQ0lPUWYvL0EzRU5HU0FBSUFOQnVBaHFJQWNRajRHQWdBQkJBV3BCQVJDR2dZQ0FBQ0lPUWYvL0EzRkZEUUVNR1FzZ0FDQURRYmdJYWlBVEVJK0JnSUFBUVFGcVFRRVFob0dBZ0FBaURrSC8vd054RFJnTEFrQWdGRVVOQUNBQUlBTkJ1QWhxSUJRUWpZR0FnQUFpRDBGK2FrRUFFSWFCZ0lBQUlnNUIvLzhEY1EwWUlBQWdEMEYvYWtFQUVJYUJnSUFBSWc1Qi8vOERjUTBZSUFBZ0ZFRUFFS3FBZ0lBQUlnNUIvLzhEY1EwWUlBQWdBMEc0Q0dvZ0ZCQ1BnWUNBQUVFQmFrRUJFSWFCZ0lBQUlnNUIvLzhEY1EwWUN3SkFJQkZCL3dGeFJRMEFJQUFnQ1VFQkVJYUJnSUFBSWc1Qi8vOERjUTBZQ3lBS1FmOEJjVVVOQUNBQUlBdEJBUkNHZ1lDQUFDSU9RZi8vQTNFTkZ3c2dBQ0FRSUFJUXFvQ0FnQUFoRGd3V0MwSFFpc0NBQUNFT0FrQUNRQUpBQWtBZ0F5Z0NqQUZCcXRXcTFYb2dEUnNnQVdvdEFBQkJ2SDlxRGdJQUFRTUxJQU1vQXBRQlFhclZxdFY2SUEwYklBRkJBM1JxSWhaQkJHb2hFRUVBSVJNZ0EwRzRDR29oRGd3QkN5QURLQUtnQVNBREtBS1VBVUdxMWFyVmVpQU5HeUFCUVFOMGFpSVdLQUlFUVFKMGFpSU9RUVJxSVJBZ0RpZ0NBQ0VUSUFOQnVBaHFJUTRMSUFNb0FwQUJRYXJWcXRWNklBMGJJQUZCQW5ScUtBSUFJUThnRmlnQ0FDRVdJQkFvQWdBaEVDQU9RUUU2QUJBZ0RpQVFOZ0lNSUE0Z0V6WUNDQ0FPSUJZMkFnUUxJQTRvQWdnaEZTQU9LQUlFSVJNZ0RpZ0NEQ0VXSUFOQnVBaHFJQVZCd0FBUTJvR0FnQUFhSUFOQnVBaHFJQThnQTBHNENHb2dGaENOZ1lDQUFFRi9haUlCRUk2QmdJQUFJUTRnQ1NBSktBSWNRUUZxTmdJY0lBa2dDU2dDREVFQmFqWUNEQ0FBSUE5QkFFRUNJQTVCQVhFYkloQVFob0dBZ0FBaURrSC8vd054RFJVZ0FDQVRJQkFRcW9DQWdBQWlEa0gvL3dOeERSVUNRQ0FWUlEwQUlBQWdBMEc0Q0dvZ0ZSQ05nWUNBQUVGL2FpQVFFSWFCZ0lBQUlnNUIvLzhEY1EwV0lBQWdGU0FRRUtxQWdJQUFJZzVCLy84RGNRMFdDeUFKRUl5QmdJQUFJQUFnQVVFQUVJYUJnSUFBSWc1Qi8vOERjUTBWSUFBZ0ZpQUNFS3FBZ0lBQUlRNE1GUXNnQUNBTElBRkJBblJxS0FJQVFRRVFob0dBZ0FBaURrSC8vd054RFJRZ0RDQUJRUU4wYWlnQ0FDRUJEQThMSUFBZ0N5QUJRUUowYWlnQ0FFRUFFSWFCZ0lBQUlnNUIvLzhEY1EwVElBd2dBVUVEZEdvb0FnQWhBUXdPQ3lBTUlBRkJBM1JxSWc0b0FnUWhEeUFBSUE0b0FnQkJBUkNxZ0lDQUFDSU9RZi8vQTNFTkVnSkFBa0FnQTBIMEFHb2dDeUFCUVFKMGFpZ0NBQ0lPSUE1QkFXb1Fqb0dBZ0FCQkFYRkZEUUFnQUNBT1FRRVFob0dBZ0FBaURrSC8vd054UlEwQkRCUUxJQWtnQ1NnQ0RFRUJhallDRENBQUlBNUJBaENHZ1lDQUFDSU9RZi8vQTNFTkV5QUpFSXlCZ0lBQUN5QUpJQWtvQWhSQkFXbzJBaFFnQ1NBSktBSU1RUUZxTmdJTUlBOGhBUXdOQ3lBTUlBRkJBM1JxSWc0b0FnUWhEeUFBSUE0b0FnQkJBQkNxZ0lDQUFDSU9RZi8vQTNFTkVTQUJRUUowSVE0Z0R5RUJJQUFnQ3lBT2FpZ0NBRUVBRUlhQmdJQUFJZzVCLy84RGNVVU5EQXdSQ3lBQlFRSjBJUTRnRENBQlFRTjBhaWdDQUNFQklBQWdDeUFPYWlnQ0FFRUJFSWFCZ0lBQUlnNUIvLzhEY1VVTkN3d1FDeUFBSUFFZ0F5Z0NvQUVnRENBQlFRTjBhaUlPS0FJQUlnOUJBblJxSUE0b0FnUWdEMnNnQWhDcmdZQ0FBQ0VPREE4TElBTWdEQ0FCUVFOMGFpSU9LUUlBTndMOEFRSkFJQTRvQWdBTkFDQUFJQUVnQTBIOEFXcEJBQ0FDRUt1QmdJQUFJUTRNRHdzQ1FDQU9RUVJxS0FJQURRQWdBQ0FCSUFOQi9BRnFRUUVnQWhDcmdZQ0FBQ0VPREE4TElBQWdBU0FEUWZ3QmFrRUNJQUlRcTRHQWdBQWhEZ3dPQ3lBQUlBc2dBVUVDZEdvb0FnQWdBaENHZ1lDQUFDRU9EQTBMSUFBZ0N5QUJRUUowYWlJUEtBSUFRWDlxUVFBUWhvR0FnQUFpRGtILy93TnhEUXdnQUNBUEtBSUFJQUpCQVJDS2dZQ0FBQ0VPREF3TElBc2dBVUVDZEdvb0FnQWhEd0pBSUF3Z0FVRURkR29pRmlnQ0JFVU5BQ0FBSUE5QkFCQ0dnWUNBQUNJT1FmLy9BM0VORENBQUlBOUJBV3BCQUJDR2dZQ0FBQ0lPUWYvL0EzRU5EQ0FXUVFScUtBSUFJUUVNQndzZ0FDQVBJQUlRaG9HQWdBQWhEZ3dMQ3lBTUlBRkJBM1JxS0FJRUlSQWdBQ0FMSUFGQkFuUnFLQUlBSWhOQkFCQ0dnWUNBQUNJT1FmLy9BM0VOQ2lBVFFRRnFJUTRDUUNBVFFRSnFJaFlnRUVjTkFDQUFJQTVCQUJDR2dZQ0FBQ0lPUWYvL0EzRU5DeUFBSUJBZ0FoQ0dnWUNBQUNFT0RBc0xBa0FnRTBFRGFpQVFSdzBBSUE4Z0Ztb3RBQUJCL3dCeFFRSkhEUUFnQUNBT1FRQVFob0dBZ0FBaURrSC8vd054RFFzZ0FDQVdRUUJCQVJDS2dZQ0FBQ0lPUWYvL0EzRU5DeUFBSUJBZ0FoQ0dnWUNBQUNFT0RBc0xBa0FnRUNBUGFrRi9haTBBQUVIL0FIRkJOMGNOQUNBSklBa29BaHhCQVdvMkFod2dDU0FKS0FJTVFRRnFOZ0lNSUFBZ0RrRUNFSWFCZ0lBQUlnNUIvLzhEY1EwTElCWWhFd05BQWtBQ1FBSkFJQk1nRUU4TkFDQVRJQlpMRFFFTUFnc2dDUkNNZ1lDQUFDQUFJQkFnQWhDR2dZQ0FBQ0VPREE0TElBQWdFeENIZ1lDQUFDSU9RZi8vQTNFTkRRc0NRQUpBSUE4Z0Uyb3RBQUJCL3dCeElnNUJBa1lOQUNBT1FUZEdEUUVnQUNBVFFRSVFob0dBZ0FBaURrSC8vd054UlEwQkRBNExJQUFnRTBFRFFRRVFpb0dBZ0FBaURrSC8vd054RFEwTElCTkJBV29oRXd3QUN3c2dBQ0FPUVFFUWhvR0FnQUFpRGtILy93TnhEUW9EUUFKQUFrQWdGaUFRVHcwQUlBOGdGbW90QUFCQi93QnhRVGRHRFFFZ0FDQVdRUVJCQVJDS2dZQ0FBQ0lPUWYvL0EzRkZEUUVNRFFzZ0FDQVFJQUlRaG9HQWdBQWhEZ3dNQ3lBV1FRRnFJUllNQUFzTElBQWdDeUFCUVFKMGFpZ0NBRUVBRUlhQmdJQUFJZzVCLy84RGNRMEpJQWtnQ1NnQ0ZFRUJhallDRkNBSklBa29BZ3hCQVdvMkFnd2dBQ0FNSUFGQkEzUnFJZzhvQWdCQkFCQ3FnSUNBQUNJT1FmLy9BM0VOQ1NBQUlBOG9BZ1FnQWhDR2dZQ0FBQ0VPREFrTElBc2dBVUVDZEdvb0FnQWhEZ0pBSUF3Z0FVRURkR29pRHlnQ0FFVU5BQ0FBSUE1QkFSQ0dnWUNBQUNJT1FmLy9BM0VOQ1NBUEtBSUFJUUVNQkFzZ0FDQU9JQUlRaG9HQWdBQWhEZ3dJQ3lBTElBRkJBblJxS0FJQUlRNENRQ0FNSUFGQkEzUnFLQUlBSWc5RkRRQWdBQ0FPUVFFUWhvR0FnQUFpRGtILy93TnhEUWdnQUNBUFFYOXFRUUFRaG9HQWdBQWlEa0gvL3dOeERRZ2dBQ0FQSUFKQkFSQ0tnWUNBQUNFT0RBZ0xJQUFnRGlBQ0VJYUJnSUFBSVE0TUJ3c2dDeUFCUVFKMGFpZ0NBQ0VRQWtBZ0RDQUJRUU4wYWlJT0tBSUFJZzhnRGlnQ0JDSVdjZzBBSUFBZ0VDQUNFSWFCZ0lBQUlRNE1Cd3NDUUNBUERRQWdGa1VOQUNBV0lRRWdBQ0FRUVFFUWhvR0FnQUFpRGtILy93TnhSUTBDREFjTEFrQWdEMFVOQUNBV0RRQWdBQ0FRUVFFUWhvR0FnQUFpRGtILy93TnhEUWNnQUNBUFFYOXFRUUFRaG9HQWdBQWlEa0gvL3dOeERRY2dBQ0FQSUFKQkFSQ0tnWUNBQUNFT0RBY0xRUUFoRGlBUFJRMEdJQlpGRFFZZ0FDQVFRUUVRaG9HQWdBQWlEa0gvL3dOeERRWWdBQ0FQUVg5cVFRQVFob0dBZ0FBaURrSC8vd054RFFZZ0ZpRUJJQUFnRDBFQlFRRVFpb0dBZ0FBaURrSC8vd054UlEwQkRBWUxDeUFBSUF3Z0FVRURkR29vQWdCQkFCQ3FnSUNBQUNJT1FmLy9BM0VOQkNBQUlBc2dBVUVDZEdvb0FnQkJBQkNHZ1lDQUFDSU9RZi8vQTNFTkJDQUFJQXdnQVVFRGRHb29BZ1FnQWhDR2dZQ0FBQ0VPREFRTElBQWdEQ0FCUVFOMGFpZ0NBRUVBRUtxQWdJQUFJZzVCLy84RGNRMERJQUFnQ3lBQlFRSjBhaWdDQUNBQ0VJYUJnSUFBSVE0TUF3c2dEQ0FCUVFOMGFpSU9LQUlBSVJZZ0EwSDBBR29nQTBIMEFHb2dEaWdDQkNJUEVJMkJnSUFBUVg5cUloQWdBMEgwQUdvZ0R4Q1BnWUNBQUVFQmFpSVZFSTZCZ0lBQUlSTWdBQ0FXUVFBUXFvQ0FnQUFpRGtILy93TnhEUUlnQ1NBSktBSWNRUUZxTmdJY0lBa2dDU2dDREVFQmFqWUNEQ0FBSUJCQkFFRUNJQk5CQVhFYkloWVFob0dBZ0FBaURrSC8vd054RFFJZ0FDQVBJQllRcW9DQWdBQWlEa0gvL3dOeERRSWdDUkNNZ1lDQUFDQUFJQlVnQWhDR2dZQ0FBQ0VPREFJTElBa2dDU2dDRkVFQmFqWUNGQ0FKSUFrb0FneEJBV28yQWd3TElBQWdEMEVBRUlhQmdJQUFJZzVCLy84RGNRMEFBa0FnRmtFQmNRMEFJQU5CTkdvZ0R5QVRFSkNCZ0lBQVFRRnhSUTBBSUFrZ0NTZ0NGRUVCYWpZQ0ZDQUpJQWtvQWd4QkFXbzJBZ3dMSUFBZ0VDQUNRUUVRaW9HQWdBQWhEZ3NnQTBIQUNtb2tnSUNBZ0FBZ0RnczZBUUYvSUFBZ0FTZ0NJRUdxMWFyVmVpQUJLQUlvR3lJQ1FRUnFLQUlBSUFJb0FnQWlBbXMyQWdRZ0FDQUJLQUlzSUFKQkFuUnFOZ0lBQzZrSkF3Wi9BbjRGZnlPQWdJQ0FBRUhBQVdzaUF5U0FnSUNBQUNBQlFTeHFJUVFnQVNnQ0pDRUZRZHlPd0lBQUlRWUNRQUpBQWtBQ1FBSkFJQUVvQWhnaUIwR3ExYXJWZWlBQktBSW9JZ2diSUFKcUxRQUFRZVYrYWc0REFBRUNCQXNnQVNrQ0FDRUpJQUVvQWdnaEJpQUJLUUlNSVFvZ0FTZ0NGQ0VMSUFFb0FpQWlERUdxMWFyVmVpQUlHeUFDUVFOMGFpSU5LQUlFSVE0Z0RTZ0NBQ0VOSUFFb0Fod2lEMEdxMWFyVmVpQUlHeUFDUVFKMGFpZ0NBQ0VCSUFOQnBBRnFJQVJCRUdvb0FnQTJBZ0FnQTBIb0FHcEJOR29nQkVFSWFpa0NBRGNDQUNBRElBUXBBZ0EzQXBRQklBTWdDRFlDa0FFZ0F5QUZOZ0tNQVNBRElBdzJBb2dCSUFNZ0R6WUNoQUVnQXlBSE5nS0FBU0FESUFzMkFud2dBeUFLTndKMElBTWdCallDY0NBRElBazNBMmhCQVNFQ0FrQWdBU0FHUWFyVnF0VjZJQXNiYWlJR0xRQUFRZjhBY1VFQ1J3MEFJQVpCQVdvdEFBQkIvd0J4UVRSSElRSUxJQU1nQWpvQXZBRWdBeUFPTmdLNEFTQURRUUEyQXJRQklBTWdEVFlDc0FFZ0F5QUJOZ0tzQVNBRFFRaHFJQU5CNkFCcUlBTkJyQUZxRU5DQmdJQUFJQU5CQ0dvaEJnd0NDeUFCS1FJQUlRa2dBU2dDQ0NFR0lBRXBBZ3doQ2lBQktBSVVJUXNnQVNnQ0lDSU1RYXJWcXRWNklBZ2JJQUpCQTNScUlnMG9BZ1FoRGlBTktBSUFJUTBnQVNnQ0hDSVBRYXJWcXRWNklBZ2JJQUpCQW5ScUtBSUFJUUVnQTBHa0FXb2dCRUVRYWlnQ0FEWUNBQ0FEUWVnQWFrRTBhaUFFUVFocUtRSUFOd0lBSUFNZ0JDa0NBRGNDbEFFZ0F5QUlOZ0tRQVNBRElBVTJBb3dCSUFNZ0REWUNpQUVnQXlBUE5nS0VBU0FESUFjMkFvQUJJQU1nQ3pZQ2ZDQURJQW8zQW5RZ0F5QUdOZ0p3SUFNZ0NUY0RhRUVCSVFJQ1FDQUJJQVpCcXRXcTFYb2dDeHRxSWdZdEFBQkIvd0J4UVFKSERRQWdCa0VCYWkwQUFFSC9BSEZCTkVjaEFnc2dBeUFDT2dDOEFTQURRUUEyQXJnQklBTWdEallDdEFFZ0F5QU5OZ0t3QVNBRElBRTJBcXdCSUFOQktHb2dBMEhvQUdvZ0EwR3NBV29RMElHQWdBQWdBMEVvYWlFR0RBRUxJQUVwQWdBaENTQUJLQUlJSVFZZ0FTa0NEQ0VLSUFFb0FoUWhCQ0FCS0FJc0lRc2dBU2dDSUNJTVFhclZxdFY2SUFnYklBSkJBM1JxSWcwb0FnQWhEaUFOS0FJRUlRMGdBU2dDSENJUFFhclZxdFY2SUFnYklBSkJBblJxS0FJQUlRSWdBMEhvQUdwQk9Hb2dBVUU0YWlrQ0FEY0RBQ0FESUFFcEFqQTNBNWdCSUFNZ0N6WUNsQUVnQXlBSU5nS1FBU0FESUFVMkFvd0JJQU1nRERZQ2lBRWdBeUFQTmdLRUFTQURJQWMyQW9BQklBTWdCRFlDZkNBRElBbzNBblFnQXlBR05nSndJQU1nQ1RjRGFDQUxJQTFCQW5ScUlnRW9BZ0FoQ0NBQlFRUnFLQUlBSVFWQkFTRUJBa0FnQWlBR1FhclZxdFY2SUFRYmFpSUdMUUFBUWY4QWNVRUNSdzBBSUFaQkFXb3RBQUJCL3dCeFFUUkhJUUVMSUFNZ0FUb0F2QUVnQXlBRk5nSzRBU0FESUFnMkFyUUJJQU1nRGpZQ3NBRWdBeUFDTmdLc0FTQURRY2dBYWlBRFFlZ0FhaUFEUWF3QmFoRFFnWUNBQUNBRFFjZ0FhaUVHQ3lBR1FRRTZBQndMSUFBZ0Jpa0NBRGNDQUNBQVFSaHFJQVpCR0dvcEFnQTNBZ0FnQUVFUWFpQUdRUkJxS1FJQU53SUFJQUJCQ0dvZ0JrRUlhaWtDQURjQ0FDQURRY0FCYWlTQWdJQ0FBQXVKSUFFT2Z5T0FnSUNBQUVIQUJXc2lCQ1NBZ0lDQUFDQUVRUnhxSUFCQkRHb2lCVUhBQUJEYWdZQ0FBQm9nQkVFd2FpRUdRYXJWcXRWNklRZEJxdFdxMVhvaENBSkFJQVJCeEFCcUtBSUFJZ2xGRFFBZ0JFRThhaWdDQUNFSUlBUkJPR29vQWdBaEJ3c2dCaWdDQUNFS0lBUW9BaVFoQ3lBRUtBSTBJUXdnQUNnQ0NDRU5RUUFoRGdKQUlBQkI1QUJxSUFJUXlvR0FnQUJCQVhFTkFBSkFJQVJCSEdvZ0FoQ05nWUNBQUNJT1JRMEFJQUJCRkdvb0FnQkJxdFdxMVhvZ0FFRWdhaWdDQUJzaUR5QU9ha0YvYWlFUVFRQWhCZ0pBQWtBRFFDQVFJQVpxTFFBQUloRkIvd0J4UWNjQVJ3MEJJQTRnQmtGL2FpSUdhZzBBQzBFQUlRWU1BUXNnQmtVTkFTQU9JQVpxSVFZZ0VVSC9BSEZCRlVZTkFDQUFJQVlRaDRHQWdBQWlEa0gvL3dOeERRSUxBMEFnRHlBR2FpMEFBRUgvQUhGQnh3QkhEUUVnQUNBR1FRSVFob0dBZ0FBaERpQUdRUUZxSVFZZ0RrSC8vd054UlEwQURBSUxDeUFMUWFyVnF0VjZJQW9iSVJBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0RFR3ExYXJWZWlBSkd5SVBJQUpxTFFBQUlnWkJmMm9PQmdVRUFRRUJBUUFMQWtBQ1FBSkFJQVpCaFg5cURnVUVCQVFFQVFBTElBWkI1WDVxRGdRQkFRRUVBUXNnQUVITUFHb2hDeUFRUVg5cUlSRWdCeUFJSUFKQkEzUnFLQUlBSWdwQkFuUnFLQUlBSWdraEJnSkFBMEFDUUFKQUlBWkZEUUFDUUNBUklBWnFMUUFBUWY4QWNTSVFRYU4vYWlJT1FRMUxEUUJCQVNBT2RFR2p3UUJ4RFFJTElCQkJBMFlOQVFzRFFDQUdJQWxQRFFNZ0FDQUdRUUVRaG9HQWdBQWhEaUFHUVFGcUlRWWdEa0gvL3dOeFJRMEFEQTBMQ3lBR1FYOXFJUVlNQUFzTElBOGdDbW90QUFBaUJrR0RmMnBCL3dGeFFRSlBEUWdnQ0NBS1FRTjBhaWdDQUNFT0lBWkIvd0Z4UWYwQVJnMEdJQVJCOEFCcUlBUkJIR29nRGhESWdZQ0FBQ0FFUVlRQmFpRUdEQWNMSUFSQnZBTnFJQVJCSEdvZ0FoQ3NnSUNBQUNBRVFlQURha0VRYWlBRlFSQnFLUUlBTndNQUlBUkI0QU5xUVFocUlBVkJDR29wQWdBM0F3QWdCRUhnQTJwQk5Hb2dBRUhBQUdvcEFnQTNBZ0FnQkVHY0JHb2dBRUhJQUdvb0FnQTJBZ0FnQkNBRktRSUFOd1BnQXlBRUlBQkJPR29wQWdBM0Fvd0VJQVFnQUVFMGFpZ0NBQ0lQTmdLSUJDQUVJQUJCTUdvb0FnQTJBb1FFSUFRZ0FFRXNhaWdDQURZQ2dBUWdCQ0FBUVNocUtBSUFJZ2syQXZ3RElBUWdBRUVrYWlnQ0FDSUhOZ0w0QTBFQklSRWdCQzBBMUFOQkFYRWhEaUFFS0FMSUF5RUdJQVFvQXNRRElRSWdCQzBBd0FNaEVBSkFBa0FnQVVFRGNVRUJSdzBBSUE0aENBd0JDMEVBSVFnQ1FDQU9SUTBBUVFFaENBSkFJQVpGRFFBZ0IwR3ExYXJWZWlBUEd5QUdhaTBBQUVHRkFVY05BU0FKUWFyVnF0VjZJQThiSUFaQkFuUnFLQUlBSVFKQkFDRUlDMEVBSVFZTFFRRkJmaUFCUVFOeEd5RVJDeUFBS0FJSUlRa2dCQ2dDMEFNaER5QUVLQUxNQXlFSEFrQWdFRUgvQVhGRkRRQWdBQ0FFS0FLOEEwRUJFSWFCZ0lBQUlnNUIvLzhEY1EwSkN3SkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FnQmlBUGNnMEFJQWRGRFFFZ0FDQUNRUUVnRVJDS2dZQ0FBQ0lPUWYvL0EzRU5FeUFFUWVBRGFpQUhFSTJCZ0lBQUlRWWdCRUhnQTJvZ0J4Q1BnWUNBQUNFUUlBQWdCa0YrYWtFQUVJYUJnSUFBSWc1Qi8vOERjUTBUSUFBZ0JrRi9ha0VBRUlhQmdJQUFJZzVCLy84RGNRMFRJQUFnQjBFQUVLcUFnSUFBSWc1Qi8vOERjUTBUSUFBZ0VFRUJha0VCRUlhQmdJQUFJUTRNRXdzZ0JrVU5BU0FQRFFFZ0NFVU5BZ3dKQ3lBQVFSUnFLQUlBUWFyVnF0VjZJQUJCSUdvb0FnQWJJQUpCQVdvaUJtb3RBQUJCL3dCeFFUZEhEUVFnQTBFSGNVRURSZzBFSUFBZ0FrRUFJQkVRaW9HQWdBQWlEa0gvL3dOeERSRWdBQ0FHSUFNUWhvR0FnQUFoRGd3UkN5QUdEUUlnRDBVTkFpQUFJQUpCQVNBUkVJcUJnSUFBSWc1Qi8vOERjUTBRSUFjTkFRd0ZDeUFBSUFKQkFDQVJFSXFCZ0lBQUlnNUIvLzhEY1EwUElBQWdBa0VCYWtFQkVJYUJnSUFBSWc1Qi8vOERjVVVOQmd3UEN5QUVRZUFEYWlBSEVJMkJnSUFBSVFZZ0JFSGdBMm9nQnhDUGdZQ0FBQ0VRSUFBZ0JrRitha0VBRUlhQmdJQUFJZzVCLy84RGNRME9JQUFnQmtGL2FrRUFFSWFCZ0lBQUlnNUIvLzhEY1EwT0lBQWdCMEVBRUtxQWdJQUFJZzVCLy84RGNRME9JQUFnRUVFQmFrRUJFSWFCZ0lBQUlnNUIvLzhEY1VVTkF3d09DeUFJRFFFZ0FDQUNRUUFnRVJDS2dZQ0FBQ0lPUWYvL0EzRU5EU0FBSUFKQkFXcEJBUkNHZ1lDQUFDSU9RZi8vQTNGRkRRRU1EUXNnQUNBQ0lBTWdFUkNLZ1lDQUFDRU9EQXdMSUFBZ0JrRUJFS3FBZ0lBQUlnNUIvLzhEY1EwTEFrQWdCMFVOQUNBRVFlQURhaUFIRUkyQmdJQUFJUVlnQkVIZ0Eyb2dCeENQZ1lDQUFDRVFJQUFnQmtGK2FrRUFFSWFCZ0lBQUlnNUIvLzhEY1EwTUlBQWdCa0YvYWtFQUVJYUJnSUFBSWc1Qi8vOERjUTBNSUFBZ0IwRUFFS3FBZ0lBQUlnNUIvLzhEY1EwTUlBQWdFRUVCYWtFQkVJYUJnSUFBSWc1Qi8vOERjUTBNQ3lBRVFlQURhaUFFUWVBRGFpQVBFSTJCZ0lBQUlnWkJmMm9pRGlBR0VJNkJnSUFBSVFZZ0NTQUpLQUlNUVFGcU5nSU1JQUFnRGtFQlFRSWdCa0VCY1NJR0d4Q0dnWUNBQUNJT1FmLy9BM0VOQ3lBSkVJeUJnSUFBSUFZTkFTQUVLQUxvQTBHcTFhclZlaUFFUWZRRGFpZ0NBQnNnQkVIZ0Eyb2dEeENQZ1lDQUFFRUJhaUlRYWkwQUFDRUdJQWtnQ1NnQ0RFRUJhallDREFKQUlBWkIvd0J4UVRkSERRQWdBQ0FQUVFBUXFvQ0FnQUFpRGtILy93TnhEUXdnQ1JDTWdZQ0FBQ0FBSUJCQkFoQ0dnWUNBQUNFT0RBd0xJQUFnRHlBREVLcUFnSUFBSWc1Qi8vOERjUTBMSUFrUWpJR0FnQUJCQUNFT0RBc0xJQUFnQWtFQmFrRUJFSWFCZ0lBQUlnNUIvLzhEY1EwS0N5QUFJQThnQXhEUmdZQ0FBQ0VPREFrTEFrQUNRQUpBQWtBZ0IwVU5BQ0FBSUFaQkFSQ3FnSUNBQUNJT1FmLy9BM0VORENBQUlBUkI0QU5xSUFjUWpZR0FnQUFpQmtGK2FrRUFFSWFCZ0lBQUlnNUIvLzhEY1EwTUlBQWdCa0YvYWtFQUVJYUJnSUFBSWc1Qi8vOERjUTBNSUFBZ0IwRUFFS3FBZ0lBQUlnNUIvLzhEY1EwTUlBUkI0QU5xSUFjUWo0R0FnQUFpQmtFQmFpRU9JQUJCRkdvb0FnQkJxdFdxMVhvZ0FFRWdhaWdDQUJzZ0JrRUNhaUlHYWkwQUFFSC9BSEZCTjBZTkFRd0NDeUFBSUFZZ0F4RFJnWUNBQUNFT0RBc0xJQU5CQjNGQkEwWU5BQ0FBSUE1QkFCQ0dnWUNBQUNJT1FmLy9BM0VOQ2d3QkN5QU9JUVlMSUFBZ0JpQURFSWFCZ0lBQUlRNE1DQXNnQkVINEFtb2dCRUVjYWlBQ0VKR0JnSUFBSUFBZ0JFSDRBbXBCQUVFRkVKS0JnSUFBSVE0TUJ3c2dFRUYvYWlFUklBY2dBa0VDZEdvb0FnQWlEeUVHQWtBRFFBSkFBa0FnQmtVTkFBSkFJQkVnQm1vdEFBQkIvd0J4SWhCQm8zOXFJZzVCRFVzTkFFRUJJQTUwUWFQQkFIRU5BZ3NnRUVFRFJnMEJDd05BSUFZZ0QwOE5BeUFBSUFaQkFSQ0dnWUNBQUNFT0lBWkJBV29oQmlBT1FmLy9BM0ZGRFFBTUNnc0xJQVpCZjJvaEJnd0FDd3NnQUNBQ1FRQVFxb0NBZ0FBaURrSC8vd054RFFZZ0FDQUVRUnhxSUFJUWo0R0FnQUJCQVdvZ0F4Q0dnWUNBQUNFT0RBWUxJQUFnQWlBREVLcUFnSUFBSVE0TUJRc2dBQ0FISUFKQkFuUnFLQUlBSWdaQkFSQ0dnWUNBQUNJT1FmLy9BM0VOQkFKQUFrQUNRQ0FRSUFaQkFXb2lCbW90QUFCQi93QnhRWDVxRGdJQkFBSUxJQUFnQmtFQkVJYUJnSUFBSWc1Qi8vOERjVVVOQVF3R0N5QUFJQVpCQVVFQUVJcUJnSUFBSWc1Qi8vOERjUTBGQ3lBQUlBZ2dBa0VEZEdvb0FnUWdBeENxZ0lDQUFDRU9EQVFMSUFnZ0FrRURkR29vQWdBaEVRSkFJQWNnQWtFQ2RHb29BZ0FpQmtVTkFDQVFJQVpCZjJvaURtb3RBQUJCL3dCeFFlb0FSdzBBSUFBZ0RrRUJFSWFCZ0lBQUlnNUIvLzhEY1EwRUN5QUFJQVpCQVJDR2dZQ0FBQ0lPUWYvL0EzRU5BeUFBSUJGQkFCQ3FnSUNBQUNJT1FmLy9BM0VOQXlBQUlBUkJIR29nRVJDUGdZQ0FBRUVCYWlBREVJYUJnSUFBSVE0TUF3c2dCRUhjQUdvZ0JFRWNhaUFPRU1lQmdJQUFJQVJCN0FCcUlRWUxJQVlvQWdBaUJrVU5BQ0FQSUFacUxRQUFRWVlCUncwQUlBUkJFR29nQkVFY2FpQUhJQVpCQW5ScUtBSUFFS0NCZ0lBQVFlaWV3SUFBUVFZZ0JDZ0NFQ0FFS0FJVUVJcUFnSUFBUVFGeFJRMEFJQVFnRFRZQ2lBRWdCRUdJQVdwQjc1N0FnQUJCQnhDRWdZQ0FBQ0lPUWYvL0EzRU5BUXNnQUNBS1FRRVFxb0NBZ0FBaURrSC8vd054RFFBZ0NDQUNRUU4wYWtFRWFpZ0NBQ0VSQWtBZ0FFSFlBR29nQWhES2dZQ0FBRUVCY1VVTkFDQU5JQTBvQWd4QkFXbzJBZ3dnQUNBRVFUaHFLQUlBUWFyVnF0VjZJQVFvQWtRYklCRkJBblJxS0FJQVFRSVFob0dBZ0FBaURrSC8vd054RFFFZ0FDZ0NDQ0VHSUFSQjRBTnFJQVVnQkVIY0Eyb2dDaENmZ1lDQUFDQUVRYkFFYWlBRVFlQURha0hJQUJEYWdZQ0FBQm9nQkVFQk9nQ01CU0FFUVFBMkFvQUZJQVFnQlRZQytBUWdCRUVCT2dDSUJTQUVJQVFvQXRBRVFRRnFOZ0tFQlNBRUlBUkJzQVJxTmdMOEJBSkFBMEFnQkVHUUJXb2dCRUg0QkdvUTBvR0FnQUFnQkMwQXRBVkZEUUVnQkNBR05nSzRCU0FFS0FLWUJTRVFJQVJCdUFWcVFkdWV3SUFBUVFRUWhJR0FnQUFpRGtILy93TnhEUU1nQkNBR05nSzhCU0FFSUFVZ0VCQy9nWUNBQUNBRVFid0ZhaUFFS0FJQUlBUW9BZ1FRaElHQWdBQWlEa0gvL3dOeERRTWdCRUc0QldwQjFaN0FnQUJCQWhDRWdZQ0FBQ0lPUWYvL0EzRkZEUUFNQXdzTElBUWdEVFlDakFFZ0JFR01BV3BCOTU3QWdBQkJDQkNFZ1lDQUFDSU9RZi8vQTNFTkFTQU5FSXlCZ0lBQUlBMFFnWUdBZ0FBaURrSC8vd054RFFFZ0FDQUVRUnhxSUJFUWo0R0FnQUFnQXhDR2dZQ0FBQ0VPREFFTEFrQUNRQUpBSUFCQjBBQnFLQUlBUlEwQUlBMGdEU2dDSEVFQmFqWUNIQ0FOSUEwb0FneEJBV28yQWd3Z0FDQUVRVGhxS0FJQVFhclZxdFY2SUFRb0FrUWJJQkZCQW5ScUtBSUFRUUlRaG9HQWdBQWlEa0gvL3dOeERRTWdCRUdVQVdvZ0JFRWNhaUFFUVpBQmFpQUtFSitCZ0lBQUlBUkI0QUZxSUFSQmxBRnFRY2dBRU5xQmdJQUFHaUFFUVFFNkFMd0NJQVJCQURZQ3NBSWdCRUVCT2dDNEFpQUVJQVFvQW9BQ1FRRnFOZ0swQWlBRUlBUkI0QUZxTmdLc0FpQUVJQVJCSEdvMkFxZ0NBa0FEUUNBRVFjQUNhaUFFUWFnQ2FoRFNnWUNBQUNBRUxRRGtBa1VOQVNBTElBUW9Bc2dDSWdZUXlvR0FnQUJCQVhGRkRRQWdCQ0FOTmdMb0FpQUVRZWdDYWtIYm5zQ0FBRUVFRUlTQmdJQUFJZzVCLy84RGNRMEZJQVFnRFRZQzdBSWdCRUVJYWlBRklBWVF2NEdBZ0FBZ0JFSHNBbW9nQkNnQ0NDQUVLQUlNRUlTQmdJQUFJZzVCLy84RGNRMEZJQVJCNkFKcVFkV2V3SUFBUVFJUWhJR0FnQUFpRGtILy93TnhSUTBBREFVTEN5QVBJQkZxTFFBQVFmNEJjVUdnQVVZTkFTQUlJQkZCQTNScUlnWW9BZ1FnQmlnQ0FDSUdheUVPSUFRb0FrZ2dCa0VDZEdvaEJnd0NDeUFBSUJFZ0F4Q3FnSUNBQUNFT0RBSUxJQVFnQ0NBUlFRTjBhaUlPS0FJQU5nTHdBaUFFSUE0b0FnUTJBdlFDSUFSQjhBSnFJUVlDUUNBT0tBSUFEUUJCQUNFT0RBRUxRUUpCQVNBT1FRUnFLQUlBR3lFT0N5QUFJQkVnQmlBT0lBTVF5NEdBZ0FBaERnc2dCRUhBQldva2dJQ0FnQUFnRGdzWEFDQUFJQUJCREdvZ0FSQ05nWUNBQUJDSGdZQ0FBQXVxQVFFQ2Z5T0FnSUNBQUVFUWF5SURKSUNBZ0lBQUEzOENRQUpBQWtBZ0FnMEFRUUFoQkF3QkN3SkFBa0FnQVMwQUFDSUVRWGRxRGdVQkFBQUFBd0FMSUFNZ0FDZ0NBRFlDRENBRFFReHFJQVFRcklHQWdBQWlCRUgvL3dOeERRRU1BZ3NnQXlBQUtBSUFOZ0lJSUFOQkNHcEJoNTNBZ0FCQkJCQ0RnWUNBQUNJRVFmLy9BM0ZGRFFFTElBTkJFR29rZ0lDQWdBQWdCQThMSUFGQkFXb2hBU0FDUVg5cUlRSU1BQXNMMkFFQkEzOUJBQ0VFQWtCQmZ5QUJRUVJxSWdVZ0JTQUJTUnNpQVVFQklBSjBJZ0lnQVNBQ1N4c2lBa0YvYW1jaUFVVU5BQUpBQWtCQkhFSUJRU0FnQVd1dFF2Ly9BNE9HcHlJRloyc2lBVUVOVHcwQUlBRkJBblFpQmtING9NQ0FBR29pQWlnQ0FDSUJSUTBCSUFJZ0JTQUJha0Y4YWlnQ0FEWUNBQ0FCRHdzZ0FrR0RnQVJxUVJCMkVMR0FnSUFBSVFRTUFRc0NRQ0FHUWF5aHdJQUFhaUlDS0FJQUlnRkIvLzhEY1EwQVFRRVFzWUNBZ0FBaUFVVU5BU0FDSUFFZ0JXbzJBZ0FnQVE4TElBSWdBU0FGYWpZQ0FDQUJEd3NnQkF0YkFRSi9Ba0JDQVVFZ0lBQkJmMnBuYTYxQy8vOERnNGFuSWdGblFSOXpRUUowUWVDaHdJQUFhaUlDS0FJQUlnQkZEUUFnQWlBQlFSQjBJQUJxUVh4cUtBSUFOZ0lBSUFBUEN5QUJRQUFpQUVFUWRFRUFJQUJCQUVvYkM2NEJBUUYvUVg4Z0JFRUVhaUlHSUFZZ0JFa2JJZ1pCQVNBRGRDSUVJQVlnQkVzYklRTUNRQUpBUWdGQklDQUNRUVJxSWdJZ0JDQUNJQVJMR3lJRVFYOXFaMnV0UXYvL0E0T0dweUlDWjBGd2FrRU1TdzBBSUFOQmYycG5JZ1FOQVVFQUR3dENBVUVnSUFSQmc0QUVha0VRZGtGL2FtZHJyVUwvL3dPRGhxZENBVUVnSUFOQmc0QUVha0VRZGtGL2FtZHJyVUwvL3dPRGhxZEdEd3NnQWtJQlFTQWdCR3V0UXYvL0E0T0dwMFlMb3dFQkFYOENRQUpBUVJ4Q0FVRWdJQUpCQkdvaUFrRUJJQU4wSWdNZ0FpQURTeHNpQTBGL2FtZHJyVUwvL3dPRGhxY2lBbWRySWdWQkRVOE5BQ0FGUVFKMFFmaWd3SUFBYWlFRElBRWdBbXBCZkdvaEFnd0JDeUFCUWdGQklDQURRWU9BQkdwQkVIWkJmMnBuYTYxQy8vOERnNGFuSWdOQkVIUnFRWHhxSVFJZ0EyZEJIM05CQW5SQjRLSEFnQUJxSVFNTElBSWdBeWdDQURZQ0FDQURJQUUyQWdBTEpRRUJmd05BUVg4Z0FFRUJkaUFBYWtFSWFpSUNJQUlnQUVrYklnQWdBVWtOQUFzZ0FBdDdBZ0ovQVg0amdJQ0FnQUJCRUdzaUJDU0FnSUNBQUFKQUFrQWdBdzBBSUFRZ0FDa0NBRGNEQUNBRUlBRWdBaENJZ0lDQUFFRUJJUVVNQVF0QkFDRUZJQUpGRFFCQkFBMEFJQUFwQWdBaUJxY2dBU0FDUVFBZ0EwRUFJQVpDSUlpbktBSUVFWUdBZ0lBQUFDRUZDeUFFUVJCcUpJQ0FnSUFBSUFVTGxRRUJBWDhqZ0lDQWdBQkJNR3NpQXlTQWdJQ0FBQ0FESUFFcEFnQTNBd2dnQTBFUWFpQURRUWhxSUFJUXo0Q0FnQUFDUUFKQUlBTXZBUlFpQVVVTkFDQURJQUU3QVNBZ0EwRVlhaUVDREFFTElBTkJBRHNCTENBRElBSTJBaWdnQXlBREtBSVFOZ0lrSUFOQkpHb2hBZ3NnQUNBQ0tRSUFOd0lBSUFCQkNHb2dBa0VJYWlnQ0FEWUNBQ0FEUVRCcUpJQ0FnSUFBQzZ3QkFnRi9BWDRqZ0lDQWdBQkJNR3NpQXlTQWdJQ0FBQUpBQWtBQ1FBSkFRUUVOQUVFU0lRRU1BUXNnQXlBQktRSUFOd01ZSUFOQklHb2dBMEVZYWlBQ0VMaUFnSUFBSUFNcEF5QWlCRUlnaUtjaUFVSC8vd054UlEwQkN5QURJQUU3QVFnZ0F5RUJEQUVMSUFNZ0FqWUNFQ0FESUFRK0Fnd2dBMEVBT3dFVUlBTkJER29oQVFzZ0FDQUJLUUlBTndJQUlBQkJDR29nQVVFSWFpZ0NBRFlDQUNBRFFUQnFKSUNBZ0lBQUMxZ0JBWDRDUUNBQ0RRQWdBRUw4Ly8vL0R6Y0NBQThMQWtBZ0FTa0NBQ0lEcHlBQ1FRSkJBQ0FEUWlDSXB5Z0NBQkdDZ0lDQUFBQWlBa1VOQUNBQUlBSTJBZ0FnQUVFQU93RUVEd3NnQUVLQWdJQ0FvQUkzQWdBTE9nSUJmd0YrQWtBZ0FrRUFJQUliSWdORkRRQWdBQ2tDQUNJRXB5QUJRUVFnQWhzZ0EwRUNRUUFnQkVJZ2lLY29BZ2dSZ0lDQWdBQUFDd3RxQVFOL0FrQWdBVUU4YWlBQklBTVF1NENBZ0FBaUJFSC8vd054RFFBZ0FVSEFBR29pQlNBRktBSUFJZ1lnQTJvMkFnQWdBU2dDUENBR1FRSjBhaUFDSUFOQkFuUVEyb0dBZ0FBYUlBQWdCU2dDQUNJQk5nSUVJQUFnQVNBRGF6WUNBQXNnQUNBRU93RUlDMUVCQVg4amdJQ0FnQUJCRUdzaUF5U0FnSUNBQUNBRFFRaHFJQUFvQWdRZ0FoRGpnSUNBQUFKQUlBTXZBUXdpQWcwQUlBQWdBU0FES0FJSUVOZUFnSUFBSVFJTElBTkJFR29rZ0lDQWdBQWdBZ3VEQVFFQmZ5T0FnSUNBQUVFZ2F5SURKSUNBZ0lBQUlBTkJER29nQUJDZ2dJQ0FBQ0FES0FJTVFhclZxdFY2SUFNb0Fod2lBQnNnQVdvZ0FpMEFERG9BQUNBREtBSVFRYXJWcXRWNklBQWJJQUZCQW5ScUlBSW9BZ0EyQWdBZ0F5Z0NGRUdxMWFyVmVpQUFHeUFCUVFOMGFpQUNLUUlFTndJQUlBTkJJR29rZ0lDQWdBQUxjUUVEZnlPQWdJQ0FBRUVRYXlJREpJQ0FnSUFBUVppU3dJQUFJUVFDUUNBQktBSVFJQUVvQWlBaUJXb3RBQUJCL3dCeElBSkIvd0J4UncwQUlBTWdCVFlDQ0NBRFFRRTZBQXdnQVNBRlFRRnFOZ0lnSUFOQkNHb2hCQXNnQUNBRUtRSUFOd0lBSUFOQkVHb2tnSUNBZ0FBTGxnSUJBbjhqZ0lDQWdBQkJJR3NpQWlTQWdJQ0FBQ0FDSUFGQnh3QVF2WUNBZ0FBQ1FBSkFBa0FnQWkwQUJFVU5BQUpBSUFJb0FnQWlBdzBBUVFBaEF3d0NDeUFCSUFOQmYyb2dBeERjZ0lDQUFFRUJjVVVOQVNBQ1FRQTZBQTRnQWtFa093RU1JQUlnQXpZQ0NBSkFJQUVnQWtFSWFoREJnSUNBQUNJRFFmLy9BM0ZGRFFBZ0FDQURPd0VJREFNTElBSkJFR29nQVVISEFCQzlnSUNBQUFKQUlBSXRBQlJGRFFBZ0FpZ0NFQ0VEREFJTElBQkNBRGNDQUNBQVFRaHFRUUEyQWdBTUFnc2dBRUlBTndJQUlBQkJDR3BCQURZQ0FBd0JDd05BSUFKQkdHb2dBVUhIQUJDOWdJQ0FBQ0FDTFFBY0RRQUxJQUJCQVRvQUJDQUFJQU0yQWdBZ0FFRUFPd0VJQ3lBQ1FTQnFKSUNBZ0lBQUM3a0hBZ2QvQVg0amdJQ0FnQUJCNEFCcklnSWtnSUNBZ0FCQkFTRURJQUVnQVNnQ0lDSUVRUUZxTmdJZ1FRQWhCVUVBSVFZQ1FBSkFBa0FDUUFKQUlBUWdBU2dDRUdvdEFBQkIvd0J4UWFOL2FnNElCQUVBQUFBQ0FBSUFDeUFCSUFRMkFpQkJBQ0VEUVFBaEJRd0NDeUFDSUFGQkF4QzlnSUNBQUVFQklRTkJBU0VHREFJTFFRRWhCVUVBSVFNTFFRQWhCZ3NnQWtFSWFpQUJFTjZBZ0lBQUFrQUNRQUpBQWtBZ0FpOEJEQ0lIRFFBQ1FBSkFBa0FnQWlnQ0NDSUlSUTBBQWtBQ1FDQUJLQUlRSUFFb0FpQWlCMm90QUFCQi93QnhRVzVxRGdRREFBQUJBQXNnQVVFVUVNU0FnSUFBSWdkQi8vOERjUTBFUVFBaENBd0dDd0pBSUFaRkRRQkJBQ0VJSUFKQkFEb0FGaUFDUVJ3N0FSUWdBaUFFTmdJUUlBRWdBa0VRYWhEQmdJQ0FBQ0lIUWYvL0EzRkZEUVlNQkFzZ0FrRVlhaUFCUWY4QUVOK0FnSUFBSUFJdkFSd2lCdzBESUFJb0FoZ2hCQ0FDUVNCcUlBRVF4b0NBZ0FBQ1FDQUNMd0VrSWdkRkRRQWdBU0FFRU9DQWdJQUFEQVFMSUFJb0FpQWhCeUFCUVRCcUlnRVF3b0NBZ0FBaEJpQUNRVEJxSUFjMkFnQWdBa0gvQURvQU5DQUNJQWcyQWl3Z0FpQUdJQWhCQW5ScUtBSUFOZ0lvSUFFZ0JDQUNRU2hxRUx5QWdJQUFJQVFoQ0F3RkN5QUZEUUVnQWtFNGFpQUJRZklBRUwyQWdJQUFJQUpCeUFCcUlBRVE0WUNBZ0FBQ1FBSkFJQUl2QVV3aUJ3MEFJQUlvQWtnaUNFVU5BVUVBSVFjQ1FBSkFBa0FnQVNnQ0VDQUJLQUlnSWdScUxRQUFRZjhBY1VGMGFnNENBUUFDQ3lBQlFUZ1F4SUNBZ0FBaUIwSC8vd054RFFJZ0FTQUJLQUlnUVFGcU5nSWdJQUpCMEFCcUlBRVF5NENBZ0FBZ0FpOEJWQ0lIRFFJZ0FpZ0NVQ0VIREFFTElBRWdCRUVCYWpZQ0lDQUNRZGdBYWlBQkVNdUFnSUFBSUFJdkFWd2lCdzBCSUFJb0FsZ2hCd3NnQVVFd2FoQ2ZnSUNBQUNBSVFRTjBhaUFITmdJRUlBRkJLa0VBRU9LQWdJQUFJZ2RCLy84RGNVVU5CZ3NNQXdzQ1FDQUNMUUE4UlEwQUlBRkJHQkRLZ0lDQUFDRUhEQU1MQWtBZ0EwVU5BQ0FCUVJrUXlvQ0FnQUFoQnd3REN3SkFJQUVvQWhBZ0FTZ0NJR290QUFCQi93QnhRZllBUmcwQUlBRkJFUkRLZ0lDQUFDRUhEQU1MSUFKQndBQnFJQUVReVlDQWdBQWdBaWtEUUNJSlFpQ0lweUVISUFtbklRZ01BZ3NnQVNBSFFRRnFOZ0lnREFNTElBRkJDeERFZ0lDQUFDSUhRZi8vQTNGRkRRRUxJQWRCLy84RGNTSUhSUTBCSUFkQkVrY05BQ0FBUW9DQWdJQ2dBamNDQUF3Q0N5QUJFTVdBZ0lBQUlBQkNBRGNDQUF3QkN5QUFRUUE3QVFRZ0FDQUlOZ0lBQ3lBQ1FlQUFhaVNBZ0lDQUFBdVFCUUVIZnlPQWdJQ0FBRUdBQVdzaUFpU0FnSUNBQUNBQktBSWdJUU1nQWtFSWFpQUJRZFVBRUwyQWdJQUFRUUVoQkFKQUlBRW9BaEFpQlNBQktBSWdJZ1pxTFFBQVFmOEFjVUVDUncwQVFRRWhCQ0FGSUFaQkFXb2lCMm90QUFCQi93QnhRVFJIRFFBZ0FTQUhOZ0lnUVFBaEJDQUdJUU1MSUFKQkVHb2dBVUUwRUwyQWdJQUFBa0FDUUFKQUlBUU5BRUVBSVFSQkFDRUdJQUl0QUJSQi93RnhSUTBCQ3lBQ1FSaHFJQUVRMm9DQWdBQUNRQ0FDTHdFY0lnUkZEUUFnQUNBRU93RUVEQUlMSUFJb0FoZ2hCaUFDUVNCcUlBRVEyWUNBZ0FBQ1FDQUNMd0VrSWdSRkRRQWdBQ0FFT3dFRURBSUxJQUlvQWlBaEJBc2dBa0VvYWlBQlFRd1F2WUNBZ0FBQ1FBSkFBa0FDUUNBQ0xRQXNEUUFnQkEwQlFRQWhCUXdEQ3lBQ1FUQnFJQUVReTRDQWdBQUNRQ0FDTHdFMElnVkZEUUFnQUNBRk93RUVEQVFMSUFJb0FqQWhCU0FFUlEwQ0lBVU5BUXNnQWtIWUFHb2dCRFlDQUNBQ0lBWTJBbFFnQWlBRE5nSlFJQUpCbkFFNkFGd2dBa0hnQUdvZ0FTQUNRZEFBYWhESGdJQ0FBQ0FBSUFJcEEyQTNBZ0FNQWdzQ1FDQUJRVHhxSUFGQkFoQzdnSUNBQUNJSFFmLy9BM0ZGRFFBZ0FDQUhPd0VFREFJTElBRkJ3QUJxSWdjZ0J5Z0NBQ0lJUVFGcU5nSUFJQUVvQWp3Z0NFRUNkR29nQkRZQ0FDQUhJQWNvQWdBaUJFRUJhallDQUNBQ1FmQUFhaUFJTmdJQUlBRW9BandnQkVFQ2RHb2dCVFlDQUNBQ1FaMEJPZ0IwSUFJZ0JqWUNiQ0FDSUFNMkFtZ2dBa0g0QUdvZ0FTQUNRZWdBYWhESGdJQ0FBQ0FBSUFJcEEzZzNBZ0FNQVFzZ0FrSEFBR29nQlRZQ0FDQUNJQVkyQWp3Z0FpQUROZ0k0SUFKQm13RTZBRVFnQWtISUFHb2dBU0FDUVRocUVNZUFnSUFBSUFBZ0Fpa0RTRGNDQUFzZ0FrR0FBV29rZ0lDQWdBQUwzd0VDQW44QmZpT0FnSUNBQUVFUWF5SUNKSUNBZ0lBQUFrQUNRQUpBQWtBZ0FTMEFCRUUvY1VGOWFnNDlBQUFBQUFFQUFBRUFBQUFBQUFBQUFBQUFBUUFBQUFBQUFBRUJBUUVCQVFFQkFRRUJBUUVCQUFBQUFBQUFBQUFBQVFFQkFRRUJBUUVCQVFFQkFBRUxJQUVvQWdBaUEwVU5BQ0FBSUFOQmYyb2dBeERjZ0lDQUFFRUJjVVVOQVFzZ0FFRWthaUFBSUFFUTNZQ0FnQUFoQVF3QkN5QUNJQUVwQWdBaUJEY0RDQ0FDUVFFNkFBNGdBaUFFcDBGL2FqWUNDQ0FBUVNScUlBQWdBa0VJYWhEZGdJQ0FBQ0VCQ3lBQ1FSQnFKSUNBZ0lBQUlBRUxZQUVDZnlPQWdJQ0FBRUVnYXlJQkpJQ0FnSUFBSUFGQkNHb2dBRUVJYWlnQ0FEWUNBQ0FCSUFBcEFnQTNBd0FnQVVFTWFpQUJFS0NBZ0lBQUlBRW9BaHdoQUNBQktBSVFJUUlnQVVFZ2FpU0FnSUNBQUNBQ1FhclZxdFY2SUFBYkMwTUJBWDhDUUNBQUlBRWdBQ2dDQkVFQmFoRFhnSUNBQUNJQlFmLy9BM0VOQUNBQUlBQW9BZ1FpQTBFQmFqWUNCQ0FBS0FJQUlBTkJBblJxSUFJMkFnQUxJQUVMVEFFQmZ5T0FnSUNBQUVFUWF5SUNKSUNBZ0lBQUlBSkJBRHNBRFNBQ0lBRkJQM0U2QUF3Z0FpQUFLQUlnTmdJSUlBQWdBa0VJYWhEQmdJQ0FBQ0VBSUFKQkVHb2tnSUNBZ0FBZ0FBdjJBUUVIZnlBQUtBSWdJUUVnQUNnQ0VDRUNRUUFoQXdKQUFrQURRQ0FBSUFFaUJFRUJhaUlCTmdJZ0FrQUNRQUpBQWtBQ1FBSkFBa0FnQWlBRWFpSUZMUUFBUWY4QWNTSUdRYU4vYWlJSFFScExEUUJCQVNBSGRFR253Y0F4Y1EwQkN5QUdRYXQvYWtFQ1NRMEFBa0FnQmtGNmFnNFRDQWNIQndjSEJ3Y0hCd1FGQXdjSEJBSUVCUUFMSUFaQk4wWU5BaUFHUVFKSERRWWdCVUVCYWkwQUFFSC9BSEZCTjBjTkJnc2dBdzBGREFZTElBTkZEUVVnQTBGL2FpRUREQU1MSUFNTkF3d0ZDeUFEUVFGcUlRTU1BUXRCQUNBRFFYOXFJZ0VnQVNBRFN4c2hBd3NnQkVFQmFpRUJEQUFMQ3lBQUlBUTJBaUFMQzlBR0FRcC9JNENBZ0lBQVFaQUJheUlDSklDQWdJQUFJQUpCQ0dvZ0FVRVZFTDJBZ0lBQUFrQUNRQUpBQWtBZ0FpMEFERVVOQUNBQlFjZ0FhaUVESUFGQnpBQnFLQUlBSVFRZ0FpZ0NDQ0VGQWtBRFFDQUJLQUlRSUFFb0FpQnFMUUFBUWY4QWNVRVdSZzBCQTBBZ0FrR0lBV29nQVVFQkVOV0FnSUFBQWtBQ1FBSkFBa0FnQWk4QmpBRWlCa0VlUmcwQUlBWkZEUUVNQ0FzZ0FTZ0NJQ0VISUFFb0FoQWhDRUVBSVFrQ1FBTkFJQUVnQjBFQmFpSUtOZ0lnQWtBQ1FBSkFBa0FDUUFKQUlBZ2dCMm90QUFCQi93QnhJZ3RCYm1vT0JRUUZCUUFDQVFzZ0NVRUJhaUVKREFJTElBdEJCa2NOQXd3SEN5QUpSUTBHSUFsQmYyb2hDUXNnQ2lFSERBSUxJQWxGRFFJTElBZEJBV29oQnd3QUN3c2dCMEVCYWlFSERBSUxJQUlvQW9nQklnZEZEUVFnQXlBQklBY1F3NENBZ0FBaUIwSC8vd054UlEwRElBQWdCenNCQkF3SEN5QUJJQWMyQWlBTElBZ2dCMm90QUFCQi93QnhJZ2RCQmtZTkJDQUhRUlpIRFFBTEN3c2dBa0VRYWlBQlFSWVExb0NBZ0FBQ1FDQUNMd0VVSWdkRkRRQWdBQ0FIT3dFRURBTUxJQUVvQWtnZ0JFRUNkR29oQnlBQktBSWdJQUVvQWhCcVFYNXFMUUFBSVFzQ1FBSkFBa0FDUUNBQktBSk1JQVJySWdnT0F3QUJBZ01MSUFKQ0FEY0NIQ0FDSUFVMkFoZ2dBa0dnQVRvQUpDQUNRU2hxSUFFZ0FrRVlhaERIZ0lDQUFDQUJJQVEyQWt3Z0FDQUNLUU1vTndJQURBWUxJQUpCT0dwQkFEWUNBQ0FDSUFVMkFqQWdBaUFIS0FJQU5nSTBJQUpCb1g5Qm9IOGdDMEgvQUhGQkVrWWJPZ0E4SUFKQndBQnFJQUVnQWtFd2FoREhnSUNBQUNBQklBUTJBa3dnQUNBQ0tRTkFOd0lBREFVTElBSWdCVFlDU0NBQ0lBY3BBZ0EzQWt3Z0FrR2hmMEdnZnlBTFFmOEFjVUVTUmhzNkFGUWdBa0hZQUdvZ0FTQUNRY2dBYWhESGdJQ0FBQ0FCSUFRMkFrd2dBQ0FDS1FOWU53SUFEQVFMSUFKQjVBQnFJQUVnQnlBSUVMcUFnSUFBQWtBZ0FpOEJiQ0lIUlEwQUlBQWdCenNCQkF3REN5QUNJQUlwQW1RM0FuUWdBaUFGTmdKd0lBSkJvMzlCb244Z0MwSC9BSEZCRWtZYk9nQjhJQUpCZ0FGcUlBRWdBa0h3QUdvUXg0Q0FnQUFnQVNBRU5nSk1JQUFnQWlrRGdBRTNBZ0FNQXdzZ0FFSUFOd0lBREFJTElBQWdCanNCQkFzZ0FTQUVOZ0pNQ3lBQ1FaQUJhaVNBZ0lDQUFBdEVBUUovQWtBZ0FVRXdhaUlESUFFZ0FVRTBhaWdDQUNJRVFRRnFFSnFBZ0lBQUlnRkIvLzhEY1EwQUlBTWdBaENiZ0lDQUFDQUFJQVEyQWdBTElBQWdBVHNCQkF2Z0F3RUZmeU9BZ0lDQUFFSEFBR3NpQWlTQWdJQ0FBQUpBQWtBQ1FDQUJLQUlRSWdNZ0FTZ0NJQ0lFYWlJRkxRQUFRZjhBY1VHbWYyb2lCa0VhU3cwQVFRRWdCblJCZ1lEQUlIRU5BUXNnQUVFQUtBSzBnY0NBQURZQkFBd0JDd0pBSUFNZ0JFRUJhaUlHYWkwQUFFSC9BSEZCQWtZTkFDQUFRUUFvQXJTQndJQUFOZ0VBREFFTElBRWdCRUVDYWpZQ0lDQUNRUUE2QUE0Z0FrRTJPd0VNSUFJZ0JqWUNDQ0FDSUFVdEFBQkIvd0J4SWdNNkFBY2dBaUFET2dBUEFrQWdBU0FDUVFocUVNR0FnSUFBSWdOQi8vOERjVVVOQUNBQUlBTTdBUUFNQVFzZ0FrRUFPZ0FhSUFKQnZBSTdBUmdnQWlBR05nSVVJQUlnQVNnQ0VDQUVhaTBBQUVIL0FIRWlCam9BRXlBQ0lBWTZBQnNDUUNBQklBSkJGR29Rd1lDQWdBQWlCa0gvL3dOeFJRMEFJQUFnQmpzQkFBd0JDeUFDUVJ4cUlBRkJGUkRXZ0lDQUFBSkFJQUl2QVNBaUJrVU5BQ0FBSUFZN0FRQU1BUXNnQWtFa2FpQUJFSnlBZ0lBQUFrQWdBaThCTkNJR1JRMEFJQUFnQmpzQkFBd0JDeUFDUVRocUlBRkJGaERXZ0lDQUFBSkFJQUl2QVR3aUJrVU5BQ0FBSUFZN0FRQU1BUXNDUUNBQlFTcEJBUkRpZ0lDQUFDSUJRZi8vQTNGRkRRQWdBQ0FCT3dFQURBRUxJQUJCQUNnQ3VJSEFnQUEyQVFBTElBSkJ3QUJxSklDQWdJQUFDNndCQVFSL0k0Q0FnSUFBUVNCcklnSWtnSUNBZ0FBZ0FTQUJLQUlnSWdOQkFXbzJBaUFnQWlBQkVNdUFnSUFBQWtBQ1FDQUNMd0VFSWdSRkRRQWdBQ0FFT3dFRURBRUxJQUlvQWdBaEJRSkFJQUZCS2tFQUVPS0FnSUFBSWdSQi8vOERjVVVOQUNBQUlBUTdBUVFNQVFzZ0FpQUZOZ0lNSUFJZ0F6WUNDQ0FDUVFFNkFCUWdBa0VZYWlBQklBSkJDR29ReDRDQWdBQWdBQ0FDS1FNWU53SUFDeUFDUVNCcUpJQ0FnSUFBQzB3QkFYOGpnSUNBZ0FCQkVHc2lBaVNBZ0lDQUFDQUNRUUE3QUEwZ0FpQUJRVDl4T2dBTUlBSWdBQ2dDSURZQ0NDQUFJQUpCQ0dvUTJJQ0FnQUFoQUNBQ1FSQnFKSUNBZ0lBQUlBQUxjUUVDZnlPQWdJQ0FBRUVRYXlJQ0pJQ0FnSUFBSUFKQkNHb2dBUkRNZ0lDQUFBSkFBa0FnQWk4QkRDSURSUTBBSUFBZ0F6c0JCQXdCQ3dKQUlBSW9BZ2dpQXcwQUlBQWdBVUVJRU1xQWdJQUFPd0VFREFFTElBQWdBellDQUNBQVFRQTdBUVFMSUFKQkVHb2tnSUNBZ0FBTE9RRUJmeU9BZ0lDQUFFRVFheUlDSklDQWdJQUFJQUpCQ0dvZ0FVRUFFT1NBZ0lBQUlBQWdBaWtEQ0RjQ0FDQUNRUkJxSklDQWdJQUFDOUVCQVFSL0k0Q0FnSUFBUVJCcklnTWtnSUNBZ0FCQkFDRUVRUUFoQlFKQUlBSkJjV3BCYzBrTkFFRUFJUVJCQUVFd0lBSkJBblJCd0lUQWdBQnFLQUlBSWdWcklnWWdCa0V3U3h0QkFXb2hCaUFGUVF4c1FmeUV3SUFBYWlFRkFrQURRQ0FGUVFScUtBSUFJQUpIRFFFQ1FDQUZLQUlBSUFJZ0FSRFFnSUNBQUVFQmNRMEFJQVZCREdvaEJTQUdRWDlxSWdZTkFRd0NDd3NnQXlBRlFRaHFMUUFBUWY4QWNTSUVPZ0FPUVFFaEJRd0JDMEVBSVFVTElBQWdCVG9BQVNBQUlBUTZBQUFnQTBFUWFpU0FnSUNBQUF1bUF3RUZmeU9BZ0lDQUFFRWdheUlCSklDQWdJQUFBa0FnQUVFWWFpMEFBQTBBQWtBQ1FBSkFBa0FDUUNBQUtBSUFJZ0lnQUNnQ0NDSURhaUlFTEFBQUlnVkJBRWdOQUNBRlFRMUhEUUZCQVNFRklBTkJBV29pQkNBQUtBSUVUdzBDSUFJZ0JHb3RBQUJCQ2tjaEJRd0NDeUFCUVFScUlBVVEwWUNBZ0FCQkFTRUZJQUV2QVFRTkFnSkFJQU1nQVMwQUJpSUNhaUFBS0FJRUlnVk5EUUFnQlNBRGF5RUZEQUlMQWtBQ1FBSkFJQUpCZm1vT0F3QUJBZ0FMSUFGQkNHb2dCQ0FDRU5LQWdJQUFRUUloQlNBQkx3RU1EUVFnQVM4QkNDQUJMUUFLUVJCMGNrSC8vLzhBY1VHRkFVY05CUXdFQ3lBQlFSQnFJQVFnQWhEVGdJQ0FBRUVESVFVZ0FTOEJGQTBESUFFdkFSQWdBUzBBRWtFUWRISkIvdi8vQUhGQnFNQUFSZzBEREFRTElBRkJHR29nQkNBQ0VOU0FnSUFBUVFRaEJTQUJMd0VjUlEwRERBSUxJQVZCSUVrZ0JVSC9BRVp5SVFVTElBVkJCM0ZGRFFJTElBQkJBVG9BR0NBQUlBTTJBZ3dnQUVFVWFrRUFPZ0FBSUFCQkVHb2dBeUFGUVFkeGFqWUNBQXdCQ3lBQUlBTWdBa0YvYWtFSGNXbzJBZ2dMSUFGQklHb2tnSUNBZ0FBTGV3SUJmd0YrSTRDQWdJQUFRUkJySWdNa2dJQ0FnQUJDZ0lDQWdLQUNJUVFDUUVFQlJRMEFBa0FnQWcwQVF2Ly8vLzhQSVFRTUFRdENBRUtBZ0lDQW9BSWdBU2tDQUNJRXB5QUNRUUJCQUNBRVFpQ0lweWdDQUJHQ2dJQ0FBQUFpQWhzZ0FxMkVJUVFMSUFBZ0JEY0NBQ0FEUVJCcUpJQ0FnSUFBQzFBQkEzOENRQUpBSUFBZ0FrY05BRUVCSVFNTUFRc0RRQ0FCUlNFRElBRkZEUUVnQVVGL2FpRUJJQUl0QUFBaEJDQUFMUUFBSVFVZ0FrRUJhaUVDSUFCQkFXb2hBQ0FGSUFSR0RRQUxDeUFEQzJJQkFYOUJ2SUhBZ0FBaEFnSkFJQUhBUVFCT0RRQkJ3SUhBZ0FBaEFpQUJRZUFCY1VIQUFVWU5BRUhFZ2NDQUFDRUNJQUZCOEFGeFFlQUJSZzBBUWNpQndJQUFRY3lCd0lBQUlBRkIrQUZ4UWZBQlJoc2hBZ3NnQUNBQ0tBRUFOZ0VBQzJZQkFYOENRQ0FCTFFBQklnTkJ3QUZ4UVlBQlJnMEFJQUJDZ0lDQWdJQUVOd0lBRHdzQ1FDQUJMUUFBUVI5eFFRWjBJQU5CUDNGeUlnRkIvd0JMRFFBZ0FFS0FnSUNBa0FRM0FnQVBDeUFBSUFFN0FRQWdBRUVBT3dFRUlBQkJBbXBCQURvQUFBdXdBUUVDZndKQUlBRXRBQUVpQTBIQUFYRkJnQUZHRFFBZ0FFS0FnSUNBZ0FRM0FnQVBDd0pBSUFFdEFBSWlCRUhBQVhGQmdBRkdEUUFnQUVLQWdJQ0FnQVEzQWdBUEN3SkFJQU5CUDNGQkJuUWdBUzBBQUVFUGNVRU1kSElpQVNBRVFUOXhjaUlEUWY4UFN3MEFJQUJDZ0lDQWdKQUVOd0lBRHdzQ1FDQUJRWUR3QTNGQmdMQURSdzBBSUFCQ2dJQ0FnS0FFTndJQUR3c2dBQ0FET3dFQUlBQkJBRHNCQkNBQVFRSnFRUUE2QUFBTDR3RUJBMzhDUUNBQkxRQUJJZ05Cd0FGeFFZQUJSZzBBSUFCQ2dJQ0FnSUFFTndJQUR3c0NRQ0FCTFFBQ0lnUkJ3QUZ4UVlBQlJnMEFJQUJDZ0lDQWdJQUVOd0lBRHdzQ1FDQUJMUUFESWdWQndBRnhRWUFCUmcwQUlBQkNnSUNBZ0lBRU53SUFEd3NDUUNBRFFUOXhRUVowSUFFdEFBQkJESFJ5SUFSQlAzRnlRUVowSUFWQlAzRnlJZ0ZCLy8vL0FIRWlBMEgvL3dOTERRQWdBRUtBZ0lDQWtBUTNBZ0FQQ3dKQUlBTkJnSURFQUVrTkFDQUFRb0NBZ0lDd0JEY0NBQThMSUFBZ0FUc0JBQ0FBUVFBN0FRUWdBRUVDYWlBQlFZQ0EvQUJ4UVJCMk9nQUFDK1lmQXdWL0FuNEVmeU9BZ0lDQUFFSGdCR3NpQXlTQWdJQ0FBQ0FESUFGQjFRQVF2WUNBZ0FBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQWdBeTBBQkVVTkFDQURLQUlBSVFRZ0EwRUlhaUFCRU9lQWdJQUFJQU12QVF3aUJVVU5BU0FBSUFVN0FRUU1EZ3NDUUNBQktBSVFJZ1lnQVNnQ0lDSUZhaTBBQUNJSFFmOEFjU0lFUWFoL2FnNEtCQTBJQlEwTkRRME5Cd0FMQWtBZ0JFR1NmMm9PQndnREJnME5EUWdBQ3lBRVFlVUFSZzBCREF3TEFrQWdBeWdDQ0NJRlJRMEFJQU1nQlRZQ0ZDQURJQVEyQWhBZ0EwR2VBVG9BSENBRFFTQnFJQUVnQTBFUWFoREhnSUNBQUNBQUlBTXBBeUEzQWdBTURRc0NRQ0FDUVFGeFJRMEFJQU5CQVRvQUxDQURJQVEyQWlnZ0EwRXdhaUFCSUFOQktHb1E2SUNBZ0FBZ0FDQURLUU13TndJQURBMExJQU5CT0dvZ0FSRHBnSUNBQUFKQUlBTXZBVHdpQWtVTkFDQUFJQUk3QVFRTURRc2dBeWdDT0NFQ0FrQWdBVUVyUVFFUTRvQ0FnQUFpQVVILy93TnhSUTBBSUFBZ0FUc0JCQXdOQ3lBQUlBSTJBZ0FnQUVFQU93RUVEQXdMSUFFZ0JVRUJhallDSUNBRFFjQUFhaUFCRU9xQWdJQUFBa0FnQXk4QlJDSUNSUTBBSUFBZ0Fqc0JCQXdNQ3lBRFFaOEJPZ0JVSUFNZ0F5Z0NRRFlDVENBRElBVTJBa2dnQTBIWUFHb2dBU0FEUWNnQWFoREhnSUNBQUNBQUlBTXBBMWczQWdBTUN3c2dBU0FGUVFGcU5nSWdJQU5CNEFCcUlBRVE2b0NBZ0FBQ1FDQURMd0ZrSWdKRkRRQWdBQ0FDT3dFRURBc0xJQU5COWdBNkFIUWdBeUFES0FKZ05nSnNJQU1nQlRZQ2FDQURRZmdBYWlBQklBTkI2QUJxRU1lQWdJQUFJQUFnQXlrRGVEY0NBQXdLQ3lBQ1FRRnhSUTBJSUFFZ0JVRUJhallDSUNBRFFZQUJhaUFCRU9xQWdJQUFBa0FnQXk4QmhBRWlBa1VOQUNBQUlBSTdBUVFNQ2dzZ0EwRUlPZ0NVQVNBRFFZZ0Jha0VJYWlBREtBS0FBVFlDQUNBRElBVTJBb2dCSUFOQm1BRnFJQUVnQTBHSUFXb1F4NENBZ0FBZ0FDQURLUU9ZQVRjQ0FBd0pDeUFDUVFGeFJRMEhJQUVnQlVFQmFqWUNJQ0FEUWFBQmFpQUJFT3VBZ0lBQUFrQWdBeThCcEFFaUFrVU5BQ0FBSUFJN0FRUU1DUXNnQXlnQ29BRWhCQ0FEUWFnQmFpQUJFT3FBZ0lBQUFrQWdBeThCckFFaUFrVU5BQ0FBSUFJN0FRUU1DUXNnQTBHNEFXb2dBeWdDcUFFMkFnQWdBMEVIT2dDOEFTQURJQVEyQXJRQklBTWdCVFlDc0FFZ0EwSEFBV29nQVNBRFFiQUJhaERIZ0lDQUFDQUFJQU1wQThBQk53SUFEQWdMSUFOQnlBRnFJQUVRN0lDQWdBQWdBQ0FES1FQSUFUY0NBQXdIQ3lBQklBVkJBV28yQWlBZ0EwSHdBMm9nQVVFUUVOYUFnSUFBUWdBaENDQURMd0gwQXlJQ0RRTWdBMEg0QTJvZ0FSRExnSUNBQUNBREx3SDhBeUlDRFFNZ0F5Z0MrQU1oQkNBRFFZQUVhaUFCUVJFUTFvQ0FnQUFnQXk4QmhBUWlBZzBESUFOQm1BUnFJQUVRN1lDQWdBQWdBeThCbkFRaUFnMERJQU5CcEFScUlBRVE1NENBZ0FBZ0F5OEJxQVFpQWcwRElBTW9BcVFFSWdjaEJnSkFJQWNOQUNBRFFhd0VhaUFCRU82QWdJQUFJQU12QWJBRUlnSU5CQUpBSUFNb0Fxd0VJZ1lOQUNBQlFRUVF5b0NBZ0FBaEFnd0ZDeUFEUWNBRWFpQUJRUklRdllDQWdBQWdBeTBBeEFRTkFnc2dBMEhZQkdvZ0FVSFpBQkM5Z0lDQUFBSkFJQU10QU53RVJRMEFJQU5CdEFScUlBRVE2NENBZ0FBZ0F5OEJ1QVFpQWcwRUlBTkJtQU5xSUFGQkFCRFZnSUNBQUNBREx3R2NBeUlDRFFRZ0F5QURLQUtZQXpZQ3hBTWdBeUFHTmdMQUF5QURRZUFEYWlBQklBTkJ3QU5xRU8rQWdJQUFRZ0FoQ1NBREx3SGtBeUlDRFFVZ0EwSFFCR29nQXlnQzRBTTJBZ0FnQTBIMUFEb0ExQVFnQXlBRU5nTE1CQ0FESUFVMkFzZ0VJQU5CaUFScUlBRWdBMEhJQkdvUXg0Q0FnQUFnQXlrRGlBUWlDVUtBZ0lDQWdJQkFneUVJSUFsQ0lJaW5JUUlNQlFzZ0J3MENRZ0FoQ1NBQlFSTVF4SUNBZ0FBaUFrSC8vd054UlEwQ0RBUUxJQU5CMUFGcUlBRVF5SUNBZ0FBQ1FDQURMd0hVQVNJRVJRMEFJQUFnQkRzQkJBd0dDd0pBSUFNdEFOWUJEUUFnQVNnQ0VDSUdJQUVvQWlBaUJXb3RBQUFoQnd3RkN5QURJQVZCQVdvMkF0Z0JJQU5CaFFFNkFPUUJJQU5CNkFGcUlBRWdBMEhZQVdvUXg0Q0FnQUFnQUNBREtRUG9BVGNDQUF3RkN5QURRZEFFYWlBR05nSUFJQU1nQkRZQ3pBUWdBeUFGTmdMSUJDQURRZlFBT2dEVUJDQURRWWdFYWlBQklBTkJ5QVJxRU1lQWdJQUFJQU1wQTRnRUlnbENnSUNBZ0lDQVFJTWhDQ0FKUWlDSXB5RUNEQUlMSUFOQjBBUnFJQVkyQWdBZ0F5QUVOZ0xNQkNBRElBVTJBc2dFSUFOQjlBQTZBTlFFSUFOQmlBUnFJQUVnQTBISUJHb1F4NENBZ0FBZ0F5a0RpQVFpQ1VLQWdJQ0FnSUJBZ3lFSUlBbENJSWluSVFJTUFRdENBQ0VKQ3lBQUlBS3RRdi8vQTROQ0lJWWdDSVFnQ1VMLy8vLy9ENE9FTndJQURBRUxRUUFoQkFKQUlBZEIvd0J4UVFKSERRQWdCU0FHYWtFQmFpMEFBRUgvQUhGQk5FY05BQ0FCSUFWQkFtbzJBaUFnQlNFRUN5QURRWUFDYWlBQkVNYUFnSUFBQWtBQ1FBSkFJQU12QVlRQ0lnVU5BQ0FES0FLQUFpSUhEUUlnQTBISUFtb2dBVUhpQUJDOWdJQ0FBQ0FEUVlBRWFpQUJRZUFBRUwyQWdJQUFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQURMUUNFQkVVTkFDQUJRY3dBYWlnQ0FDRUhJQU1vQW9BRUlRWWdBMEdZQkdvZ0FSRHdnSUNBQUNBREx3R2NCQ0lGRFFFZ0F5Z0NtQVFoQ2lBRFFhUUVhaUFCRU9lQWdJQUFJQU12QWFnRUlnVU5BU0FCUWNnQWFpRUxJQU1vQXFRRUlnd2hEUUpBQWtBQ1FBSkFBa0FDUUFKQUlBd05BQ0FEUWF3RWFpQUJFTzZBZ0lBQUlBTXZBYkFFSWdVTkNBSkFJQU1vQXF3RUlnME5BQ0FCUVFRUXlvQ0FnQUFoQlNBQklBYzJBa3dNQndzZ0EwSEFCR29nQVVFU0VMMkFnSUFBSUFNdEFNUUVEUUVMSUFOQjJBUnFJQUZCMlFBUXZZQ0FnQUFDUUNBRExRRGNCRVVOQUNBTElBRWdEUkREZ0lDQUFDSUZRZi8vQTNFTkNDQURRYlFFYWlBQlFRQVExWUNBZ0FBZ0F5OEJ1QVFpQlEwSUlBc2dBU0FES0FLMEJCRERnSUNBQUNJRlFmLy9BM0VOQ0VHQWdJQ0FlQ0VNREFVTElBcEJBVVlOQWlBTURRRWdBVUVURU1TQWdJQUFJZ1ZCLy84RGNVVU5BUXdIQ3lBS1FRRkdEUUlMSUFzZ0FTQU5FTU9BZ0lBQUlnVkIvLzhEY1EwRlFRQWhEQXdDQ3lBTURRQWdBVUVURU1TQWdJQUFJZ1ZCLy84RGNRMEVDeUFEUVpBRWFpQU5OZ0lBSUFOQjhRQTZBSlFFSUFNZ0JqWUNpQVFnQXlBQktBSklJQWRCQW5ScUtBSUFOZ0tNQkNBRFFaZ0RhaUFCSUFOQmlBUnFFTWVBZ0lBQUlBRWdCellDVENBREtRT1lBeUlKUWlDSXB5RUZJQW1uSVFjTUFRc2dBMEhnQTJvZ0FTQUJLQUpJSUFkQkFuUnFJQUVvQWt3Z0Iyc1F1b0NBZ0FBZ0F5OEI2QU1pQlEwQ0lBTkIwQVJxSUF3Z0NrSC8vLy8vQjNGeU5nSUFJQU5COGdBNkFOUUVJQU1nQXlnQzRBTTJBc3dFSUFNZ0JqWUN5QVFnQTBIQUEyb2dBU0FEUWNnRWFoREhnSUNBQUNBQklBYzJBa3dnQXlrRHdBTWlDVUlnaUtjaEJTQUpweUVIQ3lBRlFmLy9BM0VOQ0NBSERRb0xJQU5CMEFKcUlBRkIrUUFRdllDQWdBQWdBeTBBMUFKRkRRWWdBeWdDMEFJaEJ5QURRZGdDYWlBQlFSQVExb0NBZ0FBZ0F5OEIzQUlpQlEwSElBTkI0QUpxSUFFUXk0Q0FnQUFnQXk4QjVBSWlCUTBISUFNb0F1QUNJUVlnQTBIb0Ftb2dBVUVSRU5hQWdJQUFJQU12QWV3Q0lnVU5CeUFEUWZBQ2FpQUJFTzJBZ0lBQUlBTXZBZlFDSWdVTkJ5QURRZmdDYWlBQkVQR0FnSUFBSUFNdkFmd0NJZ1VOQnlBREtBTDRBaUVLSUFOQmdBTnFJQUVRNTRDQWdBQWdBeThCaEFNaUJRMEhJQU1vQW9BRElnd2hEU0FNRFFJZ0EwR0lBMm9nQVJEdWdJQ0FBQ0FETHdHTUF5SUZEUWNnQXlnQ2lBTWlEUTBCSUFGQkJCREtnSUNBQUNFRkRBVUxJQUVnQnpZQ1RBd0dDeUFEUVpBRGFpQUJRUklRdllDQWdBQWdBeTBBbEFNTkFRc2dBMEhZQTJvZ0FVSFpBQkM5Z0lDQUFDQURMUURjQTBVTkFTQURRYVFFYWlBQkVPdUFnSUFBSUFNdkFhZ0VJZ1VOQkNBRFFhd0VhaUFCUVFBUTFZQ0FnQUFnQXk4QnNBUWlCUTBFSUFNZ0F5Z0NyQVEyQXJ3RUlBTWdEVFlDdUFRZ0F5QUtOZ0swQkNBRFFjQUVhaUFCSUFOQnRBUnFFUEtBZ0lBQUlBTXZBY1FFSWdVTkJDQURRZEFFYWlBREtBTEFCRFlDQUNBRFFmQUFPZ0RVQkNBRElBWTJBc3dFSUFNZ0J6WUN5QVFnQTBIWUJHb2dBU0FEUWNnRWFoREhnSUNBQUNBREtRUFlCQ0lKUWlDSXB5RUZJQW1uSVFjTUFnc0NRQ0FLRFFBZ0EwR2dBMm9nRFRZQ0FDQURJQVkyQXB3RElBTWdCellDbUFNZ0EwSHVBRG9BcEFNZ0EwR29BMm9nQVNBRFFaZ0RhaERIZ0lDQUFDQURLUU9vQXlJSlFpQ0lweUVGSUFtbklRY01BZ3NnQXlBTk5nSzBBeUFESUFvMkFyQURJQU5CdUFOcUlBRWdBMEd3QTJvUTc0Q0FnQUFnQXk4QnZBTWlCUTBESUFOQnlBTnFJQU1vQXJnRE5nSUFJQU5CN3dBNkFNd0RJQU1nQmpZQ3hBTWdBeUFITmdMQUF5QURRZEFEYWlBQklBTkJ3QU5xRU1lQWdJQUFJQU1wQTlBRElnbENJSWluSVFVZ0NhY2hCd3dCQ3dKQUlBd05BQ0FCUVJNUXhJQ0FnQUFpQlVILy93TnhEUU1MQWtBZ0NnMEFJQU5CNkFOcUlBMDJBZ0FnQXlBR05nTGtBeUFESUFjMkF1QURJQU5CN2dBNkFPd0RJQU5COEFOcUlBRWdBMEhnQTJvUXg0Q0FnQUFnQXlrRDhBTWlDVUlnaUtjaEJTQUpweUVIREFFTElBTWdEVFlDL0FNZ0F5QUtOZ0w0QXlBRFFZQUVhaUFCSUFOQitBTnFFTytBZ0lBQUlBTXZBWVFFSWdVTkFpQURRWkFFYWlBREtBS0FCRFlDQUNBRFFlOEFPZ0NVQkNBRElBWTJBb3dFSUFNZ0J6WUNpQVFnQTBHWUJHb2dBU0FEUVlnRWFoREhnSUNBQUNBREtRT1lCQ0lKUWlDSXB5RUZJQW1uSVFjTElBVkIvLzhEY1EwQklBY05Bd3NDUUNBRExRRE1Ba1VOQUNBQlFRd1F5b0NBZ0FBaUJVSC8vd054RFFFTElBUkZEUUVnQVNnQ0lDRUhJQU5CaUFKcUlBRVEyNENBZ0FBZ0F5OEJqQUlpQlEwQUFrQUNRQ0FES0FLSUFrVU5BQ0FEUVpBQ2FpQUJFTm1BZ0lBQUlBTXZBWlFDSWdVTkFpQURLQUtRQWlFR0lBTkJtQUpxSUFFUTg0Q0FnQUFnQXk4Qm5BSWlCUTBDSUFNb0FwZ0NJUW9nQTBHZ0Ftb2dBUkQwZ0lDQUFDQURMd0drQWlJRkRRSWdBeWdDb0FJaERDQURRYWdDYWlBQlFRd1F2WUNBZ0FBQ1FBSkFJQU10QUt3Q0RRQkJBQ0VGREFFTElBTkJzQUpxSUFFUXk0Q0FnQUFnQXk4QnRBSWlCUTBESUFNb0FyQUNRUUJISVFVTEFrQWdCZzBBSUFvTkFDQU1EUUFnQlVVTkFRc2dBMEVBT2dDK0FpQURRVGM3QWJ3Q0lBTWdCRFlDdUFJZ0EwRzRBbW9oQlF3QkN5QURRUUE2QU1ZQ0lBTkJEVHNCeEFJZ0F5QUhOZ0xBQWlBRFFjQUNhaUVGQ3lBQklBVVEySUNBZ0FBaUJVSC8vd054UlEwQkN5QUFJQVU3QVFRTUFnc0NRQ0FDUVFGeFJRMEFJQU5COEFGcUlBRkJtSkxBZ0FBUTZJQ0FnQUFnQUNBREtRUHdBVGNDQUF3Q0N5QURRZmdCYWlBQkVPbUFnSUFBQWtBZ0F5OEIvQUVpQWtVTkFDQUFJQUk3QVFRTUFnc2dBeWdDK0FFaEFnSkFJQUZCSzBFQkVPS0FnSUFBSWdGQi8vOERjVVVOQUNBQUlBRTdBUVFNQWdzZ0FDQUNOZ0lBSUFCQkFEc0JCQXdCQ3lBQUlBYzJBZ0FnQUVFQU93RUVDeUFEUWVBRWFpU0FnSUNBQUF1VkFRRUNmeU9BZ0lDQUFFRVFheUlESklDQWdJQUFBa0FDUUNBQktBSVFJQUVvQWlBaUJHb3RBQUJCL3dCeElBSkIvd0J4SWdKR0RRQWdBMEVBT2dBT0lBTkJQenNCRENBRElBUTJBZ2dnQXlBQ09nQUhJQU1nQWpvQUR5QUJJQU5CQ0dvUTJJQ0FnQUFoQVF3QkN5QUFJQVEyQWdBZ0FTQUVRUUZxTmdJZ1FRQWhBUXNnQUNBQk93RUVJQU5CRUdva2dJQ0FnQUFMNHdFQkJIOGpnSUNBZ0FCQk1Hc2lBeVNBZ0lDQUFFRUFJUVFDUUNBQUtBSUlJZ1VnQWs4TkFFRUFJUVFnQlNBRklBSVF0SUNBZ0FBaUFrOE5BQ0FESUFFcEFnQTNBd2dDUUNBRFFRaHFJQUFvQWdBaUJpQUZJQUlRb1lDQWdBQkJBWEVOQUNBRElBRXBBZ0EzQXhBZ0EwRWNhaUFEUVJCcUlBSVFvb0NBZ0FBZ0F5OEJKQ0lFRFFFZ0F5Z0NJQ0VDSUFNb0Fod2dBQ2dDQUNBQUtBSUVRUUowRU5xQmdJQUFJUVFnQXlBQktRSUFOd01vSUFOQktHb2dCaUFGRUk2QWdJQUFJQUFnQkRZQ0FBc2dBQ0FDTmdJSVFRQWhCQXNnQTBFd2FpU0FnSUNBQUNBRUN4Z0FJQUFnQVJEQmdJQ0FBQ0lCUVI0Z0FVSC8vd054R3d2R0FRRUNmeU9BZ0lDQUFFRWdheUlDSklDQWdJQUFJQUlnQVVIS0FCQzlnSUNBQUFKQUFrQWdBaTBBQkVVTkFDQUNRUWhxSUFGQkVCRFdnSUNBQUFKQUlBSXZBUXdpQTBVTkFDQUFJQU03QVFRTUFnc2dBa0VRYWlBQkVNdUFnSUFBQWtBZ0FpOEJGQ0lEUlEwQUlBQWdBenNCQkF3Q0N5QUNLQUlRSVFNZ0FrRVlhaUFCUVJFUTFvQ0FnQUFDUUNBQ0x3RWNJZ0ZGRFFBZ0FDQUJPd0VFREFJTElBQWdBellDQUNBQVFRQTdBUVFNQVFzZ0FFSUFOd0lBQ3lBQ1FTQnFKSUNBZ0lBQUMzRUJBbjhqZ0lDQWdBQkJFR3NpQWlTQWdJQ0FBQ0FDUVFocUlBRVEyNENBZ0FBQ1FBSkFJQUl2QVF3aUEwVU5BQ0FBSUFNN0FRUU1BUXNDUUNBQ0tBSUlJZ01OQUNBQUlBRkJGeERLZ0lDQUFEc0JCQXdCQ3lBQUlBTTJBZ0FnQUVFQU93RUVDeUFDUVJCcUpJQ0FnSUFBQy9BYUFRaC9JNENBZ0lBQVFlQUdheUlDSklDQWdJQUFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlBRW9BaEFpQXlBQktBSWdJZ1JxTFFBQVFmOEFjU0lGUVZScURnTUVBUVVBQ3lBRlFSZEdEUVVnQlVFNlJnMEJJQVZCelFCR0RRSUxJQUpCMkFacUlBRVE5WUNBZ0FBZ0FDQUNLUVBZQmpjQ0FBd0pDeUFCSUFSQkFXbzJBaUFnQWtFUWFpQUJFTnFBZ0lBQUFrQWdBaThCRkNJRlJRMEFJQUFnQlRzQkJBd0pDeUFDUWNNQU9nQWtJQUlnQWlnQ0VEWUNIQ0FDSUFRMkFoZ2dBa0VvYWlBQklBSkJHR29ReDRDQWdBQWdBQ0FDS1FNb053SUFEQWdMQWtBZ0F5QUVRUUZxSWdWcUxRQUFRZjhBY1VFelJnMEFJQUpCMEFCcUlBRVE5WUNBZ0FBZ0FDQUNLUU5RTndJQURBZ0xJQUVnQkVFQ2FqWUNJQ0FDUVRCcUlBRVEyb0NBZ0FBQ1FDQUNMd0UwSWdORkRRQWdBQ0FET3dFRURBZ0xJQUpCd0FCcUlBSW9BakEyQWdBZ0FrR0FBVG9BUkNBQ0lBVTJBandnQWlBRU5nSTRJQUpCeUFCcUlBRWdBa0U0YWhESGdJQ0FBQ0FBSUFJcEEwZzNBZ0FNQndzZ0FTQUVRUUZxTmdJZ0lBSkIyQUJxSUFFUTlvQ0FnQUFDUUNBQ0x3Rm9JZ1ZGRFFBZ0FDQUZPd0VFREFjTElBSW9BbVFoQmlBQ0tBSmdJUU1nQWlnQ1hDRUhJQUlvQWxnaENDQUNRZXdBYWlBQkVOcUFnSUFBQWtBZ0FpOEJjQ0lGUlEwQUlBQWdCVHNCQkF3SEN5QUNLQUpzSVFVQ1FDQURSUTBBSUFJZ0JqWUNoQUVnQWlBRE5nS0FBU0FDSUFjMkFud2dBaUFJTmdKNElBSkJBRFlDZENBQ1FZZ0JhaUFCSUFKQjlBQnFFUGVBZ0lBQUFrQWdBaThCakFFaUEwVU5BQ0FBSUFNN0FRUU1DQXNnQWtHWUFXb2dCVFlDQUNBQ1Fja0FPZ0NjQVNBQ0lBSW9Bb2dCTmdLVUFTQUNJQVEyQXBBQklBSkJvQUZxSUFFZ0FrR1FBV29ReDRDQWdBQWdBQ0FDS1FPZ0FUY0NBQXdIQ3lBSFJRMENJQUlnQnpZQ3RBRWdBaUFJTmdLd0FTQUNRUUEyQXF3QklBSkJ1QUZxSUFFZ0FrR3NBV29ROG9DQWdBQUNRQ0FDTHdHOEFTSURSUTBBSUFBZ0F6c0JCQXdIQ3lBQ1FjZ0JhaUFGTmdJQUlBSkJ5QUE2QU13QklBSWdBaWdDdUFFMkFzUUJJQUlnQkRZQ3dBRWdBa0hRQVdvZ0FTQUNRY0FCYWhESGdJQ0FBQ0FBSUFJcEE5QUJOd0lBREFZTElBRWdCRUVCYWpZQ0lDQUNRZlFCYWlBQkVQYUFnSUFBQWtBZ0FpOEJoQUlpQlVVTkFDQUFJQVU3QVFRTUJnc2dBaWdDZ0FJaEJpQUNLQUw4QVNFRElBSW9BdmdCSVFjZ0FpZ0M5QUVoQ0NBQ1FZZ0NhaUFCRU5xQWdJQUFBa0FnQWk4QmpBSWlCVVVOQUNBQUlBVTdBUVFNQmdzZ0FpZ0NpQUloQlFKQUlBTkZEUUFnQWlBR05nS2dBaUFDSUFNMkFwd0NJQUlnQnpZQ21BSWdBaUFJTmdLVUFpQUNRUUEyQXBBQ0lBSkJwQUpxSUFFZ0FrR1FBbW9ROTRDQWdBQUNRQ0FDTHdHb0FpSURSUTBBSUFBZ0F6c0JCQXdIQ3lBQ1FiUUNhaUFGTmdJQUlBSkJ5UUE2QUxnQ0lBSWdBaWdDcEFJMkFyQUNJQUlnQkRZQ3JBSWdBa0c4QW1vZ0FTQUNRYXdDYWhESGdJQ0FBQUpBSUFJdkFjQUNJZ1VOQUNBQ1Fid0NhaUVGREFZTElBQWdCVHNCQkF3R0N3SkFBa0FDUUNBSFJRMEFJQUlnQnpZQ3pBSWdBaUFJTmdMSUFpQUNRUUEyQXNRQ0lBSkIwQUpxSUFFZ0FrSEVBbW9ROG9DQWdBQWdBaThCMUFJaUEwVU5BU0FBSUFNN0FRUU1DQXNnQWtINEFtb2dCVFlDQUNBQ0lBZzJBdlFDSUFJZ0JEWUM4QUlnQWtIR0FEb0EvQUlnQWtHQUEyb2dBU0FDUWZBQ2FoREhnSUNBQUNBQ0x3R0VBeUlGRFFFZ0FrR0FBMm9oQlF3R0N5QUNRZUFDYWlBRk5nSUFJQUpCeUFBNkFPUUNJQUlnQWlnQzBBSTJBdHdDSUFJZ0JEWUMyQUlnQWtIb0Ftb2dBU0FDUWRnQ2FoREhnSUNBQUFKQUlBSXZBZXdDSWdVTkFDQUNRZWdDYWlFRkRBWUxJQUFnQlRzQkJBd0dDeUFBSUFVN0FRUU1CUXNDUUFKQUlBTWdCRUVCYWlJRmFpMEFBRUgvQUhGQkxFWU5BQ0FCSUFVMkFpQWdBa0g4QkdvZ0FSRE1nSUNBQUNBQ0x3R0FCU0lGUlEwQklBQWdCVHNCQkF3R0N5QUJJQVJCQW1vMkFpQWdBa0drQTJvZ0FVRUNFTDJBZ0lBQUFrQWdBaTBBcUFORkRRQWdBa0VJYWlBQktBSUlJQUVvQWhnZ0FpZ0NwQU5CQW5ScUlnUW9BZ0FpQTJvZ0JFRUVhaWdDQUNBRGF4RDRnSUNBQUVFQUlRTWdBaWdDQ0NBQ0tBSU1RY2Fjd0lBQVFRRVFpb0NBZ0FCQkFYRU5CQ0FCSUFFb0FpQkJmMm8yQWlBTUJBc2dBa0dzQTJvZ0FVRTBFTDJBZ0lBQUFrQWdBaTBBc0FNTkFFRUFJUU1NQkFzZ0FrRzBBMm9nQVJETGdJQ0FBQUpBSUFJdkFiZ0RJZ1JGRFFBZ0FDQUVPd0VFREFZTElBSW9BclFESVFNTUF3c2dBaWdDL0FRaEJTQUNRWVFGYWlBQlFUUVF2WUNBZ0FBQ1FDQUNMUUNJQlEwQVFRQWhCd3dDQ3lBQ1FZd0ZhaUFCRU11QWdJQUFBa0FnQWk4QmtBVWlBMFVOQUNBQUlBTTdBUVFNQlFzZ0FpZ0NqQVVoQnd3QkN5QUNRZUFCYWlBRk5nSUFJQUlnQ0RZQzNBRWdBaUFFTmdMWUFTQUNRY1lBT2dEa0FTQUNRZWdCYWlBQklBSkIyQUZxRU1lQWdJQUFJQUFnQWlrRDZBRTNBZ0FNQXdzZ0FrR1VCV29nQVVFWUVOYUFnSUFBQWtBZ0FpOEJtQVVpQTBVTkFDQUFJQU03QVFRTUF3c0NRQUpBQWtBQ1FBSkFBa0FDUUNBRkRRQWdBa0djQldvZ0FSRDJnSUNBQUNBQ0x3R3NCU0lGUlEwQklBQWdCVHNCQkF3SkN5QUJLQUlRSUFFb0FpQnFMUUFBUWY4QWNTSURRYmQvYWlJSVFRMU5EUUVNQXdzZ0FpZ0NwQVVoQmlBQ0tBS2dCU0VGSUFJb0Fwd0ZJUWdnQWtHd0JXb2dBUkRhZ0lDQUFBSkFJQUl2QWJRRklnTkZEUUFnQUNBRE93RUVEQWdMSUFJb0FyQUZJUU1nQmtVTkFTQUJRVEJxRU1LQWdJQUFJUWtnQWtFQU9nQytCU0FDUVNNN0Fid0ZJQUlnQ1NBR1FRSjBhaWdDQURZQ3VBVWdBU0FDUWJnRmFoREJnSUNBQUNJR1FmLy9BM0ZGRFFFZ0FDQUdPd0VFREFjTFFRRWdDSFJCaDhBQWNVVU5BUXdDQ3dKQUlBY2dCWElOQUNBQ1FjZ0ZhaUFETmdJQUlBSWdDRFlDeEFVZ0FpQUVOZ0xBQlNBQ1FjWUFPZ0RNQlNBQ1FkQUZhaUFCSUFKQndBVnFFTWVBZ0lBQUlBQWdBaWtEMEFVM0FnQU1CZ3NDUUNBSUlBVnlEUUFnQWtIZ0JXb2dBellDQUNBQ0lBYzJBdHdGSUFJZ0JEWUMyQVVnQWtISEFEb0E1QVVnQWtIb0JXb2dBU0FDUWRnRmFoREhnSUNBQUNBQUlBSXBBK2dGTndJQURBWUxJQUlnQlRZQy9BVWdBaUFJTmdMNEJTQUNJQWMyQXZRRklBSkJnQVpxSUFFZ0FrSDBCV29ROG9DQWdBQUNRQ0FDTHdHRUJpSUZSUTBBSUFBZ0JUc0JCQXdHQ3lBQ1FaQUdhaUFETmdJQUlBSkJ5QUE2QUpRR0lBSWdBaWdDZ0FZMkFvd0dJQUlnQkRZQ2lBWWdBa0dZQm1vZ0FTQUNRWWdHYWhESGdJQ0FBQ0FBSUFJcEE1Z0dOd0lBREFVTElBTkIrQUJHRFFBZ0FrR2dCbW9nQVJEYWdJQ0FBQ0FDTHdHa0JpSURSUTBCSUFBZ0F6c0JCQXdFQ3lBQUlBRkJJaERLZ0lDQUFEc0JCQXdEQ3lBQ0tBS2dCaUVEQWtBZ0J3MEFJQUpCc0FacUlBTTJBZ0FnQWlBRk5nS3NCaUFDSUFRMkFxZ0dJQUpCeEFBNkFMUUdJQUpCdUFacUlBRWdBa0dvQm1vUXg0Q0FnQUFnQUNBQ0tRTzRCamNDQUF3REN3SkFJQUZCUEdvZ0FVRUNFTHVBZ0lBQUlnaEIvLzhEY1VVTkFDQUFJQWc3QVFRTUF3c2dBVUhBQUdvaUNDQUlLQUlBSWdaQkFXbzJBZ0FnQVNnQ1BDQUdRUUowYWlBSE5nSUFJQWdnQ0NnQ0FDSUhRUUZxTmdJQUlBSkJ5QVpxSUFZMkFnQWdBU2dDUENBSFFRSjBhaUFETmdJQUlBSkJ4UUE2QU13R0lBSWdCVFlDeEFZZ0FpQUVOZ0xBQmlBQ1FkQUdhaUFCSUFKQndBWnFFTWVBZ0lBQUlBQWdBaWtEMEFZM0FnQU1BZ3NnQWtHOEEyb2dBVUVZRU5hQWdJQUFBa0FnQWk4QndBTWlCRVVOQUNBQUlBUTdBUVFNQWdzZ0FrSEVBMm9nQVJEMmdJQ0FBQUpBSUFJdkFkUURJZ1JGRFFBZ0FDQUVPd0VFREFJTElBSW9BdEFESVFrZ0FpZ0N6QU1oQnlBQ0tBTElBeUVJSUFJb0FzUURJUVlnQWtIWUEyb2dBUkRhZ0lDQUFBSkFJQUl2QWR3RElnUkZEUUFnQUNBRU93RUVEQUlMSUFJb0F0Z0RJUVFDUUNBSERRQUNRQ0FESUFoeURRQWdBa0hvQTJvZ0JEWUNBQ0FDSUFZMkF1UURJQUlnQlRZQzRBTWdBa0hHQURvQTdBTWdBa0h3QTJvZ0FTQUNRZUFEYWhESGdJQ0FBQ0FBSUFJcEEvQUROd0lBREFNTEFrQWdCaUFJY2cwQUlBSkJnQVJxSUFRMkFnQWdBaUFETmdMOEF5QUNJQVUyQXZnRElBSkJ4d0E2QUlRRUlBSkJpQVJxSUFFZ0FrSDRBMm9ReDRDQWdBQWdBQ0FDS1FPSUJEY0NBQXdEQ3lBQ0lBZzJBcHdFSUFJZ0JqWUNtQVFnQWlBRE5nS1VCQ0FDUWFBRWFpQUJJQUpCbEFScUVQS0FnSUFBQWtBZ0FpOEJwQVFpQTBVTkFDQUFJQU03QVFRTUF3c2dBa0d3QkdvZ0JEWUNBQ0FDUWNnQU9nQzBCQ0FDSUFJb0FxQUVOZ0tzQkNBQ0lBVTJBcWdFSUFKQnVBUnFJQUVnQWtHb0JHb1F4NENBZ0FBZ0FDQUNLUU80QkRjQ0FBd0NDeUFDSUFrMkF0UUVJQUlnQnpZQzBBUWdBaUFJTmdMTUJDQUNJQVkyQXNnRUlBSWdBellDeEFRZ0FrSFlCR29nQVNBQ1FjUUVhaEQzZ0lDQUFBSkFJQUl2QWR3RUlnTkZEUUFnQUNBRE93RUVEQUlMSUFKQjZBUnFJQVEyQWdBZ0FrSEpBRG9BN0FRZ0FpQUNLQUxZQkRZQzVBUWdBaUFGTmdMZ0JDQUNRZkFFYWlBQklBSkI0QVJxRU1lQWdJQUFJQUFnQWlrRDhBUTNBZ0FNQVFzZ0FrR1FBMm9nQlNnQ0FEWUNBQ0FDUWNZQU9nQ1VBeUFDUVFBMkFvd0RJQUlnQkRZQ2lBTWdBa0dZQTJvZ0FTQUNRWWdEYWhESGdJQ0FBQ0FBSUFJcEE1Z0ROd0lBQ3lBQ1FlQUdhaVNBZ0lDQUFBdGRBUUYvSTRDQWdJQUFRUkJySWdNa2dJQ0FnQUFnQTBFSWFpQUFLQUlJSUFBb0FoZ2lBQ0FCUVFKMGFpZ0NBQ0lCYWlBQUlBSkJBblJxS0FJQUlBRnJRUW9RNW9DQWdBQWdBeTBBRENFQUlBTkJFR29rZ0lDQWdBQWdBRVVMaWdJQkJYOGpnSUNBZ0FCQk1Hc2lBeVNBZ0lDQUFBSkFBa0FnQUNnQ0NDSUVJQUFvQWdRaUJVc05BQ0FFSUFRZ0JVRUJhaEMwZ0lDQUFDSUdUdzBBSUFNZ0FTa0NBRGNEQ0FKQUlBTkJDR29nQUNnQ0FDSUhJQVFnQmhDamdJQ0FBRUVCY1EwQUlBTWdBU2tDQURjREVDQURRUnhxSUFOQkVHb2dCaENrZ0lDQUFDQURMd0VrSWdVTkFpQURLQUlnSVFZZ0F5Z0NIQ0FBS0FJQUlBQW9BZ1JCQTNRUTJvR0FnQUFoQlNBRElBRXBBZ0EzQXlnZ0EwRW9haUFISUFRUXBZQ0FnQUFnQUNBRk5nSUFDeUFBSUFZMkFnZ2dBQ2dDQkNFRkN5QUFJQVZCQVdvMkFnUWdBQ2dDQUNBRlFRTjBhaUFDS1FJQU53SUFRUUFoQlFzZ0EwRXdhaVNBZ0lDQUFDQUZDOWtSQWd4L0FYNGpnSUNBZ0FCQmdBSnJJZ0lrZ0lDQWdBQWdBa0VNYWlBQlFkOEFFTDJBZ0lBQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBQ0xRQVFSUTBBSUFJb0Fnd2hBeUFDUVJScUlBRkIvZ0FRMzRDQWdBQUNRQ0FDTHdFWUlnUkZEUUFnQUNBRU93RUVEQWdMSUFJb0FoUWhCU0FDUVJ4cUlBRkJBaEM5Z0lDQUFDQUNRWndCYWlBQlFSQVExb0NBZ0FBZ0FpOEJvQUVpQkEwRklBRkJ5QUJxSVFZZ0FVSE1BR29vQWdBaEIwRUFMUUNZZ2NDQUFDRUlRUUF0QUtDQndJQUFJUWtDUUFKQUEwQWdBa0drQVdvZ0FVRVJFTDJBZ0lBQUlBSXRBS2dCRFFFQ1FDQUlRUU54UVFGSERRQWdBU2dDSUNFS1FRSWhDQXNnQWtIc0FXb2dBUkMrZ0lDQUFDQUNMd0gwQVNJRURRVUNRQUpBQWtBQ1FBSkFJQUVvQWhBaUJDQUJLQUlnSWd0cUxRQUFJZ3hCL3dCeElnMUJIRVlOQUFKQUFrQWdEVUhWQUVZTkFDQU5RZU1BUncwQkN5QUJJQXRCQVdvaUN6WUNJQ0FFSUF0cUxRQUFJUXdMQWtBZ0RFSC9BSEZCQWtjTkFDQUxJQVJxUVFGcUxRQUFRZjhBY1VFMFJ3MENJQUVnQzBFQ2FpSUxOZ0lnSUFRZ0Myb3RBQUFoREFzZ0RFSC9BSEZCemdCSERRRUxJQUVnQzBFQmFpSUxOZ0lnREFFTElBSkIrQUZxSUFFUTJvQ0FnQUFnQWlrRCtBRWlEa0lnaUtjaUJFSC8vd054RFFnZ0RxY2lCQTBCSUFFb0FpQWhDeUFCS0FJUUlRUUxJQXNnQkdwQmYyb3RBQUJCL3dCeFFSeEhEUUVnQ0VFRGNRMEJJQWtoQ0F3QkN5QUdJQUVnQkJERGdJQ0FBQ0lFUWYvL0EzRU5CaUFCS0FJZ0lRc2dBU2dDRUNFRUN3SkFBa0FDUUFKQUlBUWdDMm90QUFCQi93QnhJZ1JCVEdvT0JBWUNBZ0FCQ3lBQklBdEJBV28yQWlBTUF3c2dCRUVSUmcwQklBUkJhbW9PQXdRQUJBQUxJQUZCTGhERWdJQ0FBQ0lFUWYvL0EzRkZEUUVNQmdzTElBRWdDMEVCYWpZQ0lBc2dDRUVEY1VFQ1J3MENJQUpCQURvQXNnRWdBa0VvT3dHd0FTQUNJQW8yQXF3QklBRWdBa0dzQVdvUXdZQ0FnQUFpQkVILy93TnhSUTBDREFNTElBRkJFUkQ3Z0lDQUFDRUVJQUVnQnpZQ1RBd0VDeUFBUWdBM0FnQU1CZ3NnQVNnQ1NDQUhRUUowYWlFRVFhU0J3SUFBSVFzQ1FBSkFJQUVvQWt3Z0Iyc2lEQTRDQXdBQkN5QUNRUUE2QUxRQklBSkJBRHNCeEFFZ0FrRUFPZ0RBQVNBQ0lBUW9BZ0FpRERZQ3VBRWdBa0c0QVdvaEN3d0NDeUFDUWNnQmFpQUJJQVFnREJDNmdJQ0FBQ0FDTHdIUUFTSUVEUUFnQWtFQk9nRFVBU0FDUVFBN0FlUUJJQUlnQWlrRHlBRWlEamNEMkFFZ0FrRUJPZ0RnQVNBT3B5RU1JQUpCMkFGcUlRc01BUXNnQVNBSE5nSk1EQUlMSUFFZ0J6WUNUQ0FMTFFBSVFRRnhJUWdnQ3k4QkRDRUVJQXNvQWdRaEN3c2dCRUgvL3dOeFJRMEJDeUFCSUFVUTRJQ0FnQUFnQUNBRU93RUVEQUVMSUFKQkpHb2dBUkRaZ0lDQUFBSkFJQUl2QVNnaUJFVU5BQ0FCSUFVUTRJQ0FnQUFnQUNBRU93RUVEQUVMSUFJb0FpUWhEU0FDUVN4cUlBRVE4NENBZ0FBQ1FDQUNMd0V3SWdSRkRRQWdBU0FGRU9DQWdJQUFJQUFnQkRzQkJBd0JDeUFDS0FJc0lRa2dBa0UwYWlBQkVQU0FnSUFBQWtBZ0FpOEJPQ0lFUlEwQUlBRWdCUkRnZ0lDQUFDQUFJQVE3QVFRTUFRc2dBaWdDTkNFS0lBSkJ5QUZxSUFGQjB3QVF2WUNBZ0FBQ1FBSkFJQUl0QU13QkRRQkJBQ0VHREFFTElBSkI3QUZxSUFGQkVCRFdnSUNBQUFKQUlBSXZBZkFCSWdRTkFDQUNRYmdCYWlBQkVNdUFnSUFBSUFJdkFid0JJZ1FOQUNBQ0tBSzRBU0VHSUFKQjJBRnFJQUZCRVJEV2dJQ0FBQ0FDTHdIY0FTSUVSUTBCQ3lBQklBVVE0SUNBZ0FBZ0FDQUVPd0VFREFFTElBSkJQR29nQVVFSUVMMkFnSUFBSUFKQnhBQnFJQUVRMjRDQWdBQUNRQ0FDTHdGSUlnUkZEUUFnQVNBRkVPQ0FnSUFBSUFBZ0JEc0JCQXdCQ3dKQUlBSW9Ba1FpQkEwQUlBRkJFaERFZ0lDQUFDSUhRZi8vQTNGRkRRQWdBU0FGRU9DQWdJQUFJQUFnQnpzQkJBd0JDd0pBSUEwTkFDQUtEUUFnQmcwQUlBa05BQUpBSUFoQkFYRU5BQ0FDUWRRQWFpQUVOZ0lBSUFJZ0REWUNVQ0FDSUFNMkFrd2dBa0g3QURvQVdDQUJRVEJxSUFVZ0FrSE1BR29RdklDQWdBQWdBQ0FGTmdJQUlBQkJBRHNCQkF3Q0N5QUNJQXMyQW1BZ0FpQU1OZ0pjSUFKQjVBQnFJQUVnQWtIY0FHb1E3NENBZ0FBQ1FDQUNMd0ZvSWd0RkRRQWdBU0FGRU9DQWdJQUFJQUFnQ3pzQkJBd0NDeUFDUWZRQWFpQUVOZ0lBSUFKQi9BQTZBSGdnQWlBQ0tBSmtOZ0p3SUFJZ0F6WUNiQ0FCUVRCcUlBVWdBa0hzQUdvUXZJQ0FnQUFnQUNBRk5nSUFJQUJCQURzQkJBd0JDeUFCUVR4cUlRY0NRQ0FJUVFGeERRQUNRQ0FISUFGQkJSQzdnSUNBQUNJTFFmLy9BM0ZGRFFBZ0FTQUZFT0NBZ0lBQUlBQWdDenNCQkF3Q0N5QUJRY0FBYWlJTElBc29BZ0FpQ0VFQmFqWUNBQ0FCS0FJOElBaEJBblJxSUF3MkFnQWdDeUFMS0FJQUlneEJBV28yQWdBZ0FTZ0NQQ0FNUVFKMGFpQU5OZ0lBSUFzZ0N5Z0NBQ0lNUVFGcU5nSUFJQUVvQWp3Z0RFRUNkR29nQ1RZQ0FDQUxJQXNvQWdBaURFRUJhallDQUNBQktBSThJQXhCQW5ScUlBbzJBZ0FnQ3lBTEtBSUFJZ3hCQVdvMkFnQWdBU2dDUENBTVFRSjBhaUFHTmdJQUlBSkIvUUE2QUlnQklBSkJoQUZxSUFRMkFnQWdBaUFJTmdLQUFTQUNJQU0yQW53Z0FVRXdhaUFGSUFKQi9BQnFFTHlBZ0lBQUlBQWdCVFlDQUNBQVFRQTdBUVFNQVFzQ1FDQUhJQUZCQmhDN2dJQ0FBQ0lJUWYvL0EzRkZEUUFnQVNBRkVPQ0FnSUFBSUFBZ0NEc0JCQXdCQ3lBQlFjQUFhaUlJSUFnb0FnQWlCMEVCYWpZQ0FDQUJLQUk4SUFkQkFuUnFJQXcyQWdBZ0NDQUlLQUlBSWd4QkFXbzJBZ0FnQVNnQ1BDQU1RUUowYWlBTE5nSUFJQWdnQ0NnQ0FDSUxRUUZxTmdJQUlBRW9BandnQzBFQ2RHb2dEVFlDQUNBSUlBZ29BZ0FpQzBFQmFqWUNBQ0FCS0FJOElBdEJBblJxSUFrMkFnQWdDQ0FJS0FJQUlndEJBV28yQWdBZ0FTZ0NQQ0FMUVFKMGFpQUtOZ0lBSUFnZ0NDZ0NBQ0lMUVFGcU5nSUFJQUVvQWp3Z0MwRUNkR29nQmpZQ0FDQUNRZjRBT2dDWUFTQUNRWlFCYWlBRU5nSUFJQUlnQnpZQ2tBRWdBaUFETmdLTUFTQUJRVEJxSUFVZ0FrR01BV29RdklDQWdBQWdBQ0FGTmdJQUlBQkJBRHNCQkFzZ0FrR0FBbW9rZ0lDQWdBQUxWQUVDZndKQUlBRkJNR29pQXlBQklBRkJOR29vQWdCQkFXb1ErWUNBZ0FBaUJFSC8vd054RFFBZ0F4RDZnSUNBQUNBQktBSTBha0YvYWlBQ09nQUFJQUFnQVNnQ05FRi9hallDQUFzZ0FDQUVPd0VFQzFNQkFYOGdBRUV3YWlFQ0FrQWdBRUUwYWlnQ0FDQUJSdzBBSUFJZ0FDQUJRWDlxRVBtQWdJQUFHZzhMSUFJUStvQ0FnQUFnQVdwQmhBRTZBQUFnQWhEQ2dJQ0FBQ0FCUVFKMGFpQUFLQUlnTmdJQUM0d0hBUWgvSTRDQWdJQUFRYUFCYXlJQ0pJQ0FnSUFBSUFJZ0FVSFdBQkM5Z0lDQUFDQUNJUU1DUUFKQUFrQUNRQ0FDTFFBRURRQWdBa0VJYWlBQlFmY0FFTDJBZ0lBQUlBSkJDR29oQXlBQ0xRQU1SUTBCQ3lBREtBSUFJUVFnQWtFUWFpQUJRUUlRMW9DQWdBQUNRQ0FDTHdFVUlnTkZEUUFnQUNBRE93RUVEQU1MSUFKQkdHb2dBVUUwRUwyQWdJQUFBa0FnQWkwQUhBMEFRUUFoQlF3Q0N5QUNRU0JxSUFFUTJvQ0FnQUFDUUNBQ0x3RWtJZ05GRFFBZ0FDQURPd0VFREFNTElBSW9BaUFoQlF3QkN5QUFRZ0EzQWdBTUFRc2dBa0VvYWlBQkVObUFnSUFBQWtBZ0FpOEJMQ0lEUlEwQUlBQWdBenNCQkF3QkN5QUNLQUlvSVFZZ0FrRXdhaUFCRVBPQWdJQUFBa0FnQWk4Qk5DSURSUTBBSUFBZ0F6c0JCQXdCQ3lBQ0tBSXdJUWNnQWtFNGFpQUJFUFNBZ0lBQUFrQWdBaThCUENJRFJRMEFJQUFnQXpzQkJBd0JDd0pBSUFJb0FqZ2lDQ0FIY2cwQUFrQWdCZzBBSUFKQnlBQnFRUUEyQWdBZ0FpQUZOZ0pFSUFJZ0JEWUNRQ0FDUVFVNkFFd2dBa0hRQUdvZ0FTQUNRY0FBYWhESGdJQ0FBQ0FBSUFJcEExQTNBZ0FNQWdzQ1FDQUZEUUFnQWtIZ0FHcEJBRFlDQUNBQ0lBWTJBbHdnQWlBRU5nSllJQUpCQmpvQVpDQUNRZWdBYWlBQklBSkIyQUJxRU1lQWdJQUFJQUFnQWlrRGFEY0NBQXdDQ3dKQUlBRkJQR29nQVVFQ0VMdUFnSUFBSWdOQi8vOERjVVVOQUNBQUlBTTdBUVFNQWdzZ0FVSEFBR29pQXlBREtBSUFJZ2RCQVdvMkFnQWdBU2dDUENBSFFRSjBhaUFGTmdJQUlBTWdBeWdDQUNJRlFRRnFOZ0lBSUFKQitBQnFRUUEyQWdBZ0FTZ0NQQ0FGUVFKMGFpQUdOZ0lBSUFKQkJEb0FmQ0FDSUFRMkFuQWdBaUFITmdKMElBSkJnQUZxSUFFZ0FrSHdBR29ReDRDQWdBQWdBQ0FDS1FPQUFUY0NBQXdCQ3dKQUlBRkJQR29nQVVFRUVMdUFnSUFBSWdOQi8vOERjVVVOQUNBQUlBTTdBUVFNQVFzZ0FVSEFBR29pQXlBREtBSUFJZ2xCQVdvMkFnQWdBU2dDUENBSlFRSjBhaUFGTmdJQUlBTWdBeWdDQUNJRlFRRnFOZ0lBSUFFb0Fqd2dCVUVDZEdvZ0JqWUNBQ0FESUFNb0FnQWlCVUVCYWpZQ0FDQUJLQUk4SUFWQkFuUnFJQWMyQWdBZ0F5QURLQUlBSWdWQkFXbzJBZ0FnQWtHUUFXcEJBRFlDQUNBQktBSThJQVZCQW5ScUlBZzJBZ0FnQWtFRE9nQ1VBU0FDSUFRMkFvZ0JJQUlnQ1RZQ2pBRWdBa0dZQVdvZ0FTQUNRWWdCYWhESGdJQ0FBQ0FBSUFJcEE1Z0JOd0lBQ3lBQ1FhQUJhaVNBZ0lDQUFBdExBUUYvQWtBZ0FDZ0NFQ0FBS0FJZ0lnTnFMUUFBUWY4QWNVRVNSdzBBSUFBZ0EwRUJhallDSUVFQUR3c2dBQ0FCRU1TQWdJQUFJZ0JCQUVFZUlBSkJBWEViSUFCQi8vOERjUnNMWVFFQ2Z5T0FnSUNBQUVFUWF5SURKSUNBZ0lBQUlBTWdBU0FDYWlJQ0lBRkpJZ1E2QUFzZ0F5QUVPZ0FNQWtBQ1FDQUNJQUZQRFFBZ0FFS0FnSUNBb0FJM0FnQU1BUXNnQUNBQ05nSUFJQUJCQURzQkJBc2dBMEVRYWlTQWdJQ0FBQXV2QlFFTWZ5T0FnSUNBQUVIUUFHc2lBeVNBZ0lDQUFDQURRUXhxSUFFUS9JQ0FnQUFDUUFKQUlBTXZBUkFpQkVVTkFDQUFJQVE3QVFRTUFRc0NRQ0FES0FJTUlnVkZEUUJCL3dFaEJnTkFJQU1nQVNnQ0VDQUJLQUlnSWdScUxRQUFRZjhBY1NJSE9nQVhBa0FnQjBFRGJDSUlRZENCd0lBQWFpd0FBQ0lKSUFKT0RRQWdBQ0FGTmdJQUlBQkJBRHNCQkF3REN3SkFJQWxCL3dGeElBWkIvd0Z4UncwQUlBQWdBVUVCRU1xQWdJQUFPd0VFREFNTElBaEIwb0hBZ0FCcUxRQUFJUW9nQ0VIUmdjQ0FBR290QUFBaEN5QUJJQVJCQVdvMkFpQUNRQ0FIUWRRQVJ3MEFJQU5CR0dvZ0FSRHJnSUNBQUNBREx3RWNJZ2hGRFFBZ0FDQUlPd0VFREFNTElBTkJJR29nQVNBSlFRRnF3QkRrZ0lDQUFBSkFJQU12QVNRaUNFVU5BQ0FBSUFnN0FRUU1Bd3NDUUFKQUFrQUNRQ0FES0FJZ0lnd05BQ0FCUVFnUXhJQ0FnQUFpQVVILy93TnhSUTBCSUFBZ0FUc0JCQXdHQ3lBRElBTXRBQmNRL1lDQWdBQWdBU2dDQ0NJTklBRW9BaGdnQkVFQ2RHb29BZ0FpRGlBREtBSUVhbW90QUFBaENDQUhRVGhIRFFFZ0NFSC9BWEZCSmtjTkFTQURRUUE2QUM0Z0EwRTFPd0VzSUFNZ0JEWUNLQ0FCSUFOQktHb1F3WUNBZ0FBaUIwSC8vd054UlEwQ0lBQWdCenNCQkF3RkN5QUFJQVUyQWdBZ0FFRUFPd0VFREFRTElBNGdEV3BCZjJvdEFBQVEvb0NBZ0FBZ0NCRCtnSUNBQUhOQkFYRkZEUUFnQTBFQU9nQTJJQU5CTkRzQk5DQURJQVEyQWpBZ0FTQURRVEJxRU1HQWdJQUFJZ2RCLy84RGNVVU5BQ0FBSUFjN0FRUU1Bd3NnQXlBTU5nSkFJQU1nQlRZQ1BDQURJQVEyQWpnZ0F5QUxPZ0JFSUFOQnlBQnFJQUVnQTBFNGFoREhnSUNBQUFKQUlBTXZBVXdpQkVVTkFDQUFJQVE3QVFRTUF3c2dDU0FHSUFwQkFYRWJJUVlnQXlnQ1NDRUZEQUFMQ3lBQVFnQTNBZ0FMSUFOQjBBQnFKSUNBZ0lBQUMza0NBWDhCZmlPQWdJQ0FBRUVnYXlJREpJQ0FnSUFBSUFNZ0FrSC8vLy8vQTBzNkFCd0NRQUpBSUFKQmdJQ0FnQVJKRFFCQ2dJQ0FnS0FDSVFRTUFRc2dBeUFCS1FJQU53TUlJQU5CRUdvZ0EwRUlhaUFDUVFKMEVMaUFnSUFBSUFNcEF4QWhCQXNnQUNBRU53SUFJQU5CSUdva2dJQ0FnQUFMUFFFQmZ5T0FnSUNBQUVFUWF5SUVKSUNBZ0lBQUlBUkJDR29nQVNBQ1FRQWdBeEN0Z1lDQUFDQUFJQVFwQXdnM0FnQWdCRUVRYWlTQWdJQ0FBQXUxQVFNQmZ3RitCSDhqZ0lDQWdBQkJFR3NpQWlTQWdJQ0FBRUlBSVFNQ1FBSkFBa0FnQVNnQ0VDSUVJQUVvQWlBaUJXb2lCaTBBQUVIL0FIRWlCMEVDUmcwQUlBZEJGVVlOQVF3Q0N5QUdRUUZxTFFBQVFmOEFjVUUwUncwQklBUWdCVUVDYWlJSGFpMEFBRUgvQUhGQkZVY05BU0FCSUFjMkFpQWdBaUFCRU1hQWdJQUFJQUlwQXdBaEF3d0JDeUFDUVFocUlBRVF4b0NBZ0FBZ0Fpa0RDQ0VEQ3lBQUlBTTNBZ0FnQWtFUWFpU0FnSUNBQUF1MUNnRUdmeU9BZ0lDQUFFR3dBV3NpQXlTQWdJQ0FBQ0FCUWNnQWFpRUVJQUZCekFCcUtBSUFJUVVDUUFKQUEwQWdBeUFCRU9HQWdJQUFBa0FnQXk4QkJDSUdSUTBBSUFBZ0Jqc0JCQXdDQ3dKQUFrQWdBeWdDQUNJR1JRMEFJQVFnQVNBR0VNT0FnSUFBSWdaQi8vOERjVVVOQVNBQUlBWTdBUVFNQXdzZ0EwRUlhaUFCRU15QWdJQUFBa0FnQXk4QkRDSUdSUTBBSUFBZ0Jqc0JCQXdEQ3dKQUlBTW9BZ2dpQmcwQUFrQWdBU2dDVENBRlJ3MEFJQUFnQVVFVkVNcUFnSUFBT3dFRURBUUxJQUFnQVVFS0VNcUFnSUFBT3dFRURBTUxJQVFnQVNBR0VNT0FnSUFBSWdaQi8vOERjVVVOQUNBQUlBWTdBUVFNQWdzZ0EwRVFhaUFCUVRjUXZZQ0FnQUFnQXkwQUZBMEFDeUFCS0FKTUlRWWdBMEVZYWlBQlFRd1F2WUNBZ0FBZ0JpQUZheUVHQWtBQ1FDQURMUUFjUlEwQUlBTW9BaGdoQnd3QkN3SkFBa0FDUUNBR1FRSkpEUUFnQTBFZ2FpQUJRUTBRdllDQWdBQWdBeTBBSkVVTkFTQURRUUE2QUM0Z0EwRTRPd0VzSUFNZ0F5Z0NJQ0lITmdJb0lBRWdBMEVvYWhEQmdJQ0FBQ0lFUWYvL0EzRkZEUU1nQUNBRU93RUVEQVFMQWtBQ1FDQUJLQUpJSUFWQkFuUnFLQUlBSWdRZ0FVRXdhaEQ2Z0lDQUFHb3RBQUJCZldwQi93RnhRUVJKRFFBZ0EwSEFBR29nQVNBRUVLNkJnSUFBSUFNdkFVUWlCa1VOQVNBQUlBWTdBUVFNQlFzZ0EwRXdhaUFCUVEwUXZZQ0FnQUFnQXkwQU5FVU5BaUFEUVFBNkFENGdBMEU0T3dFOElBTWdBeWdDTUNJSE5nSTRJQUVnQTBFNGFoREJnSUNBQUNJRVFmLy9BM0ZGRFFNZ0FDQUVPd0VFREFRTElBTW9Ba0FoQkFKQUlBRkJLMEVCRU9LQWdJQUFJZ1pCLy84RGNVVU5BQ0FBSUFZN0FRUU1CQXNDUUNBQ0xRQUVSUTBBSUFOQm5nRTZBRlFnQXlBRU5nSk1JQU1nQWlnQ0FEWUNTQ0FEUWRnQWFpQUJJQU5CeUFCcUVNZUFnSUFBSUFFZ0JUWUNUQ0FBSUFNcEExZzNBZ0FNQlFzZ0FFRUFPd0VFSUFBZ0JEWUNBQXdEQ3lBQUlBRkJEQkQ3Z0lDQUFEc0JCQXdDQ3lBQUlBRkJEQkQ3Z0lDQUFEc0JCQXdCQ3lBRFFlQUFhaUFCRU11QWdJQUFBa0FnQXk4QlpDSUVSUTBBSUFBZ0JEc0JCQXdCQ3lBREtBSmdJUWdDUUNBQlFTdEJBUkRpZ0lDQUFDSUVRZi8vQTNGRkRRQWdBQ0FFT3dFRURBRUxBa0FDUUNBR1FRRkhEUUFnQVNnQ1NDQUZRUUowYWlnQ0FDSUdJQUZCTUdvaUJCRDZnSUNBQUdvdEFBQkJmV3BCL3dGeFFRUkpEUUVnQTBId0FHb2dDRFlDQUNBRElBWTJBbXdnQXlBSE5nSm9JQU5CSXpvQWRDQURRZmdBYWlBQklBTkI2QUJxRU1lQWdJQUFBa0FnQXk4QmZDSUdSUTBBSUFBZ0Jqc0JCQXdEQ3lBREtBSjRJUVlDUUNBQ0xRQUVSUTBBSUFOQm5nRTZBSXdCSUFNZ0JqWUNoQUVnQXlBQ0tBSUFOZ0tBQVNBRFFaQUJhaUFCSUFOQmdBRnFFTWVBZ0lBQUlBRWdCVFlDVENBQUlBTXBBNUFCTndJQURBUUxJQUJCQURzQkJDQUFJQVkyQWdBTUFnc2dBVUhBQUdvb0FnQWhBZ0pBSUFGQlBHb2dBU0FHUVFGcUVMdUFnSUFBSWdSQi8vOERjVVVOQUNBQUlBUTdBUVFNQWdzZ0FTQUJLQUpBSWdSQkFXbzJBa0FnQVNnQ1BDQUVRUUowYWlBR05nSUFJQUVnQVNnQ1FDSUdJQUVvQWt3Z0JXc2lCR28yQWtBZ0FTZ0NQQ0FHUVFKMGFpQUJLQUpJSUFWQkFuUnFJQVJCQW5RUTJvR0FnQUFhSUFOQm9BRnFJQWcyQWdBZ0F5QUNOZ0tjQVNBRElBYzJBcGdCSUFOQkpEb0FwQUVnQTBHb0FXb2dBU0FEUVpnQmFoREhnSUNBQUNBQklBVTJBa3dnQUNBREtRT29BVGNDQUF3Q0N5QUVFSitBZ0lBQUlBWkJBM1JxSUFnMkFnUWdBRUVBT3dFRUlBQWdCallDQUFzZ0FTQUZOZ0pNQ3lBRFFiQUJhaVNBZ0lDQUFBdHhBUUovSTRDQWdJQUFRUkJySWdJa2dJQ0FnQUFnQWtFSWFpQUJFTzZBZ0lBQUFrQUNRQ0FDTHdFTUlnTkZEUUFnQUNBRE93RUVEQUVMQWtBZ0FpZ0NDQ0lERFFBZ0FDQUJRUWtReW9DQWdBQTdBUVFNQVFzZ0FDQUROZ0lBSUFCQkFEc0JCQXNnQWtFUWFpU0FnSUNBQUF1bUFRRURmeU9BZ0lDQUFFRVFheUlDSklDQWdJQUFJQUlnQVJEbmdJQ0FBQUpBQWtBQ1FBSkFJQUl2QVFRaUF3MEFJQUlvQWdBaUJBMENJQUpCQ0dvZ0FSRHVnSUNBQUNBQ0x3RU1JZ01OQUNBQ0tBSUlJZ1JGRFFFZ0FVRXJRUUVRNG9DQWdBQWlBMEgvL3dOeFJRMENDeUFBSUFNN0FRUU1BZ3NnQUNBQlFRVVF5b0NBZ0FBN0FRUU1BUXNnQUNBRU5nSUFJQUJCQURzQkJBc2dBa0VRYWlTQWdJQ0FBQXVsQVFFQ2Z5T0FnSUNBQUVFZ2F5SUNKSUNBZ0lBQUlBSkJDR29nQVVFSkVMMkFnSUFBQWtBQ1FDQUNMUUFNUlEwQUlBSkJFR29nQVVFQ0VOYUFnSUFBQWtBZ0FpOEJGQ0lEUlEwQUlBQWdBenNCQkF3Q0N5QUNLQUlRSVFNZ0FrRVlhaUFCUVFrUTFvQ0FnQUFDUUNBQ0x3RWNJZ0ZGRFFBZ0FDQUJPd0VFREFJTElBQWdBellDQUNBQVFRQTdBUVFNQVFzZ0FFSUFOd0lBQ3lBQ1FTQnFKSUNBZ0lBQUM4ME1BZ3AvQVg0amdJQ0FnQUJCc0FKcklnSWtnSUNBZ0FBZ0FTQUJLQUlnSWdOQkFXbzJBaUFnQWlBQlFSQVExb0NBZ0FBQ1FBSkFJQUl2QVFRaUJFVU5BQ0FBSUFRN0FRUU1BUXNnQWtFSWFpQUJFTXVBZ0lBQUFrQWdBaThCRENJRVJRMEFJQUFnQkRzQkJBd0JDeUFDS0FJSUlRVWdBa0VRYWlBQlFSRVExb0NBZ0FBQ1FDQUNMd0VVSWdSRkRRQWdBQ0FFT3dFRURBRUxJQUpCR0dvZ0FVRVZFTmFBZ0lBQUFrQWdBaThCSENJRVJRMEFJQUFnQkRzQkJBd0JDeUFCUWNnQWFpRUdJQUZCekFCcUtBSUFJZ2NoQ0FOQUlBSkI0QUJxSUFGQjRnQVF2WUNBZ0FBZ0FpMEFaQ0VKSUFKQjZBQnFJQUZCMlFBUXZZQ0FnQUFDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQUl0QUd3TkFBTkFJQUpCa0FKcUlBRVF6SUNBZ0FBZ0FpOEJsQUlpQkEwQ0FrQWdBaWdDa0FJaUNrVU5BQ0FDUVpnQ2FpQUJRUndRdllDQWdBQWdBaTBBbkFKRkRRQWdBaWdDbUFJaEN5QUNRYUFDYWlBQkVNdUFnSUFBSUFJdkFhUUNJZ1FOQXlBQ1FlMEFPZ0NFQWlBQ0lBSW9BcUFDTmdLQUFpQUNJQW8yQXZ3QklBSWdDellDK0FFZ0FrR29BbW9nQVNBQ1FmZ0JhaERIZ0lDQUFDQUNLUU9vQWlJTVFpQ0lweUlFUWYvL0EzRU5BeUFNcHlFS0N3SkFJQXBGRFFBZ0JpQUJJQW9RdzRDQWdBQWlCRUgvL3dOeERRTWdBa0h3QUdvZ0FVRTNFTDJBZ0lBQUlBSXRBSFFOQVFzTElBZ2dBU2dDVEVjTkFBSkFJQWxCL3dGeFJRMEFJQUVnQVNnQ0lFRi9hallDSUFzZ0FTQUlOZ0pNREFNTElBSkIrQUJxSUFGQkRoRFdnSUNBQUNBQ0x3RjhJZ1FOQUNBQ0tBSjRJUW9nQWtHSUFtb2dBVUVKRUwyQWdJQUFBa0FnQWkwQWpBSkZEUUFnQWtHUUFtb2dBVUVzRUwyQWdJQUFJQUpCbUFKcUlBRkJBaERXZ0lDQUFDQUNMd0djQWlJRURRRWdBa0dnQW1vZ0FVRTNFTDJBZ0lBQUFrQWdBaTBBcEFKRkRRQWdBa0dvQW1vZ0FVRUNFTmFBZ0lBQUlBSXZBYXdDSWdRTkFnc2dBa0g0QVdvZ0FVRUpFTmFBZ0lBQUlBSXZBZndCSWdRTkFRc2dBU2dDU0NBSVFRSjBhaUVFQWtBQ1FBSkFJQUVvQWt3Z0NHc2lDdzRDQUFFQ0N5QUNRWUFCYWlBQkVMQ0JnSUFBSUFJdkFZUUJJZ1FOQWlBQ0lBSW9Bb0FCTmdLUUFTQUNRUUEyQW93QklBSWdDallDaUFFZ0FrSHFBRUhwQUNBSlFmOEJjUnM2QUpRQklBSkJtQUZxSUFFZ0FrR0lBV29ReDRDQWdBQWdBa0dZQVdvaEJBd0RDeUFFS0FJQUlRc2dBa0dnQVdvZ0FSQ3dnWUNBQUNBQ0x3R2tBU0lFRFFFZ0FpQUNLQUtnQVRZQ3NBRWdBaUFMTmdLc0FTQUNJQW8yQXFnQklBSkI2Z0JCNlFBZ0NVSC9BWEViT2dDMEFTQUNRYmdCYWlBQklBSkJxQUZxRU1lQWdJQUFJQUpCdUFGcUlRUU1BZ3NnQWtIRUFXb2dBU0FFSUFzUXVvQ0FnQUFnQWk4QnpBRWlCQTBBSUFKQjBBRnFJQUVnQWtIRUFXb1E3NENBZ0FBZ0FpOEIxQUVpQkEwQUlBSW9BdEFCSVFzZ0FrSFlBV29nQVJDd2dZQ0FBQ0FDTHdIY0FTSUVEUUFnQWtIc0FFSHJBQ0FKUWY4QmNSczZBT3dCSUFJZ0FpZ0MyQUUyQXVnQklBSWdDellDNUFFZ0FpQUtOZ0xnQVNBQ1FmQUJhaUFCSUFKQjRBRnFFTWVBZ0lBQUlBSkI4QUZxSVFRTUFRc2dBU0FJTmdKTURBTUxJQUVnQ0RZQ1RDQUVLUU1BSWd4Q0lJaW5JZ1JCLy84RGNRMENBa0FnREtjaUJFVU5BQ0FHSUFFZ0JCRERnSUNBQUNJRVFmLy9BM0VOQXdKQUFrQUNRQ0FCS0FJUUlBRW9BaUFpQkdvdEFBQkIvd0J4SWdwQlRHb09CQU1GQlFFQUN5QUtRV3BxRGdNQ0JBSUJDeUFCSUFSQkFXbzJBaUFNQmdzZ0NrRVJSdzBDQ3lBQktBSk1JUWdMSUFKQjFBQnFJQUVnQVNnQ1NDQUhRUUowYWlBSUlBZHJFTHFBZ0lBQUlBRWdCellDVENBQ0x3RmNJZ1FOQWlBQ0tBSlVJUW9nQWlnQ1dDRUlJQUVvQWlBZ0FTZ0NFR3BCZjJvdEFBQWhCaUFDUVNCcUlBRkJGaERXZ0lDQUFBSkFJQUl2QVNRaUJFVU5BQ0FBSUFRN0FRUU1CZ3NnQWlBSU5nSXNJQUlnQ2pZQ0tDQUNRVEJxSUFFZ0FrRW9haER2Z0lDQUFBSkFJQUl2QVRRaUJFVU5BQ0FBSUFRN0FRUU1CZ3NnQWtIQUFHb2dBaWdDTURZQ0FDQUNJQVUyQWp3Z0FpQUROZ0k0SUFKQjZBQkI1d0FnQmtIL0FIRkJOMFliT2dCRUlBSkJ5QUJxSUFFZ0FrRTRhaERIZ0lDQUFDQUFJQUlwQTBnM0FnQU1CUXNnQVVFd0VNU0FnSUFBSWdSQi8vOERjVVVOQWdzZ0FTQUhOZ0pNQ3lBQUlBUTdBUVFNQWdzZ0FTZ0NUQ0VJREFBTEN5QUNRYkFDYWlTQWdJQ0FBQXV4QVFFQ2Z5T0FnSUNBQUVFZ2F5SUNKSUNBZ0lBQUlBSWdBVUVKRUwyQWdJQUFBa0FDUUNBQ0xRQUVSUTBBSUFKQkNHb2dBVUVzRUwyQWdJQUFJQUpCRUdvZ0FVRUNFTmFBZ0lBQUFrQWdBaThCRkNJRFJRMEFJQUFnQXpzQkJBd0NDeUFDS0FJUUlRTWdBa0VZYWlBQlFRa1Exb0NBZ0FBQ1FDQUNMd0VjSWdGRkRRQWdBQ0FCT3dFRURBSUxJQUFnQXpZQ0FDQUFRUUE3QVFRTUFRc2dBRUlBTndJQUN5QUNRU0JxSklDQWdJQUFDM0VCQW44amdJQ0FnQUJCRUdzaUFpU0FnSUNBQUNBQ0lBRVF6SUNBZ0FBQ1FBSkFJQUl2QVFRaUEwVU5BQ0FBSUFNN0FRUU1BUXNDUUNBQ0tBSUFJZ01OQUNBQVFnQTNBZ0FNQVFzZ0FrRUlhaUFCSUFNUXJvR0FnQUFnQUNBQ0tRTUlOd0lBQ3lBQ1FSQnFKSUNBZ0lBQUMzOEJCSDhDUUNBQlFUeHFJQUZCQWhDN2dJQ0FBQ0lEUWYvL0EzRU5BQ0FDS0FJQUlRUWdBVUhBQUdvaUJTQUZLQUlBSWdaQkFXbzJBZ0FnQVNnQ1BDQUdRUUowYWlBRU5nSUFJQUlvQWdRaEFpQUZJQVVvQWdBaUJFRUJhallDQUNBQUlBWTJBZ0FnQVNnQ1BDQUVRUUowYWlBQ05nSUFDeUFBSUFNN0FRUUx4d2NCQm44amdJQ0FnQUJCOEFCcklnSWtnSUNBZ0FBZ0FVSE1BR29vQWdBaEF5QUNJQUZCRUJEV2dJQ0FBQUpBQWtBZ0FpOEJCQ0lFRFFBZ0FVSElBR29oQlFOQUlBSkJDR29nQVJETGdJQ0FBQUpBSUFJdkFRd2lCRVVOQUNBQUlBUTdBUVFNQXdzZ0FpZ0NDQ0VFSUFKQkVHb2dBVUViRUwyQWdJQUFBa0FnQWkwQUZFVU5BQ0FDS0FJUUlRWWdBa0VZYWlBQkVNeUFnSUFBQWtBZ0FpOEJIQ0lIUlEwQUlBQWdCenNCQkF3RUN5QUNRZk1BT2dBc0lBSWdBaWdDR0RZQ0tDQUNJQVEyQWlRZ0FpQUdOZ0lnSUFKQk1Hb2dBU0FDUVNCcUVNZUFnSUFBQWtBZ0FpOEJOQ0lFUlEwQUlBQWdCRHNCQkF3RUN5QUNLQUl3SVFRTEFrQWdCU0FCSUFRUXc0Q0FnQUFpQkVILy93TnhSUTBBSUFBZ0JEc0JCQXdEQ3dKQUFrQUNRQUpBQWtBQ1FBSkFJQUVvQWhBZ0FTZ0NJQ0lFYWkwQUFFSC9BSEVpQmtGTWFnNEVBd1FFQVFBTElBWkJFVVlOQVNBR1FXcHFEZ01DQXdJREN5QUJJQVJCQVdvMkFpQU1Bd3NnQVNBRVFRRnFOZ0lnREFNTElBQWdBVUVSRVB1QWdJQUFPd0VFREFVTElBRkJNUkRFZ0lDQUFDSUVRZi8vQTNGRkRRQWdBQ0FFT3dFRURBUUxJQUpCT0dvZ0FVRVJFTDJBZ0lBQUlBSXRBRHhGRFFFTEN5QUJLQUpNSVFRZ0FrSEFBR29nQVVFSkVMMkFnSUFBSUFRZ0Eyc2hCUUpBSUFJdEFFUkZEUUJCQVNFR1FRQWhCd0pBQTBBZ0JpRUVJQUpCeUFCcUlBRkJMQkM5Z0lDQUFDQUNRZEFBYWlBQlFRSVExb0NBZ0FBQ1FDQUNMd0ZVSWdaRkRRQWdBQ0FHT3dFRURBVUxBa0FnQkVGL2FpQUZTU0FIY2tFQmNRMEFJQUpCQURvQVhpQUNRVG83QVZ3Z0FpQUNLQUpRTmdKWVFRRWhCeUFCSUFKQjJBQnFFTUdBZ0lBQUlnWkIvLzhEY1VVTkFDQUFJQVk3QVFRTUJRc0NRQUpBQWtBZ0FTZ0NFQ0FCS0FJZ0lnWnFMUUFBUWY4QWNTSURRVGRHRFFBZ0EwRUpSZzBDSUFGQk1oREVnSUNBQUNJR1FmLy9BM0ZGRFFFZ0FDQUdPd0VFREFjTElBRWdCa0VCYWpZQ0lBc2dBa0hnQUdvZ0FVRUpFTDJBZ0lBQUlBUkJBV29oQmlBQ0xRQmtSUTBCREFJTEN5QUJJQVpCQVdvMkFpQUxBa0FnQkNBRlR3MEFJQUVvQWt3aEJpQUJRVEJxRU1LQWdJQUFJUWNnQWtFQU9nQnVJQUpCT3pzQmJDQUNJQWNnQVNnQ1NDQUdJQVJyUVFKMGFpZ0NBRUVDZEdvb0FnQTJBbWdnQVNBQ1FlZ0FhaERCZ0lDQUFDSUJRZi8vQTNGRkRRQWdBQ0FCT3dFRURBTUxJQUFnQlRZQ0FDQUFRUUE3QVFRTUFnc0NRQ0FCUVJvUXhJQ0FnQUFpQVVILy93TnhSUTBBSUFBZ0FUc0JCQXdDQ3lBQUlBVTJBZ0FnQUVFQU93RUVEQUVMSUFBZ0JEc0JCQXNnQWtId0FHb2tnSUNBZ0FBTG9nSUJBbjhqZ0lDQWdBQkJJR3NpQWlTQWdJQ0FBQ0FDSUFGQk5CQzlnSUNBQUFKQUFrQUNRQUpBQWtBZ0FpMEFCRVVOQUNBQ1FRaHFJQUZCRUJEV2dJQ0FBQ0FDTHdFTUlnTkZEUUVnQUNBRE93RUVEQVFMSUFFb0FoQWdBU2dDSUNJRGFpMEFBRUgvQUhGQkVFWU5BUXdDQ3lBQ1FSQnFJQUVRN29DQWdBQUNRQ0FDTHdFVUlnTkZEUUFnQUNBRE93RUVEQU1MQWtBZ0FpZ0NFQ0lERFFBZ0FDQUJRUWtReW9DQWdBQTdBUVFNQXdzZ0FrRVlhaUFCUVJFUTFvQ0FnQUFDUUNBQ0x3RWNJZ0ZGRFFBZ0FDQUJPd0VFREFNTElBQWdBellDQUNBQVFRQTdBUVFNQWdzZ0FTQURRWDlxSUFNUTNJQ0FnQUJCQVhGRkRRQWdBQ0FCUVNrUXlvQ0FnQUE3QVFRTUFRc2dBRUlBTndJQUN5QUNRU0JxSklDQWdJQUFDNlVCQVFWL0FrQWdBVUU4YWlBQlFRTVF1NENBZ0FBaUEwSC8vd054RFFBZ0FpZ0NBQ0VFSUFGQndBQnFJZ1VnQlNnQ0FDSUdRUUZxTmdJQUlBRW9BandnQmtFQ2RHb2dCRFlDQUNBQ0tBSUVJUVFnQlNBRktBSUFJZ2RCQVdvMkFnQWdBU2dDUENBSFFRSjBhaUFFTmdJQUlBSW9BZ2doQWlBRklBVW9BZ0FpQkVFQmFqWUNBQ0FBSUFZMkFnQWdBU2dDUENBRVFRSjBhaUFDTmdJQUN5QUFJQU03QVFRTHhnRUJBbjhqZ0lDQWdBQkJJR3NpQWlTQWdJQ0FBQ0FDSUFGQnlRQVF2WUNBZ0FBQ1FBSkFJQUl0QUFSRkRRQWdBa0VJYWlBQlFSQVExb0NBZ0FBQ1FDQUNMd0VNSWdORkRRQWdBQ0FET3dFRURBSUxJQUpCRUdvZ0FSRExnSUNBQUFKQUlBSXZBUlFpQTBVTkFDQUFJQU03QVFRTUFnc2dBaWdDRUNFRElBSkJHR29nQVVFUkVOYUFnSUFBQWtBZ0FpOEJIQ0lCUlEwQUlBQWdBVHNCQkF3Q0N5QUFJQU0yQWdBZ0FFRUFPd0VFREFFTElBQkNBRGNDQUFzZ0FrRWdhaVNBZ0lDQUFBdkdBUUVDZnlPQWdJQ0FBRUVnYXlJQ0pJQ0FnSUFBSUFJZ0FVSHRBQkM5Z0lDQUFBSkFBa0FnQWkwQUJFVU5BQ0FDUVFocUlBRkJFQkRXZ0lDQUFBSkFJQUl2QVF3aUEwVU5BQ0FBSUFNN0FRUU1BZ3NnQWtFUWFpQUJFTXVBZ0lBQUFrQWdBaThCRkNJRFJRMEFJQUFnQXpzQkJBd0NDeUFDS0FJUUlRTWdBa0VZYWlBQlFSRVExb0NBZ0FBQ1FDQUNMd0VjSWdGRkRRQWdBQ0FCT3dFRURBSUxJQUFnQXpZQ0FDQUFRUUE3QVFRTUFRc2dBRUlBTndJQUN5QUNRU0JxSklDQWdJQUFDNkFPQWdsL0FYNGpnSUNBZ0FCQndBSnJJZ0lrZ0lDQWdBQWdBa0VvYWlBQlFkQUFFTDJBZ0lBQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FDTFFBc1JRMEFJQUpCdUFKcUlBRVF0b0dBZ0FBZ0FpOEJ2QUlpQXcwSkFrQWdBaWdDdUFJaUJBMEFJQUZCRUJES2dJQ0FBQ0lEUWYvL0EzRU5DZ3NEUUNBQ1FUQnFJQUVnQkNJRkVMZUJnSUFBSUFJdkFUUWlBdzBLSUFJb0FqQWlCQTBBQ3lBQ1FUaHFJQUZCRUJDOWdJQ0FBQ0FDTFFBOFJRMEJJQUZCeUFCcUlRUWdBVUhNQUdvb0FnQWhCaUFDS0FJNElRY0RRQ0FDUWNBQWFpQUJRUkVRdllDQWdBQWdBaTBBUkEwRklBSkJ5QUJxSUFFUXk0Q0FnQUFnQWk4QlRDSUREUWtnQkNBQklBSW9Ba2dRdzRDQWdBQWlBMEgvL3dOeERRa0NRQUpBQWtBQ1FDQUJLQUlRSWdnZ0FTZ0NJQ0lEYWkwQUFFSC9BSEVpQ1VGTWFnNEVCd0VCQWdBTElBbEJFVVlOQWlBSlFXcHFEZ01HQUFZQUN5QUJRUzBReElDQWdBQWlBMEgvL3dOeERRc01BZ3NnQVNBRFFRRnFOZ0lnREFFTEN5QUJJQU5CQVdvaUF6WUNJQXdGQ3lBQ1FiUUJhaUFCRUxhQmdJQUFJQUl2QWJnQklnTU5DQUpBSUFJb0FyUUJJZ01OQUVFQUlRVU1Cd3NnQVVISUFHb2hCQU5BSUFKQnZBRnFJQUVnQXlJRkVMZUJnSUFBSUFJdkFjQUJJZ01OQ1NBQ0tBSzhBU0lERFFBZ0FrSEVBV29nQVVFUUVMMkFnSUFBSUFJdEFNZ0JSUTBISUFFb0Frd2hCaUFDS0FMRUFTRUhBa0FDUUFKQUFrQUNRQU5BSUFKQnpBRnFJQUZCRVJDOWdJQ0FBQ0FDTFFEUUFRMENJQUpCMUFGcUlBRVF5NENBZ0FBZ0FpOEIyQUVpQXcwRUlBUWdBU0FDS0FMVUFSRERnSUNBQUNJRFFmLy9BM0VOQkFKQUFrQUNRQUpBSUFFb0FoQWlDQ0FCS0FJZ0lnTnFMUUFBUWY4QWNTSUpRVXhxRGdRRkFRRUNBQXNnQ1VFUlJnMENJQWxCYW1vT0F3UUFCQUFMSUFGQkxSREVnSUNBQUNJRFFmLy9BM0VOQmd3Q0N5QUJJQU5CQVdvMkFpQU1BUXNMSUFFZ0EwRUJhaUlETmdJZ0RBSUxJQUZCRVJEN2dJQ0FBQ0VESUFFZ0JqWUNUQXdIQ3lBQktBSWdJUU1nQVNnQ0VDRUlDeUFCS0FKSUlBWkJBblJxSVFvZ0F5QUlha0YrYWkwQUFDRUpBa0FDUUFKQUlBRW9Ba3dnQm1zaUF3NENBQUVDQ3lBQ1FRQTJBdVFCSUFJZ0JUWUM0QUVnQWlBSE5nTGNBU0FDUWVBQVFkOEFJQWxCL3dCeFFUZEdHem9BNkFFZ0FrSHNBV29nQVNBQ1Fkd0JhaERIZ0lDQUFDQUNRZXdCYWlFRklBSXZBZkFCSWdORkRRTU1BZ3NnQWlBRk5nTDRBU0FDSUFjMkF2UUJJQUlnQ2lnQ0FEWUMvQUVnQWtIZ0FFSGZBQ0FKUWY4QWNVRTNSaHM2QUlBQ0lBSkJoQUpxSUFFZ0FrSDBBV29ReDRDQWdBQWdBa0dFQW1vaEJTQUNMd0dJQWlJRERRRU1BZ3NnQWtHTUFtb2dBU0FLSUFNUXVvQ0FnQUFnQWk4QmxBSWlBdzBBSUFKQm1BSnFJQUVnQWtHTUFtb1E3NENBZ0FBZ0FpOEJuQUlpQXcwQUlBSkI1QUJCNHdBZ0NVSC9BSEZCTjBZYk9nQ3NBaUFDSUFJb0FwZ0NOZ0tvQWlBQ0lBVTJBcVFDSUFJZ0J6WUNvQUlnQWtHd0Ftb2dBU0FDUWFBQ2FoREhnSUNBQUNBQ1FiQUNhaUVGSUFJdkFiUUNJZ05GRFFFTElBRWdCallDVEF3S0N5QUJJQVkyQWt3Z0JTZ0NBQ0VEREFBTEN5QUJRUTRReElDQWdBQWlBMEgvL3dOeERRY01CUXNnQVVFUkVQdUFnSUFBSVFNZ0FTQUdOZ0pNQ3d3Q0N5QUJLQUlnSVFNZ0FTZ0NFQ0VJQ3lBQktBSklJQVpCQW5ScUlRa2dBeUFJYWtGK2FpMEFBQ0VFQWtBQ1FBSkFJQUVvQWt3Z0Jtc2lBdzRDQUFFQ0N5QUNRZGdBYWtFQU5nSUFJQUlnQlRZQ1ZDQUNJQWMyQWxBZ0FrSGlBRUhoQUNBRVFmOEFjVUUzUmhzNkFGd2dBa0hnQUdvZ0FTQUNRZEFBYWhESGdJQ0FBQ0FCSUFZMkFrd2dBaWtEWUNJTFFpQ0lweUVESUF1bklRVU1BZ3NnQWtId0FHb2dDU2dDQURZQ0FDQUNJQVUyQW13Z0FpQUhOZ0pvSUFKQjRnQkI0UUFnQkVIL0FIRkJOMFliT2dCMElBSkIrQUJxSUFFZ0FrSG9BR29ReDRDQWdBQWdBU0FHTmdKTUlBSXBBM2dpQzBJZ2lLY2hBeUFMcHlFRkRBRUxJQUpCaEFGcUlBRWdDU0FERUxxQWdJQUFJQUl2QVl3QklnTU5BaUFDUVpBQmFpQUJJQUpCaEFGcUVPK0FnSUFBSUFJdkFaUUJJZ01OQWlBQ1FhQUJhaUFDS0FLUUFUWUNBQ0FDUWVZQVFlVUFJQVJCL3dCeFFUZEdHem9BcEFFZ0FpQUZOZ0tjQVNBQ0lBYzJBcGdCSUFKQnFBRnFJQUVnQWtHWUFXb1F4NENBZ0FBZ0FTQUdOZ0pNSUFJcEE2Z0JJZ3RDSUlpbklRTWdDNmNoQlFzZ0EwSC8vd054RFFJTEFrQWdCUTBBSUFCQ0FEY0NBQXdEQ3lBQ0lBRkJDQkM5Z0lDQUFBSkFJQUl0QUFSRkRRQWdBaWdDQUNFRUlBSkJDR29nQVJEYWdJQ0FBQUpBSUFJdkFRd2lBMFVOQUNBQUlBTTdBUVFNQkFzZ0FrRVlhaUFDS0FJSU5nSUFJQUpCcVFFNkFCd2dBaUFGTmdJVUlBSWdCRFlDRUNBQ1FTQnFJQUVnQWtFUWFoREhnSUNBQUNBQUlBSXBBeUEzQWdBTUF3c2dBQ0FGTmdJQUlBQkJBRHNCQkF3Q0N5QUJJQVkyQWt3TElBQWdBenNCQkFzZ0FrSEFBbW9rZ0lDQWdBQUwvZ1VCQ244amdJQ0FnQUJCd0FCcklnSWtnSUNBZ0FCQkFDRURRUUFoQkVFQUlRVkJBQ0VHUVFBaEIwRUFJUWhCQUNFSkFrQURRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFFb0FoQWdBU2dDSUNJS2FpMEFBRUgvQUhFaUMwRzNmMm9PQXdVQkJBQUxJQXRCMWdCR0RRRWdDMEg0QUVZTkFpQUFJQVkyQWd3Z0FDQUhOZ0lJSUFBZ0NEWUNCQ0FBSUFrMkFnQWdBRUVBT3dFUURBb0xJQWxGRFFjQ1FDQUJRUjRReElDQWdBQWlDMEgvL3dOeERRQWdBU2dDSUNFS0RBZ0xJQUFnQ3pzQkVBd0pDeUFEUVFGeFJRMEZBa0FnQVVFZ0VNU0FnSUFBSWd0Qi8vOERjUTBBSUFFb0FpQWhDZ3dHQ3lBQUlBczdBUkFNQ0FzZ0JFRUJjVVVOQXdKQUlBRkJJUkRFZ0lDQUFDSUxRZi8vQTNFTkFDQUJLQUlnSVFvTUJBc2dBQ0FMT3dFUURBY0xJQVZCQVhGRkRRRUNRQ0FCUVI4UXhJQ0FnQUFpQzBILy93TnhEUUFnQVNnQ0lDRUtEQUlMSUFBZ0N6c0JFQXdHQ3dKQUlBaEZEUUFnQVVFZEVNU0FnSUFBSWdoQi8vOERjVVVOQUNBQUlBZzdBUkFNQmdzZ0FrRTRhaUFCRVBPQWdJQUFBa0FnQWk4QlBDSUlSUTBBSUFBZ0NEc0JFQXdHQ3lBQ0tBSTRJUWdNQkF0QkFTRUZJQUVnQ2tFQmFqWUNJQXdEQzBFQklRUWdBU0FLUVFGcU5nSWdEQUlMUVFFaEF5QUJJQXBCQVdvMkFpQU1BUXNnQVNBS1FRRnFOZ0lnSUFJZ0FVRVFFTmFBZ0lBQUFrQWdBaThCQkNJTFJRMEFJQUFnQ3pzQkVBd0NDeUFDUVFocUlBRVF5NENBZ0FBQ1FDQUNMd0VNSWd0RkRRQWdBQ0FMT3dFUURBSUxJQUlvQWdnaENTQUNRUkJxSUFGQk5CQzlnSUNBQUFKQUlBSXRBQlJGRFFBZ0FrRVlhaUFCRU11QWdJQUFBa0FnQWk4QkhDSUxSUTBBSUFBZ0N6c0JFQXdEQ3lBQ0tBSVlJUWNnQWtFZ2FpQUJRVFFRMW9DQWdBQUNRQ0FDTHdFa0lndEZEUUFnQUNBTE93RVFEQU1MSUFKQktHb2dBUkRMZ0lDQUFBSkFJQUl2QVN3aUMwVU5BQ0FBSUFzN0FSQU1Bd3NnQWlnQ0tDRUdDeUFDUVRCcUlBRkJFUkRXZ0lDQUFDQUNMd0UwSWd0RkRRQUxJQUFnQ3pzQkVBc2dBa0hBQUdva2dJQ0FnQUFMOFFFQkJYOENRQ0FCUVR4cUlBRkJCUkM3Z0lDQUFDSURRZi8vQTNFTkFDQUNLQUlBSVFRZ0FVSEFBR29pQlNBRktBSUFJZ1pCQVdvMkFnQWdBU2dDUENBR1FRSjBhaUFFTmdJQUlBSW9BZ1FoQkNBRklBVW9BZ0FpQjBFQmFqWUNBQ0FCS0FJOElBZEJBblJxSUFRMkFnQWdBaWdDQ0NFRUlBVWdCU2dDQUNJSFFRRnFOZ0lBSUFFb0Fqd2dCMEVDZEdvZ0JEWUNBQ0FDS0FJTUlRUWdCU0FGS0FJQUlnZEJBV28yQWdBZ0FTZ0NQQ0FIUVFKMGFpQUVOZ0lBSUFJb0FoQWhBaUFGSUFVb0FnQWlCRUVCYWpZQ0FDQUJLQUk4SUFSQkFuUnFJQUkyQWdBZ0FDQUdOZ0lBQ3lBQUlBTTdBUVFMWWdFQ2Z5T0FnSUNBQUVFUWF5SURKSUNBZ0lBQUFrQURRQ0FDSWdSRkRRRWdBMEVJYWtIdWljQ0FBRUVHSUFSQmYyb2lBaUFCYWkwQUFCRG1nSUNBQUNBRExRQU1EUUFMQ3lBQUlBUTJBZ1FnQUNBQk5nSUFJQU5CRUdva2dJQ0FnQUFMSXdBQ1FDQUFJQUVnQWhDYWdJQ0FBQ0lCUWYvL0EzRU5BQ0FBSUFJMkFnUUxJQUVMWUFFQ2Z5T0FnSUNBQUVFZ2F5SUJKSUNBZ0lBQUlBRkJDR29nQUVFSWFpZ0NBRFlDQUNBQklBQXBBZ0EzQXdBZ0FVRU1haUFCRUtDQWdJQUFJQUVvQWh3aEFDQUJLQUlNSVFJZ0FVRWdhaVNBZ0lDQUFDQUNRYXJWcXRWNklBQWJDMTBCQVg4amdJQ0FnQUJCRUdzaUFpU0FnSUNBQUNBQ1FRQTZBQTRnQWtFL093RU1JQUlnQVVIL0FIRWlBVG9BQnlBQ0lBQW9BaUEyQWdnZ0FpQUJPZ0FQSUFBZ0FrRUlhaERZZ0lDQUFDRUFJQUpCRUdva2dJQ0FnQUFnQUF1a0lBTUdmd0orQTM4amdJQ0FnQUJCc0FGcklnSWtnSUNBZ0FBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQUVvQWhBaUF5QUJLQUlnSWdScUlnVXRBQUJCL3dCeElnWkJXbW9PQXdjQkJRQUxJQVpCOHdCR0RRSWdCa0U0UmcwRElBWkJ4UUJHRFFVZ0JrSFJBRVlOQVVFOElRY2dCa0VJUmcwYUN3SkFBa0FDUUNBR1FhQi9hZzROQ3hZTUFRRVFBUUVCQVFFUERnQUxBa0FnQmtHeGYyb09DUUlCQVJNQkFSRUJFZ0FMSUFaQkFrWU5EQ0FHUVJWR0RRZ2dCa0g1QUVZTkNRc2dBa0dnQVdvZ0FSQzRnWUNBQUNBQ0tRT2dBU0lJUW9DQWdJQ0FnRUNESVFrZ0NFSWdpS2NoQmd3WkN5QUJJQVJCQVdvMkFpQWdBa0VnYWlBQlFmZ0FFTDJBZ0lBQUlBSkJLR29nQVVFUUVOYUFnSUFBUWdBaENTQUNMd0VzSWdZTkZpQUNRVEJxSUFFUXk0Q0FnQUFnQWk4Qk5DSUdEUllnQWlnQ01DRUhJQUpCT0dvZ0FVRVJFTDJBZ0lBQUFrQWdBaTBBUEVVTkFDQUNRYWdCYWlBQ0tBSTROZ0lBSUFKQnBBRTZBS3dCSUFJZ0J6WUNwQUVnQWlBRU5nS2dBU0FDUWNnQWFpQUJJQUpCb0FGcUVNZUFnSUFBSUFJcEEwZ2lDRUtBZ0lDQWdJQkFneUVKSUFoQ0lJaW5JUVlNR0FzZ0FrSEFBR29nQVVFMEVOYUFnSUFBSUFJdkFVUWlCZzBXSUFGQnlBQnFJUW9nQVVITUFHb29BZ0FoQ3dOQUlBSkIyQUJxSUFGQkZ4QzlnSUNBQUNBQ0xRQmNSUTBWSUFKQjRBQnFJQUZCQWhEV2dJQ0FBQ0FDTHdGa0lnWU5GaUFDS0FKZ0lRTWdBa0hvQUdvZ0FVRVlFTmFBZ0lBQUlBSXZBV3dpQmcwV0lBSkI4QUJxSUFGQkF4RFdnSUNBQUNBQ0x3RjBJZ1lORmlBQ1FmZ0FhaUFCUVJBUTFvQ0FnQUFnQWk4QmZDSUdEUllnQWtHQUFXb2dBVUV6RUwyQWdJQUFBa0FDUUNBQ0xRQ0VBVVVOQUNBQ1FZZ0JhaUFCRU5xQWdJQUFJQUl2QVl3QklnWU5HQ0FDS0FLSUFTRUZEQUVMSUFKQmtBRnFJQUZCQWhEV2dJQ0FBRUVBSVFVZ0FpOEJsQUVpQmcwWEN5QUNRWmdCYWlBQlFSRVExb0NBZ0FBZ0FpOEJuQUVpQmcwV0lBSkJwZ0U2QUt3QklBSWdBaWdDbUFFMkFxZ0JJQUlnQlRZQ3BBRWdBaUFETmdLZ0FTQUNRY2dBYWlBQklBSkJvQUZxRU1lQWdJQUFJQUlwQTBnaUNFSWdpS2NpQmtILy93TnhEUllnQ0tjaUJrVU5GU0FLSUFFZ0JoRERnSUNBQUNJR1FmLy9BM0VORmdKQUFrQUNRQ0FCS0FJUUlBRW9BaUFpQm1vdEFBQkIvd0J4SWdOQlRHb09CQmdDQWdBQkN5QUJJQVpCQVdvMkFpQU1BZ3NDUUNBRFFXcHFEZ01YQVJjQUN5QURRUkZHRFJZTElBRkJOeENlZ0lDQUFDSUdRZi8vQTNGRkRRQU1GZ3NMUWNJQUlRY01HQXRCd1FBaEJ3d1hDMEhBQUNFSERCWUxRVDhoQnd3VkMwRStJUWNNRkF0QlBTRUhEQk1MSUFKQm9BRnFJQUVReG9DQWdBQWdBaWtEb0FFaUNFS0FnSUNBZ0lCQWd5RUpJQWhDSUlpbklRWU1FUXNnQWtHZ0FXb2dBUkM1Z1lDQUFDQUNLUU9nQVNJSVFvQ0FnSUNBZ0VDRElRa2dDRUlnaUtjaEJnd1FDeUFDUWFBQmFpQUJFTHFCZ0lBQUlBSXBBNkFCSWdoQ2dJQ0FnSUNBUUlNaENTQUlRaUNJcHlFR0RBOExJQUVnQkVFQmFpSUdOZ0lnQWtBQ1FDQURJQVpxTFFBQVFmOEFjU0lHUWVBQVJnMEFJQVpCK1FCR0RRRkNBQ0VKSUFGQkRCREtnSUNBQUNFR0RBa0xJQUpCb0FGcUlBRVF1b0dBZ0FBZ0Fpa0RvQUVpQ0VLQWdJQ0FnSUJBZ3lFSklBaENJSWluSVFZTUR3c2dBa0dnQVdvZ0FSQzVnWUNBQUNBQ0tRT2dBU0lJUW9DQWdJQ0FnRUNESVFrZ0NFSWdpS2NoQmd3T0N3SkFJQVZCQVdvdEFBQkIvd0J4UVRSSERRQUNRQUpBQWtBQ1FBSkFBa0FnQXlBRVFRSnFJZ2RxTFFBQVFmOEFjU0lHUWFCL2FnNERBd0VDQUFzZ0JrRVZSZzBFSUFaQitRQkdEUU1MSUFKQm9BRnFJQUVRdUlHQWdBQWdBaWtEb0FFaUNFS0FnSUNBZ0lCQWd5RUpJQWhDSUlpbklRWU1FZ3NnQVNBRVFRTnFJZ1kyQWlBQ1FBSkFJQU1nQm1vdEFBQkIvd0J4SWdaQjRBQkdEUUFnQmtINUFFWU5BVUlBSVFrZ0FVRU1FTXFBZ0lBQUlRWU1EQXNnQWtHZ0FXb2dBUkM2Z1lDQUFDQUNLUU9nQVNJSVFvQ0FnSUNBZ0VDRElRa2dDRUlnaUtjaEJnd1NDeUFDUWFBQmFpQUJFTG1CZ0lBQUlBSXBBNkFCSWdoQ2dJQ0FnSUNBUUlNaENTQUlRaUNJcHlFR0RCRUxJQUVnQnpZQ0lDQUNRYUFCYWlBQkVMcUJnSUFBSUFJcEE2QUJJZ2hDZ0lDQWdJQ0FRSU1oQ1NBSVFpQ0lweUVHREJBTElBRWdCellDSUNBQ1FhQUJhaUFCRUxtQmdJQUFJQUlwQTZBQklnaENnSUNBZ0lDQVFJTWhDU0FJUWlDSXB5RUdEQThMSUFFZ0J6WUNJQ0FDUWFBQmFpQUJFTWFBZ0lBQUlBSXBBNkFCSWdoQ2dJQ0FnSUNBUUlNaENTQUlRaUNJcHlFR0RBNExJQUpCb0FGcUlBRVF1SUdBZ0FBZ0Fpa0RvQUVpQ0VLQWdJQ0FnSUJBZ3lFSklBaENJSWluSVFZTURRc2dBU0FFUVFGcU5nSWdJQUpCbUFGcUlBRVF6SUNBZ0FCQ0FDRUpRZ0FoQ0NBQ0x3R2NBU0lHRFF3Z0FrSDZBRG9BckFFZ0FpQUNLQUtZQVRZQ3BBRWdBaUFFTmdLZ0FTQUNRY2dBYWlBQklBSkJvQUZxRU1lQWdJQUFJQUlwQTBnaUNFS0FnSUNBZ0lCQWd5RUpJQWhDSUlpbklRWU1EQXNnQVNBRVFRRnFOZ0lnSUFKQm1BRnFJQUVReTRDQWdBQkNBQ0VKUWdBaENDQUNMd0djQVNJR0RRc2dBa0gzQURvQXJBRWdBaUFDS0FLWUFUWUNwQUVnQWlBRU5nS2dBU0FDUWNnQWFpQUJJQUpCb0FGcUVNZUFnSUFBSUFJcEEwZ2lDRUtBZ0lDQWdJQkFneUVKSUFoQ0lJaW5JUVlNQ3dzZ0FTQUVRUUZxTmdJZ0lBSkJtQUZxSUFFUXk0Q0FnQUJDQUNFSlFnQWhDQ0FDTHdHY0FTSUdEUW9nQWtHZkFUb0FyQUVnQWlBQ0tBS1lBVFlDcEFFZ0FpQUVOZ0tnQVNBQ1FjZ0FhaUFCSUFKQm9BRnFFTWVBZ0lBQUlBSXBBMGdpQ0VLQWdJQ0FnSUJBZ3lFSklBaENJSWluSVFZTUNnc2dBU0FFUVFGcU5nSWdJQUpCbUFGcUlBRVF5NENBZ0FCQ0FDRUpRZ0FoQ0NBQ0x3R2NBU0lHRFFrZ0FrR2VBVG9BckFFZ0FpQUNLQUtZQVRZQ3BBRWdBaUFFTmdLZ0FTQUNRY2dBYWlBQklBSkJvQUZxRU1lQWdJQUFJQUlwQTBnaUNFS0FnSUNBZ0lCQWd5RUpJQWhDSUlpbklRWU1DUXNnQVNBRVFRRnFOZ0lnSUFKQm1BRnFJQUVRdTRHQWdBQkNBQ0VKUWdBaENDQUNMd0djQVNJR0RRZ2dBa0g0QURvQXJBRWdBaUFDS0FLWUFUWUNwQUVnQWlBRU5nS2dBU0FDUWNnQWFpQUJJQUpCb0FGcUVNZUFnSUFBSUFJcEEwZ2lDRUtBZ0lDQWdJQkFneUVKSUFoQ0lJaW5JUVlNQ0FzZ0FTQUVRUUZxTmdJZ0lBSkJrQUZxSUFFUXU0R0FnQUJDQUNFSklBSXZBWlFCSWdaRkRRRUxRZ0FoQ0F3R0N5QUNLQUtRQVNFSElBSkJtQUZxSUFFUXpJQ0FnQUJDQUNFSUlBSXZBWndCSWdZTkJTQUNRYWdCYWlBQ0tBS1lBVFlDQUNBQ1Fma0FPZ0NzQVNBQ0lBYzJBcVFCSUFJZ0JEWUNvQUVnQWtISUFHb2dBU0FDUWFBQmFoREhnSUNBQUNBQ0tRTklJZ2hDZ0lDQWdJQ0FRSU1oQ1NBSVFpQ0lweUVHREFVTElBSkJPR29nQVVIaEFCQzlnSUNBQUVJQUlRa0NRQUpBQWtBZ0FpMEFQQTBBUVFBaEJnd0JDeUFDS0FJNElRUWdBa0hBQUdvZ0FVRVFFTmFBZ0lBQUlBSXZBVVFpQmcwQUlBSkIyQUJxSUFFUXk0Q0FnQUFnQWk4QlhDSUdEUUFnQWlnQ1dDRUhJQUpCNEFCcUlBRkJFUkRXZ0lDQUFDQUNMd0ZrSWdZTkFDQUNRZWdBYWlBQkVPMkFnSUFBSUFJdkFXd2lCZzBBSUFKQjhBQnFJQUVReTRDQWdBQWdBaThCZENJR0RRQWdBaWdDY0NFRElBSkIrQUJxSUFGQjJRQVF2WUNBZ0FBQ1FDQUNMUUI4UlEwQUlBSkJnQUZxSUFFUTY0Q0FnQUFnQWk4QmhBRWlCZzBCSUFKQmlBRnFJQUVReTRDQWdBQWdBaThCakFFaUJnMEJJQUlnQWlnQ2lBRTJBcFFCSUFJZ0F6WUNrQUVnQWtHWUFXb2dBU0FDUVpBQmFoRHZnSUNBQUVJQUlRZ2dBaThCbkFFaUJnMENJQUpCcUFGcUlBSW9BcGdCTmdJQUlBSkI5UUE2QUt3QklBSWdCellDcEFFZ0FpQUVOZ0tnQVNBQ1FjZ0FhaUFCSUFKQm9BRnFFTWVBZ0lBQUlBSXBBMGdpQ0VLQWdJQ0FnSUJBZ3lFSklBaENJSWluSVFZTUFnc2dBa0dvQVdvZ0F6WUNBQ0FDSUFjMkFxUUJJQUlnQkRZQ29BRWdBa0gwQURvQXJBRWdBa0hJQUdvZ0FTQUNRYUFCYWhESGdJQ0FBQ0FDS1FOSUlnaENnSUNBZ0lDQVFJTWhDU0FJUWlDSXB5RUdEQUVMUWdBaENBc2dDRUwvLy8vL0Q0TWdDWVFoQ0F3RUN5QUNRZUFBYWlBQlFUUVF2WUNBZ0FBQ1FDQUNMUUJrUlEwQUFrQURRQ0FDUWVnQWFpQUJRUmNRdllDQWdBQWdBaTBBYkVVTkFTQUNRZkFBYWlBQlFRSVExb0NBZ0FBZ0FpOEJkQ0lHRFFNZ0FpZ0NjQ0VESUFKQitBQnFJQUZCR0JEV2dJQ0FBQ0FDTHdGOElnWU5BeUFDUVlBQmFpQUJRUU1RMW9DQWdBQWdBaThCaEFFaUJnMERJQUpCaUFGcUlBRkJFQkRXZ0lDQUFDQUNMd0dNQVNJR0RRTWdBa0dRQVdvZ0FSRExnSUNBQUNBQ0x3R1VBU0lHRFFNZ0FpZ0NrQUVoQlNBQ1FaZ0JhaUFCUVJFUTFvQ0FnQUFnQWk4Qm5BRWlCZzBESUFKQnB3RTZBS3dCSUFJZ0FpZ0NtQUUyQXFnQklBSWdCVFlDcEFFZ0FpQUROZ0tnQVNBQ1FjZ0FhaUFCSUFKQm9BRnFFTWVBZ0lBQUlBSXBBMGdpQ0VJZ2lLY2lCa0gvL3dOeERRTWdDS2NpQmtVTkFTQUtJQUVnQmhERGdJQ0FBQ0lHUWYvL0EzRU5Bd0pBQWtBQ1FDQUJLQUlRSUFFb0FpQWlCbW90QUFCQi93QnhJZ05CVEdvT0JBUUNBZ0FCQ3lBQklBWkJBV28yQWlBTUFnc0NRQ0FEUVdwcURnTURBUU1BQ3lBRFFSRkdEUUlMSUFGQk54Q2VnSUNBQUNJR1FmLy9BM0VOQXd3QUN3c2dBa0dBQVdvZ0FVRTBFTDJBZ0lBQUlBSXRBSVFCUlEwQUEwQWdBa0dJQVdvZ0FVRURFTDJBZ0lBQUlBSXRBSXdCUlEwQkFrQUNRQUpBSUFFb0FoQWdBU2dDSUNJR2FpMEFBRUgvQUhFaUEwRk1hZzRFQkFFQkFnQUxBa0FnQTBGcWFnNERCQUVFQUFzZ0EwRVJSZzBEQ3lBQlFUY1Fub0NBZ0FBaUJrSC8vd054RFFNTUFRc2dBU0FHUVFGcU5nSWdEQUFMQ3lBQ1FaQUJhaUFCUVJFUTFvQ0FnQUFnQWk4QmxBRWlCZzBBSUFJb0FwQUJJUU1nQWtISUFHb2dBU0FCS0FKSUlBdEJBblJxSUFFb0Frd2dDMnNRdW9DQWdBQWdBaThCVUNJR0RRQWdBaWdDVENFRklBSW9Ba2doQ2lBQlFUeHFJQUZCQXhDN2dJQ0FBQ0lHUWYvL0EzRU5BQ0FCUWNBQWFpSUdJQVlvQWdBaURFRUJhallDQUNBQktBSThJQXhCQW5ScUlBbzJBZ0FnQmlBR0tBSUFJZ3BCQVdvMkFnQWdBU2dDUENBS1FRSjBhaUFGTmdJQUlBWWdCaWdDQUNJRlFRRnFOZ0lBSUFKQnFBRnFJQXcyQWdBZ0FTZ0NQQ0FGUVFKMGFpQUROZ0lBSUFKQnBRRTZBS3dCSUFJZ0J6WUNwQUVnQWlBRU5nS2dBU0FDUVpnQmFpQUJJQUpCb0FGcUVNZUFnSUFBSUFFZ0N6WUNUQ0FDS1FPWUFTSUlRb0NBZ0lDQWdFQ0RJUWtnQ0VJZ2lLY2hCZ3dDQ3lBQklBczJBa3dMUWdBaENBc2dDRUwvLy8vL0Q0TWdDWVFoQ0FzZ0FDQUdyVUwvL3dPRFFpQ0dJQW1FSUFoQy8vLy8vdytEaERjQ0FBd0JDeUFCSUFSQkFXbzJBaUFnQWtHZ0FXb2dBUkQ4Z0lDQUFBSkFBa0FnQWk4QnBBRWlCZzBBSUFJb0FxQUJJZ01OQVNBQlFROFF5b0NBZ0FBaUJrSC8vd054UlEwQkN5QUFJQVk3QVFRTUFRc2dBaUFETmdJTUlBSWdCRFlDQ0NBQ0lBYzZBQlFnQWtFWWFpQUJJQUpCQ0dvUXg0Q0FnQUFnQUNBQ0tRTVlOd0lBQ3lBQ1FiQUJhaVNBZ0lDQUFBdk9Ed0VDZjBFRElRSkJtSjNBZ0FBaEF3SkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQWdBVUgvQUhFT2VtOXdiMjl2YjI5dkFBRUNBd1FGQmdjSUNRb0xEQTBPRHhBUkVoTVVGUllYR0JrYUd4d2RIaDhnSVNJakpDVW1KeWdwS2lzc0xTNHZNREV5TXpRMU5qYzRPVG83UEQxdmIyOCtQMEJCUWtORVJVWkhTRWxLUzB4TlRrOVFVVkpUVkZWV1YxaFpXbHRjWFY1ZllHRmlZMlJsWm1kb2FXcHJiRzF1Ynd0QkFTRUNRWnlkd0lBQUlRTU1id3RCQVNFQ1FaNmR3SUFBSVFNTWJndEJBaUVDUWFDZHdJQUFJUU1NYlF0QkFpRUNRYU9kd0lBQUlRTU1iQXRCQVNFQ1FhYWR3SUFBSVFNTWF3dEJBaUVDUWFpZHdJQUFJUU1NYWd0QkFpRUNRYXVkd0lBQUlRTU1hUXRCQWlFQ1FhNmR3SUFBSVFNTWFBdEJBU0VDUWJHZHdJQUFJUU1NWnd0QkFTRUNRYk9kd0lBQUlRTU1aZ3RCQVNFQ1FiV2R3SUFBSVFNTVpRdEJBU0VDUWJlZHdJQUFJUU1NWkF0QkFpRUNRYm1kd0lBQUlRTU1Zd3RCQVNFQ1FieWR3SUFBSVFNTVlndEJBU0VDUWI2ZHdJQUFJUU1NWVF0QkFTRUNRY0Nkd0lBQUlRTU1ZQXRCQVNFQ1FjS2R3SUFBSVFNTVh3dEJBU0VDUWNTZHdJQUFJUU1NWGd0QkFpRUNRY2Fkd0lBQUlRTU1YUXRCQWlFQ1FjbWR3SUFBSVFNTVhBdEJ6SjNBZ0FBaEF3eGJDMEVCSVFKQjBKM0FnQUFoQXd4YUMwRUNJUUpCMHAzQWdBQWhBd3haQzBFQklRSkIxWjNBZ0FBaEF3eFlDMEVDSVFKQjE1M0FnQUFoQXd4WEMwRUNJUUpCMnAzQWdBQWhBd3hXQzBFQ0lRSkIzWjNBZ0FBaEF3eFZDMEhnbmNDQUFDRURERlFMUVFJaEFrSGtuY0NBQUNFRERGTUxRZWVkd0lBQUlRTU1VZ3RCQVNFQ1FldWR3SUFBSVFNTVVRdEJBaUVDUWUyZHdJQUFJUU1NVUF0QkFpRUNRZkNkd0lBQUlRTU1Ud3RCODUzQWdBQWhBd3hPQzBFQ0lRSkI5NTNBZ0FBaEF3eE5DMEg2bmNDQUFDRURERXdMUVFFaEFrSCtuY0NBQUNFRERFc0xRUUloQWtHQW5zQ0FBQ0VEREVvTFFRSWhBa0dEbnNDQUFDRURERWtMUVFJaEFrR0duc0NBQUNFRERFZ0xRWW1ld0lBQUlRTU1Sd3RCQWlFQ1FZMmV3SUFBSVFNTVJndEJrSjdBZ0FBaEF3eEZDMEVDSVFKQmxKN0FnQUFoQXd4RUMwRUJJUUpCbDU3QWdBQWhBd3hEQzBFQklRSkJtWjdBZ0FBaEF3eENDMEVDSVFKQm01N0FnQUFoQXd4QkMwRUJJUUpCbnA3QWdBQWhBd3hBQzBFQklRSkJvSjdBZ0FBaEF3dy9DMEVDSVFKQm9wN0FnQUFoQXd3K0MwRUJJUUpCcFo3QWdBQWhBd3c5QzBFQklRSkJwNTdBZ0FBaEF3dzhDMEVDSVFKQnFaN0FnQUFoQXd3N0MwRUNJUUpCcko3QWdBQWhBd3c2QzBHdm5zQ0FBQ0VERERrTFFiT2V3SUFBSVFNTU9BdEJCQ0VDUWJlZXdJQUFJUU1NTnd0QkFTRUNRYnlld0lBQUlRTU1OZ3RCQWlFQ1FiNmV3SUFBSVFNTU5RdEJBaUVDUWNHZXdJQUFJUU1NTkF0QnhKN0FnQUFoQXd3ekMwRUJJUUpCeUo3QWdBQWhBd3d5QzBFSklRSkIvNXZBZ0FBaEF3d3hDMEVGSVFKQjBwckFnQUFoQXd3d0MwRUpJUUpCaVp6QWdBQWhBd3d2QzBINW1jQ0FBQ0VEREM0TFFRZ2hBa0hqbThDQUFDRUREQzBMUVFjaEFrR2VtOENBQUNFRERDd0xRWVdhd0lBQUlRTU1Ld3RCQlNFQ1FjYWF3SUFBSVFNTUtndEJCU0VDUVp5YXdJQUFJUU1NS1F0QkJTRUNRYnFhd0lBQUlRTU1LQXRCQ0NFQ1FkcWJ3SUFBSVFNTUp3dEJCU0VDUWFpYXdJQUFJUU1NSmd0QkNDRUNRYmFid0lBQUlRTU1KUXRCQlNFQ1FhS2F3SUFBSVFNTUpBdEJDQ0VDUWRHYndJQUFJUU1NSXd0QkJTRUNRYTZhd0lBQUlRTU1JZ3RCQkNFQ1FZMmF3SUFBSVFNTUlRdEJCQ0VDUVplYXdJQUFJUU1NSUF0QkNDRUNRY2lid0lBQUlRTU1Id3RCQlNFQ1FjQ2F3SUFBSVFNTUhndEJCaUVDUWQrYXdJQUFJUU1NSFF0QkJpRUNRZWFhd0lBQUlRTU1IQXRCQWlFQ1FmS1p3SUFBSVFNTUd3dEJnWnJBZ0FBaEF3d2FDMEVDSVFKQjdKbkFnQUFoQXd3WkMwRUdJUUpCOUpyQWdBQWhBd3dZQzBFSElRSkJwcHZBZ0FBaEF3d1hDMEVJSVFKQnY1dkFnQUFoQXd3V0MwRUpJUUpCOVp2QWdBQWhBd3dWQzBFR0lRSkJncHZBZ0FBaEF3d1VDMEVDSVFKQjc1bkFnQUFoQXd3VEMwRUdJUUpCaVp2QWdBQWhBd3dTQzBFR0lRSkJrSnZBZ0FBaEF3d1JDMEgxbWNDQUFDRUREQkFMUVFZaEFrR1htOENBQUNFRERBOExRUVloQWtIWW1zQ0FBQ0VEREE0TFFRc2hBa0dUbk1DQUFDRUREQTBMUVFZaEFrSDdtc0NBQUNFRERBd0xRUWNoQWtHdW04Q0FBQ0VEREFzTFFRWWhBa0h0bXNDQUFDRUREQW9MUVFRaEFrR1Ntc0NBQUNFRERBa0xRUXNoQWtHZm5NQ0FBQ0VEREFnTFFZbWF3SUFBSVFNTUJ3dEJCU0VDUWJTYXdJQUFJUU1NQmd0QkN5RUNRYXVjd0lBQUlRTU1CUXRCRGlFQ1FiZWN3SUFBSVFNTUJBdEIvWm5BZ0FBaEF3d0RDMEVJSVFKQjdKdkFnQUFoQXd3Q0MwRUZJUUpCekpyQWdBQWhBd3dCQzBFQUlRTkJBQ0VDQ3lBQUlBTTJBZ0FnQUNBQ05nSUVDendCQW45QkFDRUJJQUJCL3dGeElRSUNRQU5BSUFFaUFFRUdSZzBCSUFCQkFXb2hBU0FBUWU2SndJQUFhaTBBQUNBQ1J3MEFDd3NnQUVFR1NRdERBUUYvSTRDQWdJQUFRUkJySWdNa2dJQ0FnQUFnQTBFSWFpQUJJQUpCQUVISW5NQ0FBRUVDRUx5QmdJQUFJQUFnQXlrRENEY0NBQ0FEUVJCcUpJQ0FnSUFBQzNBQkJYOGpnSUNBZ0FCQkVHc2lBaVNBZ0lDQUFFRUFJUU5CQUNFRUFrQURRQ0FDUVFocUlBQWdBU0FFUWN1Y3dJQUFRUUVRdklHQWdBQWdBaTBBRENJRlJRMEJJQUlvQWdoQkFXb2hCQ0FEUVFGeElRWkJBU0VESUFaRkRRQUxDeUFDUVJCcUpJQ0FnSUFBSUFWQkFFY0xQZ0VCZnlPQWdJQ0FBRUVRYXlJQkpJQ0FnSUFBSUFGQkNHb2dBRUhMbk1DQUFFRUJFTDJCZ0lBQUlBRXZBUXdoQUNBQlFSQnFKSUNBZ0lBQUlBQUxSd0VCZnlPQWdJQ0FBRUVRYXlJQ0pJQ0FnSUFBSUFJZ0FUb0FDeUFDSUFBb0FnQTJBZ3dnQWtFTWFpQUNRUXRxUVFFUWhJR0FnQUFoQVNBQ1FSQnFKSUNBZ0lBQUlBRUxSUUVEZjBFQUlRTURRQUpBSUFJZ0EwY05BRUVBRHdzZ0FpQURheUVFSUFFZ0Eyb2hCU0FDSVFNZ0FDZ0NBQ0FGSUFRUXZvR0FnQUFpQkVILy93TnhSUTBBQ3lBRUM3NENBZ1ovQVg0amdJQ0FnQUJCa0FKcklnTWtnSUNBZ0FCQkFDRUVBa0FEUUFKQUlBSWdCRWNOQUVFQUlRVU1BZ3NDUUFKQUlBQW9BZ0FpQmlnQ0RDSUhEUUJCQUNFSERBRUxJQVl0QUNCRkRRQWdCeUFHS0FJY2F5QUdLQUlRYkNJSVJRMEFBa0FnQmtFSWFpMEFBQTBBSUFOQkRHcEJJRUdBQWhEWmdZQ0FBQm9nQ0NFSEEwQUNRQ0FIRFFBZ0JpZ0NEQ0VIREFJTElBTWdCaWdDQURZQ2pBSWdCeUFIUVlBQ0lBZEJnQUpKR3lJRmF5RUhJQU5CakFKcUlBTkJER29nQlJDRGdZQ0FBQ0lGUWYvL0EzRkZEUUFNQkFzTElBWWdDRFlDR0FzZ0JrRUFPZ0FnSUFZb0FoUWhCU0FHUVFBMkFoUWdCaUFISUFWck5nSU1JQU1nQmlBQklBUnFJQUlnQkdzUXZZR0FnQUFnQkNBREtRTUFJZ21uYWlFRUlBbENJSWluSWdWQi8vOERjVVVOQUFzTElBTkJrQUpxSklDQWdJQUFJQVVML1FVQkIzOGpnSUNBZ0FCQndBQnJJZ1FrZ0lDQWdBQUNRQUpBSUFKQkRHb3RBQUJGRFFBZ0FpZ0NDQ0VGUVFBaEJrRUFJUWNEUUFKQUFrQWdCaUFCVHcwQUFrQURRQ0FHUVFScUlnZ2dBVXNOQVNBQUlBWnFLQUFBUVlDQmdvUjRjUTBCSUFkQkJHb2hCeUFJSVFZTUFBc0xJQVlnQVU4TkFpQUVRVFJxSUFBZ0Jtb2lDUzBBQUNJS0VOR0FnSUFBQWtBZ0JDOEJOQTBBSUFRdEFEWWlDQ0FHYWlJR0lBRkxEUUFnQ0VFQlJnMENBa0FDUUFKQUFrQUNRQ0FJUVg5cURnUUFBUUlEQUFzZ0JFRUFPZ0E2SUFSQkFEc0JQQ0FFSUFwQi93RnhPd0U0SUFSQk9Hb2hDQXdEQ3lBRVFUaHFJQWxCQWhEU2dJQ0FBQ0FFUVRocUlRZ01BZ3NnQkVFNGFpQUpRUU1RMDRDQWdBQWdCRUU0YWlFSURBRUxJQVJCT0dvZ0NVRUVFTlNBZ0lBQUlBUkJPR29oQ0FzZ0NETUJCRUlnaGxBTkFnc2dBU0VIQ3dKQUlBVWdCMHNOQUNBRUlBTW9BZ0EyQWdnZ0JFRUlhaUFBSUFFUWhJR0FnQUFoQmd3RUMwRUFJQVVnQjJzaUJpQUdJQVZMR3lFSElBUkJFR29nQWk4QkVDQUNRUkpxTFFBQVFSQjBjaUFFUVF4cVFRUVFob0NBZ0FCQkF5QUVMUUFTSUFRdkFSQWlCaHNoQ0VHQW44Q0FBQ0FFUVF4cUlBWWJJUWtDUUFKQUFrQWdBaTBBRkVFRGNRNERBQUVDQUFzZ0JDQURLQUlBTmdJVUlBUkJGR29nQUNBQkVJU0JnSUFBSWdaQi8vOERjUTBGSUFRZ0F5Z0NBRFlDR0NBRVFSaHFJQWtnQ0NBSEVOYUJnSUFBSVFZTUJRc2dCQ0FES0FJQU5nSWNJQVJCSEdvZ0NTQUlJQWRCQVhZUTFvR0FnQUFpQmtILy93TnhEUVFnQkNBREtBSUFOZ0lnSUFSQklHb2dBQ0FCRUlTQmdJQUFJZ1pCLy84RGNRMEVJQVFnQXlnQ0FEWUNKQ0FFUVNScUlBa2dDQ0FIUVFGcVFRRjJFTmFCZ0lBQUlRWU1CQXNnQkNBREtBSUFOZ0lvSUFSQktHb2dDU0FJSUFjUTFvR0FnQUFpQmtILy93TnhEUU1nQkNBREtBSUFOZ0lzSUFSQkxHb2dBQ0FCRUlTQmdJQUFJUVlNQXdzZ0IwRUJhaUVIREFBTEN5QUVJQU1vQWdBMkFqQWdCRUV3YWlBQUlBRVFoSUdBZ0FBaEJnc2dCRUhBQUdva2dJQ0FnQUFnQmd1SkFRRURmeU9BZ0lDQUFFSFFBR3NpQXlTQWdJQ0FBQ0FEUVF4cUlBQkJER3BCd0FBUTJvR0FnQUFhSUFBb0FnZ2hCQ0FESUFOQkRHb2dBUkMvZ1lDQUFDQURJQVEyQWt3Q1FDQURRY3dBYWlBREtBSUFJQU1vQWdRaUJSQ0VnWUNBQUNJRVFmLy9BM0VOQUNBQUlBRWdCU0FDRU1DQmdJQUFJUVFMSUFOQjBBQnFKSUNBZ0lBQUlBUUwrd0lCQ0g4amdJQ0FnQUJCNEFCcklnSWtnSUNBZ0FBZ0FrRVVhaUFBUVF4cVFjQUFFTnFCZ0lBQUdnSkFBa0FnQWlnQ0lFR3ExYXJWZWlBQ0tBSW9JZ01iSWdRZ0FVRUNkR29vQWdBaUJRMEFRUUFoQmd3QkN5QUFLQUlJSVFjZ0FpZ0NIQ0VJSUFJb0FoUWhDVUVBSVFaQkFDRUFBa0FnQVVVTkFDQUVJQUZCZjJvaUFFRUNkR29vQWdBaEJDQUNRUWhxSUFKQkZHb2dBQkMvZ1lDQUFDQUVJQUlvQWd4cUlRQUxJQUpCMUFCcUlBa2dBR29nQlNBQWF4RC9nSUNBQUNBQ0xRQllEUUFDUUNBQlJRMEFJQUVnQ0VHcTFhclZlaUFERzJwQmYyb3RBQUJCL3dCeFFjY0FSZzBCQzBFQUlRWWdBa0VBT2dCZklBQWdCV3NoQkNBRklBbHFRWDlxSVFFRFFDQUJMUUFBSWdVUS9vQ0FnQUJCQVhGRkRRRWdBaTBBWHlFQUFrQWdCVUgvQVhGQkNrY05BQ0FDSUFCQkFXcEJBM0VpQURvQVh3c0NRQ0FBUVFOeFFRSkhEUUFnQnhDQmdZQ0FBQ0VHREFJTElBRkJmMm9oQVNBRVFRRnFJZ1FOQUFzTElBSkI0QUJxSklDQWdJQUFJQVlMclFJREEzOEJmZ1YvSTRDQWdJQUFRUkJySWdNa2dJQ0FnQUFnQVNnQ0FDRUVRWmlTd0lBQUlRVUNRQ0FCS0FJRVJRMEFJQUlRaVlHQWdBQWhCZ0pBQWtBZ0JBMEFRUUFoQjBGL0lRZ01BUXNnQkVGOGFpZ0NBQ0lIUVg5cUlRZ0xJQVJCZUdvaENTQUlJQWFuY1NFQklBWkNPWWluSVFvRFFDQUVJQUZxTEFBQUlndEZEUUVnQjBVTkFRSkFJQXRCZjBvTkFDQUtJQXRCL3dCeFJ3MEFJQWtvQWdBZ0FVRUNkR29vQWdBZ0FrY05BQ0FEUVFFNkFBd2dBeUFCTmdJSUlBTkJDR29oQlF3Q0N5QUhRWDlxSVFjZ0FVRUJhaUFJY1NFQkRBQUxDd0pBQWtBZ0JTMEFCQTBBUVFBaEFVRUFJUWNNQVFzZ0JFRjBhaWdDQUNBRktBSUFRUU4wYWlJQktBSUVJUWNnQVNnQ0FDRUJDeUFBSUFjMkFnUWdBQ0FCTmdJQUlBTkJFR29rZ0lDQWdBQUxPZ0lCZndGK0k0Q0FnSUFBUVJCcklnRWtnSUNBZ0FBZ0FTQUFOZ0lNSUFGQkRHcEJCQkRYZ1lDQUFDRUNJQUZCRUdva2dJQ0FnQUFnQWd2RUVBRU5meU9BZ0lDQUFFSFFBV3NpQkNTQWdJQ0FBQ0FFUVF4cUlBQkJER3BCd0FBUTJvR0FnQUFhSUFRZ0JFRU1haUFCRUwrQmdJQUFJQUJCbEFGcUlRVWdCQ2dDQkNFR0lBUW9BZ0FoQndKQUFrQUNRQUpBQWtBQ1FBSkFJQUJCb0FGcUtBSUFJZ2hGRFFCQkFDRUpRUUJCQVVFQ0lBZ3RBQUFpQ2tFUlNSc2dDa0VKU1JzT0F3RUNBd0VMSUFjZ0JoREJnWUNBQUNFTElBUkJnQUZxUVFocUlBVkJDR29vQWdBMkFnQkJBQ0VJSUFSQkFEWUNqQUVnQkNBRktRSUFOd09BQVNBRVFaQUJhaUFFUVlBQmFoRENnWUNBQUNBRUtBS1VBVUdxMWFyVmVpQUVLQUtnQVNJTUd5RUtJQVFvQXBBQlFhclZxdFY2SUF3YklRa2dCQ2dDbkFGQkFDQU1HeUVNQTBBZ0RDQUlSZzBGQWtBZ0NTZ0NBQ0FMUncwQUlBY2dCaUFLS0FJQUlBcEJCR29vQWdBUWlvQ0FnQUJCQVhFTkJRc2dDVUVFYWlFSklBcEJDR29oQ2lBSVFRRnFJUWdNQUFzTElBUkJxQUZxUVFocUlBVkJDR29vQWdBMkFnQWdCQ0FGS1FJQU53T29BU0FFSUFnMkFyUUJJQVJCdkFGcUlBUkJxQUZxRU1LQmdJQUFJQVFvQXNBQlFhclZxdFY2SUFRb0Fzd0JJZ2tiSVEwZ0JDZ0N2QUZCcXRXcTFYb2dDUnNoRGlBSVFRUnFJUThnQnlBR0VNR0JnSUFBSVF4QmZ5QUlLQUlBZEVGL2N5RVFRUUFoQ1VFQUlRb0RRQ0FQSUF3Z0NXb2dFSEZCQVhScUlnc3RBQUFpQ0VIL0FVWU5CQ0FMTFFBQlFmOEJjU0FLUWY4QmNVa05CQUpBSUF3Z0RpQUlRUUowYWlnQ0FFY05BQ0FISUFZZ0RTQUlRUU4wYWlJTEtBSUFJQXNvQWdRUWlvQ0FnQUJCQVhFTkJBc2dDVUVCYWlFSklBcEJBV29oQ2d3QUN3c2dCRUdvQVdwQkNHb2dCVUVJYWlnQ0FEWUNBQ0FFSUFVcEFnQTNBNmdCSUFRZ0NEWUN0QUVnQkVHOEFXb2dCRUdvQVdvUXdvR0FnQUFnQkNnQ3dBRkJxdFdxMVhvZ0JDZ0N6QUVpQ1JzaERTQUVLQUs4QVVHcTFhclZlaUFKR3lFT0lBaEJCR29oRHlBSElBWVF3WUdBZ0FBaERFRi9JQWdvQWdCMFFYOXpJUkJCQUNFSlFRQWhDZ05BSUE4Z0RDQUphaUFRY1VFQ2RHb2lDeThCQUNJSVFmLy9BMFlOQXlBTEx3RUNRZi8vQTNFZ0NrSC8vd054U1EwREFrQWdEQ0FPSUFoQkFuUnFLQUlBUncwQUlBY2dCaUFOSUFoQkEzUnFJZ3NvQWdBZ0N5Z0NCQkNLZ0lDQUFFRUJjUTBEQ3lBSlFRRnFJUWtnQ2tFQmFpRUtEQUFMQ3lBRVFhZ0Jha0VJYWlBRlFRaHFLQUlBTmdJQUlBUWdCU2tDQURjRHFBRWdCQ0FJTmdLMEFTQUVRYndCYWlBRVFhZ0JhaERDZ1lDQUFDQUVLQUxBQVVHcTFhclZlaUFFS0FMTUFTSUtHeUVPSUFRb0Fyd0JRYXJWcXRWNklBb2JJUkFnQ0VFRWFpRUxJQWNnQmhEQmdZQ0FBQ0VLUVg4Z0NDZ0NBSFJCZjNNaER3TkFJQXNnQ2lBSmFpQVBjVUVEZEdvaURDZ0NBQ0lJUVg5R0RRSWdEQ2dDQkNBSlNRMENBa0FnQ2lBUUlBaEJBblJxS0FJQVJ3MEFJQWNnQmlBT0lBaEJBM1JxSWd3b0FnQWdEQ2dDQkJDS2dJQ0FBRUVCY1EwQ0N5QUpRUUZxSVFrTUFBc0xJQVJCa0FGcVFRaHFJQVZCQ0dvb0FnQTJBZ0FnQkNBRktRSUFOd09RQVNBRVFid0JhaUFFUVpBQmFoRENnWUNBQUNBRUtBTEVBVUdxMWFyVmVpQUVLQUxNQVJzZ0NFRURkR29pQ0NnQ0JDRUpJQWdvQWdBaENBd0JDMEVBSVFoQkFDRUpDd0pBQWtBZ0NFVU5BQ0FFSUFBb0FnZzJBa3dnQkVITUFHb2dDQ0FKRUlTQmdJQUFJZ2hCLy84RGNRMEJJQUFnQVNBR0lBSVF3SUdBZ0FBaENBd0JDd0pBSUFjdEFBQkJ3QUJHRFFBZ0FDQUJJQUlRaG9HQWdBQWhDQXdCQ3lBSFFRSnFJUWNDUUFKQUFrQUNRQ0FHUVgxcUlnb09BZ0lBQVFzZ0J5MEFBRUhmQUVjTkFDQURRUU54UVFGSERRRU1BZ3RCQUNFSUFrQURRQ0FFSUFnMkFsQWdDQ0FLVHcwQkFrQUNRQUpBSUFjZ0NHb3RBQUFpQ1VIY0FFWU5BQ0FKUVZCcVFmOEJjVUVLVHcwQklBZ05BZ3dGQ3lBRUlBZzJBbFFnQkVIWUFHb2dCeUFLSUFSQjFBQnFFTU9CZ0lBQUlBUXRBR0FOQkFKQUFrQWdCQzhCV0NBRUxRQmFRUkIwY2lJSlFkRC8vd0JxUWYvLy93QnhRUXBQRFFBZ0NBMEJEQVlMSUFsQi8vLy9BSEZCM3dCR0RRQWdDVUhmLy84QWNVRy8vLzhBYWtILy8vOEFjVUVhVHcwRkN5QUVLQUpVSUFocUlRZ01BZ3NnQ1VIZkFFWU5BQ0FKUWQ4QmNVRy9mMnBCL3dGeFFScFBEUU1MSUFoQkFXb2hDQXdBQ3d0QkFDRUpJQVJCQURZQ1VFSHNqOENBQUNFTVFRQWhDQUpBQTBBZ0NTQUtUdzBCSUFoQkRVc05BUUpBQWtBZ0J5QUphaTBBQUNJR1Fkd0FSdzBBSUFSQjlBQnFJQWNnQ2lBRVFkQUFhaEREZ1lDQUFDQUVLQUpRSVFrZ0JDMEFkQ0VHREFFTElBUWdDVUVCYWlJSk5nSlFDeUFFUWVZQWFpQUlhaUFHT2dBQUlBeEJCR29oRENBSVFRRnFJUWdNQUFzTElBa2dDa2NOQVNBSVJRMEFJQVJCNWdCcUlBaEIzYURBZ0FCQkFSQ0tnSUNBQUVFQmNRMEFRUUFoQ1FOQUFrQUNRQ0FJSUFsR0RRQWdCRUhtQUdvZ0NXb3RBQUFpQ2tIZkFFWU5BU0FLUWQ4QmNVRy9mMnBCL3dGeFFSbE5EUUVnQ1VVTkF5QUtRVVpxUWY4QmNVSDFBVXNOQVF3REN5QUVRYndCYWlBRVFlWUFhaUFJRU0yQWdJQUFJQVF0QUwwQkRRSUNRQUpBSUFoQmNXcEJkRWtOQUVFQVFSMGdEQ2dDQUNJSmF5SUtJQXBCSFVzYlFRRnFJUW9nQ1VFRGRFR29rTUNBQUdvaENRTkFJQWxCQkdvb0FnQWdDRWNOQVNBSktBSUFJQWdnQkVIbUFHb1EwSUNBZ0FCQkFYRU5BaUFKUVFocUlRa2dDa0YvYWlJS0RRQUxDeUFJUVFKSkRRUUNRQ0FFTFFCbUlnbEI5UUJHRFFBZ0NVSHBBRWNOQlF0QkFTRUpBMEFnQ0NBSlJnMEJJQVJCNWdCcUlBbHFJUW9nQ1VFQmFpRUpJQW90QUFCQlVHcEIvd0Z4UVFwUERRVU1BQXNMSUFOQkEzRU5Bd3dDQ3lBSlFRRnFJUWtNQUFzTElBQWdBU0FDRU1TQmdJQUFJUWdNQVFzZ0FDQUJJQUlReFlHQWdBQWhDQXNnQkVIUUFXb2tnSUNBZ0FBZ0NBc2VBUUYvUVFBaEFRSkFJQUF0QUNBTkFDQUFFSUdCZ0lBQUlRRUxJQUVMS0FFQmZ5QUFJQUFvQWd4QmYybzJBZ3dDUUNBQUtBSWNJZ0ZGRFFBZ0FDQUJRWDlxTmdJY0N3djNDd0VIZjBFQUlRSUNRQUpBQTBBZ0FDZ0NJRUdxMWFyVmVpQUFLQUlvSWdNYklRUWdBQ2dDR0VHcTFhclZlaUFER3lFRlFRQWhCZ05BUVFBaEJ3SkFBMEFDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUNBRklBRWlDR290QUFBT3FnRVhBUVlQRHc4UEJnWUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0FDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnR0JnWUdCZ1lHQmdZR0RBd01EQWdJQ0FnSUNBZ0hCd2NIQ0FnSUNBY0hCd2NJQ0FnSUVSRUlDQkVSQmdZQ0F3UUZDQW9LQ2dvS0NBWUdCZ1lHQmdZSkNRa0pDUVlHQmdZR0JnY0dCZ1lHQmdZR0JnME5EUTBORFEwTkRRME5EUkFRRUFZR0RnNE9EZ1lHQ3dzR0NCY0xJQVFnQ0VFRGRHb29BZ0JCQW5RZ0FDZ0NMR3BCQkdvaEFRd1JDeUFBS0FJY1FhclZxdFY2SUFNYklBaEJBblJxS0FJQUlnRkZEUklnQnlBQklBQW9BZ2hCcXRXcTFYb2dBQ2dDRkJ0cVFYOXFMUUFBUWY4QWNVSHFBRVpxSVFjTUVnc2dCQ0FJUVFOMGFpZ0NBQ0lCRFJBZ0FDZ0NIRUdxMWFyVmVpQURHeUFJUVFKMGFpZ0NBQ0FIUVg5emFpRUFEQlVMQWtBZ0JDQUlRUU4wYWlnQ0FDSUJEUUFnQUNnQ0hFR3ExYXJWZWlBREd5QUlRUUowYWlnQ0FDQUhhMEYrYWlFQURCVUxJQVpCZjJvaEJnd1JDeUFBS0FJc0lnRWdBU0FFSUFoQkEzUnFLQUlBUVFKMGFpZ0NBRUVDZEdvaEFRd05DeUFHSUFKcVFYOXFJUUlnQUNnQ0xDSUJJQUVnQkNBSVFRTjBhaWdDQUVFQ2RHb29BZ0JCQW5ScUtBSUFJUUVNRUFzZ0FDZ0NIRUdxMWFyVmVpQURHeUFJUVFKMGFpZ0NBQ0FIYXlFQURCRUxJQUFvQWh4QnF0V3ExWG9nQXhzZ0NFRUNkR29vQWdBZ0IwRi9jMm9oQUF3UUN5QUVJQWhCQTNScUlRRU1DUXNnQUNnQ0NFR3ExYXJWZWlBQUtBSVVHMEYvYWlFRklBQW9BaHhCcXRXcTFYb2dBeHNnQ0VFQ2RHb29BZ0FoQUFOQUlBQkZEUTRDUUFKQUlBVWdBR290QUFCQi93QnhJZ2hCbzM5cUlnRkJEVXNOQUVFQklBRjBRYVBCQUhFTkFRc2dDRUVEUmcwQUlBQWdCMnNoQUF3UUN5QUFRWDlxSVFBTUFBc0xRUUFnQUNnQ0hFR3ExYXJWZWlBREd5QUlRUUowYWlnQ0FDSUJJQUFvQWdoQnF0V3ExWG9nQUNnQ0ZCc2lDRUVBSUFGQmYyb2lBQ0FBSUFGTEcyb3RBQUJCL3dCeFFlSUFSbXNpQUVGK2FpSUJJQUVnQUVzYklBQWdDRUVBSUFCQmYyb2lBU0FCSUFCTEcyb3RBQUJCL3dCeFFUUkdHeUFIYXlFQURBMExJQUFvQWh4QnF0V3ExWG9nQXhzZ0NFRUNkR29vQWdBZ0IwRi9jMm9oQUF3TUN3SkFJQUFvQWdoQnF0V3ExWG9nQUNnQ0ZCc2lBU0FBS0FJY1FhclZxdFY2SUFNYklBaEJBblJxS0FJQUlnQnFMUUFBUWY4QWNVRVhSZzBBUVFBZ0FFRi9haUlJSUFnZ0FFc2JJZ2dnQUNBQklBaHFMUUFBUWY4QWNVRVhSaHNoQUFzZ0FDQUhheUVBREFzTEFrQUNRQ0FBS0FJSVFhclZxdFY2SUFBb0FoUWJRUUFnQUNnQ0hFR3ExYXJWZWlBREd5QUlRUUowYWlnQ0FDSUFRWDlxSWdFZ0FTQUFTeHRxTFFBQVFmOEFjU0lCUWQ0QVJnMEFJQUZCNlFCSERRRUxJQWRCQVdvaEJ3c2dBQ0FIYXlFQURBb0xBa0FnQUNnQ0hFR3ExYXJWZWlBREd5QUlRUUowYWlnQ0FDSUJJQUFvQWdoQnF0V3ExWG9nQUNnQ0ZCdHFJZ0JCZjJvdEFBQkIvd0J4UVRSSERRQWdCMEVDYWlBSElBQkJmbW90QUFCQi93QnhRUUpHR3lFSEN5QUJJQWRySVFBTUNRc2dBQ2dDQ0VHcTFhclZlaUFBS0FJVUcwRi9haUVGSUFBb0FoeEJxdFdxMVhvZ0F4c2dDRUVDZEdvb0FnQWhBQU5BSUFCRkRRZ0NRQUpBSUFVZ0FHb3RBQUJCL3dCeElnaEJxMzlxSWdGQkhVc05BRUVCSUFGMFFZR0dnSUVDY1EwQkN5QUlRUU5HRFFBZ0FDQUhheUVBREFvTElBQkJmMm9oQUF3QUN3c0NRQ0FBS0FJY1FhclZxdFY2SUFNYklBaEJBblJxS0FJQUlnRkZEUUFnQUNnQ0NFR3ExYXJWZWlBQUtBSVVHeUFCYWlJQUxRQUFRZjhBY1VIVkFFWU5BQ0FISUFCQmYyb3RBQUJCL3dCeFFkVUFSbW9oQndzZ0FTQUhheUVBREFjTElBZEJBV29oQnlBRUlBaEJBM1JxSVFFTElBRW9BZ0FoQVF3QUN3c0xDeUFCSUFkcklRQU1BUXRCQUNFQUN5QUFJQVpxSUFKcUMya0JBWDhqZ0lDQWdBQkJFR3NpQXlTQWdJQ0FBQ0FEUVFocUlBQW9BZ0FnQUNnQ0RFR3ExYXJWZWlBQUtBSVVHeUlBSUFGQkFuUnFLQUlBSWdGcUlBQWdBa0VDZEdvb0FnQWdBV3RCQ2hEbWdJQ0FBQ0FETFFBTUlRQWdBMEVRYWlTQWdJQ0FBQ0FBUlF1MEdBRUxmeU9BZ0lDQUFFR0FBbXNpQWlTQWdJQ0FBQ0FBS0FJb0lRTWdBQ2dDSENFRUlBQW9BaUFoQlNBQUtBSVlJUVpCcXRXcTFYb2hCMEdxMWFyVmVpRUlBa0FnQUNnQ0ZFVU5BQ0FBS0FJSUlRZ2dBQ2dDRENFSEN5QUVRYXJWcXRWNklBTWJJUWtnQlVHcTFhclZlaUFER3lFRklBWkJxdFdxMVhvZ0F4c2hCRUVBSVFvRGZ3SkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQUVJQUVpQTJvdEFBQWlCZzZxQVFBYkhBa0tCd2djSEJ3ZEhSd2NIQndjSEJ3Y0hCd2NIQndjSEJ3Y0hCd2NIQndjSEJ3Y0hCd2NIQndjSEJ3Y0hCd2NIQndjSEJ3Y0hCd2NIQnNiR3hzYkd4c2JIQm9jSEJ3Y0tnNFBIaVVvS2lZbkl5UWhJaWdxSmljakpDRWlKU29sS2g4Z0h5QUVJaHdjSEJ3Y0hCVVdIQmdCSEJjWkd4QVJBaHdjRXhRU0hCNGVIaDRlSGg0ZEhTWW5JeVFkSXlRbUp3VWlJeVFtSndNZ0N3d05HeHNtSnlNa0hRWWRIUjBjQUFzZ0FFRVFhaWdDQUVGL2FpRUJEQ2dMSUFVZ0EwRURkR29vQWdRaUFRMHJJQWtnQTBFQ2RHb29BZ0FnQ21vaEFRd25DeUFGSUFOQkEzUnFLQUlBSWdFTktpQUpJQU5CQW5ScUtBSUFJQXBxSVFFTUpnc0NRQ0FBS0FJc0lnWWdCU0FEUVFOMGFpSURLQUlFUVFKMGFpSUJRUVJxS0FJQUlnc2dBU2dDQUVjTkFDQUtRUVJxSVFvZ0F5Z0NBQ0VCRENvTElBcEJBV29oQ2lBTFFRSjBJQVpxUVh4cUtBSUFJUUVNS1FzQ1FDQUFLQUlzSWdZZ0JTQURRUU4wYWlJREtBSUVRUUowYWlJQlFRUnFLQUlBSWdzZ0FTZ0NBRWNOQUNBS1FRTnFJUW9nQXlnQ0FDRUJEQ2tMSUFwQkFXb2hDaUFMUVFKMElBWnFRWHhxS0FJQUlRRU1LQXNDUUNBQUtBSXNJZ1lnQlNBRFFRTjBhaUlES0FJRVFRSjBhaUlCUVFScUtBSUFJZ3NnQVNnQ0FFY05BQ0FLUVFOcUlRb2dBeWdDQUNFQkRDZ0xJQXBCQVdvaENpQUxRUUowSUFacVFYeHFLQUlBSVFFTUp3c2dCU0FEUVFOMGFpZ0NCRUVDZENBQUtBSXNha0VJYWlnQ0FDQUthaUVCRENJTElBVWdBMEVEZEdvaUJpZ0NCQ0lCRFNVZ0JpZ0NBQ0lCRFNVZ0NpQUpJQU5CQW5ScUtBSUFha0VCYWlFQkRDRUxJQVVnQTBFRGRHb2lCaWdDQkNJQkRTUWdDa0VCYWlFS0lBWW9BZ0FpQVEwa0lBb2dDU0FEUVFKMGFpZ0NBR29oQVF3Z0N5QUZJQU5CQTNScUlnWW9BZ1FpQVEwaklBSkJCR29nQUVIQUFCRGFnWUNBQUJvZ0FrSEVBR29nQWtFRWFpQUdLQUlBRU1hQmdJQUFBa0FnQWlnQ1VDSUJSUTBBSUFwQkFXb2hDZ3drQ3dKQUlBSW9Ba2dpQVVVTkFDQUtRUUZxSVFvTUpBc2dBaWdDUkNJQkRTTWdDaUFKSUFOQkFuUnFLQUlBYWtFQmFpRUJEQjhMSUFVZ0EwRURkR29pQmlnQ0JDSUJEU0lDUUNBR0tBSUFRUUowSUFBb0FpeHFJZ1pCQkdvb0FnQWlBVVVOQUNBS1FRRnFJUW9NSXdzZ0JpZ0NBQ0lCRFNJZ0NpQUpJQU5CQW5ScUtBSUFha0VCYWlFQkRCNExJQVVnQTBFRGRHb2lCaWdDQkNJQkRTRWdCaWdDQUNJQkRTRWdDU0FEUVFKMGFpZ0NBQ0FLYWlFQkRCMExBa0FnQlNBRFFRTjBhaUlHS0FJRUlnRkZEUUFnQ2tFQmFpRUtEQ0VMSUFZb0FnQWlBUTBnSUFrZ0EwRUNkR29vQWdBZ0Ntb2hBUXdjQ3lBQUtBSXNJQVVnQTBFRGRHb2lDeWdDQkVFQ2RHb2lCa0VFYWlnQ0FDSUJEUjhDUUNBR0tBSUFJZ0ZGRFFBZ0NrRUJhaUVLRENBTElBc29BZ0FpQVEwZklBa2dBMEVDZEdvb0FnQWdDbW9oQVF3YkN5QUtRUUZxSVFvZ0JTQURRUU4wYWlnQ0JFRUNkQ0FBS0FJc2FrRUVhaWdDQUNFQkRCNExJQXBCQVdvaENpQUZJQU5CQTNScUtBSUVRUUowSUFBb0FpeHFRUWhxS0FJQUlRRU1IUXNDUUNBRklBTkJBM1JxS0FJQUlnRkZEUUFnQVNBS2FpRUJEQmtMSUFrZ0EwRUNkR29vQWdBZ0Ntb2hBUXdZQ3lBRklBTkJBM1JxSWdZb0FnUWlBUTBiQWtBZ0JpZ0NBQ0lCUlEwQUlBRWdDbW9oQVF3WUN5QUpJQU5CQW5ScUtBSUFJQXBxSVFFTUZ3c2dCU0FEUVFOMGFpSURLQUlFSWdFTkdpQURLQUlBSVFFTUdnc2dBa0hVQUdvZ0FFSEFBQkRhZ1lDQUFCb2dBa0dVQVdvZ0FrSFVBR29nQlNBRFFRTjBhaUlCS0FJQUVNZUJnSUFBSUFjZ0NTQUJLQUlFSWdGQkFuUnFLQUlBUVFKMGFpZ0NBQ0VEUVFBaEJpQUNLQUtZQVNJTFJRMFlJQWNnQ1NBTFFRSjBhaWdDQUVFQ2RHb29BZ0FpRENBRFRRMFlRUUVoQmlBTUlRTWdDeUVCREJnTElBSkJxQUZxSUFCQndBQVEyb0dBZ0FBYUlBSkI2QUZxSUFKQnFBRnFJQVVnQTBFRGRHb2lBU2dDQUJESWdZQ0FBQ0FISUFrZ0FTZ0NCQ0lCUVFKMGFpZ0NBRUVDZEdvb0FnQWhBMEVBSVFZZ0FpZ0M4QUVpQzBVTkZpQUhJQWtnQzBFQ2RHb29BZ0JCQW5ScUtBSUFJZ3dnQTAwTkZrRUJJUVlnRENFRElBc2hBUXdXQ3lBRklBTkJBM1JxS0FJRVFRSjBJQUFvQWl4cVFRUnFLQUlBSVFFTUZ3c2dCU0FEUVFOMGFpZ0NCRUVDZENBQUtBSXNha0VJYWlnQ0FDRUJEQllMSUFVZ0EwRURkR29vQWdSQkFuUWdBQ2dDTEdwQkJHb29BZ0FoQVF3VkN5QUFLQUlzSUFVZ0EwRURkR29pQVNnQ0JDSURRUjkySUFOcUlBRW9BZ0JxUVFKMGFpZ0NBQ0VCREJRTElBVWdBMEVEZEdvb0FnQWlBUTBUSUFrZ0EwRUNkR29vQWdBZ0Ntb2hBUXdQQ3lBRklBTkJBM1JxS0FJRVFRSjBJQUFvQWl4cVFRUnFLQUlBSVFFTUVnc2dCU0FEUVFOMGFpZ0NBQ0VCREJFTElBVWdBMEVEZEdvb0FnUWhBUXdRQ3lBRklBTkJBM1JxS0FJRUlBcHFJUUVNQ3dzZ0NTQURRUUowYWlnQ0FDQUthaUVCREFvTElBcEJBV29oQ2dKQUlBQW9BaXdpQmlBRklBTkJBM1JxS0FJRVFRSjBhaUlCUVFScUtBSUFJZ3NnQVNnQ0FFY05BQ0FKSUFOQkFuUnFLQUlBSUFwcUlRRU1DZ3NnQzBFQ2RDQUdha0Y4YWlnQ0FDRUJEQTBMSUFwQkFtb2hDaUFGSUFOQkEzUnFLQUlFUVFKMElBQW9BaXdpQVdwQkJHb29BZ0JCQW5RZ0FXcEJmR29vQWdBaEFRd01DeUFLUVFGcUlRb2dCU0FEUVFOMGFpZ0NCRUVDZENBQUtBSXNJZ0ZxUVFScUtBSUFRUUowSUFGcVFYeHFLQUlBSVFFTUN3c2dDa0VDYWlFS0lBVWdBMEVEZEdvb0FnUkJBblFnQUNnQ0xDSUJha0VFYWlnQ0FFRUNkQ0FCYWtGOGFpZ0NBQ0VCREFvTElBcEJBV29oQ2lBRklBTkJBM1JxS0FJRVFRSjBJQUFvQWl4cVFYeHFLQUlBSVFFTUNRc2dDa0VDYWlFS0lBVWdBMEVEZEdvb0FnUkJBblFnQUNnQ0xHcEJmR29vQWdBaEFRd0lDeUFLUVFGcUlRb2dCU0FEUVFOMGFpZ0NCQ0lCRFFjZ0NTQURRUUowYWlnQ0FDQUthaUVCREFNTEFrQWdCU0FEUVFOMGFpSUxLQUlFSWdGRkRRQWdDa0VCYWlFS0RBY0xBa0FnQ3lnQ0FDSUJSUTBBSUFwQkFXb2hDZ3dIQ3dKQUFrQWdCa0hSQUVZTkFDQUdRZGtBUmcwQUFrQUNRQ0FHUVlvQlJnMEFJQVpCa1FGR0RRRWdCa0dnQVVZTkFpQUtRUVJxSVFFZ0NTQURRUUowYWlnQ0FDQUlha0VGYWlFRUEwQWdBVUVCYWlFQklBUXRBQUFoQlNBRVFRRnFJUVFnQlVIL0FIRkJ5QUJHRFFBTUJBc0xJQXBCQW1vaEFRd0NDeUFLUVFGcUlRRWdDU0FEUVFKMGFpZ0NBQ0FJYWtFQ2FpRUVBMEFnQVVFQmFpRUJJQVF0QUFBaEJTQUVRUUZxSVFRZ0JVSC9BSEZCeUFCR0RRQU1BZ3NMSUFwQkFXb2hBUXNnQ1NBRFFRSjBhaWdDQUNBQmFpRUJEQUlMSUFwQkFtb2hDaUFGSUFOQkEzUnFJZ01vQWdRaUFRMEZJQU1vQWdBaEFRd0ZDeUFLUVFGcUlRb2dCU0FEUVFOMGFpZ0NCQ0lCRFFRZ0NTQURRUUowYWlnQ0FDQUthaUVCQ3lBQ1FZQUNhaVNBZ0lDQUFDQUJEd3NnQ2tFQ2FpRUtJQVVnQTBFRGRHb29BZ1FoQVF3Q0N3SkFJQUlvQXZRQklndEZEUUFnQnlBSklBdEJBblJxS0FJQVFRSjBhaWdDQUNJTUlBTk5EUUJCQVNFR0lBd2hBeUFMSVFFTEFrQWdBaWdDK0FFaUMwVU5BQ0FISUFrZ0MwRUNkR29vQWdCQkFuUnFLQUlBSWd3Z0EwME5BRUVCSVFZZ0RDRURJQXNoQVFzQ1FDQUNLQUw4QVNJTFJRMEFJQXNnQVNBSElBa2dDMEVDZEdvb0FnQkJBblJxS0FJQUlBTkxJZ01iSVFGQkFTQUdJQU1iSVFZTElBWWdDbW9oQ2d3QkN3SkFJQUlvQXB3QklndEZEUUFnQnlBSklBdEJBblJxS0FJQVFRSjBhaWdDQUNJTUlBTk5EUUJCQVNFR0lBd2hBeUFMSVFFTEFrQWdBaWdDb0FFaUMwVU5BQ0FISUFrZ0MwRUNkR29vQWdCQkFuUnFLQUlBSWd3Z0EwME5BRUVCSVFZZ0RDRURJQXNoQVFzQ1FDQUNLQUtrQVNJTFJRMEFJQXNnQVNBSElBa2dDMEVDZEdvb0FnQkJBblJxS0FJQUlBTkxJZ01iSVFGQkFTQUdJQU1iSVFZTElBWWdDbW9oQ2d3QUN3dTZBUUVFZnlPQWdJQ0FBRUhRQUdzaUF5U0FnSUNBQUNBQUtBSU1RYXJWcXRWNklBQW9BaFFiSUFGQkFuUnFJUVFnQWlBQklBSWdBVXNiSVFVQ1FBTkFJQVVnQVNJR1JnMEJJQVFvQWdBaEFTQURRUWhxSUFCQndBQVEyb0dBZ0FBYUlBTWdBMEVJYWlBR0VLQ0JnSUFBSUFOQnlBQnFJQUFvQWdBZ0FTQURLQUlFYWlJQmFpQUVRUVJxSWdRb0FnQWdBV3NRLzRDQWdBQWdCa0VCYWlFQklBTXRBRXhGRFFBTEN5QURRZEFBYWlTQWdJQ0FBQ0FHSUFKSkMrSUtBUTEvSTRDQWdJQUFRY0FEYXlJREpJQ0FnSUFBSUFGQkxHb2hCQ0FCS0FJa0lRVkJqSXJBZ0FBaEJnSkFBa0FDUUFKQUFrQUNRQ0FCS0FJWUlnZEJxdFdxMVhvZ0FTZ0NLQ0lJR3lBQ2FpMEFBRUY5YWc0RUFBRURBZ1VMSUFFb0Fod2hCaUFCS0FJZ0lnbEJxdFdxMVhvZ0NCc2dBa0VEZEdvaUNpZ0NCQ0VMSUFvb0FnQWhDaUFEUVpnQ2FrRVFhaUFCUVJCcUlnd3BBZ0EzQXdBZ0EwR1lBbXBCQ0dvZ0FVRUlhaUlOS1FJQU53TUFJQU5CbUFKcVFUUnFJQVJCQ0dvaURpa0NBRGNDQUNBRFFaZ0Nha0U4YWlBRVFSQnFJZzhvQWdBMkFnQWdBeUFCS1FJQU53T1lBaUFESUFnMkFzQUNJQU1nQlRZQ3ZBSWdBeUFKTmdLNEFpQURJQVkyQXJRQ0lBTWdCellDc0FJZ0F5QUVLUUlBTndMRUFpQURRZGdDYWlBRFFaZ0NhaUFLRU1hQmdJQUFJQU5CZ0FOcVFSQnFJQXdwQWdBM0F3QWdBMEdBQTJwQkNHb2dEU2tDQURjREFDQURRWUFEYWtFMGFpQU9LUUlBTndJQUlBTkJnQU5xUVR4cUlBOG9BZ0EyQWdBZ0F5QUlOZ0tvQXlBRElBVTJBcVFESUFNZ0NUWUNvQU1nQXlBR05nS2NBeUFESUFjMkFwZ0RJQU1nQVNrQ0FEY0RnQU1nQXlBRUtRSUFOd0tzQXlBRElBWkJxdFdxMVhvZ0NCc2dBa0VDZEdvb0FnQTJBdWdDSUFNZ0N6WUMvQUlnQXlBREtRTFlBamNDN0FJZ0F5QURLUUxnQWpjQzlBSWdBMEVJYWlBRFFZQURhaUFEUWVnQ2FoREpnWUNBQUNBRFFRaHFJUVlNQXdzZ0FTZ0NIQ0VHSUFFb0Fpd2hCQ0FCS0FJZ0lnbEJxdFdxMVhvZ0NCc2dBa0VEZEdvaUNpZ0NBQ0VMSUFvb0FnUWhDaUFEUVlBRGFrRUlhaUFCUVFocUtRSUFOd01BSUFOQmdBTnFRUkJxSUFGQkVHb3BBZ0EzQXdBZ0EwR0FBMnBCT0dvZ0FVRTRhaWtDQURjREFDQURJQUVwQWdBM0E0QURJQU1nQkRZQ3JBTWdBeUFJTmdLb0F5QURJQVUyQXFRRElBTWdDVFlDb0FNZ0F5QUdOZ0tjQXlBRElBYzJBcGdESUFNZ0FTa0NNRGNEc0FNZ0F5QUdRYXJWcXRWNklBZ2JJQUpCQW5ScUtBSUFOZ0tZQWlBRFFnQTNBcVFDSUFNZ0NqWUNyQUlnQXlBRUlBdEJBblJxS1FJQU53S2NBaUFEUWN3QWFpQURRWUFEYWlBRFFaZ0NhaERKZ1lDQUFDQURRY3dBYWlFR0RBSUxJQUVvQWh3aEJpQUJLQUlnSWdsQnF0V3ExWG9nQ0JzZ0FrRURkR29pQ2lnQ0JDRUxJQW9vQWdBaENpQURRWUFEYWtFUWFpQUJRUkJxS1FJQU53TUFJQU5CZ0FOcVFRaHFJQUZCQ0dvcEFnQTNBd0FnQTBHMEEyb2dCRUVJYWlrQ0FEY0NBQ0FEUWJ3RGFpQUVRUkJxS0FJQU5nSUFJQU1nQVNrQ0FEY0RnQU1nQXlBSU5nS29BeUFESUFVMkFxUURJQU1nQ1RZQ29BTWdBeUFHTmdLY0F5QURJQWMyQXBnRElBTWdCQ2tDQURjQ3JBTWdBeUFHUWFyVnF0VjZJQWdiSUFKQkFuUnFLQUlBTmdLWUFpQURRUUEyQXB3Q0lBTWdDallDb0FJZ0F5QUxOZ0tzQWlBRFFnQTNBcVFDSUFOQmtBRnFJQU5CZ0FOcUlBTkJtQUpxRU1tQmdJQUFJQU5Ca0FGcUlRWU1BUXNnQVNnQ0hDRUdJQUVvQWlBaUNVR3ExYXJWZWlBSUd5QUNRUU4wYWlJS0tBSUVJUXNnQ2lnQ0FDRUtJQU5CZ0FOcVFSQnFJQUZCRUdvcEFnQTNBd0FnQTBHQUEycEJDR29nQVVFSWFpa0NBRGNEQUNBRFFiUURhaUFFUVFocUtRSUFOd0lBSUFOQnZBTnFJQVJCRUdvb0FnQTJBZ0FnQXlBQktRSUFOd09BQXlBRElBZzJBcWdESUFNZ0JUWUNwQU1nQXlBSk5nS2dBeUFESUFZMkFwd0RJQU1nQnpZQ21BTWdBeUFFS1FJQU53S3NBeUFESUFaQnF0V3ExWG9nQ0JzZ0FrRUNkR29vQWdBMkFwZ0NJQU1nQ2pZQ25BSWdBMEVBTmdLb0FpQURJQXMyQXF3Q0lBTkNBRGNDb0FJZ0EwSFVBV29nQTBHQUEyb2dBMEdZQW1vUXlZR0FnQUFnQTBIVUFXb2hCZ3NnQmtFQk9nQkFDeUFBSUFaQnhBQVEyb0dBZ0FBYUlBTkJ3QU5xSklDQWdJQUFDNndMQVFWL0k0Q0FnSUFBUWRBQWF5SUVKSUNBZ0lBQUlBUkJFR29nQUVFTWFpSUZRY0FBRU5xQmdJQUFHaUFBS0FJSUlRWUNRQUpBSUFFdEFBUkZEUUFnQUNBQktBSUFRUUVRaG9HQWdBQWlCMEgvL3dOeERRRUxBa0FnQVVFTWFpMEFBRVVOQUNBQUlBRW9BZ2hCQVJDR2dZQ0FBQ0lIUWYvL0EzRU5BU0FCUVJScUxRQUFSUTBBSUFBZ0FTZ0NFRUVCRUlhQmdJQUFJZ2RCLy84RGNRMEJDd0pBSUFGQkhHb3RBQUJGRFFBZ0FDQUJLQUlZUVFFUWhvR0FnQUFpQjBILy93TnhEUUVMQWtBZ0FrRUJjUTBBSUFGQkpHb3RBQUJGRFFBZ0FDQUJLQUlnUVFFUWhvR0FnQUFpQjBILy93TnhEUUVMSUFBZ0FTZ0NLRUVCRUlhQmdJQUFJZ2RCLy84RGNRMEFRUUFoQndKQUFrQWdBVUVzYWlnQ0FBMEFRUUVoQnlBQlFUQnFLQUlBRFFBQ1FDQUJRVFJxSWdJb0FnQU5BQ0FCUVRocUtBSUFEUUFnQVVFOGFpZ0NBQTBBSUFBZ0FTZ0NLRUVCYWlBRFFRQVFpb0dBZ0FBaEJ3d0NDeUFDS0FJQURRQWdBVUU0YWlnQ0FBMEFJQUZCUEdvb0FnQkJBRWNoQndzZ0FDQUJLQUlvUVFGcUlBZEJBQkNLZ1lDQUFDSUhRZi8vQTNFTkFRSkFJQUVvQWl4RkRRQWdBQ0FCS0FJb1FRSnFRUUVRaG9HQWdBQWlCMEgvL3dOeERRSUNRQUpBSUFGQk1Hb29BZ0FOQUNBQlFUUnFLQUlBRFFBZ0FVRTRhaWdDQUEwQUlBRkJQR29vQWdCRkRRRUxJQUFnQVNnQ0xFRUJFS3FBZ0lBQUlnZEIvLzhEY1VVTkFRd0RDeUFBSUFFb0Fpd2dBeENxZ0lDQUFDRUhEQUVMQWtBZ0FVRXdhaWdDQUNJSFJRMEFJQVJCRUdvZ0J4Q05nWUNBQUNFQ0lBUkJFR29nQnhDUGdZQ0FBQ0VJSUFBZ0FrRitha0VBRUlhQmdJQUFJZ2RCLy84RGNRMENJQUFnQWtGL2FrRUFFSWFCZ0lBQUlnZEIvLzhEY1EwQ0lBQWdBU2dDTUVFQUVLcUFnSUFBSWdkQi8vOERjUTBDSUFoQkFXb2hCd0pBQWtBZ0FVRTBhaWdDQUEwQUlBRkJPR29vQWdBTkFDQUJRVHhxS0FJQVJRMEJDeUFBSUFkQkFSQ0dnWUNBQUNJSFFmLy9BM0ZGRFFFTUF3c2dBQ0FISUFNUWhvR0FnQUFoQnd3QkN3SkFJQUZCTkdvb0FnQWlCMFVOQUNBRVFSQnFJQWNRallHQWdBQWhBaUFFUVJCcUlBY1FqNEdBZ0FBaENDQUFJQUpCZm1wQkFCQ0dnWUNBQUNJSFFmLy9BM0VOQWlBQUlBSkJmMnBCQUJDR2dZQ0FBQ0lIUWYvL0EzRU5BaUFBSUFFb0FqUkJBQkNxZ0lDQUFDSUhRZi8vQTNFTkFpQUlRUUZxSVFjQ1FBSkFJQUZCT0dvb0FnQU5BQ0FCUVR4cUtBSUFSUTBCQ3lBQUlBZEJBUkNHZ1lDQUFDSUhRZi8vQTNGRkRRRU1Bd3NnQUNBSFFRQVFob0dBZ0FBaUIwSC8vd054RFFJZ0FDQUlRUUpxUVFJUWhvR0FnQUFoQnd3QkN3SkFJQUZCT0dvb0FnQWlCMFVOQUNBRVFSQnFJQWNRallHQWdBQWhBaUFFUVJCcUlBY1FqNEdBZ0FBaENDQUFJQUpCZm1wQkFCQ0dnWUNBQUNJSFFmLy9BM0VOQWlBQUlBSkJmMnBCQUJDR2dZQ0FBQ0lIUWYvL0EzRU5BaUFBSUFFb0FqaEJBQkNxZ0lDQUFDSUhRZi8vQTNFTkFpQUlRUUZxSVFjQ1FDQUJRVHhxS0FJQVJRMEFJQUFnQjBFQkVJYUJnSUFBSWdkQi8vOERjVVVOQVF3REN5QUFJQWNnQXhDR2dZQ0FBQ0VIREFFTElBUkJFR29nQkVFUWFpQUJRVHhxS0FJQUVJMkJnSUFBSWdkQmYyb2lBaUFIRUk2QmdJQUFJUWNnQmlBR0tBSU1RUUZxTmdJTUlBQWdBa0VCUVFJZ0IwRUJjUnNRaG9HQWdBQWlCMEgvL3dOeERRRWdCaENNZ1lDQUFDQUdJQVlvQWhSQkFXbzJBaFFnQmlBR0tBSU1RUUZxTmdJTUlBQWdBU2dDUENBREVLcUFnSUFBSVFjTElBZEIvLzhEY1EwQVFRQWhCeUFBUWN3QWFpQUJLQUlvUVFGcUVNcUJnSUFBUVFGeFJRMEFJQVFnQUNnQ0NDSUFOZ0lJSUFSQkNHcEIyNTdBZ0FCQkJCQ0VnWUNBQUNJSFFmLy9BM0VOQUNBRUlBQTJBZ3dnQkNBRklBRW9BaWhCQVdvUXY0R0FnQUFnQkVFTWFpQUVLQUlBSUFRb0FnUVFoSUdBZ0FBaUIwSC8vd054RFFBZ0JFRUlha0hWbnNDQUFFRUNFSVNCZ0lBQUlRY0xJQVJCMEFCcUpJQ0FnSUFBSUFjTDFBVUNDWDhCZmlPQWdJQ0FBRUhBQVdzaUF5U0FnSUNBQUNBQktBSVlRYXJWcXRWNklBRW9BaWdiSVFRZ0FTZ0NDRUdxMWFyVmVpQUJLQUlVR3lJRklBSW9BZ0JCQVdvaUJtb3RBQUFoQnlBQ1FReHFLQUlBSVFoQkFDRUpJQUlvQWdnaUNpRUxBa0FEUUFKQUlBZ2dDVWNOQUNBSUlRa01BZ3NnQkNBTEtBSUFhaTBBQUVHbUFVY05BU0FMUVFScUlRc2dDVUVCYWlFSkRBQUxDeUFJSUFscklRc2dDaUFKUVFKMGFpRUVBa0FDUUNBSURRQkNBQ0VNSUFNZ0FVSEFBQkRhZ1lDQUFDQUNLQUlFRUkrQmdJQUFJZ0VnQldvaUNFRUJhaTBBQUVIL0FIRkJORWNOQVNBSVFRSnFMUUFBUWY4QWNVRTBSdzBCSUFoQkEyb3RBQUJCL3dCeFFUUkhEUUVnQlNBQlFRUnFJZ2hxTFFBQVFmOEFjVUVEUncwQklBaXRRb0NBZ0lBUWhDRU1EQUVMQWtBZ0NDQUpSZzBBSUF0QkFuUWdCR3BCZkdvb0FnQWhDQ0FEUWNBQWFpQUJRY0FBRU5xQmdJQUFHa0lBSVF3Z0JTQURRY0FBYWlBSUVJK0JnSUFBSWdoQkFtb2dDRUVCYWlJSUlBVWdDR290QUFCQi93QnhRVGRHR3lJSWFpMEFBRUgvQUhGQk5FY05BU0FGSUFoQkFXb2lDR290QUFCQi93QnhRUU5IRFFFZ0NLMUNnSUNBZ0JDRUlRd01BUXNnQ0VFQ2RDQUtha0Y4YWlnQ0FDRUlJQU5CZ0FGcUlBRkJ3QUFRMm9HQWdBQWFRZ0FoRENBRklBTkJnQUZxSUFnUWo0R0FnQUFpQ0VFQ2FpQUlRUUZxSWdnZ0JTQUlhaTBBQUVIL0FIRkJOMFliSWdGcUlnZ3RBQUJCL3dCeFFUUkhEUUFnQ0VFQmFpMEFBRUgvQUhGQk5FY05BQ0FGSUFGQkFtb2lDR290QUFCQi93QnhRUU5IRFFBZ0NLMUNnSUNBZ0JDRUlRd0xJQUJCQURzQUdTQUFJQVkyQWhRZ0FDQUxOZ0l3SUFBZ0JEWUNMQ0FBSUFrMkFpZ2dBQ0FLTmdJa0lBQWdERGNDSENBQUlBSXBBZ0EzQWdBZ0FFRWJha0VBT2dBQUlBQkJFR29nQWtFUWFpZ0NBRFlDQUNBQVFRaHFJQUpCQ0dvcEFnQTNBZ0FnQUNBSFFmOEFjVUg0QUVZNkFCZ2dBMEhBQVdva2dJQ0FnQUFMU1FFQmZ3SkFJQUFvQWhBaUFpQUJSZzBBQWtBQ1FDQUNJQUZORFFBZ0FDQUNJQUZ1SUFBb0FneHNOZ0lNREFFTElBQWdBQ2dDRENBQklBSnViallDREFzZ0FDQUJOZ0lRQ3d2b0FnRUZmeUFBUVNCcUlRTWdBRUVVYWlFRVFhclZxdFY2SVFWQnF0V3ExWG9oQmdKQUlBQkJOR29vQWdCRkRRQWdBRUVzYWlnQ0FDRUdJQUJCS0dvb0FnQWhCUXNnQXlnQ0FDRUhJQVFvQWdBaEJBSkFJQUFnQlNBQlFRSjBhaWdDQUNJRFFYOXFRUUFRaG9HQWdBQWlCVUgvL3dOeERRQWdBQ0FEUVFCQkFSQ0tnWUNBQUNJRlFmLy9BM0VOQUNBQUlBTkJBV3BCQVJDR2dZQ0FBQ0lGUWYvL0EzRU5BQ0FBSUFOQkFtcEJBUkNHZ1lDQUFDSUZRZi8vQTNFTkFDQUFJQU5CQTJwQkFCQ0dnWUNBQUNJRlFmLy9BM0VOQUFKQUFrQWdCRUdxMWFyVmVpQUhHeUFEUVFScUlnVnFMUUFBUWY4QWNVRXpSdzBBSUFBZ0JVRUJFSWFCZ0lBQUlnVkIvLzhEY1EwQ0lBQWdCaUFCUVFOMGFpSUJLQUlBUVFBUXFvQ0FnQUFpQlVILy93TnhEUUlnQVNnQ0JDRUZEQUVMSUFBZ0JVRUFRUUVRaW9HQWdBQWlCVUgvL3dOeERRRWdBMEVGYWlFRkN5QUFJQVVnQWhDR2dZQ0FBQ0VGQ3lBRkMvWUJBUU4vQWtBQ1FDQUFRVFJxS0FJQURRQkJxdFdxMVhvaEEwR3ExYXJWZWlFRURBRUxJQUJCTEdvb0FnQWhCQ0FBUVNocUtBSUFJUU1MQWtBZ0FDQURJQUZCQW5ScUtBSUFJZ1ZCZjJwQkFCQ0dnWUNBQUNJRFFmLy9BM0VOQUNBQUlBVkJBRUVCRUlxQmdJQUFJZ05CLy84RGNRMEFJQUFnQlVFQmFrRUJFSWFCZ0lBQUlnTkIvLzhEY1EwQUlBQWdCVUVDYWtFQkVJYUJnSUFBSWdOQi8vOERjUTBBSUFBZ0JVRURha0VBRUlhQmdJQUFJZ05CLy84RGNRMEFJQUFnQkNBQlFRTjBhaWdDQUVFQUVLcUFnSUFBSWdOQi8vOERjUTBBSUFBZ0JDQUJRUU4wYWlnQ0JDQUNFSWFCZ0lBQUlRTUxJQU1MbXdJREJIOEJmZ0YvSTRDQWdJQUFRWUFCYXlJREpJQ0FnSUFBSUFFb0FoUWhCQ0FCS0FJSUlRVWdBeUFCUWNBQUVOcUJnSUFBSWdNZ0FpZ0NCQkNQZ1lDQUFDSUdJQVZCcXRXcTFYb2dCQnNpQldwQkFtb3RBQUFoQkVJQUlRY0NRQUpBSUFJb0Fnd05BRUVBSVFFTUFRc2dBMEhBQUdvZ0FVSEFBQkRhZ1lDQUFCb2dBMEhBQUdvZ0FpZ0NDQkNQZ1lDQUFDSUlRUUZxSVFFZ0NDQUZha0VDYWkwQUFFSC9BSEZCQ1VjTkFDQUlRUU5xclVLQWdJQ0FFSVFoQndzZ0FFRUFPd0FGSUFBZ0FUWUNFQ0FBSUFjM0FnZ2dBQ0FHUVFOcU5nSUFJQUJCQjJwQkFEb0FBQ0FBSUFJcEFnQTNBaFFnQUNBRVFmOEFjVUVKUmpvQUJDQUFRUnhxSUFKQkNHb3BBZ0EzQWdBZ0EwR0FBV29rZ0lDQWdBQUxsZ1VCQlg4amdJQ0FnQUJCd0FCcklnTWtnSUNBZ0FBZ0F5QUFRUXhxUWNBQUVOcUJnSUFBSWdOQkZHb29BZ0FoQkNBREtBSUlJUVVDUUFKQUlBRkJJR290QUFCRkRRQWdBQ0FCS0FJY0lnWkJBRUVCRUlxQmdJQUFJZ2RCLy84RGNRMEJJQUFnQmtFQmFrRUJFSWFCZ0lBQUlnZEIvLzhEY1EwQkN3SkFJQUZCR0dvdEFBQkZEUUFnQUNBQktBSVVRUUVRaG9HQWdBQWlCMEgvL3dOeERRRUxJQUFnQVNnQ0FFRUJFSWFCZ0lBQUlnZEIvLzhEY1EwQUlBQWdBU2dDQUVFQmFrRUFFSWFCZ0lBQUlnZEIvLzhEY1EwQUlBQWdBU2dDQkVFQUVLcUFnSUFBSWdkQi8vOERjUTBBSUFNZ0FTZ0NCQkNQZ1lDQUFFRUJhaUVIQWtBZ0FVRW9haTBBQUVVTkFDQUJLQUlrSVFZZ0FDQUhRUUVRaG9HQWdBQWlCMEgvL3dOeERRRWdBQ0FHUVg5cVFRQVFob0dBZ0FBaUIwSC8vd054RFFFQ1FDQUZRYXJWcXRWNklBUWJJZ1FnQm1vdEFBQkIvd0J4UVN4SERRQWdBQ0FHUVFBUWhvR0FnQUFpQjBILy93TnhEUUlnQmtFQmFpRUdDeUFBSUFaQkFFRUFFSXFCZ0lBQUlnZEIvLzhEY1EwQklBUWdCa0VCYWlJSGFpMEFBRUgvQUhGQk4wY05BQ0FBSUFkQkFSQ0dnWUNBQUNJSFFmLy9BM0VOQVNBQUlBWkJBbXBCQUVFQUVJcUJnSUFBSWdkQi8vOERjUTBCSUFaQkEyb2hCd3NDUUNBQktBSUlSUTBBSUFBZ0IwRUJFSWFCZ0lBQUlnZEIvLzhEY1EwQklBQWdBeUFCS0FJSUVJMkJnSUFBSWdSQmZtcEJBUkNHZ1lDQUFDSUhRZi8vQTNFTkFTQUFJQVJCZjJwQkFCQ0dnWUNBQUNJSFFmLy9BM0VOQVNBQUlBRW9BZ2hCQUJDcWdJQ0FBQ0lIUWYvL0EzRU5BU0FESUFFb0FnZ1FqNEdBZ0FCQkFXb2hCd3NnQUNBSElBRW9BZ3dnQVNnQ05DQUJRU3hxSUFFb0FoQWdBaENiZ1lDQUFDRUhDeUFEUWNBQWFpU0FnSUNBQUNBSEM1WURBd0ovQVg0RmZ5T0FnSUNBQUVHQUFXc2lBeVNBZ0lDQUFFRUFJUVJDQUNFRkFrQWdBU2dDQ0VHcTFhclZlaUFCS0FJVUd5SUdRUUFnQWlnQ0FDSUhRWDVxSWdnZ0NDQUhTeHRCQUNBSFFYOXFJZ2dnQ0NBSFN4c2lDQ0FHSUFocUxRQUFJZ2xCL3dCeFFlSUFSaHNpQjJvdEFBQkIvd0J4UVRSSERRQWdCa0VBSUFkQmYyb2lDaUFLSUFkTEcyb3RBQUJCL3dCeFFRSkhEUUFnQjBGL2FxMUNnSUNBZ0JDRUlRVUxJQU1nQVVIQUFCRGFnWUNBQUNJSElBSkJDR29pQXlnQ0FFRUNkQ0FDS0FJRWFrRjhhaWdDQUJDUGdZQ0FBQ0lLSUFacVFRRnFMUUFBSVFZQ1FDQUNLQUlRUlEwQUlBZEJ3QUJxSUFGQndBQVEyb0dBZ0FBYUlBZEJ3QUJxSUFJb0Fnd1FqNEdBZ0FCQkFXb2hCQXNnQUVFQU93QVpJQUFnQ0RZQ0ZDQUFJQVEyQWlnZ0FDQUZOd0ljSUFBZ0Fpa0NBRGNDQUNBQVFSdHFRUUE2QUFBZ0FFRVFhaUFDUVJCcUtBSUFOZ0lBSUFCQkNHb2dBeWtDQURjQ0FDQUFJQWxCL3dCeFFlSUFSam9BR0NBQUlBb2dCa0gvQUhGQk4wWnFRUU5xTmdJa0lBZEJnQUZxSklDQWdJQUFDLzRGQVFkL0k0Q0FnSUFBUVlBQmF5SUZKSUNBZ0lBQUlBVWdBRUVNYWlJR1FjQUFFTnFCZ0lBQUlnZEJ3QUJxSUFaQndBQVEyb0dBZ0FBYUlBQW9BZ2doQlFKQUFrQUNRQ0FERFFBZ0JTQUZLQUljUVFGcU5nSWNJQVVnQlNnQ0RFRUJhallDRENBQUlBRkJBQkNHZ1lDQUFDSUdRZi8vQTNFTkFpQUZFSXlCZ0lBQUlBRkJBV29oQ0F3QkN3SkFJQWNvQWtoQnF0V3ExWG9nQjBIVUFHb29BZ0FiSWdrZ0IwSEFBR29nQTBFQ2RDQUNha0Y4YWlnQ0FCQ1BnWUNBQUNJS1FRRnFJZ2hxTFFBQVFmOEFjVUUzUmcwQUlBQWdBVUVBRUlhQmdJQUFJZ1pCLy84RGNRMENRUUFoQVFOQUlBTWdBVVlOQWdKQUFrQWdDU0FIUWNBQWFpQUNLQUlBSWdzUWpZR0FnQUFpQm1vdEFBQkIvd0J4UVFSR0RRQWdCeUFHUVg5cUVLaUJnSUFBUVFGeFJRMEJDeUFGSUFVb0FoUkJBV28yQWhRZ0JTQUZLQUlNUVFGcU5nSU1DeUFBSUF0QkFCQ3FnSUNBQUNJR1FmLy9BM0VOQXdKQUlBRkJBV29pQVNBRFR3MEFJQUFnQjBIQUFHb2dDeENQZ1lDQUFFRUJhaUFKSUFkQndBQnFJQUpCQkdvb0FnQVFqWUdBZ0FCcUxRQUFRZjhBY1VFRVJ4Q0dnWUNBQUNJR1FmLy9BM0VOQkFzZ0FrRUVhaUVDREFBTEN5QUZJQVVvQWh4QkFXbzJBaHdnQlNBRktBSU1RUUZxTmdJTUlBQWdBVUVDRUlhQmdJQUFJZ1pCLy84RGNRMEJRUUFoQVFOQUFrQUNRQUpBSUFNZ0FVWU5BQ0FDS0FJQUlRc0NRQUpBSUFGQkFXb2lBU0FEVHcwQUlBQWdDMEVBRUtxQWdJQUFJZ1pCLy84RGNRMEhJQWtnQjBIQUFHb2dDeENOZ1lDQUFHb3RBQUJCL3dCeFFRUkdJZ2dOQVF3REN5QUFJQXRCQXhDcWdJQ0FBQ0lHUWYvL0EzRU5CZ3dEQ3lBRkVJeUJnSUFBREFFTElBVVFqSUdBZ0FBZ0NrRUNhaUVJREFNTElBQWdCMEhBQUdvZ0N4Q1BnWUNBQUVFQmFrRUNFSWFCZ0lBQUlnWkIvLzhEY1EwREFrQWdDRVVOQUNBRklBVW9BZ3hCQVdvMkFnd0xJQUFnQWtFRWFpZ0NBQkN1Z0lDQUFDSUdRZi8vQTNFTkF3c2dBa0VFYWlFQ0RBQUxDeUFBSUFnZ0JCQ0dnWUNBQUNFR0N5QUhRWUFCYWlTQWdJQ0FBQ0FHQzhFRkFRZC9JNENBZ0lBQVFZQUJheUlISklDQWdJQUFJQWNnQUVFTWFpSUlRY0FBRU5xQmdJQUFJUWNnQUNnQ0NDRUpBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQWNvQWhoQnF0V3ExWG9nQjBFb2FpZ0NBQnNpQ2lBQ2FpMEFBRUg4QVhFaUMwR2dBVVlOQUNBSFFjQUFhaUFJUWNBQUVOcUJnSUFBR2lBSFFjQUFhaUFCSUFjZ0FoQ05nWUNBQUJDT2dZQ0FBRUVCY1EwQ0lBa29BZ3doQ0F3QkN5QUpMUUFnRFFFZ0NTZ0NHQ0VNQWtBQ1FDQUpLQUlNSWdnTkFFRUFJUTBNQVFzZ0NDQUpLQUljYXlBSktBSVFiQ0VOQ3lBTUlBMU5EUUVMSUFrZ0NFRUJhallDRENBSklBa29BaHhCQVdvMkFod2dBQ0FCUVFJUWhvR0FnQUFpQVVILy93TnhEUVlnQ1JDTWdZQ0FBQ0FGUlEwQklBdEJvQUZHRFFSQkFTRUlJQWtnQ1NnQ0RFRUJhallDRENBQUlBSkJBaENxZ0lDQUFDSUJRZi8vQTNFTkJpQUpFSXlCZ0lBQURBVUxJQUFnQVVFQkVJYUJnSUFBSWdGQi8vOERjVVVOQVF3RkN5QUxRYUFCUmcwQklBQWdBaUFHRU5XQmdJQUFJUUVNQkFzZ0JRMEJDeUFBSUFJZ0JoQ3FnSUNBQUNFQkRBSUxJQUFnQWtFQkVLcUFnSUFBSWdGQi8vOERjUTBCUVFBaENBc0NRQ0FFTFFBRVJRMEFJQVFvQWdBaEFpQUFJQU5CQVJDR2dZQ0FBQ0lCUWYvL0EzRU5BU0FBSUFKQmYycEJBQkNHZ1lDQUFDSUJRZi8vQTNFTkFTQUFJQUpCQUVFQUVJcUJnSUFBSWdGQi8vOERjUTBCSUFKQkFXb2hBd3NDUUNBSVJRMEFJQW9nQldvdEFBQWlBa0g4QVhGQm9BRkdEUUFDUUNBQ1FabC9haUlDUVE1TERRQkJBU0FDZEVHRDN3RnhEUUVMSUFrZ0NTZ0NIRUVCYWpZQ0hDQUpJQWtvQWd4QkFXbzJBZ3dnQUNBRFFRSVFob0dBZ0FBaUFVSC8vd054RFFFZ0NSQ01nWUNBQUNBQUlBVWdCaERWZ1lDQUFDRUJEQUVMSUFBZ0EwRUJFSWFCZ0lBQUlnRkIvLzhEY1EwQUlBQWdCU0FHRUtxQWdJQUFJUUVMSUFkQmdBRnFKSUNBZ0lBQUlBRUx3d01EQW44Q2ZnVi9JNENBZ0lBQVFZQUJheUlESklDQWdJQUFRUUFoQkVJQUlRVkNBQ0VHQWtBZ0FTZ0NDRUdxMWFyVmVpQUJLQUlVR3lJSFFRQWdBaWdDQUNJSVFYNXFJZ2tnQ1NBSVN4dEJBQ0FJUVg5cUlna2dDU0FJU3hzaUNTQUhJQWxxTFFBQUlncEIvd0J4UWVJQVJoc2lDR290QUFCQi93QnhRVFJIRFFCQ0FDRUdJQWRCQUNBSVFYOXFJZ3NnQ3lBSVN4dHFMUUFBUWY4QWNVRUNSdzBBSUFoQmYycXRRb0NBZ0lBUWhDRUdDeUFESUFGQndBQVEyb0dBZ0FBaUNDQUNLQUlFRUkrQmdJQUFJZ01nQjJwQkFtb3RBQUFoQ3dKQUlBSW9BaEJGRFFBZ0NFSEFBR29nQVVIQUFCRGFnWUNBQUJvZ0NFSEFBR29nQWlnQ0RCQ1BnWUNBQUNJQlFRRnFJUVFnQVNBSGFrRUNhaTBBQUVIL0FIRkJDVWNOQUNBQlFRTnFyVUtBZ0lDQUVJUWhCUXNnQUVFQU93QVpJQUFnQ1RZQ0ZDQUFJQVEyQWpRZ0FDQUZOd0lzSUFBZ0JqY0NIQ0FBSUFJcEFnQTNBZ0FnQUVFYmFrRUFPZ0FBSUFCQkVHb2dBa0VRYWlnQ0FEWUNBQ0FBUVFocUlBSkJDR29wQWdBM0FnQWdBQ0FLUWY4QWNVSGlBRVk2QUJnZ0FDQURRUU5xclVLQWdJQ0FFSVJDQUNBTFFmOEFjVUVKUmhzM0FpUWdDRUdBQVdva2dJQ0FnQUFMc0FFQ0FuOEJmaUFDS0FJSUlnUWdBU2dDQ0VHcTFhclZlaUFCS0FJVUcycEJBV290QUFBaEJVSUFJUVlDUUFKQUlBRW9BaGhCcXRXcTFYb2dBU2dDS0JzZ0Eyb3RBQUJCbG45cURnTUFBUUFCQ3lBQklBTVFqWUdBZ0FDdFFvQ0FnSUFRaENFR0N5QUFRUUE3QUEwZ0FDQUdOd0lBSUFBZ0JFRUNhallDQ0NBQVFROXFRUUE2QUFBZ0FDQUNLUUlBTndJUUlBQWdCVUgvQUhGQkNVWTZBQXdnQUVFWWFpQUNRUWhxS1FJQU53SUFDMjhCQW44Q1FDQUFJQUVvQWdCQkF4Q3FnSUNBQUNJRFFmLy9BM0VOQUNBQlFRUnFJUUVEUUFKQUlBSkJmMm9pQWcwQVFRQVBDeUFBSUFFb0FnQWlCQkN1Z0lDQUFDSURRZi8vQTNFTkFTQUJRUVJxSVFFZ0FDQUVRUU1RcW9DQWdBQWlBMEgvL3dOeFJRMEFDd3NnQXd2ZER3RVJmeU9BZ0lDQUFFSGdCV3NpQkNTQWdJQ0FBQ0FCUVN4cUlRVWdBU2dDSkNFR1FhQ013SUFBSVFjQ1FBSkFBa0FDUUFKQUFrQWdBU2dDR0NJSVFhclZxdFY2SUFFb0FpZ2lDUnNnQTJvdEFBQkJoWDlxRGdVREFRSUFCQVVMSUFFb0Fod2hCeUFCS0FJc0lRVWdBU2dDSUNJQ1FhclZxdFY2SUFrYklBTkJBM1JxSWdvb0FnUWhDeUFLS0FJQUlRb2dCRUc0QkdwQkVHb2dBVUVRYWlJTUtRSUFOd01BSUFSQnVBUnFRUWhxSUFGQkNHb2lEU2tDQURjREFDQUVRYmdFYWtFNGFpQUJRVGhxSWc0cEFnQTNBd0FnQkNBQktRSUFOd080QkNBRUlBVTJBdVFFSUFRZ0NUWUM0QVFnQkNBR05nTGNCQ0FFSUFJMkF0Z0VJQVFnQnpZQzFBUWdCQ0FJTmdMUUJDQUVJQUVwQWpBM0ErZ0VJQVJCb0FScUlBUkJ1QVJxSUFvUXlJR0FnQUFnQkVHZ0JXcEJPR29nRGlrQ0FEY0RBQ0FFUWFBRmFrRUlhaUFOS1FJQU53TUFJQVJCb0FWcVFSQnFJQXdwQWdBM0F3QWdCQ0FGTmdMTUJTQUVJQWsyQXNnRklBUWdCallDeEFVZ0JDQUNOZ0xBQlNBRUlBYzJBcndGSUFRZ0NEWUN1QVVnQkNBQktRSXdOd1BRQlNBRUlBRXBBZ0EzQTZBRklBZEJxdFdxMVhvZ0NSc2dBMEVDZEdvb0FnQWhBU0FFUWZ3RWFrRVFhaUFFS0FLa0JDQUVLQUtnQkNJSmF6WUNBQ0FFSUFNMkF2d0VJQVFnQVRZQ2dBVWdCQ0FMTmdLRUJTQUVJQVVnQ1VFQ2RHbzJBb2dGSUFRZ0JDa0NxQVEzQXBBRklBUWdCQ2tDc0FRM0FwZ0ZJQVFnQkVHZ0JXb2dCRUg4QkdvUXo0R0FnQUFnQkVFQk9nQklJQVFoQnd3RUN5QUJLQUljSVFVZ0FTZ0NMQ0VISUFFb0FpQWlBa0dxMWFyVmVpQUpHeUFEUVFOMGFpSUtLQUlFSVFzZ0NpZ0NBQ0VLSUFSQm9BVnFRUWhxSUFGQkNHb3BBZ0EzQXdBZ0JFR2dCV3BCRUdvZ0FVRVFhaWtDQURjREFDQUVRYUFGYWtFNGFpQUJRVGhxS1FJQU53TUFJQVFnQVNrQ0FEY0RvQVVnQkNBSE5nTE1CU0FFSUFrMkFzZ0ZJQVFnQmpZQ3hBVWdCQ0FDTmdMQUJTQUVJQVUyQXJ3RklBUWdDRFlDdUFVZ0JDQUJLUUl3TndQUUJTQUZRYXJWcXRWNklBa2JJQU5CQW5ScUtBSUFJUUVnQkVIVUJHcENBRGNDQUNBRVFiZ0Vha0VRYWlBSElBcEJBblJxSWdsQkJHb29BZ0FnQ1NnQ0FDSUphellDQUNBRUlBRTJBcndFSUFSQ0FEY0N6QVFnQkNBTE5nTEFCQ0FFSUFNMkFyZ0VJQVFnQnlBSlFRSjBhallDeEFRZ0JFSE1BR29nQkVHZ0JXb2dCRUc0QkdvUXo0R0FnQUFnQkVFQk9nQ1VBU0FFUWN3QWFpRUhEQU1MSUFSQnNBRnFRUkJxSWdzZ0FVRVFhaUlNS1FJQU53TUFJQVJCc0FGcVFRaHFJZzBnQVVFSWFpSU9LUUlBTndNQUlBUkJtQUZxUVFocUlnOGdCVUVJYWlJUUtRSUFOd01BSUFSQm1BRnFRUkJxSWhFZ0JVRVFhaUlTS0FJQU5nSUFJQVFnQVNrQ0FEY0RzQUVnQkNBRktRSUFOd09ZQVNBQktBSWNJUWNnQVNnQ0lDSUtRYXJWcXRWNklBa2JJQU5CQTNScUloTW9BZ1FoRkNBVEtBSUFJUk1nQkVHNEJHcEJFR29nRENrQ0FEY0RBQ0FFUWJnRWFrRUlhaUFPS1FJQU53TUFJQVJCdUFScVFUUnFJQkFwQWdBM0FnQWdCRUc0QkdwQlBHb2dFaWdDQURZQ0FDQUVJQUVwQWdBM0E3Z0VJQVFnQ1RZQzRBUWdCQ0FHTmdMY0JDQUVJQW8yQXRnRUlBUWdCellDMUFRZ0JDQUlOZ0xRQkNBRUlBVXBBZ0EzQXVRRUlBUkJvQVJxSUFSQnVBUnFJQk1ReDRHQWdBQWdCRUdnQldwQlBHb2dFU2dDQURZQ0FDQUVRYUFGYWtFMGFpQVBLUU1BTndJQUlBSWdCQ2dDb0FRaUFUWUNBQ0FFUWFBRmFrRUlhaUFOS1FNQU53TUFJQVJCb0FWcVFSQnFJQXNwQXdBM0F3QWdCQ0FKTmdMSUJTQUVJQVkyQXNRRklBUWdDallDd0FVZ0JDQUhOZ0s4QlNBRUlBZzJBcmdGSUFRZ0JDa0RtQUUzQXN3RklBUWdCQ2tEc0FFM0E2QUZJQWRCcXRXcTFYb2dDUnNnQTBFQ2RHb29BZ0FoQ1NBRVFmd0Vha0VRYWlBQlFRQkhOZ0lBSUFRZ0F6WUMvQVFnQkNBSk5nS0FCU0FFSUJRMkFvUUZJQVFnQWpZQ2lBVWdCQ0FFS1FLa0JEY0NrQVVnQkNBRUtRS3NCRGNDbUFVZ0JFSE1BV29nQkVHZ0JXb2dCRUg4QkdvUXo0R0FnQUFnQkVFQk9nQ1VBaUFFUWN3QmFpRUhEQUlMSUFSQnNBSnFRUkJxSWdvZ0FVRVFhaWtDQURjREFDQUVRYkFDYWtFSWFpSUxJQUZCQ0dvcEFnQTNBd0FnQkVHWUFtcEJDR29pRENBRlFRaHFLUUlBTndNQUlBUkJtQUpxUVJCcUlnMGdCVUVRYWlnQ0FEWUNBQ0FFSUFFcEFnQTNBN0FDSUFRZ0JTa0NBRGNEbUFJZ0FTZ0NIQ0VISUFFb0FpQWlBVUdxMWFyVmVpQUpHeUFEUVFOMGFpSUZLQUlFSVE0Z0FpQUZLQUlBSWdVMkFnQWdCRUdnQldwQkNHb2dDeWtEQURjREFDQUVRYUFGYWtFUWFpQUtLUU1BTndNQUlBUWdDVFlDeUFVZ0JDQUdOZ0xFQlNBRUlBRTJBc0FGSUFRZ0J6WUN2QVVnQkNBSU5nSzRCU0FFSUFRcEE3QUNOd09nQlNBRVFkUUZhaUFNS1FNQU53SUFJQVJCM0FWcUlBMG9BZ0EyQWdBZ0JDQUVLUU9ZQWpjQ3pBVWdCMEdxMWFyVmVpQUpHeUFEUVFKMGFpZ0NBQ0VCSUFSQnVBUnFRUkJxSUFWQkFFYzJBZ0FnQkVIVUJHcENBRGNDQUNBRUlBRTJBcndFSUFSQ0FEY0N6QVFnQkNBQ05nTEVCQ0FFSUE0MkFzQUVJQVFnQXpZQ3VBUWdCRUhJQW1vZ0JFR2dCV29nQkVHNEJHb1F6NEdBZ0FBZ0JFRUJPZ0NRQXlBRVFjZ0NhaUVIREFFTElBUkJsQU5xSUFGQndBQVEyb0dBZ0FBYUlBUkIxQU5xSUFSQmxBTnFJQUlnQVNnQ0lFR3ExYXJWZWlBSkd5QURRUU4wYWlnQ0FCQ2ZnWUNBQUNBRVFkUURhaUVIQ3lBQUlBZEJ6QUFRMm9HQWdBQWFJQVJCNEFWcUpJQ0FnSUFBQy9VQ0FRVi9JNENBZ0lBQVFjQUFheUlESklDQWdJQUFBa0FDUUNBQktBSVVEUUJCcXRXcTFYb2hCRUdxMWFyVmVpRUZEQUVMSUFFb0FnZ2hCU0FCS0FJTUlRUUxJQU1nQlNBQ2FpMEFBRUgvQUhFaUJqb0FDeUFESUFZUS9ZQ0FnQUFDUUFKQUlBTW9BZ0FpQlVVTkFDQURLQUlFSVFJTUFRc2dBMEVnYWtJQU53SUFJQU5DQURjQ0dDQURJQUVvQWdRMkFoQWdBeUFCS0FJQUlnYzJBZ3dnQXlBRUlBSkJBblJxS0FJQUlnVTJBaFFDUUFKQUFrQWdCZzBBSUFVaEFnTkFJQUpGRFFJZ0J5QUNhaTBBQUVFS1JnMENJQUpCZjJvaEFnd0FDd3NnQTBFb2FpQURRUXhxRUptQWdJQUFEQUVMSUFNZ0FqWUNGQU5BSUFOQk5Hb2dBMEVNYWhDWmdJQ0FBQ0FES0FJMElBVkhEUUFnQXkwQVBFSC9BSEVOQUFzZ0EwRW9ha0VJYWlBRFFUUnFRUWhxS0FJQU5nSUFJQU1nQXlrQ05EY0RLQXNnQXlnQ0xDQURLQUlvSWdWcklRSWdBU2dDQUNBRmFpRUZDeUFBSUFVMkFnQWdBQ0FDTmdJRUlBTkJ3QUJxSklDQWdJQUFDNnNWQWc1L0FYNGpnSUNBZ0FCQm9BSnJJZ1VrZ0lDQWdBQWdCVUVZYWlBQVFReHFJZ1pCd0FBUTJvR0FnQUFhSUFWQjJBQnFJQVpCd0FBUTJvR0FnQUFhSUFWQmdBRnFLQUlBSVFjZ0JVSDBBR29vQWdBaENDQUZRZXdBYWlnQ0FDRUpJQVVvQW1BaENpQUFLQUlJSVFzQ1FDQUFJQUZCQUJDR2dZQ0FBQ0lHUWYvL0EzRU5BQUpBSUFNTkFDQUFJQUZCQVdwQkFCQ0dnWUNBQUNJR1FmLy9BM0VOQVNBQUlBRkJBbW9nQkJDR2dZQ0FBQ0VHREFFTEFrQWdBRUdrQVdvb0FnQWlERVVOQUNBQVFhZ0JhaWdDQUNFTklBVkJFR29nQlVIWUFHb2dBUkNnZ1lDQUFDQUZLQUlRSUFVb0FoUkI0SjdBZ0FCQkJ4Q0tnSUNBQUVFQmNVVU5BQ0FGUVFocUlBVkIyQUJxSUFoQnF0V3ExWG9nQnhzZ0FpZ0NBRUVDZEdvb0FnQWlEaENnZ1lDQUFDQUZLQUlJSVFnZ0JTZ0NEQ0VQSUFWQkFEWUMvQUVnQlVLcTFhclZDamNDOUFFZ0JTQUFLUUlBTndLQUFpQVBRUUpKR2lBRlFRRTJBdFFCUVFFaEJ3SkFBa0FDUUFKQUFrQUNRQUpBQTBBQ1FBSkFJQWdnQjJvaUVDMEFBQ0lHUWR3QVJnMEFJQVpCQ2tZTkF5QUdRU0pHRFFjZ0JTQUZRZlFCYWpZQ2lBSWdCVUdJQW1vZ0JoQ3NnWUNBQUNJR1FmLy9BM0VOQ0NBRklBZEJBV28yQXRRQkRBRUxJQVZCa0FKcUlBZ2dEeUFGUWRRQmFoRERnWUNBQUNBRkxRQ1lBZzBFSUFVdkFaQUNJQVV0QUpJQ1FSQjBjaUVHQWtBZ0VFRUJhaTBBQUVIMUFFY05BQ0FGUWR3QmFpQUdJQVZCMkFGcVFRUVFob0NBZ0FBZ0JTOEIzQUVOQkNBRklBVkI5QUZxTmdMa0FTQUZRZVFCYWlBRlFkZ0JhaUFGTFFEZUFSQ0RnWUNBQUNJR1FmLy9BM0ZGRFFFTUNBc2dCU0FGUWZRQmFqWUM2QUVnQlVIb0FXb2dCaENzZ1lDQUFDSUdRZi8vQTNFTkJ3c2dCU2dDMUFFaEJ3d0FDd3NnQlVFQk9nRHdBVUVBRFFNTUFnc2dCVUVCT2dEZ0FVRUJEUUVNQWdzZ0JVRUJPZ0RzQVVFQURRRUxJQVZCOUFGcUVJZUFnSUFBSUFWQm9BRnFRUUFvQXN5UHdJQUFOZ0lBSUFWQkFDa0N4SS9BZ0FBM0E1Z0JEQU1MSUFWQm1BRnFJQVZCOUFGcUVKYUFnSUFBSUFWQjlBRnFFSWVBZ0lBQUlBVXZBYUFCSVFZTUFRc2dCVUgwQVdvUWg0Q0FnQUFnQlNBR093R2dBUXNnQmtILy93TnhJZ2RCSlVZTkFDQUhRUkpHRFFFZ0JVRzBBV29nQlNnQ25BRWlFVFlDQUNBRklBVW9BcGdCSWhJMkFyQUJJQVVnRFRZQ3JBRWdCU0FNTmdLb0FTQUZJQUFwQWdBaUV6Y0NnQUlnQlVFQU5nTDhBU0FGUXFyVnF0VUtOd0wwQVVFQUlRcEJBQ0VQUVFBaERBTkFBa0FDUUFKQUFrQUNRQUpBSUE5QkFrWU5BQ0FGUWFnQmFpQVBRUU4wYWlJR0tBSUFJUU1nQmlnQ0JDSUpSUTBESUFNdEFBQkJMMFlOQVF3REN3SkFBa0FnQlNnQytBRWlBa1VOQUNBTURRRWdCVUc0QVdvZ0JVSDBBV29RbG9DQWdBQWdCVUgwQVdvUWg0Q0FnQUFNQlFzZ0NrRUJjUTBDQWtBZ0RBMEFJQVVnRXpjRGtBSWdCVUc0QVdvZ0JVR1FBbXBCeEozQWdBQVF6SUdBZ0FBZ0JVSDBBV29RaDRDQWdBQU1CUXNnQlNBVE53T0lBaUFGUVpBQ2FpQUZRWWdDYWlBTVFRTnNRWDlxRUxhQWdJQUFBa0FnQlM4Qm1BSWlCa1VOQUNBRlFmUUJhaENIZ0lDQUFDQUZJQVk3QWNBQkRBVUxJQXhCZjJvaEFpQUZLQUtVQWlFRElBVW9BcEFDSWdjaEJnSkFBMEFnQWtVTkFTQUdRUUpxUVFBdEFOS1B3SUFBT2dBQUlBWkJBQzhBMEkvQWdBQTdBQUFnQWtGL2FpRUNJQVpCQTJvaEJnd0FDd3NnQmtHdTNBQTdBQUFnQlVIMEFXb1FoNENBZ0FBZ0JVRUFPd0hBQVNBRklBTTJBcndCSUFVZ0J6WUN1QUVNQkFzZ0JTQVROd09JQWlBRlFaQUNhaUFGUVlnQ2FpQUNJQXhCQTJ4cUVMYUFnSUFBQWtBZ0JTOEJtQUlpQmtVTkFDQUZRZlFCYWhDSGdJQ0FBQ0FGSUFZN0FjQUJEQVFMSUFVb0FwUUNJUU1nQlNnQ2tBSWlCeUVHQWtBRFFDQU1SUTBCSUFaQkFtcEJBQzBBMG8vQWdBQTZBQUFnQmtFQUx3RFFqOENBQURzQUFDQUdRUU5xSVFZZ0RFRi9haUVNREFBTEN5QUdJQVVvQXZRQklBSVEyb0dBZ0FBYUlBVkI5QUZxRUllQWdJQUFJQVZCQURzQndBRWdCU0FETmdLOEFTQUZJQWMyQXJnQkRBTUxRUUFoRENBRlFRQTJBdmdCUVFFaENnd0JDeUFGSUJNM0E1QUNJQVZCdUFGcUlBVkJrQUpxUVptZXdJQUFFTXlCZ0lBQUlBVkI5QUZxRUllQWdJQUFEQUVMSUFwQmYzTkJBWEVoRFVFQUlRWURRQ0FHSUFrZ0JpQUpTeHNoQWdKQUEwQUNRQUpBSUFJZ0JrWU5BQ0FESUFacUxRQUFRUzlHRFFFZ0JpRUNDMEVBSVFaQkFDRUhJQUlnQ1VZTkFpQUpJQUlnQ1NBQ1N4c2hCeUFDSVFZRFFBSkFBa0FnQnlBR1JnMEFJQU1nQm1vdEFBQkJMMGNOQVNBR0lRY0xJQWNnQW1zaEJ5QURJQUpxSVFZTUJBc2dCa0VCYWlFR0RBQUxDeUFHUVFGcUlRWU1BQXNMSUFaQkFDQUdHeUlJUlEwQ0lBZEJBQ0FHR3lJSElBSnFJUVlnQ0NBSFFjU2R3SUFBUVFFUWlvQ0FnQUJCQVhFTkFDQUZLQUw0QVNFQ0FrQUNRQ0FJSUFkQnlaM0FnQUJCQWhDS2dJQ0FBRUVCY1VVTkFDQUNSUTBCSUFVb0F2UUJRWDlxSVJBQ1FBTkFJQUpCZjJvaEJ5QVFJQUpxTFFBQVFTOUdEUUVnQWtFQlJpRUlJQWNoQWlBSVJRMEFDd3NnQlNBSE5nTDRBUXdDQ3dKQUlBSkJBRWNnQ25KQkFYRU5BQ0FGUWZRQmFpQUlJQWNRdm9HQWdBQWlBa0gvL3dOeFJRMENJQVZCOUFGcUVJZUFnSUFBSUFVZ0Fqc0J3QUVNQXdzQ1FDQUZRZlFCYWlBSFFRRnFFTTJCZ0lBQUlnSkIvLzhEY1VVTkFDQUZRZlFCYWhDSGdJQ0FBQ0FGSUFJN0FjQUJEQU1MSUFVb0F2UUJJZ0lnQlNnQytBRWlFR3BCTHpvQUFDQUZJQkJCQVdvaUVDQUhhallDK0FFZ0FpQVFhaUFJSUFjUTJvR0FnQUFhREFFTElBd2dEV29oREF3QUN3c0NRQ0FGTHdIQUFTSUdEUUFnQlNnQ3ZBRWhBaUFGS0FLNEFTRURBa0FnQUNBQlFRRnFRUUFRaG9HQWdBQWlCa0gvL3dOeERRQWdCU0FDTmdMTUFTQUZJQU0yQXNnQklBVWdDellDeEFFZ0JTQUxOZ0tRQWlBRlFaQUNha0hmb01DQUFFRUJFSVNCZ0lBQUlnWkIvLzhEY1EwQUlBVkJ5QUZxSUFWQnhBRnFFTTZCZ0lBQUlnWkIvLzhEY1EwQUlBVWdDellDOUFFZ0JVSDBBV3BCNHFEQWdBQkJBUkNFZ1lDQUFDSUdRZi8vQTNFTkFDQUFJQTVCQVdvZ0JCQ0dnWUNBQUNFR0N5QUFJQU1nQWhDSWdJQ0FBQXNnQUNBU0lCRVFpSUNBZ0FBTUF3c2dEMEVCYWlFUERBQUxDd0pBQWtBQ1FDQUtRYXJWcXRWNklBa2JJaEFnQlVIWUFHb2dBMEVDZENBQ2FrRjhhaWdDQUJDUGdZQ0FBQ0lIUVFGcUlnbHFMUUFBUWY4QWNVRTNSZzBBSUFBZ0FVRUJha0VBRUlhQmdJQUFJZ1pCLy84RGNRMERRUUFoQndOQUlBTWdCMFlOQWdKQUFrQWdFQ0FGUWRnQWFpQUNLQUlBSWdnUWpZR0FnQUFpQm1vdEFBQkIvd0J4UVFSR0RRQWdCVUVZYWlBR1FYOXFFS2lCZ0lBQVFRRnhSUTBCQ3lBTElBc29BaFJCQVdvMkFoUWdDeUFMS0FJTVFRRnFOZ0lNQ3lBQUlBaEJBQkNxZ0lDQUFDSUdRZi8vQTNFTkJBSkFJQWRCQVdvaUJ5QURUdzBBSUFBZ0JVSFlBR29nQ0JDUGdZQ0FBRUVCYWtFQkVJYUJnSUFBSWdaQi8vOERjUTBGQ3lBQ1FRUnFJUUlNQUFzTElBc2dDeWdDREVFQmFqWUNEQ0FBSUFGQkFXcEJBaENHZ1lDQUFDSUdRZi8vQTNFTkFpQURRUUZxSVFNRFFDQURRWDlxSWdORkRRSWdBaWdDQUNFR0lBSkJCR29oQWlBQUlBWkJBeENxZ0lDQUFDSUdRZi8vQTNGRkRRQU1Bd3NMSUFBZ0NTQUVFSWFCZ0lBQUlRWU1BUXNnQ3hDTWdZQ0FBQ0FBSUFkQkFtb2dCQkNHZ1lDQUFDRUdDeUFGUWFBQ2FpU0FnSUNBQUNBR0M1RUJBUUovUVFBaEF3SkFJQUlvQWdBaUJFVU5BQ0FCS0FJSVFhclZxdFY2SUFFb0FoUWJJQVJCZjJvaUEyb3RBQUFoQVNBQUlBTTJBZ0FnQVVIL0FIRWlBMEhlQUVZZ0EwSHBBRVp5SVFNTElBQkJBRHNBQlNBQUlBTTZBQVFnQUVFSGFrRUFPZ0FBSUFBZ0Fpa0NBRGNDQ0NBQVFSQnFJQUpCQ0dvcEFnQTNBZ0FnQUVFWWFpQUNRUkJxS1FJQU53SUFDMUVCQVg4Z0FDZ0NDRUdxMWFyVmVpQUFLQUlVR3lBQmFpRURJQUlnQVdzaEFrRUFJUUVDUUFOQUlBSWdBU0lBUmcwQklBQkJBV29oQVNBRElBQnFMUUFBUWY4QWNVRUVSdzBBQ3dzZ0FDQUNTUXRnQVFGL1FRQWhBUUpBQWtBQ1FDQUFRZjhCY1NJQVFYZHFEak1CQWdJQkFRRUJBUUVCQVFFQkFRRUNBUUVCQVFFQkFRSUNBZ0VDQVFFQkFRRUJBZ0VCQVFFQkFnSUJBZ0VCQVFFQkFRRUFDeUFBUWFrQlJ3MEJDMEVCSVFFTElBRUxzd0VCQTM4amdJQ0FnQUJCd0FCcklnTWtnSUNBZ0FBZ0FTZ0NGQ0VFSUFFb0FnZ2hCUUpBQWtBZ0F5QUJRY0FBRU5xQmdJQUFJZ0VnQWlnQ0JCQ05nWUNBQUNJRERRQkJBQ0VFREFFTElBVkJxdFdxMVhvZ0JCc2dBMEYvYWlJRGFpMEFBRUgvQUhGQjBBQkdJUVFMSUFCQkFEc0FGU0FBSUFRNkFCUWdBQ0FETmdJUUlBQWdBaWtDQURjQ0FDQUFRUmRxUVFBNkFBQWdBRUVJYWlBQ1FRaHFLUUlBTndJQUlBRkJ3QUJxSklDQWdJQUFDNElCQVFKL0k0Q0FnSUFBUVJCcklnTWtnSUNBZ0FBZ0FDZ0NDQ0VFQWtBZ0FDQUJJQUlRcW9DQWdBQWlBa0gvL3dOeERRQWdBeUFBUWZ3QWFpQUJFSWlCZ0lBQUFrQWdBeWdDQUNJQURRQkJBQ0VDREFFTElBTW9BZ1FoQVNBRElBUTJBZ3dnQTBFTWFpQUFJQUVRaElHQWdBQWhBZ3NnQTBFUWFpU0FnSUNBQUNBQ0M4SUNBUVIvSTRDQWdJQUFRY0FDYXlJRUpJQ0FnSUFBSUFBb0FoUWhCU0FBS0FJSUlRWWdCQ0FBUWNBQUVOcUJnSUFBSWdRZ0FTZ0NBQkNOZ1lDQUFDRUhJQVJCd0FCcUlBQkJ3QUFRMm9HQWdBQWFBa0FDUUNBRVFjQUFhaUFISUFNUWpvR0FnQUJCQVhFTkFDQUNRUUVnQWtFQlN4c2hCMEVCSVFNRFFDQUhJQU5HRFFJZ0FTZ0NBQ0VDSUFSQmdBRnFJQUJCd0FBUTJvR0FnQUFhSUFSQmdBRnFJQUlRajRHQWdBQWhBaUFFUWNBQmFpQUFRY0FBRU5xQmdJQUFHaUFFUVlBQ2FpQUFRY0FBRU5xQmdJQUFHZ0pBSUFSQndBRnFJQUpCQVdvZ0JFR0FBbW9nQVVFRWFpSUJLQUlBRUkyQmdJQUFFSTZCZ0lBQVFRRnhEUUFnQXlFSERBTUxJQU5CQVdvaEF3d0FDd3RCQVNBQ0lBTWdCa0dxMWFyVmVpQUZHMnBCZjJvdEFBQkIvd0J4UVRkR0d5RUhDeUFFUWNBQ2FpU0FnSUNBQUNBSEMzSUJBbjhnQUNnQ0RFR3ExYXJWZWlBQUtBSVVHeUFCUVFKMGFpSUJRUVJxS0FJQUlBRW9BZ0FpQW1zaEFTQUFLQUlBSUFKcUlRQUNRQU5BUVFBaEF5QUJSUTBCSUFBdEFBQWlBa0VLUmcwQkFrQWdBa0V2UmcwQUlBQkJBV29oQUNBQlFYOXFJUUVNQVFzTFFRRWhBd3NnQXd1b0FRRUVmeU9BZ0lDQUFFRVFheUlDSklDQWdJQUFBa0FDUUNBQlFReHFMUUFBRFFCQkFDRUJRUUFoQXd3QkN5QUNRUWhxSUFFb0FnQWlCQ0FCS0FJRUlnTWdBU2dDQ0NJRklBRXRBQkFRcllHQWdBQUNRQUpBSUFJdEFBeEZEUUFnQVVFQk9nQU1JQUVnQWlnQ0NDSURRUUZxTmdJSURBRUxJQUZDQURjQ0NBc2dBeUFGYXlFRElBUWdCV29oQVFzZ0FDQUJOZ0lBSUFBZ0F6WUNCQ0FDUVJCcUpJQ0FnSUFBQzl3RUJRVi9BWDRCZndGK0FYOGpnSUNBZ0FCQmtBSnJJZ01rZ0lDQWdBQkJBaUVFQWtBZ0FTZ0NDRUdxMWFyVmVpQUJLQUlVR3lJRklBSW9BZ0FpQm1vaUJ5MEFBRUgvQUhGQkYwWU5BRUVCSVFRZ0IwRUJhaTBBQUVIL0FIRWlCMEUwUmcwQUlBZEJHRVlOQUVFQUlRUWdCMEVDUncwQVFYOUJBQ0FGUVFBZ0JrRi9haUlFSUFRZ0Jrc2JhaTBBQUVIL0FIRkJGMFliSVFRTElBTWdCRUVEY1RvQURBSkFJQUlvQWd3aUJFVU5BQ0FEUVJCcUlBRkJ3QUFRMm9HQWdBQWFJQU5CRUdvZ0JCQ1BnWUNBQUVFQmFpRUdDeUFEUWRBQWFpQUJRY0FBRU5xQmdJQUFHa0lBSVFoQkFDRUpJQU5CMEFCcUlBSW9BaGdRallHQWdBQWhCMElBSVFvRFFBSkFBa0FnQmlBSFR3MEFBa0FDUUFKQUFrQUNRQ0FGSUFacUxRQUFRZjhBY1NJRVFiWi9hZzRDQkFFQUN5QUVRZFlBUmcwQklBUkIrQUJHRFFJTUJRdEJBU0VKSUFZaEN3d0VDeUFHclVLQWdJQ0FFSVFoQ0F3REN5QUdyVUtBZ0lDQUVJUWhDZ3dDQ3dKQUlBSW9BaFFpQmtVTkFDQURRWkFCYWlBQlFjQUFFTnFCZ0lBQUdpQURRWkFCYWlBR0VJK0JnSUFBUVFGcUlRWU1BZ3NnQWlnQ0JDRUdJQU5CMEFGcUlBRkJ3QUFRMm9HQWdBQWFJQU5CMEFGcUlBWVFqNEdBZ0FCQkFXb2hCZ3dCQ3lBQVFRQTdBQVVnQUNBSk9nQUVJQUFnQ3pZQ0FDQUFJQW8zQWhBZ0FDQUlOd0lJSUFBZ0F5MEFERG9BTkNBQVFRZHFRUUE2QUFBZ0FDQUNLUUlBTndJWUlBQkJJR29nQWtFSWFpa0NBRGNDQUNBQVFTaHFJQUpCRUdvcEFnQTNBZ0FnQUVFd2FpQUNRUmhxS0FJQU5nSUFJQU5Ca0FKcUpJQ0FnSUFBRHdzZ0JrRUJhaUVHREFBTEM4d0NBUVovSTRDQWdJQUFRY0FBYXlJRkpJQ0FnSUFBSUFVZ0FFRU1ha0hBQUJEYWdZQ0FBQ0VGSUFBb0FnZ2hCZ0pBQWtBZ0JTZ0NDRUdxMWFyVmVpQUZRUlJxS0FJQUd5SUhJQVZCSEdvb0FnQkJxdFdxMVhvZ0JVRW9haWdDQUJzZ0FVRUNkR29vQWdBaUNFRi9haUlKYWkwQUFFSC9BSEZCTkVjTkFDQUhJQWhCZm1vaUNtb3RBQUJCL3dCeFFRSkhEUUFnQUNBS1FRQkJBUkNLZ1lDQUFDSUhRZi8vQTNFTkFTQUFJQWxCQVJDR2dZQ0FBQ0lIUWYvL0EzRU5BUXNnQmlBR0tBSWNRUUZxTmdJY0lBWWdCaWdDREVFQmFqWUNEQUpBSUFNTkFDQUFJQWhCQUJDR2dZQ0FBQ0lIUWYvL0EzRU5BU0FHRUl5QmdJQUFJQUFnQlNBQkVJK0JnSUFBSUFRUWhvR0FnQUFoQnd3QkN5QUFJQWhCQWhDR2dZQ0FBQ0lIUWYvL0EzRU5BQ0FBSUFFZ0FpQURJQVFReTRHQWdBQWhCd3NnQlVIQUFHb2tnSUNBZ0FBZ0J3dEhBUUYvSTRDQWdJQUFRUkJySWdJa2dJQ0FnQUFnQWlBQk9nQUxJQUlnQUNnQ0FEWUNEQ0FDUVF4cUlBSkJDMnBCQVJDRGdZQ0FBQ0VCSUFKQkVHb2tnSUNBZ0FBZ0FRdFlBQUpBSUFNZ0Fra05BQ0FBUWdBM0FnQVBDeUFFUWY4QmNTRUVBa0FEUUNBQ0lBTkdEUUVDUUNBQklBTnFMUUFBSUFSSERRQWdBRUVCT2dBRUlBQWdBellDQUE4TElBTkJBV29oQXd3QUN3c2dBRUlBTndJQUM2a0ZBZ1ovQTM0amdJQ0FnQUJCNEFCcklnTWtnSUNBZ0FBQ1FBSkFJQUVvQWhBZ0FTZ0NJQ0lFYWkwQUFDSUZRZjhBY1VFM1J3MEFJQUZCekFCcUtBSUFJUVFDUUFKQUFrQWdBVUhJQUdvaUJTQUJJQUlRdzRDQWdBQWlBa0gvL3dOeERRQUNRQU5BSUFOQktHb2dBVUUzRUwyQWdJQUFJQU10QUN4RkRRRWdBMEV3YWlBQkVNdUFnSUFBSUFNdkFUUWlBZzBDSUFVZ0FTQURLQUl3RU1PQWdJQUFJZ0pCLy84RGNVVU5BQXdDQ3dzZ0EwRTRhaUFCUVF3UTFvQ0FnQUFnQXk4QlBDSUNEUUFnQXlnQ09DRUZJQU5Cd0FCcUlBRVF5NENBZ0FBZ0F5OEJSQ0lDRFFBZ0FVSEFBR29vQWdBaEJpQURLQUpBSVFjZ0FVRThhaUFCSUFFb0Frd2dCR3NpQ0VFQmFoQzdnSUNBQUNJQ1FmLy9BM0ZGRFFFTElBRWdCRFlDVEVJQUlRbENBQ0VLREFFTElBRWdBU2dDUUNJQ1FRRnFOZ0pBSUFFb0Fqd2dBa0VDZEdvZ0NEWUNBQ0FCSUFFb0FrQWlBaUFCS0FKTUlBUnJJZ2hxTmdKQUlBRW9BandnQWtFQ2RHb2dBU2dDU0NBRVFRSjBhaUFJUVFKMEVOcUJnSUFBR2lBRFFkQUFhaUFITmdJQUlBTWdCallDVENBRElBVTJBa2dnQTBFa09nQlVJQU5CMkFCcUlBRWdBMEhJQUdvUXg0Q0FnQUFnQVNBRU5nSk1JQU1wQTFnaUMwTC8vLy8vRDRNaENpQUxRb0NBZ0lDQWdFQ0RJUWtnQzBJZ2lLY2hBZ3NnQUNBQ3JVTC8vd09EUWlDR0lBbUVJQXFFTndJQURBRUxJQU5CQm1vZ0JSQ3ZnWUNBQUFKQUlBTXRBQWRGRFFBZ0FTQUVRUUZxTmdJZ0lBTXRBQVloQmlBRFFRaHFJQUVReTRDQWdBQUNRQ0FETHdFTUlnVkZEUUFnQUNBRk93RUVEQUlMSUFOQkdHb2dBeWdDQ0RZQ0FDQURJQVk2QUJ3Z0F5QUNOZ0lVSUFNZ0JEWUNFQ0FEUVNCcUlBRWdBMEVRYWhESGdJQ0FBQ0FBSUFNcEF5QTNBZ0FNQVFzZ0FDQUNOZ0lBSUFCQkFEc0JCQXNnQTBIZ0FHb2tnSUNBZ0FBTDB3SUJBWDlCN0luQWdBQWhBZ0pBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0FVSC9BSEVpQVVGaWFnNGpDaE1UQkJNTkV4QVRCUk1PRXhFVEFSTVREQk1QRXhNVEFoTVRDUk1URXhNR0V3Y0FDd0pBSUFGQmRXb09BZ3NTQUFzZ0FVRVVSZzBDSUFGQnhBQkdEUWNNRWd0QnlJbkFnQUFoQWd3UkMwSEtpY0NBQUNFQ0RCQUxRY3lKd0lBQUlRSU1Ed3RCem9uQWdBQWhBZ3dPQzBIUWljQ0FBQ0VDREEwTFFkS0p3SUFBSVFJTURBdEIxSW5BZ0FBaEFnd0xDMEhXaWNDQUFDRUNEQW9MUWRpSndJQUFJUUlNQ1F0QjJvbkFnQUFoQWd3SUMwSGNpY0NBQUNFQ0RBY0xRZDZKd0lBQUlRSU1CZ3RCNEluQWdBQWhBZ3dGQzBIaWljQ0FBQ0VDREFRTFFlU0p3SUFBSVFJTUF3dEI1b25BZ0FBaEFnd0NDMEhvaWNDQUFDRUNEQUVMUWVxSndJQUFJUUlMSUFBZ0FpOEFBRHNBQUF1UkFnSUZmd0YrSTRDQWdJQUFRVEJySWdJa2dJQ0FnQUFnQWtFRWFpQUJFTXlBZ0lBQUFrQUNRQUpBSUFJdkFRZ2lBdzBBQWtBZ0FpZ0NCQ0lFUlEwQUlBSkJEbW9nQVNnQ0VDQUJLQUlnSWdWcUxRQUFFSytCZ0lBQUlBSXRBQTlGRFFBZ0FTQUZRUUZxTmdJZ0lBSXRBQTRoQmlBQ1FSQnFJQUVReTRDQWdBQWdBaThCRkNJRERRRWdBa0VnYWlBQ0tBSVFOZ0lBSUFJZ0Jqb0FKQ0FDSUFRMkFod2dBaUFGTmdJWUlBSkJLR29nQVNBQ1FSaHFFTWVBZ0lBQUlBSXBBeWdpQjBJZ2lLY2lBMEgvL3dOeERRRWdCNmNoQkFzZ0JBMEJJQUFnQVVFSkVNcUFnSUFBT3dFRURBSUxJQUFnQXpzQkJBd0JDeUFBSUFRMkFnQWdBRUVBT3dFRUN5QUNRVEJxSklDQWdJQUFDNDBCQXdGL0FYNENmeU9BZ0lDQUFFRVFheUlDSklDQWdJQUFRZ0FoQXdKQUlBRW9BaEFnQVNnQ0lDSUVhaUlGTFFBQVFmOEFjVUVaUncwQUlBVkJBV290QUFCQi93QnhRUUpIRFFBZ0JVRUNhaTBBQUVIL0FIRkJERWNOQUNBQklBUkJBMm8yQWlBZ0FrRUlhaUFCRU11QWdJQUFJQUlwQXdnaEF3c2dBQ0FETndJQUlBSkJFR29rZ0lDQWdBQUxtQUVCQTM4amdJQ0FnQUJCRUdzaUFpU0FnSUNBQUFKQUFrQUNRQ0FCS0FJUUlBRW9BaUFpQTJvaUJDMEFBRUgvQUhGQkdVY05BQ0FFUVFGcUxRQUFRZjhBY1VFQ1J3MEFJQVJCQW1vdEFBQkIvd0J4UVF4R0RRRUxJQUFnQVVFekVNcUFnSUFBT3dFRURBRUxJQUVnQTBFRGFqWUNJQ0FDUVFocUlBRVF5NENBZ0FBZ0FDQUNLUU1JTndJQUN5QUNRUkJxSklDQWdJQUFDOVVFQVFkL0k0Q0FnSUFBUWZBQWF5SUNKSUNBZ0lBQUlBSkJDR29nQVVIZ0FCQzlnSUNBQUFKQUFrQUNRQUpBSUFJdEFBeEZEUUFnQVVITUFHb29BZ0FoQXlBQ0tBSUlJUVFnQWtFUWFpQUJFUENBZ0lBQUFrQWdBaThCRkNJRlJRMEFJQUFnQlRzQkJBd0RDeUFDS0FJUUlRWWdBa0VZYWlBQkVOcUFnSUFBQWtBZ0FpOEJIQ0lGUlEwQUlBQWdCVHNCQkF3REN5QUJRY2dBYWlFSElBSW9BaGdoQlNBQ1FTQnFJQUZCMlFBUXZZQ0FnQUFDUUFKQUlBSXRBQ1FpQ0VVTkFBSkFJQWNnQVNBRkVNT0FnSUFBSWdWQi8vOERjVVVOQUNBQUlBVTdBUVFNQlFzZ0FrRW9haUFCRU5xQWdJQUFBa0FnQWk4QkxDSUZSUTBBSUFBZ0JUc0JCQXdGQ3lBSElBRWdBaWdDS0JERGdJQ0FBQ0lGUWYvL0EzRkZEUUVnQUNBRk93RUVEQVFMSUFaQkFVWU5BaUFISUFFZ0JSRERnSUNBQUNJRlFmLy9BM0ZGRFFBZ0FDQUZPd0VFREFNTElBSkJ6QUJxSUFFZ0FTZ0NTQ0FEUVFKMGFpQUJLQUpNSUFOckVMcUFnSUFBQWtBZ0FpOEJWQ0lGUlEwQUlBQWdCVHNCQkF3REN5QUNRZUFBYWlBSVFRQkhRUjkwSUFaQi8vLy8vd2R4Y2pZQ0FDQUNRZklBT2dCa0lBSWdBaWdDVERZQ1hDQUNJQVEyQWxnZ0FrSG9BR29nQVNBQ1FkZ0FhaERIZ0lDQUFDQUJJQU0yQWt3Z0FDQUNLUU5vTndJQURBTUxJQUJDQURjQ0FBd0NDeUFDUVRocUlBVTJBZ0FnQWtIeEFEb0FQQ0FDSUFRMkFqQWdBaUFCS0FKSUlBTkJBblJxS0FJQU5nSTBJQUpCd0FCcUlBRWdBa0V3YWhESGdJQ0FBQ0FCSUFNMkFrd2dBQ0FDS1FOQU53SUFEQUVMSUFFZ0F6WUNUQXNnQWtId0FHb2tnSUNBZ0FBTDd3VUJCbjhqZ0lDQWdBQkJ3QUZySWdJa2dJQ0FnQUFnQWlBQlFma0FFTDJBZ0lBQUFrQUNRQ0FDTFFBRVJRMEFJQUlvQWdBaEF5QUNRUWhxSUFGQkVCRFdnSUNBQUFKQUlBSXZBUXdpQkVVTkFDQUFJQVE3QVFRTUFnc2dBa0VRYWlBQkVNdUFnSUFBQWtBZ0FpOEJGQ0lFUlEwQUlBQWdCRHNCQkF3Q0N5QUNLQUlRSVFVZ0FrRVlhaUFCUVJFUTFvQ0FnQUFDUUNBQ0x3RWNJZ1JGRFFBZ0FDQUVPd0VFREFJTElBSkJJR29nQVJEdGdJQ0FBQUpBSUFJdkFTUWlCRVVOQUNBQUlBUTdBUVFNQWdzZ0FrRW9haUFCRVBHQWdJQUFBa0FnQWk4QkxDSUVSUTBBSUFBZ0JEc0JCQXdDQ3lBQ0tBSW9JUVlnQWtFd2FpQUJFTnFBZ0lBQUFrQWdBaThCTkNJRVJRMEFJQUFnQkRzQkJBd0NDeUFDS0FJd0lRUWdBa0U0YWlBQlFka0FFTDJBZ0lBQUFrQUNRQ0FDTFFBOFJRMEFJQUpCaEFGcUlBRVE2NENBZ0FBZ0FpOEJpQUVpQjBVTkFTQUFJQWM3QVFRTUF3c0NRQ0FHRFFBZ0FrSElBR29nQkRZQ0FDQUNJQVUyQWtRZ0FpQUROZ0pBSUFKQjdnQTZBRXdnQWtIUUFHb2dBU0FDUWNBQWFoREhnSUNBQUNBQUlBSXBBMUEzQWdBTUF3c2dBaUFFTmdKY0lBSWdCallDV0NBQ1FlQUFhaUFCSUFKQjJBQnFFTytBZ0lBQUFrQWdBaThCWkNJRVJRMEFJQUFnQkRzQkJBd0RDeUFDUWZBQWFpQUNLQUpnTmdJQUlBSkI3d0E2QUhRZ0FpQUZOZ0pzSUFJZ0F6WUNhQ0FDUWZnQWFpQUJJQUpCNkFCcUVNZUFnSUFBSUFBZ0Fpa0RlRGNDQUF3Q0N5QUNRWXdCYWlBQkVOcUFnSUFBQWtBZ0FpOEJrQUVpQjBVTkFDQUFJQWM3QVFRTUFnc2dBaUFDS0FLTUFUWUNuQUVnQWlBRU5nS1lBU0FDSUFZMkFwUUJJQUpCb0FGcUlBRWdBa0dVQVdvUThvQ0FnQUFDUUNBQ0x3R2tBU0lFUlEwQUlBQWdCRHNCQkF3Q0N5QUNRYkFCYWlBQ0tBS2dBVFlDQUNBQ1FmQUFPZ0MwQVNBQ0lBVTJBcXdCSUFJZ0F6WUNxQUVnQWtHNEFXb2dBU0FDUWFnQmFoREhnSUNBQUNBQUlBSXBBN2dCTndJQURBRUxJQUJDQURjQ0FBc2dBa0hBQVdva2dJQ0FnQUFMaFE4QkNIOGpnSUNBZ0FCQmdBUnJJZ0lrZ0lDQWdBQWdBU0FCS0FJZ0lnTkJBV28yQWlCQkFDRUVBa0FDUUFKQUlBTWdBU2dDRUdvdEFBQkIvd0J4SWdWQjJnQkdEUUFDUUNBRlFmUUFSZzBBSUFWQjdnQkdEUUVnQlVIbUFFWU5BaUFCSUFNMkFpQWdBQ0FCUVJzUXlvQ0FnQUE3QVFRTUF3c2dBa0VNYWlBQlFSQVF2WUNBZ0FBZ0FpMEFFRVVOQVNBQ1FSUnFJQUZCMmdBUXZZQ0FnQUFDUUNBQ0xRQVlSUTBBSUFKQkhHb2dBVUVRRUwyQWdJQUFBa0FnQWkwQUlFVU5BQ0FDUVNScUlBRVF5NENBZ0FBQ1FDQUNMd0VvSWdWRkRRQWdBQ0FGT3dFRURBVUxJQUlvQWlRaEJDQUNRU3hxSUFGQkVSRFdnSUNBQUFKQUlBSXZBVEFpQlVVTkFDQUFJQVU3QVFRTUJRc2dBa0UwYWlBQlFSRVExb0NBZ0FBQ1FDQUNMd0U0SWdWRkRRQWdBQ0FGT3dFRURBVUxJQUpCUEdvZ0FVRVZFTmFBZ0lBQUFrQWdBaThCUUNJRlJRMEFJQUFnQlRzQkJBd0ZDeUFDUWNRQWFpQUJFSnlBZ0lBQUFrQWdBaThCVkNJRlJRMEFJQUFnQlRzQkJBd0ZDeUFDUWRnQWFrRUlhaUFDUWNRQWFrRUlhaWdDQURZQ0FDQUNRZGdBYWtFUGFpQUNRY1FBYWtFUGFpMEFBRG9BQUNBQ0lBSXBBa1EzQTFnZ0FpQUNMd0JST3dCbElBSWdBaTBBVUNJR09nQmtJQUpCNkFCcUlBSkIyQUJxSUFFUW5ZQ0FnQUFDUUNBQ0x3RndJZ1ZGRFFBZ0FDQUZPd0VFREFVTElBSWdBaWtEYURjRGVDQUNRWUFCYWlBQlFSWVExb0NBZ0FBQ1FDQUNMd0dFQVNJRlJRMEFJQUFnQlRzQkJBd0ZDeUFDUVlnQmFpQUJJQUpCK0FCcUVPK0FnSUFBQWtBZ0FpOEJqQUVpQlVVTkFDQUFJQVU3QVFRTUJRc2dBa0dZQVdvZ0FpZ0NpQUUyQWdBZ0FpQUVOZ0tVQVNBQ0lBTTJBcEFCSUFKQm1uOUJtWDhnQmtFQmNSczZBSndCSUFKQm9BRnFJQUVnQWtHUUFXb1F4NENBZ0FBZ0FDQUNLUU9nQVRjQ0FBd0VDeUFDUWF3QmFpQUJRUkVRMW9DQWdBQUNRQ0FDTHdHd0FTSUZSUTBBSUFBZ0JUc0JCQXdFQ3lBQ1FiUUJhaUFCUVJVUTFvQ0FnQUFDUUNBQ0x3RzRBU0lGUlEwQUlBQWdCVHNCQkF3RUN5QUNRYndCYWlBQkVKeUFnSUFBQWtBZ0FpOEJ6QUVpQlVVTkFDQUFJQVU3QVFRTUJBc2dBa0hRQVdwQkQyb2dBa0c4QVdwQkQyb3RBQUE2QUFBZ0FpQUNMd0RKQVRzQTNRRWdBaUFDTFFESUFTSUVPZ0RjQVNBQ0lBSW9Bc1FCSWdjMkF0Z0JJQUlnQWlnQ3dBRWlDRFlDMUFFZ0FpQUNLQUs4QVNJR05nTFFBU0FDUWVBQmFpQUJRUllRMW9DQWdBQUNRQ0FDTHdIa0FTSUZSUTBBSUFBZ0JUc0JCQXdFQ3lBRVFRRnhJUVVDUUNBR1FRSkxEUUFnQWtId0FXb2dCellDQUNBQ0lBZzJBdXdCSUFJZ0F6WUM2QUVnQWtHWWYwR1hmeUFGR3pvQTlBRWdBa0g0QVdvZ0FTQUNRZWdCYWhESGdJQ0FBQ0FBSUFJcEEvZ0JOd0lBREFRTElBSkJoQUpxSUFKQjBBRnFJQUVRbllDQWdBQUNRQ0FDTHdHTUFpSUVSUTBBSUFBZ0JEc0JCQXdFQ3lBQ0lBSXBBb1FDTndLVUFpQUNJQU0yQXBBQ0lBSkJsbjlCbFg4Z0JSczZBSndDSUFKQm9BSnFJQUVnQWtHUUFtb1F4NENBZ0FBZ0FDQUNLUU9nQWpjQ0FBd0RDeUFDUWF3Q2FpQUJFTXVBZ0lBQUFrQWdBaThCc0FJaUJVVU5BQ0FBSUFVN0FRUU1Bd3NnQWlnQ3JBSWhCQ0FDUWJRQ2FpQUJRUkVRMW9DQWdBQWdBaThCdUFJaUJVVU5BU0FBSUFVN0FRUU1BZ3NnQWtHOEFtb2dBVUVRRUwyQWdJQUFJQUl0QU1BQ1JRMEFJQUpCeEFKcUlBRVF5NENBZ0FBQ1FDQUNMd0hJQWlJRlJRMEFJQUFnQlRzQkJBd0NDeUFDS0FMRUFpRUVJQUpCekFKcUlBRkJFUkRXZ0lDQUFDQUNMd0hRQWlJRlJRMEFJQUFnQlRzQkJBd0JDeUFDUWRRQ2FpQUJRUlVRMW9DQWdBQUNRQ0FDTHdIWUFpSUZSUTBBSUFBZ0JUc0JCQXdCQ3lBQ1Fkd0NhaUFCRUp5QWdJQUFBa0FnQWk4QjdBSWlCVVVOQUNBQUlBVTdBUVFNQVFzZ0FrSHdBbXBCRDJvZ0FrSGNBbXBCRDJvdEFBQTZBQUFnQWlBQ0x3RHBBanNBL1FJZ0FpQUNMUURvQWlJR09nRDhBaUFDSUFJb0F1UUNJZ2cyQXZnQ0lBSWdBaWdDNEFJaUNUWUM5QUlnQWlBQ0tBTGNBaUlITmdMd0FpQUNRWUFEYWlBQlFSWVExb0NBZ0FBQ1FDQUNMd0dFQXlJRlJRMEFJQUFnQlRzQkJBd0JDeUFHUVFGeElRVUNRQ0FFRFFBQ1FDQUhRUU5QRFFBZ0FrR1FBMm9nQ0RZQ0FDQUNJQWsyQW93RElBSWdBellDaUFNZ0FrR1NmMEdSZnlBRkd6b0FsQU1nQWtHWUEyb2dBU0FDUVlnRGFoREhnSUNBQUNBQUlBSXBBNWdETndJQURBSUxJQUpCcEFOcUlBSkI4QUpxSUFFUW5ZQ0FnQUFDUUNBQ0x3R3NBeUlFUlEwQUlBQWdCRHNCQkF3Q0N5QUNJQUlwQXFRRE53SzBBeUFDSUFNMkFyQURJQUpCa0g5QmozOGdCUnM2QUx3RElBSkJ3QU5xSUFFZ0FrR3dBMm9ReDRDQWdBQWdBQ0FDS1FQQUF6Y0NBQXdCQ3lBQ1Fjd0RhaUFDUWZBQ2FpQUJFSjJBZ0lBQUFrQWdBaThCMUFNaUJrVU5BQ0FBSUFZN0FRUU1BUXNnQWlBQ0tRTE1BemNDMkFNZ0FrSGdBMm9nQVNBQ1FkZ0RhaER2Z0lDQUFBSkFJQUl2QWVRRElnWkZEUUFnQUNBR093RUVEQUVMSUFKQjhBTnFJQUlvQXVBRE5nSUFJQUlnQkRZQzdBTWdBaUFETmdMb0F5QUNRWlIvUVpOL0lBVWJPZ0QwQXlBQ1FmZ0RhaUFCSUFKQjZBTnFFTWVBZ0lBQUlBQWdBaWtEK0FNM0FnQUxJQUpCZ0FScUpJQ0FnSUFBQzdvb0F3Vi9BbjRDZnlPQWdJQ0FBRUhRQm1zaUFpU0FnSUNBQUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FnQVNnQ0VDSURJQUVvQWlBaUJHb3RBQUJCL3dCeElnVkJxMzlxRGlVTEFRRUJBUlFCRndFVkNBOEpEZ0VCQVJRQkFSVUJBUUVCRkFFS0FRRUJGQVFCQVFFUUFBc0NRQ0FGUVg1cURnOE5CZ3dDQVFjQkFRRUJBUUVCQVJZQUN5QUZRUmxHRFJBZ0JVSEdBRVlOQWlBRlFjMEFSZzBFQ3lBQVFnQTNBZ0FNSUFzZ0FpQUVOZ0lBSUFFZ0JFRUJhallDSUNBQ1FZSUJPZ0FNSUFKQkVHb2dBU0FDRU1lQWdJQUFJQUFnQWlrREVEY0NBQXdmQ3lBQ0lBUTJBaGdnQVNBRVFRRnFOZ0lnSUFKQmd3RTZBQ1FnQWtFb2FpQUJJQUpCR0dvUXg0Q0FnQUFnQUNBQ0tRTW9Od0lBREI0TElBSWdCRFlDTUNBQklBUkJBV28yQWlBZ0FrR0VBVG9BUENBQ1FjQUFhaUFCSUFKQk1Hb1F4NENBZ0FBZ0FDQUNLUU5BTndJQURCMExJQUlnQkRZQ1NDQUJJQVJCQVdvMkFpQWdBa0dCQVRvQVZDQUNRZGdBYWlBQklBSkJ5QUJxRU1lQWdJQUFJQUFnQWlrRFdEY0NBQXdjQ3lBQ0lBUTJBbUFnQVNBRVFRRnFOZ0lnSUFKQmh3RTZBR3dnQWtId0FHb2dBU0FDUWVBQWFoREhnSUNBQUNBQUlBSXBBM0EzQWdBTUd3c2dBU0FFUVFGcU5nSWdJQUpCb0FacUlBRkJFQkM5Z0lDQUFBSkFBa0FnQWkwQXBBWkZEUUFnQVVISUFHb2hBeUFCUWN3QWFpZ0NBQ0VHREFFTFFnQWhCMElBSVFnZ0FVRU9FTVNBZ0lBQUlnVkIvLzhEY1EwYUlBSWdCRFlDd0FZZ0FrR0ZBVG9BekFZZ0FrSFlCV29nQVNBQ1FjQUdhaERIZ0lDQUFDQUNLUVBZQlNJSVFvQ0FnSUNBZ0VDRElRY2dDRUlnaUtjaEJRd2FDd05BSUFKQnFBWnFJQUZCRVJDOWdJQ0FBQ0FDTFFDc0JnMFhJQUpCc0FacUlBRVF5NENBZ0FBZ0FpOEJ0QVlpQlEwWklBTWdBU0FDS0FLd0JoRERnSUNBQUNJRlFmLy9BM0VOR1FKQUlBRW9BaEFpQ1NBQktBSWdJZ1ZxTFFBQVFmOEFjU0lLUVRkSERRQWdBU0FGUVFGcU5nSWdEQUVMSUFwQkVVWU5EQ0FCUVMwUXhJQ0FnQUFpQlVILy93TnhSUTBBREJrTEN5QUNRZmdBYWlBQkVONkFnSUFBSUFBZ0Fpa0RlRGNDQUF3WkN5QUNRZWdGYWlBQlFlRUFFTDJBZ0lBQVFnQWhCd0pBSUFJdEFPd0ZEUUJCQUNFRkRCTUxJQUlvQXVnRklRTWdBa0h3QldvZ0FVRVFFTmFBZ0lBQUlBSXZBZlFGSWdVTkVpQUNRZmdGYWlBQkVNdUFnSUFBSUFJdkFmd0ZJZ1VORWlBQ0tBTDRCU0VKSUFKQmdBWnFJQUZCRVJEV2dJQ0FBQ0FDTHdHRUJpSUZEUklnQWtHSUJtb2dBUkR0Z0lDQUFDQUNMd0dNQmlJRkRSSWdBa0dRQm1vZ0FSRGFnSUNBQUNBQ0x3R1VCaUlGRFJJZ0FpZ0NrQVloQkNBQ1FaZ0dhaUFCUWRrQUVMMkFnSUFBSUFJdEFKd0dSUTBJSUFKQm9BWnFJQUVRNjRDQWdBQWdBaThCcEFZaUJRMFNJQUpCcUFacUlBRVEyb0NBZ0FBZ0FpOEJyQVlpQlEwU0lBSWdBaWdDcUFZMkFyUUdJQUlnQkRZQ3NBWWdBa0c0Qm1vZ0FTQUNRYkFHYWhEdmdJQ0FBRUlBSVFnZ0FpOEJ2QVlpQlEwVElBSkJ5QVpxSUFJb0FyZ0dOZ0lBSUFKQjlRQTZBTXdHSUFJZ0NUWUN4QVlnQWlBRE5nTEFCaUFDUWRnRmFpQUJJQUpCd0FacUVNZUFnSUFBSUFJcEE5Z0ZJZ2hDZ0lDQWdJQ0FRSU1oQnlBSVFpQ0lweUVGREJNTElBSkJnQUZxSUFFUTdJQ0FnQUFnQUNBQ0tRT0FBVGNDQUF3WEN5QUJJQVJCQVdvMkFpQWdBa0dJQVdvZ0FSRGFnSUNBQUFKQUlBSXZBWXdCSWdWRkRRQWdBQ0FGT3dFRURCY0xJQUpCbmdFNkFKd0JJQUlnQWlnQ2lBRTJBcFFCSUFJZ0JEWUNrQUVnQWtHZ0FXb2dBU0FDUVpBQmFoREhnSUNBQUNBQUlBSXBBNkFCTndJQURCWUxJQVJCQVdvaEJRTkFJQUVnQlRZQ0lDQURJQVZxSVFrZ0JVRUJhaUlLSVFVZ0NTMEFBRUgvQUhGQkJFWU5BQXNnQWtHd0FXb2dDa0YrYWpZQ0FDQUNJQVEyQXF3QklBSWdCRFlDcUFFZ0FrR0lBVG9BdEFFZ0FrRzRBV29nQVNBQ1FhZ0JhaERIZ0lDQUFDQUFJQUlwQTdnQk53SUFEQlVMQWtBZ0F5QUVRUUZxSWdWcUxRQUFRZjhBY1VFMFJnMEFJQUVnQlRZQ0lDQUNRWVVCT2dDTUFpQUNJQVEyQW9BQ0lBSkJrQUpxSUFFZ0FrR0FBbW9ReDRDQWdBQWdBQ0FDS1FPUUFqY0NBQXdWQ3dKQUFrQUNRQUpBQWtBQ1FDQURJQVJCQW1vaUNtb3RBQUJCL3dCeElnbEJvSDlxRGdNREFRSUFDeUFKUVJWR0RRUWdDVUg1QUVZTkF3c2dBU0FGTmdJZ0lBSkJoUUU2QVBRQklBSWdCRFlDNkFFZ0FrSDRBV29nQVNBQ1FlZ0JhaERIZ0lDQUFDQUFJQUlwQS9nQk53SUFEQmdMSUFFZ0JFRURhaUlGTmdJZ0FrQUNRQ0FESUFWcUxRQUFRZjhBY1NJRlFlQUFSZzBBSUFWQitRQkdEUUVnQUNBQlFRd1F5b0NBZ0FBN0FRUU1HUXNnQWtIQUFXb2dBUkN6Z1lDQUFDQUFJQUlwQThBQk53SUFEQmdMSUFKQnlBRnFJQUVRdElHQWdBQWdBQ0FDS1FQSUFUY0NBQXdYQ3lBQklBbzJBaUFnQWtIUUFXb2dBUkN6Z1lDQUFDQUFJQUlwQTlBQk53SUFEQllMSUFFZ0NqWUNJQ0FDUWRnQmFpQUJFTFNCZ0lBQUlBQWdBaWtEMkFFM0FnQU1GUXNnQVNBS05nSWdJQUpCNEFGcUlBRVF4b0NBZ0FBZ0FDQUNLUVBnQVRjQ0FBd1VDeUFCSUFSQkFXb2lCVFlDSUFKQUFrQWdBeUFGYWkwQUFFSC9BSEVpQlVIZ0FFWU5BQ0FGUWZrQVJnMEJJQUFnQVVFTUVNcUFnSUFBT3dFRURCVUxJQUpCbUFKcUlBRVFzNEdBZ0FBZ0FDQUNLUU9ZQWpjQ0FBd1VDeUFDUWFBQ2FpQUJFTFNCZ0lBQUlBQWdBaWtEb0FJM0FnQU1Fd3NnQWtHb0Ftb2dBUkN6Z1lDQUFDQUFJQUlwQTZnQ053SUFEQklMSUFKQnNBSnFJQUVRdElHQWdBQWdBQ0FDS1FPd0FqY0NBQXdSQ3dKQUFrQWdBeUFFUVFGcUlnbHFMUUFBUWY4QWNTSUZRUUpHRFFBZ0JVRVZSZzBCSUFCQ0FEY0NBQXdTQ3lBQ0lBUTJBcndDSUFFZ0JFRUNhallDSUNBQ1FZWUJPZ0RFQWlBQ0lBazJBcmdDSUFKQnlBSnFJQUVnQWtHNEFtb1F4NENBZ0FBZ0FDQUNLUVBJQWpjQ0FBd1JDeUFCSUFSQkFtbzJBaUFnQVVITUFHb29BZ0FoQlNBQ1FkQUNhaUFCRUxHQmdJQUFBa0FnQWk4QjFBSWlBMFVOQUNBQUlBTTdBUVFnQVNBRk5nSk1EQkVMSUFGQnlBQnFJUU1DUUNBQ0tBTFFBaUlFRFFBTUJ3c2dBeUFCSUFRUXc0Q0FnQUFpQkVILy93TnhEUWtEUUFKQUFrQUNRQUpBQWtBQ1FBSkFJQUVvQWhBaUNpQUJLQUlnSWdScUxRQUFRZjhBY1NJR1FVeHFEZ1FFQlFVQkFBc2dCa0ZxYWc0REFRUURBZ3NnQVNBRVFRRnFOZ0lnREFRTElBRWdCRUVCYWlJRE5nSWdEQTBMSUFaQkVVY05BUXNnQUNBQlFSWVErNENBZ0FBN0FRUWdBU0FGTmdKTURCTUxJQUZCTHhERWdJQ0FBQ0lFUWYvL0EzRkZEUUFnQUNBRU93RUVJQUVnQlRZQ1RBd1NDeUFDUWRnQ2FpQUJRUllRdllDQWdBQWdBaTBBM0FJTkNDQUNRZUFDYWlBQkVMS0JnSUFBQWtBZ0FpOEI1QUlpQkVVTkFDQUFJQVE3QVFRZ0FTQUZOZ0pNREJJTElBTWdBU0FDS0FMZ0FoRERnSUNBQUNJRVFmLy9BM0ZGRFFBTElBQWdCRHNCQkNBQklBVTJBa3dNRUFzZ0FrSElCbW9nQkRZQ0FDQUNJQWsyQXNRR0lBSWdBellDd0FZZ0FrSDBBRG9BekFZZ0FrSFlCV29nQVNBQ1FjQUdhaERIZ0lDQUFDQUNLUVBZQlNJSVFvQ0FnSUNBZ0VDRElRY2dDRUlnaUtjaEJRd0tDeUFCSUFWQkFXb2lCVFlDSUF3TEN5QUNRZEFGYWlBQkVMV0JnSUFBSUFBZ0Fpa0QwQVUzQWdBTURRc2dBU0FFUVFGcU5nSWdJQUpCeUFWcUlBRVF0WUdBZ0FBZ0FDQUNLUVBJQlRjQ0FBd01DeUFCSUFSQkFXbzJBaUFnQWtHZ0JXb2dBUkRMZ0lDQUFBSkFJQUl2QWFRRklnVkZEUUFnQUNBRk93RUVEQXdMSUFJb0FxQUZJUU1nQWtHb0JXb2dBVUVSRU5hQWdJQUFBa0FnQWk4QnJBVWlCVVVOQUNBQUlBVTdBUVFNREFzZ0FrRzRCV29nQWlnQ3FBVTJBZ0FnQWtHSkFUb0F2QVVnQWlBRE5nSzBCU0FDSUFRMkFyQUZJQUpCd0FWcUlBRWdBa0d3QldvUXg0Q0FnQUFnQUNBQ0tRUEFCVGNDQUF3TEN3SkFBa0FDUUFKQUFrQWdBeUFFUVFGcUlnVnFMUUFBUWY4QWNVRVZSZzBBSUFFZ0JUWUNJQ0FDUWZnRWFpQUJRUmtRdllDQWdBQWdBaTBBL0FRaUJVVU5BUXdFQ3lBQklBUkJBbW8yQWlBQ1FBTkFJQUpCeEFScUlBRkJGaEM5Z0lDQUFDQUNMUURJQkEwRElBSkJ6QVJxSUFFUXZvQ0FnQUFDUUNBQ0x3SFVCQ0lGUlEwQUlBQWdCVHNCQkF3UkN5QUNRZGdFYWlBQlFRSVExb0NBZ0FBQ1FDQUNMd0hjQkNJRlJRMEFJQUFnQlRzQkJBd1JDd0pBQWtBQ1FBSkFJQUVvQWhBZ0FTZ0NJQ0lGYWkwQUFFSC9BSEVpQTBGTWFnNEVCUUVCQWdBTEFrQWdBMEZxYWc0REF3RUZBQXNnQTBFUlJnMEVDeUFCUVN3UXhJQ0FnQUFpQlVILy93TnhSUTBDSUFBZ0JUc0JCQXdTQ3lBQklBVkJBV28yQWlBTUFRc0xJQUVnQlVFQmFqWUNJQXdEQ3lBQUlBRkJGaEQ3Z0lDQUFEc0JCQXdPQ3lBQlFSa1Fub0NBZ0FBaUEwSC8vd054UlEwQ0lBQWdBenNCQkF3TkN5QUJLQUlnUVg5cUlRVUxJQUpCNkFScUlBVTJBZ0FnQWlBRU5nTGdCQ0FDUVk0Qk9nRHNCQ0FDUWZBRWFpQUJJQUpCNEFScUVNZUFnSUFBSUFBZ0Fpa0Q4QVEzQWdBTUN3c2dBa0dBQldvZ0FVRUNFTDJBZ0lBQUFrQWdBaTBBaEFVaUF3MEFJQUZCQWhDZWdJQ0FBQ0lKUWYvL0EzRkZEUUFnQUNBSk93RUVEQXNMSUFKQmtBVnFJQUlvQW9BRlFRQWdBeHMyQWdBZ0FrR29BVG9BbEFVZ0FpQUVOZ0tJQlNBQ0lBSW9BdmdFUVFBZ0JSczJBb3dGSUFKQm1BVnFJQUVnQWtHSUJXb1F4NENBZ0FBZ0FDQUNLUU9ZQlRjQ0FBd0tDd0pBQWtBQ1FBSkFBMEFnQWtIQUEyb2dBVUVXRUwyQWdJQUFJQUl0QU1RRERRTWdBa0hJQTJvZ0FSRExnSUNBQUFKQUlBSXZBY3dESWdSRkRRQWdBQ0FFT3dFRUlBRWdCVFlDVEF3UEN3SkFJQU1nQVNBQ0tBTElBeEREZ0lDQUFDSUVRZi8vQTNGRkRRQWdBQ0FFT3dFRUlBRWdCVFlDVEF3UEN3SkFBa0FDUUNBQktBSVFJZ29nQVNnQ0lDSUVhaTBBQUVIL0FIRWlCa0ZNYWc0RUJRSUNBQUVMSUFFZ0JFRUJhallDSUF3Q0N3SkFJQVpCYW1vT0F3TUJCQUFMSUFaQkVVWU5Bd3NnQVVFdkVNU0FnSUFBSWdSQi8vOERjVVVOQUFzZ0FDQUVPd0VFSUFFZ0JUWUNUQXdOQ3lBQklBUkJBV29pQXpZQ0lBd0NDeUFBSUFGQkZoRDdnSUNBQURzQkJDQUJJQVUyQWt3TUN3c2dBU2dDSUNFRElBRW9BaEFoQ2dzZ0FTZ0NTQ0FGUVFKMGFpRUVJQU1nQ21wQmZtb3RBQUFoQXdKQUFrQUNRQUpBSUFFb0Frd2dCV3NpQ2c0REFBRUNBd3NnQWtJQU53TFVBeUFDSUFrMkF0QURJQUpCMlFBNkFOd0RJQUpCNEFOcUlBRWdBa0hRQTJvUXg0Q0FnQUFnQVNBRk5nSk1JQUFnQWlrRDRBTTNBZ0FNREFzZ0FrSHdBMnBCQURZQ0FDQUNJQWsyQXVnRElBSWdCQ2dDQURZQzdBTWdBa0hTQUVIUkFDQURRZjhBY1VFM1JoczZBUFFESUFKQitBTnFJQUVnQWtIb0Eyb1F4NENBZ0FBZ0FTQUZOZ0pNSUFBZ0Fpa0QrQU0zQWdBTUN3c2dBaUFKTmdLQUJDQUNJQVFwQWdBM0FvUUVJQUpCMGdCQjBRQWdBMEgvQUhGQk4wWWJPZ0NNQkNBQ1FaQUVhaUFCSUFKQmdBUnFFTWVBZ0lBQUlBRWdCVFlDVENBQUlBSXBBNUFFTndJQURBb0xJQUpCbkFScUlBRWdCQ0FLRUxxQWdJQUFBa0FnQWk4QnBBUWlCRVVOQUNBQUlBUTdBUVFnQVNBRk5nSk1EQW9MSUFJZ0Fpa0NuQVEzQXF3RUlBSWdDVFlDcUFRZ0FrSFVBRUhUQUNBRFFmOEFjVUUzUmhzNkFMUUVJQUpCdUFScUlBRWdBa0dvQkdvUXg0Q0FnQUFnQVNBRk5nSk1JQUFnQWlrRHVBUTNBZ0FNQ1FzZ0FTZ0NJQ0VESUFFb0FoQWhDZ3NnQVNnQ1NDQUZRUUowYWlFRUlBTWdDbXBCZm1vdEFBQWhBd0pBQWtBQ1FDQUJLQUpNSUFWcklncEJmMm9PQWdBQkFnc2dBa0h3QW1wQkFEWUNBQ0FDSUFrMkF1Z0NJQUlnQkNnQ0FEWUM3QUlnQWtIYUFFSFpBQ0FEUWY4QWNVRTNSaHM2QVBRQ0lBSkIrQUpxSUFFZ0FrSG9BbW9ReDRDQWdBQWdBU0FGTmdKTUlBQWdBaWtEK0FJM0FnQU1DUXNnQWlBSk5nS0FBeUFDSUFRcEFnQTNBb1FESUFKQjJnQkIyUUFnQTBIL0FIRkJOMFliT2dDTUF5QUNRWkFEYWlBQklBSkJnQU5xRU1lQWdJQUFJQUVnQlRZQ1RDQUFJQUlwQTVBRE53SUFEQWdMSUFKQm5BTnFJQUVnQkNBS0VMcUFnSUFBQWtBZ0FpOEJwQU1pQkVVTkFDQUFJQVE3QVFRZ0FTQUZOZ0pNREFnTElBSWdBaWtDbkFNM0Fxd0RJQUlnQ1RZQ3FBTWdBa0hjQUVIYkFDQURRZjhBY1VFM1JoczZBTFFESUFKQnVBTnFJQUVnQWtHb0Eyb1F4NENBZ0FBZ0FTQUZOZ0pNSUFBZ0Fpa0R1QU0zQWdBTUJ3c2dBQ0FFT3dFRUlBRWdCVFlDVEF3R0MwSUFJUWdMSUFBZ0JhMUMvLzhEZzBJZ2hpQUhoQ0FJUXYvLy8vOFBnNFEzQWdBTUJBc2dBU2dDSUNFRklBRW9BaEFoQ1FzZ0FTZ0NTQ0FHUVFKMGFpRURJQVVnQ1dwQmZtb3RBQUFoQ1FKQUFrQUNRQUpBSUFFb0Frd2dCbXNpQlE0REFBRUNBd3NnQWtJQU53TEVCaUFDSUFRMkFzQUdJQUpCaWdFNkFNd0dJQUpCMkFWcUlBRWdBa0hBQm1vUXg0Q0FnQUFnQVNBR05nSk1JQUlwQTlnRklnaENnSUNBZ0lDQVFJTWhCeUFJUWlDSXB5RUZEQVFMSUFKQnlBWnFRUUEyQWdBZ0FpQUVOZ0xBQmlBQ0lBTW9BZ0EyQXNRR0lBSkJpMzlCaW44Z0NVSC9BSEZCTjBZYk9nRE1CaUFDUWRnRmFpQUJJQUpCd0FacUVNZUFnSUFBSUFFZ0JqWUNUQ0FDS1FQWUJTSUlRb0NBZ0lDQWdFQ0RJUWNnQ0VJZ2lLY2hCUXdEQ3lBQ0lBUTJBc0FHSUFJZ0F5a0NBRGNDeEFZZ0FrR0xmMEdLZnlBSlFmOEFjVUUzUmhzNkFNd0dJQUpCMkFWcUlBRWdBa0hBQm1vUXg0Q0FnQUFnQVNBR05nSk1JQUlwQTlnRklnaENnSUNBZ0lDQVFJTWhCeUFJUWlDSXB5RUZEQUlMSUFKQjJBVnFJQUVnQXlBRkVMcUFnSUFBSUFJdkFlQUZJZ1VOQUNBQ0lBSXBBdGdGTndMRUJpQUNJQVEyQXNBR0lBSkJqWDlCakg4Z0NVSC9BSEZCTjBZYk9nRE1CaUFDUWJnR2FpQUJJQUpCd0FacUVNZUFnSUFBSUFFZ0JqWUNUQ0FDS1FPNEJpSUlRb0NBZ0lDQWdFQ0RJUWNnQ0VJZ2lLY2hCUXdCQ3lBQklBWTJBa3hDQUNFSFFnQWhDQXNnQUNBRnJVTC8vd09EUWlDR0lBZUVJQWhDLy8vLy93K0RoRGNDQUFzZ0FrSFFCbW9rZ0lDQWdBQUx3UW9CQjM4amdJQ0FnQUJCZ0FKcklnTWtnSUNBZ0FBQ1FBSkFBa0FDUUFKQUFrQUNRQ0FCS0FJUUlnUWdBU2dDSUNJRmFpMEFBRUgvQUhFaUJrRnBhZzRFQWdFRkF3QUxJQVpCQVVZTkF3c2dBRUlBTndJQURBUUxJQUVnQlVFQmFqWUNJQ0FESUFFUXk0Q0FnQUFDUUNBREx3RUVJZ1JGRFFBZ0FDQUVPd0VFREFRTElBTW9BZ0FoQkNBRFFRaHFJQUZCR3hDOWdJQ0FBQUpBSUFNdEFBeEZEUUFnQTBFUWFpQUJFTXlBZ0lBQUFrQWdBeThCRkNJR1JRMEFJQUFnQmpzQkJBd0ZDeUFES0FJUUlRWWdBMEVZYWlBQlFUUVF2WUNBZ0FBQ1FDQURMUUFjUlEwQUlBTkJJR29nQVJETGdJQ0FBQUpBSUFNdkFTUWlCMFVOQUNBQUlBYzdBUVFNQmdzZ0F5Z0NJQ0VJSUFOQktHb2dBVUVZRU5hQWdJQUFBa0FnQXk4QkxDSUhSUTBBSUFBZ0J6c0JCQXdHQ3dKQUlBRkJQR29nQVVFREVMdUFnSUFBSWdkQi8vOERjVVVOQUNBQUlBYzdBUVFNQmdzZ0FVSEFBR29pQnlBSEtBSUFJZ2xCQVdvMkFnQWdBU2dDUENBSlFRSjBhaUFFTmdJQUlBY2dCeWdDQUNJRVFRRnFOZ0lBSUFFb0Fqd2dCRUVDZEdvZ0JqWUNBQ0FISUFjb0FnQWlCRUVCYWpZQ0FDQURRVGhxSUFrMkFnQWdBU2dDUENBRVFRSjBhaUFJTmdJQUlBTkJ6QUE2QUR3Z0F5QUNOZ0kwSUFNZ0JUWUNNQ0FEUWNBQWFpQUJJQU5CTUdvUXg0Q0FnQUFnQUNBREtRTkFOd0lBREFVTElBTkJ5QUJxSUFGQkdCRFdnSUNBQUFKQUlBTXZBVXdpQjBVTkFDQUFJQWM3QVFRTUJRc0NRQ0FHRFFBZ0EwSFlBR29nQkRZQ0FDQURJQUkyQWxRZ0F5QUZOZ0pRSUFOQnlnQTZBRndnQTBIZ0FHb2dBU0FEUWRBQWFoREhnSUNBQUNBQUlBTXBBMkEzQWdBTUJRc0NRQ0FCUVR4cUlBRkJBaEM3Z0lDQUFDSUhRZi8vQTNGRkRRQWdBQ0FIT3dFRURBVUxJQUZCd0FCcUlnY2dCeWdDQUNJSVFRRnFOZ0lBSUFFb0Fqd2dDRUVDZEdvZ0JEWUNBQ0FISUFjb0FnQWlCRUVCYWpZQ0FDQURRZkFBYWlBSU5nSUFJQUVvQWp3Z0JFRUNkR29nQmpZQ0FDQURRY3NBT2dCMElBTWdBallDYkNBRElBVTJBbWdnQTBINEFHb2dBU0FEUWVnQWFoREhnSUNBQUNBQUlBTXBBM2czQWdBTUJBc2dBMEdBQVdvZ0FVRVlFTmFBZ0lBQUFrQWdBeThCaEFFaUJrVU5BQ0FBSUFZN0FRUU1CQXNnQTBHUUFXb2dCRFlDQUNBRElBSTJBb3dCSUFNZ0JUWUNpQUVnQTBIT0FEb0FsQUVnQTBHWUFXb2dBU0FEUVlnQmFoREhnSUNBQUNBQUlBTXBBNWdCTndJQURBTUxJQU1nQlRZQ29BRWdBU0FGUVFGcU5nSWdJQU5CelFBNkFLd0JJQU1nQWpZQ3BBRWdBMEd3QVdvZ0FTQURRYUFCYWhESGdJQ0FBQ0FBSUFNcEE3QUJOd0lBREFJTEFrQWdBVUVBRU1TQWdJQUFJZ1ZCLy84RGNVVU5BQ0FBSUFVN0FRUU1BZ3NnQVNBQktBSWdJZ1ZCQVdvMkFpQWdBMEhOQURvQXhBRWdBeUFDTmdLOEFTQURJQVUyQXJnQklBTkJ5QUZxSUFFZ0EwRzRBV29ReDRDQWdBQWdBQ0FES1FQSUFUY0NBQXdCQ3dKQUFrQUNRQUpBSUFRZ0JVRUJhaUlHYWkwQUFFSC9BSEVpQkVFQ1JnMEFJQVJCRlVZTkFpQUVRVHBHRFFFZ0FTQUdOZ0lnSUFGQkZoREVnSUNBQUNJQlFmLy9BM0ZGRFFNZ0FDQUJPd0VFREFRTElBTkIyQUZxSUFZMkFnQWdBeUFGTmdMUUFTQUJJQVZCQW1vMkFpQWdBMEVLT2dEY0FTQURJQUkyQXRRQklBTkI0QUZxSUFFZ0EwSFFBV29ReDRDQWdBQWdBQ0FES1FQZ0FUY0NBQXdEQ3lBRFFmQUJhaUFHTmdJQUlBTWdCVFlDNkFFZ0FTQUZRUUpxTmdJZ0lBTkJDem9BOUFFZ0F5QUNOZ0xzQVNBRFFmZ0JhaUFCSUFOQjZBRnFFTWVBZ0lBQUlBQWdBeWtEK0FFM0FnQU1BZ3NnQUVJQU53SUFEQUVMSUFCQ0FEY0NBQXNnQTBHQUFtb2tnSUNBZ0FBTGtRd0JDSDhqZ0lDQWdBQkI0QUZySWdJa2dJQ0FnQUFnQWlBQkVOdUFnSUFBQWtBQ1FDQUNMd0VFSWdORkRRQWdBQ0FET3dFRURBRUxBa0FnQWlnQ0FDSUREUUFnQUVJQU53SUFEQUVMSUFKQkNHb2dBVUVWRUwyQWdJQUFBa0FDUUFKQUFrQUNRQ0FDTFFBTVJRMEFJQUZCekFCcUtBSUFJUVFnQWlnQ0NDRUZJQUpCRUdvZ0FSQ3hnWUNBQUFKQUlBSXZBUlFpQmtVTkFDQUFJQVk3QVFRZ0FTQUVOZ0pNREFZTElBRkJ5QUJxSVFZQ1FDQUNLQUlRSWdjTkFBd0NDeUFHSUFFZ0J4RERnSUNBQUNJSFFmLy9BM0VOQkFOQUFrQUNRQUpBQWtBQ1FBSkFBa0FnQVNnQ0VDSUlJQUVvQWlBaUIyb3RBQUJCL3dCeElnbEJUR29PQkFRRkJRRUFDeUFKUVdwcURnTUJCQU1DQ3lBQklBZEJBV28yQWlBTUJBc2dBU0FIUVFGcUlnWTJBaUFNQ0FzZ0NVRVJSdzBCQ3lBQUlBRkJGaEQ3Z0lDQUFEc0JCQ0FCSUFRMkFrd01DQXNnQVVFdkVNU0FnSUFBSWdkQi8vOERjVVVOQUNBQUlBYzdBUVFnQVNBRU5nSk1EQWNMSUFKQkdHb2dBVUVXRUwyQWdJQUFJQUl0QUJ3TkF5QUNRU0JxSUFFUXNvR0FnQUFDUUNBQ0x3RWtJZ2RGRFFBZ0FDQUhPd0VFSUFFZ0JEWUNUQXdIQ3lBR0lBRWdBaWdDSUJERGdJQ0FBQ0lIUWYvL0EzRkZEUUFMSUFBZ0J6c0JCQ0FCSUFRMkFrd01CUXNnQUNBRE5nSUFJQUJCQURzQkJBd0VDd0pBQWtBQ1FBSkFBMEFnQWtId0FHb2dBVUVXRUwyQWdJQUFJQUl0QUhRTkF5QUNRZmdBYWlBQkVNdUFnSUFBQWtBZ0FpOEJmQ0lIUlEwQUlBQWdCenNCQkNBQklBUTJBa3dNQ1FzQ1FDQUdJQUVnQWlnQ2VCRERnSUNBQUNJSFFmLy9BM0ZGRFFBZ0FDQUhPd0VFSUFFZ0JEWUNUQXdKQ3dKQUFrQUNRQ0FCS0FJUUlnZ2dBU2dDSUNJSGFpMEFBRUgvQUhFaUNVRk1hZzRFQlFJQ0FBRUxJQUVnQjBFQmFqWUNJQXdDQ3dKQUlBbEJhbW9PQXdNQkJBQUxJQWxCRVVZTkF3c2dBVUV2RU1TQWdJQUFJZ2RCLy84RGNVVU5BQXNnQUNBSE93RUVJQUVnQkRZQ1RBd0hDeUFCSUFkQkFXb2lCallDSUF3Q0N5QUFJQUZCRmhEN2dJQ0FBRHNCQkNBQklBUTJBa3dNQlFzZ0FTZ0NJQ0VHSUFFb0FoQWhDQXNnQVNnQ1NDQUVRUUowYWlFSElBWWdDR3BCZm1vdEFBQWhCZ0pBQWtBQ1FDQUJLQUpNSUFScklnZ09BZ0FCQWdzZ0FrR0lBV3BCQURZQ0FDQUNJQU0yQW9RQklBSWdCVFlDZ0FFZ0FrSFhBRG9BakFFZ0FrR1FBV29nQVNBQ1FZQUJhaERIZ0lDQUFDQUJJQVEyQWt3Z0FDQUNLUU9RQVRjQ0FBd0ZDeUFDUWFBQmFpQUhLQUlBTmdJQUlBSWdBellDbkFFZ0FpQUZOZ0tZQVNBQ1FkQUFRYzhBSUFaQi93QnhRVGRHR3pvQXBBRWdBa0dvQVdvZ0FTQUNRWmdCYWhESGdJQ0FBQ0FCSUFRMkFrd2dBQ0FDS1FPb0FUY0NBQXdFQ3lBQ1FiUUJhaUFCSUFjZ0NCQzZnSUNBQUFKQUlBSXZBYndCSWdkRkRRQWdBQ0FIT3dFRUlBRWdCRFlDVEF3RUN5QUNRY0FCYWlBQklBSkJ0QUZxRU8rQWdJQUFBa0FnQWk4QnhBRWlCMFVOQUNBQUlBYzdBUVFnQVNBRU5nSk1EQVFMSUFKQjBBRnFJQUlvQXNBQk5nSUFJQUpCMWdCQjFRQWdCa0gvQUhGQk4wWWJPZ0RVQVNBQ0lBTTJBc3dCSUFJZ0JUWUN5QUVnQWtIWUFXb2dBU0FDUWNnQmFoREhnSUNBQUNBQklBUTJBa3dnQUNBQ0tRUFlBVGNDQUF3REN5QUJLQUlnSVFZZ0FTZ0NFQ0VJQ3lBQktBSklJQVJCQW5ScUlRY2dCaUFJYWtGK2FpMEFBQ0VHQWtBQ1FDQUJLQUpNSUFScklnaEJBVVlOQUNBQ1FjUUFhaUFCSUFjZ0NCQzZnSUNBQUNBQ0x3Rk1JZ2RGRFFFZ0FDQUhPd0VFSUFFZ0JEWUNUQXdEQ3lBQ1FUQnFJQWNvQWdBMkFnQWdBaUFETmdJc0lBSWdCVFlDS0NBQ1FkZ0FRZGNBSUFaQi93QnhRVGRHR3pvQU5DQUNRVGhxSUFFZ0FrRW9haERIZ0lDQUFDQUJJQVEyQWt3Z0FDQUNLUU00TndJQURBSUxJQUpCMEFCcUlBRWdBa0hFQUdvUTc0Q0FnQUFDUUNBQ0x3RlVJZ2RGRFFBZ0FDQUhPd0VFSUFFZ0JEWUNUQXdDQ3lBQ1FlQUFhaUFDS0FKUU5nSUFJQUpCM2dCQjNRQWdCa0gvQUhGQk4wWWJPZ0JrSUFJZ0F6WUNYQ0FDSUFVMkFsZ2dBa0hvQUdvZ0FTQUNRZGdBYWhESGdJQ0FBQ0FCSUFRMkFrd2dBQ0FDS1FOb053SUFEQUVMSUFBZ0J6c0JCQ0FCSUFRMkFrd0xJQUpCNEFGcUpJQ0FnSUFBQys4RkFRWi9JNENBZ0lBQVFjQUJheUlDSklDQWdJQUFJQUlnQVVINUFCQzlnSUNBQUFKQUFrQWdBaTBBQkVVTkFDQUNLQUlBSVFNZ0FrRUlhaUFCUVJBUTFvQ0FnQUFDUUNBQ0x3RU1JZ1JGRFFBZ0FDQUVPd0VFREFJTElBSkJFR29nQVJETGdJQ0FBQUpBSUFJdkFSUWlCRVVOQUNBQUlBUTdBUVFNQWdzZ0FpZ0NFQ0VGSUFKQkdHb2dBVUVSRU5hQWdJQUFBa0FnQWk4QkhDSUVSUTBBSUFBZ0JEc0JCQXdDQ3lBQ1FTQnFJQUVRN1lDQWdBQUNRQ0FDTHdFa0lnUkZEUUFnQUNBRU93RUVEQUlMSUFKQktHb2dBUkR4Z0lDQUFBSkFJQUl2QVN3aUJFVU5BQ0FBSUFRN0FRUU1BZ3NnQWlnQ0tDRUdJQUpCTUdvZ0FSRExnSUNBQUFKQUlBSXZBVFFpQkVVTkFDQUFJQVE3QVFRTUFnc2dBaWdDTUNFRUlBSkJPR29nQVVIWkFCQzlnSUNBQUFKQUFrQWdBaTBBUEVVTkFDQUNRWVFCYWlBQkVPdUFnSUFBSUFJdkFZZ0JJZ2RGRFFFZ0FDQUhPd0VFREFNTEFrQWdCZzBBSUFKQnlBQnFJQVEyQWdBZ0FpQUZOZ0pFSUFJZ0F6WUNRQ0FDUWU0QU9nQk1JQUpCMEFCcUlBRWdBa0hBQUdvUXg0Q0FnQUFnQUNBQ0tRTlFOd0lBREFNTElBSWdCRFlDWENBQ0lBWTJBbGdnQWtIZ0FHb2dBU0FDUWRnQWFoRHZnSUNBQUFKQUlBSXZBV1FpQkVVTkFDQUFJQVE3QVFRTUF3c2dBa0h3QUdvZ0FpZ0NZRFlDQUNBQ1FlOEFPZ0IwSUFJZ0JUWUNiQ0FDSUFNMkFtZ2dBa0g0QUdvZ0FTQUNRZWdBYWhESGdJQ0FBQ0FBSUFJcEEzZzNBZ0FNQWdzZ0FrR01BV29nQVJETGdJQ0FBQUpBSUFJdkFaQUJJZ2RGRFFBZ0FDQUhPd0VFREFJTElBSWdBaWdDakFFMkFwd0JJQUlnQkRZQ21BRWdBaUFHTmdLVUFTQUNRYUFCYWlBQklBSkJsQUZxRVBLQWdJQUFBa0FnQWk4QnBBRWlCRVVOQUNBQUlBUTdBUVFNQWdzZ0FrR3dBV29nQWlnQ29BRTJBZ0FnQWtId0FEb0F0QUVnQWlBRk5nS3NBU0FDSUFNMkFxZ0JJQUpCdUFGcUlBRWdBa0dvQVdvUXg0Q0FnQUFnQUNBQ0tRTzRBVGNDQUF3QkN5QUFRZ0EzQWdBTElBSkJ3QUZxSklDQWdJQUFDOVVFQVFkL0k0Q0FnSUFBUWZBQWF5SUNKSUNBZ0lBQUlBSkJDR29nQVVIZ0FCQzlnSUNBQUFKQUFrQUNRQUpBSUFJdEFBeEZEUUFnQVVITUFHb29BZ0FoQXlBQ0tBSUlJUVFnQWtFUWFpQUJFUENBZ0lBQUFrQWdBaThCRkNJRlJRMEFJQUFnQlRzQkJBd0RDeUFDS0FJUUlRWWdBa0VZYWlBQkVNdUFnSUFBQWtBZ0FpOEJIQ0lGUlEwQUlBQWdCVHNCQkF3REN5QUJRY2dBYWlFSElBSW9BaGdoQlNBQ1FTQnFJQUZCMlFBUXZZQ0FnQUFDUUFKQUlBSXRBQ1FpQ0VVTkFBSkFJQWNnQVNBRkVNT0FnSUFBSWdWQi8vOERjVVVOQUNBQUlBVTdBUVFNQlFzZ0FrRW9haUFCRU11QWdJQUFBa0FnQWk4QkxDSUZSUTBBSUFBZ0JUc0JCQXdGQ3lBSElBRWdBaWdDS0JERGdJQ0FBQ0lGUWYvL0EzRkZEUUVnQUNBRk93RUVEQVFMSUFaQkFVWU5BaUFISUFFZ0JSRERnSUNBQUNJRlFmLy9BM0ZGRFFBZ0FDQUZPd0VFREFNTElBSkJ6QUJxSUFFZ0FTZ0NTQ0FEUVFKMGFpQUJLQUpNSUFOckVMcUFnSUFBQWtBZ0FpOEJWQ0lGUlEwQUlBQWdCVHNCQkF3REN5QUNRZUFBYWlBSVFRQkhRUjkwSUFaQi8vLy8vd2R4Y2pZQ0FDQUNRZklBT2dCa0lBSWdBaWdDVERZQ1hDQUNJQVEyQWxnZ0FrSG9BR29nQVNBQ1FkZ0FhaERIZ0lDQUFDQUJJQU0yQWt3Z0FDQUNLUU5vTndJQURBTUxJQUJDQURjQ0FBd0NDeUFDUVRocUlBVTJBZ0FnQWtIeEFEb0FQQ0FDSUFRMkFqQWdBaUFCS0FKSUlBTkJBblJxS0FJQU5nSTBJQUpCd0FCcUlBRWdBa0V3YWhESGdJQ0FBQ0FCSUFNMkFrd2dBQ0FDS1FOQU53SUFEQUVMSUFFZ0F6WUNUQXNnQWtId0FHb2tnSUNBZ0FBTFhnSUJmd0YrSTRDQWdJQUFRUkJySWdJa2dJQ0FnQUFnQWlBQlFUUVF2WUNBZ0FBQ1FBSkFJQUl0QUFRTkFFSUFJUU1NQVFzZ0FrRUlhaUFCUVFJUTFvQ0FnQUFnQWlrRENDRURDeUFBSUFNM0FnQWdBa0VRYWlTQWdJQ0FBQXUyQVFJQmZ3RitJNENBZ0lBQVFSQnJJZ1lrZ0lDQWdBQkNBQ0VIQWtBZ0JTQUNTdzBBQWtBZ0JVRUJTdzBBSUFaQkNHb2dBU0FDSUFNZ0JDMEFBQkN0Z1lDQUFDQUdLUU1JSVFjTUFRc2dBa0YrYWlFQ0EwQUNRQUpBQWtBZ0F5QUNUUTBBUVFBaEEwSUFJUWNNQVFzZ0FTQURha0VDSUFSQkFoQ0tnSUNBQUVFQmNVVU5BVUtBZ0lDQUVDRUhDeUFISUFPdGhDRUhEQUlMSUFOQkFXb2hBd3dBQ3dzZ0FDQUhOd0lBSUFaQkVHb2tnSUNBZ0FBTFhnRUJmd0pBSUFGQkNHb3RBQUFOQUNBQklBSWdBeENEZ1lDQUFDSUVRZi8vQTNGRkRRQWdBQ0FFT3dFRUR3c0NRQ0FESUFKcVFYOXFMUUFBUVFwSERRQWdBVUVBTmdJY0lBRkJBVG9BSUFzZ0FDQUROZ0lBSUFCQkFEc0JCQXMrQVFKL0FrQWdBQ0FDRU0yQmdJQUFJZ05CLy84RGNRMEFJQUFnQUNnQ0JDSUVJQUpxTmdJRUlBUWdBQ2dDQUdvZ0FTQUNFTnFCZ0lBQUdnc2dBd3ZIQVFFRGZ5T0FnSUNBQUVIUUFHc2lBeVNBZ0lDQUFDQURRUkJxSUFGQndBQVEyb0dBZ0FBYUlBTkJDR29nQTBFUWFpQUNFS0NCZ0lBQUlBTW9BZ3doQkNBREtBSUlJUVVDUUFKQUlBRW9BZ2hCcXRXcTFYb2dBU2dDRkJzZ0Ftb3RBQUJCL3dCeElnRkJ1WDlxUVFKSkRRQWdBVUVFUncwQklBUkJmMm9pQVNBRUlBVWdBV290QUFCQkNrWWJJUVFNQVFzZ0F5QUZJQVFRK0lDQWdBQWdBeWdDQkNFRUlBTW9BZ0FoQlFzZ0FDQUVOZ0lFSUFBZ0JUWUNBQ0FEUWRBQWFpU0FnSUNBQUF2c0F3RUdmeU9BZ0lDQUFFRVFheUlFSklDQWdJQUFJQUJCRkdvb0FnQkJxdFdxMVhvZ0FFRWdhaWdDQUNJRkd5RUdJQUJCR0dvb0FnQkJxdFdxMVhvZ0JSc2lCeUFCUVFKMGFpZ0NBQ0VJSUFBb0FnZ2hDVUVBSVFVQ1FBSkFBa0FDUUNBRFFRZHhRWDFxRGdRQkFBQURBQXNnQVVFQmFpRUJEQUVMSUFZZ0FVRUJhaUlCYWkwQUFFSC9BSEZCTjBZTkFDQUVJQWsyQWdBZ0JFRXNFSUtCZ0lBQUlnVkIvLzhEY1EwQkN5QUVRUVJxSUFBZ0NDQUNhaUFISUFGQkFuUnFLQUlBRUtpQWdJQUFJQVF2QVFRaUJRMEFJQVF0QUFZaEFrRUFJUVVDUUFKQUFrQUNRQUpBQWtBZ0EwRUhjUTRHQmdBQkFnTUVCZ3RCQUNFRklBSkJBWEVOQlNBRUlBazJBZ2dnQkVFSWFrRWdFSUtCZ0lBQUlRVU1CUXRCQUNFRklBSkJBWEVOQkF3REN3SkFJQVlnQVdvdEFBQkIvd0J4UVRkSERRQWdBQ0FCUVFJUWhvR0FnQUFoQlF3RUMwRUFJUVVnQWtFQmNRMEREQUlMQWtBZ0JpQUJhaTBBQUVIL0FIRkJOMGNOQUNBQUlBRkJBUkNHZ1lDQUFDRUZEQU1MUVFBaEJTQUNRUUZ4RFFJZ0JDQUpOZ0lNSUFSQkRHcEJJQkNDZ1lDQUFDRUZEQUlMQWtBZ0JpQUJhaTBBQUVIL0FIRkJFa2NOQUNBQUlBRkJBaENHZ1lDQUFDRUZEQUlMUVFBaEJTQUNRUUZ4RFFFTElBa1FnWUdBZ0FBaEJRc2dCRUVRYWlTQWdJQ0FBQ0FGQ3cwQUlBQWdBUkRYZ1lDQUFLY0xzd0VCQTM4amdJQ0FnQUJCSUdzaUFpU0FnSUNBQUNBQ0lBRW9BZ1EyQWhnZ0FpQUJLQUlJSWdNMkFod2dBU2dDQUNFRVFYUWhBUUpBQTBBZ0FVVU5BU0FDUVF4cUlBRkJ1SkxBZ0FCcUtBSUFRUUowYWlBRU5nSUFJQVFnQVVHc2tzQ0FBR29vQWdBZ0EyeHFJUVFnQVVFRWFpRUJEQUFMQ3lBQUlBSXBBZ3czQWdBZ0FFRVFhaUFDUVF4cVFSQnFLQUlBTmdJQUlBQkJDR29nQWtFTWFrRUlhaWtDQURjQ0FDQUNRU0JxSklDQWdJQUFDOHdIQVFaL0FrQWdBeWdDQUNJRVFRRnFJZ1VnQWtjTkFDQUFRUUU2QUFnZ0FFRUFPZ0FFSUFBZ0FqWUNBQThMSUFNZ0JFRUNhaUlHTmdJQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBSUFFZ0JXb3RBQUFpQjBHU2Yyb09Dd0lCQVFFREFRVUpBUUVJQUFzZ0IwRWlSZzBHSUFkQkowWU5CU0FIUWR3QVJnMERDeUFBUVFFNkFBZ2dBRUVBT2dBRUlBQWdCVFlDQUE4TElBQkJDR3BCQUNnQ2hJL0FnQUEyQWdBZ0FFRUFLUUw4anNDQUFEY0NBQThMSUFCQkNHcEJBQ2dDa0kvQWdBQTJBZ0FnQUVFQUtRS0lqOENBQURjQ0FBOExJQUJCQ0dwQkFDZ0NuSS9BZ0FBMkFnQWdBRUVBS1FLVWo4Q0FBRGNDQUE4TElBQkJDR3BCQUNnQ3FJL0FnQUEyQWdBZ0FFRUFLUUtnajhDQUFEY0NBQThMSUFCQkNHcEJBQ2dDdEkvQWdBQTJBZ0FnQUVFQUtRS3NqOENBQURjQ0FBOExJQUJCQ0dwQkFDZ0N3SS9BZ0FBMkFnQWdBRUVBS1FLNGo4Q0FBRGNDQUE4TElBUkJCR29pQ0NBR0lBZ2dCa3NiSVFsQkFDRUZBMEFDUUFKQUFrQWdCaUFJVHcwQUFrQWdBaUFHUncwQUlBQkJBVG9BQ0NBQVFRRTZBQVFnQUNBQ05nSUFEd3NnQVNBR2FpMEFBQ0lFUVZCcUlnZEIvd0Z4UVFwSkRRRUNRQ0FFUVo5L2FrSC9BWEZCQlVzTkFDQUZRUVIwSUFScVFhbC9haUVGREFNTEFrQWdCRUcvZjJwQi93RnhRUVZMRFFBZ0JVRUVkQ0FFYWtGSmFpRUZEQU1MSUFCQkFUb0FDQ0FBUVFFNkFBUU1CUXNnQUVFQU9nQUlJQU1nQ1RZQ0FDQUFRUUpxUVFBNkFBQWdBQ0FGUWY4QmNUc0JBQThMSUFjZ0JVRUVkR29oQlFzZ0JrRUJhaUVHREFBTEN3SkFJQVlnQWs4TkFDQUJJQVpxTFFBQVFmc0FSZzBDQ3lBQVFRRTZBQWdnQUVFRk9nQUVDeUFBSUFZMkFnQVBDd0pBSUFSQkEyb2lCaUFDU1EwQUlBQkJBVG9BQ0NBQVFRTTZBQVFnQUNBR05nSUFEd3NDUUNBQklBWnFMUUFBUWYwQVJnMEFRUUFoQndOQUFrQUNRQUpBQWtBZ0FpQUdSZzBBSUFFZ0Jtb3RBQUFpQkVIOUFFWU5BU0FFUVZCcUlnVkIvd0Z4UVFwUERRSU1Bd3NnQUVFQk9nQUlJQUJCQmpvQUJDQUFJQUkyQWdBUEN5QUFJQWM3QVFBZ0FFRUFPZ0FJSUFNZ0JrRUJhallDQUNBQVFRSnFJQWRCZ0lEOEFIRkJFSFk2QUFBUEN3SkFJQVJCbjM5cVFmOEJjVUVGU3cwQUlBUkJxWDlxSVFVTUFRc0NRQ0FFUWI5L2FrSC9BWEZCQlVzTkFDQUVRVWxxSVFVTUFRc2dBRUVCT2dBSUlBQkJBem9BQkNBQUlBWTJBZ0FQQ3dKQUlBZEJCSFFnQlVIL0FYRnFJZ2RCLy8vREFFME5BQ0FBUVFFNkFBZ2dBRUVFT2dBRUlBQWdCallDQUE4TElBWkJBV29oQmd3QUN3c2dBRUVCT2dBSUlBQkJBam9BQkNBQUlBWTJBZ0FMMmdFQkJYOGpnSUNBZ0FCQjRBQnJJZ01rZ0lDQWdBQWdBMEVVYWlBQVFReHFRY0FBRU5xQmdJQUFHaUFBS0FJSUlRUWdBMEVJYWlBRFFSUnFJQUVRdjRHQWdBQWdBeUFFTmdKVUlBTW9BZ3doQlNBREtBSUlJUVlDUUNBRFFkUUFha0hZbnNDQUFFRUNFSVNCZ0lBQUlnZEIvLzhEY1EwQUlBTWdCRFlDV0NBRFFkZ0FhaUFHUVFKcUlBVkJmV29RMUlHQWdBQWlCMEgvL3dOeERRQWdBeUFFTmdKY0lBTkIzQUJxUVNJUWdvR0FnQUFpQjBILy93TnhEUUFnQUNBQklBVWdBaERBZ1lDQUFDRUhDeUFEUWVBQWFpU0FnSUNBQUNBSEM0OEJBUU4vSTRDQWdJQUFRZEFBYXlJREpJQ0FnSUFBSUFOQkRHb2dBRUVNYWtIQUFCRGFnWUNBQUJvZ0FDZ0NDQ0VFSUFNZ0EwRU1haUFCRUwrQmdJQUFJQU1nQkRZQ1RBSkFJQU5CekFCcUlBTW9BZ0JCQW1vZ0F5Z0NCQ0lGUVgxcUVOU0JnSUFBSWdSQi8vOERjUTBBSUFBZ0FTQUZJQUlRd0lHQWdBQWhCQXNnQTBIUUFHb2tnSUNBZ0FBZ0JBc2tBQ0FBSUFFb0Fpd2dBa0VDZEdvaUFpa0NBRGNDQUNBQUlBSkJDR29wQWdBM0FnZ0xNUUFnQUNBQktBSXNJQUpCQW5ScUlnSXBBZ0EzQWdBZ0FDQUNRUkJxS0FJQU5nSVFJQUFnQWtFSWFpa0NBRGNDQ0FzeEFDQUFJQUVvQWl3Z0FrRUNkR29pQWlrQ0FEY0NBQ0FBSUFKQkVHb3BBZ0EzQWhBZ0FDQUNRUWhxS1FJQU53SUlDK0FDQlFKL0FuNENmd0orQW44Z0FTZ0NDRUdxMWFyVmVpQUJLQUlVR3lFRElBSW9BZ0FpQkVGL2FpRUJJQVN0SVFWQ0FDRUdRUUFoQjBFQUlRaENBQ0VKUWdBaENnTkFBa0FDUUNBRlVBMEFBa0FnQXlBQmFpMEFBRUgvQUhFaUJFR2pmMnBCQWtrTkFBSkFJQVJCQTBZTkFBSkFJQVJCOGdCR0RRQUNRQ0FFUWVvQVJnMEFJQVJCMVFCSERRUkJBU0VJSUFFaEN3d0ZDMEVCSVFjZ0FTRU1EQVFMSUFHdFFvQ0FnSUFRaENFS0RBTUxJQUd0UW9DQWdJQVFoQ0VKREFJTElBR3RRb0NBZ0lBUWhDRUdEQUVMSUFCQkFEc0FCU0FBSUFjNkFBUWdBQ0FNTmdJQUlBQkJBRHNBSlNBQUlBZzZBQ1FnQUNBTE5nSWdJQUFnQ2pjQ0dDQUFJQWszQWhBZ0FDQUdOd0lJSUFCQkIycEJBRG9BQUNBQVFTZHFRUUE2QUFBZ0FDQUNLUUlBTndJb0lBQkJNR29nQWtFSWFpa0NBRGNDQUNBQVFUaHFJQUpCRUdvcEFnQTNBZ0FQQ3lBQlFYOXFJUUVnQlVKL2ZDRUZEQUFMQys0QkF3Ti9BWDRGZnlPQWdJQ0FBRUVRYXlJQ0pJQ0FnSUFBUVppU3dJQUFJUU1DUUNBQUtBSUVSUTBBSUFBb0FnQWhCQ0FCRUltQmdJQUFJUVVDUUFKQUlBUU5BRUVBSVFaQmZ5RUhEQUVMSUFSQmZHb29BZ0FpQmtGL2FpRUhDeUFFUVhocUlRZ2dCeUFGcDNFaEFDQUZRam1JcHlFSkEwQWdCQ0FBYWl3QUFDSUtSUTBCSUFaRkRRRUNRQ0FLUVg5S0RRQWdDU0FLUWY4QWNVY05BQ0FJS0FJQUlBQkJBblJxS0FJQUlBRkhEUUFnQWtFQk9nQU1JQUpCQ0dvaEF3d0NDeUFHUVg5cUlRWWdBRUVCYWlBSGNTRUFEQUFMQ3lBRExRQUVJUUFnQWtFUWFpU0FnSUNBQUNBQVFRQkhDN29DQVFkL0k0Q0FnSUFBUVpBQmF5SUZKSUNBZ0lBQUlBVkJER29nQUVFTWFrSEFBQkRhZ1lDQUFCb2dCU2dDSkVHcTFhclZlaUFGUVRScUtBSUFHeUVHSUFCQjVBQnFJUWNnQUNnQ0NDRUlRUUFoQ1FOL0FrQUNRQUpBQWtBZ0F5QUpSZzBBSUFJb0FnQWhDaUFKUlEwQklBQWdDaEN1Z0lDQUFDSUxRZi8vQTNGRkRRRU1BZ3NnQ0JDTWdZQ0FBQ0FBSUFWQkRHb2dBUkNQZ1lDQUFDQUVFSWFCZ0lBQUlRc01BUXNnQnlBS0VNcUJnSUFBUVFGeERRRUNRQ0FHSUFwcUxRQUFRWDFxUWY4QmNVRUVTUTBBSUFBZ0NrRUZFS3FBZ0lBQUlndEIvLzhEY1VVTkFnd0JDeUFGUWN3QWFpQUZRUXhxSUFvUWtZR0FnQUFnQUNBRlFjd0Fha0VBUVFVUWtvR0FnQUFpQzBILy93TnhSUTBCQ3lBRlFaQUJhaVNBZ0lDQUFDQUxEd3NnQWtFRWFpRUNJQWxCQVdvaENRd0FDd3R6QVFKL0k0Q0FnSUFBUVNCcklnTWtnSUNBZ0FBZ0F5QUJLUUlBTndNSUlBTkJGR29nQTBFSWFrRUJFTGFBZ0lBQUFrQWdBeThCSENJQkRRQWdBeWdDRkNBQ0lBTW9BaGdpQkJEYWdZQ0FBQ0VDSUFBZ0JEWUNCQ0FBSUFJMkFnQUxJQUFnQVRzQkNDQURRU0JxSklDQWdJQUFDMDhCQVg4amdJQ0FnQUJCRUdzaUFpU0FnSUNBQUNBQ1FRaHFJQUFvQWdRZ0FSRGpnSUNBQUFKQUlBSXZBUXdpQVEwQUlBQWdBaWdDQ0JDWGdJQ0FBQ0VCQ3lBQ1FSQnFKSUNBZ0lBQUlBRUwrZ1FCQm44amdJQ0FnQUJCTUdzaUFpU0FnSUNBQUNBQUtBSUVJUU1nQUNnQ0FDRUVRUUFoQlFOL0FrQUNRQUpBSUFVZ0EwY05BRUVBSVFZTUFRc0NRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQWdCQ0FGYWkwQUFDSUFRWGRxRGdVRUFnRUJBd0FMSUFCQklrWU5CU0FBUVNkR0RRWWdBRUhjQUVZTkJBc2dBU2dDQUNFR0FrQWdBRUdqZjJwQi93RnhRU0pKRFFBZ0FFRllha0gvQVhGQk5Fa05BQ0FBUWY0QmNVRWdSZzBBSUFCQlhXcEIvd0Z4UVFSUERRY0xJQUlnQmpZQ0hDQUNRUnhxSUFBUWdvR0FnQUFpQmtILy93TnhSUTBJREFjTElBSWdBU2dDQURZQ0JDQUNRUVJxUWVTZ3dJQUFRUUlRaElHQWdBQWlCa0gvL3dOeFJRMEhEQVlMSUFJZ0FTZ0NBRFlDQ0NBQ1FRaHFRZWVnd0lBQVFRSVFoSUdBZ0FBaUJrSC8vd054UlEwR0RBVUxJQUlnQVNnQ0FEWUNEQ0FDUVF4cVFlcWd3SUFBUVFJUWhJR0FnQUFpQmtILy93TnhSUTBGREFRTElBSWdBU2dDQURZQ0VDQUNRUkJxUWUyZ3dJQUFRUUlRaElHQWdBQWlCa0gvL3dOeFJRMEVEQU1MSUFJZ0FTZ0NBRFlDRkNBQ1FSUnFRZkNnd0lBQVFRSVFoSUdBZ0FBaUJrSC8vd054UlEwRERBSUxJQUlnQVNnQ0FEWUNHQ0FDUVJocVFTY1Fnb0dBZ0FBaUJrSC8vd054RFFFTUFnc2dBaUFHTmdJZ0lBSkJJR3BCODZEQWdBQkJBaENFZ1lDQUFDSUdRZi8vQTNFTkFFRUFJUVlEUUNBQ1FTZHFJQVpxUVFocVFUQkIxd0FnQUVFUGNTSUhRUXBKR3lBSGFqb0FBQ0FHUVg5cUlRWWdBRUgvQVhFaUIwRUVkaUVBSUFkQkQwc05BQXNnQWtFbmFpQUdha0VKYWtFQUlBWnJRZFNQd0lBQUlBRVFoWUdBZ0FBaUJrSC8vd054UlEwQkN5QUNRVEJxSklDQWdJQUFJQVlQQ3lBRlFRRnFJUVVNQUFzTHNnSUZBbjhCZmdGL0FuNERmeUFCS0FJSVFhclZxdFY2SUFFb0FoUWJJUU1nQWlnQ0JDSUVRWDlxSVFFZ0JLMGhCVUVBSVFaQ0FDRUhRZ0FoQ0FOQUFrQUNRQUpBSUFWUURRQUNRQ0FESUFGcUxRQUFRZjhBY1NJSlFhTi9haUlLUVExTERRQUNRRUVCSUFwMFFhTUJjUTBBSUFwQkRVY05BVUVCSVFZZ0FTRUxEQVFMSUFHdFFvQ0FnSUFRaENFSERBTUxJQWxCQTBZTkFRc2dBeUFFUVFGcUlnRnFMUUFBSVFvZ0FFRUFPd0FGSUFBZ0Jqb0FCQ0FBSUFzMkFnQWdBRUVIYWtFQU9nQUFJQUFnQ0RjQ0VDQUFJQWMzQWdnZ0FDQUVRUUpxSUFFZ0NrSC9BSEZCQWtZaUNoczJBaUFnQUNBQnJVS0FnSUNBRUlSQ0FDQUtHemNDR0NBQVFTUnFJQUpCSkJEYWdZQ0FBQm9QQ3lBQnJVS0FnSUNBRUlRaENBc2dBVUYvYWlFQklBVkNmM3doQlF3QUN3dWdBUUVDZjBFQklRTUNRQ0FCS0FJSVFhclZxdFY2SUFFb0FoUWJJZ1FnQWlnQ0FDSUJhaTBBQUVIL0FIRkIxUUJHRFFBQ1FDQUJEUUJCQUNFRERBRUxJQVFnQVVGL2FpSUJhaTBBQUVIL0FIRkIxUUJHSVFNTElBQkJBRHNBQlNBQUlBTTZBQVFnQUNBQk5nSUFJQUJCQjJwQkFEb0FBQ0FBSUFJcEFnQTNBZ2dnQUVFUWFpQUNRUWhxS1FJQU53SUFJQUJCR0dvZ0FrRVFhaWdDQURZQ0FBdXRBUUVDZnlPQWdJQ0FBRUhBQUdzaUF5U0FnSUNBQUFKQUFrQUNRQ0FESUFCQkRHcEJ3QUFRMm9HQWdBQWlBeWdDQ0VHcTFhclZlaUFEUVJScUtBSUFHeUFESUFFUWo0R0FnQUJCQVdvaUJHb3RBQUJCL3dCeFFUZEhEUUFnQWtFSGNVRURSZzBBSUFBZ0FVRUFFS3FBZ0lBQUlnRkIvLzhEY1VVTkFRd0NDeUFBSUFFZ0FoQ3FnSUNBQUNFQkRBRUxJQUFnQkNBQ0VJYUJnSUFBSVFFTElBTkJ3QUJxSklDQWdJQUFJQUVMNHdZRkJYOEJmZ0YvQW40Q2Z3SkFBa0FnQVNnQ0FDSUNRUlJxS0FJQURRQkJxdFdxMVhvaEF3d0JDeUFDS0FJSUlRTUxBa0FnQVMwQUVFVU5BQUpBSUFNZ0FTZ0NEQ0lFYWkwQUFDSUZRZjhBY1VFM1J3MEFJQUVnQkVFQmFpSUVOZ0lNSUFNZ0JHb3RBQUFoQlFzQ1FBSkFBa0FnQlVIL0FIRWlCa0VSUmcwQVFnQWhCeUFHUWNjQVJ3MENJQU5CQVdvaENDQUVyU0VIUWNjQUlRVURRQ0FGUWY4QWNVSEhBRWNOQWlBQklBUkJBV29pQmpZQ0RDQUlJQVJxTFFBQUlRVWdCaUVFREFBTEN5QUFRUUJCS0JEWmdZQ0FBQm9QQ3lBSFFvQ0FnSUFRaENFSEN3SkFBa0FDUUNBRlFmOEFjU0lHUVJ4R0RRQWdCa0hWQUVZTkFVSUFJUWtnQmtIakFFWU5BU0FFSVFZTUFnc2dBRUlBTndJSUlBQWdCemNDQUNBQlFRQTZBQkFnQUVFQk9nQWtJQUJCQURZQ0lDQUFRUUU2QUJ3Z0FDQUVOZ0lZSUFCQkVHcENBRGNDQUE4TElBRWdCRUVCYWlJR05nSU1JQVN0UW9DQWdJQVFoQ0VKSUFNZ0Jtb3RBQUFoQlF0Q0FDRUtBa0FDUUFKQUlBVkIvd0J4UVFKR0RRQWdCaUVFREFFTElBWWdBMnBCQVdvdEFBQkIvd0J4UVRSSERRRWdBU0FHUVFKcUlnUTJBZ3dnQnExQ2dJQ0FnQkNFSVFvZ0F5QUVhaTBBQUNFRkN5QUZRZjhBY1VIT0FFY05BQ0FBUVFFNkFDUWdBRUVBTmdJZ0lBQkJBVG9BSENBQUlBUTJBaGdnQUNBSk53SVFJQUFnQ2pjQ0NDQUFJQWMzQWdBZ0FTQUVRUUZxTmdJTUR3c2dBVUVBT2dBUUN3SkFJQUVvQWdnaUN5QUJLQUlFSWdSQk5Hb29BZ0JKRFFBZ0FFRUFRU2dRMllHQWdBQWFEd3NnQTBGL2FpRUlRZ0FoQ1NBQ0lBUkJNR29vQWdBZ0MwRUNkR29vQWdBaURCQ05nWUNBQUNFRVFnQWhCMElBSVFvQ1FBTkFJQWdnQkdvaEJTQUVRWDlxSWdZaEJDQUZMUUFBUWY4QWNTSUZRVFJHRFFBQ1FBSkFBa0FDUUNBRlFRSkdEUUFnQlVISEFFWU5BU0FGUWRVQVJnMENJQVZCNHdCR0RRSWdBU0FMUVFGcU5nSUlJQUVnQWlBTUVJK0JnSUFBSWdWQkFXb2lCRFlDRENBRElBUnFMUUFBUWY4QWNVRTNSZzBEREFVTElBYXRRb0NBZ0lBUWhDRUpJQVloQkF3REN5QUdyVUtBZ0lDQUVJUWhDaUFHSVFRTUFnc2dCcTFDZ0lDQWdCQ0VJUWNnQmlFRURBRUxDeUFCSUFWQkFtbzJBZ3dMSUFCQkFUb0FKQ0FBSUF3MkFpQWdBRUlBTndJWUlBQWdCemNDRUNBQUlBazNBZ2dnQUNBS053SUFJQUZCQVRvQUVBc01BQ0FCSUFBUXpvR0FnQUFMbXdNQkJYOGpnSUNBZ0FCQndBQnJJZ01rZ0lDQWdBQkJBQ0VFSUFOQkFEWUNCQU4vQWtBQ1FBSkFJQVFnQWtrTkFFRUFJUVVNQVFzQ1FBSkFJQUVnQkdvaUJpMEFBQ0lGUWR3QVJnMEFJQVZCM0FCSklBWEFRZHdBU25KRkRRRWdBMEVCTmdJMElBTWdCVG9BTHlBRElBTkJMMm8yQWpBZ0FDQURRVEJxRU5PQmdJQUFJZ1ZCLy84RGNRMENEQU1MSUFOQkNHb2dBU0FDSUFOQkJHb1F3NEdBZ0FBZ0F5Z0NCQ0lGSUFScklRY0NRQ0FETFFBUURRQUNRQ0FETHdFSUlBTXRBQXBCRUhSeUlnUkIvd0JMRFFBZ0EwRUJOZ0ljSUFNZ0JEb0FGeUFESUFOQkYybzJBaGdnQlNFRUlBQWdBMEVZYWhEVGdZQ0FBQ0lGUWYvL0EzRkZEUVVNQXdzZ0F5QUFLQUlBTmdJa0lBVWhCQ0FEUVNScUlBWWdCeENFZ1lDQUFDSUZRZi8vQTNGRkRRUU1BZ3NnQXlBQUtBSUFOZ0lvSUFVaEJDQURRU2hxSUFZZ0J4Q0VnWUNBQUNJRlFmLy9BM0ZGRFFNTUFRc2dBeUFBS0FJQU5nSThJQU5CUEdvZ0JSQ0NnWUNBQUNJRlFmLy9BM0ZGRFFFTElBTkJ3QUJxSklDQWdJQUFJQVVQQ3lBRElBUkJBV29pQkRZQ0JBd0FDd3VOQlFFR2Z5T0FnSUNBQUVHZ0FXc2lBeVNBZ0lDQUFDQURRUlJxSUFCQkRHb2lCRUhBQUJEYWdZQ0FBQm9nQTBIVUFHb2dCRUhBQUJEYWdZQ0FBQm9nQUNnQ0NDRUVBa0FDUUNBRFFlZ0FhaWdDQUEwQVFhclZxdFY2SVFWQnF0V3ExWG9oQmd3QkN5QURRZFFBYWtFTWFpZ0NBQ0VGSUFNb0Fsd2hCZ3NnQkNBRUtBSU1RUUZxTmdJTVFRWWhCeUFEUWRRQWFpQUJFSStCZ0lBQUlRZ0NRQUpBQWtBQ1FDQUNRUWR4RGdjREF3TUNBUUFEQXdzZ0NDQUdha0VCYWkwQUFFSC9BSEZCRWtjTkFnd0JDeUFJSUFacVFRRnFMUUFBUWY4QWNVRTNSdzBCQzBFQUlRY0xBa0FnQUNBQklBY1Fxb0NBZ0FBaUFVSC8vd054RFFBQ1FBSkFBa0FDUUFKQUlBSkJCM0VpQnc0SEJBUUVBQUVDQkFRTElBWWdDRUVCYWlJQmFpMEFBRUgvQUhGQk4wY05BaUFCSVFnZ0FDQUJRUVlRaG9HQWdBQWlBVUgvL3dOeFJRMEREQVFMSUFZZ0NFRUJhaUlCYWkwQUFFSC9BSEZCTjBjTkFpQUJJUWdnQUNBQlFRWVFob0dBZ0FBaUFVSC8vd054UlEwQ0RBTUxJQVlnQ0VFQmFpSUJhaTBBQUVIL0FIRkJFa2NOQVNBQklRZ2dBQ0FCUVFZUWhvR0FnQUFpQVVILy93TnhSUTBCREFJTElBTWdCRFlDbEFFZ0EwR1VBV3BCTEJDQ2dZQ0FBQ0lCUWYvL0EzRU5BUXNnQkJDTWdZQ0FBQUpBSUFkQkJrWU5BQ0FGSUFoQkFuUnFJZ0VvQWdBaEJ5QURRUWhxSUFOQkZHb2dDQkMvZ1lDQUFDQURRWmdCYWlBQUlBY2dBeWdDREdvZ0FVRUVhaWdDQUJDb2dJQ0FBQ0FETHdHWUFTSUJEUUVnQXkwQW1nRU5BQUpBUVFFZ0FrRUhjWFFpQUVFc2NRMEFRUUFoQVNBQVFSSnhSUTBDSUFNZ0JEWUNuQUVnQTBHY0FXcEJJQkNDZ1lDQUFDRUJEQUlMSUFRUWdZR0FnQUFoQVF3QkMwRUFJUUVMSUFOQm9BRnFKSUNBZ0lBQUlBRUxaQUVDZnlPQWdJQ0FBRUVRYXlJRUpJQ0FnSUFBSUFOQkFXb2hBd0pBQTBBQ1FDQURRWDlxSWdNTkFFRUFJUVVNQWdzZ0JDQUFLQUlBTmdJTUlBUkJER29nQVNBQ0VJU0JnSUFBSWdWQi8vOERjVVVOQUFzTElBUkJFR29rZ0lDQWdBQWdCUXZzQlFVQ2Z3RitBWDhDZmdKL0k0Q0FnSUFBUWVBQWF5SUNKSUNBZ0lBQUFrQUNRQUpBQWtBQ1FDQUJRUkZQRFFBZ0FVRURUUTBCSUFBMUFBQkNJSVlnQUNBQlFRRjJRZnovLy84SGNTSURhalVBQUlRaEJDQUFJQUZCZkdvaUJXbzFBQUJDSUlZZ0FDQUZJQU5yYWpVQUFJUWhCa0tzbXVMVG85THcraDhoQnd3RUMwRUFJUU5DckpyaTA2UFM4UG9mSVFkQkFDRUZJQUZCTUVrTkFrRUFJUVZDckpyaTA2UFM4UG9mSVFkQ3JKcmkwNlBTOFBvZklRUkNySnJpMDZQUzhQb2ZJUVlEUUNBRlFUQnFJZ2dnQVU4TkFpQUNRY0FBYWlBQUlBVnFJZ1VwQUFnZ0JvVkNBQ0FGS1FBQVF0dlIwSVdhMnQrQlo0VkNBQkRZZ1lDQUFDQUNRVEJxSUFWQkdHb3BBQUFnQklWQ0FDQUZRUkJxS1FBQVF1T05vK1NKM3ByZWpuK0ZRZ0FRMklHQWdBQWdBa0VnYWlBRlFTaHFLUUFBSUFlRlFnQWdCVUVnYWlrQUFFTERtZDJweDduWnpOZ0FoVUlBRU5pQmdJQUFJQUpCd0FCcVFRaHFLUU1BSUFJcEEwQ0ZJUVlnQWtFZ2FrRUlhaWtEQUNBQ0tRTWdoU0VISUFKQk1HcEJDR29wQXdBZ0Fpa0RNSVVoQkNBSUlRVU1BQXNMUWdBaEJrS3NtdUxUbzlMdytoOGhCd0pBSUFFTkFFSUFJUVFNQXdzZ0FDQUJRUUYyYWpFQUFFSUloaUFBTVFBQVFoQ0doQ0FCSUFCcVFYOXFNUUFBaENFRURBSUxJQVFnQjRVZ0JvVWhCd3NnQUNBRmFpRUpJQUVnQldzaENBSkFBMEFnQTBFUWFpSUZJQWhQRFFFZ0FrSFFBR29nQ1NBRGFpSURRUWhxS1FBQUlBZUZRZ0FnQXlrQUFFTGIwZENGbXRyZmdXZUZRZ0FRMklHQWdBQWdBa0hRQUdwQkNHb3BBd0FnQWlrRFVJVWhCeUFGSVFNTUFBc0xJQUVnQUdvaUEwRjRhaWtBQUNFR0lBTkJjR29wQUFBaEJBc2dBa0VRYWlBRVF0dlIwSVdhMnQrQlo0VkNBQ0FHSUFlRlFnQVEySUdBZ0FBZ0FpQUNRUkJxUVFocUtRTUFRdHZSMElXYTJ0K0JaNFZDQUNBQnJTQUNLUU1RaFVLdnlQWEZ4NnlIdTZCL2hVSUFFTmlCZ0lBQUlBSkJDR29wQXdBaEJ5QUNLUU1BSVFRZ0FrSGdBR29rZ0lDQWdBQWdCeUFFaFF0MUFRRitJQUFnQkNBQmZpQUNJQU4rZkNBRFFpQ0lJZ0lnQVVJZ2lDSUVmbndnQTBMLy8vLy9ENE1pQXlBQlF2Ly8vLzhQZ3lJQmZpSUZRaUNJSUFNZ0JINThJZ05DSUloOElBTkMvLy8vL3crRElBSWdBWDU4SWdGQ0lJaDhOd01JSUFBZ0FVSWdoaUFGUXYvLy8vOFBnNFEzQXdBTExBRUJmd0pBSUFKRkRRQWdBQ0VEQTBBZ0F5QUJPZ0FBSUFOQkFXb2hBeUFDUVg5cUlnSU5BQXNMSUFBTFFnRUJmd0pBSUFKRkRRQWdBa0YvYWlFQ0lBQWhBd05BSUFNZ0FTMEFBRG9BQUNBQ1JRMEJJQUpCZjJvaEFpQUJRUUZxSVFFZ0EwRUJhaUVEREFBTEN5QUFDd3VKSVFJQVFZQ0F3QUFMMkJuWURCQUFCQUFBQU4wTUVBQUVBQUFBNGd3UUFBSUFBQUFBQUFBQUFBQUFBQmNBQUFBQkFBQUFBZ0FBQUFNQUFBQUFBQUFBSkFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRUFBQUFDQUFBQUFFQUFBQUJBQUFBQWdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFFZ0FBQUFBQUFBQURBQUFBcXFxcXFnQUFBQUFBQUFBQXFxcXFxZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCQUFBQUFRQUFBQUlBQUFBREFBQUFCQUFmQUFBQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQUtEZ0FSaVVBL3dBQS93QUFIZ3dCL3dBQUhnMEIvd0FBL3dBQS93QUFSaWdBL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBS0RjQS93QUFQQ3dBUEM0QS93QUFQQzhBL3dBQVBERUEvd0FBUEMwQS93QUFQREFBL3dBQVBESUEvd0FBUmlZQS93QUFSaWtBUmlvQS93QUFSaXNBL3dBQS93QUEvd0FBUmljQS93QUEvd0FBS0RZQS93QUEvd0FBSGc0QkhoQUJNak1BL3dBQU1qUUEvd0FBSGc4QkhoRUJNalVBL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQS93QUFGRG9BL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQUtBa0Evd0FBL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQS93QUFDanNBS0RrQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBL3dBQS93QUEvd0FBQUFBQUFBQUFBQUFBQUFBQUFBQURBQUFBQ1FBQUFBd0FBQUFXQUFBQUlBQUFBQ01BQUFBcUFBQUFMUUFBQUMwQUFBQXdBQUFBTUFBQUFEQUFBQURzREJBQUFnQUFBR0VBQUFEdkRCQUFBZ0FBQUdjQUFBRHlEQkFBQWdBQUFGOEFBQUQxREJBQUF3QUFBR29BQUFENURCQUFBd0FBQUV3QUFBRDlEQkFBQXdBQUFIY0FBQUFCRFJBQUF3QUFBR0FBQUFBRkRSQUFBd0FBQUU4QUFBQUpEUkFBQXdBQUFITUFBQUFORFJBQUJBQUFBRmtBQUFBU0RSQUFCQUFBQUhFQUFBQVhEUkFBQkFBQUFGb0FBQUFjRFJBQUJRQUFBRkVBQUFBaURSQUFCUUFBQUZZQUFBQW9EUkFBQlFBQUFGUUFBQUF1RFJBQUJRQUFBRmdBQUFBMERSQUFCUUFBQUhRQUFBQTZEUkFBQlFBQUFGSUFBQUJBRFJBQUJRQUFBRndBQUFCR0RSQUFCUUFBQUZBQUFBQk1EUkFBQlFBQUFIa0FBQUJTRFJBQUJRQUFBRW9BQUFCWURSQUFCZ0FBQUd3QUFBQmZEUkFBQmdBQUFGMEFBQUJtRFJBQUJnQUFBRjRBQUFCdERSQUFCZ0FBQUhBQUFBQjBEUkFBQmdBQUFHSUFBQUI3RFJBQUJnQUFBRzRBQUFDQ0RSQUFCZ0FBQUdZQUFBQ0pEUkFBQmdBQUFHZ0FBQUNRRFJBQUJnQUFBR2tBQUFDWERSQUFCZ0FBQUdzQUFBQ2VEUkFBQndBQUFFNEFBQUNtRFJBQUJ3QUFBR01BQUFDdURSQUFCd0FBQUc4QUFBQzJEUkFBQ0FBQUFGVUFBQUMvRFJBQUNBQUFBR1FBQUFESURSQUFDQUFBQUZzQUFBRFJEUkFBQ0FBQUFGY0FBQURhRFJBQUNBQUFBRk1BQUFEakRSQUFDQUFBQUUwQUFBRHNEUkFBQ0FBQUFIZ0FBQUQxRFJBQUNRQUFBR1VBQUFEL0RSQUFDUUFBQUVrQUFBQUpEaEFBQ1FBQUFFc0FBQUFURGhBQUN3QUFBRzBBQUFBZkRoQUFDd0FBQUhJQUFBQXJEaEFBQ3dBQUFIVUFBQUEzRGhBQURnQUFBSFlBQUFBU0FSTUJGQUVWQVJZQkZ3RVlBUmtCR2dFYkFSd0JIUUVlQVI4QklBRWhBU0lCSXdFQUFDQUpDZzBMREFBQUFBQUFBQUFBQUFBQUFBQUFBQUFnQUFBQUFnvQUFBQUFBQUFBQUFBQUFBMEFBQUFBQUFBQUFBQUFBRndBQUFBQUFBQUFBQUFBQUFrQUFBQUFBQUFBQUFBQUFDY0FBQUFBQUFBQUFBQUFBQ0lBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSlFBQUFDNHVMd0FBQUFBQUFBQUFBQUlBQUFBQkFBQUFNQUFBQUFJQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJBQUFBQW9BQUFBT0FBQUFFUUFBQUJNQUFBQVhBQUFBR1FBQUFCb0FBQUFiQUFBQUhRQUFBQjBBQUFDRER4QUFBd0FBQUljUEVBQURBQUFBaXc4UUFBTUFBQUNQRHhBQUF3QUFBSk1QRUFBRUFBQUFtQThRQUFRQUFBQ2REeEFBQkFBQUFLSVBFQUFFQUFBQXB3OFFBQVFBQUFDc0R4QUFCQUFBQUxFUEVBQUZBQUFBdHc4UUFBVUFBQUM5RHhBQUJRQUFBTU1QRUFBRkFBQUF5UThRQUFZQUFBRFFEeEFBQmdBQUFOY1BFQUFHQUFBQTNnOFFBQWNBQUFEbUR4QUFCd0FBQU80UEVBQUlBQUFBOXc4UUFBZ0FBQURqRFJBQUNBQUFBQUFRRUFBSUFBQUFDUkFRQUFrQUFBQVRFQkFBQ1FBQUFCMFFFQUFLQUFBQUtCQVFBQXNBQUFBMEVCQUFEQUFBQUVFUUVBQU1BQUFBVGhBUUFBNEFBQUFBQUFBQUFBQUFBQVFBQUFBSUFBQUFDQUFBQUFBQUFBQUJBQUFBQWdBQUFFUmxkbWxqWlVKMWMza0FUM1YwVDJaTlpXMXZjbmtBVDNabGNtWnNiM2NBU1c1d2RYUlBkWFJ3ZFhRQVZISjFibU5oZEdWa1NXNXdkWFFBUTI5dWJtVmpkR2x2YmxScGJXVmtUM1YwQUVsdWRtRnNhV1JCY21kMWJXVnVkQUJPYjFOd1lXTmxUR1ZtZEFCVGVYTjBaVzFTWlhOdmRYSmpaWE1BVUdGeWMyVkZjbkp2Y2dCSmMwUnBjZ0JEYjI1dVpXTjBhVzl1VW1WelpYUkNlVkJsWlhJQVZYUm1PRVY0Y0dWamRHVmtRMjl1ZEdsdWRXRjBhVzl1QUV4dlkydFdhVzlzWVhScGIyNEFTVzUyWVd4cFpFeHBkR1Z5WVd3QVYyOTFiR1JDYkc5amF3QlRkSEpsWVcxVWIyOU1iMjVuQUU1dmRFOXdaVzVHYjNKWGNtbDBhVzVuQUZWMFpqaFBkbVZ5Ykc5dVowVnVZMjlrYVc1bkFGVnVjM1Z3Y0c5eWRHVmtSVzVqYjJScGJtY0FUbTkwVDNCbGJrWnZjbEpsWVdScGJtY0FSbWxzWlZSdmIwSnBad0JWZEdZNFJXNWpiMlJsYzFOMWNuSnZaMkYwWlVoaGJHWUFSR0Z1WjJ4cGJtZFRkWEp5YjJkaGRHVklZV3htQUZWMFpqaERZVzV1YjNSRmJtTnZaR1ZUZFhKeWIyZGhkR1ZJWVd4bUFGVnVaWGh3WldOMFpXUlRaV052Ym1SVGRYSnliMmRoZEdWSVlXeG1BRVY0Y0dWamRHVmtVMlZqYjI1a1UzVnljbTluWVhSbFNHRnNaZ0JWZEdZNFNXNTJZV3hwWkZOMFlYSjBRbmwwWlFCQ2NtOXJaVzVRYVhCbEFGVjBaamhEYjJSbGNHOXBiblJVYjI5TVlYSm5aUUJQY0dWeVlYUnBiMjVCWW05eWRHVmtBRTVsZEU1aGJXVkVaV3hsZEdWa0FGVnVaWGh3WldOMFpXUUFVMjlqYTJWMFRtOTBRMjl1Ym1WamRHVmtBRUZqWTJWemMwUmxibWxsWkFCRWFYTnJVWFZ2ZEdFQVNXNTJZV3hwWkZWMFpqZ0FBQUFBQUFBQUFBQUFBSWdMRUFBSkFBQUFkUW9RQUFvQUFBQllDUkFBQ3dBQUFKWUpFQUFMQUFBQU9Ba1FBQW9BQUFDR0NSQUFEd0FBQUhzTEVBQU1BQUFBSEFzUUFBb0FBQUNpQ1JBQUR3QUFBRDBMRUFBUUFBQUFLQW9RQUJFQUFBRHlDUkFBRFFBQUFBOEtFQUFLQUFBQXd3a1FBQlVBQUFCZEN4QUFDZ0FBQUhNSkVBQVNBQUFBWXdvUUFCRUFBQUJEQ1JBQUN3QUFBTDBKRUFBRkFBQUFhQXNRQUJJQUFBQk9DeEFBRGdBQUFCb0tFQUFOQUFBQVR3b1FBQk1BQUFDWkNoQUFGUUFBQU9zS0VBQWJBQUFBelFvUUFCMEFBQUJQQ1JBQUNBQUFBQ3NMRUFBUkFBQUFyd29RQUIwQUFBQ3lDUkFBQ2dBQUFBY0xFQUFVQUFBQTJRa1FBQmdBQUFBNkNoQUFGQUFBQUlBS0VBQVlBQUFBSndzUUFCVUFBQUNTQ3hBQUN3QUFBQUFLRUFBT0FBQUFaQWtRQUE0QUFBQUFRZGlad0FBTG5nZi8vZ0FBQVA3L0FBQUEvdjhBLy80QTc3dS9BR2xtQUc5eUFHWnVBSEIxWWdCaGJtUUFkbUZ5QUdadmNnQmhjMjBBZEhKNUFHVnNjMlVBZEdWemRBQmxiblZ0QUdGM1lXbDBBR052Ym5OMEFHTmhkR05vQUdSbFptVnlBSFZ1YVc5dUFHSnlaV0ZyQUdWeWNtOXlBR0Z6ZVc1akFIZG9hV3hsQUdGc2FXZHVBSEpsZEhWeWJnQmxlSEJ2Y25RQVpYaDBaWEp1QUhOM2FYUmphQUJwYm14cGJtVUFjM1J5ZFdOMEFHOXdZWEYxWlFCdmNtVnNjMlVBY0dGamEyVmtBSEpsYzNWdFpRQmhibmwwZVhCbEFHNXZZV3hwWVhNQWMzVnpjR1Z1WkFCamIyMXdkR2x0WlFCdWIybHViR2x1WlFCbGNuSmtaV1psY2dCamIyNTBhVzUxWlFCallXeHNZMjl1ZGdCaGJubG1jbUZ0WlFCMmIyeGhkR2xzWlFCdWIzTjFjM0JsYm1RQVlXUmtjbk53WVdObEFHRnNiRzkzZW1WeWJ3QnNhVzVyYzJWamRHbHZiZ0IwYUhKbFlXUnNiMk5oYkFCMWJuSmxZV05vWVdKc1pRQjFjMmx1WjI1aGJXVnpjR0ZqWlFCakFDOHZBQW9BZW1sbklHWnRkRG9nYjI0QUx5OGdlbWxuSUdadGREb2diMjRLQUhwcFp5Qm1iWFE2SUc5bVpnQXZMeUI2YVdjZ1ptMTBPaUJ2Wm1ZS0FDQWdJQ0FBWlhKeWIzSTZJSHR6ZlFvQUxpb3FBQ0VBZkFCOGZBQjhQUUE5QUQwOUFEMCtBQ0U5QUNnQUtRQTdBQ1VBSlQwQWV3QjlBRnNBWFFBdUFDNHFBQzR1QUM0dUxnQmVBRjQ5QUNzQUt5c0FLejBBS3lVQUt5VTlBQ3Q4QUN0OFBRQXRBQzA5QUMwbEFDMGxQUUF0ZkFBdGZEMEFLZ0FxUFFBcUtnQXFKUUFxSlQwQUtud0FLbnc5QUMwK0FEb0FMd0F2UFFBc0FDWUFKajBBUHdBOEFEdzlBRHc4QUR3OFBRQThQSHdBUER4OFBRQStBRDQ5QUQ0K0FENCtQUUIrQUh0emZRb0FMQW9BTENBQU93b0FRQ0lBWHlBOUlBQkFhVzF3YjNKMEFFbHViR2x1WlFCcGJteHBibVVnQUVCMGNtRndLQ2s3QU8rL3ZXWXpNZ0JtT0RBQVpqWTBBR1l4TmdCMmIybGtBSFJ5ZFdVQVpqRXlPQUJpYjI5c0FIUjVjR1VBYm5Wc2JBQmpYMmx1ZEFCbVlXeHpaUUIxYzJsNlpRQnBjMmw2WlFCalgyeHZibWNBWTE5amFHRnlBR05mZFdsdWRBQmpYM05vYjNKMEFHTmZkV3h2Ym1jQVkxOTFjMmh2Y25RQVlXNTVaWEp5YjNJQWJtOXlaWFIxY200QWRXNWtaV1pwYm1Wa0FHRnVlVzl3WVhGMVpRQmpYMnh2Ym1kc2IyNW5BR05mZFd4dmJtZHNiMjVuQUdOdmJYQjBhVzFsWDJsdWRBQmpYMnh2Ym1ka2IzVmliR1VBWTI5dGNIUnBiV1ZmWm14dllYUUFYd0FpZTMwaUFGeHVBRnh5QUZ4MEFGeGNBRndpQUZ4NEFBPT1cIjtcblxuLyoqKi8gfSksXG5cbi8qKiovIDQ4MzQ6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBwb3NzaWJsZU5hbWVzID0gW1xuXHQnQmlnSW50NjRBcnJheScsXG5cdCdCaWdVaW50NjRBcnJheScsXG5cdCdGbG9hdDMyQXJyYXknLFxuXHQnRmxvYXQ2NEFycmF5Jyxcblx0J0ludDE2QXJyYXknLFxuXHQnSW50MzJBcnJheScsXG5cdCdJbnQ4QXJyYXknLFxuXHQnVWludDE2QXJyYXknLFxuXHQnVWludDMyQXJyYXknLFxuXHQnVWludDhBcnJheScsXG5cdCdVaW50OENsYW1wZWRBcnJheSdcbl07XG5cbnZhciBnID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX3JlcXVpcmVfXy5nIDogZ2xvYmFsVGhpcztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhdmFpbGFibGVUeXBlZEFycmF5cygpIHtcblx0dmFyIG91dCA9IFtdO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHBvc3NpYmxlTmFtZXMubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAodHlwZW9mIGdbcG9zc2libGVOYW1lc1tpXV0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHBvc3NpYmxlTmFtZXNbaV07XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvdXQ7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyODUyOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEFubm90YXRlZFRleHRFZGl0OiAoKSA9PiAoLyogYmluZGluZyAqLyBBbm5vdGF0ZWRUZXh0RWRpdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENoYW5nZUFubm90YXRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIENoYW5nZUFubm90YXRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb2RlQWN0aW9uOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb2RlQWN0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29kZUFjdGlvbkNvbnRleHQ6ICgpID0+ICgvKiBiaW5kaW5nICovIENvZGVBY3Rpb25Db250ZXh0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29kZUFjdGlvbktpbmQ6ICgpID0+ICgvKiBiaW5kaW5nICovIENvZGVBY3Rpb25LaW5kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29kZUFjdGlvblRyaWdnZXJLaW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb2RlQWN0aW9uVHJpZ2dlcktpbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb2RlRGVzY3JpcHRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIENvZGVEZXNjcmlwdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvZGVMZW5zOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb2RlTGVucyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvbG9yOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb2xvciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvbG9ySW5mb3JtYXRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIENvbG9ySW5mb3JtYXRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb2xvclByZXNlbnRhdGlvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29sb3JQcmVzZW50YXRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb21tYW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb21tYW5kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29tcGxldGlvbkl0ZW06ICgpID0+ICgvKiBiaW5kaW5nICovIENvbXBsZXRpb25JdGVtKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29tcGxldGlvbkl0ZW1LaW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb21wbGV0aW9uSXRlbUtpbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlsczogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb21wbGV0aW9uSXRlbVRhZzogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29tcGxldGlvbkl0ZW1UYWcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb21wbGV0aW9uTGlzdDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29tcGxldGlvbkxpc3QpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDcmVhdGVGaWxlOiAoKSA9PiAoLyogYmluZGluZyAqLyBDcmVhdGVGaWxlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRGVsZXRlRmlsZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRGVsZXRlRmlsZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIERpYWdub3N0aWM6ICgpID0+ICgvKiBiaW5kaW5nICovIERpYWdub3N0aWMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uOiAoKSA9PiAoLyogYmluZGluZyAqLyBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRGlhZ25vc3RpY1NldmVyaXR5OiAoKSA9PiAoLyogYmluZGluZyAqLyBEaWFnbm9zdGljU2V2ZXJpdHkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBEaWFnbm9zdGljVGFnOiAoKSA9PiAoLyogYmluZGluZyAqLyBEaWFnbm9zdGljVGFnKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRG9jdW1lbnRIaWdobGlnaHQ6ICgpID0+ICgvKiBiaW5kaW5nICovIERvY3VtZW50SGlnaGxpZ2h0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBEb2N1bWVudEhpZ2hsaWdodEtpbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBEb2N1bWVudExpbms6ICgpID0+ICgvKiBiaW5kaW5nICovIERvY3VtZW50TGluayksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIERvY3VtZW50U3ltYm9sOiAoKSA9PiAoLyogYmluZGluZyAqLyBEb2N1bWVudFN5bWJvbCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIERvY3VtZW50VXJpOiAoKSA9PiAoLyogYmluZGluZyAqLyBEb2N1bWVudFVyaSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEVPTDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRU9MKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRm9sZGluZ1JhbmdlOiAoKSA9PiAoLyogYmluZGluZyAqLyBGb2xkaW5nUmFuZ2UpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBGb2xkaW5nUmFuZ2VLaW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBGb2xkaW5nUmFuZ2VLaW5kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRm9ybWF0dGluZ09wdGlvbnM6ICgpID0+ICgvKiBiaW5kaW5nICovIEZvcm1hdHRpbmdPcHRpb25zKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSG92ZXI6ICgpID0+ICgvKiBiaW5kaW5nICovIEhvdmVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5sYXlIaW50OiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmxheUhpbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxheUhpbnRLaW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmxheUhpbnRLaW5kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5sYXlIaW50TGFiZWxQYXJ0OiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmxheUhpbnRMYWJlbFBhcnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxpbmVDb21wbGV0aW9uQ29udGV4dDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5saW5lQ29tcGxldGlvbkNvbnRleHQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxpbmVDb21wbGV0aW9uSXRlbTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5saW5lQ29tcGxldGlvbkl0ZW0pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxpbmVDb21wbGV0aW9uTGlzdDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5saW5lQ29tcGxldGlvbkxpc3QpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQ6ICgpID0+ICgvKiBiaW5kaW5nICovIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIElubGluZVZhbHVlQ29udGV4dDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5saW5lVmFsdWVDb250ZXh0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb246ICgpID0+ICgvKiBiaW5kaW5nICovIElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5saW5lVmFsdWVUZXh0OiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmxpbmVWYWx1ZVRleHQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5zZXJ0UmVwbGFjZUVkaXQ6ICgpID0+ICgvKiBiaW5kaW5nICovIEluc2VydFJlcGxhY2VFZGl0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5zZXJ0VGV4dEZvcm1hdDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5zZXJ0VGV4dEZvcm1hdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEluc2VydFRleHRNb2RlOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbnNlcnRUZXh0TW9kZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIExvY2F0aW9uOiAoKSA9PiAoLyogYmluZGluZyAqLyBMb2NhdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIExvY2F0aW9uTGluazogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTG9jYXRpb25MaW5rKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgTWFya2VkU3RyaW5nOiAoKSA9PiAoLyogYmluZGluZyAqLyBNYXJrZWRTdHJpbmcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBNYXJrdXBDb250ZW50OiAoKSA9PiAoLyogYmluZGluZyAqLyBNYXJrdXBDb250ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgTWFya3VwS2luZDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWFya3VwS2luZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUGFyYW1ldGVySW5mb3JtYXRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIFBhcmFtZXRlckluZm9ybWF0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUG9zaXRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIFBvc2l0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUmFuZ2U6ICgpID0+ICgvKiBiaW5kaW5nICovIFJhbmdlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUmVuYW1lRmlsZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUmVuYW1lRmlsZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFNlbGVjdGVkQ29tcGxldGlvbkluZm86ICgpID0+ICgvKiBiaW5kaW5nICovIFNlbGVjdGVkQ29tcGxldGlvbkluZm8pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTZWxlY3Rpb25SYW5nZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2VsZWN0aW9uUmFuZ2UpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzOiAoKSA9PiAoLyogYmluZGluZyAqLyBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgU2VtYW50aWNUb2tlblR5cGVzOiAoKSA9PiAoLyogYmluZGluZyAqLyBTZW1hbnRpY1Rva2VuVHlwZXMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTZW1hbnRpY1Rva2VuczogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2VtYW50aWNUb2tlbnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTaWduYXR1cmVJbmZvcm1hdGlvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2lnbmF0dXJlSW5mb3JtYXRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTdHJpbmdWYWx1ZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3RyaW5nVmFsdWUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTeW1ib2xJbmZvcm1hdGlvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3ltYm9sSW5mb3JtYXRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTeW1ib2xLaW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBTeW1ib2xLaW5kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgU3ltYm9sVGFnOiAoKSA9PiAoLyogYmluZGluZyAqLyBTeW1ib2xUYWcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBUZXh0RG9jdW1lbnQ6ICgpID0+ICgvKiBiaW5kaW5nICovIFRleHREb2N1bWVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFRleHREb2N1bWVudEVkaXQ6ICgpID0+ICgvKiBiaW5kaW5nICovIFRleHREb2N1bWVudEVkaXQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBUZXh0RG9jdW1lbnRJZGVudGlmaWVyOiAoKSA9PiAoLyogYmluZGluZyAqLyBUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgVGV4dERvY3VtZW50SXRlbTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVGV4dERvY3VtZW50SXRlbSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFRleHRFZGl0OiAoKSA9PiAoLyogYmluZGluZyAqLyBUZXh0RWRpdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFVSSTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVVJJKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFdvcmtzcGFjZUNoYW5nZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV29ya3NwYWNlQ2hhbmdlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgV29ya3NwYWNlRWRpdDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV29ya3NwYWNlRWRpdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFdvcmtzcGFjZUZvbGRlcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV29ya3NwYWNlRm9sZGVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgV29ya3NwYWNlU3ltYm9sOiAoKSA9PiAoLyogYmluZGluZyAqLyBXb3Jrc3BhY2VTeW1ib2wpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBpbnRlZ2VyOiAoKSA9PiAoLyogYmluZGluZyAqLyBpbnRlZ2VyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgdWludGVnZXI6ICgpID0+ICgvKiBiaW5kaW5nICovIHVpbnRlZ2VyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbnZhciBEb2N1bWVudFVyaTtcbihmdW5jdGlvbiAoRG9jdW1lbnRVcmkpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICB9XG4gICAgRG9jdW1lbnRVcmkuaXMgPSBpcztcbn0pKERvY3VtZW50VXJpIHx8IChEb2N1bWVudFVyaSA9IHt9KSk7XG52YXIgVVJJO1xuKGZ1bmN0aW9uIChVUkkpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICB9XG4gICAgVVJJLmlzID0gaXM7XG59KShVUkkgfHwgKFVSSSA9IHt9KSk7XG52YXIgaW50ZWdlcjtcbihmdW5jdGlvbiAoaW50ZWdlcikge1xuICAgIGludGVnZXIuTUlOX1ZBTFVFID0gLTIxNDc0ODM2NDg7XG4gICAgaW50ZWdlci5NQVhfVkFMVUUgPSAyMTQ3NDgzNjQ3O1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGludGVnZXIuTUlOX1ZBTFVFIDw9IHZhbHVlICYmIHZhbHVlIDw9IGludGVnZXIuTUFYX1ZBTFVFO1xuICAgIH1cbiAgICBpbnRlZ2VyLmlzID0gaXM7XG59KShpbnRlZ2VyIHx8IChpbnRlZ2VyID0ge30pKTtcbnZhciB1aW50ZWdlcjtcbihmdW5jdGlvbiAodWludGVnZXIpIHtcbiAgICB1aW50ZWdlci5NSU5fVkFMVUUgPSAwO1xuICAgIHVpbnRlZ2VyLk1BWF9WQUxVRSA9IDIxNDc0ODM2NDc7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdWludGVnZXIuTUlOX1ZBTFVFIDw9IHZhbHVlICYmIHZhbHVlIDw9IHVpbnRlZ2VyLk1BWF9WQUxVRTtcbiAgICB9XG4gICAgdWludGVnZXIuaXMgPSBpcztcbn0pKHVpbnRlZ2VyIHx8ICh1aW50ZWdlciA9IHt9KSk7XG4vKipcbiAqIFRoZSBQb3NpdGlvbiBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBQb3NpdGlvbn0gbGl0ZXJhbHMuXG4gKi9cbnZhciBQb3NpdGlvbjtcbihmdW5jdGlvbiAoUG9zaXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFBvc2l0aW9uIGxpdGVyYWwgZnJvbSB0aGUgZ2l2ZW4gbGluZSBhbmQgY2hhcmFjdGVyLlxuICAgICAqIEBwYXJhbSBsaW5lIFRoZSBwb3NpdGlvbidzIGxpbmUuXG4gICAgICogQHBhcmFtIGNoYXJhY3RlciBUaGUgcG9zaXRpb24ncyBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGxpbmUsIGNoYXJhY3Rlcikge1xuICAgICAgICBpZiAobGluZSA9PT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgICAgbGluZSA9IHVpbnRlZ2VyLk1BWF9WQUxVRTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgICBjaGFyYWN0ZXIgPSB1aW50ZWdlci5NQVhfVkFMVUU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgbGluZSwgY2hhcmFjdGVyIH07XG4gICAgfVxuICAgIFBvc2l0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIFBvc2l0aW9ufSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5saW5lKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUuY2hhcmFjdGVyKTtcbiAgICB9XG4gICAgUG9zaXRpb24uaXMgPSBpcztcbn0pKFBvc2l0aW9uIHx8IChQb3NpdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBSYW5nZSBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBSYW5nZX0gbGl0ZXJhbHMuXG4gKi9cbnZhciBSYW5nZTtcbihmdW5jdGlvbiAoUmFuZ2UpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUob25lLCB0d28sIHRocmVlLCBmb3VyKSB7XG4gICAgICAgIGlmIChJcy51aW50ZWdlcihvbmUpICYmIElzLnVpbnRlZ2VyKHR3bykgJiYgSXMudWludGVnZXIodGhyZWUpICYmIElzLnVpbnRlZ2VyKGZvdXIpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdGFydDogUG9zaXRpb24uY3JlYXRlKG9uZSwgdHdvKSwgZW5kOiBQb3NpdGlvbi5jcmVhdGUodGhyZWUsIGZvdXIpIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoUG9zaXRpb24uaXMob25lKSAmJiBQb3NpdGlvbi5pcyh0d28pKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdGFydDogb25lLCBlbmQ6IHR3byB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSYW5nZSNjcmVhdGUgY2FsbGVkIHdpdGggaW52YWxpZCBhcmd1bWVudHNbJHtvbmV9LCAke3R3b30sICR7dGhyZWV9LCAke2ZvdXJ9XWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIFJhbmdlLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIFJhbmdlfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFBvc2l0aW9uLmlzKGNhbmRpZGF0ZS5zdGFydCkgJiYgUG9zaXRpb24uaXMoY2FuZGlkYXRlLmVuZCk7XG4gICAgfVxuICAgIFJhbmdlLmlzID0gaXM7XG59KShSYW5nZSB8fCAoUmFuZ2UgPSB7fSkpO1xuLyoqXG4gKiBUaGUgTG9jYXRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgTG9jYXRpb259IGxpdGVyYWxzLlxuICovXG52YXIgTG9jYXRpb247XG4oZnVuY3Rpb24gKExvY2F0aW9uKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIExvY2F0aW9uIGxpdGVyYWwuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgbG9jYXRpb24ncyB1cmkuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSBsb2NhdGlvbidzIHJhbmdlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHJhbmdlKSB7XG4gICAgICAgIHJldHVybiB7IHVyaSwgcmFuZ2UgfTtcbiAgICB9XG4gICAgTG9jYXRpb24uY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgTG9jYXRpb259IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUudXJpKSk7XG4gICAgfVxuICAgIExvY2F0aW9uLmlzID0gaXM7XG59KShMb2NhdGlvbiB8fCAoTG9jYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgTG9jYXRpb25MaW5rIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIExvY2F0aW9uTGlua30gbGl0ZXJhbHMuXG4gKi9cbnZhciBMb2NhdGlvbkxpbms7XG4oZnVuY3Rpb24gKExvY2F0aW9uTGluaykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBMb2NhdGlvbkxpbmsgbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0VXJpIFRoZSBkZWZpbml0aW9uJ3MgdXJpLlxuICAgICAqIEBwYXJhbSB0YXJnZXRSYW5nZSBUaGUgZnVsbCByYW5nZSBvZiB0aGUgZGVmaW5pdGlvbi5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0U2VsZWN0aW9uUmFuZ2UgVGhlIHNwYW4gb2YgdGhlIHN5bWJvbCBkZWZpbml0aW9uIGF0IHRoZSB0YXJnZXQuXG4gICAgICogQHBhcmFtIG9yaWdpblNlbGVjdGlvblJhbmdlIFRoZSBzcGFuIG9mIHRoZSBzeW1ib2wgYmVpbmcgZGVmaW5lZCBpbiB0aGUgb3JpZ2luYXRpbmcgc291cmNlIGZpbGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRhcmdldFVyaSwgdGFyZ2V0UmFuZ2UsIHRhcmdldFNlbGVjdGlvblJhbmdlLCBvcmlnaW5TZWxlY3Rpb25SYW5nZSkge1xuICAgICAgICByZXR1cm4geyB0YXJnZXRVcmksIHRhcmdldFJhbmdlLCB0YXJnZXRTZWxlY3Rpb25SYW5nZSwgb3JpZ2luU2VsZWN0aW9uUmFuZ2UgfTtcbiAgICB9XG4gICAgTG9jYXRpb25MaW5rLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIExvY2F0aW9uTGlua30gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUudGFyZ2V0UmFuZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGFyZ2V0VXJpKVxuICAgICAgICAgICAgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnRhcmdldFNlbGVjdGlvblJhbmdlKVxuICAgICAgICAgICAgJiYgKFJhbmdlLmlzKGNhbmRpZGF0ZS5vcmlnaW5TZWxlY3Rpb25SYW5nZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5vcmlnaW5TZWxlY3Rpb25SYW5nZSkpO1xuICAgIH1cbiAgICBMb2NhdGlvbkxpbmsuaXMgPSBpcztcbn0pKExvY2F0aW9uTGluayB8fCAoTG9jYXRpb25MaW5rID0ge30pKTtcbi8qKlxuICogVGhlIENvbG9yIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIENvbG9yfSBsaXRlcmFscy5cbiAqL1xudmFyIENvbG9yO1xuKGZ1bmN0aW9uIChDb2xvcikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3IgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlZCxcbiAgICAgICAgICAgIGdyZWVuLFxuICAgICAgICAgICAgYmx1ZSxcbiAgICAgICAgICAgIGFscGhhLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBDb2xvci5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBDb2xvcn0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLm51bWJlclJhbmdlKGNhbmRpZGF0ZS5yZWQsIDAsIDEpXG4gICAgICAgICAgICAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuZ3JlZW4sIDAsIDEpXG4gICAgICAgICAgICAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuYmx1ZSwgMCwgMSlcbiAgICAgICAgICAgICYmIElzLm51bWJlclJhbmdlKGNhbmRpZGF0ZS5hbHBoYSwgMCwgMSk7XG4gICAgfVxuICAgIENvbG9yLmlzID0gaXM7XG59KShDb2xvciB8fCAoQ29sb3IgPSB7fSkpO1xuLyoqXG4gKiBUaGUgQ29sb3JJbmZvcm1hdGlvbiBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBDb2xvckluZm9ybWF0aW9ufSBsaXRlcmFscy5cbiAqL1xudmFyIENvbG9ySW5mb3JtYXRpb247XG4oZnVuY3Rpb24gKENvbG9ySW5mb3JtYXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9ySW5mb3JtYXRpb24gbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGNvbG9yKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByYW5nZSxcbiAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBDb2xvckluZm9ybWF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIENvbG9ySW5mb3JtYXRpb259IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIENvbG9yLmlzKGNhbmRpZGF0ZS5jb2xvcik7XG4gICAgfVxuICAgIENvbG9ySW5mb3JtYXRpb24uaXMgPSBpcztcbn0pKENvbG9ySW5mb3JtYXRpb24gfHwgKENvbG9ySW5mb3JtYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgQ29sb3IgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgQ29sb3JQcmVzZW50YXRpb259IGxpdGVyYWxzLlxuICovXG52YXIgQ29sb3JQcmVzZW50YXRpb247XG4oZnVuY3Rpb24gKENvbG9yUHJlc2VudGF0aW9uKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvckluZm9ybWF0aW9uIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCB0ZXh0RWRpdCwgYWRkaXRpb25hbFRleHRFZGl0cykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgICB0ZXh0RWRpdCxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxUZXh0RWRpdHMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIENvbG9yUHJlc2VudGF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIENvbG9ySW5mb3JtYXRpb259IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhYmVsKVxuICAgICAgICAgICAgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUudGV4dEVkaXQpIHx8IFRleHRFZGl0LmlzKGNhbmRpZGF0ZSkpXG4gICAgICAgICAgICAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5hZGRpdGlvbmFsVGV4dEVkaXRzKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5hZGRpdGlvbmFsVGV4dEVkaXRzLCBUZXh0RWRpdC5pcykpO1xuICAgIH1cbiAgICBDb2xvclByZXNlbnRhdGlvbi5pcyA9IGlzO1xufSkoQ29sb3JQcmVzZW50YXRpb24gfHwgKENvbG9yUHJlc2VudGF0aW9uID0ge30pKTtcbi8qKlxuICogQSBzZXQgb2YgcHJlZGVmaW5lZCByYW5nZSBraW5kcy5cbiAqL1xudmFyIEZvbGRpbmdSYW5nZUtpbmQ7XG4oZnVuY3Rpb24gKEZvbGRpbmdSYW5nZUtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBGb2xkaW5nIHJhbmdlIGZvciBhIGNvbW1lbnRcbiAgICAgKi9cbiAgICBGb2xkaW5nUmFuZ2VLaW5kLkNvbW1lbnQgPSAnY29tbWVudCc7XG4gICAgLyoqXG4gICAgICogRm9sZGluZyByYW5nZSBmb3IgYW4gaW1wb3J0IG9yIGluY2x1ZGVcbiAgICAgKi9cbiAgICBGb2xkaW5nUmFuZ2VLaW5kLkltcG9ydHMgPSAnaW1wb3J0cyc7XG4gICAgLyoqXG4gICAgICogRm9sZGluZyByYW5nZSBmb3IgYSByZWdpb24gKGUuZy4gYCNyZWdpb25gKVxuICAgICAqL1xuICAgIEZvbGRpbmdSYW5nZUtpbmQuUmVnaW9uID0gJ3JlZ2lvbic7XG59KShGb2xkaW5nUmFuZ2VLaW5kIHx8IChGb2xkaW5nUmFuZ2VLaW5kID0ge30pKTtcbi8qKlxuICogVGhlIGZvbGRpbmcgcmFuZ2UgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgRm9sZGluZ1JhbmdlfSBsaXRlcmFscy5cbiAqL1xudmFyIEZvbGRpbmdSYW5nZTtcbihmdW5jdGlvbiAoRm9sZGluZ1JhbmdlKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBGb2xkaW5nUmFuZ2UgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUoc3RhcnRMaW5lLCBlbmRMaW5lLCBzdGFydENoYXJhY3RlciwgZW5kQ2hhcmFjdGVyLCBraW5kLCBjb2xsYXBzZWRUZXh0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgIHN0YXJ0TGluZSxcbiAgICAgICAgICAgIGVuZExpbmVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKElzLmRlZmluZWQoc3RhcnRDaGFyYWN0ZXIpKSB7XG4gICAgICAgICAgICByZXN1bHQuc3RhcnRDaGFyYWN0ZXIgPSBzdGFydENoYXJhY3RlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoSXMuZGVmaW5lZChlbmRDaGFyYWN0ZXIpKSB7XG4gICAgICAgICAgICByZXN1bHQuZW5kQ2hhcmFjdGVyID0gZW5kQ2hhcmFjdGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKGtpbmQpKSB7XG4gICAgICAgICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKElzLmRlZmluZWQoY29sbGFwc2VkVGV4dCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb2xsYXBzZWRUZXh0ID0gY29sbGFwc2VkVGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBGb2xkaW5nUmFuZ2UuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgRm9sZGluZ1JhbmdlfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLnN0YXJ0TGluZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLnN0YXJ0TGluZSlcbiAgICAgICAgICAgICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLnN0YXJ0Q2hhcmFjdGVyKSB8fCBJcy51aW50ZWdlcihjYW5kaWRhdGUuc3RhcnRDaGFyYWN0ZXIpKVxuICAgICAgICAgICAgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuZW5kQ2hhcmFjdGVyKSB8fCBJcy51aW50ZWdlcihjYW5kaWRhdGUuZW5kQ2hhcmFjdGVyKSlcbiAgICAgICAgICAgICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmtpbmQpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUua2luZCkpO1xuICAgIH1cbiAgICBGb2xkaW5nUmFuZ2UuaXMgPSBpcztcbn0pKEZvbGRpbmdSYW5nZSB8fCAoRm9sZGluZ1JhbmdlID0ge30pKTtcbi8qKlxuICogVGhlIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbn0gbGl0ZXJhbHMuXG4gKi9cbnZhciBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uIChEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGxvY2F0aW9uLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICAgIG1lc3NhZ2VcbiAgICAgICAgfTtcbiAgICB9XG4gICAgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbi5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9ufSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIExvY2F0aW9uLmlzKGNhbmRpZGF0ZS5sb2NhdGlvbikgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5tZXNzYWdlKTtcbiAgICB9XG4gICAgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbi5pcyA9IGlzO1xufSkoRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiB8fCAoRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBkaWFnbm9zdGljJ3Mgc2V2ZXJpdHkuXG4gKi9cbnZhciBEaWFnbm9zdGljU2V2ZXJpdHk7XG4oZnVuY3Rpb24gKERpYWdub3N0aWNTZXZlcml0eSkge1xuICAgIC8qKlxuICAgICAqIFJlcG9ydHMgYW4gZXJyb3IuXG4gICAgICovXG4gICAgRGlhZ25vc3RpY1NldmVyaXR5LkVycm9yID0gMTtcbiAgICAvKipcbiAgICAgKiBSZXBvcnRzIGEgd2FybmluZy5cbiAgICAgKi9cbiAgICBEaWFnbm9zdGljU2V2ZXJpdHkuV2FybmluZyA9IDI7XG4gICAgLyoqXG4gICAgICogUmVwb3J0cyBhbiBpbmZvcm1hdGlvbi5cbiAgICAgKi9cbiAgICBEaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb24gPSAzO1xuICAgIC8qKlxuICAgICAqIFJlcG9ydHMgYSBoaW50LlxuICAgICAqL1xuICAgIERpYWdub3N0aWNTZXZlcml0eS5IaW50ID0gNDtcbn0pKERpYWdub3N0aWNTZXZlcml0eSB8fCAoRGlhZ25vc3RpY1NldmVyaXR5ID0ge30pKTtcbi8qKlxuICogVGhlIGRpYWdub3N0aWMgdGFncy5cbiAqXG4gKiBAc2luY2UgMy4xNS4wXG4gKi9cbnZhciBEaWFnbm9zdGljVGFnO1xuKGZ1bmN0aW9uIChEaWFnbm9zdGljVGFnKSB7XG4gICAgLyoqXG4gICAgICogVW51c2VkIG9yIHVubmVjZXNzYXJ5IGNvZGUuXG4gICAgICpcbiAgICAgKiBDbGllbnRzIGFyZSBhbGxvd2VkIHRvIHJlbmRlciBkaWFnbm9zdGljcyB3aXRoIHRoaXMgdGFnIGZhZGVkIG91dCBpbnN0ZWFkIG9mIGhhdmluZ1xuICAgICAqIGFuIGVycm9yIHNxdWlnZ2xlLlxuICAgICAqL1xuICAgIERpYWdub3N0aWNUYWcuVW5uZWNlc3NhcnkgPSAxO1xuICAgIC8qKlxuICAgICAqIERlcHJlY2F0ZWQgb3Igb2Jzb2xldGUgY29kZS5cbiAgICAgKlxuICAgICAqIENsaWVudHMgYXJlIGFsbG93ZWQgdG8gcmVuZGVyZWQgZGlhZ25vc3RpY3Mgd2l0aCB0aGlzIHRhZyBzdHJpa2UgdGhyb3VnaC5cbiAgICAgKi9cbiAgICBEaWFnbm9zdGljVGFnLkRlcHJlY2F0ZWQgPSAyO1xufSkoRGlhZ25vc3RpY1RhZyB8fCAoRGlhZ25vc3RpY1RhZyA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb2RlRGVzY3JpcHRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0byBkZWFsIHdpdGggZGVzY3JpcHRpb25zIGZvciBkaWFnbm9zdGljIGNvZGVzLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIENvZGVEZXNjcmlwdGlvbjtcbihmdW5jdGlvbiAoQ29kZURlc2NyaXB0aW9uKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5ocmVmKTtcbiAgICB9XG4gICAgQ29kZURlc2NyaXB0aW9uLmlzID0gaXM7XG59KShDb2RlRGVzY3JpcHRpb24gfHwgKENvZGVEZXNjcmlwdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBEaWFnbm9zdGljIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIERpYWdub3N0aWN9IGxpdGVyYWxzLlxuICovXG52YXIgRGlhZ25vc3RpYztcbihmdW5jdGlvbiAoRGlhZ25vc3RpYykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgRGlhZ25vc3RpYyBsaXRlcmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgbWVzc2FnZSwgc2V2ZXJpdHksIGNvZGUsIHNvdXJjZSwgcmVsYXRlZEluZm9ybWF0aW9uKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7IHJhbmdlLCBtZXNzYWdlIH07XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHNldmVyaXR5KSkge1xuICAgICAgICAgICAgcmVzdWx0LnNldmVyaXR5ID0gc2V2ZXJpdHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKElzLmRlZmluZWQoY29kZSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb2RlID0gY29kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoSXMuZGVmaW5lZChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHJlbGF0ZWRJbmZvcm1hdGlvbikpIHtcbiAgICAgICAgICAgIHJlc3VsdC5yZWxhdGVkSW5mb3JtYXRpb24gPSByZWxhdGVkSW5mb3JtYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgRGlhZ25vc3RpYy5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBEaWFnbm9zdGljfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSlcbiAgICAgICAgICAgICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSlcbiAgICAgICAgICAgICYmIElzLnN0cmluZyhjYW5kaWRhdGUubWVzc2FnZSlcbiAgICAgICAgICAgICYmIChJcy5udW1iZXIoY2FuZGlkYXRlLnNldmVyaXR5KSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnNldmVyaXR5KSlcbiAgICAgICAgICAgICYmIChJcy5pbnRlZ2VyKGNhbmRpZGF0ZS5jb2RlKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmNvZGUpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUuY29kZSkpXG4gICAgICAgICAgICAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5jb2RlRGVzY3JpcHRpb24pIHx8IChJcy5zdHJpbmcoKF9hID0gY2FuZGlkYXRlLmNvZGVEZXNjcmlwdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhyZWYpKSlcbiAgICAgICAgICAgICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLnNvdXJjZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5zb3VyY2UpKVxuICAgICAgICAgICAgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUucmVsYXRlZEluZm9ybWF0aW9uKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5yZWxhdGVkSW5mb3JtYXRpb24sIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24uaXMpKTtcbiAgICB9XG4gICAgRGlhZ25vc3RpYy5pcyA9IGlzO1xufSkoRGlhZ25vc3RpYyB8fCAoRGlhZ25vc3RpYyA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb21tYW5kIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIENvbW1hbmR9IGxpdGVyYWxzLlxuICovXG52YXIgQ29tbWFuZDtcbihmdW5jdGlvbiAoQ29tbWFuZCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29tbWFuZCBsaXRlcmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh0aXRsZSwgY29tbWFuZCwgLi4uYXJncykge1xuICAgICAgICBsZXQgcmVzdWx0ID0geyB0aXRsZSwgY29tbWFuZCB9O1xuICAgICAgICBpZiAoSXMuZGVmaW5lZChhcmdzKSAmJiBhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5hcmd1bWVudHMgPSBhcmdzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIENvbW1hbmQuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgQ29tbWFuZH0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRpdGxlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmNvbW1hbmQpO1xuICAgIH1cbiAgICBDb21tYW5kLmlzID0gaXM7XG59KShDb21tYW5kIHx8IChDb21tYW5kID0ge30pKTtcbi8qKlxuICogVGhlIFRleHRFZGl0IG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIHJlcGxhY2UsXG4gKiBpbnNlcnQgYW5kIGRlbGV0ZSBlZGl0cyBtb3JlIGVhc2lseS5cbiAqL1xudmFyIFRleHRFZGl0O1xuKGZ1bmN0aW9uIChUZXh0RWRpdCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZXBsYWNlIHRleHQgZWRpdC5cbiAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIG9mIHRleHQgdG8gYmUgcmVwbGFjZWQuXG4gICAgICogQHBhcmFtIG5ld1RleHQgVGhlIG5ldyB0ZXh0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UocmFuZ2UsIG5ld1RleHQpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2UsIG5ld1RleHQgfTtcbiAgICB9XG4gICAgVGV4dEVkaXQucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnNlcnQgdGV4dCBlZGl0LlxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiBUaGUgcG9zaXRpb24gdG8gaW5zZXJ0IHRoZSB0ZXh0IGF0LlxuICAgICAqIEBwYXJhbSBuZXdUZXh0IFRoZSB0ZXh0IHRvIGJlIGluc2VydGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydChwb3NpdGlvbiwgbmV3VGV4dCkge1xuICAgICAgICByZXR1cm4geyByYW5nZTogeyBzdGFydDogcG9zaXRpb24sIGVuZDogcG9zaXRpb24gfSwgbmV3VGV4dCB9O1xuICAgIH1cbiAgICBUZXh0RWRpdC5pbnNlcnQgPSBpbnNlcnQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlbGV0ZSB0ZXh0IGVkaXQuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSBvZiB0ZXh0IHRvIGJlIGRlbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVsKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiB7IHJhbmdlLCBuZXdUZXh0OiAnJyB9O1xuICAgIH1cbiAgICBUZXh0RWRpdC5kZWwgPSBkZWw7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSlcbiAgICAgICAgICAgICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VGV4dClcbiAgICAgICAgICAgICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSk7XG4gICAgfVxuICAgIFRleHRFZGl0LmlzID0gaXM7XG59KShUZXh0RWRpdCB8fCAoVGV4dEVkaXQgPSB7fSkpO1xudmFyIENoYW5nZUFubm90YXRpb247XG4oZnVuY3Rpb24gKENoYW5nZUFubm90YXRpb24pIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIG5lZWRzQ29uZmlybWF0aW9uLCBkZXNjcmlwdGlvbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7IGxhYmVsIH07XG4gICAgICAgIGlmIChuZWVkc0NvbmZpcm1hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHQubmVlZHNDb25maXJtYXRpb24gPSBuZWVkc0NvbmZpcm1hdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgQ2hhbmdlQW5ub3RhdGlvbi5jcmVhdGUgPSBjcmVhdGU7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYWJlbCkgJiZcbiAgICAgICAgICAgIChJcy5ib29sZWFuKGNhbmRpZGF0ZS5uZWVkc0NvbmZpcm1hdGlvbikgfHwgY2FuZGlkYXRlLm5lZWRzQ29uZmlybWF0aW9uID09PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5kZXNjcmlwdGlvbikgfHwgY2FuZGlkYXRlLmRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQpO1xuICAgIH1cbiAgICBDaGFuZ2VBbm5vdGF0aW9uLmlzID0gaXM7XG59KShDaGFuZ2VBbm5vdGF0aW9uIHx8IChDaGFuZ2VBbm5vdGF0aW9uID0ge30pKTtcbnZhciBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllcjtcbihmdW5jdGlvbiAoQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLnN0cmluZyhjYW5kaWRhdGUpO1xuICAgIH1cbiAgICBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyA9IGlzO1xufSkoQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIgfHwgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyID0ge30pKTtcbnZhciBBbm5vdGF0ZWRUZXh0RWRpdDtcbihmdW5jdGlvbiAoQW5ub3RhdGVkVGV4dEVkaXQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFubm90YXRlZCByZXBsYWNlIHRleHQgZWRpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2Ugb2YgdGV4dCB0byBiZSByZXBsYWNlZC5cbiAgICAgKiBAcGFyYW0gbmV3VGV4dCBUaGUgbmV3IHRleHQuXG4gICAgICogQHBhcmFtIGFubm90YXRpb24gVGhlIGFubm90YXRpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZShyYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbikge1xuICAgICAgICByZXR1cm4geyByYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbklkOiBhbm5vdGF0aW9uIH07XG4gICAgfVxuICAgIEFubm90YXRlZFRleHRFZGl0LnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYW5ub3RhdGVkIGluc2VydCB0ZXh0IGVkaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcG9zaXRpb24gVGhlIHBvc2l0aW9uIHRvIGluc2VydCB0aGUgdGV4dCBhdC5cbiAgICAgKiBAcGFyYW0gbmV3VGV4dCBUaGUgdGV4dCB0byBiZSBpbnNlcnRlZC5cbiAgICAgKiBAcGFyYW0gYW5ub3RhdGlvbiBUaGUgYW5ub3RhdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnQocG9zaXRpb24sIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IHsgc3RhcnQ6IHBvc2l0aW9uLCBlbmQ6IHBvc2l0aW9uIH0sIG5ld1RleHQsIGFubm90YXRpb25JZDogYW5ub3RhdGlvbiB9O1xuICAgIH1cbiAgICBBbm5vdGF0ZWRUZXh0RWRpdC5pbnNlcnQgPSBpbnNlcnQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhbm5vdGF0ZWQgZGVsZXRlIHRleHQgZWRpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2Ugb2YgdGV4dCB0byBiZSBkZWxldGVkLlxuICAgICAqIEBwYXJhbSBhbm5vdGF0aW9uIFRoZSBhbm5vdGF0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlbChyYW5nZSwgYW5ub3RhdGlvbikge1xuICAgICAgICByZXR1cm4geyByYW5nZSwgbmV3VGV4dDogJycsIGFubm90YXRpb25JZDogYW5ub3RhdGlvbiB9O1xuICAgIH1cbiAgICBBbm5vdGF0ZWRUZXh0RWRpdC5kZWwgPSBkZWw7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBUZXh0RWRpdC5pcyhjYW5kaWRhdGUpICYmIChDaGFuZ2VBbm5vdGF0aW9uLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpKTtcbiAgICB9XG4gICAgQW5ub3RhdGVkVGV4dEVkaXQuaXMgPSBpcztcbn0pKEFubm90YXRlZFRleHRFZGl0IHx8IChBbm5vdGF0ZWRUZXh0RWRpdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBUZXh0RG9jdW1lbnRFZGl0IG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlXG4gKiBhbiBlZGl0IHRoYXQgbWFuaXB1bGF0ZXMgYSB0ZXh0IGRvY3VtZW50LlxuICovXG52YXIgVGV4dERvY3VtZW50RWRpdDtcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50RWRpdCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYFRleHREb2N1bWVudEVkaXRgXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRleHREb2N1bWVudCwgZWRpdHMpIHtcbiAgICAgICAgcmV0dXJuIHsgdGV4dERvY3VtZW50LCBlZGl0cyB9O1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRFZGl0LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSlcbiAgICAgICAgICAgICYmIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyhjYW5kaWRhdGUudGV4dERvY3VtZW50KVxuICAgICAgICAgICAgJiYgQXJyYXkuaXNBcnJheShjYW5kaWRhdGUuZWRpdHMpO1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRFZGl0LmlzID0gaXM7XG59KShUZXh0RG9jdW1lbnRFZGl0IHx8IChUZXh0RG9jdW1lbnRFZGl0ID0ge30pKTtcbnZhciBDcmVhdGVGaWxlO1xuKGZ1bmN0aW9uIChDcmVhdGVGaWxlKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgb3B0aW9ucywgYW5ub3RhdGlvbikge1xuICAgICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAgICAga2luZDogJ2NyZWF0ZScsXG4gICAgICAgICAgICB1cmlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiAob3B0aW9ucy5vdmVyd3JpdGUgIT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLmlnbm9yZUlmRXhpc3RzICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFubm90YXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmFubm90YXRpb25JZCA9IGFubm90YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgQ3JlYXRlRmlsZS5jcmVhdGUgPSBjcmVhdGU7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIGNhbmRpZGF0ZS5raW5kID09PSAnY3JlYXRlJyAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICgoY2FuZGlkYXRlLm9wdGlvbnMub3ZlcndyaXRlID09PSB1bmRlZmluZWQgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMgPT09IHVuZGVmaW5lZCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmRXhpc3RzKSkpKSAmJiAoY2FuZGlkYXRlLmFubm90YXRpb25JZCA9PT0gdW5kZWZpbmVkIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpKTtcbiAgICB9XG4gICAgQ3JlYXRlRmlsZS5pcyA9IGlzO1xufSkoQ3JlYXRlRmlsZSB8fCAoQ3JlYXRlRmlsZSA9IHt9KSk7XG52YXIgUmVuYW1lRmlsZTtcbihmdW5jdGlvbiAoUmVuYW1lRmlsZSkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShvbGRVcmksIG5ld1VyaSwgb3B0aW9ucywgYW5ub3RhdGlvbikge1xuICAgICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAgICAga2luZDogJ3JlbmFtZScsXG4gICAgICAgICAgICBvbGRVcmksXG4gICAgICAgICAgICBuZXdVcmlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiAob3B0aW9ucy5vdmVyd3JpdGUgIT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLmlnbm9yZUlmRXhpc3RzICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFubm90YXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmFubm90YXRpb25JZCA9IGFubm90YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgUmVuYW1lRmlsZS5jcmVhdGUgPSBjcmVhdGU7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIGNhbmRpZGF0ZS5raW5kID09PSAncmVuYW1lJyAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm9sZFVyaSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5uZXdVcmkpICYmIChjYW5kaWRhdGUub3B0aW9ucyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAoKGNhbmRpZGF0ZS5vcHRpb25zLm92ZXJ3cml0ZSA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMub3ZlcndyaXRlKSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmRXhpc3RzID09PSB1bmRlZmluZWQgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZkV4aXN0cykpKSkgJiYgKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQgPT09IHVuZGVmaW5lZCB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhjYW5kaWRhdGUuYW5ub3RhdGlvbklkKSk7XG4gICAgfVxuICAgIFJlbmFtZUZpbGUuaXMgPSBpcztcbn0pKFJlbmFtZUZpbGUgfHwgKFJlbmFtZUZpbGUgPSB7fSkpO1xudmFyIERlbGV0ZUZpbGU7XG4oZnVuY3Rpb24gKERlbGV0ZUZpbGUpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUodXJpLCBvcHRpb25zLCBhbm5vdGF0aW9uKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICBraW5kOiAnZGVsZXRlJyxcbiAgICAgICAgICAgIHVyaVxuICAgICAgICB9O1xuICAgICAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmIChvcHRpb25zLnJlY3Vyc2l2ZSAhPT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5ub3RhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHQuYW5ub3RhdGlvbklkID0gYW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBEZWxldGVGaWxlLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgY2FuZGlkYXRlLmtpbmQgPT09ICdkZWxldGUnICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgKChjYW5kaWRhdGUub3B0aW9ucy5yZWN1cnNpdmUgPT09IHVuZGVmaW5lZCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLnJlY3Vyc2l2ZSkpICYmIChjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZk5vdEV4aXN0cyA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMpKSkpICYmIChjYW5kaWRhdGUuYW5ub3RhdGlvbklkID09PSB1bmRlZmluZWQgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkpO1xuICAgIH1cbiAgICBEZWxldGVGaWxlLmlzID0gaXM7XG59KShEZWxldGVGaWxlIHx8IChEZWxldGVGaWxlID0ge30pKTtcbnZhciBXb3Jrc3BhY2VFZGl0O1xuKGZ1bmN0aW9uIChXb3Jrc3BhY2VFZGl0KSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmNoYW5nZXMgIT09IHVuZGVmaW5lZCB8fCBjYW5kaWRhdGUuZG9jdW1lbnRDaGFuZ2VzICE9PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmRvY3VtZW50Q2hhbmdlcyA9PT0gdW5kZWZpbmVkIHx8IGNhbmRpZGF0ZS5kb2N1bWVudENoYW5nZXMuZXZlcnkoKGNoYW5nZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChJcy5zdHJpbmcoY2hhbmdlLmtpbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDcmVhdGVGaWxlLmlzKGNoYW5nZSkgfHwgUmVuYW1lRmlsZS5pcyhjaGFuZ2UpIHx8IERlbGV0ZUZpbGUuaXMoY2hhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBUZXh0RG9jdW1lbnRFZGl0LmlzKGNoYW5nZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgIH1cbiAgICBXb3Jrc3BhY2VFZGl0LmlzID0gaXM7XG59KShXb3Jrc3BhY2VFZGl0IHx8IChXb3Jrc3BhY2VFZGl0ID0ge30pKTtcbmNsYXNzIFRleHRFZGl0Q2hhbmdlSW1wbCB7XG4gICAgY29uc3RydWN0b3IoZWRpdHMsIGNoYW5nZUFubm90YXRpb25zKSB7XG4gICAgICAgIHRoaXMuZWRpdHMgPSBlZGl0cztcbiAgICAgICAgdGhpcy5jaGFuZ2VBbm5vdGF0aW9ucyA9IGNoYW5nZUFubm90YXRpb25zO1xuICAgIH1cbiAgICBpbnNlcnQocG9zaXRpb24sIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICAgICAgbGV0IGVkaXQ7XG4gICAgICAgIGxldCBpZDtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZWRpdCA9IFRleHRFZGl0Lmluc2VydChwb3NpdGlvbiwgbmV3VGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoYW5ub3RhdGlvbikpIHtcbiAgICAgICAgICAgIGlkID0gYW5ub3RhdGlvbjtcbiAgICAgICAgICAgIGVkaXQgPSBBbm5vdGF0ZWRUZXh0RWRpdC5pbnNlcnQocG9zaXRpb24sIG5ld1RleHQsIGFubm90YXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyh0aGlzLmNoYW5nZUFubm90YXRpb25zKTtcbiAgICAgICAgICAgIGlkID0gdGhpcy5jaGFuZ2VBbm5vdGF0aW9ucy5tYW5hZ2UoYW5ub3RhdGlvbik7XG4gICAgICAgICAgICBlZGl0ID0gQW5ub3RhdGVkVGV4dEVkaXQuaW5zZXJ0KHBvc2l0aW9uLCBuZXdUZXh0LCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKGVkaXQpO1xuICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlcGxhY2UocmFuZ2UsIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICAgICAgbGV0IGVkaXQ7XG4gICAgICAgIGxldCBpZDtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZWRpdCA9IFRleHRFZGl0LnJlcGxhY2UocmFuZ2UsIG5ld1RleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGFubm90YXRpb24pKSB7XG4gICAgICAgICAgICBpZCA9IGFubm90YXRpb247XG4gICAgICAgICAgICBlZGl0ID0gQW5ub3RhdGVkVGV4dEVkaXQucmVwbGFjZShyYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFzc2VydENoYW5nZUFubm90YXRpb25zKHRoaXMuY2hhbmdlQW5ub3RhdGlvbnMpO1xuICAgICAgICAgICAgaWQgPSB0aGlzLmNoYW5nZUFubm90YXRpb25zLm1hbmFnZShhbm5vdGF0aW9uKTtcbiAgICAgICAgICAgIGVkaXQgPSBBbm5vdGF0ZWRUZXh0RWRpdC5yZXBsYWNlKHJhbmdlLCBuZXdUZXh0LCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKGVkaXQpO1xuICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlbGV0ZShyYW5nZSwgYW5ub3RhdGlvbikge1xuICAgICAgICBsZXQgZWRpdDtcbiAgICAgICAgbGV0IGlkO1xuICAgICAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBlZGl0ID0gVGV4dEVkaXQuZGVsKHJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhhbm5vdGF0aW9uKSkge1xuICAgICAgICAgICAgaWQgPSBhbm5vdGF0aW9uO1xuICAgICAgICAgICAgZWRpdCA9IEFubm90YXRlZFRleHRFZGl0LmRlbChyYW5nZSwgYW5ub3RhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFzc2VydENoYW5nZUFubm90YXRpb25zKHRoaXMuY2hhbmdlQW5ub3RhdGlvbnMpO1xuICAgICAgICAgICAgaWQgPSB0aGlzLmNoYW5nZUFubm90YXRpb25zLm1hbmFnZShhbm5vdGF0aW9uKTtcbiAgICAgICAgICAgIGVkaXQgPSBBbm5vdGF0ZWRUZXh0RWRpdC5kZWwocmFuZ2UsIGlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVkaXRzLnB1c2goZWRpdCk7XG4gICAgICAgIGlmIChpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkKGVkaXQpIHtcbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKGVkaXQpO1xuICAgIH1cbiAgICBhbGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRzO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5lZGl0cy5zcGxpY2UoMCwgdGhpcy5lZGl0cy5sZW5ndGgpO1xuICAgIH1cbiAgICBhc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUZXh0IGVkaXQgY2hhbmdlIGlzIG5vdCBjb25maWd1cmVkIHRvIG1hbmFnZSBjaGFuZ2UgYW5ub3RhdGlvbnMuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEEgaGVscGVyIGNsYXNzXG4gKi9cbmNsYXNzIENoYW5nZUFubm90YXRpb25zIHtcbiAgICBjb25zdHJ1Y3Rvcihhbm5vdGF0aW9ucykge1xuICAgICAgICB0aGlzLl9hbm5vdGF0aW9ucyA9IGFubm90YXRpb25zID09PSB1bmRlZmluZWQgPyBPYmplY3QuY3JlYXRlKG51bGwpIDogYW5ub3RhdGlvbnM7XG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICB9XG4gICAgYWxsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYW5ub3RhdGlvbnM7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICB9XG4gICAgbWFuYWdlKGlkT3JBbm5vdGF0aW9uLCBhbm5vdGF0aW9uKSB7XG4gICAgICAgIGxldCBpZDtcbiAgICAgICAgaWYgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGlkT3JBbm5vdGF0aW9uKSkge1xuICAgICAgICAgICAgaWQgPSBpZE9yQW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlkID0gdGhpcy5uZXh0SWQoKTtcbiAgICAgICAgICAgIGFubm90YXRpb24gPSBpZE9yQW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYW5ub3RhdGlvbnNbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSWQgJHtpZH0gaXMgYWxyZWFkeSBpbiB1c2UuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBhbm5vdGF0aW9uIHByb3ZpZGVkIGZvciBpZCAke2lkfWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Fubm90YXRpb25zW2lkXSA9IGFubm90YXRpb247XG4gICAgICAgIHRoaXMuX3NpemUrKztcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICBuZXh0SWQoKSB7XG4gICAgICAgIHRoaXMuX2NvdW50ZXIrKztcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvdW50ZXIudG9TdHJpbmcoKTtcbiAgICB9XG59XG4vKipcbiAqIEEgd29ya3NwYWNlIGNoYW5nZSBoZWxwcyBjb25zdHJ1Y3RpbmcgY2hhbmdlcyB0byBhIHdvcmtzcGFjZS5cbiAqL1xuY2xhc3MgV29ya3NwYWNlQ2hhbmdlIHtcbiAgICBjb25zdHJ1Y3Rvcih3b3Jrc3BhY2VFZGl0KSB7XG4gICAgICAgIHRoaXMuX3RleHRFZGl0Q2hhbmdlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGlmICh3b3Jrc3BhY2VFZGl0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQgPSB3b3Jrc3BhY2VFZGl0O1xuICAgICAgICAgICAgaWYgKHdvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMgPSBuZXcgQ2hhbmdlQW5ub3RhdGlvbnMod29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyk7XG4gICAgICAgICAgICAgICAgd29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyA9IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLmFsbCgpO1xuICAgICAgICAgICAgICAgIHdvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLmZvckVhY2goKGNoYW5nZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoVGV4dERvY3VtZW50RWRpdC5pcyhjaGFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0RWRpdENoYW5nZSA9IG5ldyBUZXh0RWRpdENoYW5nZUltcGwoY2hhbmdlLmVkaXRzLCB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0RWRpdENoYW5nZXNbY2hhbmdlLnRleHREb2N1bWVudC51cmldID0gdGV4dEVkaXRDaGFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHdvcmtzcGFjZUVkaXQuY2hhbmdlcykge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHdvcmtzcGFjZUVkaXQuY2hhbmdlcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRFZGl0Q2hhbmdlID0gbmV3IFRleHRFZGl0Q2hhbmdlSW1wbCh3b3Jrc3BhY2VFZGl0LmNoYW5nZXNba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHRFZGl0Q2hhbmdlc1trZXldID0gdGV4dEVkaXRDaGFuZ2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0ID0ge307XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdW5kZXJseWluZyB7QGxpbmsgV29ya3NwYWNlRWRpdH0gbGl0ZXJhbFxuICAgICAqIHVzZSB0byBiZSByZXR1cm5lZCBmcm9tIGEgd29ya3NwYWNlIGVkaXQgb3BlcmF0aW9uIGxpa2UgcmVuYW1lLlxuICAgICAqL1xuICAgIGdldCBlZGl0KCkge1xuICAgICAgICB0aGlzLmluaXREb2N1bWVudENoYW5nZXMoKTtcbiAgICAgICAgaWYgKHRoaXMuX2NoYW5nZUFubm90YXRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuY2hhbmdlQW5ub3RhdGlvbnMgPSB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucy5hbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd29ya3NwYWNlRWRpdDtcbiAgICB9XG4gICAgZ2V0VGV4dEVkaXRDaGFuZ2Uoa2V5KSB7XG4gICAgICAgIGlmIChPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIuaXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5pbml0RG9jdW1lbnRDaGFuZ2VzKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIGRvY3VtZW50IGNoYW5nZXMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0ZXh0RG9jdW1lbnQgPSB7IHVyaToga2V5LnVyaSwgdmVyc2lvbjoga2V5LnZlcnNpb24gfTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB0aGlzLl90ZXh0RWRpdENoYW5nZXNbdGV4dERvY3VtZW50LnVyaV07XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVkaXRzID0gW107XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dERvY3VtZW50RWRpdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dERvY3VtZW50LFxuICAgICAgICAgICAgICAgICAgICBlZGl0c1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMucHVzaCh0ZXh0RG9jdW1lbnRFZGl0KTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKGVkaXRzLCB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dEVkaXRDaGFuZ2VzW3RleHREb2N1bWVudC51cmldID0gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdENoYW5nZXMoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIG5vcm1hbCB0ZXh0IGVkaXQgY2hhbmdlcy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB0aGlzLl90ZXh0RWRpdENoYW5nZXNba2V5XTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgbGV0IGVkaXRzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VzW2tleV0gPSBlZGl0cztcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKGVkaXRzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0RWRpdENoYW5nZXNba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdERvY3VtZW50Q2hhbmdlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzID09PSB1bmRlZmluZWQgJiYgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZUFubm90YXRpb25zID0gbmV3IENoYW5nZUFubm90YXRpb25zKCk7XG4gICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyA9IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLmFsbCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluaXRDaGFuZ2VzKCkge1xuICAgICAgICBpZiAodGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMgPT09IHVuZGVmaW5lZCAmJiB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVGaWxlKHVyaSwgb3B0aW9uc09yQW5ub3RhdGlvbiwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXREb2N1bWVudENoYW5nZXMoKTtcbiAgICAgICAgaWYgKHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIGRvY3VtZW50IGNoYW5nZXMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFubm90YXRpb247XG4gICAgICAgIGlmIChDaGFuZ2VBbm5vdGF0aW9uLmlzKG9wdGlvbnNPckFubm90YXRpb24pIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKG9wdGlvbnNPckFubm90YXRpb24pKSB7XG4gICAgICAgICAgICBhbm5vdGF0aW9uID0gb3B0aW9uc09yQW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zT3JBbm5vdGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvcGVyYXRpb247XG4gICAgICAgIGxldCBpZDtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3BlcmF0aW9uID0gQ3JlYXRlRmlsZS5jcmVhdGUodXJpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlkID0gQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoYW5ub3RhdGlvbikgPyBhbm5vdGF0aW9uIDogdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMubWFuYWdlKGFubm90YXRpb24pO1xuICAgICAgICAgICAgb3BlcmF0aW9uID0gQ3JlYXRlRmlsZS5jcmVhdGUodXJpLCBvcHRpb25zLCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMucHVzaChvcGVyYXRpb24pO1xuICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbmFtZUZpbGUob2xkVXJpLCBuZXdVcmksIG9wdGlvbnNPckFubm90YXRpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0RG9jdW1lbnRDaGFuZ2VzKCk7XG4gICAgICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dvcmtzcGFjZSBlZGl0IGlzIG5vdCBjb25maWd1cmVkIGZvciBkb2N1bWVudCBjaGFuZ2VzLicpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhbm5vdGF0aW9uO1xuICAgICAgICBpZiAoQ2hhbmdlQW5ub3RhdGlvbi5pcyhvcHRpb25zT3JBbm5vdGF0aW9uKSB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhvcHRpb25zT3JBbm5vdGF0aW9uKSkge1xuICAgICAgICAgICAgYW5ub3RhdGlvbiA9IG9wdGlvbnNPckFubm90YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9uc09yQW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3BlcmF0aW9uO1xuICAgICAgICBsZXQgaWQ7XG4gICAgICAgIGlmIChhbm5vdGF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbiA9IFJlbmFtZUZpbGUuY3JlYXRlKG9sZFVyaSwgbmV3VXJpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlkID0gQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoYW5ub3RhdGlvbikgPyBhbm5vdGF0aW9uIDogdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMubWFuYWdlKGFubm90YXRpb24pO1xuICAgICAgICAgICAgb3BlcmF0aW9uID0gUmVuYW1lRmlsZS5jcmVhdGUob2xkVXJpLCBuZXdVcmksIG9wdGlvbnMsIGlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcy5wdXNoKG9wZXJhdGlvbik7XG4gICAgICAgIGlmIChpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVsZXRlRmlsZSh1cmksIG9wdGlvbnNPckFubm90YXRpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0RG9jdW1lbnRDaGFuZ2VzKCk7XG4gICAgICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dvcmtzcGFjZSBlZGl0IGlzIG5vdCBjb25maWd1cmVkIGZvciBkb2N1bWVudCBjaGFuZ2VzLicpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhbm5vdGF0aW9uO1xuICAgICAgICBpZiAoQ2hhbmdlQW5ub3RhdGlvbi5pcyhvcHRpb25zT3JBbm5vdGF0aW9uKSB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhvcHRpb25zT3JBbm5vdGF0aW9uKSkge1xuICAgICAgICAgICAgYW5ub3RhdGlvbiA9IG9wdGlvbnNPckFubm90YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9uc09yQW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3BlcmF0aW9uO1xuICAgICAgICBsZXQgaWQ7XG4gICAgICAgIGlmIChhbm5vdGF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbiA9IERlbGV0ZUZpbGUuY3JlYXRlKHVyaSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZCA9IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGFubm90YXRpb24pID8gYW5ub3RhdGlvbiA6IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLm1hbmFnZShhbm5vdGF0aW9uKTtcbiAgICAgICAgICAgIG9wZXJhdGlvbiA9IERlbGV0ZUZpbGUuY3JlYXRlKHVyaSwgb3B0aW9ucywgaWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLnB1c2gob3BlcmF0aW9uKTtcbiAgICAgICAgaWYgKGlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVGhlIFRleHREb2N1bWVudElkZW50aWZpZXIgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgVGV4dERvY3VtZW50SWRlbnRpZmllcn0gbGl0ZXJhbHMuXG4gKi9cbnZhciBUZXh0RG9jdW1lbnRJZGVudGlmaWVyO1xuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBUZXh0RG9jdW1lbnRJZGVudGlmaWVyIGxpdGVyYWwuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgZG9jdW1lbnQncyB1cmkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSkge1xuICAgICAgICByZXR1cm4geyB1cmkgfTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50SWRlbnRpZmllci5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBUZXh0RG9jdW1lbnRJZGVudGlmaWVyfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50SWRlbnRpZmllciB8fCAoVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG4vKipcbiAqIFRoZSBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXJ9IGxpdGVyYWxzLlxuICovXG52YXIgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjtcbihmdW5jdGlvbiAoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciBsaXRlcmFsLlxuICAgICAqIEBwYXJhbSB1cmkgVGhlIGRvY3VtZW50J3MgdXJpLlxuICAgICAqIEBwYXJhbSB2ZXJzaW9uIFRoZSBkb2N1bWVudCdzIHZlcnNpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgdmVyc2lvbikge1xuICAgICAgICByZXR1cm4geyB1cmksIHZlcnNpb24gfTtcbiAgICB9XG4gICAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiBJcy5pbnRlZ2VyKGNhbmRpZGF0ZS52ZXJzaW9uKTtcbiAgICB9XG4gICAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyA9IGlzO1xufSkoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciB8fCAoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG4vKipcbiAqIFRoZSBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyfSBsaXRlcmFscy5cbiAqL1xudmFyIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjtcbihmdW5jdGlvbiAoT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKiBAcGFyYW0gdmVyc2lvbiBUaGUgZG9jdW1lbnQncyB2ZXJzaW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHsgdXJpLCB2ZXJzaW9uIH07XG4gICAgfVxuICAgIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXJ9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpICYmIChjYW5kaWRhdGUudmVyc2lvbiA9PT0gbnVsbCB8fCBJcy5pbnRlZ2VyKGNhbmRpZGF0ZS52ZXJzaW9uKSk7XG4gICAgfVxuICAgIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyA9IGlzO1xufSkoT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIHx8IChPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgPSB7fSkpO1xuLyoqXG4gKiBUaGUgVGV4dERvY3VtZW50SXRlbSBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBUZXh0RG9jdW1lbnRJdGVtfSBsaXRlcmFscy5cbiAqL1xudmFyIFRleHREb2N1bWVudEl0ZW07XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudEl0ZW0pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFRleHREb2N1bWVudEl0ZW0gbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2VJZCBUaGUgZG9jdW1lbnQncyBsYW5ndWFnZSBpZGVudGlmaWVyLlxuICAgICAqIEBwYXJhbSB2ZXJzaW9uIFRoZSBkb2N1bWVudCdzIHZlcnNpb24gbnVtYmVyLlxuICAgICAqIEBwYXJhbSB0ZXh0IFRoZSBkb2N1bWVudCdzIHRleHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgdGV4dCkge1xuICAgICAgICByZXR1cm4geyB1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIHRleHQgfTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50SXRlbS5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBUZXh0RG9jdW1lbnRJdGVtfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlSWQpICYmIElzLmludGVnZXIoY2FuZGlkYXRlLnZlcnNpb24pICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGV4dCk7XG4gICAgfVxuICAgIFRleHREb2N1bWVudEl0ZW0uaXMgPSBpcztcbn0pKFRleHREb2N1bWVudEl0ZW0gfHwgKFRleHREb2N1bWVudEl0ZW0gPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGNvbnRlbnQgdHlwZSB0aGF0IGEgY2xpZW50IHN1cHBvcnRzIGluIHZhcmlvdXNcbiAqIHJlc3VsdCBsaXRlcmFscyBsaWtlIGBIb3ZlcmAsIGBQYXJhbWV0ZXJJbmZvYCBvciBgQ29tcGxldGlvbkl0ZW1gLlxuICpcbiAqIFBsZWFzZSBub3RlIHRoYXQgYE1hcmt1cEtpbmRzYCBtdXN0IG5vdCBzdGFydCB3aXRoIGEgYCRgLiBUaGlzIGtpbmRzXG4gKiBhcmUgcmVzZXJ2ZWQgZm9yIGludGVybmFsIHVzYWdlLlxuICovXG52YXIgTWFya3VwS2luZDtcbihmdW5jdGlvbiAoTWFya3VwS2luZCkge1xuICAgIC8qKlxuICAgICAqIFBsYWluIHRleHQgaXMgc3VwcG9ydGVkIGFzIGEgY29udGVudCBmb3JtYXRcbiAgICAgKi9cbiAgICBNYXJrdXBLaW5kLlBsYWluVGV4dCA9ICdwbGFpbnRleHQnO1xuICAgIC8qKlxuICAgICAqIE1hcmtkb3duIGlzIHN1cHBvcnRlZCBhcyBhIGNvbnRlbnQgZm9ybWF0XG4gICAgICovXG4gICAgTWFya3VwS2luZC5NYXJrZG93biA9ICdtYXJrZG93bic7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGEgdmFsdWUgb2YgdGhlIHtAbGluayBNYXJrdXBLaW5kfSB0eXBlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlID09PSBNYXJrdXBLaW5kLlBsYWluVGV4dCB8fCBjYW5kaWRhdGUgPT09IE1hcmt1cEtpbmQuTWFya2Rvd247XG4gICAgfVxuICAgIE1hcmt1cEtpbmQuaXMgPSBpcztcbn0pKE1hcmt1cEtpbmQgfHwgKE1hcmt1cEtpbmQgPSB7fSkpO1xudmFyIE1hcmt1cENvbnRlbnQ7XG4oZnVuY3Rpb24gKE1hcmt1cENvbnRlbnQpIHtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgY29uZm9ybXMgdG8gdGhlIHtAbGluayBNYXJrdXBDb250ZW50fSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKHZhbHVlKSAmJiBNYXJrdXBLaW5kLmlzKGNhbmRpZGF0ZS5raW5kKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnZhbHVlKTtcbiAgICB9XG4gICAgTWFya3VwQ29udGVudC5pcyA9IGlzO1xufSkoTWFya3VwQ29udGVudCB8fCAoTWFya3VwQ29udGVudCA9IHt9KSk7XG4vKipcbiAqIFRoZSBraW5kIG9mIGEgY29tcGxldGlvbiBlbnRyeS5cbiAqL1xudmFyIENvbXBsZXRpb25JdGVtS2luZDtcbihmdW5jdGlvbiAoQ29tcGxldGlvbkl0ZW1LaW5kKSB7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlRleHQgPSAxO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5NZXRob2QgPSAyO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbiA9IDM7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0cnVjdG9yID0gNDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRmllbGQgPSA1O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZSA9IDY7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkNsYXNzID0gNztcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlID0gODtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlID0gOTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHkgPSAxMDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuVW5pdCA9IDExO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5WYWx1ZSA9IDEyO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5FbnVtID0gMTM7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQgPSAxNDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuU25pcHBldCA9IDE1O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Db2xvciA9IDE2O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5GaWxlID0gMTc7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlJlZmVyZW5jZSA9IDE4O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Gb2xkZXIgPSAxOTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRW51bU1lbWJlciA9IDIwO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Db25zdGFudCA9IDIxO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5TdHJ1Y3QgPSAyMjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRXZlbnQgPSAyMztcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuT3BlcmF0b3IgPSAyNDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuVHlwZVBhcmFtZXRlciA9IDI1O1xufSkoQ29tcGxldGlvbkl0ZW1LaW5kIHx8IChDb21wbGV0aW9uSXRlbUtpbmQgPSB7fSkpO1xuLyoqXG4gKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGluc2VydCB0ZXh0IGluIGEgY29tcGxldGlvbiBpdGVtIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhc1xuICogcGxhaW4gdGV4dCBvciBhIHNuaXBwZXQuXG4gKi9cbnZhciBJbnNlcnRUZXh0Rm9ybWF0O1xuKGZ1bmN0aW9uIChJbnNlcnRUZXh0Rm9ybWF0KSB7XG4gICAgLyoqXG4gICAgICogVGhlIHByaW1hcnkgdGV4dCB0byBiZSBpbnNlcnRlZCBpcyB0cmVhdGVkIGFzIGEgcGxhaW4gc3RyaW5nLlxuICAgICAqL1xuICAgIEluc2VydFRleHRGb3JtYXQuUGxhaW5UZXh0ID0gMTtcbiAgICAvKipcbiAgICAgKiBUaGUgcHJpbWFyeSB0ZXh0IHRvIGJlIGluc2VydGVkIGlzIHRyZWF0ZWQgYXMgYSBzbmlwcGV0LlxuICAgICAqXG4gICAgICogQSBzbmlwcGV0IGNhbiBkZWZpbmUgdGFiIHN0b3BzIGFuZCBwbGFjZWhvbGRlcnMgd2l0aCBgJDFgLCBgJDJgXG4gICAgICogYW5kIGAkezM6Zm9vfWAuIGAkMGAgZGVmaW5lcyB0aGUgZmluYWwgdGFiIHN0b3AsIGl0IGRlZmF1bHRzIHRvXG4gICAgICogdGhlIGVuZCBvZiB0aGUgc25pcHBldC4gUGxhY2Vob2xkZXJzIHdpdGggZXF1YWwgaWRlbnRpZmllcnMgYXJlIGxpbmtlZCxcbiAgICAgKiB0aGF0IGlzIHR5cGluZyBpbiBvbmUgd2lsbCB1cGRhdGUgb3RoZXJzIHRvby5cbiAgICAgKlxuICAgICAqIFNlZSBhbHNvOiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jc25pcHBldF9zeW50YXhcbiAgICAgKi9cbiAgICBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQgPSAyO1xufSkoSW5zZXJ0VGV4dEZvcm1hdCB8fCAoSW5zZXJ0VGV4dEZvcm1hdCA9IHt9KSk7XG4vKipcbiAqIENvbXBsZXRpb24gaXRlbSB0YWdzIGFyZSBleHRyYSBhbm5vdGF0aW9ucyB0aGF0IHR3ZWFrIHRoZSByZW5kZXJpbmcgb2YgYSBjb21wbGV0aW9uXG4gKiBpdGVtLlxuICpcbiAqIEBzaW5jZSAzLjE1LjBcbiAqL1xudmFyIENvbXBsZXRpb25JdGVtVGFnO1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uSXRlbVRhZykge1xuICAgIC8qKlxuICAgICAqIFJlbmRlciBhIGNvbXBsZXRpb24gYXMgb2Jzb2xldGUsIHVzdWFsbHkgdXNpbmcgYSBzdHJpa2Utb3V0LlxuICAgICAqL1xuICAgIENvbXBsZXRpb25JdGVtVGFnLkRlcHJlY2F0ZWQgPSAxO1xufSkoQ29tcGxldGlvbkl0ZW1UYWcgfHwgKENvbXBsZXRpb25JdGVtVGFnID0ge30pKTtcbi8qKlxuICogVGhlIEluc2VydFJlcGxhY2VFZGl0IG5hbWVzcGFjZSBwcm92aWRlcyBmdW5jdGlvbnMgdG8gZGVhbCB3aXRoIGluc2VydCAvIHJlcGxhY2UgZWRpdHMuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgSW5zZXJ0UmVwbGFjZUVkaXQ7XG4oZnVuY3Rpb24gKEluc2VydFJlcGxhY2VFZGl0KSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnNlcnQgLyByZXBsYWNlIGVkaXRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUobmV3VGV4dCwgaW5zZXJ0LCByZXBsYWNlKSB7XG4gICAgICAgIHJldHVybiB7IG5ld1RleHQsIGluc2VydCwgcmVwbGFjZSB9O1xuICAgIH1cbiAgICBJbnNlcnRSZXBsYWNlRWRpdC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBJbnNlcnRSZXBsYWNlRWRpdH0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VGV4dCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLmluc2VydCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJlcGxhY2UpO1xuICAgIH1cbiAgICBJbnNlcnRSZXBsYWNlRWRpdC5pcyA9IGlzO1xufSkoSW5zZXJ0UmVwbGFjZUVkaXQgfHwgKEluc2VydFJlcGxhY2VFZGl0ID0ge30pKTtcbi8qKlxuICogSG93IHdoaXRlc3BhY2UgYW5kIGluZGVudGF0aW9uIGlzIGhhbmRsZWQgZHVyaW5nIGNvbXBsZXRpb25cbiAqIGl0ZW0gaW5zZXJ0aW9uLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIEluc2VydFRleHRNb2RlO1xuKGZ1bmN0aW9uIChJbnNlcnRUZXh0TW9kZSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBpbnNlcnRpb24gb3IgcmVwbGFjZSBzdHJpbmdzIGlzIHRha2VuIGFzIGl0IGlzLiBJZiB0aGVcbiAgICAgKiB2YWx1ZSBpcyBtdWx0aSBsaW5lIHRoZSBsaW5lcyBiZWxvdyB0aGUgY3Vyc29yIHdpbGwgYmVcbiAgICAgKiBpbnNlcnRlZCB1c2luZyB0aGUgaW5kZW50YXRpb24gZGVmaW5lZCBpbiB0aGUgc3RyaW5nIHZhbHVlLlxuICAgICAqIFRoZSBjbGllbnQgd2lsbCBub3QgYXBwbHkgYW55IGtpbmQgb2YgYWRqdXN0bWVudHMgdG8gdGhlXG4gICAgICogc3RyaW5nLlxuICAgICAqL1xuICAgIEluc2VydFRleHRNb2RlLmFzSXMgPSAxO1xuICAgIC8qKlxuICAgICAqIFRoZSBlZGl0b3IgYWRqdXN0cyBsZWFkaW5nIHdoaXRlc3BhY2Ugb2YgbmV3IGxpbmVzIHNvIHRoYXRcbiAgICAgKiB0aGV5IG1hdGNoIHRoZSBpbmRlbnRhdGlvbiB1cCB0byB0aGUgY3Vyc29yIG9mIHRoZSBsaW5lIGZvclxuICAgICAqIHdoaWNoIHRoZSBpdGVtIGlzIGFjY2VwdGVkLlxuICAgICAqXG4gICAgICogQ29uc2lkZXIgYSBsaW5lIGxpa2UgdGhpczogPDJ0YWJzPjxjdXJzb3I+PDN0YWJzPmZvby4gQWNjZXB0aW5nIGFcbiAgICAgKiBtdWx0aSBsaW5lIGNvbXBsZXRpb24gaXRlbSBpcyBpbmRlbnRlZCB1c2luZyAyIHRhYnMgYW5kIGFsbFxuICAgICAqIGZvbGxvd2luZyBsaW5lcyBpbnNlcnRlZCB3aWxsIGJlIGluZGVudGVkIHVzaW5nIDIgdGFicyBhcyB3ZWxsLlxuICAgICAqL1xuICAgIEluc2VydFRleHRNb2RlLmFkanVzdEluZGVudGF0aW9uID0gMjtcbn0pKEluc2VydFRleHRNb2RlIHx8IChJbnNlcnRUZXh0TW9kZSA9IHt9KSk7XG52YXIgQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHM7XG4oZnVuY3Rpb24gKENvbXBsZXRpb25JdGVtTGFiZWxEZXRhaWxzKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUuZGV0YWlsKSB8fCBjYW5kaWRhdGUuZGV0YWlsID09PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5kZXNjcmlwdGlvbikgfHwgY2FuZGlkYXRlLmRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQpO1xuICAgIH1cbiAgICBDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlscy5pcyA9IGlzO1xufSkoQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHMgfHwgKENvbXBsZXRpb25JdGVtTGFiZWxEZXRhaWxzID0ge30pKTtcbi8qKlxuICogVGhlIENvbXBsZXRpb25JdGVtIG5hbWVzcGFjZSBwcm92aWRlcyBmdW5jdGlvbnMgdG8gZGVhbCB3aXRoXG4gKiBjb21wbGV0aW9uIGl0ZW1zLlxuICovXG52YXIgQ29tcGxldGlvbkl0ZW07XG4oZnVuY3Rpb24gKENvbXBsZXRpb25JdGVtKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY29tcGxldGlvbiBpdGVtIGFuZCBzZWVkIGl0IHdpdGggYSBsYWJlbC5cbiAgICAgKiBAcGFyYW0gbGFiZWwgVGhlIGNvbXBsZXRpb24gaXRlbSdzIGxhYmVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsKSB7XG4gICAgICAgIHJldHVybiB7IGxhYmVsIH07XG4gICAgfVxuICAgIENvbXBsZXRpb25JdGVtLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKENvbXBsZXRpb25JdGVtIHx8IChDb21wbGV0aW9uSXRlbSA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb21wbGV0aW9uTGlzdCBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aFxuICogY29tcGxldGlvbiBsaXN0cy5cbiAqL1xudmFyIENvbXBsZXRpb25MaXN0O1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uTGlzdCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29tcGxldGlvbiBsaXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGl0ZW1zIFRoZSBjb21wbGV0aW9uIGl0ZW1zLlxuICAgICAqIEBwYXJhbSBpc0luY29tcGxldGUgVGhlIGxpc3QgaXMgbm90IGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShpdGVtcywgaXNJbmNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiB7IGl0ZW1zOiBpdGVtcyA/IGl0ZW1zIDogW10sIGlzSW5jb21wbGV0ZTogISFpc0luY29tcGxldGUgfTtcbiAgICB9XG4gICAgQ29tcGxldGlvbkxpc3QuY3JlYXRlID0gY3JlYXRlO1xufSkoQ29tcGxldGlvbkxpc3QgfHwgKENvbXBsZXRpb25MaXN0ID0ge30pKTtcbnZhciBNYXJrZWRTdHJpbmc7XG4oZnVuY3Rpb24gKE1hcmtlZFN0cmluZykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXJrZWQgc3RyaW5nIGZyb20gcGxhaW4gdGV4dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwbGFpblRleHQgVGhlIHBsYWluIHRleHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBsYWluVGV4dChwbGFpblRleHQpIHtcbiAgICAgICAgcmV0dXJuIHBsYWluVGV4dC5yZXBsYWNlKC9bXFxcXGAqX3t9W1xcXSgpIytcXC0uIV0vZywgJ1xcXFwkJicpOyAvLyBlc2NhcGUgbWFya2Rvd24gc3ludGF4IHRva2VuczogaHR0cDovL2RhcmluZ2ZpcmViYWxsLm5ldC9wcm9qZWN0cy9tYXJrZG93bi9zeW50YXgjYmFja3NsYXNoXG4gICAgfVxuICAgIE1hcmtlZFN0cmluZy5mcm9tUGxhaW5UZXh0ID0gZnJvbVBsYWluVGV4dDtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgY29uZm9ybXMgdG8gdGhlIHtAbGluayBNYXJrZWRTdHJpbmd9IHR5cGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5zdHJpbmcoY2FuZGlkYXRlKSB8fCAoSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudmFsdWUpKTtcbiAgICB9XG4gICAgTWFya2VkU3RyaW5nLmlzID0gaXM7XG59KShNYXJrZWRTdHJpbmcgfHwgKE1hcmtlZFN0cmluZyA9IHt9KSk7XG52YXIgSG92ZXI7XG4oZnVuY3Rpb24gKEhvdmVyKSB7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgSG92ZXJ9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiAhIWNhbmRpZGF0ZSAmJiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgKE1hcmt1cENvbnRlbnQuaXMoY2FuZGlkYXRlLmNvbnRlbnRzKSB8fFxuICAgICAgICAgICAgTWFya2VkU3RyaW5nLmlzKGNhbmRpZGF0ZS5jb250ZW50cykgfHxcbiAgICAgICAgICAgIElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmNvbnRlbnRzLCBNYXJrZWRTdHJpbmcuaXMpKSAmJiAodmFsdWUucmFuZ2UgPT09IHVuZGVmaW5lZCB8fCBSYW5nZS5pcyh2YWx1ZS5yYW5nZSkpO1xuICAgIH1cbiAgICBIb3Zlci5pcyA9IGlzO1xufSkoSG92ZXIgfHwgKEhvdmVyID0ge30pKTtcbi8qKlxuICogVGhlIFBhcmFtZXRlckluZm9ybWF0aW9uIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFBhcmFtZXRlckluZm9ybWF0aW9ufSBsaXRlcmFscy5cbiAqL1xudmFyIFBhcmFtZXRlckluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uIChQYXJhbWV0ZXJJbmZvcm1hdGlvbikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcGFyYW1ldGVyIGluZm9ybWF0aW9uIGxpdGVyYWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGFiZWwgQSBsYWJlbCBzdHJpbmcuXG4gICAgICogQHBhcmFtIGRvY3VtZW50YXRpb24gQSBkb2Mgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgZG9jdW1lbnRhdGlvbikge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnRhdGlvbiA/IHsgbGFiZWwsIGRvY3VtZW50YXRpb24gfSA6IHsgbGFiZWwgfTtcbiAgICB9XG4gICAgUGFyYW1ldGVySW5mb3JtYXRpb24uY3JlYXRlID0gY3JlYXRlO1xufSkoUGFyYW1ldGVySW5mb3JtYXRpb24gfHwgKFBhcmFtZXRlckluZm9ybWF0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIFNpZ25hdHVyZUluZm9ybWF0aW9uIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFNpZ25hdHVyZUluZm9ybWF0aW9ufSBsaXRlcmFscy5cbiAqL1xudmFyIFNpZ25hdHVyZUluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uIChTaWduYXR1cmVJbmZvcm1hdGlvbikge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgZG9jdW1lbnRhdGlvbiwgLi4ucGFyYW1ldGVycykge1xuICAgICAgICBsZXQgcmVzdWx0ID0geyBsYWJlbCB9O1xuICAgICAgICBpZiAoSXMuZGVmaW5lZChkb2N1bWVudGF0aW9uKSkge1xuICAgICAgICAgICAgcmVzdWx0LmRvY3VtZW50YXRpb24gPSBkb2N1bWVudGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHBhcmFtZXRlcnMpKSB7XG4gICAgICAgICAgICByZXN1bHQucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucGFyYW1ldGVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFNpZ25hdHVyZUluZm9ybWF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFNpZ25hdHVyZUluZm9ybWF0aW9uIHx8IChTaWduYXR1cmVJbmZvcm1hdGlvbiA9IHt9KSk7XG4vKipcbiAqIEEgZG9jdW1lbnQgaGlnaGxpZ2h0IGtpbmQuXG4gKi9cbnZhciBEb2N1bWVudEhpZ2hsaWdodEtpbmQ7XG4oZnVuY3Rpb24gKERvY3VtZW50SGlnaGxpZ2h0S2luZCkge1xuICAgIC8qKlxuICAgICAqIEEgdGV4dHVhbCBvY2N1cnJlbmNlLlxuICAgICAqL1xuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZC5UZXh0ID0gMTtcbiAgICAvKipcbiAgICAgKiBSZWFkLWFjY2VzcyBvZiBhIHN5bWJvbCwgbGlrZSByZWFkaW5nIGEgdmFyaWFibGUuXG4gICAgICovXG4gICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kLlJlYWQgPSAyO1xuICAgIC8qKlxuICAgICAqIFdyaXRlLWFjY2VzcyBvZiBhIHN5bWJvbCwgbGlrZSB3cml0aW5nIHRvIGEgdmFyaWFibGUuXG4gICAgICovXG4gICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kLldyaXRlID0gMztcbn0pKERvY3VtZW50SGlnaGxpZ2h0S2luZCB8fCAoRG9jdW1lbnRIaWdobGlnaHRLaW5kID0ge30pKTtcbi8qKlxuICogRG9jdW1lbnRIaWdobGlnaHQgbmFtZXNwYWNlIHRvIHByb3ZpZGUgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBEb2N1bWVudEhpZ2hsaWdodH0gbGl0ZXJhbHMuXG4gKi9cbnZhciBEb2N1bWVudEhpZ2hsaWdodDtcbihmdW5jdGlvbiAoRG9jdW1lbnRIaWdobGlnaHQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBEb2N1bWVudEhpZ2hsaWdodCBvYmplY3QuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0aGUgaGlnaGxpZ2h0IGFwcGxpZXMgdG8uXG4gICAgICogQHBhcmFtIGtpbmQgVGhlIGhpZ2hsaWdodCBraW5kXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBraW5kKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7IHJhbmdlIH07XG4gICAgICAgIGlmIChJcy5udW1iZXIoa2luZCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5raW5kID0ga2luZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBEb2N1bWVudEhpZ2hsaWdodC5jcmVhdGUgPSBjcmVhdGU7XG59KShEb2N1bWVudEhpZ2hsaWdodCB8fCAoRG9jdW1lbnRIaWdobGlnaHQgPSB7fSkpO1xuLyoqXG4gKiBBIHN5bWJvbCBraW5kLlxuICovXG52YXIgU3ltYm9sS2luZDtcbihmdW5jdGlvbiAoU3ltYm9sS2luZCkge1xuICAgIFN5bWJvbEtpbmQuRmlsZSA9IDE7XG4gICAgU3ltYm9sS2luZC5Nb2R1bGUgPSAyO1xuICAgIFN5bWJvbEtpbmQuTmFtZXNwYWNlID0gMztcbiAgICBTeW1ib2xLaW5kLlBhY2thZ2UgPSA0O1xuICAgIFN5bWJvbEtpbmQuQ2xhc3MgPSA1O1xuICAgIFN5bWJvbEtpbmQuTWV0aG9kID0gNjtcbiAgICBTeW1ib2xLaW5kLlByb3BlcnR5ID0gNztcbiAgICBTeW1ib2xLaW5kLkZpZWxkID0gODtcbiAgICBTeW1ib2xLaW5kLkNvbnN0cnVjdG9yID0gOTtcbiAgICBTeW1ib2xLaW5kLkVudW0gPSAxMDtcbiAgICBTeW1ib2xLaW5kLkludGVyZmFjZSA9IDExO1xuICAgIFN5bWJvbEtpbmQuRnVuY3Rpb24gPSAxMjtcbiAgICBTeW1ib2xLaW5kLlZhcmlhYmxlID0gMTM7XG4gICAgU3ltYm9sS2luZC5Db25zdGFudCA9IDE0O1xuICAgIFN5bWJvbEtpbmQuU3RyaW5nID0gMTU7XG4gICAgU3ltYm9sS2luZC5OdW1iZXIgPSAxNjtcbiAgICBTeW1ib2xLaW5kLkJvb2xlYW4gPSAxNztcbiAgICBTeW1ib2xLaW5kLkFycmF5ID0gMTg7XG4gICAgU3ltYm9sS2luZC5PYmplY3QgPSAxOTtcbiAgICBTeW1ib2xLaW5kLktleSA9IDIwO1xuICAgIFN5bWJvbEtpbmQuTnVsbCA9IDIxO1xuICAgIFN5bWJvbEtpbmQuRW51bU1lbWJlciA9IDIyO1xuICAgIFN5bWJvbEtpbmQuU3RydWN0ID0gMjM7XG4gICAgU3ltYm9sS2luZC5FdmVudCA9IDI0O1xuICAgIFN5bWJvbEtpbmQuT3BlcmF0b3IgPSAyNTtcbiAgICBTeW1ib2xLaW5kLlR5cGVQYXJhbWV0ZXIgPSAyNjtcbn0pKFN5bWJvbEtpbmQgfHwgKFN5bWJvbEtpbmQgPSB7fSkpO1xuLyoqXG4gKiBTeW1ib2wgdGFncyBhcmUgZXh0cmEgYW5ub3RhdGlvbnMgdGhhdCB0d2VhayB0aGUgcmVuZGVyaW5nIG9mIGEgc3ltYm9sLlxuICpcbiAqIEBzaW5jZSAzLjE2XG4gKi9cbnZhciBTeW1ib2xUYWc7XG4oZnVuY3Rpb24gKFN5bWJvbFRhZykge1xuICAgIC8qKlxuICAgICAqIFJlbmRlciBhIHN5bWJvbCBhcyBvYnNvbGV0ZSwgdXN1YWxseSB1c2luZyBhIHN0cmlrZS1vdXQuXG4gICAgICovXG4gICAgU3ltYm9sVGFnLkRlcHJlY2F0ZWQgPSAxO1xufSkoU3ltYm9sVGFnIHx8IChTeW1ib2xUYWcgPSB7fSkpO1xudmFyIFN5bWJvbEluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uIChTeW1ib2xJbmZvcm1hdGlvbikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgc3ltYm9sIGluZm9ybWF0aW9uIGxpdGVyYWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc3ltYm9sLlxuICAgICAqIEBwYXJhbSBraW5kIFRoZSBraW5kIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSBvZiB0aGUgbG9jYXRpb24gb2YgdGhlIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSByZXNvdXJjZSBvZiB0aGUgbG9jYXRpb24gb2Ygc3ltYm9sLlxuICAgICAqIEBwYXJhbSBjb250YWluZXJOYW1lIFRoZSBuYW1lIG9mIHRoZSBzeW1ib2wgY29udGFpbmluZyB0aGUgc3ltYm9sLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBraW5kLCByYW5nZSwgdXJpLCBjb250YWluZXJOYW1lKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgIGxvY2F0aW9uOiB7IHVyaSwgcmFuZ2UgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoY29udGFpbmVyTmFtZSkge1xuICAgICAgICAgICAgcmVzdWx0LmNvbnRhaW5lck5hbWUgPSBjb250YWluZXJOYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFN5bWJvbEluZm9ybWF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFN5bWJvbEluZm9ybWF0aW9uIHx8IChTeW1ib2xJbmZvcm1hdGlvbiA9IHt9KSk7XG52YXIgV29ya3NwYWNlU3ltYm9sO1xuKGZ1bmN0aW9uIChXb3Jrc3BhY2VTeW1ib2wpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgd29ya3NwYWNlIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIGtpbmQgVGhlIGtpbmQgb2YgdGhlIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSByZXNvdXJjZSBvZiB0aGUgbG9jYXRpb24gb2YgdGhlIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0gcmFuZ2UgQW4gb3B0aW9ucyByYW5nZSBvZiB0aGUgbG9jYXRpb24uXG4gICAgICogQHJldHVybnMgQSBXb3Jrc3BhY2VTeW1ib2wuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKG5hbWUsIGtpbmQsIHVyaSwgcmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHJhbmdlICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8geyBuYW1lLCBraW5kLCBsb2NhdGlvbjogeyB1cmksIHJhbmdlIH0gfVxuICAgICAgICAgICAgOiB7IG5hbWUsIGtpbmQsIGxvY2F0aW9uOiB7IHVyaSB9IH07XG4gICAgfVxuICAgIFdvcmtzcGFjZVN5bWJvbC5jcmVhdGUgPSBjcmVhdGU7XG59KShXb3Jrc3BhY2VTeW1ib2wgfHwgKFdvcmtzcGFjZVN5bWJvbCA9IHt9KSk7XG52YXIgRG9jdW1lbnRTeW1ib2w7XG4oZnVuY3Rpb24gKERvY3VtZW50U3ltYm9sKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBzeW1ib2wgaW5mb3JtYXRpb24gbGl0ZXJhbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIGRldGFpbCBUaGUgZGV0YWlsIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIGtpbmQgVGhlIGtpbmQgb2YgdGhlIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIHNlbGVjdGlvblJhbmdlIFRoZSBzZWxlY3Rpb25SYW5nZSBvZiB0aGUgc3ltYm9sLlxuICAgICAqIEBwYXJhbSBjaGlsZHJlbiBDaGlsZHJlbiBvZiB0aGUgc3ltYm9sLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBkZXRhaWwsIGtpbmQsIHJhbmdlLCBzZWxlY3Rpb25SYW5nZSwgY2hpbGRyZW4pIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBkZXRhaWwsXG4gICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgcmFuZ2UsXG4gICAgICAgICAgICBzZWxlY3Rpb25SYW5nZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgRG9jdW1lbnRTeW1ib2wuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgRG9jdW1lbnRTeW1ib2x9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiZcbiAgICAgICAgICAgIElzLnN0cmluZyhjYW5kaWRhdGUubmFtZSkgJiYgSXMubnVtYmVyKGNhbmRpZGF0ZS5raW5kKSAmJlxuICAgICAgICAgICAgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUuc2VsZWN0aW9uUmFuZ2UpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmRldGFpbCA9PT0gdW5kZWZpbmVkIHx8IElzLnN0cmluZyhjYW5kaWRhdGUuZGV0YWlsKSkgJiZcbiAgICAgICAgICAgIChjYW5kaWRhdGUuZGVwcmVjYXRlZCA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLmRlcHJlY2F0ZWQpKSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkIHx8IEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLmNoaWxkcmVuKSkgJiZcbiAgICAgICAgICAgIChjYW5kaWRhdGUudGFncyA9PT0gdW5kZWZpbmVkIHx8IEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLnRhZ3MpKTtcbiAgICB9XG4gICAgRG9jdW1lbnRTeW1ib2wuaXMgPSBpcztcbn0pKERvY3VtZW50U3ltYm9sIHx8IChEb2N1bWVudFN5bWJvbCA9IHt9KSk7XG4vKipcbiAqIEEgc2V0IG9mIHByZWRlZmluZWQgY29kZSBhY3Rpb24ga2luZHNcbiAqL1xudmFyIENvZGVBY3Rpb25LaW5kO1xuKGZ1bmN0aW9uIChDb2RlQWN0aW9uS2luZCkge1xuICAgIC8qKlxuICAgICAqIEVtcHR5IGtpbmQuXG4gICAgICovXG4gICAgQ29kZUFjdGlvbktpbmQuRW1wdHkgPSAnJztcbiAgICAvKipcbiAgICAgKiBCYXNlIGtpbmQgZm9yIHF1aWNrZml4IGFjdGlvbnM6ICdxdWlja2ZpeCdcbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uS2luZC5RdWlja0ZpeCA9ICdxdWlja2ZpeCc7XG4gICAgLyoqXG4gICAgICogQmFzZSBraW5kIGZvciByZWZhY3RvcmluZyBhY3Rpb25zOiAncmVmYWN0b3InXG4gICAgICovXG4gICAgQ29kZUFjdGlvbktpbmQuUmVmYWN0b3IgPSAncmVmYWN0b3InO1xuICAgIC8qKlxuICAgICAqIEJhc2Uga2luZCBmb3IgcmVmYWN0b3JpbmcgZXh0cmFjdGlvbiBhY3Rpb25zOiAncmVmYWN0b3IuZXh0cmFjdCdcbiAgICAgKlxuICAgICAqIEV4YW1wbGUgZXh0cmFjdCBhY3Rpb25zOlxuICAgICAqXG4gICAgICogLSBFeHRyYWN0IG1ldGhvZFxuICAgICAqIC0gRXh0cmFjdCBmdW5jdGlvblxuICAgICAqIC0gRXh0cmFjdCB2YXJpYWJsZVxuICAgICAqIC0gRXh0cmFjdCBpbnRlcmZhY2UgZnJvbSBjbGFzc1xuICAgICAqIC0gLi4uXG4gICAgICovXG4gICAgQ29kZUFjdGlvbktpbmQuUmVmYWN0b3JFeHRyYWN0ID0gJ3JlZmFjdG9yLmV4dHJhY3QnO1xuICAgIC8qKlxuICAgICAqIEJhc2Uga2luZCBmb3IgcmVmYWN0b3JpbmcgaW5saW5lIGFjdGlvbnM6ICdyZWZhY3Rvci5pbmxpbmUnXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIGlubGluZSBhY3Rpb25zOlxuICAgICAqXG4gICAgICogLSBJbmxpbmUgZnVuY3Rpb25cbiAgICAgKiAtIElubGluZSB2YXJpYWJsZVxuICAgICAqIC0gSW5saW5lIGNvbnN0YW50XG4gICAgICogLSAuLi5cbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uS2luZC5SZWZhY3RvcklubGluZSA9ICdyZWZhY3Rvci5pbmxpbmUnO1xuICAgIC8qKlxuICAgICAqIEJhc2Uga2luZCBmb3IgcmVmYWN0b3JpbmcgcmV3cml0ZSBhY3Rpb25zOiAncmVmYWN0b3IucmV3cml0ZSdcbiAgICAgKlxuICAgICAqIEV4YW1wbGUgcmV3cml0ZSBhY3Rpb25zOlxuICAgICAqXG4gICAgICogLSBDb252ZXJ0IEphdmFTY3JpcHQgZnVuY3Rpb24gdG8gY2xhc3NcbiAgICAgKiAtIEFkZCBvciByZW1vdmUgcGFyYW1ldGVyXG4gICAgICogLSBFbmNhcHN1bGF0ZSBmaWVsZFxuICAgICAqIC0gTWFrZSBtZXRob2Qgc3RhdGljXG4gICAgICogLSBNb3ZlIG1ldGhvZCB0byBiYXNlIGNsYXNzXG4gICAgICogLSAuLi5cbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uS2luZC5SZWZhY3RvclJld3JpdGUgPSAncmVmYWN0b3IucmV3cml0ZSc7XG4gICAgLyoqXG4gICAgICogQmFzZSBraW5kIGZvciBzb3VyY2UgYWN0aW9uczogYHNvdXJjZWBcbiAgICAgKlxuICAgICAqIFNvdXJjZSBjb2RlIGFjdGlvbnMgYXBwbHkgdG8gdGhlIGVudGlyZSBmaWxlLlxuICAgICAqL1xuICAgIENvZGVBY3Rpb25LaW5kLlNvdXJjZSA9ICdzb3VyY2UnO1xuICAgIC8qKlxuICAgICAqIEJhc2Uga2luZCBmb3IgYW4gb3JnYW5pemUgaW1wb3J0cyBzb3VyY2UgYWN0aW9uOiBgc291cmNlLm9yZ2FuaXplSW1wb3J0c2BcbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uS2luZC5Tb3VyY2VPcmdhbml6ZUltcG9ydHMgPSAnc291cmNlLm9yZ2FuaXplSW1wb3J0cyc7XG4gICAgLyoqXG4gICAgICogQmFzZSBraW5kIGZvciBhdXRvLWZpeCBzb3VyY2UgYWN0aW9uczogYHNvdXJjZS5maXhBbGxgLlxuICAgICAqXG4gICAgICogRml4IGFsbCBhY3Rpb25zIGF1dG9tYXRpY2FsbHkgZml4IGVycm9ycyB0aGF0IGhhdmUgYSBjbGVhciBmaXggdGhhdCBkbyBub3QgcmVxdWlyZSB1c2VyIGlucHV0LlxuICAgICAqIFRoZXkgc2hvdWxkIG5vdCBzdXBwcmVzcyBlcnJvcnMgb3IgcGVyZm9ybSB1bnNhZmUgZml4ZXMgc3VjaCBhcyBnZW5lcmF0aW5nIG5ldyB0eXBlcyBvciBjbGFzc2VzLlxuICAgICAqXG4gICAgICogQHNpbmNlIDMuMTUuMFxuICAgICAqL1xuICAgIENvZGVBY3Rpb25LaW5kLlNvdXJjZUZpeEFsbCA9ICdzb3VyY2UuZml4QWxsJztcbn0pKENvZGVBY3Rpb25LaW5kIHx8IChDb2RlQWN0aW9uS2luZCA9IHt9KSk7XG4vKipcbiAqIFRoZSByZWFzb24gd2h5IGNvZGUgYWN0aW9ucyB3ZXJlIHJlcXVlc3RlZC5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBDb2RlQWN0aW9uVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKENvZGVBY3Rpb25UcmlnZ2VyS2luZCkge1xuICAgIC8qKlxuICAgICAqIENvZGUgYWN0aW9ucyB3ZXJlIGV4cGxpY2l0bHkgcmVxdWVzdGVkIGJ5IHRoZSB1c2VyIG9yIGJ5IGFuIGV4dGVuc2lvbi5cbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uVHJpZ2dlcktpbmQuSW52b2tlZCA9IDE7XG4gICAgLyoqXG4gICAgICogQ29kZSBhY3Rpb25zIHdlcmUgcmVxdWVzdGVkIGF1dG9tYXRpY2FsbHkuXG4gICAgICpcbiAgICAgKiBUaGlzIHR5cGljYWxseSBoYXBwZW5zIHdoZW4gY3VycmVudCBzZWxlY3Rpb24gaW4gYSBmaWxlIGNoYW5nZXMsIGJ1dCBjYW5cbiAgICAgKiBhbHNvIGJlIHRyaWdnZXJlZCB3aGVuIGZpbGUgY29udGVudCBjaGFuZ2VzLlxuICAgICAqL1xuICAgIENvZGVBY3Rpb25UcmlnZ2VyS2luZC5BdXRvbWF0aWMgPSAyO1xufSkoQ29kZUFjdGlvblRyaWdnZXJLaW5kIHx8IChDb2RlQWN0aW9uVHJpZ2dlcktpbmQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgQ29kZUFjdGlvbkNvbnRleHQgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgQ29kZUFjdGlvbkNvbnRleHR9IGxpdGVyYWxzLlxuICovXG52YXIgQ29kZUFjdGlvbkNvbnRleHQ7XG4oZnVuY3Rpb24gKENvZGVBY3Rpb25Db250ZXh0KSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2RlQWN0aW9uQ29udGV4dCBsaXRlcmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShkaWFnbm9zdGljcywgb25seSwgdHJpZ2dlcktpbmQpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgZGlhZ25vc3RpY3MgfTtcbiAgICAgICAgaWYgKG9ubHkgIT09IHVuZGVmaW5lZCAmJiBvbmx5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQub25seSA9IG9ubHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyaWdnZXJLaW5kICE9PSB1bmRlZmluZWQgJiYgdHJpZ2dlcktpbmQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC50cmlnZ2VyS2luZCA9IHRyaWdnZXJLaW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIENvZGVBY3Rpb25Db250ZXh0LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIENvZGVBY3Rpb25Db250ZXh0fSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmRpYWdub3N0aWNzLCBEaWFnbm9zdGljLmlzKVxuICAgICAgICAgICAgJiYgKGNhbmRpZGF0ZS5vbmx5ID09PSB1bmRlZmluZWQgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUub25seSwgSXMuc3RyaW5nKSlcbiAgICAgICAgICAgICYmIChjYW5kaWRhdGUudHJpZ2dlcktpbmQgPT09IHVuZGVmaW5lZCB8fCBjYW5kaWRhdGUudHJpZ2dlcktpbmQgPT09IENvZGVBY3Rpb25UcmlnZ2VyS2luZC5JbnZva2VkIHx8IGNhbmRpZGF0ZS50cmlnZ2VyS2luZCA9PT0gQ29kZUFjdGlvblRyaWdnZXJLaW5kLkF1dG9tYXRpYyk7XG4gICAgfVxuICAgIENvZGVBY3Rpb25Db250ZXh0LmlzID0gaXM7XG59KShDb2RlQWN0aW9uQ29udGV4dCB8fCAoQ29kZUFjdGlvbkNvbnRleHQgPSB7fSkpO1xudmFyIENvZGVBY3Rpb247XG4oZnVuY3Rpb24gKENvZGVBY3Rpb24pIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUodGl0bGUsIGtpbmRPckNvbW1hbmRPckVkaXQsIGtpbmQpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgdGl0bGUgfTtcbiAgICAgICAgbGV0IGNoZWNrS2luZCA9IHRydWU7XG4gICAgICAgIGlmICh0eXBlb2Yga2luZE9yQ29tbWFuZE9yRWRpdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNoZWNrS2luZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmVzdWx0LmtpbmQgPSBraW5kT3JDb21tYW5kT3JFZGl0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKENvbW1hbmQuaXMoa2luZE9yQ29tbWFuZE9yRWRpdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb21tYW5kID0ga2luZE9yQ29tbWFuZE9yRWRpdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5lZGl0ID0ga2luZE9yQ29tbWFuZE9yRWRpdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hlY2tLaW5kICYmIGtpbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmtpbmQgPSBraW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIENvZGVBY3Rpb24uY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRpdGxlKSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5kaWFnbm9zdGljcyA9PT0gdW5kZWZpbmVkIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmRpYWdub3N0aWNzLCBEaWFnbm9zdGljLmlzKSkgJiZcbiAgICAgICAgICAgIChjYW5kaWRhdGUua2luZCA9PT0gdW5kZWZpbmVkIHx8IElzLnN0cmluZyhjYW5kaWRhdGUua2luZCkpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmVkaXQgIT09IHVuZGVmaW5lZCB8fCBjYW5kaWRhdGUuY29tbWFuZCAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5jb21tYW5kID09PSB1bmRlZmluZWQgfHwgQ29tbWFuZC5pcyhjYW5kaWRhdGUuY29tbWFuZCkpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmlzUHJlZmVycmVkID09PSB1bmRlZmluZWQgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUuaXNQcmVmZXJyZWQpKSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5lZGl0ID09PSB1bmRlZmluZWQgfHwgV29ya3NwYWNlRWRpdC5pcyhjYW5kaWRhdGUuZWRpdCkpO1xuICAgIH1cbiAgICBDb2RlQWN0aW9uLmlzID0gaXM7XG59KShDb2RlQWN0aW9uIHx8IChDb2RlQWN0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIENvZGVMZW5zIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIENvZGVMZW5zfSBsaXRlcmFscy5cbiAqL1xudmFyIENvZGVMZW5zO1xuKGZ1bmN0aW9uIChDb2RlTGVucykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29kZUxlbnMgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGRhdGEpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgcmFuZ2UgfTtcbiAgICAgICAgaWYgKElzLmRlZmluZWQoZGF0YSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5kYXRhID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBDb2RlTGVucy5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBDb2RlTGVuc30gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmNvbW1hbmQpIHx8IENvbW1hbmQuaXMoY2FuZGlkYXRlLmNvbW1hbmQpKTtcbiAgICB9XG4gICAgQ29kZUxlbnMuaXMgPSBpcztcbn0pKENvZGVMZW5zIHx8IChDb2RlTGVucyA9IHt9KSk7XG4vKipcbiAqIFRoZSBGb3JtYXR0aW5nT3B0aW9ucyBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBGb3JtYXR0aW5nT3B0aW9uc30gbGl0ZXJhbHMuXG4gKi9cbnZhciBGb3JtYXR0aW5nT3B0aW9ucztcbihmdW5jdGlvbiAoRm9ybWF0dGluZ09wdGlvbnMpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEZvcm1hdHRpbmdPcHRpb25zIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRhYlNpemUsIGluc2VydFNwYWNlcykge1xuICAgICAgICByZXR1cm4geyB0YWJTaXplLCBpbnNlcnRTcGFjZXMgfTtcbiAgICB9XG4gICAgRm9ybWF0dGluZ09wdGlvbnMuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgRm9ybWF0dGluZ09wdGlvbnN9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLnRhYlNpemUpICYmIElzLmJvb2xlYW4oY2FuZGlkYXRlLmluc2VydFNwYWNlcyk7XG4gICAgfVxuICAgIEZvcm1hdHRpbmdPcHRpb25zLmlzID0gaXM7XG59KShGb3JtYXR0aW5nT3B0aW9ucyB8fCAoRm9ybWF0dGluZ09wdGlvbnMgPSB7fSkpO1xuLyoqXG4gKiBUaGUgRG9jdW1lbnRMaW5rIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIERvY3VtZW50TGlua30gbGl0ZXJhbHMuXG4gKi9cbnZhciBEb2N1bWVudExpbms7XG4oZnVuY3Rpb24gKERvY3VtZW50TGluaykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgRG9jdW1lbnRMaW5rIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCB0YXJnZXQsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2UsIHRhcmdldCwgZGF0YSB9O1xuICAgIH1cbiAgICBEb2N1bWVudExpbmsuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgRG9jdW1lbnRMaW5rfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUudGFyZ2V0KSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnRhcmdldCkpO1xuICAgIH1cbiAgICBEb2N1bWVudExpbmsuaXMgPSBpcztcbn0pKERvY3VtZW50TGluayB8fCAoRG9jdW1lbnRMaW5rID0ge30pKTtcbi8qKlxuICogVGhlIFNlbGVjdGlvblJhbmdlIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb24gdG8gd29yayB3aXRoXG4gKiBTZWxlY3Rpb25SYW5nZSBsaXRlcmFscy5cbiAqL1xudmFyIFNlbGVjdGlvblJhbmdlO1xuKGZ1bmN0aW9uIChTZWxlY3Rpb25SYW5nZSkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgU2VsZWN0aW9uUmFuZ2VcbiAgICAgKiBAcGFyYW0gcmFuZ2UgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSBwYXJlbnQgYW4gb3B0aW9uYWwgcGFyZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgcGFyZW50KSB7XG4gICAgICAgIHJldHVybiB7IHJhbmdlLCBwYXJlbnQgfTtcbiAgICB9XG4gICAgU2VsZWN0aW9uUmFuZ2UuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChjYW5kaWRhdGUucGFyZW50ID09PSB1bmRlZmluZWQgfHwgU2VsZWN0aW9uUmFuZ2UuaXMoY2FuZGlkYXRlLnBhcmVudCkpO1xuICAgIH1cbiAgICBTZWxlY3Rpb25SYW5nZS5pcyA9IGlzO1xufSkoU2VsZWN0aW9uUmFuZ2UgfHwgKFNlbGVjdGlvblJhbmdlID0ge30pKTtcbi8qKlxuICogQSBzZXQgb2YgcHJlZGVmaW5lZCB0b2tlbiB0eXBlcy4gVGhpcyBzZXQgaXMgbm90IGZpeGVkXG4gKiBhbiBjbGllbnRzIGNhbiBzcGVjaWZ5IGFkZGl0aW9uYWwgdG9rZW4gdHlwZXMgdmlhIHRoZVxuICogY29ycmVzcG9uZGluZyBjbGllbnQgY2FwYWJpbGl0aWVzLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIFNlbWFudGljVG9rZW5UeXBlcztcbihmdW5jdGlvbiAoU2VtYW50aWNUb2tlblR5cGVzKSB7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wibmFtZXNwYWNlXCJdID0gXCJuYW1lc3BhY2VcIjtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgZ2VuZXJpYyB0eXBlLiBBY3RzIGFzIGEgZmFsbGJhY2sgZm9yIHR5cGVzIHdoaWNoIGNhbid0IGJlIG1hcHBlZCB0b1xuICAgICAqIGEgc3BlY2lmaWMgdHlwZSBsaWtlIGNsYXNzIG9yIGVudW0uXG4gICAgICovXG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1widHlwZVwiXSA9IFwidHlwZVwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImNsYXNzXCJdID0gXCJjbGFzc1wiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImVudW1cIl0gPSBcImVudW1cIjtcbiAgICBTZW1hbnRpY1Rva2VuVHlwZXNbXCJpbnRlcmZhY2VcIl0gPSBcImludGVyZmFjZVwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcInN0cnVjdFwiXSA9IFwic3RydWN0XCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1widHlwZVBhcmFtZXRlclwiXSA9IFwidHlwZVBhcmFtZXRlclwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcInBhcmFtZXRlclwiXSA9IFwicGFyYW1ldGVyXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1widmFyaWFibGVcIl0gPSBcInZhcmlhYmxlXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wicHJvcGVydHlcIl0gPSBcInByb3BlcnR5XCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wiZW51bU1lbWJlclwiXSA9IFwiZW51bU1lbWJlclwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImV2ZW50XCJdID0gXCJldmVudFwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImZ1bmN0aW9uXCJdID0gXCJmdW5jdGlvblwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcIm1ldGhvZFwiXSA9IFwibWV0aG9kXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wibWFjcm9cIl0gPSBcIm1hY3JvXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wia2V5d29yZFwiXSA9IFwia2V5d29yZFwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcIm1vZGlmaWVyXCJdID0gXCJtb2RpZmllclwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImNvbW1lbnRcIl0gPSBcImNvbW1lbnRcIjtcbiAgICBTZW1hbnRpY1Rva2VuVHlwZXNbXCJzdHJpbmdcIl0gPSBcInN0cmluZ1wiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcIm51bWJlclwiXSA9IFwibnVtYmVyXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wicmVnZXhwXCJdID0gXCJyZWdleHBcIjtcbiAgICBTZW1hbnRpY1Rva2VuVHlwZXNbXCJvcGVyYXRvclwiXSA9IFwib3BlcmF0b3JcIjtcbiAgICAvKipcbiAgICAgKiBAc2luY2UgMy4xNy4wXG4gICAgICovXG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wiZGVjb3JhdG9yXCJdID0gXCJkZWNvcmF0b3JcIjtcbn0pKFNlbWFudGljVG9rZW5UeXBlcyB8fCAoU2VtYW50aWNUb2tlblR5cGVzID0ge30pKTtcbi8qKlxuICogQSBzZXQgb2YgcHJlZGVmaW5lZCB0b2tlbiBtb2RpZmllcnMuIFRoaXMgc2V0IGlzIG5vdCBmaXhlZFxuICogYW4gY2xpZW50cyBjYW4gc3BlY2lmeSBhZGRpdGlvbmFsIHRva2VuIHR5cGVzIHZpYSB0aGVcbiAqIGNvcnJlc3BvbmRpbmcgY2xpZW50IGNhcGFiaWxpdGllcy5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzO1xuKGZ1bmN0aW9uIChTZW1hbnRpY1Rva2VuTW9kaWZpZXJzKSB7XG4gICAgU2VtYW50aWNUb2tlbk1vZGlmaWVyc1tcImRlY2xhcmF0aW9uXCJdID0gXCJkZWNsYXJhdGlvblwiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJkZWZpbml0aW9uXCJdID0gXCJkZWZpbml0aW9uXCI7XG4gICAgU2VtYW50aWNUb2tlbk1vZGlmaWVyc1tcInJlYWRvbmx5XCJdID0gXCJyZWFkb25seVwiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJzdGF0aWNcIl0gPSBcInN0YXRpY1wiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJkZXByZWNhdGVkXCJdID0gXCJkZXByZWNhdGVkXCI7XG4gICAgU2VtYW50aWNUb2tlbk1vZGlmaWVyc1tcImFic3RyYWN0XCJdID0gXCJhYnN0cmFjdFwiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJhc3luY1wiXSA9IFwiYXN5bmNcIjtcbiAgICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzW1wibW9kaWZpY2F0aW9uXCJdID0gXCJtb2RpZmljYXRpb25cIjtcbiAgICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzW1wiZG9jdW1lbnRhdGlvblwiXSA9IFwiZG9jdW1lbnRhdGlvblwiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJkZWZhdWx0TGlicmFyeVwiXSA9IFwiZGVmYXVsdExpYnJhcnlcIjtcbn0pKFNlbWFudGljVG9rZW5Nb2RpZmllcnMgfHwgKFNlbWFudGljVG9rZW5Nb2RpZmllcnMgPSB7fSkpO1xuLyoqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBTZW1hbnRpY1Rva2VucztcbihmdW5jdGlvbiAoU2VtYW50aWNUb2tlbnMpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiAoY2FuZGlkYXRlLnJlc3VsdElkID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGNhbmRpZGF0ZS5yZXN1bHRJZCA9PT0gJ3N0cmluZycpICYmXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KGNhbmRpZGF0ZS5kYXRhKSAmJiAoY2FuZGlkYXRlLmRhdGEubGVuZ3RoID09PSAwIHx8IHR5cGVvZiBjYW5kaWRhdGUuZGF0YVswXSA9PT0gJ251bWJlcicpO1xuICAgIH1cbiAgICBTZW1hbnRpY1Rva2Vucy5pcyA9IGlzO1xufSkoU2VtYW50aWNUb2tlbnMgfHwgKFNlbWFudGljVG9rZW5zID0ge30pKTtcbi8qKlxuICogVGhlIElubGluZVZhbHVlVGV4dCBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aCBJbmxpbmVWYWx1ZVRleHRzLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIElubGluZVZhbHVlVGV4dDtcbihmdW5jdGlvbiAoSW5saW5lVmFsdWVUZXh0KSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBJbmxpbmVWYWx1ZVRleHQgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2UsIHRleHQgfTtcbiAgICB9XG4gICAgSW5saW5lVmFsdWVUZXh0LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGV4dCk7XG4gICAgfVxuICAgIElubGluZVZhbHVlVGV4dC5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVUZXh0IHx8IChJbmxpbmVWYWx1ZVRleHQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aCBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3Vwcy5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwO1xuKGZ1bmN0aW9uIChJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBJbmxpbmVWYWx1ZVRleHQgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHZhcmlhYmxlTmFtZSwgY2FzZVNlbnNpdGl2ZUxvb2t1cCkge1xuICAgICAgICByZXR1cm4geyByYW5nZSwgdmFyaWFibGVOYW1lLCBjYXNlU2Vuc2l0aXZlTG9va3VwIH07XG4gICAgfVxuICAgIElubGluZVZhbHVlVmFyaWFibGVMb29rdXAuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB1bmRlZmluZWQgJiYgY2FuZGlkYXRlICE9PSBudWxsICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgSXMuYm9vbGVhbihjYW5kaWRhdGUuY2FzZVNlbnNpdGl2ZUxvb2t1cClcbiAgICAgICAgICAgICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLnZhcmlhYmxlTmFtZSkgfHwgY2FuZGlkYXRlLnZhcmlhYmxlTmFtZSA9PT0gdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cC5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCB8fCAoSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCA9IHt9KSk7XG4vKipcbiAqIFRoZSBJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbiBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aCBJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbi5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbjtcbihmdW5jdGlvbiAoSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBleHByZXNzaW9uKSB7XG4gICAgICAgIHJldHVybiB7IHJhbmdlLCBleHByZXNzaW9uIH07XG4gICAgfVxuICAgIElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpXG4gICAgICAgICAgICAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5leHByZXNzaW9uKSB8fCBjYW5kaWRhdGUuZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24uaXMgPSBpcztcbn0pKElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uIHx8IChJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBJbmxpbmVWYWx1ZUNvbnRleHQgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgSW5saW5lVmFsdWVDb250ZXh0fSBsaXRlcmFscy5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxpbmVWYWx1ZUNvbnRleHQ7XG4oZnVuY3Rpb24gKElubGluZVZhbHVlQ29udGV4dCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgSW5saW5lVmFsdWVDb250ZXh0IGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGZyYW1lSWQsIHN0b3BwZWRMb2NhdGlvbikge1xuICAgICAgICByZXR1cm4geyBmcmFtZUlkLCBzdG9wcGVkTG9jYXRpb24gfTtcbiAgICB9XG4gICAgSW5saW5lVmFsdWVDb250ZXh0LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIElubGluZVZhbHVlQ29udGV4dH0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKHZhbHVlLnN0b3BwZWRMb2NhdGlvbik7XG4gICAgfVxuICAgIElubGluZVZhbHVlQ29udGV4dC5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVDb250ZXh0IHx8IChJbmxpbmVWYWx1ZUNvbnRleHQgPSB7fSkpO1xuLyoqXG4gKiBJbmxheSBoaW50IGtpbmRzLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIElubGF5SGludEtpbmQ7XG4oZnVuY3Rpb24gKElubGF5SGludEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBBbiBpbmxheSBoaW50IHRoYXQgZm9yIGEgdHlwZSBhbm5vdGF0aW9uLlxuICAgICAqL1xuICAgIElubGF5SGludEtpbmQuVHlwZSA9IDE7XG4gICAgLyoqXG4gICAgICogQW4gaW5sYXkgaGludCB0aGF0IGlzIGZvciBhIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBJbmxheUhpbnRLaW5kLlBhcmFtZXRlciA9IDI7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAxIHx8IHZhbHVlID09PSAyO1xuICAgIH1cbiAgICBJbmxheUhpbnRLaW5kLmlzID0gaXM7XG59KShJbmxheUhpbnRLaW5kIHx8IChJbmxheUhpbnRLaW5kID0ge30pKTtcbnZhciBJbmxheUhpbnRMYWJlbFBhcnQ7XG4oZnVuY3Rpb24gKElubGF5SGludExhYmVsUGFydCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4geyB2YWx1ZSB9O1xuICAgIH1cbiAgICBJbmxheUhpbnRMYWJlbFBhcnQuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpXG4gICAgICAgICAgICAmJiAoY2FuZGlkYXRlLnRvb2x0aXAgPT09IHVuZGVmaW5lZCB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnRvb2x0aXApIHx8IE1hcmt1cENvbnRlbnQuaXMoY2FuZGlkYXRlLnRvb2x0aXApKVxuICAgICAgICAgICAgJiYgKGNhbmRpZGF0ZS5sb2NhdGlvbiA9PT0gdW5kZWZpbmVkIHx8IExvY2F0aW9uLmlzKGNhbmRpZGF0ZS5sb2NhdGlvbikpXG4gICAgICAgICAgICAmJiAoY2FuZGlkYXRlLmNvbW1hbmQgPT09IHVuZGVmaW5lZCB8fCBDb21tYW5kLmlzKGNhbmRpZGF0ZS5jb21tYW5kKSk7XG4gICAgfVxuICAgIElubGF5SGludExhYmVsUGFydC5pcyA9IGlzO1xufSkoSW5sYXlIaW50TGFiZWxQYXJ0IHx8IChJbmxheUhpbnRMYWJlbFBhcnQgPSB7fSkpO1xudmFyIElubGF5SGludDtcbihmdW5jdGlvbiAoSW5sYXlIaW50KSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKHBvc2l0aW9uLCBsYWJlbCwga2luZCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7IHBvc2l0aW9uLCBsYWJlbCB9O1xuICAgICAgICBpZiAoa2luZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgSW5sYXlIaW50LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBQb3NpdGlvbi5pcyhjYW5kaWRhdGUucG9zaXRpb24pXG4gICAgICAgICAgICAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYWJlbCkgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUubGFiZWwsIElubGF5SGludExhYmVsUGFydC5pcykpXG4gICAgICAgICAgICAmJiAoY2FuZGlkYXRlLmtpbmQgPT09IHVuZGVmaW5lZCB8fCBJbmxheUhpbnRLaW5kLmlzKGNhbmRpZGF0ZS5raW5kKSlcbiAgICAgICAgICAgICYmIChjYW5kaWRhdGUudGV4dEVkaXRzID09PSB1bmRlZmluZWQpIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLnRleHRFZGl0cywgVGV4dEVkaXQuaXMpXG4gICAgICAgICAgICAmJiAoY2FuZGlkYXRlLnRvb2x0aXAgPT09IHVuZGVmaW5lZCB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnRvb2x0aXApIHx8IE1hcmt1cENvbnRlbnQuaXMoY2FuZGlkYXRlLnRvb2x0aXApKVxuICAgICAgICAgICAgJiYgKGNhbmRpZGF0ZS5wYWRkaW5nTGVmdCA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLnBhZGRpbmdMZWZ0KSlcbiAgICAgICAgICAgICYmIChjYW5kaWRhdGUucGFkZGluZ1JpZ2h0ID09PSB1bmRlZmluZWQgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUucGFkZGluZ1JpZ2h0KSk7XG4gICAgfVxuICAgIElubGF5SGludC5pcyA9IGlzO1xufSkoSW5sYXlIaW50IHx8IChJbmxheUhpbnQgPSB7fSkpO1xudmFyIFN0cmluZ1ZhbHVlO1xuKGZ1bmN0aW9uIChTdHJpbmdWYWx1ZSkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVNuaXBwZXQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHsga2luZDogJ3NuaXBwZXQnLCB2YWx1ZSB9O1xuICAgIH1cbiAgICBTdHJpbmdWYWx1ZS5jcmVhdGVTbmlwcGV0ID0gY3JlYXRlU25pcHBldDtcbn0pKFN0cmluZ1ZhbHVlIHx8IChTdHJpbmdWYWx1ZSA9IHt9KSk7XG52YXIgSW5saW5lQ29tcGxldGlvbkl0ZW07XG4oZnVuY3Rpb24gKElubGluZUNvbXBsZXRpb25JdGVtKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKGluc2VydFRleHQsIGZpbHRlclRleHQsIHJhbmdlLCBjb21tYW5kKSB7XG4gICAgICAgIHJldHVybiB7IGluc2VydFRleHQsIGZpbHRlclRleHQsIHJhbmdlLCBjb21tYW5kIH07XG4gICAgfVxuICAgIElubGluZUNvbXBsZXRpb25JdGVtLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKElubGluZUNvbXBsZXRpb25JdGVtIHx8IChJbmxpbmVDb21wbGV0aW9uSXRlbSA9IHt9KSk7XG52YXIgSW5saW5lQ29tcGxldGlvbkxpc3Q7XG4oZnVuY3Rpb24gKElubGluZUNvbXBsZXRpb25MaXN0KSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKGl0ZW1zKSB7XG4gICAgICAgIHJldHVybiB7IGl0ZW1zIH07XG4gICAgfVxuICAgIElubGluZUNvbXBsZXRpb25MaXN0LmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKElubGluZUNvbXBsZXRpb25MaXN0IHx8IChJbmxpbmVDb21wbGV0aW9uTGlzdCA9IHt9KSk7XG4vKipcbiAqIERlc2NyaWJlcyBob3cgYW4ge0BsaW5rIElubGluZUNvbXBsZXRpb25JdGVtUHJvdmlkZXIgaW5saW5lIGNvbXBsZXRpb24gcHJvdmlkZXJ9IHdhcyB0cmlnZ2VyZWQuXG4gKlxuICogQHNpbmNlIDMuMTguMFxuICogQHByb3Bvc2VkXG4gKi9cbnZhciBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCkge1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBleHBsaWNpdGx5IGJ5IGEgdXNlciBnZXN0dXJlLlxuICAgICAqL1xuICAgIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZC5JbnZva2VkID0gMDtcbiAgICAvKipcbiAgICAgKiBDb21wbGV0aW9uIHdhcyB0cmlnZ2VyZWQgYXV0b21hdGljYWxseSB3aGlsZSBlZGl0aW5nLlxuICAgICAqL1xuICAgIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZC5BdXRvbWF0aWMgPSAxO1xufSkoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kIHx8IChJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQgPSB7fSkpO1xudmFyIFNlbGVjdGVkQ29tcGxldGlvbkluZm87XG4oZnVuY3Rpb24gKFNlbGVjdGVkQ29tcGxldGlvbkluZm8pIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2UsIHRleHQgfTtcbiAgICB9XG4gICAgU2VsZWN0ZWRDb21wbGV0aW9uSW5mby5jcmVhdGUgPSBjcmVhdGU7XG59KShTZWxlY3RlZENvbXBsZXRpb25JbmZvIHx8IChTZWxlY3RlZENvbXBsZXRpb25JbmZvID0ge30pKTtcbnZhciBJbmxpbmVDb21wbGV0aW9uQ29udGV4dDtcbihmdW5jdGlvbiAoSW5saW5lQ29tcGxldGlvbkNvbnRleHQpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUodHJpZ2dlcktpbmQsIHNlbGVjdGVkQ29tcGxldGlvbkluZm8pIHtcbiAgICAgICAgcmV0dXJuIHsgdHJpZ2dlcktpbmQsIHNlbGVjdGVkQ29tcGxldGlvbkluZm8gfTtcbiAgICB9XG4gICAgSW5saW5lQ29tcGxldGlvbkNvbnRleHQuY3JlYXRlID0gY3JlYXRlO1xufSkoSW5saW5lQ29tcGxldGlvbkNvbnRleHQgfHwgKElubGluZUNvbXBsZXRpb25Db250ZXh0ID0ge30pKTtcbnZhciBXb3Jrc3BhY2VGb2xkZXI7XG4oZnVuY3Rpb24gKFdvcmtzcGFjZUZvbGRlcikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFVSSS5pcyhjYW5kaWRhdGUudXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm5hbWUpO1xuICAgIH1cbiAgICBXb3Jrc3BhY2VGb2xkZXIuaXMgPSBpcztcbn0pKFdvcmtzcGFjZUZvbGRlciB8fCAoV29ya3NwYWNlRm9sZGVyID0ge30pKTtcbmNvbnN0IEVPTCA9IFsnXFxuJywgJ1xcclxcbicsICdcXHInXTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSB0ZXh0IGRvY3VtZW50IGZyb20gdGhlIG5ldyB2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItdGV4dGRvY3VtZW50IHBhY2thZ2UuXG4gKi9cbnZhciBUZXh0RG9jdW1lbnQ7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgSVRleHREb2N1bWVudCBsaXRlcmFsIGZyb20gdGhlIGdpdmVuIHVyaSBhbmQgY29udGVudC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2VJZCBUaGUgZG9jdW1lbnQncyBsYW5ndWFnZSBJZC5cbiAgICAgKiBAcGFyYW0gdmVyc2lvbiBUaGUgZG9jdW1lbnQncyB2ZXJzaW9uLlxuICAgICAqIEBwYXJhbSBjb250ZW50IFRoZSBkb2N1bWVudCdzIGNvbnRlbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCkge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bGxUZXh0RG9jdW1lbnQodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIElUZXh0RG9jdW1lbnR9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmxhbmd1YWdlSWQpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2VJZCkpICYmIElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5saW5lQ291bnQpXG4gICAgICAgICAgICAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5nZXRUZXh0KSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5wb3NpdGlvbkF0KSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5vZmZzZXRBdCkgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuICAgIFRleHREb2N1bWVudC5pcyA9IGlzO1xuICAgIGZ1bmN0aW9uIGFwcGx5RWRpdHMoZG9jdW1lbnQsIGVkaXRzKSB7XG4gICAgICAgIGxldCB0ZXh0ID0gZG9jdW1lbnQuZ2V0VGV4dCgpO1xuICAgICAgICBsZXQgc29ydGVkRWRpdHMgPSBtZXJnZVNvcnQoZWRpdHMsIChhLCBiKSA9PiB7XG4gICAgICAgICAgICBsZXQgZGlmZiA9IGEucmFuZ2Uuc3RhcnQubGluZSAtIGIucmFuZ2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgIGlmIChkaWZmID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyIC0gYi5yYW5nZS5zdGFydC5jaGFyYWN0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGlmZjtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBsYXN0TW9kaWZpZWRPZmZzZXQgPSB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNvcnRlZEVkaXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgZSA9IHNvcnRlZEVkaXRzW2ldO1xuICAgICAgICAgICAgbGV0IHN0YXJ0T2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoZS5yYW5nZS5zdGFydCk7XG4gICAgICAgICAgICBsZXQgZW5kT2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoZS5yYW5nZS5lbmQpO1xuICAgICAgICAgICAgaWYgKGVuZE9mZnNldCA8PSBsYXN0TW9kaWZpZWRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgc3RhcnRPZmZzZXQpICsgZS5uZXdUZXh0ICsgdGV4dC5zdWJzdHJpbmcoZW5kT2Zmc2V0LCB0ZXh0Lmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ092ZXJsYXBwaW5nIGVkaXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RNb2RpZmllZE9mZnNldCA9IHN0YXJ0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnQuYXBwbHlFZGl0cyA9IGFwcGx5RWRpdHM7XG4gICAgZnVuY3Rpb24gbWVyZ2VTb3J0KGRhdGEsIGNvbXBhcmUpIHtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgIC8vIHNvcnRlZFxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcCA9IChkYXRhLmxlbmd0aCAvIDIpIHwgMDtcbiAgICAgICAgY29uc3QgbGVmdCA9IGRhdGEuc2xpY2UoMCwgcCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gZGF0YS5zbGljZShwKTtcbiAgICAgICAgbWVyZ2VTb3J0KGxlZnQsIGNvbXBhcmUpO1xuICAgICAgICBtZXJnZVNvcnQocmlnaHQsIGNvbXBhcmUpO1xuICAgICAgICBsZXQgbGVmdElkeCA9IDA7XG4gICAgICAgIGxldCByaWdodElkeCA9IDA7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgd2hpbGUgKGxlZnRJZHggPCBsZWZ0Lmxlbmd0aCAmJiByaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IHJldCA9IGNvbXBhcmUobGVmdFtsZWZ0SWR4XSwgcmlnaHRbcmlnaHRJZHhdKTtcbiAgICAgICAgICAgIGlmIChyZXQgPD0gMCkge1xuICAgICAgICAgICAgICAgIC8vIHNtYWxsZXJfZXF1YWwgLT4gdGFrZSBsZWZ0IHRvIHByZXNlcnZlIG9yZGVyXG4gICAgICAgICAgICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZ3JlYXRlciAtPiB0YWtlIHJpZ2h0XG4gICAgICAgICAgICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGxlZnRJZHggPCBsZWZ0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChyaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxufSkoVGV4dERvY3VtZW50IHx8IChUZXh0RG9jdW1lbnQgPSB7fSkpO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIHRleHQgZG9jdW1lbnQgZnJvbSB0aGUgbmV3IHZzY29kZS1sYW5ndWFnZXNlcnZlci10ZXh0ZG9jdW1lbnQgcGFja2FnZS5cbiAqL1xuY2xhc3MgRnVsbFRleHREb2N1bWVudCB7XG4gICAgY29uc3RydWN0b3IodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KSB7XG4gICAgICAgIHRoaXMuX3VyaSA9IHVyaTtcbiAgICAgICAgdGhpcy5fbGFuZ3VhZ2VJZCA9IGxhbmd1YWdlSWQ7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLl9jb250ZW50ID0gY29udGVudDtcbiAgICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldCB1cmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91cmk7XG4gICAgfVxuICAgIGdldCBsYW5ndWFnZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2VJZDtcbiAgICB9XG4gICAgZ2V0IHZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92ZXJzaW9uO1xuICAgIH1cbiAgICBnZXRUZXh0KHJhbmdlKSB7XG4gICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5vZmZzZXRBdChyYW5nZS5zdGFydCk7XG4gICAgICAgICAgICBsZXQgZW5kID0gdGhpcy5vZmZzZXRBdChyYW5nZS5lbmQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xuICAgIH1cbiAgICB1cGRhdGUoZXZlbnQsIHZlcnNpb24pIHtcbiAgICAgICAgdGhpcy5fY29udGVudCA9IGV2ZW50LnRleHQ7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0TGluZU9mZnNldHMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9saW5lT2Zmc2V0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZXQgbGluZU9mZnNldHMgPSBbXTtcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5fY29udGVudDtcbiAgICAgICAgICAgIGxldCBpc0xpbmVTdGFydCA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNMaW5lU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZU9mZnNldHMucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgaXNMaW5lU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGNoID0gdGV4dC5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgaXNMaW5lU3RhcnQgPSAoY2ggPT09ICdcXHInIHx8IGNoID09PSAnXFxuJyk7XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXFxyJyAmJiBpICsgMSA8IHRleHQubGVuZ3RoICYmIHRleHQuY2hhckF0KGkgKyAxKSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0xpbmVTdGFydCAmJiB0ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsaW5lT2Zmc2V0cy5wdXNoKHRleHQubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gbGluZU9mZnNldHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbmVPZmZzZXRzO1xuICAgIH1cbiAgICBwb3NpdGlvbkF0KG9mZnNldCkge1xuICAgICAgICBvZmZzZXQgPSBNYXRoLm1heChNYXRoLm1pbihvZmZzZXQsIHRoaXMuX2NvbnRlbnQubGVuZ3RoKSwgMCk7XG4gICAgICAgIGxldCBsaW5lT2Zmc2V0cyA9IHRoaXMuZ2V0TGluZU9mZnNldHMoKTtcbiAgICAgICAgbGV0IGxvdyA9IDAsIGhpZ2ggPSBsaW5lT2Zmc2V0cy5sZW5ndGg7XG4gICAgICAgIGlmIChoaWdoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gUG9zaXRpb24uY3JlYXRlKDAsIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICAgIGxldCBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgICAgICAgaWYgKGxpbmVPZmZzZXRzW21pZF0gPiBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBsb3cgaXMgdGhlIGxlYXN0IHggZm9yIHdoaWNoIHRoZSBsaW5lIG9mZnNldCBpcyBsYXJnZXIgdGhhbiB0aGUgY3VycmVudCBvZmZzZXRcbiAgICAgICAgLy8gb3IgYXJyYXkubGVuZ3RoIGlmIG5vIGxpbmUgb2Zmc2V0IGlzIGxhcmdlciB0aGFuIHRoZSBjdXJyZW50IG9mZnNldFxuICAgICAgICBsZXQgbGluZSA9IGxvdyAtIDE7XG4gICAgICAgIHJldHVybiBQb3NpdGlvbi5jcmVhdGUobGluZSwgb2Zmc2V0IC0gbGluZU9mZnNldHNbbGluZV0pO1xuICAgIH1cbiAgICBvZmZzZXRBdChwb3NpdGlvbikge1xuICAgICAgICBsZXQgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XG4gICAgICAgIGlmIChwb3NpdGlvbi5saW5lID49IGxpbmVPZmZzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBvc2l0aW9uLmxpbmUgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGluZU9mZnNldCA9IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmVdO1xuICAgICAgICBsZXQgbmV4dExpbmVPZmZzZXQgPSAocG9zaXRpb24ubGluZSArIDEgPCBsaW5lT2Zmc2V0cy5sZW5ndGgpID8gbGluZU9mZnNldHNbcG9zaXRpb24ubGluZSArIDFdIDogdGhpcy5fY29udGVudC5sZW5ndGg7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihsaW5lT2Zmc2V0ICsgcG9zaXRpb24uY2hhcmFjdGVyLCBuZXh0TGluZU9mZnNldCksIGxpbmVPZmZzZXQpO1xuICAgIH1cbiAgICBnZXQgbGluZUNvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMaW5lT2Zmc2V0cygpLmxlbmd0aDtcbiAgICB9XG59XG52YXIgSXM7XG4oZnVuY3Rpb24gKElzKSB7XG4gICAgY29uc3QgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgIGZ1bmN0aW9uIGRlZmluZWQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxuICAgIElzLmRlZmluZWQgPSBkZWZpbmVkO1xuICAgIGZ1bmN0aW9uIHVuZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbiAgICB9XG4gICAgSXMudW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgIGZ1bmN0aW9uIGJvb2xlYW4odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZTtcbiAgICB9XG4gICAgSXMuYm9vbGVhbiA9IGJvb2xlYW47XG4gICAgZnVuY3Rpb24gc3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG4gICAgfVxuICAgIElzLnN0cmluZyA9IHN0cmluZztcbiAgICBmdW5jdGlvbiBudW1iZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBOdW1iZXJdJztcbiAgICB9XG4gICAgSXMubnVtYmVyID0gbnVtYmVyO1xuICAgIGZ1bmN0aW9uIG51bWJlclJhbmdlKHZhbHVlLCBtaW4sIG1heCkge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE51bWJlcl0nICYmIG1pbiA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSBtYXg7XG4gICAgfVxuICAgIElzLm51bWJlclJhbmdlID0gbnVtYmVyUmFuZ2U7XG4gICAgZnVuY3Rpb24gaW50ZWdlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE51bWJlcl0nICYmIC0yMTQ3NDgzNjQ4IDw9IHZhbHVlICYmIHZhbHVlIDw9IDIxNDc0ODM2NDc7XG4gICAgfVxuICAgIElzLmludGVnZXIgPSBpbnRlZ2VyO1xuICAgIGZ1bmN0aW9uIHVpbnRlZ2VyKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScgJiYgMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAyMTQ3NDgzNjQ3O1xuICAgIH1cbiAgICBJcy51aW50ZWdlciA9IHVpbnRlZ2VyO1xuICAgIGZ1bmN0aW9uIGZ1bmModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICAgIH1cbiAgICBJcy5mdW5jID0gZnVuYztcbiAgICBmdW5jdGlvbiBvYmplY3RMaXRlcmFsKHZhbHVlKSB7XG4gICAgICAgIC8vIFN0cmljdGx5IHNwZWFraW5nIGNsYXNzIGluc3RhbmNlcyBwYXNzIHRoaXMgY2hlY2sgYXMgd2VsbC4gU2luY2UgdGhlIExTUFxuICAgICAgICAvLyBkb2Vzbid0IHVzZSBjbGFzc2VzIHdlIGlnbm9yZSB0aGlzIGZvciBub3cuIElmIHdlIGRvIHdlIG5lZWQgdG8gYWRkIHNvbWV0aGluZ1xuICAgICAgICAvLyBsaWtlIHRoaXM6IGBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKHgpKSA9PT0gbnVsbGBcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG4gICAgfVxuICAgIElzLm9iamVjdExpdGVyYWwgPSBvYmplY3RMaXRlcmFsO1xuICAgIGZ1bmN0aW9uIHR5cGVkQXJyYXkodmFsdWUsIGNoZWNrKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5ldmVyeShjaGVjayk7XG4gICAgfVxuICAgIElzLnR5cGVkQXJyYXkgPSB0eXBlZEFycmF5O1xufSkoSXMgfHwgKElzID0ge30pKTtcblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2dsb2JhbCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRcdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuLyoqKioqKi8gXHRcdFx0dHJ5IHtcbi8qKioqKiovIFx0XHRcdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4vKioqKioqLyBcdFx0XHR9IGNhdGNoIChlKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9KSgpO1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSlcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovIFx0KCgpID0+IHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcbi8qKioqKiovIFx0XHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9pbXBvcnRTY3JpcHRzIGNodW5rIGxvYWRpbmcgKi9cbi8qKioqKiovIFx0KCgpID0+IHtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBzZWxmLmxvY2F0aW9uICsgXCJcIjtcbi8qKioqKiovIFx0XHRcbi8qKioqKiovIFx0XHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGNodW5rc1xuLyoqKioqKi8gXHRcdC8vIFwiMVwiIG1lYW5zIFwiYWxyZWFkeSBsb2FkZWRcIlxuLyoqKioqKi8gXHRcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4vKioqKioqLyBcdFx0XHQ2MzY6IDFcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdC8vIG5vIGNodW5rIGluc3RhbGwgZnVuY3Rpb24gbmVlZGVkXG4vKioqKioqLyBcdFx0Ly8gbm8gY2h1bmsgbG9hZGluZ1xuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdC8vIG5vIEhNUlxuLyoqKioqKi8gXHRcdFxuLyoqKioqKi8gXHRcdC8vIG5vIEhNUiBtYW5pZmVzdFxuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IHt9O1xuLy8gVGhpcyBlbnRyeSBuZWVkIHRvIGJlIHdyYXBwZWQgaW4gYW4gSUlGRSBiZWNhdXNlIGl0IG5lZWQgdG8gYmUgaW4gc3RyaWN0IG1vZGUuXG4oKCkgPT4ge1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBFU00gQ09NUEFUIEZMQUdcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcblxuLy8gRVhQT1JUU1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbiAgQWNlWmlnTGludGVyOiAoKSA9PiAoLyogYmluZGluZyAqLyBBY2VaaWdMaW50ZXIpXG59KTtcblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4uLy4uL25vZGVfbW9kdWxlcy9Ad2FzbS1mbXQvemlnX2ZtdC96aWdfZm10LmpzXG4vKiBwcm92aWRlZCBkZXBlbmRlbmN5ICovIHZhciBjb25zb2xlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MzY0KTtcbmxldCB3YXNtO1xuXG5hc3luYyBmdW5jdGlvbiBpbml0KGlucHV0KSB7XG5cdGlmICh3YXNtICE9PSB1bmRlZmluZWQpIHJldHVybiB3YXNtO1xuXG5cdGlmICh0eXBlb2YgaW5wdXQgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRpbnB1dCA9IG5ldyBVUkwoLyogYXNzZXQgaW1wb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18oMzk5NiksIF9fd2VicGFja19yZXF1aXJlX18uYik7XG5cdH1cblxuXHRpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJyB8fCAodHlwZW9mIFJlcXVlc3QgPT09ICdmdW5jdGlvbicgJiYgaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB8fCAodHlwZW9mIFVSTCA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnB1dCBpbnN0YW5jZW9mIFVSTCkpIHtcblx0XHRpbnB1dCA9IGZldGNoKGlucHV0KTtcblx0fVxuXG5cdGNvbnN0IGltcG9ydHMgPSBnZXRfaW1wb3J0cygpO1xuXG5cdGNvbnN0IHsgaW5zdGFuY2UsIG1vZHVsZSB9ID0gYXdhaXQgbG9hZChhd2FpdCBpbnB1dCwgaW1wb3J0cyk7XG5cblx0cmV0dXJuIGZpbmFsaXplX2luaXQoaW5zdGFuY2UsIG1vZHVsZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWQobW9kdWxlLCBpbXBvcnRzKSB7XG5cdGlmICh0eXBlb2YgUmVzcG9uc2UgPT09IFwiZnVuY3Rpb25cIiAmJiBtb2R1bGUgaW5zdGFuY2VvZiBSZXNwb25zZSkge1xuXHRcdGlmICh0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmV0dXJuIGF3YWl0IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKG1vZHVsZSwgaW1wb3J0cyk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdGlmIChtb2R1bGUuaGVhZGVycy5nZXQoXCJDb250ZW50LVR5cGVcIikgIT0gXCJhcHBsaWNhdGlvbi93YXNtXCIpIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdFx0XHRcImBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZ2AgZmFpbGVkIGJlY2F1c2UgeW91ciBzZXJ2ZXIgZG9lcyBub3Qgc2VydmUgd2FzbSB3aXRoIGBhcHBsaWNhdGlvbi93YXNtYCBNSU1FIHR5cGUuIEZhbGxpbmcgYmFjayB0byBgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVgIHdoaWNoIGlzIHNsb3dlci4gT3JpZ2luYWwgZXJyb3I6XFxuXCIsXG5cdFx0XHRcdFx0XHRlLFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IGJ5dGVzID0gYXdhaXQgbW9kdWxlLmFycmF5QnVmZmVyKCk7XG5cdFx0cmV0dXJuIGF3YWl0IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGJ5dGVzLCBpbXBvcnRzKTtcblx0fSBlbHNlIHtcblx0XHRjb25zdCBpbnN0YW5jZSA9IGF3YWl0IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKG1vZHVsZSwgaW1wb3J0cyk7XG5cblx0XHRpZiAoaW5zdGFuY2UgaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5JbnN0YW5jZSkge1xuXHRcdFx0cmV0dXJuIHsgaW5zdGFuY2UsIG1vZHVsZSB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gaW5zdGFuY2U7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGZpbmFsaXplX2luaXQoaW5zdGFuY2UsIG1vZHVsZSkge1xuXHR3YXNtID0gaW5zdGFuY2UuZXhwb3J0cztcblxuXHRyZXR1cm4gd2FzbTtcbn1cblxuY29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuXG5jb25zdCBXQVNJX0VTVUNDRVNTID0gMDtcbmNvbnN0IFdBU0lfRUJBREYgPSA4O1xuXG5mdW5jdGlvbiBnZXRfaW1wb3J0cygpIHtcblx0cmV0dXJuIHtcblx0XHR3YXNpX3NuYXBzaG90X3ByZXZpZXcxOiB7XG5cdFx0XHRmZF93cml0ZShmZCwgaW92c19wdHIsIGlvdnNfbGVuLCBud3JpdHRlbl9wdHIpIHtcblx0XHRcdFx0c3dpdGNoIChmZCkge1xuXHRcdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHRjYXNlIDI6IHtcblx0XHRcdFx0XHRcdGNvbnN0IGJ1ZmZlciA9IG5ldyBEYXRhVmlldyh3YXNtLm1lbW9yeS5idWZmZXIpO1xuXHRcdFx0XHRcdFx0Y29uc3QgYnVmZmVyOCA9IG5ldyBVaW50OEFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlcik7XG5cblx0XHRcdFx0XHRcdGNvbnN0IGlvdmVjcyA9IHJlYWRfYnl0ZXNfYXJyYXkoYnVmZmVyLCBpb3ZzX3B0ciwgaW92c19sZW4pO1xuXG5cdFx0XHRcdFx0XHRjb25zdCBud3JpdHRlbiA9IGZkc1tmZF0uZmRfd3JpdGUoYnVmZmVyOCwgaW92ZWNzKTtcblx0XHRcdFx0XHRcdGJ1ZmZlci5zZXRVaW50MzIobndyaXR0ZW5fcHRyLCBud3JpdHRlbiwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gV0FTSV9FU1VDQ0VTUztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdHJldHVybiBXQVNJX0VCQURGO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZmRfcmVhZChmZCwgaW92c19wdHIsIGlvdnNfbGVuLCBucmVhZF9wdHIpIHtcblx0XHRcdFx0aWYgKGZkICE9PSAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFdBU0lfRUJBREY7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBidWZmZXIgPSBuZXcgRGF0YVZpZXcod2FzbS5tZW1vcnkuYnVmZmVyKTtcblx0XHRcdFx0Y29uc3QgYnVmZmVyOCA9IG5ldyBVaW50OEFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlcik7XG5cblx0XHRcdFx0Y29uc3QgaW92ZWNzID0gcmVhZF9ieXRlc19hcnJheShidWZmZXIsIGlvdnNfcHRyLCBpb3ZzX2xlbik7XG5cblx0XHRcdFx0Y29uc3QgbnJlYWQgPSBmZHNbZmRdLmZkX3JlYWQoYnVmZmVyOCwgaW92ZWNzKTtcblx0XHRcdFx0YnVmZmVyLnNldFVpbnQzMihucmVhZF9wdHIsIG5yZWFkLCB0cnVlKTtcblx0XHRcdFx0cmV0dXJuIFdBU0lfRVNVQ0NFU1M7XG5cdFx0XHR9LFxuXHRcdFx0cHJvY19leGl0KHJ2YWwpIHtcblx0XHRcdFx0cmV0dXJuX3ZhbHVlID0gcnZhbDtcblx0XHRcdFx0cmV0dXJuIFdBU0lfRVNVQ0NFU1M7XG5cdFx0XHR9LFxuXHRcdH0sXG5cdH07XG59XG5cbmZ1bmN0aW9uIHJlYWRfYnl0ZXModmlldywgcHRyKSB7XG5cdGNvbnN0IGJ1ZiA9IHZpZXcuZ2V0VWludDMyKHB0ciwgdHJ1ZSk7XG5cdGNvbnN0IGxlbiA9IHZpZXcuZ2V0VWludDMyKHB0ciArIDQsIHRydWUpO1xuXHRyZXR1cm4gW2J1ZiwgbGVuXTtcbn1cblxuZnVuY3Rpb24gcmVhZF9ieXRlc19hcnJheSh2aWV3LCBpb3ZzX3B0ciwgaW92c19sZW4pIHtcblx0Y29uc3QgaW92ZWNzID0gW107XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgaW92c19sZW47IGkrKykge1xuXHRcdGlvdmVjcy5wdXNoKHJlYWRfYnl0ZXModmlldywgaW92c19wdHIgKyA4ICogaSkpO1xuXHR9XG5cdHJldHVybiBpb3ZlY3M7XG59XG5cbmNsYXNzIFN0ZElPIHtcblx0ZGF0YSA9IG5ldyBVaW50OEFycmF5KCk7XG5cdHBvc2l0aW9uID0gMDtcblxuXHRzZXQgc3RyaW5nKGlucHV0KSB7XG5cdFx0dGhpcy5kYXRhID0gZW5jb2Rlci5lbmNvZGUoaW5wdXQpO1xuXHRcdHRoaXMucG9zaXRpb24gPSAwO1xuXHR9XG5cblx0Z2V0IHN0cmluZygpIHtcblx0XHRyZXR1cm4gZGVjb2Rlci5kZWNvZGUodGhpcy5kYXRhKTtcblx0fVxuXG5cdGZkX3JlYWQodmlldzgsIGlvdnMpIHtcblx0XHRsZXQgbnJlYWQgPSAwO1xuXG5cdFx0Zm9yIChjb25zdCBbcHRyLCBsZW5dIG9mIGlvdnMpIHtcblx0XHRcdGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KHZpZXc4LmJ1ZmZlciwgcHRyLCBsZW4pO1xuXHRcdFx0Y29uc3QgZGF0YSA9IHRoaXMuZGF0YS5zdWJhcnJheSh0aGlzLnBvc2l0aW9uLCB0aGlzLnBvc2l0aW9uICsgbGVuKTtcblx0XHRcdGJ1Zi5zZXQoZGF0YSk7XG5cdFx0XHR0aGlzLnBvc2l0aW9uICs9IGRhdGEubGVuZ3RoO1xuXHRcdFx0bnJlYWQgKz0gZGF0YS5sZW5ndGg7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5yZWFkO1xuXHR9XG5cblx0ZmRfd3JpdGUodmlldzgsIGlvdnMpIHtcblx0XHRjb25zdCB0b3RhbF9sZW4gPSBpb3ZzLnJlZHVjZSgoYWNjLCBbXywgbGVuXSkgPT4gYWNjICsgbGVuLCAwKTtcblx0XHRjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkodG90YWxfbGVuKTtcblxuXHRcdGxldCBud3JpdHRlbiA9IDA7XG5cdFx0Zm9yIChjb25zdCBbcHRyLCBsZW5dIG9mIGlvdnMpIHtcblx0XHRcdGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KHZpZXc4LmJ1ZmZlciwgcHRyLCBsZW4pO1xuXHRcdFx0ZGF0YS5zZXQoYnVmLCBud3JpdHRlbik7XG5cdFx0XHRud3JpdHRlbiArPSBidWYubGVuZ3RoO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmRhdGEpIHtcblx0XHRcdGNvbnN0IG5ld19kYXRhID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kYXRhLmxlbmd0aCArIGRhdGEubGVuZ3RoKTtcblx0XHRcdG5ld19kYXRhLnNldCh0aGlzLmRhdGEpO1xuXHRcdFx0bmV3X2RhdGEuc2V0KGRhdGEsIHRoaXMuZGF0YS5sZW5ndGgpO1xuXHRcdFx0dGhpcy5kYXRhID0gbmV3X2RhdGE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG53cml0dGVuO1xuXHR9XG5cblx0ZGlzcG9zZSgpIHtcblx0XHR0aGlzLmRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0dGhpcy5wb3NpdGlvbiA9IDA7XG5cdH1cbn1cblxuY29uc3QgZmRzID0gW1xuXHRuZXcgU3RkSU8oKSwgLy8gc3RkaW5cblx0bmV3IFN0ZElPKCksIC8vIHN0ZG91dFxuXHRuZXcgU3RkSU8oKSwgLy8gc3RkZXJyXG5dO1xuXG5sZXQgcmV0dXJuX3ZhbHVlID0gMDtcblxuZnVuY3Rpb24gZm9ybWF0KGlucHV0KSB7XG5cdGZkc1swXS5zdHJpbmcgPSBpbnB1dDtcblx0bGV0IHN0ZG91dCwgc3RkZXJyLCBlcnJvcjtcblxuXHR0cnkge1xuXHRcdHdhc20uX3N0YXJ0KCk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdGVycm9yID0gZXJyO1xuXHR9IGZpbmFsbHkge1xuXHRcdHN0ZG91dCA9IGZkc1sxXS5zdHJpbmc7XG5cdFx0c3RkZXJyID0gZmRzWzJdLnN0cmluZztcblx0XHRmZHMuZm9yRWFjaCgoZmQpID0+IGZkLmRpc3Bvc2UoKSk7XG5cdH1cblxuXHRpZiAocmV0dXJuX3ZhbHVlICE9PSAwKSB7XG5cdFx0dGhyb3cgRXJyb3Ioc3RkZXJyKTtcblx0fVxuXG5cdHJldHVybiBzdGRvdXQ7XG59XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi4vLi4vbm9kZV9tb2R1bGVzL3ZzY29kZS1sYW5ndWFnZXNlcnZlci1wcm90b2NvbC9saWIvYnJvd3Nlci9tYWluLmpzXG52YXIgbWFpbiA9IF9fd2VicGFja19yZXF1aXJlX18oNTUwMSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi4vYWNlLWxpbnRlcnMvc3JjL3V0aWxzLnRzXG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0cyhvYmoxLCBvYmoyLCBleGNsdWRlVW5kZWZpbmVkID0gZmFsc2UpIHtcbiAgICBpZiAoIW9iajEpIHJldHVybiBvYmoyO1xuICAgIGlmICghb2JqMikgcmV0dXJuIG9iajE7XG4gICAgaWYgKGV4Y2x1ZGVVbmRlZmluZWQpIHtcbiAgICAgICAgb2JqMSA9IGV4Y2x1ZGVVbmRlZmluZWRWYWx1ZXMob2JqMSk7XG4gICAgICAgIG9iajIgPSBleGNsdWRlVW5kZWZpbmVkVmFsdWVzKG9iajIpO1xuICAgIH1cbiAgICBjb25zdCBtZXJnZWRPYmplY3RzID0ge1xuICAgICAgICAuLi5vYmoyLFxuICAgICAgICAuLi5vYmoxXG4gICAgfTsgLy8gR2l2ZSBwcmlvcml0eSB0byBvYmoxIHZhbHVlcyBieSBzcHJlYWRpbmcgb2JqMiBmaXJzdCwgdGhlbiBvYmoxXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMobWVyZ2VkT2JqZWN0cykpe1xuICAgICAgICBpZiAob2JqMVtrZXldICYmIG9iajJba2V5XSkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqMVtrZXldKSkge1xuICAgICAgICAgICAgICAgIG1lcmdlZE9iamVjdHNba2V5XSA9IG9iajFba2V5XS5jb25jYXQob2JqMltrZXldKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmoyW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkT2JqZWN0c1trZXldID0gb2JqMltrZXldLmNvbmNhdChvYmoxW2tleV0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqMVtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqMltrZXldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIG1lcmdlZE9iamVjdHNba2V5XSA9IG1lcmdlT2JqZWN0cyhvYmoxW2tleV0sIG9iajJba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZE9iamVjdHM7XG59XG5mdW5jdGlvbiBleGNsdWRlVW5kZWZpbmVkVmFsdWVzKG9iaikge1xuICAgIGNvbnN0IGZpbHRlcmVkRW50cmllcyA9IE9iamVjdC5lbnRyaWVzKG9iaikuZmlsdGVyKChbXywgdmFsdWVdKT0+dmFsdWUgIT09IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhmaWx0ZXJlZEVudHJpZXMpO1xufVxuZnVuY3Rpb24gbm90RW1wdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vdGFrZW4gd2l0aCBzbWFsbCBjaGFuZ2VzIGZyb20gYWNlLWNvZGVcbmZ1bmN0aW9uIG1lcmdlUmFuZ2VzKHJhbmdlcykge1xuICAgIHZhciBsaXN0ID0gcmFuZ2VzO1xuICAgIGxpc3QgPSBsaXN0LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gY29tcGFyZVBvaW50cyhhLnN0YXJ0LCBiLnN0YXJ0KTtcbiAgICB9KTtcbiAgICB2YXIgbmV4dCA9IGxpc3RbMF0sIHJhbmdlO1xuICAgIGZvcih2YXIgaSA9IDE7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgcmFuZ2UgPSBuZXh0O1xuICAgICAgICBuZXh0ID0gbGlzdFtpXTtcbiAgICAgICAgdmFyIGNtcCA9IGNvbXBhcmVQb2ludHMocmFuZ2UuZW5kLCBuZXh0LnN0YXJ0KTtcbiAgICAgICAgaWYgKGNtcCA8IDApIGNvbnRpbnVlO1xuICAgICAgICBpZiAoY21wID09IDAgJiYgIXJhbmdlLmlzRW1wdHkoKSAmJiAhbmV4dC5pc0VtcHR5KCkpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoY29tcGFyZVBvaW50cyhyYW5nZS5lbmQsIG5leHQuZW5kKSA8IDApIHtcbiAgICAgICAgICAgIHJhbmdlLmVuZC5yb3cgPSBuZXh0LmVuZC5yb3c7XG4gICAgICAgICAgICByYW5nZS5lbmQuY29sdW1uID0gbmV4dC5lbmQuY29sdW1uO1xuICAgICAgICB9XG4gICAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgICBuZXh0ID0gcmFuZ2U7XG4gICAgICAgIGktLTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG59XG5mdW5jdGlvbiBjb21wYXJlUG9pbnRzKHAxLCBwMikge1xuICAgIHJldHVybiBwMS5yb3cgLSBwMi5yb3cgfHwgcDEuY29sdW1uIC0gcDIuY29sdW1uO1xufVxuZnVuY3Rpb24gY2hlY2tWYWx1ZUFnYWluc3RSZWdleHBBcnJheSh2YWx1ZSwgcmVnZXhwQXJyYXkpIHtcbiAgICBpZiAoIXJlZ2V4cEFycmF5KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHJlZ2V4cEFycmF5Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYgKHJlZ2V4cEFycmF5W2ldLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjb252ZXJ0VG9VcmkoZmlsZVBhdGgpIHtcbiAgICAvL2FscmVhZHkgVVJJXG4gICAgaWYgKGZpbGVQYXRoLnN0YXJ0c1dpdGgoXCJmaWxlOi8vL1wiKSkge1xuICAgICAgICByZXR1cm4gZmlsZVBhdGg7XG4gICAgfVxuICAgIHJldHVybiBVUkkuZmlsZShmaWxlUGF0aCkudG9TdHJpbmcoKTtcbn1cblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4uLy4uL25vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItdGV4dGRvY3VtZW50L2xpYi9lc20vbWFpbi5qc1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5jbGFzcyBGdWxsVGV4dERvY3VtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpIHtcbiAgICAgICAgdGhpcy5fdXJpID0gdXJpO1xuICAgICAgICB0aGlzLl9sYW5ndWFnZUlkID0gbGFuZ3VhZ2VJZDtcbiAgICAgICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0IHVyaSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VyaTtcbiAgICB9XG4gICAgZ2V0IGxhbmd1YWdlSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sYW5ndWFnZUlkO1xuICAgIH1cbiAgICBnZXQgdmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZlcnNpb247XG4gICAgfVxuICAgIGdldFRleHQocmFuZ2UpIHtcbiAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMub2Zmc2V0QXQocmFuZ2Uuc3RhcnQpO1xuICAgICAgICAgICAgY29uc3QgZW5kID0gdGhpcy5vZmZzZXRBdChyYW5nZS5lbmQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xuICAgIH1cbiAgICB1cGRhdGUoY2hhbmdlcywgdmVyc2lvbikge1xuICAgICAgICBmb3IgKGNvbnN0IGNoYW5nZSBvZiBjaGFuZ2VzKSB7XG4gICAgICAgICAgICBpZiAoRnVsbFRleHREb2N1bWVudC5pc0luY3JlbWVudGFsKGNoYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBtYWtlcyBzdXJlIHN0YXJ0IGlzIGJlZm9yZSBlbmRcbiAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IGdldFdlbGxmb3JtZWRSYW5nZShjaGFuZ2UucmFuZ2UpO1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBjb250ZW50XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRPZmZzZXQgPSB0aGlzLm9mZnNldEF0KHJhbmdlLnN0YXJ0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmRPZmZzZXQgPSB0aGlzLm9mZnNldEF0KHJhbmdlLmVuZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29udGVudCA9IHRoaXMuX2NvbnRlbnQuc3Vic3RyaW5nKDAsIHN0YXJ0T2Zmc2V0KSArIGNoYW5nZS50ZXh0ICsgdGhpcy5fY29udGVudC5zdWJzdHJpbmcoZW5kT2Zmc2V0LCB0aGlzLl9jb250ZW50Lmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBvZmZzZXRzXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRMaW5lID0gTWF0aC5tYXgocmFuZ2Uuc3RhcnQubGluZSwgMCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kTGluZSA9IE1hdGgubWF4KHJhbmdlLmVuZC5saW5lLCAwKTtcbiAgICAgICAgICAgICAgICBsZXQgbGluZU9mZnNldHMgPSB0aGlzLl9saW5lT2Zmc2V0cztcbiAgICAgICAgICAgICAgICBjb25zdCBhZGRlZExpbmVPZmZzZXRzID0gY29tcHV0ZUxpbmVPZmZzZXRzKGNoYW5nZS50ZXh0LCBmYWxzZSwgc3RhcnRPZmZzZXQpO1xuICAgICAgICAgICAgICAgIGlmIChlbmRMaW5lIC0gc3RhcnRMaW5lID09PSBhZGRlZExpbmVPZmZzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gYWRkZWRMaW5lT2Zmc2V0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZU9mZnNldHNbaSArIHN0YXJ0TGluZSArIDFdID0gYWRkZWRMaW5lT2Zmc2V0c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkZGVkTGluZU9mZnNldHMubGVuZ3RoIDwgMTAwMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVPZmZzZXRzLnNwbGljZShzdGFydExpbmUgKyAxLCBlbmRMaW5lIC0gc3RhcnRMaW5lLCAuLi5hZGRlZExpbmVPZmZzZXRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHsgLy8gYXZvaWQgdG9vIG1hbnkgYXJndW1lbnRzIGZvciBzcGxpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gbGluZU9mZnNldHMgPSBsaW5lT2Zmc2V0cy5zbGljZSgwLCBzdGFydExpbmUgKyAxKS5jb25jYXQoYWRkZWRMaW5lT2Zmc2V0cywgbGluZU9mZnNldHMuc2xpY2UoZW5kTGluZSArIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBkaWZmID0gY2hhbmdlLnRleHQubGVuZ3RoIC0gKGVuZE9mZnNldCAtIHN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBpZiAoZGlmZiAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gc3RhcnRMaW5lICsgMSArIGFkZGVkTGluZU9mZnNldHMubGVuZ3RoLCBsZW4gPSBsaW5lT2Zmc2V0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZU9mZnNldHNbaV0gPSBsaW5lT2Zmc2V0c1tpXSArIGRpZmY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChGdWxsVGV4dERvY3VtZW50LmlzRnVsbChjaGFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29udGVudCA9IGNoYW5nZS50ZXh0O1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGNoYW5nZSBldmVudCByZWNlaXZlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIH1cbiAgICBnZXRMaW5lT2Zmc2V0cygpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpbmVPZmZzZXRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gY29tcHV0ZUxpbmVPZmZzZXRzKHRoaXMuX2NvbnRlbnQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9saW5lT2Zmc2V0cztcbiAgICB9XG4gICAgcG9zaXRpb25BdChvZmZzZXQpIHtcbiAgICAgICAgb2Zmc2V0ID0gTWF0aC5tYXgoTWF0aC5taW4ob2Zmc2V0LCB0aGlzLl9jb250ZW50Lmxlbmd0aCksIDApO1xuICAgICAgICBjb25zdCBsaW5lT2Zmc2V0cyA9IHRoaXMuZ2V0TGluZU9mZnNldHMoKTtcbiAgICAgICAgbGV0IGxvdyA9IDAsIGhpZ2ggPSBsaW5lT2Zmc2V0cy5sZW5ndGg7XG4gICAgICAgIGlmIChoaWdoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBsaW5lOiAwLCBjaGFyYWN0ZXI6IG9mZnNldCB9O1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgICAgICAgICBjb25zdCBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgICAgICAgaWYgKGxpbmVPZmZzZXRzW21pZF0gPiBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBsb3cgaXMgdGhlIGxlYXN0IHggZm9yIHdoaWNoIHRoZSBsaW5lIG9mZnNldCBpcyBsYXJnZXIgdGhhbiB0aGUgY3VycmVudCBvZmZzZXRcbiAgICAgICAgLy8gb3IgYXJyYXkubGVuZ3RoIGlmIG5vIGxpbmUgb2Zmc2V0IGlzIGxhcmdlciB0aGFuIHRoZSBjdXJyZW50IG9mZnNldFxuICAgICAgICBjb25zdCBsaW5lID0gbG93IC0gMTtcbiAgICAgICAgb2Zmc2V0ID0gdGhpcy5lbnN1cmVCZWZvcmVFT0wob2Zmc2V0LCBsaW5lT2Zmc2V0c1tsaW5lXSk7XG4gICAgICAgIHJldHVybiB7IGxpbmUsIGNoYXJhY3Rlcjogb2Zmc2V0IC0gbGluZU9mZnNldHNbbGluZV0gfTtcbiAgICB9XG4gICAgb2Zmc2V0QXQocG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XG4gICAgICAgIGlmIChwb3NpdGlvbi5saW5lID49IGxpbmVPZmZzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBvc2l0aW9uLmxpbmUgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW5lT2Zmc2V0ID0gbGluZU9mZnNldHNbcG9zaXRpb24ubGluZV07XG4gICAgICAgIGlmIChwb3NpdGlvbi5jaGFyYWN0ZXIgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGxpbmVPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dExpbmVPZmZzZXQgPSAocG9zaXRpb24ubGluZSArIDEgPCBsaW5lT2Zmc2V0cy5sZW5ndGgpID8gbGluZU9mZnNldHNbcG9zaXRpb24ubGluZSArIDFdIDogdGhpcy5fY29udGVudC5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IE1hdGgubWluKGxpbmVPZmZzZXQgKyBwb3NpdGlvbi5jaGFyYWN0ZXIsIG5leHRMaW5lT2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5zdXJlQmVmb3JlRU9MKG9mZnNldCwgbGluZU9mZnNldCk7XG4gICAgfVxuICAgIGVuc3VyZUJlZm9yZUVPTChvZmZzZXQsIGxpbmVPZmZzZXQpIHtcbiAgICAgICAgd2hpbGUgKG9mZnNldCA+IGxpbmVPZmZzZXQgJiYgaXNFT0wodGhpcy5fY29udGVudC5jaGFyQ29kZUF0KG9mZnNldCAtIDEpKSkge1xuICAgICAgICAgICAgb2Zmc2V0LS07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG4gICAgZ2V0IGxpbmVDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TGluZU9mZnNldHMoKS5sZW5ndGg7XG4gICAgfVxuICAgIHN0YXRpYyBpc0luY3JlbWVudGFsKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IGV2ZW50O1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB1bmRlZmluZWQgJiYgY2FuZGlkYXRlICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgY2FuZGlkYXRlLnRleHQgPT09ICdzdHJpbmcnICYmIGNhbmRpZGF0ZS5yYW5nZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLnJhbmdlTGVuZ3RoID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGNhbmRpZGF0ZS5yYW5nZUxlbmd0aCA9PT0gJ251bWJlcicpO1xuICAgIH1cbiAgICBzdGF0aWMgaXNGdWxsKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IGV2ZW50O1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB1bmRlZmluZWQgJiYgY2FuZGlkYXRlICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgY2FuZGlkYXRlLnRleHQgPT09ICdzdHJpbmcnICYmIGNhbmRpZGF0ZS5yYW5nZSA9PT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZS5yYW5nZUxlbmd0aCA9PT0gdW5kZWZpbmVkO1xuICAgIH1cbn1cbnZhciBUZXh0RG9jdW1lbnQ7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGV4dCBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cmkgVGhlIGRvY3VtZW50J3MgdXJpLlxuICAgICAqIEBwYXJhbSBsYW5ndWFnZUlkICBUaGUgZG9jdW1lbnQncyBsYW5ndWFnZSBJZC5cbiAgICAgKiBAcGFyYW0gdmVyc2lvbiBUaGUgZG9jdW1lbnQncyBpbml0aWFsIHZlcnNpb24gbnVtYmVyLlxuICAgICAqIEBwYXJhbSBjb250ZW50IFRoZSBkb2N1bWVudCdzIGNvbnRlbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCkge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bGxUZXh0RG9jdW1lbnQodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGEgVGV4dERvY3VtZW50IGJ5IG1vZGlmeWluZyBpdHMgY29udGVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2N1bWVudCB0aGUgZG9jdW1lbnQgdG8gdXBkYXRlLiBPbmx5IGRvY3VtZW50cyBjcmVhdGVkIGJ5IFRleHREb2N1bWVudC5jcmVhdGUgYXJlIHZhbGlkIGlucHV0cy5cbiAgICAgKiBAcGFyYW0gY2hhbmdlcyB0aGUgY2hhbmdlcyB0byBhcHBseSB0byB0aGUgZG9jdW1lbnQuXG4gICAgICogQHBhcmFtIHZlcnNpb24gdGhlIGNoYW5nZXMgdmVyc2lvbiBmb3IgdGhlIGRvY3VtZW50LlxuICAgICAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIFRleHREb2N1bWVudC4gTm90ZTogVGhhdCdzIHRoZSBzYW1lIGRvY3VtZW50IGluc3RhbmNlIHBhc3NlZCBpbiBhcyBmaXJzdCBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUoZG9jdW1lbnQsIGNoYW5nZXMsIHZlcnNpb24pIHtcbiAgICAgICAgaWYgKGRvY3VtZW50IGluc3RhbmNlb2YgRnVsbFRleHREb2N1bWVudCkge1xuICAgICAgICAgICAgZG9jdW1lbnQudXBkYXRlKGNoYW5nZXMsIHZlcnNpb24pO1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXh0RG9jdW1lbnQudXBkYXRlOiBkb2N1bWVudCBtdXN0IGJlIGNyZWF0ZWQgYnkgVGV4dERvY3VtZW50LmNyZWF0ZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFRleHREb2N1bWVudC51cGRhdGUgPSB1cGRhdGU7XG4gICAgZnVuY3Rpb24gYXBwbHlFZGl0cyhkb2N1bWVudCwgZWRpdHMpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IGRvY3VtZW50LmdldFRleHQoKTtcbiAgICAgICAgY29uc3Qgc29ydGVkRWRpdHMgPSBtZXJnZVNvcnQoZWRpdHMubWFwKGdldFdlbGxmb3JtZWRFZGl0KSwgKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBhLnJhbmdlLnN0YXJ0LmxpbmUgLSBiLnJhbmdlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhLnJhbmdlLnN0YXJ0LmNoYXJhY3RlciAtIGIucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRpZmY7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgbGFzdE1vZGlmaWVkT2Zmc2V0ID0gMDtcbiAgICAgICAgY29uc3Qgc3BhbnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHNvcnRlZEVkaXRzKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydE9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KGUucmFuZ2Uuc3RhcnQpO1xuICAgICAgICAgICAgaWYgKHN0YXJ0T2Zmc2V0IDwgbGFzdE1vZGlmaWVkT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPdmVybGFwcGluZyBlZGl0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdGFydE9mZnNldCA+IGxhc3RNb2RpZmllZE9mZnNldCkge1xuICAgICAgICAgICAgICAgIHNwYW5zLnB1c2godGV4dC5zdWJzdHJpbmcobGFzdE1vZGlmaWVkT2Zmc2V0LCBzdGFydE9mZnNldCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGUubmV3VGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzcGFucy5wdXNoKGUubmV3VGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0TW9kaWZpZWRPZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChlLnJhbmdlLmVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3BhbnMucHVzaCh0ZXh0LnN1YnN0cihsYXN0TW9kaWZpZWRPZmZzZXQpKTtcbiAgICAgICAgcmV0dXJuIHNwYW5zLmpvaW4oJycpO1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnQuYXBwbHlFZGl0cyA9IGFwcGx5RWRpdHM7XG59KShUZXh0RG9jdW1lbnQgfHwgKFRleHREb2N1bWVudCA9IHt9KSk7XG5mdW5jdGlvbiBtZXJnZVNvcnQoZGF0YSwgY29tcGFyZSkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIC8vIHNvcnRlZFxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgY29uc3QgcCA9IChkYXRhLmxlbmd0aCAvIDIpIHwgMDtcbiAgICBjb25zdCBsZWZ0ID0gZGF0YS5zbGljZSgwLCBwKTtcbiAgICBjb25zdCByaWdodCA9IGRhdGEuc2xpY2UocCk7XG4gICAgbWVyZ2VTb3J0KGxlZnQsIGNvbXBhcmUpO1xuICAgIG1lcmdlU29ydChyaWdodCwgY29tcGFyZSk7XG4gICAgbGV0IGxlZnRJZHggPSAwO1xuICAgIGxldCByaWdodElkeCA9IDA7XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGggJiYgcmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmV0ID0gY29tcGFyZShsZWZ0W2xlZnRJZHhdLCByaWdodFtyaWdodElkeF0pO1xuICAgICAgICBpZiAocmV0IDw9IDApIHtcbiAgICAgICAgICAgIC8vIHNtYWxsZXJfZXF1YWwgLT4gdGFrZSBsZWZ0IHRvIHByZXNlcnZlIG9yZGVyXG4gICAgICAgICAgICBkYXRhW2krK10gPSBsZWZ0W2xlZnRJZHgrK107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBncmVhdGVyIC0+IHRha2UgcmlnaHRcbiAgICAgICAgICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGgpIHtcbiAgICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgIH1cbiAgICB3aGlsZSAocmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcbiAgICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gY29tcHV0ZUxpbmVPZmZzZXRzKHRleHQsIGlzQXRMaW5lU3RhcnQsIHRleHRPZmZzZXQgPSAwKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gaXNBdExpbmVTdGFydCA/IFt0ZXh0T2Zmc2V0XSA6IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaCA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGlzRU9MKGNoKSkge1xuICAgICAgICAgICAgaWYgKGNoID09PSAxMyAvKiBDaGFyQ29kZS5DYXJyaWFnZVJldHVybiAqLyAmJiBpICsgMSA8IHRleHQubGVuZ3RoICYmIHRleHQuY2hhckNvZGVBdChpICsgMSkgPT09IDEwIC8qIENoYXJDb2RlLkxpbmVGZWVkICovKSB7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2godGV4dE9mZnNldCArIGkgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gaXNFT0woY2hhcikge1xuICAgIHJldHVybiBjaGFyID09PSAxMyAvKiBDaGFyQ29kZS5DYXJyaWFnZVJldHVybiAqLyB8fCBjaGFyID09PSAxMCAvKiBDaGFyQ29kZS5MaW5lRmVlZCAqLztcbn1cbmZ1bmN0aW9uIGdldFdlbGxmb3JtZWRSYW5nZShyYW5nZSkge1xuICAgIGNvbnN0IHN0YXJ0ID0gcmFuZ2Uuc3RhcnQ7XG4gICAgY29uc3QgZW5kID0gcmFuZ2UuZW5kO1xuICAgIGlmIChzdGFydC5saW5lID4gZW5kLmxpbmUgfHwgKHN0YXJ0LmxpbmUgPT09IGVuZC5saW5lICYmIHN0YXJ0LmNoYXJhY3RlciA+IGVuZC5jaGFyYWN0ZXIpKSB7XG4gICAgICAgIHJldHVybiB7IHN0YXJ0OiBlbmQsIGVuZDogc3RhcnQgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlO1xufVxuZnVuY3Rpb24gZ2V0V2VsbGZvcm1lZEVkaXQodGV4dEVkaXQpIHtcbiAgICBjb25zdCByYW5nZSA9IGdldFdlbGxmb3JtZWRSYW5nZSh0ZXh0RWRpdC5yYW5nZSk7XG4gICAgaWYgKHJhbmdlICE9PSB0ZXh0RWRpdC5yYW5nZSkge1xuICAgICAgICByZXR1cm4geyBuZXdUZXh0OiB0ZXh0RWRpdC5uZXdUZXh0LCByYW5nZSB9O1xuICAgIH1cbiAgICByZXR1cm4gdGV4dEVkaXQ7XG59XG5cbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuLi9hY2UtbGludGVycy9zcmMvc2VydmljZXMvYmFzZS1zZXJ2aWNlLnRzXG5mdW5jdGlvbiBfZGVmaW5lX3Byb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5cblxuXG5jbGFzcyBCYXNlU2VydmljZSB7XG4gICAgYWRkRG9jdW1lbnQoZG9jdW1lbnQpIHtcbiAgICAgICAgdGhpcy5kb2N1bWVudHNbZG9jdW1lbnQudXJpXSA9IFRleHREb2N1bWVudC5jcmVhdGUoZG9jdW1lbnQudXJpLCBkb2N1bWVudC5sYW5ndWFnZUlkLCBkb2N1bWVudC52ZXJzaW9uLCBkb2N1bWVudC50ZXh0KTtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnQodXJpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50c1t1cmldO1xuICAgIH1cbiAgICByZW1vdmVEb2N1bWVudChkb2N1bWVudCkge1xuICAgICAgICBkZWxldGUgdGhpcy5kb2N1bWVudHNbZG9jdW1lbnQudXJpXTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc1tkb2N1bWVudC51cmldKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5vcHRpb25zW2RvY3VtZW50LnVyaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVuYW1lRG9jdW1lbnQoZG9jdW1lbnQsIG5ld0RvY3VtZW50VXJpKSB7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRzW25ld0RvY3VtZW50VXJpXSA9IHRoaXMuZG9jdW1lbnRzW2RvY3VtZW50LnVyaV07XG4gICAgICAgIHRoaXMub3B0aW9uc1tuZXdEb2N1bWVudFVyaV0gPSB0aGlzLm9wdGlvbnNbZG9jdW1lbnQudXJpXTtcbiAgICAgICAgdGhpcy5yZW1vdmVEb2N1bWVudChkb2N1bWVudCk7XG4gICAgfVxuICAgIGdldERvY3VtZW50VmFsdWUodXJpKSB7XG4gICAgICAgIHZhciBfdGhpc19nZXREb2N1bWVudDtcbiAgICAgICAgcmV0dXJuIChfdGhpc19nZXREb2N1bWVudCA9IHRoaXMuZ2V0RG9jdW1lbnQodXJpKSkgPT09IG51bGwgfHwgX3RoaXNfZ2V0RG9jdW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzX2dldERvY3VtZW50LmdldFRleHQoKTtcbiAgICB9XG4gICAgc2V0VmFsdWUoaWRlbnRpZmllciwgdmFsdWUpIHtcbiAgICAgICAgbGV0IGRvY3VtZW50ID0gdGhpcy5nZXREb2N1bWVudChpZGVudGlmaWVyLnVyaSk7XG4gICAgICAgIGlmIChkb2N1bWVudCkge1xuICAgICAgICAgICAgZG9jdW1lbnQgPSBUZXh0RG9jdW1lbnQuY3JlYXRlKGRvY3VtZW50LnVyaSwgZG9jdW1lbnQubGFuZ3VhZ2VJZCwgZG9jdW1lbnQudmVyc2lvbiwgdmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5kb2N1bWVudHNbZG9jdW1lbnQudXJpXSA9IGRvY3VtZW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldEdsb2JhbE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLmdsb2JhbE9wdGlvbnMgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fTtcbiAgICB9XG4gICAgc2V0V29ya3NwYWNlKHdvcmtzcGFjZVVyaSkge1xuICAgICAgICB0aGlzLndvcmtzcGFjZVVyaSA9IHdvcmtzcGFjZVVyaTtcbiAgICB9XG4gICAgc2V0T3B0aW9ucyhkb2N1bWVudFVyaSwgb3B0aW9ucywgbWVyZ2UgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLm9wdGlvbnNbZG9jdW1lbnRVcmldID0gbWVyZ2UgPyBtZXJnZU9iamVjdHMob3B0aW9ucywgdGhpcy5vcHRpb25zW2RvY3VtZW50VXJpXSkgOiBvcHRpb25zO1xuICAgIH1cbiAgICBnZXRPcHRpb24oZG9jdW1lbnRVcmksIG9wdGlvbk5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc1tkb2N1bWVudFVyaV0gJiYgdGhpcy5vcHRpb25zW2RvY3VtZW50VXJpXVtvcHRpb25OYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1tkb2N1bWVudFVyaV1bb3B0aW9uTmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxPcHRpb25zW29wdGlvbk5hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFwcGx5RGVsdGFzKGlkZW50aWZpZXIsIGRlbHRhcykge1xuICAgICAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLmdldERvY3VtZW50KGlkZW50aWZpZXIudXJpKTtcbiAgICAgICAgaWYgKGRvY3VtZW50KSBUZXh0RG9jdW1lbnQudXBkYXRlKGRvY3VtZW50LCBkZWx0YXMsIGlkZW50aWZpZXIudmVyc2lvbik7XG4gICAgfVxuICAgIGFzeW5jIGRvQ29tcGxldGUoZG9jdW1lbnQsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBhc3luYyBkb0hvdmVyKGRvY3VtZW50LCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgZG9SZXNvbHZlKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGFzeW5jIGRvVmFsaWRhdGlvbihkb2N1bWVudCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGZvcm1hdChkb2N1bWVudCwgcmFuZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbXSk7XG4gICAgfVxuICAgIGFzeW5jIHByb3ZpZGVTaWduYXR1cmVIZWxwKGRvY3VtZW50LCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgZmluZERvY3VtZW50SGlnaGxpZ2h0cyhkb2N1bWVudCwgcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBnZXQgb3B0aW9uc1RvRmlsdGVyRGlhZ25vc3RpY3MoKSB7XG4gICAgICAgIHZhciBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb0lnbm9yZSwgX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9UcmVhdEFzV2FybmluZywgX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9UcmVhdEFzSW5mbywgX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9JZ25vcmUsIF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvVHJlYXRBc1dhcm5pbmcsIF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvVHJlYXRBc0luZm87XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcnJvckNvZGVzVG9JZ25vcmU6IChfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb0lnbm9yZSA9IHRoaXMuZ2xvYmFsT3B0aW9ucy5lcnJvckNvZGVzVG9JZ25vcmUpICE9PSBudWxsICYmIF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvSWdub3JlICE9PSB2b2lkIDAgPyBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb0lnbm9yZSA6IFtdLFxuICAgICAgICAgICAgZXJyb3JDb2Rlc1RvVHJlYXRBc1dhcm5pbmc6IChfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb1RyZWF0QXNXYXJuaW5nID0gdGhpcy5nbG9iYWxPcHRpb25zLmVycm9yQ29kZXNUb1RyZWF0QXNXYXJuaW5nKSAhPT0gbnVsbCAmJiBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb1RyZWF0QXNXYXJuaW5nICE9PSB2b2lkIDAgPyBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb1RyZWF0QXNXYXJuaW5nIDogW10sXG4gICAgICAgICAgICBlcnJvckNvZGVzVG9UcmVhdEFzSW5mbzogKF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvVHJlYXRBc0luZm8gPSB0aGlzLmdsb2JhbE9wdGlvbnMuZXJyb3JDb2Rlc1RvVHJlYXRBc0luZm8pICE9PSBudWxsICYmIF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvVHJlYXRBc0luZm8gIT09IHZvaWQgMCA/IF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvVHJlYXRBc0luZm8gOiBbXSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZXNUb0lnbm9yZTogKF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvSWdub3JlID0gdGhpcy5nbG9iYWxPcHRpb25zLmVycm9yTWVzc2FnZXNUb0lnbm9yZSkgIT09IG51bGwgJiYgX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9JZ25vcmUgIT09IHZvaWQgMCA/IF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvSWdub3JlIDogW10sXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VzVG9UcmVhdEFzV2FybmluZzogKF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvVHJlYXRBc1dhcm5pbmcgPSB0aGlzLmdsb2JhbE9wdGlvbnMuZXJyb3JNZXNzYWdlc1RvVHJlYXRBc1dhcm5pbmcpICE9PSBudWxsICYmIF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvVHJlYXRBc1dhcm5pbmcgIT09IHZvaWQgMCA/IF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvVHJlYXRBc1dhcm5pbmcgOiBbXSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZXNUb1RyZWF0QXNJbmZvOiAoX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9UcmVhdEFzSW5mbyA9IHRoaXMuZ2xvYmFsT3B0aW9ucy5lcnJvck1lc3NhZ2VzVG9UcmVhdEFzSW5mbykgIT09IG51bGwgJiYgX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9UcmVhdEFzSW5mbyAhPT0gdm9pZCAwID8gX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9UcmVhdEFzSW5mbyA6IFtdXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldFNlbWFudGljVG9rZW5zKGRvY3VtZW50LCByYW5nZSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGNsb3NlQ29ubmVjdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBnZXRDb2RlQWN0aW9ucyhkb2N1bWVudCwgcmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gICAgZXhlY3V0ZUNvbW1hbmQoY29tbWFuZCwgYXJncykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBzZW5kQXBwbGllZFJlc3VsdChyZXN1bHQsIGNhbGxiYWNrSWQpIHt9XG4gICAgY29uc3RydWN0b3IobW9kZSwgd29ya3NwYWNlVXJpKXtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcInNlcnZpY2VOYW1lXCIsIHZvaWQgMCk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJtb2RlXCIsIHZvaWQgMCk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJkb2N1bWVudHNcIiwge30pO1xuICAgICAgICBfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwib3B0aW9uc1wiLCB7fSk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJnbG9iYWxPcHRpb25zXCIsIHt9KTtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcInNlcnZpY2VEYXRhXCIsIHZvaWQgMCk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJzZXJ2aWNlQ2FwYWJpbGl0aWVzXCIsIHt9KTtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcIndvcmtzcGFjZVVyaVwiLCB2b2lkIDApO1xuICAgICAgICBfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwiY2xpZW50Q2FwYWJpbGl0aWVzXCIsIHtcbiAgICAgICAgICAgIHRleHREb2N1bWVudDoge1xuICAgICAgICAgICAgICAgIGRpYWdub3N0aWM6IHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRlZERvY3VtZW50U3VwcG9ydDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcHVibGlzaERpYWdub3N0aWNzOiB7XG4gICAgICAgICAgICAgICAgICAgIHJlbGF0ZWRJbmZvcm1hdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvblN1cHBvcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB0YWdTdXBwb3J0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW4uRGlhZ25vc3RpY1RhZy5Vbm5lY2Vzc2FyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluLkRpYWdub3N0aWNUYWcuRGVwcmVjYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBkeW5hbWljUmVnaXN0cmF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50Rm9ybWF0OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWFya2Rvd24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3BsYWludGV4dCdcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3luY2hyb25pemF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHdpbGxTYXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZGlkU2F2ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHdpbGxTYXZlV2FpdFVudGlsOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZm9ybWF0dGluZzoge1xuICAgICAgICAgICAgICAgICAgICBkeW5hbWljUmVnaXN0cmF0aW9uOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRpb25JdGVtOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbmlwcGV0U3VwcG9ydDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1pdENoYXJhY3RlcnNTdXBwb3J0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50YXRpb25Gb3JtYXQ6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWFya2Rvd24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwbGFpbnRleHQnXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVwcmVjYXRlZFN1cHBvcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VsZWN0U3VwcG9ydDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFN1cHBvcnQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzaWduYXR1cmVIZWxwOiB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZUluZm9ybWF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uRm9ybWF0OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hcmtkb3duJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGxhaW50ZXh0J1xuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVBhcmFtZXRlclN1cHBvcnQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRIaWdobGlnaHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2VtYW50aWNUb2tlbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgbXVsdGlsaW5lVG9rZW5TdXBwb3J0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxhcHBpbmdUb2tlblN1cHBvcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB0b2tlblR5cGVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5Nb2RpZmllcnM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJlbGF0aXZlXCJcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhdWdtZW50c1N5bnRheFRva2VuczogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29kZUFjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBkeW5hbWljUmVnaXN0cmF0aW9uOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdvcmtzcGFjZToge1xuICAgICAgICAgICAgICAgIGRpZENoYW5nZUNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXhlY3V0ZUNvbW1hbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXBwbHlFZGl0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHdvcmtzcGFjZUVkaXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZmFpbHVyZUhhbmRsaW5nOiBcImFib3J0XCIsXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZXNMaW5lRW5kaW5nczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Q2hhbmdlczogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgICAgICB0aGlzLndvcmtzcGFjZVVyaSA9IHdvcmtzcGFjZVVyaTtcbiAgICB9XG59XG5cbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9hY2UtemlnLWxpbnRlci1jb252ZXJ0ZXJzLnRzXG5mdW5jdGlvbiB0b1RleHRFZGl0cyhpbnB1dCwgcmFuZ2UpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgICByYW5nZTogcmFuZ2UsXG4gICAgICAgICAgICBuZXdUZXh0OiBpbnB1dFxuICAgICAgICB9XG4gICAgXTtcbn1cblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2FjZS16aWctbGludGVyLnRzXG4vKiBwcm92aWRlZCBkZXBlbmRlbmN5ICovIHZhciBhY2VfemlnX2xpbnRlcl9jb25zb2xlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MzY0KTtcbmZ1bmN0aW9uIGFjZV96aWdfbGludGVyX2RlZmluZV9wcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuXG5cblxuY2xhc3MgQWNlWmlnTGludGVyIGV4dGVuZHMgQmFzZVNlcnZpY2Uge1xuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIGF3YWl0IGluaXQoKTtcbiAgICAgICAgdGhpcy5pbml0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBhc3luYyBmb3JtYXQoZG9jdW1lbnQsIHJhbmdlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghdGhpcy5pbml0ZWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmdWxsRG9jdW1lbnQgPSB0aGlzLmdldERvY3VtZW50KGRvY3VtZW50LnVyaSk7XG4gICAgICAgIGlmICghZnVsbERvY3VtZW50KSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcbiAgICAgICAgY29uc3QgdGV4dCA9IGZ1bGxEb2N1bWVudC5nZXRUZXh0KHJhbmdlKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dCA9IGZvcm1hdCh0ZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodG9UZXh0RWRpdHMob3V0cHV0LCByYW5nZSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBhY2VfemlnX2xpbnRlcl9jb25zb2xlLmxvZyhlKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG1vZGUpe1xuICAgICAgICBzdXBlcihtb2RlKTtcbiAgICAgICAgYWNlX3ppZ19saW50ZXJfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwiJHNlcnZpY2VcIiwgdm9pZCAwKTtcbiAgICAgICAgYWNlX3ppZ19saW50ZXJfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwiaW5pdGVkXCIsIGZhbHNlKTtcbiAgICAgICAgYWNlX3ppZ19saW50ZXJfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwic2VydmljZUNhcGFiaWxpdGllc1wiLCB7XG4gICAgICAgICAgICBkb2N1bWVudEZvcm1hdHRpbmdQcm92aWRlcjogdHJ1ZSxcbiAgICAgICAgICAgIHJhbmdlRm9ybWF0dGluZ1Byb3ZpZGVyOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxufSkoKTtcblxuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX2V4cG9ydHNfXztcbi8qKioqKiovIH0pKClcbjtcbn0pOyJdLCJuYW1lcyI6WyJ3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImEiLCJpIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIl9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJwcm9jZXNzIiwiY29uc29sZSIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9yZXF1aXJlIiwiX3JlcXVpcmUkY29kZXMiLCJjb2RlcyIsIkVSUl9BTUJJR1VPVVNfQVJHVU1FTlQiLCJFUlJfSU5WQUxJRF9BUkdfVFlQRSIsIkVSUl9JTlZBTElEX0FSR19WQUxVRSIsIkVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRSIsIkVSUl9NSVNTSU5HX0FSR1MiLCJBc3NlcnRpb25FcnJvciIsIl9yZXF1aXJlMiIsImluc3BlY3QiLCJfcmVxdWlyZSR0eXBlcyIsInR5cGVzIiwiaXNQcm9taXNlIiwiaXNSZWdFeHAiLCJvYmplY3RBc3NpZ24iLCJPYmplY3QiLCJhc3NpZ24iLCJvYmplY3RJcyIsImlzIiwiZXJyb3JDYWNoZSIsIk1hcCIsImlzRGVlcEVxdWFsIiwiaXNEZWVwU3RyaWN0RXF1YWwiLCJwYXJzZUV4cHJlc3Npb25BdCIsImZpbmROb2RlQXJvdW5kIiwiZGVjb2RlciIsImxhenlMb2FkQ29tcGFyaXNvbiIsImNvbXBhcmlzb24iLCJlc2NhcGVTZXF1ZW5jZXNSZWdFeHAiLCJtZXRhIiwiZXNjYXBlRm4iLCJzdHIiLCJjaGFyQ29kZUF0Iiwid2FybmVkIiwiYXNzZXJ0Iiwib2siLCJOT19FWENFUFRJT05fU0VOVElORUwiLCJpbm5lckZhaWwiLCJtZXNzYWdlIiwiRXJyb3IiLCJmYWlsIiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJvcGVyYXRvciIsInN0YWNrU3RhcnRGbiIsImFyZ3NMZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJpbnRlcm5hbE1lc3NhZ2UiLCJ1bmRlZmluZWQiLCJ3YXJuIiwiZW1pdFdhcm5pbmciLCJiaW5kIiwiZXJyQXJncyIsImVyciIsImdlbmVyYXRlZE1lc3NhZ2UiLCJpbm5lck9rIiwiZm4iLCJhcmdMZW4iLCJ2YWx1ZSIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiYXBwbHkiLCJjb25jYXQiLCJlcXVhbCIsIm5vdEVxdWFsIiwiZGVlcEVxdWFsIiwibm90RGVlcEVxdWFsIiwiZGVlcFN0cmljdEVxdWFsIiwibm90RGVlcFN0cmljdEVxdWFsIiwic3RyaWN0RXF1YWwiLCJub3RTdHJpY3RFcXVhbCIsIkNvbXBhcmlzb24iLCJrZXlzIiwiX3RoaXMiLCJmb3JFYWNoIiwia2V5IiwidGVzdCIsImNvbXBhcmVFeGNlcHRpb25LZXkiLCJiIiwibmFtZSIsImV4cGVjdGVkRXhjZXB0aW9uIiwibXNnIiwicHVzaCIsImlzUHJvdG90eXBlT2YiLCJjYWxsIiwiZ2V0QWN0dWFsIiwiZSIsImNoZWNrSXNQcm9taXNlIiwidGhlbiIsImNhdGNoIiwid2FpdEZvckFjdHVhbCIsInByb21pc2VGbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVzdWx0UHJvbWlzZSIsImV4cGVjdHNFcnJvciIsImVycm9yIiwiZGV0YWlscyIsImZuVHlwZSIsImV4cGVjdHNOb0Vycm9yIiwidGhyb3dzIiwiX2xlbjIiLCJfa2V5MiIsInJlamVjdHMiLCJfbGVuMyIsIl9rZXkzIiwicmVzdWx0IiwiZG9lc05vdFRocm93IiwiX2xlbjQiLCJfa2V5NCIsImRvZXNOb3RSZWplY3QiLCJfbGVuNSIsIl9rZXk1IiwiaWZFcnJvciIsIm5ld0VyciIsIm9yaWdTdGFjayIsInN0YWNrIiwidG1wMiIsInNwbGl0Iiwic2hpZnQiLCJ0bXAxIiwicG9zIiwiaW5kZXhPZiIsInNsaWNlIiwiam9pbiIsInN0cmljdCIsIl9sZW42IiwiX2tleTYiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0Iiwic291cmNlIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJfZGVmaW5lUHJvcGVydHkiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJfc2V0UHJvdG90eXBlT2YiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiQ2xhc3MiLCJfY2FjaGUiLCJfaXNOYXRpdmVGdW5jdGlvbiIsImhhcyIsImdldCIsInNldCIsIldyYXBwZXIiLCJfY29uc3RydWN0IiwiX2dldFByb3RvdHlwZU9mIiwiaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIkRhdGUiLCJ0b1N0cmluZyIsIlBhcmVudCIsIkZ1bmN0aW9uIiwibyIsInAiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwiZW5kc1dpdGgiLCJzZWFyY2giLCJ0aGlzX2xlbiIsInN1YnN0cmluZyIsInJlcGVhdCIsImNvdW50IiwiTWF0aCIsImZsb29yIiwibWF4Q291bnQiLCJsb2ciLCJibHVlIiwiZ3JlZW4iLCJyZWQiLCJ3aGl0ZSIsImtSZWFkYWJsZU9wZXJhdG9yIiwic3RyaWN0RXF1YWxPYmplY3QiLCJub3RTdHJpY3RFcXVhbE9iamVjdCIsIm5vdElkZW50aWNhbCIsImtNYXhTaG9ydExlbmd0aCIsImNvcHlFcnJvciIsImluc3BlY3RWYWx1ZSIsInZhbCIsImNvbXBhY3QiLCJjdXN0b21JbnNwZWN0IiwiZGVwdGgiLCJtYXhBcnJheUxlbmd0aCIsIkluZmluaXR5Iiwic2hvd0hpZGRlbiIsImJyZWFrTGVuZ3RoIiwic2hvd1Byb3h5Iiwic29ydGVkIiwiZ2V0dGVycyIsImNyZWF0ZUVyckRpZmYiLCJvdGhlciIsInJlcyIsImxhc3RQb3MiLCJlbmQiLCJza2lwcGVkIiwiYWN0dWFsSW5zcGVjdGVkIiwiYWN0dWFsTGluZXMiLCJleHBlY3RlZExpbmVzIiwiaW5kaWNhdG9yIiwiaW5wdXRMZW5ndGgiLCJtYXhMZW5ndGgiLCJzdGRlcnIiLCJpc1RUWSIsImNvbHVtbnMiLCJwb3AiLCJtYXhMaW5lcyIsIm1heCIsIl9hY3R1YWxMaW5lcyIsInByaW50ZWRMaW5lcyIsInNraXBwZWRNc2ciLCJjdXIiLCJleHBlY3RlZExpbmUiLCJhY3R1YWxMaW5lIiwiZGl2ZXJnaW5nTGluZXMiLCJfRXJyb3IiLCJvcHRpb25zIiwibGltaXQiLCJzdGFja1RyYWNlTGltaXQiLCJTdHJpbmciLCJnZXRDb2xvckRlcHRoIiwiYmFzZSIsIl9yZXMiLCJrbm93bk9wZXJhdG9ycyIsImNvZGUiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImN1c3RvbSIsInJlY3Vyc2VUaW1lcyIsImN0eCIsInV0aWwiLCJjcmVhdGVFcnJvclR5cGUiLCJCYXNlIiwiZ2V0TWVzc2FnZSIsImFyZzEiLCJhcmcyIiwiYXJnMyIsIk5vZGVFcnJvciIsIl9CYXNlIiwib25lT2YiLCJ0aGluZyIsImlzQXJyYXkiLCJsZW4iLCJtYXAiLCJzdGFydHNXaXRoIiwic3Vic3RyIiwiaW5jbHVkZXMiLCJzdGFydCIsImRldGVybWluZXIiLCJyZXBsYWNlIiwidHlwZSIsInJlYXNvbiIsImluc3BlY3RlZCIsIlJhbmdlRXJyb3IiLCJpbnB1dCIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX25vbkl0ZXJhYmxlUmVzdCIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfaSIsIl9zIiwibmV4dCIsImRvbmUiLCJyZWdleEZsYWdzU3VwcG9ydGVkIiwiZmxhZ3MiLCJhcnJheUZyb21TZXQiLCJhcnJheSIsImFycmF5RnJvbU1hcCIsIm9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyIsIm51bWJlcklzTmFOIiwiTnVtYmVyIiwiaXNOYU4iLCJ1bmN1cnJ5VGhpcyIsImYiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwib2JqZWN0VG9TdHJpbmciLCJpc0FueUFycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJpc0RhdGUiLCJpc01hcCIsImlzU2V0IiwiaXNOYXRpdmVFcnJvciIsImlzQm94ZWRQcmltaXRpdmUiLCJpc051bWJlck9iamVjdCIsImlzU3RyaW5nT2JqZWN0IiwiaXNCb29sZWFuT2JqZWN0IiwiaXNCaWdJbnRPYmplY3QiLCJpc1N5bWJvbE9iamVjdCIsImlzRmxvYXQzMkFycmF5IiwiaXNGbG9hdDY0QXJyYXkiLCJpc05vbkluZGV4IiwicG93IiwiZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzIiwiY29tcGFyZSIsIngiLCJ5IiwibWluIiwiT05MWV9FTlVNRVJBQkxFIiwia1N0cmljdCIsImtMb29zZSIsImtOb0l0ZXJhdG9yIiwia0lzQXJyYXkiLCJrSXNTZXQiLCJrSXNNYXAiLCJhcmVTaW1pbGFyUmVnRXhwcyIsIlJlZ0V4cCIsImFyZVNpbWlsYXJGbG9hdEFycmF5cyIsImJ5dGVMZW5ndGgiLCJvZmZzZXQiLCJhcmVTaW1pbGFyVHlwZWRBcnJheXMiLCJVaW50OEFycmF5IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImFyZUVxdWFsQXJyYXlCdWZmZXJzIiwiYnVmMSIsImJ1ZjIiLCJpc0VxdWFsQm94ZWRQcmltaXRpdmUiLCJ2YWwxIiwidmFsMiIsInZhbHVlT2YiLCJCb29sZWFuIiwiQmlnSW50IiwiaW5uZXJEZWVwRXF1YWwiLCJtZW1vcyIsInZhbDFUYWciLCJ2YWwyVGFnIiwia2V5czEiLCJrZXlzMiIsImtleUNoZWNrIiwiZ2V0VGltZSIsIl9rZXlzIiwiX2tleXMyIiwic2l6ZSIsImdldEVudW1lcmFibGVzIiwiayIsIml0ZXJhdGlvblR5cGUiLCJhS2V5cyIsImJLZXlzIiwic3ltYm9sS2V5c0EiLCJzeW1ib2xLZXlzQiIsIl9zeW1ib2xLZXlzQiIsInBvc2l0aW9uIiwidmFsMk1lbW9BIiwidmFsMk1lbW9CIiwiYXJlRXEiLCJvYmpFcXVpdiIsImRlbGV0ZSIsInNldEhhc0VxdWFsRWxlbWVudCIsIm1lbW8iLCJzZXRWYWx1ZXMiLCJmaW5kTG9vc2VNYXRjaGluZ1ByaW1pdGl2ZXMiLCJwcmltIiwic2V0TWlnaHRIYXZlTG9vc2VQcmltIiwiYWx0VmFsdWUiLCJtYXBNaWdodEhhdmVMb29zZVByaW0iLCJpdGVtIiwiY3VyQiIsInNldEVxdWl2IiwiYVZhbHVlcyIsIlNldCIsImFkZCIsImJWYWx1ZXMiLCJfdmFsIiwibWFwSGFzRXF1YWxFbnRyeSIsImtleTEiLCJpdGVtMSIsImtleTIiLCJtYXBFcXVpdiIsImFFbnRyaWVzIiwiX2FFbnRyaWVzJGkiLCJpdGVtMiIsImJFbnRyaWVzIiwiX2kyIiwiX2JFbnRyaWVzJF9pIiwia2V5c0EiLCJHZXRJbnRyaW5zaWMiLCJjYWxsQmluZCIsIiRpbmRleE9mIiwiY2FsbEJvdW5kSW50cmluc2ljIiwiYWxsb3dNaXNzaW5nIiwiaW50cmluc2ljIiwic2V0RnVuY3Rpb25MZW5ndGgiLCIkVHlwZUVycm9yIiwiJGFwcGx5IiwiJGNhbGwiLCIkcmVmbGVjdEFwcGx5IiwiJGRlZmluZVByb3BlcnR5IiwiJG1heCIsIm9yaWdpbmFsRnVuY3Rpb24iLCJmdW5jIiwiYXBwbHlCaW5kIiwibm93IiwidGltZXMiLCJnIiwid2luZG93IiwiZnVuY3Rpb25zIiwiaW5mbyIsInRpbWUiLCJ0aW1lRW5kIiwidHJhY2UiLCJkaXIiLCJjb25zb2xlQXNzZXJ0IiwidHVwbGUiLCJsYWJlbCIsImR1cmF0aW9uIiwiZm9ybWF0Iiwib2JqZWN0IiwiZXhwcmVzc2lvbiIsIiRTeW50YXhFcnJvciIsImdvcGQiLCJkZWZpbmVEYXRhUHJvcGVydHkiLCJwcm9wZXJ0eSIsIm5vbkVudW1lcmFibGUiLCJub25Xcml0YWJsZSIsIm5vbkNvbmZpZ3VyYWJsZSIsImxvb3NlIiwiZGVzYyIsImhhc1N5bWJvbHMiLCJ0b1N0ciIsIm9yaWdEZWZpbmVQcm9wZXJ0eSIsImlzRnVuY3Rpb24iLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3JzIiwic3VwcG9ydHNEZXNjcmlwdG9ycyIsInByZWRpY2F0ZSIsImRlZmluZVByb3BlcnRpZXMiLCJwcmVkaWNhdGVzIiwiRXZhbEVycm9yIiwiU3ludGF4RXJyb3IiLCJVUklFcnJvciIsImZpcnN0U291cmNlIiwidG8iLCJuZXh0U291cmNlIiwia2V5c0FycmF5IiwibmV4dEluZGV4IiwibmV4dEtleSIsInBvbHlmaWxsIiwiaXNDYWxsYWJsZSIsImZvckVhY2hBcnJheSIsInJlY2VpdmVyIiwiZm9yRWFjaFN0cmluZyIsInN0cmluZyIsImNoYXJBdCIsImZvckVhY2hPYmplY3QiLCJsaXN0IiwidGhpc0FyZyIsIkVSUk9SX01FU1NBR0UiLCJmdW5jVHlwZSIsImNvbmNhdHR5IiwiaiIsInNsaWN5IiwiYXJyTGlrZSIsImpvaW55Iiwiam9pbmVyIiwidGhhdCIsImJvdW5kIiwiYmluZGVyIiwiYm91bmRMZW5ndGgiLCJib3VuZEFyZ3MiLCJFbXB0eSIsImltcGxlbWVudGF0aW9uIiwiJEVycm9yIiwiJEV2YWxFcnJvciIsIiRSYW5nZUVycm9yIiwiJFJlZmVyZW5jZUVycm9yIiwiJFVSSUVycm9yIiwiJEZ1bmN0aW9uIiwiZ2V0RXZhbGxlZENvbnN0cnVjdG9yIiwiZXhwcmVzc2lvblN5bnRheCIsIiRnT1BEIiwidGhyb3dUeXBlRXJyb3IiLCJUaHJvd1R5cGVFcnJvciIsImNhbGxlZSIsImNhbGxlZVRocm93cyIsImdPUER0aHJvd3MiLCJoYXNQcm90byIsImdldFByb3RvIiwibmVlZHNFdmFsIiwiVHlwZWRBcnJheSIsIklOVFJJTlNJQ1MiLCJBZ2dyZWdhdGVFcnJvciIsIkFycmF5QnVmZmVyIiwiQXRvbWljcyIsIkJpZ0ludDY0QXJyYXkiLCJCaWdVaW50NjRBcnJheSIsIkRhdGFWaWV3IiwiZGVjb2RlVVJJIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZW5jb2RlVVJJIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZXZhbCIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkZpbmFsaXphdGlvblJlZ2lzdHJ5IiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJpc0Zpbml0ZSIsIkpTT04iLCJwYXJzZUZsb2F0IiwicGFyc2VJbnQiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIldlYWtNYXAiLCJXZWFrUmVmIiwiV2Vha1NldCIsImVycm9yUHJvdG8iLCJkb0V2YWwiLCJnZW4iLCJMRUdBQ1lfQUxJQVNFUyIsImhhc093biIsIiRjb25jYXQiLCIkc3BsaWNlQXBwbHkiLCJzcGxpY2UiLCIkcmVwbGFjZSIsIiRzdHJTbGljZSIsIiRleGVjIiwiZXhlYyIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJzdHJpbmdUb1BhdGgiLCJmaXJzdCIsImxhc3QiLCJtYXRjaCIsIm51bWJlciIsInF1b3RlIiwic3ViU3RyaW5nIiwiZ2V0QmFzZUludHJpbnNpYyIsImludHJpbnNpY05hbWUiLCJhbGlhcyIsInBhcnRzIiwiaW50cmluc2ljQmFzZU5hbWUiLCJpbnRyaW5zaWNSZWFsTmFtZSIsInNraXBGdXJ0aGVyQ2FjaGluZyIsImlzT3duIiwicGFydCIsImhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnIiwiZm9vIiwiJE9iamVjdCIsIm9yaWdTeW1ib2wiLCJoYXNTeW1ib2xTaGFtIiwiaGFzTmF0aXZlU3ltYm9scyIsInN5bU9iaiIsInN5bVZhbCIsImdldE93blByb3BlcnR5TmFtZXMiLCJzeW1zIiwiaGFzVG9TdHJpbmdUYWdTaGFtcyIsInRvU3RyaW5nVGFnIiwiJGhhc093biIsImluaGVyaXRzIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiaGFzVG9TdHJpbmdUYWciLCJjYWxsQm91bmQiLCIkdG9TdHJpbmciLCJpc1N0YW5kYXJkQXJndW1lbnRzIiwiaXNBcmd1bWVudHMiLCJpc0xlZ2FjeUFyZ3VtZW50cyIsInN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMiLCJmblRvU3RyIiwicmVmbGVjdEFwcGx5IiwiYmFkQXJyYXlMaWtlIiwiaXNDYWxsYWJsZU1hcmtlciIsIl8iLCJjb25zdHJ1Y3RvclJlZ2V4IiwiaXNFUzZDbGFzc0ZuIiwiaXNFUzZDbGFzc0Z1bmN0aW9uIiwiZm5TdHIiLCJ0cnlGdW5jdGlvbk9iamVjdCIsInRyeUZ1bmN0aW9uVG9TdHIiLCJvYmplY3RDbGFzcyIsImZuQ2xhc3MiLCJnZW5DbGFzcyIsImRkYUNsYXNzIiwiZGRhQ2xhc3MyIiwiZGRhQ2xhc3MzIiwiaXNJRTY4IiwiaXNEREEiLCJpc0RvY3VtZW50RG90QWxsIiwiZG9jdW1lbnQiLCJhbGwiLCJzdHJDbGFzcyIsImlzRm5SZWdleCIsImdldEdlbmVyYXRvckZ1bmMiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5lcmF0b3JGdW5jIiwiZ2V0UG9seWZpbGwiLCJzaGltIiwiTmFOIiwic2hpbU51bWJlcklzTmFOIiwidGVzdElzTmFOIiwid2hpY2hUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5Iiwic2hpbU9iamVjdElzIiwidGVzdE9iamVjdElzIiwia2V5c1NoaW0iLCJpc0FyZ3MiLCJpc0VudW1lcmFibGUiLCJoYXNEb250RW51bUJ1ZyIsImhhc1Byb3RvRW51bUJ1ZyIsImRvbnRFbnVtcyIsImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlIiwiZXhjbHVkZWRLZXlzIiwiJGFwcGxpY2F0aW9uQ2FjaGUiLCIkY29uc29sZSIsIiRleHRlcm5hbCIsIiRmcmFtZSIsIiRmcmFtZUVsZW1lbnQiLCIkZnJhbWVzIiwiJGlubmVySGVpZ2h0IiwiJGlubmVyV2lkdGgiLCIkb25tb3pmdWxsc2NyZWVuY2hhbmdlIiwiJG9ubW96ZnVsbHNjcmVlbmVycm9yIiwiJG91dGVySGVpZ2h0IiwiJG91dGVyV2lkdGgiLCIkcGFnZVhPZmZzZXQiLCIkcGFnZVlPZmZzZXQiLCIkcGFyZW50IiwiJHNjcm9sbExlZnQiLCIkc2Nyb2xsVG9wIiwiJHNjcm9sbFgiLCIkc2Nyb2xsWSIsIiRzZWxmIiwiJHdlYmtpdEluZGV4ZWREQiIsIiR3ZWJraXRTdG9yYWdlSW5mbyIsIiR3aW5kb3ciLCJoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWciLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kiLCJpc09iamVjdCIsImlzU3RyaW5nIiwidGhlS2V5cyIsInNraXBQcm90byIsInNraXBDb25zdHJ1Y3RvciIsIm9yaWdLZXlzIiwib3JpZ2luYWxLZXlzIiwic2hpbU9iamVjdEtleXMiLCJrZXlzV29ya3NXaXRoQXJndW1lbnRzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJxdWV1ZSIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibmV4dFRpY2siLCJJdGVtIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm5vb3AiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsImhhc0Rlc2NyaXB0b3JzIiwiZ09QRCIsIiRmbG9vciIsImZ1bmN0aW9uTGVuZ3RoSXNDb25maWd1cmFibGUiLCJmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUiLCJpc0J1ZmZlciIsImFyZyIsImNvcHkiLCJmaWxsIiwicmVhZFVJbnQ4IiwiX191bnVzZWRfd2VicGFja19tb2R1bGUiLCJpc0FyZ3VtZW50c09iamVjdCIsIkJpZ0ludFN1cHBvcnRlZCIsIlN5bWJvbFN1cHBvcnRlZCIsIk9iamVjdFRvU3RyaW5nIiwibnVtYmVyVmFsdWUiLCJzdHJpbmdWYWx1ZSIsImJvb2xlYW5WYWx1ZSIsImJpZ0ludFZhbHVlIiwic3ltYm9sVmFsdWUiLCJjaGVja0JveGVkUHJpbWl0aXZlIiwicHJvdG90eXBlVmFsdWVPZiIsImlzVmlldyIsImlzRGF0YVZpZXciLCJpc1VpbnQ4QXJyYXkiLCJpc1VpbnQ4Q2xhbXBlZEFycmF5IiwiaXNVaW50MTZBcnJheSIsImlzVWludDMyQXJyYXkiLCJpc0ludDhBcnJheSIsImlzSW50MTZBcnJheSIsImlzSW50MzJBcnJheSIsImlzQmlnSW50NjRBcnJheSIsImlzQmlnVWludDY0QXJyYXkiLCJpc01hcFRvU3RyaW5nIiwid29ya2luZyIsImlzU2V0VG9TdHJpbmciLCJpc1dlYWtNYXBUb1N0cmluZyIsImlzV2Vha01hcCIsImlzV2Vha1NldFRvU3RyaW5nIiwiaXNXZWFrU2V0IiwiaXNBcnJheUJ1ZmZlclRvU3RyaW5nIiwiaXNBcnJheUJ1ZmZlciIsImlzRGF0YVZpZXdUb1N0cmluZyIsIlNoYXJlZEFycmF5QnVmZmVyQ29weSIsImlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyIsImlzU2hhcmVkQXJyYXlCdWZmZXIiLCJpc0FzeW5jRnVuY3Rpb24iLCJpc01hcEl0ZXJhdG9yIiwiaXNTZXRJdGVyYXRvciIsImlzR2VuZXJhdG9yT2JqZWN0IiwiaXNXZWJBc3NlbWJseUNvbXBpbGVkTW9kdWxlIiwibWV0aG9kIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlc2NyaXB0b3JzIiwiZm9ybWF0UmVnRXhwIiwib2JqZWN0cyIsInN0cmluZ2lmeSIsImlzTnVsbCIsImRlcHJlY2F0ZSIsIm5vRGVwcmVjYXRpb24iLCJkZXByZWNhdGVkIiwidGhyb3dEZXByZWNhdGlvbiIsInRyYWNlRGVwcmVjYXRpb24iLCJkZWJ1Z3MiLCJkZWJ1Z0VudlJlZ2V4IiwiTk9ERV9ERUJVRyIsImRlYnVnRW52IiwidG9VcHBlckNhc2UiLCJkZWJ1Z2xvZyIsInBpZCIsIm9wdHMiLCJzZWVuIiwic3R5bGl6ZSIsInN0eWxpemVOb0NvbG9yIiwiY29sb3JzIiwiaXNCb29sZWFuIiwiX2V4dGVuZCIsImlzVW5kZWZpbmVkIiwic3R5bGl6ZVdpdGhDb2xvciIsImZvcm1hdFZhbHVlIiwic3R5bGVzIiwic3R5bGVUeXBlIiwic3R5bGUiLCJhcnJheVRvSGFzaCIsImhhc2giLCJpZHgiLCJyZXQiLCJwcmltaXRpdmUiLCJmb3JtYXRQcmltaXRpdmUiLCJ2aXNpYmxlS2V5cyIsImlzRXJyb3IiLCJmb3JtYXRFcnJvciIsImJyYWNlcyIsIm4iLCJ0b1VUQ1N0cmluZyIsIm91dHB1dCIsImZvcm1hdEFycmF5IiwiZm9ybWF0UHJvcGVydHkiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsInNpbXBsZSIsImlzTnVtYmVyIiwibCIsImxpbmUiLCJudW1MaW5lc0VzdCIsInJlZHVjZSIsInByZXYiLCJhciIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNTeW1ib2wiLCJyZSIsImQiLCJpc1ByaW1pdGl2ZSIsInBhZCIsIm1vbnRocyIsInRpbWVzdGFtcCIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJvcmlnaW4iLCJwcm9wIiwia0N1c3RvbVByb21pc2lmaWVkU3ltYm9sIiwicHJvbWlzaWZ5Iiwib3JpZ2luYWwiLCJwcm9taXNlUmVzb2x2ZSIsInByb21pc2VSZWplY3QiLCJwcm9taXNlIiwicmVqZWN0IiwiY2FsbGJhY2tpZnlPblJlamVjdGVkIiwiY2IiLCJuZXdSZWFzb24iLCJjYWxsYmFja2lmeSIsImNhbGxiYWNraWZpZWQiLCJtYXliZUNiIiwicmVqIiwiX19jcmVhdGVCaW5kaW5nIiwibSIsImsyIiwiX19lc01vZHVsZSIsIl9fZXhwb3J0U3RhciIsImNyZWF0ZU1lc3NhZ2VDb25uZWN0aW9uIiwiQnJvd3Nlck1lc3NhZ2VXcml0ZXIiLCJCcm93c2VyTWVzc2FnZVJlYWRlciIsInJpbF8xIiwiZGVmYXVsdCIsImluc3RhbGwiLCJhcGlfMSIsIkFic3RyYWN0TWVzc2FnZVJlYWRlciIsImxpc3RlbiIsImNhbGxiYWNrIiwiX29uRGF0YSIsImV2ZW50IiwicG9ydCIsIkVtaXR0ZXIiLCJfbWVzc2FnZUxpc3RlbmVyIiwiZmlyZSIsImRhdGEiLCJhZGRFdmVudExpc3RlbmVyIiwiZmlyZUVycm9yIiwib25tZXNzYWdlIiwiQWJzdHJhY3RNZXNzYWdlV3JpdGVyIiwid3JpdGUiLCJwb3N0TWVzc2FnZSIsImhhbmRsZUVycm9yIiwiZXJyb3JDb3VudCIsInJlYWRlciIsIndyaXRlciIsImxvZ2dlciIsIk51bGxMb2dnZXIiLCJDb25uZWN0aW9uU3RyYXRlZ3kiLCJjb25uZWN0aW9uU3RyYXRlZ3kiLCJNZXNzYWdlQnVmZmVyIiwiQWJzdHJhY3RNZXNzYWdlQnVmZmVyIiwiZW1wdHlCdWZmZXIiLCJmcm9tU3RyaW5nIiwiX2VuY29kaW5nIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJlbmNvZGluZyIsImFzY2lpRGVjb2RlciIsImRlY29kZSIsIlRleHREZWNvZGVyIiwiYXNOYXRpdmUiLCJhbGxvY05hdGl2ZSIsIlJlYWRhYmxlU3RyZWFtV3JhcHBlciIsIm9uQ2xvc2UiLCJsaXN0ZW5lciIsInNvY2tldCIsIkRpc3Bvc2FibGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25FcnJvciIsIm9uRW5kIiwib25EYXRhIiwiYmxvYiIsImFycmF5QnVmZmVyIiwiUkFMIiwiV3JpdGFibGVTdHJlYW1XcmFwcGVyIiwic2VuZCIsImNsb3NlIiwiX3RleHRFbmNvZGVyIiwiX3JpbCIsImZyZWV6ZSIsIm1lc3NhZ2VCdWZmZXIiLCJhcHBsaWNhdGlvbkpzb24iLCJlbmNvZGVyIiwiY2hhcnNldCIsInBhcnNlIiwic3RyZWFtIiwiYXNSZWFkYWJsZVN0cmVhbSIsImFzV3JpdGFibGVTdHJlYW0iLCJ0aW1lciIsIm1zIiwiaGFuZGxlIiwiZGlzcG9zZSIsInNldEltbWVkaWF0ZSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIlJJTCIsIlByb2dyZXNzVHlwZSIsIlByb2dyZXNzVG9rZW4iLCJDb25uZWN0aW9uT3B0aW9ucyIsIldyaXRlYWJsZVN0cmVhbU1lc3NhZ2VXcml0ZXIiLCJNZXNzYWdlV3JpdGVyIiwiUmVhZGFibGVTdHJlYW1NZXNzYWdlUmVhZGVyIiwiTWVzc2FnZVJlYWRlciIsIlNoYXJlZEFycmF5UmVjZWl2ZXJTdHJhdGVneSIsIlNoYXJlZEFycmF5U2VuZGVyU3RyYXRlZ3kiLCJDYW5jZWxsYXRpb25Ub2tlbiIsIkNhbmNlbGxhdGlvblRva2VuU291cmNlIiwiRXZlbnQiLCJMUlVDYWNoZSIsIlRvdWNoIiwiTGlua2VkTWFwIiwiUGFyYW1ldGVyU3RydWN0dXJlcyIsIk5vdGlmaWNhdGlvblR5cGU5IiwiTm90aWZpY2F0aW9uVHlwZTgiLCJOb3RpZmljYXRpb25UeXBlNyIsIk5vdGlmaWNhdGlvblR5cGU2IiwiTm90aWZpY2F0aW9uVHlwZTUiLCJOb3RpZmljYXRpb25UeXBlNCIsIk5vdGlmaWNhdGlvblR5cGUzIiwiTm90aWZpY2F0aW9uVHlwZTIiLCJOb3RpZmljYXRpb25UeXBlMSIsIk5vdGlmaWNhdGlvblR5cGUwIiwiTm90aWZpY2F0aW9uVHlwZSIsIkVycm9yQ29kZXMiLCJSZXNwb25zZUVycm9yIiwiUmVxdWVzdFR5cGU5IiwiUmVxdWVzdFR5cGU4IiwiUmVxdWVzdFR5cGU3IiwiUmVxdWVzdFR5cGU2IiwiUmVxdWVzdFR5cGU1IiwiUmVxdWVzdFR5cGU0IiwiUmVxdWVzdFR5cGUzIiwiUmVxdWVzdFR5cGUyIiwiUmVxdWVzdFR5cGUxIiwiUmVxdWVzdFR5cGUwIiwiUmVxdWVzdFR5cGUiLCJNZXNzYWdlIiwiTWVzc2FnZVN0cmF0ZWd5IiwiQ2FuY2VsbGF0aW9uU3RyYXRlZ3kiLCJDYW5jZWxsYXRpb25TZW5kZXJTdHJhdGVneSIsIkNhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kiLCJDb25uZWN0aW9uRXJyb3IiLCJDb25uZWN0aW9uRXJyb3JzIiwiTG9nVHJhY2VOb3RpZmljYXRpb24iLCJTZXRUcmFjZU5vdGlmaWNhdGlvbiIsIlRyYWNlRm9ybWF0IiwiVHJhY2VWYWx1ZXMiLCJUcmFjZSIsIm1lc3NhZ2VzXzEiLCJsaW5rZWRNYXBfMSIsImRpc3Bvc2FibGVfMSIsImV2ZW50c18xIiwiY2FuY2VsbGF0aW9uXzEiLCJzaGFyZWRBcnJheUNhbmNlbGxhdGlvbl8xIiwibWVzc2FnZVJlYWRlcl8xIiwibWVzc2FnZVdyaXRlcl8xIiwibWVzc2FnZUJ1ZmZlcl8xIiwiY29ubmVjdGlvbl8xIiwicmFsXzEiLCJJcyIsIk5vbmUiLCJpc0NhbmNlbGxhdGlvblJlcXVlc3RlZCIsIm9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiQ2FuY2VsbGVkIiwiY2FuZGlkYXRlIiwiYm9vbGVhbiIsInNob3J0Y3V0RXZlbnQiLCJjb250ZXh0IiwiTXV0YWJsZVRva2VuIiwiY2FuY2VsIiwiX2lzQ2FuY2VsbGVkIiwiX2VtaXR0ZXIiLCJ0b2tlbiIsIl90b2tlbiIsIlJlcXVlc3RDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5IiwiSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5IiwiQ2FuY2VsTm90aWZpY2F0aW9uIiwiUHJvZ3Jlc3NOb3RpZmljYXRpb24iLCJTdGFyUmVxdWVzdEhhbmRsZXIiLCJPZmYiLCJNZXNzYWdlcyIsIkNvbXBhY3QiLCJWZXJib3NlIiwidG9Mb3dlckNhc2UiLCJUZXh0IiwiY2FuY2VsVW5kaXNwYXRjaGVkIiwia2luZCIsImNyZWF0ZUNhbmNlbGxhdGlvblRva2VuU291cmNlIiwic2VuZENhbmNlbGxhdGlvbiIsImNvbm4iLCJpZCIsInNlbmROb3RpZmljYXRpb24iLCJjbGVhbnVwIiwic2VuZGVyIiwiaGFuZGxlTWVzc2FnZSIsImNhbmNlbGxhdGlvblN0cmF0ZWd5IiwibWVzc2FnZVN0cmF0ZWd5IiwiQ29ubmVjdGlvblN0YXRlIiwibWVzc2FnZVJlYWRlciIsIm1lc3NhZ2VXcml0ZXIiLCJfbG9nZ2VyIiwic2VxdWVuY2VOdW1iZXIiLCJub3RpZmljYXRpb25TZXF1ZW5jZU51bWJlciIsInVua25vd25SZXNwb25zZVNlcXVlbmNlTnVtYmVyIiwic3RhclJlcXVlc3RIYW5kbGVyIiwicmVxdWVzdEhhbmRsZXJzIiwic3Rhck5vdGlmaWNhdGlvbkhhbmRsZXIiLCJub3RpZmljYXRpb25IYW5kbGVycyIsInByb2dyZXNzSGFuZGxlcnMiLCJtZXNzYWdlUXVldWUiLCJyZXNwb25zZVByb21pc2VzIiwia25vd25DYW5jZWxlZFJlcXVlc3RzIiwicmVxdWVzdFRva2VucyIsInRyYWNlRm9ybWF0IiwidHJhY2VyIiwic3RhdGUiLCJOZXciLCJlcnJvckVtaXR0ZXIiLCJjbG9zZUVtaXR0ZXIiLCJ1bmhhbmRsZWROb3RpZmljYXRpb25FbWl0dGVyIiwidW5oYW5kbGVkUHJvZ3Jlc3NFbWl0dGVyIiwiZGlzcG9zZUVtaXR0ZXIiLCJjcmVhdGVSZXF1ZXN0UXVldWVLZXkiLCJjcmVhdGVSZXNwb25zZVF1ZXVlS2V5IiwiY3JlYXRlTm90aWZpY2F0aW9uUXVldWVLZXkiLCJhZGRNZXNzYWdlVG9RdWV1ZSIsImlzUmVxdWVzdCIsImlzUmVzcG9uc2UiLCJfbWVzc2FnZSIsImlzTGlzdGVuaW5nIiwiTGlzdGVuaW5nIiwiaXNDbG9zZWQiLCJDbG9zZWQiLCJpc0Rpc3Bvc2VkIiwiRGlzcG9zZWQiLCJjbG9zZUhhbmRsZXIiLCJyZWFkRXJyb3JIYW5kbGVyIiwid3JpdGVFcnJvckhhbmRsZXIiLCJ0cmlnZ2VyTWVzc2FnZVF1ZXVlIiwicHJvY2Vzc01lc3NhZ2VRdWV1ZSIsImhhbmRsZVJlcXVlc3QiLCJpc05vdGlmaWNhdGlvbiIsImhhbmRsZU5vdGlmaWNhdGlvbiIsImhhbmRsZVJlc3BvbnNlIiwiaGFuZGxlSW52YWxpZE1lc3NhZ2UiLCJjYW5jZWxJZCIsInBhcmFtcyIsInRvQ2FuY2VsIiwic3RyYXRlZ3kiLCJyZXNwb25zZSIsInRyYWNlU2VuZGluZ1Jlc3BvbnNlIiwiY2FuY2VsbGF0aW9uVG9rZW4iLCJ0cmFjZVJlY2VpdmVkTm90aWZpY2F0aW9uIiwicmVxdWVzdE1lc3NhZ2UiLCJyZXBseSIsInJlc3VsdE9yRXJyb3IiLCJzdGFydFRpbWUiLCJqc29ucnBjIiwidG9Kc29uIiwicmVwbHlFcnJvciIsInJlcGx5U3VjY2VzcyIsInRyYWNlUmVjZWl2ZWRSZXF1ZXN0IiwiZWxlbWVudCIsInJlcXVlc3RIYW5kbGVyIiwiaGFuZGxlciIsInRva2VuS2V5IiwiY2FuY2VsbGF0aW9uU291cmNlIiwiaGFuZGxlclJlc3VsdCIsIm51bWJlck9mUGFyYW1zIiwiSW52YWxpZFBhcmFtcyIsInBhcmFtZXRlclN0cnVjdHVyZXMiLCJieU5hbWUiLCJieVBvc2l0aW9uIiwiSW50ZXJuYWxFcnJvciIsIk1ldGhvZE5vdEZvdW5kIiwicmVzcG9uc2VNZXNzYWdlIiwicmVzcG9uc2VQcm9taXNlIiwidHJhY2VSZWNlaXZlZFJlc3BvbnNlIiwibm90aWZpY2F0aW9uSGFuZGxlciIsInJlc3BvbnNlSGFuZGxlciIsInN0cmluZ2lmeVRyYWNlIiwidHJhY2VTZW5kaW5nUmVxdWVzdCIsImxvZ0xTUE1lc3NhZ2UiLCJ0cmFjZVNlbmRpbmdOb3RpZmljYXRpb24iLCJ0aW1lclN0YXJ0IiwibHNwTWVzc2FnZSIsImlzTFNQTWVzc2FnZSIsInRocm93SWZDbG9zZWRPckRpc3Bvc2VkIiwidGhyb3dJZkxpc3RlbmluZyIsIkFscmVhZHlMaXN0ZW5pbmciLCJ0aHJvd0lmTm90TGlzdGVuaW5nIiwidW5kZWZpbmVkVG9OdWxsIiwicGFyYW0iLCJudWxsVG9VbmRlZmluZWQiLCJpc05hbWVkUGFyYW0iLCJjb21wdXRlU2luZ2xlUGFyYW0iLCJhdXRvIiwiY29tcHV0ZU1lc3NhZ2VQYXJhbXMiLCJjb25uZWN0aW9uIiwibWVzc2FnZVBhcmFtcyIsInBhcmFtU3RhcnQiLCJwYXJhbUVuZCIsIm5vdGlmaWNhdGlvbk1lc3NhZ2UiLCJvbk5vdGlmaWNhdGlvbiIsIm9uUHJvZ3Jlc3MiLCJfdHlwZSIsInNlbmRQcm9ncmVzcyIsIm9uVW5oYW5kbGVkUHJvZ3Jlc3MiLCJzZW5kUmVxdWVzdCIsImRpc3Bvc2FibGUiLCJlbmFibGVDYW5jZWxsYXRpb24iLCJyZXNvbHZlV2l0aENsZWFudXAiLCJyIiwicmVqZWN0V2l0aENsZWFudXAiLCJNZXNzYWdlV3JpdGVFcnJvciIsIm9uUmVxdWVzdCIsImhhc1BlbmRpbmdSZXNwb25zZSIsIl92YWx1ZSIsIl90cmFjZXIiLCJzZW5kTm90aWZpY2F0aW9uT3JUcmFjZU9wdGlvbnMiLCJfc2VuZE5vdGlmaWNhdGlvbiIsIl90cmFjZUZvcm1hdCIsIm9uVW5oYW5kbGVkTm90aWZpY2F0aW9uIiwib25EaXNwb3NlIiwiUGVuZGluZ1Jlc3BvbnNlUmVqZWN0ZWQiLCJ2YWx1ZXMiLCJ2ZXJib3NlIiwiX2Rpc3Bvc2FibGUiLCJDYWxsYmFja0xpc3QiLCJidWNrZXQiLCJfY2FsbGJhY2tzIiwiX2NvbnRleHRzIiwicmVtb3ZlIiwiZm91bmRDYWxsYmFja1dpdGhEaWZmZXJlbnRDb250ZXh0IiwiaW52b2tlIiwiY2FsbGJhY2tzIiwiY29udGV4dHMiLCJpc0VtcHR5IiwiX2V2ZW50IiwidGhpc0FyZ3MiLCJkaXNwb3NhYmxlcyIsIl9vcHRpb25zIiwib25GaXJzdExpc3RlbmVyQWRkIiwiX25vb3AiLCJvbkxhc3RMaXN0ZW5lclJlbW92ZSIsInN0cmluZ0FycmF5IiwiZXZlcnkiLCJlbGVtIiwiX2EiLCJGaXJzdCIsIkFzT2xkIiwiTGFzdCIsIkFzTmV3IiwiY2xlYXIiLCJfbWFwIiwiX2hlYWQiLCJfdGFpbCIsIl9zaXplIiwiX3N0YXRlIiwidG91Y2giLCJwcmV2aW91cyIsImFkZEl0ZW1MYXN0IiwiYWRkSXRlbUZpcnN0IiwicmVtb3ZlSXRlbSIsImNhbGxiYWNrZm4iLCJjdXJyZW50IiwiZW50cmllcyIsInRyaW1PbGQiLCJuZXdTaXplIiwiY3VycmVudFNpemUiLCJ0b0pTT04iLCJmcm9tSlNPTiIsIl9saW1pdCIsImNoZWNrVHJpbSIsInJhdGlvIiwiX3JhdGlvIiwicGVlayIsInJvdW5kIiwiQ1IiLCJMRiIsIkNSTEYiLCJhcHBlbmQiLCJjaHVuayIsInRvQXBwZW5kIiwiX2NodW5rcyIsIl90b3RhbExlbmd0aCIsInRyeVJlYWRIZWFkZXJzIiwibG93ZXJDYXNlS2V5cyIsImNodW5rSW5kZXgiLCJjaHVua0J5dGVzUmVhZCIsInJvdyIsImNvbHVtbiIsIl9yZWFkIiwiaGVhZGVycyIsImhlYWRlciIsImluZGV4IiwidHJpbSIsInRyeVJlYWRCb2R5IiwibnVtYmVyT2ZCeXRlcyIsImJ5dGVDb3VudCIsInJlc3VsdE9mZnNldCIsImNodW5rUGFydCIsInNlbWFwaG9yZV8xIiwib25QYXJ0aWFsTWVzc2FnZSIsImFzRXJyb3IiLCJmaXJlQ2xvc2UiLCJwYXJ0aWFsTWVzc2FnZUVtaXR0ZXIiLCJmaXJlUGFydGlhbE1lc3NhZ2UiLCJSZXNvbHZlZE1lc3NhZ2VSZWFkZXJPcHRpb25zIiwiZnJvbU9wdGlvbnMiLCJjb250ZW50RGVjb2RlciIsImNvbnRlbnREZWNvZGVycyIsImNvbnRlbnRUeXBlRGVjb2RlciIsImNvbnRlbnRUeXBlRGVjb2RlcnMiLCJwYXJ0aWFsTWVzc2FnZVRpbWVvdXQiLCJfcGFydGlhbE1lc3NhZ2VUaW1lb3V0IiwibmV4dE1lc3NhZ2VMZW5ndGgiLCJtZXNzYWdlVG9rZW4iLCJwYXJ0aWFsTWVzc2FnZVRpbWVyIiwicmVhZGFibGUiLCJjb250ZW50TGVuZ3RoIiwiZnJvbUVudHJpZXMiLCJib2R5Iiwic2V0UGFydGlhbE1lc3NhZ2VUaW1lciIsImNsZWFyUGFydGlhbE1lc3NhZ2VUaW1lciIsInJlYWRTZW1hcGhvcmUiLCJsb2NrIiwiYnl0ZXMiLCJ3YWl0aW5nVGltZSIsIlNlbWFwaG9yZSIsIkNvbnRlbnRMZW5ndGgiLCJSZXNvbHZlZE1lc3NhZ2VXcml0ZXJPcHRpb25zIiwiY29udGVudFR5cGVFbmNvZGVyIiwiY29udGVudEVuY29kZXIiLCJ3cml0ZVNlbWFwaG9yZSIsInBheWxvYWQiLCJkb1dyaXRlIiwiQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIiwiUGFyc2VFcnJvciIsIkludmFsaWRSZXF1ZXN0IiwianNvbnJwY1Jlc2VydmVkRXJyb3JSYW5nZVN0YXJ0Iiwic2VydmVyRXJyb3JTdGFydCIsIk1lc3NhZ2VSZWFkRXJyb3IiLCJDb25uZWN0aW9uSW5hY3RpdmUiLCJTZXJ2ZXJOb3RJbml0aWFsaXplZCIsIlVua25vd25FcnJvckNvZGUiLCJqc29ucnBjUmVzZXJ2ZWRFcnJvclJhbmdlRW5kIiwic2VydmVyRXJyb3JFbmQiLCJfcGFyYW1ldGVyU3RydWN0dXJlcyIsIl9yYWwiLCJyYWwiLCJ0aHVuayIsIl93YWl0aW5nIiwicnVuTmV4dCIsImFjdGl2ZSIsIl9hY3RpdmUiLCJfY2FwYWNpdHkiLCJkb1J1bk5leHQiLCJjYXBhY2l0eSIsIkNhbmNlbGxhdGlvblN0YXRlIiwiQ29udGludWUiLCJyZXF1ZXN0IiwiYnVmZmVycyIsIiRjYW5jZWxsYXRpb25EYXRhIiwiX2Nvbm4iLCJzdG9yZSIsIlNoYXJlZEFycmF5QnVmZmVyQ2FuY2VsbGF0aW9uVG9rZW4iLCJsb2FkIiwiU2hhcmVkQXJyYXlCdWZmZXJDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSIsImNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbiIsImJyb3dzZXJfMSIsIkxTUEVycm9yQ29kZXMiLCJsc3BSZXNlcnZlZEVycm9yUmFuZ2VTdGFydCIsIlJlcXVlc3RGYWlsZWQiLCJTZXJ2ZXJDYW5jZWxsZWQiLCJDb250ZW50TW9kaWZpZWQiLCJSZXF1ZXN0Q2FuY2VsbGVkIiwibHNwUmVzZXJ2ZWRFcnJvclJhbmdlRW5kIiwidnNjb2RlX2pzb25ycGNfMSIsIlByb3RvY29sTm90aWZpY2F0aW9uVHlwZSIsIlByb3RvY29sTm90aWZpY2F0aW9uVHlwZTAiLCJQcm90b2NvbFJlcXVlc3RUeXBlIiwiUHJvdG9jb2xSZXF1ZXN0VHlwZTAiLCJSZWdpc3RyYXRpb25UeXBlIiwiTWVzc2FnZURpcmVjdGlvbiIsIkNhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdCIsIkNhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdCIsIkNhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCIsIm1lc3NhZ2VEaXJlY3Rpb24iLCJjbGllbnRUb1NlcnZlciIsIkNvbG9yUHJlc2VudGF0aW9uUmVxdWVzdCIsIkRvY3VtZW50Q29sb3JSZXF1ZXN0IiwiQ29uZmlndXJhdGlvblJlcXVlc3QiLCJzZXJ2ZXJUb0NsaWVudCIsIkRlY2xhcmF0aW9uUmVxdWVzdCIsIl9fbm9EeW5hbWljSW1wb3J0IiwiRGlhZ25vc3RpY1JlZnJlc2hSZXF1ZXN0IiwiV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3QiLCJEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0IiwiRG9jdW1lbnREaWFnbm9zdGljUmVwb3J0S2luZCIsIkRpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhIiwicmV0cmlnZ2VyUmVxdWVzdCIsIkZ1bGwiLCJVbmNoYW5nZWQiLCJwYXJ0aWFsUmVzdWx0IiwiV2lsbERlbGV0ZUZpbGVzUmVxdWVzdCIsIkRpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uIiwiRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24iLCJXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0IiwiRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb24iLCJXaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0IiwiRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kIiwiZmlsZSIsImZvbGRlciIsIkZvbGRpbmdSYW5nZVJlZnJlc2hSZXF1ZXN0IiwiRm9sZGluZ1JhbmdlUmVxdWVzdCIsIkltcGxlbWVudGF0aW9uUmVxdWVzdCIsIklubGF5SGludFJlZnJlc2hSZXF1ZXN0IiwiSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QiLCJJbmxheUhpbnRSZXF1ZXN0IiwiSW5saW5lQ29tcGxldGlvblJlcXVlc3QiLCJJbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0IiwiSW5saW5lVmFsdWVSZXF1ZXN0IiwiV29ya3NwYWNlU3ltYm9sUmVxdWVzdCIsIkNvZGVBY3Rpb25SZXNvbHZlUmVxdWVzdCIsIkNvZGVBY3Rpb25SZXF1ZXN0IiwiRG9jdW1lbnRTeW1ib2xSZXF1ZXN0IiwiRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0IiwiUmVmZXJlbmNlc1JlcXVlc3QiLCJEZWZpbml0aW9uUmVxdWVzdCIsIlNpZ25hdHVyZUhlbHBSZXF1ZXN0IiwiU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kIiwiSG92ZXJSZXF1ZXN0IiwiQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0IiwiQ29tcGxldGlvblJlcXVlc3QiLCJDb21wbGV0aW9uVHJpZ2dlcktpbmQiLCJQdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb24iLCJXYXRjaEtpbmQiLCJSZWxhdGl2ZVBhdHRlcm4iLCJGaWxlQ2hhbmdlVHlwZSIsIkRpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbiIsIldpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdCIsIldpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uIiwiVGV4dERvY3VtZW50U2F2ZVJlYXNvbiIsIkRpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24iLCJEaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiIsIkRpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiIsIlRleHREb2N1bWVudENvbnRlbnRDaGFuZ2VFdmVudCIsIkRpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24iLCJUZXh0RG9jdW1lbnRTeW5jS2luZCIsIlRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uIiwiTG9nTWVzc2FnZU5vdGlmaWNhdGlvbiIsIlNob3dNZXNzYWdlUmVxdWVzdCIsIlNob3dNZXNzYWdlTm90aWZpY2F0aW9uIiwiTWVzc2FnZVR5cGUiLCJEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uIiwiRXhpdE5vdGlmaWNhdGlvbiIsIlNodXRkb3duUmVxdWVzdCIsIkluaXRpYWxpemVkTm90aWZpY2F0aW9uIiwiSW5pdGlhbGl6ZUVycm9yQ29kZXMiLCJJbml0aWFsaXplUmVxdWVzdCIsIldvcmtEb25lUHJvZ3Jlc3NPcHRpb25zIiwiVGV4dERvY3VtZW50UmVnaXN0cmF0aW9uT3B0aW9ucyIsIlN0YXRpY1JlZ2lzdHJhdGlvbk9wdGlvbnMiLCJQb3NpdGlvbkVuY29kaW5nS2luZCIsIkZhaWx1cmVIYW5kbGluZ0tpbmQiLCJSZXNvdXJjZU9wZXJhdGlvbktpbmQiLCJVbnJlZ2lzdHJhdGlvblJlcXVlc3QiLCJSZWdpc3RyYXRpb25SZXF1ZXN0IiwiRG9jdW1lbnRTZWxlY3RvciIsIk5vdGVib29rQ2VsbFRleHREb2N1bWVudEZpbHRlciIsIk5vdGVib29rRG9jdW1lbnRGaWx0ZXIiLCJUZXh0RG9jdW1lbnRGaWx0ZXIiLCJNb25pa2VyUmVxdWVzdCIsIk1vbmlrZXJLaW5kIiwiVW5pcXVlbmVzc0xldmVsIiwiTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdCIsIlNob3dEb2N1bWVudFJlcXVlc3QiLCJTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUiLCJTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0IiwiU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QiLCJTZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdCIsIlNlbWFudGljVG9rZW5zUmVxdWVzdCIsIlRva2VuRm9ybWF0IiwiV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbiIsIldvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0IiwiV29ya0RvbmVQcm9ncmVzcyIsIlNlbGVjdGlvblJhbmdlUmVxdWVzdCIsIkRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24iLCJXb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdCIsIlR5cGVEZWZpbml0aW9uUmVxdWVzdCIsIkFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QiLCJFeGVjdXRlQ29tbWFuZFJlcXVlc3QiLCJQcmVwYXJlUmVuYW1lUmVxdWVzdCIsIlJlbmFtZVJlcXVlc3QiLCJQcmVwYXJlU3VwcG9ydERlZmF1bHRCZWhhdmlvciIsIkRvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QiLCJEb2N1bWVudFJhbmdlc0Zvcm1hdHRpbmdSZXF1ZXN0IiwiRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0IiwiRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdCIsIkRvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0IiwiRG9jdW1lbnRMaW5rUmVxdWVzdCIsIkNvZGVMZW5zUmVmcmVzaFJlcXVlc3QiLCJDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0IiwiQ29kZUxlbnNSZXF1ZXN0IiwiV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QiLCJEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24iLCJEaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiIsIkRpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24iLCJOb3RlYm9va0NlbGxBcnJheUNoYW5nZSIsIkRpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uIiwiTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlIiwiTm90ZWJvb2tEb2N1bWVudCIsIk5vdGVib29rQ2VsbCIsIkV4ZWN1dGlvblN1bW1hcnkiLCJOb3RlYm9va0NlbGxLaW5kIiwiVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0IiwiVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdCIsIlR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCIsInZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xIiwicHJvdG9jb2xfaW1wbGVtZW50YXRpb25fMSIsInByb3RvY29sX3R5cGVEZWZpbml0aW9uXzEiLCJwcm90b2NvbF93b3Jrc3BhY2VGb2xkZXJfMSIsInByb3RvY29sX2NvbmZpZ3VyYXRpb25fMSIsInByb3RvY29sX2NvbG9yUHJvdmlkZXJfMSIsInByb3RvY29sX2ZvbGRpbmdSYW5nZV8xIiwicHJvdG9jb2xfZGVjbGFyYXRpb25fMSIsInByb3RvY29sX3NlbGVjdGlvblJhbmdlXzEiLCJwcm90b2NvbF9wcm9ncmVzc18xIiwicHJvdG9jb2xfY2FsbEhpZXJhcmNoeV8xIiwicHJvdG9jb2xfc2VtYW50aWNUb2tlbnNfMSIsInByb3RvY29sX3Nob3dEb2N1bWVudF8xIiwicHJvdG9jb2xfbGlua2VkRWRpdGluZ1JhbmdlXzEiLCJwcm90b2NvbF9maWxlT3BlcmF0aW9uc18xIiwicHJvdG9jb2xfbW9uaWtlcl8xIiwicHJvdG9jb2xfdHlwZUhpZXJhcmNoeV8xIiwicHJvdG9jb2xfaW5saW5lVmFsdWVfMSIsInByb3RvY29sX2lubGF5SGludF8xIiwicHJvdG9jb2xfZGlhZ25vc3RpY18xIiwicHJvdG9jb2xfbm90ZWJvb2tfMSIsInByb3RvY29sX2lubGluZUNvbXBsZXRpb25fMSIsImxhbmd1YWdlIiwic2NoZW1lIiwicGF0dGVybiIsIm9iamVjdExpdGVyYWwiLCJub3RlYm9va1R5cGUiLCJub3RlYm9vayIsIkNyZWF0ZSIsIlJlbmFtZSIsIkRlbGV0ZSIsIkFib3J0IiwiVHJhbnNhY3Rpb25hbCIsIlRleHRPbmx5VHJhbnNhY3Rpb25hbCIsIlVuZG8iLCJVVEY4IiwiVVRGMTYiLCJVVEYzMiIsImhhc0lkIiwiZG9jdW1lbnRTZWxlY3RvciIsIndvcmtEb25lUHJvZ3Jlc3MiLCJoYXNXb3JrRG9uZVByb2dyZXNzIiwidW5rbm93blByb3RvY29sVmVyc2lvbiIsIldhcm5pbmciLCJJbmZvIiwiTG9nIiwiRGVidWciLCJJbmNyZW1lbnRhbCIsImlzSW5jcmVtZW50YWwiLCJ0ZXh0IiwicmFuZ2UiLCJyYW5nZUxlbmd0aCIsImlzRnVsbCIsIk1hbnVhbCIsIkFmdGVyRGVsYXkiLCJGb2N1c091dCIsIkNyZWF0ZWQiLCJDaGFuZ2VkIiwiRGVsZXRlZCIsIlVSSSIsImJhc2VVcmkiLCJXb3Jrc3BhY2VGb2xkZXIiLCJDaGFuZ2UiLCJJbnZva2VkIiwiVHJpZ2dlckNoYXJhY3RlciIsIlRyaWdnZXJGb3JJbmNvbXBsZXRlQ29tcGxldGlvbnMiLCJDb250ZW50Q2hhbmdlIiwiSWRlbnRpZmllciIsInByb2plY3QiLCJncm91cCIsImdsb2JhbCIsIiRpbXBvcnQiLCIkZXhwb3J0IiwibG9jYWwiLCJNYXJrdXAiLCJDb2RlIiwiZXhlY3V0aW9uT3JkZXIiLCJzdWNjZXNzIiwidWludGVnZXIiLCJlcXVhbHMiLCJvbmUiLCJEb2N1bWVudFVyaSIsIm1ldGFkYXRhIiwiZGlmZiIsInR3byIsImV4ZWN1dGlvblN1bW1hcnkiLCJlcXVhbHNNZXRhZGF0YSIsIm9uZUFycmF5Iiwib3RoZXJBcnJheSIsIm9uZUtleXMiLCJvdGhlcktleXMiLCJzb3J0IiwidXJpIiwiY2VsbHMiLCJpbnRlZ2VyIiwidHlwZWRBcnJheSIsInJlZ2lzdHJhdGlvbk1ldGhvZCIsImRlbGV0ZUNvdW50IiwiUmVsYXRpdmUiLCJjaGVjayIsImF2YWlsYWJsZVR5cGVkQXJyYXlzIiwiZ2xvYmFsVGhpcyIsInR5cGVkQXJyYXlzIiwiJHNsaWNlIiwiY2FjaGUiLCJwcm90byIsInN1cGVyUHJvdG8iLCJ0cnlUeXBlZEFycmF5cyIsInRyeUFsbFR5cGVkQXJyYXlzIiwiZm91bmQiLCJnZXR0ZXIiLCJ0cnlTbGljZXMiLCJ0cnlBbGxTbGljZXMiLCJ0YWciLCJwb3NzaWJsZU5hbWVzIiwib3V0IiwiX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18iLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiQW5ub3RhdGVkVGV4dEVkaXQiLCJDaGFuZ2VBbm5vdGF0aW9uIiwiQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIiLCJDb2RlQWN0aW9uIiwiQ29kZUFjdGlvbkNvbnRleHQiLCJDb2RlQWN0aW9uS2luZCIsIkNvZGVBY3Rpb25UcmlnZ2VyS2luZCIsIkNvZGVEZXNjcmlwdGlvbiIsIkNvZGVMZW5zIiwiQ29sb3IiLCJDb2xvckluZm9ybWF0aW9uIiwiQ29sb3JQcmVzZW50YXRpb24iLCJDb21tYW5kIiwiQ29tcGxldGlvbkl0ZW0iLCJDb21wbGV0aW9uSXRlbUtpbmQiLCJDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlscyIsIkNvbXBsZXRpb25JdGVtVGFnIiwiQ29tcGxldGlvbkxpc3QiLCJDcmVhdGVGaWxlIiwiRGVsZXRlRmlsZSIsIkRpYWdub3N0aWMiLCJEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uIiwiRGlhZ25vc3RpY1NldmVyaXR5IiwiRGlhZ25vc3RpY1RhZyIsIkRvY3VtZW50SGlnaGxpZ2h0IiwiRG9jdW1lbnRIaWdobGlnaHRLaW5kIiwiRG9jdW1lbnRMaW5rIiwiRG9jdW1lbnRTeW1ib2wiLCJFT0wiLCJGb2xkaW5nUmFuZ2UiLCJGb2xkaW5nUmFuZ2VLaW5kIiwiRm9ybWF0dGluZ09wdGlvbnMiLCJIb3ZlciIsIklubGF5SGludCIsIklubGF5SGludEtpbmQiLCJJbmxheUhpbnRMYWJlbFBhcnQiLCJJbmxpbmVDb21wbGV0aW9uQ29udGV4dCIsIklubGluZUNvbXBsZXRpb25JdGVtIiwiSW5saW5lQ29tcGxldGlvbkxpc3QiLCJJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQiLCJJbmxpbmVWYWx1ZUNvbnRleHQiLCJJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbiIsIklubGluZVZhbHVlVGV4dCIsIklubGluZVZhbHVlVmFyaWFibGVMb29rdXAiLCJJbnNlcnRSZXBsYWNlRWRpdCIsIkluc2VydFRleHRGb3JtYXQiLCJJbnNlcnRUZXh0TW9kZSIsIkxvY2F0aW9uIiwiTG9jYXRpb25MaW5rIiwiTWFya2VkU3RyaW5nIiwiTWFya3VwQ29udGVudCIsIk1hcmt1cEtpbmQiLCJPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIiLCJQYXJhbWV0ZXJJbmZvcm1hdGlvbiIsIlBvc2l0aW9uIiwiUmFuZ2UiLCJSZW5hbWVGaWxlIiwiU2VsZWN0ZWRDb21wbGV0aW9uSW5mbyIsIlNlbGVjdGlvblJhbmdlIiwiU2VtYW50aWNUb2tlbk1vZGlmaWVycyIsIlNlbWFudGljVG9rZW5UeXBlcyIsIlNlbWFudGljVG9rZW5zIiwiU2lnbmF0dXJlSW5mb3JtYXRpb24iLCJTdHJpbmdWYWx1ZSIsIlN5bWJvbEluZm9ybWF0aW9uIiwiU3ltYm9sS2luZCIsIlN5bWJvbFRhZyIsIlRleHREb2N1bWVudCIsIlRleHREb2N1bWVudEVkaXQiLCJUZXh0RG9jdW1lbnRJZGVudGlmaWVyIiwiVGV4dERvY3VtZW50SXRlbSIsIlRleHRFZGl0IiwiVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciIsIldvcmtzcGFjZUNoYW5nZSIsIldvcmtzcGFjZUVkaXQiLCJXb3Jrc3BhY2VTeW1ib2wiLCJNSU5fVkFMVUUiLCJNQVhfVkFMVUUiLCJjaGFyYWN0ZXIiLCJ0aHJlZSIsImZvdXIiLCJ0YXJnZXRVcmkiLCJ0YXJnZXRSYW5nZSIsInRhcmdldFNlbGVjdGlvblJhbmdlIiwib3JpZ2luU2VsZWN0aW9uUmFuZ2UiLCJhbHBoYSIsIm51bWJlclJhbmdlIiwiY29sb3IiLCJ0ZXh0RWRpdCIsImFkZGl0aW9uYWxUZXh0RWRpdHMiLCJDb21tZW50IiwiSW1wb3J0cyIsIlJlZ2lvbiIsInN0YXJ0TGluZSIsImVuZExpbmUiLCJzdGFydENoYXJhY3RlciIsImVuZENoYXJhY3RlciIsImNvbGxhcHNlZFRleHQiLCJkZWZpbmVkIiwibG9jYXRpb24iLCJJbmZvcm1hdGlvbiIsIkhpbnQiLCJVbm5lY2Vzc2FyeSIsIkRlcHJlY2F0ZWQiLCJocmVmIiwic2V2ZXJpdHkiLCJyZWxhdGVkSW5mb3JtYXRpb24iLCJjb2RlRGVzY3JpcHRpb24iLCJjb21tYW5kIiwibmV3VGV4dCIsImluc2VydCIsImRlbCIsIm5lZWRzQ29uZmlybWF0aW9uIiwiZGVzY3JpcHRpb24iLCJhbm5vdGF0aW9uIiwiYW5ub3RhdGlvbklkIiwidGV4dERvY3VtZW50IiwiZWRpdHMiLCJvdmVyd3JpdGUiLCJpZ25vcmVJZkV4aXN0cyIsIm9sZFVyaSIsIm5ld1VyaSIsInJlY3Vyc2l2ZSIsImlnbm9yZUlmTm90RXhpc3RzIiwiY2hhbmdlcyIsImRvY3VtZW50Q2hhbmdlcyIsImNoYW5nZSIsIlRleHRFZGl0Q2hhbmdlSW1wbCIsImVkaXQiLCJhc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyIsImNoYW5nZUFubm90YXRpb25zIiwibWFuYWdlIiwiQ2hhbmdlQW5ub3RhdGlvbnMiLCJfYW5ub3RhdGlvbnMiLCJpZE9yQW5ub3RhdGlvbiIsIm5leHRJZCIsIl9jb3VudGVyIiwiYW5ub3RhdGlvbnMiLCJpbml0RG9jdW1lbnRDaGFuZ2VzIiwiX2NoYW5nZUFubm90YXRpb25zIiwiX3dvcmtzcGFjZUVkaXQiLCJnZXRUZXh0RWRpdENoYW5nZSIsIl90ZXh0RWRpdENoYW5nZXMiLCJ0ZXh0RG9jdW1lbnRFZGl0IiwiaW5pdENoYW5nZXMiLCJjcmVhdGVGaWxlIiwib3B0aW9uc09yQW5ub3RhdGlvbiIsIm9wZXJhdGlvbiIsInJlbmFtZUZpbGUiLCJkZWxldGVGaWxlIiwid29ya3NwYWNlRWRpdCIsInRleHRFZGl0Q2hhbmdlIiwibGFuZ3VhZ2VJZCIsIlBsYWluVGV4dCIsIk1hcmtkb3duIiwiTWV0aG9kIiwiRmllbGQiLCJWYXJpYWJsZSIsIkludGVyZmFjZSIsIk1vZHVsZSIsIlByb3BlcnR5IiwiVW5pdCIsIlZhbHVlIiwiRW51bSIsIktleXdvcmQiLCJTbmlwcGV0IiwiRmlsZSIsIlJlZmVyZW5jZSIsIkZvbGRlciIsIkVudW1NZW1iZXIiLCJDb25zdGFudCIsIlN0cnVjdCIsIk9wZXJhdG9yIiwiVHlwZVBhcmFtZXRlciIsImFzSXMiLCJhZGp1c3RJbmRlbnRhdGlvbiIsImRldGFpbCIsIml0ZW1zIiwiaXNJbmNvbXBsZXRlIiwiZnJvbVBsYWluVGV4dCIsInBsYWluVGV4dCIsImNvbnRlbnRzIiwiZG9jdW1lbnRhdGlvbiIsInBhcmFtZXRlcnMiLCJSZWFkIiwiV3JpdGUiLCJOYW1lc3BhY2UiLCJQYWNrYWdlIiwiS2V5IiwiTnVsbCIsImNvbnRhaW5lck5hbWUiLCJzZWxlY3Rpb25SYW5nZSIsImNoaWxkcmVuIiwidGFncyIsIlF1aWNrRml4IiwiUmVmYWN0b3IiLCJSZWZhY3RvckV4dHJhY3QiLCJSZWZhY3RvcklubGluZSIsIlJlZmFjdG9yUmV3cml0ZSIsIlNvdXJjZSIsIlNvdXJjZU9yZ2FuaXplSW1wb3J0cyIsIlNvdXJjZUZpeEFsbCIsIkF1dG9tYXRpYyIsImRpYWdub3N0aWNzIiwib25seSIsInRyaWdnZXJLaW5kIiwia2luZE9yQ29tbWFuZE9yRWRpdCIsImNoZWNrS2luZCIsImlzUHJlZmVycmVkIiwidGFiU2l6ZSIsImluc2VydFNwYWNlcyIsInBhcmVudCIsInJlc3VsdElkIiwidmFyaWFibGVOYW1lIiwiY2FzZVNlbnNpdGl2ZUxvb2t1cCIsImZyYW1lSWQiLCJzdG9wcGVkTG9jYXRpb24iLCJUeXBlIiwiUGFyYW1ldGVyIiwidG9vbHRpcCIsInRleHRFZGl0cyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiY3JlYXRlU25pcHBldCIsImluc2VydFRleHQiLCJmaWx0ZXJUZXh0Iiwic2VsZWN0ZWRDb21wbGV0aW9uSW5mbyIsImNvbnRlbnQiLCJGdWxsVGV4dERvY3VtZW50IiwibGluZUNvdW50IiwiZ2V0VGV4dCIsInBvc2l0aW9uQXQiLCJvZmZzZXRBdCIsImFwcGx5RWRpdHMiLCJzb3J0ZWRFZGl0cyIsIm1lcmdlU29ydCIsImxhc3RNb2RpZmllZE9mZnNldCIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0IiwibGVmdCIsInJpZ2h0IiwibGVmdElkeCIsInJpZ2h0SWR4IiwiX3VyaSIsIl9sYW5ndWFnZUlkIiwiX3ZlcnNpb24iLCJfY29udGVudCIsInVwZGF0ZSIsIl9saW5lT2Zmc2V0cyIsImdldExpbmVPZmZzZXRzIiwibGluZU9mZnNldHMiLCJpc0xpbmVTdGFydCIsImNoIiwibG93IiwiaGlnaCIsIm1pZCIsImxpbmVPZmZzZXQiLCJuZXh0TGluZU9mZnNldCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiZGVmaW5pdGlvbiIsImluc3RhbGxlZENodW5rcyIsIkFjZVppZ0xpbnRlciIsIndhc20iLCJpbml0IiwiVVJMIiwiUmVxdWVzdCIsImZldGNoIiwiaW1wb3J0cyIsImdldF9pbXBvcnRzIiwiZmluYWxpemVfaW5pdCIsIlJlc3BvbnNlIiwiV2ViQXNzZW1ibHkiLCJpbnN0YW50aWF0ZVN0cmVhbWluZyIsImluc3RhbnRpYXRlIiwiSW5zdGFuY2UiLCJXQVNJX0VTVUNDRVNTIiwiV0FTSV9FQkFERiIsIndhc2lfc25hcHNob3RfcHJldmlldzEiLCJmZF93cml0ZSIsImZkIiwiaW92c19wdHIiLCJpb3ZzX2xlbiIsIm53cml0dGVuX3B0ciIsIm1lbW9yeSIsImJ1ZmZlcjgiLCJpb3ZlY3MiLCJyZWFkX2J5dGVzX2FycmF5IiwibndyaXR0ZW4iLCJmZHMiLCJzZXRVaW50MzIiLCJmZF9yZWFkIiwibnJlYWRfcHRyIiwibnJlYWQiLCJwcm9jX2V4aXQiLCJydmFsIiwicmV0dXJuX3ZhbHVlIiwicmVhZF9ieXRlcyIsInZpZXciLCJwdHIiLCJidWYiLCJnZXRVaW50MzIiLCJTdGRJTyIsInZpZXc4IiwiaW92cyIsInN1YmFycmF5IiwidG90YWxfbGVuIiwiYWNjIiwibmV3X2RhdGEiLCJzdGRvdXQiLCJfc3RhcnQiLCJtYWluIiwibWVyZ2VPYmplY3RzIiwib2JqMSIsIm9iajIiLCJleGNsdWRlVW5kZWZpbmVkIiwiZXhjbHVkZVVuZGVmaW5lZFZhbHVlcyIsIm1lcmdlZE9iamVjdHMiLCJmaWx0ZXJlZEVudHJpZXMiLCJub3RFbXB0eSIsIm1lcmdlUmFuZ2VzIiwicmFuZ2VzIiwiY29tcGFyZVBvaW50cyIsImNtcCIsInAxIiwicDIiLCJjaGVja1ZhbHVlQWdhaW5zdFJlZ2V4cEFycmF5IiwicmVnZXhwQXJyYXkiLCJjb252ZXJ0VG9VcmkiLCJmaWxlUGF0aCIsImdldFdlbGxmb3JtZWRSYW5nZSIsImFkZGVkTGluZU9mZnNldHMiLCJjb21wdXRlTGluZU9mZnNldHMiLCJlbnN1cmVCZWZvcmVFT0wiLCJpc0VPTCIsImdldFdlbGxmb3JtZWRFZGl0Iiwic3BhbnMiLCJpc0F0TGluZVN0YXJ0IiwidGV4dE9mZnNldCIsImNoYXIiLCJfZGVmaW5lX3Byb3BlcnR5IiwiQmFzZVNlcnZpY2UiLCJhZGREb2N1bWVudCIsImRvY3VtZW50cyIsImdldERvY3VtZW50IiwicmVtb3ZlRG9jdW1lbnQiLCJyZW5hbWVEb2N1bWVudCIsIm5ld0RvY3VtZW50VXJpIiwiZ2V0RG9jdW1lbnRWYWx1ZSIsIl90aGlzX2dldERvY3VtZW50Iiwic2V0VmFsdWUiLCJpZGVudGlmaWVyIiwic2V0R2xvYmFsT3B0aW9ucyIsImdsb2JhbE9wdGlvbnMiLCJzZXRXb3Jrc3BhY2UiLCJ3b3Jrc3BhY2VVcmkiLCJzZXRPcHRpb25zIiwiZG9jdW1lbnRVcmkiLCJtZXJnZSIsImdldE9wdGlvbiIsIm9wdGlvbk5hbWUiLCJhcHBseURlbHRhcyIsImRlbHRhcyIsImRvQ29tcGxldGUiLCJkb0hvdmVyIiwiZG9SZXNvbHZlIiwiZG9WYWxpZGF0aW9uIiwicHJvdmlkZVNpZ25hdHVyZUhlbHAiLCJmaW5kRG9jdW1lbnRIaWdobGlnaHRzIiwib3B0aW9uc1RvRmlsdGVyRGlhZ25vc3RpY3MiLCJfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb0lnbm9yZSIsIl90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvVHJlYXRBc1dhcm5pbmciLCJfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb1RyZWF0QXNJbmZvIiwiX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9JZ25vcmUiLCJfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb1RyZWF0QXNXYXJuaW5nIiwiX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9UcmVhdEFzSW5mbyIsImVycm9yQ29kZXNUb0lnbm9yZSIsImVycm9yQ29kZXNUb1RyZWF0QXNXYXJuaW5nIiwiZXJyb3JDb2Rlc1RvVHJlYXRBc0luZm8iLCJlcnJvck1lc3NhZ2VzVG9JZ25vcmUiLCJlcnJvck1lc3NhZ2VzVG9UcmVhdEFzV2FybmluZyIsImVycm9yTWVzc2FnZXNUb1RyZWF0QXNJbmZvIiwiZ2V0U2VtYW50aWNUb2tlbnMiLCJjbG9zZUNvbm5lY3Rpb24iLCJnZXRDb2RlQWN0aW9ucyIsImV4ZWN1dGVDb21tYW5kIiwic2VuZEFwcGxpZWRSZXN1bHQiLCJjYWxsYmFja0lkIiwibW9kZSIsImRpYWdub3N0aWMiLCJkeW5hbWljUmVnaXN0cmF0aW9uIiwicmVsYXRlZERvY3VtZW50U3VwcG9ydCIsInB1Ymxpc2hEaWFnbm9zdGljcyIsInZlcnNpb25TdXBwb3J0IiwidGFnU3VwcG9ydCIsInZhbHVlU2V0IiwiaG92ZXIiLCJjb250ZW50Rm9ybWF0Iiwic3luY2hyb25pemF0aW9uIiwid2lsbFNhdmUiLCJkaWRTYXZlIiwid2lsbFNhdmVXYWl0VW50aWwiLCJmb3JtYXR0aW5nIiwiY29tcGxldGlvbiIsImNvbXBsZXRpb25JdGVtIiwic25pcHBldFN1cHBvcnQiLCJjb21taXRDaGFyYWN0ZXJzU3VwcG9ydCIsImRvY3VtZW50YXRpb25Gb3JtYXQiLCJkZXByZWNhdGVkU3VwcG9ydCIsInByZXNlbGVjdFN1cHBvcnQiLCJjb250ZXh0U3VwcG9ydCIsInNpZ25hdHVyZUhlbHAiLCJzaWduYXR1cmVJbmZvcm1hdGlvbiIsImFjdGl2ZVBhcmFtZXRlclN1cHBvcnQiLCJkb2N1bWVudEhpZ2hsaWdodCIsInNlbWFudGljVG9rZW5zIiwibXVsdGlsaW5lVG9rZW5TdXBwb3J0Iiwib3ZlcmxhcHBpbmdUb2tlblN1cHBvcnQiLCJ0b2tlblR5cGVzIiwidG9rZW5Nb2RpZmllcnMiLCJmb3JtYXRzIiwicmVxdWVzdHMiLCJmdWxsIiwiZGVsdGEiLCJhdWdtZW50c1N5bnRheFRva2VucyIsImNvZGVBY3Rpb24iLCJ3b3Jrc3BhY2UiLCJkaWRDaGFuZ2VDb25maWd1cmF0aW9uIiwiYXBwbHlFZGl0IiwiZmFpbHVyZUhhbmRsaW5nIiwibm9ybWFsaXplc0xpbmVFbmRpbmdzIiwidG9UZXh0RWRpdHMiLCJhY2VfemlnX2xpbnRlcl9jb25zb2xlIiwiYWNlX3ppZ19saW50ZXJfZGVmaW5lX3Byb3BlcnR5IiwiaW5pdGVkIiwiZnVsbERvY3VtZW50IiwiZG9jdW1lbnRGb3JtYXR0aW5nUHJvdmlkZXIiLCJyYW5nZUZvcm1hdHRpbmdQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=