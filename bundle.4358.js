(self["webpackChunkace_linters_root"] = self["webpackChunkace_linters_root"] || []).push([[4358],{

/***/ 74358:
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
    if (true) module.exports = factory();
    else { var i, a; }
})(this, ()=>{
    return /******/ (()=>{
        /******/ var __webpack_modules__ = {
            /***/ 6093: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_511__)=>{
                "use strict";
                /* provided dependency */ var process = __nested_webpack_require_511__(9907);
                /* provided dependency */ var console = __nested_webpack_require_511__(4364);
                // Currently in sync with Node.js lib/assert.js
                // https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
                // Originally from narwhal.js (http://narwhaljs.org)
                // Copyright (c) 2009 Thomas Robinson <280north.com>
                //
                // Permission is hereby granted, free of charge, to any person obtaining a copy
                // of this software and associated documentation files (the 'Software'), to
                // deal in the Software without restriction, including without limitation the
                // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
                // sell copies of the Software, and to permit persons to whom the Software is
                // furnished to do so, subject to the following conditions:
                //
                // The above copyright notice and this permission notice shall be included in
                // all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
                // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
                // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }
                var _require = __nested_webpack_require_511__(1342), _require$codes = _require.codes, ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE, ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
                var AssertionError = __nested_webpack_require_511__(9801);
                var _require2 = __nested_webpack_require_511__(6827), inspect = _require2.inspect;
                var _require$types = __nested_webpack_require_511__(6827).types, isPromise = _require$types.isPromise, isRegExp = _require$types.isRegExp;
                var objectAssign = Object.assign ? Object.assign : __nested_webpack_require_511__(3046).assign;
                var objectIs = Object.is ? Object.is : __nested_webpack_require_511__(5968);
                var errorCache = new Map();
                var isDeepEqual;
                var isDeepStrictEqual;
                var parseExpressionAt;
                var findNodeAround;
                var decoder;
                function lazyLoadComparison() {
                    var comparison = __nested_webpack_require_511__(5656);
                    isDeepEqual = comparison.isDeepEqual;
                    isDeepStrictEqual = comparison.isDeepStrictEqual;
                } // Escape control characters but not \n and \t to keep the line breaks and
                // indentation intact.
                // eslint-disable-next-line no-control-regex
                var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
                var meta = /* unused pure expression or super */ null && 0;
                var escapeFn = function escapeFn(str) {
                    return meta[str.charCodeAt(0)];
                };
                var warned = false; // The assert module provides functions that throw
                // AssertionError's when particular conditions are not met. The
                // assert module must conform to the following interface.
                var assert = module1.exports = ok;
                var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
                // when a corresponding condition is not met, with a message that
                // may be undefined if not provided. All assertion methods provide
                // both the actual and expected values to the assertion error for
                // display purposes.
                function innerFail(obj) {
                    if (obj.message instanceof Error) throw obj.message;
                    throw new AssertionError(obj);
                }
                function fail(actual, expected, message, operator, stackStartFn) {
                    var argsLen = arguments.length;
                    var internalMessage;
                    if (argsLen === 0) {
                        internalMessage = 'Failed';
                    } else if (argsLen === 1) {
                        message = actual;
                        actual = undefined;
                    } else {
                        if (warned === false) {
                            warned = true;
                            var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
                            warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
                        }
                        if (argsLen === 2) operator = '!=';
                    }
                    if (message instanceof Error) throw message;
                    var errArgs = {
                        actual: actual,
                        expected: expected,
                        operator: operator === undefined ? 'fail' : operator,
                        stackStartFn: stackStartFn || fail
                    };
                    if (message !== undefined) {
                        errArgs.message = message;
                    }
                    var err = new AssertionError(errArgs);
                    if (internalMessage) {
                        err.message = internalMessage;
                        err.generatedMessage = true;
                    }
                    throw err;
                }
                assert.fail = fail; // The AssertionError is defined in internal/error.
                assert.AssertionError = AssertionError;
                function innerOk(fn, argLen, value, message) {
                    if (!value) {
                        var generatedMessage = false;
                        if (argLen === 0) {
                            generatedMessage = true;
                            message = 'No value argument passed to `assert.ok()`';
                        } else if (message instanceof Error) {
                            throw message;
                        }
                        var err = new AssertionError({
                            actual: value,
                            expected: true,
                            message: message,
                            operator: '==',
                            stackStartFn: fn
                        });
                        err.generatedMessage = generatedMessage;
                        throw err;
                    }
                } // Pure assertion tests whether a value is truthy, as determined
                // by !!value.
                function ok() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    innerOk.apply(void 0, [
                        ok,
                        args.length
                    ].concat(args));
                }
                assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.
                /* eslint-disable no-restricted-properties */ assert.equal = function equal(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    } // eslint-disable-next-line eqeqeq
                    if (actual != expected) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: '==',
                            stackStartFn: equal
                        });
                    }
                }; // The non-equality assertion tests for whether two objects are not
                // equal with !=.
                assert.notEqual = function notEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    } // eslint-disable-next-line eqeqeq
                    if (actual == expected) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: '!=',
                            stackStartFn: notEqual
                        });
                    }
                }; // The equivalence assertion tests a deep equality relation.
                assert.deepEqual = function deepEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    if (!isDeepEqual(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'deepEqual',
                            stackStartFn: deepEqual
                        });
                    }
                }; // The non-equivalence assertion tests for any deep inequality.
                assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    if (isDeepEqual(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'notDeepEqual',
                            stackStartFn: notDeepEqual
                        });
                    }
                };
                /* eslint-enable */ assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    if (!isDeepStrictEqual(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'deepStrictEqual',
                            stackStartFn: deepStrictEqual
                        });
                    }
                };
                assert.notDeepStrictEqual = notDeepStrictEqual;
                function notDeepStrictEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    if (isDeepStrictEqual(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'notDeepStrictEqual',
                            stackStartFn: notDeepStrictEqual
                        });
                    }
                }
                assert.strictEqual = function strictEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (!objectIs(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'strictEqual',
                            stackStartFn: strictEqual
                        });
                    }
                };
                assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (objectIs(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'notStrictEqual',
                            stackStartFn: notStrictEqual
                        });
                    }
                };
                var Comparison = function Comparison(obj, keys, actual) {
                    var _this = this;
                    _classCallCheck(this, Comparison);
                    keys.forEach(function(key) {
                        if (key in obj) {
                            if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
                                _this[key] = actual[key];
                            } else {
                                _this[key] = obj[key];
                            }
                        }
                    });
                };
                function compareExceptionKey(actual, expected, key, message, keys, fn) {
                    if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
                        if (!message) {
                            // Create placeholder objects to create a nice output.
                            var a = new Comparison(actual, keys);
                            var b = new Comparison(expected, keys, actual);
                            var err = new AssertionError({
                                actual: a,
                                expected: b,
                                operator: 'deepStrictEqual',
                                stackStartFn: fn
                            });
                            err.actual = actual;
                            err.expected = expected;
                            err.operator = fn.name;
                            throw err;
                        }
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: fn.name,
                            stackStartFn: fn
                        });
                    }
                }
                function expectedException(actual, expected, msg, fn) {
                    if (typeof expected !== 'function') {
                        if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.
                        if (arguments.length === 2) {
                            throw new ERR_INVALID_ARG_TYPE('expected', [
                                'Function',
                                'RegExp'
                            ], expected);
                        } // Handle primitives properly.
                        if (_typeof(actual) !== 'object' || actual === null) {
                            var err = new AssertionError({
                                actual: actual,
                                expected: expected,
                                message: msg,
                                operator: 'deepStrictEqual',
                                stackStartFn: fn
                            });
                            err.operator = fn.name;
                            throw err;
                        }
                        var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
                        // as well.
                        if (expected instanceof Error) {
                            keys.push('name', 'message');
                        } else if (keys.length === 0) {
                            throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
                        }
                        if (isDeepEqual === undefined) lazyLoadComparison();
                        keys.forEach(function(key) {
                            if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
                                return;
                            }
                            compareExceptionKey(actual, expected, key, msg, keys, fn);
                        });
                        return true;
                    } // Guard instanceof against arrow functions as they don't have a prototype.
                    if (expected.prototype !== undefined && actual instanceof expected) {
                        return true;
                    }
                    if (Error.isPrototypeOf(expected)) {
                        return false;
                    }
                    return expected.call({}, actual) === true;
                }
                function getActual(fn) {
                    if (typeof fn !== 'function') {
                        throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
                    }
                    try {
                        fn();
                    } catch (e) {
                        return e;
                    }
                    return NO_EXCEPTION_SENTINEL;
                }
                function checkIsPromise(obj) {
                    // Accept native ES6 promises and promises that are implemented in a similar
                    // way. Do not accept thenables that use a function as `obj` and that have no
                    // `catch` handler.
                    // TODO: thenables are checked up until they have the correct methods,
                    // but according to documentation, the `then` method should receive
                    // the `fulfill` and `reject` arguments as well or it may be never resolved.
                    return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
                }
                function waitForActual(promiseFn) {
                    return Promise.resolve().then(function() {
                        var resultPromise;
                        if (typeof promiseFn === 'function') {
                            // Return a rejected promise if `promiseFn` throws synchronously.
                            resultPromise = promiseFn(); // Fail in case no promise is returned.
                            if (!checkIsPromise(resultPromise)) {
                                throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
                            }
                        } else if (checkIsPromise(promiseFn)) {
                            resultPromise = promiseFn;
                        } else {
                            throw new ERR_INVALID_ARG_TYPE('promiseFn', [
                                'Function',
                                'Promise'
                            ], promiseFn);
                        }
                        return Promise.resolve().then(function() {
                            return resultPromise;
                        }).then(function() {
                            return NO_EXCEPTION_SENTINEL;
                        }).catch(function(e) {
                            return e;
                        });
                    });
                }
                function expectsError(stackStartFn, actual, error, message) {
                    if (typeof error === 'string') {
                        if (arguments.length === 4) {
                            throw new ERR_INVALID_ARG_TYPE('error', [
                                'Object',
                                'Error',
                                'Function',
                                'RegExp'
                            ], error);
                        }
                        if (_typeof(actual) === 'object' && actual !== null) {
                            if (actual.message === error) {
                                throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
                            }
                        } else if (actual === error) {
                            throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
                        }
                        message = error;
                        error = undefined;
                    } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
                        throw new ERR_INVALID_ARG_TYPE('error', [
                            'Object',
                            'Error',
                            'Function',
                            'RegExp'
                        ], error);
                    }
                    if (actual === NO_EXCEPTION_SENTINEL) {
                        var details = '';
                        if (error && error.name) {
                            details += " (".concat(error.name, ")");
                        }
                        details += message ? ": ".concat(message) : '.';
                        var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
                        innerFail({
                            actual: undefined,
                            expected: error,
                            operator: stackStartFn.name,
                            message: "Missing expected ".concat(fnType).concat(details),
                            stackStartFn: stackStartFn
                        });
                    }
                    if (error && !expectedException(actual, error, message, stackStartFn)) {
                        throw actual;
                    }
                }
                function expectsNoError(stackStartFn, actual, error, message) {
                    if (actual === NO_EXCEPTION_SENTINEL) return;
                    if (typeof error === 'string') {
                        message = error;
                        error = undefined;
                    }
                    if (!error || expectedException(actual, error)) {
                        var details = message ? ": ".concat(message) : '.';
                        var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
                        innerFail({
                            actual: actual,
                            expected: error,
                            operator: stackStartFn.name,
                            message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
                            stackStartFn: stackStartFn
                        });
                    }
                    throw actual;
                }
                assert.throws = function throws(promiseFn) {
                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){
                        args[_key2 - 1] = arguments[_key2];
                    }
                    expectsError.apply(void 0, [
                        throws,
                        getActual(promiseFn)
                    ].concat(args));
                };
                assert.rejects = function rejects(promiseFn) {
                    for(var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++){
                        args[_key3 - 1] = arguments[_key3];
                    }
                    return waitForActual(promiseFn).then(function(result) {
                        return expectsError.apply(void 0, [
                            rejects,
                            result
                        ].concat(args));
                    });
                };
                assert.doesNotThrow = function doesNotThrow(fn) {
                    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++){
                        args[_key4 - 1] = arguments[_key4];
                    }
                    expectsNoError.apply(void 0, [
                        doesNotThrow,
                        getActual(fn)
                    ].concat(args));
                };
                assert.doesNotReject = function doesNotReject(fn) {
                    for(var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++){
                        args[_key5 - 1] = arguments[_key5];
                    }
                    return waitForActual(fn).then(function(result) {
                        return expectsNoError.apply(void 0, [
                            doesNotReject,
                            result
                        ].concat(args));
                    });
                };
                assert.ifError = function ifError(err) {
                    if (err !== null && err !== undefined) {
                        var message = 'ifError got unwanted exception: ';
                        if (_typeof(err) === 'object' && typeof err.message === 'string') {
                            if (err.message.length === 0 && err.constructor) {
                                message += err.constructor.name;
                            } else {
                                message += err.message;
                            }
                        } else {
                            message += inspect(err);
                        }
                        var newErr = new AssertionError({
                            actual: err,
                            expected: null,
                            operator: 'ifError',
                            message: message,
                            stackStartFn: ifError
                        }); // Make sure we actually have a stack trace!
                        var origStack = err.stack;
                        if (typeof origStack === 'string') {
                            // This will remove any duplicated frames from the error frames taken
                            // from within `ifError` and add the original error frames to the newly
                            // created ones.
                            var tmp2 = origStack.split('\n');
                            tmp2.shift(); // Filter all frames existing in err.stack.
                            var tmp1 = newErr.stack.split('\n');
                            for(var i = 0; i < tmp2.length; i++){
                                // Find the first occurrence of the frame.
                                var pos = tmp1.indexOf(tmp2[i]);
                                if (pos !== -1) {
                                    // Only keep new frames.
                                    tmp1 = tmp1.slice(0, pos);
                                    break;
                                }
                            }
                            newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
                        }
                        throw newErr;
                    }
                }; // Expose a strict only variant of assert
                function strict() {
                    for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++){
                        args[_key6] = arguments[_key6];
                    }
                    innerOk.apply(void 0, [
                        strict,
                        args.length
                    ].concat(args));
                }
                assert.strict = objectAssign(strict, assert, {
                    equal: assert.strictEqual,
                    deepEqual: assert.deepStrictEqual,
                    notEqual: assert.notStrictEqual,
                    notDeepEqual: assert.notDeepStrictEqual
                });
                assert.strict.strict = assert.strict;
            /***/ },
            /***/ 9801: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_31729__)=>{
                "use strict";
                /* provided dependency */ var process = __nested_webpack_require_31729__(9907);
                // Currently in sync with Node.js lib/internal/assert/assertion_error.js
                // https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c
                function _objectSpread(target) {
                    for(var i = 1; i < arguments.length; i++){
                        var source = arguments[i] != null ? arguments[i] : {};
                        var ownKeys = Object.keys(source);
                        if (typeof Object.getOwnPropertySymbols === 'function') {
                            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                            }));
                        }
                        ownKeys.forEach(function(key) {
                            _defineProperty(target, key, source[key]);
                        });
                    }
                    return target;
                }
                function _defineProperty(obj, key, value) {
                    if (key in obj) {
                        Object.defineProperty(obj, key, {
                            value: value,
                            enumerable: true,
                            configurable: true,
                            writable: true
                        });
                    } else {
                        obj[key] = value;
                    }
                    return obj;
                }
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }
                function _defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) _defineProperties(Constructor, staticProps);
                    return Constructor;
                }
                function _possibleConstructorReturn(self, call) {
                    if (call && (_typeof(call) === "object" || typeof call === "function")) {
                        return call;
                    }
                    return _assertThisInitialized(self);
                }
                function _assertThisInitialized(self) {
                    if (self === void 0) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self;
                }
                function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                        throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (superClass) _setPrototypeOf(subClass, superClass);
                }
                function _wrapNativeSuper(Class) {
                    var _cache = typeof Map === "function" ? new Map() : undefined;
                    _wrapNativeSuper = function _wrapNativeSuper(Class) {
                        if (Class === null || !_isNativeFunction(Class)) return Class;
                        if (typeof Class !== "function") {
                            throw new TypeError("Super expression must either be null or a function");
                        }
                        if (typeof _cache !== "undefined") {
                            if (_cache.has(Class)) return _cache.get(Class);
                            _cache.set(Class, Wrapper);
                        }
                        function Wrapper() {
                            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
                        }
                        Wrapper.prototype = Object.create(Class.prototype, {
                            constructor: {
                                value: Wrapper,
                                enumerable: false,
                                writable: true,
                                configurable: true
                            }
                        });
                        return _setPrototypeOf(Wrapper, Class);
                    };
                    return _wrapNativeSuper(Class);
                }
                function isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
                function _construct(Parent, args, Class) {
                    if (isNativeReflectConstruct()) {
                        _construct = Reflect.construct;
                    } else {
                        _construct = function _construct(Parent, args, Class) {
                            var a = [
                                null
                            ];
                            a.push.apply(a, args);
                            var Constructor = Function.bind.apply(Parent, a);
                            var instance = new Constructor();
                            if (Class) _setPrototypeOf(instance, Class.prototype);
                            return instance;
                        };
                    }
                    return _construct.apply(null, arguments);
                }
                function _isNativeFunction(fn) {
                    return Function.toString.call(fn).indexOf("[native code]") !== -1;
                }
                function _setPrototypeOf(o, p) {
                    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                        o.__proto__ = p;
                        return o;
                    };
                    return _setPrototypeOf(o, p);
                }
                function _getPrototypeOf(o) {
                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                        return o.__proto__ || Object.getPrototypeOf(o);
                    };
                    return _getPrototypeOf(o);
                }
                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }
                var _require = __nested_webpack_require_31729__(6827), inspect = _require.inspect;
                var _require2 = __nested_webpack_require_31729__(1342), ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
                function endsWith(str, search, this_len) {
                    if (this_len === undefined || this_len > str.length) {
                        this_len = str.length;
                    }
                    return str.substring(this_len - search.length, this_len) === search;
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
                function repeat(str, count) {
                    count = Math.floor(count);
                    if (str.length == 0 || count == 0) return '';
                    var maxCount = str.length * count;
                    count = Math.floor(Math.log(count) / Math.log(2));
                    while(count){
                        str += str;
                        count--;
                    }
                    str += str.substring(0, maxCount - str.length);
                    return str;
                }
                var blue = '';
                var green = '';
                var red = '';
                var white = '';
                var kReadableOperator = {
                    deepStrictEqual: 'Expected values to be strictly deep-equal:',
                    strictEqual: 'Expected values to be strictly equal:',
                    strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
                    deepEqual: 'Expected values to be loosely deep-equal:',
                    equal: 'Expected values to be loosely equal:',
                    notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
                    notStrictEqual: 'Expected "actual" to be strictly unequal to:',
                    notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
                    notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
                    notEqual: 'Expected "actual" to be loosely unequal to:',
                    notIdentical: 'Values identical but not reference-equal:'
                }; // Comparing short primitives should just show === / !== instead of using the
                // diff.
                var kMaxShortLength = 10;
                function copyError(source) {
                    var keys = Object.keys(source);
                    var target = Object.create(Object.getPrototypeOf(source));
                    keys.forEach(function(key) {
                        target[key] = source[key];
                    });
                    Object.defineProperty(target, 'message', {
                        value: source.message
                    });
                    return target;
                }
                function inspectValue(val) {
                    // The util.inspect default values could be changed. This makes sure the
                    // error messages contain the necessary information nevertheless.
                    return inspect(val, {
                        compact: false,
                        customInspect: false,
                        depth: 1000,
                        maxArrayLength: Infinity,
                        // Assert compares only enumerable properties (with a few exceptions).
                        showHidden: false,
                        // Having a long line as error is better than wrapping the line for
                        // comparison for now.
                        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
                        // have meta information about the inspected properties (i.e., know where
                        // in what line the property starts and ends).
                        breakLength: Infinity,
                        // Assert does not detect proxies currently.
                        showProxy: false,
                        sorted: true,
                        // Inspect getters as we also check them when comparing entries.
                        getters: true
                    });
                }
                function createErrDiff(actual, expected, operator) {
                    var other = '';
                    var res = '';
                    var lastPos = 0;
                    var end = '';
                    var skipped = false;
                    var actualInspected = inspectValue(actual);
                    var actualLines = actualInspected.split('\n');
                    var expectedLines = inspectValue(expected).split('\n');
                    var i = 0;
                    var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
                    // for the `strictEqual` operator.
                    if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
                        operator = 'strictEqualObject';
                    } // If "actual" and "expected" fit on a single line and they are not strictly
                    // equal, check further special handling.
                    if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
                        var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
                        // kMaxShortLength and if neither is an object and at least one of them is
                        // not `zero`, use the strict equal comparison to visualize the output.
                        if (inputLength <= kMaxShortLength) {
                            if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
                                // -0 === +0
                                return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
                            }
                        } else if (operator !== 'strictEqualObject') {
                            // If the stderr is a tty and the input length is lower than the current
                            // columns per line, add a mismatch indicator below the output. If it is
                            // not a tty, use a default value of 80 characters.
                            var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
                            if (inputLength < maxLength) {
                                while(actualLines[0][i] === expectedLines[0][i]){
                                    i++;
                                } // Ignore the first characters.
                                if (i > 2) {
                                    // Add position indicator for the first mismatch in case it is a
                                    // single line and the input length is less than the column length.
                                    indicator = "\n  ".concat(repeat(' ', i), "^");
                                    i = 0;
                                }
                            }
                        }
                    } // Remove all ending lines that match (this optimizes the output for
                    // readability by reducing the number of total changed lines).
                    var a = actualLines[actualLines.length - 1];
                    var b = expectedLines[expectedLines.length - 1];
                    while(a === b){
                        if (i++ < 2) {
                            end = "\n  ".concat(a).concat(end);
                        } else {
                            other = a;
                        }
                        actualLines.pop();
                        expectedLines.pop();
                        if (actualLines.length === 0 || expectedLines.length === 0) break;
                        a = actualLines[actualLines.length - 1];
                        b = expectedLines[expectedLines.length - 1];
                    }
                    var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
                    // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })
                    if (maxLines === 0) {
                        // We have to get the result again. The lines were all removed before.
                        var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
                        // TODO: Accept env to always show the full error.
                        if (_actualLines.length > 30) {
                            _actualLines[26] = "".concat(blue, "...").concat(white);
                            while(_actualLines.length > 27){
                                _actualLines.pop();
                            }
                        }
                        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
                    }
                    if (i > 3) {
                        end = "\n".concat(blue, "...").concat(white).concat(end);
                        skipped = true;
                    }
                    if (other !== '') {
                        end = "\n  ".concat(other).concat(end);
                        other = '';
                    }
                    var printedLines = 0;
                    var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
                    var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
                    for(i = 0; i < maxLines; i++){
                        // Only extra expected lines exist
                        var cur = i - lastPos;
                        if (actualLines.length < i + 1) {
                            // If the last diverging line is more than one line above and the
                            // current line is at least line three, add some of the former lines and
                            // also add dots to indicate skipped entries.
                            if (cur > 1 && i > 2) {
                                if (cur > 4) {
                                    res += "\n".concat(blue, "...").concat(white);
                                    skipped = true;
                                } else if (cur > 3) {
                                    res += "\n  ".concat(expectedLines[i - 2]);
                                    printedLines++;
                                }
                                res += "\n  ".concat(expectedLines[i - 1]);
                                printedLines++;
                            } // Mark the current line as the last diverging one.
                            lastPos = i; // Add the expected line to the cache.
                            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
                            printedLines++; // Only extra actual lines exist
                        } else if (expectedLines.length < i + 1) {
                            // If the last diverging line is more than one line above and the
                            // current line is at least line three, add some of the former lines and
                            // also add dots to indicate skipped entries.
                            if (cur > 1 && i > 2) {
                                if (cur > 4) {
                                    res += "\n".concat(blue, "...").concat(white);
                                    skipped = true;
                                } else if (cur > 3) {
                                    res += "\n  ".concat(actualLines[i - 2]);
                                    printedLines++;
                                }
                                res += "\n  ".concat(actualLines[i - 1]);
                                printedLines++;
                            } // Mark the current line as the last diverging one.
                            lastPos = i; // Add the actual line to the result.
                            res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
                            printedLines++; // Lines diverge
                        } else {
                            var expectedLine = expectedLines[i];
                            var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
                            // a trailing comma. In that case it is actually identical and we should
                            // mark it as such.
                            var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
                            // add a comma at the end of the actual line. Otherwise the output could
                            // look weird as in:
                            //
                            //   [
                            //     1         // No comma at the end!
                            // +   2
                            //   ]
                            //
                            if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
                                divergingLines = false;
                                actualLine += ',';
                            }
                            if (divergingLines) {
                                // If the last diverging line is more than one line above and the
                                // current line is at least line three, add some of the former lines and
                                // also add dots to indicate skipped entries.
                                if (cur > 1 && i > 2) {
                                    if (cur > 4) {
                                        res += "\n".concat(blue, "...").concat(white);
                                        skipped = true;
                                    } else if (cur > 3) {
                                        res += "\n  ".concat(actualLines[i - 2]);
                                        printedLines++;
                                    }
                                    res += "\n  ".concat(actualLines[i - 1]);
                                    printedLines++;
                                } // Mark the current line as the last diverging one.
                                lastPos = i; // Add the actual line to the result and cache the expected diverging
                                // line so consecutive diverging lines show up as +++--- and not +-+-+-.
                                res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
                                other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
                                printedLines += 2; // Lines are identical
                            } else {
                                // Add all cached information to the result before adding other things
                                // and reset the cache.
                                res += other;
                                other = ''; // If the last diverging line is exactly one line above or if it is the
                                // very first line, add the line to the result.
                                if (cur === 1 || i === 0) {
                                    res += "\n  ".concat(actualLine);
                                    printedLines++;
                                }
                            }
                        } // Inspected object to big (Show ~20 rows max)
                        if (printedLines > 20 && i < maxLines - 2) {
                            return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
                        }
                    }
                    return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
                }
                var AssertionError = /*#__PURE__*/ function(_Error) {
                    _inherits(AssertionError, _Error);
                    function AssertionError(options) {
                        var _this;
                        _classCallCheck(this, AssertionError);
                        if (_typeof(options) !== 'object' || options === null) {
                            throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
                        }
                        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
                        var actual = options.actual, expected = options.expected;
                        var limit = Error.stackTraceLimit;
                        Error.stackTraceLimit = 0;
                        if (message != null) {
                            _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
                        } else {
                            if (process.stderr && process.stderr.isTTY) {
                                // Reset on each call to make sure we handle dynamically set environment
                                // variables correct.
                                if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
                                    blue = "\x1B[34m";
                                    green = "\x1B[32m";
                                    white = "\x1B[39m";
                                    red = "\x1B[31m";
                                } else {
                                    blue = '';
                                    green = '';
                                    white = '';
                                    red = '';
                                }
                            } // Prevent the error stack from being visible by duplicating the error
                            // in a very close way to the original in case both sides are actually
                            // instances of Error.
                            if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
                                actual = copyError(actual);
                                expected = copyError(expected);
                            }
                            if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
                                _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
                            } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
                                // In case the objects are equal but the operator requires unequal, show
                                // the first object and say A equals B
                                var base = kReadableOperator[operator];
                                var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.
                                if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
                                    base = kReadableOperator.notStrictEqualObject;
                                } // Only remove lines in case it makes sense to collapse those.
                                // TODO: Accept env to always show the full error.
                                if (res.length > 30) {
                                    res[26] = "".concat(blue, "...").concat(white);
                                    while(res.length > 27){
                                        res.pop();
                                    }
                                } // Only print a single input.
                                if (res.length === 1) {
                                    _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
                                } else {
                                    _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
                                }
                            } else {
                                var _res = inspectValue(actual);
                                var other = '';
                                var knownOperators = kReadableOperator[operator];
                                if (operator === 'notDeepEqual' || operator === 'notEqual') {
                                    _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
                                    if (_res.length > 1024) {
                                        _res = "".concat(_res.slice(0, 1021), "...");
                                    }
                                } else {
                                    other = "".concat(inspectValue(expected));
                                    if (_res.length > 512) {
                                        _res = "".concat(_res.slice(0, 509), "...");
                                    }
                                    if (other.length > 512) {
                                        other = "".concat(other.slice(0, 509), "...");
                                    }
                                    if (operator === 'deepEqual' || operator === 'equal') {
                                        _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
                                    } else {
                                        other = " ".concat(operator, " ").concat(other);
                                    }
                                }
                                _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
                            }
                        }
                        Error.stackTraceLimit = limit;
                        _this.generatedMessage = !message;
                        Object.defineProperty(_assertThisInitialized(_this), 'name', {
                            value: 'AssertionError [ERR_ASSERTION]',
                            enumerable: false,
                            writable: true,
                            configurable: true
                        });
                        _this.code = 'ERR_ASSERTION';
                        _this.actual = actual;
                        _this.expected = expected;
                        _this.operator = operator;
                        if (Error.captureStackTrace) {
                            // eslint-disable-next-line no-restricted-syntax
                            Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
                        } // Create error message including the error code in the name.
                        _this.stack; // Reset the name.
                        _this.name = 'AssertionError';
                        return _possibleConstructorReturn(_this);
                    }
                    _createClass(AssertionError, [
                        {
                            key: "toString",
                            value: function toString() {
                                return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
                            }
                        },
                        {
                            key: inspect.custom,
                            value: function value(recurseTimes, ctx) {
                                // This limits the `actual` and `expected` property default inspection to
                                // the minimum depth. Otherwise those values would be too verbose compared
                                // to the actual error message which contains a combined view of these two
                                // input values.
                                return inspect(this, _objectSpread({}, ctx, {
                                    customInspect: false,
                                    depth: 0
                                }));
                            }
                        }
                    ]);
                    return AssertionError;
                }(_wrapNativeSuper(Error));
                module1.exports = AssertionError;
            /***/ },
            /***/ 1342: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_65318__)=>{
                "use strict";
                // Currently in sync with Node.js lib/internal/errors.js
                // https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f
                /* eslint node-core/documented-errors: "error" */ /* eslint node-core/alphabetize-errors: "error" */ /* eslint node-core/prefer-util-format-errors: "error" */ // The whole point behind this internal module is to allow Node.js to no
                // longer be forced to treat every error message change as a semver-major
                // change. The NodeError classes here all expose a `code` property whose
                // value statically and permanently identifies the error. While the error
                // message may change, the code should not.
                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }
                function _possibleConstructorReturn(self, call) {
                    if (call && (_typeof(call) === "object" || typeof call === "function")) {
                        return call;
                    }
                    return _assertThisInitialized(self);
                }
                function _assertThisInitialized(self) {
                    if (self === void 0) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self;
                }
                function _getPrototypeOf(o) {
                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                        return o.__proto__ || Object.getPrototypeOf(o);
                    };
                    return _getPrototypeOf(o);
                }
                function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                        throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (superClass) _setPrototypeOf(subClass, superClass);
                }
                function _setPrototypeOf(o, p) {
                    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                        o.__proto__ = p;
                        return o;
                    };
                    return _setPrototypeOf(o, p);
                }
                var codes = {}; // Lazy loaded
                var assert;
                var util;
                function createErrorType(code, message, Base) {
                    if (!Base) {
                        Base = Error;
                    }
                    function getMessage(arg1, arg2, arg3) {
                        if (typeof message === 'string') {
                            return message;
                        } else {
                            return message(arg1, arg2, arg3);
                        }
                    }
                    var NodeError = /*#__PURE__*/ function(_Base) {
                        _inherits(NodeError, _Base);
                        function NodeError(arg1, arg2, arg3) {
                            var _this;
                            _classCallCheck(this, NodeError);
                            _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
                            _this.code = code;
                            return _this;
                        }
                        return NodeError;
                    }(Base);
                    codes[code] = NodeError;
                } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
                function oneOf(expected, thing) {
                    if (Array.isArray(expected)) {
                        var len = expected.length;
                        expected = expected.map(function(i) {
                            return String(i);
                        });
                        if (len > 2) {
                            return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
                        } else if (len === 2) {
                            return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
                        } else {
                            return "of ".concat(thing, " ").concat(expected[0]);
                        }
                    } else {
                        return "of ".concat(thing, " ").concat(String(expected));
                    }
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
                function startsWith(str, search, pos) {
                    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
                function endsWith(str, search, this_len) {
                    if (this_len === undefined || this_len > str.length) {
                        this_len = str.length;
                    }
                    return str.substring(this_len - search.length, this_len) === search;
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
                function includes(str, search, start) {
                    if (typeof start !== 'number') {
                        start = 0;
                    }
                    if (start + search.length > str.length) {
                        return false;
                    } else {
                        return str.indexOf(search, start) !== -1;
                    }
                }
                createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
                createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
                    if (assert === undefined) assert = __nested_webpack_require_65318__(6093);
                    assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'
                    var determiner;
                    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
                        determiner = 'must not be';
                        expected = expected.replace(/^not /, '');
                    } else {
                        determiner = 'must be';
                    }
                    var msg;
                    if (endsWith(name, ' argument')) {
                        // For cases like 'first argument'
                        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
                    } else {
                        var type = includes(name, '.') ? 'property' : 'argument';
                        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
                    } // TODO(BridgeAR): Improve the output by showing `null` and similar.
                    msg += ". Received type ".concat(_typeof(actual));
                    return msg;
                }, TypeError);
                createErrorType('ERR_INVALID_ARG_VALUE', function(name, value) {
                    var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
                    if (util === undefined) util = __nested_webpack_require_65318__(6827);
                    var inspected = util.inspect(value);
                    if (inspected.length > 128) {
                        inspected = "".concat(inspected.slice(0, 128), "...");
                    }
                    return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
                }, TypeError, RangeError);
                createErrorType('ERR_INVALID_RETURN_VALUE', function(input, name, value) {
                    var type;
                    if (value && value.constructor && value.constructor.name) {
                        type = "instance of ".concat(value.constructor.name);
                    } else {
                        type = "type ".concat(_typeof(value));
                    }
                    return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
                }, TypeError);
                createErrorType('ERR_MISSING_ARGS', function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    if (assert === undefined) assert = __nested_webpack_require_65318__(6093);
                    assert(args.length > 0, 'At least one arg needs to be specified');
                    var msg = 'The ';
                    var len = args.length;
                    args = args.map(function(a) {
                        return "\"".concat(a, "\"");
                    });
                    switch(len){
                        case 1:
                            msg += "".concat(args[0], " argument");
                            break;
                        case 2:
                            msg += "".concat(args[0], " and ").concat(args[1], " arguments");
                            break;
                        default:
                            msg += args.slice(0, len - 1).join(', ');
                            msg += ", and ".concat(args[len - 1], " arguments");
                            break;
                    }
                    return "".concat(msg, " must be specified");
                }, TypeError);
                module1.exports.codes = codes;
            /***/ },
            /***/ 5656: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_76379__)=>{
                "use strict";
                // Currently in sync with Node.js lib/internal/util/comparisons.js
                // https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
                function _slicedToArray(arr, i) {
                    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
                }
                function _nonIterableRest() {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
                function _iterableToArrayLimit(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"] != null) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                function _arrayWithHoles(arr) {
                    if (Array.isArray(arr)) return arr;
                }
                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }
                var regexFlagsSupported = /a/g.flags !== undefined;
                var arrayFromSet = function arrayFromSet(set) {
                    var array = [];
                    set.forEach(function(value) {
                        return array.push(value);
                    });
                    return array;
                };
                var arrayFromMap = function arrayFromMap(map) {
                    var array = [];
                    map.forEach(function(value, key) {
                        return array.push([
                            key,
                            value
                        ]);
                    });
                    return array;
                };
                var objectIs = Object.is ? Object.is : __nested_webpack_require_76379__(5968);
                var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
                    return [];
                };
                var numberIsNaN = Number.isNaN ? Number.isNaN : __nested_webpack_require_76379__(7838);
                function uncurryThis(f) {
                    return f.call.bind(f);
                }
                var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
                var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
                var objectToString = uncurryThis(Object.prototype.toString);
                var _require$types = __nested_webpack_require_76379__(6827).types, isAnyArrayBuffer = _require$types.isAnyArrayBuffer, isArrayBufferView = _require$types.isArrayBufferView, isDate = _require$types.isDate, isMap = _require$types.isMap, isRegExp = _require$types.isRegExp, isSet = _require$types.isSet, isNativeError = _require$types.isNativeError, isBoxedPrimitive = _require$types.isBoxedPrimitive, isNumberObject = _require$types.isNumberObject, isStringObject = _require$types.isStringObject, isBooleanObject = _require$types.isBooleanObject, isBigIntObject = _require$types.isBigIntObject, isSymbolObject = _require$types.isSymbolObject, isFloat32Array = _require$types.isFloat32Array, isFloat64Array = _require$types.isFloat64Array;
                function isNonIndex(key) {
                    if (key.length === 0 || key.length > 10) return true;
                    for(var i = 0; i < key.length; i++){
                        var code = key.charCodeAt(i);
                        if (code < 48 || code > 57) return true;
                    } // The maximum size for an array is 2 ** 32 -1.
                    return key.length === 10 && key >= Math.pow(2, 32);
                }
                function getOwnNonIndexProperties(value) {
                    return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
                } // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
                // original notice:
                /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */ function compare(a, b) {
                    if (a === b) {
                        return 0;
                    }
                    var x = a.length;
                    var y = b.length;
                    for(var i = 0, len = Math.min(x, y); i < len; ++i){
                        if (a[i] !== b[i]) {
                            x = a[i];
                            y = b[i];
                            break;
                        }
                    }
                    if (x < y) {
                        return -1;
                    }
                    if (y < x) {
                        return 1;
                    }
                    return 0;
                }
                var ONLY_ENUMERABLE = undefined;
                var kStrict = true;
                var kLoose = false;
                var kNoIterator = 0;
                var kIsArray = 1;
                var kIsSet = 2;
                var kIsMap = 3; // Check if they have the same source and flags
                function areSimilarRegExps(a, b) {
                    return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
                }
                function areSimilarFloatArrays(a, b) {
                    if (a.byteLength !== b.byteLength) {
                        return false;
                    }
                    for(var offset = 0; offset < a.byteLength; offset++){
                        if (a[offset] !== b[offset]) {
                            return false;
                        }
                    }
                    return true;
                }
                function areSimilarTypedArrays(a, b) {
                    if (a.byteLength !== b.byteLength) {
                        return false;
                    }
                    return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
                }
                function areEqualArrayBuffers(buf1, buf2) {
                    return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
                }
                function isEqualBoxedPrimitive(val1, val2) {
                    if (isNumberObject(val1)) {
                        return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
                    }
                    if (isStringObject(val1)) {
                        return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
                    }
                    if (isBooleanObject(val1)) {
                        return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
                    }
                    if (isBigIntObject(val1)) {
                        return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
                    }
                    return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
                } // Notes: Type tags are historical [[Class]] properties that can be set by
                // FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
                // and retrieved using Object.prototype.toString.call(obj) in JS
                // See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
                // for a list of tags pre-defined in the spec.
                // There are some unspecified tags in the wild too (e.g. typed array tags).
                // Since tags can be altered, they only serve fast failures
                //
                // Typed arrays and buffers are checked by comparing the content in their
                // underlying ArrayBuffer. This optimization requires that it's
                // reasonable to interpret their underlying memory in the same way,
                // which is checked by comparing their type tags.
                // (e.g. a Uint8Array and a Uint16Array with the same memory content
                // could still be different because they will be interpreted differently).
                //
                // For strict comparison, objects should have
                // a) The same built-in type tags
                // b) The same prototypes.
                function innerDeepEqual(val1, val2, strict, memos) {
                    // All identical values are equivalent, as determined by ===.
                    if (val1 === val2) {
                        if (val1 !== 0) return true;
                        return strict ? objectIs(val1, val2) : true;
                    } // Check more closely if val1 and val2 are equal.
                    if (strict) {
                        if (_typeof(val1) !== 'object') {
                            return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
                        }
                        if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
                            return false;
                        }
                        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
                            return false;
                        }
                    } else {
                        if (val1 === null || _typeof(val1) !== 'object') {
                            if (val2 === null || _typeof(val2) !== 'object') {
                                // eslint-disable-next-line eqeqeq
                                return val1 == val2;
                            }
                            return false;
                        }
                        if (val2 === null || _typeof(val2) !== 'object') {
                            return false;
                        }
                    }
                    var val1Tag = objectToString(val1);
                    var val2Tag = objectToString(val2);
                    if (val1Tag !== val2Tag) {
                        return false;
                    }
                    if (Array.isArray(val1)) {
                        // Check for sparse arrays and general fast path
                        if (val1.length !== val2.length) {
                            return false;
                        }
                        var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
                        var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
                        if (keys1.length !== keys2.length) {
                            return false;
                        }
                        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
                    } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
                    // wan't to early return out of the rest of the checks. However we can check
                    // if the second value is one of these values and the first isn't.
                    if (val1Tag === '[object Object]') {
                        // return keyCheck(val1, val2, strict, memos, kNoIterator);
                        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
                            return false;
                        }
                    }
                    if (isDate(val1)) {
                        if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
                            return false;
                        }
                    } else if (isRegExp(val1)) {
                        if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
                            return false;
                        }
                    } else if (isNativeError(val1) || val1 instanceof Error) {
                        // Do not compare the stack as it might differ even though the error itself
                        // is otherwise identical.
                        if (val1.message !== val2.message || val1.name !== val2.name) {
                            return false;
                        }
                    } else if (isArrayBufferView(val1)) {
                        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
                            if (!areSimilarFloatArrays(val1, val2)) {
                                return false;
                            }
                        } else if (!areSimilarTypedArrays(val1, val2)) {
                            return false;
                        } // Buffer.compare returns true, so val1.length === val2.length. If they both
                        // only contain numeric keys, we don't need to exam further than checking
                        // the symbols.
                        var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
                        var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
                        if (_keys.length !== _keys2.length) {
                            return false;
                        }
                        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
                    } else if (isSet(val1)) {
                        if (!isSet(val2) || val1.size !== val2.size) {
                            return false;
                        }
                        return keyCheck(val1, val2, strict, memos, kIsSet);
                    } else if (isMap(val1)) {
                        if (!isMap(val2) || val1.size !== val2.size) {
                            return false;
                        }
                        return keyCheck(val1, val2, strict, memos, kIsMap);
                    } else if (isAnyArrayBuffer(val1)) {
                        if (!areEqualArrayBuffers(val1, val2)) {
                            return false;
                        }
                    } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
                        return false;
                    }
                    return keyCheck(val1, val2, strict, memos, kNoIterator);
                }
                function getEnumerables(val, keys) {
                    return keys.filter(function(k) {
                        return propertyIsEnumerable(val, k);
                    });
                }
                function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
                    // For all remaining Object pairs, including Array, objects and Maps,
                    // equivalence is determined by having:
                    // a) The same number of owned enumerable properties
                    // b) The same set of keys/indexes (although not necessarily the same order)
                    // c) Equivalent values for every corresponding key/index
                    // d) For Sets and Maps, equal contents
                    // Note: this accounts for both named and indexed properties on Arrays.
                    if (arguments.length === 5) {
                        aKeys = Object.keys(val1);
                        var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.
                        if (aKeys.length !== bKeys.length) {
                            return false;
                        }
                    } // Cheap key test
                    var i = 0;
                    for(; i < aKeys.length; i++){
                        if (!hasOwnProperty(val2, aKeys[i])) {
                            return false;
                        }
                    }
                    if (strict && arguments.length === 5) {
                        var symbolKeysA = objectGetOwnPropertySymbols(val1);
                        if (symbolKeysA.length !== 0) {
                            var count = 0;
                            for(i = 0; i < symbolKeysA.length; i++){
                                var key = symbolKeysA[i];
                                if (propertyIsEnumerable(val1, key)) {
                                    if (!propertyIsEnumerable(val2, key)) {
                                        return false;
                                    }
                                    aKeys.push(key);
                                    count++;
                                } else if (propertyIsEnumerable(val2, key)) {
                                    return false;
                                }
                            }
                            var symbolKeysB = objectGetOwnPropertySymbols(val2);
                            if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
                                return false;
                            }
                        } else {
                            var _symbolKeysB = objectGetOwnPropertySymbols(val2);
                            if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
                                return false;
                            }
                        }
                    }
                    if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
                        return true;
                    } // Use memos to handle cycles.
                    if (memos === undefined) {
                        memos = {
                            val1: new Map(),
                            val2: new Map(),
                            position: 0
                        };
                    } else {
                        // We prevent up to two map.has(x) calls by directly retrieving the value
                        // and checking for undefined. The map can only contain numbers, so it is
                        // safe to check for undefined only.
                        var val2MemoA = memos.val1.get(val1);
                        if (val2MemoA !== undefined) {
                            var val2MemoB = memos.val2.get(val2);
                            if (val2MemoB !== undefined) {
                                return val2MemoA === val2MemoB;
                            }
                        }
                        memos.position++;
                    }
                    memos.val1.set(val1, memos.position);
                    memos.val2.set(val2, memos.position);
                    var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
                    memos.val1.delete(val1);
                    memos.val2.delete(val2);
                    return areEq;
                }
                function setHasEqualElement(set, val1, strict, memo) {
                    // Go looking.
                    var setValues = arrayFromSet(set);
                    for(var i = 0; i < setValues.length; i++){
                        var val2 = setValues[i];
                        if (innerDeepEqual(val1, val2, strict, memo)) {
                            // Remove the matching element to make sure we do not check that again.
                            set.delete(val2);
                            return true;
                        }
                    }
                    return false;
                } // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
                // Sadly it is not possible to detect corresponding values properly in case the
                // type is a string, number, bigint or boolean. The reason is that those values
                // can match lots of different string values (e.g., 1n == '+00001').
                function findLooseMatchingPrimitives(prim) {
                    switch(_typeof(prim)){
                        case 'undefined':
                            return null;
                        case 'object':
                            // Only pass in null as object!
                            return undefined;
                        case 'symbol':
                            return false;
                        case 'string':
                            prim = +prim;
                        // Loose equal entries exist only if the string is possible to convert to
                        // a regular number and not NaN.
                        // Fall through
                        case 'number':
                            if (numberIsNaN(prim)) {
                                return false;
                            }
                    }
                    return true;
                }
                function setMightHaveLoosePrim(a, b, prim) {
                    var altValue = findLooseMatchingPrimitives(prim);
                    if (altValue != null) return altValue;
                    return b.has(altValue) && !a.has(altValue);
                }
                function mapMightHaveLoosePrim(a, b, prim, item, memo) {
                    var altValue = findLooseMatchingPrimitives(prim);
                    if (altValue != null) {
                        return altValue;
                    }
                    var curB = b.get(altValue);
                    if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
                        return false;
                    }
                    return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
                }
                function setEquiv(a, b, strict, memo) {
                    // This is a lazily initiated Set of entries which have to be compared
                    // pairwise.
                    var set = null;
                    var aValues = arrayFromSet(a);
                    for(var i = 0; i < aValues.length; i++){
                        var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
                        // heavy sets but it is a minor slow down for primitives. As they are fast
                        // to check this improves the worst case scenario instead.
                        if (_typeof(val) === 'object' && val !== null) {
                            if (set === null) {
                                set = new Set();
                            } // If the specified value doesn't exist in the second set its an not null
                            // object (or non strict only: a not matching primitive) we'll need to go
                            // hunting for something thats deep-(strict-)equal to it. To make this
                            // O(n log n) complexity we have to copy these values in a new set first.
                            set.add(val);
                        } else if (!b.has(val)) {
                            if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.
                            if (!setMightHaveLoosePrim(a, b, val)) {
                                return false;
                            }
                            if (set === null) {
                                set = new Set();
                            }
                            set.add(val);
                        }
                    }
                    if (set !== null) {
                        var bValues = arrayFromSet(b);
                        for(var _i = 0; _i < bValues.length; _i++){
                            var _val = bValues[_i]; // We have to check if a primitive value is already
                            // matching and only if it's not, go hunting for it.
                            if (_typeof(_val) === 'object' && _val !== null) {
                                if (!setHasEqualElement(set, _val, strict, memo)) return false;
                            } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
                                return false;
                            }
                        }
                        return set.size === 0;
                    }
                    return true;
                }
                function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
                    // To be able to handle cases like:
                    //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
                    // ... we need to consider *all* matching keys, not just the first we find.
                    var setValues = arrayFromSet(set);
                    for(var i = 0; i < setValues.length; i++){
                        var key2 = setValues[i];
                        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
                            set.delete(key2);
                            return true;
                        }
                    }
                    return false;
                }
                function mapEquiv(a, b, strict, memo) {
                    var set = null;
                    var aEntries = arrayFromMap(a);
                    for(var i = 0; i < aEntries.length; i++){
                        var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
                        if (_typeof(key) === 'object' && key !== null) {
                            if (set === null) {
                                set = new Set();
                            }
                            set.add(key);
                        } else {
                            // By directly retrieving the value we prevent another b.has(key) check in
                            // almost all possible cases.
                            var item2 = b.get(key);
                            if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
                                if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
                                // keys.
                                if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
                                if (set === null) {
                                    set = new Set();
                                }
                                set.add(key);
                            }
                        }
                    }
                    if (set !== null) {
                        var bEntries = arrayFromMap(b);
                        for(var _i2 = 0; _i2 < bEntries.length; _i2++){
                            var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), key = _bEntries$_i[0], item = _bEntries$_i[1];
                            if (_typeof(key) === 'object' && key !== null) {
                                if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
                            } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
                                return false;
                            }
                        }
                        return set.size === 0;
                    }
                    return true;
                }
                function objEquiv(a, b, strict, keys, memos, iterationType) {
                    // Sets and maps don't have their entries accessible via normal object
                    // properties.
                    var i = 0;
                    if (iterationType === kIsSet) {
                        if (!setEquiv(a, b, strict, memos)) {
                            return false;
                        }
                    } else if (iterationType === kIsMap) {
                        if (!mapEquiv(a, b, strict, memos)) {
                            return false;
                        }
                    } else if (iterationType === kIsArray) {
                        for(; i < a.length; i++){
                            if (hasOwnProperty(a, i)) {
                                if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
                                    return false;
                                }
                            } else if (hasOwnProperty(b, i)) {
                                return false;
                            } else {
                                // Array is sparse.
                                var keysA = Object.keys(a);
                                for(; i < keysA.length; i++){
                                    var key = keysA[i];
                                    if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
                                        return false;
                                    }
                                }
                                if (keysA.length !== Object.keys(b).length) {
                                    return false;
                                }
                                return true;
                            }
                        }
                    } // The pair must have equivalent values for every corresponding key.
                    // Possibly expensive deep test:
                    for(i = 0; i < keys.length; i++){
                        var _key = keys[i];
                        if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
                            return false;
                        }
                    }
                    return true;
                }
                function isDeepEqual(val1, val2) {
                    return innerDeepEqual(val1, val2, kLoose);
                }
                function isDeepStrictEqual(val1, val2) {
                    return innerDeepEqual(val1, val2, kStrict);
                }
                module1.exports = {
                    isDeepEqual: isDeepEqual,
                    isDeepStrictEqual: isDeepStrictEqual
                };
            /***/ },
            /***/ 9818: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_107933__)=>{
                "use strict";
                var GetIntrinsic = __nested_webpack_require_107933__(528);
                var callBind = __nested_webpack_require_107933__(8498);
                var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));
                module1.exports = function callBoundIntrinsic(name, allowMissing) {
                    var intrinsic = GetIntrinsic(name, !!allowMissing);
                    if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
                        return callBind(intrinsic);
                    }
                    return intrinsic;
                };
            /***/ },
            /***/ 8498: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_108660__)=>{
                "use strict";
                var bind = __nested_webpack_require_108660__(9138);
                var GetIntrinsic = __nested_webpack_require_108660__(528);
                var setFunctionLength = __nested_webpack_require_108660__(6108);
                var $TypeError = __nested_webpack_require_108660__(3468);
                var $apply = GetIntrinsic('%Function.prototype.apply%');
                var $call = GetIntrinsic('%Function.prototype.call%');
                var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
                var $defineProperty = __nested_webpack_require_108660__(4940);
                var $max = GetIntrinsic('%Math.max%');
                module1.exports = function callBind(originalFunction) {
                    if (typeof originalFunction !== 'function') {
                        throw new $TypeError('a function is required');
                    }
                    var func = $reflectApply(bind, $call, arguments);
                    return setFunctionLength(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);
                };
                var applyBind = function applyBind() {
                    return $reflectApply(bind, $apply, arguments);
                };
                if ($defineProperty) {
                    $defineProperty(module1.exports, 'apply', {
                        value: applyBind
                    });
                } else {
                    module1.exports.apply = applyBind;
                }
            /***/ },
            /***/ 4364: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_110259__)=>{
                /*global window, global*/ var util = __nested_webpack_require_110259__(6827);
                var assert = __nested_webpack_require_110259__(6093);
                function now() {
                    return new Date().getTime();
                }
                var slice = Array.prototype.slice;
                var console;
                var times = {};
                if (typeof __nested_webpack_require_110259__.g !== "undefined" && __nested_webpack_require_110259__.g.console) {
                    console = __nested_webpack_require_110259__.g.console;
                } else if (typeof window !== "undefined" && window.console) {
                    console = window.console;
                } else {
                    console = {};
                }
                var functions = [
                    [
                        log,
                        "log"
                    ],
                    [
                        info,
                        "info"
                    ],
                    [
                        warn,
                        "warn"
                    ],
                    [
                        error,
                        "error"
                    ],
                    [
                        time,
                        "time"
                    ],
                    [
                        timeEnd,
                        "timeEnd"
                    ],
                    [
                        trace,
                        "trace"
                    ],
                    [
                        dir,
                        "dir"
                    ],
                    [
                        consoleAssert,
                        "assert"
                    ]
                ];
                for(var i = 0; i < functions.length; i++){
                    var tuple = functions[i];
                    var f = tuple[0];
                    var name = tuple[1];
                    if (!console[name]) {
                        console[name] = f;
                    }
                }
                module1.exports = console;
                function log() {}
                function info() {
                    console.log.apply(console, arguments);
                }
                function warn() {
                    console.log.apply(console, arguments);
                }
                function error() {
                    console.warn.apply(console, arguments);
                }
                function time(label) {
                    times[label] = now();
                }
                function timeEnd(label) {
                    var time = times[label];
                    if (!time) {
                        throw new Error("No such label: " + label);
                    }
                    delete times[label];
                    var duration = now() - time;
                    console.log(label + ": " + duration + "ms");
                }
                function trace() {
                    var err = new Error();
                    err.name = "Trace";
                    err.message = util.format.apply(null, arguments);
                    console.error(err.stack);
                }
                function dir(object) {
                    console.log(util.inspect(object) + "\n");
                }
                function consoleAssert(expression) {
                    if (!expression) {
                        var arr = slice.call(arguments, 1);
                        assert.ok(false, util.format.apply(null, arr));
                    }
                }
            /***/ },
            /***/ 686: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_113941__)=>{
                "use strict";
                var $defineProperty = __nested_webpack_require_113941__(4940);
                var $SyntaxError = __nested_webpack_require_113941__(5731);
                var $TypeError = __nested_webpack_require_113941__(3468);
                var gopd = __nested_webpack_require_113941__(9336);
                /** @type {import('.')} */ module1.exports = function defineDataProperty(obj, property, value) {
                    if (!obj || typeof obj !== 'object' && typeof obj !== 'function') {
                        throw new $TypeError('`obj` must be an object or a function`');
                    }
                    if (typeof property !== 'string' && typeof property !== 'symbol') {
                        throw new $TypeError('`property` must be a string or a symbol`');
                    }
                    if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
                        throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
                    }
                    if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
                        throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
                    }
                    if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
                        throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
                    }
                    if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
                        throw new $TypeError('`loose`, if provided, must be a boolean');
                    }
                    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
                    var nonWritable = arguments.length > 4 ? arguments[4] : null;
                    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
                    var loose = arguments.length > 6 ? arguments[6] : false;
                    /* @type {false | TypedPropertyDescriptor<unknown>} */ var desc = !!gopd && gopd(obj, property);
                    if ($defineProperty) {
                        $defineProperty(obj, property, {
                            configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
                            enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
                            value: value,
                            writable: nonWritable === null && desc ? desc.writable : !nonWritable
                        });
                    } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
                        // must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
                        obj[property] = value; // eslint-disable-line no-param-reassign
                    } else {
                        throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
                    }
                };
            /***/ },
            /***/ 1857: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_117229__)=>{
                "use strict";
                var keys = __nested_webpack_require_117229__(9228);
                var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
                var toStr = Object.prototype.toString;
                var concat = Array.prototype.concat;
                var defineDataProperty = __nested_webpack_require_117229__(686);
                var isFunction = function(fn) {
                    return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
                };
                var supportsDescriptors = __nested_webpack_require_117229__(7239)();
                var defineProperty = function(object, name, value, predicate) {
                    if (name in object) {
                        if (predicate === true) {
                            if (object[name] === value) {
                                return;
                            }
                        } else if (!isFunction(predicate) || !predicate()) {
                            return;
                        }
                    }
                    if (supportsDescriptors) {
                        defineDataProperty(object, name, value, true);
                    } else {
                        defineDataProperty(object, name, value);
                    }
                };
                var defineProperties = function(object, map) {
                    var predicates = arguments.length > 2 ? arguments[2] : {};
                    var props = keys(map);
                    if (hasSymbols) {
                        props = concat.call(props, Object.getOwnPropertySymbols(map));
                    }
                    for(var i = 0; i < props.length; i += 1){
                        defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
                    }
                };
                defineProperties.supportsDescriptors = !!supportsDescriptors;
                module1.exports = defineProperties;
            /***/ },
            /***/ 4940: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_119306__)=>{
                "use strict";
                var GetIntrinsic = __nested_webpack_require_119306__(528);
                /** @type {import('.')} */ var $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;
                if ($defineProperty) {
                    try {
                        $defineProperty({}, 'a', {
                            value: 1
                        });
                    } catch (e) {
                        // IE 8 has a broken defineProperty
                        $defineProperty = false;
                    }
                }
                module1.exports = $defineProperty;
            /***/ },
            /***/ 6729: /***/ (module1)=>{
                "use strict";
                /** @type {import('./eval')} */ module1.exports = EvalError;
            /***/ },
            /***/ 9838: /***/ (module1)=>{
                "use strict";
                /** @type {import('.')} */ module1.exports = Error;
            /***/ },
            /***/ 1155: /***/ (module1)=>{
                "use strict";
                /** @type {import('./range')} */ module1.exports = RangeError;
            /***/ },
            /***/ 4943: /***/ (module1)=>{
                "use strict";
                /** @type {import('./ref')} */ module1.exports = ReferenceError;
            /***/ },
            /***/ 5731: /***/ (module1)=>{
                "use strict";
                /** @type {import('./syntax')} */ module1.exports = SyntaxError;
            /***/ },
            /***/ 3468: /***/ (module1)=>{
                "use strict";
                /** @type {import('./type')} */ module1.exports = TypeError;
            /***/ },
            /***/ 2140: /***/ (module1)=>{
                "use strict";
                /** @type {import('./uri')} */ module1.exports = URIError;
            /***/ },
            /***/ 3046: /***/ (module1)=>{
                "use strict";
                /**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */ function assign(target, firstSource) {
                    if (target === undefined || target === null) {
                        throw new TypeError('Cannot convert first argument to object');
                    }
                    var to = Object(target);
                    for(var i = 1; i < arguments.length; i++){
                        var nextSource = arguments[i];
                        if (nextSource === undefined || nextSource === null) {
                            continue;
                        }
                        var keysArray = Object.keys(Object(nextSource));
                        for(var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++){
                            var nextKey = keysArray[nextIndex];
                            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                            if (desc !== undefined && desc.enumerable) {
                                to[nextKey] = nextSource[nextKey];
                            }
                        }
                    }
                    return to;
                }
                function polyfill() {
                    if (!Object.assign) {
                        Object.defineProperty(Object, 'assign', {
                            enumerable: false,
                            configurable: true,
                            writable: true,
                            value: assign
                        });
                    }
                }
                module1.exports = {
                    assign: assign,
                    polyfill: polyfill
                };
            /***/ },
            /***/ 705: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_123152__)=>{
                "use strict";
                var isCallable = __nested_webpack_require_123152__(9617);
                var toStr = Object.prototype.toString;
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var forEachArray = function forEachArray(array, iterator, receiver) {
                    for(var i = 0, len = array.length; i < len; i++){
                        if (hasOwnProperty.call(array, i)) {
                            if (receiver == null) {
                                iterator(array[i], i, array);
                            } else {
                                iterator.call(receiver, array[i], i, array);
                            }
                        }
                    }
                };
                var forEachString = function forEachString(string, iterator, receiver) {
                    for(var i = 0, len = string.length; i < len; i++){
                        // no such thing as a sparse string.
                        if (receiver == null) {
                            iterator(string.charAt(i), i, string);
                        } else {
                            iterator.call(receiver, string.charAt(i), i, string);
                        }
                    }
                };
                var forEachObject = function forEachObject(object, iterator, receiver) {
                    for(var k in object){
                        if (hasOwnProperty.call(object, k)) {
                            if (receiver == null) {
                                iterator(object[k], k, object);
                            } else {
                                iterator.call(receiver, object[k], k, object);
                            }
                        }
                    }
                };
                var forEach = function forEach(list, iterator, thisArg) {
                    if (!isCallable(iterator)) {
                        throw new TypeError('iterator must be a function');
                    }
                    var receiver;
                    if (arguments.length >= 3) {
                        receiver = thisArg;
                    }
                    if (toStr.call(list) === '[object Array]') {
                        forEachArray(list, iterator, receiver);
                    } else if (typeof list === 'string') {
                        forEachString(list, iterator, receiver);
                    } else {
                        forEachObject(list, iterator, receiver);
                    }
                };
                module1.exports = forEach;
            /***/ },
            /***/ 8794: /***/ (module1)=>{
                "use strict";
                /* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
                var toStr = Object.prototype.toString;
                var max = Math.max;
                var funcType = '[object Function]';
                var concatty = function concatty(a, b) {
                    var arr = [];
                    for(var i = 0; i < a.length; i += 1){
                        arr[i] = a[i];
                    }
                    for(var j = 0; j < b.length; j += 1){
                        arr[j + a.length] = b[j];
                    }
                    return arr;
                };
                var slicy = function slicy(arrLike, offset) {
                    var arr = [];
                    for(var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1){
                        arr[j] = arrLike[i];
                    }
                    return arr;
                };
                var joiny = function(arr, joiner) {
                    var str = '';
                    for(var i = 0; i < arr.length; i += 1){
                        str += arr[i];
                        if (i + 1 < arr.length) {
                            str += joiner;
                        }
                    }
                    return str;
                };
                module1.exports = function bind(that) {
                    var target = this;
                    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
                        throw new TypeError(ERROR_MESSAGE + target);
                    }
                    var args = slicy(arguments, 1);
                    var bound;
                    var binder = function() {
                        if (this instanceof bound) {
                            var result = target.apply(this, concatty(args, arguments));
                            if (Object(result) === result) {
                                return result;
                            }
                            return this;
                        }
                        return target.apply(that, concatty(args, arguments));
                    };
                    var boundLength = max(0, target.length - args.length);
                    var boundArgs = [];
                    for(var i = 0; i < boundLength; i++){
                        boundArgs[i] = '$' + i;
                    }
                    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);
                    if (target.prototype) {
                        var Empty = function Empty() {};
                        Empty.prototype = target.prototype;
                        bound.prototype = new Empty();
                        Empty.prototype = null;
                    }
                    return bound;
                };
            /***/ },
            /***/ 9138: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_128871__)=>{
                "use strict";
                var implementation = __nested_webpack_require_128871__(8794);
                module1.exports = Function.prototype.bind || implementation;
            /***/ },
            /***/ 528: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_129152__)=>{
                "use strict";
                var undefined1;
                var $Error = __nested_webpack_require_129152__(9838);
                var $EvalError = __nested_webpack_require_129152__(6729);
                var $RangeError = __nested_webpack_require_129152__(1155);
                var $ReferenceError = __nested_webpack_require_129152__(4943);
                var $SyntaxError = __nested_webpack_require_129152__(5731);
                var $TypeError = __nested_webpack_require_129152__(3468);
                var $URIError = __nested_webpack_require_129152__(2140);
                var $Function = Function;
                // eslint-disable-next-line consistent-return
                var getEvalledConstructor = function(expressionSyntax) {
                    try {
                        return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
                    } catch (e) {}
                };
                var $gOPD = Object.getOwnPropertyDescriptor;
                if ($gOPD) {
                    try {
                        $gOPD({}, '');
                    } catch (e) {
                        $gOPD = null; // this is IE 8, which has a broken gOPD
                    }
                }
                var throwTypeError = function() {
                    throw new $TypeError();
                };
                var ThrowTypeError = $gOPD ? function() {
                    try {
                        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
                        arguments.callee; // IE 8 does not throw here
                        return throwTypeError;
                    } catch (calleeThrows) {
                        try {
                            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
                            return $gOPD(arguments, 'callee').get;
                        } catch (gOPDthrows) {
                            return throwTypeError;
                        }
                    }
                }() : throwTypeError;
                var hasSymbols = __nested_webpack_require_129152__(3558)();
                var hasProto = __nested_webpack_require_129152__(6869)();
                var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
                    return x.__proto__;
                } // eslint-disable-line no-proto
                 : null);
                var needsEval = {};
                var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined1 : getProto(Uint8Array);
                var INTRINSICS = {
                    __proto__: null,
                    '%AggregateError%': typeof AggregateError === 'undefined' ? undefined1 : AggregateError,
                    '%Array%': Array,
                    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined1 : ArrayBuffer,
                    '%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined1,
                    '%AsyncFromSyncIteratorPrototype%': undefined1,
                    '%AsyncFunction%': needsEval,
                    '%AsyncGenerator%': needsEval,
                    '%AsyncGeneratorFunction%': needsEval,
                    '%AsyncIteratorPrototype%': needsEval,
                    '%Atomics%': typeof Atomics === 'undefined' ? undefined1 : Atomics,
                    '%BigInt%': typeof BigInt === 'undefined' ? undefined1 : BigInt,
                    '%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined1 : BigInt64Array,
                    '%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined1 : BigUint64Array,
                    '%Boolean%': Boolean,
                    '%DataView%': typeof DataView === 'undefined' ? undefined1 : DataView,
                    '%Date%': Date,
                    '%decodeURI%': decodeURI,
                    '%decodeURIComponent%': decodeURIComponent,
                    '%encodeURI%': encodeURI,
                    '%encodeURIComponent%': encodeURIComponent,
                    '%Error%': $Error,
                    '%eval%': eval,
                    '%EvalError%': $EvalError,
                    '%Float32Array%': typeof Float32Array === 'undefined' ? undefined1 : Float32Array,
                    '%Float64Array%': typeof Float64Array === 'undefined' ? undefined1 : Float64Array,
                    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined1 : FinalizationRegistry,
                    '%Function%': $Function,
                    '%GeneratorFunction%': needsEval,
                    '%Int8Array%': typeof Int8Array === 'undefined' ? undefined1 : Int8Array,
                    '%Int16Array%': typeof Int16Array === 'undefined' ? undefined1 : Int16Array,
                    '%Int32Array%': typeof Int32Array === 'undefined' ? undefined1 : Int32Array,
                    '%isFinite%': isFinite,
                    '%isNaN%': isNaN,
                    '%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined1,
                    '%JSON%': typeof JSON === 'object' ? JSON : undefined1,
                    '%Map%': typeof Map === 'undefined' ? undefined1 : Map,
                    '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined1 : getProto(new Map()[Symbol.iterator]()),
                    '%Math%': Math,
                    '%Number%': Number,
                    '%Object%': Object,
                    '%parseFloat%': parseFloat,
                    '%parseInt%': parseInt,
                    '%Promise%': typeof Promise === 'undefined' ? undefined1 : Promise,
                    '%Proxy%': typeof Proxy === 'undefined' ? undefined1 : Proxy,
                    '%RangeError%': $RangeError,
                    '%ReferenceError%': $ReferenceError,
                    '%Reflect%': typeof Reflect === 'undefined' ? undefined1 : Reflect,
                    '%RegExp%': RegExp,
                    '%Set%': typeof Set === 'undefined' ? undefined1 : Set,
                    '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined1 : getProto(new Set()[Symbol.iterator]()),
                    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined1 : SharedArrayBuffer,
                    '%String%': String,
                    '%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined1,
                    '%Symbol%': hasSymbols ? Symbol : undefined1,
                    '%SyntaxError%': $SyntaxError,
                    '%ThrowTypeError%': ThrowTypeError,
                    '%TypedArray%': TypedArray,
                    '%TypeError%': $TypeError,
                    '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined1 : Uint8Array,
                    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined1 : Uint8ClampedArray,
                    '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined1 : Uint16Array,
                    '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined1 : Uint32Array,
                    '%URIError%': $URIError,
                    '%WeakMap%': typeof WeakMap === 'undefined' ? undefined1 : WeakMap,
                    '%WeakRef%': typeof WeakRef === 'undefined' ? undefined1 : WeakRef,
                    '%WeakSet%': typeof WeakSet === 'undefined' ? undefined1 : WeakSet
                };
                if (getProto) {
                    try {
                        null.error; // eslint-disable-line no-unused-expressions
                    } catch (e) {
                        // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
                        var errorProto = getProto(getProto(e));
                        INTRINSICS['%Error.prototype%'] = errorProto;
                    }
                }
                var doEval = function doEval(name) {
                    var value;
                    if (name === '%AsyncFunction%') {
                        value = getEvalledConstructor('async function () {}');
                    } else if (name === '%GeneratorFunction%') {
                        value = getEvalledConstructor('function* () {}');
                    } else if (name === '%AsyncGeneratorFunction%') {
                        value = getEvalledConstructor('async function* () {}');
                    } else if (name === '%AsyncGenerator%') {
                        var fn = doEval('%AsyncGeneratorFunction%');
                        if (fn) {
                            value = fn.prototype;
                        }
                    } else if (name === '%AsyncIteratorPrototype%') {
                        var gen = doEval('%AsyncGenerator%');
                        if (gen && getProto) {
                            value = getProto(gen.prototype);
                        }
                    }
                    INTRINSICS[name] = value;
                    return value;
                };
                var LEGACY_ALIASES = {
                    __proto__: null,
                    '%ArrayBufferPrototype%': [
                        'ArrayBuffer',
                        'prototype'
                    ],
                    '%ArrayPrototype%': [
                        'Array',
                        'prototype'
                    ],
                    '%ArrayProto_entries%': [
                        'Array',
                        'prototype',
                        'entries'
                    ],
                    '%ArrayProto_forEach%': [
                        'Array',
                        'prototype',
                        'forEach'
                    ],
                    '%ArrayProto_keys%': [
                        'Array',
                        'prototype',
                        'keys'
                    ],
                    '%ArrayProto_values%': [
                        'Array',
                        'prototype',
                        'values'
                    ],
                    '%AsyncFunctionPrototype%': [
                        'AsyncFunction',
                        'prototype'
                    ],
                    '%AsyncGenerator%': [
                        'AsyncGeneratorFunction',
                        'prototype'
                    ],
                    '%AsyncGeneratorPrototype%': [
                        'AsyncGeneratorFunction',
                        'prototype',
                        'prototype'
                    ],
                    '%BooleanPrototype%': [
                        'Boolean',
                        'prototype'
                    ],
                    '%DataViewPrototype%': [
                        'DataView',
                        'prototype'
                    ],
                    '%DatePrototype%': [
                        'Date',
                        'prototype'
                    ],
                    '%ErrorPrototype%': [
                        'Error',
                        'prototype'
                    ],
                    '%EvalErrorPrototype%': [
                        'EvalError',
                        'prototype'
                    ],
                    '%Float32ArrayPrototype%': [
                        'Float32Array',
                        'prototype'
                    ],
                    '%Float64ArrayPrototype%': [
                        'Float64Array',
                        'prototype'
                    ],
                    '%FunctionPrototype%': [
                        'Function',
                        'prototype'
                    ],
                    '%Generator%': [
                        'GeneratorFunction',
                        'prototype'
                    ],
                    '%GeneratorPrototype%': [
                        'GeneratorFunction',
                        'prototype',
                        'prototype'
                    ],
                    '%Int8ArrayPrototype%': [
                        'Int8Array',
                        'prototype'
                    ],
                    '%Int16ArrayPrototype%': [
                        'Int16Array',
                        'prototype'
                    ],
                    '%Int32ArrayPrototype%': [
                        'Int32Array',
                        'prototype'
                    ],
                    '%JSONParse%': [
                        'JSON',
                        'parse'
                    ],
                    '%JSONStringify%': [
                        'JSON',
                        'stringify'
                    ],
                    '%MapPrototype%': [
                        'Map',
                        'prototype'
                    ],
                    '%NumberPrototype%': [
                        'Number',
                        'prototype'
                    ],
                    '%ObjectPrototype%': [
                        'Object',
                        'prototype'
                    ],
                    '%ObjProto_toString%': [
                        'Object',
                        'prototype',
                        'toString'
                    ],
                    '%ObjProto_valueOf%': [
                        'Object',
                        'prototype',
                        'valueOf'
                    ],
                    '%PromisePrototype%': [
                        'Promise',
                        'prototype'
                    ],
                    '%PromiseProto_then%': [
                        'Promise',
                        'prototype',
                        'then'
                    ],
                    '%Promise_all%': [
                        'Promise',
                        'all'
                    ],
                    '%Promise_reject%': [
                        'Promise',
                        'reject'
                    ],
                    '%Promise_resolve%': [
                        'Promise',
                        'resolve'
                    ],
                    '%RangeErrorPrototype%': [
                        'RangeError',
                        'prototype'
                    ],
                    '%ReferenceErrorPrototype%': [
                        'ReferenceError',
                        'prototype'
                    ],
                    '%RegExpPrototype%': [
                        'RegExp',
                        'prototype'
                    ],
                    '%SetPrototype%': [
                        'Set',
                        'prototype'
                    ],
                    '%SharedArrayBufferPrototype%': [
                        'SharedArrayBuffer',
                        'prototype'
                    ],
                    '%StringPrototype%': [
                        'String',
                        'prototype'
                    ],
                    '%SymbolPrototype%': [
                        'Symbol',
                        'prototype'
                    ],
                    '%SyntaxErrorPrototype%': [
                        'SyntaxError',
                        'prototype'
                    ],
                    '%TypedArrayPrototype%': [
                        'TypedArray',
                        'prototype'
                    ],
                    '%TypeErrorPrototype%': [
                        'TypeError',
                        'prototype'
                    ],
                    '%Uint8ArrayPrototype%': [
                        'Uint8Array',
                        'prototype'
                    ],
                    '%Uint8ClampedArrayPrototype%': [
                        'Uint8ClampedArray',
                        'prototype'
                    ],
                    '%Uint16ArrayPrototype%': [
                        'Uint16Array',
                        'prototype'
                    ],
                    '%Uint32ArrayPrototype%': [
                        'Uint32Array',
                        'prototype'
                    ],
                    '%URIErrorPrototype%': [
                        'URIError',
                        'prototype'
                    ],
                    '%WeakMapPrototype%': [
                        'WeakMap',
                        'prototype'
                    ],
                    '%WeakSetPrototype%': [
                        'WeakSet',
                        'prototype'
                    ]
                };
                var bind = __nested_webpack_require_129152__(9138);
                var hasOwn = __nested_webpack_require_129152__(8554);
                var $concat = bind.call(Function.call, Array.prototype.concat);
                var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
                var $replace = bind.call(Function.call, String.prototype.replace);
                var $strSlice = bind.call(Function.call, String.prototype.slice);
                var $exec = bind.call(Function.call, RegExp.prototype.exec);
                /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
                var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
                var stringToPath = function stringToPath(string) {
                    var first = $strSlice(string, 0, 1);
                    var last = $strSlice(string, -1);
                    if (first === '%' && last !== '%') {
                        throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
                    } else if (last === '%' && first !== '%') {
                        throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
                    }
                    var result = [];
                    $replace(string, rePropName, function(match, number, quote, subString) {
                        result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
                    });
                    return result;
                };
                /* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
                    var intrinsicName = name;
                    var alias;
                    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
                        alias = LEGACY_ALIASES[intrinsicName];
                        intrinsicName = '%' + alias[0] + '%';
                    }
                    if (hasOwn(INTRINSICS, intrinsicName)) {
                        var value = INTRINSICS[intrinsicName];
                        if (value === needsEval) {
                            value = doEval(intrinsicName);
                        }
                        if (typeof value === 'undefined' && !allowMissing) {
                            throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
                        }
                        return {
                            alias: alias,
                            name: intrinsicName,
                            value: value
                        };
                    }
                    throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
                };
                module1.exports = function GetIntrinsic(name, allowMissing) {
                    if (typeof name !== 'string' || name.length === 0) {
                        throw new $TypeError('intrinsic name must be a non-empty string');
                    }
                    if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
                        throw new $TypeError('"allowMissing" argument must be a boolean');
                    }
                    if ($exec(/^%?[^%]*%?$/, name) === null) {
                        throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
                    }
                    var parts = stringToPath(name);
                    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
                    var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
                    var intrinsicRealName = intrinsic.name;
                    var value = intrinsic.value;
                    var skipFurtherCaching = false;
                    var alias = intrinsic.alias;
                    if (alias) {
                        intrinsicBaseName = alias[0];
                        $spliceApply(parts, $concat([
                            0,
                            1
                        ], alias));
                    }
                    for(var i = 1, isOwn = true; i < parts.length; i += 1){
                        var part = parts[i];
                        var first = $strSlice(part, 0, 1);
                        var last = $strSlice(part, -1);
                        if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
                            throw new $SyntaxError('property names with quotes must have matching quotes');
                        }
                        if (part === 'constructor' || !isOwn) {
                            skipFurtherCaching = true;
                        }
                        intrinsicBaseName += '.' + part;
                        intrinsicRealName = '%' + intrinsicBaseName + '%';
                        if (hasOwn(INTRINSICS, intrinsicRealName)) {
                            value = INTRINSICS[intrinsicRealName];
                        } else if (value != null) {
                            if (!(part in value)) {
                                if (!allowMissing) {
                                    throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
                                }
                                return void undefined1;
                            }
                            if ($gOPD && i + 1 >= parts.length) {
                                var desc = $gOPD(value, part);
                                isOwn = !!desc;
                                // By convention, when a data property is converted to an accessor
                                // property to emulate a data property that does not suffer from
                                // the override mistake, that accessor's getter is marked with
                                // an `originalValue` property. Here, when we detect this, we
                                // uphold the illusion by pretending to see that original data
                                // property, i.e., returning the value rather than the getter
                                // itself.
                                if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
                                    value = desc.get;
                                } else {
                                    value = value[part];
                                }
                            } else {
                                isOwn = hasOwn(value, part);
                                value = value[part];
                            }
                            if (isOwn && !skipFurtherCaching) {
                                INTRINSICS[intrinsicRealName] = value;
                            }
                        }
                    }
                    return value;
                };
            /***/ },
            /***/ 9336: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_153030__)=>{
                "use strict";
                var GetIntrinsic = __nested_webpack_require_153030__(528);
                var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
                if ($gOPD) {
                    try {
                        $gOPD([], 'length');
                    } catch (e) {
                        // IE 8 has a broken gOPD
                        $gOPD = null;
                    }
                }
                module1.exports = $gOPD;
            /***/ },
            /***/ 7239: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_153620__)=>{
                "use strict";
                var $defineProperty = __nested_webpack_require_153620__(4940);
                var hasPropertyDescriptors = function hasPropertyDescriptors() {
                    return !!$defineProperty;
                };
                hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
                    // node v0.6 has a bug where array lengths can be Set but not Defined
                    if (!$defineProperty) {
                        return null;
                    }
                    try {
                        return $defineProperty([], 'length', {
                            value: 1
                        }).length !== 1;
                    } catch (e) {
                        // In Firefox 4-22, defining length on an array throws an exception.
                        return true;
                    }
                };
                module1.exports = hasPropertyDescriptors;
            /***/ },
            /***/ 6869: /***/ (module1)=>{
                "use strict";
                var test = {
                    foo: {}
                };
                var $Object = Object;
                module1.exports = function hasProto() {
                    return ({
                        __proto__: test
                    }).foo === test.foo && !(({
                        __proto__: null
                    }) instanceof $Object);
                };
            /***/ },
            /***/ 3558: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_155182__)=>{
                "use strict";
                var origSymbol = typeof Symbol !== 'undefined' && Symbol;
                var hasSymbolSham = __nested_webpack_require_155182__(2908);
                module1.exports = function hasNativeSymbols() {
                    if (typeof origSymbol !== 'function') {
                        return false;
                    }
                    if (typeof Symbol !== 'function') {
                        return false;
                    }
                    if (typeof origSymbol('foo') !== 'symbol') {
                        return false;
                    }
                    if (typeof Symbol('bar') !== 'symbol') {
                        return false;
                    }
                    return hasSymbolSham();
                };
            /***/ },
            /***/ 2908: /***/ (module1)=>{
                "use strict";
                /* eslint complexity: [2, 18], max-statements: [2, 33] */ module1.exports = function hasSymbols() {
                    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
                        return false;
                    }
                    if (typeof Symbol.iterator === 'symbol') {
                        return true;
                    }
                    var obj = {};
                    var sym = Symbol('test');
                    var symObj = Object(sym);
                    if (typeof sym === 'string') {
                        return false;
                    }
                    if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
                        return false;
                    }
                    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
                        return false;
                    }
                    // temp disabled per https://github.com/ljharb/object.assign/issues/17
                    // if (sym instanceof Symbol) { return false; }
                    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
                    // if (!(symObj instanceof Symbol)) { return false; }
                    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
                    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
                    var symVal = 42;
                    obj[sym] = symVal;
                    for(sym in obj){
                        return false;
                    } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
                    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
                        return false;
                    }
                    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
                        return false;
                    }
                    var syms = Object.getOwnPropertySymbols(obj);
                    if (syms.length !== 1 || syms[0] !== sym) {
                        return false;
                    }
                    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
                        return false;
                    }
                    if (typeof Object.getOwnPropertyDescriptor === 'function') {
                        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
                        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
                            return false;
                        }
                    }
                    return true;
                };
            /***/ },
            /***/ 1913: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_158941__)=>{
                "use strict";
                var hasSymbols = __nested_webpack_require_158941__(2908);
                module1.exports = function hasToStringTagShams() {
                    return hasSymbols() && !!Symbol.toStringTag;
                };
            /***/ },
            /***/ 8554: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_159293__)=>{
                "use strict";
                var call = Function.prototype.call;
                var $hasOwn = Object.prototype.hasOwnProperty;
                var bind = __nested_webpack_require_159293__(9138);
                /** @type {import('.')} */ module1.exports = bind.call(call, $hasOwn);
            /***/ },
            /***/ 5615: /***/ (module1)=>{
                if (typeof Object.create === 'function') {
                    // implementation from standard node.js 'util' module
                    module1.exports = function inherits(ctor, superCtor) {
                        if (superCtor) {
                            ctor.super_ = superCtor;
                            ctor.prototype = Object.create(superCtor.prototype, {
                                constructor: {
                                    value: ctor,
                                    enumerable: false,
                                    writable: true,
                                    configurable: true
                                }
                            });
                        }
                    };
                } else {
                    // old school shim for old browsers
                    module1.exports = function inherits(ctor, superCtor) {
                        if (superCtor) {
                            ctor.super_ = superCtor;
                            var TempCtor = function() {};
                            TempCtor.prototype = superCtor.prototype;
                            ctor.prototype = new TempCtor();
                            ctor.prototype.constructor = ctor;
                        }
                    };
                }
            /***/ },
            /***/ 5387: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_161080__)=>{
                "use strict";
                var hasToStringTag = __nested_webpack_require_161080__(1913)();
                var callBound = __nested_webpack_require_161080__(9818);
                var $toString = callBound('Object.prototype.toString');
                var isStandardArguments = function isArguments(value) {
                    if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
                        return false;
                    }
                    return $toString(value) === '[object Arguments]';
                };
                var isLegacyArguments = function isArguments(value) {
                    if (isStandardArguments(value)) {
                        return true;
                    }
                    return value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && $toString(value) !== '[object Array]' && $toString(value.callee) === '[object Function]';
                };
                var supportsStandardArguments = function() {
                    return isStandardArguments(arguments);
                }();
                isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests
                module1.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
            /***/ },
            /***/ 9617: /***/ (module1)=>{
                "use strict";
                var fnToStr = Function.prototype.toString;
                var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
                var badArrayLike;
                var isCallableMarker;
                if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
                    try {
                        badArrayLike = Object.defineProperty({}, 'length', {
                            get: function() {
                                throw isCallableMarker;
                            }
                        });
                        isCallableMarker = {};
                        // eslint-disable-next-line no-throw-literal
                        reflectApply(function() {
                            throw 42;
                        }, null, badArrayLike);
                    } catch (_) {
                        if (_ !== isCallableMarker) {
                            reflectApply = null;
                        }
                    }
                } else {
                    reflectApply = null;
                }
                var constructorRegex = /^\s*class\b/;
                var isES6ClassFn = function isES6ClassFunction(value) {
                    try {
                        var fnStr = fnToStr.call(value);
                        return constructorRegex.test(fnStr);
                    } catch (e) {
                        return false; // not a function
                    }
                };
                var tryFunctionObject = function tryFunctionToStr(value) {
                    try {
                        if (isES6ClassFn(value)) {
                            return false;
                        }
                        fnToStr.call(value);
                        return true;
                    } catch (e) {
                        return false;
                    }
                };
                var toStr = Object.prototype.toString;
                var objectClass = '[object Object]';
                var fnClass = '[object Function]';
                var genClass = '[object GeneratorFunction]';
                var ddaClass = '[object HTMLAllCollection]'; // IE 11
                var ddaClass2 = '[object HTML document.all class]';
                var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
                var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
                var isIE68 = !(0 in [
                    , 
                ]); // eslint-disable-line no-sparse-arrays, comma-spacing
                var isDDA = function isDocumentDotAll() {
                    return false;
                };
                if (typeof document === 'object') {
                    // Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
                    var all = document.all;
                    if (toStr.call(all) === toStr.call(document.all)) {
                        isDDA = function isDocumentDotAll(value) {
                            /* globals document: false */ // in IE 6-8, typeof document.all is "object" and it's truthy
                            if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
                                try {
                                    var str = toStr.call(value);
                                    return (str === ddaClass || str === ddaClass2 || str === ddaClass3 // opera 12.16
                                     || str === objectClass // IE 6-8
                                    ) && value('') == null; // eslint-disable-line eqeqeq
                                } catch (e) {}
                            }
                            return false;
                        };
                    }
                }
                module1.exports = reflectApply ? function isCallable(value) {
                    if (isDDA(value)) {
                        return true;
                    }
                    if (!value) {
                        return false;
                    }
                    if (typeof value !== 'function' && typeof value !== 'object') {
                        return false;
                    }
                    try {
                        reflectApply(value, null, badArrayLike);
                    } catch (e) {
                        if (e !== isCallableMarker) {
                            return false;
                        }
                    }
                    return !isES6ClassFn(value) && tryFunctionObject(value);
                } : function isCallable(value) {
                    if (isDDA(value)) {
                        return true;
                    }
                    if (!value) {
                        return false;
                    }
                    if (typeof value !== 'function' && typeof value !== 'object') {
                        return false;
                    }
                    if (hasToStringTag) {
                        return tryFunctionObject(value);
                    }
                    if (isES6ClassFn(value)) {
                        return false;
                    }
                    var strClass = toStr.call(value);
                    if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
                        return false;
                    }
                    return tryFunctionObject(value);
                };
            /***/ },
            /***/ 2625: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_168140__)=>{
                "use strict";
                var toStr = Object.prototype.toString;
                var fnToStr = Function.prototype.toString;
                var isFnRegex = /^\s*(?:function)?\*/;
                var hasToStringTag = __nested_webpack_require_168140__(1913)();
                var getProto = Object.getPrototypeOf;
                var getGeneratorFunc = function() {
                    if (!hasToStringTag) {
                        return false;
                    }
                    try {
                        return Function('return function*() {}')();
                    } catch (e) {}
                };
                var GeneratorFunction;
                module1.exports = function isGeneratorFunction(fn) {
                    if (typeof fn !== 'function') {
                        return false;
                    }
                    if (isFnRegex.test(fnToStr.call(fn))) {
                        return true;
                    }
                    if (!hasToStringTag) {
                        var str = toStr.call(fn);
                        return str === '[object GeneratorFunction]';
                    }
                    if (!getProto) {
                        return false;
                    }
                    if (typeof GeneratorFunction === 'undefined') {
                        var generatorFunc = getGeneratorFunc();
                        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
                    }
                    return getProto(fn) === GeneratorFunction;
                };
            /***/ },
            /***/ 8006: /***/ (module1)=>{
                "use strict";
                /* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module1.exports = function isNaN1(value) {
                    return value !== value;
                };
            /***/ },
            /***/ 7838: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_170109__)=>{
                "use strict";
                var callBind = __nested_webpack_require_170109__(8498);
                var define1 = __nested_webpack_require_170109__(1857);
                var implementation = __nested_webpack_require_170109__(8006);
                var getPolyfill = __nested_webpack_require_170109__(1591);
                var shim = __nested_webpack_require_170109__(1641);
                var polyfill = callBind(getPolyfill(), Number);
                /* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ define1(polyfill, {
                    getPolyfill: getPolyfill,
                    implementation: implementation,
                    shim: shim
                });
                module1.exports = polyfill;
            /***/ },
            /***/ 1591: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_170908__)=>{
                "use strict";
                var implementation = __nested_webpack_require_170908__(8006);
                module1.exports = function getPolyfill() {
                    if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
                        return Number.isNaN;
                    }
                    return implementation;
                };
            /***/ },
            /***/ 1641: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_171384__)=>{
                "use strict";
                var define1 = __nested_webpack_require_171384__(1857);
                var getPolyfill = __nested_webpack_require_171384__(1591);
                /* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module1.exports = function shimNumberIsNaN() {
                    var polyfill = getPolyfill();
                    define1(Number, {
                        isNaN: polyfill
                    }, {
                        isNaN: function testIsNaN() {
                            return Number.isNaN !== polyfill;
                        }
                    });
                    return polyfill;
                };
            /***/ },
            /***/ 5943: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_172152__)=>{
                "use strict";
                var whichTypedArray = __nested_webpack_require_172152__(2730);
                module1.exports = function isTypedArray(value) {
                    return !!whichTypedArray(value);
                };
            /***/ },
            /***/ 2372: /***/ (module1)=>{
                "use strict";
                var numberIsNaN = function(value) {
                    return value !== value;
                };
                module1.exports = function is(a, b) {
                    if (a === 0 && b === 0) {
                        return 1 / a === 1 / b;
                    }
                    if (a === b) {
                        return true;
                    }
                    if (numberIsNaN(a) && numberIsNaN(b)) {
                        return true;
                    }
                    return false;
                };
            /***/ },
            /***/ 5968: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_173140__)=>{
                "use strict";
                var define1 = __nested_webpack_require_173140__(1857);
                var callBind = __nested_webpack_require_173140__(8498);
                var implementation = __nested_webpack_require_173140__(2372);
                var getPolyfill = __nested_webpack_require_173140__(1937);
                var shim = __nested_webpack_require_173140__(5087);
                var polyfill = callBind(getPolyfill(), Object);
                define1(polyfill, {
                    getPolyfill: getPolyfill,
                    implementation: implementation,
                    shim: shim
                });
                module1.exports = polyfill;
            /***/ },
            /***/ 1937: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_173868__)=>{
                "use strict";
                var implementation = __nested_webpack_require_173868__(2372);
                module1.exports = function getPolyfill() {
                    return typeof Object.is === 'function' ? Object.is : implementation;
                };
            /***/ },
            /***/ 5087: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_174240__)=>{
                "use strict";
                var getPolyfill = __nested_webpack_require_174240__(1937);
                var define1 = __nested_webpack_require_174240__(1857);
                module1.exports = function shimObjectIs() {
                    var polyfill = getPolyfill();
                    define1(Object, {
                        is: polyfill
                    }, {
                        is: function testObjectIs() {
                            return Object.is !== polyfill;
                        }
                    });
                    return polyfill;
                };
            /***/ },
            /***/ 8160: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_174928__)=>{
                "use strict";
                var keysShim;
                if (!Object.keys) {
                    // modified from https://github.com/es-shims/es5-shim
                    var has = Object.prototype.hasOwnProperty;
                    var toStr = Object.prototype.toString;
                    var isArgs = __nested_webpack_require_174928__(968); // eslint-disable-line global-require
                    var isEnumerable = Object.prototype.propertyIsEnumerable;
                    var hasDontEnumBug = !isEnumerable.call({
                        toString: null
                    }, 'toString');
                    var hasProtoEnumBug = isEnumerable.call(function() {}, 'prototype');
                    var dontEnums = [
                        'toString',
                        'toLocaleString',
                        'valueOf',
                        'hasOwnProperty',
                        'isPrototypeOf',
                        'propertyIsEnumerable',
                        'constructor'
                    ];
                    var equalsConstructorPrototype = function(o) {
                        var ctor = o.constructor;
                        return ctor && ctor.prototype === o;
                    };
                    var excludedKeys = {
                        $applicationCache: true,
                        $console: true,
                        $external: true,
                        $frame: true,
                        $frameElement: true,
                        $frames: true,
                        $innerHeight: true,
                        $innerWidth: true,
                        $onmozfullscreenchange: true,
                        $onmozfullscreenerror: true,
                        $outerHeight: true,
                        $outerWidth: true,
                        $pageXOffset: true,
                        $pageYOffset: true,
                        $parent: true,
                        $scrollLeft: true,
                        $scrollTop: true,
                        $scrollX: true,
                        $scrollY: true,
                        $self: true,
                        $webkitIndexedDB: true,
                        $webkitStorageInfo: true,
                        $window: true
                    };
                    var hasAutomationEqualityBug = function() {
                        /* global window */ if (typeof window === 'undefined') {
                            return false;
                        }
                        for(var k in window){
                            try {
                                if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
                                    try {
                                        equalsConstructorPrototype(window[k]);
                                    } catch (e) {
                                        return true;
                                    }
                                }
                            } catch (e) {
                                return true;
                            }
                        }
                        return false;
                    }();
                    var equalsConstructorPrototypeIfNotBuggy = function(o) {
                        /* global window */ if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
                            return equalsConstructorPrototype(o);
                        }
                        try {
                            return equalsConstructorPrototype(o);
                        } catch (e) {
                            return false;
                        }
                    };
                    keysShim = function keys(object) {
                        var isObject = object !== null && typeof object === 'object';
                        var isFunction = toStr.call(object) === '[object Function]';
                        var isArguments = isArgs(object);
                        var isString = isObject && toStr.call(object) === '[object String]';
                        var theKeys = [];
                        if (!isObject && !isFunction && !isArguments) {
                            throw new TypeError('Object.keys called on a non-object');
                        }
                        var skipProto = hasProtoEnumBug && isFunction;
                        if (isString && object.length > 0 && !has.call(object, 0)) {
                            for(var i = 0; i < object.length; ++i){
                                theKeys.push(String(i));
                            }
                        }
                        if (isArguments && object.length > 0) {
                            for(var j = 0; j < object.length; ++j){
                                theKeys.push(String(j));
                            }
                        } else {
                            for(var name in object){
                                if (!(skipProto && name === 'prototype') && has.call(object, name)) {
                                    theKeys.push(String(name));
                                }
                            }
                        }
                        if (hasDontEnumBug) {
                            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
                            for(var k = 0; k < dontEnums.length; ++k){
                                if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
                                    theKeys.push(dontEnums[k]);
                                }
                            }
                        }
                        return theKeys;
                    };
                }
                module1.exports = keysShim;
            /***/ },
            /***/ 9228: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_180897__)=>{
                "use strict";
                var slice = Array.prototype.slice;
                var isArgs = __nested_webpack_require_180897__(968);
                var origKeys = Object.keys;
                var keysShim = origKeys ? function keys(o) {
                    return origKeys(o);
                } : __nested_webpack_require_180897__(8160);
                var originalKeys = Object.keys;
                keysShim.shim = function shimObjectKeys() {
                    if (Object.keys) {
                        var keysWorksWithArguments = function() {
                            // Safari 5.0 bug
                            var args = Object.keys(arguments);
                            return args && args.length === arguments.length;
                        }(1, 2);
                        if (!keysWorksWithArguments) {
                            Object.keys = function keys(object) {
                                if (isArgs(object)) {
                                    return originalKeys(slice.call(object));
                                }
                                return originalKeys(object);
                            };
                        }
                    } else {
                        Object.keys = keysShim;
                    }
                    return Object.keys || keysShim;
                };
                module1.exports = keysShim;
            /***/ },
            /***/ 968: /***/ (module1)=>{
                "use strict";
                var toStr = Object.prototype.toString;
                module1.exports = function isArguments(value) {
                    var str = toStr.call(value);
                    var isArgs = str === '[object Arguments]';
                    if (!isArgs) {
                        isArgs = str !== '[object Array]' && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value.callee) === '[object Function]';
                    }
                    return isArgs;
                };
            /***/ },
            /***/ 9907: /***/ (module1)=>{
                // shim for using process in browser
                var process = module1.exports = {};
                // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.
                var cachedSetTimeout;
                var cachedClearTimeout;
                function defaultSetTimout() {
                    throw new Error('setTimeout has not been defined');
                }
                function defaultClearTimeout() {
                    throw new Error('clearTimeout has not been defined');
                }
                (function() {
                    try {
                        if (typeof setTimeout === 'function') {
                            cachedSetTimeout = setTimeout;
                        } else {
                            cachedSetTimeout = defaultSetTimout;
                        }
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === 'function') {
                            cachedClearTimeout = clearTimeout;
                        } else {
                            cachedClearTimeout = defaultClearTimeout;
                        }
                    } catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                })();
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) {
                        //normal enviroments in sane situations
                        return setTimeout(fun, 0);
                    }
                    // if setTimeout wasn't available but was latter defined
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }
                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) {
                        //normal enviroments in sane situations
                        return clearTimeout(marker);
                    }
                    // if clearTimeout wasn't available but was latter defined
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                            return cachedClearTimeout.call(this, marker);
                        }
                    }
                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;
                function cleanUpNextTick() {
                    if (!draining || !currentQueue) {
                        return;
                    }
                    draining = false;
                    if (currentQueue.length) {
                        queue = currentQueue.concat(queue);
                    } else {
                        queueIndex = -1;
                    }
                    if (queue.length) {
                        drainQueue();
                    }
                }
                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;
                    var len = queue.length;
                    while(len){
                        currentQueue = queue;
                        queue = [];
                        while(++queueIndex < len){
                            if (currentQueue) {
                                currentQueue[queueIndex].run();
                            }
                        }
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }
                process.nextTick = function(fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) {
                        for(var i = 1; i < arguments.length; i++){
                            args[i - 1] = arguments[i];
                        }
                    }
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) {
                        runTimeout(drainQueue);
                    }
                };
                // v8 likes predictible objects
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function() {
                    this.fun.apply(null, this.array);
                };
                process.title = 'browser';
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = ''; // empty string to avoid regexp issues
                process.versions = {};
                function noop() {}
                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.prependListener = noop;
                process.prependOnceListener = noop;
                process.listeners = function(name) {
                    return [];
                };
                process.binding = function(name) {
                    throw new Error('process.binding is not supported');
                };
                process.cwd = function() {
                    return '/';
                };
                process.chdir = function(dir) {
                    throw new Error('process.chdir is not supported');
                };
                process.umask = function() {
                    return 0;
                };
            /***/ },
            /***/ 6108: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_191261__)=>{
                "use strict";
                var GetIntrinsic = __nested_webpack_require_191261__(528);
                var define1 = __nested_webpack_require_191261__(686);
                var hasDescriptors = __nested_webpack_require_191261__(7239)();
                var gOPD = __nested_webpack_require_191261__(9336);
                var $TypeError = __nested_webpack_require_191261__(3468);
                var $floor = GetIntrinsic('%Math.floor%');
                /** @type {import('.')} */ module1.exports = function setFunctionLength(fn, length) {
                    if (typeof fn !== 'function') {
                        throw new $TypeError('`fn` is not a function');
                    }
                    if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
                        throw new $TypeError('`length` must be a positive 32-bit integer');
                    }
                    var loose = arguments.length > 2 && !!arguments[2];
                    var functionLengthIsConfigurable = true;
                    var functionLengthIsWritable = true;
                    if ('length' in fn && gOPD) {
                        var desc = gOPD(fn, 'length');
                        if (desc && !desc.configurable) {
                            functionLengthIsConfigurable = false;
                        }
                        if (desc && !desc.writable) {
                            functionLengthIsWritable = false;
                        }
                    }
                    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
                        if (hasDescriptors) {
                            define1(/** @type {Parameters<define>[0]} */ fn, 'length', length, true, true);
                        } else {
                            define1(/** @type {Parameters<define>[0]} */ fn, 'length', length);
                        }
                    }
                    return fn;
                };
            /***/ },
            /***/ 2125: /***/ (__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_193335__)=>{
                "use strict";
                /* harmony export */ __nested_webpack_require_193335__.d(__nested_webpack_exports__, {
                    /* harmony export */ BaseService: ()=>/* binding */ BaseService
                });
                /* harmony import */ var vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_193335__(5501);
                /* harmony import */ var vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __nested_webpack_require_193335__.n(vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_193335__(7770);
                /* harmony import */ var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_193335__(8041);
                function _define_property(obj, key, value) {
                    if (key in obj) {
                        Object.defineProperty(obj, key, {
                            value: value,
                            enumerable: true,
                            configurable: true,
                            writable: true
                        });
                    } else {
                        obj[key] = value;
                    }
                    return obj;
                }
                class BaseService {
                    addDocument(document1) {
                        this.documents[document1.uri] = vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__ /* .TextDocument */ .V.create(document1.uri, document1.languageId, document1.version, document1.text);
                    }
                    getDocument(uri) {
                        return this.documents[uri];
                    }
                    removeDocument(document1) {
                        delete this.documents[document1.uri];
                        if (this.options[document1.uri]) {
                            delete this.options[document1.uri];
                        }
                    }
                    renameDocument(document1, newDocumentUri) {
                        this.documents[newDocumentUri] = this.documents[document1.uri];
                        this.options[newDocumentUri] = this.options[document1.uri];
                        this.removeDocument(document1);
                    }
                    getDocumentValue(uri) {
                        var _this_getDocument;
                        return (_this_getDocument = this.getDocument(uri)) === null || _this_getDocument === void 0 ? void 0 : _this_getDocument.getText();
                    }
                    setValue(identifier, value) {
                        let document1 = this.getDocument(identifier.uri);
                        if (document1) {
                            document1 = vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__ /* .TextDocument */ .V.create(document1.uri, document1.languageId, document1.version, value);
                            this.documents[document1.uri] = document1;
                        }
                    }
                    setGlobalOptions(options) {
                        this.globalOptions = options !== null && options !== void 0 ? options : {};
                    }
                    setWorkspace(workspaceUri) {
                        this.workspaceUri = workspaceUri;
                    }
                    setOptions(documentUri, options, merge = false) {
                        this.options[documentUri] = merge ? (0, _utils__WEBPACK_IMPORTED_MODULE_2__ /* .mergeObjects */ .rL)(options, this.options[documentUri]) : options;
                    }
                    getOption(documentUri, optionName) {
                        if (this.options[documentUri] && this.options[documentUri][optionName]) {
                            return this.options[documentUri][optionName];
                        } else {
                            return this.globalOptions[optionName];
                        }
                    }
                    applyDeltas(identifier, deltas) {
                        let document1 = this.getDocument(identifier.uri);
                        if (document1) vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__ /* .TextDocument */ .V.update(document1, deltas, identifier.version);
                    }
                    async doComplete(document1, position) {
                        return null;
                    }
                    async doInlineComplete(document1, position) {
                        return null;
                    }
                    async doHover(document1, position) {
                        return null;
                    }
                    async doResolve(item) {
                        return null;
                    }
                    async doValidation(document1) {
                        return [];
                    }
                    format(document1, range, options) {
                        return Promise.resolve([]);
                    }
                    async provideSignatureHelp(document1, position) {
                        return null;
                    }
                    async findDocumentHighlights(document1, position) {
                        return [];
                    }
                    get optionsToFilterDiagnostics() {
                        var _this_globalOptions_errorCodesToIgnore, _this_globalOptions_errorCodesToTreatAsWarning, _this_globalOptions_errorCodesToTreatAsInfo, _this_globalOptions_errorMessagesToIgnore, _this_globalOptions_errorMessagesToTreatAsWarning, _this_globalOptions_errorMessagesToTreatAsInfo;
                        return {
                            errorCodesToIgnore: (_this_globalOptions_errorCodesToIgnore = this.globalOptions.errorCodesToIgnore) !== null && _this_globalOptions_errorCodesToIgnore !== void 0 ? _this_globalOptions_errorCodesToIgnore : [],
                            errorCodesToTreatAsWarning: (_this_globalOptions_errorCodesToTreatAsWarning = this.globalOptions.errorCodesToTreatAsWarning) !== null && _this_globalOptions_errorCodesToTreatAsWarning !== void 0 ? _this_globalOptions_errorCodesToTreatAsWarning : [],
                            errorCodesToTreatAsInfo: (_this_globalOptions_errorCodesToTreatAsInfo = this.globalOptions.errorCodesToTreatAsInfo) !== null && _this_globalOptions_errorCodesToTreatAsInfo !== void 0 ? _this_globalOptions_errorCodesToTreatAsInfo : [],
                            errorMessagesToIgnore: (_this_globalOptions_errorMessagesToIgnore = this.globalOptions.errorMessagesToIgnore) !== null && _this_globalOptions_errorMessagesToIgnore !== void 0 ? _this_globalOptions_errorMessagesToIgnore : [],
                            errorMessagesToTreatAsWarning: (_this_globalOptions_errorMessagesToTreatAsWarning = this.globalOptions.errorMessagesToTreatAsWarning) !== null && _this_globalOptions_errorMessagesToTreatAsWarning !== void 0 ? _this_globalOptions_errorMessagesToTreatAsWarning : [],
                            errorMessagesToTreatAsInfo: (_this_globalOptions_errorMessagesToTreatAsInfo = this.globalOptions.errorMessagesToTreatAsInfo) !== null && _this_globalOptions_errorMessagesToTreatAsInfo !== void 0 ? _this_globalOptions_errorMessagesToTreatAsInfo : []
                        };
                    }
                    getSemanticTokens(document1, range) {
                        return Promise.resolve(null);
                    }
                    dispose() {
                        return Promise.resolve();
                    }
                    closeConnection() {
                        return Promise.resolve();
                    }
                    getCodeActions(document1, range, context) {
                        return Promise.resolve(null);
                    }
                    executeCommand(command, args) {
                        return Promise.resolve(null);
                    }
                    sendAppliedResult(result, callbackId) {}
                    sendRequest(name, args) {
                        return Promise.resolve(null);
                    }
                    sendResponse(callbackId, args) {
                        return;
                    }
                    constructor(mode, workspaceUri){
                        _define_property(this, "serviceName", void 0);
                        _define_property(this, "mode", void 0);
                        _define_property(this, "documents", {});
                        _define_property(this, "options", {});
                        _define_property(this, "globalOptions", {});
                        _define_property(this, "serviceData", void 0);
                        _define_property(this, "serviceCapabilities", {});
                        _define_property(this, "workspaceUri", void 0);
                        _define_property(this, "clientCapabilities", {
                            textDocument: {
                                diagnostic: {
                                    dynamicRegistration: true,
                                    relatedDocumentSupport: true
                                },
                                publishDiagnostics: {
                                    relatedInformation: true,
                                    versionSupport: false,
                                    tagSupport: {
                                        valueSet: [
                                            vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0__.DiagnosticTag.Unnecessary,
                                            vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0__.DiagnosticTag.Deprecated
                                        ]
                                    }
                                },
                                hover: {
                                    dynamicRegistration: true,
                                    contentFormat: [
                                        'markdown',
                                        'plaintext'
                                    ]
                                },
                                synchronization: {
                                    dynamicRegistration: true,
                                    willSave: false,
                                    didSave: false,
                                    willSaveWaitUntil: false
                                },
                                formatting: {
                                    dynamicRegistration: true
                                },
                                completion: {
                                    dynamicRegistration: true,
                                    completionItem: {
                                        snippetSupport: true,
                                        commitCharactersSupport: false,
                                        documentationFormat: [
                                            'markdown',
                                            'plaintext'
                                        ],
                                        deprecatedSupport: false,
                                        preselectSupport: false
                                    },
                                    contextSupport: false
                                },
                                signatureHelp: {
                                    signatureInformation: {
                                        documentationFormat: [
                                            'markdown',
                                            'plaintext'
                                        ],
                                        activeParameterSupport: true
                                    }
                                },
                                documentHighlight: {
                                    dynamicRegistration: true
                                },
                                semanticTokens: {
                                    multilineTokenSupport: false,
                                    overlappingTokenSupport: false,
                                    tokenTypes: [],
                                    tokenModifiers: [],
                                    formats: [
                                        "relative"
                                    ],
                                    requests: {
                                        full: {
                                            delta: false
                                        },
                                        range: true
                                    },
                                    augmentsSyntaxTokens: true
                                },
                                codeAction: {
                                    dynamicRegistration: true
                                },
                                inlineCompletion: {
                                    dynamicRegistration: true
                                }
                            },
                            window: {
                                showDocument: {
                                    support: true
                                }
                            },
                            workspace: {
                                didChangeConfiguration: {
                                    dynamicRegistration: true
                                },
                                executeCommand: {
                                    dynamicRegistration: true
                                },
                                applyEdit: true,
                                workspaceEdit: {
                                    failureHandling: "abort",
                                    normalizesLineEndings: false,
                                    documentChanges: false
                                }
                            }
                        });
                        this.mode = mode;
                        this.workspaceUri = workspaceUri;
                        this.serviceName = "BaseService";
                        this.serviceData = {
                            className: "BaseService",
                            modes: "",
                            module: ()=>{}
                        };
                    }
                }
            /***/ },
            /***/ 4849: /***/ (__unused_webpack_module, exports1)=>{
                /*
  php.js 0.1.0 <http://phpjs.hertzen.com/>
  Copyright (c) 2013 Niklas von Hertzen

  Released under MIT License

  This file contains:
  - [var PHP = {Constants:{}};]
  - src/modules/tokenizer/constants.js
  - src/parser/lexer.js
  - src/parser/parser.js
  - src/parser/yyn.js
  - src/parser/yyn_stmt.js
  - src/parser/yyn_expr.js
  - src/parser/yyn_scalar.js
*/ var PHP = {
                    Constants: {}
                };
                PHP.Constants.T_THROW = 317;
                PHP.Constants.T_INCLUDE = 272;
                PHP.Constants.T_INCLUDE_ONCE = 273;
                PHP.Constants.T_EVAL = 274;
                PHP.Constants.T_REQUIRE = 275;
                PHP.Constants.T_REQUIRE_ONCE = 276;
                PHP.Constants.T_LOGICAL_OR = 277;
                PHP.Constants.T_LOGICAL_XOR = 278;
                PHP.Constants.T_LOGICAL_AND = 279;
                PHP.Constants.T_PRINT = 280;
                PHP.Constants.T_YIELD = 281;
                PHP.Constants.T_DOUBLE_ARROW = 386;
                PHP.Constants.T_YIELD_FROM = 282;
                PHP.Constants.T_PLUS_EQUAL = 352;
                PHP.Constants.T_MINUS_EQUAL = 353;
                PHP.Constants.T_MUL_EQUAL = 354;
                PHP.Constants.T_DIV_EQUAL = 355;
                PHP.Constants.T_CONCAT_EQUAL = 356;
                PHP.Constants.T_MOD_EQUAL = 357;
                PHP.Constants.T_AND_EQUAL = 358;
                PHP.Constants.T_OR_EQUAL = 359;
                PHP.Constants.T_XOR_EQUAL = 360;
                PHP.Constants.T_SL_EQUAL = 361;
                PHP.Constants.T_SR_EQUAL = 362;
                PHP.Constants.T_POW_EQUAL = 402;
                PHP.Constants.T_COALESCE_EQUAL = 363;
                PHP.Constants.T_COALESCE = 400;
                PHP.Constants.T_BOOLEAN_OR = 364;
                PHP.Constants.T_BOOLEAN_AND = 365;
                PHP.Constants.T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG = 404;
                PHP.Constants.T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG = 403;
                PHP.Constants.T_IS_EQUAL = 366;
                PHP.Constants.T_IS_NOT_EQUAL = 367;
                PHP.Constants.T_IS_IDENTICAL = 368;
                PHP.Constants.T_IS_NOT_IDENTICAL = 369;
                PHP.Constants.T_SPACESHIP = 372;
                PHP.Constants.T_IS_SMALLER_OR_EQUAL = 370;
                PHP.Constants.T_IS_GREATER_OR_EQUAL = 371;
                PHP.Constants.T_SL = 373;
                PHP.Constants.T_SR = 374;
                PHP.Constants.T_INSTANCEOF = 283;
                PHP.Constants.T_INC = 375;
                PHP.Constants.T_DEC = 376;
                PHP.Constants.T_INT_CAST = 377;
                PHP.Constants.T_DOUBLE_CAST = 378;
                PHP.Constants.T_STRING_CAST = 379;
                PHP.Constants.T_ARRAY_CAST = 380;
                PHP.Constants.T_OBJECT_CAST = 381;
                PHP.Constants.T_BOOL_CAST = 382;
                PHP.Constants.T_UNSET_CAST = 383;
                PHP.Constants.T_POW = 401;
                PHP.Constants.T_NEW = 284;
                PHP.Constants.T_CLONE = 285;
                PHP.Constants.T_EXIT = 286;
                PHP.Constants.T_IF = 287;
                PHP.Constants.T_ELSEIF = 288;
                PHP.Constants.T_ELSE = 289;
                PHP.Constants.T_ENDIF = 290;
                PHP.Constants.T_LNUMBER = 260;
                PHP.Constants.T_DNUMBER = 261;
                PHP.Constants.T_STRING = 262;
                PHP.Constants.T_STRING_VARNAME = 270;
                PHP.Constants.T_VARIABLE = 266;
                PHP.Constants.T_NUM_STRING = 271;
                PHP.Constants.T_INLINE_HTML = 267;
                PHP.Constants.T_ENCAPSED_AND_WHITESPACE = 268;
                PHP.Constants.T_CONSTANT_ENCAPSED_STRING = 269;
                PHP.Constants.T_ECHO = 291;
                PHP.Constants.T_DO = 292;
                PHP.Constants.T_WHILE = 293;
                PHP.Constants.T_ENDWHILE = 294;
                PHP.Constants.T_FOR = 295;
                PHP.Constants.T_ENDFOR = 296;
                PHP.Constants.T_FOREACH = 297;
                PHP.Constants.T_ENDFOREACH = 298;
                PHP.Constants.T_DECLARE = 299;
                PHP.Constants.T_ENDDECLARE = 300;
                PHP.Constants.T_AS = 301;
                PHP.Constants.T_SWITCH = 302;
                PHP.Constants.T_MATCH = 306;
                PHP.Constants.T_ENDSWITCH = 303;
                PHP.Constants.T_CASE = 304;
                PHP.Constants.T_DEFAULT = 305;
                PHP.Constants.T_BREAK = 307;
                PHP.Constants.T_CONTINUE = 308;
                PHP.Constants.T_GOTO = 309;
                PHP.Constants.T_FUNCTION = 310;
                PHP.Constants.T_FN = 311;
                PHP.Constants.T_CONST = 312;
                PHP.Constants.T_RETURN = 313;
                PHP.Constants.T_TRY = 314;
                PHP.Constants.T_CATCH = 315;
                PHP.Constants.T_FINALLY = 316;
                PHP.Constants.T_THROW = 317;
                PHP.Constants.T_USE = 318;
                PHP.Constants.T_INSTEADOF = 319;
                PHP.Constants.T_GLOBAL = 320;
                PHP.Constants.T_STATIC = 321;
                PHP.Constants.T_ABSTRACT = 322;
                PHP.Constants.T_FINAL = 323;
                PHP.Constants.T_PRIVATE = 324;
                PHP.Constants.T_PROTECTED = 325;
                PHP.Constants.T_PUBLIC = 326;
                PHP.Constants.T_READONLY = 327;
                PHP.Constants.T_VAR = 328;
                PHP.Constants.T_UNSET = 329;
                PHP.Constants.T_ISSET = 330;
                PHP.Constants.T_EMPTY = 331;
                PHP.Constants.T_HALT_COMPILER = 332;
                PHP.Constants.T_CLASS = 333;
                PHP.Constants.T_TRAIT = 334;
                PHP.Constants.T_INTERFACE = 335;
                PHP.Constants.T_ENUM = 336;
                PHP.Constants.T_EXTENDS = 337;
                PHP.Constants.T_IMPLEMENTS = 338;
                PHP.Constants.T_OBJECT_OPERATOR = 384;
                PHP.Constants.T_NULLSAFE_OBJECT_OPERATOR = 385;
                PHP.Constants.T_DOUBLE_ARROW = 386;
                PHP.Constants.T_LIST = 340;
                PHP.Constants.T_ARRAY = 341;
                PHP.Constants.T_CALLABLE = 342;
                PHP.Constants.T_CLASS_C = 346;
                PHP.Constants.T_TRAIT_C = 347;
                PHP.Constants.T_METHOD_C = 348;
                PHP.Constants.T_FUNC_C = 349;
                PHP.Constants.T_LINE = 343;
                PHP.Constants.T_FILE = 344;
                PHP.Constants.T_START_HEREDOC = 393;
                PHP.Constants.T_END_HEREDOC = 394;
                PHP.Constants.T_DOLLAR_OPEN_CURLY_BRACES = 395;
                PHP.Constants.T_CURLY_OPEN = 396;
                PHP.Constants.T_PAAMAYIM_NEKUDOTAYIM = 397;
                PHP.Constants.T_NAMESPACE = 339;
                PHP.Constants.T_NS_C = 350;
                PHP.Constants.T_DIR = 345;
                PHP.Constants.T_NS_SEPARATOR = 398;
                PHP.Constants.T_ELLIPSIS = 399;
                PHP.Constants.T_NAME_FULLY_QUALIFIED = 263;
                PHP.Constants.T_NAME_QUALIFIED = 265;
                PHP.Constants.T_NAME_RELATIVE = 264;
                PHP.Constants.T_ATTRIBUTE = 351;
                PHP.Constants.T_ENUM = 336;
                PHP.Constants.T_BAD_CHARACTER = 405;
                PHP.Constants.T_COMMENT = 387;
                PHP.Constants.T_DOC_COMMENT = 388;
                PHP.Constants.T_OPEN_TAG = 389;
                PHP.Constants.T_OPEN_TAG_WITH_ECHO = 390;
                PHP.Constants.T_CLOSE_TAG = 391;
                PHP.Constants.T_WHITESPACE = 392;
                PHP.Lexer = function(src, ini) {
                    var heredoc, heredocEndAllowed, stateStack = [
                        'INITIAL'
                    ], stackPos = 0, swapState = function(state) {
                        stateStack[stackPos] = state;
                    }, pushState = function(state) {
                        stateStack[++stackPos] = state;
                    }, popState = function() {
                        --stackPos;
                    }, shortOpenTag = ini === undefined || /^(on|true|1)$/i.test(ini.short_open_tag), openTag = shortOpenTag ? /^(\<\?php(?:\r\n|[ \t\r\n])|<\?|\<script language\=('|")?php('|")?\>)/i : /^(\<\?php(?:\r\n|[ \t\r\n])|\<script language\=('|")?php('|")?\>)/i, inlineHtml = shortOpenTag ? /[^<]*(?:<(?!\?|script language\=('|")?php('|")?\>)[^<]*)*/i : /[^<]*(?:<(?!\?=|\?php[ \t\r\n]|script language\=('|")?php('|")?\>)[^<]*)*/i, labelRegexPart = '[a-zA-Z_\\x7f-\\uffff][a-zA-Z0-9_\\x7f-\\uffff]*', stringRegexPart = function(quote) {
                        // Matches non-interpolated portion of interpolated string
                        return '[^' + quote + '\\\\${]*(?:(?:\\\\[\\s\\S]|\\$(?!\\{|[a-zA-Z_\\x7f-\\uffff])|\\{(?!\\$))[^' + quote + '\\\\${]*)*';
                    }, sharedStringTokens = [
                        {
                            value: PHP.Constants.T_VARIABLE,
                            re: new RegExp('^\\$' + labelRegexPart + '(?=\\[)'),
                            func: function() {
                                pushState('VAR_OFFSET');
                            }
                        },
                        {
                            value: PHP.Constants.T_VARIABLE,
                            re: new RegExp('^\\$' + labelRegexPart + '(?=->' + labelRegexPart + ')'),
                            func: function() {
                                pushState('LOOKING_FOR_PROPERTY');
                            }
                        },
                        {
                            value: PHP.Constants.T_DOLLAR_OPEN_CURLY_BRACES,
                            re: new RegExp('^\\$\\{(?=' + labelRegexPart + '[\\[}])'),
                            func: function() {
                                pushState('LOOKING_FOR_VARNAME');
                            }
                        },
                        {
                            value: PHP.Constants.T_VARIABLE,
                            re: new RegExp('^\\$' + labelRegexPart)
                        },
                        {
                            value: PHP.Constants.T_DOLLAR_OPEN_CURLY_BRACES,
                            re: /^\$\{/,
                            func: function() {
                                pushState('IN_SCRIPTING');
                            }
                        },
                        {
                            value: PHP.Constants.T_CURLY_OPEN,
                            re: /^\{(?=\$)/,
                            func: function() {
                                pushState('IN_SCRIPTING');
                            }
                        }
                    ], data = {
                        // Outside of PHP
                        'INITIAL': [
                            {
                                value: PHP.Constants.T_OPEN_TAG_WITH_ECHO,
                                re: /^<\?=/i,
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: PHP.Constants.T_OPEN_TAG,
                                re: openTag,
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: PHP.Constants.T_INLINE_HTML,
                                re: inlineHtml
                            }
                        ],
                        'IN_SCRIPTING': [
                            // Match whitespace first
                            {
                                value: PHP.Constants.T_WHITESPACE,
                                re: /^[ \n\r\t]+/
                            },
                            // Keywords, sorted alphabetically
                            {
                                value: PHP.Constants.T_ABSTRACT,
                                re: /^abstract\b/i
                            },
                            {
                                value: PHP.Constants.T_LOGICAL_AND,
                                re: /^and\b/i
                            },
                            {
                                value: PHP.Constants.T_ARRAY,
                                re: /^array\b/i
                            },
                            {
                                value: PHP.Constants.T_AS,
                                re: /^as\b/i
                            },
                            {
                                value: PHP.Constants.T_BREAK,
                                re: /^break\b/i
                            },
                            {
                                value: PHP.Constants.T_CALLABLE,
                                re: /^callable\b/i
                            },
                            {
                                value: PHP.Constants.T_CASE,
                                re: /^case\b/i
                            },
                            {
                                value: PHP.Constants.T_CATCH,
                                re: /^catch\b/i
                            },
                            {
                                value: PHP.Constants.T_CLASS,
                                re: /^class\b/i
                            },
                            {
                                value: PHP.Constants.T_CLONE,
                                re: /^clone\b/i
                            },
                            {
                                value: PHP.Constants.T_CONST,
                                re: /^const\b/i
                            },
                            {
                                value: PHP.Constants.T_CONTINUE,
                                re: /^continue\b/i
                            },
                            {
                                value: PHP.Constants.T_DECLARE,
                                re: /^declare\b/i
                            },
                            {
                                value: PHP.Constants.T_DEFAULT,
                                re: /^default\b/i
                            },
                            {
                                value: PHP.Constants.T_DO,
                                re: /^do\b/i
                            },
                            {
                                value: PHP.Constants.T_ECHO,
                                re: /^echo\b/i
                            },
                            {
                                value: PHP.Constants.T_ELSE,
                                re: /^else\b/i
                            },
                            {
                                value: PHP.Constants.T_ELSEIF,
                                re: /^elseif\b/i
                            },
                            {
                                value: PHP.Constants.T_ENUM,
                                re: /^enum\b/i
                            },
                            {
                                value: PHP.Constants.T_ENDDECLARE,
                                re: /^enddeclare\b/i
                            },
                            {
                                value: PHP.Constants.T_ENDFOR,
                                re: /^endfor\b/i
                            },
                            {
                                value: PHP.Constants.T_ENDFOREACH,
                                re: /^endforeach\b/i
                            },
                            {
                                value: PHP.Constants.T_ENDIF,
                                re: /^endif\b/i
                            },
                            {
                                value: PHP.Constants.T_ENDSWITCH,
                                re: /^endswitch\b/i
                            },
                            {
                                value: PHP.Constants.T_ENDWHILE,
                                re: /^endwhile\b/i
                            },
                            {
                                value: PHP.Constants.T_ENUM,
                                re: /^enum\b/i
                            },
                            {
                                value: PHP.Constants.T_EMPTY,
                                re: /^empty\b/i
                            },
                            {
                                value: PHP.Constants.T_EVAL,
                                re: /^eval\b/i
                            },
                            {
                                value: PHP.Constants.T_EXIT,
                                re: /^(?:exit|die)\b/i
                            },
                            {
                                value: PHP.Constants.T_EXTENDS,
                                re: /^extends\b/i
                            },
                            {
                                value: PHP.Constants.T_FINAL,
                                re: /^final\b/i
                            },
                            {
                                value: PHP.Constants.T_FINALLY,
                                re: /^finally\b/i
                            },
                            {
                                value: PHP.Constants.T_FN,
                                re: /^fn\b/i
                            },
                            {
                                value: PHP.Constants.T_FOR,
                                re: /^for\b/i
                            },
                            {
                                value: PHP.Constants.T_FOREACH,
                                re: /^foreach\b/i
                            },
                            {
                                value: PHP.Constants.T_FUNCTION,
                                re: /^function\b/i
                            },
                            {
                                value: PHP.Constants.T_GLOBAL,
                                re: /^global\b/i
                            },
                            {
                                value: PHP.Constants.T_GOTO,
                                re: /^goto\b/i
                            },
                            {
                                value: PHP.Constants.T_IF,
                                re: /^if\b/i
                            },
                            {
                                value: PHP.Constants.T_IMPLEMENTS,
                                re: /^implements\b/i
                            },
                            {
                                value: PHP.Constants.T_INCLUDE,
                                re: /^include\b/i
                            },
                            {
                                value: PHP.Constants.T_INCLUDE_ONCE,
                                re: /^include_once\b/i
                            },
                            {
                                value: PHP.Constants.T_INSTANCEOF,
                                re: /^instanceof\b/i
                            },
                            {
                                value: PHP.Constants.T_INSTEADOF,
                                re: /^insteadof\b/i
                            },
                            {
                                value: PHP.Constants.T_INTERFACE,
                                re: /^interface\b/i
                            },
                            {
                                value: PHP.Constants.T_ISSET,
                                re: /^isset\b/i
                            },
                            {
                                value: PHP.Constants.T_LIST,
                                re: /^list\b/i
                            },
                            {
                                value: PHP.Constants.T_MATCH,
                                re: /^match\b/i
                            },
                            {
                                value: PHP.Constants.T_NEW,
                                re: /^new\b/i
                            },
                            {
                                value: PHP.Constants.T_LOGICAL_OR,
                                re: /^or\b/i
                            },
                            {
                                value: PHP.Constants.T_PRINT,
                                re: /^print\b/i
                            },
                            {
                                value: PHP.Constants.T_PRIVATE,
                                re: /^private\b/i
                            },
                            {
                                value: PHP.Constants.T_PROTECTED,
                                re: /^protected\b/i
                            },
                            {
                                value: PHP.Constants.T_PUBLIC,
                                re: /^public\b/i
                            },
                            {
                                value: PHP.Constants.T_READONLY,
                                re: /^readonly\b/i
                            },
                            {
                                value: PHP.Constants.T_REQUIRE,
                                re: /^require\b/i
                            },
                            {
                                value: PHP.Constants.T_REQUIRE_ONCE,
                                re: /^require_once\b/i
                            },
                            {
                                value: PHP.Constants.T_STATIC,
                                re: /^static\b/i
                            },
                            {
                                value: PHP.Constants.T_SWITCH,
                                re: /^switch\b/i
                            },
                            {
                                value: PHP.Constants.T_THROW,
                                re: /^throw\b/i
                            },
                            {
                                value: PHP.Constants.T_TRAIT,
                                re: /^trait\b/i
                            },
                            {
                                value: PHP.Constants.T_TRY,
                                re: /^try\b/i
                            },
                            {
                                value: PHP.Constants.T_UNSET,
                                re: /^unset\b/i
                            },
                            {
                                value: PHP.Constants.T_USE,
                                re: /^use\b/i
                            },
                            {
                                value: PHP.Constants.T_VAR,
                                re: /^var\b/i
                            },
                            {
                                value: PHP.Constants.T_WHILE,
                                re: /^while\b/i
                            },
                            {
                                value: PHP.Constants.T_LOGICAL_XOR,
                                re: /^xor\b/i
                            },
                            {
                                value: PHP.Constants.T_YIELD_FROM,
                                re: /^yield\s+from\b/i
                            },
                            {
                                value: PHP.Constants.T_YIELD,
                                re: /^yield\b/i
                            },
                            {
                                value: PHP.Constants.T_RETURN,
                                re: /^return\b/i
                            },
                            {
                                value: PHP.Constants.T_METHOD_C,
                                re: /^__METHOD__\b/i
                            },
                            {
                                value: PHP.Constants.T_LINE,
                                re: /^__LINE__\b/i
                            },
                            {
                                value: PHP.Constants.T_FILE,
                                re: /^__FILE__\b/i
                            },
                            {
                                value: PHP.Constants.T_FUNC_C,
                                re: /^__FUNCTION__\b/i
                            },
                            {
                                value: PHP.Constants.T_NS_C,
                                re: /^__NAMESPACE__\b/i
                            },
                            {
                                value: PHP.Constants.T_TRAIT_C,
                                re: /^__TRAIT__\b/i
                            },
                            {
                                value: PHP.Constants.T_DIR,
                                re: /^__DIR__\b/i
                            },
                            {
                                value: PHP.Constants.T_CLASS_C,
                                re: /^__CLASS__\b/i
                            },
                            // Other tokens
                            {
                                value: PHP.Constants.T_AND_EQUAL,
                                re: /^&=/
                            },
                            {
                                value: PHP.Constants.T_ARRAY_CAST,
                                re: /^\([ \t]*array[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_BOOL_CAST,
                                re: /^\([ \t]*(?:bool|boolean)[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_DOUBLE_CAST,
                                re: /^\([ \t]*(?:real|float|double)[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_INT_CAST,
                                re: /^\([ \t]*(?:int|integer)[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_OBJECT_CAST,
                                re: /^\([ \t]*object[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_STRING_CAST,
                                re: /^\([ \t]*(?:binary|string)[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_UNSET_CAST,
                                re: /^\([ \t]*unset[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_BOOLEAN_AND,
                                re: /^&&/
                            },
                            {
                                value: PHP.Constants.T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG,
                                re: /^&(?=[$])/
                            },
                            {
                                value: PHP.Constants.T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG,
                                re: /^(&)(?=[^\$|^&])/
                            },
                            {
                                value: PHP.Constants.T_BOOLEAN_OR,
                                re: /^\|\|/
                            },
                            {
                                value: PHP.Constants.T_CLOSE_TAG,
                                re: /^(?:\?>|<\/script>)(\r\n|\r|\n)?/i,
                                func: function() {
                                    swapState('INITIAL');
                                }
                            },
                            {
                                value: PHP.Constants.T_DOUBLE_ARROW,
                                re: /^=>/
                            },
                            {
                                value: PHP.Constants.T_PAAMAYIM_NEKUDOTAYIM,
                                re: /^::/
                            },
                            {
                                value: PHP.Constants.T_INC,
                                re: /^\+\+/
                            },
                            {
                                value: PHP.Constants.T_DEC,
                                re: /^--/
                            },
                            {
                                value: PHP.Constants.T_CONCAT_EQUAL,
                                re: /^\.=/
                            },
                            {
                                value: PHP.Constants.T_DIV_EQUAL,
                                re: /^\/=/
                            },
                            {
                                value: PHP.Constants.T_XOR_EQUAL,
                                re: /^\^=/
                            },
                            {
                                value: PHP.Constants.T_MUL_EQUAL,
                                re: /^\*=/
                            },
                            {
                                value: PHP.Constants.T_MOD_EQUAL,
                                re: /^%=/
                            },
                            {
                                value: PHP.Constants.T_SL_EQUAL,
                                re: /^<<=/
                            },
                            {
                                value: PHP.Constants.T_START_HEREDOC,
                                re: new RegExp('^[bB]?<<<[ \\t]*\'(' + labelRegexPart + ')\'(?:\\r\\n|\\r|\\n)'),
                                func: function(result) {
                                    heredoc = result[1];
                                    swapState('NOWDOC');
                                }
                            },
                            {
                                value: PHP.Constants.T_START_HEREDOC,
                                re: new RegExp('^[bB]?<<<[ \\t]*("?)(' + labelRegexPart + ')\\1(?:\\r\\n|\\r|\\n)'),
                                func: function(result) {
                                    heredoc = result[2];
                                    heredocEndAllowed = true;
                                    swapState('HEREDOC');
                                }
                            },
                            {
                                value: PHP.Constants.T_SL,
                                re: /^<</
                            },
                            {
                                value: PHP.Constants.T_SPACESHIP,
                                re: /^<=>/
                            },
                            {
                                value: PHP.Constants.T_IS_SMALLER_OR_EQUAL,
                                re: /^<=/
                            },
                            {
                                value: PHP.Constants.T_SR_EQUAL,
                                re: /^>>=/
                            },
                            {
                                value: PHP.Constants.T_SR,
                                re: /^>>/
                            },
                            {
                                value: PHP.Constants.T_IS_GREATER_OR_EQUAL,
                                re: /^>=/
                            },
                            {
                                value: PHP.Constants.T_OR_EQUAL,
                                re: /^\|=/
                            },
                            {
                                value: PHP.Constants.T_PLUS_EQUAL,
                                re: /^\+=/
                            },
                            {
                                value: PHP.Constants.T_MINUS_EQUAL,
                                re: /^-=/
                            },
                            {
                                value: PHP.Constants.T_OBJECT_OPERATOR,
                                re: new RegExp('^->(?=[ \n\r\t]*' + labelRegexPart + ')'),
                                func: function() {
                                    pushState('LOOKING_FOR_PROPERTY');
                                }
                            },
                            {
                                value: PHP.Constants.T_OBJECT_OPERATOR,
                                re: /^->/i
                            },
                            {
                                value: PHP.Constants.T_ELLIPSIS,
                                re: /^\.\.\./
                            },
                            {
                                value: PHP.Constants.T_POW_EQUAL,
                                re: /^\*\*=/
                            },
                            {
                                value: PHP.Constants.T_POW,
                                re: /^\*\*/
                            },
                            {
                                value: PHP.Constants.T_COALESCE_EQUAL,
                                re: /^\?\?=/
                            },
                            {
                                value: PHP.Constants.T_COALESCE,
                                re: /^\?\?/
                            },
                            {
                                value: PHP.Constants.T_NULLSAFE_OBJECT_OPERATOR,
                                re: /^\?->/
                            },
                            {
                                value: PHP.Constants.T_NAME_FULLY_QUALIFIED,
                                re: /^\\\w+(?:\\\w+)*/
                            },
                            {
                                value: PHP.Constants.T_NAME_QUALIFIED,
                                re: /^\w+\\\w+(?:\\\w+)*/
                            },
                            {
                                value: PHP.Constants.T_NAME_RELATIVE,
                                re: /^namespace\\\w+(?:\\\w+)*/
                            },
                            {
                                value: PHP.Constants.T_NAMESPACE,
                                re: /^namespace\b/i
                            },
                            {
                                value: PHP.Constants.T_ATTRIBUTE,
                                re: /^#\[([\S\s]*?)]/
                            },
                            {
                                value: PHP.Constants.T_COMMENT,
                                re: /^\/\*([\S\s]*?)(?:\*\/|$)/
                            },
                            {
                                value: PHP.Constants.T_COMMENT,
                                re: /^(?:\/\/|#)[^\r\n?]*(?:\?(?!>)[^\r\n?]*)*(?:\r\n|\r|\n)?/
                            },
                            {
                                value: PHP.Constants.T_IS_IDENTICAL,
                                re: /^===/
                            },
                            {
                                value: PHP.Constants.T_IS_EQUAL,
                                re: /^==/
                            },
                            {
                                value: PHP.Constants.T_IS_NOT_IDENTICAL,
                                re: /^!==/
                            },
                            {
                                value: PHP.Constants.T_IS_NOT_EQUAL,
                                re: /^(!=|<>)/
                            },
                            {
                                value: PHP.Constants.T_DNUMBER,
                                re: /^(?:[0-9]+\.[0-9]*|\.[0-9]+)(?:[eE][+-]?[0-9]+)?/
                            },
                            {
                                value: PHP.Constants.T_DNUMBER,
                                re: /^[0-9]+[eE][+-]?[0-9]+/
                            },
                            {
                                value: PHP.Constants.T_LNUMBER,
                                re: /^(?:0x[0-9A-F]+|0b[01]+|[0-9]+)/i
                            },
                            {
                                value: PHP.Constants.T_VARIABLE,
                                re: new RegExp('^\\$' + labelRegexPart)
                            },
                            {
                                value: PHP.Constants.T_CONSTANT_ENCAPSED_STRING,
                                re: /^[bB]?'[^'\\]*(?:\\[\s\S][^'\\]*)*'/
                            },
                            {
                                value: PHP.Constants.T_CONSTANT_ENCAPSED_STRING,
                                re: new RegExp('^[bB]?"' + stringRegexPart('"') + '"')
                            },
                            {
                                value: -1,
                                re: /^[bB]?"/,
                                func: function() {
                                    swapState('DOUBLE_QUOTES');
                                }
                            },
                            {
                                value: -1,
                                re: /^`/,
                                func: function() {
                                    swapState('BACKTICKS');
                                }
                            },
                            {
                                value: PHP.Constants.T_NS_SEPARATOR,
                                re: /^\\/
                            },
                            {
                                value: PHP.Constants.T_STRING,
                                re: /^[a-zA-Z_\x7f-\uffff][a-zA-Z0-9_\x7f-\uffff]*/
                            },
                            {
                                value: -1,
                                re: /^\{/,
                                func: function() {
                                    pushState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: -1,
                                re: /^\}/,
                                func: function() {
                                    if (stackPos > 0) {
                                        popState();
                                    }
                                }
                            },
                            {
                                value: -1,
                                re: /^[\[\];:?()!.,><=+-/*|&@^%"'$~]/
                            }
                        ],
                        'DOUBLE_QUOTES': sharedStringTokens.concat([
                            {
                                value: -1,
                                re: /^"/,
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: PHP.Constants.T_ENCAPSED_AND_WHITESPACE,
                                re: new RegExp('^' + stringRegexPart('"'))
                            }
                        ]),
                        'BACKTICKS': sharedStringTokens.concat([
                            {
                                value: -1,
                                re: /^`/,
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: PHP.Constants.T_ENCAPSED_AND_WHITESPACE,
                                re: new RegExp('^' + stringRegexPart('`'))
                            }
                        ]),
                        'VAR_OFFSET': [
                            {
                                value: -1,
                                re: /^\]/,
                                func: function() {
                                    popState();
                                }
                            },
                            {
                                value: PHP.Constants.T_NUM_STRING,
                                re: /^(?:0x[0-9A-F]+|0b[01]+|[0-9]+)/i
                            },
                            {
                                value: PHP.Constants.T_VARIABLE,
                                re: new RegExp('^\\$' + labelRegexPart)
                            },
                            {
                                value: PHP.Constants.T_STRING,
                                re: new RegExp('^' + labelRegexPart)
                            },
                            {
                                value: -1,
                                re: /^[;:,.\[()|^&+-/*=%!~$<>?@{}"`]/
                            }
                        ],
                        'LOOKING_FOR_PROPERTY': [
                            {
                                value: PHP.Constants.T_OBJECT_OPERATOR,
                                re: /^->/
                            },
                            {
                                value: PHP.Constants.T_STRING,
                                re: new RegExp('^' + labelRegexPart),
                                func: function() {
                                    popState();
                                }
                            },
                            {
                                value: PHP.Constants.T_WHITESPACE,
                                re: /^[ \n\r\t]+/
                            }
                        ],
                        'LOOKING_FOR_VARNAME': [
                            {
                                value: PHP.Constants.T_STRING_VARNAME,
                                re: new RegExp('^' + labelRegexPart + '(?=[\\[}])'),
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            }
                        ],
                        'NOWDOC': [
                            {
                                value: PHP.Constants.T_END_HEREDOC,
                                matchFunc: function(src) {
                                    var re = new RegExp('^' + heredoc + '(?=;?[\\r\\n])');
                                    if (src.match(re)) {
                                        return [
                                            src.substr(0, heredoc.length)
                                        ];
                                    } else {
                                        return null;
                                    }
                                },
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: PHP.Constants.T_ENCAPSED_AND_WHITESPACE,
                                matchFunc: function(src) {
                                    var re = new RegExp('[\\r\\n]' + heredoc + '(?=;?[\\r\\n])');
                                    var result = re.exec(src);
                                    var end = result ? result.index + 1 : src.length;
                                    return [
                                        src.substring(0, end)
                                    ];
                                }
                            }
                        ],
                        'HEREDOC': sharedStringTokens.concat([
                            {
                                value: PHP.Constants.T_END_HEREDOC,
                                matchFunc: function(src) {
                                    if (!heredocEndAllowed) {
                                        return null;
                                    }
                                    var re = new RegExp('^' + heredoc + '(?=;?[\\r\\n])');
                                    if (src.match(re)) {
                                        return [
                                            src.substr(0, heredoc.length)
                                        ];
                                    } else {
                                        return null;
                                    }
                                },
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: PHP.Constants.T_ENCAPSED_AND_WHITESPACE,
                                matchFunc: function(src) {
                                    var end = src.length;
                                    // Find next interpolation
                                    var re = new RegExp('^' + stringRegexPart(''));
                                    var result = re.exec(src);
                                    if (result) {
                                        end = result[0].length;
                                    }
                                    // Find heredoc end
                                    re = new RegExp('([\\r\\n])' + heredoc + '(?=;?[\\r\\n])');
                                    result = re.exec(src.substring(0, end));
                                    if (result) {
                                        end = result.index + 1;
                                        heredocEndAllowed = true;
                                    } else {
                                        heredocEndAllowed = false;
                                    }
                                    if (end == 0) {
                                        return null;
                                    }
                                    return [
                                        src.substring(0, end)
                                    ];
                                }
                            }
                        ])
                    };
                    var results = [], line = 1, cancel = true;
                    if (src === null) {
                        return results;
                    }
                    if (typeof src !== "string") {
                        src = src.toString();
                    }
                    while(src.length > 0 && cancel === true){
                        var state = stateStack[stackPos];
                        var tokens = data[state];
                        cancel = tokens.some(function(token) {
                            var result = token.matchFunc !== undefined ? token.matchFunc(src) : src.match(token.re);
                            if (result !== null) {
                                if (result[0].length == 0) {
                                    // Error in the lexer definition, prevent infinite loop
                                    throw new Error("empty match");
                                }
                                if (token.func !== undefined) {
                                    token.func(result);
                                }
                                if (token.value === -1) {
                                    // character token
                                    results.push(result[0]);
                                } else {
                                    var resultString = result[0];
                                    results.push([
                                        parseInt(token.value, 10),
                                        resultString,
                                        line
                                    ]);
                                    line += resultString.split('\n').length - 1;
                                }
                                src = src.substring(result[0].length);
                                return true;
                            }
                            return false;
                        });
                    }
                    return results;
                };
                /*
	 * @author Niklas von Hertzen <niklas at hertzen.com>
	 * @created 15.6.2012
	 * @website http://hertzen.com
	 */ /*
	 * The skeleton for this parser was written by Moriyoshi Koizumi and is based on
	 * the work by Masato Bito and is in the PUBLIC DOMAIN.
	 * Ported to JavaScript by Niklas von Hertzen
	 */ PHP.Parser = function(preprocessedTokens, evaluate) {
                    var yybase = this.yybase, yydefault = this.yydefault, yycheck = this.yycheck, yyaction = this.yyaction, yylen = this.yylen, yygbase = this.yygbase, yygcheck = this.yygcheck, yyp = this.yyp, yygoto = this.yygoto, yylhs = this.yylhs, terminals = this.terminals, translate = this.translate, yygdefault = this.yygdefault;
                    this.pos = -1;
                    this.line = 1;
                    this.tokenMap = this.createTokenMap();
                    this.dropTokens = {};
                    this.dropTokens[PHP.Constants.T_WHITESPACE] = 1;
                    this.dropTokens[PHP.Constants.T_OPEN_TAG] = 1;
                    var tokens = [];
                    // pre-process
                    preprocessedTokens.forEach(function(token, index) {
                        if (typeof token === "object" && token[0] === PHP.Constants.T_OPEN_TAG_WITH_ECHO) {
                            tokens.push([
                                PHP.Constants.T_OPEN_TAG,
                                token[1],
                                token[2]
                            ]);
                            tokens.push([
                                PHP.Constants.T_ECHO,
                                token[1],
                                token[2]
                            ]);
                        } else {
                            tokens.push(token);
                        }
                    });
                    this.tokens = tokens;
                    // We start off with no lookahead-token
                    var tokenId = this.TOKEN_NONE;
                    // The attributes for a node are taken from the first and last token of the node.
                    // From the first token only the startAttributes are taken and from the last only
                    // the endAttributes. Both are merged using the array union operator (+).
                    this.startAttributes = {
                        'startLine': 1
                    };
                    this.endAttributes = {};
                    // In order to figure out the attributes for the starting token, we have to keep
                    // them in a stack
                    var attributeStack = [
                        this.startAttributes
                    ];
                    // Start off in the initial state and keep a stack of previous states
                    var state = 0;
                    var stateStack = [
                        state
                    ];
                    // AST stack
                    this.yyastk = [];
                    // Current position in the stack(s)
                    this.stackPos = 0;
                    var yyn;
                    var origTokenId;
                    for(;;){
                        if (yybase[state] === 0) {
                            yyn = yydefault[state];
                        } else {
                            if (tokenId === this.TOKEN_NONE) {
                                // fetch the next token id from the lexer and fetch additional info by-ref
                                origTokenId = this.getNextToken();
                                // map the lexer token id to the internally used token id's
                                tokenId = origTokenId >= 0 && origTokenId < this.TOKEN_MAP_SIZE ? translate[origTokenId] : this.TOKEN_INVALID;
                                attributeStack[this.stackPos] = this.startAttributes;
                            }
                            if (((yyn = yybase[state] + tokenId) >= 0 && yyn < this.YYLAST && yycheck[yyn] === tokenId || state < this.YY2TBLSTATE && (yyn = yybase[state + this.YYNLSTATES] + tokenId) >= 0 && yyn < this.YYLAST && yycheck[yyn] === tokenId) && (yyn = yyaction[yyn]) !== this.YYDEFAULT) {
                                /*
					 * >= YYNLSTATE: shift and reduce
					 * > 0: shift
					 * = 0: accept
					 * < 0: reduce
					 * = -YYUNEXPECTED: error
					 */ if (yyn > 0) {
                                    /* shift */ ++this.stackPos;
                                    stateStack[this.stackPos] = state = yyn;
                                    this.yyastk[this.stackPos] = this.tokenValue;
                                    attributeStack[this.stackPos] = this.startAttributes;
                                    tokenId = this.TOKEN_NONE;
                                    if (yyn < this.YYNLSTATES) continue;
                                    /* $yyn >= YYNLSTATES means shift-and-reduce */ yyn -= this.YYNLSTATES;
                                } else {
                                    yyn = -yyn;
                                }
                            } else {
                                yyn = yydefault[state];
                            }
                        }
                        for(;;){
                            /* reduce/error */ if (yyn === 0) {
                                /* accept */ return this.yyval;
                            } else if (yyn !== this.YYUNEXPECTED) {
                                /* reduce */ for(var attr in this.endAttributes){
                                    attributeStack[this.stackPos - yylen[yyn]][attr] = this.endAttributes[attr];
                                }
                                // We do not build an AST!
                                // this['yyn' + yyn](attributeStack[ this.stackPos - yylen[ yyn ] ]);
                                /* Goto - shift nonterminal */ this.stackPos -= yylen[yyn];
                                yyn = yylhs[yyn];
                                if ((yyp = yygbase[yyn] + stateStack[this.stackPos]) >= 0 && yyp < this.YYGLAST && yygcheck[yyp] === yyn) {
                                    state = yygoto[yyp];
                                } else {
                                    state = yygdefault[yyn];
                                }
                                ++this.stackPos;
                                stateStack[this.stackPos] = state;
                                this.yyastk[this.stackPos] = this.yyval;
                                attributeStack[this.stackPos] = this.startAttributes;
                            } else {
                                /* error */ if (evaluate !== true) {
                                    var expected = [];
                                    for(var i = 0; i < this.TOKEN_MAP_SIZE; ++i){
                                        if ((yyn = yybase[state] + i) >= 0 && yyn < this.YYLAST && yycheck[yyn] == i || state < this.YY2TBLSTATE && (yyn = yybase[state + this.YYNLSTATES] + i) && yyn < this.YYLAST && yycheck[yyn] == i) {
                                            if (yyaction[yyn] != this.YYUNEXPECTED) {
                                                if (expected.length == 4) {
                                                    /* Too many expected tokens */ expected = [];
                                                    break;
                                                }
                                                expected.push(this.terminals[i]);
                                            }
                                        }
                                    }
                                    var expectedString = '';
                                    if (expected.length) {
                                        expectedString = ', expecting ' + expected.join(' or ');
                                    }
                                    throw new PHP.ParseError('syntax error, unexpected ' + terminals[tokenId] + expectedString, this.startAttributes['startLine']);
                                } else {
                                    return this.startAttributes['startLine'];
                                }
                            }
                            if (state < this.YYNLSTATES) break;
                            /* >= YYNLSTATES means shift-and-reduce */ yyn = state - this.YYNLSTATES;
                        }
                    }
                };
                PHP.ParseError = function(msg, line) {
                    this.message = msg;
                    this.line = line;
                };
                PHP.Parser.prototype.getNextToken = function() {
                    this.startAttributes = {};
                    this.endAttributes = {};
                    var token, tmp;
                    while(this.tokens[++this.pos] !== undefined){
                        token = this.tokens[this.pos];
                        if (typeof token === "string") {
                            this.startAttributes['startLine'] = this.line;
                            this.endAttributes['endLine'] = this.line;
                            // bug in token_get_all
                            if ('b"' === token) {
                                this.tokenValue = 'b"';
                                return '"'.charCodeAt(0);
                            } else {
                                this.tokenValue = token;
                                return token.charCodeAt(0);
                            }
                        } else {
                            this.line += (tmp = token[1].match(/\n/g)) === null ? 0 : tmp.length;
                            if (PHP.Constants.T_COMMENT === token[0]) {
                                if (!Array.isArray(this.startAttributes['comments'])) {
                                    this.startAttributes['comments'] = [];
                                }
                                this.startAttributes['comments'].push({
                                    type: "comment",
                                    comment: token[1],
                                    line: token[2]
                                });
                            } else if (PHP.Constants.T_ATTRIBUTE === token[0]) {
                                this.tokenValue = token[1];
                                this.startAttributes['startLine'] = token[2];
                                this.endAttributes['endLine'] = this.line;
                            } else if (PHP.Constants.T_DOC_COMMENT === token[0]) {
                                this.startAttributes['comments'].push(new PHPParser_Comment_Doc(token[1], token[2]));
                            } else if (this.dropTokens[token[0]] === undefined) {
                                this.tokenValue = token[1];
                                this.startAttributes['startLine'] = token[2];
                                this.endAttributes['endLine'] = this.line;
                                return this.tokenMap[token[0]];
                            }
                        }
                    }
                    this.startAttributes['startLine'] = this.line;
                    // 0 is the EOF token
                    return 0;
                };
                PHP.Parser.prototype.tokenName = function(token) {
                    var constants = [
                        "T_THROW",
                        "T_INCLUDE",
                        "T_INCLUDE_ONCE",
                        "T_EVAL",
                        "T_REQUIRE",
                        "T_REQUIRE_ONCE",
                        "T_LOGICAL_OR",
                        "T_LOGICAL_XOR",
                        "T_LOGICAL_AND",
                        "T_PRINT",
                        "T_YIELD",
                        "T_DOUBLE_ARROW",
                        "T_YIELD_FROM",
                        "T_PLUS_EQUAL",
                        "T_MINUS_EQUAL",
                        "T_MUL_EQUAL",
                        "T_DIV_EQUAL",
                        "T_CONCAT_EQUAL",
                        "T_MOD_EQUAL",
                        "T_AND_EQUAL",
                        "T_OR_EQUAL",
                        "T_XOR_EQUAL",
                        "T_SL_EQUAL",
                        "T_SR_EQUAL",
                        "T_POW_EQUAL",
                        "T_COALESCE_EQUAL",
                        "T_COALESCE",
                        "T_BOOLEAN_OR",
                        "T_BOOLEAN_AND",
                        "T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG",
                        "T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG",
                        "T_IS_EQUAL",
                        "T_IS_NOT_EQUAL",
                        "T_IS_IDENTICAL",
                        "T_IS_NOT_IDENTICAL",
                        "T_SPACESHIP",
                        "T_IS_SMALLER_OR_EQUAL",
                        "T_IS_GREATER_OR_EQUAL",
                        "T_SL",
                        "T_SR",
                        "T_INSTANCEOF",
                        "T_INC",
                        "T_DEC",
                        "T_INT_CAST",
                        "T_DOUBLE_CAST",
                        "T_STRING_CAST",
                        "T_ARRAY_CAST",
                        "T_OBJECT_CAST",
                        "T_BOOL_CAST",
                        "T_UNSET_CAST",
                        "T_POW",
                        "T_NEW",
                        "T_CLONE",
                        "T_EXIT",
                        "T_IF",
                        "T_ELSEIF",
                        "T_ELSE",
                        "T_ENDIF",
                        "T_LNUMBER",
                        "T_DNUMBER",
                        "T_STRING",
                        "T_STRING_VARNAME",
                        "T_VARIABLE",
                        "T_NUM_STRING",
                        "T_INLINE_HTML",
                        "T_ENCAPSED_AND_WHITESPACE",
                        "T_CONSTANT_ENCAPSED_STRING",
                        "T_ECHO",
                        "T_DO",
                        "T_WHILE",
                        "T_ENDWHILE",
                        "T_FOR",
                        "T_ENDFOR",
                        "T_FOREACH",
                        "T_ENDFOREACH",
                        "T_DECLARE",
                        "T_ENDDECLARE",
                        "T_AS",
                        "T_SWITCH",
                        "T_MATCH",
                        "T_ENDSWITCH",
                        "T_CASE",
                        "T_DEFAULT",
                        "T_BREAK",
                        "T_CONTINUE",
                        "T_GOTO",
                        "T_FUNCTION",
                        "T_FN",
                        "T_CONST",
                        "T_RETURN",
                        "T_TRY",
                        "T_CATCH",
                        "T_FINALLY",
                        "T_THROW",
                        "T_USE",
                        "T_INSTEADOF",
                        "T_GLOBAL",
                        "T_STATIC",
                        "T_ABSTRACT",
                        "T_FINAL",
                        "T_PRIVATE",
                        "T_PROTECTED",
                        "T_PUBLIC",
                        "T_READONLY",
                        "T_VAR",
                        "T_UNSET",
                        "T_ISSET",
                        "T_EMPTY",
                        "T_HALT_COMPILER",
                        "T_CLASS",
                        "T_TRAIT",
                        "T_INTERFACE",
                        "T_ENUM",
                        "T_EXTENDS",
                        "T_IMPLEMENTS",
                        "T_OBJECT_OPERATOR",
                        "T_NULLSAFE_OBJECT_OPERATOR",
                        "T_DOUBLE_ARROW",
                        "T_LIST",
                        "T_ARRAY",
                        "T_CALLABLE",
                        "T_CLASS_C",
                        "T_TRAIT_C",
                        "T_METHOD_C",
                        "T_FUNC_C",
                        "T_LINE",
                        "T_FILE",
                        "T_START_HEREDOC",
                        "T_END_HEREDOC",
                        "T_DOLLAR_OPEN_CURLY_BRACES",
                        "T_CURLY_OPEN",
                        "T_PAAMAYIM_NEKUDOTAYIM",
                        "T_NAMESPACE",
                        "T_NS_C",
                        "T_DIR",
                        "T_NS_SEPARATOR",
                        "T_ELLIPSIS",
                        "T_NAME_FULLY_QUALIFIED",
                        "T_NAME_QUALIFIED",
                        "T_NAME_RELATIVE",
                        "T_ATTRIBUTE",
                        "T_ENUM",
                        "T_BAD_CHARACTER",
                        "T_COMMENT",
                        "T_DOC_COMMENT",
                        "T_OPEN_TAG",
                        "T_OPEN_TAG_WITH_ECHO",
                        "T_CLOSE_TAG",
                        "T_WHITESPACE"
                    ];
                    var current = "UNKNOWN";
                    constants.some(function(constant) {
                        if (PHP.Constants[constant] === token) {
                            current = constant;
                            return true;
                        } else {
                            return false;
                        }
                    });
                    return current;
                };
                /**
 * Creates the token map.
 *
 * The token map maps the PHP internal token identifiers
 * to the identifiers used by the PHP.Parser. Additionally it
 * maps T_OPEN_TAG_WITH_ECHO to T_ECHO and T_CLOSE_TAG to ';'.
 *
 * @return array The token map
 */ PHP.Parser.prototype.createTokenMap = function() {
                    var tokenMap = {}, name, i;
                    // 256 is the minimum possible token number, as everything below
                    // it is an ASCII value
                    for(i = 256; i < 1000; ++i){
                        // T_OPEN_TAG_WITH_ECHO with dropped T_OPEN_TAG results in T_ECHO
                        if (PHP.Constants.T_OPEN_TAG_WITH_ECHO === i) {
                            tokenMap[i] = PHP.Constants.T_ECHO;
                        // T_CLOSE_TAG is equivalent to ';'
                        } else if (PHP.Constants.T_CLOSE_TAG === i) {
                            tokenMap[i] = 59;
                        // and the others can be mapped directly
                        } else if ('UNKNOWN' !== (name = this.tokenName(i))) {
                            tokenMap[i] = this[name];
                        }
                    }
                    return tokenMap;
                };
                /* This is an automatically GENERATED file, which should not be manually edited.
	 * Instead edit one of the following:
	 *  * the grammar file grammar/zend_language_parser.jsy
	 *  * the parser skeleton grammar/kymacc.js.parser
	 *  * the preprocessing script grammar/rebuildParser.php
	 *
	 * The skeleton for this parser was written by Moriyoshi Koizumi and is based on
	 * the work by Masato Bito and is in the PUBLIC DOMAIN.
	 * Ported to JavaScript by Niklas von Hertzen
	 */ PHP.Parser.prototype.TOKEN_NONE = -1;
                PHP.Parser.prototype.TOKEN_INVALID = 175;
                PHP.Parser.prototype.TOKEN_MAP_SIZE = 403;
                PHP.Parser.prototype.YYLAST = 1196;
                PHP.Parser.prototype.YY2TBLSTATE = 420;
                PHP.Parser.prototype.YYGLAST = 545;
                PHP.Parser.prototype.YYNLSTATES = 710;
                PHP.Parser.prototype.YYUNEXPECTED = 32767;
                PHP.Parser.prototype.YYDEFAULT = -32766;
                // {{{ Tokens
                PHP.Parser.prototype.YYERRTOK = 256;
                PHP.Parser.prototype.T_THROW = 257;
                PHP.Parser.prototype.T_INCLUDE = 258;
                PHP.Parser.prototype.T_INCLUDE_ONCE = 259;
                PHP.Parser.prototype.T_EVAL = 260;
                PHP.Parser.prototype.T_REQUIRE = 261;
                PHP.Parser.prototype.T_REQUIRE_ONCE = 262;
                PHP.Parser.prototype.T_LOGICAL_OR = 263;
                PHP.Parser.prototype.T_LOGICAL_XOR = 264;
                PHP.Parser.prototype.T_LOGICAL_AND = 265;
                PHP.Parser.prototype.T_PRINT = 266;
                PHP.Parser.prototype.T_YIELD = 267;
                PHP.Parser.prototype.T_DOUBLE_ARROW = 268;
                PHP.Parser.prototype.T_YIELD_FROM = 269;
                PHP.Parser.prototype.T_PLUS_EQUAL = 270;
                PHP.Parser.prototype.T_MINUS_EQUAL = 271;
                PHP.Parser.prototype.T_MUL_EQUAL = 272;
                PHP.Parser.prototype.T_DIV_EQUAL = 273;
                PHP.Parser.prototype.T_CONCAT_EQUAL = 274;
                PHP.Parser.prototype.T_MOD_EQUAL = 275;
                PHP.Parser.prototype.T_AND_EQUAL = 276;
                PHP.Parser.prototype.T_OR_EQUAL = 277;
                PHP.Parser.prototype.T_XOR_EQUAL = 278;
                PHP.Parser.prototype.T_SL_EQUAL = 279;
                PHP.Parser.prototype.T_SR_EQUAL = 280;
                PHP.Parser.prototype.T_POW_EQUAL = 281;
                PHP.Parser.prototype.T_COALESCE_EQUAL = 282;
                PHP.Parser.prototype.T_COALESCE = 283;
                PHP.Parser.prototype.T_BOOLEAN_OR = 284;
                PHP.Parser.prototype.T_BOOLEAN_AND = 285;
                PHP.Parser.prototype.T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG = 286;
                PHP.Parser.prototype.T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG = 287;
                PHP.Parser.prototype.T_IS_EQUAL = 288;
                PHP.Parser.prototype.T_IS_NOT_EQUAL = 289;
                PHP.Parser.prototype.T_IS_IDENTICAL = 290;
                PHP.Parser.prototype.T_IS_NOT_IDENTICAL = 291;
                PHP.Parser.prototype.T_SPACESHIP = 292;
                PHP.Parser.prototype.T_IS_SMALLER_OR_EQUAL = 293;
                PHP.Parser.prototype.T_IS_GREATER_OR_EQUAL = 294;
                PHP.Parser.prototype.T_SL = 295;
                PHP.Parser.prototype.T_SR = 296;
                PHP.Parser.prototype.T_INSTANCEOF = 297;
                PHP.Parser.prototype.T_INC = 298;
                PHP.Parser.prototype.T_DEC = 299;
                PHP.Parser.prototype.T_INT_CAST = 300;
                PHP.Parser.prototype.T_DOUBLE_CAST = 301;
                PHP.Parser.prototype.T_STRING_CAST = 302;
                PHP.Parser.prototype.T_ARRAY_CAST = 303;
                PHP.Parser.prototype.T_OBJECT_CAST = 304;
                PHP.Parser.prototype.T_BOOL_CAST = 305;
                PHP.Parser.prototype.T_UNSET_CAST = 306;
                PHP.Parser.prototype.T_POW = 307;
                PHP.Parser.prototype.T_NEW = 308;
                PHP.Parser.prototype.T_CLONE = 309;
                PHP.Parser.prototype.T_EXIT = 310;
                PHP.Parser.prototype.T_IF = 311;
                PHP.Parser.prototype.T_ELSEIF = 312;
                PHP.Parser.prototype.T_ELSE = 313;
                PHP.Parser.prototype.T_ENDIF = 314;
                PHP.Parser.prototype.T_LNUMBER = 315;
                PHP.Parser.prototype.T_DNUMBER = 316;
                PHP.Parser.prototype.T_STRING = 317;
                PHP.Parser.prototype.T_STRING_VARNAME = 318;
                PHP.Parser.prototype.T_VARIABLE = 319;
                PHP.Parser.prototype.T_NUM_STRING = 320;
                PHP.Parser.prototype.T_INLINE_HTML = 321;
                PHP.Parser.prototype.T_ENCAPSED_AND_WHITESPACE = 322;
                PHP.Parser.prototype.T_CONSTANT_ENCAPSED_STRING = 323;
                PHP.Parser.prototype.T_ECHO = 324;
                PHP.Parser.prototype.T_DO = 325;
                PHP.Parser.prototype.T_WHILE = 326;
                PHP.Parser.prototype.T_ENDWHILE = 327;
                PHP.Parser.prototype.T_FOR = 328;
                PHP.Parser.prototype.T_ENDFOR = 329;
                PHP.Parser.prototype.T_FOREACH = 330;
                PHP.Parser.prototype.T_ENDFOREACH = 331;
                PHP.Parser.prototype.T_DECLARE = 332;
                PHP.Parser.prototype.T_ENDDECLARE = 333;
                PHP.Parser.prototype.T_AS = 334;
                PHP.Parser.prototype.T_SWITCH = 335;
                PHP.Parser.prototype.T_MATCH = 336;
                PHP.Parser.prototype.T_ENDSWITCH = 337;
                PHP.Parser.prototype.T_CASE = 338;
                PHP.Parser.prototype.T_DEFAULT = 339;
                PHP.Parser.prototype.T_BREAK = 340;
                PHP.Parser.prototype.T_CONTINUE = 341;
                PHP.Parser.prototype.T_GOTO = 342;
                PHP.Parser.prototype.T_FUNCTION = 343;
                PHP.Parser.prototype.T_FN = 344;
                PHP.Parser.prototype.T_CONST = 345;
                PHP.Parser.prototype.T_RETURN = 346;
                PHP.Parser.prototype.T_TRY = 347;
                PHP.Parser.prototype.T_CATCH = 348;
                PHP.Parser.prototype.T_FINALLY = 349;
                PHP.Parser.prototype.T_USE = 350;
                PHP.Parser.prototype.T_INSTEADOF = 351;
                PHP.Parser.prototype.T_GLOBAL = 352;
                PHP.Parser.prototype.T_STATIC = 353;
                PHP.Parser.prototype.T_ABSTRACT = 354;
                PHP.Parser.prototype.T_FINAL = 355;
                PHP.Parser.prototype.T_PRIVATE = 356;
                PHP.Parser.prototype.T_PROTECTED = 357;
                PHP.Parser.prototype.T_PUBLIC = 358;
                PHP.Parser.prototype.T_READONLY = 359;
                PHP.Parser.prototype.T_VAR = 360;
                PHP.Parser.prototype.T_UNSET = 361;
                PHP.Parser.prototype.T_ISSET = 362;
                PHP.Parser.prototype.T_EMPTY = 363;
                PHP.Parser.prototype.T_HALT_COMPILER = 364;
                PHP.Parser.prototype.T_CLASS = 365;
                PHP.Parser.prototype.T_TRAIT = 366;
                PHP.Parser.prototype.T_INTERFACE = 367;
                PHP.Parser.prototype.T_ENUM = 368;
                PHP.Parser.prototype.T_EXTENDS = 369;
                PHP.Parser.prototype.T_IMPLEMENTS = 370;
                PHP.Parser.prototype.T_OBJECT_OPERATOR = 371;
                PHP.Parser.prototype.T_NULLSAFE_OBJECT_OPERATOR = 372;
                PHP.Parser.prototype.T_LIST = 373;
                PHP.Parser.prototype.T_ARRAY = 374;
                PHP.Parser.prototype.T_CALLABLE = 375;
                PHP.Parser.prototype.T_CLASS_C = 376;
                PHP.Parser.prototype.T_TRAIT_C = 377;
                PHP.Parser.prototype.T_METHOD_C = 378;
                PHP.Parser.prototype.T_FUNC_C = 379;
                PHP.Parser.prototype.T_LINE = 380;
                PHP.Parser.prototype.T_FILE = 381;
                PHP.Parser.prototype.T_START_HEREDOC = 382;
                PHP.Parser.prototype.T_END_HEREDOC = 383;
                PHP.Parser.prototype.T_DOLLAR_OPEN_CURLY_BRACES = 384;
                PHP.Parser.prototype.T_CURLY_OPEN = 385;
                PHP.Parser.prototype.T_PAAMAYIM_NEKUDOTAYIM = 386;
                PHP.Parser.prototype.T_NAMESPACE = 387;
                PHP.Parser.prototype.T_NS_C = 388;
                PHP.Parser.prototype.T_DIR = 389;
                PHP.Parser.prototype.T_NS_SEPARATOR = 390;
                PHP.Parser.prototype.T_ELLIPSIS = 391;
                PHP.Parser.prototype.T_NAME_FULLY_QUALIFIED = 392;
                PHP.Parser.prototype.T_NAME_QUALIFIED = 393;
                PHP.Parser.prototype.T_NAME_RELATIVE = 394;
                PHP.Parser.prototype.T_ATTRIBUTE = 395;
                PHP.Parser.prototype.T_BAD_CHARACTER = 396;
                PHP.Parser.prototype.T_COMMENT = 397;
                PHP.Parser.prototype.T_DOC_COMMENT = 398;
                PHP.Parser.prototype.T_OPEN_TAG = 399;
                PHP.Parser.prototype.T_OPEN_TAG_WITH_ECHO = 400;
                PHP.Parser.prototype.T_CLOSE_TAG = 401;
                PHP.Parser.prototype.T_WHITESPACE = 402;
                // }}}
                /* @var array Map of token ids to their respective names */ PHP.Parser.prototype.terminals = [
                    "EOF",
                    "error",
                    "T_THROW",
                    "T_INCLUDE",
                    "T_INCLUDE_ONCE",
                    "T_EVAL",
                    "T_REQUIRE",
                    "T_REQUIRE_ONCE",
                    "','",
                    "T_LOGICAL_OR",
                    "T_LOGICAL_XOR",
                    "T_LOGICAL_AND",
                    "T_PRINT",
                    "T_YIELD",
                    "T_DOUBLE_ARROW",
                    "T_YIELD_FROM",
                    "'='",
                    "T_PLUS_EQUAL",
                    "T_MINUS_EQUAL",
                    "T_MUL_EQUAL",
                    "T_DIV_EQUAL",
                    "T_CONCAT_EQUAL",
                    "T_MOD_EQUAL",
                    "T_AND_EQUAL",
                    "T_OR_EQUAL",
                    "T_XOR_EQUAL",
                    "T_SL_EQUAL",
                    "T_SR_EQUAL",
                    "T_POW_EQUAL",
                    "T_COALESCE_EQUAL",
                    "'?'",
                    "':'",
                    "T_COALESCE",
                    "T_BOOLEAN_OR",
                    "T_BOOLEAN_AND",
                    "'|'",
                    "'^'",
                    "T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG",
                    "T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG",
                    "T_IS_EQUAL",
                    "T_IS_NOT_EQUAL",
                    "T_IS_IDENTICAL",
                    "T_IS_NOT_IDENTICAL",
                    "T_SPACESHIP",
                    "'<'",
                    "T_IS_SMALLER_OR_EQUAL",
                    "'>'",
                    "T_IS_GREATER_OR_EQUAL",
                    "T_SL",
                    "T_SR",
                    "'+'",
                    "'-'",
                    "'.'",
                    "'*'",
                    "'/'",
                    "'%'",
                    "'!'",
                    "T_INSTANCEOF",
                    "'~'",
                    "T_INC",
                    "T_DEC",
                    "T_INT_CAST",
                    "T_DOUBLE_CAST",
                    "T_STRING_CAST",
                    "T_ARRAY_CAST",
                    "T_OBJECT_CAST",
                    "T_BOOL_CAST",
                    "T_UNSET_CAST",
                    "'@'",
                    "T_POW",
                    "'['",
                    "T_NEW",
                    "T_CLONE",
                    "T_EXIT",
                    "T_IF",
                    "T_ELSEIF",
                    "T_ELSE",
                    "T_ENDIF",
                    "T_LNUMBER",
                    "T_DNUMBER",
                    "T_STRING",
                    "T_STRING_VARNAME",
                    "T_VARIABLE",
                    "T_NUM_STRING",
                    "T_INLINE_HTML",
                    "T_ENCAPSED_AND_WHITESPACE",
                    "T_CONSTANT_ENCAPSED_STRING",
                    "T_ECHO",
                    "T_DO",
                    "T_WHILE",
                    "T_ENDWHILE",
                    "T_FOR",
                    "T_ENDFOR",
                    "T_FOREACH",
                    "T_ENDFOREACH",
                    "T_DECLARE",
                    "T_ENDDECLARE",
                    "T_AS",
                    "T_SWITCH",
                    "T_MATCH",
                    "T_ENDSWITCH",
                    "T_CASE",
                    "T_DEFAULT",
                    "T_BREAK",
                    "T_CONTINUE",
                    "T_GOTO",
                    "T_FUNCTION",
                    "T_FN",
                    "T_CONST",
                    "T_RETURN",
                    "T_TRY",
                    "T_CATCH",
                    "T_FINALLY",
                    "T_USE",
                    "T_INSTEADOF",
                    "T_GLOBAL",
                    "T_STATIC",
                    "T_ABSTRACT",
                    "T_FINAL",
                    "T_PRIVATE",
                    "T_PROTECTED",
                    "T_PUBLIC",
                    "T_READONLY",
                    "T_VAR",
                    "T_UNSET",
                    "T_ISSET",
                    "T_EMPTY",
                    "T_HALT_COMPILER",
                    "T_CLASS",
                    "T_TRAIT",
                    "T_INTERFACE",
                    "T_ENUM",
                    "T_EXTENDS",
                    "T_IMPLEMENTS",
                    "T_OBJECT_OPERATOR",
                    "T_NULLSAFE_OBJECT_OPERATOR",
                    "T_LIST",
                    "T_ARRAY",
                    "T_CALLABLE",
                    "T_CLASS_C",
                    "T_TRAIT_C",
                    "T_METHOD_C",
                    "T_FUNC_C",
                    "T_LINE",
                    "T_FILE",
                    "T_START_HEREDOC",
                    "T_END_HEREDOC",
                    "T_DOLLAR_OPEN_CURLY_BRACES",
                    "T_CURLY_OPEN",
                    "T_PAAMAYIM_NEKUDOTAYIM",
                    "T_NAMESPACE",
                    "T_NS_C",
                    "T_DIR",
                    "T_NS_SEPARATOR",
                    "T_ELLIPSIS",
                    "T_NAME_FULLY_QUALIFIED",
                    "T_NAME_QUALIFIED",
                    "T_NAME_RELATIVE",
                    "T_ATTRIBUTE",
                    "';'",
                    "']'",
                    "'{'",
                    "'}'",
                    "'('",
                    "')'",
                    "'`'",
                    "'\"'",
                    "'$'",
                    "T_BAD_CHARACTER",
                    "T_COMMENT",
                    "T_DOC_COMMENT",
                    "T_OPEN_TAG",
                    "T_OPEN_TAG_WITH_ECHO",
                    "T_CLOSE_TAG",
                    "T_WHITESPACE",
                    "???"
                ];
                /* @var Map which translates lexer tokens to internal tokens */ PHP.Parser.prototype.translate = [
                    0,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    56,
                    166,
                    175,
                    167,
                    55,
                    175,
                    175,
                    163,
                    164,
                    53,
                    50,
                    8,
                    51,
                    52,
                    54,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    31,
                    159,
                    44,
                    16,
                    46,
                    30,
                    68,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    70,
                    175,
                    160,
                    36,
                    175,
                    165,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    161,
                    35,
                    162,
                    58,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    32,
                    33,
                    34,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    45,
                    47,
                    48,
                    49,
                    57,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    69,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    174
                ];
                PHP.Parser.prototype.yyaction = [
                    132,
                    133,
                    134,
                    569,
                    135,
                    136,
                    0,
                    722,
                    723,
                    724,
                    137,
                    37,
                    834,
                    911,
                    835,
                    469,
                    -32766,
                    -32766,
                    -32766,
                    -32767,
                    -32767,
                    -32767,
                    -32767,
                    101,
                    102,
                    103,
                    104,
                    105,
                    1068,
                    1069,
                    1070,
                    1067,
                    1066,
                    1065,
                    1071,
                    716,
                    715,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32767,
                    -32767,
                    -32767,
                    -32767,
                    -32767,
                    545,
                    546,
                    -32766,
                    -32766,
                    725,
                    -32766,
                    -32766,
                    -32766,
                    998,
                    999,
                    806,
                    922,
                    447,
                    448,
                    449,
                    370,
                    371,
                    2,
                    267,
                    138,
                    396,
                    729,
                    730,
                    731,
                    732,
                    414,
                    -32766,
                    420,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    990,
                    733,
                    734,
                    735,
                    736,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    763,
                    570,
                    764,
                    765,
                    766,
                    767,
                    755,
                    756,
                    336,
                    337,
                    758,
                    759,
                    744,
                    745,
                    746,
                    748,
                    749,
                    750,
                    346,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    751,
                    752,
                    571,
                    572,
                    784,
                    775,
                    773,
                    774,
                    787,
                    770,
                    771,
                    283,
                    420,
                    573,
                    574,
                    769,
                    575,
                    576,
                    577,
                    578,
                    579,
                    580,
                    598,
                    -575,
                    470,
                    14,
                    798,
                    772,
                    581,
                    582,
                    -575,
                    139,
                    -32766,
                    -32766,
                    -32766,
                    132,
                    133,
                    134,
                    569,
                    135,
                    136,
                    1017,
                    722,
                    723,
                    724,
                    137,
                    37,
                    1060,
                    -32766,
                    -32766,
                    -32766,
                    1303,
                    696,
                    -32766,
                    1304,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    1068,
                    1069,
                    1070,
                    1067,
                    1066,
                    1065,
                    1071,
                    -32766,
                    716,
                    715,
                    372,
                    371,
                    1258,
                    -32766,
                    -32766,
                    -32766,
                    -572,
                    106,
                    107,
                    108,
                    414,
                    270,
                    891,
                    -572,
                    240,
                    1193,
                    1192,
                    1194,
                    725,
                    -32766,
                    -32766,
                    -32766,
                    1046,
                    109,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    986,
                    985,
                    984,
                    987,
                    267,
                    138,
                    396,
                    729,
                    730,
                    731,
                    732,
                    12,
                    -32766,
                    420,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    998,
                    999,
                    733,
                    734,
                    735,
                    736,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    763,
                    570,
                    764,
                    765,
                    766,
                    767,
                    755,
                    756,
                    336,
                    337,
                    758,
                    759,
                    744,
                    745,
                    746,
                    748,
                    749,
                    750,
                    346,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    751,
                    752,
                    571,
                    572,
                    784,
                    775,
                    773,
                    774,
                    787,
                    770,
                    771,
                    881,
                    321,
                    573,
                    574,
                    769,
                    575,
                    576,
                    577,
                    578,
                    579,
                    580,
                    -32766,
                    82,
                    83,
                    84,
                    -575,
                    772,
                    581,
                    582,
                    -575,
                    148,
                    747,
                    717,
                    718,
                    719,
                    720,
                    721,
                    1278,
                    722,
                    723,
                    724,
                    760,
                    761,
                    36,
                    1277,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    996,
                    270,
                    150,
                    -32766,
                    -32766,
                    -32766,
                    455,
                    456,
                    81,
                    34,
                    -264,
                    -572,
                    1016,
                    109,
                    320,
                    -572,
                    893,
                    725,
                    682,
                    803,
                    128,
                    998,
                    999,
                    592,
                    -32766,
                    1044,
                    -32766,
                    -32766,
                    -32766,
                    809,
                    151,
                    726,
                    727,
                    728,
                    729,
                    730,
                    731,
                    732,
                    -88,
                    1198,
                    796,
                    278,
                    -526,
                    283,
                    -32766,
                    -32766,
                    -32766,
                    733,
                    734,
                    735,
                    736,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    763,
                    786,
                    764,
                    765,
                    766,
                    767,
                    755,
                    756,
                    757,
                    785,
                    758,
                    759,
                    744,
                    745,
                    746,
                    748,
                    749,
                    750,
                    789,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    751,
                    752,
                    753,
                    754,
                    784,
                    775,
                    773,
                    774,
                    787,
                    770,
                    771,
                    144,
                    804,
                    762,
                    768,
                    769,
                    776,
                    777,
                    779,
                    778,
                    780,
                    781,
                    -314,
                    -526,
                    -526,
                    -193,
                    -192,
                    772,
                    783,
                    782,
                    49,
                    50,
                    51,
                    500,
                    52,
                    53,
                    239,
                    807,
                    -526,
                    -86,
                    54,
                    55,
                    -111,
                    56,
                    996,
                    253,
                    -32766,
                    -111,
                    800,
                    -111,
                    -526,
                    541,
                    -532,
                    -352,
                    300,
                    -352,
                    304,
                    -111,
                    -111,
                    -111,
                    -111,
                    -111,
                    -111,
                    -111,
                    -111,
                    998,
                    999,
                    998,
                    999,
                    153,
                    -32766,
                    -32766,
                    -32766,
                    1191,
                    807,
                    126,
                    306,
                    1293,
                    57,
                    58,
                    103,
                    104,
                    105,
                    -111,
                    59,
                    1218,
                    60,
                    246,
                    247,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    -525,
                    27,
                    268,
                    69,
                    436,
                    501,
                    -328,
                    808,
                    -86,
                    1224,
                    1225,
                    502,
                    1189,
                    807,
                    1198,
                    1230,
                    293,
                    1222,
                    41,
                    24,
                    503,
                    74,
                    504,
                    953,
                    505,
                    320,
                    506,
                    802,
                    154,
                    507,
                    508,
                    279,
                    684,
                    280,
                    43,
                    44,
                    437,
                    367,
                    366,
                    891,
                    45,
                    509,
                    35,
                    249,
                    -16,
                    -566,
                    358,
                    332,
                    318,
                    -566,
                    1198,
                    1193,
                    1192,
                    1194,
                    -527,
                    510,
                    511,
                    512,
                    333,
                    -524,
                    1274,
                    48,
                    716,
                    715,
                    -525,
                    -525,
                    334,
                    513,
                    514,
                    807,
                    1212,
                    1213,
                    1214,
                    1215,
                    1209,
                    1210,
                    292,
                    360,
                    284,
                    -525,
                    285,
                    -314,
                    1216,
                    1211,
                    -193,
                    -192,
                    1193,
                    1192,
                    1194,
                    293,
                    891,
                    -525,
                    364,
                    -531,
                    70,
                    807,
                    316,
                    317,
                    320,
                    31,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    -153,
                    -153,
                    -153,
                    638,
                    25,
                    -527,
                    -527,
                    687,
                    379,
                    881,
                    -524,
                    -524,
                    296,
                    297,
                    891,
                    -153,
                    432,
                    -153,
                    807,
                    -153,
                    -527,
                    -153,
                    716,
                    715,
                    433,
                    -524,
                    798,
                    363,
                    -111,
                    1105,
                    1107,
                    365,
                    -527,
                    434,
                    891,
                    140,
                    435,
                    -524,
                    954,
                    127,
                    -524,
                    320,
                    -111,
                    -111,
                    688,
                    813,
                    381,
                    -529,
                    11,
                    834,
                    155,
                    835,
                    867,
                    -111,
                    -111,
                    -111,
                    -111,
                    47,
                    293,
                    -32766,
                    881,
                    654,
                    655,
                    74,
                    689,
                    1191,
                    1045,
                    320,
                    708,
                    149,
                    399,
                    157,
                    -32766,
                    -32766,
                    -32766,
                    32,
                    -32766,
                    -79,
                    -32766,
                    123,
                    -32766,
                    716,
                    715,
                    -32766,
                    893,
                    891,
                    682,
                    -153,
                    -32766,
                    -32766,
                    -32766,
                    716,
                    715,
                    891,
                    -32766,
                    -32766,
                    124,
                    881,
                    129,
                    74,
                    -32766,
                    411,
                    130,
                    320,
                    -524,
                    -524,
                    143,
                    141,
                    -75,
                    -32766,
                    158,
                    -529,
                    -529,
                    320,
                    27,
                    691,
                    159,
                    881,
                    160,
                    -524,
                    161,
                    294,
                    295,
                    698,
                    368,
                    369,
                    807,
                    -73,
                    -32766,
                    -72,
                    1222,
                    -524,
                    373,
                    374,
                    1191,
                    893,
                    -71,
                    682,
                    -529,
                    73,
                    -70,
                    -32766,
                    -32766,
                    -32766,
                    -69,
                    -32766,
                    -68,
                    -32766,
                    125,
                    -32766,
                    630,
                    631,
                    -32766,
                    -67,
                    -66,
                    -47,
                    -51,
                    -32766,
                    -32766,
                    -32766,
                    -18,
                    147,
                    271,
                    -32766,
                    -32766,
                    277,
                    697,
                    700,
                    881,
                    -32766,
                    411,
                    890,
                    893,
                    146,
                    682,
                    282,
                    881,
                    907,
                    -32766,
                    281,
                    513,
                    514,
                    286,
                    1212,
                    1213,
                    1214,
                    1215,
                    1209,
                    1210,
                    326,
                    131,
                    145,
                    939,
                    287,
                    682,
                    1216,
                    1211,
                    109,
                    270,
                    -32766,
                    798,
                    807,
                    -32766,
                    662,
                    639,
                    1191,
                    657,
                    72,
                    675,
                    1075,
                    317,
                    320,
                    -32766,
                    -32766,
                    -32766,
                    1305,
                    -32766,
                    301,
                    -32766,
                    628,
                    -32766,
                    431,
                    543,
                    -32766,
                    -32766,
                    923,
                    555,
                    924,
                    -32766,
                    -32766,
                    -32766,
                    1229,
                    549,
                    -32766,
                    -32766,
                    -32766,
                    -4,
                    891,
                    -490,
                    1191,
                    -32766,
                    411,
                    644,
                    893,
                    299,
                    682,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    893,
                    -32766,
                    682,
                    -32766,
                    13,
                    1231,
                    -32766,
                    452,
                    480,
                    645,
                    909,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    658,
                    -480,
                    -32766,
                    -32766,
                    0,
                    1191,
                    0,
                    0,
                    -32766,
                    411,
                    0,
                    298,
                    -32766,
                    -32766,
                    -32766,
                    305,
                    -32766,
                    -32766,
                    -32766,
                    0,
                    -32766,
                    0,
                    806,
                    -32766,
                    0,
                    0,
                    0,
                    475,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    0,
                    7,
                    -32766,
                    -32766,
                    16,
                    1191,
                    561,
                    596,
                    -32766,
                    411,
                    1219,
                    891,
                    -32766,
                    -32766,
                    -32766,
                    362,
                    -32766,
                    -32766,
                    -32766,
                    818,
                    -32766,
                    -267,
                    881,
                    -32766,
                    39,
                    293,
                    0,
                    0,
                    -32766,
                    -32766,
                    -32766,
                    40,
                    705,
                    706,
                    -32766,
                    -32766,
                    872,
                    963,
                    940,
                    947,
                    -32766,
                    411,
                    937,
                    948,
                    365,
                    870,
                    427,
                    891,
                    935,
                    -32766,
                    1049,
                    291,
                    1244,
                    1052,
                    1053,
                    -111,
                    -111,
                    1050,
                    1051,
                    1057,
                    -560,
                    1262,
                    1296,
                    633,
                    0,
                    826,
                    -111,
                    -111,
                    -111,
                    -111,
                    33,
                    315,
                    -32766,
                    361,
                    683,
                    686,
                    690,
                    692,
                    1191,
                    693,
                    694,
                    695,
                    699,
                    685,
                    320,
                    -32766,
                    -32766,
                    -32766,
                    9,
                    -32766,
                    702,
                    -32766,
                    868,
                    -32766,
                    881,
                    1300,
                    -32766,
                    893,
                    1302,
                    682,
                    -4,
                    -32766,
                    -32766,
                    -32766,
                    829,
                    828,
                    837,
                    -32766,
                    -32766,
                    916,
                    -242,
                    -242,
                    -242,
                    -32766,
                    411,
                    955,
                    365,
                    27,
                    836,
                    1301,
                    915,
                    917,
                    -32766,
                    914,
                    1177,
                    900,
                    910,
                    -111,
                    -111,
                    807,
                    881,
                    898,
                    945,
                    1222,
                    946,
                    1299,
                    1256,
                    867,
                    -111,
                    -111,
                    -111,
                    -111,
                    1245,
                    1263,
                    1269,
                    1272,
                    -241,
                    -241,
                    -241,
                    -558,
                    -532,
                    -531,
                    365,
                    -530,
                    1,
                    28,
                    29,
                    38,
                    42,
                    46,
                    71,
                    0,
                    75,
                    -111,
                    -111,
                    76,
                    77,
                    78,
                    79,
                    893,
                    80,
                    682,
                    -242,
                    867,
                    -111,
                    -111,
                    -111,
                    -111,
                    142,
                    152,
                    156,
                    245,
                    322,
                    347,
                    514,
                    348,
                    1212,
                    1213,
                    1214,
                    1215,
                    1209,
                    1210,
                    349,
                    350,
                    351,
                    352,
                    353,
                    354,
                    1216,
                    1211,
                    355,
                    356,
                    357,
                    359,
                    428,
                    893,
                    -265,
                    682,
                    -241,
                    -264,
                    72,
                    0,
                    18,
                    317,
                    320,
                    19,
                    20,
                    21,
                    23,
                    398,
                    471,
                    472,
                    479,
                    482,
                    483,
                    484,
                    485,
                    489,
                    490,
                    491,
                    498,
                    669,
                    1202,
                    1145,
                    1220,
                    1019,
                    1018,
                    1181,
                    -269,
                    -103,
                    17,
                    22,
                    26,
                    290,
                    397,
                    589,
                    593,
                    620,
                    674,
                    1149,
                    1197,
                    1146,
                    1275,
                    0,
                    -494,
                    1162,
                    0,
                    1223
                ];
                PHP.Parser.prototype.yycheck = [
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    0,
                    9,
                    10,
                    11,
                    12,
                    13,
                    106,
                    1,
                    108,
                    31,
                    9,
                    10,
                    11,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    37,
                    38,
                    30,
                    116,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    117,
                    118,
                    9,
                    10,
                    57,
                    9,
                    10,
                    11,
                    137,
                    138,
                    155,
                    128,
                    129,
                    130,
                    131,
                    106,
                    107,
                    8,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    116,
                    30,
                    80,
                    32,
                    33,
                    34,
                    35,
                    36,
                    1,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    30,
                    80,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    51,
                    1,
                    161,
                    101,
                    80,
                    150,
                    151,
                    152,
                    8,
                    154,
                    9,
                    10,
                    11,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    164,
                    9,
                    10,
                    11,
                    12,
                    13,
                    123,
                    9,
                    10,
                    11,
                    80,
                    161,
                    30,
                    83,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    30,
                    37,
                    38,
                    106,
                    107,
                    1,
                    9,
                    10,
                    11,
                    1,
                    53,
                    54,
                    55,
                    116,
                    57,
                    1,
                    8,
                    14,
                    155,
                    156,
                    157,
                    57,
                    9,
                    10,
                    11,
                    162,
                    69,
                    30,
                    116,
                    32,
                    33,
                    119,
                    120,
                    121,
                    122,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    8,
                    30,
                    80,
                    32,
                    33,
                    34,
                    35,
                    137,
                    138,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    84,
                    70,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    9,
                    9,
                    10,
                    11,
                    160,
                    150,
                    151,
                    152,
                    164,
                    154,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    1,
                    9,
                    10,
                    11,
                    12,
                    13,
                    30,
                    8,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    116,
                    57,
                    14,
                    9,
                    10,
                    11,
                    134,
                    135,
                    161,
                    8,
                    164,
                    160,
                    1,
                    69,
                    167,
                    164,
                    159,
                    57,
                    161,
                    80,
                    8,
                    137,
                    138,
                    1,
                    30,
                    1,
                    32,
                    33,
                    34,
                    1,
                    14,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    31,
                    1,
                    80,
                    30,
                    70,
                    30,
                    9,
                    10,
                    11,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    8,
                    156,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    8,
                    134,
                    135,
                    8,
                    8,
                    150,
                    151,
                    152,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    97,
                    82,
                    149,
                    31,
                    12,
                    13,
                    101,
                    15,
                    116,
                    8,
                    116,
                    106,
                    80,
                    108,
                    161,
                    85,
                    163,
                    106,
                    113,
                    108,
                    8,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    137,
                    138,
                    137,
                    138,
                    14,
                    9,
                    10,
                    11,
                    80,
                    82,
                    14,
                    8,
                    85,
                    50,
                    51,
                    50,
                    51,
                    52,
                    128,
                    56,
                    1,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    70,
                    70,
                    71,
                    72,
                    73,
                    74,
                    162,
                    159,
                    97,
                    78,
                    79,
                    80,
                    116,
                    82,
                    1,
                    146,
                    158,
                    86,
                    87,
                    88,
                    89,
                    163,
                    91,
                    31,
                    93,
                    167,
                    95,
                    156,
                    14,
                    98,
                    99,
                    35,
                    161,
                    37,
                    103,
                    104,
                    105,
                    106,
                    107,
                    1,
                    109,
                    110,
                    147,
                    148,
                    31,
                    160,
                    115,
                    116,
                    8,
                    164,
                    1,
                    155,
                    156,
                    157,
                    70,
                    124,
                    125,
                    126,
                    8,
                    70,
                    1,
                    70,
                    37,
                    38,
                    134,
                    135,
                    8,
                    136,
                    137,
                    82,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    8,
                    35,
                    149,
                    37,
                    164,
                    151,
                    152,
                    164,
                    164,
                    155,
                    156,
                    157,
                    158,
                    1,
                    161,
                    8,
                    163,
                    163,
                    82,
                    165,
                    166,
                    167,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    75,
                    76,
                    77,
                    75,
                    76,
                    134,
                    135,
                    31,
                    8,
                    84,
                    134,
                    135,
                    134,
                    135,
                    1,
                    90,
                    8,
                    92,
                    82,
                    94,
                    149,
                    96,
                    37,
                    38,
                    8,
                    149,
                    80,
                    149,
                    128,
                    59,
                    60,
                    106,
                    161,
                    8,
                    1,
                    161,
                    8,
                    161,
                    159,
                    161,
                    70,
                    167,
                    117,
                    118,
                    31,
                    8,
                    106,
                    70,
                    108,
                    106,
                    14,
                    108,
                    127,
                    128,
                    129,
                    130,
                    131,
                    70,
                    158,
                    74,
                    84,
                    75,
                    76,
                    163,
                    31,
                    80,
                    159,
                    167,
                    161,
                    101,
                    102,
                    14,
                    87,
                    88,
                    89,
                    14,
                    91,
                    31,
                    93,
                    16,
                    95,
                    37,
                    38,
                    98,
                    159,
                    1,
                    161,
                    162,
                    103,
                    104,
                    105,
                    37,
                    38,
                    1,
                    109,
                    110,
                    16,
                    84,
                    16,
                    163,
                    115,
                    116,
                    16,
                    167,
                    134,
                    135,
                    16,
                    161,
                    31,
                    124,
                    16,
                    134,
                    135,
                    167,
                    70,
                    31,
                    16,
                    84,
                    16,
                    149,
                    16,
                    134,
                    135,
                    31,
                    106,
                    107,
                    82,
                    31,
                    74,
                    31,
                    86,
                    161,
                    106,
                    107,
                    80,
                    159,
                    31,
                    161,
                    161,
                    154,
                    31,
                    87,
                    88,
                    89,
                    31,
                    91,
                    31,
                    93,
                    161,
                    95,
                    111,
                    112,
                    98,
                    31,
                    31,
                    31,
                    31,
                    103,
                    104,
                    105,
                    31,
                    31,
                    31,
                    109,
                    110,
                    31,
                    31,
                    31,
                    84,
                    115,
                    116,
                    31,
                    159,
                    31,
                    161,
                    37,
                    84,
                    38,
                    124,
                    35,
                    136,
                    137,
                    35,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    35,
                    31,
                    70,
                    159,
                    37,
                    161,
                    151,
                    152,
                    69,
                    57,
                    74,
                    80,
                    82,
                    85,
                    77,
                    90,
                    80,
                    94,
                    163,
                    92,
                    82,
                    166,
                    167,
                    87,
                    88,
                    89,
                    83,
                    91,
                    114,
                    93,
                    113,
                    95,
                    128,
                    85,
                    98,
                    116,
                    128,
                    153,
                    128,
                    103,
                    104,
                    105,
                    146,
                    89,
                    74,
                    109,
                    110,
                    0,
                    1,
                    149,
                    80,
                    115,
                    116,
                    96,
                    159,
                    133,
                    161,
                    87,
                    88,
                    89,
                    124,
                    91,
                    159,
                    93,
                    161,
                    95,
                    97,
                    146,
                    98,
                    97,
                    97,
                    100,
                    154,
                    103,
                    104,
                    105,
                    74,
                    100,
                    149,
                    109,
                    110,
                    -1,
                    80,
                    -1,
                    -1,
                    115,
                    116,
                    -1,
                    132,
                    87,
                    88,
                    89,
                    132,
                    91,
                    124,
                    93,
                    -1,
                    95,
                    -1,
                    155,
                    98,
                    -1,
                    -1,
                    -1,
                    102,
                    103,
                    104,
                    105,
                    74,
                    -1,
                    149,
                    109,
                    110,
                    149,
                    80,
                    81,
                    153,
                    115,
                    116,
                    160,
                    1,
                    87,
                    88,
                    89,
                    149,
                    91,
                    124,
                    93,
                    160,
                    95,
                    164,
                    84,
                    98,
                    159,
                    158,
                    -1,
                    -1,
                    103,
                    104,
                    105,
                    159,
                    159,
                    159,
                    109,
                    110,
                    159,
                    159,
                    159,
                    159,
                    115,
                    116,
                    159,
                    159,
                    106,
                    159,
                    108,
                    1,
                    159,
                    124,
                    159,
                    113,
                    160,
                    159,
                    159,
                    117,
                    118,
                    159,
                    159,
                    159,
                    163,
                    160,
                    160,
                    160,
                    -1,
                    127,
                    128,
                    129,
                    130,
                    131,
                    161,
                    161,
                    74,
                    161,
                    161,
                    161,
                    161,
                    161,
                    80,
                    161,
                    161,
                    161,
                    161,
                    161,
                    167,
                    87,
                    88,
                    89,
                    150,
                    91,
                    162,
                    93,
                    162,
                    95,
                    84,
                    162,
                    98,
                    159,
                    162,
                    161,
                    162,
                    103,
                    104,
                    105,
                    162,
                    162,
                    162,
                    109,
                    110,
                    162,
                    100,
                    101,
                    102,
                    115,
                    116,
                    162,
                    106,
                    70,
                    162,
                    162,
                    162,
                    162,
                    124,
                    162,
                    162,
                    162,
                    162,
                    117,
                    118,
                    82,
                    84,
                    162,
                    162,
                    86,
                    162,
                    162,
                    162,
                    127,
                    128,
                    129,
                    130,
                    131,
                    162,
                    162,
                    162,
                    162,
                    100,
                    101,
                    102,
                    163,
                    163,
                    163,
                    106,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    -1,
                    163,
                    117,
                    118,
                    163,
                    163,
                    163,
                    163,
                    159,
                    163,
                    161,
                    162,
                    127,
                    128,
                    129,
                    130,
                    131,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    137,
                    163,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    151,
                    152,
                    163,
                    163,
                    163,
                    163,
                    163,
                    159,
                    164,
                    161,
                    162,
                    164,
                    163,
                    -1,
                    164,
                    166,
                    167,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    -1,
                    165,
                    165,
                    -1,
                    166
                ];
                PHP.Parser.prototype.yybase = [
                    0,
                    -2,
                    154,
                    565,
                    876,
                    948,
                    984,
                    514,
                    53,
                    398,
                    837,
                    307,
                    307,
                    67,
                    307,
                    307,
                    307,
                    653,
                    724,
                    724,
                    732,
                    724,
                    616,
                    673,
                    204,
                    204,
                    204,
                    625,
                    625,
                    625,
                    625,
                    694,
                    694,
                    831,
                    831,
                    863,
                    799,
                    765,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    375,
                    519,
                    369,
                    701,
                    1017,
                    1023,
                    1019,
                    1024,
                    1015,
                    1014,
                    1018,
                    1020,
                    1025,
                    911,
                    912,
                    782,
                    918,
                    919,
                    920,
                    921,
                    1021,
                    841,
                    1016,
                    1022,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    290,
                    491,
                    44,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    160,
                    160,
                    160,
                    187,
                    684,
                    684,
                    341,
                    203,
                    610,
                    47,
                    985,
                    985,
                    985,
                    985,
                    985,
                    985,
                    985,
                    985,
                    985,
                    985,
                    144,
                    144,
                    7,
                    7,
                    7,
                    7,
                    7,
                    371,
                    -25,
                    -25,
                    -25,
                    -25,
                    540,
                    385,
                    102,
                    576,
                    358,
                    45,
                    377,
                    460,
                    460,
                    360,
                    231,
                    231,
                    231,
                    231,
                    231,
                    231,
                    -78,
                    -78,
                    -78,
                    -78,
                    -78,
                    -66,
                    319,
                    457,
                    -94,
                    396,
                    423,
                    586,
                    586,
                    586,
                    586,
                    423,
                    423,
                    423,
                    423,
                    750,
                    1029,
                    423,
                    423,
                    423,
                    511,
                    516,
                    516,
                    518,
                    147,
                    147,
                    147,
                    516,
                    583,
                    777,
                    422,
                    583,
                    422,
                    194,
                    92,
                    748,
                    -40,
                    87,
                    412,
                    748,
                    617,
                    627,
                    198,
                    143,
                    773,
                    658,
                    773,
                    1013,
                    757,
                    764,
                    717,
                    838,
                    860,
                    1026,
                    800,
                    908,
                    806,
                    910,
                    219,
                    686,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    855,
                    552,
                    1013,
                    286,
                    855,
                    855,
                    855,
                    552,
                    552,
                    552,
                    552,
                    552,
                    552,
                    552,
                    552,
                    552,
                    552,
                    679,
                    286,
                    568,
                    626,
                    286,
                    794,
                    552,
                    375,
                    758,
                    375,
                    375,
                    375,
                    375,
                    958,
                    375,
                    375,
                    375,
                    375,
                    375,
                    375,
                    970,
                    769,
                    -16,
                    375,
                    519,
                    12,
                    12,
                    547,
                    83,
                    12,
                    12,
                    12,
                    12,
                    375,
                    375,
                    375,
                    658,
                    781,
                    713,
                    666,
                    792,
                    448,
                    781,
                    781,
                    781,
                    438,
                    444,
                    193,
                    447,
                    570,
                    523,
                    580,
                    760,
                    760,
                    767,
                    929,
                    929,
                    760,
                    759,
                    760,
                    767,
                    934,
                    760,
                    929,
                    805,
                    359,
                    648,
                    577,
                    611,
                    656,
                    929,
                    478,
                    760,
                    760,
                    760,
                    760,
                    665,
                    760,
                    467,
                    433,
                    760,
                    760,
                    785,
                    774,
                    789,
                    60,
                    929,
                    929,
                    929,
                    789,
                    596,
                    751,
                    751,
                    751,
                    811,
                    812,
                    746,
                    771,
                    567,
                    498,
                    677,
                    348,
                    779,
                    771,
                    771,
                    760,
                    640,
                    746,
                    771,
                    746,
                    771,
                    747,
                    771,
                    771,
                    771,
                    746,
                    771,
                    759,
                    585,
                    771,
                    734,
                    668,
                    224,
                    771,
                    6,
                    935,
                    937,
                    354,
                    940,
                    932,
                    941,
                    979,
                    942,
                    943,
                    851,
                    956,
                    933,
                    945,
                    931,
                    930,
                    780,
                    703,
                    720,
                    790,
                    729,
                    928,
                    768,
                    768,
                    768,
                    925,
                    768,
                    768,
                    768,
                    768,
                    768,
                    768,
                    768,
                    768,
                    703,
                    788,
                    804,
                    733,
                    783,
                    960,
                    722,
                    726,
                    725,
                    868,
                    1027,
                    1028,
                    737,
                    739,
                    958,
                    1006,
                    953,
                    803,
                    730,
                    992,
                    967,
                    866,
                    848,
                    968,
                    969,
                    993,
                    1007,
                    1008,
                    871,
                    761,
                    874,
                    880,
                    797,
                    971,
                    852,
                    768,
                    935,
                    943,
                    933,
                    945,
                    931,
                    930,
                    763,
                    762,
                    753,
                    755,
                    749,
                    745,
                    736,
                    738,
                    770,
                    1009,
                    924,
                    835,
                    830,
                    970,
                    926,
                    703,
                    839,
                    986,
                    847,
                    994,
                    995,
                    850,
                    801,
                    772,
                    840,
                    881,
                    972,
                    975,
                    976,
                    853,
                    1010,
                    810,
                    989,
                    795,
                    996,
                    802,
                    882,
                    997,
                    998,
                    999,
                    1000,
                    885,
                    854,
                    856,
                    857,
                    815,
                    754,
                    980,
                    786,
                    891,
                    335,
                    787,
                    796,
                    978,
                    363,
                    957,
                    858,
                    894,
                    895,
                    1001,
                    1002,
                    1003,
                    896,
                    954,
                    816,
                    990,
                    752,
                    991,
                    983,
                    817,
                    818,
                    485,
                    784,
                    778,
                    541,
                    676,
                    897,
                    899,
                    900,
                    955,
                    775,
                    766,
                    821,
                    822,
                    1011,
                    901,
                    697,
                    824,
                    740,
                    902,
                    1005,
                    742,
                    744,
                    756,
                    859,
                    793,
                    743,
                    798,
                    977,
                    776,
                    827,
                    907,
                    829,
                    832,
                    833,
                    1004,
                    836,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    307,
                    307,
                    307,
                    307,
                    0,
                    0,
                    307,
                    0,
                    0,
                    0,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    423,
                    423,
                    291,
                    291,
                    0,
                    291,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    805,
                    147,
                    147,
                    147,
                    147,
                    423,
                    423,
                    423,
                    423,
                    423,
                    -88,
                    -88,
                    147,
                    147,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    0,
                    0,
                    0,
                    286,
                    422,
                    0,
                    759,
                    759,
                    759,
                    759,
                    0,
                    0,
                    0,
                    0,
                    422,
                    422,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    286,
                    422,
                    0,
                    286,
                    0,
                    759,
                    759,
                    423,
                    805,
                    805,
                    314,
                    423,
                    0,
                    0,
                    0,
                    0,
                    286,
                    759,
                    286,
                    552,
                    422,
                    552,
                    552,
                    12,
                    375,
                    314,
                    608,
                    608,
                    608,
                    608,
                    0,
                    658,
                    805,
                    805,
                    805,
                    805,
                    805,
                    805,
                    805,
                    805,
                    805,
                    805,
                    805,
                    759,
                    0,
                    805,
                    0,
                    759,
                    759,
                    759,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    759,
                    0,
                    0,
                    929,
                    0,
                    0,
                    0,
                    0,
                    760,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    760,
                    934,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    759,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    768,
                    801,
                    0,
                    801,
                    0,
                    768,
                    768,
                    768
                ];
                PHP.Parser.prototype.yydefault = [
                    3,
                    32767,
                    103,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    101,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    578,
                    578,
                    578,
                    578,
                    32767,
                    32767,
                    246,
                    103,
                    32767,
                    32767,
                    454,
                    372,
                    372,
                    372,
                    32767,
                    32767,
                    522,
                    522,
                    522,
                    522,
                    522,
                    522,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    454,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    101,
                    32767,
                    32767,
                    32767,
                    37,
                    7,
                    8,
                    10,
                    11,
                    50,
                    17,
                    310,
                    32767,
                    32767,
                    32767,
                    32767,
                    103,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    571,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    458,
                    437,
                    438,
                    440,
                    441,
                    371,
                    523,
                    577,
                    313,
                    574,
                    370,
                    146,
                    325,
                    315,
                    234,
                    316,
                    250,
                    459,
                    251,
                    460,
                    463,
                    464,
                    211,
                    279,
                    367,
                    150,
                    401,
                    455,
                    403,
                    453,
                    457,
                    402,
                    377,
                    382,
                    383,
                    384,
                    385,
                    386,
                    387,
                    388,
                    389,
                    390,
                    391,
                    392,
                    393,
                    394,
                    375,
                    376,
                    456,
                    434,
                    433,
                    432,
                    399,
                    32767,
                    32767,
                    400,
                    404,
                    374,
                    407,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    103,
                    32767,
                    405,
                    406,
                    423,
                    424,
                    421,
                    422,
                    425,
                    32767,
                    426,
                    427,
                    428,
                    429,
                    32767,
                    32767,
                    302,
                    32767,
                    32767,
                    351,
                    349,
                    414,
                    415,
                    302,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    516,
                    431,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    103,
                    32767,
                    101,
                    518,
                    396,
                    398,
                    486,
                    409,
                    410,
                    408,
                    378,
                    32767,
                    493,
                    32767,
                    103,
                    495,
                    32767,
                    32767,
                    32767,
                    112,
                    32767,
                    32767,
                    32767,
                    517,
                    32767,
                    524,
                    524,
                    32767,
                    479,
                    101,
                    194,
                    32767,
                    194,
                    194,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    585,
                    479,
                    111,
                    111,
                    111,
                    111,
                    111,
                    111,
                    111,
                    111,
                    111,
                    111,
                    111,
                    32767,
                    194,
                    111,
                    32767,
                    32767,
                    32767,
                    101,
                    194,
                    194,
                    194,
                    194,
                    194,
                    194,
                    194,
                    194,
                    194,
                    194,
                    189,
                    32767,
                    260,
                    262,
                    103,
                    539,
                    194,
                    32767,
                    498,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    491,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    479,
                    419,
                    139,
                    32767,
                    139,
                    524,
                    411,
                    412,
                    413,
                    481,
                    524,
                    524,
                    524,
                    298,
                    281,
                    32767,
                    32767,
                    32767,
                    32767,
                    496,
                    496,
                    101,
                    101,
                    101,
                    101,
                    491,
                    32767,
                    32767,
                    112,
                    100,
                    100,
                    100,
                    100,
                    100,
                    104,
                    102,
                    32767,
                    32767,
                    32767,
                    32767,
                    100,
                    32767,
                    102,
                    102,
                    32767,
                    32767,
                    217,
                    208,
                    215,
                    102,
                    32767,
                    543,
                    544,
                    215,
                    102,
                    219,
                    219,
                    219,
                    239,
                    239,
                    470,
                    304,
                    102,
                    100,
                    102,
                    102,
                    196,
                    304,
                    304,
                    32767,
                    102,
                    470,
                    304,
                    470,
                    304,
                    198,
                    304,
                    304,
                    304,
                    470,
                    304,
                    32767,
                    102,
                    304,
                    210,
                    100,
                    100,
                    304,
                    32767,
                    32767,
                    32767,
                    481,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    511,
                    32767,
                    528,
                    541,
                    417,
                    418,
                    420,
                    526,
                    442,
                    443,
                    444,
                    445,
                    446,
                    447,
                    448,
                    450,
                    573,
                    32767,
                    485,
                    32767,
                    32767,
                    32767,
                    32767,
                    324,
                    583,
                    32767,
                    583,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    584,
                    32767,
                    524,
                    32767,
                    32767,
                    32767,
                    32767,
                    416,
                    9,
                    76,
                    43,
                    44,
                    52,
                    58,
                    502,
                    503,
                    504,
                    505,
                    499,
                    500,
                    506,
                    501,
                    32767,
                    32767,
                    507,
                    549,
                    32767,
                    32767,
                    525,
                    576,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    139,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    511,
                    32767,
                    137,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    524,
                    32767,
                    32767,
                    32767,
                    300,
                    301,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    524,
                    32767,
                    32767,
                    32767,
                    283,
                    284,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    278,
                    32767,
                    32767,
                    366,
                    32767,
                    32767,
                    32767,
                    32767,
                    345,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    152,
                    152,
                    3,
                    3,
                    327,
                    152,
                    152,
                    152,
                    327,
                    152,
                    327,
                    327,
                    327,
                    152,
                    152,
                    152,
                    152,
                    152,
                    152,
                    272,
                    184,
                    254,
                    257,
                    239,
                    239,
                    152,
                    337,
                    152
                ];
                PHP.Parser.prototype.yygoto = [
                    194,
                    194,
                    670,
                    422,
                    643,
                    463,
                    1264,
                    1265,
                    1022,
                    416,
                    308,
                    309,
                    329,
                    563,
                    314,
                    421,
                    330,
                    423,
                    622,
                    801,
                    678,
                    637,
                    586,
                    651,
                    652,
                    653,
                    165,
                    165,
                    165,
                    165,
                    218,
                    195,
                    191,
                    191,
                    175,
                    177,
                    213,
                    191,
                    191,
                    191,
                    191,
                    191,
                    192,
                    192,
                    192,
                    192,
                    192,
                    192,
                    186,
                    187,
                    188,
                    189,
                    190,
                    215,
                    213,
                    216,
                    521,
                    522,
                    412,
                    523,
                    525,
                    526,
                    527,
                    528,
                    529,
                    530,
                    531,
                    532,
                    1091,
                    166,
                    167,
                    168,
                    193,
                    169,
                    170,
                    171,
                    164,
                    172,
                    173,
                    174,
                    176,
                    212,
                    214,
                    217,
                    235,
                    238,
                    241,
                    242,
                    244,
                    255,
                    256,
                    257,
                    258,
                    259,
                    260,
                    261,
                    263,
                    264,
                    265,
                    266,
                    274,
                    275,
                    311,
                    312,
                    313,
                    417,
                    418,
                    419,
                    568,
                    219,
                    220,
                    221,
                    222,
                    223,
                    224,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    178,
                    234,
                    179,
                    196,
                    197,
                    198,
                    236,
                    186,
                    187,
                    188,
                    189,
                    190,
                    215,
                    1091,
                    199,
                    180,
                    181,
                    182,
                    200,
                    196,
                    183,
                    237,
                    201,
                    199,
                    163,
                    202,
                    203,
                    184,
                    204,
                    205,
                    206,
                    185,
                    207,
                    208,
                    209,
                    210,
                    211,
                    323,
                    323,
                    323,
                    323,
                    827,
                    608,
                    608,
                    824,
                    547,
                    538,
                    342,
                    1221,
                    1221,
                    1221,
                    1221,
                    1221,
                    1221,
                    1221,
                    1221,
                    1221,
                    1221,
                    1239,
                    1239,
                    288,
                    288,
                    288,
                    288,
                    1239,
                    1239,
                    1239,
                    1239,
                    1239,
                    1239,
                    1239,
                    1239,
                    1239,
                    1239,
                    388,
                    538,
                    547,
                    556,
                    557,
                    395,
                    566,
                    588,
                    602,
                    603,
                    832,
                    825,
                    880,
                    875,
                    876,
                    889,
                    15,
                    833,
                    877,
                    830,
                    878,
                    879,
                    831,
                    799,
                    251,
                    251,
                    883,
                    919,
                    992,
                    1000,
                    1004,
                    1001,
                    1005,
                    1237,
                    1237,
                    938,
                    1043,
                    1039,
                    1040,
                    1237,
                    1237,
                    1237,
                    1237,
                    1237,
                    1237,
                    1237,
                    1237,
                    1237,
                    1237,
                    858,
                    248,
                    248,
                    248,
                    248,
                    250,
                    252,
                    533,
                    533,
                    533,
                    533,
                    487,
                    590,
                    488,
                    1190,
                    1190,
                    997,
                    1190,
                    997,
                    494,
                    1290,
                    1290,
                    560,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    1261,
                    1261,
                    1290,
                    1261,
                    340,
                    1190,
                    930,
                    402,
                    677,
                    1279,
                    1190,
                    1190,
                    1190,
                    1190,
                    959,
                    345,
                    1190,
                    1190,
                    1190,
                    1271,
                    1271,
                    1271,
                    1271,
                    606,
                    640,
                    345,
                    345,
                    1273,
                    1273,
                    1273,
                    1273,
                    820,
                    820,
                    805,
                    896,
                    884,
                    840,
                    885,
                    897,
                    345,
                    345,
                    5,
                    345,
                    6,
                    1306,
                    384,
                    535,
                    535,
                    559,
                    535,
                    415,
                    852,
                    597,
                    1257,
                    839,
                    540,
                    524,
                    524,
                    345,
                    1289,
                    1289,
                    642,
                    524,
                    524,
                    524,
                    524,
                    524,
                    524,
                    524,
                    524,
                    524,
                    524,
                    445,
                    805,
                    1140,
                    805,
                    1289,
                    932,
                    932,
                    932,
                    932,
                    1063,
                    1064,
                    445,
                    926,
                    933,
                    386,
                    390,
                    548,
                    587,
                    591,
                    1030,
                    1292,
                    331,
                    554,
                    1259,
                    1259,
                    1030,
                    704,
                    621,
                    623,
                    823,
                    641,
                    1250,
                    319,
                    303,
                    660,
                    664,
                    973,
                    668,
                    676,
                    969,
                    429,
                    553,
                    962,
                    936,
                    936,
                    934,
                    936,
                    703,
                    601,
                    537,
                    971,
                    966,
                    343,
                    344,
                    663,
                    817,
                    595,
                    609,
                    612,
                    613,
                    614,
                    615,
                    634,
                    635,
                    636,
                    680,
                    439,
                    1186,
                    845,
                    454,
                    454,
                    439,
                    439,
                    1266,
                    1267,
                    820,
                    901,
                    1079,
                    454,
                    394,
                    539,
                    551,
                    1183,
                    605,
                    540,
                    539,
                    842,
                    551,
                    978,
                    272,
                    387,
                    618,
                    619,
                    981,
                    536,
                    536,
                    844,
                    707,
                    646,
                    957,
                    567,
                    457,
                    458,
                    459,
                    838,
                    850,
                    254,
                    254,
                    1297,
                    1298,
                    400,
                    401,
                    976,
                    976,
                    464,
                    649,
                    1182,
                    650,
                    1028,
                    404,
                    405,
                    406,
                    1187,
                    661,
                    424,
                    1032,
                    407,
                    564,
                    600,
                    815,
                    338,
                    424,
                    854,
                    848,
                    853,
                    841,
                    1027,
                    1031,
                    1009,
                    1002,
                    1006,
                    1003,
                    1007,
                    1185,
                    941,
                    1188,
                    1247,
                    1248,
                    943,
                    0,
                    1074,
                    439,
                    439,
                    439,
                    439,
                    439,
                    439,
                    439,
                    439,
                    439,
                    439,
                    439,
                    0,
                    468,
                    439,
                    585,
                    1056,
                    931,
                    681,
                    667,
                    667,
                    0,
                    495,
                    673,
                    1054,
                    1171,
                    912,
                    0,
                    0,
                    1172,
                    1175,
                    913,
                    1176,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1072,
                    857
                ];
                PHP.Parser.prototype.yygcheck = [
                    42,
                    42,
                    72,
                    65,
                    65,
                    166,
                    166,
                    166,
                    119,
                    65,
                    65,
                    65,
                    65,
                    65,
                    65,
                    65,
                    65,
                    65,
                    65,
                    7,
                    9,
                    84,
                    122,
                    84,
                    84,
                    84,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    23,
                    23,
                    23,
                    23,
                    15,
                    104,
                    104,
                    26,
                    75,
                    75,
                    93,
                    104,
                    104,
                    104,
                    104,
                    104,
                    104,
                    104,
                    104,
                    104,
                    104,
                    160,
                    160,
                    24,
                    24,
                    24,
                    24,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    75,
                    75,
                    75,
                    75,
                    75,
                    75,
                    75,
                    75,
                    75,
                    75,
                    15,
                    27,
                    15,
                    15,
                    15,
                    15,
                    75,
                    15,
                    15,
                    15,
                    15,
                    15,
                    15,
                    6,
                    5,
                    5,
                    15,
                    87,
                    87,
                    87,
                    87,
                    87,
                    87,
                    161,
                    161,
                    49,
                    15,
                    15,
                    15,
                    161,
                    161,
                    161,
                    161,
                    161,
                    161,
                    161,
                    161,
                    161,
                    161,
                    45,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    103,
                    103,
                    103,
                    103,
                    147,
                    103,
                    147,
                    72,
                    72,
                    72,
                    72,
                    72,
                    147,
                    173,
                    173,
                    162,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    122,
                    122,
                    173,
                    122,
                    169,
                    72,
                    89,
                    89,
                    89,
                    171,
                    72,
                    72,
                    72,
                    72,
                    99,
                    14,
                    72,
                    72,
                    72,
                    9,
                    9,
                    9,
                    9,
                    55,
                    55,
                    14,
                    14,
                    122,
                    122,
                    122,
                    122,
                    22,
                    22,
                    12,
                    72,
                    64,
                    35,
                    64,
                    72,
                    14,
                    14,
                    46,
                    14,
                    46,
                    14,
                    61,
                    19,
                    19,
                    100,
                    19,
                    13,
                    35,
                    13,
                    122,
                    35,
                    14,
                    163,
                    163,
                    14,
                    172,
                    172,
                    63,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    19,
                    12,
                    143,
                    12,
                    172,
                    19,
                    19,
                    19,
                    19,
                    136,
                    136,
                    19,
                    19,
                    19,
                    58,
                    58,
                    58,
                    58,
                    58,
                    122,
                    172,
                    29,
                    48,
                    122,
                    122,
                    122,
                    48,
                    48,
                    48,
                    25,
                    48,
                    14,
                    159,
                    159,
                    48,
                    48,
                    48,
                    48,
                    48,
                    48,
                    109,
                    9,
                    25,
                    25,
                    25,
                    25,
                    25,
                    25,
                    9,
                    25,
                    25,
                    25,
                    93,
                    93,
                    14,
                    18,
                    79,
                    79,
                    79,
                    79,
                    79,
                    79,
                    79,
                    79,
                    79,
                    79,
                    23,
                    20,
                    39,
                    141,
                    141,
                    23,
                    23,
                    168,
                    168,
                    22,
                    17,
                    17,
                    141,
                    28,
                    9,
                    9,
                    152,
                    17,
                    14,
                    9,
                    37,
                    9,
                    17,
                    24,
                    9,
                    83,
                    83,
                    106,
                    24,
                    24,
                    17,
                    95,
                    17,
                    17,
                    9,
                    9,
                    9,
                    9,
                    17,
                    9,
                    5,
                    5,
                    9,
                    9,
                    80,
                    80,
                    103,
                    103,
                    149,
                    80,
                    17,
                    80,
                    121,
                    80,
                    80,
                    80,
                    20,
                    80,
                    113,
                    124,
                    80,
                    2,
                    2,
                    20,
                    80,
                    113,
                    41,
                    9,
                    16,
                    16,
                    16,
                    16,
                    113,
                    113,
                    113,
                    113,
                    113,
                    14,
                    16,
                    20,
                    20,
                    20,
                    92,
                    -1,
                    139,
                    23,
                    23,
                    23,
                    23,
                    23,
                    23,
                    23,
                    23,
                    23,
                    23,
                    23,
                    -1,
                    82,
                    23,
                    8,
                    8,
                    16,
                    8,
                    8,
                    8,
                    -1,
                    8,
                    8,
                    8,
                    78,
                    78,
                    -1,
                    -1,
                    78,
                    78,
                    78,
                    78,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    16,
                    16
                ];
                PHP.Parser.prototype.yygbase = [
                    0,
                    0,
                    -203,
                    0,
                    0,
                    221,
                    208,
                    10,
                    512,
                    7,
                    0,
                    0,
                    24,
                    1,
                    5,
                    -174,
                    47,
                    -23,
                    105,
                    61,
                    38,
                    0,
                    -10,
                    158,
                    181,
                    379,
                    164,
                    205,
                    102,
                    84,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -43,
                    0,
                    107,
                    0,
                    104,
                    0,
                    54,
                    -1,
                    0,
                    0,
                    235,
                    -384,
                    0,
                    -307,
                    210,
                    0,
                    0,
                    0,
                    0,
                    0,
                    266,
                    0,
                    0,
                    324,
                    0,
                    0,
                    286,
                    0,
                    103,
                    298,
                    -236,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -6,
                    0,
                    0,
                    -167,
                    0,
                    0,
                    129,
                    62,
                    -14,
                    0,
                    53,
                    -22,
                    -669,
                    0,
                    0,
                    -52,
                    0,
                    -11,
                    0,
                    0,
                    68,
                    -299,
                    0,
                    52,
                    0,
                    0,
                    0,
                    262,
                    288,
                    0,
                    0,
                    227,
                    -73,
                    0,
                    87,
                    0,
                    0,
                    118,
                    0,
                    0,
                    0,
                    209,
                    0,
                    0,
                    0,
                    0,
                    0,
                    6,
                    0,
                    108,
                    15,
                    0,
                    46,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    91,
                    0,
                    0,
                    69,
                    0,
                    390,
                    0,
                    86,
                    0,
                    0,
                    0,
                    -224,
                    0,
                    37,
                    0,
                    0,
                    77,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    70,
                    -57,
                    -8,
                    241,
                    99,
                    0,
                    0,
                    -290,
                    0,
                    65,
                    257,
                    0,
                    261,
                    39,
                    -35,
                    0,
                    0
                ];
                PHP.Parser.prototype.yygdefault = [
                    -32768,
                    499,
                    711,
                    4,
                    712,
                    905,
                    788,
                    797,
                    583,
                    515,
                    679,
                    339,
                    610,
                    413,
                    1255,
                    882,
                    1078,
                    565,
                    816,
                    1199,
                    1207,
                    446,
                    819,
                    324,
                    701,
                    864,
                    865,
                    866,
                    391,
                    376,
                    382,
                    389,
                    632,
                    611,
                    481,
                    851,
                    442,
                    843,
                    473,
                    846,
                    441,
                    855,
                    162,
                    410,
                    497,
                    859,
                    3,
                    861,
                    542,
                    892,
                    377,
                    869,
                    378,
                    656,
                    871,
                    550,
                    873,
                    874,
                    385,
                    392,
                    393,
                    1083,
                    558,
                    607,
                    886,
                    243,
                    552,
                    887,
                    375,
                    888,
                    895,
                    380,
                    383,
                    665,
                    453,
                    492,
                    486,
                    403,
                    1058,
                    594,
                    629,
                    450,
                    467,
                    617,
                    616,
                    604,
                    466,
                    425,
                    408,
                    928,
                    474,
                    451,
                    942,
                    341,
                    950,
                    709,
                    1090,
                    624,
                    476,
                    958,
                    625,
                    965,
                    968,
                    516,
                    517,
                    465,
                    980,
                    269,
                    983,
                    477,
                    1015,
                    647,
                    648,
                    995,
                    626,
                    627,
                    1013,
                    460,
                    584,
                    1021,
                    443,
                    1029,
                    1243,
                    444,
                    1033,
                    262,
                    1036,
                    276,
                    409,
                    426,
                    1041,
                    1042,
                    8,
                    1048,
                    671,
                    672,
                    10,
                    273,
                    496,
                    1073,
                    666,
                    440,
                    1089,
                    430,
                    1159,
                    1161,
                    544,
                    478,
                    1179,
                    1178,
                    659,
                    493,
                    1184,
                    1246,
                    438,
                    518,
                    461,
                    310,
                    519,
                    302,
                    327,
                    307,
                    534,
                    289,
                    328,
                    520,
                    462,
                    1252,
                    1260,
                    325,
                    30,
                    1280,
                    1291,
                    335,
                    562,
                    599
                ];
                PHP.Parser.prototype.yylhs = [
                    0,
                    1,
                    3,
                    3,
                    2,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    9,
                    10,
                    11,
                    11,
                    11,
                    12,
                    12,
                    13,
                    13,
                    14,
                    15,
                    15,
                    16,
                    16,
                    17,
                    17,
                    18,
                    18,
                    21,
                    21,
                    22,
                    23,
                    23,
                    24,
                    24,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    29,
                    29,
                    30,
                    30,
                    32,
                    34,
                    34,
                    28,
                    36,
                    36,
                    33,
                    38,
                    38,
                    35,
                    35,
                    37,
                    37,
                    39,
                    39,
                    31,
                    40,
                    40,
                    41,
                    43,
                    44,
                    44,
                    45,
                    46,
                    46,
                    48,
                    47,
                    47,
                    47,
                    47,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    25,
                    25,
                    68,
                    68,
                    71,
                    71,
                    70,
                    69,
                    69,
                    62,
                    74,
                    74,
                    75,
                    75,
                    76,
                    76,
                    77,
                    77,
                    78,
                    78,
                    26,
                    26,
                    27,
                    27,
                    27,
                    27,
                    86,
                    86,
                    88,
                    88,
                    81,
                    81,
                    81,
                    82,
                    82,
                    85,
                    85,
                    83,
                    83,
                    89,
                    90,
                    90,
                    56,
                    56,
                    64,
                    64,
                    67,
                    67,
                    67,
                    66,
                    91,
                    91,
                    92,
                    57,
                    57,
                    57,
                    57,
                    93,
                    93,
                    94,
                    94,
                    95,
                    95,
                    96,
                    97,
                    97,
                    98,
                    98,
                    99,
                    99,
                    54,
                    54,
                    50,
                    50,
                    101,
                    52,
                    52,
                    102,
                    51,
                    51,
                    53,
                    53,
                    63,
                    63,
                    63,
                    63,
                    79,
                    79,
                    105,
                    105,
                    107,
                    107,
                    108,
                    108,
                    108,
                    108,
                    106,
                    106,
                    106,
                    110,
                    110,
                    110,
                    110,
                    87,
                    87,
                    113,
                    113,
                    113,
                    111,
                    111,
                    114,
                    114,
                    112,
                    112,
                    115,
                    115,
                    116,
                    116,
                    116,
                    116,
                    109,
                    109,
                    80,
                    80,
                    80,
                    20,
                    20,
                    20,
                    118,
                    117,
                    117,
                    119,
                    119,
                    119,
                    119,
                    59,
                    120,
                    120,
                    121,
                    60,
                    123,
                    123,
                    124,
                    124,
                    125,
                    125,
                    84,
                    126,
                    126,
                    126,
                    126,
                    126,
                    126,
                    131,
                    131,
                    132,
                    132,
                    133,
                    133,
                    133,
                    133,
                    133,
                    134,
                    135,
                    135,
                    130,
                    130,
                    127,
                    127,
                    129,
                    129,
                    137,
                    137,
                    136,
                    136,
                    136,
                    136,
                    136,
                    136,
                    136,
                    128,
                    138,
                    138,
                    140,
                    139,
                    139,
                    61,
                    100,
                    141,
                    141,
                    55,
                    55,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    148,
                    142,
                    142,
                    147,
                    147,
                    150,
                    151,
                    151,
                    152,
                    153,
                    153,
                    153,
                    19,
                    19,
                    72,
                    72,
                    72,
                    72,
                    143,
                    143,
                    143,
                    143,
                    155,
                    155,
                    144,
                    144,
                    146,
                    146,
                    146,
                    149,
                    149,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    161,
                    161,
                    104,
                    163,
                    163,
                    163,
                    163,
                    145,
                    145,
                    145,
                    145,
                    145,
                    145,
                    145,
                    145,
                    58,
                    58,
                    158,
                    158,
                    158,
                    158,
                    164,
                    164,
                    154,
                    154,
                    154,
                    165,
                    165,
                    165,
                    165,
                    165,
                    165,
                    73,
                    73,
                    65,
                    65,
                    65,
                    65,
                    122,
                    122,
                    122,
                    122,
                    168,
                    167,
                    157,
                    157,
                    157,
                    157,
                    157,
                    157,
                    157,
                    156,
                    156,
                    156,
                    166,
                    166,
                    166,
                    166,
                    103,
                    162,
                    170,
                    170,
                    169,
                    169,
                    171,
                    171,
                    171,
                    171,
                    171,
                    171,
                    171,
                    171,
                    159,
                    159,
                    159,
                    159,
                    173,
                    174,
                    172,
                    172,
                    172,
                    172,
                    172,
                    172,
                    172,
                    172,
                    175,
                    175,
                    175,
                    175
                ];
                PHP.Parser.prototype.yylen = [
                    1,
                    1,
                    2,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    0,
                    1,
                    0,
                    1,
                    1,
                    2,
                    1,
                    3,
                    4,
                    1,
                    2,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    5,
                    4,
                    3,
                    4,
                    2,
                    3,
                    1,
                    1,
                    7,
                    6,
                    2,
                    3,
                    1,
                    2,
                    3,
                    1,
                    2,
                    3,
                    1,
                    1,
                    3,
                    1,
                    3,
                    1,
                    2,
                    2,
                    3,
                    1,
                    3,
                    2,
                    3,
                    1,
                    3,
                    2,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    7,
                    10,
                    5,
                    7,
                    9,
                    5,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    1,
                    2,
                    5,
                    7,
                    9,
                    6,
                    5,
                    6,
                    3,
                    2,
                    1,
                    1,
                    1,
                    0,
                    2,
                    1,
                    3,
                    8,
                    0,
                    4,
                    2,
                    1,
                    3,
                    0,
                    1,
                    0,
                    1,
                    0,
                    1,
                    3,
                    1,
                    8,
                    9,
                    8,
                    7,
                    6,
                    8,
                    0,
                    2,
                    0,
                    2,
                    1,
                    2,
                    2,
                    0,
                    2,
                    0,
                    2,
                    0,
                    2,
                    2,
                    1,
                    3,
                    1,
                    4,
                    1,
                    4,
                    1,
                    1,
                    4,
                    2,
                    1,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    0,
                    2,
                    4,
                    3,
                    1,
                    1,
                    7,
                    0,
                    2,
                    1,
                    3,
                    3,
                    4,
                    1,
                    4,
                    0,
                    2,
                    5,
                    0,
                    2,
                    6,
                    0,
                    2,
                    0,
                    3,
                    1,
                    2,
                    1,
                    1,
                    2,
                    0,
                    1,
                    3,
                    0,
                    2,
                    1,
                    1,
                    1,
                    1,
                    6,
                    8,
                    6,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    1,
                    2,
                    1,
                    1,
                    0,
                    1,
                    0,
                    2,
                    2,
                    2,
                    4,
                    3,
                    1,
                    1,
                    3,
                    1,
                    2,
                    2,
                    3,
                    2,
                    3,
                    1,
                    1,
                    2,
                    3,
                    1,
                    1,
                    3,
                    2,
                    0,
                    1,
                    5,
                    5,
                    10,
                    3,
                    5,
                    1,
                    1,
                    3,
                    0,
                    2,
                    4,
                    5,
                    4,
                    4,
                    4,
                    3,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    0,
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    1,
                    3,
                    1,
                    1,
                    3,
                    2,
                    2,
                    3,
                    1,
                    0,
                    1,
                    1,
                    3,
                    3,
                    3,
                    4,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    4,
                    3,
                    4,
                    4,
                    2,
                    2,
                    4,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    1,
                    3,
                    2,
                    1,
                    2,
                    4,
                    2,
                    2,
                    8,
                    9,
                    8,
                    9,
                    9,
                    10,
                    9,
                    10,
                    8,
                    3,
                    2,
                    0,
                    4,
                    2,
                    1,
                    3,
                    2,
                    2,
                    2,
                    4,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    1,
                    1,
                    1,
                    0,
                    3,
                    0,
                    1,
                    1,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    4,
                    1,
                    1,
                    3,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    2,
                    3,
                    0,
                    1,
                    1,
                    3,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    1,
                    1,
                    4,
                    4,
                    1,
                    4,
                    4,
                    0,
                    1,
                    1,
                    1,
                    3,
                    3,
                    1,
                    4,
                    2,
                    2,
                    1,
                    3,
                    1,
                    4,
                    4,
                    3,
                    3,
                    3,
                    3,
                    1,
                    3,
                    1,
                    1,
                    3,
                    1,
                    1,
                    4,
                    1,
                    1,
                    1,
                    3,
                    1,
                    1,
                    2,
                    1,
                    3,
                    4,
                    3,
                    2,
                    0,
                    2,
                    2,
                    1,
                    2,
                    1,
                    1,
                    1,
                    4,
                    3,
                    3,
                    3,
                    3,
                    6,
                    3,
                    1,
                    1,
                    2,
                    1
                ];
                exports1.j = PHP;
            /***/ },
            /***/ 7770: /***/ (__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_471885__)=>{
                "use strict";
                /* harmony export */ __nested_webpack_require_471885__.d(__nested_webpack_exports__, {
                    /* harmony export */ Tk: ()=>/* binding */ checkValueAgainstRegexpArray,
                    /* harmony export */ rL: ()=>/* binding */ mergeObjects
                });
                /* unused harmony exports notEmpty, isEmptyRange, mergeRanges, convertToUri */ function mergeObjects(obj1, obj2, excludeUndefined = false) {
                    if (!obj1) return obj2;
                    if (!obj2) return obj1;
                    if (excludeUndefined) {
                        obj1 = excludeUndefinedValues(obj1);
                        obj2 = excludeUndefinedValues(obj2);
                    }
                    const mergedObjects = {
                        ...obj2,
                        ...obj1
                    }; // Give priority to obj1 values by spreading obj2 first, then obj1
                    for (const key of Object.keys(mergedObjects)){
                        if (obj1[key] && obj2[key]) {
                            if (Array.isArray(obj1[key])) {
                                mergedObjects[key] = obj1[key].concat(obj2[key]);
                            } else if (Array.isArray(obj2[key])) {
                                mergedObjects[key] = obj2[key].concat(obj1[key]);
                            } else if (typeof obj1[key] === 'object' && typeof obj2[key] === 'object') {
                                mergedObjects[key] = mergeObjects(obj1[key], obj2[key]);
                            }
                        }
                    }
                    return mergedObjects;
                }
                function excludeUndefinedValues(obj) {
                    const filteredEntries = Object.entries(obj).filter(([_, value])=>value !== undefined);
                    return Object.fromEntries(filteredEntries);
                }
                function notEmpty1(value) {
                    return value !== null && value !== undefined;
                }
                function isEmptyRange(range) {
                    return range.start.row === range.end.row && range.start.column === range.end.column;
                }
                //taken with small changes from ace-code
                function mergeRanges1(ranges) {
                    var list = ranges;
                    list = list.sort(function(a, b) {
                        return comparePoints(a.start, b.start);
                    });
                    var next = list[0], range;
                    for(var i = 1; i < list.length; i++){
                        range = next;
                        next = list[i];
                        var cmp = comparePoints(range.end, next.start);
                        if (cmp < 0) continue;
                        if (cmp == 0 && !isEmptyRange(range) && !isEmptyRange(next)) continue;
                        if (comparePoints(range.end, next.end) < 0) {
                            range.end.row = next.end.row;
                            range.end.column = next.end.column;
                        }
                        list.splice(i, 1);
                        next = range;
                        i--;
                    }
                    return list;
                }
                function comparePoints(p1, p2) {
                    return p1.row - p2.row || p1.column - p2.column;
                }
                function checkValueAgainstRegexpArray(value, regexpArray) {
                    if (!regexpArray) {
                        return false;
                    }
                    for(let i = 0; i < regexpArray.length; i++){
                        if (regexpArray[i].test(value)) {
                            return true;
                        }
                    }
                    return false;
                }
                function convertToUri(filePath) {
                    //already URI
                    if (filePath.startsWith("file:///")) {
                        return filePath;
                    }
                    return URI.file(filePath).toString();
                }
            /***/ },
            /***/ 5272: /***/ (module1)=>{
                module1.exports = function isBuffer(arg) {
                    return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
                };
            /***/ },
            /***/ 1531: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_476465__)=>{
                "use strict";
                // Currently in sync with Node.js lib/internal/util/types.js
                // https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
                var isArgumentsObject = __nested_webpack_require_476465__(5387);
                var isGeneratorFunction = __nested_webpack_require_476465__(2625);
                var whichTypedArray = __nested_webpack_require_476465__(2730);
                var isTypedArray = __nested_webpack_require_476465__(5943);
                function uncurryThis(f) {
                    return f.call.bind(f);
                }
                var BigIntSupported = typeof BigInt !== 'undefined';
                var SymbolSupported = typeof Symbol !== 'undefined';
                var ObjectToString = uncurryThis(Object.prototype.toString);
                var numberValue = uncurryThis(Number.prototype.valueOf);
                var stringValue = uncurryThis(String.prototype.valueOf);
                var booleanValue = uncurryThis(Boolean.prototype.valueOf);
                if (BigIntSupported) {
                    var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
                }
                if (SymbolSupported) {
                    var symbolValue = uncurryThis(Symbol.prototype.valueOf);
                }
                function checkBoxedPrimitive(value, prototypeValueOf) {
                    if (typeof value !== 'object') {
                        return false;
                    }
                    try {
                        prototypeValueOf(value);
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
                exports1.isArgumentsObject = isArgumentsObject;
                exports1.isGeneratorFunction = isGeneratorFunction;
                exports1.isTypedArray = isTypedArray;
                // Taken from here and modified for better browser support
                // https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
                function isPromise(input) {
                    return typeof Promise !== 'undefined' && input instanceof Promise || input !== null && typeof input === 'object' && typeof input.then === 'function' && typeof input.catch === 'function';
                }
                exports1.isPromise = isPromise;
                function isArrayBufferView(value) {
                    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
                        return ArrayBuffer.isView(value);
                    }
                    return isTypedArray(value) || isDataView(value);
                }
                exports1.isArrayBufferView = isArrayBufferView;
                function isUint8Array(value) {
                    return whichTypedArray(value) === 'Uint8Array';
                }
                exports1.isUint8Array = isUint8Array;
                function isUint8ClampedArray(value) {
                    return whichTypedArray(value) === 'Uint8ClampedArray';
                }
                exports1.isUint8ClampedArray = isUint8ClampedArray;
                function isUint16Array(value) {
                    return whichTypedArray(value) === 'Uint16Array';
                }
                exports1.isUint16Array = isUint16Array;
                function isUint32Array(value) {
                    return whichTypedArray(value) === 'Uint32Array';
                }
                exports1.isUint32Array = isUint32Array;
                function isInt8Array(value) {
                    return whichTypedArray(value) === 'Int8Array';
                }
                exports1.isInt8Array = isInt8Array;
                function isInt16Array(value) {
                    return whichTypedArray(value) === 'Int16Array';
                }
                exports1.isInt16Array = isInt16Array;
                function isInt32Array(value) {
                    return whichTypedArray(value) === 'Int32Array';
                }
                exports1.isInt32Array = isInt32Array;
                function isFloat32Array(value) {
                    return whichTypedArray(value) === 'Float32Array';
                }
                exports1.isFloat32Array = isFloat32Array;
                function isFloat64Array(value) {
                    return whichTypedArray(value) === 'Float64Array';
                }
                exports1.isFloat64Array = isFloat64Array;
                function isBigInt64Array(value) {
                    return whichTypedArray(value) === 'BigInt64Array';
                }
                exports1.isBigInt64Array = isBigInt64Array;
                function isBigUint64Array(value) {
                    return whichTypedArray(value) === 'BigUint64Array';
                }
                exports1.isBigUint64Array = isBigUint64Array;
                function isMapToString(value) {
                    return ObjectToString(value) === '[object Map]';
                }
                isMapToString.working = typeof Map !== 'undefined' && isMapToString(new Map());
                function isMap(value) {
                    if (typeof Map === 'undefined') {
                        return false;
                    }
                    return isMapToString.working ? isMapToString(value) : value instanceof Map;
                }
                exports1.isMap = isMap;
                function isSetToString(value) {
                    return ObjectToString(value) === '[object Set]';
                }
                isSetToString.working = typeof Set !== 'undefined' && isSetToString(new Set());
                function isSet(value) {
                    if (typeof Set === 'undefined') {
                        return false;
                    }
                    return isSetToString.working ? isSetToString(value) : value instanceof Set;
                }
                exports1.isSet = isSet;
                function isWeakMapToString(value) {
                    return ObjectToString(value) === '[object WeakMap]';
                }
                isWeakMapToString.working = typeof WeakMap !== 'undefined' && isWeakMapToString(new WeakMap());
                function isWeakMap(value) {
                    if (typeof WeakMap === 'undefined') {
                        return false;
                    }
                    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
                }
                exports1.isWeakMap = isWeakMap;
                function isWeakSetToString(value) {
                    return ObjectToString(value) === '[object WeakSet]';
                }
                isWeakSetToString.working = typeof WeakSet !== 'undefined' && isWeakSetToString(new WeakSet());
                function isWeakSet(value) {
                    return isWeakSetToString(value);
                }
                exports1.isWeakSet = isWeakSet;
                function isArrayBufferToString(value) {
                    return ObjectToString(value) === '[object ArrayBuffer]';
                }
                isArrayBufferToString.working = typeof ArrayBuffer !== 'undefined' && isArrayBufferToString(new ArrayBuffer());
                function isArrayBuffer(value) {
                    if (typeof ArrayBuffer === 'undefined') {
                        return false;
                    }
                    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
                }
                exports1.isArrayBuffer = isArrayBuffer;
                function isDataViewToString(value) {
                    return ObjectToString(value) === '[object DataView]';
                }
                isDataViewToString.working = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined' && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
                function isDataView(value) {
                    if (typeof DataView === 'undefined') {
                        return false;
                    }
                    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
                }
                exports1.isDataView = isDataView;
                // Store a copy of SharedArrayBuffer in case it's deleted elsewhere
                var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
                function isSharedArrayBufferToString(value) {
                    return ObjectToString(value) === '[object SharedArrayBuffer]';
                }
                function isSharedArrayBuffer(value) {
                    if (typeof SharedArrayBufferCopy === 'undefined') {
                        return false;
                    }
                    if (typeof isSharedArrayBufferToString.working === 'undefined') {
                        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
                    }
                    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
                }
                exports1.isSharedArrayBuffer = isSharedArrayBuffer;
                function isAsyncFunction(value) {
                    return ObjectToString(value) === '[object AsyncFunction]';
                }
                exports1.isAsyncFunction = isAsyncFunction;
                function isMapIterator(value) {
                    return ObjectToString(value) === '[object Map Iterator]';
                }
                exports1.isMapIterator = isMapIterator;
                function isSetIterator(value) {
                    return ObjectToString(value) === '[object Set Iterator]';
                }
                exports1.isSetIterator = isSetIterator;
                function isGeneratorObject(value) {
                    return ObjectToString(value) === '[object Generator]';
                }
                exports1.isGeneratorObject = isGeneratorObject;
                function isWebAssemblyCompiledModule(value) {
                    return ObjectToString(value) === '[object WebAssembly.Module]';
                }
                exports1.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
                function isNumberObject(value) {
                    return checkBoxedPrimitive(value, numberValue);
                }
                exports1.isNumberObject = isNumberObject;
                function isStringObject(value) {
                    return checkBoxedPrimitive(value, stringValue);
                }
                exports1.isStringObject = isStringObject;
                function isBooleanObject(value) {
                    return checkBoxedPrimitive(value, booleanValue);
                }
                exports1.isBooleanObject = isBooleanObject;
                function isBigIntObject(value) {
                    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
                }
                exports1.isBigIntObject = isBigIntObject;
                function isSymbolObject(value) {
                    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
                }
                exports1.isSymbolObject = isSymbolObject;
                function isBoxedPrimitive(value) {
                    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
                }
                exports1.isBoxedPrimitive = isBoxedPrimitive;
                function isAnyArrayBuffer(value) {
                    return typeof Uint8Array !== 'undefined' && (isArrayBuffer(value) || isSharedArrayBuffer(value));
                }
                exports1.isAnyArrayBuffer = isAnyArrayBuffer;
                [
                    'isProxy',
                    'isExternal',
                    'isModuleNamespaceObject'
                ].forEach(function(method) {
                    Object.defineProperty(exports1, method, {
                        enumerable: false,
                        value: function() {
                            throw new Error(method + ' is not supported in userland');
                        }
                    });
                });
            /***/ },
            /***/ 6827: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_488942__)=>{
                /* provided dependency */ var process = __nested_webpack_require_488942__(9907);
                /* provided dependency */ var console = __nested_webpack_require_488942__(4364);
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
                    var keys = Object.keys(obj);
                    var descriptors = {};
                    for(var i = 0; i < keys.length; i++){
                        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
                    }
                    return descriptors;
                };
                var formatRegExp = /%[sdj%]/g;
                exports1.format = function(f) {
                    if (!isString(f)) {
                        var objects = [];
                        for(var i = 0; i < arguments.length; i++){
                            objects.push(inspect(arguments[i]));
                        }
                        return objects.join(' ');
                    }
                    var i = 1;
                    var args = arguments;
                    var len = args.length;
                    var str = String(f).replace(formatRegExp, function(x) {
                        if (x === '%%') return '%';
                        if (i >= len) return x;
                        switch(x){
                            case '%s':
                                return String(args[i++]);
                            case '%d':
                                return Number(args[i++]);
                            case '%j':
                                try {
                                    return JSON.stringify(args[i++]);
                                } catch (_) {
                                    return '[Circular]';
                                }
                            default:
                                return x;
                        }
                    });
                    for(var x = args[i]; i < len; x = args[++i]){
                        if (isNull(x) || !isObject(x)) {
                            str += ' ' + x;
                        } else {
                            str += ' ' + inspect(x);
                        }
                    }
                    return str;
                };
                // Mark that a method should not be used.
                // Returns a modified function which warns once by default.
                // If --no-deprecation is set, then it is a no-op.
                exports1.deprecate = function(fn, msg) {
                    if (typeof process !== 'undefined' && process.noDeprecation === true) {
                        return fn;
                    }
                    // Allow for deprecating things in the process of starting up.
                    if (typeof process === 'undefined') {
                        return function() {
                            return exports1.deprecate(fn, msg).apply(this, arguments);
                        };
                    }
                    var warned = false;
                    function deprecated() {
                        if (!warned) {
                            if (process.throwDeprecation) {
                                throw new Error(msg);
                            } else if (process.traceDeprecation) {
                                console.trace(msg);
                            } else {
                                console.error(msg);
                            }
                            warned = true;
                        }
                        return fn.apply(this, arguments);
                    }
                    return deprecated;
                };
                var debugs = {};
                var debugEnvRegex = /^$/;
                if (process.env.NODE_DEBUG) {
                    var debugEnv = process.env.NODE_DEBUG;
                    debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&').replace(/\*/g, '.*').replace(/,/g, '$|^').toUpperCase();
                    debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
                }
                exports1.debuglog = function(set) {
                    set = set.toUpperCase();
                    if (!debugs[set]) {
                        if (debugEnvRegex.test(set)) {
                            var pid = process.pid;
                            debugs[set] = function() {
                                var msg = exports1.format.apply(exports1, arguments);
                                console.error('%s %d: %s', set, pid, msg);
                            };
                        } else {
                            debugs[set] = function() {};
                        }
                    }
                    return debugs[set];
                };
                /**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function inspect(obj, opts) {
                    // default options
                    var ctx = {
                        seen: [],
                        stylize: stylizeNoColor
                    };
                    // legacy...
                    if (arguments.length >= 3) ctx.depth = arguments[2];
                    if (arguments.length >= 4) ctx.colors = arguments[3];
                    if (isBoolean(opts)) {
                        // legacy...
                        ctx.showHidden = opts;
                    } else if (opts) {
                        // got an "options" object
                        exports1._extend(ctx, opts);
                    }
                    // set default options
                    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                    if (isUndefined(ctx.depth)) ctx.depth = 2;
                    if (isUndefined(ctx.colors)) ctx.colors = false;
                    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                    if (ctx.colors) ctx.stylize = stylizeWithColor;
                    return formatValue(ctx, obj, ctx.depth);
                }
                exports1.inspect = inspect;
                // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
                inspect.colors = {
                    'bold': [
                        1,
                        22
                    ],
                    'italic': [
                        3,
                        23
                    ],
                    'underline': [
                        4,
                        24
                    ],
                    'inverse': [
                        7,
                        27
                    ],
                    'white': [
                        37,
                        39
                    ],
                    'grey': [
                        90,
                        39
                    ],
                    'black': [
                        30,
                        39
                    ],
                    'blue': [
                        34,
                        39
                    ],
                    'cyan': [
                        36,
                        39
                    ],
                    'green': [
                        32,
                        39
                    ],
                    'magenta': [
                        35,
                        39
                    ],
                    'red': [
                        31,
                        39
                    ],
                    'yellow': [
                        33,
                        39
                    ]
                };
                // Don't use 'blue' not visible on cmd.exe
                inspect.styles = {
                    'special': 'cyan',
                    'number': 'yellow',
                    'boolean': 'yellow',
                    'undefined': 'grey',
                    'null': 'bold',
                    'string': 'green',
                    'date': 'magenta',
                    // "name": intentionally not styling
                    'regexp': 'red'
                };
                function stylizeWithColor(str, styleType) {
                    var style = inspect.styles[styleType];
                    if (style) {
                        return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
                    } else {
                        return str;
                    }
                }
                function stylizeNoColor(str, styleType) {
                    return str;
                }
                function arrayToHash(array) {
                    var hash = {};
                    array.forEach(function(val, idx) {
                        hash[val] = true;
                    });
                    return hash;
                }
                function formatValue(ctx, value, recurseTimes) {
                    // Provide a hook for user-specified inspect functions.
                    // Check that value is an object with an inspect function on it
                    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
                    value.inspect !== exports1.inspect && // Also filter out any prototype objects using the circular check.
                    !(value.constructor && value.constructor.prototype === value)) {
                        var ret = value.inspect(recurseTimes, ctx);
                        if (!isString(ret)) {
                            ret = formatValue(ctx, ret, recurseTimes);
                        }
                        return ret;
                    }
                    // Primitive types cannot have properties
                    var primitive = formatPrimitive(ctx, value);
                    if (primitive) {
                        return primitive;
                    }
                    // Look up the keys of the object.
                    var keys = Object.keys(value);
                    var visibleKeys = arrayToHash(keys);
                    if (ctx.showHidden) {
                        keys = Object.getOwnPropertyNames(value);
                    }
                    // IE doesn't make error fields non-enumerable
                    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                        return formatError(value);
                    }
                    // Some type of object without properties can be shortcutted.
                    if (keys.length === 0) {
                        if (isFunction(value)) {
                            var name = value.name ? ': ' + value.name : '';
                            return ctx.stylize('[Function' + name + ']', 'special');
                        }
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        }
                        if (isDate(value)) {
                            return ctx.stylize(Date.prototype.toString.call(value), 'date');
                        }
                        if (isError(value)) {
                            return formatError(value);
                        }
                    }
                    var base = '', array = false, braces = [
                        '{',
                        '}'
                    ];
                    // Make Array say that they are Array
                    if (isArray(value)) {
                        array = true;
                        braces = [
                            '[',
                            ']'
                        ];
                    }
                    // Make functions say that they are functions
                    if (isFunction(value)) {
                        var n = value.name ? ': ' + value.name : '';
                        base = ' [Function' + n + ']';
                    }
                    // Make RegExps say that they are RegExps
                    if (isRegExp(value)) {
                        base = ' ' + RegExp.prototype.toString.call(value);
                    }
                    // Make dates with properties first say the date
                    if (isDate(value)) {
                        base = ' ' + Date.prototype.toUTCString.call(value);
                    }
                    // Make error with message first say the error
                    if (isError(value)) {
                        base = ' ' + formatError(value);
                    }
                    if (keys.length === 0 && (!array || value.length == 0)) {
                        return braces[0] + base + braces[1];
                    }
                    if (recurseTimes < 0) {
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        } else {
                            return ctx.stylize('[Object]', 'special');
                        }
                    }
                    ctx.seen.push(value);
                    var output;
                    if (array) {
                        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                    } else {
                        output = keys.map(function(key) {
                            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                        });
                    }
                    ctx.seen.pop();
                    return reduceToSingleString(output, base, braces);
                }
                function formatPrimitive(ctx, value) {
                    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
                    if (isString(value)) {
                        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
                        return ctx.stylize(simple, 'string');
                    }
                    if (isNumber(value)) return ctx.stylize('' + value, 'number');
                    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
                    // For some reason typeof null is "object", so special case here.
                    if (isNull(value)) return ctx.stylize('null', 'null');
                }
                function formatError(value) {
                    return '[' + Error.prototype.toString.call(value) + ']';
                }
                function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                    var output = [];
                    for(var i = 0, l = value.length; i < l; ++i){
                        if (hasOwnProperty(value, String(i))) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
                        } else {
                            output.push('');
                        }
                    }
                    keys.forEach(function(key) {
                        if (!key.match(/^\d+$/)) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                        }
                    });
                    return output;
                }
                function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                    var name, str, desc;
                    desc = Object.getOwnPropertyDescriptor(value, key) || {
                        value: value[key]
                    };
                    if (desc.get) {
                        if (desc.set) {
                            str = ctx.stylize('[Getter/Setter]', 'special');
                        } else {
                            str = ctx.stylize('[Getter]', 'special');
                        }
                    } else {
                        if (desc.set) {
                            str = ctx.stylize('[Setter]', 'special');
                        }
                    }
                    if (!hasOwnProperty(visibleKeys, key)) {
                        name = '[' + key + ']';
                    }
                    if (!str) {
                        if (ctx.seen.indexOf(desc.value) < 0) {
                            if (isNull(recurseTimes)) {
                                str = formatValue(ctx, desc.value, null);
                            } else {
                                str = formatValue(ctx, desc.value, recurseTimes - 1);
                            }
                            if (str.indexOf('\n') > -1) {
                                if (array) {
                                    str = str.split('\n').map(function(line) {
                                        return '  ' + line;
                                    }).join('\n').slice(2);
                                } else {
                                    str = '\n' + str.split('\n').map(function(line) {
                                        return '   ' + line;
                                    }).join('\n');
                                }
                            }
                        } else {
                            str = ctx.stylize('[Circular]', 'special');
                        }
                    }
                    if (isUndefined(name)) {
                        if (array && key.match(/^\d+$/)) {
                            return str;
                        }
                        name = JSON.stringify('' + key);
                        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                            name = name.slice(1, -1);
                            name = ctx.stylize(name, 'name');
                        } else {
                            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                            name = ctx.stylize(name, 'string');
                        }
                    }
                    return name + ': ' + str;
                }
                function reduceToSingleString(output, base, braces) {
                    var numLinesEst = 0;
                    var length = output.reduce(function(prev, cur) {
                        numLinesEst++;
                        if (cur.indexOf('\n') >= 0) numLinesEst++;
                        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                    }, 0);
                    if (length > 60) {
                        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
                    }
                    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
                }
                // NOTE: These type checking functions intentionally don't use `instanceof`
                // because it is fragile and can be easily faked with `Object.create()`.
                exports1.types = __nested_webpack_require_488942__(1531);
                function isArray(ar) {
                    return Array.isArray(ar);
                }
                exports1.isArray = isArray;
                function isBoolean(arg) {
                    return typeof arg === 'boolean';
                }
                exports1.isBoolean = isBoolean;
                function isNull(arg) {
                    return arg === null;
                }
                exports1.isNull = isNull;
                function isNullOrUndefined(arg) {
                    return arg == null;
                }
                exports1.isNullOrUndefined = isNullOrUndefined;
                function isNumber(arg) {
                    return typeof arg === 'number';
                }
                exports1.isNumber = isNumber;
                function isString(arg) {
                    return typeof arg === 'string';
                }
                exports1.isString = isString;
                function isSymbol(arg) {
                    return typeof arg === 'symbol';
                }
                exports1.isSymbol = isSymbol;
                function isUndefined(arg) {
                    return arg === void 0;
                }
                exports1.isUndefined = isUndefined;
                function isRegExp(re) {
                    return isObject(re) && objectToString(re) === '[object RegExp]';
                }
                exports1.isRegExp = isRegExp;
                exports1.types.isRegExp = isRegExp;
                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }
                exports1.isObject = isObject;
                function isDate(d) {
                    return isObject(d) && objectToString(d) === '[object Date]';
                }
                exports1.isDate = isDate;
                exports1.types.isDate = isDate;
                function isError(e) {
                    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
                }
                exports1.isError = isError;
                exports1.types.isNativeError = isError;
                function isFunction(arg) {
                    return typeof arg === 'function';
                }
                exports1.isFunction = isFunction;
                function isPrimitive(arg) {
                    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
                    typeof arg === 'undefined';
                }
                exports1.isPrimitive = isPrimitive;
                exports1.isBuffer = __nested_webpack_require_488942__(5272);
                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }
                function pad(n) {
                    return n < 10 ? '0' + n.toString(10) : n.toString(10);
                }
                var months = [
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun',
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec'
                ];
                // 26 Feb 16:19:34
                function timestamp() {
                    var d = new Date();
                    var time = [
                        pad(d.getHours()),
                        pad(d.getMinutes()),
                        pad(d.getSeconds())
                    ].join(':');
                    return [
                        d.getDate(),
                        months[d.getMonth()],
                        time
                    ].join(' ');
                }
                // log is just a thin wrapper to console.log that prepends a timestamp
                exports1.log = function() {
                    console.log('%s - %s', timestamp(), exports1.format.apply(exports1, arguments));
                };
                /**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ exports1.inherits = __nested_webpack_require_488942__(5615);
                exports1._extend = function(origin, add) {
                    // Don't do anything if add isn't an object
                    if (!add || !isObject(add)) return origin;
                    var keys = Object.keys(add);
                    var i = keys.length;
                    while(i--){
                        origin[keys[i]] = add[keys[i]];
                    }
                    return origin;
                };
                function hasOwnProperty(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                }
                var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
                exports1.promisify = function promisify(original) {
                    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
                    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
                        var fn = original[kCustomPromisifiedSymbol];
                        if (typeof fn !== 'function') {
                            throw new TypeError('The "util.promisify.custom" argument must be of type Function');
                        }
                        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                            value: fn,
                            enumerable: false,
                            writable: false,
                            configurable: true
                        });
                        return fn;
                    }
                    function fn() {
                        var promiseResolve, promiseReject;
                        var promise = new Promise(function(resolve, reject) {
                            promiseResolve = resolve;
                            promiseReject = reject;
                        });
                        var args = [];
                        for(var i = 0; i < arguments.length; i++){
                            args.push(arguments[i]);
                        }
                        args.push(function(err, value) {
                            if (err) {
                                promiseReject(err);
                            } else {
                                promiseResolve(value);
                            }
                        });
                        try {
                            original.apply(this, args);
                        } catch (err) {
                            promiseReject(err);
                        }
                        return promise;
                    }
                    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
                    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                        value: fn,
                        enumerable: false,
                        writable: false,
                        configurable: true
                    });
                    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
                };
                exports1.promisify.custom = kCustomPromisifiedSymbol;
                function callbackifyOnRejected(reason, cb) {
                    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
                    // Because `null` is a special error value in callbacks which means "no error
                    // occurred", we error-wrap so the callback consumer can distinguish between
                    // "the promise rejected with null" or "the promise fulfilled with undefined".
                    if (!reason) {
                        var newReason = new Error('Promise was rejected with a falsy value');
                        newReason.reason = reason;
                        reason = newReason;
                    }
                    return cb(reason);
                }
                function callbackify(original) {
                    if (typeof original !== 'function') {
                        throw new TypeError('The "original" argument must be of type Function');
                    }
                    // We DO NOT return the promise as it gives the user a false sense that
                    // the promise is actually somehow related to the callback's execution
                    // and that the callback throwing will reject the promise.
                    function callbackified() {
                        var args = [];
                        for(var i = 0; i < arguments.length; i++){
                            args.push(arguments[i]);
                        }
                        var maybeCb = args.pop();
                        if (typeof maybeCb !== 'function') {
                            throw new TypeError('The last argument must be of type Function');
                        }
                        var self = this;
                        var cb = function() {
                            return maybeCb.apply(self, arguments);
                        };
                        // In true node style we process the callback on `nextTick` with all the
                        // implications (stack, `uncaughtException`, `async_hooks`)
                        original.apply(this, args).then(function(ret) {
                            process.nextTick(cb.bind(null, null, ret));
                        }, function(rej) {
                            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
                        });
                    }
                    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
                    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
                    return callbackified;
                }
                exports1.callbackify = callbackify;
            /***/ },
            /***/ 9208: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_520540__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */ module1.exports = __nested_webpack_require_520540__(9110);
            /***/ },
            /***/ 9110: /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_521099__) {
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    var desc = Object.getOwnPropertyDescriptor(m, k);
                    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                        desc = {
                            enumerable: true,
                            get: function() {
                                return m[k];
                            }
                        };
                    }
                    Object.defineProperty(o, k2, desc);
                } : function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports1) {
                    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
                };
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.createMessageConnection = exports1.BrowserMessageWriter = exports1.BrowserMessageReader = void 0;
                const ril_1 = __nested_webpack_require_521099__(3312);
                // Install the browser runtime abstract.
                ril_1.default.install();
                const api_1 = __nested_webpack_require_521099__(7672);
                __exportStar(__nested_webpack_require_521099__(7672), exports1);
                class BrowserMessageReader extends api_1.AbstractMessageReader {
                    listen(callback) {
                        return this._onData.event(callback);
                    }
                    constructor(port){
                        super();
                        this._onData = new api_1.Emitter();
                        this._messageListener = (event)=>{
                            this._onData.fire(event.data);
                        };
                        port.addEventListener('error', (event)=>this.fireError(event));
                        port.onmessage = this._messageListener;
                    }
                }
                exports1.BrowserMessageReader = BrowserMessageReader;
                class BrowserMessageWriter extends api_1.AbstractMessageWriter {
                    write(msg) {
                        try {
                            this.port.postMessage(msg);
                            return Promise.resolve();
                        } catch (error) {
                            this.handleError(error, msg);
                            return Promise.reject(error);
                        }
                    }
                    handleError(error, msg) {
                        this.errorCount++;
                        this.fireError(error, msg, this.errorCount);
                    }
                    end() {}
                    constructor(port){
                        super();
                        this.port = port;
                        this.errorCount = 0;
                        port.addEventListener('error', (event)=>this.fireError(event));
                    }
                }
                exports1.BrowserMessageWriter = BrowserMessageWriter;
                function createMessageConnection(reader, writer, logger, options) {
                    if (logger === undefined) {
                        logger = api_1.NullLogger;
                    }
                    if (api_1.ConnectionStrategy.is(options)) {
                        options = {
                            connectionStrategy: options
                        };
                    }
                    return (0, api_1.createMessageConnection)(reader, writer, logger, options);
                }
                exports1.createMessageConnection = createMessageConnection;
            /***/ },
            /***/ 3312: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_525514__)=>{
                "use strict";
                /* provided dependency */ var console = __nested_webpack_require_525514__(4364);
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                const api_1 = __nested_webpack_require_525514__(7672);
                class MessageBuffer extends api_1.AbstractMessageBuffer {
                    emptyBuffer() {
                        return MessageBuffer.emptyBuffer;
                    }
                    fromString(value, _encoding) {
                        return new TextEncoder().encode(value);
                    }
                    toString(value, encoding) {
                        if (encoding === 'ascii') {
                            return this.asciiDecoder.decode(value);
                        } else {
                            return new TextDecoder(encoding).decode(value);
                        }
                    }
                    asNative(buffer, length) {
                        if (length === undefined) {
                            return buffer;
                        } else {
                            return buffer.slice(0, length);
                        }
                    }
                    allocNative(length) {
                        return new Uint8Array(length);
                    }
                    constructor(encoding = 'utf-8'){
                        super(encoding);
                        this.asciiDecoder = new TextDecoder('ascii');
                    }
                }
                MessageBuffer.emptyBuffer = new Uint8Array(0);
                class ReadableStreamWrapper {
                    onClose(listener) {
                        this.socket.addEventListener('close', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('close', listener));
                    }
                    onError(listener) {
                        this.socket.addEventListener('error', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('error', listener));
                    }
                    onEnd(listener) {
                        this.socket.addEventListener('end', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('end', listener));
                    }
                    onData(listener) {
                        return this._onData.event(listener);
                    }
                    constructor(socket){
                        this.socket = socket;
                        this._onData = new api_1.Emitter();
                        this._messageListener = (event)=>{
                            const blob = event.data;
                            blob.arrayBuffer().then((buffer)=>{
                                this._onData.fire(new Uint8Array(buffer));
                            }, ()=>{
                                (0, api_1.RAL)().console.error(`Converting blob to array buffer failed.`);
                            });
                        };
                        this.socket.addEventListener('message', this._messageListener);
                    }
                }
                class WritableStreamWrapper {
                    onClose(listener) {
                        this.socket.addEventListener('close', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('close', listener));
                    }
                    onError(listener) {
                        this.socket.addEventListener('error', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('error', listener));
                    }
                    onEnd(listener) {
                        this.socket.addEventListener('end', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('end', listener));
                    }
                    write(data, encoding) {
                        if (typeof data === 'string') {
                            if (encoding !== undefined && encoding !== 'utf-8') {
                                throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);
                            }
                            this.socket.send(data);
                        } else {
                            this.socket.send(data);
                        }
                        return Promise.resolve();
                    }
                    end() {
                        this.socket.close();
                    }
                    constructor(socket){
                        this.socket = socket;
                    }
                }
                const _textEncoder = new TextEncoder();
                const _ril = Object.freeze({
                    messageBuffer: Object.freeze({
                        create: (encoding)=>new MessageBuffer(encoding)
                    }),
                    applicationJson: Object.freeze({
                        encoder: Object.freeze({
                            name: 'application/json',
                            encode: (msg, options)=>{
                                if (options.charset !== 'utf-8') {
                                    throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);
                                }
                                return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, undefined, 0)));
                            }
                        }),
                        decoder: Object.freeze({
                            name: 'application/json',
                            decode: (buffer, options)=>{
                                if (!(buffer instanceof Uint8Array)) {
                                    throw new Error(`In a Browser environments only Uint8Arrays are supported.`);
                                }
                                return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
                            }
                        })
                    }),
                    stream: Object.freeze({
                        asReadableStream: (socket)=>new ReadableStreamWrapper(socket),
                        asWritableStream: (socket)=>new WritableStreamWrapper(socket)
                    }),
                    console: console,
                    timer: Object.freeze({
                        setTimeout (callback, ms, ...args) {
                            const handle = setTimeout(callback, ms, ...args);
                            return {
                                dispose: ()=>clearTimeout(handle)
                            };
                        },
                        setImmediate (callback, ...args) {
                            const handle = setTimeout(callback, 0, ...args);
                            return {
                                dispose: ()=>clearTimeout(handle)
                            };
                        },
                        setInterval (callback, ms, ...args) {
                            const handle = setInterval(callback, ms, ...args);
                            return {
                                dispose: ()=>clearInterval(handle)
                            };
                        }
                    })
                });
                function RIL() {
                    return _ril;
                }
                (function(RIL) {
                    function install() {
                        api_1.RAL.install(_ril);
                    }
                    RIL.install = install;
                })(RIL || (RIL = {}));
                exports1["default"] = RIL;
            /***/ },
            /***/ 7672: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_533893__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ /// <reference path="../../typings/thenable.d.ts" />
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ProgressType = exports1.ProgressToken = exports1.createMessageConnection = exports1.NullLogger = exports1.ConnectionOptions = exports1.ConnectionStrategy = exports1.AbstractMessageBuffer = exports1.WriteableStreamMessageWriter = exports1.AbstractMessageWriter = exports1.MessageWriter = exports1.ReadableStreamMessageReader = exports1.AbstractMessageReader = exports1.MessageReader = exports1.SharedArrayReceiverStrategy = exports1.SharedArraySenderStrategy = exports1.CancellationToken = exports1.CancellationTokenSource = exports1.Emitter = exports1.Event = exports1.Disposable = exports1.LRUCache = exports1.Touch = exports1.LinkedMap = exports1.ParameterStructures = exports1.NotificationType9 = exports1.NotificationType8 = exports1.NotificationType7 = exports1.NotificationType6 = exports1.NotificationType5 = exports1.NotificationType4 = exports1.NotificationType3 = exports1.NotificationType2 = exports1.NotificationType1 = exports1.NotificationType0 = exports1.NotificationType = exports1.ErrorCodes = exports1.ResponseError = exports1.RequestType9 = exports1.RequestType8 = exports1.RequestType7 = exports1.RequestType6 = exports1.RequestType5 = exports1.RequestType4 = exports1.RequestType3 = exports1.RequestType2 = exports1.RequestType1 = exports1.RequestType0 = exports1.RequestType = exports1.Message = exports1.RAL = void 0;
                exports1.MessageStrategy = exports1.CancellationStrategy = exports1.CancellationSenderStrategy = exports1.CancellationReceiverStrategy = exports1.ConnectionError = exports1.ConnectionErrors = exports1.LogTraceNotification = exports1.SetTraceNotification = exports1.TraceFormat = exports1.TraceValues = exports1.Trace = void 0;
                const messages_1 = __nested_webpack_require_533893__(7162);
                Object.defineProperty(exports1, "Message", {
                    enumerable: true,
                    get: function() {
                        return messages_1.Message;
                    }
                });
                Object.defineProperty(exports1, "RequestType", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType;
                    }
                });
                Object.defineProperty(exports1, "RequestType0", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType0;
                    }
                });
                Object.defineProperty(exports1, "RequestType1", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType1;
                    }
                });
                Object.defineProperty(exports1, "RequestType2", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType2;
                    }
                });
                Object.defineProperty(exports1, "RequestType3", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType3;
                    }
                });
                Object.defineProperty(exports1, "RequestType4", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType4;
                    }
                });
                Object.defineProperty(exports1, "RequestType5", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType5;
                    }
                });
                Object.defineProperty(exports1, "RequestType6", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType6;
                    }
                });
                Object.defineProperty(exports1, "RequestType7", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType7;
                    }
                });
                Object.defineProperty(exports1, "RequestType8", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType8;
                    }
                });
                Object.defineProperty(exports1, "RequestType9", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType9;
                    }
                });
                Object.defineProperty(exports1, "ResponseError", {
                    enumerable: true,
                    get: function() {
                        return messages_1.ResponseError;
                    }
                });
                Object.defineProperty(exports1, "ErrorCodes", {
                    enumerable: true,
                    get: function() {
                        return messages_1.ErrorCodes;
                    }
                });
                Object.defineProperty(exports1, "NotificationType", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType;
                    }
                });
                Object.defineProperty(exports1, "NotificationType0", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType0;
                    }
                });
                Object.defineProperty(exports1, "NotificationType1", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType1;
                    }
                });
                Object.defineProperty(exports1, "NotificationType2", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType2;
                    }
                });
                Object.defineProperty(exports1, "NotificationType3", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType3;
                    }
                });
                Object.defineProperty(exports1, "NotificationType4", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType4;
                    }
                });
                Object.defineProperty(exports1, "NotificationType5", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType5;
                    }
                });
                Object.defineProperty(exports1, "NotificationType6", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType6;
                    }
                });
                Object.defineProperty(exports1, "NotificationType7", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType7;
                    }
                });
                Object.defineProperty(exports1, "NotificationType8", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType8;
                    }
                });
                Object.defineProperty(exports1, "NotificationType9", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType9;
                    }
                });
                Object.defineProperty(exports1, "ParameterStructures", {
                    enumerable: true,
                    get: function() {
                        return messages_1.ParameterStructures;
                    }
                });
                const linkedMap_1 = __nested_webpack_require_533893__(1109);
                Object.defineProperty(exports1, "LinkedMap", {
                    enumerable: true,
                    get: function() {
                        return linkedMap_1.LinkedMap;
                    }
                });
                Object.defineProperty(exports1, "LRUCache", {
                    enumerable: true,
                    get: function() {
                        return linkedMap_1.LRUCache;
                    }
                });
                Object.defineProperty(exports1, "Touch", {
                    enumerable: true,
                    get: function() {
                        return linkedMap_1.Touch;
                    }
                });
                const disposable_1 = __nested_webpack_require_533893__(8844);
                Object.defineProperty(exports1, "Disposable", {
                    enumerable: true,
                    get: function() {
                        return disposable_1.Disposable;
                    }
                });
                const events_1 = __nested_webpack_require_533893__(2479);
                Object.defineProperty(exports1, "Event", {
                    enumerable: true,
                    get: function() {
                        return events_1.Event;
                    }
                });
                Object.defineProperty(exports1, "Emitter", {
                    enumerable: true,
                    get: function() {
                        return events_1.Emitter;
                    }
                });
                const cancellation_1 = __nested_webpack_require_533893__(6957);
                Object.defineProperty(exports1, "CancellationTokenSource", {
                    enumerable: true,
                    get: function() {
                        return cancellation_1.CancellationTokenSource;
                    }
                });
                Object.defineProperty(exports1, "CancellationToken", {
                    enumerable: true,
                    get: function() {
                        return cancellation_1.CancellationToken;
                    }
                });
                const sharedArrayCancellation_1 = __nested_webpack_require_533893__(3489);
                Object.defineProperty(exports1, "SharedArraySenderStrategy", {
                    enumerable: true,
                    get: function() {
                        return sharedArrayCancellation_1.SharedArraySenderStrategy;
                    }
                });
                Object.defineProperty(exports1, "SharedArrayReceiverStrategy", {
                    enumerable: true,
                    get: function() {
                        return sharedArrayCancellation_1.SharedArrayReceiverStrategy;
                    }
                });
                const messageReader_1 = __nested_webpack_require_533893__(656);
                Object.defineProperty(exports1, "MessageReader", {
                    enumerable: true,
                    get: function() {
                        return messageReader_1.MessageReader;
                    }
                });
                Object.defineProperty(exports1, "AbstractMessageReader", {
                    enumerable: true,
                    get: function() {
                        return messageReader_1.AbstractMessageReader;
                    }
                });
                Object.defineProperty(exports1, "ReadableStreamMessageReader", {
                    enumerable: true,
                    get: function() {
                        return messageReader_1.ReadableStreamMessageReader;
                    }
                });
                const messageWriter_1 = __nested_webpack_require_533893__(9036);
                Object.defineProperty(exports1, "MessageWriter", {
                    enumerable: true,
                    get: function() {
                        return messageWriter_1.MessageWriter;
                    }
                });
                Object.defineProperty(exports1, "AbstractMessageWriter", {
                    enumerable: true,
                    get: function() {
                        return messageWriter_1.AbstractMessageWriter;
                    }
                });
                Object.defineProperty(exports1, "WriteableStreamMessageWriter", {
                    enumerable: true,
                    get: function() {
                        return messageWriter_1.WriteableStreamMessageWriter;
                    }
                });
                const messageBuffer_1 = __nested_webpack_require_533893__(9805);
                Object.defineProperty(exports1, "AbstractMessageBuffer", {
                    enumerable: true,
                    get: function() {
                        return messageBuffer_1.AbstractMessageBuffer;
                    }
                });
                const connection_1 = __nested_webpack_require_533893__(4054);
                Object.defineProperty(exports1, "ConnectionStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ConnectionStrategy;
                    }
                });
                Object.defineProperty(exports1, "ConnectionOptions", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ConnectionOptions;
                    }
                });
                Object.defineProperty(exports1, "NullLogger", {
                    enumerable: true,
                    get: function() {
                        return connection_1.NullLogger;
                    }
                });
                Object.defineProperty(exports1, "createMessageConnection", {
                    enumerable: true,
                    get: function() {
                        return connection_1.createMessageConnection;
                    }
                });
                Object.defineProperty(exports1, "ProgressToken", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ProgressToken;
                    }
                });
                Object.defineProperty(exports1, "ProgressType", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ProgressType;
                    }
                });
                Object.defineProperty(exports1, "Trace", {
                    enumerable: true,
                    get: function() {
                        return connection_1.Trace;
                    }
                });
                Object.defineProperty(exports1, "TraceValues", {
                    enumerable: true,
                    get: function() {
                        return connection_1.TraceValues;
                    }
                });
                Object.defineProperty(exports1, "TraceFormat", {
                    enumerable: true,
                    get: function() {
                        return connection_1.TraceFormat;
                    }
                });
                Object.defineProperty(exports1, "SetTraceNotification", {
                    enumerable: true,
                    get: function() {
                        return connection_1.SetTraceNotification;
                    }
                });
                Object.defineProperty(exports1, "LogTraceNotification", {
                    enumerable: true,
                    get: function() {
                        return connection_1.LogTraceNotification;
                    }
                });
                Object.defineProperty(exports1, "ConnectionErrors", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ConnectionErrors;
                    }
                });
                Object.defineProperty(exports1, "ConnectionError", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ConnectionError;
                    }
                });
                Object.defineProperty(exports1, "CancellationReceiverStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.CancellationReceiverStrategy;
                    }
                });
                Object.defineProperty(exports1, "CancellationSenderStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.CancellationSenderStrategy;
                    }
                });
                Object.defineProperty(exports1, "CancellationStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.CancellationStrategy;
                    }
                });
                Object.defineProperty(exports1, "MessageStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.MessageStrategy;
                    }
                });
                const ral_1 = __nested_webpack_require_533893__(5091);
                exports1.RAL = ral_1.default;
            /***/ },
            /***/ 6957: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_551957__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.CancellationTokenSource = exports1.CancellationToken = void 0;
                const ral_1 = __nested_webpack_require_551957__(5091);
                const Is = __nested_webpack_require_551957__(6618);
                const events_1 = __nested_webpack_require_551957__(2479);
                var CancellationToken;
                (function(CancellationToken) {
                    CancellationToken.None = Object.freeze({
                        isCancellationRequested: false,
                        onCancellationRequested: events_1.Event.None
                    });
                    CancellationToken.Cancelled = Object.freeze({
                        isCancellationRequested: true,
                        onCancellationRequested: events_1.Event.None
                    });
                    function is(value) {
                        const candidate = value;
                        return candidate && (candidate === CancellationToken.None || candidate === CancellationToken.Cancelled || Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested);
                    }
                    CancellationToken.is = is;
                })(CancellationToken || (exports1.CancellationToken = CancellationToken = {}));
                const shortcutEvent = Object.freeze(function(callback, context) {
                    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
                    return {
                        dispose () {
                            handle.dispose();
                        }
                    };
                });
                class MutableToken {
                    cancel() {
                        if (!this._isCancelled) {
                            this._isCancelled = true;
                            if (this._emitter) {
                                this._emitter.fire(undefined);
                                this.dispose();
                            }
                        }
                    }
                    get isCancellationRequested() {
                        return this._isCancelled;
                    }
                    get onCancellationRequested() {
                        if (this._isCancelled) {
                            return shortcutEvent;
                        }
                        if (!this._emitter) {
                            this._emitter = new events_1.Emitter();
                        }
                        return this._emitter.event;
                    }
                    dispose() {
                        if (this._emitter) {
                            this._emitter.dispose();
                            this._emitter = undefined;
                        }
                    }
                    constructor(){
                        this._isCancelled = false;
                    }
                }
                class CancellationTokenSource {
                    get token() {
                        if (!this._token) {
                            // be lazy and create the token only when
                            // actually needed
                            this._token = new MutableToken();
                        }
                        return this._token;
                    }
                    cancel() {
                        if (!this._token) {
                            // save an object by returning the default
                            // cancelled token when cancellation happens
                            // before someone asks for the token
                            this._token = CancellationToken.Cancelled;
                        } else {
                            this._token.cancel();
                        }
                    }
                    dispose() {
                        if (!this._token) {
                            // ensure to initialize with an empty token if we had none
                            this._token = CancellationToken.None;
                        } else if (this._token instanceof MutableToken) {
                            // actually dispose
                            this._token.dispose();
                        }
                    }
                }
                exports1.CancellationTokenSource = CancellationTokenSource;
            /***/ },
            /***/ 4054: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_556882__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.createMessageConnection = exports1.ConnectionOptions = exports1.MessageStrategy = exports1.CancellationStrategy = exports1.CancellationSenderStrategy = exports1.CancellationReceiverStrategy = exports1.RequestCancellationReceiverStrategy = exports1.IdCancellationReceiverStrategy = exports1.ConnectionStrategy = exports1.ConnectionError = exports1.ConnectionErrors = exports1.LogTraceNotification = exports1.SetTraceNotification = exports1.TraceFormat = exports1.TraceValues = exports1.Trace = exports1.NullLogger = exports1.ProgressType = exports1.ProgressToken = void 0;
                const ral_1 = __nested_webpack_require_556882__(5091);
                const Is = __nested_webpack_require_556882__(6618);
                const messages_1 = __nested_webpack_require_556882__(7162);
                const linkedMap_1 = __nested_webpack_require_556882__(1109);
                const events_1 = __nested_webpack_require_556882__(2479);
                const cancellation_1 = __nested_webpack_require_556882__(6957);
                var CancelNotification;
                (function(CancelNotification) {
                    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
                })(CancelNotification || (CancelNotification = {}));
                var ProgressToken;
                (function(ProgressToken) {
                    function is(value) {
                        return typeof value === 'string' || typeof value === 'number';
                    }
                    ProgressToken.is = is;
                })(ProgressToken || (exports1.ProgressToken = ProgressToken = {}));
                var ProgressNotification;
                (function(ProgressNotification) {
                    ProgressNotification.type = new messages_1.NotificationType('$/progress');
                })(ProgressNotification || (ProgressNotification = {}));
                class ProgressType {
                    constructor(){}
                }
                exports1.ProgressType = ProgressType;
                var StarRequestHandler;
                (function(StarRequestHandler) {
                    function is(value) {
                        return Is.func(value);
                    }
                    StarRequestHandler.is = is;
                })(StarRequestHandler || (StarRequestHandler = {}));
                exports1.NullLogger = Object.freeze({
                    error: ()=>{},
                    warn: ()=>{},
                    info: ()=>{},
                    log: ()=>{}
                });
                var Trace;
                (function(Trace) {
                    Trace[Trace["Off"] = 0] = "Off";
                    Trace[Trace["Messages"] = 1] = "Messages";
                    Trace[Trace["Compact"] = 2] = "Compact";
                    Trace[Trace["Verbose"] = 3] = "Verbose";
                })(Trace || (exports1.Trace = Trace = {}));
                var TraceValues;
                (function(TraceValues) {
                    /**
     * Turn tracing off.
     */ TraceValues.Off = 'off';
                    /**
     * Trace messages only.
     */ TraceValues.Messages = 'messages';
                    /**
     * Compact message tracing.
     */ TraceValues.Compact = 'compact';
                    /**
     * Verbose message tracing.
     */ TraceValues.Verbose = 'verbose';
                })(TraceValues || (exports1.TraceValues = TraceValues = {}));
                (function(Trace) {
                    function fromString(value) {
                        if (!Is.string(value)) {
                            return Trace.Off;
                        }
                        value = value.toLowerCase();
                        switch(value){
                            case 'off':
                                return Trace.Off;
                            case 'messages':
                                return Trace.Messages;
                            case 'compact':
                                return Trace.Compact;
                            case 'verbose':
                                return Trace.Verbose;
                            default:
                                return Trace.Off;
                        }
                    }
                    Trace.fromString = fromString;
                    function toString(value) {
                        switch(value){
                            case Trace.Off:
                                return 'off';
                            case Trace.Messages:
                                return 'messages';
                            case Trace.Compact:
                                return 'compact';
                            case Trace.Verbose:
                                return 'verbose';
                            default:
                                return 'off';
                        }
                    }
                    Trace.toString = toString;
                })(Trace || (exports1.Trace = Trace = {}));
                var TraceFormat;
                (function(TraceFormat) {
                    TraceFormat["Text"] = "text";
                    TraceFormat["JSON"] = "json";
                })(TraceFormat || (exports1.TraceFormat = TraceFormat = {}));
                (function(TraceFormat) {
                    function fromString(value) {
                        if (!Is.string(value)) {
                            return TraceFormat.Text;
                        }
                        value = value.toLowerCase();
                        if (value === 'json') {
                            return TraceFormat.JSON;
                        } else {
                            return TraceFormat.Text;
                        }
                    }
                    TraceFormat.fromString = fromString;
                })(TraceFormat || (exports1.TraceFormat = TraceFormat = {}));
                var SetTraceNotification;
                (function(SetTraceNotification) {
                    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');
                })(SetTraceNotification || (exports1.SetTraceNotification = SetTraceNotification = {}));
                var LogTraceNotification;
                (function(LogTraceNotification) {
                    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');
                })(LogTraceNotification || (exports1.LogTraceNotification = LogTraceNotification = {}));
                var ConnectionErrors;
                (function(ConnectionErrors) {
                    /**
     * The connection is closed.
     */ ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
                    /**
     * The connection got disposed.
     */ ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
                    /**
     * The connection is already in listening mode.
     */ ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
                })(ConnectionErrors || (exports1.ConnectionErrors = ConnectionErrors = {}));
                class ConnectionError extends Error {
                    constructor(code, message){
                        super(message);
                        this.code = code;
                        Object.setPrototypeOf(this, ConnectionError.prototype);
                    }
                }
                exports1.ConnectionError = ConnectionError;
                var ConnectionStrategy;
                (function(ConnectionStrategy) {
                    function is(value) {
                        const candidate = value;
                        return candidate && Is.func(candidate.cancelUndispatched);
                    }
                    ConnectionStrategy.is = is;
                })(ConnectionStrategy || (exports1.ConnectionStrategy = ConnectionStrategy = {}));
                var IdCancellationReceiverStrategy;
                (function(IdCancellationReceiverStrategy) {
                    function is(value) {
                        const candidate = value;
                        return candidate && (candidate.kind === undefined || candidate.kind === 'id') && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
                    }
                    IdCancellationReceiverStrategy.is = is;
                })(IdCancellationReceiverStrategy || (exports1.IdCancellationReceiverStrategy = IdCancellationReceiverStrategy = {}));
                var RequestCancellationReceiverStrategy;
                (function(RequestCancellationReceiverStrategy) {
                    function is(value) {
                        const candidate = value;
                        return candidate && candidate.kind === 'request' && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
                    }
                    RequestCancellationReceiverStrategy.is = is;
                })(RequestCancellationReceiverStrategy || (exports1.RequestCancellationReceiverStrategy = RequestCancellationReceiverStrategy = {}));
                var CancellationReceiverStrategy;
                (function(CancellationReceiverStrategy) {
                    CancellationReceiverStrategy.Message = Object.freeze({
                        createCancellationTokenSource (_) {
                            return new cancellation_1.CancellationTokenSource();
                        }
                    });
                    function is(value) {
                        return IdCancellationReceiverStrategy.is(value) || RequestCancellationReceiverStrategy.is(value);
                    }
                    CancellationReceiverStrategy.is = is;
                })(CancellationReceiverStrategy || (exports1.CancellationReceiverStrategy = CancellationReceiverStrategy = {}));
                var CancellationSenderStrategy;
                (function(CancellationSenderStrategy) {
                    CancellationSenderStrategy.Message = Object.freeze({
                        sendCancellation (conn, id) {
                            return conn.sendNotification(CancelNotification.type, {
                                id
                            });
                        },
                        cleanup (_) {}
                    });
                    function is(value) {
                        const candidate = value;
                        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);
                    }
                    CancellationSenderStrategy.is = is;
                })(CancellationSenderStrategy || (exports1.CancellationSenderStrategy = CancellationSenderStrategy = {}));
                var CancellationStrategy;
                (function(CancellationStrategy) {
                    CancellationStrategy.Message = Object.freeze({
                        receiver: CancellationReceiverStrategy.Message,
                        sender: CancellationSenderStrategy.Message
                    });
                    function is(value) {
                        const candidate = value;
                        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
                    }
                    CancellationStrategy.is = is;
                })(CancellationStrategy || (exports1.CancellationStrategy = CancellationStrategy = {}));
                var MessageStrategy;
                (function(MessageStrategy) {
                    function is(value) {
                        const candidate = value;
                        return candidate && Is.func(candidate.handleMessage);
                    }
                    MessageStrategy.is = is;
                })(MessageStrategy || (exports1.MessageStrategy = MessageStrategy = {}));
                var ConnectionOptions;
                (function(ConnectionOptions) {
                    function is(value) {
                        const candidate = value;
                        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy) || MessageStrategy.is(candidate.messageStrategy));
                    }
                    ConnectionOptions.is = is;
                })(ConnectionOptions || (exports1.ConnectionOptions = ConnectionOptions = {}));
                var ConnectionState;
                (function(ConnectionState) {
                    ConnectionState[ConnectionState["New"] = 1] = "New";
                    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
                    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
                    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
                })(ConnectionState || (ConnectionState = {}));
                function createMessageConnection(messageReader, messageWriter, _logger, options) {
                    const logger = _logger !== undefined ? _logger : exports1.NullLogger;
                    let sequenceNumber = 0;
                    let notificationSequenceNumber = 0;
                    let unknownResponseSequenceNumber = 0;
                    const version = '2.0';
                    let starRequestHandler = undefined;
                    const requestHandlers = new Map();
                    let starNotificationHandler = undefined;
                    const notificationHandlers = new Map();
                    const progressHandlers = new Map();
                    let timer;
                    let messageQueue = new linkedMap_1.LinkedMap();
                    let responsePromises = new Map();
                    let knownCanceledRequests = new Set();
                    let requestTokens = new Map();
                    let trace = Trace.Off;
                    let traceFormat = TraceFormat.Text;
                    let tracer;
                    let state = ConnectionState.New;
                    const errorEmitter = new events_1.Emitter();
                    const closeEmitter = new events_1.Emitter();
                    const unhandledNotificationEmitter = new events_1.Emitter();
                    const unhandledProgressEmitter = new events_1.Emitter();
                    const disposeEmitter = new events_1.Emitter();
                    const cancellationStrategy = options && options.cancellationStrategy ? options.cancellationStrategy : CancellationStrategy.Message;
                    function createRequestQueueKey(id) {
                        if (id === null) {
                            throw new Error(`Can't send requests with id null since the response can't be correlated.`);
                        }
                        return 'req-' + id.toString();
                    }
                    function createResponseQueueKey(id) {
                        if (id === null) {
                            return 'res-unknown-' + (++unknownResponseSequenceNumber).toString();
                        } else {
                            return 'res-' + id.toString();
                        }
                    }
                    function createNotificationQueueKey() {
                        return 'not-' + (++notificationSequenceNumber).toString();
                    }
                    function addMessageToQueue(queue, message) {
                        if (messages_1.Message.isRequest(message)) {
                            queue.set(createRequestQueueKey(message.id), message);
                        } else if (messages_1.Message.isResponse(message)) {
                            queue.set(createResponseQueueKey(message.id), message);
                        } else {
                            queue.set(createNotificationQueueKey(), message);
                        }
                    }
                    function cancelUndispatched(_message) {
                        return undefined;
                    }
                    function isListening() {
                        return state === ConnectionState.Listening;
                    }
                    function isClosed() {
                        return state === ConnectionState.Closed;
                    }
                    function isDisposed() {
                        return state === ConnectionState.Disposed;
                    }
                    function closeHandler() {
                        if (state === ConnectionState.New || state === ConnectionState.Listening) {
                            state = ConnectionState.Closed;
                            closeEmitter.fire(undefined);
                        }
                    // If the connection is disposed don't sent close events.
                    }
                    function readErrorHandler(error) {
                        errorEmitter.fire([
                            error,
                            undefined,
                            undefined
                        ]);
                    }
                    function writeErrorHandler(data) {
                        errorEmitter.fire(data);
                    }
                    messageReader.onClose(closeHandler);
                    messageReader.onError(readErrorHandler);
                    messageWriter.onClose(closeHandler);
                    messageWriter.onError(writeErrorHandler);
                    function triggerMessageQueue() {
                        if (timer || messageQueue.size === 0) {
                            return;
                        }
                        timer = (0, ral_1.default)().timer.setImmediate(()=>{
                            timer = undefined;
                            processMessageQueue();
                        });
                    }
                    function handleMessage(message) {
                        if (messages_1.Message.isRequest(message)) {
                            handleRequest(message);
                        } else if (messages_1.Message.isNotification(message)) {
                            handleNotification(message);
                        } else if (messages_1.Message.isResponse(message)) {
                            handleResponse(message);
                        } else {
                            handleInvalidMessage(message);
                        }
                    }
                    function processMessageQueue() {
                        if (messageQueue.size === 0) {
                            return;
                        }
                        const message = messageQueue.shift();
                        try {
                            var _options;
                            const messageStrategy = (_options = options) === null || _options === void 0 ? void 0 : _options.messageStrategy;
                            if (MessageStrategy.is(messageStrategy)) {
                                messageStrategy.handleMessage(message, handleMessage);
                            } else {
                                handleMessage(message);
                            }
                        } finally{
                            triggerMessageQueue();
                        }
                    }
                    const callback = (message)=>{
                        try {
                            // We have received a cancellation message. Check if the message is still in the queue
                            // and cancel it if allowed to do so.
                            if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
                                const cancelId = message.params.id;
                                const key = createRequestQueueKey(cancelId);
                                const toCancel = messageQueue.get(key);
                                if (messages_1.Message.isRequest(toCancel)) {
                                    var _options;
                                    const strategy = (_options = options) === null || _options === void 0 ? void 0 : _options.connectionStrategy;
                                    const response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                                    if (response && (response.error !== undefined || response.result !== undefined)) {
                                        messageQueue.delete(key);
                                        requestTokens.delete(cancelId);
                                        response.id = toCancel.id;
                                        traceSendingResponse(response, message.method, Date.now());
                                        messageWriter.write(response).catch(()=>logger.error(`Sending response for canceled message failed.`));
                                        return;
                                    }
                                }
                                const cancellationToken = requestTokens.get(cancelId);
                                // The request is already running. Cancel the token
                                if (cancellationToken !== undefined) {
                                    cancellationToken.cancel();
                                    traceReceivedNotification(message);
                                    return;
                                } else {
                                    // Remember the cancel but still queue the message to
                                    // clean up state in process message.
                                    knownCanceledRequests.add(cancelId);
                                }
                            }
                            addMessageToQueue(messageQueue, message);
                        } finally{
                            triggerMessageQueue();
                        }
                    };
                    function handleRequest(requestMessage) {
                        if (isDisposed()) {
                            // we return here silently since we fired an event when the
                            // connection got disposed.
                            return;
                        }
                        function reply(resultOrError, method, startTime) {
                            const message = {
                                jsonrpc: version,
                                id: requestMessage.id
                            };
                            if (resultOrError instanceof messages_1.ResponseError) {
                                message.error = resultOrError.toJson();
                            } else {
                                message.result = resultOrError === undefined ? null : resultOrError;
                            }
                            traceSendingResponse(message, method, startTime);
                            messageWriter.write(message).catch(()=>logger.error(`Sending response failed.`));
                        }
                        function replyError(error, method, startTime) {
                            const message = {
                                jsonrpc: version,
                                id: requestMessage.id,
                                error: error.toJson()
                            };
                            traceSendingResponse(message, method, startTime);
                            messageWriter.write(message).catch(()=>logger.error(`Sending response failed.`));
                        }
                        function replySuccess(result, method, startTime) {
                            // The JSON RPC defines that a response must either have a result or an error
                            // So we can't treat undefined as a valid response result.
                            if (result === undefined) {
                                result = null;
                            }
                            const message = {
                                jsonrpc: version,
                                id: requestMessage.id,
                                result: result
                            };
                            traceSendingResponse(message, method, startTime);
                            messageWriter.write(message).catch(()=>logger.error(`Sending response failed.`));
                        }
                        traceReceivedRequest(requestMessage);
                        const element = requestHandlers.get(requestMessage.method);
                        let type;
                        let requestHandler;
                        if (element) {
                            type = element.type;
                            requestHandler = element.handler;
                        }
                        const startTime = Date.now();
                        if (requestHandler || starRequestHandler) {
                            var _requestMessage_id;
                            const tokenKey = (_requestMessage_id = requestMessage.id) !== null && _requestMessage_id !== void 0 ? _requestMessage_id : String(Date.now()); //
                            const cancellationSource = IdCancellationReceiverStrategy.is(cancellationStrategy.receiver) ? cancellationStrategy.receiver.createCancellationTokenSource(tokenKey) : cancellationStrategy.receiver.createCancellationTokenSource(requestMessage);
                            if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
                                cancellationSource.cancel();
                            }
                            if (requestMessage.id !== null) {
                                requestTokens.set(tokenKey, cancellationSource);
                            }
                            try {
                                let handlerResult;
                                if (requestHandler) {
                                    if (requestMessage.params === undefined) {
                                        if (type !== undefined && type.numberOfParams !== 0) {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);
                                            return;
                                        }
                                        handlerResult = requestHandler(cancellationSource.token);
                                    } else if (Array.isArray(requestMessage.params)) {
                                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                                            return;
                                        }
                                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                                    } else {
                                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                                            return;
                                        }
                                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                                    }
                                } else if (starRequestHandler) {
                                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                                }
                                const promise = handlerResult;
                                if (!handlerResult) {
                                    requestTokens.delete(tokenKey);
                                    replySuccess(handlerResult, requestMessage.method, startTime);
                                } else if (promise.then) {
                                    promise.then((resultOrError)=>{
                                        requestTokens.delete(tokenKey);
                                        reply(resultOrError, requestMessage.method, startTime);
                                    }, (error)=>{
                                        requestTokens.delete(tokenKey);
                                        if (error instanceof messages_1.ResponseError) {
                                            replyError(error, requestMessage.method, startTime);
                                        } else if (error && Is.string(error.message)) {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                                        } else {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                                        }
                                    });
                                } else {
                                    requestTokens.delete(tokenKey);
                                    reply(handlerResult, requestMessage.method, startTime);
                                }
                            } catch (error) {
                                requestTokens.delete(tokenKey);
                                if (error instanceof messages_1.ResponseError) {
                                    reply(error, requestMessage.method, startTime);
                                } else if (error && Is.string(error.message)) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                                } else {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                                }
                            }
                        } else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
                        }
                    }
                    function handleResponse(responseMessage) {
                        if (isDisposed()) {
                            // See handle request.
                            return;
                        }
                        if (responseMessage.id === null) {
                            if (responseMessage.error) {
                                logger.error(`Received response message without id: Error is: \n${JSON.stringify(responseMessage.error, undefined, 4)}`);
                            } else {
                                logger.error(`Received response message without id. No further error information provided.`);
                            }
                        } else {
                            const key = responseMessage.id;
                            const responsePromise = responsePromises.get(key);
                            traceReceivedResponse(responseMessage, responsePromise);
                            if (responsePromise !== undefined) {
                                responsePromises.delete(key);
                                try {
                                    if (responseMessage.error) {
                                        const error = responseMessage.error;
                                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                                    } else if (responseMessage.result !== undefined) {
                                        responsePromise.resolve(responseMessage.result);
                                    } else {
                                        throw new Error('Should never happen.');
                                    }
                                } catch (error) {
                                    if (error.message) {
                                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                                    } else {
                                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                                    }
                                }
                            }
                        }
                    }
                    function handleNotification(message) {
                        if (isDisposed()) {
                            // See handle request.
                            return;
                        }
                        let type = undefined;
                        let notificationHandler;
                        if (message.method === CancelNotification.type.method) {
                            const cancelId = message.params.id;
                            knownCanceledRequests.delete(cancelId);
                            traceReceivedNotification(message);
                            return;
                        } else {
                            const element = notificationHandlers.get(message.method);
                            if (element) {
                                notificationHandler = element.handler;
                                type = element.type;
                            }
                        }
                        if (notificationHandler || starNotificationHandler) {
                            try {
                                traceReceivedNotification(message);
                                if (notificationHandler) {
                                    if (message.params === undefined) {
                                        if (type !== undefined) {
                                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                                            }
                                        }
                                        notificationHandler();
                                    } else if (Array.isArray(message.params)) {
                                        // There are JSON-RPC libraries that send progress message as positional params although
                                        // specified as named. So convert them if this is the case.
                                        const params = message.params;
                                        if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                                            notificationHandler({
                                                token: params[0],
                                                value: params[1]
                                            });
                                        } else {
                                            if (type !== undefined) {
                                                if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                                    logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                                                }
                                                if (type.numberOfParams !== message.params.length) {
                                                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                                                }
                                            }
                                            notificationHandler(...params);
                                        }
                                    } else {
                                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                                        }
                                        notificationHandler(message.params);
                                    }
                                } else if (starNotificationHandler) {
                                    starNotificationHandler(message.method, message.params);
                                }
                            } catch (error) {
                                if (error.message) {
                                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                                } else {
                                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                                }
                            }
                        } else {
                            unhandledNotificationEmitter.fire(message);
                        }
                    }
                    function handleInvalidMessage(message) {
                        if (!message) {
                            logger.error('Received empty message.');
                            return;
                        }
                        logger.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(message, null, 4)}`);
                        // Test whether we find an id to reject the promise
                        const responseMessage = message;
                        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
                            const key = responseMessage.id;
                            const responseHandler = responsePromises.get(key);
                            if (responseHandler) {
                                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
                            }
                        }
                    }
                    function stringifyTrace(params) {
                        if (params === undefined || params === null) {
                            return undefined;
                        }
                        switch(trace){
                            case Trace.Verbose:
                                return JSON.stringify(params, null, 4);
                            case Trace.Compact:
                                return JSON.stringify(params);
                            default:
                                return undefined;
                        }
                    }
                    function traceSendingRequest(message) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                                data = `Params: ${stringifyTrace(message.params)}\n\n`;
                            }
                            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
                        } else {
                            logLSPMessage('send-request', message);
                        }
                    }
                    function traceSendingNotification(message) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if (trace === Trace.Verbose || trace === Trace.Compact) {
                                if (message.params) {
                                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                                } else {
                                    data = 'No parameters provided.\n\n';
                                }
                            }
                            tracer.log(`Sending notification '${message.method}'.`, data);
                        } else {
                            logLSPMessage('send-notification', message);
                        }
                    }
                    function traceSendingResponse(message, method, startTime) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if (trace === Trace.Verbose || trace === Trace.Compact) {
                                if (message.error && message.error.data) {
                                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                                } else {
                                    if (message.result) {
                                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                                    } else if (message.error === undefined) {
                                        data = 'No result returned.\n\n';
                                    }
                                }
                            }
                            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
                        } else {
                            logLSPMessage('send-response', message);
                        }
                    }
                    function traceReceivedRequest(message) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                                data = `Params: ${stringifyTrace(message.params)}\n\n`;
                            }
                            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
                        } else {
                            logLSPMessage('receive-request', message);
                        }
                    }
                    function traceReceivedNotification(message) {
                        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if (trace === Trace.Verbose || trace === Trace.Compact) {
                                if (message.params) {
                                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                                } else {
                                    data = 'No parameters provided.\n\n';
                                }
                            }
                            tracer.log(`Received notification '${message.method}'.`, data);
                        } else {
                            logLSPMessage('receive-notification', message);
                        }
                    }
                    function traceReceivedResponse(message, responsePromise) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if (trace === Trace.Verbose || trace === Trace.Compact) {
                                if (message.error && message.error.data) {
                                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                                } else {
                                    if (message.result) {
                                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                                    } else if (message.error === undefined) {
                                        data = 'No result returned.\n\n';
                                    }
                                }
                            }
                            if (responsePromise) {
                                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';
                                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
                            } else {
                                tracer.log(`Received response ${message.id} without active response promise.`, data);
                            }
                        } else {
                            logLSPMessage('receive-response', message);
                        }
                    }
                    function logLSPMessage(type, message) {
                        if (!tracer || trace === Trace.Off) {
                            return;
                        }
                        const lspMessage = {
                            isLSPMessage: true,
                            type,
                            message,
                            timestamp: Date.now()
                        };
                        tracer.log(lspMessage);
                    }
                    function throwIfClosedOrDisposed() {
                        if (isClosed()) {
                            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
                        }
                        if (isDisposed()) {
                            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
                        }
                    }
                    function throwIfListening() {
                        if (isListening()) {
                            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
                        }
                    }
                    function throwIfNotListening() {
                        if (!isListening()) {
                            throw new Error('Call listen() first.');
                        }
                    }
                    function undefinedToNull(param) {
                        if (param === undefined) {
                            return null;
                        } else {
                            return param;
                        }
                    }
                    function nullToUndefined(param) {
                        if (param === null) {
                            return undefined;
                        } else {
                            return param;
                        }
                    }
                    function isNamedParam(param) {
                        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';
                    }
                    function computeSingleParam(parameterStructures, param) {
                        switch(parameterStructures){
                            case messages_1.ParameterStructures.auto:
                                if (isNamedParam(param)) {
                                    return nullToUndefined(param);
                                } else {
                                    return [
                                        undefinedToNull(param)
                                    ];
                                }
                            case messages_1.ParameterStructures.byName:
                                if (!isNamedParam(param)) {
                                    throw new Error(`Received parameters by name but param is not an object literal.`);
                                }
                                return nullToUndefined(param);
                            case messages_1.ParameterStructures.byPosition:
                                return [
                                    undefinedToNull(param)
                                ];
                            default:
                                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
                        }
                    }
                    function computeMessageParams(type, params) {
                        let result;
                        const numberOfParams = type.numberOfParams;
                        switch(numberOfParams){
                            case 0:
                                result = undefined;
                                break;
                            case 1:
                                result = computeSingleParam(type.parameterStructures, params[0]);
                                break;
                            default:
                                result = [];
                                for(let i = 0; i < params.length && i < numberOfParams; i++){
                                    result.push(undefinedToNull(params[i]));
                                }
                                if (params.length < numberOfParams) {
                                    for(let i = params.length; i < numberOfParams; i++){
                                        result.push(null);
                                    }
                                }
                                break;
                        }
                        return result;
                    }
                    const connection = {
                        sendNotification: (type, ...args)=>{
                            throwIfClosedOrDisposed();
                            let method;
                            let messageParams;
                            if (Is.string(type)) {
                                method = type;
                                const first = args[0];
                                let paramStart = 0;
                                let parameterStructures = messages_1.ParameterStructures.auto;
                                if (messages_1.ParameterStructures.is(first)) {
                                    paramStart = 1;
                                    parameterStructures = first;
                                }
                                let paramEnd = args.length;
                                const numberOfParams = paramEnd - paramStart;
                                switch(numberOfParams){
                                    case 0:
                                        messageParams = undefined;
                                        break;
                                    case 1:
                                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                                        break;
                                    default:
                                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                                        }
                                        messageParams = args.slice(paramStart, paramEnd).map((value)=>undefinedToNull(value));
                                        break;
                                }
                            } else {
                                const params = args;
                                method = type.method;
                                messageParams = computeMessageParams(type, params);
                            }
                            const notificationMessage = {
                                jsonrpc: version,
                                method: method,
                                params: messageParams
                            };
                            traceSendingNotification(notificationMessage);
                            return messageWriter.write(notificationMessage).catch((error)=>{
                                logger.error(`Sending notification failed.`);
                                throw error;
                            });
                        },
                        onNotification: (type, handler)=>{
                            throwIfClosedOrDisposed();
                            let method;
                            if (Is.func(type)) {
                                starNotificationHandler = type;
                            } else if (handler) {
                                if (Is.string(type)) {
                                    method = type;
                                    notificationHandlers.set(type, {
                                        type: undefined,
                                        handler
                                    });
                                } else {
                                    method = type.method;
                                    notificationHandlers.set(type.method, {
                                        type,
                                        handler
                                    });
                                }
                            }
                            return {
                                dispose: ()=>{
                                    if (method !== undefined) {
                                        notificationHandlers.delete(method);
                                    } else {
                                        starNotificationHandler = undefined;
                                    }
                                }
                            };
                        },
                        onProgress: (_type, token, handler)=>{
                            if (progressHandlers.has(token)) {
                                throw new Error(`Progress handler for token ${token} already registered`);
                            }
                            progressHandlers.set(token, handler);
                            return {
                                dispose: ()=>{
                                    progressHandlers.delete(token);
                                }
                            };
                        },
                        sendProgress: (_type, token, value)=>{
                            // This should not await but simple return to ensure that we don't have another
                            // async scheduling. Otherwise one send could overtake another send.
                            return connection.sendNotification(ProgressNotification.type, {
                                token,
                                value
                            });
                        },
                        onUnhandledProgress: unhandledProgressEmitter.event,
                        sendRequest: (type, ...args)=>{
                            throwIfClosedOrDisposed();
                            throwIfNotListening();
                            let method;
                            let messageParams;
                            let token = undefined;
                            if (Is.string(type)) {
                                method = type;
                                const first = args[0];
                                const last = args[args.length - 1];
                                let paramStart = 0;
                                let parameterStructures = messages_1.ParameterStructures.auto;
                                if (messages_1.ParameterStructures.is(first)) {
                                    paramStart = 1;
                                    parameterStructures = first;
                                }
                                let paramEnd = args.length;
                                if (cancellation_1.CancellationToken.is(last)) {
                                    paramEnd = paramEnd - 1;
                                    token = last;
                                }
                                const numberOfParams = paramEnd - paramStart;
                                switch(numberOfParams){
                                    case 0:
                                        messageParams = undefined;
                                        break;
                                    case 1:
                                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                                        break;
                                    default:
                                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                                        }
                                        messageParams = args.slice(paramStart, paramEnd).map((value)=>undefinedToNull(value));
                                        break;
                                }
                            } else {
                                const params = args;
                                method = type.method;
                                messageParams = computeMessageParams(type, params);
                                const numberOfParams = type.numberOfParams;
                                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
                            }
                            const id = sequenceNumber++;
                            let disposable;
                            if (token) {
                                disposable = token.onCancellationRequested(()=>{
                                    const p = cancellationStrategy.sender.sendCancellation(connection, id);
                                    if (p === undefined) {
                                        logger.log(`Received no promise from cancellation strategy when cancelling id ${id}`);
                                        return Promise.resolve();
                                    } else {
                                        return p.catch(()=>{
                                            logger.log(`Sending cancellation messages for id ${id} failed`);
                                        });
                                    }
                                });
                            }
                            const requestMessage = {
                                jsonrpc: version,
                                id: id,
                                method: method,
                                params: messageParams
                            };
                            traceSendingRequest(requestMessage);
                            if (typeof cancellationStrategy.sender.enableCancellation === 'function') {
                                cancellationStrategy.sender.enableCancellation(requestMessage);
                            }
                            return new Promise(async (resolve, reject)=>{
                                const resolveWithCleanup = (r)=>{
                                    var _disposable;
                                    resolve(r);
                                    cancellationStrategy.sender.cleanup(id);
                                    (_disposable = disposable) === null || _disposable === void 0 ? void 0 : _disposable.dispose();
                                };
                                const rejectWithCleanup = (r)=>{
                                    var _disposable;
                                    reject(r);
                                    cancellationStrategy.sender.cleanup(id);
                                    (_disposable = disposable) === null || _disposable === void 0 ? void 0 : _disposable.dispose();
                                };
                                const responsePromise = {
                                    method: method,
                                    timerStart: Date.now(),
                                    resolve: resolveWithCleanup,
                                    reject: rejectWithCleanup
                                };
                                try {
                                    await messageWriter.write(requestMessage);
                                    responsePromises.set(id, responsePromise);
                                } catch (error) {
                                    logger.error(`Sending request failed.`);
                                    // Writing the message failed. So we need to reject the promise.
                                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, error.message ? error.message : 'Unknown reason'));
                                    throw error;
                                }
                            });
                        },
                        onRequest: (type, handler)=>{
                            throwIfClosedOrDisposed();
                            let method = null;
                            if (StarRequestHandler.is(type)) {
                                method = undefined;
                                starRequestHandler = type;
                            } else if (Is.string(type)) {
                                method = null;
                                if (handler !== undefined) {
                                    method = type;
                                    requestHandlers.set(type, {
                                        handler: handler,
                                        type: undefined
                                    });
                                }
                            } else {
                                if (handler !== undefined) {
                                    method = type.method;
                                    requestHandlers.set(type.method, {
                                        type,
                                        handler
                                    });
                                }
                            }
                            return {
                                dispose: ()=>{
                                    if (method === null) {
                                        return;
                                    }
                                    if (method !== undefined) {
                                        requestHandlers.delete(method);
                                    } else {
                                        starRequestHandler = undefined;
                                    }
                                }
                            };
                        },
                        hasPendingResponse: ()=>{
                            return responsePromises.size > 0;
                        },
                        trace: async (_value, _tracer, sendNotificationOrTraceOptions)=>{
                            let _sendNotification = false;
                            let _traceFormat = TraceFormat.Text;
                            if (sendNotificationOrTraceOptions !== undefined) {
                                if (Is.boolean(sendNotificationOrTraceOptions)) {
                                    _sendNotification = sendNotificationOrTraceOptions;
                                } else {
                                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                                }
                            }
                            trace = _value;
                            traceFormat = _traceFormat;
                            if (trace === Trace.Off) {
                                tracer = undefined;
                            } else {
                                tracer = _tracer;
                            }
                            if (_sendNotification && !isClosed() && !isDisposed()) {
                                await connection.sendNotification(SetTraceNotification.type, {
                                    value: Trace.toString(_value)
                                });
                            }
                        },
                        onError: errorEmitter.event,
                        onClose: closeEmitter.event,
                        onUnhandledNotification: unhandledNotificationEmitter.event,
                        onDispose: disposeEmitter.event,
                        end: ()=>{
                            messageWriter.end();
                        },
                        dispose: ()=>{
                            if (isDisposed()) {
                                return;
                            }
                            state = ConnectionState.Disposed;
                            disposeEmitter.fire(undefined);
                            const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, 'Pending response rejected since connection got disposed');
                            for (const promise of responsePromises.values()){
                                promise.reject(error);
                            }
                            responsePromises = new Map();
                            requestTokens = new Map();
                            knownCanceledRequests = new Set();
                            messageQueue = new linkedMap_1.LinkedMap();
                            // Test for backwards compatibility
                            if (Is.func(messageWriter.dispose)) {
                                messageWriter.dispose();
                            }
                            if (Is.func(messageReader.dispose)) {
                                messageReader.dispose();
                            }
                        },
                        listen: ()=>{
                            throwIfClosedOrDisposed();
                            throwIfListening();
                            state = ConnectionState.Listening;
                            messageReader.listen(callback);
                        },
                        inspect: ()=>{
                            // eslint-disable-next-line no-console
                            (0, ral_1.default)().console.log('inspect');
                        }
                    };
                    connection.onNotification(LogTraceNotification.type, (params)=>{
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        const verbose = trace === Trace.Verbose || trace === Trace.Compact;
                        tracer.log(params.message, verbose ? params.verbose : undefined);
                    });
                    connection.onNotification(ProgressNotification.type, (params)=>{
                        const handler = progressHandlers.get(params.token);
                        if (handler) {
                            handler(params.value);
                        } else {
                            unhandledProgressEmitter.fire(params);
                        }
                    });
                    return connection;
                }
                exports1.createMessageConnection = createMessageConnection;
            /***/ },
            /***/ 8844: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.Disposable = void 0;
                var Disposable;
                (function(Disposable) {
                    function create(func) {
                        return {
                            dispose: func
                        };
                    }
                    Disposable.create = create;
                })(Disposable || (exports1.Disposable = Disposable = {}));
            /***/ },
            /***/ 2479: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_627812__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.Emitter = exports1.Event = void 0;
                const ral_1 = __nested_webpack_require_627812__(5091);
                var Event;
                (function(Event) {
                    const _disposable = {
                        dispose () {}
                    };
                    Event.None = function() {
                        return _disposable;
                    };
                })(Event || (exports1.Event = Event = {}));
                class CallbackList {
                    add(callback, context = null, bucket) {
                        if (!this._callbacks) {
                            this._callbacks = [];
                            this._contexts = [];
                        }
                        this._callbacks.push(callback);
                        this._contexts.push(context);
                        if (Array.isArray(bucket)) {
                            bucket.push({
                                dispose: ()=>this.remove(callback, context)
                            });
                        }
                    }
                    remove(callback, context = null) {
                        if (!this._callbacks) {
                            return;
                        }
                        let foundCallbackWithDifferentContext = false;
                        for(let i = 0, len = this._callbacks.length; i < len; i++){
                            if (this._callbacks[i] === callback) {
                                if (this._contexts[i] === context) {
                                    // callback & context match => remove it
                                    this._callbacks.splice(i, 1);
                                    this._contexts.splice(i, 1);
                                    return;
                                } else {
                                    foundCallbackWithDifferentContext = true;
                                }
                            }
                        }
                        if (foundCallbackWithDifferentContext) {
                            throw new Error('When adding a listener with a context, you should remove it with the same context');
                        }
                    }
                    invoke(...args) {
                        if (!this._callbacks) {
                            return [];
                        }
                        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
                        for(let i = 0, len = callbacks.length; i < len; i++){
                            try {
                                ret.push(callbacks[i].apply(contexts[i], args));
                            } catch (e) {
                                // eslint-disable-next-line no-console
                                (0, ral_1.default)().console.error(e);
                            }
                        }
                        return ret;
                    }
                    isEmpty() {
                        return !this._callbacks || this._callbacks.length === 0;
                    }
                    dispose() {
                        this._callbacks = undefined;
                        this._contexts = undefined;
                    }
                }
                class Emitter {
                    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */ get event() {
                        if (!this._event) {
                            this._event = (listener, thisArgs, disposables)=>{
                                if (!this._callbacks) {
                                    this._callbacks = new CallbackList();
                                }
                                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                                    this._options.onFirstListenerAdd(this);
                                }
                                this._callbacks.add(listener, thisArgs);
                                const result = {
                                    dispose: ()=>{
                                        if (!this._callbacks) {
                                            // disposable is disposed after emitter is disposed.
                                            return;
                                        }
                                        this._callbacks.remove(listener, thisArgs);
                                        result.dispose = Emitter._noop;
                                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                                            this._options.onLastListenerRemove(this);
                                        }
                                    }
                                };
                                if (Array.isArray(disposables)) {
                                    disposables.push(result);
                                }
                                return result;
                            };
                        }
                        return this._event;
                    }
                    /**
     * To be kept private to fire an event to
     * subscribers
     */ fire(event) {
                        if (this._callbacks) {
                            this._callbacks.invoke.call(this._callbacks, event);
                        }
                    }
                    dispose() {
                        if (this._callbacks) {
                            this._callbacks.dispose();
                            this._callbacks = undefined;
                        }
                    }
                    constructor(_options){
                        this._options = _options;
                    }
                }
                exports1.Emitter = Emitter;
                Emitter._noop = function() {};
            /***/ },
            /***/ 6618: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.stringArray = exports1.array = exports1.func = exports1.error = exports1.number = exports1.string = exports1.boolean = void 0;
                function boolean(value) {
                    return value === true || value === false;
                }
                exports1.boolean = boolean;
                function string(value) {
                    return typeof value === 'string' || value instanceof String;
                }
                exports1.string = string;
                function number(value) {
                    return typeof value === 'number' || value instanceof Number;
                }
                exports1.number = number;
                function error(value) {
                    return value instanceof Error;
                }
                exports1.error = error;
                function func(value) {
                    return typeof value === 'function';
                }
                exports1.func = func;
                function array(value) {
                    return Array.isArray(value);
                }
                exports1.array = array;
                function stringArray(value) {
                    return array(value) && value.every((elem)=>string(elem));
                }
                exports1.stringArray = stringArray;
            /***/ },
            /***/ 1109: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _a;
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.LRUCache = exports1.LinkedMap = exports1.Touch = void 0;
                var Touch;
                (function(Touch) {
                    Touch.None = 0;
                    Touch.First = 1;
                    Touch.AsOld = Touch.First;
                    Touch.Last = 2;
                    Touch.AsNew = Touch.Last;
                })(Touch || (exports1.Touch = Touch = {}));
                class LinkedMap {
                    clear() {
                        this._map.clear();
                        this._head = undefined;
                        this._tail = undefined;
                        this._size = 0;
                        this._state++;
                    }
                    isEmpty() {
                        return !this._head && !this._tail;
                    }
                    get size() {
                        return this._size;
                    }
                    get first() {
                        var _this__head;
                        return (_this__head = this._head) === null || _this__head === void 0 ? void 0 : _this__head.value;
                    }
                    get last() {
                        var _this__tail;
                        return (_this__tail = this._tail) === null || _this__tail === void 0 ? void 0 : _this__tail.value;
                    }
                    has(key) {
                        return this._map.has(key);
                    }
                    get(key, touch = Touch.None) {
                        const item = this._map.get(key);
                        if (!item) {
                            return undefined;
                        }
                        if (touch !== Touch.None) {
                            this.touch(item, touch);
                        }
                        return item.value;
                    }
                    set(key, value, touch = Touch.None) {
                        let item = this._map.get(key);
                        if (item) {
                            item.value = value;
                            if (touch !== Touch.None) {
                                this.touch(item, touch);
                            }
                        } else {
                            item = {
                                key,
                                value,
                                next: undefined,
                                previous: undefined
                            };
                            switch(touch){
                                case Touch.None:
                                    this.addItemLast(item);
                                    break;
                                case Touch.First:
                                    this.addItemFirst(item);
                                    break;
                                case Touch.Last:
                                    this.addItemLast(item);
                                    break;
                                default:
                                    this.addItemLast(item);
                                    break;
                            }
                            this._map.set(key, item);
                            this._size++;
                        }
                        return this;
                    }
                    delete(key) {
                        return !!this.remove(key);
                    }
                    remove(key) {
                        const item = this._map.get(key);
                        if (!item) {
                            return undefined;
                        }
                        this._map.delete(key);
                        this.removeItem(item);
                        this._size--;
                        return item.value;
                    }
                    shift() {
                        if (!this._head && !this._tail) {
                            return undefined;
                        }
                        if (!this._head || !this._tail) {
                            throw new Error('Invalid list');
                        }
                        const item = this._head;
                        this._map.delete(item.key);
                        this.removeItem(item);
                        this._size--;
                        return item.value;
                    }
                    forEach(callbackfn, thisArg) {
                        const state = this._state;
                        let current = this._head;
                        while(current){
                            if (thisArg) {
                                callbackfn.bind(thisArg)(current.value, current.key, this);
                            } else {
                                callbackfn(current.value, current.key, this);
                            }
                            if (this._state !== state) {
                                throw new Error(`LinkedMap got modified during iteration.`);
                            }
                            current = current.next;
                        }
                    }
                    keys() {
                        const state = this._state;
                        let current = this._head;
                        const iterator = {
                            [Symbol.iterator]: ()=>{
                                return iterator;
                            },
                            next: ()=>{
                                if (this._state !== state) {
                                    throw new Error(`LinkedMap got modified during iteration.`);
                                }
                                if (current) {
                                    const result = {
                                        value: current.key,
                                        done: false
                                    };
                                    current = current.next;
                                    return result;
                                } else {
                                    return {
                                        value: undefined,
                                        done: true
                                    };
                                }
                            }
                        };
                        return iterator;
                    }
                    values() {
                        const state = this._state;
                        let current = this._head;
                        const iterator = {
                            [Symbol.iterator]: ()=>{
                                return iterator;
                            },
                            next: ()=>{
                                if (this._state !== state) {
                                    throw new Error(`LinkedMap got modified during iteration.`);
                                }
                                if (current) {
                                    const result = {
                                        value: current.value,
                                        done: false
                                    };
                                    current = current.next;
                                    return result;
                                } else {
                                    return {
                                        value: undefined,
                                        done: true
                                    };
                                }
                            }
                        };
                        return iterator;
                    }
                    entries() {
                        const state = this._state;
                        let current = this._head;
                        const iterator = {
                            [Symbol.iterator]: ()=>{
                                return iterator;
                            },
                            next: ()=>{
                                if (this._state !== state) {
                                    throw new Error(`LinkedMap got modified during iteration.`);
                                }
                                if (current) {
                                    const result = {
                                        value: [
                                            current.key,
                                            current.value
                                        ],
                                        done: false
                                    };
                                    current = current.next;
                                    return result;
                                } else {
                                    return {
                                        value: undefined,
                                        done: true
                                    };
                                }
                            }
                        };
                        return iterator;
                    }
                    [(_a = Symbol.toStringTag, Symbol.iterator)]() {
                        return this.entries();
                    }
                    trimOld(newSize) {
                        if (newSize >= this.size) {
                            return;
                        }
                        if (newSize === 0) {
                            this.clear();
                            return;
                        }
                        let current = this._head;
                        let currentSize = this.size;
                        while(current && currentSize > newSize){
                            this._map.delete(current.key);
                            current = current.next;
                            currentSize--;
                        }
                        this._head = current;
                        this._size = currentSize;
                        if (current) {
                            current.previous = undefined;
                        }
                        this._state++;
                    }
                    addItemFirst(item) {
                        // First time Insert
                        if (!this._head && !this._tail) {
                            this._tail = item;
                        } else if (!this._head) {
                            throw new Error('Invalid list');
                        } else {
                            item.next = this._head;
                            this._head.previous = item;
                        }
                        this._head = item;
                        this._state++;
                    }
                    addItemLast(item) {
                        // First time Insert
                        if (!this._head && !this._tail) {
                            this._head = item;
                        } else if (!this._tail) {
                            throw new Error('Invalid list');
                        } else {
                            item.previous = this._tail;
                            this._tail.next = item;
                        }
                        this._tail = item;
                        this._state++;
                    }
                    removeItem(item) {
                        if (item === this._head && item === this._tail) {
                            this._head = undefined;
                            this._tail = undefined;
                        } else if (item === this._head) {
                            // This can only happened if size === 1 which is handle
                            // by the case above.
                            if (!item.next) {
                                throw new Error('Invalid list');
                            }
                            item.next.previous = undefined;
                            this._head = item.next;
                        } else if (item === this._tail) {
                            // This can only happened if size === 1 which is handle
                            // by the case above.
                            if (!item.previous) {
                                throw new Error('Invalid list');
                            }
                            item.previous.next = undefined;
                            this._tail = item.previous;
                        } else {
                            const next = item.next;
                            const previous = item.previous;
                            if (!next || !previous) {
                                throw new Error('Invalid list');
                            }
                            next.previous = previous;
                            previous.next = next;
                        }
                        item.next = undefined;
                        item.previous = undefined;
                        this._state++;
                    }
                    touch(item, touch) {
                        if (!this._head || !this._tail) {
                            throw new Error('Invalid list');
                        }
                        if (touch !== Touch.First && touch !== Touch.Last) {
                            return;
                        }
                        if (touch === Touch.First) {
                            if (item === this._head) {
                                return;
                            }
                            const next = item.next;
                            const previous = item.previous;
                            // Unlink the item
                            if (item === this._tail) {
                                // previous must be defined since item was not head but is tail
                                // So there are more than on item in the map
                                previous.next = undefined;
                                this._tail = previous;
                            } else {
                                // Both next and previous are not undefined since item was neither head nor tail.
                                next.previous = previous;
                                previous.next = next;
                            }
                            // Insert the node at head
                            item.previous = undefined;
                            item.next = this._head;
                            this._head.previous = item;
                            this._head = item;
                            this._state++;
                        } else if (touch === Touch.Last) {
                            if (item === this._tail) {
                                return;
                            }
                            const next = item.next;
                            const previous = item.previous;
                            // Unlink the item.
                            if (item === this._head) {
                                // next must be defined since item was not tail but is head
                                // So there are more than on item in the map
                                next.previous = undefined;
                                this._head = next;
                            } else {
                                // Both next and previous are not undefined since item was neither head nor tail.
                                next.previous = previous;
                                previous.next = next;
                            }
                            item.next = undefined;
                            item.previous = this._tail;
                            this._tail.next = item;
                            this._tail = item;
                            this._state++;
                        }
                    }
                    toJSON() {
                        const data = [];
                        this.forEach((value, key)=>{
                            data.push([
                                key,
                                value
                            ]);
                        });
                        return data;
                    }
                    fromJSON(data) {
                        this.clear();
                        for (const [key, value] of data){
                            this.set(key, value);
                        }
                    }
                    constructor(){
                        this[_a] = 'LinkedMap';
                        this._map = new Map();
                        this._head = undefined;
                        this._tail = undefined;
                        this._size = 0;
                        this._state = 0;
                    }
                }
                exports1.LinkedMap = LinkedMap;
                class LRUCache extends LinkedMap {
                    get limit() {
                        return this._limit;
                    }
                    set limit(limit) {
                        this._limit = limit;
                        this.checkTrim();
                    }
                    get ratio() {
                        return this._ratio;
                    }
                    set ratio(ratio) {
                        this._ratio = Math.min(Math.max(0, ratio), 1);
                        this.checkTrim();
                    }
                    get(key, touch = Touch.AsNew) {
                        return super.get(key, touch);
                    }
                    peek(key) {
                        return super.get(key, Touch.None);
                    }
                    set(key, value) {
                        super.set(key, value, Touch.Last);
                        this.checkTrim();
                        return this;
                    }
                    checkTrim() {
                        if (this.size > this._limit) {
                            this.trimOld(Math.round(this._limit * this._ratio));
                        }
                    }
                    constructor(limit, ratio = 1){
                        super();
                        this._limit = limit;
                        this._ratio = Math.min(Math.max(0, ratio), 1);
                    }
                }
                exports1.LRUCache = LRUCache;
            /***/ },
            /***/ 9805: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.AbstractMessageBuffer = void 0;
                const CR = 13;
                const LF = 10;
                const CRLF = '\r\n';
                class AbstractMessageBuffer {
                    get encoding() {
                        return this._encoding;
                    }
                    append(chunk) {
                        const toAppend = typeof chunk === 'string' ? this.fromString(chunk, this._encoding) : chunk;
                        this._chunks.push(toAppend);
                        this._totalLength += toAppend.byteLength;
                    }
                    tryReadHeaders(lowerCaseKeys = false) {
                        if (this._chunks.length === 0) {
                            return undefined;
                        }
                        let state = 0;
                        let chunkIndex = 0;
                        let offset = 0;
                        let chunkBytesRead = 0;
                        row: while(chunkIndex < this._chunks.length){
                            const chunk = this._chunks[chunkIndex];
                            offset = 0;
                            column: while(offset < chunk.length){
                                const value = chunk[offset];
                                switch(value){
                                    case CR:
                                        switch(state){
                                            case 0:
                                                state = 1;
                                                break;
                                            case 2:
                                                state = 3;
                                                break;
                                            default:
                                                state = 0;
                                        }
                                        break;
                                    case LF:
                                        switch(state){
                                            case 1:
                                                state = 2;
                                                break;
                                            case 3:
                                                state = 4;
                                                offset++;
                                                break row;
                                            default:
                                                state = 0;
                                        }
                                        break;
                                    default:
                                        state = 0;
                                }
                                offset++;
                            }
                            chunkBytesRead += chunk.byteLength;
                            chunkIndex++;
                        }
                        if (state !== 4) {
                            return undefined;
                        }
                        // The buffer contains the two CRLF at the end. So we will
                        // have two empty lines after the split at the end as well.
                        const buffer = this._read(chunkBytesRead + offset);
                        const result = new Map();
                        const headers = this.toString(buffer, 'ascii').split(CRLF);
                        if (headers.length < 2) {
                            return result;
                        }
                        for(let i = 0; i < headers.length - 2; i++){
                            const header = headers[i];
                            const index = header.indexOf(':');
                            if (index === -1) {
                                throw new Error(`Message header must separate key and value using ':'\n${header}`);
                            }
                            const key = header.substr(0, index);
                            const value = header.substr(index + 1).trim();
                            result.set(lowerCaseKeys ? key.toLowerCase() : key, value);
                        }
                        return result;
                    }
                    tryReadBody(length) {
                        if (this._totalLength < length) {
                            return undefined;
                        }
                        return this._read(length);
                    }
                    get numberOfBytes() {
                        return this._totalLength;
                    }
                    _read(byteCount) {
                        if (byteCount === 0) {
                            return this.emptyBuffer();
                        }
                        if (byteCount > this._totalLength) {
                            throw new Error(`Cannot read so many bytes!`);
                        }
                        if (this._chunks[0].byteLength === byteCount) {
                            // super fast path, precisely first chunk must be returned
                            const chunk = this._chunks[0];
                            this._chunks.shift();
                            this._totalLength -= byteCount;
                            return this.asNative(chunk);
                        }
                        if (this._chunks[0].byteLength > byteCount) {
                            // fast path, the reading is entirely within the first chunk
                            const chunk = this._chunks[0];
                            const result = this.asNative(chunk, byteCount);
                            this._chunks[0] = chunk.slice(byteCount);
                            this._totalLength -= byteCount;
                            return result;
                        }
                        const result = this.allocNative(byteCount);
                        let resultOffset = 0;
                        let chunkIndex = 0;
                        while(byteCount > 0){
                            const chunk = this._chunks[chunkIndex];
                            if (chunk.byteLength > byteCount) {
                                // this chunk will survive
                                const chunkPart = chunk.slice(0, byteCount);
                                result.set(chunkPart, resultOffset);
                                resultOffset += byteCount;
                                this._chunks[chunkIndex] = chunk.slice(byteCount);
                                this._totalLength -= byteCount;
                                byteCount -= byteCount;
                            } else {
                                // this chunk will be entirely read
                                result.set(chunk, resultOffset);
                                resultOffset += chunk.byteLength;
                                this._chunks.shift();
                                this._totalLength -= chunk.byteLength;
                                byteCount -= chunk.byteLength;
                            }
                        }
                        return result;
                    }
                    constructor(encoding = 'utf-8'){
                        this._encoding = encoding;
                        this._chunks = [];
                        this._totalLength = 0;
                    }
                }
                exports1.AbstractMessageBuffer = AbstractMessageBuffer;
            /***/ },
            /***/ 656: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_663499__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ReadableStreamMessageReader = exports1.AbstractMessageReader = exports1.MessageReader = void 0;
                const ral_1 = __nested_webpack_require_663499__(5091);
                const Is = __nested_webpack_require_663499__(6618);
                const events_1 = __nested_webpack_require_663499__(2479);
                const semaphore_1 = __nested_webpack_require_663499__(418);
                var MessageReader;
                (function(MessageReader) {
                    function is(value) {
                        let candidate = value;
                        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) && Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
                    }
                    MessageReader.is = is;
                })(MessageReader || (exports1.MessageReader = MessageReader = {}));
                class AbstractMessageReader {
                    dispose() {
                        this.errorEmitter.dispose();
                        this.closeEmitter.dispose();
                    }
                    get onError() {
                        return this.errorEmitter.event;
                    }
                    fireError(error) {
                        this.errorEmitter.fire(this.asError(error));
                    }
                    get onClose() {
                        return this.closeEmitter.event;
                    }
                    fireClose() {
                        this.closeEmitter.fire(undefined);
                    }
                    get onPartialMessage() {
                        return this.partialMessageEmitter.event;
                    }
                    firePartialMessage(info) {
                        this.partialMessageEmitter.fire(info);
                    }
                    asError(error) {
                        if (error instanceof Error) {
                            return error;
                        } else {
                            return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
                        }
                    }
                    constructor(){
                        this.errorEmitter = new events_1.Emitter();
                        this.closeEmitter = new events_1.Emitter();
                        this.partialMessageEmitter = new events_1.Emitter();
                    }
                }
                exports1.AbstractMessageReader = AbstractMessageReader;
                var ResolvedMessageReaderOptions;
                (function(ResolvedMessageReaderOptions) {
                    function fromOptions(options) {
                        let charset;
                        let result;
                        let contentDecoder;
                        const contentDecoders = new Map();
                        let contentTypeDecoder;
                        const contentTypeDecoders = new Map();
                        if (options === undefined || typeof options === 'string') {
                            charset = options !== null && options !== void 0 ? options : 'utf-8';
                        } else {
                            var _options_charset;
                            charset = (_options_charset = options.charset) !== null && _options_charset !== void 0 ? _options_charset : 'utf-8';
                            if (options.contentDecoder !== undefined) {
                                contentDecoder = options.contentDecoder;
                                contentDecoders.set(contentDecoder.name, contentDecoder);
                            }
                            if (options.contentDecoders !== undefined) {
                                for (const decoder of options.contentDecoders){
                                    contentDecoders.set(decoder.name, decoder);
                                }
                            }
                            if (options.contentTypeDecoder !== undefined) {
                                contentTypeDecoder = options.contentTypeDecoder;
                                contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
                            }
                            if (options.contentTypeDecoders !== undefined) {
                                for (const decoder of options.contentTypeDecoders){
                                    contentTypeDecoders.set(decoder.name, decoder);
                                }
                            }
                        }
                        if (contentTypeDecoder === undefined) {
                            contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
                            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
                        }
                        return {
                            charset,
                            contentDecoder,
                            contentDecoders,
                            contentTypeDecoder,
                            contentTypeDecoders
                        };
                    }
                    ResolvedMessageReaderOptions.fromOptions = fromOptions;
                })(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
                class ReadableStreamMessageReader extends AbstractMessageReader {
                    set partialMessageTimeout(timeout) {
                        this._partialMessageTimeout = timeout;
                    }
                    get partialMessageTimeout() {
                        return this._partialMessageTimeout;
                    }
                    listen(callback) {
                        this.nextMessageLength = -1;
                        this.messageToken = 0;
                        this.partialMessageTimer = undefined;
                        this.callback = callback;
                        const result = this.readable.onData((data)=>{
                            this.onData(data);
                        });
                        this.readable.onError((error)=>this.fireError(error));
                        this.readable.onClose(()=>this.fireClose());
                        return result;
                    }
                    onData(data) {
                        try {
                            this.buffer.append(data);
                            while(true){
                                if (this.nextMessageLength === -1) {
                                    const headers = this.buffer.tryReadHeaders(true);
                                    if (!headers) {
                                        return;
                                    }
                                    const contentLength = headers.get('content-length');
                                    if (!contentLength) {
                                        this.fireError(new Error(`Header must provide a Content-Length property.\n${JSON.stringify(Object.fromEntries(headers))}`));
                                        return;
                                    }
                                    const length = parseInt(contentLength);
                                    if (isNaN(length)) {
                                        this.fireError(new Error(`Content-Length value must be a number. Got ${contentLength}`));
                                        return;
                                    }
                                    this.nextMessageLength = length;
                                }
                                const body = this.buffer.tryReadBody(this.nextMessageLength);
                                if (body === undefined) {
                                    /** We haven't received the full message yet. */ this.setPartialMessageTimer();
                                    return;
                                }
                                this.clearPartialMessageTimer();
                                this.nextMessageLength = -1;
                                // Make sure that we convert one received message after the
                                // other. Otherwise it could happen that a decoding of a second
                                // smaller message finished before the decoding of a first larger
                                // message and then we would deliver the second message first.
                                this.readSemaphore.lock(async ()=>{
                                    const bytes = this.options.contentDecoder !== undefined ? await this.options.contentDecoder.decode(body) : body;
                                    const message = await this.options.contentTypeDecoder.decode(bytes, this.options);
                                    this.callback(message);
                                }).catch((error)=>{
                                    this.fireError(error);
                                });
                            }
                        } catch (error) {
                            this.fireError(error);
                        }
                    }
                    clearPartialMessageTimer() {
                        if (this.partialMessageTimer) {
                            this.partialMessageTimer.dispose();
                            this.partialMessageTimer = undefined;
                        }
                    }
                    setPartialMessageTimer() {
                        this.clearPartialMessageTimer();
                        if (this._partialMessageTimeout <= 0) {
                            return;
                        }
                        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout)=>{
                            this.partialMessageTimer = undefined;
                            if (token === this.messageToken) {
                                this.firePartialMessage({
                                    messageToken: token,
                                    waitingTime: timeout
                                });
                                this.setPartialMessageTimer();
                            }
                        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
                    }
                    constructor(readable, options){
                        super();
                        this.readable = readable;
                        this.options = ResolvedMessageReaderOptions.fromOptions(options);
                        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
                        this._partialMessageTimeout = 10000;
                        this.nextMessageLength = -1;
                        this.messageToken = 0;
                        this.readSemaphore = new semaphore_1.Semaphore(1);
                    }
                }
                exports1.ReadableStreamMessageReader = ReadableStreamMessageReader;
            /***/ },
            /***/ 9036: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_675121__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.WriteableStreamMessageWriter = exports1.AbstractMessageWriter = exports1.MessageWriter = void 0;
                const ral_1 = __nested_webpack_require_675121__(5091);
                const Is = __nested_webpack_require_675121__(6618);
                const semaphore_1 = __nested_webpack_require_675121__(418);
                const events_1 = __nested_webpack_require_675121__(2479);
                const ContentLength = 'Content-Length: ';
                const CRLF = '\r\n';
                var MessageWriter;
                (function(MessageWriter) {
                    function is(value) {
                        let candidate = value;
                        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) && Is.func(candidate.onError) && Is.func(candidate.write);
                    }
                    MessageWriter.is = is;
                })(MessageWriter || (exports1.MessageWriter = MessageWriter = {}));
                class AbstractMessageWriter {
                    dispose() {
                        this.errorEmitter.dispose();
                        this.closeEmitter.dispose();
                    }
                    get onError() {
                        return this.errorEmitter.event;
                    }
                    fireError(error, message, count) {
                        this.errorEmitter.fire([
                            this.asError(error),
                            message,
                            count
                        ]);
                    }
                    get onClose() {
                        return this.closeEmitter.event;
                    }
                    fireClose() {
                        this.closeEmitter.fire(undefined);
                    }
                    asError(error) {
                        if (error instanceof Error) {
                            return error;
                        } else {
                            return new Error(`Writer received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
                        }
                    }
                    constructor(){
                        this.errorEmitter = new events_1.Emitter();
                        this.closeEmitter = new events_1.Emitter();
                    }
                }
                exports1.AbstractMessageWriter = AbstractMessageWriter;
                var ResolvedMessageWriterOptions;
                (function(ResolvedMessageWriterOptions) {
                    function fromOptions(options) {
                        if (options === undefined || typeof options === 'string') {
                            return {
                                charset: options !== null && options !== void 0 ? options : 'utf-8',
                                contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder
                            };
                        } else {
                            var _options_charset, _options_contentTypeEncoder;
                            return {
                                charset: (_options_charset = options.charset) !== null && _options_charset !== void 0 ? _options_charset : 'utf-8',
                                contentEncoder: options.contentEncoder,
                                contentTypeEncoder: (_options_contentTypeEncoder = options.contentTypeEncoder) !== null && _options_contentTypeEncoder !== void 0 ? _options_contentTypeEncoder : (0, ral_1.default)().applicationJson.encoder
                            };
                        }
                    }
                    ResolvedMessageWriterOptions.fromOptions = fromOptions;
                })(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
                class WriteableStreamMessageWriter extends AbstractMessageWriter {
                    async write(msg) {
                        return this.writeSemaphore.lock(async ()=>{
                            const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer)=>{
                                if (this.options.contentEncoder !== undefined) {
                                    return this.options.contentEncoder.encode(buffer);
                                } else {
                                    return buffer;
                                }
                            });
                            return payload.then((buffer)=>{
                                const headers = [];
                                headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                                headers.push(CRLF);
                                return this.doWrite(msg, headers, buffer);
                            }, (error)=>{
                                this.fireError(error);
                                throw error;
                            });
                        });
                    }
                    async doWrite(msg, headers, data) {
                        try {
                            await this.writable.write(headers.join(''), 'ascii');
                            return this.writable.write(data);
                        } catch (error) {
                            this.handleError(error, msg);
                            return Promise.reject(error);
                        }
                    }
                    handleError(error, msg) {
                        this.errorCount++;
                        this.fireError(error, msg, this.errorCount);
                    }
                    end() {
                        this.writable.end();
                    }
                    constructor(writable, options){
                        super();
                        this.writable = writable;
                        this.options = ResolvedMessageWriterOptions.fromOptions(options);
                        this.errorCount = 0;
                        this.writeSemaphore = new semaphore_1.Semaphore(1);
                        this.writable.onError((error)=>this.fireError(error));
                        this.writable.onClose(()=>this.fireClose());
                    }
                }
                exports1.WriteableStreamMessageWriter = WriteableStreamMessageWriter;
            /***/ },
            /***/ 7162: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_681997__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.Message = exports1.NotificationType9 = exports1.NotificationType8 = exports1.NotificationType7 = exports1.NotificationType6 = exports1.NotificationType5 = exports1.NotificationType4 = exports1.NotificationType3 = exports1.NotificationType2 = exports1.NotificationType1 = exports1.NotificationType0 = exports1.NotificationType = exports1.RequestType9 = exports1.RequestType8 = exports1.RequestType7 = exports1.RequestType6 = exports1.RequestType5 = exports1.RequestType4 = exports1.RequestType3 = exports1.RequestType2 = exports1.RequestType1 = exports1.RequestType = exports1.RequestType0 = exports1.AbstractMessageSignature = exports1.ParameterStructures = exports1.ResponseError = exports1.ErrorCodes = void 0;
                const is = __nested_webpack_require_681997__(6618);
                /**
 * Predefined error codes.
 */ var ErrorCodes;
                (function(ErrorCodes) {
                    // Defined by JSON RPC
                    ErrorCodes.ParseError = -32700;
                    ErrorCodes.InvalidRequest = -32600;
                    ErrorCodes.MethodNotFound = -32601;
                    ErrorCodes.InvalidParams = -32602;
                    ErrorCodes.InternalError = -32603;
                    /**
     * This is the start range of JSON RPC reserved error codes.
     * It doesn't denote a real error code. No application error codes should
     * be defined between the start and end range. For backwards
     * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
     * are left in the range.
     *
     * @since 3.16.0
    */ ErrorCodes.jsonrpcReservedErrorRangeStart = -32099;
                    /** @deprecated use  jsonrpcReservedErrorRangeStart */ ErrorCodes.serverErrorStart = -32099;
                    /**
     * An error occurred when write a message to the transport layer.
     */ ErrorCodes.MessageWriteError = -32099;
                    /**
     * An error occurred when reading a message from the transport layer.
     */ ErrorCodes.MessageReadError = -32098;
                    /**
     * The connection got disposed or lost and all pending responses got
     * rejected.
     */ ErrorCodes.PendingResponseRejected = -32097;
                    /**
     * The connection is inactive and a use of it failed.
     */ ErrorCodes.ConnectionInactive = -32096;
                    /**
     * Error code indicating that a server received a notification or
     * request before the server has received the `initialize` request.
     */ ErrorCodes.ServerNotInitialized = -32002;
                    ErrorCodes.UnknownErrorCode = -32001;
                    /**
     * This is the end range of JSON RPC reserved error codes.
     * It doesn't denote a real error code.
     *
     * @since 3.16.0
    */ ErrorCodes.jsonrpcReservedErrorRangeEnd = -32000;
                    /** @deprecated use  jsonrpcReservedErrorRangeEnd */ ErrorCodes.serverErrorEnd = -32000;
                })(ErrorCodes || (exports1.ErrorCodes = ErrorCodes = {}));
                /**
 * An error object return in a response in case a request
 * has failed.
 */ class ResponseError extends Error {
                    toJson() {
                        const result = {
                            code: this.code,
                            message: this.message
                        };
                        if (this.data !== undefined) {
                            result.data = this.data;
                        }
                        return result;
                    }
                    constructor(code, message, data){
                        super(message);
                        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
                        this.data = data;
                        Object.setPrototypeOf(this, ResponseError.prototype);
                    }
                }
                exports1.ResponseError = ResponseError;
                class ParameterStructures {
                    static is(value) {
                        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
                    }
                    toString() {
                        return this.kind;
                    }
                    constructor(kind){
                        this.kind = kind;
                    }
                }
                exports1.ParameterStructures = ParameterStructures;
                /**
 * The parameter structure is automatically inferred on the number of parameters
 * and the parameter type in case of a single param.
 */ ParameterStructures.auto = new ParameterStructures('auto');
                /**
 * Forces `byPosition` parameter structure. This is useful if you have a single
 * parameter which has a literal type.
 */ ParameterStructures.byPosition = new ParameterStructures('byPosition');
                /**
 * Forces `byName` parameter structure. This is only useful when having a single
 * parameter. The library will report errors if used with a different number of
 * parameters.
 */ ParameterStructures.byName = new ParameterStructures('byName');
                /**
 * An abstract implementation of a MessageType.
 */ class AbstractMessageSignature {
                    get parameterStructures() {
                        return ParameterStructures.auto;
                    }
                    constructor(method, numberOfParams){
                        this.method = method;
                        this.numberOfParams = numberOfParams;
                    }
                }
                exports1.AbstractMessageSignature = AbstractMessageSignature;
                /**
 * Classes to type request response pairs
 */ class RequestType0 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 0);
                    }
                }
                exports1.RequestType0 = RequestType0;
                class RequestType extends AbstractMessageSignature {
                    get parameterStructures() {
                        return this._parameterStructures;
                    }
                    constructor(method, _parameterStructures = ParameterStructures.auto){
                        super(method, 1);
                        this._parameterStructures = _parameterStructures;
                    }
                }
                exports1.RequestType = RequestType;
                class RequestType1 extends AbstractMessageSignature {
                    get parameterStructures() {
                        return this._parameterStructures;
                    }
                    constructor(method, _parameterStructures = ParameterStructures.auto){
                        super(method, 1);
                        this._parameterStructures = _parameterStructures;
                    }
                }
                exports1.RequestType1 = RequestType1;
                class RequestType2 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 2);
                    }
                }
                exports1.RequestType2 = RequestType2;
                class RequestType3 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 3);
                    }
                }
                exports1.RequestType3 = RequestType3;
                class RequestType4 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 4);
                    }
                }
                exports1.RequestType4 = RequestType4;
                class RequestType5 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 5);
                    }
                }
                exports1.RequestType5 = RequestType5;
                class RequestType6 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 6);
                    }
                }
                exports1.RequestType6 = RequestType6;
                class RequestType7 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 7);
                    }
                }
                exports1.RequestType7 = RequestType7;
                class RequestType8 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 8);
                    }
                }
                exports1.RequestType8 = RequestType8;
                class RequestType9 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 9);
                    }
                }
                exports1.RequestType9 = RequestType9;
                class NotificationType extends AbstractMessageSignature {
                    get parameterStructures() {
                        return this._parameterStructures;
                    }
                    constructor(method, _parameterStructures = ParameterStructures.auto){
                        super(method, 1);
                        this._parameterStructures = _parameterStructures;
                    }
                }
                exports1.NotificationType = NotificationType;
                class NotificationType0 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 0);
                    }
                }
                exports1.NotificationType0 = NotificationType0;
                class NotificationType1 extends AbstractMessageSignature {
                    get parameterStructures() {
                        return this._parameterStructures;
                    }
                    constructor(method, _parameterStructures = ParameterStructures.auto){
                        super(method, 1);
                        this._parameterStructures = _parameterStructures;
                    }
                }
                exports1.NotificationType1 = NotificationType1;
                class NotificationType2 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 2);
                    }
                }
                exports1.NotificationType2 = NotificationType2;
                class NotificationType3 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 3);
                    }
                }
                exports1.NotificationType3 = NotificationType3;
                class NotificationType4 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 4);
                    }
                }
                exports1.NotificationType4 = NotificationType4;
                class NotificationType5 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 5);
                    }
                }
                exports1.NotificationType5 = NotificationType5;
                class NotificationType6 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 6);
                    }
                }
                exports1.NotificationType6 = NotificationType6;
                class NotificationType7 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 7);
                    }
                }
                exports1.NotificationType7 = NotificationType7;
                class NotificationType8 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 8);
                    }
                }
                exports1.NotificationType8 = NotificationType8;
                class NotificationType9 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 9);
                    }
                }
                exports1.NotificationType9 = NotificationType9;
                var Message;
                (function(Message) {
                    /**
     * Tests if the given message is a request message
     */ function isRequest(message) {
                        const candidate = message;
                        return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
                    }
                    Message.isRequest = isRequest;
                    /**
     * Tests if the given message is a notification message
     */ function isNotification(message) {
                        const candidate = message;
                        return candidate && is.string(candidate.method) && message.id === void 0;
                    }
                    Message.isNotification = isNotification;
                    /**
     * Tests if the given message is a response message
     */ function isResponse(message) {
                        const candidate = message;
                        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
                    }
                    Message.isResponse = isResponse;
                })(Message || (exports1.Message = Message = {}));
            /***/ },
            /***/ 5091: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                let _ral;
                function RAL() {
                    if (_ral === undefined) {
                        throw new Error(`No runtime abstraction layer installed`);
                    }
                    return _ral;
                }
                (function(RAL) {
                    function install(ral) {
                        if (ral === undefined) {
                            throw new Error(`No runtime abstraction layer provided`);
                        }
                        _ral = ral;
                    }
                    RAL.install = install;
                })(RAL || (RAL = {}));
                exports1["default"] = RAL;
            /***/ },
            /***/ 418: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_697486__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.Semaphore = void 0;
                const ral_1 = __nested_webpack_require_697486__(5091);
                class Semaphore {
                    lock(thunk) {
                        return new Promise((resolve, reject)=>{
                            this._waiting.push({
                                thunk,
                                resolve,
                                reject
                            });
                            this.runNext();
                        });
                    }
                    get active() {
                        return this._active;
                    }
                    runNext() {
                        if (this._waiting.length === 0 || this._active === this._capacity) {
                            return;
                        }
                        (0, ral_1.default)().timer.setImmediate(()=>this.doRunNext());
                    }
                    doRunNext() {
                        if (this._waiting.length === 0 || this._active === this._capacity) {
                            return;
                        }
                        const next = this._waiting.shift();
                        this._active++;
                        if (this._active > this._capacity) {
                            throw new Error(`To many thunks active`);
                        }
                        try {
                            const result = next.thunk();
                            if (result instanceof Promise) {
                                result.then((value)=>{
                                    this._active--;
                                    next.resolve(value);
                                    this.runNext();
                                }, (err)=>{
                                    this._active--;
                                    next.reject(err);
                                    this.runNext();
                                });
                            } else {
                                this._active--;
                                next.resolve(result);
                                this.runNext();
                            }
                        } catch (err) {
                            this._active--;
                            next.reject(err);
                            this.runNext();
                        }
                    }
                    constructor(capacity = 1){
                        if (capacity <= 0) {
                            throw new Error('Capacity must be greater than 0');
                        }
                        this._capacity = capacity;
                        this._active = 0;
                        this._waiting = [];
                    }
                }
                exports1.Semaphore = Semaphore;
            /***/ },
            /***/ 3489: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_700929__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.SharedArrayReceiverStrategy = exports1.SharedArraySenderStrategy = void 0;
                const cancellation_1 = __nested_webpack_require_700929__(6957);
                var CancellationState;
                (function(CancellationState) {
                    CancellationState.Continue = 0;
                    CancellationState.Cancelled = 1;
                })(CancellationState || (CancellationState = {}));
                class SharedArraySenderStrategy {
                    enableCancellation(request) {
                        if (request.id === null) {
                            return;
                        }
                        const buffer = new SharedArrayBuffer(4);
                        const data = new Int32Array(buffer, 0, 1);
                        data[0] = CancellationState.Continue;
                        this.buffers.set(request.id, buffer);
                        request.$cancellationData = buffer;
                    }
                    async sendCancellation(_conn, id) {
                        const buffer = this.buffers.get(id);
                        if (buffer === undefined) {
                            return;
                        }
                        const data = new Int32Array(buffer, 0, 1);
                        Atomics.store(data, 0, CancellationState.Cancelled);
                    }
                    cleanup(id) {
                        this.buffers.delete(id);
                    }
                    dispose() {
                        this.buffers.clear();
                    }
                    constructor(){
                        this.buffers = new Map();
                    }
                }
                exports1.SharedArraySenderStrategy = SharedArraySenderStrategy;
                class SharedArrayBufferCancellationToken {
                    get isCancellationRequested() {
                        return Atomics.load(this.data, 0) === CancellationState.Cancelled;
                    }
                    get onCancellationRequested() {
                        throw new Error(`Cancellation over SharedArrayBuffer doesn't support cancellation events`);
                    }
                    constructor(buffer){
                        this.data = new Int32Array(buffer, 0, 1);
                    }
                }
                class SharedArrayBufferCancellationTokenSource {
                    cancel() {}
                    dispose() {}
                    constructor(buffer){
                        this.token = new SharedArrayBufferCancellationToken(buffer);
                    }
                }
                class SharedArrayReceiverStrategy {
                    createCancellationTokenSource(request) {
                        const buffer = request.$cancellationData;
                        if (buffer === undefined) {
                            return new cancellation_1.CancellationTokenSource();
                        }
                        return new SharedArrayBufferCancellationTokenSource(buffer);
                    }
                    constructor(){
                        this.kind = 'request';
                    }
                }
                exports1.SharedArrayReceiverStrategy = SharedArrayReceiverStrategy;
            /***/ },
            /***/ 5501: /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_704834__) {
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    var desc = Object.getOwnPropertyDescriptor(m, k);
                    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                        desc = {
                            enumerable: true,
                            get: function() {
                                return m[k];
                            }
                        };
                    }
                    Object.defineProperty(o, k2, desc);
                } : function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports1) {
                    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
                };
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.createProtocolConnection = void 0;
                const browser_1 = __nested_webpack_require_704834__(9208);
                __exportStar(__nested_webpack_require_704834__(9208), exports1);
                __exportStar(__nested_webpack_require_704834__(3147), exports1);
                function createProtocolConnection(reader, writer, logger, options) {
                    return (0, browser_1.createMessageConnection)(reader, writer, logger, options);
                }
                exports1.createProtocolConnection = createProtocolConnection;
            /***/ },
            /***/ 3147: /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_707023__) {
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    var desc = Object.getOwnPropertyDescriptor(m, k);
                    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                        desc = {
                            enumerable: true,
                            get: function() {
                                return m[k];
                            }
                        };
                    }
                    Object.defineProperty(o, k2, desc);
                } : function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports1) {
                    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
                };
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.LSPErrorCodes = exports1.createProtocolConnection = void 0;
                __exportStar(__nested_webpack_require_707023__(9110), exports1);
                __exportStar(__nested_webpack_require_707023__(2852), exports1);
                __exportStar(__nested_webpack_require_707023__(8431), exports1);
                __exportStar(__nested_webpack_require_707023__(1815), exports1);
                var connection_1 = __nested_webpack_require_707023__(291);
                Object.defineProperty(exports1, "createProtocolConnection", {
                    enumerable: true,
                    get: function() {
                        return connection_1.createProtocolConnection;
                    }
                });
                var LSPErrorCodes;
                (function(LSPErrorCodes) {
                    /**
    * This is the start range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */ LSPErrorCodes.lspReservedErrorRangeStart = -32899;
                    /**
     * A request failed but it was syntactically correct, e.g the
     * method name was known and the parameters were valid. The error
     * message should contain human readable information about why
     * the request failed.
     *
     * @since 3.17.0
     */ LSPErrorCodes.RequestFailed = -32803;
                    /**
     * The server cancelled the request. This error code should
     * only be used for requests that explicitly support being
     * server cancellable.
     *
     * @since 3.17.0
     */ LSPErrorCodes.ServerCancelled = -32802;
                    /**
     * The server detected that the content of a document got
     * modified outside normal conditions. A server should
     * NOT send this error code if it detects a content change
     * in it unprocessed messages. The result even computed
     * on an older state might still be useful for the client.
     *
     * If a client decides that a result is not of any use anymore
     * the client should cancel the request.
     */ LSPErrorCodes.ContentModified = -32801;
                    /**
     * The client has canceled a request and a server as detected
     * the cancel.
     */ LSPErrorCodes.RequestCancelled = -32800;
                    /**
    * This is the end range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */ LSPErrorCodes.lspReservedErrorRangeEnd = -32800;
                })(LSPErrorCodes || (exports1.LSPErrorCodes = LSPErrorCodes = {}));
            /***/ },
            /***/ 291: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_711163__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.createProtocolConnection = void 0;
                const vscode_jsonrpc_1 = __nested_webpack_require_711163__(9110);
                function createProtocolConnection(input, output, logger, options) {
                    if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
                        options = {
                            connectionStrategy: options
                        };
                    }
                    return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
                }
                exports1.createProtocolConnection = createProtocolConnection;
            /***/ },
            /***/ 8431: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_712400__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ProtocolNotificationType = exports1.ProtocolNotificationType0 = exports1.ProtocolRequestType = exports1.ProtocolRequestType0 = exports1.RegistrationType = exports1.MessageDirection = void 0;
                const vscode_jsonrpc_1 = __nested_webpack_require_712400__(9110);
                var MessageDirection;
                (function(MessageDirection) {
                    MessageDirection["clientToServer"] = "clientToServer";
                    MessageDirection["serverToClient"] = "serverToClient";
                    MessageDirection["both"] = "both";
                })(MessageDirection || (exports1.MessageDirection = MessageDirection = {}));
                class RegistrationType {
                    constructor(method){
                        this.method = method;
                    }
                }
                exports1.RegistrationType = RegistrationType;
                class ProtocolRequestType0 extends vscode_jsonrpc_1.RequestType0 {
                    constructor(method){
                        super(method);
                    }
                }
                exports1.ProtocolRequestType0 = ProtocolRequestType0;
                class ProtocolRequestType extends vscode_jsonrpc_1.RequestType {
                    constructor(method){
                        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
                    }
                }
                exports1.ProtocolRequestType = ProtocolRequestType;
                class ProtocolNotificationType0 extends vscode_jsonrpc_1.NotificationType0 {
                    constructor(method){
                        super(method);
                    }
                }
                exports1.ProtocolNotificationType0 = ProtocolNotificationType0;
                class ProtocolNotificationType extends vscode_jsonrpc_1.NotificationType {
                    constructor(method){
                        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
                    }
                }
                exports1.ProtocolNotificationType = ProtocolNotificationType;
            /***/ },
            /***/ 7602: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_715117__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.CallHierarchyOutgoingCallsRequest = exports1.CallHierarchyIncomingCallsRequest = exports1.CallHierarchyPrepareRequest = void 0;
                const messages_1 = __nested_webpack_require_715117__(8431);
                /**
 * A request to result a `CallHierarchyItem` in a document at a given position.
 * Can be used as an input to an incoming or outgoing call hierarchy.
 *
 * @since 3.16.0
 */ var CallHierarchyPrepareRequest;
                (function(CallHierarchyPrepareRequest) {
                    CallHierarchyPrepareRequest.method = 'textDocument/prepareCallHierarchy';
                    CallHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CallHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest.method);
                })(CallHierarchyPrepareRequest || (exports1.CallHierarchyPrepareRequest = CallHierarchyPrepareRequest = {}));
                /**
 * A request to resolve the incoming calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */ var CallHierarchyIncomingCallsRequest;
                (function(CallHierarchyIncomingCallsRequest) {
                    CallHierarchyIncomingCallsRequest.method = 'callHierarchy/incomingCalls';
                    CallHierarchyIncomingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CallHierarchyIncomingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest.method);
                })(CallHierarchyIncomingCallsRequest || (exports1.CallHierarchyIncomingCallsRequest = CallHierarchyIncomingCallsRequest = {}));
                /**
 * A request to resolve the outgoing calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */ var CallHierarchyOutgoingCallsRequest;
                (function(CallHierarchyOutgoingCallsRequest) {
                    CallHierarchyOutgoingCallsRequest.method = 'callHierarchy/outgoingCalls';
                    CallHierarchyOutgoingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CallHierarchyOutgoingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest.method);
                })(CallHierarchyOutgoingCallsRequest || (exports1.CallHierarchyOutgoingCallsRequest = CallHierarchyOutgoingCallsRequest = {}));
            /***/ },
            /***/ 3747: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_718121__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ColorPresentationRequest = exports1.DocumentColorRequest = void 0;
                const messages_1 = __nested_webpack_require_718121__(8431);
                /**
 * A request to list all color symbols found in a given text document. The request's
 * parameter is of type {@link DocumentColorParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */ var DocumentColorRequest;
                (function(DocumentColorRequest) {
                    DocumentColorRequest.method = 'textDocument/documentColor';
                    DocumentColorRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentColorRequest.type = new messages_1.ProtocolRequestType(DocumentColorRequest.method);
                })(DocumentColorRequest || (exports1.DocumentColorRequest = DocumentColorRequest = {}));
                /**
 * A request to list all presentation for a color. The request's
 * parameter is of type {@link ColorPresentationParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */ var ColorPresentationRequest;
                (function(ColorPresentationRequest) {
                    ColorPresentationRequest.method = 'textDocument/colorPresentation';
                    ColorPresentationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ColorPresentationRequest.type = new messages_1.ProtocolRequestType(ColorPresentationRequest.method);
                })(ColorPresentationRequest || (exports1.ColorPresentationRequest = ColorPresentationRequest = {}));
            /***/ },
            /***/ 7639: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_720406__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ConfigurationRequest = void 0;
                const messages_1 = __nested_webpack_require_720406__(8431);
                //---- Get Configuration request ----
                /**
 * The 'workspace/configuration' request is sent from the server to the client to fetch a certain
 * configuration setting.
 *
 * This pull model replaces the old push model were the client signaled configuration change via an
 * event. If the server still needs to react to configuration changes (since the server caches the
 * result of `workspace/configuration` requests) the server should register for an empty configuration
 * change event and empty the cache if such an event is received.
 */ var ConfigurationRequest;
                (function(ConfigurationRequest) {
                    ConfigurationRequest.method = 'workspace/configuration';
                    ConfigurationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    ConfigurationRequest.type = new messages_1.ProtocolRequestType(ConfigurationRequest.method);
                })(ConfigurationRequest || (exports1.ConfigurationRequest = ConfigurationRequest = {}));
            /***/ },
            /***/ 5581: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_722179__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.DeclarationRequest = void 0;
                const messages_1 = __nested_webpack_require_722179__(8431);
                // @ts-ignore: to avoid inlining LocationLink as dynamic import
                let __noDynamicImport;
                /**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPositionParams}
 * the response is of type {@link Declaration} or a typed array of {@link DeclarationLink}
 * or a Thenable that resolves to such.
 */ var DeclarationRequest;
                (function(DeclarationRequest) {
                    DeclarationRequest.method = 'textDocument/declaration';
                    DeclarationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DeclarationRequest.type = new messages_1.ProtocolRequestType(DeclarationRequest.method);
                })(DeclarationRequest || (exports1.DeclarationRequest = DeclarationRequest = {}));
            /***/ },
            /***/ 1494: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_723808__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.DiagnosticRefreshRequest = exports1.WorkspaceDiagnosticRequest = exports1.DocumentDiagnosticRequest = exports1.DocumentDiagnosticReportKind = exports1.DiagnosticServerCancellationData = void 0;
                const vscode_jsonrpc_1 = __nested_webpack_require_723808__(9110);
                const Is = __nested_webpack_require_723808__(8633);
                const messages_1 = __nested_webpack_require_723808__(8431);
                /**
 * @since 3.17.0
 */ var DiagnosticServerCancellationData;
                (function(DiagnosticServerCancellationData) {
                    function is(value) {
                        const candidate = value;
                        return candidate && Is.boolean(candidate.retriggerRequest);
                    }
                    DiagnosticServerCancellationData.is = is;
                })(DiagnosticServerCancellationData || (exports1.DiagnosticServerCancellationData = DiagnosticServerCancellationData = {}));
                /**
 * The document diagnostic report kinds.
 *
 * @since 3.17.0
 */ var DocumentDiagnosticReportKind;
                (function(DocumentDiagnosticReportKind) {
                    /**
     * A diagnostic report with a full
     * set of problems.
     */ DocumentDiagnosticReportKind.Full = 'full';
                    /**
     * A report indicating that the last
     * returned report is still accurate.
     */ DocumentDiagnosticReportKind.Unchanged = 'unchanged';
                })(DocumentDiagnosticReportKind || (exports1.DocumentDiagnosticReportKind = DocumentDiagnosticReportKind = {}));
                /**
 * The document diagnostic request definition.
 *
 * @since 3.17.0
 */ var DocumentDiagnosticRequest;
                (function(DocumentDiagnosticRequest) {
                    DocumentDiagnosticRequest.method = 'textDocument/diagnostic';
                    DocumentDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentDiagnosticRequest.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest.method);
                    DocumentDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
                })(DocumentDiagnosticRequest || (exports1.DocumentDiagnosticRequest = DocumentDiagnosticRequest = {}));
                /**
 * The workspace diagnostic request definition.
 *
 * @since 3.17.0
 */ var WorkspaceDiagnosticRequest;
                (function(WorkspaceDiagnosticRequest) {
                    WorkspaceDiagnosticRequest.method = 'workspace/diagnostic';
                    WorkspaceDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WorkspaceDiagnosticRequest.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest.method);
                    WorkspaceDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
                })(WorkspaceDiagnosticRequest || (exports1.WorkspaceDiagnosticRequest = WorkspaceDiagnosticRequest = {}));
                /**
 * The diagnostic refresh request definition.
 *
 * @since 3.17.0
 */ var DiagnosticRefreshRequest;
                (function(DiagnosticRefreshRequest) {
                    DiagnosticRefreshRequest.method = `workspace/diagnostic/refresh`;
                    DiagnosticRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);
                })(DiagnosticRefreshRequest || (exports1.DiagnosticRefreshRequest = DiagnosticRefreshRequest = {}));
            /***/ },
            /***/ 4781: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_728007__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.WillDeleteFilesRequest = exports1.DidDeleteFilesNotification = exports1.DidRenameFilesNotification = exports1.WillRenameFilesRequest = exports1.DidCreateFilesNotification = exports1.WillCreateFilesRequest = exports1.FileOperationPatternKind = void 0;
                const messages_1 = __nested_webpack_require_728007__(8431);
                /**
 * A pattern kind describing if a glob pattern matches a file a folder or
 * both.
 *
 * @since 3.16.0
 */ var FileOperationPatternKind;
                (function(FileOperationPatternKind) {
                    /**
     * The pattern matches a file only.
     */ FileOperationPatternKind.file = 'file';
                    /**
     * The pattern matches a folder only.
     */ FileOperationPatternKind.folder = 'folder';
                })(FileOperationPatternKind || (exports1.FileOperationPatternKind = FileOperationPatternKind = {}));
                /**
 * The will create files request is sent from the client to the server before files are actually
 * created as long as the creation is triggered from within the client.
 *
 * The request can return a `WorkspaceEdit` which will be applied to workspace before the
 * files are created. Hence the `WorkspaceEdit` can not manipulate the content of the file
 * to be created.
 *
 * @since 3.16.0
 */ var WillCreateFilesRequest;
                (function(WillCreateFilesRequest) {
                    WillCreateFilesRequest.method = 'workspace/willCreateFiles';
                    WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);
                })(WillCreateFilesRequest || (exports1.WillCreateFilesRequest = WillCreateFilesRequest = {}));
                /**
 * The did create files notification is sent from the client to the server when
 * files were created from within the client.
 *
 * @since 3.16.0
 */ var DidCreateFilesNotification;
                (function(DidCreateFilesNotification) {
                    DidCreateFilesNotification.method = 'workspace/didCreateFiles';
                    DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);
                })(DidCreateFilesNotification || (exports1.DidCreateFilesNotification = DidCreateFilesNotification = {}));
                /**
 * The will rename files request is sent from the client to the server before files are actually
 * renamed as long as the rename is triggered from within the client.
 *
 * @since 3.16.0
 */ var WillRenameFilesRequest;
                (function(WillRenameFilesRequest) {
                    WillRenameFilesRequest.method = 'workspace/willRenameFiles';
                    WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);
                })(WillRenameFilesRequest || (exports1.WillRenameFilesRequest = WillRenameFilesRequest = {}));
                /**
 * The did rename files notification is sent from the client to the server when
 * files were renamed from within the client.
 *
 * @since 3.16.0
 */ var DidRenameFilesNotification;
                (function(DidRenameFilesNotification) {
                    DidRenameFilesNotification.method = 'workspace/didRenameFiles';
                    DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);
                })(DidRenameFilesNotification || (exports1.DidRenameFilesNotification = DidRenameFilesNotification = {}));
                /**
 * The will delete files request is sent from the client to the server before files are actually
 * deleted as long as the deletion is triggered from within the client.
 *
 * @since 3.16.0
 */ var DidDeleteFilesNotification;
                (function(DidDeleteFilesNotification) {
                    DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';
                    DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);
                })(DidDeleteFilesNotification || (exports1.DidDeleteFilesNotification = DidDeleteFilesNotification = {}));
                /**
 * The did delete files notification is sent from the client to the server when
 * files were deleted from within the client.
 *
 * @since 3.16.0
 */ var WillDeleteFilesRequest;
                (function(WillDeleteFilesRequest) {
                    WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';
                    WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);
                })(WillDeleteFilesRequest || (exports1.WillDeleteFilesRequest = WillDeleteFilesRequest = {}));
            /***/ },
            /***/ 1203: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_733949__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.FoldingRangeRefreshRequest = exports1.FoldingRangeRequest = void 0;
                const messages_1 = __nested_webpack_require_733949__(8431);
                /**
 * A request to provide folding ranges in a document. The request's
 * parameter is of type {@link FoldingRangeParams}, the
 * response is of type {@link FoldingRangeList} or a Thenable
 * that resolves to such.
 */ var FoldingRangeRequest;
                (function(FoldingRangeRequest) {
                    FoldingRangeRequest.method = 'textDocument/foldingRange';
                    FoldingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    FoldingRangeRequest.type = new messages_1.ProtocolRequestType(FoldingRangeRequest.method);
                })(FoldingRangeRequest || (exports1.FoldingRangeRequest = FoldingRangeRequest = {}));
                /**
 * @since 3.18.0
 * @proposed
 */ var FoldingRangeRefreshRequest;
                (function(FoldingRangeRefreshRequest) {
                    FoldingRangeRefreshRequest.method = `workspace/foldingRange/refresh`;
                    FoldingRangeRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    FoldingRangeRefreshRequest.type = new messages_1.ProtocolRequestType0(FoldingRangeRefreshRequest.method);
                })(FoldingRangeRefreshRequest || (exports1.FoldingRangeRefreshRequest = FoldingRangeRefreshRequest = {}));
            /***/ },
            /***/ 7287: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_736008__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ImplementationRequest = void 0;
                const messages_1 = __nested_webpack_require_736008__(8431);
                // @ts-ignore: to avoid inlining LocationLink as dynamic import
                let __noDynamicImport;
                /**
 * A request to resolve the implementation locations of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPositionParams}
 * the response is of type {@link Definition} or a Thenable that resolves to such.
 */ var ImplementationRequest;
                (function(ImplementationRequest) {
                    ImplementationRequest.method = 'textDocument/implementation';
                    ImplementationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ImplementationRequest.type = new messages_1.ProtocolRequestType(ImplementationRequest.method);
                })(ImplementationRequest || (exports1.ImplementationRequest = ImplementationRequest = {}));
            /***/ },
            /***/ 9383: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_737621__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.InlayHintRefreshRequest = exports1.InlayHintResolveRequest = exports1.InlayHintRequest = void 0;
                const messages_1 = __nested_webpack_require_737621__(8431);
                /**
 * A request to provide inlay hints in a document. The request's parameter is of
 * type {@link InlayHintsParams}, the response is of type
 * {@link InlayHint InlayHint[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */ var InlayHintRequest;
                (function(InlayHintRequest) {
                    InlayHintRequest.method = 'textDocument/inlayHint';
                    InlayHintRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InlayHintRequest.type = new messages_1.ProtocolRequestType(InlayHintRequest.method);
                })(InlayHintRequest || (exports1.InlayHintRequest = InlayHintRequest = {}));
                /**
 * A request to resolve additional properties for an inlay hint.
 * The request's parameter is of type {@link InlayHint}, the response is
 * of type {@link InlayHint} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */ var InlayHintResolveRequest;
                (function(InlayHintResolveRequest) {
                    InlayHintResolveRequest.method = 'inlayHint/resolve';
                    InlayHintResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InlayHintResolveRequest.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest.method);
                })(InlayHintResolveRequest || (exports1.InlayHintResolveRequest = InlayHintResolveRequest = {}));
                /**
 * @since 3.17.0
 */ var InlayHintRefreshRequest;
                (function(InlayHintRefreshRequest) {
                    InlayHintRefreshRequest.method = `workspace/inlayHint/refresh`;
                    InlayHintRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    InlayHintRefreshRequest.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest.method);
                })(InlayHintRefreshRequest || (exports1.InlayHintRefreshRequest = InlayHintRefreshRequest = {}));
            /***/ },
            /***/ 2322: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_740397__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.InlineCompletionRequest = void 0;
                const messages_1 = __nested_webpack_require_740397__(8431);
                /**
 * A request to provide inline completions in a document. The request's parameter is of
 * type {@link InlineCompletionParams}, the response is of type
 * {@link InlineCompletion InlineCompletion[]} or a Thenable that resolves to such.
 *
 * @since 3.18.0
 * @proposed
 */ var InlineCompletionRequest;
                (function(InlineCompletionRequest) {
                    InlineCompletionRequest.method = 'textDocument/inlineCompletion';
                    InlineCompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InlineCompletionRequest.type = new messages_1.ProtocolRequestType(InlineCompletionRequest.method);
                })(InlineCompletionRequest || (exports1.InlineCompletionRequest = InlineCompletionRequest = {}));
            /***/ },
            /***/ 3491: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_741928__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.InlineValueRefreshRequest = exports1.InlineValueRequest = void 0;
                const messages_1 = __nested_webpack_require_741928__(8431);
                /**
 * A request to provide inline values in a document. The request's parameter is of
 * type {@link InlineValueParams}, the response is of type
 * {@link InlineValue InlineValue[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */ var InlineValueRequest;
                (function(InlineValueRequest) {
                    InlineValueRequest.method = 'textDocument/inlineValue';
                    InlineValueRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InlineValueRequest.type = new messages_1.ProtocolRequestType(InlineValueRequest.method);
                })(InlineValueRequest || (exports1.InlineValueRequest = InlineValueRequest = {}));
                /**
 * @since 3.17.0
 */ var InlineValueRefreshRequest;
                (function(InlineValueRefreshRequest) {
                    InlineValueRefreshRequest.method = `workspace/inlineValue/refresh`;
                    InlineValueRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    InlineValueRefreshRequest.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest.method);
                })(InlineValueRefreshRequest || (exports1.InlineValueRefreshRequest = InlineValueRefreshRequest = {}));
            /***/ },
            /***/ 1815: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_743976__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.WorkspaceSymbolRequest = exports1.CodeActionResolveRequest = exports1.CodeActionRequest = exports1.DocumentSymbolRequest = exports1.DocumentHighlightRequest = exports1.ReferencesRequest = exports1.DefinitionRequest = exports1.SignatureHelpRequest = exports1.SignatureHelpTriggerKind = exports1.HoverRequest = exports1.CompletionResolveRequest = exports1.CompletionRequest = exports1.CompletionTriggerKind = exports1.PublishDiagnosticsNotification = exports1.WatchKind = exports1.RelativePattern = exports1.FileChangeType = exports1.DidChangeWatchedFilesNotification = exports1.WillSaveTextDocumentWaitUntilRequest = exports1.WillSaveTextDocumentNotification = exports1.TextDocumentSaveReason = exports1.DidSaveTextDocumentNotification = exports1.DidCloseTextDocumentNotification = exports1.DidChangeTextDocumentNotification = exports1.TextDocumentContentChangeEvent = exports1.DidOpenTextDocumentNotification = exports1.TextDocumentSyncKind = exports1.TelemetryEventNotification = exports1.LogMessageNotification = exports1.ShowMessageRequest = exports1.ShowMessageNotification = exports1.MessageType = exports1.DidChangeConfigurationNotification = exports1.ExitNotification = exports1.ShutdownRequest = exports1.InitializedNotification = exports1.InitializeErrorCodes = exports1.InitializeRequest = exports1.WorkDoneProgressOptions = exports1.TextDocumentRegistrationOptions = exports1.StaticRegistrationOptions = exports1.PositionEncodingKind = exports1.FailureHandlingKind = exports1.ResourceOperationKind = exports1.UnregistrationRequest = exports1.RegistrationRequest = exports1.DocumentSelector = exports1.NotebookCellTextDocumentFilter = exports1.NotebookDocumentFilter = exports1.TextDocumentFilter = void 0;
                exports1.MonikerRequest = exports1.MonikerKind = exports1.UniquenessLevel = exports1.WillDeleteFilesRequest = exports1.DidDeleteFilesNotification = exports1.WillRenameFilesRequest = exports1.DidRenameFilesNotification = exports1.WillCreateFilesRequest = exports1.DidCreateFilesNotification = exports1.FileOperationPatternKind = exports1.LinkedEditingRangeRequest = exports1.ShowDocumentRequest = exports1.SemanticTokensRegistrationType = exports1.SemanticTokensRefreshRequest = exports1.SemanticTokensRangeRequest = exports1.SemanticTokensDeltaRequest = exports1.SemanticTokensRequest = exports1.TokenFormat = exports1.CallHierarchyPrepareRequest = exports1.CallHierarchyOutgoingCallsRequest = exports1.CallHierarchyIncomingCallsRequest = exports1.WorkDoneProgressCancelNotification = exports1.WorkDoneProgressCreateRequest = exports1.WorkDoneProgress = exports1.SelectionRangeRequest = exports1.DeclarationRequest = exports1.FoldingRangeRefreshRequest = exports1.FoldingRangeRequest = exports1.ColorPresentationRequest = exports1.DocumentColorRequest = exports1.ConfigurationRequest = exports1.DidChangeWorkspaceFoldersNotification = exports1.WorkspaceFoldersRequest = exports1.TypeDefinitionRequest = exports1.ImplementationRequest = exports1.ApplyWorkspaceEditRequest = exports1.ExecuteCommandRequest = exports1.PrepareRenameRequest = exports1.RenameRequest = exports1.PrepareSupportDefaultBehavior = exports1.DocumentOnTypeFormattingRequest = exports1.DocumentRangesFormattingRequest = exports1.DocumentRangeFormattingRequest = exports1.DocumentFormattingRequest = exports1.DocumentLinkResolveRequest = exports1.DocumentLinkRequest = exports1.CodeLensRefreshRequest = exports1.CodeLensResolveRequest = exports1.CodeLensRequest = exports1.WorkspaceSymbolResolveRequest = void 0;
                exports1.InlineCompletionRequest = exports1.DidCloseNotebookDocumentNotification = exports1.DidSaveNotebookDocumentNotification = exports1.DidChangeNotebookDocumentNotification = exports1.NotebookCellArrayChange = exports1.DidOpenNotebookDocumentNotification = exports1.NotebookDocumentSyncRegistrationType = exports1.NotebookDocument = exports1.NotebookCell = exports1.ExecutionSummary = exports1.NotebookCellKind = exports1.DiagnosticRefreshRequest = exports1.WorkspaceDiagnosticRequest = exports1.DocumentDiagnosticRequest = exports1.DocumentDiagnosticReportKind = exports1.DiagnosticServerCancellationData = exports1.InlayHintRefreshRequest = exports1.InlayHintResolveRequest = exports1.InlayHintRequest = exports1.InlineValueRefreshRequest = exports1.InlineValueRequest = exports1.TypeHierarchySupertypesRequest = exports1.TypeHierarchySubtypesRequest = exports1.TypeHierarchyPrepareRequest = void 0;
                const messages_1 = __nested_webpack_require_743976__(8431);
                const vscode_languageserver_types_1 = __nested_webpack_require_743976__(2852);
                const Is = __nested_webpack_require_743976__(8633);
                const protocol_implementation_1 = __nested_webpack_require_743976__(7287);
                Object.defineProperty(exports1, "ImplementationRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_implementation_1.ImplementationRequest;
                    }
                });
                const protocol_typeDefinition_1 = __nested_webpack_require_743976__(9264);
                Object.defineProperty(exports1, "TypeDefinitionRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_typeDefinition_1.TypeDefinitionRequest;
                    }
                });
                const protocol_workspaceFolder_1 = __nested_webpack_require_743976__(6860);
                Object.defineProperty(exports1, "WorkspaceFoldersRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_workspaceFolder_1.WorkspaceFoldersRequest;
                    }
                });
                Object.defineProperty(exports1, "DidChangeWorkspaceFoldersNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification;
                    }
                });
                const protocol_configuration_1 = __nested_webpack_require_743976__(7639);
                Object.defineProperty(exports1, "ConfigurationRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_configuration_1.ConfigurationRequest;
                    }
                });
                const protocol_colorProvider_1 = __nested_webpack_require_743976__(3747);
                Object.defineProperty(exports1, "DocumentColorRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_colorProvider_1.DocumentColorRequest;
                    }
                });
                Object.defineProperty(exports1, "ColorPresentationRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_colorProvider_1.ColorPresentationRequest;
                    }
                });
                const protocol_foldingRange_1 = __nested_webpack_require_743976__(1203);
                Object.defineProperty(exports1, "FoldingRangeRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_foldingRange_1.FoldingRangeRequest;
                    }
                });
                Object.defineProperty(exports1, "FoldingRangeRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_foldingRange_1.FoldingRangeRefreshRequest;
                    }
                });
                const protocol_declaration_1 = __nested_webpack_require_743976__(5581);
                Object.defineProperty(exports1, "DeclarationRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_declaration_1.DeclarationRequest;
                    }
                });
                const protocol_selectionRange_1 = __nested_webpack_require_743976__(1530);
                Object.defineProperty(exports1, "SelectionRangeRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_selectionRange_1.SelectionRangeRequest;
                    }
                });
                const protocol_progress_1 = __nested_webpack_require_743976__(4166);
                Object.defineProperty(exports1, "WorkDoneProgress", {
                    enumerable: true,
                    get: function() {
                        return protocol_progress_1.WorkDoneProgress;
                    }
                });
                Object.defineProperty(exports1, "WorkDoneProgressCreateRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_progress_1.WorkDoneProgressCreateRequest;
                    }
                });
                Object.defineProperty(exports1, "WorkDoneProgressCancelNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_progress_1.WorkDoneProgressCancelNotification;
                    }
                });
                const protocol_callHierarchy_1 = __nested_webpack_require_743976__(7602);
                Object.defineProperty(exports1, "CallHierarchyIncomingCallsRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest;
                    }
                });
                Object.defineProperty(exports1, "CallHierarchyOutgoingCallsRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest;
                    }
                });
                Object.defineProperty(exports1, "CallHierarchyPrepareRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_callHierarchy_1.CallHierarchyPrepareRequest;
                    }
                });
                const protocol_semanticTokens_1 = __nested_webpack_require_743976__(2067);
                Object.defineProperty(exports1, "TokenFormat", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.TokenFormat;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensRequest;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensDeltaRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensDeltaRequest;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensRangeRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensRangeRequest;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensRefreshRequest;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensRegistrationType", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensRegistrationType;
                    }
                });
                const protocol_showDocument_1 = __nested_webpack_require_743976__(4333);
                Object.defineProperty(exports1, "ShowDocumentRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_showDocument_1.ShowDocumentRequest;
                    }
                });
                const protocol_linkedEditingRange_1 = __nested_webpack_require_743976__(2249);
                Object.defineProperty(exports1, "LinkedEditingRangeRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_linkedEditingRange_1.LinkedEditingRangeRequest;
                    }
                });
                const protocol_fileOperations_1 = __nested_webpack_require_743976__(4781);
                Object.defineProperty(exports1, "FileOperationPatternKind", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.FileOperationPatternKind;
                    }
                });
                Object.defineProperty(exports1, "DidCreateFilesNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.DidCreateFilesNotification;
                    }
                });
                Object.defineProperty(exports1, "WillCreateFilesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.WillCreateFilesRequest;
                    }
                });
                Object.defineProperty(exports1, "DidRenameFilesNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.DidRenameFilesNotification;
                    }
                });
                Object.defineProperty(exports1, "WillRenameFilesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.WillRenameFilesRequest;
                    }
                });
                Object.defineProperty(exports1, "DidDeleteFilesNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.DidDeleteFilesNotification;
                    }
                });
                Object.defineProperty(exports1, "WillDeleteFilesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.WillDeleteFilesRequest;
                    }
                });
                const protocol_moniker_1 = __nested_webpack_require_743976__(7684);
                Object.defineProperty(exports1, "UniquenessLevel", {
                    enumerable: true,
                    get: function() {
                        return protocol_moniker_1.UniquenessLevel;
                    }
                });
                Object.defineProperty(exports1, "MonikerKind", {
                    enumerable: true,
                    get: function() {
                        return protocol_moniker_1.MonikerKind;
                    }
                });
                Object.defineProperty(exports1, "MonikerRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_moniker_1.MonikerRequest;
                    }
                });
                const protocol_typeHierarchy_1 = __nested_webpack_require_743976__(7062);
                Object.defineProperty(exports1, "TypeHierarchyPrepareRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest;
                    }
                });
                Object.defineProperty(exports1, "TypeHierarchySubtypesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest;
                    }
                });
                Object.defineProperty(exports1, "TypeHierarchySupertypesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest;
                    }
                });
                const protocol_inlineValue_1 = __nested_webpack_require_743976__(3491);
                Object.defineProperty(exports1, "InlineValueRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlineValue_1.InlineValueRequest;
                    }
                });
                Object.defineProperty(exports1, "InlineValueRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlineValue_1.InlineValueRefreshRequest;
                    }
                });
                const protocol_inlayHint_1 = __nested_webpack_require_743976__(9383);
                Object.defineProperty(exports1, "InlayHintRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlayHint_1.InlayHintRequest;
                    }
                });
                Object.defineProperty(exports1, "InlayHintResolveRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlayHint_1.InlayHintResolveRequest;
                    }
                });
                Object.defineProperty(exports1, "InlayHintRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlayHint_1.InlayHintRefreshRequest;
                    }
                });
                const protocol_diagnostic_1 = __nested_webpack_require_743976__(1494);
                Object.defineProperty(exports1, "DiagnosticServerCancellationData", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.DiagnosticServerCancellationData;
                    }
                });
                Object.defineProperty(exports1, "DocumentDiagnosticReportKind", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.DocumentDiagnosticReportKind;
                    }
                });
                Object.defineProperty(exports1, "DocumentDiagnosticRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.DocumentDiagnosticRequest;
                    }
                });
                Object.defineProperty(exports1, "WorkspaceDiagnosticRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.WorkspaceDiagnosticRequest;
                    }
                });
                Object.defineProperty(exports1, "DiagnosticRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.DiagnosticRefreshRequest;
                    }
                });
                const protocol_notebook_1 = __nested_webpack_require_743976__(4792);
                Object.defineProperty(exports1, "NotebookCellKind", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookCellKind;
                    }
                });
                Object.defineProperty(exports1, "ExecutionSummary", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.ExecutionSummary;
                    }
                });
                Object.defineProperty(exports1, "NotebookCell", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookCell;
                    }
                });
                Object.defineProperty(exports1, "NotebookDocument", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookDocument;
                    }
                });
                Object.defineProperty(exports1, "NotebookDocumentSyncRegistrationType", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookDocumentSyncRegistrationType;
                    }
                });
                Object.defineProperty(exports1, "DidOpenNotebookDocumentNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.DidOpenNotebookDocumentNotification;
                    }
                });
                Object.defineProperty(exports1, "NotebookCellArrayChange", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookCellArrayChange;
                    }
                });
                Object.defineProperty(exports1, "DidChangeNotebookDocumentNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.DidChangeNotebookDocumentNotification;
                    }
                });
                Object.defineProperty(exports1, "DidSaveNotebookDocumentNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.DidSaveNotebookDocumentNotification;
                    }
                });
                Object.defineProperty(exports1, "DidCloseNotebookDocumentNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.DidCloseNotebookDocumentNotification;
                    }
                });
                const protocol_inlineCompletion_1 = __nested_webpack_require_743976__(2322);
                Object.defineProperty(exports1, "InlineCompletionRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlineCompletion_1.InlineCompletionRequest;
                    }
                });
                // @ts-ignore: to avoid inlining LocationLink as dynamic import
                let __noDynamicImport;
                /**
 * The TextDocumentFilter namespace provides helper functions to work with
 * {@link TextDocumentFilter} literals.
 *
 * @since 3.17.0
 */ var TextDocumentFilter;
                (function(TextDocumentFilter) {
                    function is(value) {
                        const candidate = value;
                        return Is.string(candidate) || Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);
                    }
                    TextDocumentFilter.is = is;
                })(TextDocumentFilter || (exports1.TextDocumentFilter = TextDocumentFilter = {}));
                /**
 * The NotebookDocumentFilter namespace provides helper functions to work with
 * {@link NotebookDocumentFilter} literals.
 *
 * @since 3.17.0
 */ var NotebookDocumentFilter;
                (function(NotebookDocumentFilter) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
                    }
                    NotebookDocumentFilter.is = is;
                })(NotebookDocumentFilter || (exports1.NotebookDocumentFilter = NotebookDocumentFilter = {}));
                /**
 * The NotebookCellTextDocumentFilter namespace provides helper functions to work with
 * {@link NotebookCellTextDocumentFilter} literals.
 *
 * @since 3.17.0
 */ var NotebookCellTextDocumentFilter;
                (function(NotebookCellTextDocumentFilter) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook)) && (candidate.language === undefined || Is.string(candidate.language));
                    }
                    NotebookCellTextDocumentFilter.is = is;
                })(NotebookCellTextDocumentFilter || (exports1.NotebookCellTextDocumentFilter = NotebookCellTextDocumentFilter = {}));
                /**
 * The DocumentSelector namespace provides helper functions to work with
 * {@link DocumentSelector}s.
 */ var DocumentSelector;
                (function(DocumentSelector) {
                    function is(value) {
                        if (!Array.isArray(value)) {
                            return false;
                        }
                        for (let elem of value){
                            if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
                                return false;
                            }
                        }
                        return true;
                    }
                    DocumentSelector.is = is;
                })(DocumentSelector || (exports1.DocumentSelector = DocumentSelector = {}));
                /**
 * The `client/registerCapability` request is sent from the server to the client to register a new capability
 * handler on the client side.
 */ var RegistrationRequest;
                (function(RegistrationRequest) {
                    RegistrationRequest.method = 'client/registerCapability';
                    RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);
                })(RegistrationRequest || (exports1.RegistrationRequest = RegistrationRequest = {}));
                /**
 * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
 * handler on the client side.
 */ var UnregistrationRequest;
                (function(UnregistrationRequest) {
                    UnregistrationRequest.method = 'client/unregisterCapability';
                    UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);
                })(UnregistrationRequest || (exports1.UnregistrationRequest = UnregistrationRequest = {}));
                var ResourceOperationKind;
                (function(ResourceOperationKind) {
                    /**
     * Supports creating new files and folders.
     */ ResourceOperationKind.Create = 'create';
                    /**
     * Supports renaming existing files and folders.
     */ ResourceOperationKind.Rename = 'rename';
                    /**
     * Supports deleting existing files and folders.
     */ ResourceOperationKind.Delete = 'delete';
                })(ResourceOperationKind || (exports1.ResourceOperationKind = ResourceOperationKind = {}));
                var FailureHandlingKind;
                (function(FailureHandlingKind) {
                    /**
     * Applying the workspace change is simply aborted if one of the changes provided
     * fails. All operations executed before the failing operation stay executed.
     */ FailureHandlingKind.Abort = 'abort';
                    /**
     * All operations are executed transactional. That means they either all
     * succeed or no changes at all are applied to the workspace.
     */ FailureHandlingKind.Transactional = 'transactional';
                    /**
     * If the workspace edit contains only textual file changes they are executed transactional.
     * If resource changes (create, rename or delete file) are part of the change the failure
     * handling strategy is abort.
     */ FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';
                    /**
     * The client tries to undo the operations already executed. But there is no
     * guarantee that this is succeeding.
     */ FailureHandlingKind.Undo = 'undo';
                })(FailureHandlingKind || (exports1.FailureHandlingKind = FailureHandlingKind = {}));
                /**
 * A set of predefined position encoding kinds.
 *
 * @since 3.17.0
 */ var PositionEncodingKind;
                (function(PositionEncodingKind) {
                    /**
     * Character offsets count UTF-8 code units (e.g. bytes).
     */ PositionEncodingKind.UTF8 = 'utf-8';
                    /**
     * Character offsets count UTF-16 code units.
     *
     * This is the default and must always be supported
     * by servers
     */ PositionEncodingKind.UTF16 = 'utf-16';
                    /**
     * Character offsets count UTF-32 code units.
     *
     * Implementation note: these are the same as Unicode codepoints,
     * so this `PositionEncodingKind` may also be used for an
     * encoding-agnostic representation of character offsets.
     */ PositionEncodingKind.UTF32 = 'utf-32';
                })(PositionEncodingKind || (exports1.PositionEncodingKind = PositionEncodingKind = {}));
                /**
 * The StaticRegistrationOptions namespace provides helper functions to work with
 * {@link StaticRegistrationOptions} literals.
 */ var StaticRegistrationOptions;
                (function(StaticRegistrationOptions) {
                    function hasId(value) {
                        const candidate = value;
                        return candidate && Is.string(candidate.id) && candidate.id.length > 0;
                    }
                    StaticRegistrationOptions.hasId = hasId;
                })(StaticRegistrationOptions || (exports1.StaticRegistrationOptions = StaticRegistrationOptions = {}));
                /**
 * The TextDocumentRegistrationOptions namespace provides helper functions to work with
 * {@link TextDocumentRegistrationOptions} literals.
 */ var TextDocumentRegistrationOptions;
                (function(TextDocumentRegistrationOptions) {
                    function is(value) {
                        const candidate = value;
                        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
                    }
                    TextDocumentRegistrationOptions.is = is;
                })(TextDocumentRegistrationOptions || (exports1.TextDocumentRegistrationOptions = TextDocumentRegistrationOptions = {}));
                /**
 * The WorkDoneProgressOptions namespace provides helper functions to work with
 * {@link WorkDoneProgressOptions} literals.
 */ var WorkDoneProgressOptions;
                (function(WorkDoneProgressOptions) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));
                    }
                    WorkDoneProgressOptions.is = is;
                    function hasWorkDoneProgress(value) {
                        const candidate = value;
                        return candidate && Is.boolean(candidate.workDoneProgress);
                    }
                    WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;
                })(WorkDoneProgressOptions || (exports1.WorkDoneProgressOptions = WorkDoneProgressOptions = {}));
                /**
 * The initialize request is sent from the client to the server.
 * It is sent once as the request after starting up the server.
 * The requests parameter is of type {@link InitializeParams}
 * the response if of type {@link InitializeResult} of a Thenable that
 * resolves to such.
 */ var InitializeRequest;
                (function(InitializeRequest) {
                    InitializeRequest.method = 'initialize';
                    InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);
                })(InitializeRequest || (exports1.InitializeRequest = InitializeRequest = {}));
                /**
 * Known error codes for an `InitializeErrorCodes`;
 */ var InitializeErrorCodes;
                (function(InitializeErrorCodes) {
                    /**
     * If the protocol version provided by the client can't be handled by the server.
     *
     * @deprecated This initialize error got replaced by client capabilities. There is
     * no version handshake in version 3.0x
     */ InitializeErrorCodes.unknownProtocolVersion = 1;
                })(InitializeErrorCodes || (exports1.InitializeErrorCodes = InitializeErrorCodes = {}));
                /**
 * The initialized notification is sent from the client to the
 * server after the client is fully initialized and the server
 * is allowed to send requests from the server to the client.
 */ var InitializedNotification;
                (function(InitializedNotification) {
                    InitializedNotification.method = 'initialized';
                    InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);
                })(InitializedNotification || (exports1.InitializedNotification = InitializedNotification = {}));
                //---- Shutdown Method ----
                /**
 * A shutdown request is sent from the client to the server.
 * It is sent once when the client decides to shutdown the
 * server. The only notification that is sent after a shutdown request
 * is the exit event.
 */ var ShutdownRequest;
                (function(ShutdownRequest) {
                    ShutdownRequest.method = 'shutdown';
                    ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);
                })(ShutdownRequest || (exports1.ShutdownRequest = ShutdownRequest = {}));
                //---- Exit Notification ----
                /**
 * The exit event is sent from the client to the server to
 * ask the server to exit its process.
 */ var ExitNotification;
                (function(ExitNotification) {
                    ExitNotification.method = 'exit';
                    ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);
                })(ExitNotification || (exports1.ExitNotification = ExitNotification = {}));
                /**
 * The configuration change notification is sent from the client to the server
 * when the client's configuration has changed. The notification contains
 * the changed configuration as defined by the language client.
 */ var DidChangeConfigurationNotification;
                (function(DidChangeConfigurationNotification) {
                    DidChangeConfigurationNotification.method = 'workspace/didChangeConfiguration';
                    DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);
                })(DidChangeConfigurationNotification || (exports1.DidChangeConfigurationNotification = DidChangeConfigurationNotification = {}));
                //---- Message show and log notifications ----
                /**
 * The message type
 */ var MessageType;
                (function(MessageType) {
                    /**
     * An error message.
     */ MessageType.Error = 1;
                    /**
     * A warning message.
     */ MessageType.Warning = 2;
                    /**
     * An information message.
     */ MessageType.Info = 3;
                    /**
     * A log message.
     */ MessageType.Log = 4;
                    /**
     * A debug message.
     *
     * @since 3.18.0
     */ MessageType.Debug = 5;
                })(MessageType || (exports1.MessageType = MessageType = {}));
                /**
 * The show message notification is sent from a server to a client to ask
 * the client to display a particular message in the user interface.
 */ var ShowMessageNotification;
                (function(ShowMessageNotification) {
                    ShowMessageNotification.method = 'window/showMessage';
                    ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
                    ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);
                })(ShowMessageNotification || (exports1.ShowMessageNotification = ShowMessageNotification = {}));
                /**
 * The show message request is sent from the server to the client to show a message
 * and a set of options actions to the user.
 */ var ShowMessageRequest;
                (function(ShowMessageRequest) {
                    ShowMessageRequest.method = 'window/showMessageRequest';
                    ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);
                })(ShowMessageRequest || (exports1.ShowMessageRequest = ShowMessageRequest = {}));
                /**
 * The log message notification is sent from the server to the client to ask
 * the client to log a particular message.
 */ var LogMessageNotification;
                (function(LogMessageNotification) {
                    LogMessageNotification.method = 'window/logMessage';
                    LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
                    LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);
                })(LogMessageNotification || (exports1.LogMessageNotification = LogMessageNotification = {}));
                //---- Telemetry notification
                /**
 * The telemetry event notification is sent from the server to the client to ask
 * the client to log telemetry data.
 */ var TelemetryEventNotification;
                (function(TelemetryEventNotification) {
                    TelemetryEventNotification.method = 'telemetry/event';
                    TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;
                    TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);
                })(TelemetryEventNotification || (exports1.TelemetryEventNotification = TelemetryEventNotification = {}));
                /**
 * Defines how the host (editor) should sync
 * document changes to the language server.
 */ var TextDocumentSyncKind;
                (function(TextDocumentSyncKind) {
                    /**
     * Documents should not be synced at all.
     */ TextDocumentSyncKind.None = 0;
                    /**
     * Documents are synced by always sending the full content
     * of the document.
     */ TextDocumentSyncKind.Full = 1;
                    /**
     * Documents are synced by sending the full content on open.
     * After that only incremental updates to the document are
     * send.
     */ TextDocumentSyncKind.Incremental = 2;
                })(TextDocumentSyncKind || (exports1.TextDocumentSyncKind = TextDocumentSyncKind = {}));
                /**
 * The document open notification is sent from the client to the server to signal
 * newly opened text documents. The document's truth is now managed by the client
 * and the server must not try to read the document's truth using the document's
 * uri. Open in this sense means it is managed by the client. It doesn't necessarily
 * mean that its content is presented in an editor. An open notification must not
 * be sent more than once without a corresponding close notification send before.
 * This means open and close notification must be balanced and the max open count
 * is one.
 */ var DidOpenTextDocumentNotification;
                (function(DidOpenTextDocumentNotification) {
                    DidOpenTextDocumentNotification.method = 'textDocument/didOpen';
                    DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);
                })(DidOpenTextDocumentNotification || (exports1.DidOpenTextDocumentNotification = DidOpenTextDocumentNotification = {}));
                var TextDocumentContentChangeEvent;
                (function(TextDocumentContentChangeEvent) {
                    /**
     * Checks whether the information describes a delta event.
     */ function isIncremental(event) {
                        let candidate = event;
                        return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range !== undefined && (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
                    }
                    TextDocumentContentChangeEvent.isIncremental = isIncremental;
                    /**
     * Checks whether the information describes a full replacement event.
     */ function isFull(event) {
                        let candidate = event;
                        return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
                    }
                    TextDocumentContentChangeEvent.isFull = isFull;
                })(TextDocumentContentChangeEvent || (exports1.TextDocumentContentChangeEvent = TextDocumentContentChangeEvent = {}));
                /**
 * The document change notification is sent from the client to the server to signal
 * changes to a text document.
 */ var DidChangeTextDocumentNotification;
                (function(DidChangeTextDocumentNotification) {
                    DidChangeTextDocumentNotification.method = 'textDocument/didChange';
                    DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);
                })(DidChangeTextDocumentNotification || (exports1.DidChangeTextDocumentNotification = DidChangeTextDocumentNotification = {}));
                /**
 * The document close notification is sent from the client to the server when
 * the document got closed in the client. The document's truth now exists where
 * the document's uri points to (e.g. if the document's uri is a file uri the
 * truth now exists on disk). As with the open notification the close notification
 * is about managing the document's content. Receiving a close notification
 * doesn't mean that the document was open in an editor before. A close
 * notification requires a previous open notification to be sent.
 */ var DidCloseTextDocumentNotification;
                (function(DidCloseTextDocumentNotification) {
                    DidCloseTextDocumentNotification.method = 'textDocument/didClose';
                    DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);
                })(DidCloseTextDocumentNotification || (exports1.DidCloseTextDocumentNotification = DidCloseTextDocumentNotification = {}));
                /**
 * The document save notification is sent from the client to the server when
 * the document got saved in the client.
 */ var DidSaveTextDocumentNotification;
                (function(DidSaveTextDocumentNotification) {
                    DidSaveTextDocumentNotification.method = 'textDocument/didSave';
                    DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);
                })(DidSaveTextDocumentNotification || (exports1.DidSaveTextDocumentNotification = DidSaveTextDocumentNotification = {}));
                /**
 * Represents reasons why a text document is saved.
 */ var TextDocumentSaveReason;
                (function(TextDocumentSaveReason) {
                    /**
     * Manually triggered, e.g. by the user pressing save, by starting debugging,
     * or by an API call.
     */ TextDocumentSaveReason.Manual = 1;
                    /**
     * Automatic after a delay.
     */ TextDocumentSaveReason.AfterDelay = 2;
                    /**
     * When the editor lost focus.
     */ TextDocumentSaveReason.FocusOut = 3;
                })(TextDocumentSaveReason || (exports1.TextDocumentSaveReason = TextDocumentSaveReason = {}));
                /**
 * A document will save notification is sent from the client to the server before
 * the document is actually saved.
 */ var WillSaveTextDocumentNotification;
                (function(WillSaveTextDocumentNotification) {
                    WillSaveTextDocumentNotification.method = 'textDocument/willSave';
                    WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);
                })(WillSaveTextDocumentNotification || (exports1.WillSaveTextDocumentNotification = WillSaveTextDocumentNotification = {}));
                /**
 * A document will save request is sent from the client to the server before
 * the document is actually saved. The request can return an array of TextEdits
 * which will be applied to the text document before it is saved. Please note that
 * clients might drop results if computing the text edits took too long or if a
 * server constantly fails on this request. This is done to keep the save fast and
 * reliable.
 */ var WillSaveTextDocumentWaitUntilRequest;
                (function(WillSaveTextDocumentWaitUntilRequest) {
                    WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';
                    WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);
                })(WillSaveTextDocumentWaitUntilRequest || (exports1.WillSaveTextDocumentWaitUntilRequest = WillSaveTextDocumentWaitUntilRequest = {}));
                /**
 * The watched files notification is sent from the client to the server when
 * the client detects changes to file watched by the language client.
 */ var DidChangeWatchedFilesNotification;
                (function(DidChangeWatchedFilesNotification) {
                    DidChangeWatchedFilesNotification.method = 'workspace/didChangeWatchedFiles';
                    DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);
                })(DidChangeWatchedFilesNotification || (exports1.DidChangeWatchedFilesNotification = DidChangeWatchedFilesNotification = {}));
                /**
 * The file event type
 */ var FileChangeType;
                (function(FileChangeType) {
                    /**
     * The file got created.
     */ FileChangeType.Created = 1;
                    /**
     * The file got changed.
     */ FileChangeType.Changed = 2;
                    /**
     * The file got deleted.
     */ FileChangeType.Deleted = 3;
                })(FileChangeType || (exports1.FileChangeType = FileChangeType = {}));
                var RelativePattern;
                (function(RelativePattern) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);
                    }
                    RelativePattern.is = is;
                })(RelativePattern || (exports1.RelativePattern = RelativePattern = {}));
                var WatchKind;
                (function(WatchKind) {
                    /**
     * Interested in create events.
     */ WatchKind.Create = 1;
                    /**
     * Interested in change events
     */ WatchKind.Change = 2;
                    /**
     * Interested in delete events
     */ WatchKind.Delete = 4;
                })(WatchKind || (exports1.WatchKind = WatchKind = {}));
                /**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */ var PublishDiagnosticsNotification;
                (function(PublishDiagnosticsNotification) {
                    PublishDiagnosticsNotification.method = 'textDocument/publishDiagnostics';
                    PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;
                    PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);
                })(PublishDiagnosticsNotification || (exports1.PublishDiagnosticsNotification = PublishDiagnosticsNotification = {}));
                /**
 * How a completion was triggered
 */ var CompletionTriggerKind;
                (function(CompletionTriggerKind) {
                    /**
     * Completion was triggered by typing an identifier (24x7 code
     * complete), manual invocation (e.g Ctrl+Space) or via API.
     */ CompletionTriggerKind.Invoked = 1;
                    /**
     * Completion was triggered by a trigger character specified by
     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
     */ CompletionTriggerKind.TriggerCharacter = 2;
                    /**
     * Completion was re-triggered as current completion list is incomplete
     */ CompletionTriggerKind.TriggerForIncompleteCompletions = 3;
                })(CompletionTriggerKind || (exports1.CompletionTriggerKind = CompletionTriggerKind = {}));
                /**
 * Request to request completion at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response
 * is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}
 * or a Thenable that resolves to such.
 *
 * The request can delay the computation of the {@link CompletionItem.detail `detail`}
 * and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`
 * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
 * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
 */ var CompletionRequest;
                (function(CompletionRequest) {
                    CompletionRequest.method = 'textDocument/completion';
                    CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);
                })(CompletionRequest || (exports1.CompletionRequest = CompletionRequest = {}));
                /**
 * Request to resolve additional information for a given completion item.The request's
 * parameter is of type {@link CompletionItem} the response
 * is of type {@link CompletionItem} or a Thenable that resolves to such.
 */ var CompletionResolveRequest;
                (function(CompletionResolveRequest) {
                    CompletionResolveRequest.method = 'completionItem/resolve';
                    CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);
                })(CompletionResolveRequest || (exports1.CompletionResolveRequest = CompletionResolveRequest = {}));
                /**
 * Request to request hover information at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response is of
 * type {@link Hover} or a Thenable that resolves to such.
 */ var HoverRequest;
                (function(HoverRequest) {
                    HoverRequest.method = 'textDocument/hover';
                    HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);
                })(HoverRequest || (exports1.HoverRequest = HoverRequest = {}));
                /**
 * How a signature help was triggered.
 *
 * @since 3.15.0
 */ var SignatureHelpTriggerKind;
                (function(SignatureHelpTriggerKind) {
                    /**
     * Signature help was invoked manually by the user or by a command.
     */ SignatureHelpTriggerKind.Invoked = 1;
                    /**
     * Signature help was triggered by a trigger character.
     */ SignatureHelpTriggerKind.TriggerCharacter = 2;
                    /**
     * Signature help was triggered by the cursor moving or by the document content changing.
     */ SignatureHelpTriggerKind.ContentChange = 3;
                })(SignatureHelpTriggerKind || (exports1.SignatureHelpTriggerKind = SignatureHelpTriggerKind = {}));
                var SignatureHelpRequest;
                (function(SignatureHelpRequest) {
                    SignatureHelpRequest.method = 'textDocument/signatureHelp';
                    SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);
                })(SignatureHelpRequest || (exports1.SignatureHelpRequest = SignatureHelpRequest = {}));
                /**
 * A request to resolve the definition location of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPosition}
 * the response is of either type {@link Definition} or a typed array of
 * {@link DefinitionLink} or a Thenable that resolves to such.
 */ var DefinitionRequest;
                (function(DefinitionRequest) {
                    DefinitionRequest.method = 'textDocument/definition';
                    DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);
                })(DefinitionRequest || (exports1.DefinitionRequest = DefinitionRequest = {}));
                /**
 * A request to resolve project-wide references for the symbol denoted
 * by the given text document position. The request's parameter is of
 * type {@link ReferenceParams} the response is of type
 * {@link Location Location[]} or a Thenable that resolves to such.
 */ var ReferencesRequest;
                (function(ReferencesRequest) {
                    ReferencesRequest.method = 'textDocument/references';
                    ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);
                })(ReferencesRequest || (exports1.ReferencesRequest = ReferencesRequest = {}));
                /**
 * Request to resolve a {@link DocumentHighlight} for a given
 * text document position. The request's parameter is of type {@link TextDocumentPosition}
 * the request response is an array of type {@link DocumentHighlight}
 * or a Thenable that resolves to such.
 */ var DocumentHighlightRequest;
                (function(DocumentHighlightRequest) {
                    DocumentHighlightRequest.method = 'textDocument/documentHighlight';
                    DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);
                })(DocumentHighlightRequest || (exports1.DocumentHighlightRequest = DocumentHighlightRequest = {}));
                /**
 * A request to list all symbols found in a given text document. The request's
 * parameter is of type {@link TextDocumentIdentifier} the
 * response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable
 * that resolves to such.
 */ var DocumentSymbolRequest;
                (function(DocumentSymbolRequest) {
                    DocumentSymbolRequest.method = 'textDocument/documentSymbol';
                    DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);
                })(DocumentSymbolRequest || (exports1.DocumentSymbolRequest = DocumentSymbolRequest = {}));
                /**
 * A request to provide commands for the given text document and range.
 */ var CodeActionRequest;
                (function(CodeActionRequest) {
                    CodeActionRequest.method = 'textDocument/codeAction';
                    CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);
                })(CodeActionRequest || (exports1.CodeActionRequest = CodeActionRequest = {}));
                /**
 * Request to resolve additional information for a given code action.The request's
 * parameter is of type {@link CodeAction} the response
 * is of type {@link CodeAction} or a Thenable that resolves to such.
 */ var CodeActionResolveRequest;
                (function(CodeActionResolveRequest) {
                    CodeActionResolveRequest.method = 'codeAction/resolve';
                    CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);
                })(CodeActionResolveRequest || (exports1.CodeActionResolveRequest = CodeActionResolveRequest = {}));
                /**
 * A request to list project-wide symbols matching the query string given
 * by the {@link WorkspaceSymbolParams}. The response is
 * of type {@link SymbolInformation SymbolInformation[]} or a Thenable that
 * resolves to such.
 *
 * @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients
 *  need to advertise support for WorkspaceSymbols via the client capability
 *  `workspace.symbol.resolveSupport`.
 *
 */ var WorkspaceSymbolRequest;
                (function(WorkspaceSymbolRequest) {
                    WorkspaceSymbolRequest.method = 'workspace/symbol';
                    WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);
                })(WorkspaceSymbolRequest || (exports1.WorkspaceSymbolRequest = WorkspaceSymbolRequest = {}));
                /**
 * A request to resolve the range inside the workspace
 * symbol's location.
 *
 * @since 3.17.0
 */ var WorkspaceSymbolResolveRequest;
                (function(WorkspaceSymbolResolveRequest) {
                    WorkspaceSymbolResolveRequest.method = 'workspaceSymbol/resolve';
                    WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);
                })(WorkspaceSymbolResolveRequest || (exports1.WorkspaceSymbolResolveRequest = WorkspaceSymbolResolveRequest = {}));
                /**
 * A request to provide code lens for the given text document.
 */ var CodeLensRequest;
                (function(CodeLensRequest) {
                    CodeLensRequest.method = 'textDocument/codeLens';
                    CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);
                })(CodeLensRequest || (exports1.CodeLensRequest = CodeLensRequest = {}));
                /**
 * A request to resolve a command for a given code lens.
 */ var CodeLensResolveRequest;
                (function(CodeLensResolveRequest) {
                    CodeLensResolveRequest.method = 'codeLens/resolve';
                    CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);
                })(CodeLensResolveRequest || (exports1.CodeLensResolveRequest = CodeLensResolveRequest = {}));
                /**
 * A request to refresh all code actions
 *
 * @since 3.16.0
 */ var CodeLensRefreshRequest;
                (function(CodeLensRefreshRequest) {
                    CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;
                    CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);
                })(CodeLensRefreshRequest || (exports1.CodeLensRefreshRequest = CodeLensRefreshRequest = {}));
                /**
 * A request to provide document links
 */ var DocumentLinkRequest;
                (function(DocumentLinkRequest) {
                    DocumentLinkRequest.method = 'textDocument/documentLink';
                    DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);
                })(DocumentLinkRequest || (exports1.DocumentLinkRequest = DocumentLinkRequest = {}));
                /**
 * Request to resolve additional information for a given document link. The request's
 * parameter is of type {@link DocumentLink} the response
 * is of type {@link DocumentLink} or a Thenable that resolves to such.
 */ var DocumentLinkResolveRequest;
                (function(DocumentLinkResolveRequest) {
                    DocumentLinkResolveRequest.method = 'documentLink/resolve';
                    DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);
                })(DocumentLinkResolveRequest || (exports1.DocumentLinkResolveRequest = DocumentLinkResolveRequest = {}));
                /**
 * A request to format a whole document.
 */ var DocumentFormattingRequest;
                (function(DocumentFormattingRequest) {
                    DocumentFormattingRequest.method = 'textDocument/formatting';
                    DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);
                })(DocumentFormattingRequest || (exports1.DocumentFormattingRequest = DocumentFormattingRequest = {}));
                /**
 * A request to format a range in a document.
 */ var DocumentRangeFormattingRequest;
                (function(DocumentRangeFormattingRequest) {
                    DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';
                    DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);
                })(DocumentRangeFormattingRequest || (exports1.DocumentRangeFormattingRequest = DocumentRangeFormattingRequest = {}));
                /**
 * A request to format ranges in a document.
 *
 * @since 3.18.0
 * @proposed
 */ var DocumentRangesFormattingRequest;
                (function(DocumentRangesFormattingRequest) {
                    DocumentRangesFormattingRequest.method = 'textDocument/rangesFormatting';
                    DocumentRangesFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentRangesFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangesFormattingRequest.method);
                })(DocumentRangesFormattingRequest || (exports1.DocumentRangesFormattingRequest = DocumentRangesFormattingRequest = {}));
                /**
 * A request to format a document on type.
 */ var DocumentOnTypeFormattingRequest;
                (function(DocumentOnTypeFormattingRequest) {
                    DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';
                    DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);
                })(DocumentOnTypeFormattingRequest || (exports1.DocumentOnTypeFormattingRequest = DocumentOnTypeFormattingRequest = {}));
                //---- Rename ----------------------------------------------
                var PrepareSupportDefaultBehavior;
                (function(PrepareSupportDefaultBehavior) {
                    /**
     * The client's default behavior is to select the identifier
     * according the to language's syntax rule.
     */ PrepareSupportDefaultBehavior.Identifier = 1;
                })(PrepareSupportDefaultBehavior || (exports1.PrepareSupportDefaultBehavior = PrepareSupportDefaultBehavior = {}));
                /**
 * A request to rename a symbol.
 */ var RenameRequest;
                (function(RenameRequest) {
                    RenameRequest.method = 'textDocument/rename';
                    RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);
                })(RenameRequest || (exports1.RenameRequest = RenameRequest = {}));
                /**
 * A request to test and perform the setup necessary for a rename.
 *
 * @since 3.16 - support for default behavior
 */ var PrepareRenameRequest;
                (function(PrepareRenameRequest) {
                    PrepareRenameRequest.method = 'textDocument/prepareRename';
                    PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);
                })(PrepareRenameRequest || (exports1.PrepareRenameRequest = PrepareRenameRequest = {}));
                /**
 * A request send from the client to the server to execute a command. The request might return
 * a workspace edit which the client will apply to the workspace.
 */ var ExecuteCommandRequest;
                (function(ExecuteCommandRequest) {
                    ExecuteCommandRequest.method = 'workspace/executeCommand';
                    ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);
                })(ExecuteCommandRequest || (exports1.ExecuteCommandRequest = ExecuteCommandRequest = {}));
                /**
 * A request sent from the server to the client to modified certain resources.
 */ var ApplyWorkspaceEditRequest;
                (function(ApplyWorkspaceEditRequest) {
                    ApplyWorkspaceEditRequest.method = 'workspace/applyEdit';
                    ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');
                })(ApplyWorkspaceEditRequest || (exports1.ApplyWorkspaceEditRequest = ApplyWorkspaceEditRequest = {}));
            /***/ },
            /***/ 2249: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_814031__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.LinkedEditingRangeRequest = void 0;
                const messages_1 = __nested_webpack_require_814031__(8431);
                /**
 * A request to provide ranges that can be edited together.
 *
 * @since 3.16.0
 */ var LinkedEditingRangeRequest;
                (function(LinkedEditingRangeRequest) {
                    LinkedEditingRangeRequest.method = 'textDocument/linkedEditingRange';
                    LinkedEditingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    LinkedEditingRangeRequest.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest.method);
                })(LinkedEditingRangeRequest || (exports1.LinkedEditingRangeRequest = LinkedEditingRangeRequest = {}));
            /***/ },
            /***/ 7684: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_815395__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.MonikerRequest = exports1.MonikerKind = exports1.UniquenessLevel = void 0;
                const messages_1 = __nested_webpack_require_815395__(8431);
                /**
 * Moniker uniqueness level to define scope of the moniker.
 *
 * @since 3.16.0
 */ var UniquenessLevel;
                (function(UniquenessLevel) {
                    /**
     * The moniker is only unique inside a document
     */ UniquenessLevel.document = 'document';
                    /**
     * The moniker is unique inside a project for which a dump got created
     */ UniquenessLevel.project = 'project';
                    /**
     * The moniker is unique inside the group to which a project belongs
     */ UniquenessLevel.group = 'group';
                    /**
     * The moniker is unique inside the moniker scheme.
     */ UniquenessLevel.scheme = 'scheme';
                    /**
     * The moniker is globally unique
     */ UniquenessLevel.global = 'global';
                })(UniquenessLevel || (exports1.UniquenessLevel = UniquenessLevel = {}));
                /**
 * The moniker kind.
 *
 * @since 3.16.0
 */ var MonikerKind;
                (function(MonikerKind) {
                    /**
     * The moniker represent a symbol that is imported into a project
     */ MonikerKind.$import = 'import';
                    /**
     * The moniker represents a symbol that is exported from a project
     */ MonikerKind.$export = 'export';
                    /**
     * The moniker represents a symbol that is local to a project (e.g. a local
     * variable of a function, a class not visible outside the project, ...)
     */ MonikerKind.local = 'local';
                })(MonikerKind || (exports1.MonikerKind = MonikerKind = {}));
                /**
 * A request to get the moniker of a symbol at a given text document position.
 * The request parameter is of type {@link TextDocumentPositionParams}.
 * The response is of type {@link Moniker Moniker[]} or `null`.
 */ var MonikerRequest;
                (function(MonikerRequest) {
                    MonikerRequest.method = 'textDocument/moniker';
                    MonikerRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    MonikerRequest.type = new messages_1.ProtocolRequestType(MonikerRequest.method);
                })(MonikerRequest || (exports1.MonikerRequest = MonikerRequest = {}));
            /***/ },
            /***/ 4792: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_818402__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.DidCloseNotebookDocumentNotification = exports1.DidSaveNotebookDocumentNotification = exports1.DidChangeNotebookDocumentNotification = exports1.NotebookCellArrayChange = exports1.DidOpenNotebookDocumentNotification = exports1.NotebookDocumentSyncRegistrationType = exports1.NotebookDocument = exports1.NotebookCell = exports1.ExecutionSummary = exports1.NotebookCellKind = void 0;
                const vscode_languageserver_types_1 = __nested_webpack_require_818402__(2852);
                const Is = __nested_webpack_require_818402__(8633);
                const messages_1 = __nested_webpack_require_818402__(8431);
                /**
 * A notebook cell kind.
 *
 * @since 3.17.0
 */ var NotebookCellKind;
                (function(NotebookCellKind) {
                    /**
     * A markup-cell is formatted source that is used for display.
     */ NotebookCellKind.Markup = 1;
                    /**
     * A code-cell is source code.
     */ NotebookCellKind.Code = 2;
                    function is(value) {
                        return value === 1 || value === 2;
                    }
                    NotebookCellKind.is = is;
                })(NotebookCellKind || (exports1.NotebookCellKind = NotebookCellKind = {}));
                var ExecutionSummary;
                (function(ExecutionSummary) {
                    function create(executionOrder, success) {
                        const result = {
                            executionOrder
                        };
                        if (success === true || success === false) {
                            result.success = success;
                        }
                        return result;
                    }
                    ExecutionSummary.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === undefined || Is.boolean(candidate.success));
                    }
                    ExecutionSummary.is = is;
                    function equals(one, other) {
                        if (one === other) {
                            return true;
                        }
                        if (one === null || one === undefined || other === null || other === undefined) {
                            return false;
                        }
                        return one.executionOrder === other.executionOrder && one.success === other.success;
                    }
                    ExecutionSummary.equals = equals;
                })(ExecutionSummary || (exports1.ExecutionSummary = ExecutionSummary = {}));
                var NotebookCell;
                (function(NotebookCell) {
                    function create(kind, document1) {
                        return {
                            kind,
                            document: document1
                        };
                    }
                    NotebookCell.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) && (candidate.metadata === undefined || Is.objectLiteral(candidate.metadata));
                    }
                    NotebookCell.is = is;
                    function diff(one, two) {
                        const result = new Set();
                        if (one.document !== two.document) {
                            result.add('document');
                        }
                        if (one.kind !== two.kind) {
                            result.add('kind');
                        }
                        if (one.executionSummary !== two.executionSummary) {
                            result.add('executionSummary');
                        }
                        if ((one.metadata !== undefined || two.metadata !== undefined) && !equalsMetadata(one.metadata, two.metadata)) {
                            result.add('metadata');
                        }
                        if ((one.executionSummary !== undefined || two.executionSummary !== undefined) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
                            result.add('executionSummary');
                        }
                        return result;
                    }
                    NotebookCell.diff = diff;
                    function equalsMetadata(one, other) {
                        if (one === other) {
                            return true;
                        }
                        if (one === null || one === undefined || other === null || other === undefined) {
                            return false;
                        }
                        if (typeof one !== typeof other) {
                            return false;
                        }
                        if (typeof one !== 'object') {
                            return false;
                        }
                        const oneArray = Array.isArray(one);
                        const otherArray = Array.isArray(other);
                        if (oneArray !== otherArray) {
                            return false;
                        }
                        if (oneArray && otherArray) {
                            if (one.length !== other.length) {
                                return false;
                            }
                            for(let i = 0; i < one.length; i++){
                                if (!equalsMetadata(one[i], other[i])) {
                                    return false;
                                }
                            }
                        }
                        if (Is.objectLiteral(one) && Is.objectLiteral(other)) {
                            const oneKeys = Object.keys(one);
                            const otherKeys = Object.keys(other);
                            if (oneKeys.length !== otherKeys.length) {
                                return false;
                            }
                            oneKeys.sort();
                            otherKeys.sort();
                            if (!equalsMetadata(oneKeys, otherKeys)) {
                                return false;
                            }
                            for(let i = 0; i < oneKeys.length; i++){
                                const prop = oneKeys[i];
                                if (!equalsMetadata(one[prop], other[prop])) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    }
                })(NotebookCell || (exports1.NotebookCell = NotebookCell = {}));
                var NotebookDocument;
                (function(NotebookDocument) {
                    function create(uri, notebookType, version, cells) {
                        return {
                            uri,
                            notebookType,
                            version,
                            cells
                        };
                    }
                    NotebookDocument.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);
                    }
                    NotebookDocument.is = is;
                })(NotebookDocument || (exports1.NotebookDocument = NotebookDocument = {}));
                var NotebookDocumentSyncRegistrationType;
                (function(NotebookDocumentSyncRegistrationType) {
                    NotebookDocumentSyncRegistrationType.method = 'notebookDocument/sync';
                    NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer;
                    NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);
                })(NotebookDocumentSyncRegistrationType || (exports1.NotebookDocumentSyncRegistrationType = NotebookDocumentSyncRegistrationType = {}));
                /**
 * A notification sent when a notebook opens.
 *
 * @since 3.17.0
 */ var DidOpenNotebookDocumentNotification;
                (function(DidOpenNotebookDocumentNotification) {
                    DidOpenNotebookDocumentNotification.method = 'notebookDocument/didOpen';
                    DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);
                    DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
                })(DidOpenNotebookDocumentNotification || (exports1.DidOpenNotebookDocumentNotification = DidOpenNotebookDocumentNotification = {}));
                var NotebookCellArrayChange;
                (function(NotebookCellArrayChange) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === undefined || Is.typedArray(candidate.cells, NotebookCell.is));
                    }
                    NotebookCellArrayChange.is = is;
                    function create(start, deleteCount, cells) {
                        const result = {
                            start,
                            deleteCount
                        };
                        if (cells !== undefined) {
                            result.cells = cells;
                        }
                        return result;
                    }
                    NotebookCellArrayChange.create = create;
                })(NotebookCellArrayChange || (exports1.NotebookCellArrayChange = NotebookCellArrayChange = {}));
                var DidChangeNotebookDocumentNotification;
                (function(DidChangeNotebookDocumentNotification) {
                    DidChangeNotebookDocumentNotification.method = 'notebookDocument/didChange';
                    DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);
                    DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
                })(DidChangeNotebookDocumentNotification || (exports1.DidChangeNotebookDocumentNotification = DidChangeNotebookDocumentNotification = {}));
                /**
 * A notification sent when a notebook document is saved.
 *
 * @since 3.17.0
 */ var DidSaveNotebookDocumentNotification;
                (function(DidSaveNotebookDocumentNotification) {
                    DidSaveNotebookDocumentNotification.method = 'notebookDocument/didSave';
                    DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);
                    DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
                })(DidSaveNotebookDocumentNotification || (exports1.DidSaveNotebookDocumentNotification = DidSaveNotebookDocumentNotification = {}));
                /**
 * A notification sent when a notebook closes.
 *
 * @since 3.17.0
 */ var DidCloseNotebookDocumentNotification;
                (function(DidCloseNotebookDocumentNotification) {
                    DidCloseNotebookDocumentNotification.method = 'notebookDocument/didClose';
                    DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);
                    DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
                })(DidCloseNotebookDocumentNotification || (exports1.DidCloseNotebookDocumentNotification = DidCloseNotebookDocumentNotification = {}));
            /***/ },
            /***/ 4166: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_831889__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.WorkDoneProgressCancelNotification = exports1.WorkDoneProgressCreateRequest = exports1.WorkDoneProgress = void 0;
                const vscode_jsonrpc_1 = __nested_webpack_require_831889__(9110);
                const messages_1 = __nested_webpack_require_831889__(8431);
                var WorkDoneProgress;
                (function(WorkDoneProgress) {
                    WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();
                    function is(value) {
                        return value === WorkDoneProgress.type;
                    }
                    WorkDoneProgress.is = is;
                })(WorkDoneProgress || (exports1.WorkDoneProgress = WorkDoneProgress = {}));
                /**
 * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress
 * reporting from the server.
 */ var WorkDoneProgressCreateRequest;
                (function(WorkDoneProgressCreateRequest) {
                    WorkDoneProgressCreateRequest.method = 'window/workDoneProgress/create';
                    WorkDoneProgressCreateRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest.method);
                })(WorkDoneProgressCreateRequest || (exports1.WorkDoneProgressCreateRequest = WorkDoneProgressCreateRequest = {}));
                /**
 * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress
 * initiated on the server side.
 */ var WorkDoneProgressCancelNotification;
                (function(WorkDoneProgressCancelNotification) {
                    WorkDoneProgressCancelNotification.method = 'window/workDoneProgress/cancel';
                    WorkDoneProgressCancelNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification.method);
                })(WorkDoneProgressCancelNotification || (exports1.WorkDoneProgressCancelNotification = WorkDoneProgressCancelNotification = {}));
            /***/ },
            /***/ 1530: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_834703__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.SelectionRangeRequest = void 0;
                const messages_1 = __nested_webpack_require_834703__(8431);
                /**
 * A request to provide selection ranges in a document. The request's
 * parameter is of type {@link SelectionRangeParams}, the
 * response is of type {@link SelectionRange SelectionRange[]} or a Thenable
 * that resolves to such.
 */ var SelectionRangeRequest;
                (function(SelectionRangeRequest) {
                    SelectionRangeRequest.method = 'textDocument/selectionRange';
                    SelectionRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SelectionRangeRequest.type = new messages_1.ProtocolRequestType(SelectionRangeRequest.method);
                })(SelectionRangeRequest || (exports1.SelectionRangeRequest = SelectionRangeRequest = {}));
            /***/ },
            /***/ 2067: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_836174__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.SemanticTokensRefreshRequest = exports1.SemanticTokensRangeRequest = exports1.SemanticTokensDeltaRequest = exports1.SemanticTokensRequest = exports1.SemanticTokensRegistrationType = exports1.TokenFormat = void 0;
                const messages_1 = __nested_webpack_require_836174__(8431);
                //------- 'textDocument/semanticTokens' -----
                var TokenFormat;
                (function(TokenFormat) {
                    TokenFormat.Relative = 'relative';
                })(TokenFormat || (exports1.TokenFormat = TokenFormat = {}));
                var SemanticTokensRegistrationType;
                (function(SemanticTokensRegistrationType) {
                    SemanticTokensRegistrationType.method = 'textDocument/semanticTokens';
                    SemanticTokensRegistrationType.type = new messages_1.RegistrationType(SemanticTokensRegistrationType.method);
                })(SemanticTokensRegistrationType || (exports1.SemanticTokensRegistrationType = SemanticTokensRegistrationType = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokensRequest;
                (function(SemanticTokensRequest) {
                    SemanticTokensRequest.method = 'textDocument/semanticTokens/full';
                    SemanticTokensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SemanticTokensRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRequest.method);
                    SemanticTokensRequest.registrationMethod = SemanticTokensRegistrationType.method;
                })(SemanticTokensRequest || (exports1.SemanticTokensRequest = SemanticTokensRequest = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokensDeltaRequest;
                (function(SemanticTokensDeltaRequest) {
                    SemanticTokensDeltaRequest.method = 'textDocument/semanticTokens/full/delta';
                    SemanticTokensDeltaRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SemanticTokensDeltaRequest.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest.method);
                    SemanticTokensDeltaRequest.registrationMethod = SemanticTokensRegistrationType.method;
                })(SemanticTokensDeltaRequest || (exports1.SemanticTokensDeltaRequest = SemanticTokensDeltaRequest = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokensRangeRequest;
                (function(SemanticTokensRangeRequest) {
                    SemanticTokensRangeRequest.method = 'textDocument/semanticTokens/range';
                    SemanticTokensRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SemanticTokensRangeRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest.method);
                    SemanticTokensRangeRequest.registrationMethod = SemanticTokensRegistrationType.method;
                })(SemanticTokensRangeRequest || (exports1.SemanticTokensRangeRequest = SemanticTokensRangeRequest = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokensRefreshRequest;
                (function(SemanticTokensRefreshRequest) {
                    SemanticTokensRefreshRequest.method = `workspace/semanticTokens/refresh`;
                    SemanticTokensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    SemanticTokensRefreshRequest.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest.method);
                })(SemanticTokensRefreshRequest || (exports1.SemanticTokensRefreshRequest = SemanticTokensRefreshRequest = {}));
            /***/ },
            /***/ 4333: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_840431__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ShowDocumentRequest = void 0;
                const messages_1 = __nested_webpack_require_840431__(8431);
                /**
 * A request to show a document. This request might open an
 * external program depending on the value of the URI to open.
 * For example a request to open `https://code.visualstudio.com/`
 * will very likely open the URI in a WEB browser.
 *
 * @since 3.16.0
*/ var ShowDocumentRequest;
                (function(ShowDocumentRequest) {
                    ShowDocumentRequest.method = 'window/showDocument';
                    ShowDocumentRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    ShowDocumentRequest.type = new messages_1.ProtocolRequestType(ShowDocumentRequest.method);
                })(ShowDocumentRequest || (exports1.ShowDocumentRequest = ShowDocumentRequest = {}));
            /***/ },
            /***/ 9264: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_841900__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.TypeDefinitionRequest = void 0;
                const messages_1 = __nested_webpack_require_841900__(8431);
                // @ts-ignore: to avoid inlining LocatioLink as dynamic import
                let __noDynamicImport;
                /**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPositionParams}
 * the response is of type {@link Definition} or a Thenable that resolves to such.
 */ var TypeDefinitionRequest;
                (function(TypeDefinitionRequest) {
                    TypeDefinitionRequest.method = 'textDocument/typeDefinition';
                    TypeDefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    TypeDefinitionRequest.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest.method);
                })(TypeDefinitionRequest || (exports1.TypeDefinitionRequest = TypeDefinitionRequest = {}));
            /***/ },
            /***/ 7062: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_843513__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.TypeHierarchySubtypesRequest = exports1.TypeHierarchySupertypesRequest = exports1.TypeHierarchyPrepareRequest = void 0;
                const messages_1 = __nested_webpack_require_843513__(8431);
                /**
 * A request to result a `TypeHierarchyItem` in a document at a given position.
 * Can be used as an input to a subtypes or supertypes type hierarchy.
 *
 * @since 3.17.0
 */ var TypeHierarchyPrepareRequest;
                (function(TypeHierarchyPrepareRequest) {
                    TypeHierarchyPrepareRequest.method = 'textDocument/prepareTypeHierarchy';
                    TypeHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    TypeHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest.method);
                })(TypeHierarchyPrepareRequest || (exports1.TypeHierarchyPrepareRequest = TypeHierarchyPrepareRequest = {}));
                /**
 * A request to resolve the supertypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */ var TypeHierarchySupertypesRequest;
                (function(TypeHierarchySupertypesRequest) {
                    TypeHierarchySupertypesRequest.method = 'typeHierarchy/supertypes';
                    TypeHierarchySupertypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    TypeHierarchySupertypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest.method);
                })(TypeHierarchySupertypesRequest || (exports1.TypeHierarchySupertypesRequest = TypeHierarchySupertypesRequest = {}));
                /**
 * A request to resolve the subtypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */ var TypeHierarchySubtypesRequest;
                (function(TypeHierarchySubtypesRequest) {
                    TypeHierarchySubtypesRequest.method = 'typeHierarchy/subtypes';
                    TypeHierarchySubtypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    TypeHierarchySubtypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest.method);
                })(TypeHierarchySubtypesRequest || (exports1.TypeHierarchySubtypesRequest = TypeHierarchySubtypesRequest = {}));
            /***/ },
            /***/ 6860: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_846420__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.DidChangeWorkspaceFoldersNotification = exports1.WorkspaceFoldersRequest = void 0;
                const messages_1 = __nested_webpack_require_846420__(8431);
                /**
 * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
 */ var WorkspaceFoldersRequest;
                (function(WorkspaceFoldersRequest) {
                    WorkspaceFoldersRequest.method = 'workspace/workspaceFolders';
                    WorkspaceFoldersRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    WorkspaceFoldersRequest.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest.method);
                })(WorkspaceFoldersRequest || (exports1.WorkspaceFoldersRequest = WorkspaceFoldersRequest = {}));
                /**
 * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
 * folder configuration changes.
 */ var DidChangeWorkspaceFoldersNotification;
                (function(DidChangeWorkspaceFoldersNotification) {
                    DidChangeWorkspaceFoldersNotification.method = 'workspace/didChangeWorkspaceFolders';
                    DidChangeWorkspaceFoldersNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeWorkspaceFoldersNotification.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification.method);
                })(DidChangeWorkspaceFoldersNotification || (exports1.DidChangeWorkspaceFoldersNotification = DidChangeWorkspaceFoldersNotification = {}));
            /***/ },
            /***/ 8633: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.objectLiteral = exports1.typedArray = exports1.stringArray = exports1.array = exports1.func = exports1.error = exports1.number = exports1.string = exports1.boolean = void 0;
                function boolean(value) {
                    return value === true || value === false;
                }
                exports1.boolean = boolean;
                function string(value) {
                    return typeof value === 'string' || value instanceof String;
                }
                exports1.string = string;
                function number(value) {
                    return typeof value === 'number' || value instanceof Number;
                }
                exports1.number = number;
                function error(value) {
                    return value instanceof Error;
                }
                exports1.error = error;
                function func(value) {
                    return typeof value === 'function';
                }
                exports1.func = func;
                function array(value) {
                    return Array.isArray(value);
                }
                exports1.array = array;
                function stringArray(value) {
                    return array(value) && value.every((elem)=>string(elem));
                }
                exports1.stringArray = stringArray;
                function typedArray(value, check) {
                    return Array.isArray(value) && value.every(check);
                }
                exports1.typedArray = typedArray;
                function objectLiteral(value) {
                    // Strictly speaking class instances pass this check as well. Since the LSP
                    // doesn't use classes we ignore this for now. If we do we need to add something
                    // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
                    return value !== null && typeof value === 'object';
                }
                exports1.objectLiteral = objectLiteral;
            /***/ },
            /***/ 2730: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_851286__)=>{
                "use strict";
                var forEach = __nested_webpack_require_851286__(705);
                var availableTypedArrays = __nested_webpack_require_851286__(4834);
                var callBind = __nested_webpack_require_851286__(8498);
                var callBound = __nested_webpack_require_851286__(9818);
                var gOPD = __nested_webpack_require_851286__(9336);
                var $toString = callBound('Object.prototype.toString');
                var hasToStringTag = __nested_webpack_require_851286__(1913)();
                var g = typeof globalThis === 'undefined' ? __nested_webpack_require_851286__.g : globalThis;
                var typedArrays = availableTypedArrays();
                var $slice = callBound('String.prototype.slice');
                var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
                var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
                    for(var i = 0; i < array.length; i += 1){
                        if (array[i] === value) {
                            return i;
                        }
                    }
                    return -1;
                };
                var cache = {
                    __proto__: null
                };
                if (hasToStringTag && gOPD && getPrototypeOf) {
                    forEach(typedArrays, function(typedArray) {
                        var arr = new g[typedArray]();
                        if (Symbol.toStringTag in arr) {
                            var proto = getPrototypeOf(arr);
                            var descriptor = gOPD(proto, Symbol.toStringTag);
                            if (!descriptor) {
                                var superProto = getPrototypeOf(proto);
                                descriptor = gOPD(superProto, Symbol.toStringTag);
                            }
                            cache['$' + typedArray] = callBind(descriptor.get);
                        }
                    });
                } else {
                    forEach(typedArrays, function(typedArray) {
                        var arr = new g[typedArray]();
                        cache['$' + typedArray] = callBind(arr.slice);
                    });
                }
                var tryTypedArrays = function tryAllTypedArrays(value) {
                    var found = false;
                    forEach(cache, function(getter, typedArray) {
                        if (!found) {
                            try {
                                if ('$' + getter(value) === typedArray) {
                                    found = $slice(typedArray, 1);
                                }
                            } catch (e) {}
                        }
                    });
                    return found;
                };
                var trySlices = function tryAllSlices(value) {
                    var found = false;
                    forEach(cache, function(getter, name) {
                        if (!found) {
                            try {
                                getter(value);
                                found = $slice(name, 1);
                            } catch (e) {}
                        }
                    });
                    return found;
                };
                module1.exports = function whichTypedArray(value) {
                    if (!value || typeof value !== 'object') {
                        return false;
                    }
                    if (!hasToStringTag) {
                        var tag = $slice($toString(value), 8, -1);
                        if ($indexOf(typedArrays, tag) > -1) {
                            return tag;
                        }
                        if (tag !== 'Object') {
                            return false;
                        }
                        // node < 0.6 hits here on real Typed Arrays
                        return trySlices(value);
                    }
                    if (!gOPD) {
                        return null;
                    } // unknown engine
                    return tryTypedArrays(value);
                };
            /***/ },
            /***/ 4834: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_855533__)=>{
                "use strict";
                var possibleNames = [
                    'BigInt64Array',
                    'BigUint64Array',
                    'Float32Array',
                    'Float64Array',
                    'Int16Array',
                    'Int32Array',
                    'Int8Array',
                    'Uint16Array',
                    'Uint32Array',
                    'Uint8Array',
                    'Uint8ClampedArray'
                ];
                var g = typeof globalThis === 'undefined' ? __nested_webpack_require_855533__.g : globalThis;
                module1.exports = function availableTypedArrays() {
                    var out = [];
                    for(var i = 0; i < possibleNames.length; i++){
                        if (typeof g[possibleNames[i]] === 'function') {
                            out[out.length] = possibleNames[i];
                        }
                    }
                    return out;
                };
            /***/ },
            /***/ 8041: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_856647__)=>{
                "use strict";
                /* harmony export */ __nested_webpack_require_856647__.d(__nested_webpack_exports__, {
                    /* harmony export */ V: ()=>/* binding */ TextDocument
                });
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ class FullTextDocument {
                    get uri() {
                        return this._uri;
                    }
                    get languageId() {
                        return this._languageId;
                    }
                    get version() {
                        return this._version;
                    }
                    getText(range) {
                        if (range) {
                            const start = this.offsetAt(range.start);
                            const end = this.offsetAt(range.end);
                            return this._content.substring(start, end);
                        }
                        return this._content;
                    }
                    update(changes, version) {
                        for (const change of changes){
                            if (FullTextDocument.isIncremental(change)) {
                                // makes sure start is before end
                                const range = getWellformedRange(change.range);
                                // update content
                                const startOffset = this.offsetAt(range.start);
                                const endOffset = this.offsetAt(range.end);
                                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
                                // update the offsets
                                const startLine = Math.max(range.start.line, 0);
                                const endLine = Math.max(range.end.line, 0);
                                let lineOffsets = this._lineOffsets;
                                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
                                if (endLine - startLine === addedLineOffsets.length) {
                                    for(let i = 0, len = addedLineOffsets.length; i < len; i++){
                                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                                    }
                                } else {
                                    if (addedLineOffsets.length < 10000) {
                                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);
                                    } else {
                                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                                    }
                                }
                                const diff = change.text.length - (endOffset - startOffset);
                                if (diff !== 0) {
                                    for(let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++){
                                        lineOffsets[i] = lineOffsets[i] + diff;
                                    }
                                }
                            } else if (FullTextDocument.isFull(change)) {
                                this._content = change.text;
                                this._lineOffsets = undefined;
                            } else {
                                throw new Error('Unknown change event received');
                            }
                        }
                        this._version = version;
                    }
                    getLineOffsets() {
                        if (this._lineOffsets === undefined) {
                            this._lineOffsets = computeLineOffsets(this._content, true);
                        }
                        return this._lineOffsets;
                    }
                    positionAt(offset) {
                        offset = Math.max(Math.min(offset, this._content.length), 0);
                        const lineOffsets = this.getLineOffsets();
                        let low = 0, high = lineOffsets.length;
                        if (high === 0) {
                            return {
                                line: 0,
                                character: offset
                            };
                        }
                        while(low < high){
                            const mid = Math.floor((low + high) / 2);
                            if (lineOffsets[mid] > offset) {
                                high = mid;
                            } else {
                                low = mid + 1;
                            }
                        }
                        // low is the least x for which the line offset is larger than the current offset
                        // or array.length if no line offset is larger than the current offset
                        const line = low - 1;
                        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);
                        return {
                            line,
                            character: offset - lineOffsets[line]
                        };
                    }
                    offsetAt(position) {
                        const lineOffsets = this.getLineOffsets();
                        if (position.line >= lineOffsets.length) {
                            return this._content.length;
                        } else if (position.line < 0) {
                            return 0;
                        }
                        const lineOffset = lineOffsets[position.line];
                        if (position.character <= 0) {
                            return lineOffset;
                        }
                        const nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
                        const offset = Math.min(lineOffset + position.character, nextLineOffset);
                        return this.ensureBeforeEOL(offset, lineOffset);
                    }
                    ensureBeforeEOL(offset, lineOffset) {
                        while(offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))){
                            offset--;
                        }
                        return offset;
                    }
                    get lineCount() {
                        return this.getLineOffsets().length;
                    }
                    static isIncremental(event) {
                        const candidate = event;
                        return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range !== undefined && (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
                    }
                    static isFull(event) {
                        const candidate = event;
                        return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
                    }
                    constructor(uri, languageId, version, content){
                        this._uri = uri;
                        this._languageId = languageId;
                        this._version = version;
                        this._content = content;
                        this._lineOffsets = undefined;
                    }
                }
                var TextDocument;
                (function(TextDocument) {
                    /**
     * Creates a new text document.
     *
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param version The document's initial version number.
     * @param content The document's content.
     */ function create(uri, languageId, version, content) {
                        return new FullTextDocument(uri, languageId, version, content);
                    }
                    TextDocument.create = create;
                    /**
     * Updates a TextDocument by modifying its content.
     *
     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.
     * @param changes the changes to apply to the document.
     * @param version the changes version for the document.
     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.
     *
     */ function update(document1, changes, version) {
                        if (document1 instanceof FullTextDocument) {
                            document1.update(changes, version);
                            return document1;
                        } else {
                            throw new Error('TextDocument.update: document must be created by TextDocument.create');
                        }
                    }
                    TextDocument.update = update;
                    function applyEdits(document1, edits) {
                        const text = document1.getText();
                        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b)=>{
                            const diff = a.range.start.line - b.range.start.line;
                            if (diff === 0) {
                                return a.range.start.character - b.range.start.character;
                            }
                            return diff;
                        });
                        let lastModifiedOffset = 0;
                        const spans = [];
                        for (const e of sortedEdits){
                            const startOffset = document1.offsetAt(e.range.start);
                            if (startOffset < lastModifiedOffset) {
                                throw new Error('Overlapping edit');
                            } else if (startOffset > lastModifiedOffset) {
                                spans.push(text.substring(lastModifiedOffset, startOffset));
                            }
                            if (e.newText.length) {
                                spans.push(e.newText);
                            }
                            lastModifiedOffset = document1.offsetAt(e.range.end);
                        }
                        spans.push(text.substr(lastModifiedOffset));
                        return spans.join('');
                    }
                    TextDocument.applyEdits = applyEdits;
                })(TextDocument || (TextDocument = {}));
                function mergeSort(data, compare) {
                    if (data.length <= 1) {
                        // sorted
                        return data;
                    }
                    const p = data.length / 2 | 0;
                    const left = data.slice(0, p);
                    const right = data.slice(p);
                    mergeSort(left, compare);
                    mergeSort(right, compare);
                    let leftIdx = 0;
                    let rightIdx = 0;
                    let i = 0;
                    while(leftIdx < left.length && rightIdx < right.length){
                        const ret = compare(left[leftIdx], right[rightIdx]);
                        if (ret <= 0) {
                            // smaller_equal -> take left to preserve order
                            data[i++] = left[leftIdx++];
                        } else {
                            // greater -> take right
                            data[i++] = right[rightIdx++];
                        }
                    }
                    while(leftIdx < left.length){
                        data[i++] = left[leftIdx++];
                    }
                    while(rightIdx < right.length){
                        data[i++] = right[rightIdx++];
                    }
                    return data;
                }
                function computeLineOffsets(text, isAtLineStart, textOffset = 0) {
                    const result = isAtLineStart ? [
                        textOffset
                    ] : [];
                    for(let i = 0; i < text.length; i++){
                        const ch = text.charCodeAt(i);
                        if (isEOL(ch)) {
                            if (ch === 13 /* CharCode.CarriageReturn */  && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */ ) {
                                i++;
                            }
                            result.push(textOffset + i + 1);
                        }
                    }
                    return result;
                }
                function isEOL(char) {
                    return char === 13 /* CharCode.CarriageReturn */  || char === 10 /* CharCode.LineFeed */ ;
                }
                function getWellformedRange(range) {
                    const start = range.start;
                    const end = range.end;
                    if (start.line > end.line || start.line === end.line && start.character > end.character) {
                        return {
                            start: end,
                            end: start
                        };
                    }
                    return range;
                }
                function getWellformedEdit(textEdit) {
                    const range = getWellformedRange(textEdit.range);
                    if (range !== textEdit.range) {
                        return {
                            newText: textEdit.newText,
                            range
                        };
                    }
                    return textEdit;
                }
            /***/ },
            /***/ 2852: /***/ (__unused_webpack___webpack_module__, __nested_webpack_exports__, __nested_webpack_require_871013__)=>{
                "use strict";
                __nested_webpack_require_871013__.r(__nested_webpack_exports__);
                /* harmony export */ __nested_webpack_require_871013__.d(__nested_webpack_exports__, {
                    /* harmony export */ AnnotatedTextEdit: ()=>/* binding */ AnnotatedTextEdit,
                    /* harmony export */ ChangeAnnotation: ()=>/* binding */ ChangeAnnotation,
                    /* harmony export */ ChangeAnnotationIdentifier: ()=>/* binding */ ChangeAnnotationIdentifier,
                    /* harmony export */ CodeAction: ()=>/* binding */ CodeAction,
                    /* harmony export */ CodeActionContext: ()=>/* binding */ CodeActionContext,
                    /* harmony export */ CodeActionKind: ()=>/* binding */ CodeActionKind,
                    /* harmony export */ CodeActionTriggerKind: ()=>/* binding */ CodeActionTriggerKind,
                    /* harmony export */ CodeDescription: ()=>/* binding */ CodeDescription,
                    /* harmony export */ CodeLens: ()=>/* binding */ CodeLens,
                    /* harmony export */ Color: ()=>/* binding */ Color,
                    /* harmony export */ ColorInformation: ()=>/* binding */ ColorInformation,
                    /* harmony export */ ColorPresentation: ()=>/* binding */ ColorPresentation,
                    /* harmony export */ Command: ()=>/* binding */ Command,
                    /* harmony export */ CompletionItem: ()=>/* binding */ CompletionItem,
                    /* harmony export */ CompletionItemKind: ()=>/* binding */ CompletionItemKind1,
                    /* harmony export */ CompletionItemLabelDetails: ()=>/* binding */ CompletionItemLabelDetails,
                    /* harmony export */ CompletionItemTag: ()=>/* binding */ CompletionItemTag,
                    /* harmony export */ CompletionList: ()=>/* binding */ CompletionList,
                    /* harmony export */ CreateFile: ()=>/* binding */ CreateFile,
                    /* harmony export */ DeleteFile: ()=>/* binding */ DeleteFile,
                    /* harmony export */ Diagnostic: ()=>/* binding */ Diagnostic,
                    /* harmony export */ DiagnosticRelatedInformation: ()=>/* binding */ DiagnosticRelatedInformation,
                    /* harmony export */ DiagnosticSeverity: ()=>/* binding */ DiagnosticSeverity,
                    /* harmony export */ DiagnosticTag: ()=>/* binding */ DiagnosticTag,
                    /* harmony export */ DocumentHighlight: ()=>/* binding */ DocumentHighlight,
                    /* harmony export */ DocumentHighlightKind: ()=>/* binding */ DocumentHighlightKind,
                    /* harmony export */ DocumentLink: ()=>/* binding */ DocumentLink,
                    /* harmony export */ DocumentSymbol: ()=>/* binding */ DocumentSymbol,
                    /* harmony export */ DocumentUri: ()=>/* binding */ DocumentUri,
                    /* harmony export */ EOL: ()=>/* binding */ EOL,
                    /* harmony export */ FoldingRange: ()=>/* binding */ FoldingRange,
                    /* harmony export */ FoldingRangeKind: ()=>/* binding */ FoldingRangeKind,
                    /* harmony export */ FormattingOptions: ()=>/* binding */ FormattingOptions,
                    /* harmony export */ Hover: ()=>/* binding */ Hover,
                    /* harmony export */ InlayHint: ()=>/* binding */ InlayHint,
                    /* harmony export */ InlayHintKind: ()=>/* binding */ InlayHintKind,
                    /* harmony export */ InlayHintLabelPart: ()=>/* binding */ InlayHintLabelPart,
                    /* harmony export */ InlineCompletionContext: ()=>/* binding */ InlineCompletionContext,
                    /* harmony export */ InlineCompletionItem: ()=>/* binding */ InlineCompletionItem,
                    /* harmony export */ InlineCompletionList: ()=>/* binding */ InlineCompletionList,
                    /* harmony export */ InlineCompletionTriggerKind: ()=>/* binding */ InlineCompletionTriggerKind,
                    /* harmony export */ InlineValueContext: ()=>/* binding */ InlineValueContext,
                    /* harmony export */ InlineValueEvaluatableExpression: ()=>/* binding */ InlineValueEvaluatableExpression,
                    /* harmony export */ InlineValueText: ()=>/* binding */ InlineValueText,
                    /* harmony export */ InlineValueVariableLookup: ()=>/* binding */ InlineValueVariableLookup,
                    /* harmony export */ InsertReplaceEdit: ()=>/* binding */ InsertReplaceEdit,
                    /* harmony export */ InsertTextFormat: ()=>/* binding */ InsertTextFormat1,
                    /* harmony export */ InsertTextMode: ()=>/* binding */ InsertTextMode,
                    /* harmony export */ Location: ()=>/* binding */ Location,
                    /* harmony export */ LocationLink: ()=>/* binding */ LocationLink,
                    /* harmony export */ MarkedString: ()=>/* binding */ MarkedString1,
                    /* harmony export */ MarkupContent: ()=>/* binding */ MarkupContent1,
                    /* harmony export */ MarkupKind: ()=>/* binding */ MarkupKind,
                    /* harmony export */ OptionalVersionedTextDocumentIdentifier: ()=>/* binding */ OptionalVersionedTextDocumentIdentifier,
                    /* harmony export */ ParameterInformation: ()=>/* binding */ ParameterInformation,
                    /* harmony export */ Position: ()=>/* binding */ Position,
                    /* harmony export */ Range: ()=>/* binding */ Range,
                    /* harmony export */ RenameFile: ()=>/* binding */ RenameFile,
                    /* harmony export */ SelectedCompletionInfo: ()=>/* binding */ SelectedCompletionInfo,
                    /* harmony export */ SelectionRange: ()=>/* binding */ SelectionRange,
                    /* harmony export */ SemanticTokenModifiers: ()=>/* binding */ SemanticTokenModifiers,
                    /* harmony export */ SemanticTokenTypes: ()=>/* binding */ SemanticTokenTypes,
                    /* harmony export */ SemanticTokens: ()=>/* binding */ SemanticTokens,
                    /* harmony export */ SignatureInformation: ()=>/* binding */ SignatureInformation,
                    /* harmony export */ StringValue: ()=>/* binding */ StringValue,
                    /* harmony export */ SymbolInformation: ()=>/* binding */ SymbolInformation,
                    /* harmony export */ SymbolKind: ()=>/* binding */ SymbolKind,
                    /* harmony export */ SymbolTag: ()=>/* binding */ SymbolTag,
                    /* harmony export */ TextDocument: ()=>/* binding */ TextDocument,
                    /* harmony export */ TextDocumentEdit: ()=>/* binding */ TextDocumentEdit,
                    /* harmony export */ TextDocumentIdentifier: ()=>/* binding */ TextDocumentIdentifier,
                    /* harmony export */ TextDocumentItem: ()=>/* binding */ TextDocumentItem,
                    /* harmony export */ TextEdit: ()=>/* binding */ TextEdit,
                    /* harmony export */ URI: ()=>/* binding */ URI1,
                    /* harmony export */ VersionedTextDocumentIdentifier: ()=>/* binding */ VersionedTextDocumentIdentifier,
                    /* harmony export */ WorkspaceChange: ()=>/* binding */ WorkspaceChange,
                    /* harmony export */ WorkspaceEdit: ()=>/* binding */ WorkspaceEdit,
                    /* harmony export */ WorkspaceFolder: ()=>/* binding */ WorkspaceFolder,
                    /* harmony export */ WorkspaceSymbol: ()=>/* binding */ WorkspaceSymbol,
                    /* harmony export */ integer: ()=>/* binding */ integer,
                    /* harmony export */ uinteger: ()=>/* binding */ uinteger
                });
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var DocumentUri;
                (function(DocumentUri) {
                    function is(value) {
                        return typeof value === 'string';
                    }
                    DocumentUri.is = is;
                })(DocumentUri || (DocumentUri = {}));
                var URI1;
                (function(URI1) {
                    function is(value) {
                        return typeof value === 'string';
                    }
                    URI1.is = is;
                })(URI1 || (URI1 = {}));
                var integer;
                (function(integer) {
                    integer.MIN_VALUE = -2147483648;
                    integer.MAX_VALUE = 2147483647;
                    function is(value) {
                        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;
                    }
                    integer.is = is;
                })(integer || (integer = {}));
                var uinteger;
                (function(uinteger) {
                    uinteger.MIN_VALUE = 0;
                    uinteger.MAX_VALUE = 2147483647;
                    function is(value) {
                        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;
                    }
                    uinteger.is = is;
                })(uinteger || (uinteger = {}));
                /**
 * The Position namespace provides helper functions to work with
 * {@link Position} literals.
 */ var Position;
                (function(Position) {
                    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */ function create(line, character) {
                        if (line === Number.MAX_VALUE) {
                            line = uinteger.MAX_VALUE;
                        }
                        if (character === Number.MAX_VALUE) {
                            character = uinteger.MAX_VALUE;
                        }
                        return {
                            line,
                            character
                        };
                    }
                    Position.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Position} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
                    }
                    Position.is = is;
                })(Position || (Position = {}));
                /**
 * The Range namespace provides helper functions to work with
 * {@link Range} literals.
 */ var Range;
                (function(Range) {
                    function create(one, two, three, four) {
                        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
                            return {
                                start: Position.create(one, two),
                                end: Position.create(three, four)
                            };
                        } else if (Position.is(one) && Position.is(two)) {
                            return {
                                start: one,
                                end: two
                            };
                        } else {
                            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);
                        }
                    }
                    Range.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Range} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
                    }
                    Range.is = is;
                })(Range || (Range = {}));
                /**
 * The Location namespace provides helper functions to work with
 * {@link Location} literals.
 */ var Location;
                (function(Location) {
                    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */ function create(uri, range) {
                        return {
                            uri,
                            range
                        };
                    }
                    Location.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Location} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
                    }
                    Location.is = is;
                })(Location || (Location = {}));
                /**
 * The LocationLink namespace provides helper functions to work with
 * {@link LocationLink} literals.
 */ var LocationLink;
                (function(LocationLink) {
                    /**
     * Creates a LocationLink literal.
     * @param targetUri The definition's uri.
     * @param targetRange The full range of the definition.
     * @param targetSelectionRange The span of the symbol definition at the target.
     * @param originSelectionRange The span of the symbol being defined in the originating source file.
     */ function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
                        return {
                            targetUri,
                            targetRange,
                            targetSelectionRange,
                            originSelectionRange
                        };
                    }
                    LocationLink.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link LocationLink} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range.is(candidate.targetSelectionRange) && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
                    }
                    LocationLink.is = is;
                })(LocationLink || (LocationLink = {}));
                /**
 * The Color namespace provides helper functions to work with
 * {@link Color} literals.
 */ var Color;
                (function(Color) {
                    /**
     * Creates a new Color literal.
     */ function create(red, green, blue, alpha) {
                        return {
                            red,
                            green,
                            blue,
                            alpha
                        };
                    }
                    Color.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Color} interface.
     */ function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);
                    }
                    Color.is = is;
                })(Color || (Color = {}));
                /**
 * The ColorInformation namespace provides helper functions to work with
 * {@link ColorInformation} literals.
 */ var ColorInformation;
                (function(ColorInformation) {
                    /**
     * Creates a new ColorInformation literal.
     */ function create(range, color) {
                        return {
                            range,
                            color
                        };
                    }
                    ColorInformation.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */ function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
                    }
                    ColorInformation.is = is;
                })(ColorInformation || (ColorInformation = {}));
                /**
 * The Color namespace provides helper functions to work with
 * {@link ColorPresentation} literals.
 */ var ColorPresentation;
                (function(ColorPresentation) {
                    /**
     * Creates a new ColorInformation literal.
     */ function create(label, textEdit, additionalTextEdits) {
                        return {
                            label,
                            textEdit,
                            additionalTextEdits
                        };
                    }
                    ColorPresentation.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */ function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
                    }
                    ColorPresentation.is = is;
                })(ColorPresentation || (ColorPresentation = {}));
                /**
 * A set of predefined range kinds.
 */ var FoldingRangeKind;
                (function(FoldingRangeKind) {
                    /**
     * Folding range for a comment
     */ FoldingRangeKind.Comment = 'comment';
                    /**
     * Folding range for an import or include
     */ FoldingRangeKind.Imports = 'imports';
                    /**
     * Folding range for a region (e.g. `#region`)
     */ FoldingRangeKind.Region = 'region';
                })(FoldingRangeKind || (FoldingRangeKind = {}));
                /**
 * The folding range namespace provides helper functions to work with
 * {@link FoldingRange} literals.
 */ var FoldingRange;
                (function(FoldingRange) {
                    /**
     * Creates a new FoldingRange literal.
     */ function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
                        const result = {
                            startLine,
                            endLine
                        };
                        if (Is.defined(startCharacter)) {
                            result.startCharacter = startCharacter;
                        }
                        if (Is.defined(endCharacter)) {
                            result.endCharacter = endCharacter;
                        }
                        if (Is.defined(kind)) {
                            result.kind = kind;
                        }
                        if (Is.defined(collapsedText)) {
                            result.collapsedText = collapsedText;
                        }
                        return result;
                    }
                    FoldingRange.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link FoldingRange} interface.
     */ function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
                    }
                    FoldingRange.is = is;
                })(FoldingRange || (FoldingRange = {}));
                /**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * {@link DiagnosticRelatedInformation} literals.
 */ var DiagnosticRelatedInformation;
                (function(DiagnosticRelatedInformation) {
                    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */ function create(location, message) {
                        return {
                            location,
                            message
                        };
                    }
                    DiagnosticRelatedInformation.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
                    }
                    DiagnosticRelatedInformation.is = is;
                })(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
                /**
 * The diagnostic's severity.
 */ var DiagnosticSeverity;
                (function(DiagnosticSeverity) {
                    /**
     * Reports an error.
     */ DiagnosticSeverity.Error = 1;
                    /**
     * Reports a warning.
     */ DiagnosticSeverity.Warning = 2;
                    /**
     * Reports an information.
     */ DiagnosticSeverity.Information = 3;
                    /**
     * Reports a hint.
     */ DiagnosticSeverity.Hint = 4;
                })(DiagnosticSeverity || (DiagnosticSeverity = {}));
                /**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */ var DiagnosticTag;
                (function(DiagnosticTag) {
                    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out instead of having
     * an error squiggle.
     */ DiagnosticTag.Unnecessary = 1;
                    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */ DiagnosticTag.Deprecated = 2;
                })(DiagnosticTag || (DiagnosticTag = {}));
                /**
 * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
 *
 * @since 3.16.0
 */ var CodeDescription;
                (function(CodeDescription) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.href);
                    }
                    CodeDescription.is = is;
                })(CodeDescription || (CodeDescription = {}));
                /**
 * The Diagnostic namespace provides helper functions to work with
 * {@link Diagnostic} literals.
 */ var Diagnostic;
                (function(Diagnostic) {
                    /**
     * Creates a new Diagnostic literal.
     */ function create(range, message, severity, code, source, relatedInformation) {
                        let result = {
                            range,
                            message
                        };
                        if (Is.defined(severity)) {
                            result.severity = severity;
                        }
                        if (Is.defined(code)) {
                            result.code = code;
                        }
                        if (Is.defined(source)) {
                            result.source = source;
                        }
                        if (Is.defined(relatedInformation)) {
                            result.relatedInformation = relatedInformation;
                        }
                        return result;
                    }
                    Diagnostic.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Diagnostic} interface.
     */ function is(value) {
                        var _a;
                        let candidate = value;
                        return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
                    }
                    Diagnostic.is = is;
                })(Diagnostic || (Diagnostic = {}));
                /**
 * The Command namespace provides helper functions to work with
 * {@link Command} literals.
 */ var Command;
                (function(Command) {
                    /**
     * Creates a new Command literal.
     */ function create(title, command, ...args) {
                        let result = {
                            title,
                            command
                        };
                        if (Is.defined(args) && args.length > 0) {
                            result.arguments = args;
                        }
                        return result;
                    }
                    Command.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Command} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
                    }
                    Command.is = is;
                })(Command || (Command = {}));
                /**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */ var TextEdit;
                (function(TextEdit) {
                    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */ function replace(range, newText) {
                        return {
                            range,
                            newText
                        };
                    }
                    TextEdit.replace = replace;
                    /**
     * Creates an insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */ function insert(position, newText) {
                        return {
                            range: {
                                start: position,
                                end: position
                            },
                            newText
                        };
                    }
                    TextEdit.insert = insert;
                    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */ function del(range) {
                        return {
                            range,
                            newText: ''
                        };
                    }
                    TextEdit.del = del;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range.is(candidate.range);
                    }
                    TextEdit.is = is;
                })(TextEdit || (TextEdit = {}));
                var ChangeAnnotation;
                (function(ChangeAnnotation) {
                    function create(label, needsConfirmation, description) {
                        const result = {
                            label
                        };
                        if (needsConfirmation !== undefined) {
                            result.needsConfirmation = needsConfirmation;
                        }
                        if (description !== undefined) {
                            result.description = description;
                        }
                        return result;
                    }
                    ChangeAnnotation.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) && (Is.string(candidate.description) || candidate.description === undefined);
                    }
                    ChangeAnnotation.is = is;
                })(ChangeAnnotation || (ChangeAnnotation = {}));
                var ChangeAnnotationIdentifier;
                (function(ChangeAnnotationIdentifier) {
                    function is(value) {
                        const candidate = value;
                        return Is.string(candidate);
                    }
                    ChangeAnnotationIdentifier.is = is;
                })(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
                var AnnotatedTextEdit;
                (function(AnnotatedTextEdit) {
                    /**
     * Creates an annotated replace text edit.
     *
     * @param range The range of text to be replaced.
     * @param newText The new text.
     * @param annotation The annotation.
     */ function replace(range, newText, annotation) {
                        return {
                            range,
                            newText,
                            annotationId: annotation
                        };
                    }
                    AnnotatedTextEdit.replace = replace;
                    /**
     * Creates an annotated insert text edit.
     *
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     * @param annotation The annotation.
     */ function insert(position, newText, annotation) {
                        return {
                            range: {
                                start: position,
                                end: position
                            },
                            newText,
                            annotationId: annotation
                        };
                    }
                    AnnotatedTextEdit.insert = insert;
                    /**
     * Creates an annotated delete text edit.
     *
     * @param range The range of text to be deleted.
     * @param annotation The annotation.
     */ function del(range, annotation) {
                        return {
                            range,
                            newText: '',
                            annotationId: annotation
                        };
                    }
                    AnnotatedTextEdit.del = del;
                    function is(value) {
                        const candidate = value;
                        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
                    }
                    AnnotatedTextEdit.is = is;
                })(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
                /**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */ var TextDocumentEdit;
                (function(TextDocumentEdit) {
                    /**
     * Creates a new `TextDocumentEdit`
     */ function create(textDocument, edits) {
                        return {
                            textDocument,
                            edits
                        };
                    }
                    TextDocumentEdit.create = create;
                    function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
                    }
                    TextDocumentEdit.is = is;
                })(TextDocumentEdit || (TextDocumentEdit = {}));
                var CreateFile;
                (function(CreateFile) {
                    function create(uri, options, annotation) {
                        let result = {
                            kind: 'create',
                            uri
                        };
                        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
                            result.options = options;
                        }
                        if (annotation !== undefined) {
                            result.annotationId = annotation;
                        }
                        return result;
                    }
                    CreateFile.create = create;
                    function is(value) {
                        let candidate = value;
                        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined || (candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
                    }
                    CreateFile.is = is;
                })(CreateFile || (CreateFile = {}));
                var RenameFile;
                (function(RenameFile) {
                    function create(oldUri, newUri, options, annotation) {
                        let result = {
                            kind: 'rename',
                            oldUri,
                            newUri
                        };
                        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
                            result.options = options;
                        }
                        if (annotation !== undefined) {
                            result.annotationId = annotation;
                        }
                        return result;
                    }
                    RenameFile.create = create;
                    function is(value) {
                        let candidate = value;
                        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined || (candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
                    }
                    RenameFile.is = is;
                })(RenameFile || (RenameFile = {}));
                var DeleteFile;
                (function(DeleteFile) {
                    function create(uri, options, annotation) {
                        let result = {
                            kind: 'delete',
                            uri
                        };
                        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {
                            result.options = options;
                        }
                        if (annotation !== undefined) {
                            result.annotationId = annotation;
                        }
                        return result;
                    }
                    DeleteFile.create = create;
                    function is(value) {
                        let candidate = value;
                        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined || (candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
                    }
                    DeleteFile.is = is;
                })(DeleteFile || (DeleteFile = {}));
                var WorkspaceEdit;
                (function(WorkspaceEdit) {
                    function is(value) {
                        let candidate = value;
                        return candidate && (candidate.changes !== undefined || candidate.documentChanges !== undefined) && (candidate.documentChanges === undefined || candidate.documentChanges.every((change)=>{
                            if (Is.string(change.kind)) {
                                return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                            } else {
                                return TextDocumentEdit.is(change);
                            }
                        }));
                    }
                    WorkspaceEdit.is = is;
                })(WorkspaceEdit || (WorkspaceEdit = {}));
                class TextEditChangeImpl {
                    insert(position, newText, annotation) {
                        let edit;
                        let id;
                        if (annotation === undefined) {
                            edit = TextEdit.insert(position, newText);
                        } else if (ChangeAnnotationIdentifier.is(annotation)) {
                            id = annotation;
                            edit = AnnotatedTextEdit.insert(position, newText, annotation);
                        } else {
                            this.assertChangeAnnotations(this.changeAnnotations);
                            id = this.changeAnnotations.manage(annotation);
                            edit = AnnotatedTextEdit.insert(position, newText, id);
                        }
                        this.edits.push(edit);
                        if (id !== undefined) {
                            return id;
                        }
                    }
                    replace(range, newText, annotation) {
                        let edit;
                        let id;
                        if (annotation === undefined) {
                            edit = TextEdit.replace(range, newText);
                        } else if (ChangeAnnotationIdentifier.is(annotation)) {
                            id = annotation;
                            edit = AnnotatedTextEdit.replace(range, newText, annotation);
                        } else {
                            this.assertChangeAnnotations(this.changeAnnotations);
                            id = this.changeAnnotations.manage(annotation);
                            edit = AnnotatedTextEdit.replace(range, newText, id);
                        }
                        this.edits.push(edit);
                        if (id !== undefined) {
                            return id;
                        }
                    }
                    delete(range, annotation) {
                        let edit;
                        let id;
                        if (annotation === undefined) {
                            edit = TextEdit.del(range);
                        } else if (ChangeAnnotationIdentifier.is(annotation)) {
                            id = annotation;
                            edit = AnnotatedTextEdit.del(range, annotation);
                        } else {
                            this.assertChangeAnnotations(this.changeAnnotations);
                            id = this.changeAnnotations.manage(annotation);
                            edit = AnnotatedTextEdit.del(range, id);
                        }
                        this.edits.push(edit);
                        if (id !== undefined) {
                            return id;
                        }
                    }
                    add(edit) {
                        this.edits.push(edit);
                    }
                    all() {
                        return this.edits;
                    }
                    clear() {
                        this.edits.splice(0, this.edits.length);
                    }
                    assertChangeAnnotations(value) {
                        if (value === undefined) {
                            throw new Error(`Text edit change is not configured to manage change annotations.`);
                        }
                    }
                    constructor(edits, changeAnnotations){
                        this.edits = edits;
                        this.changeAnnotations = changeAnnotations;
                    }
                }
                /**
 * A helper class
 */ class ChangeAnnotations {
                    all() {
                        return this._annotations;
                    }
                    get size() {
                        return this._size;
                    }
                    manage(idOrAnnotation, annotation) {
                        let id;
                        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
                            id = idOrAnnotation;
                        } else {
                            id = this.nextId();
                            annotation = idOrAnnotation;
                        }
                        if (this._annotations[id] !== undefined) {
                            throw new Error(`Id ${id} is already in use.`);
                        }
                        if (annotation === undefined) {
                            throw new Error(`No annotation provided for id ${id}`);
                        }
                        this._annotations[id] = annotation;
                        this._size++;
                        return id;
                    }
                    nextId() {
                        this._counter++;
                        return this._counter.toString();
                    }
                    constructor(annotations){
                        this._annotations = annotations === undefined ? Object.create(null) : annotations;
                        this._counter = 0;
                        this._size = 0;
                    }
                }
                /**
 * A workspace change helps constructing changes to a workspace.
 */ class WorkspaceChange {
                    /**
     * Returns the underlying {@link WorkspaceEdit} literal
     * use to be returned from a workspace edit operation like rename.
     */ get edit() {
                        this.initDocumentChanges();
                        if (this._changeAnnotations !== undefined) {
                            if (this._changeAnnotations.size === 0) {
                                this._workspaceEdit.changeAnnotations = undefined;
                            } else {
                                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                            }
                        }
                        return this._workspaceEdit;
                    }
                    getTextEditChange(key) {
                        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
                            this.initDocumentChanges();
                            if (this._workspaceEdit.documentChanges === undefined) {
                                throw new Error('Workspace edit is not configured for document changes.');
                            }
                            const textDocument = {
                                uri: key.uri,
                                version: key.version
                            };
                            let result = this._textEditChanges[textDocument.uri];
                            if (!result) {
                                const edits = [];
                                const textDocumentEdit = {
                                    textDocument,
                                    edits
                                };
                                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                                this._textEditChanges[textDocument.uri] = result;
                            }
                            return result;
                        } else {
                            this.initChanges();
                            if (this._workspaceEdit.changes === undefined) {
                                throw new Error('Workspace edit is not configured for normal text edit changes.');
                            }
                            let result = this._textEditChanges[key];
                            if (!result) {
                                let edits = [];
                                this._workspaceEdit.changes[key] = edits;
                                result = new TextEditChangeImpl(edits);
                                this._textEditChanges[key] = result;
                            }
                            return result;
                        }
                    }
                    initDocumentChanges() {
                        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
                            this._changeAnnotations = new ChangeAnnotations();
                            this._workspaceEdit.documentChanges = [];
                            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                        }
                    }
                    initChanges() {
                        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
                            this._workspaceEdit.changes = Object.create(null);
                        }
                    }
                    createFile(uri, optionsOrAnnotation, options) {
                        this.initDocumentChanges();
                        if (this._workspaceEdit.documentChanges === undefined) {
                            throw new Error('Workspace edit is not configured for document changes.');
                        }
                        let annotation;
                        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                            annotation = optionsOrAnnotation;
                        } else {
                            options = optionsOrAnnotation;
                        }
                        let operation;
                        let id;
                        if (annotation === undefined) {
                            operation = CreateFile.create(uri, options);
                        } else {
                            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                            operation = CreateFile.create(uri, options, id);
                        }
                        this._workspaceEdit.documentChanges.push(operation);
                        if (id !== undefined) {
                            return id;
                        }
                    }
                    renameFile(oldUri, newUri, optionsOrAnnotation, options) {
                        this.initDocumentChanges();
                        if (this._workspaceEdit.documentChanges === undefined) {
                            throw new Error('Workspace edit is not configured for document changes.');
                        }
                        let annotation;
                        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                            annotation = optionsOrAnnotation;
                        } else {
                            options = optionsOrAnnotation;
                        }
                        let operation;
                        let id;
                        if (annotation === undefined) {
                            operation = RenameFile.create(oldUri, newUri, options);
                        } else {
                            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                            operation = RenameFile.create(oldUri, newUri, options, id);
                        }
                        this._workspaceEdit.documentChanges.push(operation);
                        if (id !== undefined) {
                            return id;
                        }
                    }
                    deleteFile(uri, optionsOrAnnotation, options) {
                        this.initDocumentChanges();
                        if (this._workspaceEdit.documentChanges === undefined) {
                            throw new Error('Workspace edit is not configured for document changes.');
                        }
                        let annotation;
                        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                            annotation = optionsOrAnnotation;
                        } else {
                            options = optionsOrAnnotation;
                        }
                        let operation;
                        let id;
                        if (annotation === undefined) {
                            operation = DeleteFile.create(uri, options);
                        } else {
                            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                            operation = DeleteFile.create(uri, options, id);
                        }
                        this._workspaceEdit.documentChanges.push(operation);
                        if (id !== undefined) {
                            return id;
                        }
                    }
                    constructor(workspaceEdit){
                        this._textEditChanges = Object.create(null);
                        if (workspaceEdit !== undefined) {
                            this._workspaceEdit = workspaceEdit;
                            if (workspaceEdit.documentChanges) {
                                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                                workspaceEdit.documentChanges.forEach((change)=>{
                                    if (TextDocumentEdit.is(change)) {
                                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);
                                        this._textEditChanges[change.textDocument.uri] = textEditChange;
                                    }
                                });
                            } else if (workspaceEdit.changes) {
                                Object.keys(workspaceEdit.changes).forEach((key)=>{
                                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                                    this._textEditChanges[key] = textEditChange;
                                });
                            }
                        } else {
                            this._workspaceEdit = {};
                        }
                    }
                }
                /**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * {@link TextDocumentIdentifier} literals.
 */ var TextDocumentIdentifier;
                (function(TextDocumentIdentifier) {
                    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */ function create(uri) {
                        return {
                            uri
                        };
                    }
                    TextDocumentIdentifier.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri);
                    }
                    TextDocumentIdentifier.is = is;
                })(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
                /**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link VersionedTextDocumentIdentifier} literals.
 */ var VersionedTextDocumentIdentifier;
                (function(VersionedTextDocumentIdentifier) {
                    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */ function create(uri, version) {
                        return {
                            uri,
                            version
                        };
                    }
                    VersionedTextDocumentIdentifier.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
                    }
                    VersionedTextDocumentIdentifier.is = is;
                })(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
                /**
 * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link OptionalVersionedTextDocumentIdentifier} literals.
 */ var OptionalVersionedTextDocumentIdentifier;
                (function(OptionalVersionedTextDocumentIdentifier) {
                    /**
     * Creates a new OptionalVersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */ function create(uri, version) {
                        return {
                            uri,
                            version
                        };
                    }
                    OptionalVersionedTextDocumentIdentifier.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
                    }
                    OptionalVersionedTextDocumentIdentifier.is = is;
                })(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
                /**
 * The TextDocumentItem namespace provides helper functions to work with
 * {@link TextDocumentItem} literals.
 */ var TextDocumentItem;
                (function(TextDocumentItem) {
                    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */ function create(uri, languageId, version, text) {
                        return {
                            uri,
                            languageId,
                            version,
                            text
                        };
                    }
                    TextDocumentItem.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
                    }
                    TextDocumentItem.is = is;
                })(TextDocumentItem || (TextDocumentItem = {}));
                /**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */ var MarkupKind;
                (function(MarkupKind) {
                    /**
     * Plain text is supported as a content format
     */ MarkupKind.PlainText = 'plaintext';
                    /**
     * Markdown is supported as a content format
     */ MarkupKind.Markdown = 'markdown';
                    /**
     * Checks whether the given value is a value of the {@link MarkupKind} type.
     */ function is(value) {
                        const candidate = value;
                        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
                    }
                    MarkupKind.is = is;
                })(MarkupKind || (MarkupKind = {}));
                var MarkupContent1;
                (function(MarkupContent1) {
                    /**
     * Checks whether the given value conforms to the {@link MarkupContent} interface.
     */ function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
                    }
                    MarkupContent1.is = is;
                })(MarkupContent1 || (MarkupContent1 = {}));
                /**
 * The kind of a completion entry.
 */ var CompletionItemKind1;
                (function(CompletionItemKind1) {
                    CompletionItemKind1.Text = 1;
                    CompletionItemKind1.Method = 2;
                    CompletionItemKind1.Function = 3;
                    CompletionItemKind1.Constructor = 4;
                    CompletionItemKind1.Field = 5;
                    CompletionItemKind1.Variable = 6;
                    CompletionItemKind1.Class = 7;
                    CompletionItemKind1.Interface = 8;
                    CompletionItemKind1.Module = 9;
                    CompletionItemKind1.Property = 10;
                    CompletionItemKind1.Unit = 11;
                    CompletionItemKind1.Value = 12;
                    CompletionItemKind1.Enum = 13;
                    CompletionItemKind1.Keyword = 14;
                    CompletionItemKind1.Snippet = 15;
                    CompletionItemKind1.Color = 16;
                    CompletionItemKind1.File = 17;
                    CompletionItemKind1.Reference = 18;
                    CompletionItemKind1.Folder = 19;
                    CompletionItemKind1.EnumMember = 20;
                    CompletionItemKind1.Constant = 21;
                    CompletionItemKind1.Struct = 22;
                    CompletionItemKind1.Event = 23;
                    CompletionItemKind1.Operator = 24;
                    CompletionItemKind1.TypeParameter = 25;
                })(CompletionItemKind1 || (CompletionItemKind1 = {}));
                /**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */ var InsertTextFormat1;
                (function(InsertTextFormat1) {
                    /**
     * The primary text to be inserted is treated as a plain string.
     */ InsertTextFormat1.PlainText = 1;
                    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
     */ InsertTextFormat1.Snippet = 2;
                })(InsertTextFormat1 || (InsertTextFormat1 = {}));
                /**
 * Completion item tags are extra annotations that tweak the rendering of a completion
 * item.
 *
 * @since 3.15.0
 */ var CompletionItemTag;
                (function(CompletionItemTag) {
                    /**
     * Render a completion as obsolete, usually using a strike-out.
     */ CompletionItemTag.Deprecated = 1;
                })(CompletionItemTag || (CompletionItemTag = {}));
                /**
 * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
 *
 * @since 3.16.0
 */ var InsertReplaceEdit;
                (function(InsertReplaceEdit) {
                    /**
     * Creates a new insert / replace edit
     */ function create(newText, insert, replace) {
                        return {
                            newText,
                            insert,
                            replace
                        };
                    }
                    InsertReplaceEdit.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.
     */ function is(value) {
                        const candidate = value;
                        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
                    }
                    InsertReplaceEdit.is = is;
                })(InsertReplaceEdit || (InsertReplaceEdit = {}));
                /**
 * How whitespace and indentation is handled during completion
 * item insertion.
 *
 * @since 3.16.0
 */ var InsertTextMode;
                (function(InsertTextMode) {
                    /**
     * The insertion or replace strings is taken as it is. If the
     * value is multi line the lines below the cursor will be
     * inserted using the indentation defined in the string value.
     * The client will not apply any kind of adjustments to the
     * string.
     */ InsertTextMode.asIs = 1;
                    /**
     * The editor adjusts leading whitespace of new lines so that
     * they match the indentation up to the cursor of the line for
     * which the item is accepted.
     *
     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
     * multi line completion item is indented using 2 tabs and all
     * following lines inserted will be indented using 2 tabs as well.
     */ InsertTextMode.adjustIndentation = 2;
                })(InsertTextMode || (InsertTextMode = {}));
                var CompletionItemLabelDetails;
                (function(CompletionItemLabelDetails) {
                    function is(value) {
                        const candidate = value;
                        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) && (Is.string(candidate.description) || candidate.description === undefined);
                    }
                    CompletionItemLabelDetails.is = is;
                })(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
                /**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */ var CompletionItem;
                (function(CompletionItem) {
                    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */ function create(label) {
                        return {
                            label
                        };
                    }
                    CompletionItem.create = create;
                })(CompletionItem || (CompletionItem = {}));
                /**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */ var CompletionList;
                (function(CompletionList) {
                    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */ function create(items, isIncomplete) {
                        return {
                            items: items ? items : [],
                            isIncomplete: !!isIncomplete
                        };
                    }
                    CompletionList.create = create;
                })(CompletionList || (CompletionList = {}));
                var MarkedString1;
                (function(MarkedString1) {
                    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */ function fromPlainText(plainText) {
                        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
                    }
                    MarkedString1.fromPlainText = fromPlainText;
                    /**
     * Checks whether the given value conforms to the {@link MarkedString} type.
     */ function is(value) {
                        const candidate = value;
                        return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);
                    }
                    MarkedString1.is = is;
                })(MarkedString1 || (MarkedString1 = {}));
                var Hover;
                (function(Hover) {
                    /**
     * Checks whether the given value conforms to the {@link Hover} interface.
     */ function is(value) {
                        let candidate = value;
                        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent1.is(candidate.contents) || MarkedString1.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString1.is)) && (value.range === undefined || Range.is(value.range));
                    }
                    Hover.is = is;
                })(Hover || (Hover = {}));
                /**
 * The ParameterInformation namespace provides helper functions to work with
 * {@link ParameterInformation} literals.
 */ var ParameterInformation;
                (function(ParameterInformation) {
                    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */ function create(label, documentation) {
                        return documentation ? {
                            label,
                            documentation
                        } : {
                            label
                        };
                    }
                    ParameterInformation.create = create;
                })(ParameterInformation || (ParameterInformation = {}));
                /**
 * The SignatureInformation namespace provides helper functions to work with
 * {@link SignatureInformation} literals.
 */ var SignatureInformation;
                (function(SignatureInformation) {
                    function create(label, documentation, ...parameters) {
                        let result = {
                            label
                        };
                        if (Is.defined(documentation)) {
                            result.documentation = documentation;
                        }
                        if (Is.defined(parameters)) {
                            result.parameters = parameters;
                        } else {
                            result.parameters = [];
                        }
                        return result;
                    }
                    SignatureInformation.create = create;
                })(SignatureInformation || (SignatureInformation = {}));
                /**
 * A document highlight kind.
 */ var DocumentHighlightKind;
                (function(DocumentHighlightKind) {
                    /**
     * A textual occurrence.
     */ DocumentHighlightKind.Text = 1;
                    /**
     * Read-access of a symbol, like reading a variable.
     */ DocumentHighlightKind.Read = 2;
                    /**
     * Write-access of a symbol, like writing to a variable.
     */ DocumentHighlightKind.Write = 3;
                })(DocumentHighlightKind || (DocumentHighlightKind = {}));
                /**
 * DocumentHighlight namespace to provide helper functions to work with
 * {@link DocumentHighlight} literals.
 */ var DocumentHighlight;
                (function(DocumentHighlight) {
                    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     * @param kind The highlight kind
     */ function create(range, kind) {
                        let result = {
                            range
                        };
                        if (Is.number(kind)) {
                            result.kind = kind;
                        }
                        return result;
                    }
                    DocumentHighlight.create = create;
                })(DocumentHighlight || (DocumentHighlight = {}));
                /**
 * A symbol kind.
 */ var SymbolKind;
                (function(SymbolKind) {
                    SymbolKind.File = 1;
                    SymbolKind.Module = 2;
                    SymbolKind.Namespace = 3;
                    SymbolKind.Package = 4;
                    SymbolKind.Class = 5;
                    SymbolKind.Method = 6;
                    SymbolKind.Property = 7;
                    SymbolKind.Field = 8;
                    SymbolKind.Constructor = 9;
                    SymbolKind.Enum = 10;
                    SymbolKind.Interface = 11;
                    SymbolKind.Function = 12;
                    SymbolKind.Variable = 13;
                    SymbolKind.Constant = 14;
                    SymbolKind.String = 15;
                    SymbolKind.Number = 16;
                    SymbolKind.Boolean = 17;
                    SymbolKind.Array = 18;
                    SymbolKind.Object = 19;
                    SymbolKind.Key = 20;
                    SymbolKind.Null = 21;
                    SymbolKind.EnumMember = 22;
                    SymbolKind.Struct = 23;
                    SymbolKind.Event = 24;
                    SymbolKind.Operator = 25;
                    SymbolKind.TypeParameter = 26;
                })(SymbolKind || (SymbolKind = {}));
                /**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 *
 * @since 3.16
 */ var SymbolTag;
                (function(SymbolTag) {
                    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */ SymbolTag.Deprecated = 1;
                })(SymbolTag || (SymbolTag = {}));
                var SymbolInformation;
                (function(SymbolInformation) {
                    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol.
     * @param containerName The name of the symbol containing the symbol.
     */ function create(name, kind, range, uri, containerName) {
                        let result = {
                            name,
                            kind,
                            location: {
                                uri,
                                range
                            }
                        };
                        if (containerName) {
                            result.containerName = containerName;
                        }
                        return result;
                    }
                    SymbolInformation.create = create;
                })(SymbolInformation || (SymbolInformation = {}));
                var WorkspaceSymbol;
                (function(WorkspaceSymbol) {
                    /**
     * Create a new workspace symbol.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param uri The resource of the location of the symbol.
     * @param range An options range of the location.
     * @returns A WorkspaceSymbol.
     */ function create(name, kind, uri, range) {
                        return range !== undefined ? {
                            name,
                            kind,
                            location: {
                                uri,
                                range
                            }
                        } : {
                            name,
                            kind,
                            location: {
                                uri
                            }
                        };
                    }
                    WorkspaceSymbol.create = create;
                })(WorkspaceSymbol || (WorkspaceSymbol = {}));
                var DocumentSymbol;
                (function(DocumentSymbol) {
                    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param detail The detail of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the symbol.
     * @param selectionRange The selectionRange of the symbol.
     * @param children Children of the symbol.
     */ function create(name, detail, kind, range, selectionRange, children) {
                        let result = {
                            name,
                            detail,
                            kind,
                            range,
                            selectionRange
                        };
                        if (children !== undefined) {
                            result.children = children;
                        }
                        return result;
                    }
                    DocumentSymbol.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.
     */ function is(value) {
                        let candidate = value;
                        return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range.is(candidate.range) && Range.is(candidate.selectionRange) && (candidate.detail === undefined || Is.string(candidate.detail)) && (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) && (candidate.children === undefined || Array.isArray(candidate.children)) && (candidate.tags === undefined || Array.isArray(candidate.tags));
                    }
                    DocumentSymbol.is = is;
                })(DocumentSymbol || (DocumentSymbol = {}));
                /**
 * A set of predefined code action kinds
 */ var CodeActionKind;
                (function(CodeActionKind) {
                    /**
     * Empty kind.
     */ CodeActionKind.Empty = '';
                    /**
     * Base kind for quickfix actions: 'quickfix'
     */ CodeActionKind.QuickFix = 'quickfix';
                    /**
     * Base kind for refactoring actions: 'refactor'
     */ CodeActionKind.Refactor = 'refactor';
                    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */ CodeActionKind.RefactorExtract = 'refactor.extract';
                    /**
     * Base kind for refactoring inline actions: 'refactor.inline'
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */ CodeActionKind.RefactorInline = 'refactor.inline';
                    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */ CodeActionKind.RefactorRewrite = 'refactor.rewrite';
                    /**
     * Base kind for source actions: `source`
     *
     * Source code actions apply to the entire file.
     */ CodeActionKind.Source = 'source';
                    /**
     * Base kind for an organize imports source action: `source.organizeImports`
     */ CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
                    /**
     * Base kind for auto-fix source actions: `source.fixAll`.
     *
     * Fix all actions automatically fix errors that have a clear fix that do not require user input.
     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
     *
     * @since 3.15.0
     */ CodeActionKind.SourceFixAll = 'source.fixAll';
                })(CodeActionKind || (CodeActionKind = {}));
                /**
 * The reason why code actions were requested.
 *
 * @since 3.17.0
 */ var CodeActionTriggerKind;
                (function(CodeActionTriggerKind) {
                    /**
     * Code actions were explicitly requested by the user or by an extension.
     */ CodeActionTriggerKind.Invoked = 1;
                    /**
     * Code actions were requested automatically.
     *
     * This typically happens when current selection in a file changes, but can
     * also be triggered when file content changes.
     */ CodeActionTriggerKind.Automatic = 2;
                })(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
                /**
 * The CodeActionContext namespace provides helper functions to work with
 * {@link CodeActionContext} literals.
 */ var CodeActionContext;
                (function(CodeActionContext) {
                    /**
     * Creates a new CodeActionContext literal.
     */ function create(diagnostics, only, triggerKind) {
                        let result = {
                            diagnostics
                        };
                        if (only !== undefined && only !== null) {
                            result.only = only;
                        }
                        if (triggerKind !== undefined && triggerKind !== null) {
                            result.triggerKind = triggerKind;
                        }
                        return result;
                    }
                    CodeActionContext.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
                    }
                    CodeActionContext.is = is;
                })(CodeActionContext || (CodeActionContext = {}));
                var CodeAction;
                (function(CodeAction) {
                    function create(title, kindOrCommandOrEdit, kind) {
                        let result = {
                            title
                        };
                        let checkKind = true;
                        if (typeof kindOrCommandOrEdit === 'string') {
                            checkKind = false;
                            result.kind = kindOrCommandOrEdit;
                        } else if (Command.is(kindOrCommandOrEdit)) {
                            result.command = kindOrCommandOrEdit;
                        } else {
                            result.edit = kindOrCommandOrEdit;
                        }
                        if (checkKind && kind !== undefined) {
                            result.kind = kind;
                        }
                        return result;
                    }
                    CodeAction.create = create;
                    function is(value) {
                        let candidate = value;
                        return candidate && Is.string(candidate.title) && (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === undefined || Is.string(candidate.kind)) && (candidate.edit !== undefined || candidate.command !== undefined) && (candidate.command === undefined || Command.is(candidate.command)) && (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) && (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));
                    }
                    CodeAction.is = is;
                })(CodeAction || (CodeAction = {}));
                /**
 * The CodeLens namespace provides helper functions to work with
 * {@link CodeLens} literals.
 */ var CodeLens;
                (function(CodeLens) {
                    /**
     * Creates a new CodeLens literal.
     */ function create(range, data) {
                        let result = {
                            range
                        };
                        if (Is.defined(data)) {
                            result.data = data;
                        }
                        return result;
                    }
                    CodeLens.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link CodeLens} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
                    }
                    CodeLens.is = is;
                })(CodeLens || (CodeLens = {}));
                /**
 * The FormattingOptions namespace provides helper functions to work with
 * {@link FormattingOptions} literals.
 */ var FormattingOptions;
                (function(FormattingOptions) {
                    /**
     * Creates a new FormattingOptions literal.
     */ function create(tabSize, insertSpaces) {
                        return {
                            tabSize,
                            insertSpaces
                        };
                    }
                    FormattingOptions.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
                    }
                    FormattingOptions.is = is;
                })(FormattingOptions || (FormattingOptions = {}));
                /**
 * The DocumentLink namespace provides helper functions to work with
 * {@link DocumentLink} literals.
 */ var DocumentLink;
                (function(DocumentLink) {
                    /**
     * Creates a new DocumentLink literal.
     */ function create(range, target, data) {
                        return {
                            range,
                            target,
                            data
                        };
                    }
                    DocumentLink.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link DocumentLink} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
                    }
                    DocumentLink.is = is;
                })(DocumentLink || (DocumentLink = {}));
                /**
 * The SelectionRange namespace provides helper function to work with
 * SelectionRange literals.
 */ var SelectionRange;
                (function(SelectionRange) {
                    /**
     * Creates a new SelectionRange
     * @param range the range.
     * @param parent an optional parent.
     */ function create(range, parent) {
                        return {
                            range,
                            parent
                        };
                    }
                    SelectionRange.create = create;
                    function is(value) {
                        let candidate = value;
                        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
                    }
                    SelectionRange.is = is;
                })(SelectionRange || (SelectionRange = {}));
                /**
 * A set of predefined token types. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */ var SemanticTokenTypes;
                (function(SemanticTokenTypes) {
                    SemanticTokenTypes["namespace"] = "namespace";
                    /**
     * Represents a generic type. Acts as a fallback for types which can't be mapped to
     * a specific type like class or enum.
     */ SemanticTokenTypes["type"] = "type";
                    SemanticTokenTypes["class"] = "class";
                    SemanticTokenTypes["enum"] = "enum";
                    SemanticTokenTypes["interface"] = "interface";
                    SemanticTokenTypes["struct"] = "struct";
                    SemanticTokenTypes["typeParameter"] = "typeParameter";
                    SemanticTokenTypes["parameter"] = "parameter";
                    SemanticTokenTypes["variable"] = "variable";
                    SemanticTokenTypes["property"] = "property";
                    SemanticTokenTypes["enumMember"] = "enumMember";
                    SemanticTokenTypes["event"] = "event";
                    SemanticTokenTypes["function"] = "function";
                    SemanticTokenTypes["method"] = "method";
                    SemanticTokenTypes["macro"] = "macro";
                    SemanticTokenTypes["keyword"] = "keyword";
                    SemanticTokenTypes["modifier"] = "modifier";
                    SemanticTokenTypes["comment"] = "comment";
                    SemanticTokenTypes["string"] = "string";
                    SemanticTokenTypes["number"] = "number";
                    SemanticTokenTypes["regexp"] = "regexp";
                    SemanticTokenTypes["operator"] = "operator";
                    /**
     * @since 3.17.0
     */ SemanticTokenTypes["decorator"] = "decorator";
                })(SemanticTokenTypes || (SemanticTokenTypes = {}));
                /**
 * A set of predefined token modifiers. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */ var SemanticTokenModifiers;
                (function(SemanticTokenModifiers) {
                    SemanticTokenModifiers["declaration"] = "declaration";
                    SemanticTokenModifiers["definition"] = "definition";
                    SemanticTokenModifiers["readonly"] = "readonly";
                    SemanticTokenModifiers["static"] = "static";
                    SemanticTokenModifiers["deprecated"] = "deprecated";
                    SemanticTokenModifiers["abstract"] = "abstract";
                    SemanticTokenModifiers["async"] = "async";
                    SemanticTokenModifiers["modification"] = "modification";
                    SemanticTokenModifiers["documentation"] = "documentation";
                    SemanticTokenModifiers["defaultLibrary"] = "defaultLibrary";
                })(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokens;
                (function(SemanticTokens) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');
                    }
                    SemanticTokens.is = is;
                })(SemanticTokens || (SemanticTokens = {}));
                /**
 * The InlineValueText namespace provides functions to deal with InlineValueTexts.
 *
 * @since 3.17.0
 */ var InlineValueText;
                (function(InlineValueText) {
                    /**
     * Creates a new InlineValueText literal.
     */ function create(range, text) {
                        return {
                            range,
                            text
                        };
                    }
                    InlineValueText.create = create;
                    function is(value) {
                        const candidate = value;
                        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
                    }
                    InlineValueText.is = is;
                })(InlineValueText || (InlineValueText = {}));
                /**
 * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.
 *
 * @since 3.17.0
 */ var InlineValueVariableLookup;
                (function(InlineValueVariableLookup) {
                    /**
     * Creates a new InlineValueText literal.
     */ function create(range, variableName, caseSensitiveLookup) {
                        return {
                            range,
                            variableName,
                            caseSensitiveLookup
                        };
                    }
                    InlineValueVariableLookup.create = create;
                    function is(value) {
                        const candidate = value;
                        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === undefined);
                    }
                    InlineValueVariableLookup.is = is;
                })(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
                /**
 * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.
 *
 * @since 3.17.0
 */ var InlineValueEvaluatableExpression;
                (function(InlineValueEvaluatableExpression) {
                    /**
     * Creates a new InlineValueEvaluatableExpression literal.
     */ function create(range, expression) {
                        return {
                            range,
                            expression
                        };
                    }
                    InlineValueEvaluatableExpression.create = create;
                    function is(value) {
                        const candidate = value;
                        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === undefined);
                    }
                    InlineValueEvaluatableExpression.is = is;
                })(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
                /**
 * The InlineValueContext namespace provides helper functions to work with
 * {@link InlineValueContext} literals.
 *
 * @since 3.17.0
 */ var InlineValueContext;
                (function(InlineValueContext) {
                    /**
     * Creates a new InlineValueContext literal.
     */ function create(frameId, stoppedLocation) {
                        return {
                            frameId,
                            stoppedLocation
                        };
                    }
                    InlineValueContext.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.
     */ function is(value) {
                        const candidate = value;
                        return Is.defined(candidate) && Range.is(value.stoppedLocation);
                    }
                    InlineValueContext.is = is;
                })(InlineValueContext || (InlineValueContext = {}));
                /**
 * Inlay hint kinds.
 *
 * @since 3.17.0
 */ var InlayHintKind;
                (function(InlayHintKind) {
                    /**
     * An inlay hint that for a type annotation.
     */ InlayHintKind.Type = 1;
                    /**
     * An inlay hint that is for a parameter.
     */ InlayHintKind.Parameter = 2;
                    function is(value) {
                        return value === 1 || value === 2;
                    }
                    InlayHintKind.is = is;
                })(InlayHintKind || (InlayHintKind = {}));
                var InlayHintLabelPart;
                (function(InlayHintLabelPart) {
                    function create(value) {
                        return {
                            value
                        };
                    }
                    InlayHintLabelPart.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent1.is(candidate.tooltip)) && (candidate.location === undefined || Location.is(candidate.location)) && (candidate.command === undefined || Command.is(candidate.command));
                    }
                    InlayHintLabelPart.is = is;
                })(InlayHintLabelPart || (InlayHintLabelPart = {}));
                var InlayHint;
                (function(InlayHint) {
                    function create(position, label, kind) {
                        const result = {
                            position,
                            label
                        };
                        if (kind !== undefined) {
                            result.kind = kind;
                        }
                        return result;
                    }
                    InlayHint.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Position.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === undefined || InlayHintKind.is(candidate.kind)) && candidate.textEdits === undefined || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent1.is(candidate.tooltip)) && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));
                    }
                    InlayHint.is = is;
                })(InlayHint || (InlayHint = {}));
                var StringValue;
                (function(StringValue) {
                    function createSnippet(value) {
                        return {
                            kind: 'snippet',
                            value
                        };
                    }
                    StringValue.createSnippet = createSnippet;
                })(StringValue || (StringValue = {}));
                var InlineCompletionItem;
                (function(InlineCompletionItem) {
                    function create(insertText, filterText, range, command) {
                        return {
                            insertText,
                            filterText,
                            range,
                            command
                        };
                    }
                    InlineCompletionItem.create = create;
                })(InlineCompletionItem || (InlineCompletionItem = {}));
                var InlineCompletionList;
                (function(InlineCompletionList) {
                    function create(items) {
                        return {
                            items
                        };
                    }
                    InlineCompletionList.create = create;
                })(InlineCompletionList || (InlineCompletionList = {}));
                /**
 * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.
 *
 * @since 3.18.0
 * @proposed
 */ var InlineCompletionTriggerKind;
                (function(InlineCompletionTriggerKind) {
                    /**
     * Completion was triggered explicitly by a user gesture.
     */ InlineCompletionTriggerKind.Invoked = 0;
                    /**
     * Completion was triggered automatically while editing.
     */ InlineCompletionTriggerKind.Automatic = 1;
                })(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));
                var SelectedCompletionInfo;
                (function(SelectedCompletionInfo) {
                    function create(range, text) {
                        return {
                            range,
                            text
                        };
                    }
                    SelectedCompletionInfo.create = create;
                })(SelectedCompletionInfo || (SelectedCompletionInfo = {}));
                var InlineCompletionContext;
                (function(InlineCompletionContext) {
                    function create(triggerKind, selectedCompletionInfo) {
                        return {
                            triggerKind,
                            selectedCompletionInfo
                        };
                    }
                    InlineCompletionContext.create = create;
                })(InlineCompletionContext || (InlineCompletionContext = {}));
                var WorkspaceFolder;
                (function(WorkspaceFolder) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && URI1.is(candidate.uri) && Is.string(candidate.name);
                    }
                    WorkspaceFolder.is = is;
                })(WorkspaceFolder || (WorkspaceFolder = {}));
                const EOL = [
                    '\n',
                    '\r\n',
                    '\r'
                ];
                /**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */ var TextDocument;
                (function(TextDocument) {
                    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId The document's language Id.
     * @param version The document's version.
     * @param content The document's content.
     */ function create(uri, languageId, version, content) {
                        return new FullTextDocument(uri, languageId, version, content);
                    }
                    TextDocument.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link ITextDocument} interface.
     */ function is(value) {
                        let candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
                    }
                    TextDocument.is = is;
                    function applyEdits(document1, edits) {
                        let text = document1.getText();
                        let sortedEdits = mergeSort(edits, (a, b)=>{
                            let diff = a.range.start.line - b.range.start.line;
                            if (diff === 0) {
                                return a.range.start.character - b.range.start.character;
                            }
                            return diff;
                        });
                        let lastModifiedOffset = text.length;
                        for(let i = sortedEdits.length - 1; i >= 0; i--){
                            let e = sortedEdits[i];
                            let startOffset = document1.offsetAt(e.range.start);
                            let endOffset = document1.offsetAt(e.range.end);
                            if (endOffset <= lastModifiedOffset) {
                                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
                            } else {
                                throw new Error('Overlapping edit');
                            }
                            lastModifiedOffset = startOffset;
                        }
                        return text;
                    }
                    TextDocument.applyEdits = applyEdits;
                    function mergeSort(data, compare) {
                        if (data.length <= 1) {
                            // sorted
                            return data;
                        }
                        const p = data.length / 2 | 0;
                        const left = data.slice(0, p);
                        const right = data.slice(p);
                        mergeSort(left, compare);
                        mergeSort(right, compare);
                        let leftIdx = 0;
                        let rightIdx = 0;
                        let i = 0;
                        while(leftIdx < left.length && rightIdx < right.length){
                            let ret = compare(left[leftIdx], right[rightIdx]);
                            if (ret <= 0) {
                                // smaller_equal -> take left to preserve order
                                data[i++] = left[leftIdx++];
                            } else {
                                // greater -> take right
                                data[i++] = right[rightIdx++];
                            }
                        }
                        while(leftIdx < left.length){
                            data[i++] = left[leftIdx++];
                        }
                        while(rightIdx < right.length){
                            data[i++] = right[rightIdx++];
                        }
                        return data;
                    }
                })(TextDocument || (TextDocument = {}));
                /**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */ class FullTextDocument {
                    get uri() {
                        return this._uri;
                    }
                    get languageId() {
                        return this._languageId;
                    }
                    get version() {
                        return this._version;
                    }
                    getText(range) {
                        if (range) {
                            let start = this.offsetAt(range.start);
                            let end = this.offsetAt(range.end);
                            return this._content.substring(start, end);
                        }
                        return this._content;
                    }
                    update(event, version) {
                        this._content = event.text;
                        this._version = version;
                        this._lineOffsets = undefined;
                    }
                    getLineOffsets() {
                        if (this._lineOffsets === undefined) {
                            let lineOffsets = [];
                            let text = this._content;
                            let isLineStart = true;
                            for(let i = 0; i < text.length; i++){
                                if (isLineStart) {
                                    lineOffsets.push(i);
                                    isLineStart = false;
                                }
                                let ch = text.charAt(i);
                                isLineStart = ch === '\r' || ch === '\n';
                                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                                    i++;
                                }
                            }
                            if (isLineStart && text.length > 0) {
                                lineOffsets.push(text.length);
                            }
                            this._lineOffsets = lineOffsets;
                        }
                        return this._lineOffsets;
                    }
                    positionAt(offset) {
                        offset = Math.max(Math.min(offset, this._content.length), 0);
                        let lineOffsets = this.getLineOffsets();
                        let low = 0, high = lineOffsets.length;
                        if (high === 0) {
                            return Position.create(0, offset);
                        }
                        while(low < high){
                            let mid = Math.floor((low + high) / 2);
                            if (lineOffsets[mid] > offset) {
                                high = mid;
                            } else {
                                low = mid + 1;
                            }
                        }
                        // low is the least x for which the line offset is larger than the current offset
                        // or array.length if no line offset is larger than the current offset
                        let line = low - 1;
                        return Position.create(line, offset - lineOffsets[line]);
                    }
                    offsetAt(position) {
                        let lineOffsets = this.getLineOffsets();
                        if (position.line >= lineOffsets.length) {
                            return this._content.length;
                        } else if (position.line < 0) {
                            return 0;
                        }
                        let lineOffset = lineOffsets[position.line];
                        let nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
                        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
                    }
                    get lineCount() {
                        return this.getLineOffsets().length;
                    }
                    constructor(uri, languageId, version, content){
                        this._uri = uri;
                        this._languageId = languageId;
                        this._version = version;
                        this._content = content;
                        this._lineOffsets = undefined;
                    }
                }
                var Is;
                (function(Is) {
                    const toString = Object.prototype.toString;
                    function defined(value) {
                        return typeof value !== 'undefined';
                    }
                    Is.defined = defined;
                    function undefined1(value) {
                        return typeof value === 'undefined';
                    }
                    Is.undefined = undefined1;
                    function boolean(value) {
                        return value === true || value === false;
                    }
                    Is.boolean = boolean;
                    function string(value) {
                        return toString.call(value) === '[object String]';
                    }
                    Is.string = string;
                    function number(value) {
                        return toString.call(value) === '[object Number]';
                    }
                    Is.number = number;
                    function numberRange(value, min, max) {
                        return toString.call(value) === '[object Number]' && min <= value && value <= max;
                    }
                    Is.numberRange = numberRange;
                    function integer(value) {
                        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;
                    }
                    Is.integer = integer;
                    function uinteger(value) {
                        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;
                    }
                    Is.uinteger = uinteger;
                    function func(value) {
                        return toString.call(value) === '[object Function]';
                    }
                    Is.func = func;
                    function objectLiteral(value) {
                        // Strictly speaking class instances pass this check as well. Since the LSP
                        // doesn't use classes we ignore this for now. If we do we need to add something
                        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
                        return value !== null && typeof value === 'object';
                    }
                    Is.objectLiteral = objectLiteral;
                    function typedArray(value, check) {
                        return Array.isArray(value) && value.every(check);
                    }
                    Is.typedArray = typedArray;
                })(Is || (Is = {}));
            /***/ }
        };
        /************************************************************************/ /******/ // The module cache
        /******/ var __webpack_module_cache__ = {};
        /******/ /******/ // The require function
        /******/ function __nested_webpack_require_982010__(moduleId) {
            /******/ // Check if module is in cache
            /******/ var cachedModule = __webpack_module_cache__[moduleId];
            /******/ if (cachedModule !== undefined) {
                /******/ return cachedModule.exports;
            /******/ }
            /******/ // Create a new module (and put it into the cache)
            /******/ var module1 = __webpack_module_cache__[moduleId] = {
                /******/ // no module.id needed
                /******/ // no module.loaded needed
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ __webpack_modules__[moduleId].call(module1.exports, module1, module1.exports, __nested_webpack_require_982010__);
            /******/ /******/ // Return the exports of the module
            /******/ return module1.exports;
        /******/ }
        /******/ /************************************************************************/ /******/ /* webpack/runtime/compat get default export */ /******/ (()=>{
            /******/ // getDefaultExport function for compatibility with non-harmony modules
            /******/ __nested_webpack_require_982010__.n = (module1)=>{
                /******/ var getter = module1 && module1.__esModule ? /******/ ()=>module1['default'] : /******/ ()=>module1;
                /******/ __nested_webpack_require_982010__.d(getter, {
                    a: getter
                });
                /******/ return getter;
            /******/ };
        /******/ })();
        /******/ /******/ /* webpack/runtime/define property getters */ /******/ (()=>{
            /******/ // define getter functions for harmony exports
            /******/ __nested_webpack_require_982010__.d = (exports1, definition)=>{
                /******/ for(var key in definition){
                    /******/ if (__nested_webpack_require_982010__.o(definition, key) && !__nested_webpack_require_982010__.o(exports1, key)) {
                        /******/ Object.defineProperty(exports1, key, {
                            enumerable: true,
                            get: definition[key]
                        });
                    /******/ }
                /******/ }
            /******/ };
        /******/ })();
        /******/ /******/ /* webpack/runtime/global */ /******/ (()=>{
            /******/ __nested_webpack_require_982010__.g = function() {
                /******/ if (typeof globalThis === 'object') return globalThis;
                /******/ try {
                    /******/ return this || new Function('return this')();
                /******/ } catch (e) {
                    /******/ if (typeof window === 'object') return window;
                /******/ }
            /******/ }();
        /******/ })();
        /******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/ (()=>{
            /******/ __nested_webpack_require_982010__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
        /******/ })();
        /******/ /******/ /* webpack/runtime/make namespace object */ /******/ (()=>{
            /******/ // define __esModule on exports
            /******/ __nested_webpack_require_982010__.r = (exports1)=>{
                /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                    /******/ Object.defineProperty(exports1, Symbol.toStringTag, {
                        value: 'Module'
                    });
                /******/ }
                /******/ Object.defineProperty(exports1, '__esModule', {
                    value: true
                });
            /******/ };
        /******/ })();
        /******/ /************************************************************************/ var __nested_webpack_exports__ = {};
        // This entry need to be wrapped in an IIFE because it need to be in strict mode.
        (()=>{
            "use strict";
            // ESM COMPAT FLAG
            __nested_webpack_require_982010__.r(__nested_webpack_exports__);
            // EXPORTS
            __nested_webpack_require_982010__.d(__nested_webpack_exports__, {
                PhpService: ()=>/* binding */ PhpService
            });
            // EXTERNAL MODULE: ./src/services/base-service.ts
            var base_service = __nested_webpack_require_982010__(2125);
            // EXTERNAL MODULE: ./src/services/php/lib/php.js
            var php = __nested_webpack_require_982010__(4849);
            // EXTERNAL MODULE: ../../node_modules/vscode-languageserver-protocol/lib/browser/main.js
            var main = __nested_webpack_require_982010__(5501);
            // EXTERNAL MODULE: ./src/utils.ts
            var utils = __nested_webpack_require_982010__(7770);
            ; // CONCATENATED MODULE: ./src/ace/range-singleton.ts
            function _define_property(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }
            class AceRange {
                static getConstructor(editor) {
                    if (!AceRange._instance && editor) {
                        AceRange._instance = editor.getSelectionRange().constructor;
                    }
                    return AceRange._instance;
                }
            }
            _define_property(AceRange, "_instance", void 0);
            ; // CONCATENATED MODULE: ./src/type-converters/common-converters.ts
            var common_converters_CommonConverter;
            (function(CommonConverter1) {
                function normalizeRanges(completions) {
                    return completions && completions.map((el)=>{
                        if (el["range"]) {
                            el["range"] = toRange(el["range"]);
                        }
                        return el;
                    });
                }
                CommonConverter1.normalizeRanges = normalizeRanges;
                function cleanHtml(html) {
                    return html.replace(/<a\s/, "<a target='_blank' ");
                }
                CommonConverter1.cleanHtml = cleanHtml;
                function toRange(range) {
                    if (!range || !range.start || !range.end) {
                        return;
                    }
                    let Range = AceRange.getConstructor();
                    // @ts-ignore
                    return Range.fromPoints(range.start, range.end);
                }
                CommonConverter1.toRange = toRange;
                function convertKind(kind) {
                    switch(kind){
                        case "primitiveType":
                        case "keyword":
                            return main.CompletionItemKind.Keyword;
                        case "variable":
                        case "localVariable":
                            return main.CompletionItemKind.Variable;
                        case "memberVariable":
                        case "memberGetAccessor":
                        case "memberSetAccessor":
                            return main.CompletionItemKind.Field;
                        case "function":
                        case "memberFunction":
                        case "constructSignature":
                        case "callSignature":
                        case "indexSignature":
                            return main.CompletionItemKind.Function;
                        case "enum":
                            return main.CompletionItemKind.Enum;
                        case "module":
                            return main.CompletionItemKind.Module;
                        case "class":
                            return main.CompletionItemKind.Class;
                        case "interface":
                            return main.CompletionItemKind.Interface;
                        case "warning":
                            return main.CompletionItemKind.File;
                    }
                    return main.CompletionItemKind.Property;
                }
                CommonConverter1.convertKind = convertKind;
                function excludeByErrorMessage(diagnostics, errorMessagesToIgnore, fieldName = "message") {
                    if (!errorMessagesToIgnore) return diagnostics;
                    return diagnostics.filter((el)=>!(0, utils /* checkValueAgainstRegexpArray */ .Tk)(el[fieldName], errorMessagesToIgnore));
                }
                CommonConverter1.excludeByErrorMessage = excludeByErrorMessage;
            })(common_converters_CommonConverter || (common_converters_CommonConverter = {}));
            ; // CONCATENATED MODULE: ./src/type-converters/lsp/lsp-converters.ts
            function fromRange(range) {
                return {
                    start: {
                        line: range.start.row,
                        character: range.start.column
                    },
                    end: {
                        line: range.end.row,
                        character: range.end.column
                    }
                };
            }
            function rangeFromPositions(start, end) {
                return {
                    start: start,
                    end: end
                };
            }
            function toRange(range) {
                return {
                    start: {
                        row: range.start.line,
                        column: range.start.character
                    },
                    end: {
                        row: range.end.line,
                        column: range.end.character
                    }
                };
            }
            function fromPoint(point) {
                return {
                    line: point.row,
                    character: point.column
                };
            }
            function toPoint(position) {
                return {
                    row: position.line,
                    column: position.character
                };
            }
            function toAnnotations(diagnostics) {
                var _diagnostics;
                return (_diagnostics = diagnostics) === null || _diagnostics === void 0 ? void 0 : _diagnostics.map((el)=>{
                    return {
                        row: el.range.start.line,
                        column: el.range.start.character,
                        text: el.message,
                        type: el.severity === 1 ? "error" : el.severity === 2 ? "warning" : "info",
                        code: el.code
                    };
                });
            }
            function fromAnnotations(annotations) {
                var _annotations;
                return (_annotations = annotations) === null || _annotations === void 0 ? void 0 : _annotations.map((el)=>{
                    return {
                        range: {
                            start: {
                                line: el.row,
                                character: el.column
                            },
                            end: {
                                line: el.row,
                                character: el.column
                            }
                        },
                        message: el.text,
                        severity: el.type === "error" ? 1 : el.type === "warning" ? 2 : 3,
                        code: el["code"]
                    };
                });
            }
            function toCompletion(item) {
                var _item_textEdit, _item_command;
                let itemKind = item.kind;
                let kind = itemKind ? Object.keys(CompletionItemKind)[Object.values(CompletionItemKind).indexOf(itemKind)] : undefined;
                var _item_textEdit_newText, _ref;
                let text = (_ref = (_item_textEdit_newText = (_item_textEdit = item.textEdit) === null || _item_textEdit === void 0 ? void 0 : _item_textEdit.newText) !== null && _item_textEdit_newText !== void 0 ? _item_textEdit_newText : item.insertText) !== null && _ref !== void 0 ? _ref : item.label;
                let filterText;
                // filtering would happen on ace editor side
                //TODO: if filtering and sorting are on server side, we should disable FilteredList in ace completer
                if (item.filterText) {
                    const firstWordMatch = item.filterText.match(/\w+/);
                    const firstWord = firstWordMatch ? firstWordMatch[0] : null;
                    if (firstWord) {
                        const wordRegex = new RegExp(`\\b${firstWord}\\b`, 'i');
                        if (!wordRegex.test(text)) {
                            text = `${item.filterText} ${text}`;
                            filterText = item.filterText;
                        }
                    } else {
                        if (!text.includes(item.filterText)) {
                            text = `${item.filterText} ${text}`;
                            filterText = item.filterText;
                        }
                    }
                }
                let command = ((_item_command = item.command) === null || _item_command === void 0 ? void 0 : _item_command.command) == "editor.action.triggerSuggest" ? "startAutocomplete" : undefined;
                let range = item.textEdit ? getTextEditRange(item.textEdit, filterText) : undefined;
                let completion = {
                    meta: kind,
                    caption: item.label,
                    score: undefined
                };
                completion["command"] = command;
                completion["range"] = range;
                completion["item"] = item;
                if (item.insertTextFormat == InsertTextFormat.Snippet) {
                    completion["snippet"] = text;
                } else {
                    completion["value"] = text !== null && text !== void 0 ? text : "";
                }
                completion["documentation"] = item.documentation; //TODO: this is workaround for services with instant completion
                completion["position"] = item["position"];
                completion["service"] = item["service"]; //TODO: since we have multiple servers, we need to determine which
                // server to use for resolving
                return completion;
            }
            function toCompletions(completions) {
                if (completions.length > 0) {
                    let combinedCompletions = getCompletionItems(completions);
                    return combinedCompletions.map((item)=>toCompletion(item));
                }
                return [];
            }
            function getCompletionItems(completions) {
                return completions.map((el)=>{
                    if (!el.completions) {
                        return [];
                    }
                    let allCompletions;
                    if (Array.isArray(el.completions)) {
                        allCompletions = el.completions;
                    } else {
                        allCompletions = el.completions.items;
                    }
                    return allCompletions.map((item)=>{
                        item["service"] = el.service;
                        return item;
                    });
                }).flat();
            }
            function toInlineCompletion(item) {
                var _item_command;
                let text = typeof item.insertText === "string" ? item.insertText : item.insertText.value;
                let filterText;
                // filtering would happen on ace editor side
                //TODO: if filtering and sorting are on server side, we should disable FilteredList in ace completer
                if (item.filterText) {
                    const firstWordMatch = item.filterText.match(/\w+/);
                    const firstWord = firstWordMatch ? firstWordMatch[0] : null;
                    if (firstWord) {
                        const wordRegex = new RegExp(`\\b${firstWord}\\b`, 'i');
                        if (!wordRegex.test(text)) {
                            text = `${item.filterText} ${text}`;
                            filterText = item.filterText;
                        }
                    } else {
                        if (!text.includes(item.filterText)) {
                            text = `${item.filterText} ${text}`;
                            filterText = item.filterText;
                        }
                    }
                }
                let command = ((_item_command = item.command) === null || _item_command === void 0 ? void 0 : _item_command.command) == "editor.action.triggerSuggest" ? "startAutocomplete" : undefined;
                let range = item.range ? getInlineCompletionRange(item.range, filterText) : undefined;
                let completion = {};
                completion["command"] = command;
                completion["range"] = range;
                completion["item"] = item;
                if (typeof item.insertText !== "string") {
                    completion["snippet"] = text;
                } else {
                    completion["value"] = text !== null && text !== void 0 ? text : "";
                }
                completion["position"] = item["position"];
                completion["service"] = item["service"]; //TODO: since we have multiple servers, we need to determine which
                // server to use for resolving
                return completion;
            }
            function toInlineCompletions(completions) {
                if (completions.length > 0) {
                    let combinedCompletions = getCompletionItems(completions);
                    return combinedCompletions.map((item)=>toInlineCompletion(item));
                }
                return [];
            }
            function toResolvedCompletion(completion, item) {
                completion["docMarkdown"] = fromMarkupContent(item.documentation);
                return completion;
            }
            function toCompletionItem(completion) {
                let command;
                if (completion["command"]) {
                    command = {
                        title: "triggerSuggest",
                        command: completion["command"]
                    };
                }
                var _completion_caption;
                let completionItem = {
                    label: (_completion_caption = completion.caption) !== null && _completion_caption !== void 0 ? _completion_caption : "",
                    kind: CommonConverter.convertKind(completion.meta),
                    command: command,
                    insertTextFormat: completion["snippet"] ? InsertTextFormat.Snippet : InsertTextFormat.PlainText,
                    documentation: completion["documentation"]
                };
                if (completion["range"]) {
                    var _completion_snippet;
                    completionItem.textEdit = {
                        range: fromRange(completion["range"]),
                        newText: (_completion_snippet = completion["snippet"]) !== null && _completion_snippet !== void 0 ? _completion_snippet : completion["value"]
                    };
                } else {
                    var _completion_snippet1;
                    completionItem.insertText = (_completion_snippet1 = completion["snippet"]) !== null && _completion_snippet1 !== void 0 ? _completion_snippet1 : completion["value"];
                }
                completionItem["fileName"] = completion["fileName"];
                completionItem["position"] = completion["position"];
                completionItem["item"] = completion["item"];
                completionItem["service"] = completion["service"]; //TODO:
                return completionItem;
            }
            function getTextEditRange(textEdit, filterText) {
                const filterLength = filterText ? filterText.length : 0;
                if ("insert" in textEdit && "replace" in textEdit) {
                    let mergedRanges = mergeRanges([
                        toRange(textEdit.insert),
                        toRange(textEdit.replace)
                    ]);
                    return mergedRanges[0];
                } else {
                    textEdit.range.start.character -= filterLength;
                    return toRange(textEdit.range);
                }
            }
            function getInlineCompletionRange(range, filterText) {
                const filterLength = filterText ? filterText.length : 0;
                range.start.character -= filterLength;
                return toRange(range);
            }
            function toTooltip(hover) {
                var _hover_find;
                if (!hover) return;
                let content = hover.map((el)=>{
                    if (!el || !el.contents) return;
                    if (MarkupContent.is(el.contents)) {
                        return fromMarkupContent(el.contents);
                    } else if (MarkedString.is(el.contents)) {
                        if (typeof el.contents === "string") {
                            return el.contents;
                        }
                        return "```" + el.contents.value + "```";
                    } else {
                        let contents = el.contents.map((el)=>{
                            if (typeof el !== "string") {
                                return `\`\`\`${el.value}\`\`\``;
                            } else {
                                return el;
                            }
                        });
                        return contents.join("\n\n");
                    }
                }).filter(notEmpty);
                if (content.length === 0) return;
                //TODO: it could be merged within all ranges in future
                let lspRange = (_hover_find = hover.find((el)=>{
                    var _el;
                    return (_el = el) === null || _el === void 0 ? void 0 : _el.range;
                })) === null || _hover_find === void 0 ? void 0 : _hover_find.range;
                let range;
                if (lspRange) range = toRange(lspRange);
                return {
                    content: {
                        type: "markdown",
                        text: content.join("\n\n")
                    },
                    range: range
                };
            }
            function fromSignatureHelp(signatureHelp) {
                if (!signatureHelp) return;
                let content = signatureHelp.map((el)=>{
                    var _el, _el1;
                    if (!el) return;
                    let signatureIndex = ((_el = el) === null || _el === void 0 ? void 0 : _el.activeSignature) || 0;
                    let activeSignature = el.signatures[signatureIndex];
                    if (!activeSignature) return;
                    let activeParam = (_el1 = el) === null || _el1 === void 0 ? void 0 : _el1.activeParameter;
                    let contents = activeSignature.label;
                    if (activeParam != undefined && activeSignature.parameters && activeSignature.parameters[activeParam]) {
                        let param = activeSignature.parameters[activeParam].label;
                        if (typeof param == "string") {
                            contents = contents.replace(param, `**${param}**`);
                        }
                    }
                    if (activeSignature.documentation) {
                        if (MarkupContent.is(activeSignature.documentation)) {
                            return contents + "\n\n" + fromMarkupContent(activeSignature.documentation);
                        } else {
                            contents += "\n\n" + activeSignature.documentation;
                            return contents;
                        }
                    } else {
                        return contents;
                    }
                }).filter(notEmpty);
                if (content.length === 0) return;
                return {
                    content: {
                        type: "markdown",
                        text: content.join("\n\n")
                    }
                };
            }
            function fromMarkupContent(content) {
                if (!content) return;
                if (typeof content === "string") {
                    return content;
                } else {
                    return content.value;
                }
            }
            function fromAceDelta(delta, eol) {
                const text = delta.lines.length > 1 ? delta.lines.join(eol) : delta.lines[0];
                return {
                    range: delta.action === "insert" ? rangeFromPositions(fromPoint(delta.start), fromPoint(delta.start)) : rangeFromPositions(fromPoint(delta.start), fromPoint(delta.end)),
                    text: delta.action === "insert" ? text : ""
                };
            }
            function filterDiagnostics(diagnostics, filterErrors) {
                return common_converters_CommonConverter.excludeByErrorMessage(diagnostics, filterErrors.errorMessagesToIgnore).map((el)=>{
                    if ((0, utils /* checkValueAgainstRegexpArray */ .Tk)(el.message, filterErrors.errorMessagesToTreatAsWarning)) {
                        el.severity = main.DiagnosticSeverity.Warning;
                    } else if ((0, utils /* checkValueAgainstRegexpArray */ .Tk)(el.message, filterErrors.errorMessagesToTreatAsInfo)) {
                        el.severity = main.DiagnosticSeverity.Information;
                    }
                    return el;
                });
            }
            function fromDocumentHighlights(documentHighlights) {
                return documentHighlights.map(function(el) {
                    let className = el.kind == 2 ? "language_highlight_read" : el.kind == 3 ? "language_highlight_write" : "language_highlight_text";
                    return toMarkerGroupItem(CommonConverter.toRange(toRange(el.range)), className);
                });
            }
            function toMarkerGroupItem(range, className, tooltipText) {
                let markerGroupItem = {
                    range: range,
                    className: className
                };
                if (tooltipText) {
                    markerGroupItem["tooltipText"] = tooltipText;
                }
                return markerGroupItem;
            }
            ; // CONCATENATED MODULE: ./src/services/php/php-service.ts
            function php_service_define_property(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }
            class PhpService extends base_service.BaseService {
                async doValidation(document1) {
                    let value = this.getDocumentValue(document1.uri);
                    if (!value) return [];
                    if (this.getOption(document1.uri, "inline")) {
                        value = "<?" + value + "?>";
                    }
                    var tokens = php /* PHP */ .j.Lexer(value, {
                        short_open_tag: 1
                    });
                    let errors = [];
                    try {
                        new php /* PHP */ .j.Parser(tokens);
                    } catch (e) {
                        errors.push({
                            range: {
                                start: {
                                    line: e.line - 1,
                                    character: 0
                                },
                                end: {
                                    line: e.line - 1,
                                    character: 0
                                }
                            },
                            message: e.message.charAt(0).toUpperCase() + e.message.substring(1),
                            severity: 1
                        });
                    }
                    return filterDiagnostics(errors, this.optionsToFilterDiagnostics);
                }
                constructor(mode){
                    super(mode);
                    php_service_define_property(this, "$service", void 0);
                    php_service_define_property(this, "serviceCapabilities", {
                        diagnosticProvider: {
                            interFileDependencies: true,
                            workspaceDiagnostics: true
                        }
                    });
                }
            }
        })();
        /******/ return __nested_webpack_exports__;
    /******/ })();
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNsZ0MsU0FBUyxDQUFDMDlCLHNCQUFzQixHQUFHO2dCQUM5Q3pJLElBQUlpTCxNQUFNLENBQUNsZ0MsU0FBUyxDQUFDMjlCLGdCQUFnQixHQUFHO2dCQUN4QzFJLElBQUlpTCxNQUFNLENBQUNsZ0MsU0FBUyxDQUFDNDlCLGVBQWUsR0FBRztnQkFDdkMzSSxJQUFJaUwsTUFBTSxDQUFDbGdDLFNBQVMsQ0FBQzY5QixXQUFXLEdBQUc7Z0JBQ25DNUksSUFBSWlMLE1BQU0sQ0FBQ2xnQyxTQUFTLENBQUM4OUIsZUFBZSxHQUFHO2dCQUN2QzdJLElBQUlpTCxNQUFNLENBQUNsZ0MsU0FBUyxDQUFDKzlCLFNBQVMsR0FBRztnQkFDakM5SSxJQUFJaUwsTUFBTSxDQUFDbGdDLFNBQVMsQ0FBQ2crQixhQUFhLEdBQUc7Z0JBQ3JDL0ksSUFBSWlMLE1BQU0sQ0FBQ2xnQyxTQUFTLENBQUNpK0IsVUFBVSxHQUFHO2dCQUNsQ2hKLElBQUlpTCxNQUFNLENBQUNsZ0MsU0FBUyxDQUFDaytCLG9CQUFvQixHQUFHO2dCQUM1Q2pKLElBQUlpTCxNQUFNLENBQUNsZ0MsU0FBUyxDQUFDbStCLFdBQVcsR0FBRztnQkFDbkNsSixJQUFJaUwsTUFBTSxDQUFDbGdDLFNBQVMsQ0FBQ28rQixZQUFZLEdBQUc7Z0JBQ3BDLE1BQU07Z0JBQ04seURBQXlELEdBQUduSixJQUFJaUwsTUFBTSxDQUFDbGdDLFNBQVMsQ0FBQytnQyxTQUFTLEdBQUc7b0JBQ3plCQUNIO2dCQUNELDZEQUE2RCxHQUFHOUwsSUFBSWlMLE1BQU0sQ0FBQ2xnQyxTQUFTLENBQUNnaEMsU0FBUyxHQUFHO29CQUM3RjtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtpQkFDSDtnQkFDRC9MLElBQUlpTCxNQUFNLENBQUNsZ0MsU0FBUyxDQUFDd2dDLFFBQVEsR0FBRztvQkFDNUI7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxb0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO2lCQUNIO2dCQUNEdkwsSUFBSWlMLE1BQU0sQ0FBQ2xnQyxTQUFTLENBQUN1Z0MsT0FBTyxHQUFHO29CQUMzQjtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7aUJBQ0g7Z0JBQ0R0TCxJQUFJaUwsTUFBTSxDQUFDbGdDLFNBQVMsQ0FBQ3FnQyxNQUFNLEdBQUc7b0JBQzFCO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7aUJBQ0g7Z0JBQ0RwTCxJQUFJaUwsTUFBTSxDQUFDbGdDLFNBQVMsQ0FBQ3NnQyxTQUFTLEdBQUc7b0JBQzdlCQUNIO2dCQUNEckwsSUFBSWlMLE1BQU0sQ0FBQ2xnQyxTQUFTLENBQUM2Z0MsTUFBTSxHQUFHO29CQUMxQjtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtpQkFDSDtnQkFDRDVMLElBQUlpTCxNQUFNLENBQUNsZ0MsU0FBUyxDQUFDMmdDLFFBQVEsR0FBRztvQkFDNUI7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO2lCQUNIO2dCQUNEMUwsSUFBSWlMLE1BQU0sQ0FBQ2xnQyxTQUFTLENBQUMwZ0MsT0FBTyxHQUFHO29CQUMzQjtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7aUJBQ0g7Z0JBQ0R6TCxJQUFJaUwsTUFBTSxDQUFDbGdDLFNBQVMsQ0FBQ2loQyxVQUFVLEdBQUc7b0JBQzlCLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7aUJBQ0g7Z0JBQ0RoTSxJQUFJaUwsTUFBTSxDQUFDbGdDLFNBQVMsQ0FBQzhnQyxLQUFLLEdBQUc7b0JBQ3plCQUNIO2dCQUNEN0wsSUFBSWlMLE1BQU0sQ0FBQ2xnQyxTQUFTLENBQUN5Z0MsS0FBSyxHQUFHO29CQUN6QjtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtpQkFDSDtnQkFDRHpoQyxTQUFRa2YsQ0FBQyxHQUFHK1c7WUFHWixHQUFHLEdBQUc7WUFFTixHQUFHLE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MsRUFBRTtvQkFDZixJQUFJO3dCQUNBLElBQUlsRixJQUFHLE9BQU8sSUFBR2hyRCxDQUFDLENBQUNnaUIsTUFBTSxDQUFDSjtvQkFDOUIsRUFBRSxPQUFPLzVCLEdBQUc7d0JBQ1Jxb0UsT0FBT3pvRSxJQUFJLENBQUM7NEJBQ1JrcUIsT0FBTztnQ0FDSHhlLE9BQU87b0NBQ0h1dUIsTUFBTTc1QixFQUFFNjVCLElBQUksR0FBRztvQ0FDZnE2QixXQUFXO2dDQUNmO2dDQUNBaHNELEtBQUs7b0NBQ0QyeEIsTUFBTTc1QixFQUFFNjVCLElBQUksR0FBRztvQ0FDZnE2QixXQUFXO2dDQUNmOzRCQUNKOzRCQUNBcjNELFNBQVNtRCxFQUFFbkQsT0FBTyxDQUFDK2EsTUFBTSxDQUFDLEdBQUdnckIsV0FBVyxLQUFLNWlDLEVBQUVuRCxPQUFPLENBQUNvSixTQUFTLENBQUM7NEJBQ2pFMjFELFVBQVU7d0JBQ2Q7b0JBQ0o7b0JBQ0EsT0FBT2lNLGtCQUFrQlEsUUFBUSxJQUFJLENBQUNwK0MsMEJBQTBCO2dCQUNwRTtnQkFDQWp3QixZQUFZeXhCLElBQUksQ0FBQztvQkFDYixLQUFLLENBQUNBO29CQUNOMjhDLDRCQUE0QixJQUFJLEVBQUUsWUFBWSxLQUFLO29CQUNuREEsNEJBQTRCLElBQUksRUFBRSx1QkFBdUI7d0JBQ3JERSxvQkFBb0I7NEJBQ2hCQyx1QkFBdUI7NEJBQ3ZCQyxzQkFBc0I7d0JBQzFCO29CQUNKO2dCQUNKO1lBQ0o7UUFFQTtRQUVBLE1BQU0sR0FBSSxPQUFPcGhELDBCQUFtQkE7SUFDcEMsTUFBTSxHQUFHO0FBRVQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hY2UtbGludGVycy1yb290Ly4vcGFja2FnZXMvYWNlLWxpbnRlcnMvYnVpbGQvcGhwLXNlcnZpY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHRoaXMsICgpID0+IHtcbnJldHVybiAvKioqKioqLyAoKCkgPT4geyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcblxuLyoqKi8gNjA5Mzpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBwcm92aWRlZCBkZXBlbmRlbmN5ICovIHZhciBwcm9jZXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OTA3KTtcbi8qIHByb3ZpZGVkIGRlcGVuZGVuY3kgKi8gdmFyIGNvbnNvbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzNjQpO1xuLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9hc3NlcnQuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9jb21taXQvMmE1MWFlNDI0YTUxM2VjOWE2YWEzNDY2YmFhMGNjMWQ1NWRkNGYzYlxuLy8gT3JpZ2luYWxseSBmcm9tIG5hcndoYWwuanMgKGh0dHA6Ly9uYXJ3aGFsanMub3JnKVxuLy8gQ29weXJpZ2h0IChjKSAyMDA5IFRob21hcyBSb2JpbnNvbiA8Mjgwbm9ydGguY29tPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICdTb2Z0d2FyZScpLCB0b1xuLy8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGVcbi8vIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vclxuLy8gc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU5cbi8vIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTM0MiksXG4gICAgX3JlcXVpcmUkY29kZXMgPSBfcmVxdWlyZS5jb2RlcyxcbiAgICBFUlJfQU1CSUdVT1VTX0FSR1VNRU5UID0gX3JlcXVpcmUkY29kZXMuRVJSX0FNQklHVU9VU19BUkdVTUVOVCxcbiAgICBFUlJfSU5WQUxJRF9BUkdfVFlQRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9JTlZBTElEX0FSR19UWVBFLFxuICAgIEVSUl9JTlZBTElEX0FSR19WQUxVRSA9IF9yZXF1aXJlJGNvZGVzLkVSUl9JTlZBTElEX0FSR19WQUxVRSxcbiAgICBFUlJfSU5WQUxJRF9SRVRVUk5fVkFMVUUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9SRVRVUk5fVkFMVUUsXG4gICAgRVJSX01JU1NJTkdfQVJHUyA9IF9yZXF1aXJlJGNvZGVzLkVSUl9NSVNTSU5HX0FSR1M7XG5cbnZhciBBc3NlcnRpb25FcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oOTgwMSk7XG5cbnZhciBfcmVxdWlyZTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4MjcpLFxuICAgIGluc3BlY3QgPSBfcmVxdWlyZTIuaW5zcGVjdDtcblxudmFyIF9yZXF1aXJlJHR5cGVzID0gKF9fd2VicGFja19yZXF1aXJlX18oNjgyNykudHlwZXMpLFxuICAgIGlzUHJvbWlzZSA9IF9yZXF1aXJlJHR5cGVzLmlzUHJvbWlzZSxcbiAgICBpc1JlZ0V4cCA9IF9yZXF1aXJlJHR5cGVzLmlzUmVnRXhwO1xuXG52YXIgb2JqZWN0QXNzaWduID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24gOiAoX193ZWJwYWNrX3JlcXVpcmVfXygzMDQ2KS5hc3NpZ24pO1xudmFyIG9iamVjdElzID0gT2JqZWN0LmlzID8gT2JqZWN0LmlzIDogX193ZWJwYWNrX3JlcXVpcmVfXyg1OTY4KTtcbnZhciBlcnJvckNhY2hlID0gbmV3IE1hcCgpO1xudmFyIGlzRGVlcEVxdWFsO1xudmFyIGlzRGVlcFN0cmljdEVxdWFsO1xudmFyIHBhcnNlRXhwcmVzc2lvbkF0O1xudmFyIGZpbmROb2RlQXJvdW5kO1xudmFyIGRlY29kZXI7XG5cbmZ1bmN0aW9uIGxhenlMb2FkQ29tcGFyaXNvbigpIHtcbiAgdmFyIGNvbXBhcmlzb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2NTYpO1xuXG4gIGlzRGVlcEVxdWFsID0gY29tcGFyaXNvbi5pc0RlZXBFcXVhbDtcbiAgaXNEZWVwU3RyaWN0RXF1YWwgPSBjb21wYXJpc29uLmlzRGVlcFN0cmljdEVxdWFsO1xufSAvLyBFc2NhcGUgY29udHJvbCBjaGFyYWN0ZXJzIGJ1dCBub3QgXFxuIGFuZCBcXHQgdG8ga2VlcCB0aGUgbGluZSBicmVha3MgYW5kXG4vLyBpbmRlbnRhdGlvbiBpbnRhY3QuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuXG5cbnZhciBlc2NhcGVTZXF1ZW5jZXNSZWdFeHAgPSAvW1xceDAwLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXS9nO1xudmFyIG1ldGEgPSAoLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqLyBudWxsICYmIChbXCJcXFxcdTAwMDBcIiwgXCJcXFxcdTAwMDFcIiwgXCJcXFxcdTAwMDJcIiwgXCJcXFxcdTAwMDNcIiwgXCJcXFxcdTAwMDRcIiwgXCJcXFxcdTAwMDVcIiwgXCJcXFxcdTAwMDZcIiwgXCJcXFxcdTAwMDdcIiwgJ1xcXFxiJywgJycsICcnLCBcIlxcXFx1MDAwYlwiLCAnXFxcXGYnLCAnJywgXCJcXFxcdTAwMGVcIiwgXCJcXFxcdTAwMGZcIiwgXCJcXFxcdTAwMTBcIiwgXCJcXFxcdTAwMTFcIiwgXCJcXFxcdTAwMTJcIiwgXCJcXFxcdTAwMTNcIiwgXCJcXFxcdTAwMTRcIiwgXCJcXFxcdTAwMTVcIiwgXCJcXFxcdTAwMTZcIiwgXCJcXFxcdTAwMTdcIiwgXCJcXFxcdTAwMThcIiwgXCJcXFxcdTAwMTlcIiwgXCJcXFxcdTAwMWFcIiwgXCJcXFxcdTAwMWJcIiwgXCJcXFxcdTAwMWNcIiwgXCJcXFxcdTAwMWRcIiwgXCJcXFxcdTAwMWVcIiwgXCJcXFxcdTAwMWZcIl0pKTtcblxudmFyIGVzY2FwZUZuID0gZnVuY3Rpb24gZXNjYXBlRm4oc3RyKSB7XG4gIHJldHVybiBtZXRhW3N0ci5jaGFyQ29kZUF0KDApXTtcbn07XG5cbnZhciB3YXJuZWQgPSBmYWxzZTsgLy8gVGhlIGFzc2VydCBtb2R1bGUgcHJvdmlkZXMgZnVuY3Rpb25zIHRoYXQgdGhyb3dcbi8vIEFzc2VydGlvbkVycm9yJ3Mgd2hlbiBwYXJ0aWN1bGFyIGNvbmRpdGlvbnMgYXJlIG5vdCBtZXQuIFRoZVxuLy8gYXNzZXJ0IG1vZHVsZSBtdXN0IGNvbmZvcm0gdG8gdGhlIGZvbGxvd2luZyBpbnRlcmZhY2UuXG5cbnZhciBhc3NlcnQgPSBtb2R1bGUuZXhwb3J0cyA9IG9rO1xudmFyIE5PX0VYQ0VQVElPTl9TRU5USU5FTCA9IHt9OyAvLyBBbGwgb2YgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnMgbXVzdCB0aHJvdyBhbiBBc3NlcnRpb25FcnJvclxuLy8gd2hlbiBhIGNvcnJlc3BvbmRpbmcgY29uZGl0aW9uIGlzIG5vdCBtZXQsIHdpdGggYSBtZXNzYWdlIHRoYXRcbi8vIG1heSBiZSB1bmRlZmluZWQgaWYgbm90IHByb3ZpZGVkLiBBbGwgYXNzZXJ0aW9uIG1ldGhvZHMgcHJvdmlkZVxuLy8gYm90aCB0aGUgYWN0dWFsIGFuZCBleHBlY3RlZCB2YWx1ZXMgdG8gdGhlIGFzc2VydGlvbiBlcnJvciBmb3Jcbi8vIGRpc3BsYXkgcHVycG9zZXMuXG5cbmZ1bmN0aW9uIGlubmVyRmFpbChvYmopIHtcbiAgaWYgKG9iai5tZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHRocm93IG9iai5tZXNzYWdlO1xuICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3Iob2JqKTtcbn1cblxuZnVuY3Rpb24gZmFpbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlLCBvcGVyYXRvciwgc3RhY2tTdGFydEZuKSB7XG4gIHZhciBhcmdzTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGludGVybmFsTWVzc2FnZTtcblxuICBpZiAoYXJnc0xlbiA9PT0gMCkge1xuICAgIGludGVybmFsTWVzc2FnZSA9ICdGYWlsZWQnO1xuICB9IGVsc2UgaWYgKGFyZ3NMZW4gPT09IDEpIHtcbiAgICBtZXNzYWdlID0gYWN0dWFsO1xuICAgIGFjdHVhbCA9IHVuZGVmaW5lZDtcbiAgfSBlbHNlIHtcbiAgICBpZiAod2FybmVkID09PSBmYWxzZSkge1xuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgIHZhciB3YXJuID0gcHJvY2Vzcy5lbWl0V2FybmluZyA/IHByb2Nlc3MuZW1pdFdhcm5pbmcgOiBjb25zb2xlLndhcm4uYmluZChjb25zb2xlKTtcbiAgICAgIHdhcm4oJ2Fzc2VydC5mYWlsKCkgd2l0aCBtb3JlIHRoYW4gb25lIGFyZ3VtZW50IGlzIGRlcHJlY2F0ZWQuICcgKyAnUGxlYXNlIHVzZSBhc3NlcnQuc3RyaWN0RXF1YWwoKSBpbnN0ZWFkIG9yIG9ubHkgcGFzcyBhIG1lc3NhZ2UuJywgJ0RlcHJlY2F0aW9uV2FybmluZycsICdERVAwMDk0Jyk7XG4gICAgfVxuXG4gICAgaWYgKGFyZ3NMZW4gPT09IDIpIG9wZXJhdG9yID0gJyE9JztcbiAgfVxuXG4gIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHRocm93IG1lc3NhZ2U7XG4gIHZhciBlcnJBcmdzID0ge1xuICAgIGFjdHVhbDogYWN0dWFsLFxuICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICBvcGVyYXRvcjogb3BlcmF0b3IgPT09IHVuZGVmaW5lZCA/ICdmYWlsJyA6IG9wZXJhdG9yLFxuICAgIHN0YWNrU3RhcnRGbjogc3RhY2tTdGFydEZuIHx8IGZhaWxcbiAgfTtcblxuICBpZiAobWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZXJyQXJncy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgfVxuXG4gIHZhciBlcnIgPSBuZXcgQXNzZXJ0aW9uRXJyb3IoZXJyQXJncyk7XG5cbiAgaWYgKGludGVybmFsTWVzc2FnZSkge1xuICAgIGVyci5tZXNzYWdlID0gaW50ZXJuYWxNZXNzYWdlO1xuICAgIGVyci5nZW5lcmF0ZWRNZXNzYWdlID0gdHJ1ZTtcbiAgfVxuXG4gIHRocm93IGVycjtcbn1cblxuYXNzZXJ0LmZhaWwgPSBmYWlsOyAvLyBUaGUgQXNzZXJ0aW9uRXJyb3IgaXMgZGVmaW5lZCBpbiBpbnRlcm5hbC9lcnJvci5cblxuYXNzZXJ0LkFzc2VydGlvbkVycm9yID0gQXNzZXJ0aW9uRXJyb3I7XG5cbmZ1bmN0aW9uIGlubmVyT2soZm4sIGFyZ0xlbiwgdmFsdWUsIG1lc3NhZ2UpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHZhciBnZW5lcmF0ZWRNZXNzYWdlID0gZmFsc2U7XG5cbiAgICBpZiAoYXJnTGVuID09PSAwKSB7XG4gICAgICBnZW5lcmF0ZWRNZXNzYWdlID0gdHJ1ZTtcbiAgICAgIG1lc3NhZ2UgPSAnTm8gdmFsdWUgYXJndW1lbnQgcGFzc2VkIHRvIGBhc3NlcnQub2soKWAnO1xuICAgIH0gZWxzZSBpZiAobWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBtZXNzYWdlO1xuICAgIH1cblxuICAgIHZhciBlcnIgPSBuZXcgQXNzZXJ0aW9uRXJyb3Ioe1xuICAgICAgYWN0dWFsOiB2YWx1ZSxcbiAgICAgIGV4cGVjdGVkOiB0cnVlLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnPT0nLFxuICAgICAgc3RhY2tTdGFydEZuOiBmblxuICAgIH0pO1xuICAgIGVyci5nZW5lcmF0ZWRNZXNzYWdlID0gZ2VuZXJhdGVkTWVzc2FnZTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn0gLy8gUHVyZSBhc3NlcnRpb24gdGVzdHMgd2hldGhlciBhIHZhbHVlIGlzIHRydXRoeSwgYXMgZGV0ZXJtaW5lZFxuLy8gYnkgISF2YWx1ZS5cblxuXG5mdW5jdGlvbiBvaygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlubmVyT2suYXBwbHkodm9pZCAwLCBbb2ssIGFyZ3MubGVuZ3RoXS5jb25jYXQoYXJncykpO1xufVxuXG5hc3NlcnQub2sgPSBvazsgLy8gVGhlIGVxdWFsaXR5IGFzc2VydGlvbiB0ZXN0cyBzaGFsbG93LCBjb2VyY2l2ZSBlcXVhbGl0eSB3aXRoID09LlxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXByb3BlcnRpZXMgKi9cblxuYXNzZXJ0LmVxdWFsID0gZnVuY3Rpb24gZXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXG5cbiAgaWYgKGFjdHVhbCAhPSBleHBlY3RlZCkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJz09JyxcbiAgICAgIHN0YWNrU3RhcnRGbjogZXF1YWxcbiAgICB9KTtcbiAgfVxufTsgLy8gVGhlIG5vbi1lcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgZm9yIHdoZXRoZXIgdHdvIG9iamVjdHMgYXJlIG5vdFxuLy8gZXF1YWwgd2l0aCAhPS5cblxuXG5hc3NlcnQubm90RXF1YWwgPSBmdW5jdGlvbiBub3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cblxuICBpZiAoYWN0dWFsID09IGV4cGVjdGVkKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnIT0nLFxuICAgICAgc3RhY2tTdGFydEZuOiBub3RFcXVhbFxuICAgIH0pO1xuICB9XG59OyAvLyBUaGUgZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGEgZGVlcCBlcXVhbGl0eSByZWxhdGlvbi5cblxuXG5hc3NlcnQuZGVlcEVxdWFsID0gZnVuY3Rpb24gZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKGlzRGVlcEVxdWFsID09PSB1bmRlZmluZWQpIGxhenlMb2FkQ29tcGFyaXNvbigpO1xuXG4gIGlmICghaXNEZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdkZWVwRXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBkZWVwRXF1YWxcbiAgICB9KTtcbiAgfVxufTsgLy8gVGhlIG5vbi1lcXVpdmFsZW5jZSBhc3NlcnRpb24gdGVzdHMgZm9yIGFueSBkZWVwIGluZXF1YWxpdHkuXG5cblxuYXNzZXJ0Lm5vdERlZXBFcXVhbCA9IGZ1bmN0aW9uIG5vdERlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmIChpc0RlZXBFcXVhbCA9PT0gdW5kZWZpbmVkKSBsYXp5TG9hZENvbXBhcmlzb24oKTtcblxuICBpZiAoaXNEZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdub3REZWVwRXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBub3REZWVwRXF1YWxcbiAgICB9KTtcbiAgfVxufTtcbi8qIGVzbGludC1lbmFibGUgKi9cblxuXG5hc3NlcnQuZGVlcFN0cmljdEVxdWFsID0gZnVuY3Rpb24gZGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKGlzRGVlcEVxdWFsID09PSB1bmRlZmluZWQpIGxhenlMb2FkQ29tcGFyaXNvbigpO1xuXG4gIGlmICghaXNEZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdkZWVwU3RyaWN0RXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBkZWVwU3RyaWN0RXF1YWxcbiAgICB9KTtcbiAgfVxufTtcblxuYXNzZXJ0Lm5vdERlZXBTdHJpY3RFcXVhbCA9IG5vdERlZXBTdHJpY3RFcXVhbDtcblxuZnVuY3Rpb24gbm90RGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKGlzRGVlcEVxdWFsID09PSB1bmRlZmluZWQpIGxhenlMb2FkQ29tcGFyaXNvbigpO1xuXG4gIGlmIChpc0RlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJ25vdERlZXBTdHJpY3RFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IG5vdERlZXBTdHJpY3RFcXVhbFxuICAgIH0pO1xuICB9XG59XG5cbmFzc2VydC5zdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIHN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKCFvYmplY3RJcyhhY3R1YWwsIGV4cGVjdGVkKSkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJ3N0cmljdEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogc3RyaWN0RXF1YWxcbiAgICB9KTtcbiAgfVxufTtcblxuYXNzZXJ0Lm5vdFN0cmljdEVxdWFsID0gZnVuY3Rpb24gbm90U3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAob2JqZWN0SXMoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdub3RTdHJpY3RFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IG5vdFN0cmljdEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG5cbnZhciBDb21wYXJpc29uID0gZnVuY3Rpb24gQ29tcGFyaXNvbihvYmosIGtleXMsIGFjdHVhbCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb21wYXJpc29uKTtcblxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoYWN0dWFsICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGFjdHVhbFtrZXldID09PSAnc3RyaW5nJyAmJiBpc1JlZ0V4cChvYmpba2V5XSkgJiYgb2JqW2tleV0udGVzdChhY3R1YWxba2V5XSkpIHtcbiAgICAgICAgX3RoaXNba2V5XSA9IGFjdHVhbFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXNba2V5XSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBjb21wYXJlRXhjZXB0aW9uS2V5KGFjdHVhbCwgZXhwZWN0ZWQsIGtleSwgbWVzc2FnZSwga2V5cywgZm4pIHtcbiAgaWYgKCEoa2V5IGluIGFjdHVhbCkgfHwgIWlzRGVlcFN0cmljdEVxdWFsKGFjdHVhbFtrZXldLCBleHBlY3RlZFtrZXldKSkge1xuICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgLy8gQ3JlYXRlIHBsYWNlaG9sZGVyIG9iamVjdHMgdG8gY3JlYXRlIGEgbmljZSBvdXRwdXQuXG4gICAgICB2YXIgYSA9IG5ldyBDb21wYXJpc29uKGFjdHVhbCwga2V5cyk7XG4gICAgICB2YXIgYiA9IG5ldyBDb21wYXJpc29uKGV4cGVjdGVkLCBrZXlzLCBhY3R1YWwpO1xuICAgICAgdmFyIGVyciA9IG5ldyBBc3NlcnRpb25FcnJvcih7XG4gICAgICAgIGFjdHVhbDogYSxcbiAgICAgICAgZXhwZWN0ZWQ6IGIsXG4gICAgICAgIG9wZXJhdG9yOiAnZGVlcFN0cmljdEVxdWFsJyxcbiAgICAgICAgc3RhY2tTdGFydEZuOiBmblxuICAgICAgfSk7XG4gICAgICBlcnIuYWN0dWFsID0gYWN0dWFsO1xuICAgICAgZXJyLmV4cGVjdGVkID0gZXhwZWN0ZWQ7XG4gICAgICBlcnIub3BlcmF0b3IgPSBmbi5uYW1lO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cblxuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogZm4ubmFtZSxcbiAgICAgIHN0YWNrU3RhcnRGbjogZm5cbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGV4cGVjdGVkLCBtc2csIGZuKSB7XG4gIGlmICh0eXBlb2YgZXhwZWN0ZWQgIT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoaXNSZWdFeHAoZXhwZWN0ZWQpKSByZXR1cm4gZXhwZWN0ZWQudGVzdChhY3R1YWwpOyAvLyBhc3NlcnQuZG9lc05vdFRocm93IGRvZXMgbm90IGFjY2VwdCBvYmplY3RzLlxuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnZXhwZWN0ZWQnLCBbJ0Z1bmN0aW9uJywgJ1JlZ0V4cCddLCBleHBlY3RlZCk7XG4gICAgfSAvLyBIYW5kbGUgcHJpbWl0aXZlcyBwcm9wZXJseS5cblxuXG4gICAgaWYgKF90eXBlb2YoYWN0dWFsKSAhPT0gJ29iamVjdCcgfHwgYWN0dWFsID09PSBudWxsKSB7XG4gICAgICB2YXIgZXJyID0gbmV3IEFzc2VydGlvbkVycm9yKHtcbiAgICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgICAgbWVzc2FnZTogbXNnLFxuICAgICAgICBvcGVyYXRvcjogJ2RlZXBTdHJpY3RFcXVhbCcsXG4gICAgICAgIHN0YWNrU3RhcnRGbjogZm5cbiAgICAgIH0pO1xuICAgICAgZXJyLm9wZXJhdG9yID0gZm4ubmFtZTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV4cGVjdGVkKTsgLy8gU3BlY2lhbCBoYW5kbGUgZXJyb3JzIHRvIG1ha2Ugc3VyZSB0aGUgbmFtZSBhbmQgdGhlIG1lc3NhZ2UgYXJlIGNvbXBhcmVkXG4gICAgLy8gYXMgd2VsbC5cblxuICAgIGlmIChleHBlY3RlZCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBrZXlzLnB1c2goJ25hbWUnLCAnbWVzc2FnZScpO1xuICAgIH0gZWxzZSBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVkFMVUUoJ2Vycm9yJywgZXhwZWN0ZWQsICdtYXkgbm90IGJlIGFuIGVtcHR5IG9iamVjdCcpO1xuICAgIH1cblxuICAgIGlmIChpc0RlZXBFcXVhbCA9PT0gdW5kZWZpbmVkKSBsYXp5TG9hZENvbXBhcmlzb24oKTtcbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBhY3R1YWxba2V5XSA9PT0gJ3N0cmluZycgJiYgaXNSZWdFeHAoZXhwZWN0ZWRba2V5XSkgJiYgZXhwZWN0ZWRba2V5XS50ZXN0KGFjdHVhbFtrZXldKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbXBhcmVFeGNlcHRpb25LZXkoYWN0dWFsLCBleHBlY3RlZCwga2V5LCBtc2csIGtleXMsIGZuKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBHdWFyZCBpbnN0YW5jZW9mIGFnYWluc3QgYXJyb3cgZnVuY3Rpb25zIGFzIHRoZXkgZG9uJ3QgaGF2ZSBhIHByb3RvdHlwZS5cblxuXG4gIGlmIChleHBlY3RlZC5wcm90b3R5cGUgIT09IHVuZGVmaW5lZCAmJiBhY3R1YWwgaW5zdGFuY2VvZiBleHBlY3RlZCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKEVycm9yLmlzUHJvdG90eXBlT2YoZXhwZWN0ZWQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGV4cGVjdGVkLmNhbGwoe30sIGFjdHVhbCkgPT09IHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldEFjdHVhbChmbikge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdmbicsICdGdW5jdGlvbicsIGZuKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgZm4oKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG5cbiAgcmV0dXJuIE5PX0VYQ0VQVElPTl9TRU5USU5FTDtcbn1cblxuZnVuY3Rpb24gY2hlY2tJc1Byb21pc2Uob2JqKSB7XG4gIC8vIEFjY2VwdCBuYXRpdmUgRVM2IHByb21pc2VzIGFuZCBwcm9taXNlcyB0aGF0IGFyZSBpbXBsZW1lbnRlZCBpbiBhIHNpbWlsYXJcbiAgLy8gd2F5LiBEbyBub3QgYWNjZXB0IHRoZW5hYmxlcyB0aGF0IHVzZSBhIGZ1bmN0aW9uIGFzIGBvYmpgIGFuZCB0aGF0IGhhdmUgbm9cbiAgLy8gYGNhdGNoYCBoYW5kbGVyLlxuICAvLyBUT0RPOiB0aGVuYWJsZXMgYXJlIGNoZWNrZWQgdXAgdW50aWwgdGhleSBoYXZlIHRoZSBjb3JyZWN0IG1ldGhvZHMsXG4gIC8vIGJ1dCBhY2NvcmRpbmcgdG8gZG9jdW1lbnRhdGlvbiwgdGhlIGB0aGVuYCBtZXRob2Qgc2hvdWxkIHJlY2VpdmVcbiAgLy8gdGhlIGBmdWxmaWxsYCBhbmQgYHJlamVjdGAgYXJndW1lbnRzIGFzIHdlbGwgb3IgaXQgbWF5IGJlIG5ldmVyIHJlc29sdmVkLlxuICByZXR1cm4gaXNQcm9taXNlKG9iaikgfHwgb2JqICE9PSBudWxsICYmIF90eXBlb2Yob2JqKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iai50aGVuID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouY2F0Y2ggPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIHdhaXRGb3JBY3R1YWwocHJvbWlzZUZuKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0UHJvbWlzZTtcblxuICAgIGlmICh0eXBlb2YgcHJvbWlzZUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBSZXR1cm4gYSByZWplY3RlZCBwcm9taXNlIGlmIGBwcm9taXNlRm5gIHRocm93cyBzeW5jaHJvbm91c2x5LlxuICAgICAgcmVzdWx0UHJvbWlzZSA9IHByb21pc2VGbigpOyAvLyBGYWlsIGluIGNhc2Ugbm8gcHJvbWlzZSBpcyByZXR1cm5lZC5cblxuICAgICAgaWYgKCFjaGVja0lzUHJvbWlzZShyZXN1bHRQcm9taXNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFKCdpbnN0YW5jZSBvZiBQcm9taXNlJywgJ3Byb21pc2VGbicsIHJlc3VsdFByb21pc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2hlY2tJc1Byb21pc2UocHJvbWlzZUZuKSkge1xuICAgICAgcmVzdWx0UHJvbWlzZSA9IHByb21pc2VGbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdwcm9taXNlRm4nLCBbJ0Z1bmN0aW9uJywgJ1Byb21pc2UnXSwgcHJvbWlzZUZuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVzdWx0UHJvbWlzZTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBOT19FWENFUFRJT05fU0VOVElORUw7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZXhwZWN0c0Vycm9yKHN0YWNrU3RhcnRGbiwgYWN0dWFsLCBlcnJvciwgbWVzc2FnZSkge1xuICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0KSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2Vycm9yJywgWydPYmplY3QnLCAnRXJyb3InLCAnRnVuY3Rpb24nLCAnUmVnRXhwJ10sIGVycm9yKTtcbiAgICB9XG5cbiAgICBpZiAoX3R5cGVvZihhY3R1YWwpID09PSAnb2JqZWN0JyAmJiBhY3R1YWwgIT09IG51bGwpIHtcbiAgICAgIGlmIChhY3R1YWwubWVzc2FnZSA9PT0gZXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVSUl9BTUJJR1VPVVNfQVJHVU1FTlQoJ2Vycm9yL21lc3NhZ2UnLCBcIlRoZSBlcnJvciBtZXNzYWdlIFxcXCJcIi5jb25jYXQoYWN0dWFsLm1lc3NhZ2UsIFwiXFxcIiBpcyBpZGVudGljYWwgdG8gdGhlIG1lc3NhZ2UuXCIpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFjdHVhbCA9PT0gZXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBFUlJfQU1CSUdVT1VTX0FSR1VNRU5UKCdlcnJvci9tZXNzYWdlJywgXCJUaGUgZXJyb3IgXFxcIlwiLmNvbmNhdChhY3R1YWwsIFwiXFxcIiBpcyBpZGVudGljYWwgdG8gdGhlIG1lc3NhZ2UuXCIpKTtcbiAgICB9XG5cbiAgICBtZXNzYWdlID0gZXJyb3I7XG4gICAgZXJyb3IgPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSBpZiAoZXJyb3IgIT0gbnVsbCAmJiBfdHlwZW9mKGVycm9yKSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIGVycm9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdlcnJvcicsIFsnT2JqZWN0JywgJ0Vycm9yJywgJ0Z1bmN0aW9uJywgJ1JlZ0V4cCddLCBlcnJvcik7XG4gIH1cblxuICBpZiAoYWN0dWFsID09PSBOT19FWENFUFRJT05fU0VOVElORUwpIHtcbiAgICB2YXIgZGV0YWlscyA9ICcnO1xuXG4gICAgaWYgKGVycm9yICYmIGVycm9yLm5hbWUpIHtcbiAgICAgIGRldGFpbHMgKz0gXCIgKFwiLmNvbmNhdChlcnJvci5uYW1lLCBcIilcIik7XG4gICAgfVxuXG4gICAgZGV0YWlscyArPSBtZXNzYWdlID8gXCI6IFwiLmNvbmNhdChtZXNzYWdlKSA6ICcuJztcbiAgICB2YXIgZm5UeXBlID0gc3RhY2tTdGFydEZuLm5hbWUgPT09ICdyZWplY3RzJyA/ICdyZWplY3Rpb24nIDogJ2V4Y2VwdGlvbic7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogdW5kZWZpbmVkLFxuICAgICAgZXhwZWN0ZWQ6IGVycm9yLFxuICAgICAgb3BlcmF0b3I6IHN0YWNrU3RhcnRGbi5uYW1lLFxuICAgICAgbWVzc2FnZTogXCJNaXNzaW5nIGV4cGVjdGVkIFwiLmNvbmNhdChmblR5cGUpLmNvbmNhdChkZXRhaWxzKSxcbiAgICAgIHN0YWNrU3RhcnRGbjogc3RhY2tTdGFydEZuXG4gICAgfSk7XG4gIH1cblxuICBpZiAoZXJyb3IgJiYgIWV4cGVjdGVkRXhjZXB0aW9uKGFjdHVhbCwgZXJyb3IsIG1lc3NhZ2UsIHN0YWNrU3RhcnRGbikpIHtcbiAgICB0aHJvdyBhY3R1YWw7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXhwZWN0c05vRXJyb3Ioc3RhY2tTdGFydEZuLCBhY3R1YWwsIGVycm9yLCBtZXNzYWdlKSB7XG4gIGlmIChhY3R1YWwgPT09IE5PX0VYQ0VQVElPTl9TRU5USU5FTCkgcmV0dXJuO1xuXG4gIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgbWVzc2FnZSA9IGVycm9yO1xuICAgIGVycm9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCFlcnJvciB8fCBleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGVycm9yKSkge1xuICAgIHZhciBkZXRhaWxzID0gbWVzc2FnZSA/IFwiOiBcIi5jb25jYXQobWVzc2FnZSkgOiAnLic7XG4gICAgdmFyIGZuVHlwZSA9IHN0YWNrU3RhcnRGbi5uYW1lID09PSAnZG9lc05vdFJlamVjdCcgPyAncmVqZWN0aW9uJyA6ICdleGNlcHRpb24nO1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBlcnJvcixcbiAgICAgIG9wZXJhdG9yOiBzdGFja1N0YXJ0Rm4ubmFtZSxcbiAgICAgIG1lc3NhZ2U6IFwiR290IHVud2FudGVkIFwiLmNvbmNhdChmblR5cGUpLmNvbmNhdChkZXRhaWxzLCBcIlxcblwiKSArIFwiQWN0dWFsIG1lc3NhZ2U6IFxcXCJcIi5jb25jYXQoYWN0dWFsICYmIGFjdHVhbC5tZXNzYWdlLCBcIlxcXCJcIiksXG4gICAgICBzdGFja1N0YXJ0Rm46IHN0YWNrU3RhcnRGblxuICAgIH0pO1xuICB9XG5cbiAgdGhyb3cgYWN0dWFsO1xufVxuXG5hc3NlcnQudGhyb3dzID0gZnVuY3Rpb24gdGhyb3dzKHByb21pc2VGbikge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gIH1cblxuICBleHBlY3RzRXJyb3IuYXBwbHkodm9pZCAwLCBbdGhyb3dzLCBnZXRBY3R1YWwocHJvbWlzZUZuKV0uY29uY2F0KGFyZ3MpKTtcbn07XG5cbmFzc2VydC5yZWplY3RzID0gZnVuY3Rpb24gcmVqZWN0cyhwcm9taXNlRm4pIHtcbiAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zID4gMSA/IF9sZW4zIC0gMSA6IDApLCBfa2V5MyA9IDE7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhcmdzW19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgcmV0dXJuIHdhaXRGb3JBY3R1YWwocHJvbWlzZUZuKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICByZXR1cm4gZXhwZWN0c0Vycm9yLmFwcGx5KHZvaWQgMCwgW3JlamVjdHMsIHJlc3VsdF0uY29uY2F0KGFyZ3MpKTtcbiAgfSk7XG59O1xuXG5hc3NlcnQuZG9lc05vdFRocm93ID0gZnVuY3Rpb24gZG9lc05vdFRocm93KGZuKSB7XG4gIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCA+IDEgPyBfbGVuNCAtIDEgOiAwKSwgX2tleTQgPSAxOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgYXJnc1tfa2V5NCAtIDFdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgfVxuXG4gIGV4cGVjdHNOb0Vycm9yLmFwcGx5KHZvaWQgMCwgW2RvZXNOb3RUaHJvdywgZ2V0QWN0dWFsKGZuKV0uY29uY2F0KGFyZ3MpKTtcbn07XG5cbmFzc2VydC5kb2VzTm90UmVqZWN0ID0gZnVuY3Rpb24gZG9lc05vdFJlamVjdChmbikge1xuICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjUgPiAxID8gX2xlbjUgLSAxIDogMCksIF9rZXk1ID0gMTsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgIGFyZ3NbX2tleTUgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gIH1cblxuICByZXR1cm4gd2FpdEZvckFjdHVhbChmbikudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIGV4cGVjdHNOb0Vycm9yLmFwcGx5KHZvaWQgMCwgW2RvZXNOb3RSZWplY3QsIHJlc3VsdF0uY29uY2F0KGFyZ3MpKTtcbiAgfSk7XG59O1xuXG5hc3NlcnQuaWZFcnJvciA9IGZ1bmN0aW9uIGlmRXJyb3IoZXJyKSB7XG4gIGlmIChlcnIgIT09IG51bGwgJiYgZXJyICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgbWVzc2FnZSA9ICdpZkVycm9yIGdvdCB1bndhbnRlZCBleGNlcHRpb246ICc7XG5cbiAgICBpZiAoX3R5cGVvZihlcnIpID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgZXJyLm1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAoZXJyLm1lc3NhZ2UubGVuZ3RoID09PSAwICYmIGVyci5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBtZXNzYWdlICs9IGVyci5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVzc2FnZSArPSBlcnIubWVzc2FnZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbWVzc2FnZSArPSBpbnNwZWN0KGVycik7XG4gICAgfVxuXG4gICAgdmFyIG5ld0VyciA9IG5ldyBBc3NlcnRpb25FcnJvcih7XG4gICAgICBhY3R1YWw6IGVycixcbiAgICAgIGV4cGVjdGVkOiBudWxsLFxuICAgICAgb3BlcmF0b3I6ICdpZkVycm9yJyxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBzdGFja1N0YXJ0Rm46IGlmRXJyb3JcbiAgICB9KTsgLy8gTWFrZSBzdXJlIHdlIGFjdHVhbGx5IGhhdmUgYSBzdGFjayB0cmFjZSFcblxuICAgIHZhciBvcmlnU3RhY2sgPSBlcnIuc3RhY2s7XG5cbiAgICBpZiAodHlwZW9mIG9yaWdTdGFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIFRoaXMgd2lsbCByZW1vdmUgYW55IGR1cGxpY2F0ZWQgZnJhbWVzIGZyb20gdGhlIGVycm9yIGZyYW1lcyB0YWtlblxuICAgICAgLy8gZnJvbSB3aXRoaW4gYGlmRXJyb3JgIGFuZCBhZGQgdGhlIG9yaWdpbmFsIGVycm9yIGZyYW1lcyB0byB0aGUgbmV3bHlcbiAgICAgIC8vIGNyZWF0ZWQgb25lcy5cbiAgICAgIHZhciB0bXAyID0gb3JpZ1N0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgIHRtcDIuc2hpZnQoKTsgLy8gRmlsdGVyIGFsbCBmcmFtZXMgZXhpc3RpbmcgaW4gZXJyLnN0YWNrLlxuXG4gICAgICB2YXIgdG1wMSA9IG5ld0Vyci5zdGFjay5zcGxpdCgnXFxuJyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG1wMi5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBGaW5kIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIHRoZSBmcmFtZS5cbiAgICAgICAgdmFyIHBvcyA9IHRtcDEuaW5kZXhPZih0bXAyW2ldKTtcblxuICAgICAgICBpZiAocG9zICE9PSAtMSkge1xuICAgICAgICAgIC8vIE9ubHkga2VlcCBuZXcgZnJhbWVzLlxuICAgICAgICAgIHRtcDEgPSB0bXAxLnNsaWNlKDAsIHBvcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV3RXJyLnN0YWNrID0gXCJcIi5jb25jYXQodG1wMS5qb2luKCdcXG4nKSwgXCJcXG5cIikuY29uY2F0KHRtcDIuam9pbignXFxuJykpO1xuICAgIH1cblxuICAgIHRocm93IG5ld0VycjtcbiAgfVxufTsgLy8gRXhwb3NlIGEgc3RyaWN0IG9ubHkgdmFyaWFudCBvZiBhc3NlcnRcblxuXG5mdW5jdGlvbiBzdHJpY3QoKSB7XG4gIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNiksIF9rZXk2ID0gMDsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgIGFyZ3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgfVxuXG4gIGlubmVyT2suYXBwbHkodm9pZCAwLCBbc3RyaWN0LCBhcmdzLmxlbmd0aF0uY29uY2F0KGFyZ3MpKTtcbn1cblxuYXNzZXJ0LnN0cmljdCA9IG9iamVjdEFzc2lnbihzdHJpY3QsIGFzc2VydCwge1xuICBlcXVhbDogYXNzZXJ0LnN0cmljdEVxdWFsLFxuICBkZWVwRXF1YWw6IGFzc2VydC5kZWVwU3RyaWN0RXF1YWwsXG4gIG5vdEVxdWFsOiBhc3NlcnQubm90U3RyaWN0RXF1YWwsXG4gIG5vdERlZXBFcXVhbDogYXNzZXJ0Lm5vdERlZXBTdHJpY3RFcXVhbFxufSk7XG5hc3NlcnQuc3RyaWN0LnN0cmljdCA9IGFzc2VydC5zdHJpY3Q7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA5ODAxOlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIHByb3ZpZGVkIGRlcGVuZGVuY3kgKi8gdmFyIHByb2Nlc3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5MDcpO1xuLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9pbnRlcm5hbC9hc3NlcnQvYXNzZXJ0aW9uX2Vycm9yLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzA4MTc4NDBmNzc1MDMyMTY5ZGRkNzBjODVhYzA1OWYxOGZmY2M4MWNcblxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHsgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTsgfSkpOyB9IG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykgeyB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkOyBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykgeyBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzOyBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7IGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpOyBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTsgfSBmdW5jdGlvbiBXcmFwcGVyKCkgeyByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpOyB9IFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IFdyYXBwZXIsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpOyB9OyByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7IH1cblxuZnVuY3Rpb24gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykgeyBpZiAoaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHsgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0OyB9IGVsc2UgeyBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7IHZhciBhID0gW251bGxdOyBhLnB1c2guYXBwbHkoYSwgYXJncyk7IHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTsgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7IGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpOyByZXR1cm4gaW5zdGFuY2U7IH07IH0gcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikgeyByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxudmFyIF9yZXF1aXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2ODI3KSxcbiAgICBpbnNwZWN0ID0gX3JlcXVpcmUuaW5zcGVjdDtcblxudmFyIF9yZXF1aXJlMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTM0MiksXG4gICAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZTIuY29kZXMuRVJSX0lOVkFMSURfQVJHX1RZUEU7IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9lbmRzV2l0aFxuXG5cbmZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoLCB0aGlzX2xlbikge1xuICBpZiAodGhpc19sZW4gPT09IHVuZGVmaW5lZCB8fCB0aGlzX2xlbiA+IHN0ci5sZW5ndGgpIHtcbiAgICB0aGlzX2xlbiA9IHN0ci5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gc3RyLnN1YnN0cmluZyh0aGlzX2xlbiAtIHNlYXJjaC5sZW5ndGgsIHRoaXNfbGVuKSA9PT0gc2VhcmNoO1xufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvcmVwZWF0XG5cblxuZnVuY3Rpb24gcmVwZWF0KHN0ciwgY291bnQpIHtcbiAgY291bnQgPSBNYXRoLmZsb29yKGNvdW50KTtcbiAgaWYgKHN0ci5sZW5ndGggPT0gMCB8fCBjb3VudCA9PSAwKSByZXR1cm4gJyc7XG4gIHZhciBtYXhDb3VudCA9IHN0ci5sZW5ndGggKiBjb3VudDtcbiAgY291bnQgPSBNYXRoLmZsb29yKE1hdGgubG9nKGNvdW50KSAvIE1hdGgubG9nKDIpKTtcblxuICB3aGlsZSAoY291bnQpIHtcbiAgICBzdHIgKz0gc3RyO1xuICAgIGNvdW50LS07XG4gIH1cblxuICBzdHIgKz0gc3RyLnN1YnN0cmluZygwLCBtYXhDb3VudCAtIHN0ci5sZW5ndGgpO1xuICByZXR1cm4gc3RyO1xufVxuXG52YXIgYmx1ZSA9ICcnO1xudmFyIGdyZWVuID0gJyc7XG52YXIgcmVkID0gJyc7XG52YXIgd2hpdGUgPSAnJztcbnZhciBrUmVhZGFibGVPcGVyYXRvciA9IHtcbiAgZGVlcFN0cmljdEVxdWFsOiAnRXhwZWN0ZWQgdmFsdWVzIHRvIGJlIHN0cmljdGx5IGRlZXAtZXF1YWw6JyxcbiAgc3RyaWN0RXF1YWw6ICdFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgc3RyaWN0bHkgZXF1YWw6JyxcbiAgc3RyaWN0RXF1YWxPYmplY3Q6ICdFeHBlY3RlZCBcImFjdHVhbFwiIHRvIGJlIHJlZmVyZW5jZS1lcXVhbCB0byBcImV4cGVjdGVkXCI6JyxcbiAgZGVlcEVxdWFsOiAnRXhwZWN0ZWQgdmFsdWVzIHRvIGJlIGxvb3NlbHkgZGVlcC1lcXVhbDonLFxuICBlcXVhbDogJ0V4cGVjdGVkIHZhbHVlcyB0byBiZSBsb29zZWx5IGVxdWFsOicsXG4gIG5vdERlZXBTdHJpY3RFcXVhbDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgbm90IHRvIGJlIHN0cmljdGx5IGRlZXAtZXF1YWwgdG86JyxcbiAgbm90U3RyaWN0RXF1YWw6ICdFeHBlY3RlZCBcImFjdHVhbFwiIHRvIGJlIHN0cmljdGx5IHVuZXF1YWwgdG86JyxcbiAgbm90U3RyaWN0RXF1YWxPYmplY3Q6ICdFeHBlY3RlZCBcImFjdHVhbFwiIG5vdCB0byBiZSByZWZlcmVuY2UtZXF1YWwgdG8gXCJleHBlY3RlZFwiOicsXG4gIG5vdERlZXBFcXVhbDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgbm90IHRvIGJlIGxvb3NlbHkgZGVlcC1lcXVhbCB0bzonLFxuICBub3RFcXVhbDogJ0V4cGVjdGVkIFwiYWN0dWFsXCIgdG8gYmUgbG9vc2VseSB1bmVxdWFsIHRvOicsXG4gIG5vdElkZW50aWNhbDogJ1ZhbHVlcyBpZGVudGljYWwgYnV0IG5vdCByZWZlcmVuY2UtZXF1YWw6J1xufTsgLy8gQ29tcGFyaW5nIHNob3J0IHByaW1pdGl2ZXMgc2hvdWxkIGp1c3Qgc2hvdyA9PT0gLyAhPT0gaW5zdGVhZCBvZiB1c2luZyB0aGVcbi8vIGRpZmYuXG5cbnZhciBrTWF4U2hvcnRMZW5ndGggPSAxMDtcblxuZnVuY3Rpb24gY29weUVycm9yKHNvdXJjZSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciB0YXJnZXQgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2UpKTtcbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgJ21lc3NhZ2UnLCB7XG4gICAgdmFsdWU6IHNvdXJjZS5tZXNzYWdlXG4gIH0pO1xuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBpbnNwZWN0VmFsdWUodmFsKSB7XG4gIC8vIFRoZSB1dGlsLmluc3BlY3QgZGVmYXVsdCB2YWx1ZXMgY291bGQgYmUgY2hhbmdlZC4gVGhpcyBtYWtlcyBzdXJlIHRoZVxuICAvLyBlcnJvciBtZXNzYWdlcyBjb250YWluIHRoZSBuZWNlc3NhcnkgaW5mb3JtYXRpb24gbmV2ZXJ0aGVsZXNzLlxuICByZXR1cm4gaW5zcGVjdCh2YWwsIHtcbiAgICBjb21wYWN0OiBmYWxzZSxcbiAgICBjdXN0b21JbnNwZWN0OiBmYWxzZSxcbiAgICBkZXB0aDogMTAwMCxcbiAgICBtYXhBcnJheUxlbmd0aDogSW5maW5pdHksXG4gICAgLy8gQXNzZXJ0IGNvbXBhcmVzIG9ubHkgZW51bWVyYWJsZSBwcm9wZXJ0aWVzICh3aXRoIGEgZmV3IGV4Y2VwdGlvbnMpLlxuICAgIHNob3dIaWRkZW46IGZhbHNlLFxuICAgIC8vIEhhdmluZyBhIGxvbmcgbGluZSBhcyBlcnJvciBpcyBiZXR0ZXIgdGhhbiB3cmFwcGluZyB0aGUgbGluZSBmb3JcbiAgICAvLyBjb21wYXJpc29uIGZvciBub3cuXG4gICAgLy8gVE9ETyhCcmlkZ2VBUik6IGBicmVha0xlbmd0aGAgc2hvdWxkIGJlIGxpbWl0ZWQgYXMgc29vbiBhcyBzb29uIGFzIHdlXG4gICAgLy8gaGF2ZSBtZXRhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpbnNwZWN0ZWQgcHJvcGVydGllcyAoaS5lLiwga25vdyB3aGVyZVxuICAgIC8vIGluIHdoYXQgbGluZSB0aGUgcHJvcGVydHkgc3RhcnRzIGFuZCBlbmRzKS5cbiAgICBicmVha0xlbmd0aDogSW5maW5pdHksXG4gICAgLy8gQXNzZXJ0IGRvZXMgbm90IGRldGVjdCBwcm94aWVzIGN1cnJlbnRseS5cbiAgICBzaG93UHJveHk6IGZhbHNlLFxuICAgIHNvcnRlZDogdHJ1ZSxcbiAgICAvLyBJbnNwZWN0IGdldHRlcnMgYXMgd2UgYWxzbyBjaGVjayB0aGVtIHdoZW4gY29tcGFyaW5nIGVudHJpZXMuXG4gICAgZ2V0dGVyczogdHJ1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXJyRGlmZihhY3R1YWwsIGV4cGVjdGVkLCBvcGVyYXRvcikge1xuICB2YXIgb3RoZXIgPSAnJztcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbGFzdFBvcyA9IDA7XG4gIHZhciBlbmQgPSAnJztcbiAgdmFyIHNraXBwZWQgPSBmYWxzZTtcbiAgdmFyIGFjdHVhbEluc3BlY3RlZCA9IGluc3BlY3RWYWx1ZShhY3R1YWwpO1xuICB2YXIgYWN0dWFsTGluZXMgPSBhY3R1YWxJbnNwZWN0ZWQuc3BsaXQoJ1xcbicpO1xuICB2YXIgZXhwZWN0ZWRMaW5lcyA9IGluc3BlY3RWYWx1ZShleHBlY3RlZCkuc3BsaXQoJ1xcbicpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBpbmRpY2F0b3IgPSAnJzsgLy8gSW4gY2FzZSBib3RoIHZhbHVlcyBhcmUgb2JqZWN0cyBleHBsaWNpdGx5IG1hcmsgdGhlbSBhcyBub3QgcmVmZXJlbmNlIGVxdWFsXG4gIC8vIGZvciB0aGUgYHN0cmljdEVxdWFsYCBvcGVyYXRvci5cblxuICBpZiAob3BlcmF0b3IgPT09ICdzdHJpY3RFcXVhbCcgJiYgX3R5cGVvZihhY3R1YWwpID09PSAnb2JqZWN0JyAmJiBfdHlwZW9mKGV4cGVjdGVkKSA9PT0gJ29iamVjdCcgJiYgYWN0dWFsICE9PSBudWxsICYmIGV4cGVjdGVkICE9PSBudWxsKSB7XG4gICAgb3BlcmF0b3IgPSAnc3RyaWN0RXF1YWxPYmplY3QnO1xuICB9IC8vIElmIFwiYWN0dWFsXCIgYW5kIFwiZXhwZWN0ZWRcIiBmaXQgb24gYSBzaW5nbGUgbGluZSBhbmQgdGhleSBhcmUgbm90IHN0cmljdGx5XG4gIC8vIGVxdWFsLCBjaGVjayBmdXJ0aGVyIHNwZWNpYWwgaGFuZGxpbmcuXG5cblxuICBpZiAoYWN0dWFsTGluZXMubGVuZ3RoID09PSAxICYmIGV4cGVjdGVkTGluZXMubGVuZ3RoID09PSAxICYmIGFjdHVhbExpbmVzWzBdICE9PSBleHBlY3RlZExpbmVzWzBdKSB7XG4gICAgdmFyIGlucHV0TGVuZ3RoID0gYWN0dWFsTGluZXNbMF0ubGVuZ3RoICsgZXhwZWN0ZWRMaW5lc1swXS5sZW5ndGg7IC8vIElmIHRoZSBjaGFyYWN0ZXIgbGVuZ3RoIG9mIFwiYWN0dWFsXCIgYW5kIFwiZXhwZWN0ZWRcIiB0b2dldGhlciBpcyBsZXNzIHRoYW5cbiAgICAvLyBrTWF4U2hvcnRMZW5ndGggYW5kIGlmIG5laXRoZXIgaXMgYW4gb2JqZWN0IGFuZCBhdCBsZWFzdCBvbmUgb2YgdGhlbSBpc1xuICAgIC8vIG5vdCBgemVyb2AsIHVzZSB0aGUgc3RyaWN0IGVxdWFsIGNvbXBhcmlzb24gdG8gdmlzdWFsaXplIHRoZSBvdXRwdXQuXG5cbiAgICBpZiAoaW5wdXRMZW5ndGggPD0ga01heFNob3J0TGVuZ3RoKSB7XG4gICAgICBpZiAoKF90eXBlb2YoYWN0dWFsKSAhPT0gJ29iamVjdCcgfHwgYWN0dWFsID09PSBudWxsKSAmJiAoX3R5cGVvZihleHBlY3RlZCkgIT09ICdvYmplY3QnIHx8IGV4cGVjdGVkID09PSBudWxsKSAmJiAoYWN0dWFsICE9PSAwIHx8IGV4cGVjdGVkICE9PSAwKSkge1xuICAgICAgICAvLyAtMCA9PT0gKzBcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGtSZWFkYWJsZU9wZXJhdG9yW29wZXJhdG9yXSwgXCJcXG5cXG5cIikgKyBcIlwiLmNvbmNhdChhY3R1YWxMaW5lc1swXSwgXCIgIT09IFwiKS5jb25jYXQoZXhwZWN0ZWRMaW5lc1swXSwgXCJcXG5cIik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvcGVyYXRvciAhPT0gJ3N0cmljdEVxdWFsT2JqZWN0Jykge1xuICAgICAgLy8gSWYgdGhlIHN0ZGVyciBpcyBhIHR0eSBhbmQgdGhlIGlucHV0IGxlbmd0aCBpcyBsb3dlciB0aGFuIHRoZSBjdXJyZW50XG4gICAgICAvLyBjb2x1bW5zIHBlciBsaW5lLCBhZGQgYSBtaXNtYXRjaCBpbmRpY2F0b3IgYmVsb3cgdGhlIG91dHB1dC4gSWYgaXQgaXNcbiAgICAgIC8vIG5vdCBhIHR0eSwgdXNlIGEgZGVmYXVsdCB2YWx1ZSBvZiA4MCBjaGFyYWN0ZXJzLlxuICAgICAgdmFyIG1heExlbmd0aCA9IHByb2Nlc3Muc3RkZXJyICYmIHByb2Nlc3Muc3RkZXJyLmlzVFRZID8gcHJvY2Vzcy5zdGRlcnIuY29sdW1ucyA6IDgwO1xuXG4gICAgICBpZiAoaW5wdXRMZW5ndGggPCBtYXhMZW5ndGgpIHtcbiAgICAgICAgd2hpbGUgKGFjdHVhbExpbmVzWzBdW2ldID09PSBleHBlY3RlZExpbmVzWzBdW2ldKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9IC8vIElnbm9yZSB0aGUgZmlyc3QgY2hhcmFjdGVycy5cblxuXG4gICAgICAgIGlmIChpID4gMikge1xuICAgICAgICAgIC8vIEFkZCBwb3NpdGlvbiBpbmRpY2F0b3IgZm9yIHRoZSBmaXJzdCBtaXNtYXRjaCBpbiBjYXNlIGl0IGlzIGFcbiAgICAgICAgICAvLyBzaW5nbGUgbGluZSBhbmQgdGhlIGlucHV0IGxlbmd0aCBpcyBsZXNzIHRoYW4gdGhlIGNvbHVtbiBsZW5ndGguXG4gICAgICAgICAgaW5kaWNhdG9yID0gXCJcXG4gIFwiLmNvbmNhdChyZXBlYXQoJyAnLCBpKSwgXCJeXCIpO1xuICAgICAgICAgIGkgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IC8vIFJlbW92ZSBhbGwgZW5kaW5nIGxpbmVzIHRoYXQgbWF0Y2ggKHRoaXMgb3B0aW1pemVzIHRoZSBvdXRwdXQgZm9yXG4gIC8vIHJlYWRhYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBudW1iZXIgb2YgdG90YWwgY2hhbmdlZCBsaW5lcykuXG5cblxuICB2YXIgYSA9IGFjdHVhbExpbmVzW2FjdHVhbExpbmVzLmxlbmd0aCAtIDFdO1xuICB2YXIgYiA9IGV4cGVjdGVkTGluZXNbZXhwZWN0ZWRMaW5lcy5sZW5ndGggLSAxXTtcblxuICB3aGlsZSAoYSA9PT0gYikge1xuICAgIGlmIChpKysgPCAyKSB7XG4gICAgICBlbmQgPSBcIlxcbiAgXCIuY29uY2F0KGEpLmNvbmNhdChlbmQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdGhlciA9IGE7XG4gICAgfVxuXG4gICAgYWN0dWFsTGluZXMucG9wKCk7XG4gICAgZXhwZWN0ZWRMaW5lcy5wb3AoKTtcbiAgICBpZiAoYWN0dWFsTGluZXMubGVuZ3RoID09PSAwIHx8IGV4cGVjdGVkTGluZXMubGVuZ3RoID09PSAwKSBicmVhaztcbiAgICBhID0gYWN0dWFsTGluZXNbYWN0dWFsTGluZXMubGVuZ3RoIC0gMV07XG4gICAgYiA9IGV4cGVjdGVkTGluZXNbZXhwZWN0ZWRMaW5lcy5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIHZhciBtYXhMaW5lcyA9IE1hdGgubWF4KGFjdHVhbExpbmVzLmxlbmd0aCwgZXhwZWN0ZWRMaW5lcy5sZW5ndGgpOyAvLyBTdHJpY3QgZXF1YWwgd2l0aCBpZGVudGljYWwgb2JqZWN0cyB0aGF0IGFyZSBub3QgaWRlbnRpY2FsIGJ5IHJlZmVyZW5jZS5cbiAgLy8gRS5nLiwgYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCh7IGE6IFN5bWJvbCgpIH0sIHsgYTogU3ltYm9sKCkgfSlcblxuICBpZiAobWF4TGluZXMgPT09IDApIHtcbiAgICAvLyBXZSBoYXZlIHRvIGdldCB0aGUgcmVzdWx0IGFnYWluLiBUaGUgbGluZXMgd2VyZSBhbGwgcmVtb3ZlZCBiZWZvcmUuXG4gICAgdmFyIF9hY3R1YWxMaW5lcyA9IGFjdHVhbEluc3BlY3RlZC5zcGxpdCgnXFxuJyk7IC8vIE9ubHkgcmVtb3ZlIGxpbmVzIGluIGNhc2UgaXQgbWFrZXMgc2Vuc2UgdG8gY29sbGFwc2UgdGhvc2UuXG4gICAgLy8gVE9ETzogQWNjZXB0IGVudiB0byBhbHdheXMgc2hvdyB0aGUgZnVsbCBlcnJvci5cblxuXG4gICAgaWYgKF9hY3R1YWxMaW5lcy5sZW5ndGggPiAzMCkge1xuICAgICAgX2FjdHVhbExpbmVzWzI2XSA9IFwiXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG5cbiAgICAgIHdoaWxlIChfYWN0dWFsTGluZXMubGVuZ3RoID4gMjcpIHtcbiAgICAgICAgX2FjdHVhbExpbmVzLnBvcCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBcIlwiLmNvbmNhdChrUmVhZGFibGVPcGVyYXRvci5ub3RJZGVudGljYWwsIFwiXFxuXFxuXCIpLmNvbmNhdChfYWN0dWFsTGluZXMuam9pbignXFxuJyksIFwiXFxuXCIpO1xuICB9XG5cbiAgaWYgKGkgPiAzKSB7XG4gICAgZW5kID0gXCJcXG5cIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKS5jb25jYXQoZW5kKTtcbiAgICBza2lwcGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChvdGhlciAhPT0gJycpIHtcbiAgICBlbmQgPSBcIlxcbiAgXCIuY29uY2F0KG90aGVyKS5jb25jYXQoZW5kKTtcbiAgICBvdGhlciA9ICcnO1xuICB9XG5cbiAgdmFyIHByaW50ZWRMaW5lcyA9IDA7XG4gIHZhciBtc2cgPSBrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl0gKyBcIlxcblwiLmNvbmNhdChncmVlbiwgXCIrIGFjdHVhbFwiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQocmVkLCBcIi0gZXhwZWN0ZWRcIikuY29uY2F0KHdoaXRlKTtcbiAgdmFyIHNraXBwZWRNc2cgPSBcIiBcIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlLCBcIiBMaW5lcyBza2lwcGVkXCIpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBtYXhMaW5lczsgaSsrKSB7XG4gICAgLy8gT25seSBleHRyYSBleHBlY3RlZCBsaW5lcyBleGlzdFxuICAgIHZhciBjdXIgPSBpIC0gbGFzdFBvcztcblxuICAgIGlmIChhY3R1YWxMaW5lcy5sZW5ndGggPCBpICsgMSkge1xuICAgICAgLy8gSWYgdGhlIGxhc3QgZGl2ZXJnaW5nIGxpbmUgaXMgbW9yZSB0aGFuIG9uZSBsaW5lIGFib3ZlIGFuZCB0aGVcbiAgICAgIC8vIGN1cnJlbnQgbGluZSBpcyBhdCBsZWFzdCBsaW5lIHRocmVlLCBhZGQgc29tZSBvZiB0aGUgZm9ybWVyIGxpbmVzIGFuZFxuICAgICAgLy8gYWxzbyBhZGQgZG90cyB0byBpbmRpY2F0ZSBza2lwcGVkIGVudHJpZXMuXG4gICAgICBpZiAoY3VyID4gMSAmJiBpID4gMikge1xuICAgICAgICBpZiAoY3VyID4gNCkge1xuICAgICAgICAgIHJlcyArPSBcIlxcblwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuICAgICAgICAgIHNraXBwZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGN1ciA+IDMpIHtcbiAgICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChleHBlY3RlZExpbmVzW2kgLSAyXSk7XG4gICAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICAgIH1cblxuICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChleHBlY3RlZExpbmVzW2kgLSAxXSk7XG4gICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgfSAvLyBNYXJrIHRoZSBjdXJyZW50IGxpbmUgYXMgdGhlIGxhc3QgZGl2ZXJnaW5nIG9uZS5cblxuXG4gICAgICBsYXN0UG9zID0gaTsgLy8gQWRkIHRoZSBleHBlY3RlZCBsaW5lIHRvIHRoZSBjYWNoZS5cblxuICAgICAgb3RoZXIgKz0gXCJcXG5cIi5jb25jYXQocmVkLCBcIi1cIikuY29uY2F0KHdoaXRlLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkTGluZXNbaV0pO1xuICAgICAgcHJpbnRlZExpbmVzKys7IC8vIE9ubHkgZXh0cmEgYWN0dWFsIGxpbmVzIGV4aXN0XG4gICAgfSBlbHNlIGlmIChleHBlY3RlZExpbmVzLmxlbmd0aCA8IGkgKyAxKSB7XG4gICAgICAvLyBJZiB0aGUgbGFzdCBkaXZlcmdpbmcgbGluZSBpcyBtb3JlIHRoYW4gb25lIGxpbmUgYWJvdmUgYW5kIHRoZVxuICAgICAgLy8gY3VycmVudCBsaW5lIGlzIGF0IGxlYXN0IGxpbmUgdGhyZWUsIGFkZCBzb21lIG9mIHRoZSBmb3JtZXIgbGluZXMgYW5kXG4gICAgICAvLyBhbHNvIGFkZCBkb3RzIHRvIGluZGljYXRlIHNraXBwZWQgZW50cmllcy5cbiAgICAgIGlmIChjdXIgPiAxICYmIGkgPiAyKSB7XG4gICAgICAgIGlmIChjdXIgPiA0KSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG4gICAgICAgICAgc2tpcHBlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoY3VyID4gMykge1xuICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmVzW2kgLSAyXSk7XG4gICAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICAgIH1cblxuICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChhY3R1YWxMaW5lc1tpIC0gMV0pO1xuICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgIH0gLy8gTWFyayB0aGUgY3VycmVudCBsaW5lIGFzIHRoZSBsYXN0IGRpdmVyZ2luZyBvbmUuXG5cblxuICAgICAgbGFzdFBvcyA9IGk7IC8vIEFkZCB0aGUgYWN0dWFsIGxpbmUgdG8gdGhlIHJlc3VsdC5cblxuICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGdyZWVuLCBcIitcIikuY29uY2F0KHdoaXRlLCBcIiBcIikuY29uY2F0KGFjdHVhbExpbmVzW2ldKTtcbiAgICAgIHByaW50ZWRMaW5lcysrOyAvLyBMaW5lcyBkaXZlcmdlXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBleHBlY3RlZExpbmUgPSBleHBlY3RlZExpbmVzW2ldO1xuICAgICAgdmFyIGFjdHVhbExpbmUgPSBhY3R1YWxMaW5lc1tpXTsgLy8gSWYgdGhlIGxpbmVzIGRpdmVyZ2UsIHNwZWNpZmljYWxseSBjaGVjayBmb3IgbGluZXMgdGhhdCBvbmx5IGRpdmVyZ2UgYnlcbiAgICAgIC8vIGEgdHJhaWxpbmcgY29tbWEuIEluIHRoYXQgY2FzZSBpdCBpcyBhY3R1YWxseSBpZGVudGljYWwgYW5kIHdlIHNob3VsZFxuICAgICAgLy8gbWFyayBpdCBhcyBzdWNoLlxuXG4gICAgICB2YXIgZGl2ZXJnaW5nTGluZXMgPSBhY3R1YWxMaW5lICE9PSBleHBlY3RlZExpbmUgJiYgKCFlbmRzV2l0aChhY3R1YWxMaW5lLCAnLCcpIHx8IGFjdHVhbExpbmUuc2xpY2UoMCwgLTEpICE9PSBleHBlY3RlZExpbmUpOyAvLyBJZiB0aGUgZXhwZWN0ZWQgbGluZSBoYXMgYSB0cmFpbGluZyBjb21tYSBidXQgaXMgb3RoZXJ3aXNlIGlkZW50aWNhbCxcbiAgICAgIC8vIGFkZCBhIGNvbW1hIGF0IHRoZSBlbmQgb2YgdGhlIGFjdHVhbCBsaW5lLiBPdGhlcndpc2UgdGhlIG91dHB1dCBjb3VsZFxuICAgICAgLy8gbG9vayB3ZWlyZCBhcyBpbjpcbiAgICAgIC8vXG4gICAgICAvLyAgIFtcbiAgICAgIC8vICAgICAxICAgICAgICAgLy8gTm8gY29tbWEgYXQgdGhlIGVuZCFcbiAgICAgIC8vICsgICAyXG4gICAgICAvLyAgIF1cbiAgICAgIC8vXG5cbiAgICAgIGlmIChkaXZlcmdpbmdMaW5lcyAmJiBlbmRzV2l0aChleHBlY3RlZExpbmUsICcsJykgJiYgZXhwZWN0ZWRMaW5lLnNsaWNlKDAsIC0xKSA9PT0gYWN0dWFsTGluZSkge1xuICAgICAgICBkaXZlcmdpbmdMaW5lcyA9IGZhbHNlO1xuICAgICAgICBhY3R1YWxMaW5lICs9ICcsJztcbiAgICAgIH1cblxuICAgICAgaWYgKGRpdmVyZ2luZ0xpbmVzKSB7XG4gICAgICAgIC8vIElmIHRoZSBsYXN0IGRpdmVyZ2luZyBsaW5lIGlzIG1vcmUgdGhhbiBvbmUgbGluZSBhYm92ZSBhbmQgdGhlXG4gICAgICAgIC8vIGN1cnJlbnQgbGluZSBpcyBhdCBsZWFzdCBsaW5lIHRocmVlLCBhZGQgc29tZSBvZiB0aGUgZm9ybWVyIGxpbmVzIGFuZFxuICAgICAgICAvLyBhbHNvIGFkZCBkb3RzIHRvIGluZGljYXRlIHNraXBwZWQgZW50cmllcy5cbiAgICAgICAgaWYgKGN1ciA+IDEgJiYgaSA+IDIpIHtcbiAgICAgICAgICBpZiAoY3VyID4gNCkge1xuICAgICAgICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG4gICAgICAgICAgICBza2lwcGVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1ciA+IDMpIHtcbiAgICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmVzW2kgLSAyXSk7XG4gICAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChhY3R1YWxMaW5lc1tpIC0gMV0pO1xuICAgICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgICB9IC8vIE1hcmsgdGhlIGN1cnJlbnQgbGluZSBhcyB0aGUgbGFzdCBkaXZlcmdpbmcgb25lLlxuXG5cbiAgICAgICAgbGFzdFBvcyA9IGk7IC8vIEFkZCB0aGUgYWN0dWFsIGxpbmUgdG8gdGhlIHJlc3VsdCBhbmQgY2FjaGUgdGhlIGV4cGVjdGVkIGRpdmVyZ2luZ1xuICAgICAgICAvLyBsaW5lIHNvIGNvbnNlY3V0aXZlIGRpdmVyZ2luZyBsaW5lcyBzaG93IHVwIGFzICsrKy0tLSBhbmQgbm90ICstKy0rLS5cblxuICAgICAgICByZXMgKz0gXCJcXG5cIi5jb25jYXQoZ3JlZW4sIFwiK1wiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQoYWN0dWFsTGluZSk7XG4gICAgICAgIG90aGVyICs9IFwiXFxuXCIuY29uY2F0KHJlZCwgXCItXCIpLmNvbmNhdCh3aGl0ZSwgXCIgXCIpLmNvbmNhdChleHBlY3RlZExpbmUpO1xuICAgICAgICBwcmludGVkTGluZXMgKz0gMjsgLy8gTGluZXMgYXJlIGlkZW50aWNhbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQWRkIGFsbCBjYWNoZWQgaW5mb3JtYXRpb24gdG8gdGhlIHJlc3VsdCBiZWZvcmUgYWRkaW5nIG90aGVyIHRoaW5nc1xuICAgICAgICAvLyBhbmQgcmVzZXQgdGhlIGNhY2hlLlxuICAgICAgICByZXMgKz0gb3RoZXI7XG4gICAgICAgIG90aGVyID0gJyc7IC8vIElmIHRoZSBsYXN0IGRpdmVyZ2luZyBsaW5lIGlzIGV4YWN0bHkgb25lIGxpbmUgYWJvdmUgb3IgaWYgaXQgaXMgdGhlXG4gICAgICAgIC8vIHZlcnkgZmlyc3QgbGluZSwgYWRkIHRoZSBsaW5lIHRvIHRoZSByZXN1bHQuXG5cbiAgICAgICAgaWYgKGN1ciA9PT0gMSB8fCBpID09PSAwKSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoYWN0dWFsTGluZSk7XG4gICAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIEluc3BlY3RlZCBvYmplY3QgdG8gYmlnIChTaG93IH4yMCByb3dzIG1heClcblxuXG4gICAgaWYgKHByaW50ZWRMaW5lcyA+IDIwICYmIGkgPCBtYXhMaW5lcyAtIDIpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChtc2cpLmNvbmNhdChza2lwcGVkTXNnLCBcIlxcblwiKS5jb25jYXQocmVzLCBcIlxcblwiKS5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKS5jb25jYXQob3RoZXIsIFwiXFxuXCIpICsgXCJcIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQobXNnKS5jb25jYXQoc2tpcHBlZCA/IHNraXBwZWRNc2cgOiAnJywgXCJcXG5cIikuY29uY2F0KHJlcykuY29uY2F0KG90aGVyKS5jb25jYXQoZW5kKS5jb25jYXQoaW5kaWNhdG9yKTtcbn1cblxudmFyIEFzc2VydGlvbkVycm9yID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfRXJyb3IpIHtcbiAgX2luaGVyaXRzKEFzc2VydGlvbkVycm9yLCBfRXJyb3IpO1xuXG4gIGZ1bmN0aW9uIEFzc2VydGlvbkVycm9yKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXNzZXJ0aW9uRXJyb3IpO1xuXG4gICAgaWYgKF90eXBlb2Yob3B0aW9ucykgIT09ICdvYmplY3QnIHx8IG9wdGlvbnMgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnb3B0aW9ucycsICdPYmplY3QnLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICB2YXIgbWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZSxcbiAgICAgICAgb3BlcmF0b3IgPSBvcHRpb25zLm9wZXJhdG9yLFxuICAgICAgICBzdGFja1N0YXJ0Rm4gPSBvcHRpb25zLnN0YWNrU3RhcnRGbjtcbiAgICB2YXIgYWN0dWFsID0gb3B0aW9ucy5hY3R1YWwsXG4gICAgICAgIGV4cGVjdGVkID0gb3B0aW9ucy5leHBlY3RlZDtcbiAgICB2YXIgbGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXQ7XG4gICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gMDtcblxuICAgIGlmIChtZXNzYWdlICE9IG51bGwpIHtcbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFzc2VydGlvbkVycm9yKS5jYWxsKHRoaXMsIFN0cmluZyhtZXNzYWdlKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5zdGRlcnIgJiYgcHJvY2Vzcy5zdGRlcnIuaXNUVFkpIHtcbiAgICAgICAgLy8gUmVzZXQgb24gZWFjaCBjYWxsIHRvIG1ha2Ugc3VyZSB3ZSBoYW5kbGUgZHluYW1pY2FsbHkgc2V0IGVudmlyb25tZW50XG4gICAgICAgIC8vIHZhcmlhYmxlcyBjb3JyZWN0LlxuICAgICAgICBpZiAocHJvY2Vzcy5zdGRlcnIgJiYgcHJvY2Vzcy5zdGRlcnIuZ2V0Q29sb3JEZXB0aCAmJiBwcm9jZXNzLnN0ZGVyci5nZXRDb2xvckRlcHRoKCkgIT09IDEpIHtcbiAgICAgICAgICBibHVlID0gXCJcXHgxQlszNG1cIjtcbiAgICAgICAgICBncmVlbiA9IFwiXFx4MUJbMzJtXCI7XG4gICAgICAgICAgd2hpdGUgPSBcIlxceDFCWzM5bVwiO1xuICAgICAgICAgIHJlZCA9IFwiXFx4MUJbMzFtXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmx1ZSA9ICcnO1xuICAgICAgICAgIGdyZWVuID0gJyc7XG4gICAgICAgICAgd2hpdGUgPSAnJztcbiAgICAgICAgICByZWQgPSAnJztcbiAgICAgICAgfVxuICAgICAgfSAvLyBQcmV2ZW50IHRoZSBlcnJvciBzdGFjayBmcm9tIGJlaW5nIHZpc2libGUgYnkgZHVwbGljYXRpbmcgdGhlIGVycm9yXG4gICAgICAvLyBpbiBhIHZlcnkgY2xvc2Ugd2F5IHRvIHRoZSBvcmlnaW5hbCBpbiBjYXNlIGJvdGggc2lkZXMgYXJlIGFjdHVhbGx5XG4gICAgICAvLyBpbnN0YW5jZXMgb2YgRXJyb3IuXG5cblxuICAgICAgaWYgKF90eXBlb2YoYWN0dWFsKSA9PT0gJ29iamVjdCcgJiYgYWN0dWFsICE9PSBudWxsICYmIF90eXBlb2YoZXhwZWN0ZWQpID09PSAnb2JqZWN0JyAmJiBleHBlY3RlZCAhPT0gbnVsbCAmJiAnc3RhY2snIGluIGFjdHVhbCAmJiBhY3R1YWwgaW5zdGFuY2VvZiBFcnJvciAmJiAnc3RhY2snIGluIGV4cGVjdGVkICYmIGV4cGVjdGVkIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgYWN0dWFsID0gY29weUVycm9yKGFjdHVhbCk7XG4gICAgICAgIGV4cGVjdGVkID0gY29weUVycm9yKGV4cGVjdGVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wZXJhdG9yID09PSAnZGVlcFN0cmljdEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ3N0cmljdEVxdWFsJykge1xuICAgICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBc3NlcnRpb25FcnJvcikuY2FsbCh0aGlzLCBjcmVhdGVFcnJEaWZmKGFjdHVhbCwgZXhwZWN0ZWQsIG9wZXJhdG9yKSkpO1xuICAgICAgfSBlbHNlIGlmIChvcGVyYXRvciA9PT0gJ25vdERlZXBTdHJpY3RFcXVhbCcgfHwgb3BlcmF0b3IgPT09ICdub3RTdHJpY3RFcXVhbCcpIHtcbiAgICAgICAgLy8gSW4gY2FzZSB0aGUgb2JqZWN0cyBhcmUgZXF1YWwgYnV0IHRoZSBvcGVyYXRvciByZXF1aXJlcyB1bmVxdWFsLCBzaG93XG4gICAgICAgIC8vIHRoZSBmaXJzdCBvYmplY3QgYW5kIHNheSBBIGVxdWFscyBCXG4gICAgICAgIHZhciBiYXNlID0ga1JlYWRhYmxlT3BlcmF0b3Jbb3BlcmF0b3JdO1xuICAgICAgICB2YXIgcmVzID0gaW5zcGVjdFZhbHVlKGFjdHVhbCkuc3BsaXQoJ1xcbicpOyAvLyBJbiBjYXNlIFwiYWN0dWFsXCIgaXMgYW4gb2JqZWN0LCBpdCBzaG91bGQgbm90IGJlIHJlZmVyZW5jZSBlcXVhbC5cblxuICAgICAgICBpZiAob3BlcmF0b3IgPT09ICdub3RTdHJpY3RFcXVhbCcgJiYgX3R5cGVvZihhY3R1YWwpID09PSAnb2JqZWN0JyAmJiBhY3R1YWwgIT09IG51bGwpIHtcbiAgICAgICAgICBiYXNlID0ga1JlYWRhYmxlT3BlcmF0b3Iubm90U3RyaWN0RXF1YWxPYmplY3Q7XG4gICAgICAgIH0gLy8gT25seSByZW1vdmUgbGluZXMgaW4gY2FzZSBpdCBtYWtlcyBzZW5zZSB0byBjb2xsYXBzZSB0aG9zZS5cbiAgICAgICAgLy8gVE9ETzogQWNjZXB0IGVudiB0byBhbHdheXMgc2hvdyB0aGUgZnVsbCBlcnJvci5cblxuXG4gICAgICAgIGlmIChyZXMubGVuZ3RoID4gMzApIHtcbiAgICAgICAgICByZXNbMjZdID0gXCJcIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcblxuICAgICAgICAgIHdoaWxlIChyZXMubGVuZ3RoID4gMjcpIHtcbiAgICAgICAgICAgIHJlcy5wb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gT25seSBwcmludCBhIHNpbmdsZSBpbnB1dC5cblxuXG4gICAgICAgIGlmIChyZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXNzZXJ0aW9uRXJyb3IpLmNhbGwodGhpcywgXCJcIi5jb25jYXQoYmFzZSwgXCIgXCIpLmNvbmNhdChyZXNbMF0pKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXNzZXJ0aW9uRXJyb3IpLmNhbGwodGhpcywgXCJcIi5jb25jYXQoYmFzZSwgXCJcXG5cXG5cIikuY29uY2F0KHJlcy5qb2luKCdcXG4nKSwgXCJcXG5cIikpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9yZXMgPSBpbnNwZWN0VmFsdWUoYWN0dWFsKTtcblxuICAgICAgICB2YXIgb3RoZXIgPSAnJztcbiAgICAgICAgdmFyIGtub3duT3BlcmF0b3JzID0ga1JlYWRhYmxlT3BlcmF0b3Jbb3BlcmF0b3JdO1xuXG4gICAgICAgIGlmIChvcGVyYXRvciA9PT0gJ25vdERlZXBFcXVhbCcgfHwgb3BlcmF0b3IgPT09ICdub3RFcXVhbCcpIHtcbiAgICAgICAgICBfcmVzID0gXCJcIi5jb25jYXQoa1JlYWRhYmxlT3BlcmF0b3Jbb3BlcmF0b3JdLCBcIlxcblxcblwiKS5jb25jYXQoX3Jlcyk7XG5cbiAgICAgICAgICBpZiAoX3Jlcy5sZW5ndGggPiAxMDI0KSB7XG4gICAgICAgICAgICBfcmVzID0gXCJcIi5jb25jYXQoX3Jlcy5zbGljZSgwLCAxMDIxKSwgXCIuLi5cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG90aGVyID0gXCJcIi5jb25jYXQoaW5zcGVjdFZhbHVlKGV4cGVjdGVkKSk7XG5cbiAgICAgICAgICBpZiAoX3Jlcy5sZW5ndGggPiA1MTIpIHtcbiAgICAgICAgICAgIF9yZXMgPSBcIlwiLmNvbmNhdChfcmVzLnNsaWNlKDAsIDUwOSksIFwiLi4uXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvdGhlci5sZW5ndGggPiA1MTIpIHtcbiAgICAgICAgICAgIG90aGVyID0gXCJcIi5jb25jYXQob3RoZXIuc2xpY2UoMCwgNTA5KSwgXCIuLi5cIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnZGVlcEVxdWFsJyB8fCBvcGVyYXRvciA9PT0gJ2VxdWFsJykge1xuICAgICAgICAgICAgX3JlcyA9IFwiXCIuY29uY2F0KGtub3duT3BlcmF0b3JzLCBcIlxcblxcblwiKS5jb25jYXQoX3JlcywgXCJcXG5cXG5zaG91bGQgZXF1YWxcXG5cXG5cIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG90aGVyID0gXCIgXCIuY29uY2F0KG9wZXJhdG9yLCBcIiBcIikuY29uY2F0KG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBc3NlcnRpb25FcnJvcikuY2FsbCh0aGlzLCBcIlwiLmNvbmNhdChfcmVzKS5jb25jYXQob3RoZXIpKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gbGltaXQ7XG4gICAgX3RoaXMuZ2VuZXJhdGVkTWVzc2FnZSA9ICFtZXNzYWdlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ25hbWUnLCB7XG4gICAgICB2YWx1ZTogJ0Fzc2VydGlvbkVycm9yIFtFUlJfQVNTRVJUSU9OXScsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgX3RoaXMuY29kZSA9ICdFUlJfQVNTRVJUSU9OJztcbiAgICBfdGhpcy5hY3R1YWwgPSBhY3R1YWw7XG4gICAgX3RoaXMuZXhwZWN0ZWQgPSBleHBlY3RlZDtcbiAgICBfdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuXG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBzdGFja1N0YXJ0Rm4pO1xuICAgIH0gLy8gQ3JlYXRlIGVycm9yIG1lc3NhZ2UgaW5jbHVkaW5nIHRoZSBlcnJvciBjb2RlIGluIHRoZSBuYW1lLlxuXG5cbiAgICBfdGhpcy5zdGFjazsgLy8gUmVzZXQgdGhlIG5hbWUuXG5cbiAgICBfdGhpcy5uYW1lID0gJ0Fzc2VydGlvbkVycm9yJztcbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFzc2VydGlvbkVycm9yLCBbe1xuICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiIFtcIikuY29uY2F0KHRoaXMuY29kZSwgXCJdOiBcIikuY29uY2F0KHRoaXMubWVzc2FnZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBpbnNwZWN0LmN1c3RvbSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdmFsdWUocmVjdXJzZVRpbWVzLCBjdHgpIHtcbiAgICAgIC8vIFRoaXMgbGltaXRzIHRoZSBgYWN0dWFsYCBhbmQgYGV4cGVjdGVkYCBwcm9wZXJ0eSBkZWZhdWx0IGluc3BlY3Rpb24gdG9cbiAgICAgIC8vIHRoZSBtaW5pbXVtIGRlcHRoLiBPdGhlcndpc2UgdGhvc2UgdmFsdWVzIHdvdWxkIGJlIHRvbyB2ZXJib3NlIGNvbXBhcmVkXG4gICAgICAvLyB0byB0aGUgYWN0dWFsIGVycm9yIG1lc3NhZ2Ugd2hpY2ggY29udGFpbnMgYSBjb21iaW5lZCB2aWV3IG9mIHRoZXNlIHR3b1xuICAgICAgLy8gaW5wdXQgdmFsdWVzLlxuICAgICAgcmV0dXJuIGluc3BlY3QodGhpcywgX29iamVjdFNwcmVhZCh7fSwgY3R4LCB7XG4gICAgICAgIGN1c3RvbUluc3BlY3Q6IGZhbHNlLFxuICAgICAgICBkZXB0aDogMFxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBc3NlcnRpb25FcnJvcjtcbn0oX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFzc2VydGlvbkVycm9yO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTM0Mjpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDdXJyZW50bHkgaW4gc3luYyB3aXRoIE5vZGUuanMgbGliL2ludGVybmFsL2Vycm9ycy5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC8zYjA0NDk2MmM0OGZlMzEzOTA1ODc3YTk2YjVkMDg5NGE1NDA0ZjZmXG5cbi8qIGVzbGludCBub2RlLWNvcmUvZG9jdW1lbnRlZC1lcnJvcnM6IFwiZXJyb3JcIiAqL1xuXG4vKiBlc2xpbnQgbm9kZS1jb3JlL2FscGhhYmV0aXplLWVycm9yczogXCJlcnJvclwiICovXG5cbi8qIGVzbGludCBub2RlLWNvcmUvcHJlZmVyLXV0aWwtZm9ybWF0LWVycm9yczogXCJlcnJvclwiICovXG4gLy8gVGhlIHdob2xlIHBvaW50IGJlaGluZCB0aGlzIGludGVybmFsIG1vZHVsZSBpcyB0byBhbGxvdyBOb2RlLmpzIHRvIG5vXG4vLyBsb25nZXIgYmUgZm9yY2VkIHRvIHRyZWF0IGV2ZXJ5IGVycm9yIG1lc3NhZ2UgY2hhbmdlIGFzIGEgc2VtdmVyLW1ham9yXG4vLyBjaGFuZ2UuIFRoZSBOb2RlRXJyb3IgY2xhc3NlcyBoZXJlIGFsbCBleHBvc2UgYSBgY29kZWAgcHJvcGVydHkgd2hvc2Vcbi8vIHZhbHVlIHN0YXRpY2FsbHkgYW5kIHBlcm1hbmVudGx5IGlkZW50aWZpZXMgdGhlIGVycm9yLiBXaGlsZSB0aGUgZXJyb3Jcbi8vIG1lc3NhZ2UgbWF5IGNoYW5nZSwgdGhlIGNvZGUgc2hvdWxkIG5vdC5cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG52YXIgY29kZXMgPSB7fTsgLy8gTGF6eSBsb2FkZWRcblxudmFyIGFzc2VydDtcbnZhciB1dGlsO1xuXG5mdW5jdGlvbiBjcmVhdGVFcnJvclR5cGUoY29kZSwgbWVzc2FnZSwgQmFzZSkge1xuICBpZiAoIUJhc2UpIHtcbiAgICBCYXNlID0gRXJyb3I7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRNZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1lc3NhZ2UoYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIE5vZGVFcnJvciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9CYXNlKSB7XG4gICAgX2luaGVyaXRzKE5vZGVFcnJvciwgX0Jhc2UpO1xuXG4gICAgZnVuY3Rpb24gTm9kZUVycm9yKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE5vZGVFcnJvcik7XG5cbiAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKE5vZGVFcnJvcikuY2FsbCh0aGlzLCBnZXRNZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpKSk7XG4gICAgICBfdGhpcy5jb2RlID0gY29kZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gTm9kZUVycm9yO1xuICB9KEJhc2UpO1xuXG4gIGNvZGVzW2NvZGVdID0gTm9kZUVycm9yO1xufSAvLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvYmxvYi92MTAuOC4wL2xpYi9pbnRlcm5hbC9lcnJvcnMuanNcblxuXG5mdW5jdGlvbiBvbmVPZihleHBlY3RlZCwgdGhpbmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZXhwZWN0ZWQpKSB7XG4gICAgdmFyIGxlbiA9IGV4cGVjdGVkLmxlbmd0aDtcbiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhpKTtcbiAgICB9KTtcblxuICAgIGlmIChsZW4gPiAyKSB7XG4gICAgICByZXR1cm4gXCJvbmUgb2YgXCIuY29uY2F0KHRoaW5nLCBcIiBcIikuY29uY2F0KGV4cGVjdGVkLnNsaWNlKDAsIGxlbiAtIDEpLmpvaW4oJywgJyksIFwiLCBvciBcIikgKyBleHBlY3RlZFtsZW4gLSAxXTtcbiAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMikge1xuICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSwgXCIgb3IgXCIpLmNvbmNhdChleHBlY3RlZFsxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZFswXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChTdHJpbmcoZXhwZWN0ZWQpKTtcbiAgfVxufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvc3RhcnRzV2l0aFxuXG5cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCBzZWFyY2gsIHBvcykge1xuICByZXR1cm4gc3RyLnN1YnN0cighcG9zIHx8IHBvcyA8IDAgPyAwIDogK3Bvcywgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL2VuZHNXaXRoXG5cblxuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2gsIHRoaXNfbGVuKSB7XG4gIGlmICh0aGlzX2xlbiA9PT0gdW5kZWZpbmVkIHx8IHRoaXNfbGVuID4gc3RyLmxlbmd0aCkge1xuICAgIHRoaXNfbGVuID0gc3RyLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiBzdHIuc3Vic3RyaW5nKHRoaXNfbGVuIC0gc2VhcmNoLmxlbmd0aCwgdGhpc19sZW4pID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9pbmNsdWRlc1xuXG5cbmZ1bmN0aW9uIGluY2x1ZGVzKHN0ciwgc2VhcmNoLCBzdGFydCkge1xuICBpZiAodHlwZW9mIHN0YXJ0ICE9PSAnbnVtYmVyJykge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuXG4gIGlmIChzdGFydCArIHNlYXJjaC5sZW5ndGggPiBzdHIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZihzZWFyY2gsIHN0YXJ0KSAhPT0gLTE7XG4gIH1cbn1cblxuY3JlYXRlRXJyb3JUeXBlKCdFUlJfQU1CSUdVT1VTX0FSR1VNRU5UJywgJ1RoZSBcIiVzXCIgYXJndW1lbnQgaXMgYW1iaWd1b3VzLiAlcycsIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9JTlZBTElEX0FSR19UWVBFJywgZnVuY3Rpb24gKG5hbWUsIGV4cGVjdGVkLCBhY3R1YWwpIHtcbiAgaWYgKGFzc2VydCA9PT0gdW5kZWZpbmVkKSBhc3NlcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwOTMpO1xuICBhc3NlcnQodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnLCBcIiduYW1lJyBtdXN0IGJlIGEgc3RyaW5nXCIpOyAvLyBkZXRlcm1pbmVyOiAnbXVzdCBiZScgb3IgJ211c3Qgbm90IGJlJ1xuXG4gIHZhciBkZXRlcm1pbmVyO1xuXG4gIGlmICh0eXBlb2YgZXhwZWN0ZWQgPT09ICdzdHJpbmcnICYmIHN0YXJ0c1dpdGgoZXhwZWN0ZWQsICdub3QgJykpIHtcbiAgICBkZXRlcm1pbmVyID0gJ211c3Qgbm90IGJlJztcbiAgICBleHBlY3RlZCA9IGV4cGVjdGVkLnJlcGxhY2UoL15ub3QgLywgJycpO1xuICB9IGVsc2Uge1xuICAgIGRldGVybWluZXIgPSAnbXVzdCBiZSc7XG4gIH1cblxuICB2YXIgbXNnO1xuXG4gIGlmIChlbmRzV2l0aChuYW1lLCAnIGFyZ3VtZW50JykpIHtcbiAgICAvLyBGb3IgY2FzZXMgbGlrZSAnZmlyc3QgYXJndW1lbnQnXG4gICAgbXNnID0gXCJUaGUgXCIuY29uY2F0KG5hbWUsIFwiIFwiKS5jb25jYXQoZGV0ZXJtaW5lciwgXCIgXCIpLmNvbmNhdChvbmVPZihleHBlY3RlZCwgJ3R5cGUnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHR5cGUgPSBpbmNsdWRlcyhuYW1lLCAnLicpID8gJ3Byb3BlcnR5JyA6ICdhcmd1bWVudCc7XG4gICAgbXNnID0gXCJUaGUgXFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIgXCIpLmNvbmNhdCh0eXBlLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsICd0eXBlJykpO1xuICB9IC8vIFRPRE8oQnJpZGdlQVIpOiBJbXByb3ZlIHRoZSBvdXRwdXQgYnkgc2hvd2luZyBgbnVsbGAgYW5kIHNpbWlsYXIuXG5cblxuICBtc2cgKz0gXCIuIFJlY2VpdmVkIHR5cGUgXCIuY29uY2F0KF90eXBlb2YoYWN0dWFsKSk7XG4gIHJldHVybiBtc2c7XG59LCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9BUkdfVkFMVUUnLCBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgdmFyIHJlYXNvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJ2lzIGludmFsaWQnO1xuICBpZiAodXRpbCA9PT0gdW5kZWZpbmVkKSB1dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2ODI3KTtcbiAgdmFyIGluc3BlY3RlZCA9IHV0aWwuaW5zcGVjdCh2YWx1ZSk7XG5cbiAgaWYgKGluc3BlY3RlZC5sZW5ndGggPiAxMjgpIHtcbiAgICBpbnNwZWN0ZWQgPSBcIlwiLmNvbmNhdChpbnNwZWN0ZWQuc2xpY2UoMCwgMTI4KSwgXCIuLi5cIik7XG4gIH1cblxuICByZXR1cm4gXCJUaGUgYXJndW1lbnQgJ1wiLmNvbmNhdChuYW1lLCBcIicgXCIpLmNvbmNhdChyZWFzb24sIFwiLiBSZWNlaXZlZCBcIikuY29uY2F0KGluc3BlY3RlZCk7XG59LCBUeXBlRXJyb3IsIFJhbmdlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9SRVRVUk5fVkFMVUUnLCBmdW5jdGlvbiAoaW5wdXQsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0eXBlO1xuXG4gIGlmICh2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgdHlwZSA9IFwiaW5zdGFuY2Ugb2YgXCIuY29uY2F0KHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpO1xuICB9IGVsc2Uge1xuICAgIHR5cGUgPSBcInR5cGUgXCIuY29uY2F0KF90eXBlb2YodmFsdWUpKTtcbiAgfVxuXG4gIHJldHVybiBcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnB1dCwgXCIgdG8gYmUgcmV0dXJuZWQgZnJvbSB0aGUgXFxcIlwiKS5jb25jYXQobmFtZSwgXCJcXFwiXCIpICsgXCIgZnVuY3Rpb24gYnV0IGdvdCBcIi5jb25jYXQodHlwZSwgXCIuXCIpO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX01JU1NJTkdfQVJHUycsIGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChhc3NlcnQgPT09IHVuZGVmaW5lZCkgYXNzZXJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDkzKTtcbiAgYXNzZXJ0KGFyZ3MubGVuZ3RoID4gMCwgJ0F0IGxlYXN0IG9uZSBhcmcgbmVlZHMgdG8gYmUgc3BlY2lmaWVkJyk7XG4gIHZhciBtc2cgPSAnVGhlICc7XG4gIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgYXJncyA9IGFyZ3MubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdChhLCBcIlxcXCJcIik7XG4gIH0pO1xuXG4gIHN3aXRjaCAobGVuKSB7XG4gICAgY2FzZSAxOlxuICAgICAgbXNnICs9IFwiXCIuY29uY2F0KGFyZ3NbMF0sIFwiIGFyZ3VtZW50XCIpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIDI6XG4gICAgICBtc2cgKz0gXCJcIi5jb25jYXQoYXJnc1swXSwgXCIgYW5kIFwiKS5jb25jYXQoYXJnc1sxXSwgXCIgYXJndW1lbnRzXCIpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgbXNnICs9IGFyZ3Muc2xpY2UoMCwgbGVuIC0gMSkuam9pbignLCAnKTtcbiAgICAgIG1zZyArPSBcIiwgYW5kIFwiLmNvbmNhdChhcmdzW2xlbiAtIDFdLCBcIiBhcmd1bWVudHNcIik7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBcIlwiLmNvbmNhdChtc2csIFwiIG11c3QgYmUgc3BlY2lmaWVkXCIpO1xufSwgVHlwZUVycm9yKTtcbm1vZHVsZS5leHBvcnRzLmNvZGVzID0gY29kZXM7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA1NjU2OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8vIEN1cnJlbnRseSBpbiBzeW5jIHdpdGggTm9kZS5qcyBsaWIvaW50ZXJuYWwvdXRpbC9jb21wYXJpc29ucy5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC8xMTJjYzdjMjc1NTEyNTRhYTJiMTcwOThmYjc3NDg2N2YwNWVkMGQ5XG5cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbnZhciByZWdleEZsYWdzU3VwcG9ydGVkID0gL2EvZy5mbGFncyAhPT0gdW5kZWZpbmVkO1xuXG52YXIgYXJyYXlGcm9tU2V0ID0gZnVuY3Rpb24gYXJyYXlGcm9tU2V0KHNldCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgc2V0LmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIGFycmF5LnB1c2godmFsdWUpO1xuICB9KTtcbiAgcmV0dXJuIGFycmF5O1xufTtcblxudmFyIGFycmF5RnJvbU1hcCA9IGZ1bmN0aW9uIGFycmF5RnJvbU1hcChtYXApIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgcmV0dXJuIGFycmF5LnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSk7XG4gIHJldHVybiBhcnJheTtcbn07XG5cbnZhciBvYmplY3RJcyA9IE9iamVjdC5pcyA/IE9iamVjdC5pcyA6IF9fd2VicGFja19yZXF1aXJlX18oNTk2OCk7XG52YXIgb2JqZWN0R2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBbXTtcbn07XG52YXIgbnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gPyBOdW1iZXIuaXNOYU4gOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4MzgpO1xuXG5mdW5jdGlvbiB1bmN1cnJ5VGhpcyhmKSB7XG4gIHJldHVybiBmLmNhbGwuYmluZChmKTtcbn1cblxudmFyIGhhc093blByb3BlcnR5ID0gdW5jdXJyeVRoaXMoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbnZhciBvYmplY3RUb1N0cmluZyA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpO1xuXG52YXIgX3JlcXVpcmUkdHlwZXMgPSAoX193ZWJwYWNrX3JlcXVpcmVfXyg2ODI3KS50eXBlcyksXG4gICAgaXNBbnlBcnJheUJ1ZmZlciA9IF9yZXF1aXJlJHR5cGVzLmlzQW55QXJyYXlCdWZmZXIsXG4gICAgaXNBcnJheUJ1ZmZlclZpZXcgPSBfcmVxdWlyZSR0eXBlcy5pc0FycmF5QnVmZmVyVmlldyxcbiAgICBpc0RhdGUgPSBfcmVxdWlyZSR0eXBlcy5pc0RhdGUsXG4gICAgaXNNYXAgPSBfcmVxdWlyZSR0eXBlcy5pc01hcCxcbiAgICBpc1JlZ0V4cCA9IF9yZXF1aXJlJHR5cGVzLmlzUmVnRXhwLFxuICAgIGlzU2V0ID0gX3JlcXVpcmUkdHlwZXMuaXNTZXQsXG4gICAgaXNOYXRpdmVFcnJvciA9IF9yZXF1aXJlJHR5cGVzLmlzTmF0aXZlRXJyb3IsXG4gICAgaXNCb3hlZFByaW1pdGl2ZSA9IF9yZXF1aXJlJHR5cGVzLmlzQm94ZWRQcmltaXRpdmUsXG4gICAgaXNOdW1iZXJPYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc051bWJlck9iamVjdCxcbiAgICBpc1N0cmluZ09iamVjdCA9IF9yZXF1aXJlJHR5cGVzLmlzU3RyaW5nT2JqZWN0LFxuICAgIGlzQm9vbGVhbk9iamVjdCA9IF9yZXF1aXJlJHR5cGVzLmlzQm9vbGVhbk9iamVjdCxcbiAgICBpc0JpZ0ludE9iamVjdCA9IF9yZXF1aXJlJHR5cGVzLmlzQmlnSW50T2JqZWN0LFxuICAgIGlzU3ltYm9sT2JqZWN0ID0gX3JlcXVpcmUkdHlwZXMuaXNTeW1ib2xPYmplY3QsXG4gICAgaXNGbG9hdDMyQXJyYXkgPSBfcmVxdWlyZSR0eXBlcy5pc0Zsb2F0MzJBcnJheSxcbiAgICBpc0Zsb2F0NjRBcnJheSA9IF9yZXF1aXJlJHR5cGVzLmlzRmxvYXQ2NEFycmF5O1xuXG5mdW5jdGlvbiBpc05vbkluZGV4KGtleSkge1xuICBpZiAoa2V5Lmxlbmd0aCA9PT0gMCB8fCBrZXkubGVuZ3RoID4gMTApIHJldHVybiB0cnVlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNvZGUgPSBrZXkuY2hhckNvZGVBdChpKTtcbiAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiA1NykgcmV0dXJuIHRydWU7XG4gIH0gLy8gVGhlIG1heGltdW0gc2l6ZSBmb3IgYW4gYXJyYXkgaXMgMiAqKiAzMiAtMS5cblxuXG4gIHJldHVybiBrZXkubGVuZ3RoID09PSAxMCAmJiBrZXkgPj0gTWF0aC5wb3coMiwgMzIpO1xufVxuXG5mdW5jdGlvbiBnZXRPd25Ob25JbmRleFByb3BlcnRpZXModmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5maWx0ZXIoaXNOb25JbmRleCkuY29uY2F0KG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyh2YWx1ZSkuZmlsdGVyKE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuYmluZCh2YWx1ZSkpKTtcbn0gLy8gVGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9ibG9iLzY4MGU5ZTVlNDg4ZjIyYWFjMjc1OTlhNTdkYzg0NGE2MzE1OTI4ZGQvaW5kZXguanNcbi8vIG9yaWdpbmFsIG5vdGljZTpcblxuLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIHggPSBhLmxlbmd0aDtcbiAgdmFyIHkgPSBiLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXTtcbiAgICAgIHkgPSBiW2ldO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgaWYgKHkgPCB4KSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxudmFyIE9OTFlfRU5VTUVSQUJMRSA9IHVuZGVmaW5lZDtcbnZhciBrU3RyaWN0ID0gdHJ1ZTtcbnZhciBrTG9vc2UgPSBmYWxzZTtcbnZhciBrTm9JdGVyYXRvciA9IDA7XG52YXIga0lzQXJyYXkgPSAxO1xudmFyIGtJc1NldCA9IDI7XG52YXIga0lzTWFwID0gMzsgLy8gQ2hlY2sgaWYgdGhleSBoYXZlIHRoZSBzYW1lIHNvdXJjZSBhbmQgZmxhZ3NcblxuZnVuY3Rpb24gYXJlU2ltaWxhclJlZ0V4cHMoYSwgYikge1xuICByZXR1cm4gcmVnZXhGbGFnc1N1cHBvcnRlZCA/IGEuc291cmNlID09PSBiLnNvdXJjZSAmJiBhLmZsYWdzID09PSBiLmZsYWdzIDogUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpID09PSBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7XG59XG5cbmZ1bmN0aW9uIGFyZVNpbWlsYXJGbG9hdEFycmF5cyhhLCBiKSB7XG4gIGlmIChhLmJ5dGVMZW5ndGggIT09IGIuYnl0ZUxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IGEuYnl0ZUxlbmd0aDsgb2Zmc2V0KyspIHtcbiAgICBpZiAoYVtvZmZzZXRdICE9PSBiW29mZnNldF0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gYXJlU2ltaWxhclR5cGVkQXJyYXlzKGEsIGIpIHtcbiAgaWYgKGEuYnl0ZUxlbmd0aCAhPT0gYi5ieXRlTGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBhcmUobmV3IFVpbnQ4QXJyYXkoYS5idWZmZXIsIGEuYnl0ZU9mZnNldCwgYS5ieXRlTGVuZ3RoKSwgbmV3IFVpbnQ4QXJyYXkoYi5idWZmZXIsIGIuYnl0ZU9mZnNldCwgYi5ieXRlTGVuZ3RoKSkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGFyZUVxdWFsQXJyYXlCdWZmZXJzKGJ1ZjEsIGJ1ZjIpIHtcbiAgcmV0dXJuIGJ1ZjEuYnl0ZUxlbmd0aCA9PT0gYnVmMi5ieXRlTGVuZ3RoICYmIGNvbXBhcmUobmV3IFVpbnQ4QXJyYXkoYnVmMSksIG5ldyBVaW50OEFycmF5KGJ1ZjIpKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNFcXVhbEJveGVkUHJpbWl0aXZlKHZhbDEsIHZhbDIpIHtcbiAgaWYgKGlzTnVtYmVyT2JqZWN0KHZhbDEpKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyT2JqZWN0KHZhbDIpICYmIG9iamVjdElzKE51bWJlci5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDEpLCBOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKSk7XG4gIH1cblxuICBpZiAoaXNTdHJpbmdPYmplY3QodmFsMSkpIHtcbiAgICByZXR1cm4gaXNTdHJpbmdPYmplY3QodmFsMikgJiYgU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMSkgPT09IFN0cmluZy5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDIpO1xuICB9XG5cbiAgaWYgKGlzQm9vbGVhbk9iamVjdCh2YWwxKSkge1xuICAgIHJldHVybiBpc0Jvb2xlYW5PYmplY3QodmFsMikgJiYgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDEpID09PSBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMik7XG4gIH1cblxuICBpZiAoaXNCaWdJbnRPYmplY3QodmFsMSkpIHtcbiAgICByZXR1cm4gaXNCaWdJbnRPYmplY3QodmFsMikgJiYgQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMSkgPT09IEJpZ0ludC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDIpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3ltYm9sT2JqZWN0KHZhbDIpICYmIFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDEpID09PSBTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKTtcbn0gLy8gTm90ZXM6IFR5cGUgdGFncyBhcmUgaGlzdG9yaWNhbCBbW0NsYXNzXV0gcHJvcGVydGllcyB0aGF0IGNhbiBiZSBzZXQgYnlcbi8vIEZ1bmN0aW9uVGVtcGxhdGU6OlNldENsYXNzTmFtZSgpIGluIEMrKyBvciBTeW1ib2wudG9TdHJpbmdUYWcgaW4gSlNcbi8vIGFuZCByZXRyaWV2ZWQgdXNpbmcgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgaW4gSlNcbi8vIFNlZSBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG4vLyBmb3IgYSBsaXN0IG9mIHRhZ3MgcHJlLWRlZmluZWQgaW4gdGhlIHNwZWMuXG4vLyBUaGVyZSBhcmUgc29tZSB1bnNwZWNpZmllZCB0YWdzIGluIHRoZSB3aWxkIHRvbyAoZS5nLiB0eXBlZCBhcnJheSB0YWdzKS5cbi8vIFNpbmNlIHRhZ3MgY2FuIGJlIGFsdGVyZWQsIHRoZXkgb25seSBzZXJ2ZSBmYXN0IGZhaWx1cmVzXG4vL1xuLy8gVHlwZWQgYXJyYXlzIGFuZCBidWZmZXJzIGFyZSBjaGVja2VkIGJ5IGNvbXBhcmluZyB0aGUgY29udGVudCBpbiB0aGVpclxuLy8gdW5kZXJseWluZyBBcnJheUJ1ZmZlci4gVGhpcyBvcHRpbWl6YXRpb24gcmVxdWlyZXMgdGhhdCBpdCdzXG4vLyByZWFzb25hYmxlIHRvIGludGVycHJldCB0aGVpciB1bmRlcmx5aW5nIG1lbW9yeSBpbiB0aGUgc2FtZSB3YXksXG4vLyB3aGljaCBpcyBjaGVja2VkIGJ5IGNvbXBhcmluZyB0aGVpciB0eXBlIHRhZ3MuXG4vLyAoZS5nLiBhIFVpbnQ4QXJyYXkgYW5kIGEgVWludDE2QXJyYXkgd2l0aCB0aGUgc2FtZSBtZW1vcnkgY29udGVudFxuLy8gY291bGQgc3RpbGwgYmUgZGlmZmVyZW50IGJlY2F1c2UgdGhleSB3aWxsIGJlIGludGVycHJldGVkIGRpZmZlcmVudGx5KS5cbi8vXG4vLyBGb3Igc3RyaWN0IGNvbXBhcmlzb24sIG9iamVjdHMgc2hvdWxkIGhhdmVcbi8vIGEpIFRoZSBzYW1lIGJ1aWx0LWluIHR5cGUgdGFnc1xuLy8gYikgVGhlIHNhbWUgcHJvdG90eXBlcy5cblxuXG5mdW5jdGlvbiBpbm5lckRlZXBFcXVhbCh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zKSB7XG4gIC8vIEFsbCBpZGVudGljYWwgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBhcyBkZXRlcm1pbmVkIGJ5ID09PS5cbiAgaWYgKHZhbDEgPT09IHZhbDIpIHtcbiAgICBpZiAodmFsMSAhPT0gMCkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIHN0cmljdCA/IG9iamVjdElzKHZhbDEsIHZhbDIpIDogdHJ1ZTtcbiAgfSAvLyBDaGVjayBtb3JlIGNsb3NlbHkgaWYgdmFsMSBhbmQgdmFsMiBhcmUgZXF1YWwuXG5cblxuICBpZiAoc3RyaWN0KSB7XG4gICAgaWYgKF90eXBlb2YodmFsMSkgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbDEgPT09ICdudW1iZXInICYmIG51bWJlcklzTmFOKHZhbDEpICYmIG51bWJlcklzTmFOKHZhbDIpO1xuICAgIH1cblxuICAgIGlmIChfdHlwZW9mKHZhbDIpICE9PSAnb2JqZWN0JyB8fCB2YWwxID09PSBudWxsIHx8IHZhbDIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbDEpICE9PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbDEgPT09IG51bGwgfHwgX3R5cGVvZih2YWwxKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh2YWwyID09PSBudWxsIHx8IF90eXBlb2YodmFsMikgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcbiAgICAgICAgcmV0dXJuIHZhbDEgPT0gdmFsMjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh2YWwyID09PSBudWxsIHx8IF90eXBlb2YodmFsMikgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdmFyIHZhbDFUYWcgPSBvYmplY3RUb1N0cmluZyh2YWwxKTtcbiAgdmFyIHZhbDJUYWcgPSBvYmplY3RUb1N0cmluZyh2YWwyKTtcblxuICBpZiAodmFsMVRhZyAhPT0gdmFsMlRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHZhbDEpKSB7XG4gICAgLy8gQ2hlY2sgZm9yIHNwYXJzZSBhcnJheXMgYW5kIGdlbmVyYWwgZmFzdCBwYXRoXG4gICAgaWYgKHZhbDEubGVuZ3RoICE9PSB2YWwyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBrZXlzMSA9IGdldE93bk5vbkluZGV4UHJvcGVydGllcyh2YWwxLCBPTkxZX0VOVU1FUkFCTEUpO1xuICAgIHZhciBrZXlzMiA9IGdldE93bk5vbkluZGV4UHJvcGVydGllcyh2YWwyLCBPTkxZX0VOVU1FUkFCTEUpO1xuXG4gICAgaWYgKGtleXMxLmxlbmd0aCAhPT0ga2V5czIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleUNoZWNrKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MsIGtJc0FycmF5LCBrZXlzMSk7XG4gIH0gLy8gW2Jyb3dzZXJpZnldIFRoaXMgdHJpZ2dlcnMgb24gY2VydGFpbiB0eXBlcyBpbiBJRSAoTWFwL1NldCkgc28gd2UgZG9uJ3RcbiAgLy8gd2FuJ3QgdG8gZWFybHkgcmV0dXJuIG91dCBvZiB0aGUgcmVzdCBvZiB0aGUgY2hlY2tzLiBIb3dldmVyIHdlIGNhbiBjaGVja1xuICAvLyBpZiB0aGUgc2Vjb25kIHZhbHVlIGlzIG9uZSBvZiB0aGVzZSB2YWx1ZXMgYW5kIHRoZSBmaXJzdCBpc24ndC5cblxuXG4gIGlmICh2YWwxVGFnID09PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIC8vIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrTm9JdGVyYXRvcik7XG4gICAgaWYgKCFpc01hcCh2YWwxKSAmJiBpc01hcCh2YWwyKSB8fCAhaXNTZXQodmFsMSkgJiYgaXNTZXQodmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoaXNEYXRlKHZhbDEpKSB7XG4gICAgaWYgKCFpc0RhdGUodmFsMikgfHwgRGF0ZS5wcm90b3R5cGUuZ2V0VGltZS5jYWxsKHZhbDEpICE9PSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lLmNhbGwodmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAodmFsMSkpIHtcbiAgICBpZiAoIWlzUmVnRXhwKHZhbDIpIHx8ICFhcmVTaW1pbGFyUmVnRXhwcyh2YWwxLCB2YWwyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc05hdGl2ZUVycm9yKHZhbDEpIHx8IHZhbDEgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIC8vIERvIG5vdCBjb21wYXJlIHRoZSBzdGFjayBhcyBpdCBtaWdodCBkaWZmZXIgZXZlbiB0aG91Z2ggdGhlIGVycm9yIGl0c2VsZlxuICAgIC8vIGlzIG90aGVyd2lzZSBpZGVudGljYWwuXG4gICAgaWYgKHZhbDEubWVzc2FnZSAhPT0gdmFsMi5tZXNzYWdlIHx8IHZhbDEubmFtZSAhPT0gdmFsMi5uYW1lKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQXJyYXlCdWZmZXJWaWV3KHZhbDEpKSB7XG4gICAgaWYgKCFzdHJpY3QgJiYgKGlzRmxvYXQzMkFycmF5KHZhbDEpIHx8IGlzRmxvYXQ2NEFycmF5KHZhbDEpKSkge1xuICAgICAgaWYgKCFhcmVTaW1pbGFyRmxvYXRBcnJheXModmFsMSwgdmFsMikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFyZVNpbWlsYXJUeXBlZEFycmF5cyh2YWwxLCB2YWwyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gQnVmZmVyLmNvbXBhcmUgcmV0dXJucyB0cnVlLCBzbyB2YWwxLmxlbmd0aCA9PT0gdmFsMi5sZW5ndGguIElmIHRoZXkgYm90aFxuICAgIC8vIG9ubHkgY29udGFpbiBudW1lcmljIGtleXMsIHdlIGRvbid0IG5lZWQgdG8gZXhhbSBmdXJ0aGVyIHRoYW4gY2hlY2tpbmdcbiAgICAvLyB0aGUgc3ltYm9scy5cblxuXG4gICAgdmFyIF9rZXlzID0gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbDEsIE9OTFlfRU5VTUVSQUJMRSk7XG5cbiAgICB2YXIgX2tleXMyID0gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbDIsIE9OTFlfRU5VTUVSQUJMRSk7XG5cbiAgICBpZiAoX2tleXMubGVuZ3RoICE9PSBfa2V5czIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleUNoZWNrKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MsIGtOb0l0ZXJhdG9yLCBfa2V5cyk7XG4gIH0gZWxzZSBpZiAoaXNTZXQodmFsMSkpIHtcbiAgICBpZiAoIWlzU2V0KHZhbDIpIHx8IHZhbDEuc2l6ZSAhPT0gdmFsMi5zaXplKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleUNoZWNrKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MsIGtJc1NldCk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsMSkpIHtcbiAgICBpZiAoIWlzTWFwKHZhbDIpIHx8IHZhbDEuc2l6ZSAhPT0gdmFsMi5zaXplKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleUNoZWNrKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MsIGtJc01hcCk7XG4gIH0gZWxzZSBpZiAoaXNBbnlBcnJheUJ1ZmZlcih2YWwxKSkge1xuICAgIGlmICghYXJlRXF1YWxBcnJheUJ1ZmZlcnModmFsMSwgdmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNCb3hlZFByaW1pdGl2ZSh2YWwxKSAmJiAhaXNFcXVhbEJveGVkUHJpbWl0aXZlKHZhbDEsIHZhbDIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGtleUNoZWNrKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MsIGtOb0l0ZXJhdG9yKTtcbn1cblxuZnVuY3Rpb24gZ2V0RW51bWVyYWJsZXModmFsLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLmZpbHRlcihmdW5jdGlvbiAoaykge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZSh2YWwsIGspO1xuICB9KTtcbn1cblxuZnVuY3Rpb24ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywgaXRlcmF0aW9uVHlwZSwgYUtleXMpIHtcbiAgLy8gRm9yIGFsbCByZW1haW5pbmcgT2JqZWN0IHBhaXJzLCBpbmNsdWRpbmcgQXJyYXksIG9iamVjdHMgYW5kIE1hcHMsXG4gIC8vIGVxdWl2YWxlbmNlIGlzIGRldGVybWluZWQgYnkgaGF2aW5nOlxuICAvLyBhKSBUaGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gIC8vIGIpIFRoZSBzYW1lIHNldCBvZiBrZXlzL2luZGV4ZXMgKGFsdGhvdWdoIG5vdCBuZWNlc3NhcmlseSB0aGUgc2FtZSBvcmRlcilcbiAgLy8gYykgRXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5L2luZGV4XG4gIC8vIGQpIEZvciBTZXRzIGFuZCBNYXBzLCBlcXVhbCBjb250ZW50c1xuICAvLyBOb3RlOiB0aGlzIGFjY291bnRzIGZvciBib3RoIG5hbWVkIGFuZCBpbmRleGVkIHByb3BlcnRpZXMgb24gQXJyYXlzLlxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNSkge1xuICAgIGFLZXlzID0gT2JqZWN0LmtleXModmFsMSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXModmFsMik7IC8vIFRoZSBwYWlyIG11c3QgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2Ygb3duZWQgcHJvcGVydGllcy5cblxuICAgIGlmIChhS2V5cy5sZW5ndGggIT09IGJLZXlzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSAvLyBDaGVhcCBrZXkgdGVzdFxuXG5cbiAgdmFyIGkgPSAwO1xuXG4gIGZvciAoOyBpIDwgYUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5KHZhbDIsIGFLZXlzW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdHJpY3QgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gNSkge1xuICAgIHZhciBzeW1ib2xLZXlzQSA9IG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyh2YWwxKTtcblxuICAgIGlmIChzeW1ib2xLZXlzQS5sZW5ndGggIT09IDApIHtcbiAgICAgIHZhciBjb3VudCA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzeW1ib2xLZXlzQS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0gc3ltYm9sS2V5c0FbaV07XG5cbiAgICAgICAgaWYgKHByb3BlcnR5SXNFbnVtZXJhYmxlKHZhbDEsIGtleSkpIHtcbiAgICAgICAgICBpZiAoIXByb3BlcnR5SXNFbnVtZXJhYmxlKHZhbDIsIGtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgY291bnQrKztcbiAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eUlzRW51bWVyYWJsZSh2YWwyLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzeW1ib2xLZXlzQiA9IG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyh2YWwyKTtcblxuICAgICAgaWYgKHN5bWJvbEtleXNBLmxlbmd0aCAhPT0gc3ltYm9sS2V5c0IubGVuZ3RoICYmIGdldEVudW1lcmFibGVzKHZhbDIsIHN5bWJvbEtleXNCKS5sZW5ndGggIT09IGNvdW50KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9zeW1ib2xLZXlzQiA9IG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyh2YWwyKTtcblxuICAgICAgaWYgKF9zeW1ib2xLZXlzQi5sZW5ndGggIT09IDAgJiYgZ2V0RW51bWVyYWJsZXModmFsMiwgX3N5bWJvbEtleXNCKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChhS2V5cy5sZW5ndGggPT09IDAgJiYgKGl0ZXJhdGlvblR5cGUgPT09IGtOb0l0ZXJhdG9yIHx8IGl0ZXJhdGlvblR5cGUgPT09IGtJc0FycmF5ICYmIHZhbDEubGVuZ3RoID09PSAwIHx8IHZhbDEuc2l6ZSA9PT0gMCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBVc2UgbWVtb3MgdG8gaGFuZGxlIGN5Y2xlcy5cblxuXG4gIGlmIChtZW1vcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWVtb3MgPSB7XG4gICAgICB2YWwxOiBuZXcgTWFwKCksXG4gICAgICB2YWwyOiBuZXcgTWFwKCksXG4gICAgICBwb3NpdGlvbjogMFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gV2UgcHJldmVudCB1cCB0byB0d28gbWFwLmhhcyh4KSBjYWxscyBieSBkaXJlY3RseSByZXRyaWV2aW5nIHRoZSB2YWx1ZVxuICAgIC8vIGFuZCBjaGVja2luZyBmb3IgdW5kZWZpbmVkLiBUaGUgbWFwIGNhbiBvbmx5IGNvbnRhaW4gbnVtYmVycywgc28gaXQgaXNcbiAgICAvLyBzYWZlIHRvIGNoZWNrIGZvciB1bmRlZmluZWQgb25seS5cbiAgICB2YXIgdmFsMk1lbW9BID0gbWVtb3MudmFsMS5nZXQodmFsMSk7XG5cbiAgICBpZiAodmFsMk1lbW9BICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciB2YWwyTWVtb0IgPSBtZW1vcy52YWwyLmdldCh2YWwyKTtcblxuICAgICAgaWYgKHZhbDJNZW1vQiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB2YWwyTWVtb0EgPT09IHZhbDJNZW1vQjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vcy5wb3NpdGlvbisrO1xuICB9XG5cbiAgbWVtb3MudmFsMS5zZXQodmFsMSwgbWVtb3MucG9zaXRpb24pO1xuICBtZW1vcy52YWwyLnNldCh2YWwyLCBtZW1vcy5wb3NpdGlvbik7XG4gIHZhciBhcmVFcSA9IG9iakVxdWl2KHZhbDEsIHZhbDIsIHN0cmljdCwgYUtleXMsIG1lbW9zLCBpdGVyYXRpb25UeXBlKTtcbiAgbWVtb3MudmFsMS5kZWxldGUodmFsMSk7XG4gIG1lbW9zLnZhbDIuZGVsZXRlKHZhbDIpO1xuICByZXR1cm4gYXJlRXE7XG59XG5cbmZ1bmN0aW9uIHNldEhhc0VxdWFsRWxlbWVudChzZXQsIHZhbDEsIHN0cmljdCwgbWVtbykge1xuICAvLyBHbyBsb29raW5nLlxuICB2YXIgc2V0VmFsdWVzID0gYXJyYXlGcm9tU2V0KHNldCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmFsMiA9IHNldFZhbHVlc1tpXTtcblxuICAgIGlmIChpbm5lckRlZXBFcXVhbCh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW8pKSB7XG4gICAgICAvLyBSZW1vdmUgdGhlIG1hdGNoaW5nIGVsZW1lbnQgdG8gbWFrZSBzdXJlIHdlIGRvIG5vdCBjaGVjayB0aGF0IGFnYWluLlxuICAgICAgc2V0LmRlbGV0ZSh2YWwyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn0gLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvRXF1YWxpdHlfY29tcGFyaXNvbnNfYW5kX3NhbWVuZXNzI0xvb3NlX2VxdWFsaXR5X3VzaW5nXG4vLyBTYWRseSBpdCBpcyBub3QgcG9zc2libGUgdG8gZGV0ZWN0IGNvcnJlc3BvbmRpbmcgdmFsdWVzIHByb3Blcmx5IGluIGNhc2UgdGhlXG4vLyB0eXBlIGlzIGEgc3RyaW5nLCBudW1iZXIsIGJpZ2ludCBvciBib29sZWFuLiBUaGUgcmVhc29uIGlzIHRoYXQgdGhvc2UgdmFsdWVzXG4vLyBjYW4gbWF0Y2ggbG90cyBvZiBkaWZmZXJlbnQgc3RyaW5nIHZhbHVlcyAoZS5nLiwgMW4gPT0gJyswMDAwMScpLlxuXG5cbmZ1bmN0aW9uIGZpbmRMb29zZU1hdGNoaW5nUHJpbWl0aXZlcyhwcmltKSB7XG4gIHN3aXRjaCAoX3R5cGVvZihwcmltKSkge1xuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm4gbnVsbDtcblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAvLyBPbmx5IHBhc3MgaW4gbnVsbCBhcyBvYmplY3QhXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBwcmltID0gK3ByaW07XG4gICAgLy8gTG9vc2UgZXF1YWwgZW50cmllcyBleGlzdCBvbmx5IGlmIHRoZSBzdHJpbmcgaXMgcG9zc2libGUgdG8gY29udmVydCB0b1xuICAgIC8vIGEgcmVndWxhciBudW1iZXIgYW5kIG5vdCBOYU4uXG4gICAgLy8gRmFsbCB0aHJvdWdoXG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgaWYgKG51bWJlcklzTmFOKHByaW0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHNldE1pZ2h0SGF2ZUxvb3NlUHJpbShhLCBiLCBwcmltKSB7XG4gIHZhciBhbHRWYWx1ZSA9IGZpbmRMb29zZU1hdGNoaW5nUHJpbWl0aXZlcyhwcmltKTtcbiAgaWYgKGFsdFZhbHVlICE9IG51bGwpIHJldHVybiBhbHRWYWx1ZTtcbiAgcmV0dXJuIGIuaGFzKGFsdFZhbHVlKSAmJiAhYS5oYXMoYWx0VmFsdWUpO1xufVxuXG5mdW5jdGlvbiBtYXBNaWdodEhhdmVMb29zZVByaW0oYSwgYiwgcHJpbSwgaXRlbSwgbWVtbykge1xuICB2YXIgYWx0VmFsdWUgPSBmaW5kTG9vc2VNYXRjaGluZ1ByaW1pdGl2ZXMocHJpbSk7XG5cbiAgaWYgKGFsdFZhbHVlICE9IG51bGwpIHtcbiAgICByZXR1cm4gYWx0VmFsdWU7XG4gIH1cblxuICB2YXIgY3VyQiA9IGIuZ2V0KGFsdFZhbHVlKTtcblxuICBpZiAoY3VyQiA9PT0gdW5kZWZpbmVkICYmICFiLmhhcyhhbHRWYWx1ZSkgfHwgIWlubmVyRGVlcEVxdWFsKGl0ZW0sIGN1ckIsIGZhbHNlLCBtZW1vKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiAhYS5oYXMoYWx0VmFsdWUpICYmIGlubmVyRGVlcEVxdWFsKGl0ZW0sIGN1ckIsIGZhbHNlLCBtZW1vKTtcbn1cblxuZnVuY3Rpb24gc2V0RXF1aXYoYSwgYiwgc3RyaWN0LCBtZW1vKSB7XG4gIC8vIFRoaXMgaXMgYSBsYXppbHkgaW5pdGlhdGVkIFNldCBvZiBlbnRyaWVzIHdoaWNoIGhhdmUgdG8gYmUgY29tcGFyZWRcbiAgLy8gcGFpcndpc2UuXG4gIHZhciBzZXQgPSBudWxsO1xuICB2YXIgYVZhbHVlcyA9IGFycmF5RnJvbVNldChhKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdmFsID0gYVZhbHVlc1tpXTsgLy8gTm90ZTogQ2hlY2tpbmcgZm9yIHRoZSBvYmplY3RzIGZpcnN0IGltcHJvdmVzIHRoZSBwZXJmb3JtYW5jZSBmb3Igb2JqZWN0XG4gICAgLy8gaGVhdnkgc2V0cyBidXQgaXQgaXMgYSBtaW5vciBzbG93IGRvd24gZm9yIHByaW1pdGl2ZXMuIEFzIHRoZXkgYXJlIGZhc3RcbiAgICAvLyB0byBjaGVjayB0aGlzIGltcHJvdmVzIHRoZSB3b3JzdCBjYXNlIHNjZW5hcmlvIGluc3RlYWQuXG5cbiAgICBpZiAoX3R5cGVvZih2YWwpID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwpIHtcbiAgICAgIGlmIChzZXQgPT09IG51bGwpIHtcbiAgICAgICAgc2V0ID0gbmV3IFNldCgpO1xuICAgICAgfSAvLyBJZiB0aGUgc3BlY2lmaWVkIHZhbHVlIGRvZXNuJ3QgZXhpc3QgaW4gdGhlIHNlY29uZCBzZXQgaXRzIGFuIG5vdCBudWxsXG4gICAgICAvLyBvYmplY3QgKG9yIG5vbiBzdHJpY3Qgb25seTogYSBub3QgbWF0Y2hpbmcgcHJpbWl0aXZlKSB3ZSdsbCBuZWVkIHRvIGdvXG4gICAgICAvLyBodW50aW5nIGZvciBzb21ldGhpbmcgdGhhdHMgZGVlcC0oc3RyaWN0LSllcXVhbCB0byBpdC4gVG8gbWFrZSB0aGlzXG4gICAgICAvLyBPKG4gbG9nIG4pIGNvbXBsZXhpdHkgd2UgaGF2ZSB0byBjb3B5IHRoZXNlIHZhbHVlcyBpbiBhIG5ldyBzZXQgZmlyc3QuXG5cblxuICAgICAgc2V0LmFkZCh2YWwpO1xuICAgIH0gZWxzZSBpZiAoIWIuaGFzKHZhbCkpIHtcbiAgICAgIGlmIChzdHJpY3QpIHJldHVybiBmYWxzZTsgLy8gRmFzdCBwYXRoIHRvIGRldGVjdCBtaXNzaW5nIHN0cmluZywgc3ltYm9sLCB1bmRlZmluZWQgYW5kIG51bGwgdmFsdWVzLlxuXG4gICAgICBpZiAoIXNldE1pZ2h0SGF2ZUxvb3NlUHJpbShhLCBiLCB2YWwpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNldCA9PT0gbnVsbCkge1xuICAgICAgICBzZXQgPSBuZXcgU2V0KCk7XG4gICAgICB9XG5cbiAgICAgIHNldC5hZGQodmFsKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc2V0ICE9PSBudWxsKSB7XG4gICAgdmFyIGJWYWx1ZXMgPSBhcnJheUZyb21TZXQoYik7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYlZhbHVlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfdmFsID0gYlZhbHVlc1tfaV07IC8vIFdlIGhhdmUgdG8gY2hlY2sgaWYgYSBwcmltaXRpdmUgdmFsdWUgaXMgYWxyZWFkeVxuICAgICAgLy8gbWF0Y2hpbmcgYW5kIG9ubHkgaWYgaXQncyBub3QsIGdvIGh1bnRpbmcgZm9yIGl0LlxuXG4gICAgICBpZiAoX3R5cGVvZihfdmFsKSA9PT0gJ29iamVjdCcgJiYgX3ZhbCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoIXNldEhhc0VxdWFsRWxlbWVudChzZXQsIF92YWwsIHN0cmljdCwgbWVtbykpIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiAhYS5oYXMoX3ZhbCkgJiYgIXNldEhhc0VxdWFsRWxlbWVudChzZXQsIF92YWwsIHN0cmljdCwgbWVtbykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZXQuc2l6ZSA9PT0gMDtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBtYXBIYXNFcXVhbEVudHJ5KHNldCwgbWFwLCBrZXkxLCBpdGVtMSwgc3RyaWN0LCBtZW1vKSB7XG4gIC8vIFRvIGJlIGFibGUgdG8gaGFuZGxlIGNhc2VzIGxpa2U6XG4gIC8vICAgTWFwKFtbe30sICdhJ10sIFt7fSwgJ2InXV0pIHZzIE1hcChbW3t9LCAnYiddLCBbe30sICdhJ11dKVxuICAvLyAuLi4gd2UgbmVlZCB0byBjb25zaWRlciAqYWxsKiBtYXRjaGluZyBrZXlzLCBub3QganVzdCB0aGUgZmlyc3Qgd2UgZmluZC5cbiAgdmFyIHNldFZhbHVlcyA9IGFycmF5RnJvbVNldChzZXQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0VmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleTIgPSBzZXRWYWx1ZXNbaV07XG5cbiAgICBpZiAoaW5uZXJEZWVwRXF1YWwoa2V5MSwga2V5Miwgc3RyaWN0LCBtZW1vKSAmJiBpbm5lckRlZXBFcXVhbChpdGVtMSwgbWFwLmdldChrZXkyKSwgc3RyaWN0LCBtZW1vKSkge1xuICAgICAgc2V0LmRlbGV0ZShrZXkyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbWFwRXF1aXYoYSwgYiwgc3RyaWN0LCBtZW1vKSB7XG4gIHZhciBzZXQgPSBudWxsO1xuICB2YXIgYUVudHJpZXMgPSBhcnJheUZyb21NYXAoYSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhRW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBfYUVudHJpZXMkaSA9IF9zbGljZWRUb0FycmF5KGFFbnRyaWVzW2ldLCAyKSxcbiAgICAgICAga2V5ID0gX2FFbnRyaWVzJGlbMF0sXG4gICAgICAgIGl0ZW0xID0gX2FFbnRyaWVzJGlbMV07XG5cbiAgICBpZiAoX3R5cGVvZihrZXkpID09PSAnb2JqZWN0JyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIGlmIChzZXQgPT09IG51bGwpIHtcbiAgICAgICAgc2V0ID0gbmV3IFNldCgpO1xuICAgICAgfVxuXG4gICAgICBzZXQuYWRkKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEJ5IGRpcmVjdGx5IHJldHJpZXZpbmcgdGhlIHZhbHVlIHdlIHByZXZlbnQgYW5vdGhlciBiLmhhcyhrZXkpIGNoZWNrIGluXG4gICAgICAvLyBhbG1vc3QgYWxsIHBvc3NpYmxlIGNhc2VzLlxuICAgICAgdmFyIGl0ZW0yID0gYi5nZXQoa2V5KTtcblxuICAgICAgaWYgKGl0ZW0yID09PSB1bmRlZmluZWQgJiYgIWIuaGFzKGtleSkgfHwgIWlubmVyRGVlcEVxdWFsKGl0ZW0xLCBpdGVtMiwgc3RyaWN0LCBtZW1vKSkge1xuICAgICAgICBpZiAoc3RyaWN0KSByZXR1cm4gZmFsc2U7IC8vIEZhc3QgcGF0aCB0byBkZXRlY3QgbWlzc2luZyBzdHJpbmcsIHN5bWJvbCwgdW5kZWZpbmVkIGFuZCBudWxsXG4gICAgICAgIC8vIGtleXMuXG5cbiAgICAgICAgaWYgKCFtYXBNaWdodEhhdmVMb29zZVByaW0oYSwgYiwga2V5LCBpdGVtMSwgbWVtbykpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAoc2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgc2V0ID0gbmV3IFNldCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0LmFkZChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzZXQgIT09IG51bGwpIHtcbiAgICB2YXIgYkVudHJpZXMgPSBhcnJheUZyb21NYXAoYik7XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBiRW50cmllcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgX2JFbnRyaWVzJF9pID0gX3NsaWNlZFRvQXJyYXkoYkVudHJpZXNbX2kyXSwgMiksXG4gICAgICAgICAga2V5ID0gX2JFbnRyaWVzJF9pWzBdLFxuICAgICAgICAgIGl0ZW0gPSBfYkVudHJpZXMkX2lbMV07XG5cbiAgICAgIGlmIChfdHlwZW9mKGtleSkgPT09ICdvYmplY3QnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoIW1hcEhhc0VxdWFsRW50cnkoc2V0LCBhLCBrZXksIGl0ZW0sIHN0cmljdCwgbWVtbykpIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiAoIWEuaGFzKGtleSkgfHwgIWlubmVyRGVlcEVxdWFsKGEuZ2V0KGtleSksIGl0ZW0sIGZhbHNlLCBtZW1vKSkgJiYgIW1hcEhhc0VxdWFsRW50cnkoc2V0LCBhLCBrZXksIGl0ZW0sIGZhbHNlLCBtZW1vKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNldC5zaXplID09PSAwO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG9iakVxdWl2KGEsIGIsIHN0cmljdCwga2V5cywgbWVtb3MsIGl0ZXJhdGlvblR5cGUpIHtcbiAgLy8gU2V0cyBhbmQgbWFwcyBkb24ndCBoYXZlIHRoZWlyIGVudHJpZXMgYWNjZXNzaWJsZSB2aWEgbm9ybWFsIG9iamVjdFxuICAvLyBwcm9wZXJ0aWVzLlxuICB2YXIgaSA9IDA7XG5cbiAgaWYgKGl0ZXJhdGlvblR5cGUgPT09IGtJc1NldCkge1xuICAgIGlmICghc2V0RXF1aXYoYSwgYiwgc3RyaWN0LCBtZW1vcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXRlcmF0aW9uVHlwZSA9PT0ga0lzTWFwKSB7XG4gICAgaWYgKCFtYXBFcXVpdihhLCBiLCBzdHJpY3QsIG1lbW9zKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpdGVyYXRpb25UeXBlID09PSBrSXNBcnJheSkge1xuICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5KGEsIGkpKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkoYiwgaSkgfHwgIWlubmVyRGVlcEVxdWFsKGFbaV0sIGJbaV0sIHN0cmljdCwgbWVtb3MpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGhhc093blByb3BlcnR5KGIsIGkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFycmF5IGlzIHNwYXJzZS5cbiAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG5cbiAgICAgICAgZm9yICg7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBrZXkgPSBrZXlzQVtpXTtcblxuICAgICAgICAgIGlmICghaGFzT3duUHJvcGVydHkoYiwga2V5KSB8fCAhaW5uZXJEZWVwRXF1YWwoYVtrZXldLCBiW2tleV0sIHN0cmljdCwgbWVtb3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGtleXNBLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoYikubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIFRoZSBwYWlyIG11c3QgaGF2ZSBlcXVpdmFsZW50IHZhbHVlcyBmb3IgZXZlcnkgY29ycmVzcG9uZGluZyBrZXkuXG4gIC8vIFBvc3NpYmx5IGV4cGVuc2l2ZSBkZWVwIHRlc3Q6XG5cblxuICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBfa2V5ID0ga2V5c1tpXTtcblxuICAgIGlmICghaW5uZXJEZWVwRXF1YWwoYVtfa2V5XSwgYltfa2V5XSwgc3RyaWN0LCBtZW1vcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNEZWVwRXF1YWwodmFsMSwgdmFsMikge1xuICByZXR1cm4gaW5uZXJEZWVwRXF1YWwodmFsMSwgdmFsMiwga0xvb3NlKTtcbn1cblxuZnVuY3Rpb24gaXNEZWVwU3RyaWN0RXF1YWwodmFsMSwgdmFsMikge1xuICByZXR1cm4gaW5uZXJEZWVwRXF1YWwodmFsMSwgdmFsMiwga1N0cmljdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0RlZXBFcXVhbDogaXNEZWVwRXF1YWwsXG4gIGlzRGVlcFN0cmljdEVxdWFsOiBpc0RlZXBTdHJpY3RFcXVhbFxufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDk4MTg6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBHZXRJbnRyaW5zaWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyOCk7XG5cbnZhciBjYWxsQmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oODQ5OCk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCaW5kKEdldEludHJpbnNpYygnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpYyA9IEdldEludHJpbnNpYyhuYW1lLCAhIWFsbG93TWlzc2luZyk7XG5cdGlmICh0eXBlb2YgaW50cmluc2ljID09PSAnZnVuY3Rpb24nICYmICRpbmRleE9mKG5hbWUsICcucHJvdG90eXBlLicpID4gLTEpIHtcblx0XHRyZXR1cm4gY2FsbEJpbmQoaW50cmluc2ljKTtcblx0fVxuXHRyZXR1cm4gaW50cmluc2ljO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODQ5ODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxMzgpO1xudmFyIEdldEludHJpbnNpYyA9IF9fd2VicGFja19yZXF1aXJlX18oNTI4KTtcbnZhciBzZXRGdW5jdGlvbkxlbmd0aCA9IF9fd2VicGFja19yZXF1aXJlX18oNjEwOCk7XG5cbnZhciAkVHlwZUVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNDY4KTtcbnZhciAkYXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHklJyk7XG52YXIgJGNhbGwgPSBHZXRJbnRyaW5zaWMoJyVGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCUnKTtcbnZhciAkcmVmbGVjdEFwcGx5ID0gR2V0SW50cmluc2ljKCclUmVmbGVjdC5hcHBseSUnLCB0cnVlKSB8fCBiaW5kLmNhbGwoJGNhbGwsICRhcHBseSk7XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5NDApO1xudmFyICRtYXggPSBHZXRJbnRyaW5zaWMoJyVNYXRoLm1heCUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQmluZChvcmlnaW5hbEZ1bmN0aW9uKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ2luYWxGdW5jdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdhIGZ1bmN0aW9uIGlzIHJlcXVpcmVkJyk7XG5cdH1cblx0dmFyIGZ1bmMgPSAkcmVmbGVjdEFwcGx5KGJpbmQsICRjYWxsLCBhcmd1bWVudHMpO1xuXHRyZXR1cm4gc2V0RnVuY3Rpb25MZW5ndGgoXG5cdFx0ZnVuYyxcblx0XHQxICsgJG1heCgwLCBvcmlnaW5hbEZ1bmN0aW9uLmxlbmd0aCAtIChhcmd1bWVudHMubGVuZ3RoIC0gMSkpLFxuXHRcdHRydWVcblx0KTtcbn07XG5cbnZhciBhcHBseUJpbmQgPSBmdW5jdGlvbiBhcHBseUJpbmQoKSB7XG5cdHJldHVybiAkcmVmbGVjdEFwcGx5KGJpbmQsICRhcHBseSwgYXJndW1lbnRzKTtcbn07XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0JGRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnYXBwbHknLCB7IHZhbHVlOiBhcHBseUJpbmQgfSk7XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cy5hcHBseSA9IGFwcGx5QmluZDtcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDM2NDpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuLypnbG9iYWwgd2luZG93LCBnbG9iYWwqL1xudmFyIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4MjcpXG52YXIgYXNzZXJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDkzKVxuZnVuY3Rpb24gbm93KCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCkgfVxuXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2VcbnZhciBjb25zb2xlXG52YXIgdGltZXMgPSB7fVxuXG5pZiAodHlwZW9mIF9fd2VicGFja19yZXF1aXJlX18uZyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuY29uc29sZSkge1xuICAgIGNvbnNvbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuY29uc29sZVxufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5jb25zb2xlKSB7XG4gICAgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlXG59IGVsc2Uge1xuICAgIGNvbnNvbGUgPSB7fVxufVxuXG52YXIgZnVuY3Rpb25zID0gW1xuICAgIFtsb2csIFwibG9nXCJdLFxuICAgIFtpbmZvLCBcImluZm9cIl0sXG4gICAgW3dhcm4sIFwid2FyblwiXSxcbiAgICBbZXJyb3IsIFwiZXJyb3JcIl0sXG4gICAgW3RpbWUsIFwidGltZVwiXSxcbiAgICBbdGltZUVuZCwgXCJ0aW1lRW5kXCJdLFxuICAgIFt0cmFjZSwgXCJ0cmFjZVwiXSxcbiAgICBbZGlyLCBcImRpclwiXSxcbiAgICBbY29uc29sZUFzc2VydCwgXCJhc3NlcnRcIl1cbl1cblxuZm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdHVwbGUgPSBmdW5jdGlvbnNbaV1cbiAgICB2YXIgZiA9IHR1cGxlWzBdXG4gICAgdmFyIG5hbWUgPSB0dXBsZVsxXVxuXG4gICAgaWYgKCFjb25zb2xlW25hbWVdKSB7XG4gICAgICAgIGNvbnNvbGVbbmFtZV0gPSBmXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnNvbGVcblxuZnVuY3Rpb24gbG9nKCkge31cblxuZnVuY3Rpb24gaW5mbygpIHtcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKVxufVxuXG5mdW5jdGlvbiBlcnJvcigpIHtcbiAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKVxufVxuXG5mdW5jdGlvbiB0aW1lKGxhYmVsKSB7XG4gICAgdGltZXNbbGFiZWxdID0gbm93KClcbn1cblxuZnVuY3Rpb24gdGltZUVuZChsYWJlbCkge1xuICAgIHZhciB0aW1lID0gdGltZXNbbGFiZWxdXG4gICAgaWYgKCF0aW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWw6IFwiICsgbGFiZWwpXG4gICAgfVxuXG4gICAgZGVsZXRlIHRpbWVzW2xhYmVsXVxuICAgIHZhciBkdXJhdGlvbiA9IG5vdygpIC0gdGltZVxuICAgIGNvbnNvbGUubG9nKGxhYmVsICsgXCI6IFwiICsgZHVyYXRpb24gKyBcIm1zXCIpXG59XG5cbmZ1bmN0aW9uIHRyYWNlKCkge1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKVxuICAgIGVyci5uYW1lID0gXCJUcmFjZVwiXG4gICAgZXJyLm1lc3NhZ2UgPSB1dGlsLmZvcm1hdC5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgY29uc29sZS5lcnJvcihlcnIuc3RhY2spXG59XG5cbmZ1bmN0aW9uIGRpcihvYmplY3QpIHtcbiAgICBjb25zb2xlLmxvZyh1dGlsLmluc3BlY3Qob2JqZWN0KSArIFwiXFxuXCIpXG59XG5cbmZ1bmN0aW9uIGNvbnNvbGVBc3NlcnQoZXhwcmVzc2lvbikge1xuICAgIGlmICghZXhwcmVzc2lvbikge1xuICAgICAgICB2YXIgYXJyID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG4gICAgICAgIGFzc2VydC5vayhmYWxzZSwgdXRpbC5mb3JtYXQuYXBwbHkobnVsbCwgYXJyKSlcbiAgICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDY4Njpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNDk0MCk7XG5cbnZhciAkU3ludGF4RXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3MzEpO1xudmFyICRUeXBlRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0NjgpO1xuXG52YXIgZ29wZCA9IF9fd2VicGFja19yZXF1aXJlX18oOTMzNik7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZURhdGFQcm9wZXJ0eShcblx0b2JqLFxuXHRwcm9wZXJ0eSxcblx0dmFsdWVcbikge1xuXHRpZiAoIW9iaiB8fCAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iaiAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYG9iamAgbXVzdCBiZSBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbmAnKTtcblx0fVxuXHRpZiAodHlwZW9mIHByb3BlcnR5ICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgcHJvcGVydHkgIT09ICdzeW1ib2wnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Bwcm9wZXJ0eWAgbXVzdCBiZSBhIHN0cmluZyBvciBhIHN5bWJvbGAnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSAhPT0gJ2Jvb2xlYW4nICYmIGFyZ3VtZW50c1szXSAhPT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbm9uRW51bWVyYWJsZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIHR5cGVvZiBhcmd1bWVudHNbNF0gIT09ICdib29sZWFuJyAmJiBhcmd1bWVudHNbNF0gIT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYG5vbldyaXRhYmxlYCwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYSBib29sZWFuIG9yIG51bGwnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgdHlwZW9mIGFyZ3VtZW50c1s1XSAhPT0gJ2Jvb2xlYW4nICYmIGFyZ3VtZW50c1s1XSAhPT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbm9uQ29uZmlndXJhYmxlYCwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYSBib29sZWFuIG9yIG51bGwnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgdHlwZW9mIGFyZ3VtZW50c1s2XSAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Bsb29zZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0dmFyIG5vbkVudW1lcmFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG5cdHZhciBub25Xcml0YWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogbnVsbDtcblx0dmFyIG5vbkNvbmZpZ3VyYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ID8gYXJndW1lbnRzWzVdIDogbnVsbDtcblx0dmFyIGxvb3NlID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgPyBhcmd1bWVudHNbNl0gOiBmYWxzZTtcblxuXHQvKiBAdHlwZSB7ZmFsc2UgfCBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjx1bmtub3duPn0gKi9cblx0dmFyIGRlc2MgPSAhIWdvcGQgJiYgZ29wZChvYmosIHByb3BlcnR5KTtcblxuXHRpZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0JGRlZmluZVByb3BlcnR5KG9iaiwgcHJvcGVydHksIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogbm9uQ29uZmlndXJhYmxlID09PSBudWxsICYmIGRlc2MgPyBkZXNjLmNvbmZpZ3VyYWJsZSA6ICFub25Db25maWd1cmFibGUsXG5cdFx0XHRlbnVtZXJhYmxlOiBub25FbnVtZXJhYmxlID09PSBudWxsICYmIGRlc2MgPyBkZXNjLmVudW1lcmFibGUgOiAhbm9uRW51bWVyYWJsZSxcblx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdHdyaXRhYmxlOiBub25Xcml0YWJsZSA9PT0gbnVsbCAmJiBkZXNjID8gZGVzYy53cml0YWJsZSA6ICFub25Xcml0YWJsZVxuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKGxvb3NlIHx8ICghbm9uRW51bWVyYWJsZSAmJiAhbm9uV3JpdGFibGUgJiYgIW5vbkNvbmZpZ3VyYWJsZSkpIHtcblx0XHQvLyBtdXN0IGZhbGwgYmFjayB0byBbW1NldF1dLCBhbmQgd2FzIG5vdCBleHBsaWNpdGx5IGFza2VkIHRvIG1ha2Ugbm9uLWVudW1lcmFibGUsIG5vbi13cml0YWJsZSwgb3Igbm9uLWNvbmZpZ3VyYWJsZVxuXHRcdG9ialtwcm9wZXJ0eV0gPSB2YWx1ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ1RoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBkZWZpbmluZyBhIHByb3BlcnR5IGFzIG5vbi1jb25maWd1cmFibGUsIG5vbi13cml0YWJsZSwgb3Igbm9uLWVudW1lcmFibGUuJyk7XG5cdH1cbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE4NTc6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBrZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MjI4KTtcbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciBkZWZpbmVEYXRhUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4Nik7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oNzIzOSkoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QpIHtcblx0XHRpZiAocHJlZGljYXRlID09PSB0cnVlKSB7XG5cdFx0XHRpZiAob2JqZWN0W25hbWVdID09PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0ZGVmaW5lRGF0YVByb3BlcnR5KG9iamVjdCwgbmFtZSwgdmFsdWUsIHRydWUpO1xuXHR9IGVsc2Uge1xuXHRcdGRlZmluZURhdGFQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHZhbHVlKTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDk0MDpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIEdldEludHJpbnNpYyA9IF9fd2VicGFja19yZXF1aXJlX18oNTI4KTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZGVmaW5lUHJvcGVydHklJywgdHJ1ZSkgfHwgZmFsc2U7XG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0JGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgdmFsdWU6IDEgfSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBkZWZpbmVQcm9wZXJ0eVxuXHRcdCRkZWZpbmVQcm9wZXJ0eSA9IGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gJGRlZmluZVByb3BlcnR5O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2NzI5OlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vZXZhbCcpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBFdmFsRXJyb3I7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk4Mzg6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBFcnJvcjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTE1NTpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3JhbmdlJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFJhbmdlRXJyb3I7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ5NDM6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9yZWYnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gUmVmZXJlbmNlRXJyb3I7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDU3MzE6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9zeW50YXgnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gU3ludGF4RXJyb3I7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM0Njg6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKiogQHR5cGUge2ltcG9ydCgnLi90eXBlJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFR5cGVFcnJvcjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjE0MDpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3VyaScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBVUklFcnJvcjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzA0Njpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb2RlIHJlZmFjdG9yZWQgZnJvbSBNb3ppbGxhIERldmVsb3BlciBOZXR3b3JrOlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2Fzc2lnblxuICovXG5cblxuXG5mdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBmaXJzdFNvdXJjZSkge1xuICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgZmlyc3QgYXJndW1lbnQgdG8gb2JqZWN0Jyk7XG4gIH1cblxuICB2YXIgdG8gPSBPYmplY3QodGFyZ2V0KTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAobmV4dFNvdXJjZSA9PT0gdW5kZWZpbmVkIHx8IG5leHRTb3VyY2UgPT09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpO1xuICAgIGZvciAodmFyIG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4KyspIHtcbiAgICAgIHZhciBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0bztcbn1cblxuZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gIGlmICghT2JqZWN0LmFzc2lnbikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QsICdhc3NpZ24nLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGFzc2lnblxuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NpZ246IGFzc2lnbixcbiAgcG9seWZpbGw6IHBvbHlmaWxsXG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3MDU6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NjE3KTtcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmb3JFYWNoQXJyYXkgPSBmdW5jdGlvbiBmb3JFYWNoQXJyYXkoYXJyYXksIGl0ZXJhdG9yLCByZWNlaXZlcikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChhcnJheSwgaSkpIHtcbiAgICAgICAgICAgIGlmIChyZWNlaXZlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IoYXJyYXlbaV0sIGksIGFycmF5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IuY2FsbChyZWNlaXZlciwgYXJyYXlbaV0sIGksIGFycmF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoU3RyaW5nID0gZnVuY3Rpb24gZm9yRWFjaFN0cmluZyhzdHJpbmcsIGl0ZXJhdG9yLCByZWNlaXZlcikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzdHJpbmcubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgLy8gbm8gc3VjaCB0aGluZyBhcyBhIHNwYXJzZSBzdHJpbmcuXG4gICAgICAgIGlmIChyZWNlaXZlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBpdGVyYXRvcihzdHJpbmcuY2hhckF0KGkpLCBpLCBzdHJpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlcmF0b3IuY2FsbChyZWNlaXZlciwgc3RyaW5nLmNoYXJBdChpKSwgaSwgc3RyaW5nKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoT2JqZWN0ID0gZnVuY3Rpb24gZm9yRWFjaE9iamVjdChvYmplY3QsIGl0ZXJhdG9yLCByZWNlaXZlcikge1xuICAgIGZvciAodmFyIGsgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgaykpIHtcbiAgICAgICAgICAgIGlmIChyZWNlaXZlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3Iob2JqZWN0W2tdLCBrLCBvYmplY3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBvYmplY3Rba10sIGssIG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2gobGlzdCwgaXRlcmF0b3IsIHRoaXNBcmcpIHtcbiAgICBpZiAoIWlzQ2FsbGFibGUoaXRlcmF0b3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2l0ZXJhdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIHZhciByZWNlaXZlcjtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAzKSB7XG4gICAgICAgIHJlY2VpdmVyID0gdGhpc0FyZztcbiAgICB9XG5cbiAgICBpZiAodG9TdHIuY2FsbChsaXN0KSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgICBmb3JFYWNoQXJyYXkobGlzdCwgaXRlcmF0b3IsIHJlY2VpdmVyKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBmb3JFYWNoU3RyaW5nKGxpc3QsIGl0ZXJhdG9yLCByZWNlaXZlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yRWFjaE9iamVjdChsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZm9yRWFjaDtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODc5NDpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDEgKi9cblxudmFyIEVSUk9SX01FU1NBR0UgPSAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBmdW5jVHlwZSA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbnZhciBjb25jYXR0eSA9IGZ1bmN0aW9uIGNvbmNhdHR5KGEsIGIpIHtcbiAgICB2YXIgYXJyID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyW2ldID0gYVtpXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBiLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGFycltqICsgYS5sZW5ndGhdID0gYltqXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyO1xufTtcblxudmFyIHNsaWN5ID0gZnVuY3Rpb24gc2xpY3koYXJyTGlrZSwgb2Zmc2V0KSB7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGZvciAodmFyIGkgPSBvZmZzZXQgfHwgMCwgaiA9IDA7IGkgPCBhcnJMaWtlLmxlbmd0aDsgaSArPSAxLCBqICs9IDEpIHtcbiAgICAgICAgYXJyW2pdID0gYXJyTGlrZVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn07XG5cbnZhciBqb2lueSA9IGZ1bmN0aW9uIChhcnIsIGpvaW5lcikge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gYXJyW2ldO1xuICAgICAgICBpZiAoaSArIDEgPCBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICBzdHIgKz0gam9pbmVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHRvU3RyLmFwcGx5KHRhcmdldCkgIT09IGZ1bmNUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJST1JfTUVTU0FHRSArIHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gc2xpY3koYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgY29uY2F0dHkoYXJncywgYXJndW1lbnRzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgY29uY2F0dHkoYXJncywgYXJndW1lbnRzKVxuICAgICAgICApO1xuXG4gICAgfTtcblxuICAgIHZhciBib3VuZExlbmd0aCA9IG1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm91bmRBcmdzW2ldID0gJyQnICsgaTtcbiAgICB9XG5cbiAgICBib3VuZCA9IEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgam9pbnkoYm91bmRBcmdzLCAnLCcpICsgJyl7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDkxMzg6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oODc5NCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDUyODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHVuZGVmaW5lZDtcblxudmFyICRFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oOTgzOCk7XG52YXIgJEV2YWxFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oNjcyOSk7XG52YXIgJFJhbmdlRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNTUpO1xudmFyICRSZWZlcmVuY2VFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oNDk0Myk7XG52YXIgJFN5bnRheEVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NzMxKTtcbnZhciAkVHlwZUVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNDY4KTtcbnZhciAkVVJJRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxNDApO1xuXG52YXIgJEZ1bmN0aW9uID0gRnVuY3Rpb247XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIGdldEV2YWxsZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChleHByZXNzaW9uU3ludGF4KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRGdW5jdGlvbignXCJ1c2Ugc3RyaWN0XCI7IHJldHVybiAoJyArIGV4cHJlc3Npb25TeW50YXggKyAnKS5jb25zdHJ1Y3RvcjsnKSgpO1xuXHR9IGNhdGNoIChlKSB7fVxufTtcblxudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKHt9LCAnJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQkZ09QRCA9IG51bGw7IC8vIHRoaXMgaXMgSUUgOCwgd2hpY2ggaGFzIGEgYnJva2VuIGdPUERcblx0fVxufVxuXG52YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCk7XG59O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1NTgpKCk7XG52YXIgaGFzUHJvdG8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4NjkpKCk7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCAoXG5cdGhhc1Byb3RvXG5cdFx0PyBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5fX3Byb3RvX187IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b1xuXHRcdDogbnVsbFxuKTtcblxudmFyIG5lZWRzRXZhbCA9IHt9O1xuXG52YXIgVHlwZWRBcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyB8fCAhZ2V0UHJvdG8gPyB1bmRlZmluZWQgOiBnZXRQcm90byhVaW50OEFycmF5KTtcblxudmFyIElOVFJJTlNJQ1MgPSB7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0JyVBZ2dyZWdhdGVFcnJvciUnOiB0eXBlb2YgQWdncmVnYXRlRXJyb3IgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQWdncmVnYXRlRXJyb3IsXG5cdCclQXJyYXklJzogQXJyYXksXG5cdCclQXJyYXlCdWZmZXIlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLFxuXHQnJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGcm9tU3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Z1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiBuZWVkc0V2YWwsXG5cdCclQXRvbWljcyUnOiB0eXBlb2YgQXRvbWljcyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBdG9taWNzLFxuXHQnJUJpZ0ludCUnOiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ0ludCxcblx0JyVCaWdJbnQ2NEFycmF5JSc6IHR5cGVvZiBCaWdJbnQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ0ludDY0QXJyYXksXG5cdCclQmlnVWludDY0QXJyYXklJzogdHlwZW9mIEJpZ1VpbnQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ1VpbnQ2NEFycmF5LFxuXHQnJUJvb2xlYW4lJzogQm9vbGVhbixcblx0JyVEYXRhVmlldyUnOiB0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRGF0YVZpZXcsXG5cdCclRGF0ZSUnOiBEYXRlLFxuXHQnJWRlY29kZVVSSSUnOiBkZWNvZGVVUkksXG5cdCclZGVjb2RlVVJJQ29tcG9uZW50JSc6IGRlY29kZVVSSUNvbXBvbmVudCxcblx0JyVlbmNvZGVVUkklJzogZW5jb2RlVVJJLFxuXHQnJWVuY29kZVVSSUNvbXBvbmVudCUnOiBlbmNvZGVVUklDb21wb25lbnQsXG5cdCclRXJyb3IlJzogJEVycm9yLFxuXHQnJWV2YWwlJzogZXZhbCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG5cdCclRXZhbEVycm9yJSc6ICRFdmFsRXJyb3IsXG5cdCclRmxvYXQzMkFycmF5JSc6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQzMkFycmF5LFxuXHQnJUZsb2F0NjRBcnJheSUnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0NjRBcnJheSxcblx0JyVGaW5hbGl6YXRpb25SZWdpc3RyeSUnOiB0eXBlb2YgRmluYWxpemF0aW9uUmVnaXN0cnkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmluYWxpemF0aW9uUmVnaXN0cnksXG5cdCclRnVuY3Rpb24lJzogJEZ1bmN0aW9uLFxuXHQnJUdlbmVyYXRvckZ1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVJbnQ4QXJyYXklJzogdHlwZW9mIEludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXksXG5cdCclSW50MTZBcnJheSUnOiB0eXBlb2YgSW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQxNkFycmF5LFxuXHQnJUludDMyQXJyYXklJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheSxcblx0JyVpc0Zpbml0ZSUnOiBpc0Zpbml0ZSxcblx0JyVpc05hTiUnOiBpc05hTixcblx0JyVJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzICYmIGdldFByb3RvID8gZ2V0UHJvdG8oZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSkgOiB1bmRlZmluZWQsXG5cdCclSlNPTiUnOiB0eXBlb2YgSlNPTiA9PT0gJ29iamVjdCcgPyBKU09OIDogdW5kZWZpbmVkLFxuXHQnJU1hcCUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE1hcCxcblx0JyVNYXBJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyB8fCAhZ2V0UHJvdG8gPyB1bmRlZmluZWQgOiBnZXRQcm90byhuZXcgTWFwKClbU3ltYm9sLml0ZXJhdG9yXSgpKSxcblx0JyVNYXRoJSc6IE1hdGgsXG5cdCclTnVtYmVyJSc6IE51bWJlcixcblx0JyVPYmplY3QlJzogT2JqZWN0LFxuXHQnJXBhcnNlRmxvYXQlJzogcGFyc2VGbG9hdCxcblx0JyVwYXJzZUludCUnOiBwYXJzZUludCxcblx0JyVQcm9taXNlJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UsXG5cdCclUHJveHklJzogdHlwZW9mIFByb3h5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb3h5LFxuXHQnJVJhbmdlRXJyb3IlJzogJFJhbmdlRXJyb3IsXG5cdCclUmVmZXJlbmNlRXJyb3IlJzogJFJlZmVyZW5jZUVycm9yLFxuXHQnJVJlZmxlY3QlJzogdHlwZW9mIFJlZmxlY3QgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUmVmbGVjdCxcblx0JyVSZWdFeHAlJzogUmVnRXhwLFxuXHQnJVNldCUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNldCxcblx0JyVTZXRJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyB8fCAhZ2V0UHJvdG8gPyB1bmRlZmluZWQgOiBnZXRQcm90byhuZXcgU2V0KClbU3ltYm9sLml0ZXJhdG9yXSgpKSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlciUnOiB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2hhcmVkQXJyYXlCdWZmZXIsXG5cdCclU3RyaW5nJSc6IFN0cmluZyxcblx0JyVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzICYmIGdldFByb3RvID8gZ2V0UHJvdG8oJydbU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVTeW1ib2wlJzogaGFzU3ltYm9scyA/IFN5bWJvbCA6IHVuZGVmaW5lZCxcblx0JyVTeW50YXhFcnJvciUnOiAkU3ludGF4RXJyb3IsXG5cdCclVGhyb3dUeXBlRXJyb3IlJzogVGhyb3dUeXBlRXJyb3IsXG5cdCclVHlwZWRBcnJheSUnOiBUeXBlZEFycmF5LFxuXHQnJVR5cGVFcnJvciUnOiAkVHlwZUVycm9yLFxuXHQnJVVpbnQ4QXJyYXklJzogdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhBcnJheSxcblx0JyVVaW50OENsYW1wZWRBcnJheSUnOiB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhDbGFtcGVkQXJyYXksXG5cdCclVWludDE2QXJyYXklJzogdHlwZW9mIFVpbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQxNkFycmF5LFxuXHQnJVVpbnQzMkFycmF5JSc6IHR5cGVvZiBVaW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MzJBcnJheSxcblx0JyVVUklFcnJvciUnOiAkVVJJRXJyb3IsXG5cdCclV2Vha01hcCUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLFxuXHQnJVdlYWtSZWYlJzogdHlwZW9mIFdlYWtSZWYgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1JlZixcblx0JyVXZWFrU2V0JSc6IHR5cGVvZiBXZWFrU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtTZXRcbn07XG5cbmlmIChnZXRQcm90bykge1xuXHR0cnkge1xuXHRcdG51bGwuZXJyb3I7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zaGFkb3dyZWFsbS9wdWxsLzM4NCNpc3N1ZWNvbW1lbnQtMTM2NDI2NDIyOVxuXHRcdHZhciBlcnJvclByb3RvID0gZ2V0UHJvdG8oZ2V0UHJvdG8oZSkpO1xuXHRcdElOVFJJTlNJQ1NbJyVFcnJvci5wcm90b3R5cGUlJ10gPSBlcnJvclByb3RvO1xuXHR9XG59XG5cbnZhciBkb0V2YWwgPSBmdW5jdGlvbiBkb0V2YWwobmFtZSkge1xuXHR2YXIgdmFsdWU7XG5cdGlmIChuYW1lID09PSAnJUFzeW5jRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yJScpIHtcblx0XHR2YXIgZm4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpO1xuXHRcdGlmIChmbikge1xuXHRcdFx0dmFsdWUgPSBmbi5wcm90b3R5cGU7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnKSB7XG5cdFx0dmFyIGdlbiA9IGRvRXZhbCgnJUFzeW5jR2VuZXJhdG9yJScpO1xuXHRcdGlmIChnZW4gJiYgZ2V0UHJvdG8pIHtcblx0XHRcdHZhbHVlID0gZ2V0UHJvdG8oZ2VuLnByb3RvdHlwZSk7XG5cdFx0fVxuXHR9XG5cblx0SU5UUklOU0lDU1tuYW1lXSA9IHZhbHVlO1xuXG5cdHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBMRUdBQ1lfQUxJQVNFUyA9IHtcblx0X19wcm90b19fOiBudWxsLFxuXHQnJUFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b3R5cGUlJzogWydBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVBcnJheVByb3RvX2VudHJpZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZW50cmllcyddLFxuXHQnJUFycmF5UHJvdG9fZm9yRWFjaCUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdmb3JFYWNoJ10sXG5cdCclQXJyYXlQcm90b19rZXlzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2tleXMnXSxcblx0JyVBcnJheVByb3RvX3ZhbHVlcyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICd2YWx1ZXMnXSxcblx0JyVBc3luY0Z1bmN0aW9uUHJvdG90eXBlJSc6IFsnQXN5bmNGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBbJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3JQcm90b3R5cGUlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGUnXSxcblx0JyVCb29sZWFuUHJvdG90eXBlJSc6IFsnQm9vbGVhbicsICdwcm90b3R5cGUnXSxcblx0JyVEYXRhVmlld1Byb3RvdHlwZSUnOiBbJ0RhdGFWaWV3JywgJ3Byb3RvdHlwZSddLFxuXHQnJURhdGVQcm90b3R5cGUlJzogWydEYXRlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUVycm9yUHJvdG90eXBlJSc6IFsnRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclRXZhbEVycm9yUHJvdG90eXBlJSc6IFsnRXZhbEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUZsb2F0MzJBcnJheVByb3RvdHlwZSUnOiBbJ0Zsb2F0MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDY0QXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDY0QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRnVuY3Rpb25Qcm90b3R5cGUlJzogWydGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVHZW5lcmF0b3IlJzogWydHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVHZW5lcmF0b3JQcm90b3R5cGUlJzogWydHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclSW50OEFycmF5UHJvdG90eXBlJSc6IFsnSW50OEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDE2QXJyYXlQcm90b3R5cGUlJzogWydJbnQxNkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDMyQXJyYXlQcm90b3R5cGUlJzogWydJbnQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUpTT05QYXJzZSUnOiBbJ0pTT04nLCAncGFyc2UnXSxcblx0JyVKU09OU3RyaW5naWZ5JSc6IFsnSlNPTicsICdzdHJpbmdpZnknXSxcblx0JyVNYXBQcm90b3R5cGUlJzogWydNYXAnLCAncHJvdG90eXBlJ10sXG5cdCclTnVtYmVyUHJvdG90eXBlJSc6IFsnTnVtYmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJU9iamVjdFByb3RvdHlwZSUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnXSxcblx0JyVPYmpQcm90b190b1N0cmluZyUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndG9TdHJpbmcnXSxcblx0JyVPYmpQcm90b192YWx1ZU9mJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZScsICd2YWx1ZU9mJ10sXG5cdCclUHJvbWlzZVByb3RvdHlwZSUnOiBbJ1Byb21pc2UnLCAncHJvdG90eXBlJ10sXG5cdCclUHJvbWlzZVByb3RvX3RoZW4lJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZScsICd0aGVuJ10sXG5cdCclUHJvbWlzZV9hbGwlJzogWydQcm9taXNlJywgJ2FsbCddLFxuXHQnJVByb21pc2VfcmVqZWN0JSc6IFsnUHJvbWlzZScsICdyZWplY3QnXSxcblx0JyVQcm9taXNlX3Jlc29sdmUlJzogWydQcm9taXNlJywgJ3Jlc29sdmUnXSxcblx0JyVSYW5nZUVycm9yUHJvdG90eXBlJSc6IFsnUmFuZ2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSUnOiBbJ1JlZmVyZW5jZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVJlZ0V4cFByb3RvdHlwZSUnOiBbJ1JlZ0V4cCcsICdwcm90b3R5cGUnXSxcblx0JyVTZXRQcm90b3R5cGUlJzogWydTZXQnLCAncHJvdG90eXBlJ10sXG5cdCclU2hhcmVkQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogWydTaGFyZWRBcnJheUJ1ZmZlcicsICdwcm90b3R5cGUnXSxcblx0JyVTdHJpbmdQcm90b3R5cGUlJzogWydTdHJpbmcnLCAncHJvdG90eXBlJ10sXG5cdCclU3ltYm9sUHJvdG90eXBlJSc6IFsnU3ltYm9sJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bnRheEVycm9yUHJvdG90eXBlJSc6IFsnU3ludGF4RXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclVHlwZWRBcnJheVByb3RvdHlwZSUnOiBbJ1R5cGVkQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVHlwZUVycm9yUHJvdG90eXBlJSc6IFsnVHlwZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQ4QXJyYXlQcm90b3R5cGUlJzogWydVaW50OEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhDbGFtcGVkQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDE2QXJyYXlQcm90b3R5cGUlJzogWydVaW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50MzJBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVSSUVycm9yUHJvdG90eXBlJSc6IFsnVVJJRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclV2Vha01hcFByb3RvdHlwZSUnOiBbJ1dlYWtNYXAnLCAncHJvdG90eXBlJ10sXG5cdCclV2Vha1NldFByb3RvdHlwZSUnOiBbJ1dlYWtTZXQnLCAncHJvdG90eXBlJ11cbn07XG5cbnZhciBiaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MTM4KTtcbnZhciBoYXNPd24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg1NTQpO1xudmFyICRjb25jYXQgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgQXJyYXkucHJvdG90eXBlLmNvbmNhdCk7XG52YXIgJHNwbGljZUFwcGx5ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmFwcGx5LCBBcnJheS5wcm90b3R5cGUuc3BsaWNlKTtcbnZhciAkcmVwbGFjZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xudmFyICRzdHJTbGljZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBTdHJpbmcucHJvdG90eXBlLnNsaWNlKTtcbnZhciAkZXhlYyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBSZWdFeHAucHJvdG90eXBlLmV4ZWMpO1xuXG4vKiBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2xvZGFzaC9sb2Rhc2gvYmxvYi80LjE3LjE1L2Rpc3QvbG9kYXNoLmpzI0w2NzM1LUw2NzQ0ICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXiUuW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JSQpKS9nO1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nOyAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBmdW5jdGlvbiBzdHJpbmdUb1BhdGgoc3RyaW5nKSB7XG5cdHZhciBmaXJzdCA9ICRzdHJTbGljZShzdHJpbmcsIDAsIDEpO1xuXHR2YXIgbGFzdCA9ICRzdHJTbGljZShzdHJpbmcsIC0xKTtcblx0aWYgKGZpcnN0ID09PSAnJScgJiYgbGFzdCAhPT0gJyUnKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW52YWxpZCBpbnRyaW5zaWMgc3ludGF4LCBleHBlY3RlZCBjbG9zaW5nIGAlYCcpO1xuXHR9IGVsc2UgaWYgKGxhc3QgPT09ICclJyAmJiBmaXJzdCAhPT0gJyUnKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW52YWxpZCBpbnRyaW5zaWMgc3ludGF4LCBleHBlY3RlZCBvcGVuaW5nIGAlYCcpO1xuXHR9XG5cdHZhciByZXN1bHQgPSBbXTtcblx0JHJlcGxhY2Uoc3RyaW5nLCByZVByb3BOYW1lLCBmdW5jdGlvbiAobWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuXHRcdHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHF1b3RlID8gJHJlcGxhY2Uoc3ViU3RyaW5nLCByZUVzY2FwZUNoYXIsICckMScpIDogbnVtYmVyIHx8IG1hdGNoO1xuXHR9KTtcblx0cmV0dXJuIHJlc3VsdDtcbn07XG4vKiBlbmQgYWRhcHRhdGlvbiAqL1xuXG52YXIgZ2V0QmFzZUludHJpbnNpYyA9IGZ1bmN0aW9uIGdldEJhc2VJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWNOYW1lID0gbmFtZTtcblx0dmFyIGFsaWFzO1xuXHRpZiAoaGFzT3duKExFR0FDWV9BTElBU0VTLCBpbnRyaW5zaWNOYW1lKSkge1xuXHRcdGFsaWFzID0gTEVHQUNZX0FMSUFTRVNbaW50cmluc2ljTmFtZV07XG5cdFx0aW50cmluc2ljTmFtZSA9ICclJyArIGFsaWFzWzBdICsgJyUnO1xuXHR9XG5cblx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNOYW1lKSkge1xuXHRcdHZhciB2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljTmFtZV07XG5cdFx0aWYgKHZhbHVlID09PSBuZWVkc0V2YWwpIHtcblx0XHRcdHZhbHVlID0gZG9FdmFsKGludHJpbnNpY05hbWUpO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJiAhYWxsb3dNaXNzaW5nKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgZmlsZSBhbiBpc3N1ZSEnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YWxpYXM6IGFsaWFzLFxuXHRcdFx0bmFtZTogaW50cmluc2ljTmFtZSxcblx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdH07XG5cdH1cblxuXHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGRvZXMgbm90IGV4aXN0IScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycgfHwgbmFtZS5sZW5ndGggPT09IDApIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW50cmluc2ljIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFsbG93TWlzc2luZyAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1wiYWxsb3dNaXNzaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXG5cdGlmICgkZXhlYygvXiU/W14lXSolPyQvLCBuYW1lKSA9PT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2AlYCBtYXkgbm90IGJlIHByZXNlbnQgYW55d2hlcmUgYnV0IGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiB0aGUgaW50cmluc2ljIG5hbWUnKTtcblx0fVxuXHR2YXIgcGFydHMgPSBzdHJpbmdUb1BhdGgobmFtZSk7XG5cdHZhciBpbnRyaW5zaWNCYXNlTmFtZSA9IHBhcnRzLmxlbmd0aCA+IDAgPyBwYXJ0c1swXSA6ICcnO1xuXG5cdHZhciBpbnRyaW5zaWMgPSBnZXRCYXNlSW50cmluc2ljKCclJyArIGludHJpbnNpY0Jhc2VOYW1lICsgJyUnLCBhbGxvd01pc3NpbmcpO1xuXHR2YXIgaW50cmluc2ljUmVhbE5hbWUgPSBpbnRyaW5zaWMubmFtZTtcblx0dmFyIHZhbHVlID0gaW50cmluc2ljLnZhbHVlO1xuXHR2YXIgc2tpcEZ1cnRoZXJDYWNoaW5nID0gZmFsc2U7XG5cblx0dmFyIGFsaWFzID0gaW50cmluc2ljLmFsaWFzO1xuXHRpZiAoYWxpYXMpIHtcblx0XHRpbnRyaW5zaWNCYXNlTmFtZSA9IGFsaWFzWzBdO1xuXHRcdCRzcGxpY2VBcHBseShwYXJ0cywgJGNvbmNhdChbMCwgMV0sIGFsaWFzKSk7XG5cdH1cblxuXHRmb3IgKHZhciBpID0gMSwgaXNPd24gPSB0cnVlOyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHR2YXIgcGFydCA9IHBhcnRzW2ldO1xuXHRcdHZhciBmaXJzdCA9ICRzdHJTbGljZShwYXJ0LCAwLCAxKTtcblx0XHR2YXIgbGFzdCA9ICRzdHJTbGljZShwYXJ0LCAtMSk7XG5cdFx0aWYgKFxuXHRcdFx0KFxuXHRcdFx0XHQoZmlyc3QgPT09ICdcIicgfHwgZmlyc3QgPT09IFwiJ1wiIHx8IGZpcnN0ID09PSAnYCcpXG5cdFx0XHRcdHx8IChsYXN0ID09PSAnXCInIHx8IGxhc3QgPT09IFwiJ1wiIHx8IGxhc3QgPT09ICdgJylcblx0XHRcdClcblx0XHRcdCYmIGZpcnN0ICE9PSBsYXN0XG5cdFx0KSB7XG5cdFx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdwcm9wZXJ0eSBuYW1lcyB3aXRoIHF1b3RlcyBtdXN0IGhhdmUgbWF0Y2hpbmcgcXVvdGVzJyk7XG5cdFx0fVxuXHRcdGlmIChwYXJ0ID09PSAnY29uc3RydWN0b3InIHx8ICFpc093bikge1xuXHRcdFx0c2tpcEZ1cnRoZXJDYWNoaW5nID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpbnRyaW5zaWNCYXNlTmFtZSArPSAnLicgKyBwYXJ0O1xuXHRcdGludHJpbnNpY1JlYWxOYW1lID0gJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJSc7XG5cblx0XHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY1JlYWxOYW1lKSkge1xuXHRcdFx0dmFsdWUgPSBJTlRSSU5TSUNTW2ludHJpbnNpY1JlYWxOYW1lXTtcblx0XHR9IGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcblx0XHRcdGlmICghKHBhcnQgaW4gdmFsdWUpKSB7XG5cdFx0XHRcdGlmICghYWxsb3dNaXNzaW5nKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Jhc2UgaW50cmluc2ljIGZvciAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgdGhlIHByb3BlcnR5IGlzIG5vdCBhdmFpbGFibGUuJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZvaWQgdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCRnT1BEICYmIChpICsgMSkgPj0gcGFydHMubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBkZXNjID0gJGdPUEQodmFsdWUsIHBhcnQpO1xuXHRcdFx0XHRpc093biA9ICEhZGVzYztcblxuXHRcdFx0XHQvLyBCeSBjb252ZW50aW9uLCB3aGVuIGEgZGF0YSBwcm9wZXJ0eSBpcyBjb252ZXJ0ZWQgdG8gYW4gYWNjZXNzb3Jcblx0XHRcdFx0Ly8gcHJvcGVydHkgdG8gZW11bGF0ZSBhIGRhdGEgcHJvcGVydHkgdGhhdCBkb2VzIG5vdCBzdWZmZXIgZnJvbVxuXHRcdFx0XHQvLyB0aGUgb3ZlcnJpZGUgbWlzdGFrZSwgdGhhdCBhY2Nlc3NvcidzIGdldHRlciBpcyBtYXJrZWQgd2l0aFxuXHRcdFx0XHQvLyBhbiBgb3JpZ2luYWxWYWx1ZWAgcHJvcGVydHkuIEhlcmUsIHdoZW4gd2UgZGV0ZWN0IHRoaXMsIHdlXG5cdFx0XHRcdC8vIHVwaG9sZCB0aGUgaWxsdXNpb24gYnkgcHJldGVuZGluZyB0byBzZWUgdGhhdCBvcmlnaW5hbCBkYXRhXG5cdFx0XHRcdC8vIHByb3BlcnR5LCBpLmUuLCByZXR1cm5pbmcgdGhlIHZhbHVlIHJhdGhlciB0aGFuIHRoZSBnZXR0ZXJcblx0XHRcdFx0Ly8gaXRzZWxmLlxuXHRcdFx0XHRpZiAoaXNPd24gJiYgJ2dldCcgaW4gZGVzYyAmJiAhKCdvcmlnaW5hbFZhbHVlJyBpbiBkZXNjLmdldCkpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGRlc2MuZ2V0O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlzT3duID0gaGFzT3duKHZhbHVlLCBwYXJ0KTtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGlzT3duICYmICFza2lwRnVydGhlckNhY2hpbmcpIHtcblx0XHRcdFx0SU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHZhbHVlO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTMzNjpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIEdldEludHJpbnNpYyA9IF9fd2VicGFja19yZXF1aXJlX18oNTI4KTtcblxudmFyICRnT1BEID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciUnLCB0cnVlKTtcblxuaWYgKCRnT1BEKSB7XG5cdHRyeSB7XG5cdFx0JGdPUEQoW10sICdsZW5ndGgnKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGdPUERcblx0XHQkZ09QRCA9IG51bGw7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSAkZ09QRDtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzIzOTpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNDk0MCk7XG5cbnZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzID0gZnVuY3Rpb24gaGFzUHJvcGVydHlEZXNjcmlwdG9ycygpIHtcblx0cmV0dXJuICEhJGRlZmluZVByb3BlcnR5O1xufTtcblxuaGFzUHJvcGVydHlEZXNjcmlwdG9ycy5oYXNBcnJheUxlbmd0aERlZmluZUJ1ZyA9IGZ1bmN0aW9uIGhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnKCkge1xuXHQvLyBub2RlIHYwLjYgaGFzIGEgYnVnIHdoZXJlIGFycmF5IGxlbmd0aHMgY2FuIGJlIFNldCBidXQgbm90IERlZmluZWRcblx0aWYgKCEkZGVmaW5lUHJvcGVydHkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHR0cnkge1xuXHRcdHJldHVybiAkZGVmaW5lUHJvcGVydHkoW10sICdsZW5ndGgnLCB7IHZhbHVlOiAxIH0pLmxlbmd0aCAhPT0gMTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIEluIEZpcmVmb3ggNC0yMiwgZGVmaW5pbmcgbGVuZ3RoIG9uIGFuIGFycmF5IHRocm93cyBhbiBleGNlcHRpb24uXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzUHJvcGVydHlEZXNjcmlwdG9ycztcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjg2OTpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB0ZXN0ID0ge1xuXHRmb286IHt9XG59O1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNQcm90bygpIHtcblx0cmV0dXJuIHsgX19wcm90b19fOiB0ZXN0IH0uZm9vID09PSB0ZXN0LmZvbyAmJiAhKHsgX19wcm90b19fOiBudWxsIH0gaW5zdGFuY2VvZiAkT2JqZWN0KTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM1NTg6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBvcmlnU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sO1xudmFyIGhhc1N5bWJvbFNoYW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5MDgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyOTA4OlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyogZXNsaW50IGNvbXBsZXhpdHk6IFsyLCAxOF0sIG1heC1zdGF0ZW1lbnRzOiBbMiwgMzNdICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc1N5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCcpIHsgcmV0dXJuIHRydWU7IH1cblxuXHR2YXIgb2JqID0ge307XG5cdHZhciBzeW0gPSBTeW1ib2woJ3Rlc3QnKTtcblx0dmFyIHN5bU9iaiA9IE9iamVjdChzeW0pO1xuXHRpZiAodHlwZW9mIHN5bSA9PT0gJ3N0cmluZycpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pICE9PSAnW29iamVjdCBTeW1ib2xdJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW1PYmopICE9PSAnW29iamVjdCBTeW1ib2xdJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL29iamVjdC5hc3NpZ24vaXNzdWVzLzE3XG5cdC8vIGlmIChzeW0gaW5zdGFuY2VvZiBTeW1ib2wpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJSZWZsZWN0aW9uL2dldC1vd24tcHJvcGVydHktc3ltYm9scy9pc3N1ZXMvNFxuXHQvLyBpZiAoIShzeW1PYmogaW5zdGFuY2VvZiBTeW1ib2wpKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIGlmICh0eXBlb2YgU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gaWYgKFN0cmluZyhzeW0pICE9PSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltVmFsID0gNDI7XG5cdG9ialtzeW1dID0gc3ltVmFsO1xuXHRmb3IgKHN5bSBpbiBvYmopIHsgcmV0dXJuIGZhbHNlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLXVucmVhY2hhYmxlLWxvb3Bcblx0aWYgKHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1zID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmopO1xuXHRpZiAoc3ltcy5sZW5ndGggIT09IDEgfHwgc3ltc1swXSAhPT0gc3ltKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iaiwgc3ltKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBzeW0pO1xuXHRcdGlmIChkZXNjcmlwdG9yLnZhbHVlICE9PSBzeW1WYWwgfHwgZGVzY3JpcHRvci5lbnVtZXJhYmxlICE9PSB0cnVlKSB7IHJldHVybiBmYWxzZTsgfVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOTEzOlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaGFzU3ltYm9scyA9IF9fd2VicGFja19yZXF1aXJlX18oMjkwOCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzVG9TdHJpbmdUYWdTaGFtcygpIHtcblx0cmV0dXJuIGhhc1N5bWJvbHMoKSAmJiAhIVN5bWJvbC50b1N0cmluZ1RhZztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDg1NTQ6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG52YXIgJGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgYmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oOTEzOCk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGJpbmQuY2FsbChjYWxsLCAkaGFzT3duKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTYxNTpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbmlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTM4Nzpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGhhc1RvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTEzKSgpO1xudmFyIGNhbGxCb3VuZCA9IF9fd2VicGFja19yZXF1aXJlX18oOTgxOCk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcblxudmFyIGlzU3RhbmRhcmRBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuICR0b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxudmFyIGlzTGVnYWN5QXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0aWYgKGlzU3RhbmRhcmRBcmd1bWVudHModmFsdWUpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIHZhbHVlICE9PSBudWxsICYmXG5cdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHQkdG9TdHJpbmcodmFsdWUpICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0JHRvU3RyaW5nKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBpc1N0YW5kYXJkQXJndW1lbnRzKGFyZ3VtZW50cyk7XG59KCkpO1xuXG5pc1N0YW5kYXJkQXJndW1lbnRzLmlzTGVnYWN5QXJndW1lbnRzID0gaXNMZWdhY3lBcmd1bWVudHM7IC8vIGZvciB0ZXN0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMgPyBpc1N0YW5kYXJkQXJndW1lbnRzIDogaXNMZWdhY3lBcmd1bWVudHM7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk2MTc6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciByZWZsZWN0QXBwbHkgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgJiYgUmVmbGVjdCAhPT0gbnVsbCAmJiBSZWZsZWN0LmFwcGx5O1xudmFyIGJhZEFycmF5TGlrZTtcbnZhciBpc0NhbGxhYmxlTWFya2VyO1xuaWYgKHR5cGVvZiByZWZsZWN0QXBwbHkgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuXHR0cnkge1xuXHRcdGJhZEFycmF5TGlrZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2xlbmd0aCcsIHtcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0aHJvdyBpc0NhbGxhYmxlTWFya2VyO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGlzQ2FsbGFibGVNYXJrZXIgPSB7fTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuXHRcdHJlZmxlY3RBcHBseShmdW5jdGlvbiAoKSB7IHRocm93IDQyOyB9LCBudWxsLCBiYWRBcnJheUxpa2UpO1xuXHR9IGNhdGNoIChfKSB7XG5cdFx0aWYgKF8gIT09IGlzQ2FsbGFibGVNYXJrZXIpIHtcblx0XHRcdHJlZmxlY3RBcHBseSA9IG51bGw7XG5cdFx0fVxuXHR9XG59IGVsc2Uge1xuXHRyZWZsZWN0QXBwbHkgPSBudWxsO1xufVxuXG52YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzXFxiLztcbnZhciBpc0VTNkNsYXNzRm4gPSBmdW5jdGlvbiBpc0VTNkNsYXNzRnVuY3Rpb24odmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiBjb25zdHJ1Y3RvclJlZ2V4LnRlc3QoZm5TdHIpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBub3QgYSBmdW5jdGlvblxuXHR9XG59O1xuXG52YXIgdHJ5RnVuY3Rpb25PYmplY3QgPSBmdW5jdGlvbiB0cnlGdW5jdGlvblRvU3RyKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgb2JqZWN0Q2xhc3MgPSAnW29iamVjdCBPYmplY3RdJztcbnZhciBmbkNsYXNzID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbnZhciBnZW5DbGFzcyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG52YXIgZGRhQ2xhc3MgPSAnW29iamVjdCBIVE1MQWxsQ29sbGVjdGlvbl0nOyAvLyBJRSAxMVxudmFyIGRkYUNsYXNzMiA9ICdbb2JqZWN0IEhUTUwgZG9jdW1lbnQuYWxsIGNsYXNzXSc7XG52YXIgZGRhQ2xhc3MzID0gJ1tvYmplY3QgSFRNTENvbGxlY3Rpb25dJzsgLy8gSUUgOS0xMFxudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiAhIVN5bWJvbC50b1N0cmluZ1RhZzsgLy8gYmV0dGVyOiB1c2UgYGhhcy10b3N0cmluZ3RhZ2BcblxudmFyIGlzSUU2OCA9ICEoMCBpbiBbLF0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNwYXJzZS1hcnJheXMsIGNvbW1hLXNwYWNpbmdcblxudmFyIGlzRERBID0gZnVuY3Rpb24gaXNEb2N1bWVudERvdEFsbCgpIHsgcmV0dXJuIGZhbHNlOyB9O1xuaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ29iamVjdCcpIHtcblx0Ly8gRmlyZWZveCAzIGNhbm9uaWNhbGl6ZXMgRERBIHRvIHVuZGVmaW5lZCB3aGVuIGl0J3Mgbm90IGFjY2Vzc2VkIGRpcmVjdGx5XG5cdHZhciBhbGwgPSBkb2N1bWVudC5hbGw7XG5cdGlmICh0b1N0ci5jYWxsKGFsbCkgPT09IHRvU3RyLmNhbGwoZG9jdW1lbnQuYWxsKSkge1xuXHRcdGlzRERBID0gZnVuY3Rpb24gaXNEb2N1bWVudERvdEFsbCh2YWx1ZSkge1xuXHRcdFx0LyogZ2xvYmFscyBkb2N1bWVudDogZmFsc2UgKi9cblx0XHRcdC8vIGluIElFIDYtOCwgdHlwZW9mIGRvY3VtZW50LmFsbCBpcyBcIm9iamVjdFwiIGFuZCBpdCdzIHRydXRoeVxuXHRcdFx0aWYgKChpc0lFNjggfHwgIXZhbHVlKSAmJiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0c3RyID09PSBkZGFDbGFzc1xuXHRcdFx0XHRcdFx0fHwgc3RyID09PSBkZGFDbGFzczJcblx0XHRcdFx0XHRcdHx8IHN0ciA9PT0gZGRhQ2xhc3MzIC8vIG9wZXJhIDEyLjE2XG5cdFx0XHRcdFx0XHR8fCBzdHIgPT09IG9iamVjdENsYXNzIC8vIElFIDYtOFxuXHRcdFx0XHRcdCkgJiYgdmFsdWUoJycpID09IG51bGw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZmxlY3RBcHBseVxuXHQ/IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHtcblx0XHRpZiAoaXNEREEodmFsdWUpKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0aWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0dHJ5IHtcblx0XHRcdHJlZmxlY3RBcHBseSh2YWx1ZSwgbnVsbCwgYmFkQXJyYXlMaWtlKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRpZiAoZSAhPT0gaXNDYWxsYWJsZU1hcmtlcikgeyByZXR1cm4gZmFsc2U7IH1cblx0XHR9XG5cdFx0cmV0dXJuICFpc0VTNkNsYXNzRm4odmFsdWUpICYmIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTtcblx0fVxuXHQ6IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHtcblx0XHRpZiAoaXNEREEodmFsdWUpKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0aWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0aWYgKGhhc1RvU3RyaW5nVGFnKSB7IHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7IH1cblx0XHRpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHR2YXIgc3RyQ2xhc3MgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0XHRpZiAoc3RyQ2xhc3MgIT09IGZuQ2xhc3MgJiYgc3RyQ2xhc3MgIT09IGdlbkNsYXNzICYmICEoL15cXFtvYmplY3QgSFRNTC8pLnRlc3Qoc3RyQ2xhc3MpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7XG5cdH07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDI2MjU6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciBpc0ZuUmVnZXggPSAvXlxccyooPzpmdW5jdGlvbik/XFwqLztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oMTkxMykoKTtcbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBnZXRHZW5lcmF0b3JGdW5jID0gZnVuY3Rpb24gKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dHJ5IHtcblx0XHRyZXR1cm4gRnVuY3Rpb24oJ3JldHVybiBmdW5jdGlvbiooKSB7fScpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0fVxufTtcbnZhciBHZW5lcmF0b3JGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0dlbmVyYXRvckZ1bmN0aW9uKGZuKSB7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKGlzRm5SZWdleC50ZXN0KGZuVG9TdHIuY2FsbChmbikpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZykge1xuXHRcdHZhciBzdHIgPSB0b1N0ci5jYWxsKGZuKTtcblx0XHRyZXR1cm4gc3RyID09PSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xuXHR9XG5cdGlmICghZ2V0UHJvdG8pIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKHR5cGVvZiBHZW5lcmF0b3JGdW5jdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHR2YXIgZ2VuZXJhdG9yRnVuYyA9IGdldEdlbmVyYXRvckZ1bmMoKTtcblx0XHRHZW5lcmF0b3JGdW5jdGlvbiA9IGdlbmVyYXRvckZ1bmMgPyBnZXRQcm90byhnZW5lcmF0b3JGdW5jKSA6IGZhbHNlO1xuXHR9XG5cdHJldHVybiBnZXRQcm90byhmbikgPT09IEdlbmVyYXRvckZ1bmN0aW9uO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODAwNjpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1udW1iZXIuaXNuYW4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzgzODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGNhbGxCaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDk4KTtcbnZhciBkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4NTcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwMDYpO1xudmFyIGdldFBvbHlmaWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTkxKTtcbnZhciBzaGltID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjQxKTtcblxudmFyIHBvbHlmaWxsID0gY2FsbEJpbmQoZ2V0UG9seWZpbGwoKSwgTnVtYmVyKTtcblxuLyogaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW51bWJlci5pc25hbiAqL1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxNTkxOlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaW1wbGVtZW50YXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwMDYpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRpZiAoTnVtYmVyLmlzTmFOICYmIE51bWJlci5pc05hTihOYU4pICYmICFOdW1iZXIuaXNOYU4oJ2EnKSkge1xuXHRcdHJldHVybiBOdW1iZXIuaXNOYU47XG5cdH1cblx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTY0MTpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGRlZmluZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTg1Nyk7XG52YXIgZ2V0UG9seWZpbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1OTEpO1xuXG4vKiBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtbnVtYmVyLmlzbmFuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbU51bWJlcklzTmFOKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoTnVtYmVyLCB7IGlzTmFOOiBwb2x5ZmlsbCB9LCB7XG5cdFx0aXNOYU46IGZ1bmN0aW9uIHRlc3RJc05hTigpIHtcblx0XHRcdHJldHVybiBOdW1iZXIuaXNOYU4gIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDU5NDM6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB3aGljaFR5cGVkQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3MzApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWx1ZSkge1xuXHRyZXR1cm4gISF3aGljaFR5cGVkQXJyYXkodmFsdWUpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjM3Mjpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBudW1iZXJJc05hTiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpcyhhLCBiKSB7XG5cdGlmIChhID09PSAwICYmIGIgPT09IDApIHtcblx0XHRyZXR1cm4gMSAvIGEgPT09IDEgLyBiO1xuXHR9XG5cdGlmIChhID09PSBiKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKG51bWJlcklzTmFOKGEpICYmIG51bWJlcklzTmFOKGIpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1OTY4OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODU3KTtcbnZhciBjYWxsQmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oODQ5OCk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjM3Mik7XG52YXIgZ2V0UG9seWZpbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5MzcpO1xudmFyIHNoaW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwODcpO1xuXG52YXIgcG9seWZpbGwgPSBjYWxsQmluZChnZXRQb2x5ZmlsbCgpLCBPYmplY3QpO1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOTM3OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaW1wbGVtZW50YXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzNzIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC5pcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC5pcyA6IGltcGxlbWVudGF0aW9uO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTA4Nzpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGdldFBvbHlmaWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTM3KTtcbnZhciBkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4NTcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1PYmplY3RJcygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE9iamVjdCwgeyBpczogcG9seWZpbGwgfSwge1xuXHRcdGlzOiBmdW5jdGlvbiB0ZXN0T2JqZWN0SXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmlzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4MTYwOlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIga2V5c1NoaW07XG5pZiAoIU9iamVjdC5rZXlzKSB7XG5cdC8vIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG5cdHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXHR2YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXHR2YXIgaXNBcmdzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NjgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGdsb2JhbC1yZXF1aXJlXG5cdHZhciBpc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXHR2YXIgaGFzRG9udEVudW1CdWcgPSAhaXNFbnVtZXJhYmxlLmNhbGwoeyB0b1N0cmluZzogbnVsbCB9LCAndG9TdHJpbmcnKTtcblx0dmFyIGhhc1Byb3RvRW51bUJ1ZyA9IGlzRW51bWVyYWJsZS5jYWxsKGZ1bmN0aW9uICgpIHt9LCAncHJvdG90eXBlJyk7XG5cdHZhciBkb250RW51bXMgPSBbXG5cdFx0J3RvU3RyaW5nJyxcblx0XHQndG9Mb2NhbGVTdHJpbmcnLFxuXHRcdCd2YWx1ZU9mJyxcblx0XHQnaGFzT3duUHJvcGVydHknLFxuXHRcdCdpc1Byb3RvdHlwZU9mJyxcblx0XHQncHJvcGVydHlJc0VudW1lcmFibGUnLFxuXHRcdCdjb25zdHJ1Y3Rvcidcblx0XTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlID0gZnVuY3Rpb24gKG8pIHtcblx0XHR2YXIgY3RvciA9IG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIGN0b3IgJiYgY3Rvci5wcm90b3R5cGUgPT09IG87XG5cdH07XG5cdHZhciBleGNsdWRlZEtleXMgPSB7XG5cdFx0JGFwcGxpY2F0aW9uQ2FjaGU6IHRydWUsXG5cdFx0JGNvbnNvbGU6IHRydWUsXG5cdFx0JGV4dGVybmFsOiB0cnVlLFxuXHRcdCRmcmFtZTogdHJ1ZSxcblx0XHQkZnJhbWVFbGVtZW50OiB0cnVlLFxuXHRcdCRmcmFtZXM6IHRydWUsXG5cdFx0JGlubmVySGVpZ2h0OiB0cnVlLFxuXHRcdCRpbm5lcldpZHRoOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5jaGFuZ2U6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmVycm9yOiB0cnVlLFxuXHRcdCRvdXRlckhlaWdodDogdHJ1ZSxcblx0XHQkb3V0ZXJXaWR0aDogdHJ1ZSxcblx0XHQkcGFnZVhPZmZzZXQ6IHRydWUsXG5cdFx0JHBhZ2VZT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYXJlbnQ6IHRydWUsXG5cdFx0JHNjcm9sbExlZnQ6IHRydWUsXG5cdFx0JHNjcm9sbFRvcDogdHJ1ZSxcblx0XHQkc2Nyb2xsWDogdHJ1ZSxcblx0XHQkc2Nyb2xsWTogdHJ1ZSxcblx0XHQkc2VsZjogdHJ1ZSxcblx0XHQkd2Via2l0SW5kZXhlZERCOiB0cnVlLFxuXHRcdCR3ZWJraXRTdG9yYWdlSW5mbzogdHJ1ZSxcblx0XHQkd2luZG93OiB0cnVlXG5cdH07XG5cdHZhciBoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcgPSAoZnVuY3Rpb24gKCkge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm9yICh2YXIgayBpbiB3aW5kb3cpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICghZXhjbHVkZWRLZXlzWyckJyArIGtdICYmIGhhcy5jYWxsKHdpbmRvdywgaykgJiYgd2luZG93W2tdICE9PSBudWxsICYmIHR5cGVvZiB3aW5kb3dba10gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKHdpbmRvd1trXSk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0oKSk7XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kgPSBmdW5jdGlvbiAobykge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1Zykge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH1cblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0a2V5c1NoaW0gPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuXHRcdHZhciBpc09iamVjdCA9IG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jztcblx0XHR2YXIgaXNGdW5jdGlvbiA9IHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0XHR2YXIgaXNBcmd1bWVudHMgPSBpc0FyZ3Mob2JqZWN0KTtcblx0XHR2YXIgaXNTdHJpbmcgPSBpc09iamVjdCAmJiB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuXHRcdHZhciB0aGVLZXlzID0gW107XG5cblx0XHRpZiAoIWlzT2JqZWN0ICYmICFpc0Z1bmN0aW9uICYmICFpc0FyZ3VtZW50cykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdCcpO1xuXHRcdH1cblxuXHRcdHZhciBza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGdW5jdGlvbjtcblx0XHRpZiAoaXNTdHJpbmcgJiYgb2JqZWN0Lmxlbmd0aCA+IDAgJiYgIWhhcy5jYWxsKG9iamVjdCwgMCkpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChpc0FyZ3VtZW50cyAmJiBvYmplY3QubGVuZ3RoID4gMCkge1xuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBvYmplY3QubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhqKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG5cdFx0XHRcdGlmICghKHNraXBQcm90byAmJiBuYW1lID09PSAncHJvdG90eXBlJykgJiYgaGFzLmNhbGwob2JqZWN0LCBuYW1lKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcobmFtZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGhhc0RvbnRFbnVtQnVnKSB7XG5cdFx0XHR2YXIgc2tpcENvbnN0cnVjdG9yID0gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5KG9iamVjdCk7XG5cblx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgZG9udEVudW1zLmxlbmd0aDsgKytrKSB7XG5cdFx0XHRcdGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bXNba10gPT09ICdjb25zdHJ1Y3RvcicpICYmIGhhcy5jYWxsKG9iamVjdCwgZG9udEVudW1zW2tdKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChkb250RW51bXNba10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGVLZXlzO1xuXHR9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTIyODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGlzQXJncyA9IF9fd2VicGFja19yZXF1aXJlX18oOTY4KTtcblxudmFyIG9yaWdLZXlzID0gT2JqZWN0LmtleXM7XG52YXIga2V5c1NoaW0gPSBvcmlnS2V5cyA/IGZ1bmN0aW9uIGtleXMobykgeyByZXR1cm4gb3JpZ0tleXMobyk7IH0gOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDgxNjApO1xuXG52YXIgb3JpZ2luYWxLZXlzID0gT2JqZWN0LmtleXM7XG5cbmtleXNTaGltLnNoaW0gPSBmdW5jdGlvbiBzaGltT2JqZWN0S2V5cygpIHtcblx0aWYgKE9iamVjdC5rZXlzKSB7XG5cdFx0dmFyIGtleXNXb3Jrc1dpdGhBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gU2FmYXJpIDUuMCBidWdcblx0XHRcdHZhciBhcmdzID0gT2JqZWN0LmtleXMoYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiBhcmdzICYmIGFyZ3MubGVuZ3RoID09PSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdH0oMSwgMikpO1xuXHRcdGlmICgha2V5c1dvcmtzV2l0aEFyZ3VtZW50cykge1xuXHRcdFx0T2JqZWN0LmtleXMgPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuXHRcdFx0XHRpZiAoaXNBcmdzKG9iamVjdCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKHNsaWNlLmNhbGwob2JqZWN0KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhvYmplY3QpO1xuXHRcdFx0fTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0T2JqZWN0LmtleXMgPSBrZXlzU2hpbTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMgfHwga2V5c1NoaW07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5Njg6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0dmFyIGlzQXJncyA9IHN0ciA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdGlmICghaXNBcmdzKSB7XG5cdFx0aXNBcmdzID0gc3RyICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0XHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0XHR0b1N0ci5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGlzQXJncztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk5MDc6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG4vLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2MTA4OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgR2V0SW50cmluc2ljID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MjgpO1xudmFyIGRlZmluZSA9IF9fd2VicGFja19yZXF1aXJlX18oNjg2KTtcbnZhciBoYXNEZXNjcmlwdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oNzIzOSkoKTtcbnZhciBnT1BEID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MzM2KTtcblxudmFyICRUeXBlRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0NjgpO1xudmFyICRmbG9vciA9IEdldEludHJpbnNpYygnJU1hdGguZmxvb3IlJyk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldEZ1bmN0aW9uTGVuZ3RoKGZuLCBsZW5ndGgpIHtcblx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgZm5gIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cdH1cblx0aWYgKHR5cGVvZiBsZW5ndGggIT09ICdudW1iZXInIHx8IGxlbmd0aCA8IDAgfHwgbGVuZ3RoID4gMHhGRkZGRkZGRiB8fCAkZmxvb3IobGVuZ3RoKSAhPT0gbGVuZ3RoKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BsZW5ndGhgIG11c3QgYmUgYSBwb3NpdGl2ZSAzMi1iaXQgaW50ZWdlcicpO1xuXHR9XG5cblx0dmFyIGxvb3NlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgISFhcmd1bWVudHNbMl07XG5cblx0dmFyIGZ1bmN0aW9uTGVuZ3RoSXNDb25maWd1cmFibGUgPSB0cnVlO1xuXHR2YXIgZnVuY3Rpb25MZW5ndGhJc1dyaXRhYmxlID0gdHJ1ZTtcblx0aWYgKCdsZW5ndGgnIGluIGZuICYmIGdPUEQpIHtcblx0XHR2YXIgZGVzYyA9IGdPUEQoZm4sICdsZW5ndGgnKTtcblx0XHRpZiAoZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUpIHtcblx0XHRcdGZ1bmN0aW9uTGVuZ3RoSXNDb25maWd1cmFibGUgPSBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKGRlc2MgJiYgIWRlc2Mud3JpdGFibGUpIHtcblx0XHRcdGZ1bmN0aW9uTGVuZ3RoSXNXcml0YWJsZSA9IGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdGlmIChmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlIHx8IGZ1bmN0aW9uTGVuZ3RoSXNXcml0YWJsZSB8fCAhbG9vc2UpIHtcblx0XHRpZiAoaGFzRGVzY3JpcHRvcnMpIHtcblx0XHRcdGRlZmluZSgvKiogQHR5cGUge1BhcmFtZXRlcnM8ZGVmaW5lPlswXX0gKi8gKGZuKSwgJ2xlbmd0aCcsIGxlbmd0aCwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlZmluZSgvKiogQHR5cGUge1BhcmFtZXRlcnM8ZGVmaW5lPlswXX0gKi8gKGZuKSwgJ2xlbmd0aCcsIGxlbmd0aCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmbjtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDIxMjU6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQmFzZVNlcnZpY2U6ICgpID0+ICgvKiBiaW5kaW5nICovIEJhc2VTZXJ2aWNlKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1MDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHZzY29kZV9sYW5ndWFnZXNlcnZlcl9wcm90b2NvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKHZzY29kZV9sYW5ndWFnZXNlcnZlcl9wcm90b2NvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNzc3MCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3RleHRkb2N1bWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MDQxKTtcbmZ1bmN0aW9uIF9kZWZpbmVfcHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cblxuXG5cbmNsYXNzIEJhc2VTZXJ2aWNlIHtcbiAgICBhZGREb2N1bWVudChkb2N1bWVudCkge1xuICAgICAgICB0aGlzLmRvY3VtZW50c1tkb2N1bWVudC51cmldID0gdnNjb2RlX2xhbmd1YWdlc2VydmVyX3RleHRkb2N1bWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLyogLlRleHREb2N1bWVudCAqLyAuVi5jcmVhdGUoZG9jdW1lbnQudXJpLCBkb2N1bWVudC5sYW5ndWFnZUlkLCBkb2N1bWVudC52ZXJzaW9uLCBkb2N1bWVudC50ZXh0KTtcbiAgICB9XG4gICAgZ2V0RG9jdW1lbnQodXJpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50c1t1cmldO1xuICAgIH1cbiAgICByZW1vdmVEb2N1bWVudChkb2N1bWVudCkge1xuICAgICAgICBkZWxldGUgdGhpcy5kb2N1bWVudHNbZG9jdW1lbnQudXJpXTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc1tkb2N1bWVudC51cmldKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5vcHRpb25zW2RvY3VtZW50LnVyaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVuYW1lRG9jdW1lbnQoZG9jdW1lbnQsIG5ld0RvY3VtZW50VXJpKSB7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRzW25ld0RvY3VtZW50VXJpXSA9IHRoaXMuZG9jdW1lbnRzW2RvY3VtZW50LnVyaV07XG4gICAgICAgIHRoaXMub3B0aW9uc1tuZXdEb2N1bWVudFVyaV0gPSB0aGlzLm9wdGlvbnNbZG9jdW1lbnQudXJpXTtcbiAgICAgICAgdGhpcy5yZW1vdmVEb2N1bWVudChkb2N1bWVudCk7XG4gICAgfVxuICAgIGdldERvY3VtZW50VmFsdWUodXJpKSB7XG4gICAgICAgIHZhciBfdGhpc19nZXREb2N1bWVudDtcbiAgICAgICAgcmV0dXJuIChfdGhpc19nZXREb2N1bWVudCA9IHRoaXMuZ2V0RG9jdW1lbnQodXJpKSkgPT09IG51bGwgfHwgX3RoaXNfZ2V0RG9jdW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzX2dldERvY3VtZW50LmdldFRleHQoKTtcbiAgICB9XG4gICAgc2V0VmFsdWUoaWRlbnRpZmllciwgdmFsdWUpIHtcbiAgICAgICAgbGV0IGRvY3VtZW50ID0gdGhpcy5nZXREb2N1bWVudChpZGVudGlmaWVyLnVyaSk7XG4gICAgICAgIGlmIChkb2N1bWVudCkge1xuICAgICAgICAgICAgZG9jdW1lbnQgPSB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdGV4dGRvY3VtZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18vKiAuVGV4dERvY3VtZW50ICovIC5WLmNyZWF0ZShkb2N1bWVudC51cmksIGRvY3VtZW50Lmxhbmd1YWdlSWQsIGRvY3VtZW50LnZlcnNpb24sIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRzW2RvY3VtZW50LnVyaV0gPSBkb2N1bWVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRHbG9iYWxPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxPcHRpb25zID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge307XG4gICAgfVxuICAgIHNldFdvcmtzcGFjZSh3b3Jrc3BhY2VVcmkpIHtcbiAgICAgICAgdGhpcy53b3Jrc3BhY2VVcmkgPSB3b3Jrc3BhY2VVcmk7XG4gICAgfVxuICAgIHNldE9wdGlvbnMoZG9jdW1lbnRVcmksIG9wdGlvbnMsIG1lcmdlID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zW2RvY3VtZW50VXJpXSA9IG1lcmdlID8gKDAsX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18vKiAubWVyZ2VPYmplY3RzICovIC5yTCkob3B0aW9ucywgdGhpcy5vcHRpb25zW2RvY3VtZW50VXJpXSkgOiBvcHRpb25zO1xuICAgIH1cbiAgICBnZXRPcHRpb24oZG9jdW1lbnRVcmksIG9wdGlvbk5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc1tkb2N1bWVudFVyaV0gJiYgdGhpcy5vcHRpb25zW2RvY3VtZW50VXJpXVtvcHRpb25OYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1tkb2N1bWVudFVyaV1bb3B0aW9uTmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxPcHRpb25zW29wdGlvbk5hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFwcGx5RGVsdGFzKGlkZW50aWZpZXIsIGRlbHRhcykge1xuICAgICAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLmdldERvY3VtZW50KGlkZW50aWZpZXIudXJpKTtcbiAgICAgICAgaWYgKGRvY3VtZW50KSB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdGV4dGRvY3VtZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18vKiAuVGV4dERvY3VtZW50ICovIC5WLnVwZGF0ZShkb2N1bWVudCwgZGVsdGFzLCBpZGVudGlmaWVyLnZlcnNpb24pO1xuICAgIH1cbiAgICBhc3luYyBkb0NvbXBsZXRlKGRvY3VtZW50LCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgZG9JbmxpbmVDb21wbGV0ZShkb2N1bWVudCwgcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGFzeW5jIGRvSG92ZXIoZG9jdW1lbnQsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBhc3luYyBkb1Jlc29sdmUoaXRlbSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgZG9WYWxpZGF0aW9uKGRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZm9ybWF0KGRvY3VtZW50LCByYW5nZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFtdKTtcbiAgICB9XG4gICAgYXN5bmMgcHJvdmlkZVNpZ25hdHVyZUhlbHAoZG9jdW1lbnQsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBhc3luYyBmaW5kRG9jdW1lbnRIaWdobGlnaHRzKGRvY3VtZW50LCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGdldCBvcHRpb25zVG9GaWx0ZXJEaWFnbm9zdGljcygpIHtcbiAgICAgICAgdmFyIF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvSWdub3JlLCBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb1RyZWF0QXNXYXJuaW5nLCBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb1RyZWF0QXNJbmZvLCBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb0lnbm9yZSwgX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9UcmVhdEFzV2FybmluZywgX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9UcmVhdEFzSW5mbztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVycm9yQ29kZXNUb0lnbm9yZTogKF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvSWdub3JlID0gdGhpcy5nbG9iYWxPcHRpb25zLmVycm9yQ29kZXNUb0lnbm9yZSkgIT09IG51bGwgJiYgX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9JZ25vcmUgIT09IHZvaWQgMCA/IF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvSWdub3JlIDogW10sXG4gICAgICAgICAgICBlcnJvckNvZGVzVG9UcmVhdEFzV2FybmluZzogKF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvVHJlYXRBc1dhcm5pbmcgPSB0aGlzLmdsb2JhbE9wdGlvbnMuZXJyb3JDb2Rlc1RvVHJlYXRBc1dhcm5pbmcpICE9PSBudWxsICYmIF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvVHJlYXRBc1dhcm5pbmcgIT09IHZvaWQgMCA/IF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvVHJlYXRBc1dhcm5pbmcgOiBbXSxcbiAgICAgICAgICAgIGVycm9yQ29kZXNUb1RyZWF0QXNJbmZvOiAoX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9UcmVhdEFzSW5mbyA9IHRoaXMuZ2xvYmFsT3B0aW9ucy5lcnJvckNvZGVzVG9UcmVhdEFzSW5mbykgIT09IG51bGwgJiYgX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9UcmVhdEFzSW5mbyAhPT0gdm9pZCAwID8gX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9UcmVhdEFzSW5mbyA6IFtdLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlc1RvSWdub3JlOiAoX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9JZ25vcmUgPSB0aGlzLmdsb2JhbE9wdGlvbnMuZXJyb3JNZXNzYWdlc1RvSWdub3JlKSAhPT0gbnVsbCAmJiBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb0lnbm9yZSAhPT0gdm9pZCAwID8gX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9JZ25vcmUgOiBbXSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZXNUb1RyZWF0QXNXYXJuaW5nOiAoX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9UcmVhdEFzV2FybmluZyA9IHRoaXMuZ2xvYmFsT3B0aW9ucy5lcnJvck1lc3NhZ2VzVG9UcmVhdEFzV2FybmluZykgIT09IG51bGwgJiYgX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9UcmVhdEFzV2FybmluZyAhPT0gdm9pZCAwID8gX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9UcmVhdEFzV2FybmluZyA6IFtdLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlc1RvVHJlYXRBc0luZm86IChfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb1RyZWF0QXNJbmZvID0gdGhpcy5nbG9iYWxPcHRpb25zLmVycm9yTWVzc2FnZXNUb1RyZWF0QXNJbmZvKSAhPT0gbnVsbCAmJiBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb1RyZWF0QXNJbmZvICE9PSB2b2lkIDAgPyBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb1RyZWF0QXNJbmZvIDogW11cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0U2VtYW50aWNUb2tlbnMoZG9jdW1lbnQsIHJhbmdlKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgY2xvc2VDb25uZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGdldENvZGVBY3Rpb25zKGRvY3VtZW50LCByYW5nZSwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICBleGVjdXRlQ29tbWFuZChjb21tYW5kLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIHNlbmRBcHBsaWVkUmVzdWx0KHJlc3VsdCwgY2FsbGJhY2tJZCkge31cbiAgICBzZW5kUmVxdWVzdChuYW1lLCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIHNlbmRSZXNwb25zZShjYWxsYmFja0lkLCBhcmdzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3RydWN0b3IobW9kZSwgd29ya3NwYWNlVXJpKXtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcInNlcnZpY2VOYW1lXCIsIHZvaWQgMCk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJtb2RlXCIsIHZvaWQgMCk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJkb2N1bWVudHNcIiwge30pO1xuICAgICAgICBfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwib3B0aW9uc1wiLCB7fSk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJnbG9iYWxPcHRpb25zXCIsIHt9KTtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcInNlcnZpY2VEYXRhXCIsIHZvaWQgMCk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJzZXJ2aWNlQ2FwYWJpbGl0aWVzXCIsIHt9KTtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcIndvcmtzcGFjZVVyaVwiLCB2b2lkIDApO1xuICAgICAgICBfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwiY2xpZW50Q2FwYWJpbGl0aWVzXCIsIHtcbiAgICAgICAgICAgIHRleHREb2N1bWVudDoge1xuICAgICAgICAgICAgICAgIGRpYWdub3N0aWM6IHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRlZERvY3VtZW50U3VwcG9ydDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcHVibGlzaERpYWdub3N0aWNzOiB7XG4gICAgICAgICAgICAgICAgICAgIHJlbGF0ZWRJbmZvcm1hdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgdmVyc2lvblN1cHBvcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB0YWdTdXBwb3J0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVNldDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZzY29kZV9sYW5ndWFnZXNlcnZlcl9wcm90b2NvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkRpYWdub3N0aWNUYWcuVW5uZWNlc3NhcnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3Byb3RvY29sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRGlhZ25vc3RpY1RhZy5EZXByZWNhdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRGb3JtYXQ6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdtYXJrZG93bicsXG4gICAgICAgICAgICAgICAgICAgICAgICAncGxhaW50ZXh0J1xuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzeW5jaHJvbml6YXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgd2lsbFNhdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkaWRTYXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgd2lsbFNhdmVXYWl0VW50aWw6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmb3JtYXR0aW5nOiB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGlvbkl0ZW06IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNuaXBwZXRTdXBwb3J0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWl0Q2hhcmFjdGVyc1N1cHBvcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnRhdGlvbkZvcm1hdDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtYXJrZG93bicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3BsYWludGV4dCdcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXByZWNhdGVkU3VwcG9ydDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVzZWxlY3RTdXBwb3J0OiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0U3VwcG9ydDogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNpZ25hdHVyZUhlbHA6IHtcbiAgICAgICAgICAgICAgICAgICAgc2lnbmF0dXJlSW5mb3JtYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50YXRpb25Gb3JtYXQ6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWFya2Rvd24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwbGFpbnRleHQnXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlUGFyYW1ldGVyU3VwcG9ydDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkb2N1bWVudEhpZ2hsaWdodDoge1xuICAgICAgICAgICAgICAgICAgICBkeW5hbWljUmVnaXN0cmF0aW9uOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZW1hbnRpY1Rva2Vuczoge1xuICAgICAgICAgICAgICAgICAgICBtdWx0aWxpbmVUb2tlblN1cHBvcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBvdmVybGFwcGluZ1Rva2VuU3VwcG9ydDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHRva2VuVHlwZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICB0b2tlbk1vZGlmaWVyczogW10sXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicmVsYXRpdmVcIlxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVsbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGF1Z21lbnRzU3ludGF4VG9rZW5zOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb2RlQWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlubGluZUNvbXBsZXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3aW5kb3c6IHtcbiAgICAgICAgICAgICAgICBzaG93RG9jdW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydDogdHJ1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3b3Jrc3BhY2U6IHtcbiAgICAgICAgICAgICAgICBkaWRDaGFuZ2VDb25maWd1cmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGV4ZWN1dGVDb21tYW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFwcGx5RWRpdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3b3Jrc3BhY2VFZGl0OiB7XG4gICAgICAgICAgICAgICAgICAgIGZhaWx1cmVIYW5kbGluZzogXCJhYm9ydFwiLFxuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVzTGluZUVuZGluZ3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudENoYW5nZXM6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgICAgICAgdGhpcy53b3Jrc3BhY2VVcmkgPSB3b3Jrc3BhY2VVcmk7XG4gICAgICAgIHRoaXMuc2VydmljZU5hbWUgPSBcIkJhc2VTZXJ2aWNlXCI7XG4gICAgICAgIHRoaXMuc2VydmljZURhdGEgPSB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwiQmFzZVNlcnZpY2VcIixcbiAgICAgICAgICAgIG1vZGVzOiBcIlwiLFxuICAgICAgICAgICAgbW9kdWxlOiAoKT0+e31cbiAgICAgICAgfTtcbiAgICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ4NDk6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cbi8qXG4gIHBocC5qcyAwLjEuMCA8aHR0cDovL3BocGpzLmhlcnR6ZW4uY29tLz5cbiAgQ29weXJpZ2h0IChjKSAyMDEzIE5pa2xhcyB2b24gSGVydHplblxuXG4gIFJlbGVhc2VkIHVuZGVyIE1JVCBMaWNlbnNlXG5cbiAgVGhpcyBmaWxlIGNvbnRhaW5zOlxuICAtIFt2YXIgUEhQID0ge0NvbnN0YW50czp7fX07XVxuICAtIHNyYy9tb2R1bGVzL3Rva2VuaXplci9jb25zdGFudHMuanNcbiAgLSBzcmMvcGFyc2VyL2xleGVyLmpzXG4gIC0gc3JjL3BhcnNlci9wYXJzZXIuanNcbiAgLSBzcmMvcGFyc2VyL3l5bi5qc1xuICAtIHNyYy9wYXJzZXIveXluX3N0bXQuanNcbiAgLSBzcmMvcGFyc2VyL3l5bl9leHByLmpzXG4gIC0gc3JjL3BhcnNlci95eW5fc2NhbGFyLmpzXG4qLyB2YXIgUEhQID0ge1xuICAgIENvbnN0YW50czoge31cbn07XG5QSFAuQ29uc3RhbnRzLlRfVEhST1cgPSAzMTc7XG5QSFAuQ29uc3RhbnRzLlRfSU5DTFVERSA9IDI3MjtcblBIUC5Db25zdGFudHMuVF9JTkNMVURFX09OQ0UgPSAyNzM7XG5QSFAuQ29uc3RhbnRzLlRfRVZBTCA9IDI3NDtcblBIUC5Db25zdGFudHMuVF9SRVFVSVJFID0gMjc1O1xuUEhQLkNvbnN0YW50cy5UX1JFUVVJUkVfT05DRSA9IDI3NjtcblBIUC5Db25zdGFudHMuVF9MT0dJQ0FMX09SID0gMjc3O1xuUEhQLkNvbnN0YW50cy5UX0xPR0lDQUxfWE9SID0gMjc4O1xuUEhQLkNvbnN0YW50cy5UX0xPR0lDQUxfQU5EID0gMjc5O1xuUEhQLkNvbnN0YW50cy5UX1BSSU5UID0gMjgwO1xuUEhQLkNvbnN0YW50cy5UX1lJRUxEID0gMjgxO1xuUEhQLkNvbnN0YW50cy5UX0RPVUJMRV9BUlJPVyA9IDM4NjtcblBIUC5Db25zdGFudHMuVF9ZSUVMRF9GUk9NID0gMjgyO1xuUEhQLkNvbnN0YW50cy5UX1BMVVNfRVFVQUwgPSAzNTI7XG5QSFAuQ29uc3RhbnRzLlRfTUlOVVNfRVFVQUwgPSAzNTM7XG5QSFAuQ29uc3RhbnRzLlRfTVVMX0VRVUFMID0gMzU0O1xuUEhQLkNvbnN0YW50cy5UX0RJVl9FUVVBTCA9IDM1NTtcblBIUC5Db25zdGFudHMuVF9DT05DQVRfRVFVQUwgPSAzNTY7XG5QSFAuQ29uc3RhbnRzLlRfTU9EX0VRVUFMID0gMzU3O1xuUEhQLkNvbnN0YW50cy5UX0FORF9FUVVBTCA9IDM1ODtcblBIUC5Db25zdGFudHMuVF9PUl9FUVVBTCA9IDM1OTtcblBIUC5Db25zdGFudHMuVF9YT1JfRVFVQUwgPSAzNjA7XG5QSFAuQ29uc3RhbnRzLlRfU0xfRVFVQUwgPSAzNjE7XG5QSFAuQ29uc3RhbnRzLlRfU1JfRVFVQUwgPSAzNjI7XG5QSFAuQ29uc3RhbnRzLlRfUE9XX0VRVUFMID0gNDAyO1xuUEhQLkNvbnN0YW50cy5UX0NPQUxFU0NFX0VRVUFMID0gMzYzO1xuUEhQLkNvbnN0YW50cy5UX0NPQUxFU0NFID0gNDAwO1xuUEhQLkNvbnN0YW50cy5UX0JPT0xFQU5fT1IgPSAzNjQ7XG5QSFAuQ29uc3RhbnRzLlRfQk9PTEVBTl9BTkQgPSAzNjU7XG5QSFAuQ29uc3RhbnRzLlRfQU1QRVJTQU5EX05PVF9GT0xMT1dFRF9CWV9WQVJfT1JfVkFSQVJHID0gNDA0O1xuUEhQLkNvbnN0YW50cy5UX0FNUEVSU0FORF9GT0xMT1dFRF9CWV9WQVJfT1JfVkFSQVJHID0gNDAzO1xuUEhQLkNvbnN0YW50cy5UX0lTX0VRVUFMID0gMzY2O1xuUEhQLkNvbnN0YW50cy5UX0lTX05PVF9FUVVBTCA9IDM2NztcblBIUC5Db25zdGFudHMuVF9JU19JREVOVElDQUwgPSAzNjg7XG5QSFAuQ29uc3RhbnRzLlRfSVNfTk9UX0lERU5USUNBTCA9IDM2OTtcblBIUC5Db25zdGFudHMuVF9TUEFDRVNISVAgPSAzNzI7XG5QSFAuQ29uc3RhbnRzLlRfSVNfU01BTExFUl9PUl9FUVVBTCA9IDM3MDtcblBIUC5Db25zdGFudHMuVF9JU19HUkVBVEVSX09SX0VRVUFMID0gMzcxO1xuUEhQLkNvbnN0YW50cy5UX1NMID0gMzczO1xuUEhQLkNvbnN0YW50cy5UX1NSID0gMzc0O1xuUEhQLkNvbnN0YW50cy5UX0lOU1RBTkNFT0YgPSAyODM7XG5QSFAuQ29uc3RhbnRzLlRfSU5DID0gMzc1O1xuUEhQLkNvbnN0YW50cy5UX0RFQyA9IDM3NjtcblBIUC5Db25zdGFudHMuVF9JTlRfQ0FTVCA9IDM3NztcblBIUC5Db25zdGFudHMuVF9ET1VCTEVfQ0FTVCA9IDM3ODtcblBIUC5Db25zdGFudHMuVF9TVFJJTkdfQ0FTVCA9IDM3OTtcblBIUC5Db25zdGFudHMuVF9BUlJBWV9DQVNUID0gMzgwO1xuUEhQLkNvbnN0YW50cy5UX09CSkVDVF9DQVNUID0gMzgxO1xuUEhQLkNvbnN0YW50cy5UX0JPT0xfQ0FTVCA9IDM4MjtcblBIUC5Db25zdGFudHMuVF9VTlNFVF9DQVNUID0gMzgzO1xuUEhQLkNvbnN0YW50cy5UX1BPVyA9IDQwMTtcblBIUC5Db25zdGFudHMuVF9ORVcgPSAyODQ7XG5QSFAuQ29uc3RhbnRzLlRfQ0xPTkUgPSAyODU7XG5QSFAuQ29uc3RhbnRzLlRfRVhJVCA9IDI4NjtcblBIUC5Db25zdGFudHMuVF9JRiA9IDI4NztcblBIUC5Db25zdGFudHMuVF9FTFNFSUYgPSAyODg7XG5QSFAuQ29uc3RhbnRzLlRfRUxTRSA9IDI4OTtcblBIUC5Db25zdGFudHMuVF9FTkRJRiA9IDI5MDtcblBIUC5Db25zdGFudHMuVF9MTlVNQkVSID0gMjYwO1xuUEhQLkNvbnN0YW50cy5UX0ROVU1CRVIgPSAyNjE7XG5QSFAuQ29uc3RhbnRzLlRfU1RSSU5HID0gMjYyO1xuUEhQLkNvbnN0YW50cy5UX1NUUklOR19WQVJOQU1FID0gMjcwO1xuUEhQLkNvbnN0YW50cy5UX1ZBUklBQkxFID0gMjY2O1xuUEhQLkNvbnN0YW50cy5UX05VTV9TVFJJTkcgPSAyNzE7XG5QSFAuQ29uc3RhbnRzLlRfSU5MSU5FX0hUTUwgPSAyNjc7XG5QSFAuQ29uc3RhbnRzLlRfRU5DQVBTRURfQU5EX1dISVRFU1BBQ0UgPSAyNjg7XG5QSFAuQ29uc3RhbnRzLlRfQ09OU1RBTlRfRU5DQVBTRURfU1RSSU5HID0gMjY5O1xuUEhQLkNvbnN0YW50cy5UX0VDSE8gPSAyOTE7XG5QSFAuQ29uc3RhbnRzLlRfRE8gPSAyOTI7XG5QSFAuQ29uc3RhbnRzLlRfV0hJTEUgPSAyOTM7XG5QSFAuQ29uc3RhbnRzLlRfRU5EV0hJTEUgPSAyOTQ7XG5QSFAuQ29uc3RhbnRzLlRfRk9SID0gMjk1O1xuUEhQLkNvbnN0YW50cy5UX0VOREZPUiA9IDI5NjtcblBIUC5Db25zdGFudHMuVF9GT1JFQUNIID0gMjk3O1xuUEhQLkNvbnN0YW50cy5UX0VOREZPUkVBQ0ggPSAyOTg7XG5QSFAuQ29uc3RhbnRzLlRfREVDTEFSRSA9IDI5OTtcblBIUC5Db25zdGFudHMuVF9FTkRERUNMQVJFID0gMzAwO1xuUEhQLkNvbnN0YW50cy5UX0FTID0gMzAxO1xuUEhQLkNvbnN0YW50cy5UX1NXSVRDSCA9IDMwMjtcblBIUC5Db25zdGFudHMuVF9NQVRDSCA9IDMwNjtcblBIUC5Db25zdGFudHMuVF9FTkRTV0lUQ0ggPSAzMDM7XG5QSFAuQ29uc3RhbnRzLlRfQ0FTRSA9IDMwNDtcblBIUC5Db25zdGFudHMuVF9ERUZBVUxUID0gMzA1O1xuUEhQLkNvbnN0YW50cy5UX0JSRUFLID0gMzA3O1xuUEhQLkNvbnN0YW50cy5UX0NPTlRJTlVFID0gMzA4O1xuUEhQLkNvbnN0YW50cy5UX0dPVE8gPSAzMDk7XG5QSFAuQ29uc3RhbnRzLlRfRlVOQ1RJT04gPSAzMTA7XG5QSFAuQ29uc3RhbnRzLlRfRk4gPSAzMTE7XG5QSFAuQ29uc3RhbnRzLlRfQ09OU1QgPSAzMTI7XG5QSFAuQ29uc3RhbnRzLlRfUkVUVVJOID0gMzEzO1xuUEhQLkNvbnN0YW50cy5UX1RSWSA9IDMxNDtcblBIUC5Db25zdGFudHMuVF9DQVRDSCA9IDMxNTtcblBIUC5Db25zdGFudHMuVF9GSU5BTExZID0gMzE2O1xuUEhQLkNvbnN0YW50cy5UX1RIUk9XID0gMzE3O1xuUEhQLkNvbnN0YW50cy5UX1VTRSA9IDMxODtcblBIUC5Db25zdGFudHMuVF9JTlNURUFET0YgPSAzMTk7XG5QSFAuQ29uc3RhbnRzLlRfR0xPQkFMID0gMzIwO1xuUEhQLkNvbnN0YW50cy5UX1NUQVRJQyA9IDMyMTtcblBIUC5Db25zdGFudHMuVF9BQlNUUkFDVCA9IDMyMjtcblBIUC5Db25zdGFudHMuVF9GSU5BTCA9IDMyMztcblBIUC5Db25zdGFudHMuVF9QUklWQVRFID0gMzI0O1xuUEhQLkNvbnN0YW50cy5UX1BST1RFQ1RFRCA9IDMyNTtcblBIUC5Db25zdGFudHMuVF9QVUJMSUMgPSAzMjY7XG5QSFAuQ29uc3RhbnRzLlRfUkVBRE9OTFkgPSAzMjc7XG5QSFAuQ29uc3RhbnRzLlRfVkFSID0gMzI4O1xuUEhQLkNvbnN0YW50cy5UX1VOU0VUID0gMzI5O1xuUEhQLkNvbnN0YW50cy5UX0lTU0VUID0gMzMwO1xuUEhQLkNvbnN0YW50cy5UX0VNUFRZID0gMzMxO1xuUEhQLkNvbnN0YW50cy5UX0hBTFRfQ09NUElMRVIgPSAzMzI7XG5QSFAuQ29uc3RhbnRzLlRfQ0xBU1MgPSAzMzM7XG5QSFAuQ29uc3RhbnRzLlRfVFJBSVQgPSAzMzQ7XG5QSFAuQ29uc3RhbnRzLlRfSU5URVJGQUNFID0gMzM1O1xuUEhQLkNvbnN0YW50cy5UX0VOVU0gPSAzMzY7XG5QSFAuQ29uc3RhbnRzLlRfRVhURU5EUyA9IDMzNztcblBIUC5Db25zdGFudHMuVF9JTVBMRU1FTlRTID0gMzM4O1xuUEhQLkNvbnN0YW50cy5UX09CSkVDVF9PUEVSQVRPUiA9IDM4NDtcblBIUC5Db25zdGFudHMuVF9OVUxMU0FGRV9PQkpFQ1RfT1BFUkFUT1IgPSAzODU7XG5QSFAuQ29uc3RhbnRzLlRfRE9VQkxFX0FSUk9XID0gMzg2O1xuUEhQLkNvbnN0YW50cy5UX0xJU1QgPSAzNDA7XG5QSFAuQ29uc3RhbnRzLlRfQVJSQVkgPSAzNDE7XG5QSFAuQ29uc3RhbnRzLlRfQ0FMTEFCTEUgPSAzNDI7XG5QSFAuQ29uc3RhbnRzLlRfQ0xBU1NfQyA9IDM0NjtcblBIUC5Db25zdGFudHMuVF9UUkFJVF9DID0gMzQ3O1xuUEhQLkNvbnN0YW50cy5UX01FVEhPRF9DID0gMzQ4O1xuUEhQLkNvbnN0YW50cy5UX0ZVTkNfQyA9IDM0OTtcblBIUC5Db25zdGFudHMuVF9MSU5FID0gMzQzO1xuUEhQLkNvbnN0YW50cy5UX0ZJTEUgPSAzNDQ7XG5QSFAuQ29uc3RhbnRzLlRfU1RBUlRfSEVSRURPQyA9IDM5MztcblBIUC5Db25zdGFudHMuVF9FTkRfSEVSRURPQyA9IDM5NDtcblBIUC5Db25zdGFudHMuVF9ET0xMQVJfT1BFTl9DVVJMWV9CUkFDRVMgPSAzOTU7XG5QSFAuQ29uc3RhbnRzLlRfQ1VSTFlfT1BFTiA9IDM5NjtcblBIUC5Db25zdGFudHMuVF9QQUFNQVlJTV9ORUtVRE9UQVlJTSA9IDM5NztcblBIUC5Db25zdGFudHMuVF9OQU1FU1BBQ0UgPSAzMzk7XG5QSFAuQ29uc3RhbnRzLlRfTlNfQyA9IDM1MDtcblBIUC5Db25zdGFudHMuVF9ESVIgPSAzNDU7XG5QSFAuQ29uc3RhbnRzLlRfTlNfU0VQQVJBVE9SID0gMzk4O1xuUEhQLkNvbnN0YW50cy5UX0VMTElQU0lTID0gMzk5O1xuUEhQLkNvbnN0YW50cy5UX05BTUVfRlVMTFlfUVVBTElGSUVEID0gMjYzO1xuUEhQLkNvbnN0YW50cy5UX05BTUVfUVVBTElGSUVEID0gMjY1O1xuUEhQLkNvbnN0YW50cy5UX05BTUVfUkVMQVRJVkUgPSAyNjQ7XG5QSFAuQ29uc3RhbnRzLlRfQVRUUklCVVRFID0gMzUxO1xuUEhQLkNvbnN0YW50cy5UX0VOVU0gPSAzMzY7XG5QSFAuQ29uc3RhbnRzLlRfQkFEX0NIQVJBQ1RFUiA9IDQwNTtcblBIUC5Db25zdGFudHMuVF9DT01NRU5UID0gMzg3O1xuUEhQLkNvbnN0YW50cy5UX0RPQ19DT01NRU5UID0gMzg4O1xuUEhQLkNvbnN0YW50cy5UX09QRU5fVEFHID0gMzg5O1xuUEhQLkNvbnN0YW50cy5UX09QRU5fVEFHX1dJVEhfRUNITyA9IDM5MDtcblBIUC5Db25zdGFudHMuVF9DTE9TRV9UQUcgPSAzOTE7XG5QSFAuQ29uc3RhbnRzLlRfV0hJVEVTUEFDRSA9IDM5MjtcblBIUC5MZXhlciA9IGZ1bmN0aW9uKHNyYywgaW5pKSB7XG4gICAgdmFyIGhlcmVkb2MsIGhlcmVkb2NFbmRBbGxvd2VkLCBzdGF0ZVN0YWNrID0gW1xuICAgICAgICAnSU5JVElBTCdcbiAgICBdLCBzdGFja1BvcyA9IDAsIHN3YXBTdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgIHN0YXRlU3RhY2tbc3RhY2tQb3NdID0gc3RhdGU7XG4gICAgfSwgcHVzaFN0YXRlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgICAgc3RhdGVTdGFja1srK3N0YWNrUG9zXSA9IHN0YXRlO1xuICAgIH0sIHBvcFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC0tc3RhY2tQb3M7XG4gICAgfSwgc2hvcnRPcGVuVGFnID0gaW5pID09PSB1bmRlZmluZWQgfHwgL14ob258dHJ1ZXwxKSQvaS50ZXN0KGluaS5zaG9ydF9vcGVuX3RhZyksIG9wZW5UYWcgPSBzaG9ydE9wZW5UYWcgPyAvXihcXDxcXD9waHAoPzpcXHJcXG58WyBcXHRcXHJcXG5dKXw8XFw/fFxcPHNjcmlwdCBsYW5ndWFnZVxcPSgnfFwiKT9waHAoJ3xcIik/XFw+KS9pIDogL14oXFw8XFw/cGhwKD86XFxyXFxufFsgXFx0XFxyXFxuXSl8XFw8c2NyaXB0IGxhbmd1YWdlXFw9KCd8XCIpP3BocCgnfFwiKT9cXD4pL2ksIGlubGluZUh0bWwgPSBzaG9ydE9wZW5UYWcgPyAvW148XSooPzo8KD8hXFw/fHNjcmlwdCBsYW5ndWFnZVxcPSgnfFwiKT9waHAoJ3xcIik/XFw+KVtePF0qKSovaSA6IC9bXjxdKig/OjwoPyFcXD89fFxcP3BocFsgXFx0XFxyXFxuXXxzY3JpcHQgbGFuZ3VhZ2VcXD0oJ3xcIik/cGhwKCd8XCIpP1xcPilbXjxdKikqL2ksIGxhYmVsUmVnZXhQYXJ0ID0gJ1thLXpBLVpfXFxcXHg3Zi1cXFxcdWZmZmZdW2EtekEtWjAtOV9cXFxceDdmLVxcXFx1ZmZmZl0qJywgc3RyaW5nUmVnZXhQYXJ0ID0gZnVuY3Rpb24ocXVvdGUpIHtcbiAgICAgICAgLy8gTWF0Y2hlcyBub24taW50ZXJwb2xhdGVkIHBvcnRpb24gb2YgaW50ZXJwb2xhdGVkIHN0cmluZ1xuICAgICAgICByZXR1cm4gJ1teJyArIHF1b3RlICsgJ1xcXFxcXFxcJHtdKig/Oig/OlxcXFxcXFxcW1xcXFxzXFxcXFNdfFxcXFwkKD8hXFxcXHt8W2EtekEtWl9cXFxceDdmLVxcXFx1ZmZmZl0pfFxcXFx7KD8hXFxcXCQpKVteJyArIHF1b3RlICsgJ1xcXFxcXFxcJHtdKikqJztcbiAgICB9LCBzaGFyZWRTdHJpbmdUb2tlbnMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfVkFSSUFCTEUsXG4gICAgICAgICAgICByZTogbmV3IFJlZ0V4cCgnXlxcXFwkJyArIGxhYmVsUmVnZXhQYXJ0ICsgJyg/PVxcXFxbKScpLFxuICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcHVzaFN0YXRlKCdWQVJfT0ZGU0VUJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfVkFSSUFCTEUsXG4gICAgICAgICAgICByZTogbmV3IFJlZ0V4cCgnXlxcXFwkJyArIGxhYmVsUmVnZXhQYXJ0ICsgJyg/PS0+JyArIGxhYmVsUmVnZXhQYXJ0ICsgJyknKSxcbiAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHB1c2hTdGF0ZSgnTE9PS0lOR19GT1JfUFJPUEVSVFknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9ET0xMQVJfT1BFTl9DVVJMWV9CUkFDRVMsXG4gICAgICAgICAgICByZTogbmV3IFJlZ0V4cCgnXlxcXFwkXFxcXHsoPz0nICsgbGFiZWxSZWdleFBhcnQgKyAnW1xcXFxbfV0pJyksXG4gICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwdXNoU3RhdGUoJ0xPT0tJTkdfRk9SX1ZBUk5BTUUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9WQVJJQUJMRSxcbiAgICAgICAgICAgIHJlOiBuZXcgUmVnRXhwKCdeXFxcXCQnICsgbGFiZWxSZWdleFBhcnQpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRE9MTEFSX09QRU5fQ1VSTFlfQlJBQ0VTLFxuICAgICAgICAgICAgcmU6IC9eXFwkXFx7LyxcbiAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHB1c2hTdGF0ZSgnSU5fU0NSSVBUSU5HJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ1VSTFlfT1BFTixcbiAgICAgICAgICAgIHJlOiAvXlxceyg/PVxcJCkvLFxuICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcHVzaFN0YXRlKCdJTl9TQ1JJUFRJTkcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sIGRhdGEgPSB7XG4gICAgICAgIC8vIE91dHNpZGUgb2YgUEhQXG4gICAgICAgICdJTklUSUFMJzogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfT1BFTl9UQUdfV0lUSF9FQ0hPLFxuICAgICAgICAgICAgICAgIHJlOiAvXjxcXD89L2ksXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3YXBTdGF0ZSgnSU5fU0NSSVBUSU5HJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX09QRU5fVEFHLFxuICAgICAgICAgICAgICAgIHJlOiBvcGVuVGFnLFxuICAgICAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzd2FwU3RhdGUoJ0lOX1NDUklQVElORycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JTkxJTkVfSFRNTCxcbiAgICAgICAgICAgICAgICByZTogaW5saW5lSHRtbFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICAnSU5fU0NSSVBUSU5HJzogW1xuICAgICAgICAgICAgLy8gTWF0Y2ggd2hpdGVzcGFjZSBmaXJzdFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfV0hJVEVTUEFDRSxcbiAgICAgICAgICAgICAgICByZTogL15bIFxcblxcclxcdF0rL1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIEtleXdvcmRzLCBzb3J0ZWQgYWxwaGFiZXRpY2FsbHlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0FCU1RSQUNULFxuICAgICAgICAgICAgICAgIHJlOiAvXmFic3RyYWN0XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9MT0dJQ0FMX0FORCxcbiAgICAgICAgICAgICAgICByZTogL15hbmRcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0FSUkFZLFxuICAgICAgICAgICAgICAgIHJlOiAvXmFycmF5XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9BUyxcbiAgICAgICAgICAgICAgICByZTogL15hc1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQlJFQUssXG4gICAgICAgICAgICAgICAgcmU6IC9eYnJlYWtcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0NBTExBQkxFLFxuICAgICAgICAgICAgICAgIHJlOiAvXmNhbGxhYmxlXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9DQVNFLFxuICAgICAgICAgICAgICAgIHJlOiAvXmNhc2VcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0NBVENILFxuICAgICAgICAgICAgICAgIHJlOiAvXmNhdGNoXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9DTEFTUyxcbiAgICAgICAgICAgICAgICByZTogL15jbGFzc1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ0xPTkUsXG4gICAgICAgICAgICAgICAgcmU6IC9eY2xvbmVcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0NPTlNULFxuICAgICAgICAgICAgICAgIHJlOiAvXmNvbnN0XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9DT05USU5VRSxcbiAgICAgICAgICAgICAgICByZTogL15jb250aW51ZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfREVDTEFSRSxcbiAgICAgICAgICAgICAgICByZTogL15kZWNsYXJlXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9ERUZBVUxULFxuICAgICAgICAgICAgICAgIHJlOiAvXmRlZmF1bHRcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0RPLFxuICAgICAgICAgICAgICAgIHJlOiAvXmRvXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9FQ0hPLFxuICAgICAgICAgICAgICAgIHJlOiAvXmVjaG9cXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VMU0UsXG4gICAgICAgICAgICAgICAgcmU6IC9eZWxzZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRUxTRUlGLFxuICAgICAgICAgICAgICAgIHJlOiAvXmVsc2VpZlxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRU5VTSxcbiAgICAgICAgICAgICAgICByZTogL15lbnVtXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9FTkRERUNMQVJFLFxuICAgICAgICAgICAgICAgIHJlOiAvXmVuZGRlY2xhcmVcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VOREZPUixcbiAgICAgICAgICAgICAgICByZTogL15lbmRmb3JcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VOREZPUkVBQ0gsXG4gICAgICAgICAgICAgICAgcmU6IC9eZW5kZm9yZWFjaFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRU5ESUYsXG4gICAgICAgICAgICAgICAgcmU6IC9eZW5kaWZcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VORFNXSVRDSCxcbiAgICAgICAgICAgICAgICByZTogL15lbmRzd2l0Y2hcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VORFdISUxFLFxuICAgICAgICAgICAgICAgIHJlOiAvXmVuZHdoaWxlXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9FTlVNLFxuICAgICAgICAgICAgICAgIHJlOiAvXmVudW1cXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VNUFRZLFxuICAgICAgICAgICAgICAgIHJlOiAvXmVtcHR5XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9FVkFMLFxuICAgICAgICAgICAgICAgIHJlOiAvXmV2YWxcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VYSVQsXG4gICAgICAgICAgICAgICAgcmU6IC9eKD86ZXhpdHxkaWUpXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9FWFRFTkRTLFxuICAgICAgICAgICAgICAgIHJlOiAvXmV4dGVuZHNcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0ZJTkFMLFxuICAgICAgICAgICAgICAgIHJlOiAvXmZpbmFsXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9GSU5BTExZLFxuICAgICAgICAgICAgICAgIHJlOiAvXmZpbmFsbHlcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0ZOLFxuICAgICAgICAgICAgICAgIHJlOiAvXmZuXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9GT1IsXG4gICAgICAgICAgICAgICAgcmU6IC9eZm9yXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9GT1JFQUNILFxuICAgICAgICAgICAgICAgIHJlOiAvXmZvcmVhY2hcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0ZVTkNUSU9OLFxuICAgICAgICAgICAgICAgIHJlOiAvXmZ1bmN0aW9uXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9HTE9CQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eZ2xvYmFsXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9HT1RPLFxuICAgICAgICAgICAgICAgIHJlOiAvXmdvdG9cXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0lGLFxuICAgICAgICAgICAgICAgIHJlOiAvXmlmXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JTVBMRU1FTlRTLFxuICAgICAgICAgICAgICAgIHJlOiAvXmltcGxlbWVudHNcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0lOQ0xVREUsXG4gICAgICAgICAgICAgICAgcmU6IC9eaW5jbHVkZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfSU5DTFVERV9PTkNFLFxuICAgICAgICAgICAgICAgIHJlOiAvXmluY2x1ZGVfb25jZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfSU5TVEFOQ0VPRixcbiAgICAgICAgICAgICAgICByZTogL15pbnN0YW5jZW9mXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JTlNURUFET0YsXG4gICAgICAgICAgICAgICAgcmU6IC9eaW5zdGVhZG9mXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JTlRFUkZBQ0UsXG4gICAgICAgICAgICAgICAgcmU6IC9eaW50ZXJmYWNlXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JU1NFVCxcbiAgICAgICAgICAgICAgICByZTogL15pc3NldFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTElTVCxcbiAgICAgICAgICAgICAgICByZTogL15saXN0XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9NQVRDSCxcbiAgICAgICAgICAgICAgICByZTogL15tYXRjaFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTkVXLFxuICAgICAgICAgICAgICAgIHJlOiAvXm5ld1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTE9HSUNBTF9PUixcbiAgICAgICAgICAgICAgICByZTogL15vclxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfUFJJTlQsXG4gICAgICAgICAgICAgICAgcmU6IC9ecHJpbnRcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1BSSVZBVEUsXG4gICAgICAgICAgICAgICAgcmU6IC9ecHJpdmF0ZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfUFJPVEVDVEVELFxuICAgICAgICAgICAgICAgIHJlOiAvXnByb3RlY3RlZFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfUFVCTElDLFxuICAgICAgICAgICAgICAgIHJlOiAvXnB1YmxpY1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfUkVBRE9OTFksXG4gICAgICAgICAgICAgICAgcmU6IC9ecmVhZG9ubHlcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1JFUVVJUkUsXG4gICAgICAgICAgICAgICAgcmU6IC9ecmVxdWlyZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfUkVRVUlSRV9PTkNFLFxuICAgICAgICAgICAgICAgIHJlOiAvXnJlcXVpcmVfb25jZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfU1RBVElDLFxuICAgICAgICAgICAgICAgIHJlOiAvXnN0YXRpY1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfU1dJVENILFxuICAgICAgICAgICAgICAgIHJlOiAvXnN3aXRjaFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfVEhST1csXG4gICAgICAgICAgICAgICAgcmU6IC9edGhyb3dcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1RSQUlULFxuICAgICAgICAgICAgICAgIHJlOiAvXnRyYWl0XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9UUlksXG4gICAgICAgICAgICAgICAgcmU6IC9edHJ5XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9VTlNFVCxcbiAgICAgICAgICAgICAgICByZTogL151bnNldFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfVVNFLFxuICAgICAgICAgICAgICAgIHJlOiAvXnVzZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfVkFSLFxuICAgICAgICAgICAgICAgIHJlOiAvXnZhclxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfV0hJTEUsXG4gICAgICAgICAgICAgICAgcmU6IC9ed2hpbGVcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0xPR0lDQUxfWE9SLFxuICAgICAgICAgICAgICAgIHJlOiAvXnhvclxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfWUlFTERfRlJPTSxcbiAgICAgICAgICAgICAgICByZTogL155aWVsZFxccytmcm9tXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9ZSUVMRCxcbiAgICAgICAgICAgICAgICByZTogL155aWVsZFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfUkVUVVJOLFxuICAgICAgICAgICAgICAgIHJlOiAvXnJldHVyblxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTUVUSE9EX0MsXG4gICAgICAgICAgICAgICAgcmU6IC9eX19NRVRIT0RfX1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTElORSxcbiAgICAgICAgICAgICAgICByZTogL15fX0xJTkVfX1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRklMRSxcbiAgICAgICAgICAgICAgICByZTogL15fX0ZJTEVfX1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRlVOQ19DLFxuICAgICAgICAgICAgICAgIHJlOiAvXl9fRlVOQ1RJT05fX1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTlNfQyxcbiAgICAgICAgICAgICAgICByZTogL15fX05BTUVTUEFDRV9fXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9UUkFJVF9DLFxuICAgICAgICAgICAgICAgIHJlOiAvXl9fVFJBSVRfX1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRElSLFxuICAgICAgICAgICAgICAgIHJlOiAvXl9fRElSX19cXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0NMQVNTX0MsXG4gICAgICAgICAgICAgICAgcmU6IC9eX19DTEFTU19fXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBPdGhlciB0b2tlbnNcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0FORF9FUVVBTCxcbiAgICAgICAgICAgICAgICByZTogL14mPS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9BUlJBWV9DQVNULFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcKFsgXFx0XSphcnJheVsgXFx0XSpcXCkvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0JPT0xfQ0FTVCxcbiAgICAgICAgICAgICAgICByZTogL15cXChbIFxcdF0qKD86Ym9vbHxib29sZWFuKVsgXFx0XSpcXCkvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0RPVUJMRV9DQVNULFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcKFsgXFx0XSooPzpyZWFsfGZsb2F0fGRvdWJsZSlbIFxcdF0qXFwpL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JTlRfQ0FTVCxcbiAgICAgICAgICAgICAgICByZTogL15cXChbIFxcdF0qKD86aW50fGludGVnZXIpWyBcXHRdKlxcKS9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfT0JKRUNUX0NBU1QsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwoWyBcXHRdKm9iamVjdFsgXFx0XSpcXCkvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1NUUklOR19DQVNULFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcKFsgXFx0XSooPzpiaW5hcnl8c3RyaW5nKVsgXFx0XSpcXCkvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1VOU0VUX0NBU1QsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwoWyBcXHRdKnVuc2V0WyBcXHRdKlxcKS9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQk9PTEVBTl9BTkQsXG4gICAgICAgICAgICAgICAgcmU6IC9eJiYvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQU1QRVJTQU5EX0ZPTExPV0VEX0JZX1ZBUl9PUl9WQVJBUkcsXG4gICAgICAgICAgICAgICAgcmU6IC9eJig/PVskXSkvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQU1QRVJTQU5EX05PVF9GT0xMT1dFRF9CWV9WQVJfT1JfVkFSQVJHLFxuICAgICAgICAgICAgICAgIHJlOiAvXigmKSg/PVteXFwkfF4mXSkvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQk9PTEVBTl9PUixcbiAgICAgICAgICAgICAgICByZTogL15cXHxcXHwvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ0xPU0VfVEFHLFxuICAgICAgICAgICAgICAgIHJlOiAvXig/OlxcPz58PFxcL3NjcmlwdD4pKFxcclxcbnxcXHJ8XFxuKT8vaSxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhcFN0YXRlKCdJTklUSUFMJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0RPVUJMRV9BUlJPVyxcbiAgICAgICAgICAgICAgICByZTogL149Pi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9QQUFNQVlJTV9ORUtVRE9UQVlJTSxcbiAgICAgICAgICAgICAgICByZTogL146Oi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JTkMsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwrXFwrL1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0RFQyxcbiAgICAgICAgICAgICAgICByZTogL14tLS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9DT05DQVRfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwuPS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9ESVZfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwvPS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9YT1JfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFxePS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9NVUxfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwqPS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9NT0RfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eJT0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfU0xfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9ePDw9L1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1NUQVJUX0hFUkVET0MsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ15bYkJdPzw8PFsgXFxcXHRdKlxcJygnICsgbGFiZWxSZWdleFBhcnQgKyAnKVxcJyg/OlxcXFxyXFxcXG58XFxcXHJ8XFxcXG4pJyksXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGhlcmVkb2MgPSByZXN1bHRbMV07XG4gICAgICAgICAgICAgICAgICAgIHN3YXBTdGF0ZSgnTk9XRE9DJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1NUQVJUX0hFUkVET0MsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ15bYkJdPzw8PFsgXFxcXHRdKihcIj8pKCcgKyBsYWJlbFJlZ2V4UGFydCArICcpXFxcXDEoPzpcXFxcclxcXFxufFxcXFxyfFxcXFxuKScpLFxuICAgICAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBoZXJlZG9jID0gcmVzdWx0WzJdO1xuICAgICAgICAgICAgICAgICAgICBoZXJlZG9jRW5kQWxsb3dlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHN3YXBTdGF0ZSgnSEVSRURPQycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9TTCxcbiAgICAgICAgICAgICAgICByZTogL148PC9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9TUEFDRVNISVAsXG4gICAgICAgICAgICAgICAgcmU6IC9ePD0+L1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0lTX1NNQUxMRVJfT1JfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9ePD0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfU1JfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9ePj49L1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1NSLFxuICAgICAgICAgICAgICAgIHJlOiAvXj4+L1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0lTX0dSRUFURVJfT1JfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9ePj0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfT1JfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFx8PS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9QTFVTX0VRVUFMLFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcKz0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTUlOVVNfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eLT0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfT0JKRUNUX09QRVJBVE9SLFxuICAgICAgICAgICAgICAgIHJlOiBuZXcgUmVnRXhwKCdeLT4oPz1bIFxcblxcclxcdF0qJyArIGxhYmVsUmVnZXhQYXJ0ICsgJyknKSxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaFN0YXRlKCdMT09LSU5HX0ZPUl9QUk9QRVJUWScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9PQkpFQ1RfT1BFUkFUT1IsXG4gICAgICAgICAgICAgICAgcmU6IC9eLT4vaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VMTElQU0lTLFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcLlxcLlxcLi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9QT1dfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwqXFwqPS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9QT1csXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwqXFwqL1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0NPQUxFU0NFX0VRVUFMLFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcP1xcPz0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ09BTEVTQ0UsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFw/XFw/L1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX05VTExTQUZFX09CSkVDVF9PUEVSQVRPUixcbiAgICAgICAgICAgICAgICByZTogL15cXD8tPi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9OQU1FX0ZVTExZX1FVQUxJRklFRCxcbiAgICAgICAgICAgICAgICByZTogL15cXFxcXFx3Kyg/OlxcXFxcXHcrKSovXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTkFNRV9RVUFMSUZJRUQsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFx3K1xcXFxcXHcrKD86XFxcXFxcdyspKi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9OQU1FX1JFTEFUSVZFLFxuICAgICAgICAgICAgICAgIHJlOiAvXm5hbWVzcGFjZVxcXFxcXHcrKD86XFxcXFxcdyspKi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9OQU1FU1BBQ0UsXG4gICAgICAgICAgICAgICAgcmU6IC9ebmFtZXNwYWNlXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9BVFRSSUJVVEUsXG4gICAgICAgICAgICAgICAgcmU6IC9eI1xcWyhbXFxTXFxzXSo/KV0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ09NTUVOVCxcbiAgICAgICAgICAgICAgICByZTogL15cXC9cXCooW1xcU1xcc10qPykoPzpcXCpcXC98JCkvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ09NTUVOVCxcbiAgICAgICAgICAgICAgICByZTogL14oPzpcXC9cXC98IylbXlxcclxcbj9dKig/OlxcPyg/IT4pW15cXHJcXG4/XSopKig/OlxcclxcbnxcXHJ8XFxuKT8vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfSVNfSURFTlRJQ0FMLFxuICAgICAgICAgICAgICAgIHJlOiAvXj09PS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JU19FUVVBTCxcbiAgICAgICAgICAgICAgICByZTogL149PS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JU19OT1RfSURFTlRJQ0FMLFxuICAgICAgICAgICAgICAgIHJlOiAvXiE9PS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JU19OT1RfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eKCE9fDw+KS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9ETlVNQkVSLFxuICAgICAgICAgICAgICAgIHJlOiAvXig/OlswLTldK1xcLlswLTldKnxcXC5bMC05XSspKD86W2VFXVsrLV0/WzAtOV0rKT8vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRE5VTUJFUixcbiAgICAgICAgICAgICAgICByZTogL15bMC05XStbZUVdWystXT9bMC05XSsvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTE5VTUJFUixcbiAgICAgICAgICAgICAgICByZTogL14oPzoweFswLTlBLUZdK3wwYlswMV0rfFswLTldKykvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1ZBUklBQkxFLFxuICAgICAgICAgICAgICAgIHJlOiBuZXcgUmVnRXhwKCdeXFxcXCQnICsgbGFiZWxSZWdleFBhcnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ09OU1RBTlRfRU5DQVBTRURfU1RSSU5HLFxuICAgICAgICAgICAgICAgIHJlOiAvXltiQl0/J1teJ1xcXFxdKig/OlxcXFxbXFxzXFxTXVteJ1xcXFxdKikqJy9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9DT05TVEFOVF9FTkNBUFNFRF9TVFJJTkcsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ15bYkJdP1wiJyArIHN0cmluZ1JlZ2V4UGFydCgnXCInKSArICdcIicpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAtMSxcbiAgICAgICAgICAgICAgICByZTogL15bYkJdP1wiLyxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhcFN0YXRlKCdET1VCTEVfUVVPVEVTJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogLTEsXG4gICAgICAgICAgICAgICAgcmU6IC9eYC8sXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3YXBTdGF0ZSgnQkFDS1RJQ0tTJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX05TX1NFUEFSQVRPUixcbiAgICAgICAgICAgICAgICByZTogL15cXFxcL1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1NUUklORyxcbiAgICAgICAgICAgICAgICByZTogL15bYS16QS1aX1xceDdmLVxcdWZmZmZdW2EtekEtWjAtOV9cXHg3Zi1cXHVmZmZmXSovXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAtMSxcbiAgICAgICAgICAgICAgICByZTogL15cXHsvLFxuICAgICAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwdXNoU3RhdGUoJ0lOX1NDUklQVElORycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IC0xLFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcfS8sXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFja1BvcyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAtMSxcbiAgICAgICAgICAgICAgICByZTogL15bXFxbXFxdOzo/KCkhLiw+PD0rLS8qfCZAXiVcIickfl0vXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgICdET1VCTEVfUVVPVEVTJzogc2hhcmVkU3RyaW5nVG9rZW5zLmNvbmNhdChbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IC0xLFxuICAgICAgICAgICAgICAgIHJlOiAvXlwiLyxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhcFN0YXRlKCdJTl9TQ1JJUFRJTkcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRU5DQVBTRURfQU5EX1dISVRFU1BBQ0UsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ14nICsgc3RyaW5nUmVnZXhQYXJ0KCdcIicpKVxuICAgICAgICAgICAgfVxuICAgICAgICBdKSxcbiAgICAgICAgJ0JBQ0tUSUNLUyc6IHNoYXJlZFN0cmluZ1Rva2Vucy5jb25jYXQoW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAtMSxcbiAgICAgICAgICAgICAgICByZTogL15gLyxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhcFN0YXRlKCdJTl9TQ1JJUFRJTkcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRU5DQVBTRURfQU5EX1dISVRFU1BBQ0UsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ14nICsgc3RyaW5nUmVnZXhQYXJ0KCdgJykpXG4gICAgICAgICAgICB9XG4gICAgICAgIF0pLFxuICAgICAgICAnVkFSX09GRlNFVCc6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogLTEsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFxdLyxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wU3RhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTlVNX1NUUklORyxcbiAgICAgICAgICAgICAgICByZTogL14oPzoweFswLTlBLUZdK3wwYlswMV0rfFswLTldKykvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1ZBUklBQkxFLFxuICAgICAgICAgICAgICAgIHJlOiBuZXcgUmVnRXhwKCdeXFxcXCQnICsgbGFiZWxSZWdleFBhcnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfU1RSSU5HLFxuICAgICAgICAgICAgICAgIHJlOiBuZXcgUmVnRXhwKCdeJyArIGxhYmVsUmVnZXhQYXJ0KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogLTEsXG4gICAgICAgICAgICAgICAgcmU6IC9eWzs6LC5cXFsoKXxeJistLyo9JSF+JDw+P0B7fVwiYF0vXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgICdMT09LSU5HX0ZPUl9QUk9QRVJUWSc6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX09CSkVDVF9PUEVSQVRPUixcbiAgICAgICAgICAgICAgICByZTogL14tPi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9TVFJJTkcsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ14nICsgbGFiZWxSZWdleFBhcnQpLFxuICAgICAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwb3BTdGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9XSElURVNQQUNFLFxuICAgICAgICAgICAgICAgIHJlOiAvXlsgXFxuXFxyXFx0XSsvXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgICdMT09LSU5HX0ZPUl9WQVJOQU1FJzogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfU1RSSU5HX1ZBUk5BTUUsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ14nICsgbGFiZWxSZWdleFBhcnQgKyAnKD89W1xcXFxbfV0pJyksXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3YXBTdGF0ZSgnSU5fU0NSSVBUSU5HJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICAnTk9XRE9DJzogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRU5EX0hFUkVET0MsXG4gICAgICAgICAgICAgICAgbWF0Y2hGdW5jOiBmdW5jdGlvbihzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cCgnXicgKyBoZXJlZG9jICsgJyg/PTs/W1xcXFxyXFxcXG5dKScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3JjLm1hdGNoKHJlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmMuc3Vic3RyKDAsIGhlcmVkb2MubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhcFN0YXRlKCdJTl9TQ1JJUFRJTkcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRU5DQVBTRURfQU5EX1dISVRFU1BBQ0UsXG4gICAgICAgICAgICAgICAgbWF0Y2hGdW5jOiBmdW5jdGlvbihzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cCgnW1xcXFxyXFxcXG5dJyArIGhlcmVkb2MgKyAnKD89Oz9bXFxcXHJcXFxcbl0pJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSByZS5leGVjKHNyYyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmQgPSByZXN1bHQgPyByZXN1bHQuaW5kZXggKyAxIDogc3JjLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYy5zdWJzdHJpbmcoMCwgZW5kKVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgJ0hFUkVET0MnOiBzaGFyZWRTdHJpbmdUb2tlbnMuY29uY2F0KFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VORF9IRVJFRE9DLFxuICAgICAgICAgICAgICAgIG1hdGNoRnVuYzogZnVuY3Rpb24oc3JjKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaGVyZWRvY0VuZEFsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciByZSA9IG5ldyBSZWdFeHAoJ14nICsgaGVyZWRvYyArICcoPz07P1tcXFxcclxcXFxuXSknKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNyYy5tYXRjaChyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjLnN1YnN0cigwLCBoZXJlZG9jLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3YXBTdGF0ZSgnSU5fU0NSSVBUSU5HJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VOQ0FQU0VEX0FORF9XSElURVNQQUNFLFxuICAgICAgICAgICAgICAgIG1hdGNoRnVuYzogZnVuY3Rpb24oc3JjKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmQgPSBzcmMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIG5leHQgaW50ZXJwb2xhdGlvblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKCdeJyArIHN0cmluZ1JlZ2V4UGFydCgnJykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcmUuZXhlYyhzcmMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSByZXN1bHRbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgaGVyZWRvYyBlbmRcbiAgICAgICAgICAgICAgICAgICAgcmUgPSBuZXcgUmVnRXhwKCcoW1xcXFxyXFxcXG5dKScgKyBoZXJlZG9jICsgJyg/PTs/W1xcXFxyXFxcXG5dKScpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZS5leGVjKHNyYy5zdWJzdHJpbmcoMCwgZW5kKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IHJlc3VsdC5pbmRleCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZXJlZG9jRW5kQWxsb3dlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZXJlZG9jRW5kQWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYy5zdWJzdHJpbmcoMCwgZW5kKVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSlcbiAgICB9O1xuICAgIHZhciByZXN1bHRzID0gW10sIGxpbmUgPSAxLCBjYW5jZWwgPSB0cnVlO1xuICAgIGlmIChzcmMgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc3JjICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHNyYyA9IHNyYy50b1N0cmluZygpO1xuICAgIH1cbiAgICB3aGlsZShzcmMubGVuZ3RoID4gMCAmJiBjYW5jZWwgPT09IHRydWUpe1xuICAgICAgICB2YXIgc3RhdGUgPSBzdGF0ZVN0YWNrW3N0YWNrUG9zXTtcbiAgICAgICAgdmFyIHRva2VucyA9IGRhdGFbc3RhdGVdO1xuICAgICAgICBjYW5jZWwgPSB0b2tlbnMuc29tZShmdW5jdGlvbih0b2tlbikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRva2VuLm1hdGNoRnVuYyAhPT0gdW5kZWZpbmVkID8gdG9rZW4ubWF0Y2hGdW5jKHNyYykgOiBzcmMubWF0Y2godG9rZW4ucmUpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRbMF0ubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXJyb3IgaW4gdGhlIGxleGVyIGRlZmluaXRpb24sIHByZXZlbnQgaW5maW5pdGUgbG9vcFxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlbXB0eSBtYXRjaFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLmZ1bmMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbi5mdW5jKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0b2tlbi52YWx1ZSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhcmFjdGVyIHRva2VuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHRbMF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRTdHJpbmcgPSByZXN1bHRbMF07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChbXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCh0b2tlbi52YWx1ZSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgbGluZSArPSByZXN1bHRTdHJpbmcuc3BsaXQoJ1xcbicpLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcocmVzdWx0WzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbn07XG4vKlxuXHQgKiBAYXV0aG9yIE5pa2xhcyB2b24gSGVydHplbiA8bmlrbGFzIGF0IGhlcnR6ZW4uY29tPlxuXHQgKiBAY3JlYXRlZCAxNS42LjIwMTJcblx0ICogQHdlYnNpdGUgaHR0cDovL2hlcnR6ZW4uY29tXG5cdCAqLyAvKlxuXHQgKiBUaGUgc2tlbGV0b24gZm9yIHRoaXMgcGFyc2VyIHdhcyB3cml0dGVuIGJ5IE1vcml5b3NoaSBLb2l6dW1pIGFuZCBpcyBiYXNlZCBvblxuXHQgKiB0aGUgd29yayBieSBNYXNhdG8gQml0byBhbmQgaXMgaW4gdGhlIFBVQkxJQyBET01BSU4uXG5cdCAqIFBvcnRlZCB0byBKYXZhU2NyaXB0IGJ5IE5pa2xhcyB2b24gSGVydHplblxuXHQgKi8gUEhQLlBhcnNlciA9IGZ1bmN0aW9uKHByZXByb2Nlc3NlZFRva2VucywgZXZhbHVhdGUpIHtcbiAgICB2YXIgeXliYXNlID0gdGhpcy55eWJhc2UsIHl5ZGVmYXVsdCA9IHRoaXMueXlkZWZhdWx0LCB5eWNoZWNrID0gdGhpcy55eWNoZWNrLCB5eWFjdGlvbiA9IHRoaXMueXlhY3Rpb24sIHl5bGVuID0gdGhpcy55eWxlbiwgeXlnYmFzZSA9IHRoaXMueXlnYmFzZSwgeXlnY2hlY2sgPSB0aGlzLnl5Z2NoZWNrLCB5eXAgPSB0aGlzLnl5cCwgeXlnb3RvID0gdGhpcy55eWdvdG8sIHl5bGhzID0gdGhpcy55eWxocywgdGVybWluYWxzID0gdGhpcy50ZXJtaW5hbHMsIHRyYW5zbGF0ZSA9IHRoaXMudHJhbnNsYXRlLCB5eWdkZWZhdWx0ID0gdGhpcy55eWdkZWZhdWx0O1xuICAgIHRoaXMucG9zID0gLTE7XG4gICAgdGhpcy5saW5lID0gMTtcbiAgICB0aGlzLnRva2VuTWFwID0gdGhpcy5jcmVhdGVUb2tlbk1hcCgpO1xuICAgIHRoaXMuZHJvcFRva2VucyA9IHt9O1xuICAgIHRoaXMuZHJvcFRva2Vuc1tQSFAuQ29uc3RhbnRzLlRfV0hJVEVTUEFDRV0gPSAxO1xuICAgIHRoaXMuZHJvcFRva2Vuc1tQSFAuQ29uc3RhbnRzLlRfT1BFTl9UQUddID0gMTtcbiAgICB2YXIgdG9rZW5zID0gW107XG4gICAgLy8gcHJlLXByb2Nlc3NcbiAgICBwcmVwcm9jZXNzZWRUb2tlbnMuZm9yRWFjaChmdW5jdGlvbih0b2tlbiwgaW5kZXgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gXCJvYmplY3RcIiAmJiB0b2tlblswXSA9PT0gUEhQLkNvbnN0YW50cy5UX09QRU5fVEFHX1dJVEhfRUNITykge1xuICAgICAgICAgICAgdG9rZW5zLnB1c2goW1xuICAgICAgICAgICAgICAgIFBIUC5Db25zdGFudHMuVF9PUEVOX1RBRyxcbiAgICAgICAgICAgICAgICB0b2tlblsxXSxcbiAgICAgICAgICAgICAgICB0b2tlblsyXVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB0b2tlbnMucHVzaChbXG4gICAgICAgICAgICAgICAgUEhQLkNvbnN0YW50cy5UX0VDSE8sXG4gICAgICAgICAgICAgICAgdG9rZW5bMV0sXG4gICAgICAgICAgICAgICAgdG9rZW5bMl1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy50b2tlbnMgPSB0b2tlbnM7XG4gICAgLy8gV2Ugc3RhcnQgb2ZmIHdpdGggbm8gbG9va2FoZWFkLXRva2VuXG4gICAgdmFyIHRva2VuSWQgPSB0aGlzLlRPS0VOX05PTkU7XG4gICAgLy8gVGhlIGF0dHJpYnV0ZXMgZm9yIGEgbm9kZSBhcmUgdGFrZW4gZnJvbSB0aGUgZmlyc3QgYW5kIGxhc3QgdG9rZW4gb2YgdGhlIG5vZGUuXG4gICAgLy8gRnJvbSB0aGUgZmlyc3QgdG9rZW4gb25seSB0aGUgc3RhcnRBdHRyaWJ1dGVzIGFyZSB0YWtlbiBhbmQgZnJvbSB0aGUgbGFzdCBvbmx5XG4gICAgLy8gdGhlIGVuZEF0dHJpYnV0ZXMuIEJvdGggYXJlIG1lcmdlZCB1c2luZyB0aGUgYXJyYXkgdW5pb24gb3BlcmF0b3IgKCspLlxuICAgIHRoaXMuc3RhcnRBdHRyaWJ1dGVzID0ge1xuICAgICAgICAnc3RhcnRMaW5lJzogMVxuICAgIH07XG4gICAgdGhpcy5lbmRBdHRyaWJ1dGVzID0ge307XG4gICAgLy8gSW4gb3JkZXIgdG8gZmlndXJlIG91dCB0aGUgYXR0cmlidXRlcyBmb3IgdGhlIHN0YXJ0aW5nIHRva2VuLCB3ZSBoYXZlIHRvIGtlZXBcbiAgICAvLyB0aGVtIGluIGEgc3RhY2tcbiAgICB2YXIgYXR0cmlidXRlU3RhY2sgPSBbXG4gICAgICAgIHRoaXMuc3RhcnRBdHRyaWJ1dGVzXG4gICAgXTtcbiAgICAvLyBTdGFydCBvZmYgaW4gdGhlIGluaXRpYWwgc3RhdGUgYW5kIGtlZXAgYSBzdGFjayBvZiBwcmV2aW91cyBzdGF0ZXNcbiAgICB2YXIgc3RhdGUgPSAwO1xuICAgIHZhciBzdGF0ZVN0YWNrID0gW1xuICAgICAgICBzdGF0ZVxuICAgIF07XG4gICAgLy8gQVNUIHN0YWNrXG4gICAgdGhpcy55eWFzdGsgPSBbXTtcbiAgICAvLyBDdXJyZW50IHBvc2l0aW9uIGluIHRoZSBzdGFjayhzKVxuICAgIHRoaXMuc3RhY2tQb3MgPSAwO1xuICAgIHZhciB5eW47XG4gICAgdmFyIG9yaWdUb2tlbklkO1xuICAgIGZvcig7Oyl7XG4gICAgICAgIGlmICh5eWJhc2Vbc3RhdGVdID09PSAwKSB7XG4gICAgICAgICAgICB5eW4gPSB5eWRlZmF1bHRbc3RhdGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRva2VuSWQgPT09IHRoaXMuVE9LRU5fTk9ORSkge1xuICAgICAgICAgICAgICAgIC8vIGZldGNoIHRoZSBuZXh0IHRva2VuIGlkIGZyb20gdGhlIGxleGVyIGFuZCBmZXRjaCBhZGRpdGlvbmFsIGluZm8gYnktcmVmXG4gICAgICAgICAgICAgICAgb3JpZ1Rva2VuSWQgPSB0aGlzLmdldE5leHRUb2tlbigpO1xuICAgICAgICAgICAgICAgIC8vIG1hcCB0aGUgbGV4ZXIgdG9rZW4gaWQgdG8gdGhlIGludGVybmFsbHkgdXNlZCB0b2tlbiBpZCdzXG4gICAgICAgICAgICAgICAgdG9rZW5JZCA9IG9yaWdUb2tlbklkID49IDAgJiYgb3JpZ1Rva2VuSWQgPCB0aGlzLlRPS0VOX01BUF9TSVpFID8gdHJhbnNsYXRlW29yaWdUb2tlbklkXSA6IHRoaXMuVE9LRU5fSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVTdGFja1t0aGlzLnN0YWNrUG9zXSA9IHRoaXMuc3RhcnRBdHRyaWJ1dGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCgoeXluID0geXliYXNlW3N0YXRlXSArIHRva2VuSWQpID49IDAgJiYgeXluIDwgdGhpcy5ZWUxBU1QgJiYgeXljaGVja1t5eW5dID09PSB0b2tlbklkIHx8IHN0YXRlIDwgdGhpcy5ZWTJUQkxTVEFURSAmJiAoeXluID0geXliYXNlW3N0YXRlICsgdGhpcy5ZWU5MU1RBVEVTXSArIHRva2VuSWQpID49IDAgJiYgeXluIDwgdGhpcy5ZWUxBU1QgJiYgeXljaGVja1t5eW5dID09PSB0b2tlbklkKSAmJiAoeXluID0geXlhY3Rpb25beXluXSkgIT09IHRoaXMuWVlERUZBVUxUKSB7XG4gICAgICAgICAgICAgICAgLypcblx0XHRcdFx0XHQgKiA+PSBZWU5MU1RBVEU6IHNoaWZ0IGFuZCByZWR1Y2Vcblx0XHRcdFx0XHQgKiA+IDA6IHNoaWZ0XG5cdFx0XHRcdFx0ICogPSAwOiBhY2NlcHRcblx0XHRcdFx0XHQgKiA8IDA6IHJlZHVjZVxuXHRcdFx0XHRcdCAqID0gLVlZVU5FWFBFQ1RFRDogZXJyb3Jcblx0XHRcdFx0XHQgKi8gaWYgKHl5biA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLyogc2hpZnQgKi8gKyt0aGlzLnN0YWNrUG9zO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZVN0YWNrW3RoaXMuc3RhY2tQb3NdID0gc3RhdGUgPSB5eW47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueXlhc3RrW3RoaXMuc3RhY2tQb3NdID0gdGhpcy50b2tlblZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVTdGFja1t0aGlzLnN0YWNrUG9zXSA9IHRoaXMuc3RhcnRBdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICAgICAgICB0b2tlbklkID0gdGhpcy5UT0tFTl9OT05FO1xuICAgICAgICAgICAgICAgICAgICBpZiAoeXluIDwgdGhpcy5ZWU5MU1RBVEVTKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgLyogJHl5biA+PSBZWU5MU1RBVEVTIG1lYW5zIHNoaWZ0LWFuZC1yZWR1Y2UgKi8geXluIC09IHRoaXMuWVlOTFNUQVRFUztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB5eW4gPSAteXluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeXluID0geXlkZWZhdWx0W3N0YXRlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IoOzspe1xuICAgICAgICAgICAgLyogcmVkdWNlL2Vycm9yICovIGlmICh5eW4gPT09IDApIHtcbiAgICAgICAgICAgICAgICAvKiBhY2NlcHQgKi8gcmV0dXJuIHRoaXMueXl2YWw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHl5biAhPT0gdGhpcy5ZWVVORVhQRUNURUQpIHtcbiAgICAgICAgICAgICAgICAvKiByZWR1Y2UgKi8gZm9yKHZhciBhdHRyIGluIHRoaXMuZW5kQXR0cmlidXRlcyl7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZVN0YWNrW3RoaXMuc3RhY2tQb3MgLSB5eWxlblt5eW5dXVthdHRyXSA9IHRoaXMuZW5kQXR0cmlidXRlc1thdHRyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gV2UgZG8gbm90IGJ1aWxkIGFuIEFTVCFcbiAgICAgICAgICAgICAgICAvLyB0aGlzWyd5eW4nICsgeXluXShhdHRyaWJ1dGVTdGFja1sgdGhpcy5zdGFja1BvcyAtIHl5bGVuWyB5eW4gXSBdKTtcbiAgICAgICAgICAgICAgICAvKiBHb3RvIC0gc2hpZnQgbm9udGVybWluYWwgKi8gdGhpcy5zdGFja1BvcyAtPSB5eWxlblt5eW5dO1xuICAgICAgICAgICAgICAgIHl5biA9IHl5bGhzW3l5bl07XG4gICAgICAgICAgICAgICAgaWYgKCh5eXAgPSB5eWdiYXNlW3l5bl0gKyBzdGF0ZVN0YWNrW3RoaXMuc3RhY2tQb3NdKSA+PSAwICYmIHl5cCA8IHRoaXMuWVlHTEFTVCAmJiB5eWdjaGVja1t5eXBdID09PSB5eW4pIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB5eWdvdG9beXlwXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHl5Z2RlZmF1bHRbeXluXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKyt0aGlzLnN0YWNrUG9zO1xuICAgICAgICAgICAgICAgIHN0YXRlU3RhY2tbdGhpcy5zdGFja1Bvc10gPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnl5YXN0a1t0aGlzLnN0YWNrUG9zXSA9IHRoaXMueXl2YWw7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlU3RhY2tbdGhpcy5zdGFja1Bvc10gPSB0aGlzLnN0YXJ0QXR0cmlidXRlcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLyogZXJyb3IgKi8gaWYgKGV2YWx1YXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBleHBlY3RlZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5UT0tFTl9NQVBfU0laRTsgKytpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoeXluID0geXliYXNlW3N0YXRlXSArIGkpID49IDAgJiYgeXluIDwgdGhpcy5ZWUxBU1QgJiYgeXljaGVja1t5eW5dID09IGkgfHwgc3RhdGUgPCB0aGlzLllZMlRCTFNUQVRFICYmICh5eW4gPSB5eWJhc2Vbc3RhdGUgKyB0aGlzLllZTkxTVEFURVNdICsgaSkgJiYgeXluIDwgdGhpcy5ZWUxBU1QgJiYgeXljaGVja1t5eW5dID09IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeXlhY3Rpb25beXluXSAhPSB0aGlzLllZVU5FWFBFQ1RFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhwZWN0ZWQubGVuZ3RoID09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFRvbyBtYW55IGV4cGVjdGVkIHRva2VucyAqLyBleHBlY3RlZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQucHVzaCh0aGlzLnRlcm1pbmFsc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBleHBlY3RlZFN0cmluZyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXhwZWN0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZFN0cmluZyA9ICcsIGV4cGVjdGluZyAnICsgZXhwZWN0ZWQuam9pbignIG9yICcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBQSFAuUGFyc2VFcnJvcignc3ludGF4IGVycm9yLCB1bmV4cGVjdGVkICcgKyB0ZXJtaW5hbHNbdG9rZW5JZF0gKyBleHBlY3RlZFN0cmluZywgdGhpcy5zdGFydEF0dHJpYnV0ZXNbJ3N0YXJ0TGluZSddKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydEF0dHJpYnV0ZXNbJ3N0YXJ0TGluZSddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZSA8IHRoaXMuWVlOTFNUQVRFUykgYnJlYWs7XG4gICAgICAgICAgICAvKiA+PSBZWU5MU1RBVEVTIG1lYW5zIHNoaWZ0LWFuZC1yZWR1Y2UgKi8geXluID0gc3RhdGUgLSB0aGlzLllZTkxTVEFURVM7XG4gICAgICAgIH1cbiAgICB9XG59O1xuUEhQLlBhcnNlRXJyb3IgPSBmdW5jdGlvbihtc2csIGxpbmUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtc2c7XG4gICAgdGhpcy5saW5lID0gbGluZTtcbn07XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5nZXROZXh0VG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0YXJ0QXR0cmlidXRlcyA9IHt9O1xuICAgIHRoaXMuZW5kQXR0cmlidXRlcyA9IHt9O1xuICAgIHZhciB0b2tlbiwgdG1wO1xuICAgIHdoaWxlKHRoaXMudG9rZW5zWysrdGhpcy5wb3NdICE9PSB1bmRlZmluZWQpe1xuICAgICAgICB0b2tlbiA9IHRoaXMudG9rZW5zW3RoaXMucG9zXTtcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy5zdGFydEF0dHJpYnV0ZXNbJ3N0YXJ0TGluZSddID0gdGhpcy5saW5lO1xuICAgICAgICAgICAgdGhpcy5lbmRBdHRyaWJ1dGVzWydlbmRMaW5lJ10gPSB0aGlzLmxpbmU7XG4gICAgICAgICAgICAvLyBidWcgaW4gdG9rZW5fZ2V0X2FsbFxuICAgICAgICAgICAgaWYgKCdiXCInID09PSB0b2tlbikge1xuICAgICAgICAgICAgICAgIHRoaXMudG9rZW5WYWx1ZSA9ICdiXCInO1xuICAgICAgICAgICAgICAgIHJldHVybiAnXCInLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudG9rZW5WYWx1ZSA9IHRva2VuO1xuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5saW5lICs9ICh0bXAgPSB0b2tlblsxXS5tYXRjaCgvXFxuL2cpKSA9PT0gbnVsbCA/IDAgOiB0bXAubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKFBIUC5Db25zdGFudHMuVF9DT01NRU5UID09PSB0b2tlblswXSkge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnN0YXJ0QXR0cmlidXRlc1snY29tbWVudHMnXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydEF0dHJpYnV0ZXNbJ2NvbW1lbnRzJ10gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydEF0dHJpYnV0ZXNbJ2NvbW1lbnRzJ10ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY29tbWVudFwiLFxuICAgICAgICAgICAgICAgICAgICBjb21tZW50OiB0b2tlblsxXSxcbiAgICAgICAgICAgICAgICAgICAgbGluZTogdG9rZW5bMl1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoUEhQLkNvbnN0YW50cy5UX0FUVFJJQlVURSA9PT0gdG9rZW5bMF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuVmFsdWUgPSB0b2tlblsxXTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0QXR0cmlidXRlc1snc3RhcnRMaW5lJ10gPSB0b2tlblsyXTtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZEF0dHJpYnV0ZXNbJ2VuZExpbmUnXSA9IHRoaXMubGluZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoUEhQLkNvbnN0YW50cy5UX0RPQ19DT01NRU5UID09PSB0b2tlblswXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRBdHRyaWJ1dGVzWydjb21tZW50cyddLnB1c2gobmV3IFBIUFBhcnNlcl9Db21tZW50X0RvYyh0b2tlblsxXSwgdG9rZW5bMl0pKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kcm9wVG9rZW5zW3Rva2VuWzBdXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2tlblZhbHVlID0gdG9rZW5bMV07XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydEF0dHJpYnV0ZXNbJ3N0YXJ0TGluZSddID0gdG9rZW5bMl07XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRBdHRyaWJ1dGVzWydlbmRMaW5lJ10gPSB0aGlzLmxpbmU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5NYXBbdG9rZW5bMF1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuc3RhcnRBdHRyaWJ1dGVzWydzdGFydExpbmUnXSA9IHRoaXMubGluZTtcbiAgICAvLyAwIGlzIHRoZSBFT0YgdG9rZW5cbiAgICByZXR1cm4gMDtcbn07XG5QSFAuUGFyc2VyLnByb3RvdHlwZS50b2tlbk5hbWUgPSBmdW5jdGlvbih0b2tlbikge1xuICAgIHZhciBjb25zdGFudHMgPSBbXG4gICAgICAgIFwiVF9USFJPV1wiLFxuICAgICAgICBcIlRfSU5DTFVERVwiLFxuICAgICAgICBcIlRfSU5DTFVERV9PTkNFXCIsXG4gICAgICAgIFwiVF9FVkFMXCIsXG4gICAgICAgIFwiVF9SRVFVSVJFXCIsXG4gICAgICAgIFwiVF9SRVFVSVJFX09OQ0VcIixcbiAgICAgICAgXCJUX0xPR0lDQUxfT1JcIixcbiAgICAgICAgXCJUX0xPR0lDQUxfWE9SXCIsXG4gICAgICAgIFwiVF9MT0dJQ0FMX0FORFwiLFxuICAgICAgICBcIlRfUFJJTlRcIixcbiAgICAgICAgXCJUX1lJRUxEXCIsXG4gICAgICAgIFwiVF9ET1VCTEVfQVJST1dcIixcbiAgICAgICAgXCJUX1lJRUxEX0ZST01cIixcbiAgICAgICAgXCJUX1BMVVNfRVFVQUxcIixcbiAgICAgICAgXCJUX01JTlVTX0VRVUFMXCIsXG4gICAgICAgIFwiVF9NVUxfRVFVQUxcIixcbiAgICAgICAgXCJUX0RJVl9FUVVBTFwiLFxuICAgICAgICBcIlRfQ09OQ0FUX0VRVUFMXCIsXG4gICAgICAgIFwiVF9NT0RfRVFVQUxcIixcbiAgICAgICAgXCJUX0FORF9FUVVBTFwiLFxuICAgICAgICBcIlRfT1JfRVFVQUxcIixcbiAgICAgICAgXCJUX1hPUl9FUVVBTFwiLFxuICAgICAgICBcIlRfU0xfRVFVQUxcIixcbiAgICAgICAgXCJUX1NSX0VRVUFMXCIsXG4gICAgICAgIFwiVF9QT1dfRVFVQUxcIixcbiAgICAgICAgXCJUX0NPQUxFU0NFX0VRVUFMXCIsXG4gICAgICAgIFwiVF9DT0FMRVNDRVwiLFxuICAgICAgICBcIlRfQk9PTEVBTl9PUlwiLFxuICAgICAgICBcIlRfQk9PTEVBTl9BTkRcIixcbiAgICAgICAgXCJUX0FNUEVSU0FORF9OT1RfRk9MTE9XRURfQllfVkFSX09SX1ZBUkFSR1wiLFxuICAgICAgICBcIlRfQU1QRVJTQU5EX0ZPTExPV0VEX0JZX1ZBUl9PUl9WQVJBUkdcIixcbiAgICAgICAgXCJUX0lTX0VRVUFMXCIsXG4gICAgICAgIFwiVF9JU19OT1RfRVFVQUxcIixcbiAgICAgICAgXCJUX0lTX0lERU5USUNBTFwiLFxuICAgICAgICBcIlRfSVNfTk9UX0lERU5USUNBTFwiLFxuICAgICAgICBcIlRfU1BBQ0VTSElQXCIsXG4gICAgICAgIFwiVF9JU19TTUFMTEVSX09SX0VRVUFMXCIsXG4gICAgICAgIFwiVF9JU19HUkVBVEVSX09SX0VRVUFMXCIsXG4gICAgICAgIFwiVF9TTFwiLFxuICAgICAgICBcIlRfU1JcIixcbiAgICAgICAgXCJUX0lOU1RBTkNFT0ZcIixcbiAgICAgICAgXCJUX0lOQ1wiLFxuICAgICAgICBcIlRfREVDXCIsXG4gICAgICAgIFwiVF9JTlRfQ0FTVFwiLFxuICAgICAgICBcIlRfRE9VQkxFX0NBU1RcIixcbiAgICAgICAgXCJUX1NUUklOR19DQVNUXCIsXG4gICAgICAgIFwiVF9BUlJBWV9DQVNUXCIsXG4gICAgICAgIFwiVF9PQkpFQ1RfQ0FTVFwiLFxuICAgICAgICBcIlRfQk9PTF9DQVNUXCIsXG4gICAgICAgIFwiVF9VTlNFVF9DQVNUXCIsXG4gICAgICAgIFwiVF9QT1dcIixcbiAgICAgICAgXCJUX05FV1wiLFxuICAgICAgICBcIlRfQ0xPTkVcIixcbiAgICAgICAgXCJUX0VYSVRcIixcbiAgICAgICAgXCJUX0lGXCIsXG4gICAgICAgIFwiVF9FTFNFSUZcIixcbiAgICAgICAgXCJUX0VMU0VcIixcbiAgICAgICAgXCJUX0VORElGXCIsXG4gICAgICAgIFwiVF9MTlVNQkVSXCIsXG4gICAgICAgIFwiVF9ETlVNQkVSXCIsXG4gICAgICAgIFwiVF9TVFJJTkdcIixcbiAgICAgICAgXCJUX1NUUklOR19WQVJOQU1FXCIsXG4gICAgICAgIFwiVF9WQVJJQUJMRVwiLFxuICAgICAgICBcIlRfTlVNX1NUUklOR1wiLFxuICAgICAgICBcIlRfSU5MSU5FX0hUTUxcIixcbiAgICAgICAgXCJUX0VOQ0FQU0VEX0FORF9XSElURVNQQUNFXCIsXG4gICAgICAgIFwiVF9DT05TVEFOVF9FTkNBUFNFRF9TVFJJTkdcIixcbiAgICAgICAgXCJUX0VDSE9cIixcbiAgICAgICAgXCJUX0RPXCIsXG4gICAgICAgIFwiVF9XSElMRVwiLFxuICAgICAgICBcIlRfRU5EV0hJTEVcIixcbiAgICAgICAgXCJUX0ZPUlwiLFxuICAgICAgICBcIlRfRU5ERk9SXCIsXG4gICAgICAgIFwiVF9GT1JFQUNIXCIsXG4gICAgICAgIFwiVF9FTkRGT1JFQUNIXCIsXG4gICAgICAgIFwiVF9ERUNMQVJFXCIsXG4gICAgICAgIFwiVF9FTkRERUNMQVJFXCIsXG4gICAgICAgIFwiVF9BU1wiLFxuICAgICAgICBcIlRfU1dJVENIXCIsXG4gICAgICAgIFwiVF9NQVRDSFwiLFxuICAgICAgICBcIlRfRU5EU1dJVENIXCIsXG4gICAgICAgIFwiVF9DQVNFXCIsXG4gICAgICAgIFwiVF9ERUZBVUxUXCIsXG4gICAgICAgIFwiVF9CUkVBS1wiLFxuICAgICAgICBcIlRfQ09OVElOVUVcIixcbiAgICAgICAgXCJUX0dPVE9cIixcbiAgICAgICAgXCJUX0ZVTkNUSU9OXCIsXG4gICAgICAgIFwiVF9GTlwiLFxuICAgICAgICBcIlRfQ09OU1RcIixcbiAgICAgICAgXCJUX1JFVFVSTlwiLFxuICAgICAgICBcIlRfVFJZXCIsXG4gICAgICAgIFwiVF9DQVRDSFwiLFxuICAgICAgICBcIlRfRklOQUxMWVwiLFxuICAgICAgICBcIlRfVEhST1dcIixcbiAgICAgICAgXCJUX1VTRVwiLFxuICAgICAgICBcIlRfSU5TVEVBRE9GXCIsXG4gICAgICAgIFwiVF9HTE9CQUxcIixcbiAgICAgICAgXCJUX1NUQVRJQ1wiLFxuICAgICAgICBcIlRfQUJTVFJBQ1RcIixcbiAgICAgICAgXCJUX0ZJTkFMXCIsXG4gICAgICAgIFwiVF9QUklWQVRFXCIsXG4gICAgICAgIFwiVF9QUk9URUNURURcIixcbiAgICAgICAgXCJUX1BVQkxJQ1wiLFxuICAgICAgICBcIlRfUkVBRE9OTFlcIixcbiAgICAgICAgXCJUX1ZBUlwiLFxuICAgICAgICBcIlRfVU5TRVRcIixcbiAgICAgICAgXCJUX0lTU0VUXCIsXG4gICAgICAgIFwiVF9FTVBUWVwiLFxuICAgICAgICBcIlRfSEFMVF9DT01QSUxFUlwiLFxuICAgICAgICBcIlRfQ0xBU1NcIixcbiAgICAgICAgXCJUX1RSQUlUXCIsXG4gICAgICAgIFwiVF9JTlRFUkZBQ0VcIixcbiAgICAgICAgXCJUX0VOVU1cIixcbiAgICAgICAgXCJUX0VYVEVORFNcIixcbiAgICAgICAgXCJUX0lNUExFTUVOVFNcIixcbiAgICAgICAgXCJUX09CSkVDVF9PUEVSQVRPUlwiLFxuICAgICAgICBcIlRfTlVMTFNBRkVfT0JKRUNUX09QRVJBVE9SXCIsXG4gICAgICAgIFwiVF9ET1VCTEVfQVJST1dcIixcbiAgICAgICAgXCJUX0xJU1RcIixcbiAgICAgICAgXCJUX0FSUkFZXCIsXG4gICAgICAgIFwiVF9DQUxMQUJMRVwiLFxuICAgICAgICBcIlRfQ0xBU1NfQ1wiLFxuICAgICAgICBcIlRfVFJBSVRfQ1wiLFxuICAgICAgICBcIlRfTUVUSE9EX0NcIixcbiAgICAgICAgXCJUX0ZVTkNfQ1wiLFxuICAgICAgICBcIlRfTElORVwiLFxuICAgICAgICBcIlRfRklMRVwiLFxuICAgICAgICBcIlRfU1RBUlRfSEVSRURPQ1wiLFxuICAgICAgICBcIlRfRU5EX0hFUkVET0NcIixcbiAgICAgICAgXCJUX0RPTExBUl9PUEVOX0NVUkxZX0JSQUNFU1wiLFxuICAgICAgICBcIlRfQ1VSTFlfT1BFTlwiLFxuICAgICAgICBcIlRfUEFBTUFZSU1fTkVLVURPVEFZSU1cIixcbiAgICAgICAgXCJUX05BTUVTUEFDRVwiLFxuICAgICAgICBcIlRfTlNfQ1wiLFxuICAgICAgICBcIlRfRElSXCIsXG4gICAgICAgIFwiVF9OU19TRVBBUkFUT1JcIixcbiAgICAgICAgXCJUX0VMTElQU0lTXCIsXG4gICAgICAgIFwiVF9OQU1FX0ZVTExZX1FVQUxJRklFRFwiLFxuICAgICAgICBcIlRfTkFNRV9RVUFMSUZJRURcIixcbiAgICAgICAgXCJUX05BTUVfUkVMQVRJVkVcIixcbiAgICAgICAgXCJUX0FUVFJJQlVURVwiLFxuICAgICAgICBcIlRfRU5VTVwiLFxuICAgICAgICBcIlRfQkFEX0NIQVJBQ1RFUlwiLFxuICAgICAgICBcIlRfQ09NTUVOVFwiLFxuICAgICAgICBcIlRfRE9DX0NPTU1FTlRcIixcbiAgICAgICAgXCJUX09QRU5fVEFHXCIsXG4gICAgICAgIFwiVF9PUEVOX1RBR19XSVRIX0VDSE9cIixcbiAgICAgICAgXCJUX0NMT1NFX1RBR1wiLFxuICAgICAgICBcIlRfV0hJVEVTUEFDRVwiXG4gICAgXTtcbiAgICB2YXIgY3VycmVudCA9IFwiVU5LTk9XTlwiO1xuICAgIGNvbnN0YW50cy5zb21lKGZ1bmN0aW9uKGNvbnN0YW50KSB7XG4gICAgICAgIGlmIChQSFAuQ29uc3RhbnRzW2NvbnN0YW50XSA9PT0gdG9rZW4pIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjb25zdGFudDtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG59O1xuLyoqXG4gKiBDcmVhdGVzIHRoZSB0b2tlbiBtYXAuXG4gKlxuICogVGhlIHRva2VuIG1hcCBtYXBzIHRoZSBQSFAgaW50ZXJuYWwgdG9rZW4gaWRlbnRpZmllcnNcbiAqIHRvIHRoZSBpZGVudGlmaWVycyB1c2VkIGJ5IHRoZSBQSFAuUGFyc2VyLiBBZGRpdGlvbmFsbHkgaXRcbiAqIG1hcHMgVF9PUEVOX1RBR19XSVRIX0VDSE8gdG8gVF9FQ0hPIGFuZCBUX0NMT1NFX1RBRyB0byAnOycuXG4gKlxuICogQHJldHVybiBhcnJheSBUaGUgdG9rZW4gbWFwXG4gKi8gUEhQLlBhcnNlci5wcm90b3R5cGUuY3JlYXRlVG9rZW5NYXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdG9rZW5NYXAgPSB7fSwgbmFtZSwgaTtcbiAgICAvLyAyNTYgaXMgdGhlIG1pbmltdW0gcG9zc2libGUgdG9rZW4gbnVtYmVyLCBhcyBldmVyeXRoaW5nIGJlbG93XG4gICAgLy8gaXQgaXMgYW4gQVNDSUkgdmFsdWVcbiAgICBmb3IoaSA9IDI1NjsgaSA8IDEwMDA7ICsraSl7XG4gICAgICAgIC8vIFRfT1BFTl9UQUdfV0lUSF9FQ0hPIHdpdGggZHJvcHBlZCBUX09QRU5fVEFHIHJlc3VsdHMgaW4gVF9FQ0hPXG4gICAgICAgIGlmIChQSFAuQ29uc3RhbnRzLlRfT1BFTl9UQUdfV0lUSF9FQ0hPID09PSBpKSB7XG4gICAgICAgICAgICB0b2tlbk1hcFtpXSA9IFBIUC5Db25zdGFudHMuVF9FQ0hPO1xuICAgICAgICAvLyBUX0NMT1NFX1RBRyBpcyBlcXVpdmFsZW50IHRvICc7J1xuICAgICAgICB9IGVsc2UgaWYgKFBIUC5Db25zdGFudHMuVF9DTE9TRV9UQUcgPT09IGkpIHtcbiAgICAgICAgICAgIHRva2VuTWFwW2ldID0gNTk7XG4gICAgICAgIC8vIGFuZCB0aGUgb3RoZXJzIGNhbiBiZSBtYXBwZWQgZGlyZWN0bHlcbiAgICAgICAgfSBlbHNlIGlmICgnVU5LTk9XTicgIT09IChuYW1lID0gdGhpcy50b2tlbk5hbWUoaSkpKSB7XG4gICAgICAgICAgICB0b2tlbk1hcFtpXSA9IHRoaXNbbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRva2VuTWFwO1xufTtcbi8qIFRoaXMgaXMgYW4gYXV0b21hdGljYWxseSBHRU5FUkFURUQgZmlsZSwgd2hpY2ggc2hvdWxkIG5vdCBiZSBtYW51YWxseSBlZGl0ZWQuXG5cdCAqIEluc3RlYWQgZWRpdCBvbmUgb2YgdGhlIGZvbGxvd2luZzpcblx0ICogICogdGhlIGdyYW1tYXIgZmlsZSBncmFtbWFyL3plbmRfbGFuZ3VhZ2VfcGFyc2VyLmpzeVxuXHQgKiAgKiB0aGUgcGFyc2VyIHNrZWxldG9uIGdyYW1tYXIva3ltYWNjLmpzLnBhcnNlclxuXHQgKiAgKiB0aGUgcHJlcHJvY2Vzc2luZyBzY3JpcHQgZ3JhbW1hci9yZWJ1aWxkUGFyc2VyLnBocFxuXHQgKlxuXHQgKiBUaGUgc2tlbGV0b24gZm9yIHRoaXMgcGFyc2VyIHdhcyB3cml0dGVuIGJ5IE1vcml5b3NoaSBLb2l6dW1pIGFuZCBpcyBiYXNlZCBvblxuXHQgKiB0aGUgd29yayBieSBNYXNhdG8gQml0byBhbmQgaXMgaW4gdGhlIFBVQkxJQyBET01BSU4uXG5cdCAqIFBvcnRlZCB0byBKYXZhU2NyaXB0IGJ5IE5pa2xhcyB2b24gSGVydHplblxuXHQgKi8gUEhQLlBhcnNlci5wcm90b3R5cGUuVE9LRU5fTk9ORSA9IC0xO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVE9LRU5fSU5WQUxJRCA9IDE3NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRPS0VOX01BUF9TSVpFID0gNDAzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuWVlMQVNUID0gMTE5NjtcblBIUC5QYXJzZXIucHJvdG90eXBlLllZMlRCTFNUQVRFID0gNDIwO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuWVlHTEFTVCA9IDU0NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLllZTkxTVEFURVMgPSA3MTA7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5ZWVVORVhQRUNURUQgPSAzMjc2NztcblBIUC5QYXJzZXIucHJvdG90eXBlLllZREVGQVVMVCA9IC0zMjc2Njtcbi8vIHt7eyBUb2tlbnNcblBIUC5QYXJzZXIucHJvdG90eXBlLllZRVJSVE9LID0gMjU2O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9USFJPVyA9IDI1NztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfSU5DTFVERSA9IDI1ODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfSU5DTFVERV9PTkNFID0gMjU5O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9FVkFMID0gMjYwO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9SRVFVSVJFID0gMjYxO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9SRVFVSVJFX09OQ0UgPSAyNjI7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0xPR0lDQUxfT1IgPSAyNjM7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0xPR0lDQUxfWE9SID0gMjY0O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9MT0dJQ0FMX0FORCA9IDI2NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfUFJJTlQgPSAyNjY7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1lJRUxEID0gMjY3O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9ET1VCTEVfQVJST1cgPSAyNjg7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1lJRUxEX0ZST00gPSAyNjk7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1BMVVNfRVFVQUwgPSAyNzA7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX01JTlVTX0VRVUFMID0gMjcxO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9NVUxfRVFVQUwgPSAyNzI7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0RJVl9FUVVBTCA9IDI3MztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ09OQ0FUX0VRVUFMID0gMjc0O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9NT0RfRVFVQUwgPSAyNzU7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0FORF9FUVVBTCA9IDI3NjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfT1JfRVFVQUwgPSAyNzc7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1hPUl9FUVVBTCA9IDI3ODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfU0xfRVFVQUwgPSAyNzk7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1NSX0VRVUFMID0gMjgwO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9QT1dfRVFVQUwgPSAyODE7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0NPQUxFU0NFX0VRVUFMID0gMjgyO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9DT0FMRVNDRSA9IDI4MztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQk9PTEVBTl9PUiA9IDI4NDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQk9PTEVBTl9BTkQgPSAyODU7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0FNUEVSU0FORF9OT1RfRk9MTE9XRURfQllfVkFSX09SX1ZBUkFSRyA9IDI4NjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQU1QRVJTQU5EX0ZPTExPV0VEX0JZX1ZBUl9PUl9WQVJBUkcgPSAyODc7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0lTX0VRVUFMID0gMjg4O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9JU19OT1RfRVFVQUwgPSAyODk7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0lTX0lERU5USUNBTCA9IDI5MDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfSVNfTk9UX0lERU5USUNBTCA9IDI5MTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfU1BBQ0VTSElQID0gMjkyO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9JU19TTUFMTEVSX09SX0VRVUFMID0gMjkzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9JU19HUkVBVEVSX09SX0VRVUFMID0gMjk0O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9TTCA9IDI5NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfU1IgPSAyOTY7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0lOU1RBTkNFT0YgPSAyOTc7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0lOQyA9IDI5ODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfREVDID0gMjk5O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9JTlRfQ0FTVCA9IDMwMDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRE9VQkxFX0NBU1QgPSAzMDE7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1NUUklOR19DQVNUID0gMzAyO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9BUlJBWV9DQVNUID0gMzAzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9PQkpFQ1RfQ0FTVCA9IDMwNDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQk9PTF9DQVNUID0gMzA1O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9VTlNFVF9DQVNUID0gMzA2O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9QT1cgPSAzMDc7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX05FVyA9IDMwODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ0xPTkUgPSAzMDk7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VYSVQgPSAzMTA7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0lGID0gMzExO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9FTFNFSUYgPSAzMTI7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VMU0UgPSAzMTM7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VORElGID0gMzE0O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9MTlVNQkVSID0gMzE1O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9ETlVNQkVSID0gMzE2O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9TVFJJTkcgPSAzMTc7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1NUUklOR19WQVJOQU1FID0gMzE4O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9WQVJJQUJMRSA9IDMxOTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfTlVNX1NUUklORyA9IDMyMDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfSU5MSU5FX0hUTUwgPSAzMjE7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VOQ0FQU0VEX0FORF9XSElURVNQQUNFID0gMzIyO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9DT05TVEFOVF9FTkNBUFNFRF9TVFJJTkcgPSAzMjM7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VDSE8gPSAzMjQ7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0RPID0gMzI1O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9XSElMRSA9IDMyNjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRU5EV0hJTEUgPSAzMjc7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0ZPUiA9IDMyODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRU5ERk9SID0gMzI5O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9GT1JFQUNIID0gMzMwO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9FTkRGT1JFQUNIID0gMzMxO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9ERUNMQVJFID0gMzMyO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9FTkRERUNMQVJFID0gMzMzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9BUyA9IDMzNDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfU1dJVENIID0gMzM1O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9NQVRDSCA9IDMzNjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRU5EU1dJVENIID0gMzM3O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9DQVNFID0gMzM4O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9ERUZBVUxUID0gMzM5O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9CUkVBSyA9IDM0MDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ09OVElOVUUgPSAzNDE7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0dPVE8gPSAzNDI7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0ZVTkNUSU9OID0gMzQzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9GTiA9IDM0NDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ09OU1QgPSAzNDU7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1JFVFVSTiA9IDM0NjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfVFJZID0gMzQ3O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9DQVRDSCA9IDM0ODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRklOQUxMWSA9IDM0OTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfVVNFID0gMzUwO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9JTlNURUFET0YgPSAzNTE7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0dMT0JBTCA9IDM1MjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfU1RBVElDID0gMzUzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9BQlNUUkFDVCA9IDM1NDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRklOQUwgPSAzNTU7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1BSSVZBVEUgPSAzNTY7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1BST1RFQ1RFRCA9IDM1NztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfUFVCTElDID0gMzU4O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9SRUFET05MWSA9IDM1OTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfVkFSID0gMzYwO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9VTlNFVCA9IDM2MTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfSVNTRVQgPSAzNjI7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VNUFRZID0gMzYzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9IQUxUX0NPTVBJTEVSID0gMzY0O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9DTEFTUyA9IDM2NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfVFJBSVQgPSAzNjY7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0lOVEVSRkFDRSA9IDM2NztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRU5VTSA9IDM2ODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRVhURU5EUyA9IDM2OTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfSU1QTEVNRU5UUyA9IDM3MDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfT0JKRUNUX09QRVJBVE9SID0gMzcxO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9OVUxMU0FGRV9PQkpFQ1RfT1BFUkFUT1IgPSAzNzI7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0xJU1QgPSAzNzM7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0FSUkFZID0gMzc0O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9DQUxMQUJMRSA9IDM3NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ0xBU1NfQyA9IDM3NjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfVFJBSVRfQyA9IDM3NztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfTUVUSE9EX0MgPSAzNzg7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0ZVTkNfQyA9IDM3OTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfTElORSA9IDM4MDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRklMRSA9IDM4MTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfU1RBUlRfSEVSRURPQyA9IDM4MjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRU5EX0hFUkVET0MgPSAzODM7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0RPTExBUl9PUEVOX0NVUkxZX0JSQUNFUyA9IDM4NDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ1VSTFlfT1BFTiA9IDM4NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfUEFBTUFZSU1fTkVLVURPVEFZSU0gPSAzODY7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX05BTUVTUEFDRSA9IDM4NztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfTlNfQyA9IDM4ODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRElSID0gMzg5O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9OU19TRVBBUkFUT1IgPSAzOTA7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VMTElQU0lTID0gMzkxO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9OQU1FX0ZVTExZX1FVQUxJRklFRCA9IDM5MjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfTkFNRV9RVUFMSUZJRUQgPSAzOTM7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX05BTUVfUkVMQVRJVkUgPSAzOTQ7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0FUVFJJQlVURSA9IDM5NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQkFEX0NIQVJBQ1RFUiA9IDM5NjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ09NTUVOVCA9IDM5NztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRE9DX0NPTU1FTlQgPSAzOTg7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX09QRU5fVEFHID0gMzk5O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9PUEVOX1RBR19XSVRIX0VDSE8gPSA0MDA7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0NMT1NFX1RBRyA9IDQwMTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfV0hJVEVTUEFDRSA9IDQwMjtcbi8vIH19fVxuLyogQHZhciBhcnJheSBNYXAgb2YgdG9rZW4gaWRzIHRvIHRoZWlyIHJlc3BlY3RpdmUgbmFtZXMgKi8gUEhQLlBhcnNlci5wcm90b3R5cGUudGVybWluYWxzID0gW1xuICAgIFwiRU9GXCIsXG4gICAgXCJlcnJvclwiLFxuICAgIFwiVF9USFJPV1wiLFxuICAgIFwiVF9JTkNMVURFXCIsXG4gICAgXCJUX0lOQ0xVREVfT05DRVwiLFxuICAgIFwiVF9FVkFMXCIsXG4gICAgXCJUX1JFUVVJUkVcIixcbiAgICBcIlRfUkVRVUlSRV9PTkNFXCIsXG4gICAgXCInLCdcIixcbiAgICBcIlRfTE9HSUNBTF9PUlwiLFxuICAgIFwiVF9MT0dJQ0FMX1hPUlwiLFxuICAgIFwiVF9MT0dJQ0FMX0FORFwiLFxuICAgIFwiVF9QUklOVFwiLFxuICAgIFwiVF9ZSUVMRFwiLFxuICAgIFwiVF9ET1VCTEVfQVJST1dcIixcbiAgICBcIlRfWUlFTERfRlJPTVwiLFxuICAgIFwiJz0nXCIsXG4gICAgXCJUX1BMVVNfRVFVQUxcIixcbiAgICBcIlRfTUlOVVNfRVFVQUxcIixcbiAgICBcIlRfTVVMX0VRVUFMXCIsXG4gICAgXCJUX0RJVl9FUVVBTFwiLFxuICAgIFwiVF9DT05DQVRfRVFVQUxcIixcbiAgICBcIlRfTU9EX0VRVUFMXCIsXG4gICAgXCJUX0FORF9FUVVBTFwiLFxuICAgIFwiVF9PUl9FUVVBTFwiLFxuICAgIFwiVF9YT1JfRVFVQUxcIixcbiAgICBcIlRfU0xfRVFVQUxcIixcbiAgICBcIlRfU1JfRVFVQUxcIixcbiAgICBcIlRfUE9XX0VRVUFMXCIsXG4gICAgXCJUX0NPQUxFU0NFX0VRVUFMXCIsXG4gICAgXCInPydcIixcbiAgICBcIic6J1wiLFxuICAgIFwiVF9DT0FMRVNDRVwiLFxuICAgIFwiVF9CT09MRUFOX09SXCIsXG4gICAgXCJUX0JPT0xFQU5fQU5EXCIsXG4gICAgXCInfCdcIixcbiAgICBcIideJ1wiLFxuICAgIFwiVF9BTVBFUlNBTkRfTk9UX0ZPTExPV0VEX0JZX1ZBUl9PUl9WQVJBUkdcIixcbiAgICBcIlRfQU1QRVJTQU5EX0ZPTExPV0VEX0JZX1ZBUl9PUl9WQVJBUkdcIixcbiAgICBcIlRfSVNfRVFVQUxcIixcbiAgICBcIlRfSVNfTk9UX0VRVUFMXCIsXG4gICAgXCJUX0lTX0lERU5USUNBTFwiLFxuICAgIFwiVF9JU19OT1RfSURFTlRJQ0FMXCIsXG4gICAgXCJUX1NQQUNFU0hJUFwiLFxuICAgIFwiJzwnXCIsXG4gICAgXCJUX0lTX1NNQUxMRVJfT1JfRVFVQUxcIixcbiAgICBcIic+J1wiLFxuICAgIFwiVF9JU19HUkVBVEVSX09SX0VRVUFMXCIsXG4gICAgXCJUX1NMXCIsXG4gICAgXCJUX1NSXCIsXG4gICAgXCInKydcIixcbiAgICBcIictJ1wiLFxuICAgIFwiJy4nXCIsXG4gICAgXCInKidcIixcbiAgICBcIicvJ1wiLFxuICAgIFwiJyUnXCIsXG4gICAgXCInISdcIixcbiAgICBcIlRfSU5TVEFOQ0VPRlwiLFxuICAgIFwiJ34nXCIsXG4gICAgXCJUX0lOQ1wiLFxuICAgIFwiVF9ERUNcIixcbiAgICBcIlRfSU5UX0NBU1RcIixcbiAgICBcIlRfRE9VQkxFX0NBU1RcIixcbiAgICBcIlRfU1RSSU5HX0NBU1RcIixcbiAgICBcIlRfQVJSQVlfQ0FTVFwiLFxuICAgIFwiVF9PQkpFQ1RfQ0FTVFwiLFxuICAgIFwiVF9CT09MX0NBU1RcIixcbiAgICBcIlRfVU5TRVRfQ0FTVFwiLFxuICAgIFwiJ0AnXCIsXG4gICAgXCJUX1BPV1wiLFxuICAgIFwiJ1snXCIsXG4gICAgXCJUX05FV1wiLFxuICAgIFwiVF9DTE9ORVwiLFxuICAgIFwiVF9FWElUXCIsXG4gICAgXCJUX0lGXCIsXG4gICAgXCJUX0VMU0VJRlwiLFxuICAgIFwiVF9FTFNFXCIsXG4gICAgXCJUX0VORElGXCIsXG4gICAgXCJUX0xOVU1CRVJcIixcbiAgICBcIlRfRE5VTUJFUlwiLFxuICAgIFwiVF9TVFJJTkdcIixcbiAgICBcIlRfU1RSSU5HX1ZBUk5BTUVcIixcbiAgICBcIlRfVkFSSUFCTEVcIixcbiAgICBcIlRfTlVNX1NUUklOR1wiLFxuICAgIFwiVF9JTkxJTkVfSFRNTFwiLFxuICAgIFwiVF9FTkNBUFNFRF9BTkRfV0hJVEVTUEFDRVwiLFxuICAgIFwiVF9DT05TVEFOVF9FTkNBUFNFRF9TVFJJTkdcIixcbiAgICBcIlRfRUNIT1wiLFxuICAgIFwiVF9ET1wiLFxuICAgIFwiVF9XSElMRVwiLFxuICAgIFwiVF9FTkRXSElMRVwiLFxuICAgIFwiVF9GT1JcIixcbiAgICBcIlRfRU5ERk9SXCIsXG4gICAgXCJUX0ZPUkVBQ0hcIixcbiAgICBcIlRfRU5ERk9SRUFDSFwiLFxuICAgIFwiVF9ERUNMQVJFXCIsXG4gICAgXCJUX0VORERFQ0xBUkVcIixcbiAgICBcIlRfQVNcIixcbiAgICBcIlRfU1dJVENIXCIsXG4gICAgXCJUX01BVENIXCIsXG4gICAgXCJUX0VORFNXSVRDSFwiLFxuICAgIFwiVF9DQVNFXCIsXG4gICAgXCJUX0RFRkFVTFRcIixcbiAgICBcIlRfQlJFQUtcIixcbiAgICBcIlRfQ09OVElOVUVcIixcbiAgICBcIlRfR09UT1wiLFxuICAgIFwiVF9GVU5DVElPTlwiLFxuICAgIFwiVF9GTlwiLFxuICAgIFwiVF9DT05TVFwiLFxuICAgIFwiVF9SRVRVUk5cIixcbiAgICBcIlRfVFJZXCIsXG4gICAgXCJUX0NBVENIXCIsXG4gICAgXCJUX0ZJTkFMTFlcIixcbiAgICBcIlRfVVNFXCIsXG4gICAgXCJUX0lOU1RFQURPRlwiLFxuICAgIFwiVF9HTE9CQUxcIixcbiAgICBcIlRfU1RBVElDXCIsXG4gICAgXCJUX0FCU1RSQUNUXCIsXG4gICAgXCJUX0ZJTkFMXCIsXG4gICAgXCJUX1BSSVZBVEVcIixcbiAgICBcIlRfUFJPVEVDVEVEXCIsXG4gICAgXCJUX1BVQkxJQ1wiLFxuICAgIFwiVF9SRUFET05MWVwiLFxuICAgIFwiVF9WQVJcIixcbiAgICBcIlRfVU5TRVRcIixcbiAgICBcIlRfSVNTRVRcIixcbiAgICBcIlRfRU1QVFlcIixcbiAgICBcIlRfSEFMVF9DT01QSUxFUlwiLFxuICAgIFwiVF9DTEFTU1wiLFxuICAgIFwiVF9UUkFJVFwiLFxuICAgIFwiVF9JTlRFUkZBQ0VcIixcbiAgICBcIlRfRU5VTVwiLFxuICAgIFwiVF9FWFRFTkRTXCIsXG4gICAgXCJUX0lNUExFTUVOVFNcIixcbiAgICBcIlRfT0JKRUNUX09QRVJBVE9SXCIsXG4gICAgXCJUX05VTExTQUZFX09CSkVDVF9PUEVSQVRPUlwiLFxuICAgIFwiVF9MSVNUXCIsXG4gICAgXCJUX0FSUkFZXCIsXG4gICAgXCJUX0NBTExBQkxFXCIsXG4gICAgXCJUX0NMQVNTX0NcIixcbiAgICBcIlRfVFJBSVRfQ1wiLFxuICAgIFwiVF9NRVRIT0RfQ1wiLFxuICAgIFwiVF9GVU5DX0NcIixcbiAgICBcIlRfTElORVwiLFxuICAgIFwiVF9GSUxFXCIsXG4gICAgXCJUX1NUQVJUX0hFUkVET0NcIixcbiAgICBcIlRfRU5EX0hFUkVET0NcIixcbiAgICBcIlRfRE9MTEFSX09QRU5fQ1VSTFlfQlJBQ0VTXCIsXG4gICAgXCJUX0NVUkxZX09QRU5cIixcbiAgICBcIlRfUEFBTUFZSU1fTkVLVURPVEFZSU1cIixcbiAgICBcIlRfTkFNRVNQQUNFXCIsXG4gICAgXCJUX05TX0NcIixcbiAgICBcIlRfRElSXCIsXG4gICAgXCJUX05TX1NFUEFSQVRPUlwiLFxuICAgIFwiVF9FTExJUFNJU1wiLFxuICAgIFwiVF9OQU1FX0ZVTExZX1FVQUxJRklFRFwiLFxuICAgIFwiVF9OQU1FX1FVQUxJRklFRFwiLFxuICAgIFwiVF9OQU1FX1JFTEFUSVZFXCIsXG4gICAgXCJUX0FUVFJJQlVURVwiLFxuICAgIFwiJzsnXCIsXG4gICAgXCInXSdcIixcbiAgICBcIid7J1wiLFxuICAgIFwiJ30nXCIsXG4gICAgXCInKCdcIixcbiAgICBcIicpJ1wiLFxuICAgIFwiJ2AnXCIsXG4gICAgXCInXFxcIidcIixcbiAgICBcIickJ1wiLFxuICAgIFwiVF9CQURfQ0hBUkFDVEVSXCIsXG4gICAgXCJUX0NPTU1FTlRcIixcbiAgICBcIlRfRE9DX0NPTU1FTlRcIixcbiAgICBcIlRfT1BFTl9UQUdcIixcbiAgICBcIlRfT1BFTl9UQUdfV0lUSF9FQ0hPXCIsXG4gICAgXCJUX0NMT1NFX1RBR1wiLFxuICAgIFwiVF9XSElURVNQQUNFXCIsXG4gICAgXCI/Pz9cIlxuXTtcbi8qIEB2YXIgTWFwIHdoaWNoIHRyYW5zbGF0ZXMgbGV4ZXIgdG9rZW5zIHRvIGludGVybmFsIHRva2VucyAqLyBQSFAuUGFyc2VyLnByb3RvdHlwZS50cmFuc2xhdGUgPSBbXG4gICAgMCxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDU2LFxuICAgIDE2NixcbiAgICAxNzUsXG4gICAgMTY3LFxuICAgIDU1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTYzLFxuICAgIDE2NCxcbiAgICA1MyxcbiAgICA1MCxcbiAgICA4LFxuICAgIDUxLFxuICAgIDUyLFxuICAgIDU0LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAzMSxcbiAgICAxNTksXG4gICAgNDQsXG4gICAgMTYsXG4gICAgNDYsXG4gICAgMzAsXG4gICAgNjgsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICA3MCxcbiAgICAxNzUsXG4gICAgMTYwLFxuICAgIDM2LFxuICAgIDE3NSxcbiAgICAxNjUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNjEsXG4gICAgMzUsXG4gICAgMTYyLFxuICAgIDU4LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDEsXG4gICAgMixcbiAgICAzLFxuICAgIDQsXG4gICAgNSxcbiAgICA2LFxuICAgIDcsXG4gICAgOSxcbiAgICAxMCxcbiAgICAxMSxcbiAgICAxMixcbiAgICAxMyxcbiAgICAxNCxcbiAgICAxNSxcbiAgICAxNyxcbiAgICAxOCxcbiAgICAxOSxcbiAgICAyMCxcbiAgICAyMSxcbiAgICAyMixcbiAgICAyMyxcbiAgICAyNCxcbiAgICAyNSxcbiAgICAyNixcbiAgICAyNyxcbiAgICAyOCxcbiAgICAyOSxcbiAgICAzMixcbiAgICAzMyxcbiAgICAzNCxcbiAgICAzNyxcbiAgICAzOCxcbiAgICAzOSxcbiAgICA0MCxcbiAgICA0MSxcbiAgICA0MixcbiAgICA0MyxcbiAgICA0NSxcbiAgICA0NyxcbiAgICA0OCxcbiAgICA0OSxcbiAgICA1NyxcbiAgICA1OSxcbiAgICA2MCxcbiAgICA2MSxcbiAgICA2MixcbiAgICA2MyxcbiAgICA2NCxcbiAgICA2NSxcbiAgICA2NixcbiAgICA2NyxcbiAgICA2OSxcbiAgICA3MSxcbiAgICA3MixcbiAgICA3MyxcbiAgICA3NCxcbiAgICA3NSxcbiAgICA3NixcbiAgICA3NyxcbiAgICA3OCxcbiAgICA3OSxcbiAgICA4MCxcbiAgICA4MSxcbiAgICA4MixcbiAgICA4MyxcbiAgICA4NCxcbiAgICA4NSxcbiAgICA4NixcbiAgICA4NyxcbiAgICA4OCxcbiAgICA4OSxcbiAgICA5MCxcbiAgICA5MSxcbiAgICA5MixcbiAgICA5MyxcbiAgICA5NCxcbiAgICA5NSxcbiAgICA5NixcbiAgICA5NyxcbiAgICA5OCxcbiAgICA5OSxcbiAgICAxMDAsXG4gICAgMTAxLFxuICAgIDEwMixcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDEwOCxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDExMSxcbiAgICAxMTIsXG4gICAgMTEzLFxuICAgIDExNCxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDExNyxcbiAgICAxMTgsXG4gICAgMTE5LFxuICAgIDEyMCxcbiAgICAxMjEsXG4gICAgMTIyLFxuICAgIDEyMyxcbiAgICAxMjQsXG4gICAgMTI1LFxuICAgIDEyNixcbiAgICAxMjcsXG4gICAgMTI4LFxuICAgIDEyOSxcbiAgICAxMzAsXG4gICAgMTMxLFxuICAgIDEzMixcbiAgICAxMzMsXG4gICAgMTM0LFxuICAgIDEzNSxcbiAgICAxMzYsXG4gICAgMTM3LFxuICAgIDEzOCxcbiAgICAxMzksXG4gICAgMTQwLFxuICAgIDE0MSxcbiAgICAxNDIsXG4gICAgMTQzLFxuICAgIDE0NCxcbiAgICAxNDUsXG4gICAgMTQ2LFxuICAgIDE0NyxcbiAgICAxNDgsXG4gICAgMTQ5LFxuICAgIDE1MCxcbiAgICAxNTEsXG4gICAgMTUyLFxuICAgIDE1MyxcbiAgICAxNTQsXG4gICAgMTU1LFxuICAgIDE1NixcbiAgICAxNTcsXG4gICAgMTU4LFxuICAgIDE2OCxcbiAgICAxNjksXG4gICAgMTcwLFxuICAgIDE3MSxcbiAgICAxNzIsXG4gICAgMTczLFxuICAgIDE3NFxuXTtcblBIUC5QYXJzZXIucHJvdG90eXBlLnl5YWN0aW9uID0gW1xuICAgIDEzMixcbiAgICAxMzMsXG4gICAgMTM0LFxuICAgIDU2OSxcbiAgICAxMzUsXG4gICAgMTM2LFxuICAgIDAsXG4gICAgNzIyLFxuICAgIDcyMyxcbiAgICA3MjQsXG4gICAgMTM3LFxuICAgIDM3LFxuICAgIDgzNCxcbiAgICA5MTEsXG4gICAgODM1LFxuICAgIDQ2OSxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjcsXG4gICAgLTMyNzY3LFxuICAgIC0zMjc2NyxcbiAgICAtMzI3NjcsXG4gICAgMTAxLFxuICAgIDEwMixcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxMDY4LFxuICAgIDEwNjksXG4gICAgMTA3MCxcbiAgICAxMDY3LFxuICAgIDEwNjYsXG4gICAgMTA2NSxcbiAgICAxMDcxLFxuICAgIDcxNixcbiAgICA3MTUsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY3LFxuICAgIC0zMjc2NyxcbiAgICAtMzI3NjcsXG4gICAgLTMyNzY3LFxuICAgIC0zMjc2NyxcbiAgICA1NDUsXG4gICAgNTQ2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgNzI1LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDk5OCxcbiAgICA5OTksXG4gICAgODA2LFxuICAgIDkyMixcbiAgICA0NDcsXG4gICAgNDQ4LFxuICAgIDQ0OSxcbiAgICAzNzAsXG4gICAgMzcxLFxuICAgIDIsXG4gICAgMjY3LFxuICAgIDEzOCxcbiAgICAzOTYsXG4gICAgNzI5LFxuICAgIDczMCxcbiAgICA3MzEsXG4gICAgNzMyLFxuICAgIDQxNCxcbiAgICAtMzI3NjYsXG4gICAgNDIwLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgOTkwLFxuICAgIDczMyxcbiAgICA3MzQsXG4gICAgNzM1LFxuICAgIDczNixcbiAgICA3MzcsXG4gICAgNzM4LFxuICAgIDczOSxcbiAgICA3NDAsXG4gICAgNzQxLFxuICAgIDc0MixcbiAgICA3NDMsXG4gICAgNzYzLFxuICAgIDU3MCxcbiAgICA3NjQsXG4gICAgNzY1LFxuICAgIDc2NixcbiAgICA3NjcsXG4gICAgNzU1LFxuICAgIDc1NixcbiAgICAzMzYsXG4gICAgMzM3LFxuICAgIDc1OCxcbiAgICA3NTksXG4gICAgNzQ0LFxuICAgIDc0NSxcbiAgICA3NDYsXG4gICAgNzQ4LFxuICAgIDc0OSxcbiAgICA3NTAsXG4gICAgMzQ2LFxuICAgIDc5MCxcbiAgICA3OTEsXG4gICAgNzkyLFxuICAgIDc5MyxcbiAgICA3OTQsXG4gICAgNzk1LFxuICAgIDc1MSxcbiAgICA3NTIsXG4gICAgNTcxLFxuICAgIDU3MixcbiAgICA3ODQsXG4gICAgNzc1LFxuICAgIDc3MyxcbiAgICA3NzQsXG4gICAgNzg3LFxuICAgIDc3MCxcbiAgICA3NzEsXG4gICAgMjgzLFxuICAgIDQyMCxcbiAgICA1NzMsXG4gICAgNTc0LFxuICAgIDc2OSxcbiAgICA1NzUsXG4gICAgNTc2LFxuICAgIDU3NyxcbiAgICA1NzgsXG4gICAgNTc5LFxuICAgIDU4MCxcbiAgICA1OTgsXG4gICAgLTU3NSxcbiAgICA0NzAsXG4gICAgMTQsXG4gICAgNzk4LFxuICAgIDc3MixcbiAgICA1ODEsXG4gICAgNTgyLFxuICAgIC01NzUsXG4gICAgMTM5LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDEzMixcbiAgICAxMzMsXG4gICAgMTM0LFxuICAgIDU2OSxcbiAgICAxMzUsXG4gICAgMTM2LFxuICAgIDEwMTcsXG4gICAgNzIyLFxuICAgIDcyMyxcbiAgICA3MjQsXG4gICAgMTM3LFxuICAgIDM3LFxuICAgIDEwNjAsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgMTMwMyxcbiAgICA2OTYsXG4gICAgLTMyNzY2LFxuICAgIDEzMDQsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDEwNjgsXG4gICAgMTA2OSxcbiAgICAxMDcwLFxuICAgIDEwNjcsXG4gICAgMTA2NixcbiAgICAxMDY1LFxuICAgIDEwNzEsXG4gICAgLTMyNzY2LFxuICAgIDcxNixcbiAgICA3MTUsXG4gICAgMzcyLFxuICAgIDM3MSxcbiAgICAxMjU4LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC01NzIsXG4gICAgMTA2LFxuICAgIDEwNyxcbiAgICAxMDgsXG4gICAgNDE0LFxuICAgIDI3MCxcbiAgICA4OTEsXG4gICAgLTU3MixcbiAgICAyNDAsXG4gICAgMTE5MyxcbiAgICAxMTkyLFxuICAgIDExOTQsXG4gICAgNzI1LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDEwNDYsXG4gICAgMTA5LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA5ODYsXG4gICAgOTg1LFxuICAgIDk4NCxcbiAgICA5ODcsXG4gICAgMjY3LFxuICAgIDEzOCxcbiAgICAzOTYsXG4gICAgNzI5LFxuICAgIDczMCxcbiAgICA3MzEsXG4gICAgNzMyLFxuICAgIDEyLFxuICAgIC0zMjc2NixcbiAgICA0MjAsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDk5OCxcbiAgICA5OTksXG4gICAgNzMzLFxuICAgIDczNCxcbiAgICA3MzUsXG4gICAgNzM2LFxuICAgIDczNyxcbiAgICA3MzgsXG4gICAgNzM5LFxuICAgIDc0MCxcbiAgICA3NDEsXG4gICAgNzQyLFxuICAgIDc0MyxcbiAgICA3NjMsXG4gICAgNTcwLFxuICAgIDc2NCxcbiAgICA3NjUsXG4gICAgNzY2LFxuICAgIDc2NyxcbiAgICA3NTUsXG4gICAgNzU2LFxuICAgIDMzNixcbiAgICAzMzcsXG4gICAgNzU4LFxuICAgIDc1OSxcbiAgICA3NDQsXG4gICAgNzQ1LFxuICAgIDc0NixcbiAgICA3NDgsXG4gICAgNzQ5LFxuICAgIDc1MCxcbiAgICAzNDYsXG4gICAgNzkwLFxuICAgIDc5MSxcbiAgICA3OTIsXG4gICAgNzkzLFxuICAgIDc5NCxcbiAgICA3OTUsXG4gICAgNzUxLFxuICAgIDc1MixcbiAgICA1NzEsXG4gICAgNTcyLFxuICAgIDc4NCxcbiAgICA3NzUsXG4gICAgNzczLFxuICAgIDc3NCxcbiAgICA3ODcsXG4gICAgNzcwLFxuICAgIDc3MSxcbiAgICA4ODEsXG4gICAgMzIxLFxuICAgIDU3MyxcbiAgICA1NzQsXG4gICAgNzY5LFxuICAgIDU3NSxcbiAgICA1NzYsXG4gICAgNTc3LFxuICAgIDU3OCxcbiAgICA1NzksXG4gICAgNTgwLFxuICAgIC0zMjc2NixcbiAgICA4MixcbiAgICA4MyxcbiAgICA4NCxcbiAgICAtNTc1LFxuICAgIDc3MixcbiAgICA1ODEsXG4gICAgNTgyLFxuICAgIC01NzUsXG4gICAgMTQ4LFxuICAgIDc0NyxcbiAgICA3MTcsXG4gICAgNzE4LFxuICAgIDcxOSxcbiAgICA3MjAsXG4gICAgNzIxLFxuICAgIDEyNzgsXG4gICAgNzIyLFxuICAgIDcyMyxcbiAgICA3MjQsXG4gICAgNzYwLFxuICAgIDc2MSxcbiAgICAzNixcbiAgICAxMjc3LFxuICAgIDg1LFxuICAgIDg2LFxuICAgIDg3LFxuICAgIDg4LFxuICAgIDg5LFxuICAgIDkwLFxuICAgIDkxLFxuICAgIDkyLFxuICAgIDkzLFxuICAgIDk0LFxuICAgIDk1LFxuICAgIDk2LFxuICAgIDk3LFxuICAgIDk4LFxuICAgIDk5LFxuICAgIDEwMCxcbiAgICAxMDEsXG4gICAgMTAyLFxuICAgIDEwMyxcbiAgICAxMDQsXG4gICAgMTA1LFxuICAgIDEwNixcbiAgICAxMDcsXG4gICAgMTA4LFxuICAgIDk5NixcbiAgICAyNzAsXG4gICAgMTUwLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDQ1NSxcbiAgICA0NTYsXG4gICAgODEsXG4gICAgMzQsXG4gICAgLTI2NCxcbiAgICAtNTcyLFxuICAgIDEwMTYsXG4gICAgMTA5LFxuICAgIDMyMCxcbiAgICAtNTcyLFxuICAgIDg5MyxcbiAgICA3MjUsXG4gICAgNjgyLFxuICAgIDgwMyxcbiAgICAxMjgsXG4gICAgOTk4LFxuICAgIDk5OSxcbiAgICA1OTIsXG4gICAgLTMyNzY2LFxuICAgIDEwNDQsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgODA5LFxuICAgIDE1MSxcbiAgICA3MjYsXG4gICAgNzI3LFxuICAgIDcyOCxcbiAgICA3MjksXG4gICAgNzMwLFxuICAgIDczMSxcbiAgICA3MzIsXG4gICAgLTg4LFxuICAgIDExOTgsXG4gICAgNzk2LFxuICAgIDI3OCxcbiAgICAtNTI2LFxuICAgIDI4MyxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA3MzMsXG4gICAgNzM0LFxuICAgIDczNSxcbiAgICA3MzYsXG4gICAgNzM3LFxuICAgIDczOCxcbiAgICA3MzksXG4gICAgNzQwLFxuICAgIDc0MSxcbiAgICA3NDIsXG4gICAgNzQzLFxuICAgIDc2MyxcbiAgICA3ODYsXG4gICAgNzY0LFxuICAgIDc2NSxcbiAgICA3NjYsXG4gICAgNzY3LFxuICAgIDc1NSxcbiAgICA3NTYsXG4gICAgNzU3LFxuICAgIDc4NSxcbiAgICA3NTgsXG4gICAgNzU5LFxuICAgIDc0NCxcbiAgICA3NDUsXG4gICAgNzQ2LFxuICAgIDc0OCxcbiAgICA3NDksXG4gICAgNzUwLFxuICAgIDc4OSxcbiAgICA3OTAsXG4gICAgNzkxLFxuICAgIDc5MixcbiAgICA3OTMsXG4gICAgNzk0LFxuICAgIDc5NSxcbiAgICA3NTEsXG4gICAgNzUyLFxuICAgIDc1MyxcbiAgICA3NTQsXG4gICAgNzg0LFxuICAgIDc3NSxcbiAgICA3NzMsXG4gICAgNzc0LFxuICAgIDc4NyxcbiAgICA3NzAsXG4gICAgNzcxLFxuICAgIDE0NCxcbiAgICA4MDQsXG4gICAgNzYyLFxuICAgIDc2OCxcbiAgICA3NjksXG4gICAgNzc2LFxuICAgIDc3NyxcbiAgICA3NzksXG4gICAgNzc4LFxuICAgIDc4MCxcbiAgICA3ODEsXG4gICAgLTMxNCxcbiAgICAtNTI2LFxuICAgIC01MjYsXG4gICAgLTE5MyxcbiAgICAtMTkyLFxuICAgIDc3MixcbiAgICA3ODMsXG4gICAgNzgyLFxuICAgIDQ5LFxuICAgIDUwLFxuICAgIDUxLFxuICAgIDUwMCxcbiAgICA1MixcbiAgICA1MyxcbiAgICAyMzksXG4gICAgODA3LFxuICAgIC01MjYsXG4gICAgLTg2LFxuICAgIDU0LFxuICAgIDU1LFxuICAgIC0xMTEsXG4gICAgNTYsXG4gICAgOTk2LFxuICAgIDI1MyxcbiAgICAtMzI3NjYsXG4gICAgLTExMSxcbiAgICA4MDAsXG4gICAgLTExMSxcbiAgICAtNTI2LFxuICAgIDU0MSxcbiAgICAtNTMyLFxuICAgIC0zNTIsXG4gICAgMzAwLFxuICAgIC0zNTIsXG4gICAgMzA0LFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICA5OTgsXG4gICAgOTk5LFxuICAgIDk5OCxcbiAgICA5OTksXG4gICAgMTUzLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDExOTEsXG4gICAgODA3LFxuICAgIDEyNixcbiAgICAzMDYsXG4gICAgMTI5MyxcbiAgICA1NyxcbiAgICA1OCxcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAtMTExLFxuICAgIDU5LFxuICAgIDEyMTgsXG4gICAgNjAsXG4gICAgMjQ2LFxuICAgIDI0NyxcbiAgICA2MSxcbiAgICA2MixcbiAgICA2MyxcbiAgICA2NCxcbiAgICA2NSxcbiAgICA2NixcbiAgICA2NyxcbiAgICA2OCxcbiAgICAtNTI1LFxuICAgIDI3LFxuICAgIDI2OCxcbiAgICA2OSxcbiAgICA0MzYsXG4gICAgNTAxLFxuICAgIC0zMjgsXG4gICAgODA4LFxuICAgIC04NixcbiAgICAxMjI0LFxuICAgIDEyMjUsXG4gICAgNTAyLFxuICAgIDExODksXG4gICAgODA3LFxuICAgIDExOTgsXG4gICAgMTIzMCxcbiAgICAyOTMsXG4gICAgMTIyMixcbiAgICA0MSxcbiAgICAyNCxcbiAgICA1MDMsXG4gICAgNzQsXG4gICAgNTA0LFxuICAgIDk1MyxcbiAgICA1MDUsXG4gICAgMzIwLFxuICAgIDUwNixcbiAgICA4MDIsXG4gICAgMTU0LFxuICAgIDUwNyxcbiAgICA1MDgsXG4gICAgMjc5LFxuICAgIDY4NCxcbiAgICAyODAsXG4gICAgNDMsXG4gICAgNDQsXG4gICAgNDM3LFxuICAgIDM2NyxcbiAgICAzNjYsXG4gICAgODkxLFxuICAgIDQ1LFxuICAgIDUwOSxcbiAgICAzNSxcbiAgICAyNDksXG4gICAgLTE2LFxuICAgIC01NjYsXG4gICAgMzU4LFxuICAgIDMzMixcbiAgICAzMTgsXG4gICAgLTU2NixcbiAgICAxMTk4LFxuICAgIDExOTMsXG4gICAgMTE5MixcbiAgICAxMTk0LFxuICAgIC01MjcsXG4gICAgNTEwLFxuICAgIDUxMSxcbiAgICA1MTIsXG4gICAgMzMzLFxuICAgIC01MjQsXG4gICAgMTI3NCxcbiAgICA0OCxcbiAgICA3MTYsXG4gICAgNzE1LFxuICAgIC01MjUsXG4gICAgLTUyNSxcbiAgICAzMzQsXG4gICAgNTEzLFxuICAgIDUxNCxcbiAgICA4MDcsXG4gICAgMTIxMixcbiAgICAxMjEzLFxuICAgIDEyMTQsXG4gICAgMTIxNSxcbiAgICAxMjA5LFxuICAgIDEyMTAsXG4gICAgMjkyLFxuICAgIDM2MCxcbiAgICAyODQsXG4gICAgLTUyNSxcbiAgICAyODUsXG4gICAgLTMxNCxcbiAgICAxMjE2LFxuICAgIDEyMTEsXG4gICAgLTE5MyxcbiAgICAtMTkyLFxuICAgIDExOTMsXG4gICAgMTE5MixcbiAgICAxMTk0LFxuICAgIDI5MyxcbiAgICA4OTEsXG4gICAgLTUyNSxcbiAgICAzNjQsXG4gICAgLTUzMSxcbiAgICA3MCxcbiAgICA4MDcsXG4gICAgMzE2LFxuICAgIDMxNyxcbiAgICAzMjAsXG4gICAgMzEsXG4gICAgMTEwLFxuICAgIDExMSxcbiAgICAxMTIsXG4gICAgMTEzLFxuICAgIDExNCxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDExNyxcbiAgICAxMTgsXG4gICAgMTE5LFxuICAgIDEyMCxcbiAgICAxMjEsXG4gICAgMTIyLFxuICAgIC0xNTMsXG4gICAgLTE1MyxcbiAgICAtMTUzLFxuICAgIDYzOCxcbiAgICAyNSxcbiAgICAtNTI3LFxuICAgIC01MjcsXG4gICAgNjg3LFxuICAgIDM3OSxcbiAgICA4ODEsXG4gICAgLTUyNCxcbiAgICAtNTI0LFxuICAgIDI5NixcbiAgICAyOTcsXG4gICAgODkxLFxuICAgIC0xNTMsXG4gICAgNDMyLFxuICAgIC0xNTMsXG4gICAgODA3LFxuICAgIC0xNTMsXG4gICAgLTUyNyxcbiAgICAtMTUzLFxuICAgIDcxNixcbiAgICA3MTUsXG4gICAgNDMzLFxuICAgIC01MjQsXG4gICAgNzk4LFxuICAgIDM2MyxcbiAgICAtMTExLFxuICAgIDExMDUsXG4gICAgMTEwNyxcbiAgICAzNjUsXG4gICAgLTUyNyxcbiAgICA0MzQsXG4gICAgODkxLFxuICAgIDE0MCxcbiAgICA0MzUsXG4gICAgLTUyNCxcbiAgICA5NTQsXG4gICAgMTI3LFxuICAgIC01MjQsXG4gICAgMzIwLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICA2ODgsXG4gICAgODEzLFxuICAgIDM4MSxcbiAgICAtNTI5LFxuICAgIDExLFxuICAgIDgzNCxcbiAgICAxNTUsXG4gICAgODM1LFxuICAgIDg2NyxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAtMTExLFxuICAgIDQ3LFxuICAgIDI5MyxcbiAgICAtMzI3NjYsXG4gICAgODgxLFxuICAgIDY1NCxcbiAgICA2NTUsXG4gICAgNzQsXG4gICAgNjg5LFxuICAgIDExOTEsXG4gICAgMTA0NSxcbiAgICAzMjAsXG4gICAgNzA4LFxuICAgIDE0OSxcbiAgICAzOTksXG4gICAgMTU3LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDMyLFxuICAgIC0zMjc2NixcbiAgICAtNzksXG4gICAgLTMyNzY2LFxuICAgIDEyMyxcbiAgICAtMzI3NjYsXG4gICAgNzE2LFxuICAgIDcxNSxcbiAgICAtMzI3NjYsXG4gICAgODkzLFxuICAgIDg5MSxcbiAgICA2ODIsXG4gICAgLTE1MyxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA3MTYsXG4gICAgNzE1LFxuICAgIDg5MSxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDEyNCxcbiAgICA4ODEsXG4gICAgMTI5LFxuICAgIDc0LFxuICAgIC0zMjc2NixcbiAgICA0MTEsXG4gICAgMTMwLFxuICAgIDMyMCxcbiAgICAtNTI0LFxuICAgIC01MjQsXG4gICAgMTQzLFxuICAgIDE0MSxcbiAgICAtNzUsXG4gICAgLTMyNzY2LFxuICAgIDE1OCxcbiAgICAtNTI5LFxuICAgIC01MjksXG4gICAgMzIwLFxuICAgIDI3LFxuICAgIDY5MSxcbiAgICAxNTksXG4gICAgODgxLFxuICAgIDE2MCxcbiAgICAtNTI0LFxuICAgIDE2MSxcbiAgICAyOTQsXG4gICAgMjk1LFxuICAgIDY5OCxcbiAgICAzNjgsXG4gICAgMzY5LFxuICAgIDgwNyxcbiAgICAtNzMsXG4gICAgLTMyNzY2LFxuICAgIC03MixcbiAgICAxMjIyLFxuICAgIC01MjQsXG4gICAgMzczLFxuICAgIDM3NCxcbiAgICAxMTkxLFxuICAgIDg5MyxcbiAgICAtNzEsXG4gICAgNjgyLFxuICAgIC01MjksXG4gICAgNzMsXG4gICAgLTcwLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC02OSxcbiAgICAtMzI3NjYsXG4gICAgLTY4LFxuICAgIC0zMjc2NixcbiAgICAxMjUsXG4gICAgLTMyNzY2LFxuICAgIDYzMCxcbiAgICA2MzEsXG4gICAgLTMyNzY2LFxuICAgIC02NyxcbiAgICAtNjYsXG4gICAgLTQ3LFxuICAgIC01MSxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMTgsXG4gICAgMTQ3LFxuICAgIDI3MSxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDI3NyxcbiAgICA2OTcsXG4gICAgNzAwLFxuICAgIDg4MSxcbiAgICAtMzI3NjYsXG4gICAgNDExLFxuICAgIDg5MCxcbiAgICA4OTMsXG4gICAgMTQ2LFxuICAgIDY4MixcbiAgICAyODIsXG4gICAgODgxLFxuICAgIDkwNyxcbiAgICAtMzI3NjYsXG4gICAgMjgxLFxuICAgIDUxMyxcbiAgICA1MTQsXG4gICAgMjg2LFxuICAgIDEyMTIsXG4gICAgMTIxMyxcbiAgICAxMjE0LFxuICAgIDEyMTUsXG4gICAgMTIwOSxcbiAgICAxMjEwLFxuICAgIDMyNixcbiAgICAxMzEsXG4gICAgMTQ1LFxuICAgIDkzOSxcbiAgICAyODcsXG4gICAgNjgyLFxuICAgIDEyMTYsXG4gICAgMTIxMSxcbiAgICAxMDksXG4gICAgMjcwLFxuICAgIC0zMjc2NixcbiAgICA3OTgsXG4gICAgODA3LFxuICAgIC0zMjc2NixcbiAgICA2NjIsXG4gICAgNjM5LFxuICAgIDExOTEsXG4gICAgNjU3LFxuICAgIDcyLFxuICAgIDY3NSxcbiAgICAxMDc1LFxuICAgIDMxNyxcbiAgICAzMjAsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgMTMwNSxcbiAgICAtMzI3NjYsXG4gICAgMzAxLFxuICAgIC0zMjc2NixcbiAgICA2MjgsXG4gICAgLTMyNzY2LFxuICAgIDQzMSxcbiAgICA1NDMsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA5MjMsXG4gICAgNTU1LFxuICAgIDkyNCxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAxMjI5LFxuICAgIDU0OSxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtNCxcbiAgICA4OTEsXG4gICAgLTQ5MCxcbiAgICAxMTkxLFxuICAgIC0zMjc2NixcbiAgICA0MTEsXG4gICAgNjQ0LFxuICAgIDg5MyxcbiAgICAyOTksXG4gICAgNjgyLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgODkzLFxuICAgIC0zMjc2NixcbiAgICA2ODIsXG4gICAgLTMyNzY2LFxuICAgIDEzLFxuICAgIDEyMzEsXG4gICAgLTMyNzY2LFxuICAgIDQ1MixcbiAgICA0ODAsXG4gICAgNjQ1LFxuICAgIDkwOSxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgNjU4LFxuICAgIC00ODAsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAwLFxuICAgIDExOTEsXG4gICAgMCxcbiAgICAwLFxuICAgIC0zMjc2NixcbiAgICA0MTEsXG4gICAgMCxcbiAgICAyOTgsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgMzA1LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDAsXG4gICAgLTMyNzY2LFxuICAgIDAsXG4gICAgODA2LFxuICAgIC0zMjc2NixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICA0NzUsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDAsXG4gICAgNyxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDE2LFxuICAgIDExOTEsXG4gICAgNTYxLFxuICAgIDU5NixcbiAgICAtMzI3NjYsXG4gICAgNDExLFxuICAgIDEyMTksXG4gICAgODkxLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDM2MixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA4MTgsXG4gICAgLTMyNzY2LFxuICAgIC0yNjcsXG4gICAgODgxLFxuICAgIC0zMjc2NixcbiAgICAzOSxcbiAgICAyOTMsXG4gICAgMCxcbiAgICAwLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDQwLFxuICAgIDcwNSxcbiAgICA3MDYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA4NzIsXG4gICAgOTYzLFxuICAgIDk0MCxcbiAgICA5NDcsXG4gICAgLTMyNzY2LFxuICAgIDQxMSxcbiAgICA5MzcsXG4gICAgOTQ4LFxuICAgIDM2NSxcbiAgICA4NzAsXG4gICAgNDI3LFxuICAgIDg5MSxcbiAgICA5MzUsXG4gICAgLTMyNzY2LFxuICAgIDEwNDksXG4gICAgMjkxLFxuICAgIDEyNDQsXG4gICAgMTA1MixcbiAgICAxMDUzLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAxMDUwLFxuICAgIDEwNTEsXG4gICAgMTA1NyxcbiAgICAtNTYwLFxuICAgIDEyNjIsXG4gICAgMTI5NixcbiAgICA2MzMsXG4gICAgMCxcbiAgICA4MjYsXG4gICAgLTExMSxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAzMyxcbiAgICAzMTUsXG4gICAgLTMyNzY2LFxuICAgIDM2MSxcbiAgICA2ODMsXG4gICAgNjg2LFxuICAgIDY5MCxcbiAgICA2OTIsXG4gICAgMTE5MSxcbiAgICA2OTMsXG4gICAgNjk0LFxuICAgIDY5NSxcbiAgICA2OTksXG4gICAgNjg1LFxuICAgIDMyMCxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA5LFxuICAgIC0zMjc2NixcbiAgICA3MDIsXG4gICAgLTMyNzY2LFxuICAgIDg2OCxcbiAgICAtMzI3NjYsXG4gICAgODgxLFxuICAgIDEzMDAsXG4gICAgLTMyNzY2LFxuICAgIDg5MyxcbiAgICAxMzAyLFxuICAgIDY4MixcbiAgICAtNCxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA4MjksXG4gICAgODI4LFxuICAgIDgzNyxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDkxNixcbiAgICAtMjQyLFxuICAgIC0yNDIsXG4gICAgLTI0MixcbiAgICAtMzI3NjYsXG4gICAgNDExLFxuICAgIDk1NSxcbiAgICAzNjUsXG4gICAgMjcsXG4gICAgODM2LFxuICAgIDEzMDEsXG4gICAgOTE1LFxuICAgIDkxNyxcbiAgICAtMzI3NjYsXG4gICAgOTE0LFxuICAgIDExNzcsXG4gICAgOTAwLFxuICAgIDkxMCxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgODA3LFxuICAgIDg4MSxcbiAgICA4OTgsXG4gICAgOTQ1LFxuICAgIDEyMjIsXG4gICAgOTQ2LFxuICAgIDEyOTksXG4gICAgMTI1NixcbiAgICA4NjcsXG4gICAgLTExMSxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAxMjQ1LFxuICAgIDEyNjMsXG4gICAgMTI2OSxcbiAgICAxMjcyLFxuICAgIC0yNDEsXG4gICAgLTI0MSxcbiAgICAtMjQxLFxuICAgIC01NTgsXG4gICAgLTUzMixcbiAgICAtNTMxLFxuICAgIDM2NSxcbiAgICAtNTMwLFxuICAgIDEsXG4gICAgMjgsXG4gICAgMjksXG4gICAgMzgsXG4gICAgNDIsXG4gICAgNDYsXG4gICAgNzEsXG4gICAgMCxcbiAgICA3NSxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgNzYsXG4gICAgNzcsXG4gICAgNzgsXG4gICAgNzksXG4gICAgODkzLFxuICAgIDgwLFxuICAgIDY4MixcbiAgICAtMjQyLFxuICAgIDg2NyxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAtMTExLFxuICAgIDE0MixcbiAgICAxNTIsXG4gICAgMTU2LFxuICAgIDI0NSxcbiAgICAzMjIsXG4gICAgMzQ3LFxuICAgIDUxNCxcbiAgICAzNDgsXG4gICAgMTIxMixcbiAgICAxMjEzLFxuICAgIDEyMTQsXG4gICAgMTIxNSxcbiAgICAxMjA5LFxuICAgIDEyMTAsXG4gICAgMzQ5LFxuICAgIDM1MCxcbiAgICAzNTEsXG4gICAgMzUyLFxuICAgIDM1MyxcbiAgICAzNTQsXG4gICAgMTIxNixcbiAgICAxMjExLFxuICAgIDM1NSxcbiAgICAzNTYsXG4gICAgMzU3LFxuICAgIDM1OSxcbiAgICA0MjgsXG4gICAgODkzLFxuICAgIC0yNjUsXG4gICAgNjgyLFxuICAgIC0yNDEsXG4gICAgLTI2NCxcbiAgICA3MixcbiAgICAwLFxuICAgIDE4LFxuICAgIDMxNyxcbiAgICAzMjAsXG4gICAgMTksXG4gICAgMjAsXG4gICAgMjEsXG4gICAgMjMsXG4gICAgMzk4LFxuICAgIDQ3MSxcbiAgICA0NzIsXG4gICAgNDc5LFxuICAgIDQ4MixcbiAgICA0ODMsXG4gICAgNDg0LFxuICAgIDQ4NSxcbiAgICA0ODksXG4gICAgNDkwLFxuICAgIDQ5MSxcbiAgICA0OTgsXG4gICAgNjY5LFxuICAgIDEyMDIsXG4gICAgMTE0NSxcbiAgICAxMjIwLFxuICAgIDEwMTksXG4gICAgMTAxOCxcbiAgICAxMTgxLFxuICAgIC0yNjksXG4gICAgLTEwMyxcbiAgICAxNyxcbiAgICAyMixcbiAgICAyNixcbiAgICAyOTAsXG4gICAgMzk3LFxuICAgIDU4OSxcbiAgICA1OTMsXG4gICAgNjIwLFxuICAgIDY3NCxcbiAgICAxMTQ5LFxuICAgIDExOTcsXG4gICAgMTE0NixcbiAgICAxMjc1LFxuICAgIDAsXG4gICAgLTQ5NCxcbiAgICAxMTYyLFxuICAgIDAsXG4gICAgMTIyM1xuXTtcblBIUC5QYXJzZXIucHJvdG90eXBlLnl5Y2hlY2sgPSBbXG4gICAgMixcbiAgICAzLFxuICAgIDQsXG4gICAgNSxcbiAgICA2LFxuICAgIDcsXG4gICAgMCxcbiAgICA5LFxuICAgIDEwLFxuICAgIDExLFxuICAgIDEyLFxuICAgIDEzLFxuICAgIDEwNixcbiAgICAxLFxuICAgIDEwOCxcbiAgICAzMSxcbiAgICA5LFxuICAgIDEwLFxuICAgIDExLFxuICAgIDQ0LFxuICAgIDQ1LFxuICAgIDQ2LFxuICAgIDQ3LFxuICAgIDQ4LFxuICAgIDQ5LFxuICAgIDUwLFxuICAgIDUxLFxuICAgIDUyLFxuICAgIDExNixcbiAgICAxMTcsXG4gICAgMTE4LFxuICAgIDExOSxcbiAgICAxMjAsXG4gICAgMTIxLFxuICAgIDEyMixcbiAgICAzNyxcbiAgICAzOCxcbiAgICAzMCxcbiAgICAxMTYsXG4gICAgMzIsXG4gICAgMzMsXG4gICAgMzQsXG4gICAgMzUsXG4gICAgMzYsXG4gICAgMzcsXG4gICAgMzgsXG4gICAgMzksXG4gICAgNDAsXG4gICAgNDEsXG4gICAgNDIsXG4gICAgNDMsXG4gICAgMTE3LFxuICAgIDExOCxcbiAgICA5LFxuICAgIDEwLFxuICAgIDU3LFxuICAgIDksXG4gICAgMTAsXG4gICAgMTEsXG4gICAgMTM3LFxuICAgIDEzOCxcbiAgICAxNTUsXG4gICAgMTI4LFxuICAgIDEyOSxcbiAgICAxMzAsXG4gICAgMTMxLFxuICAgIDEwNixcbiAgICAxMDcsXG4gICAgOCxcbiAgICA3MSxcbiAgICA3MixcbiAgICA3MyxcbiAgICA3NCxcbiAgICA3NSxcbiAgICA3NixcbiAgICA3NyxcbiAgICAxMTYsXG4gICAgMzAsXG4gICAgODAsXG4gICAgMzIsXG4gICAgMzMsXG4gICAgMzQsXG4gICAgMzUsXG4gICAgMzYsXG4gICAgMSxcbiAgICA4NyxcbiAgICA4OCxcbiAgICA4OSxcbiAgICA5MCxcbiAgICA5MSxcbiAgICA5MixcbiAgICA5MyxcbiAgICA5NCxcbiAgICA5NSxcbiAgICA5NixcbiAgICA5NyxcbiAgICA5OCxcbiAgICA5OSxcbiAgICAxMDAsXG4gICAgMTAxLFxuICAgIDEwMixcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDEwOCxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDExMSxcbiAgICAxMTIsXG4gICAgMTEzLFxuICAgIDExNCxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDExNyxcbiAgICAxMTgsXG4gICAgMTE5LFxuICAgIDEyMCxcbiAgICAxMjEsXG4gICAgMTIyLFxuICAgIDEyMyxcbiAgICAxMjQsXG4gICAgMTI1LFxuICAgIDEyNixcbiAgICAxMjcsXG4gICAgMTI4LFxuICAgIDEyOSxcbiAgICAxMzAsXG4gICAgMTMxLFxuICAgIDEzMixcbiAgICAxMzMsXG4gICAgMzAsXG4gICAgODAsXG4gICAgMTM2LFxuICAgIDEzNyxcbiAgICAxMzgsXG4gICAgMTM5LFxuICAgIDE0MCxcbiAgICAxNDEsXG4gICAgMTQyLFxuICAgIDE0MyxcbiAgICAxNDQsXG4gICAgNTEsXG4gICAgMSxcbiAgICAxNjEsXG4gICAgMTAxLFxuICAgIDgwLFxuICAgIDE1MCxcbiAgICAxNTEsXG4gICAgMTUyLFxuICAgIDgsXG4gICAgMTU0LFxuICAgIDksXG4gICAgMTAsXG4gICAgMTEsXG4gICAgMixcbiAgICAzLFxuICAgIDQsXG4gICAgNSxcbiAgICA2LFxuICAgIDcsXG4gICAgMTY0LFxuICAgIDksXG4gICAgMTAsXG4gICAgMTEsXG4gICAgMTIsXG4gICAgMTMsXG4gICAgMTIzLFxuICAgIDksXG4gICAgMTAsXG4gICAgMTEsXG4gICAgODAsXG4gICAgMTYxLFxuICAgIDMwLFxuICAgIDgzLFxuICAgIDMyLFxuICAgIDMzLFxuICAgIDM0LFxuICAgIDM1LFxuICAgIDM2LFxuICAgIDM3LFxuICAgIDM4LFxuICAgIDExNixcbiAgICAxMTcsXG4gICAgMTE4LFxuICAgIDExOSxcbiAgICAxMjAsXG4gICAgMTIxLFxuICAgIDEyMixcbiAgICAzMCxcbiAgICAzNyxcbiAgICAzOCxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDEsXG4gICAgOSxcbiAgICAxMCxcbiAgICAxMSxcbiAgICAxLFxuICAgIDUzLFxuICAgIDU0LFxuICAgIDU1LFxuICAgIDExNixcbiAgICA1NyxcbiAgICAxLFxuICAgIDgsXG4gICAgMTQsXG4gICAgMTU1LFxuICAgIDE1NixcbiAgICAxNTcsXG4gICAgNTcsXG4gICAgOSxcbiAgICAxMCxcbiAgICAxMSxcbiAgICAxNjIsXG4gICAgNjksXG4gICAgMzAsXG4gICAgMTE2LFxuICAgIDMyLFxuICAgIDMzLFxuICAgIDExOSxcbiAgICAxMjAsXG4gICAgMTIxLFxuICAgIDEyMixcbiAgICA3MSxcbiAgICA3MixcbiAgICA3MyxcbiAgICA3NCxcbiAgICA3NSxcbiAgICA3NixcbiAgICA3NyxcbiAgICA4LFxuICAgIDMwLFxuICAgIDgwLFxuICAgIDMyLFxuICAgIDMzLFxuICAgIDM0LFxuICAgIDM1LFxuICAgIDEzNyxcbiAgICAxMzgsXG4gICAgODcsXG4gICAgODgsXG4gICAgODksXG4gICAgOTAsXG4gICAgOTEsXG4gICAgOTIsXG4gICAgOTMsXG4gICAgOTQsXG4gICAgOTUsXG4gICAgOTYsXG4gICAgOTcsXG4gICAgOTgsXG4gICAgOTksXG4gICAgMTAwLFxuICAgIDEwMSxcbiAgICAxMDIsXG4gICAgMTAzLFxuICAgIDEwNCxcbiAgICAxMDUsXG4gICAgMTA2LFxuICAgIDEwNyxcbiAgICAxMDgsXG4gICAgMTA5LFxuICAgIDExMCxcbiAgICAxMTEsXG4gICAgMTEyLFxuICAgIDExMyxcbiAgICAxMTQsXG4gICAgMTE1LFxuICAgIDExNixcbiAgICAxMTcsXG4gICAgMTE4LFxuICAgIDExOSxcbiAgICAxMjAsXG4gICAgMTIxLFxuICAgIDEyMixcbiAgICAxMjMsXG4gICAgMTI0LFxuICAgIDEyNSxcbiAgICAxMjYsXG4gICAgMTI3LFxuICAgIDEyOCxcbiAgICAxMjksXG4gICAgMTMwLFxuICAgIDEzMSxcbiAgICAxMzIsXG4gICAgMTMzLFxuICAgIDg0LFxuICAgIDcwLFxuICAgIDEzNixcbiAgICAxMzcsXG4gICAgMTM4LFxuICAgIDEzOSxcbiAgICAxNDAsXG4gICAgMTQxLFxuICAgIDE0MixcbiAgICAxNDMsXG4gICAgMTQ0LFxuICAgIDksXG4gICAgOSxcbiAgICAxMCxcbiAgICAxMSxcbiAgICAxNjAsXG4gICAgMTUwLFxuICAgIDE1MSxcbiAgICAxNTIsXG4gICAgMTY0LFxuICAgIDE1NCxcbiAgICAyLFxuICAgIDMsXG4gICAgNCxcbiAgICA1LFxuICAgIDYsXG4gICAgNyxcbiAgICAxLFxuICAgIDksXG4gICAgMTAsXG4gICAgMTEsXG4gICAgMTIsXG4gICAgMTMsXG4gICAgMzAsXG4gICAgOCxcbiAgICAzMixcbiAgICAzMyxcbiAgICAzNCxcbiAgICAzNSxcbiAgICAzNixcbiAgICAzNyxcbiAgICAzOCxcbiAgICAzOSxcbiAgICA0MCxcbiAgICA0MSxcbiAgICA0MixcbiAgICA0MyxcbiAgICA0NCxcbiAgICA0NSxcbiAgICA0NixcbiAgICA0NyxcbiAgICA0OCxcbiAgICA0OSxcbiAgICA1MCxcbiAgICA1MSxcbiAgICA1MixcbiAgICA1MyxcbiAgICA1NCxcbiAgICA1NSxcbiAgICAxMTYsXG4gICAgNTcsXG4gICAgMTQsXG4gICAgOSxcbiAgICAxMCxcbiAgICAxMSxcbiAgICAxMzQsXG4gICAgMTM1LFxuICAgIDE2MSxcbiAgICA4LFxuICAgIDE2NCxcbiAgICAxNjAsXG4gICAgMSxcbiAgICA2OSxcbiAgICAxNjcsXG4gICAgMTY0LFxuICAgIDE1OSxcbiAgICA1NyxcbiAgICAxNjEsXG4gICAgODAsXG4gICAgOCxcbiAgICAxMzcsXG4gICAgMTM4LFxuICAgIDEsXG4gICAgMzAsXG4gICAgMSxcbiAgICAzMixcbiAgICAzMyxcbiAgICAzNCxcbiAgICAxLFxuICAgIDE0LFxuICAgIDcxLFxuICAgIDcyLFxuICAgIDczLFxuICAgIDc0LFxuICAgIDc1LFxuICAgIDc2LFxuICAgIDc3LFxuICAgIDMxLFxuICAgIDEsXG4gICAgODAsXG4gICAgMzAsXG4gICAgNzAsXG4gICAgMzAsXG4gICAgOSxcbiAgICAxMCxcbiAgICAxMSxcbiAgICA4NyxcbiAgICA4OCxcbiAgICA4OSxcbiAgICA5MCxcbiAgICA5MSxcbiAgICA5MixcbiAgICA5MyxcbiAgICA5NCxcbiAgICA5NSxcbiAgICA5NixcbiAgICA5NyxcbiAgICA5OCxcbiAgICA5OSxcbiAgICAxMDAsXG4gICAgMTAxLFxuICAgIDEwMixcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDEwOCxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDExMSxcbiAgICAxMTIsXG4gICAgMTEzLFxuICAgIDExNCxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDExNyxcbiAgICAxMTgsXG4gICAgMTE5LFxuICAgIDEyMCxcbiAgICAxMjEsXG4gICAgMTIyLFxuICAgIDEyMyxcbiAgICAxMjQsXG4gICAgMTI1LFxuICAgIDEyNixcbiAgICAxMjcsXG4gICAgMTI4LFxuICAgIDEyOSxcbiAgICAxMzAsXG4gICAgMTMxLFxuICAgIDEzMixcbiAgICAxMzMsXG4gICAgOCxcbiAgICAxNTYsXG4gICAgMTM2LFxuICAgIDEzNyxcbiAgICAxMzgsXG4gICAgMTM5LFxuICAgIDE0MCxcbiAgICAxNDEsXG4gICAgMTQyLFxuICAgIDE0MyxcbiAgICAxNDQsXG4gICAgOCxcbiAgICAxMzQsXG4gICAgMTM1LFxuICAgIDgsXG4gICAgOCxcbiAgICAxNTAsXG4gICAgMTUxLFxuICAgIDE1MixcbiAgICAyLFxuICAgIDMsXG4gICAgNCxcbiAgICA1LFxuICAgIDYsXG4gICAgNyxcbiAgICA5NyxcbiAgICA4MixcbiAgICAxNDksXG4gICAgMzEsXG4gICAgMTIsXG4gICAgMTMsXG4gICAgMTAxLFxuICAgIDE1LFxuICAgIDExNixcbiAgICA4LFxuICAgIDExNixcbiAgICAxMDYsXG4gICAgODAsXG4gICAgMTA4LFxuICAgIDE2MSxcbiAgICA4NSxcbiAgICAxNjMsXG4gICAgMTA2LFxuICAgIDExMyxcbiAgICAxMDgsXG4gICAgOCxcbiAgICAxMTYsXG4gICAgMTE3LFxuICAgIDExOCxcbiAgICAxMTksXG4gICAgMTIwLFxuICAgIDEyMSxcbiAgICAxMjIsXG4gICAgMTIzLFxuICAgIDEzNyxcbiAgICAxMzgsXG4gICAgMTM3LFxuICAgIDEzOCxcbiAgICAxNCxcbiAgICA5LFxuICAgIDEwLFxuICAgIDExLFxuICAgIDgwLFxuICAgIDgyLFxuICAgIDE0LFxuICAgIDgsXG4gICAgODUsXG4gICAgNTAsXG4gICAgNTEsXG4gICAgNTAsXG4gICAgNTEsXG4gICAgNTIsXG4gICAgMTI4LFxuICAgIDU2LFxuICAgIDEsXG4gICAgNTgsXG4gICAgNTksXG4gICAgNjAsXG4gICAgNjEsXG4gICAgNjIsXG4gICAgNjMsXG4gICAgNjQsXG4gICAgNjUsXG4gICAgNjYsXG4gICAgNjcsXG4gICAgNjgsXG4gICAgNzAsXG4gICAgNzAsXG4gICAgNzEsXG4gICAgNzIsXG4gICAgNzMsXG4gICAgNzQsXG4gICAgMTYyLFxuICAgIDE1OSxcbiAgICA5NyxcbiAgICA3OCxcbiAgICA3OSxcbiAgICA4MCxcbiAgICAxMTYsXG4gICAgODIsXG4gICAgMSxcbiAgICAxNDYsXG4gICAgMTU4LFxuICAgIDg2LFxuICAgIDg3LFxuICAgIDg4LFxuICAgIDg5LFxuICAgIDE2MyxcbiAgICA5MSxcbiAgICAzMSxcbiAgICA5MyxcbiAgICAxNjcsXG4gICAgOTUsXG4gICAgMTU2LFxuICAgIDE0LFxuICAgIDk4LFxuICAgIDk5LFxuICAgIDM1LFxuICAgIDE2MSxcbiAgICAzNyxcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDEsXG4gICAgMTA5LFxuICAgIDExMCxcbiAgICAxNDcsXG4gICAgMTQ4LFxuICAgIDMxLFxuICAgIDE2MCxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDgsXG4gICAgMTY0LFxuICAgIDEsXG4gICAgMTU1LFxuICAgIDE1NixcbiAgICAxNTcsXG4gICAgNzAsXG4gICAgMTI0LFxuICAgIDEyNSxcbiAgICAxMjYsXG4gICAgOCxcbiAgICA3MCxcbiAgICAxLFxuICAgIDcwLFxuICAgIDM3LFxuICAgIDM4LFxuICAgIDEzNCxcbiAgICAxMzUsXG4gICAgOCxcbiAgICAxMzYsXG4gICAgMTM3LFxuICAgIDgyLFxuICAgIDEzOSxcbiAgICAxNDAsXG4gICAgMTQxLFxuICAgIDE0MixcbiAgICAxNDMsXG4gICAgMTQ0LFxuICAgIDE0NSxcbiAgICA4LFxuICAgIDM1LFxuICAgIDE0OSxcbiAgICAzNyxcbiAgICAxNjQsXG4gICAgMTUxLFxuICAgIDE1MixcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE1NSxcbiAgICAxNTYsXG4gICAgMTU3LFxuICAgIDE1OCxcbiAgICAxLFxuICAgIDE2MSxcbiAgICA4LFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgODIsXG4gICAgMTY1LFxuICAgIDE2NixcbiAgICAxNjcsXG4gICAgMTYsXG4gICAgMTcsXG4gICAgMTgsXG4gICAgMTksXG4gICAgMjAsXG4gICAgMjEsXG4gICAgMjIsXG4gICAgMjMsXG4gICAgMjQsXG4gICAgMjUsXG4gICAgMjYsXG4gICAgMjcsXG4gICAgMjgsXG4gICAgMjksXG4gICAgNzUsXG4gICAgNzYsXG4gICAgNzcsXG4gICAgNzUsXG4gICAgNzYsXG4gICAgMTM0LFxuICAgIDEzNSxcbiAgICAzMSxcbiAgICA4LFxuICAgIDg0LFxuICAgIDEzNCxcbiAgICAxMzUsXG4gICAgMTM0LFxuICAgIDEzNSxcbiAgICAxLFxuICAgIDkwLFxuICAgIDgsXG4gICAgOTIsXG4gICAgODIsXG4gICAgOTQsXG4gICAgMTQ5LFxuICAgIDk2LFxuICAgIDM3LFxuICAgIDM4LFxuICAgIDgsXG4gICAgMTQ5LFxuICAgIDgwLFxuICAgIDE0OSxcbiAgICAxMjgsXG4gICAgNTksXG4gICAgNjAsXG4gICAgMTA2LFxuICAgIDE2MSxcbiAgICA4LFxuICAgIDEsXG4gICAgMTYxLFxuICAgIDgsXG4gICAgMTYxLFxuICAgIDE1OSxcbiAgICAxNjEsXG4gICAgNzAsXG4gICAgMTY3LFxuICAgIDExNyxcbiAgICAxMTgsXG4gICAgMzEsXG4gICAgOCxcbiAgICAxMDYsXG4gICAgNzAsXG4gICAgMTA4LFxuICAgIDEwNixcbiAgICAxNCxcbiAgICAxMDgsXG4gICAgMTI3LFxuICAgIDEyOCxcbiAgICAxMjksXG4gICAgMTMwLFxuICAgIDEzMSxcbiAgICA3MCxcbiAgICAxNTgsXG4gICAgNzQsXG4gICAgODQsXG4gICAgNzUsXG4gICAgNzYsXG4gICAgMTYzLFxuICAgIDMxLFxuICAgIDgwLFxuICAgIDE1OSxcbiAgICAxNjcsXG4gICAgMTYxLFxuICAgIDEwMSxcbiAgICAxMDIsXG4gICAgMTQsXG4gICAgODcsXG4gICAgODgsXG4gICAgODksXG4gICAgMTQsXG4gICAgOTEsXG4gICAgMzEsXG4gICAgOTMsXG4gICAgMTYsXG4gICAgOTUsXG4gICAgMzcsXG4gICAgMzgsXG4gICAgOTgsXG4gICAgMTU5LFxuICAgIDEsXG4gICAgMTYxLFxuICAgIDE2MixcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAzNyxcbiAgICAzOCxcbiAgICAxLFxuICAgIDEwOSxcbiAgICAxMTAsXG4gICAgMTYsXG4gICAgODQsXG4gICAgMTYsXG4gICAgMTYzLFxuICAgIDExNSxcbiAgICAxMTYsXG4gICAgMTYsXG4gICAgMTY3LFxuICAgIDEzNCxcbiAgICAxMzUsXG4gICAgMTYsXG4gICAgMTYxLFxuICAgIDMxLFxuICAgIDEyNCxcbiAgICAxNixcbiAgICAxMzQsXG4gICAgMTM1LFxuICAgIDE2NyxcbiAgICA3MCxcbiAgICAzMSxcbiAgICAxNixcbiAgICA4NCxcbiAgICAxNixcbiAgICAxNDksXG4gICAgMTYsXG4gICAgMTM0LFxuICAgIDEzNSxcbiAgICAzMSxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDgyLFxuICAgIDMxLFxuICAgIDc0LFxuICAgIDMxLFxuICAgIDg2LFxuICAgIDE2MSxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDgwLFxuICAgIDE1OSxcbiAgICAzMSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDE1NCxcbiAgICAzMSxcbiAgICA4NyxcbiAgICA4OCxcbiAgICA4OSxcbiAgICAzMSxcbiAgICA5MSxcbiAgICAzMSxcbiAgICA5MyxcbiAgICAxNjEsXG4gICAgOTUsXG4gICAgMTExLFxuICAgIDExMixcbiAgICA5OCxcbiAgICAzMSxcbiAgICAzMSxcbiAgICAzMSxcbiAgICAzMSxcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAzMSxcbiAgICAzMSxcbiAgICAzMSxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDMxLFxuICAgIDMxLFxuICAgIDMxLFxuICAgIDg0LFxuICAgIDExNSxcbiAgICAxMTYsXG4gICAgMzEsXG4gICAgMTU5LFxuICAgIDMxLFxuICAgIDE2MSxcbiAgICAzNyxcbiAgICA4NCxcbiAgICAzOCxcbiAgICAxMjQsXG4gICAgMzUsXG4gICAgMTM2LFxuICAgIDEzNyxcbiAgICAzNSxcbiAgICAxMzksXG4gICAgMTQwLFxuICAgIDE0MSxcbiAgICAxNDIsXG4gICAgMTQzLFxuICAgIDE0NCxcbiAgICAzNSxcbiAgICAzMSxcbiAgICA3MCxcbiAgICAxNTksXG4gICAgMzcsXG4gICAgMTYxLFxuICAgIDE1MSxcbiAgICAxNTIsXG4gICAgNjksXG4gICAgNTcsXG4gICAgNzQsXG4gICAgODAsXG4gICAgODIsXG4gICAgODUsXG4gICAgNzcsXG4gICAgOTAsXG4gICAgODAsXG4gICAgOTQsXG4gICAgMTYzLFxuICAgIDkyLFxuICAgIDgyLFxuICAgIDE2NixcbiAgICAxNjcsXG4gICAgODcsXG4gICAgODgsXG4gICAgODksXG4gICAgODMsXG4gICAgOTEsXG4gICAgMTE0LFxuICAgIDkzLFxuICAgIDExMyxcbiAgICA5NSxcbiAgICAxMjgsXG4gICAgODUsXG4gICAgOTgsXG4gICAgMTE2LFxuICAgIDEyOCxcbiAgICAxNTMsXG4gICAgMTI4LFxuICAgIDEwMyxcbiAgICAxMDQsXG4gICAgMTA1LFxuICAgIDE0NixcbiAgICA4OSxcbiAgICA3NCxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDAsXG4gICAgMSxcbiAgICAxNDksXG4gICAgODAsXG4gICAgMTE1LFxuICAgIDExNixcbiAgICA5NixcbiAgICAxNTksXG4gICAgMTMzLFxuICAgIDE2MSxcbiAgICA4NyxcbiAgICA4OCxcbiAgICA4OSxcbiAgICAxMjQsXG4gICAgOTEsXG4gICAgMTU5LFxuICAgIDkzLFxuICAgIDE2MSxcbiAgICA5NSxcbiAgICA5NyxcbiAgICAxNDYsXG4gICAgOTgsXG4gICAgOTcsXG4gICAgOTcsXG4gICAgMTAwLFxuICAgIDE1NCxcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICA3NCxcbiAgICAxMDAsXG4gICAgMTQ5LFxuICAgIDEwOSxcbiAgICAxMTAsXG4gICAgLTEsXG4gICAgODAsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMTE1LFxuICAgIDExNixcbiAgICAtMSxcbiAgICAxMzIsXG4gICAgODcsXG4gICAgODgsXG4gICAgODksXG4gICAgMTMyLFxuICAgIDkxLFxuICAgIDEyNCxcbiAgICA5MyxcbiAgICAtMSxcbiAgICA5NSxcbiAgICAtMSxcbiAgICAxNTUsXG4gICAgOTgsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMTAyLFxuICAgIDEwMyxcbiAgICAxMDQsXG4gICAgMTA1LFxuICAgIDc0LFxuICAgIC0xLFxuICAgIDE0OSxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDE0OSxcbiAgICA4MCxcbiAgICA4MSxcbiAgICAxNTMsXG4gICAgMTE1LFxuICAgIDExNixcbiAgICAxNjAsXG4gICAgMSxcbiAgICA4NyxcbiAgICA4OCxcbiAgICA4OSxcbiAgICAxNDksXG4gICAgOTEsXG4gICAgMTI0LFxuICAgIDkzLFxuICAgIDE2MCxcbiAgICA5NSxcbiAgICAxNjQsXG4gICAgODQsXG4gICAgOTgsXG4gICAgMTU5LFxuICAgIDE1OCxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxNTksXG4gICAgMTU5LFxuICAgIDE1OSxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDE1OSxcbiAgICAxNTksXG4gICAgMTU5LFxuICAgIDE1OSxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDE1OSxcbiAgICAxNTksXG4gICAgMTA2LFxuICAgIDE1OSxcbiAgICAxMDgsXG4gICAgMSxcbiAgICAxNTksXG4gICAgMTI0LFxuICAgIDE1OSxcbiAgICAxMTMsXG4gICAgMTYwLFxuICAgIDE1OSxcbiAgICAxNTksXG4gICAgMTE3LFxuICAgIDExOCxcbiAgICAxNTksXG4gICAgMTU5LFxuICAgIDE1OSxcbiAgICAxNjMsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxNjAsXG4gICAgLTEsXG4gICAgMTI3LFxuICAgIDEyOCxcbiAgICAxMjksXG4gICAgMTMwLFxuICAgIDEzMSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDc0LFxuICAgIDE2MSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDE2MSxcbiAgICAxNjEsXG4gICAgODAsXG4gICAgMTYxLFxuICAgIDE2MSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDE2MSxcbiAgICAxNjcsXG4gICAgODcsXG4gICAgODgsXG4gICAgODksXG4gICAgMTUwLFxuICAgIDkxLFxuICAgIDE2MixcbiAgICA5MyxcbiAgICAxNjIsXG4gICAgOTUsXG4gICAgODQsXG4gICAgMTYyLFxuICAgIDk4LFxuICAgIDE1OSxcbiAgICAxNjIsXG4gICAgMTYxLFxuICAgIDE2MixcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxNjIsXG4gICAgMTYyLFxuICAgIDE2MixcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDE2MixcbiAgICAxMDAsXG4gICAgMTAxLFxuICAgIDEwMixcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDE2MixcbiAgICAxMDYsXG4gICAgNzAsXG4gICAgMTYyLFxuICAgIDE2MixcbiAgICAxNjIsXG4gICAgMTYyLFxuICAgIDEyNCxcbiAgICAxNjIsXG4gICAgMTYyLFxuICAgIDE2MixcbiAgICAxNjIsXG4gICAgMTE3LFxuICAgIDExOCxcbiAgICA4MixcbiAgICA4NCxcbiAgICAxNjIsXG4gICAgMTYyLFxuICAgIDg2LFxuICAgIDE2MixcbiAgICAxNjIsXG4gICAgMTYyLFxuICAgIDEyNyxcbiAgICAxMjgsXG4gICAgMTI5LFxuICAgIDEzMCxcbiAgICAxMzEsXG4gICAgMTYyLFxuICAgIDE2MixcbiAgICAxNjIsXG4gICAgMTYyLFxuICAgIDEwMCxcbiAgICAxMDEsXG4gICAgMTAyLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDEwNixcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIC0xLFxuICAgIDE2MyxcbiAgICAxMTcsXG4gICAgMTE4LFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNTksXG4gICAgMTYzLFxuICAgIDE2MSxcbiAgICAxNjIsXG4gICAgMTI3LFxuICAgIDEyOCxcbiAgICAxMjksXG4gICAgMTMwLFxuICAgIDEzMSxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxMzcsXG4gICAgMTYzLFxuICAgIDEzOSxcbiAgICAxNDAsXG4gICAgMTQxLFxuICAgIDE0MixcbiAgICAxNDMsXG4gICAgMTQ0LFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE1MSxcbiAgICAxNTIsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNTksXG4gICAgMTY0LFxuICAgIDE2MSxcbiAgICAxNjIsXG4gICAgMTY0LFxuICAgIDE2MyxcbiAgICAtMSxcbiAgICAxNjQsXG4gICAgMTY2LFxuICAgIDE2NyxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIC0xLFxuICAgIDE2NSxcbiAgICAxNjUsXG4gICAgLTEsXG4gICAgMTY2XG5dO1xuUEhQLlBhcnNlci5wcm90b3R5cGUueXliYXNlID0gW1xuICAgIDAsXG4gICAgLTIsXG4gICAgMTU0LFxuICAgIDU2NSxcbiAgICA4NzYsXG4gICAgOTQ4LFxuICAgIDk4NCxcbiAgICA1MTQsXG4gICAgNTMsXG4gICAgMzk4LFxuICAgIDgzNyxcbiAgICAzMDcsXG4gICAgMzA3LFxuICAgIDY3LFxuICAgIDMwNyxcbiAgICAzMDcsXG4gICAgMzA3LFxuICAgIDY1MyxcbiAgICA3MjQsXG4gICAgNzI0LFxuICAgIDczMixcbiAgICA3MjQsXG4gICAgNjE2LFxuICAgIDY3MyxcbiAgICAyMDQsXG4gICAgMjA0LFxuICAgIDIwNCxcbiAgICA2MjUsXG4gICAgNjI1LFxuICAgIDYyNSxcbiAgICA2MjUsXG4gICAgNjk0LFxuICAgIDY5NCxcbiAgICA4MzEsXG4gICAgODMxLFxuICAgIDg2MyxcbiAgICA3OTksXG4gICAgNzY1LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICAzNzUsXG4gICAgNTE5LFxuICAgIDM2OSxcbiAgICA3MDEsXG4gICAgMTAxNyxcbiAgICAxMDIzLFxuICAgIDEwMTksXG4gICAgMTAyNCxcbiAgICAxMDE1LFxuICAgIDEwMTQsXG4gICAgMTAxOCxcbiAgICAxMDIwLFxuICAgIDEwMjUsXG4gICAgOTExLFxuICAgIDkxMixcbiAgICA3ODIsXG4gICAgOTE4LFxuICAgIDkxOSxcbiAgICA5MjAsXG4gICAgOTIxLFxuICAgIDEwMjEsXG4gICAgODQxLFxuICAgIDEwMTYsXG4gICAgMTAyMixcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MCxcbiAgICA0OTEsXG4gICAgNDQsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAzODIsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAzODIsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAzODIsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAzODIsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAzODIsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAzODIsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxODcsXG4gICAgNjg0LFxuICAgIDY4NCxcbiAgICAzNDEsXG4gICAgMjAzLFxuICAgIDYxMCxcbiAgICA0NyxcbiAgICA5ODUsXG4gICAgOTg1LFxuICAgIDk4NSxcbiAgICA5ODUsXG4gICAgOTg1LFxuICAgIDk4NSxcbiAgICA5ODUsXG4gICAgOTg1LFxuICAgIDk4NSxcbiAgICA5ODUsXG4gICAgMTQ0LFxuICAgIDE0NCxcbiAgICA3LFxuICAgIDcsXG4gICAgNyxcbiAgICA3LFxuICAgIDcsXG4gICAgMzcxLFxuICAgIC0yNSxcbiAgICAtMjUsXG4gICAgLTI1LFxuICAgIC0yNSxcbiAgICA1NDAsXG4gICAgMzg1LFxuICAgIDEwMixcbiAgICA1NzYsXG4gICAgMzU4LFxuICAgIDQ1LFxuICAgIDM3NyxcbiAgICA0NjAsXG4gICAgNDYwLFxuICAgIDM2MCxcbiAgICAyMzEsXG4gICAgMjMxLFxuICAgIDIzMSxcbiAgICAyMzEsXG4gICAgMjMxLFxuICAgIDIzMSxcbiAgICAtNzgsXG4gICAgLTc4LFxuICAgIC03OCxcbiAgICAtNzgsXG4gICAgLTc4LFxuICAgIC02NixcbiAgICAzMTksXG4gICAgNDU3LFxuICAgIC05NCxcbiAgICAzOTYsXG4gICAgNDIzLFxuICAgIDU4NixcbiAgICA1ODYsXG4gICAgNTg2LFxuICAgIDU4NixcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNzUwLFxuICAgIDEwMjksXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNTExLFxuICAgIDUxNixcbiAgICA1MTYsXG4gICAgNTE4LFxuICAgIDE0NyxcbiAgICAxNDcsXG4gICAgMTQ3LFxuICAgIDUxNixcbiAgICA1ODMsXG4gICAgNzc3LFxuICAgIDQyMixcbiAgICA1ODMsXG4gICAgNDIyLFxuICAgIDE5NCxcbiAgICA5MixcbiAgICA3NDgsXG4gICAgLTQwLFxuICAgIDg3LFxuICAgIDQxMixcbiAgICA3NDgsXG4gICAgNjE3LFxuICAgIDYyNyxcbiAgICAxOTgsXG4gICAgMTQzLFxuICAgIDc3MyxcbiAgICA2NTgsXG4gICAgNzczLFxuICAgIDEwMTMsXG4gICAgNzU3LFxuICAgIDc2NCxcbiAgICA3MTcsXG4gICAgODM4LFxuICAgIDg2MCxcbiAgICAxMDI2LFxuICAgIDgwMCxcbiAgICA5MDgsXG4gICAgODA2LFxuICAgIDkxMCxcbiAgICAyMTksXG4gICAgNjg2LFxuICAgIDEwMTIsXG4gICAgMTAxMixcbiAgICAxMDEyLFxuICAgIDEwMTIsXG4gICAgMTAxMixcbiAgICAxMDEyLFxuICAgIDEwMTIsXG4gICAgMTAxMixcbiAgICAxMDEyLFxuICAgIDEwMTIsXG4gICAgMTAxMixcbiAgICA4NTUsXG4gICAgNTUyLFxuICAgIDEwMTMsXG4gICAgMjg2LFxuICAgIDg1NSxcbiAgICA4NTUsXG4gICAgODU1LFxuICAgIDU1MixcbiAgICA1NTIsXG4gICAgNTUyLFxuICAgIDU1MixcbiAgICA1NTIsXG4gICAgNTUyLFxuICAgIDU1MixcbiAgICA1NTIsXG4gICAgNTUyLFxuICAgIDU1MixcbiAgICA2NzksXG4gICAgMjg2LFxuICAgIDU2OCxcbiAgICA2MjYsXG4gICAgMjg2LFxuICAgIDc5NCxcbiAgICA1NTIsXG4gICAgMzc1LFxuICAgIDc1OCxcbiAgICAzNzUsXG4gICAgMzc1LFxuICAgIDM3NSxcbiAgICAzNzUsXG4gICAgOTU4LFxuICAgIDM3NSxcbiAgICAzNzUsXG4gICAgMzc1LFxuICAgIDM3NSxcbiAgICAzNzUsXG4gICAgMzc1LFxuICAgIDk3MCxcbiAgICA3NjksXG4gICAgLTE2LFxuICAgIDM3NSxcbiAgICA1MTksXG4gICAgMTIsXG4gICAgMTIsXG4gICAgNTQ3LFxuICAgIDgzLFxuICAgIDEyLFxuICAgIDEyLFxuICAgIDEyLFxuICAgIDEyLFxuICAgIDM3NSxcbiAgICAzNzUsXG4gICAgMzc1LFxuICAgIDY1OCxcbiAgICA3ODEsXG4gICAgNzEzLFxuICAgIDY2NixcbiAgICA3OTIsXG4gICAgNDQ4LFxuICAgIDc4MSxcbiAgICA3ODEsXG4gICAgNzgxLFxuICAgIDQzOCxcbiAgICA0NDQsXG4gICAgMTkzLFxuICAgIDQ0NyxcbiAgICA1NzAsXG4gICAgNTIzLFxuICAgIDU4MCxcbiAgICA3NjAsXG4gICAgNzYwLFxuICAgIDc2NyxcbiAgICA5MjksXG4gICAgOTI5LFxuICAgIDc2MCxcbiAgICA3NTksXG4gICAgNzYwLFxuICAgIDc2NyxcbiAgICA5MzQsXG4gICAgNzYwLFxuICAgIDkyOSxcbiAgICA4MDUsXG4gICAgMzU5LFxuICAgIDY0OCxcbiAgICA1NzcsXG4gICAgNjExLFxuICAgIDY1NixcbiAgICA5MjksXG4gICAgNDc4LFxuICAgIDc2MCxcbiAgICA3NjAsXG4gICAgNzYwLFxuICAgIDc2MCxcbiAgICA2NjUsXG4gICAgNzYwLFxuICAgIDQ2NyxcbiAgICA0MzMsXG4gICAgNzYwLFxuICAgIDc2MCxcbiAgICA3ODUsXG4gICAgNzc0LFxuICAgIDc4OSxcbiAgICA2MCxcbiAgICA5MjksXG4gICAgOTI5LFxuICAgIDkyOSxcbiAgICA3ODksXG4gICAgNTk2LFxuICAgIDc1MSxcbiAgICA3NTEsXG4gICAgNzUxLFxuICAgIDgxMSxcbiAgICA4MTIsXG4gICAgNzQ2LFxuICAgIDc3MSxcbiAgICA1NjcsXG4gICAgNDk4LFxuICAgIDY3NyxcbiAgICAzNDgsXG4gICAgNzc5LFxuICAgIDc3MSxcbiAgICA3NzEsXG4gICAgNzYwLFxuICAgIDY0MCxcbiAgICA3NDYsXG4gICAgNzcxLFxuICAgIDc0NixcbiAgICA3NzEsXG4gICAgNzQ3LFxuICAgIDc3MSxcbiAgICA3NzEsXG4gICAgNzcxLFxuICAgIDc0NixcbiAgICA3NzEsXG4gICAgNzU5LFxuICAgIDU4NSxcbiAgICA3NzEsXG4gICAgNzM0LFxuICAgIDY2OCxcbiAgICAyMjQsXG4gICAgNzcxLFxuICAgIDYsXG4gICAgOTM1LFxuICAgIDkzNyxcbiAgICAzNTQsXG4gICAgOTQwLFxuICAgIDkzMixcbiAgICA5NDEsXG4gICAgOTc5LFxuICAgIDk0MixcbiAgICA5NDMsXG4gICAgODUxLFxuICAgIDk1NixcbiAgICA5MzMsXG4gICAgOTQ1LFxuICAgIDkzMSxcbiAgICA5MzAsXG4gICAgNzgwLFxuICAgIDcwMyxcbiAgICA3MjAsXG4gICAgNzkwLFxuICAgIDcyOSxcbiAgICA5MjgsXG4gICAgNzY4LFxuICAgIDc2OCxcbiAgICA3NjgsXG4gICAgOTI1LFxuICAgIDc2OCxcbiAgICA3NjgsXG4gICAgNzY4LFxuICAgIDc2OCxcbiAgICA3NjgsXG4gICAgNzY4LFxuICAgIDc2OCxcbiAgICA3NjgsXG4gICAgNzAzLFxuICAgIDc4OCxcbiAgICA4MDQsXG4gICAgNzMzLFxuICAgIDc4MyxcbiAgICA5NjAsXG4gICAgNzIyLFxuICAgIDcyNixcbiAgICA3MjUsXG4gICAgODY4LFxuICAgIDEwMjcsXG4gICAgMTAyOCxcbiAgICA3MzcsXG4gICAgNzM5LFxuICAgIDk1OCxcbiAgICAxMDA2LFxuICAgIDk1MyxcbiAgICA4MDMsXG4gICAgNzMwLFxuICAgIDk5MixcbiAgICA5NjcsXG4gICAgODY2LFxuICAgIDg0OCxcbiAgICA5NjgsXG4gICAgOTY5LFxuICAgIDk5MyxcbiAgICAxMDA3LFxuICAgIDEwMDgsXG4gICAgODcxLFxuICAgIDc2MSxcbiAgICA4NzQsXG4gICAgODgwLFxuICAgIDc5NyxcbiAgICA5NzEsXG4gICAgODUyLFxuICAgIDc2OCxcbiAgICA5MzUsXG4gICAgOTQzLFxuICAgIDkzMyxcbiAgICA5NDUsXG4gICAgOTMxLFxuICAgIDkzMCxcbiAgICA3NjMsXG4gICAgNzYyLFxuICAgIDc1MyxcbiAgICA3NTUsXG4gICAgNzQ5LFxuICAgIDc0NSxcbiAgICA3MzYsXG4gICAgNzM4LFxuICAgIDc3MCxcbiAgICAxMDA5LFxuICAgIDkyNCxcbiAgICA4MzUsXG4gICAgODMwLFxuICAgIDk3MCxcbiAgICA5MjYsXG4gICAgNzAzLFxuICAgIDgzOSxcbiAgICA5ODYsXG4gICAgODQ3LFxuICAgIDk5NCxcbiAgICA5OTUsXG4gICAgODUwLFxuICAgIDgwMSxcbiAgICA3NzIsXG4gICAgODQwLFxuICAgIDg4MSxcbiAgICA5NzIsXG4gICAgOTc1LFxuICAgIDk3NixcbiAgICA4NTMsXG4gICAgMTAxMCxcbiAgICA4MTAsXG4gICAgOTg5LFxuICAgIDc5NSxcbiAgICA5OTYsXG4gICAgODAyLFxuICAgIDg4MixcbiAgICA5OTcsXG4gICAgOTk4LFxuICAgIDk5OSxcbiAgICAxMDAwLFxuICAgIDg4NSxcbiAgICA4NTQsXG4gICAgODU2LFxuICAgIDg1NyxcbiAgICA4MTUsXG4gICAgNzU0LFxuICAgIDk4MCxcbiAgICA3ODYsXG4gICAgODkxLFxuICAgIDMzNSxcbiAgICA3ODcsXG4gICAgNzk2LFxuICAgIDk3OCxcbiAgICAzNjMsXG4gICAgOTU3LFxuICAgIDg1OCxcbiAgICA4OTQsXG4gICAgODk1LFxuICAgIDEwMDEsXG4gICAgMTAwMixcbiAgICAxMDAzLFxuICAgIDg5NixcbiAgICA5NTQsXG4gICAgODE2LFxuICAgIDk5MCxcbiAgICA3NTIsXG4gICAgOTkxLFxuICAgIDk4MyxcbiAgICA4MTcsXG4gICAgODE4LFxuICAgIDQ4NSxcbiAgICA3ODQsXG4gICAgNzc4LFxuICAgIDU0MSxcbiAgICA2NzYsXG4gICAgODk3LFxuICAgIDg5OSxcbiAgICA5MDAsXG4gICAgOTU1LFxuICAgIDc3NSxcbiAgICA3NjYsXG4gICAgODIxLFxuICAgIDgyMixcbiAgICAxMDExLFxuICAgIDkwMSxcbiAgICA2OTcsXG4gICAgODI0LFxuICAgIDc0MCxcbiAgICA5MDIsXG4gICAgMTAwNSxcbiAgICA3NDIsXG4gICAgNzQ0LFxuICAgIDc1NixcbiAgICA4NTksXG4gICAgNzkzLFxuICAgIDc0MyxcbiAgICA3OTgsXG4gICAgOTc3LFxuICAgIDc3NixcbiAgICA4MjcsXG4gICAgOTA3LFxuICAgIDgyOSxcbiAgICA4MzIsXG4gICAgODMzLFxuICAgIDEwMDQsXG4gICAgODM2LFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICAzMDcsXG4gICAgMzA3LFxuICAgIDMwNyxcbiAgICAzMDcsXG4gICAgMCxcbiAgICAwLFxuICAgIDMwNyxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAwLFxuICAgIDI5MSxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDgwNSxcbiAgICAxNDcsXG4gICAgMTQ3LFxuICAgIDE0NyxcbiAgICAxNDcsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICAtODgsXG4gICAgLTg4LFxuICAgIDE0NyxcbiAgICAxNDcsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMjg2LFxuICAgIDQyMixcbiAgICAwLFxuICAgIDc1OSxcbiAgICA3NTksXG4gICAgNzU5LFxuICAgIDc1OSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDQyMixcbiAgICA0MjIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDI4NixcbiAgICA0MjIsXG4gICAgMCxcbiAgICAyODYsXG4gICAgMCxcbiAgICA3NTksXG4gICAgNzU5LFxuICAgIDQyMyxcbiAgICA4MDUsXG4gICAgODA1LFxuICAgIDMxNCxcbiAgICA0MjMsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyODYsXG4gICAgNzU5LFxuICAgIDI4NixcbiAgICA1NTIsXG4gICAgNDIyLFxuICAgIDU1MixcbiAgICA1NTIsXG4gICAgMTIsXG4gICAgMzc1LFxuICAgIDMxNCxcbiAgICA2MDgsXG4gICAgNjA4LFxuICAgIDYwOCxcbiAgICA2MDgsXG4gICAgMCxcbiAgICA2NTgsXG4gICAgODA1LFxuICAgIDgwNSxcbiAgICA4MDUsXG4gICAgODA1LFxuICAgIDgwNSxcbiAgICA4MDUsXG4gICAgODA1LFxuICAgIDgwNSxcbiAgICA4MDUsXG4gICAgODA1LFxuICAgIDgwNSxcbiAgICA3NTksXG4gICAgMCxcbiAgICA4MDUsXG4gICAgMCxcbiAgICA3NTksXG4gICAgNzU5LFxuICAgIDc1OSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICA3NTksXG4gICAgMCxcbiAgICAwLFxuICAgIDkyOSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDc2MCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICA3NjAsXG4gICAgOTM0LFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDc1OSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgNzY4LFxuICAgIDgwMSxcbiAgICAwLFxuICAgIDgwMSxcbiAgICAwLFxuICAgIDc2OCxcbiAgICA3NjgsXG4gICAgNzY4XG5dO1xuUEhQLlBhcnNlci5wcm90b3R5cGUueXlkZWZhdWx0ID0gW1xuICAgIDMsXG4gICAgMzI3NjcsXG4gICAgMTAzLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDEwMSxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA1NzgsXG4gICAgNTc4LFxuICAgIDU3OCxcbiAgICA1NzgsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMjQ2LFxuICAgIDEwMyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA0NTQsXG4gICAgMzcyLFxuICAgIDM3MixcbiAgICAzNzIsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNTIyLFxuICAgIDUyMixcbiAgICA1MjIsXG4gICAgNTIyLFxuICAgIDUyMixcbiAgICA1MjIsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNDU0LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDEwMSxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzNyxcbiAgICA3LFxuICAgIDgsXG4gICAgMTAsXG4gICAgMTEsXG4gICAgNTAsXG4gICAgMTcsXG4gICAgMzEwLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDEwMyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA1NzEsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNDU4LFxuICAgIDQzNyxcbiAgICA0MzgsXG4gICAgNDQwLFxuICAgIDQ0MSxcbiAgICAzNzEsXG4gICAgNTIzLFxuICAgIDU3NyxcbiAgICAzMTMsXG4gICAgNTc0LFxuICAgIDM3MCxcbiAgICAxNDYsXG4gICAgMzI1LFxuICAgIDMxNSxcbiAgICAyMzQsXG4gICAgMzE2LFxuICAgIDI1MCxcbiAgICA0NTksXG4gICAgMjUxLFxuICAgIDQ2MCxcbiAgICA0NjMsXG4gICAgNDY0LFxuICAgIDIxMSxcbiAgICAyNzksXG4gICAgMzY3LFxuICAgIDE1MCxcbiAgICA0MDEsXG4gICAgNDU1LFxuICAgIDQwMyxcbiAgICA0NTMsXG4gICAgNDU3LFxuICAgIDQwMixcbiAgICAzNzcsXG4gICAgMzgyLFxuICAgIDM4MyxcbiAgICAzODQsXG4gICAgMzg1LFxuICAgIDM4NixcbiAgICAzODcsXG4gICAgMzg4LFxuICAgIDM4OSxcbiAgICAzOTAsXG4gICAgMzkxLFxuICAgIDM5MixcbiAgICAzOTMsXG4gICAgMzk0LFxuICAgIDM3NSxcbiAgICAzNzYsXG4gICAgNDU2LFxuICAgIDQzNCxcbiAgICA0MzMsXG4gICAgNDMyLFxuICAgIDM5OSxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA0MDAsXG4gICAgNDA0LFxuICAgIDM3NCxcbiAgICA0MDcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMTAzLFxuICAgIDMyNzY3LFxuICAgIDQwNSxcbiAgICA0MDYsXG4gICAgNDIzLFxuICAgIDQyNCxcbiAgICA0MjEsXG4gICAgNDIyLFxuICAgIDQyNSxcbiAgICAzMjc2NyxcbiAgICA0MjYsXG4gICAgNDI3LFxuICAgIDQyOCxcbiAgICA0MjksXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzAyLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDM1MSxcbiAgICAzNDksXG4gICAgNDE0LFxuICAgIDQxNSxcbiAgICAzMDIsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNTE2LFxuICAgIDQzMSxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAxMDMsXG4gICAgMzI3NjcsXG4gICAgMTAxLFxuICAgIDUxOCxcbiAgICAzOTYsXG4gICAgMzk4LFxuICAgIDQ4NixcbiAgICA0MDksXG4gICAgNDEwLFxuICAgIDQwOCxcbiAgICAzNzgsXG4gICAgMzI3NjcsXG4gICAgNDkzLFxuICAgIDMyNzY3LFxuICAgIDEwMyxcbiAgICA0OTUsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMTEyLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDUxNyxcbiAgICAzMjc2NyxcbiAgICA1MjQsXG4gICAgNTI0LFxuICAgIDMyNzY3LFxuICAgIDQ3OSxcbiAgICAxMDEsXG4gICAgMTk0LFxuICAgIDMyNzY3LFxuICAgIDE5NCxcbiAgICAxOTQsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNTg1LFxuICAgIDQ3OSxcbiAgICAxMTEsXG4gICAgMTExLFxuICAgIDExMSxcbiAgICAxMTEsXG4gICAgMTExLFxuICAgIDExMSxcbiAgICAxMTEsXG4gICAgMTExLFxuICAgIDExMSxcbiAgICAxMTEsXG4gICAgMTExLFxuICAgIDMyNzY3LFxuICAgIDE5NCxcbiAgICAxMTEsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMTAxLFxuICAgIDE5NCxcbiAgICAxOTQsXG4gICAgMTk0LFxuICAgIDE5NCxcbiAgICAxOTQsXG4gICAgMTk0LFxuICAgIDE5NCxcbiAgICAxOTQsXG4gICAgMTk0LFxuICAgIDE5NCxcbiAgICAxODksXG4gICAgMzI3NjcsXG4gICAgMjYwLFxuICAgIDI2MixcbiAgICAxMDMsXG4gICAgNTM5LFxuICAgIDE5NCxcbiAgICAzMjc2NyxcbiAgICA0OTgsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNDkxLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDQ3OSxcbiAgICA0MTksXG4gICAgMTM5LFxuICAgIDMyNzY3LFxuICAgIDEzOSxcbiAgICA1MjQsXG4gICAgNDExLFxuICAgIDQxMixcbiAgICA0MTMsXG4gICAgNDgxLFxuICAgIDUyNCxcbiAgICA1MjQsXG4gICAgNTI0LFxuICAgIDI5OCxcbiAgICAyODEsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNDk2LFxuICAgIDQ5NixcbiAgICAxMDEsXG4gICAgMTAxLFxuICAgIDEwMSxcbiAgICAxMDEsXG4gICAgNDkxLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDExMixcbiAgICAxMDAsXG4gICAgMTAwLFxuICAgIDEwMCxcbiAgICAxMDAsXG4gICAgMTAwLFxuICAgIDEwNCxcbiAgICAxMDIsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMTAwLFxuICAgIDMyNzY3LFxuICAgIDEwMixcbiAgICAxMDIsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMjE3LFxuICAgIDIwOCxcbiAgICAyMTUsXG4gICAgMTAyLFxuICAgIDMyNzY3LFxuICAgIDU0MyxcbiAgICA1NDQsXG4gICAgMjE1LFxuICAgIDEwMixcbiAgICAyMTksXG4gICAgMjE5LFxuICAgIDIxOSxcbiAgICAyMzksXG4gICAgMjM5LFxuICAgIDQ3MCxcbiAgICAzMDQsXG4gICAgMTAyLFxuICAgIDEwMCxcbiAgICAxMDIsXG4gICAgMTAyLFxuICAgIDE5NixcbiAgICAzMDQsXG4gICAgMzA0LFxuICAgIDMyNzY3LFxuICAgIDEwMixcbiAgICA0NzAsXG4gICAgMzA0LFxuICAgIDQ3MCxcbiAgICAzMDQsXG4gICAgMTk4LFxuICAgIDMwNCxcbiAgICAzMDQsXG4gICAgMzA0LFxuICAgIDQ3MCxcbiAgICAzMDQsXG4gICAgMzI3NjcsXG4gICAgMTAyLFxuICAgIDMwNCxcbiAgICAyMTAsXG4gICAgMTAwLFxuICAgIDEwMCxcbiAgICAzMDQsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNDgxLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDUxMSxcbiAgICAzMjc2NyxcbiAgICA1MjgsXG4gICAgNTQxLFxuICAgIDQxNyxcbiAgICA0MTgsXG4gICAgNDIwLFxuICAgIDUyNixcbiAgICA0NDIsXG4gICAgNDQzLFxuICAgIDQ0NCxcbiAgICA0NDUsXG4gICAgNDQ2LFxuICAgIDQ0NyxcbiAgICA0NDgsXG4gICAgNDUwLFxuICAgIDU3MyxcbiAgICAzMjc2NyxcbiAgICA0ODUsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI0LFxuICAgIDU4MyxcbiAgICAzMjc2NyxcbiAgICA1ODMsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNTg0LFxuICAgIDMyNzY3LFxuICAgIDUyNCxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA0MTYsXG4gICAgOSxcbiAgICA3NixcbiAgICA0MyxcbiAgICA0NCxcbiAgICA1MixcbiAgICA1OCxcbiAgICA1MDIsXG4gICAgNTAzLFxuICAgIDUwNCxcbiAgICA1MDUsXG4gICAgNDk5LFxuICAgIDUwMCxcbiAgICA1MDYsXG4gICAgNTAxLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDUwNyxcbiAgICA1NDksXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNTI1LFxuICAgIDU3NixcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAxMzksXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNTExLFxuICAgIDMyNzY3LFxuICAgIDEzNyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA1MjQsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzAwLFxuICAgIDMwMSxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA1MjQsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMjgzLFxuICAgIDI4NCxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAyNzgsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzY2LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDM0NSxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAxNTIsXG4gICAgMTUyLFxuICAgIDMsXG4gICAgMyxcbiAgICAzMjcsXG4gICAgMTUyLFxuICAgIDE1MixcbiAgICAxNTIsXG4gICAgMzI3LFxuICAgIDE1MixcbiAgICAzMjcsXG4gICAgMzI3LFxuICAgIDMyNyxcbiAgICAxNTIsXG4gICAgMTUyLFxuICAgIDE1MixcbiAgICAxNTIsXG4gICAgMTUyLFxuICAgIDE1MixcbiAgICAyNzIsXG4gICAgMTg0LFxuICAgIDI1NCxcbiAgICAyNTcsXG4gICAgMjM5LFxuICAgIDIzOSxcbiAgICAxNTIsXG4gICAgMzM3LFxuICAgIDE1MlxuXTtcblBIUC5QYXJzZXIucHJvdG90eXBlLnl5Z290byA9IFtcbiAgICAxOTQsXG4gICAgMTk0LFxuICAgIDY3MCxcbiAgICA0MjIsXG4gICAgNjQzLFxuICAgIDQ2MyxcbiAgICAxMjY0LFxuICAgIDEyNjUsXG4gICAgMTAyMixcbiAgICA0MTYsXG4gICAgMzA4LFxuICAgIDMwOSxcbiAgICAzMjksXG4gICAgNTYzLFxuICAgIDMxNCxcbiAgICA0MjEsXG4gICAgMzMwLFxuICAgIDQyMyxcbiAgICA2MjIsXG4gICAgODAxLFxuICAgIDY3OCxcbiAgICA2MzcsXG4gICAgNTg2LFxuICAgIDY1MSxcbiAgICA2NTIsXG4gICAgNjUzLFxuICAgIDE2NSxcbiAgICAxNjUsXG4gICAgMTY1LFxuICAgIDE2NSxcbiAgICAyMTgsXG4gICAgMTk1LFxuICAgIDE5MSxcbiAgICAxOTEsXG4gICAgMTc1LFxuICAgIDE3NyxcbiAgICAyMTMsXG4gICAgMTkxLFxuICAgIDE5MSxcbiAgICAxOTEsXG4gICAgMTkxLFxuICAgIDE5MSxcbiAgICAxOTIsXG4gICAgMTkyLFxuICAgIDE5MixcbiAgICAxOTIsXG4gICAgMTkyLFxuICAgIDE5MixcbiAgICAxODYsXG4gICAgMTg3LFxuICAgIDE4OCxcbiAgICAxODksXG4gICAgMTkwLFxuICAgIDIxNSxcbiAgICAyMTMsXG4gICAgMjE2LFxuICAgIDUyMSxcbiAgICA1MjIsXG4gICAgNDEyLFxuICAgIDUyMyxcbiAgICA1MjUsXG4gICAgNTI2LFxuICAgIDUyNyxcbiAgICA1MjgsXG4gICAgNTI5LFxuICAgIDUzMCxcbiAgICA1MzEsXG4gICAgNTMyLFxuICAgIDEwOTEsXG4gICAgMTY2LFxuICAgIDE2NyxcbiAgICAxNjgsXG4gICAgMTkzLFxuICAgIDE2OSxcbiAgICAxNzAsXG4gICAgMTcxLFxuICAgIDE2NCxcbiAgICAxNzIsXG4gICAgMTczLFxuICAgIDE3NCxcbiAgICAxNzYsXG4gICAgMjEyLFxuICAgIDIxNCxcbiAgICAyMTcsXG4gICAgMjM1LFxuICAgIDIzOCxcbiAgICAyNDEsXG4gICAgMjQyLFxuICAgIDI0NCxcbiAgICAyNTUsXG4gICAgMjU2LFxuICAgIDI1NyxcbiAgICAyNTgsXG4gICAgMjU5LFxuICAgIDI2MCxcbiAgICAyNjEsXG4gICAgMjYzLFxuICAgIDI2NCxcbiAgICAyNjUsXG4gICAgMjY2LFxuICAgIDI3NCxcbiAgICAyNzUsXG4gICAgMzExLFxuICAgIDMxMixcbiAgICAzMTMsXG4gICAgNDE3LFxuICAgIDQxOCxcbiAgICA0MTksXG4gICAgNTY4LFxuICAgIDIxOSxcbiAgICAyMjAsXG4gICAgMjIxLFxuICAgIDIyMixcbiAgICAyMjMsXG4gICAgMjI0LFxuICAgIDIyNSxcbiAgICAyMjYsXG4gICAgMjI3LFxuICAgIDIyOCxcbiAgICAyMjksXG4gICAgMjMwLFxuICAgIDIzMSxcbiAgICAyMzIsXG4gICAgMjMzLFxuICAgIDE3OCxcbiAgICAyMzQsXG4gICAgMTc5LFxuICAgIDE5NixcbiAgICAxOTcsXG4gICAgMTk4LFxuICAgIDIzNixcbiAgICAxODYsXG4gICAgMTg3LFxuICAgIDE4OCxcbiAgICAxODksXG4gICAgMTkwLFxuICAgIDIxNSxcbiAgICAxMDkxLFxuICAgIDE5OSxcbiAgICAxODAsXG4gICAgMTgxLFxuICAgIDE4MixcbiAgICAyMDAsXG4gICAgMTk2LFxuICAgIDE4MyxcbiAgICAyMzcsXG4gICAgMjAxLFxuICAgIDE5OSxcbiAgICAxNjMsXG4gICAgMjAyLFxuICAgIDIwMyxcbiAgICAxODQsXG4gICAgMjA0LFxuICAgIDIwNSxcbiAgICAyMDYsXG4gICAgMTg1LFxuICAgIDIwNyxcbiAgICAyMDgsXG4gICAgMjA5LFxuICAgIDIxMCxcbiAgICAyMTEsXG4gICAgMzIzLFxuICAgIDMyMyxcbiAgICAzMjMsXG4gICAgMzIzLFxuICAgIDgyNyxcbiAgICA2MDgsXG4gICAgNjA4LFxuICAgIDgyNCxcbiAgICA1NDcsXG4gICAgNTM4LFxuICAgIDM0MixcbiAgICAxMjIxLFxuICAgIDEyMjEsXG4gICAgMTIyMSxcbiAgICAxMjIxLFxuICAgIDEyMjEsXG4gICAgMTIyMSxcbiAgICAxMjIxLFxuICAgIDEyMjEsXG4gICAgMTIyMSxcbiAgICAxMjIxLFxuICAgIDEyMzksXG4gICAgMTIzOSxcbiAgICAyODgsXG4gICAgMjg4LFxuICAgIDI4OCxcbiAgICAyODgsXG4gICAgMTIzOSxcbiAgICAxMjM5LFxuICAgIDEyMzksXG4gICAgMTIzOSxcbiAgICAxMjM5LFxuICAgIDEyMzksXG4gICAgMTIzOSxcbiAgICAxMjM5LFxuICAgIDEyMzksXG4gICAgMTIzOSxcbiAgICAzODgsXG4gICAgNTM4LFxuICAgIDU0NyxcbiAgICA1NTYsXG4gICAgNTU3LFxuICAgIDM5NSxcbiAgICA1NjYsXG4gICAgNTg4LFxuICAgIDYwMixcbiAgICA2MDMsXG4gICAgODMyLFxuICAgIDgyNSxcbiAgICA4ODAsXG4gICAgODc1LFxuICAgIDg3NixcbiAgICA4ODksXG4gICAgMTUsXG4gICAgODMzLFxuICAgIDg3NyxcbiAgICA4MzAsXG4gICAgODc4LFxuICAgIDg3OSxcbiAgICA4MzEsXG4gICAgNzk5LFxuICAgIDI1MSxcbiAgICAyNTEsXG4gICAgODgzLFxuICAgIDkxOSxcbiAgICA5OTIsXG4gICAgMTAwMCxcbiAgICAxMDA0LFxuICAgIDEwMDEsXG4gICAgMTAwNSxcbiAgICAxMjM3LFxuICAgIDEyMzcsXG4gICAgOTM4LFxuICAgIDEwNDMsXG4gICAgMTAzOSxcbiAgICAxMDQwLFxuICAgIDEyMzcsXG4gICAgMTIzNyxcbiAgICAxMjM3LFxuICAgIDEyMzcsXG4gICAgMTIzNyxcbiAgICAxMjM3LFxuICAgIDEyMzcsXG4gICAgMTIzNyxcbiAgICAxMjM3LFxuICAgIDEyMzcsXG4gICAgODU4LFxuICAgIDI0OCxcbiAgICAyNDgsXG4gICAgMjQ4LFxuICAgIDI0OCxcbiAgICAyNTAsXG4gICAgMjUyLFxuICAgIDUzMyxcbiAgICA1MzMsXG4gICAgNTMzLFxuICAgIDUzMyxcbiAgICA0ODcsXG4gICAgNTkwLFxuICAgIDQ4OCxcbiAgICAxMTkwLFxuICAgIDExOTAsXG4gICAgOTk3LFxuICAgIDExOTAsXG4gICAgOTk3LFxuICAgIDQ5NCxcbiAgICAxMjkwLFxuICAgIDEyOTAsXG4gICAgNTYwLFxuICAgIDk5NyxcbiAgICA5OTcsXG4gICAgOTk3LFxuICAgIDk5NyxcbiAgICA5OTcsXG4gICAgOTk3LFxuICAgIDk5NyxcbiAgICA5OTcsXG4gICAgOTk3LFxuICAgIDk5NyxcbiAgICA5OTcsXG4gICAgOTk3LFxuICAgIDEyNjEsXG4gICAgMTI2MSxcbiAgICAxMjkwLFxuICAgIDEyNjEsXG4gICAgMzQwLFxuICAgIDExOTAsXG4gICAgOTMwLFxuICAgIDQwMixcbiAgICA2NzcsXG4gICAgMTI3OSxcbiAgICAxMTkwLFxuICAgIDExOTAsXG4gICAgMTE5MCxcbiAgICAxMTkwLFxuICAgIDk1OSxcbiAgICAzNDUsXG4gICAgMTE5MCxcbiAgICAxMTkwLFxuICAgIDExOTAsXG4gICAgMTI3MSxcbiAgICAxMjcxLFxuICAgIDEyNzEsXG4gICAgMTI3MSxcbiAgICA2MDYsXG4gICAgNjQwLFxuICAgIDM0NSxcbiAgICAzNDUsXG4gICAgMTI3MyxcbiAgICAxMjczLFxuICAgIDEyNzMsXG4gICAgMTI3MyxcbiAgICA4MjAsXG4gICAgODIwLFxuICAgIDgwNSxcbiAgICA4OTYsXG4gICAgODg0LFxuICAgIDg0MCxcbiAgICA4ODUsXG4gICAgODk3LFxuICAgIDM0NSxcbiAgICAzNDUsXG4gICAgNSxcbiAgICAzNDUsXG4gICAgNixcbiAgICAxMzA2LFxuICAgIDM4NCxcbiAgICA1MzUsXG4gICAgNTM1LFxuICAgIDU1OSxcbiAgICA1MzUsXG4gICAgNDE1LFxuICAgIDg1MixcbiAgICA1OTcsXG4gICAgMTI1NyxcbiAgICA4MzksXG4gICAgNTQwLFxuICAgIDUyNCxcbiAgICA1MjQsXG4gICAgMzQ1LFxuICAgIDEyODksXG4gICAgMTI4OSxcbiAgICA2NDIsXG4gICAgNTI0LFxuICAgIDUyNCxcbiAgICA1MjQsXG4gICAgNTI0LFxuICAgIDUyNCxcbiAgICA1MjQsXG4gICAgNTI0LFxuICAgIDUyNCxcbiAgICA1MjQsXG4gICAgNTI0LFxuICAgIDQ0NSxcbiAgICA4MDUsXG4gICAgMTE0MCxcbiAgICA4MDUsXG4gICAgMTI4OSxcbiAgICA5MzIsXG4gICAgOTMyLFxuICAgIDkzMixcbiAgICA5MzIsXG4gICAgMTA2MyxcbiAgICAxMDY0LFxuICAgIDQ0NSxcbiAgICA5MjYsXG4gICAgOTMzLFxuICAgIDM4NixcbiAgICAzOTAsXG4gICAgNTQ4LFxuICAgIDU4NyxcbiAgICA1OTEsXG4gICAgMTAzMCxcbiAgICAxMjkyLFxuICAgIDMzMSxcbiAgICA1NTQsXG4gICAgMTI1OSxcbiAgICAxMjU5LFxuICAgIDEwMzAsXG4gICAgNzA0LFxuICAgIDYyMSxcbiAgICA2MjMsXG4gICAgODIzLFxuICAgIDY0MSxcbiAgICAxMjUwLFxuICAgIDMxOSxcbiAgICAzMDMsXG4gICAgNjYwLFxuICAgIDY2NCxcbiAgICA5NzMsXG4gICAgNjY4LFxuICAgIDY3NixcbiAgICA5NjksXG4gICAgNDI5LFxuICAgIDU1MyxcbiAgICA5NjIsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzQsXG4gICAgOTM2LFxuICAgIDcwMyxcbiAgICA2MDEsXG4gICAgNTM3LFxuICAgIDk3MSxcbiAgICA5NjYsXG4gICAgMzQzLFxuICAgIDM0NCxcbiAgICA2NjMsXG4gICAgODE3LFxuICAgIDU5NSxcbiAgICA2MDksXG4gICAgNjEyLFxuICAgIDYxMyxcbiAgICA2MTQsXG4gICAgNjE1LFxuICAgIDYzNCxcbiAgICA2MzUsXG4gICAgNjM2LFxuICAgIDY4MCxcbiAgICA0MzksXG4gICAgMTE4NixcbiAgICA4NDUsXG4gICAgNDU0LFxuICAgIDQ1NCxcbiAgICA0MzksXG4gICAgNDM5LFxuICAgIDEyNjYsXG4gICAgMTI2NyxcbiAgICA4MjAsXG4gICAgOTAxLFxuICAgIDEwNzksXG4gICAgNDU0LFxuICAgIDM5NCxcbiAgICA1MzksXG4gICAgNTUxLFxuICAgIDExODMsXG4gICAgNjA1LFxuICAgIDU0MCxcbiAgICA1MzksXG4gICAgODQyLFxuICAgIDU1MSxcbiAgICA5NzgsXG4gICAgMjcyLFxuICAgIDM4NyxcbiAgICA2MTgsXG4gICAgNjE5LFxuICAgIDk4MSxcbiAgICA1MzYsXG4gICAgNTM2LFxuICAgIDg0NCxcbiAgICA3MDcsXG4gICAgNjQ2LFxuICAgIDk1NyxcbiAgICA1NjcsXG4gICAgNDU3LFxuICAgIDQ1OCxcbiAgICA0NTksXG4gICAgODM4LFxuICAgIDg1MCxcbiAgICAyNTQsXG4gICAgMjU0LFxuICAgIDEyOTcsXG4gICAgMTI5OCxcbiAgICA0MDAsXG4gICAgNDAxLFxuICAgIDk3NixcbiAgICA5NzYsXG4gICAgNDY0LFxuICAgIDY0OSxcbiAgICAxMTgyLFxuICAgIDY1MCxcbiAgICAxMDI4LFxuICAgIDQwNCxcbiAgICA0MDUsXG4gICAgNDA2LFxuICAgIDExODcsXG4gICAgNjYxLFxuICAgIDQyNCxcbiAgICAxMDMyLFxuICAgIDQwNyxcbiAgICA1NjQsXG4gICAgNjAwLFxuICAgIDgxNSxcbiAgICAzMzgsXG4gICAgNDI0LFxuICAgIDg1NCxcbiAgICA4NDgsXG4gICAgODUzLFxuICAgIDg0MSxcbiAgICAxMDI3LFxuICAgIDEwMzEsXG4gICAgMTAwOSxcbiAgICAxMDAyLFxuICAgIDEwMDYsXG4gICAgMTAwMyxcbiAgICAxMDA3LFxuICAgIDExODUsXG4gICAgOTQxLFxuICAgIDExODgsXG4gICAgMTI0NyxcbiAgICAxMjQ4LFxuICAgIDk0MyxcbiAgICAwLFxuICAgIDEwNzQsXG4gICAgNDM5LFxuICAgIDQzOSxcbiAgICA0MzksXG4gICAgNDM5LFxuICAgIDQzOSxcbiAgICA0MzksXG4gICAgNDM5LFxuICAgIDQzOSxcbiAgICA0MzksXG4gICAgNDM5LFxuICAgIDQzOSxcbiAgICAwLFxuICAgIDQ2OCxcbiAgICA0MzksXG4gICAgNTg1LFxuICAgIDEwNTYsXG4gICAgOTMxLFxuICAgIDY4MSxcbiAgICA2NjcsXG4gICAgNjY3LFxuICAgIDAsXG4gICAgNDk1LFxuICAgIDY3MyxcbiAgICAxMDU0LFxuICAgIDExNzEsXG4gICAgOTEyLFxuICAgIDAsXG4gICAgMCxcbiAgICAxMTcyLFxuICAgIDExNzUsXG4gICAgOTEzLFxuICAgIDExNzYsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMTA3MixcbiAgICA4NTdcbl07XG5QSFAuUGFyc2VyLnByb3RvdHlwZS55eWdjaGVjayA9IFtcbiAgICA0MixcbiAgICA0MixcbiAgICA3MixcbiAgICA2NSxcbiAgICA2NSxcbiAgICAxNjYsXG4gICAgMTY2LFxuICAgIDE2NixcbiAgICAxMTksXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNyxcbiAgICA5LFxuICAgIDg0LFxuICAgIDEyMixcbiAgICA4NCxcbiAgICA4NCxcbiAgICA4NCxcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICAyMyxcbiAgICAyMyxcbiAgICAyMyxcbiAgICAyMyxcbiAgICAxNSxcbiAgICAxMDQsXG4gICAgMTA0LFxuICAgIDI2LFxuICAgIDc1LFxuICAgIDc1LFxuICAgIDkzLFxuICAgIDEwNCxcbiAgICAxMDQsXG4gICAgMTA0LFxuICAgIDEwNCxcbiAgICAxMDQsXG4gICAgMTA0LFxuICAgIDEwNCxcbiAgICAxMDQsXG4gICAgMTA0LFxuICAgIDEwNCxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDI0LFxuICAgIDI0LFxuICAgIDI0LFxuICAgIDI0LFxuICAgIDE2MCxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICAxNSxcbiAgICAyNyxcbiAgICAxNSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICA3NSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICA2LFxuICAgIDUsXG4gICAgNSxcbiAgICAxNSxcbiAgICA4NyxcbiAgICA4NyxcbiAgICA4NyxcbiAgICA4NyxcbiAgICA4NyxcbiAgICA4NyxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDQ5LFxuICAgIDE1LFxuICAgIDE1LFxuICAgIDE1LFxuICAgIDE2MSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDE2MSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDE2MSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDE2MSxcbiAgICA0NSxcbiAgICA1LFxuICAgIDUsXG4gICAgNSxcbiAgICA1LFxuICAgIDUsXG4gICAgNSxcbiAgICAxMDMsXG4gICAgMTAzLFxuICAgIDEwMyxcbiAgICAxMDMsXG4gICAgMTQ3LFxuICAgIDEwMyxcbiAgICAxNDcsXG4gICAgNzIsXG4gICAgNzIsXG4gICAgNzIsXG4gICAgNzIsXG4gICAgNzIsXG4gICAgMTQ3LFxuICAgIDE3MyxcbiAgICAxNzMsXG4gICAgMTYyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDEyMixcbiAgICAxMjIsXG4gICAgMTczLFxuICAgIDEyMixcbiAgICAxNjksXG4gICAgNzIsXG4gICAgODksXG4gICAgODksXG4gICAgODksXG4gICAgMTcxLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDk5LFxuICAgIDE0LFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDksXG4gICAgOSxcbiAgICA5LFxuICAgIDksXG4gICAgNTUsXG4gICAgNTUsXG4gICAgMTQsXG4gICAgMTQsXG4gICAgMTIyLFxuICAgIDEyMixcbiAgICAxMjIsXG4gICAgMTIyLFxuICAgIDIyLFxuICAgIDIyLFxuICAgIDEyLFxuICAgIDcyLFxuICAgIDY0LFxuICAgIDM1LFxuICAgIDY0LFxuICAgIDcyLFxuICAgIDE0LFxuICAgIDE0LFxuICAgIDQ2LFxuICAgIDE0LFxuICAgIDQ2LFxuICAgIDE0LFxuICAgIDYxLFxuICAgIDE5LFxuICAgIDE5LFxuICAgIDEwMCxcbiAgICAxOSxcbiAgICAxMyxcbiAgICAzNSxcbiAgICAxMyxcbiAgICAxMjIsXG4gICAgMzUsXG4gICAgMTQsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNCxcbiAgICAxNzIsXG4gICAgMTcyLFxuICAgIDYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxOSxcbiAgICAxMixcbiAgICAxNDMsXG4gICAgMTIsXG4gICAgMTcyLFxuICAgIDE5LFxuICAgIDE5LFxuICAgIDE5LFxuICAgIDE5LFxuICAgIDEzNixcbiAgICAxMzYsXG4gICAgMTksXG4gICAgMTksXG4gICAgMTksXG4gICAgNTgsXG4gICAgNTgsXG4gICAgNTgsXG4gICAgNTgsXG4gICAgNTgsXG4gICAgMTIyLFxuICAgIDE3MixcbiAgICAyOSxcbiAgICA0OCxcbiAgICAxMjIsXG4gICAgMTIyLFxuICAgIDEyMixcbiAgICA0OCxcbiAgICA0OCxcbiAgICA0OCxcbiAgICAyNSxcbiAgICA0OCxcbiAgICAxNCxcbiAgICAxNTksXG4gICAgMTU5LFxuICAgIDQ4LFxuICAgIDQ4LFxuICAgIDQ4LFxuICAgIDQ4LFxuICAgIDQ4LFxuICAgIDQ4LFxuICAgIDEwOSxcbiAgICA5LFxuICAgIDI1LFxuICAgIDI1LFxuICAgIDI1LFxuICAgIDI1LFxuICAgIDI1LFxuICAgIDI1LFxuICAgIDksXG4gICAgMjUsXG4gICAgMjUsXG4gICAgMjUsXG4gICAgOTMsXG4gICAgOTMsXG4gICAgMTQsXG4gICAgMTgsXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgMjMsXG4gICAgMjAsXG4gICAgMzksXG4gICAgMTQxLFxuICAgIDE0MSxcbiAgICAyMyxcbiAgICAyMyxcbiAgICAxNjgsXG4gICAgMTY4LFxuICAgIDIyLFxuICAgIDE3LFxuICAgIDE3LFxuICAgIDE0MSxcbiAgICAyOCxcbiAgICA5LFxuICAgIDksXG4gICAgMTUyLFxuICAgIDE3LFxuICAgIDE0LFxuICAgIDksXG4gICAgMzcsXG4gICAgOSxcbiAgICAxNyxcbiAgICAyNCxcbiAgICA5LFxuICAgIDgzLFxuICAgIDgzLFxuICAgIDEwNixcbiAgICAyNCxcbiAgICAyNCxcbiAgICAxNyxcbiAgICA5NSxcbiAgICAxNyxcbiAgICAxNyxcbiAgICA5LFxuICAgIDksXG4gICAgOSxcbiAgICA5LFxuICAgIDE3LFxuICAgIDksXG4gICAgNSxcbiAgICA1LFxuICAgIDksXG4gICAgOSxcbiAgICA4MCxcbiAgICA4MCxcbiAgICAxMDMsXG4gICAgMTAzLFxuICAgIDE0OSxcbiAgICA4MCxcbiAgICAxNyxcbiAgICA4MCxcbiAgICAxMjEsXG4gICAgODAsXG4gICAgODAsXG4gICAgODAsXG4gICAgMjAsXG4gICAgODAsXG4gICAgMTEzLFxuICAgIDEyNCxcbiAgICA4MCxcbiAgICAyLFxuICAgIDIsXG4gICAgMjAsXG4gICAgODAsXG4gICAgMTEzLFxuICAgIDQxLFxuICAgIDksXG4gICAgMTYsXG4gICAgMTYsXG4gICAgMTYsXG4gICAgMTYsXG4gICAgMTEzLFxuICAgIDExMyxcbiAgICAxMTMsXG4gICAgMTEzLFxuICAgIDExMyxcbiAgICAxNCxcbiAgICAxNixcbiAgICAyMCxcbiAgICAyMCxcbiAgICAyMCxcbiAgICA5MixcbiAgICAtMSxcbiAgICAxMzksXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgLTEsXG4gICAgODIsXG4gICAgMjMsXG4gICAgOCxcbiAgICA4LFxuICAgIDE2LFxuICAgIDgsXG4gICAgOCxcbiAgICA4LFxuICAgIC0xLFxuICAgIDgsXG4gICAgOCxcbiAgICA4LFxuICAgIDc4LFxuICAgIDc4LFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDc4LFxuICAgIDc4LFxuICAgIDc4LFxuICAgIDc4LFxuICAgIC0xLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDE2LFxuICAgIDE2XG5dO1xuUEhQLlBhcnNlci5wcm90b3R5cGUueXlnYmFzZSA9IFtcbiAgICAwLFxuICAgIDAsXG4gICAgLTIwMyxcbiAgICAwLFxuICAgIDAsXG4gICAgMjIxLFxuICAgIDIwOCxcbiAgICAxMCxcbiAgICA1MTIsXG4gICAgNyxcbiAgICAwLFxuICAgIDAsXG4gICAgMjQsXG4gICAgMSxcbiAgICA1LFxuICAgIC0xNzQsXG4gICAgNDcsXG4gICAgLTIzLFxuICAgIDEwNSxcbiAgICA2MSxcbiAgICAzOCxcbiAgICAwLFxuICAgIC0xMCxcbiAgICAxNTgsXG4gICAgMTgxLFxuICAgIDM3OSxcbiAgICAxNjQsXG4gICAgMjA1LFxuICAgIDEwMixcbiAgICA4NCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgLTQzLFxuICAgIDAsXG4gICAgMTA3LFxuICAgIDAsXG4gICAgMTA0LFxuICAgIDAsXG4gICAgNTQsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIDIzNSxcbiAgICAtMzg0LFxuICAgIDAsXG4gICAgLTMwNyxcbiAgICAyMTAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDI2NixcbiAgICAwLFxuICAgIDAsXG4gICAgMzI0LFxuICAgIDAsXG4gICAgMCxcbiAgICAyODYsXG4gICAgMCxcbiAgICAxMDMsXG4gICAgMjk4LFxuICAgIC0yMzYsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgLTYsXG4gICAgMCxcbiAgICAwLFxuICAgIC0xNjcsXG4gICAgMCxcbiAgICAwLFxuICAgIDEyOSxcbiAgICA2MixcbiAgICAtMTQsXG4gICAgMCxcbiAgICA1MyxcbiAgICAtMjIsXG4gICAgLTY2OSxcbiAgICAwLFxuICAgIDAsXG4gICAgLTUyLFxuICAgIDAsXG4gICAgLTExLFxuICAgIDAsXG4gICAgMCxcbiAgICA2OCxcbiAgICAtMjk5LFxuICAgIDAsXG4gICAgNTIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMjYyLFxuICAgIDI4OCxcbiAgICAwLFxuICAgIDAsXG4gICAgMjI3LFxuICAgIC03MyxcbiAgICAwLFxuICAgIDg3LFxuICAgIDAsXG4gICAgMCxcbiAgICAxMTgsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMjA5LFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICA2LFxuICAgIDAsXG4gICAgMTA4LFxuICAgIDE1LFxuICAgIDAsXG4gICAgNDYsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDkxLFxuICAgIDAsXG4gICAgMCxcbiAgICA2OSxcbiAgICAwLFxuICAgIDM5MCxcbiAgICAwLFxuICAgIDg2LFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIC0yMjQsXG4gICAgMCxcbiAgICAzNyxcbiAgICAwLFxuICAgIDAsXG4gICAgNzcsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgNzAsXG4gICAgLTU3LFxuICAgIC04LFxuICAgIDI0MSxcbiAgICA5OSxcbiAgICAwLFxuICAgIDAsXG4gICAgLTI5MCxcbiAgICAwLFxuICAgIDY1LFxuICAgIDI1NyxcbiAgICAwLFxuICAgIDI2MSxcbiAgICAzOSxcbiAgICAtMzUsXG4gICAgMCxcbiAgICAwXG5dO1xuUEhQLlBhcnNlci5wcm90b3R5cGUueXlnZGVmYXVsdCA9IFtcbiAgICAtMzI3NjgsXG4gICAgNDk5LFxuICAgIDcxMSxcbiAgICA0LFxuICAgIDcxMixcbiAgICA5MDUsXG4gICAgNzg4LFxuICAgIDc5NyxcbiAgICA1ODMsXG4gICAgNTE1LFxuICAgIDY3OSxcbiAgICAzMzksXG4gICAgNjEwLFxuICAgIDQxMyxcbiAgICAxMjU1LFxuICAgIDg4MixcbiAgICAxMDc4LFxuICAgIDU2NSxcbiAgICA4MTYsXG4gICAgMTE5OSxcbiAgICAxMjA3LFxuICAgIDQ0NixcbiAgICA4MTksXG4gICAgMzI0LFxuICAgIDcwMSxcbiAgICA4NjQsXG4gICAgODY1LFxuICAgIDg2NixcbiAgICAzOTEsXG4gICAgMzc2LFxuICAgIDM4MixcbiAgICAzODksXG4gICAgNjMyLFxuICAgIDYxMSxcbiAgICA0ODEsXG4gICAgODUxLFxuICAgIDQ0MixcbiAgICA4NDMsXG4gICAgNDczLFxuICAgIDg0NixcbiAgICA0NDEsXG4gICAgODU1LFxuICAgIDE2MixcbiAgICA0MTAsXG4gICAgNDk3LFxuICAgIDg1OSxcbiAgICAzLFxuICAgIDg2MSxcbiAgICA1NDIsXG4gICAgODkyLFxuICAgIDM3NyxcbiAgICA4NjksXG4gICAgMzc4LFxuICAgIDY1NixcbiAgICA4NzEsXG4gICAgNTUwLFxuICAgIDg3MyxcbiAgICA4NzQsXG4gICAgMzg1LFxuICAgIDM5MixcbiAgICAzOTMsXG4gICAgMTA4MyxcbiAgICA1NTgsXG4gICAgNjA3LFxuICAgIDg4NixcbiAgICAyNDMsXG4gICAgNTUyLFxuICAgIDg4NyxcbiAgICAzNzUsXG4gICAgODg4LFxuICAgIDg5NSxcbiAgICAzODAsXG4gICAgMzgzLFxuICAgIDY2NSxcbiAgICA0NTMsXG4gICAgNDkyLFxuICAgIDQ4NixcbiAgICA0MDMsXG4gICAgMTA1OCxcbiAgICA1OTQsXG4gICAgNjI5LFxuICAgIDQ1MCxcbiAgICA0NjcsXG4gICAgNjE3LFxuICAgIDYxNixcbiAgICA2MDQsXG4gICAgNDY2LFxuICAgIDQyNSxcbiAgICA0MDgsXG4gICAgOTI4LFxuICAgIDQ3NCxcbiAgICA0NTEsXG4gICAgOTQyLFxuICAgIDM0MSxcbiAgICA5NTAsXG4gICAgNzA5LFxuICAgIDEwOTAsXG4gICAgNjI0LFxuICAgIDQ3NixcbiAgICA5NTgsXG4gICAgNjI1LFxuICAgIDk2NSxcbiAgICA5NjgsXG4gICAgNTE2LFxuICAgIDUxNyxcbiAgICA0NjUsXG4gICAgOTgwLFxuICAgIDI2OSxcbiAgICA5ODMsXG4gICAgNDc3LFxuICAgIDEwMTUsXG4gICAgNjQ3LFxuICAgIDY0OCxcbiAgICA5OTUsXG4gICAgNjI2LFxuICAgIDYyNyxcbiAgICAxMDEzLFxuICAgIDQ2MCxcbiAgICA1ODQsXG4gICAgMTAyMSxcbiAgICA0NDMsXG4gICAgMTAyOSxcbiAgICAxMjQzLFxuICAgIDQ0NCxcbiAgICAxMDMzLFxuICAgIDI2MixcbiAgICAxMDM2LFxuICAgIDI3NixcbiAgICA0MDksXG4gICAgNDI2LFxuICAgIDEwNDEsXG4gICAgMTA0MixcbiAgICA4LFxuICAgIDEwNDgsXG4gICAgNjcxLFxuICAgIDY3MixcbiAgICAxMCxcbiAgICAyNzMsXG4gICAgNDk2LFxuICAgIDEwNzMsXG4gICAgNjY2LFxuICAgIDQ0MCxcbiAgICAxMDg5LFxuICAgIDQzMCxcbiAgICAxMTU5LFxuICAgIDExNjEsXG4gICAgNTQ0LFxuICAgIDQ3OCxcbiAgICAxMTc5LFxuICAgIDExNzgsXG4gICAgNjU5LFxuICAgIDQ5MyxcbiAgICAxMTg0LFxuICAgIDEyNDYsXG4gICAgNDM4LFxuICAgIDUxOCxcbiAgICA0NjEsXG4gICAgMzEwLFxuICAgIDUxOSxcbiAgICAzMDIsXG4gICAgMzI3LFxuICAgIDMwNyxcbiAgICA1MzQsXG4gICAgMjg5LFxuICAgIDMyOCxcbiAgICA1MjAsXG4gICAgNDYyLFxuICAgIDEyNTIsXG4gICAgMTI2MCxcbiAgICAzMjUsXG4gICAgMzAsXG4gICAgMTI4MCxcbiAgICAxMjkxLFxuICAgIDMzNSxcbiAgICA1NjIsXG4gICAgNTk5XG5dO1xuUEhQLlBhcnNlci5wcm90b3R5cGUueXlsaHMgPSBbXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDUsXG4gICAgNSxcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNyxcbiAgICA3LFxuICAgIDcsXG4gICAgNyxcbiAgICA3LFxuICAgIDcsXG4gICAgNyxcbiAgICA3LFxuICAgIDgsXG4gICAgOCxcbiAgICA5LFxuICAgIDEwLFxuICAgIDExLFxuICAgIDExLFxuICAgIDExLFxuICAgIDEyLFxuICAgIDEyLFxuICAgIDEzLFxuICAgIDEzLFxuICAgIDE0LFxuICAgIDE1LFxuICAgIDE1LFxuICAgIDE2LFxuICAgIDE2LFxuICAgIDE3LFxuICAgIDE3LFxuICAgIDE4LFxuICAgIDE4LFxuICAgIDIxLFxuICAgIDIxLFxuICAgIDIyLFxuICAgIDIzLFxuICAgIDIzLFxuICAgIDI0LFxuICAgIDI0LFxuICAgIDQsXG4gICAgNCxcbiAgICA0LFxuICAgIDQsXG4gICAgNCxcbiAgICA0LFxuICAgIDQsXG4gICAgNCxcbiAgICA0LFxuICAgIDQsXG4gICAgNCxcbiAgICAyOSxcbiAgICAyOSxcbiAgICAzMCxcbiAgICAzMCxcbiAgICAzMixcbiAgICAzNCxcbiAgICAzNCxcbiAgICAyOCxcbiAgICAzNixcbiAgICAzNixcbiAgICAzMyxcbiAgICAzOCxcbiAgICAzOCxcbiAgICAzNSxcbiAgICAzNSxcbiAgICAzNyxcbiAgICAzNyxcbiAgICAzOSxcbiAgICAzOSxcbiAgICAzMSxcbiAgICA0MCxcbiAgICA0MCxcbiAgICA0MSxcbiAgICA0MyxcbiAgICA0NCxcbiAgICA0NCxcbiAgICA0NSxcbiAgICA0NixcbiAgICA0NixcbiAgICA0OCxcbiAgICA0NyxcbiAgICA0NyxcbiAgICA0NyxcbiAgICA0NyxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICAyNSxcbiAgICAyNSxcbiAgICA2OCxcbiAgICA2OCxcbiAgICA3MSxcbiAgICA3MSxcbiAgICA3MCxcbiAgICA2OSxcbiAgICA2OSxcbiAgICA2MixcbiAgICA3NCxcbiAgICA3NCxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NixcbiAgICA3NixcbiAgICA3NyxcbiAgICA3NyxcbiAgICA3OCxcbiAgICA3OCxcbiAgICAyNixcbiAgICAyNixcbiAgICAyNyxcbiAgICAyNyxcbiAgICAyNyxcbiAgICAyNyxcbiAgICA4NixcbiAgICA4NixcbiAgICA4OCxcbiAgICA4OCxcbiAgICA4MSxcbiAgICA4MSxcbiAgICA4MSxcbiAgICA4MixcbiAgICA4MixcbiAgICA4NSxcbiAgICA4NSxcbiAgICA4MyxcbiAgICA4MyxcbiAgICA4OSxcbiAgICA5MCxcbiAgICA5MCxcbiAgICA1NixcbiAgICA1NixcbiAgICA2NCxcbiAgICA2NCxcbiAgICA2NyxcbiAgICA2NyxcbiAgICA2NyxcbiAgICA2NixcbiAgICA5MSxcbiAgICA5MSxcbiAgICA5MixcbiAgICA1NyxcbiAgICA1NyxcbiAgICA1NyxcbiAgICA1NyxcbiAgICA5MyxcbiAgICA5MyxcbiAgICA5NCxcbiAgICA5NCxcbiAgICA5NSxcbiAgICA5NSxcbiAgICA5NixcbiAgICA5NyxcbiAgICA5NyxcbiAgICA5OCxcbiAgICA5OCxcbiAgICA5OSxcbiAgICA5OSxcbiAgICA1NCxcbiAgICA1NCxcbiAgICA1MCxcbiAgICA1MCxcbiAgICAxMDEsXG4gICAgNTIsXG4gICAgNTIsXG4gICAgMTAyLFxuICAgIDUxLFxuICAgIDUxLFxuICAgIDUzLFxuICAgIDUzLFxuICAgIDYzLFxuICAgIDYzLFxuICAgIDYzLFxuICAgIDYzLFxuICAgIDc5LFxuICAgIDc5LFxuICAgIDEwNSxcbiAgICAxMDUsXG4gICAgMTA3LFxuICAgIDEwNyxcbiAgICAxMDgsXG4gICAgMTA4LFxuICAgIDEwOCxcbiAgICAxMDgsXG4gICAgMTA2LFxuICAgIDEwNixcbiAgICAxMDYsXG4gICAgMTEwLFxuICAgIDExMCxcbiAgICAxMTAsXG4gICAgMTEwLFxuICAgIDg3LFxuICAgIDg3LFxuICAgIDExMyxcbiAgICAxMTMsXG4gICAgMTEzLFxuICAgIDExMSxcbiAgICAxMTEsXG4gICAgMTE0LFxuICAgIDExNCxcbiAgICAxMTIsXG4gICAgMTEyLFxuICAgIDExNSxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDExNixcbiAgICAxMTYsXG4gICAgMTE2LFxuICAgIDEwOSxcbiAgICAxMDksXG4gICAgODAsXG4gICAgODAsXG4gICAgODAsXG4gICAgMjAsXG4gICAgMjAsXG4gICAgMjAsXG4gICAgMTE4LFxuICAgIDExNyxcbiAgICAxMTcsXG4gICAgMTE5LFxuICAgIDExOSxcbiAgICAxMTksXG4gICAgMTE5LFxuICAgIDU5LFxuICAgIDEyMCxcbiAgICAxMjAsXG4gICAgMTIxLFxuICAgIDYwLFxuICAgIDEyMyxcbiAgICAxMjMsXG4gICAgMTI0LFxuICAgIDEyNCxcbiAgICAxMjUsXG4gICAgMTI1LFxuICAgIDg0LFxuICAgIDEyNixcbiAgICAxMjYsXG4gICAgMTI2LFxuICAgIDEyNixcbiAgICAxMjYsXG4gICAgMTI2LFxuICAgIDEzMSxcbiAgICAxMzEsXG4gICAgMTMyLFxuICAgIDEzMixcbiAgICAxMzMsXG4gICAgMTMzLFxuICAgIDEzMyxcbiAgICAxMzMsXG4gICAgMTMzLFxuICAgIDEzNCxcbiAgICAxMzUsXG4gICAgMTM1LFxuICAgIDEzMCxcbiAgICAxMzAsXG4gICAgMTI3LFxuICAgIDEyNyxcbiAgICAxMjksXG4gICAgMTI5LFxuICAgIDEzNyxcbiAgICAxMzcsXG4gICAgMTM2LFxuICAgIDEzNixcbiAgICAxMzYsXG4gICAgMTM2LFxuICAgIDEzNixcbiAgICAxMzYsXG4gICAgMTM2LFxuICAgIDEyOCxcbiAgICAxMzgsXG4gICAgMTM4LFxuICAgIDE0MCxcbiAgICAxMzksXG4gICAgMTM5LFxuICAgIDYxLFxuICAgIDEwMCxcbiAgICAxNDEsXG4gICAgMTQxLFxuICAgIDU1LFxuICAgIDU1LFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDE0OCxcbiAgICAxNDIsXG4gICAgMTQyLFxuICAgIDE0NyxcbiAgICAxNDcsXG4gICAgMTUwLFxuICAgIDE1MSxcbiAgICAxNTEsXG4gICAgMTUyLFxuICAgIDE1MyxcbiAgICAxNTMsXG4gICAgMTUzLFxuICAgIDE5LFxuICAgIDE5LFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDE0MyxcbiAgICAxNDMsXG4gICAgMTQzLFxuICAgIDE0MyxcbiAgICAxNTUsXG4gICAgMTU1LFxuICAgIDE0NCxcbiAgICAxNDQsXG4gICAgMTQ2LFxuICAgIDE0NixcbiAgICAxNDYsXG4gICAgMTQ5LFxuICAgIDE0OSxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDEwNCxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTQ1LFxuICAgIDE0NSxcbiAgICAxNDUsXG4gICAgMTQ1LFxuICAgIDE0NSxcbiAgICAxNDUsXG4gICAgMTQ1LFxuICAgIDE0NSxcbiAgICA1OCxcbiAgICA1OCxcbiAgICAxNTgsXG4gICAgMTU4LFxuICAgIDE1OCxcbiAgICAxNTgsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNTQsXG4gICAgMTU0LFxuICAgIDE1NCxcbiAgICAxNjUsXG4gICAgMTY1LFxuICAgIDE2NSxcbiAgICAxNjUsXG4gICAgMTY1LFxuICAgIDE2NSxcbiAgICA3MyxcbiAgICA3MyxcbiAgICA2NSxcbiAgICA2NSxcbiAgICA2NSxcbiAgICA2NSxcbiAgICAxMjIsXG4gICAgMTIyLFxuICAgIDEyMixcbiAgICAxMjIsXG4gICAgMTY4LFxuICAgIDE2NyxcbiAgICAxNTcsXG4gICAgMTU3LFxuICAgIDE1NyxcbiAgICAxNTcsXG4gICAgMTU3LFxuICAgIDE1NyxcbiAgICAxNTcsXG4gICAgMTU2LFxuICAgIDE1NixcbiAgICAxNTYsXG4gICAgMTY2LFxuICAgIDE2NixcbiAgICAxNjYsXG4gICAgMTY2LFxuICAgIDEwMyxcbiAgICAxNjIsXG4gICAgMTcwLFxuICAgIDE3MCxcbiAgICAxNjksXG4gICAgMTY5LFxuICAgIDE3MSxcbiAgICAxNzEsXG4gICAgMTcxLFxuICAgIDE3MSxcbiAgICAxNzEsXG4gICAgMTcxLFxuICAgIDE3MSxcbiAgICAxNzEsXG4gICAgMTU5LFxuICAgIDE1OSxcbiAgICAxNTksXG4gICAgMTU5LFxuICAgIDE3MyxcbiAgICAxNzQsXG4gICAgMTcyLFxuICAgIDE3MixcbiAgICAxNzIsXG4gICAgMTcyLFxuICAgIDE3MixcbiAgICAxNzIsXG4gICAgMTcyLFxuICAgIDE3MixcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzVcbl07XG5QSFAuUGFyc2VyLnByb3RvdHlwZS55eWxlbiA9IFtcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgMyxcbiAgICA0LFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDUsXG4gICAgNCxcbiAgICAzLFxuICAgIDQsXG4gICAgMixcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICA3LFxuICAgIDYsXG4gICAgMixcbiAgICAzLFxuICAgIDEsXG4gICAgMixcbiAgICAzLFxuICAgIDEsXG4gICAgMixcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDIsXG4gICAgMixcbiAgICAzLFxuICAgIDEsXG4gICAgMyxcbiAgICAyLFxuICAgIDMsXG4gICAgMSxcbiAgICAzLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICA3LFxuICAgIDEwLFxuICAgIDUsXG4gICAgNyxcbiAgICA5LFxuICAgIDUsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMSxcbiAgICAyLFxuICAgIDUsXG4gICAgNyxcbiAgICA5LFxuICAgIDYsXG4gICAgNSxcbiAgICA2LFxuICAgIDMsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDgsXG4gICAgMCxcbiAgICA0LFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICA4LFxuICAgIDksXG4gICAgOCxcbiAgICA3LFxuICAgIDYsXG4gICAgOCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMixcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgNCxcbiAgICAxLFxuICAgIDQsXG4gICAgMSxcbiAgICAxLFxuICAgIDQsXG4gICAgMixcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDQsXG4gICAgNCxcbiAgICA1LFxuICAgIDAsXG4gICAgMixcbiAgICA0LFxuICAgIDMsXG4gICAgMSxcbiAgICAxLFxuICAgIDcsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMyxcbiAgICAzLFxuICAgIDQsXG4gICAgMSxcbiAgICA0LFxuICAgIDAsXG4gICAgMixcbiAgICA1LFxuICAgIDAsXG4gICAgMixcbiAgICA2LFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAzLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDYsXG4gICAgOCxcbiAgICA2LFxuICAgIDEsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDQsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDIsXG4gICAgMixcbiAgICAzLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDUsXG4gICAgNSxcbiAgICAxMCxcbiAgICAzLFxuICAgIDUsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMCxcbiAgICAyLFxuICAgIDQsXG4gICAgNSxcbiAgICA0LFxuICAgIDQsXG4gICAgNCxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDQsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDUsXG4gICAgNCxcbiAgICAzLFxuICAgIDQsXG4gICAgNCxcbiAgICAyLFxuICAgIDIsXG4gICAgNCxcbiAgICAyLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDIsXG4gICAgMSxcbiAgICAyLFxuICAgIDQsXG4gICAgMixcbiAgICAyLFxuICAgIDgsXG4gICAgOSxcbiAgICA4LFxuICAgIDksXG4gICAgOSxcbiAgICAxMCxcbiAgICA5LFxuICAgIDEwLFxuICAgIDgsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgNCxcbiAgICAyLFxuICAgIDEsXG4gICAgMyxcbiAgICAyLFxuICAgIDIsXG4gICAgMixcbiAgICA0LFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMyxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgNCxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAyLFxuICAgIDMsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgNCxcbiAgICA0LFxuICAgIDEsXG4gICAgNCxcbiAgICA0LFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAzLFxuICAgIDEsXG4gICAgNCxcbiAgICAyLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgNCxcbiAgICA0LFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICA0LFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDQsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICA0LFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgNixcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDFcbl07XG5leHBvcnRzLmogPSBQSFA7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDc3NzA6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgVGs6ICgpID0+ICgvKiBiaW5kaW5nICovIGNoZWNrVmFsdWVBZ2FpbnN0UmVnZXhwQXJyYXkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICByTDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gbWVyZ2VPYmplY3RzKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiB1bnVzZWQgaGFybW9ueSBleHBvcnRzIG5vdEVtcHR5LCBpc0VtcHR5UmFuZ2UsIG1lcmdlUmFuZ2VzLCBjb252ZXJ0VG9VcmkgKi9cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3RzKG9iajEsIG9iajIsIGV4Y2x1ZGVVbmRlZmluZWQgPSBmYWxzZSkge1xuICAgIGlmICghb2JqMSkgcmV0dXJuIG9iajI7XG4gICAgaWYgKCFvYmoyKSByZXR1cm4gb2JqMTtcbiAgICBpZiAoZXhjbHVkZVVuZGVmaW5lZCkge1xuICAgICAgICBvYmoxID0gZXhjbHVkZVVuZGVmaW5lZFZhbHVlcyhvYmoxKTtcbiAgICAgICAgb2JqMiA9IGV4Y2x1ZGVVbmRlZmluZWRWYWx1ZXMob2JqMik7XG4gICAgfVxuICAgIGNvbnN0IG1lcmdlZE9iamVjdHMgPSB7XG4gICAgICAgIC4uLm9iajIsXG4gICAgICAgIC4uLm9iajFcbiAgICB9OyAvLyBHaXZlIHByaW9yaXR5IHRvIG9iajEgdmFsdWVzIGJ5IHNwcmVhZGluZyBvYmoyIGZpcnN0LCB0aGVuIG9iajFcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhtZXJnZWRPYmplY3RzKSl7XG4gICAgICAgIGlmIChvYmoxW2tleV0gJiYgb2JqMltrZXldKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmoxW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkT2JqZWN0c1trZXldID0gb2JqMVtrZXldLmNvbmNhdChvYmoyW2tleV0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iajJba2V5XSkpIHtcbiAgICAgICAgICAgICAgICBtZXJnZWRPYmplY3RzW2tleV0gPSBvYmoyW2tleV0uY29uY2F0KG9iajFba2V5XSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmoxW2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoyW2tleV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkT2JqZWN0c1trZXldID0gbWVyZ2VPYmplY3RzKG9iajFba2V5XSwgb2JqMltrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkT2JqZWN0cztcbn1cbmZ1bmN0aW9uIGV4Y2x1ZGVVbmRlZmluZWRWYWx1ZXMob2JqKSB7XG4gICAgY29uc3QgZmlsdGVyZWRFbnRyaWVzID0gT2JqZWN0LmVudHJpZXMob2JqKS5maWx0ZXIoKFtfLCB2YWx1ZV0pPT52YWx1ZSAhPT0gdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKGZpbHRlcmVkRW50cmllcyk7XG59XG5mdW5jdGlvbiBub3RFbXB0eSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gaXNFbXB0eVJhbmdlKHJhbmdlKSB7XG4gICAgcmV0dXJuIHJhbmdlLnN0YXJ0LnJvdyA9PT0gcmFuZ2UuZW5kLnJvdyAmJiByYW5nZS5zdGFydC5jb2x1bW4gPT09IHJhbmdlLmVuZC5jb2x1bW47XG59XG4vL3Rha2VuIHdpdGggc21hbGwgY2hhbmdlcyBmcm9tIGFjZS1jb2RlXG5mdW5jdGlvbiBtZXJnZVJhbmdlcyhyYW5nZXMpIHtcbiAgICB2YXIgbGlzdCA9IHJhbmdlcztcbiAgICBsaXN0ID0gbGlzdC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVQb2ludHMoYS5zdGFydCwgYi5zdGFydCk7XG4gICAgfSk7XG4gICAgdmFyIG5leHQgPSBsaXN0WzBdLCByYW5nZTtcbiAgICBmb3IodmFyIGkgPSAxOyBpIDwgbGlzdC5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHJhbmdlID0gbmV4dDtcbiAgICAgICAgbmV4dCA9IGxpc3RbaV07XG4gICAgICAgIHZhciBjbXAgPSBjb21wYXJlUG9pbnRzKHJhbmdlLmVuZCwgbmV4dC5zdGFydCk7XG4gICAgICAgIGlmIChjbXAgPCAwKSBjb250aW51ZTtcbiAgICAgICAgaWYgKGNtcCA9PSAwICYmICFpc0VtcHR5UmFuZ2UocmFuZ2UpICYmICFpc0VtcHR5UmFuZ2UobmV4dCkpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoY29tcGFyZVBvaW50cyhyYW5nZS5lbmQsIG5leHQuZW5kKSA8IDApIHtcbiAgICAgICAgICAgIHJhbmdlLmVuZC5yb3cgPSBuZXh0LmVuZC5yb3c7XG4gICAgICAgICAgICByYW5nZS5lbmQuY29sdW1uID0gbmV4dC5lbmQuY29sdW1uO1xuICAgICAgICB9XG4gICAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgICBuZXh0ID0gcmFuZ2U7XG4gICAgICAgIGktLTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG59XG5mdW5jdGlvbiBjb21wYXJlUG9pbnRzKHAxLCBwMikge1xuICAgIHJldHVybiBwMS5yb3cgLSBwMi5yb3cgfHwgcDEuY29sdW1uIC0gcDIuY29sdW1uO1xufVxuZnVuY3Rpb24gY2hlY2tWYWx1ZUFnYWluc3RSZWdleHBBcnJheSh2YWx1ZSwgcmVnZXhwQXJyYXkpIHtcbiAgICBpZiAoIXJlZ2V4cEFycmF5KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHJlZ2V4cEFycmF5Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYgKHJlZ2V4cEFycmF5W2ldLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjb252ZXJ0VG9VcmkoZmlsZVBhdGgpIHtcbiAgICAvL2FscmVhZHkgVVJJXG4gICAgaWYgKGZpbGVQYXRoLnN0YXJ0c1dpdGgoXCJmaWxlOi8vL1wiKSkge1xuICAgICAgICByZXR1cm4gZmlsZVBhdGg7XG4gICAgfVxuICAgIHJldHVybiBVUkkuZmlsZShmaWxlUGF0aCkudG9TdHJpbmcoKTtcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTI3Mjpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqKi8gfSksXG5cbi8qKiovIDE1MzE6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9pbnRlcm5hbC91dGlsL3R5cGVzLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzExMmNjN2MyNzU1MTI1NGFhMmIxNzA5OGZiNzc0ODY3ZjA1ZWQwZDlcblxuXG5cbnZhciBpc0FyZ3VtZW50c09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNTM4Nyk7XG52YXIgaXNHZW5lcmF0b3JGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjYyNSk7XG52YXIgd2hpY2hUeXBlZEFycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzMwKTtcbnZhciBpc1R5cGVkQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5NDMpO1xuXG5mdW5jdGlvbiB1bmN1cnJ5VGhpcyhmKSB7XG4gIHJldHVybiBmLmNhbGwuYmluZChmKTtcbn1cblxudmFyIEJpZ0ludFN1cHBvcnRlZCA9IHR5cGVvZiBCaWdJbnQgIT09ICd1bmRlZmluZWQnO1xudmFyIFN5bWJvbFN1cHBvcnRlZCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgT2JqZWN0VG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcblxudmFyIG51bWJlclZhbHVlID0gdW5jdXJyeVRoaXMoTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mKTtcbnZhciBzdHJpbmdWYWx1ZSA9IHVuY3VycnlUaGlzKFN0cmluZy5wcm90b3R5cGUudmFsdWVPZik7XG52YXIgYm9vbGVhblZhbHVlID0gdW5jdXJyeVRoaXMoQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZik7XG5cbmlmIChCaWdJbnRTdXBwb3J0ZWQpIHtcbiAgdmFyIGJpZ0ludFZhbHVlID0gdW5jdXJyeVRoaXMoQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mKTtcbn1cblxuaWYgKFN5bWJvbFN1cHBvcnRlZCkge1xuICB2YXIgc3ltYm9sVmFsdWUgPSB1bmN1cnJ5VGhpcyhTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YpO1xufVxuXG5mdW5jdGlvbiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBwcm90b3R5cGVWYWx1ZU9mKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgcHJvdG90eXBlVmFsdWVPZih2YWx1ZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnRzLmlzQXJndW1lbnRzT2JqZWN0ID0gaXNBcmd1bWVudHNPYmplY3Q7XG5leHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBpc0dlbmVyYXRvckZ1bmN0aW9uO1xuZXhwb3J0cy5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG5cbi8vIFRha2VuIGZyb20gaGVyZSBhbmQgbW9kaWZpZWQgZm9yIGJldHRlciBicm93c2VyIHN1cHBvcnRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcC1pcy1wcm9taXNlL2Jsb2IvY2RhMzVhNTEzYmRhMDNmOTc3YWQ1Y2RlM2EwNzlkMjM3ZTgyZDdlZi9pbmRleC5qc1xuZnVuY3Rpb24gaXNQcm9taXNlKGlucHV0KSB7XG5cdHJldHVybiAoXG5cdFx0KFxuXHRcdFx0dHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0XHRpbnB1dCBpbnN0YW5jZW9mIFByb21pc2Vcblx0XHQpIHx8XG5cdFx0KFxuXHRcdFx0aW5wdXQgIT09IG51bGwgJiZcblx0XHRcdHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiZcblx0XHRcdHR5cGVvZiBpbnB1dC50aGVuID09PSAnZnVuY3Rpb24nICYmXG5cdFx0XHR0eXBlb2YgaW5wdXQuY2F0Y2ggPT09ICdmdW5jdGlvbidcblx0XHQpXG5cdCk7XG59XG5leHBvcnRzLmlzUHJvbWlzZSA9IGlzUHJvbWlzZTtcblxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KSB7XG4gICAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIGlzVHlwZWRBcnJheSh2YWx1ZSkgfHxcbiAgICBpc0RhdGFWaWV3KHZhbHVlKVxuICApO1xufVxuZXhwb3J0cy5pc0FycmF5QnVmZmVyVmlldyA9IGlzQXJyYXlCdWZmZXJWaWV3O1xuXG5cbmZ1bmN0aW9uIGlzVWludDhBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ1VpbnQ4QXJyYXknO1xufVxuZXhwb3J0cy5pc1VpbnQ4QXJyYXkgPSBpc1VpbnQ4QXJyYXk7XG5cbmZ1bmN0aW9uIGlzVWludDhDbGFtcGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdVaW50OENsYW1wZWRBcnJheSc7XG59XG5leHBvcnRzLmlzVWludDhDbGFtcGVkQXJyYXkgPSBpc1VpbnQ4Q2xhbXBlZEFycmF5O1xuXG5mdW5jdGlvbiBpc1VpbnQxNkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnVWludDE2QXJyYXknO1xufVxuZXhwb3J0cy5pc1VpbnQxNkFycmF5ID0gaXNVaW50MTZBcnJheTtcblxuZnVuY3Rpb24gaXNVaW50MzJBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ1VpbnQzMkFycmF5Jztcbn1cbmV4cG9ydHMuaXNVaW50MzJBcnJheSA9IGlzVWludDMyQXJyYXk7XG5cbmZ1bmN0aW9uIGlzSW50OEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnSW50OEFycmF5Jztcbn1cbmV4cG9ydHMuaXNJbnQ4QXJyYXkgPSBpc0ludDhBcnJheTtcblxuZnVuY3Rpb24gaXNJbnQxNkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnSW50MTZBcnJheSc7XG59XG5leHBvcnRzLmlzSW50MTZBcnJheSA9IGlzSW50MTZBcnJheTtcblxuZnVuY3Rpb24gaXNJbnQzMkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnSW50MzJBcnJheSc7XG59XG5leHBvcnRzLmlzSW50MzJBcnJheSA9IGlzSW50MzJBcnJheTtcblxuZnVuY3Rpb24gaXNGbG9hdDMyQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdGbG9hdDMyQXJyYXknO1xufVxuZXhwb3J0cy5pc0Zsb2F0MzJBcnJheSA9IGlzRmxvYXQzMkFycmF5O1xuXG5mdW5jdGlvbiBpc0Zsb2F0NjRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0Zsb2F0NjRBcnJheSc7XG59XG5leHBvcnRzLmlzRmxvYXQ2NEFycmF5ID0gaXNGbG9hdDY0QXJyYXk7XG5cbmZ1bmN0aW9uIGlzQmlnSW50NjRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0JpZ0ludDY0QXJyYXknO1xufVxuZXhwb3J0cy5pc0JpZ0ludDY0QXJyYXkgPSBpc0JpZ0ludDY0QXJyYXk7XG5cbmZ1bmN0aW9uIGlzQmlnVWludDY0QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdCaWdVaW50NjRBcnJheSc7XG59XG5leHBvcnRzLmlzQmlnVWludDY0QXJyYXkgPSBpc0JpZ1VpbnQ2NEFycmF5O1xuXG5mdW5jdGlvbiBpc01hcFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IE1hcF0nO1xufVxuaXNNYXBUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc01hcFRvU3RyaW5nKG5ldyBNYXAoKSlcbik7XG5cbmZ1bmN0aW9uIGlzTWFwKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc01hcFRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzTWFwVG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIE1hcDtcbn1cbmV4cG9ydHMuaXNNYXAgPSBpc01hcDtcblxuZnVuY3Rpb24gaXNTZXRUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTZXRdJztcbn1cbmlzU2V0VG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNTZXRUb1N0cmluZyhuZXcgU2V0KCkpXG4pO1xuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzU2V0VG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNTZXRUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgU2V0O1xufVxuZXhwb3J0cy5pc1NldCA9IGlzU2V0O1xuXG5mdW5jdGlvbiBpc1dlYWtNYXBUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBXZWFrTWFwXSc7XG59XG5pc1dlYWtNYXBUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgV2Vha01hcCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNXZWFrTWFwVG9TdHJpbmcobmV3IFdlYWtNYXAoKSlcbik7XG5mdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc1dlYWtNYXBUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc1dlYWtNYXBUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgV2Vha01hcDtcbn1cbmV4cG9ydHMuaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuXG5mdW5jdGlvbiBpc1dlYWtTZXRUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBXZWFrU2V0XSc7XG59XG5pc1dlYWtTZXRUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgV2Vha1NldCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNXZWFrU2V0VG9TdHJpbmcobmV3IFdlYWtTZXQoKSlcbik7XG5mdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgcmV0dXJuIGlzV2Vha1NldFRvU3RyaW5nKHZhbHVlKTtcbn1cbmV4cG9ydHMuaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cbmlzQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzQXJyYXlCdWZmZXJUb1N0cmluZyhuZXcgQXJyYXlCdWZmZXIoKSlcbik7XG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc0FycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xufVxuZXhwb3J0cy5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcblxuZnVuY3Rpb24gaXNEYXRhVmlld1RvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGFWaWV3XSc7XG59XG5pc0RhdGFWaWV3VG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICB0eXBlb2YgRGF0YVZpZXcgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzRGF0YVZpZXdUb1N0cmluZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpLCAwLCAxKSlcbik7XG5mdW5jdGlvbiBpc0RhdGFWaWV3KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzRGF0YVZpZXdUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc0RhdGFWaWV3VG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIERhdGFWaWV3O1xufVxuZXhwb3J0cy5pc0RhdGFWaWV3ID0gaXNEYXRhVmlldztcblxuLy8gU3RvcmUgYSBjb3B5IG9mIFNoYXJlZEFycmF5QnVmZmVyIGluIGNhc2UgaXQncyBkZWxldGVkIGVsc2V3aGVyZVxudmFyIFNoYXJlZEFycmF5QnVmZmVyQ29weSA9IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgPyBTaGFyZWRBcnJheUJ1ZmZlciA6IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTaGFyZWRBcnJheUJ1ZmZlcl0nO1xufVxuZnVuY3Rpb24gaXNTaGFyZWRBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyQ29weSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID0gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nKG5ldyBTaGFyZWRBcnJheUJ1ZmZlckNvcHkoKSk7XG4gIH1cblxuICByZXR1cm4gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXJDb3B5O1xufVxuZXhwb3J0cy5pc1NoYXJlZEFycmF5QnVmZmVyID0gaXNTaGFyZWRBcnJheUJ1ZmZlcjtcblxuZnVuY3Rpb24gaXNBc3luY0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJztcbn1cbmV4cG9ydHMuaXNBc3luY0Z1bmN0aW9uID0gaXNBc3luY0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc01hcEl0ZXJhdG9yKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IE1hcCBJdGVyYXRvcl0nO1xufVxuZXhwb3J0cy5pc01hcEl0ZXJhdG9yID0gaXNNYXBJdGVyYXRvcjtcblxuZnVuY3Rpb24gaXNTZXRJdGVyYXRvcih2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTZXQgSXRlcmF0b3JdJztcbn1cbmV4cG9ydHMuaXNTZXRJdGVyYXRvciA9IGlzU2V0SXRlcmF0b3I7XG5cbmZ1bmN0aW9uIGlzR2VuZXJhdG9yT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEdlbmVyYXRvcl0nO1xufVxuZXhwb3J0cy5pc0dlbmVyYXRvck9iamVjdCA9IGlzR2VuZXJhdG9yT2JqZWN0O1xuXG5mdW5jdGlvbiBpc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGUodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgV2ViQXNzZW1ibHkuTW9kdWxlXSc7XG59XG5leHBvcnRzLmlzV2ViQXNzZW1ibHlDb21waWxlZE1vZHVsZSA9IGlzV2ViQXNzZW1ibHlDb21waWxlZE1vZHVsZTtcblxuZnVuY3Rpb24gaXNOdW1iZXJPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIG51bWJlclZhbHVlKTtcbn1cbmV4cG9ydHMuaXNOdW1iZXJPYmplY3QgPSBpc051bWJlck9iamVjdDtcblxuZnVuY3Rpb24gaXNTdHJpbmdPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIHN0cmluZ1ZhbHVlKTtcbn1cbmV4cG9ydHMuaXNTdHJpbmdPYmplY3QgPSBpc1N0cmluZ09iamVjdDtcblxuZnVuY3Rpb24gaXNCb29sZWFuT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBib29sZWFuVmFsdWUpO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW5PYmplY3QgPSBpc0Jvb2xlYW5PYmplY3Q7XG5cbmZ1bmN0aW9uIGlzQmlnSW50T2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBCaWdJbnRTdXBwb3J0ZWQgJiYgY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgYmlnSW50VmFsdWUpO1xufVxuZXhwb3J0cy5pc0JpZ0ludE9iamVjdCA9IGlzQmlnSW50T2JqZWN0O1xuXG5mdW5jdGlvbiBpc1N5bWJvbE9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gU3ltYm9sU3VwcG9ydGVkICYmIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIHN5bWJvbFZhbHVlKTtcbn1cbmV4cG9ydHMuaXNTeW1ib2xPYmplY3QgPSBpc1N5bWJvbE9iamVjdDtcblxuZnVuY3Rpb24gaXNCb3hlZFByaW1pdGl2ZSh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIGlzTnVtYmVyT2JqZWN0KHZhbHVlKSB8fFxuICAgIGlzU3RyaW5nT2JqZWN0KHZhbHVlKSB8fFxuICAgIGlzQm9vbGVhbk9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc0JpZ0ludE9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc1N5bWJvbE9iamVjdCh2YWx1ZSlcbiAgKTtcbn1cbmV4cG9ydHMuaXNCb3hlZFByaW1pdGl2ZSA9IGlzQm94ZWRQcmltaXRpdmU7XG5cbmZ1bmN0aW9uIGlzQW55QXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHxcbiAgICBpc1NoYXJlZEFycmF5QnVmZmVyKHZhbHVlKVxuICApO1xufVxuZXhwb3J0cy5pc0FueUFycmF5QnVmZmVyID0gaXNBbnlBcnJheUJ1ZmZlcjtcblxuWydpc1Byb3h5JywgJ2lzRXh0ZXJuYWwnLCAnaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QnXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbWV0aG9kLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArICcgaXMgbm90IHN1cHBvcnRlZCBpbiB1c2VybGFuZCcpO1xuICAgIH1cbiAgfSk7XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjgyNzpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuLyogcHJvdmlkZWQgZGVwZW5kZW5jeSAqLyB2YXIgcHJvY2VzcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTkwNyk7XG4vKiBwcm92aWRlZCBkZXBlbmRlbmN5ICovIHZhciBjb25zb2xlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MzY0KTtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8XG4gIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBkZXNjcmlwdG9ycyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzY3JpcHRvcnNba2V5c1tpXV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfTtcblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZSZWdleCA9IC9eJC87XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0RFQlVHKSB7XG4gIHZhciBkZWJ1Z0VudiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUc7XG4gIGRlYnVnRW52ID0gZGVidWdFbnYucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCs/Ll0vZywgJ1xcXFwkJicpXG4gICAgLnJlcGxhY2UoL1xcKi9nLCAnLionKVxuICAgIC5yZXBsYWNlKC8sL2csICckfF4nKVxuICAgIC50b1VwcGVyQ2FzZSgpO1xuICBkZWJ1Z0VudlJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyBkZWJ1Z0VudiArICckJywgJ2knKTtcbn1cbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAoZGVidWdFbnZSZWdleC50ZXN0KHNldCkpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc2xpY2UoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZXhwb3J0cy50eXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUzMSk7XG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5leHBvcnRzLnR5cGVzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuZXhwb3J0cy50eXBlcy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcbmV4cG9ydHMudHlwZXMuaXNOYXRpdmVFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyNzIpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2MTUpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxudmFyIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sKCd1dGlsLnByb21pc2lmeS5jdXN0b20nKSA6IHVuZGVmaW5lZDtcblxuZXhwb3J0cy5wcm9taXNpZnkgPSBmdW5jdGlvbiBwcm9taXNpZnkob3JpZ2luYWwpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJvcmlnaW5hbFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuXG4gIGlmIChrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wgJiYgb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXSkge1xuICAgIHZhciBmbiA9IG9yaWdpbmFsW2tDdXN0b21Qcm9taXNpZmllZFN5bWJvbF07XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidXRpbC5wcm9taXNpZnkuY3VzdG9tXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sLCB7XG4gICAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZuKCkge1xuICAgIHZhciBwcm9taXNlUmVzb2x2ZSwgcHJvbWlzZVJlamVjdDtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHByb21pc2VSZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIHByb21pc2VSZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG5cbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG4gICAgYXJncy5wdXNoKGZ1bmN0aW9uIChlcnIsIHZhbHVlKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2VSZXNvbHZlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihmbiwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgIGZuLFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpXG4gICk7XG59XG5cbmV4cG9ydHMucHJvbWlzaWZ5LmN1c3RvbSA9IGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbFxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeU9uUmVqZWN0ZWQocmVhc29uLCBjYikge1xuICAvLyBgIXJlYXNvbmAgZ3VhcmQgaW5zcGlyZWQgYnkgYmx1ZWJpcmQgKFJlZjogaHR0cHM6Ly9nb28uZ2wvdDVJUzZNKS5cbiAgLy8gQmVjYXVzZSBgbnVsbGAgaXMgYSBzcGVjaWFsIGVycm9yIHZhbHVlIGluIGNhbGxiYWNrcyB3aGljaCBtZWFucyBcIm5vIGVycm9yXG4gIC8vIG9jY3VycmVkXCIsIHdlIGVycm9yLXdyYXAgc28gdGhlIGNhbGxiYWNrIGNvbnN1bWVyIGNhbiBkaXN0aW5ndWlzaCBiZXR3ZWVuXG4gIC8vIFwidGhlIHByb21pc2UgcmVqZWN0ZWQgd2l0aCBudWxsXCIgb3IgXCJ0aGUgcHJvbWlzZSBmdWxmaWxsZWQgd2l0aCB1bmRlZmluZWRcIi5cbiAgaWYgKCFyZWFzb24pIHtcbiAgICB2YXIgbmV3UmVhc29uID0gbmV3IEVycm9yKCdQcm9taXNlIHdhcyByZWplY3RlZCB3aXRoIGEgZmFsc3kgdmFsdWUnKTtcbiAgICBuZXdSZWFzb24ucmVhc29uID0gcmVhc29uO1xuICAgIHJlYXNvbiA9IG5ld1JlYXNvbjtcbiAgfVxuICByZXR1cm4gY2IocmVhc29uKTtcbn1cblxuZnVuY3Rpb24gY2FsbGJhY2tpZnkob3JpZ2luYWwpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gIH1cblxuICAvLyBXZSBETyBOT1QgcmV0dXJuIHRoZSBwcm9taXNlIGFzIGl0IGdpdmVzIHRoZSB1c2VyIGEgZmFsc2Ugc2Vuc2UgdGhhdFxuICAvLyB0aGUgcHJvbWlzZSBpcyBhY3R1YWxseSBzb21laG93IHJlbGF0ZWQgdG8gdGhlIGNhbGxiYWNrJ3MgZXhlY3V0aW9uXG4gIC8vIGFuZCB0aGF0IHRoZSBjYWxsYmFjayB0aHJvd2luZyB3aWxsIHJlamVjdCB0aGUgcHJvbWlzZS5cbiAgZnVuY3Rpb24gY2FsbGJhY2tpZmllZCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbWF5YmVDYiA9IGFyZ3MucG9wKCk7XG4gICAgaWYgKHR5cGVvZiBtYXliZUNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGFzdCBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBjYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG1heWJlQ2IuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIC8vIEluIHRydWUgbm9kZSBzdHlsZSB3ZSBwcm9jZXNzIHRoZSBjYWxsYmFjayBvbiBgbmV4dFRpY2tgIHdpdGggYWxsIHRoZVxuICAgIC8vIGltcGxpY2F0aW9ucyAoc3RhY2ssIGB1bmNhdWdodEV4Y2VwdGlvbmAsIGBhc3luY19ob29rc2ApXG4gICAgb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJldCkgeyBwcm9jZXNzLm5leHRUaWNrKGNiLmJpbmQobnVsbCwgbnVsbCwgcmV0KSkgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHJlaikgeyBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNraWZ5T25SZWplY3RlZC5iaW5kKG51bGwsIHJlaiwgY2IpKSB9KTtcbiAgfVxuXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihjYWxsYmFja2lmaWVkLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY2FsbGJhY2tpZmllZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbCkpO1xuICByZXR1cm4gY2FsbGJhY2tpZmllZDtcbn1cbmV4cG9ydHMuY2FsbGJhY2tpZnkgPSBjYWxsYmFja2lmeTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTIwODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oOTExMCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA5MTEwOlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5jcmVhdGVNZXNzYWdlQ29ubmVjdGlvbiA9IGV4cG9ydHMuQnJvd3Nlck1lc3NhZ2VXcml0ZXIgPSBleHBvcnRzLkJyb3dzZXJNZXNzYWdlUmVhZGVyID0gdm9pZCAwO1xuY29uc3QgcmlsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzMTIpO1xuLy8gSW5zdGFsbCB0aGUgYnJvd3NlciBydW50aW1lIGFic3RyYWN0LlxucmlsXzEuZGVmYXVsdC5pbnN0YWxsKCk7XG5jb25zdCBhcGlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzY3Mik7XG5fX2V4cG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXyg3NjcyKSwgZXhwb3J0cyk7XG5jbGFzcyBCcm93c2VyTWVzc2FnZVJlYWRlciBleHRlbmRzIGFwaV8xLkFic3RyYWN0TWVzc2FnZVJlYWRlciB7XG4gICAgY29uc3RydWN0b3IocG9ydCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9vbkRhdGEgPSBuZXcgYXBpXzEuRW1pdHRlcigpO1xuICAgICAgICB0aGlzLl9tZXNzYWdlTGlzdGVuZXIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRGF0YS5maXJlKGV2ZW50LmRhdGEpO1xuICAgICAgICB9O1xuICAgICAgICBwb3J0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGV2ZW50KSA9PiB0aGlzLmZpcmVFcnJvcihldmVudCkpO1xuICAgICAgICBwb3J0Lm9ubWVzc2FnZSA9IHRoaXMuX21lc3NhZ2VMaXN0ZW5lcjtcbiAgICB9XG4gICAgbGlzdGVuKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vbkRhdGEuZXZlbnQoY2FsbGJhY2spO1xuICAgIH1cbn1cbmV4cG9ydHMuQnJvd3Nlck1lc3NhZ2VSZWFkZXIgPSBCcm93c2VyTWVzc2FnZVJlYWRlcjtcbmNsYXNzIEJyb3dzZXJNZXNzYWdlV3JpdGVyIGV4dGVuZHMgYXBpXzEuQWJzdHJhY3RNZXNzYWdlV3JpdGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3J0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucG9ydCA9IHBvcnQ7XG4gICAgICAgIHRoaXMuZXJyb3JDb3VudCA9IDA7XG4gICAgICAgIHBvcnQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoZXZlbnQpID0+IHRoaXMuZmlyZUVycm9yKGV2ZW50KSk7XG4gICAgfVxuICAgIHdyaXRlKG1zZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5wb3J0LnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCBtc2cpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVFcnJvcihlcnJvciwgbXNnKSB7XG4gICAgICAgIHRoaXMuZXJyb3JDb3VudCsrO1xuICAgICAgICB0aGlzLmZpcmVFcnJvcihlcnJvciwgbXNnLCB0aGlzLmVycm9yQ291bnQpO1xuICAgIH1cbiAgICBlbmQoKSB7XG4gICAgfVxufVxuZXhwb3J0cy5Ccm93c2VyTWVzc2FnZVdyaXRlciA9IEJyb3dzZXJNZXNzYWdlV3JpdGVyO1xuZnVuY3Rpb24gY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24ocmVhZGVyLCB3cml0ZXIsIGxvZ2dlciwgb3B0aW9ucykge1xuICAgIGlmIChsb2dnZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb2dnZXIgPSBhcGlfMS5OdWxsTG9nZ2VyO1xuICAgIH1cbiAgICBpZiAoYXBpXzEuQ29ubmVjdGlvblN0cmF0ZWd5LmlzKG9wdGlvbnMpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7IGNvbm5lY3Rpb25TdHJhdGVneTogb3B0aW9ucyB9O1xuICAgIH1cbiAgICByZXR1cm4gKDAsIGFwaV8xLmNyZWF0ZU1lc3NhZ2VDb25uZWN0aW9uKShyZWFkZXIsIHdyaXRlciwgbG9nZ2VyLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24gPSBjcmVhdGVNZXNzYWdlQ29ubmVjdGlvbjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzMxMjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBwcm92aWRlZCBkZXBlbmRlbmN5ICovIHZhciBjb25zb2xlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MzY0KTtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5jb25zdCBhcGlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzY3Mik7XG5jbGFzcyBNZXNzYWdlQnVmZmVyIGV4dGVuZHMgYXBpXzEuQWJzdHJhY3RNZXNzYWdlQnVmZmVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbmNvZGluZyA9ICd1dGYtOCcpIHtcbiAgICAgICAgc3VwZXIoZW5jb2RpbmcpO1xuICAgICAgICB0aGlzLmFzY2lpRGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcignYXNjaWknKTtcbiAgICB9XG4gICAgZW1wdHlCdWZmZXIoKSB7XG4gICAgICAgIHJldHVybiBNZXNzYWdlQnVmZmVyLmVtcHR5QnVmZmVyO1xuICAgIH1cbiAgICBmcm9tU3RyaW5nKHZhbHVlLCBfZW5jb2RpbmcpIHtcbiAgICAgICAgcmV0dXJuIChuZXcgVGV4dEVuY29kZXIoKSkuZW5jb2RlKHZhbHVlKTtcbiAgICB9XG4gICAgdG9TdHJpbmcodmFsdWUsIGVuY29kaW5nKSB7XG4gICAgICAgIGlmIChlbmNvZGluZyA9PT0gJ2FzY2lpJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXNjaWlEZWNvZGVyLmRlY29kZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKG5ldyBUZXh0RGVjb2RlcihlbmNvZGluZykpLmRlY29kZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXNOYXRpdmUoYnVmZmVyLCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgwLCBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFsbG9jTmF0aXZlKGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICB9XG59XG5NZXNzYWdlQnVmZmVyLmVtcHR5QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG5jbGFzcyBSZWFkYWJsZVN0cmVhbVdyYXBwZXIge1xuICAgIGNvbnN0cnVjdG9yKHNvY2tldCkge1xuICAgICAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcbiAgICAgICAgdGhpcy5fb25EYXRhID0gbmV3IGFwaV8xLkVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5fbWVzc2FnZUxpc3RlbmVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBibG9iID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIGJsb2IuYXJyYXlCdWZmZXIoKS50aGVuKChidWZmZXIpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRhdGEuZmlyZShuZXcgVWludDhBcnJheShidWZmZXIpKTtcbiAgICAgICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgICAgICAoMCwgYXBpXzEuUkFMKSgpLmNvbnNvbGUuZXJyb3IoYENvbnZlcnRpbmcgYmxvYiB0byBhcnJheSBidWZmZXIgZmFpbGVkLmApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLl9tZXNzYWdlTGlzdGVuZXIpO1xuICAgIH1cbiAgICBvbkNsb3NlKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gYXBpXzEuRGlzcG9zYWJsZS5jcmVhdGUoKCkgPT4gdGhpcy5zb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xvc2UnLCBsaXN0ZW5lcikpO1xuICAgIH1cbiAgICBvbkVycm9yKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gYXBpXzEuRGlzcG9zYWJsZS5jcmVhdGUoKCkgPT4gdGhpcy5zb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBsaXN0ZW5lcikpO1xuICAgIH1cbiAgICBvbkVuZChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdlbmQnLCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiBhcGlfMS5EaXNwb3NhYmxlLmNyZWF0ZSgoKSA9PiB0aGlzLnNvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKCdlbmQnLCBsaXN0ZW5lcikpO1xuICAgIH1cbiAgICBvbkRhdGEobGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uRGF0YS5ldmVudChsaXN0ZW5lcik7XG4gICAgfVxufVxuY2xhc3MgV3JpdGFibGVTdHJlYW1XcmFwcGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihzb2NrZXQpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gICAgfVxuICAgIG9uQ2xvc2UobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiBhcGlfMS5EaXNwb3NhYmxlLmNyZWF0ZSgoKSA9PiB0aGlzLnNvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbG9zZScsIGxpc3RlbmVyKSk7XG4gICAgfVxuICAgIG9uRXJyb3IobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiBhcGlfMS5EaXNwb3NhYmxlLmNyZWF0ZSgoKSA9PiB0aGlzLnNvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGxpc3RlbmVyKSk7XG4gICAgfVxuICAgIG9uRW5kKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2VuZCcsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIGFwaV8xLkRpc3Bvc2FibGUuY3JlYXRlKCgpID0+IHRoaXMuc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZCcsIGxpc3RlbmVyKSk7XG4gICAgfVxuICAgIHdyaXRlKGRhdGEsIGVuY29kaW5nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIGVuY29kaW5nICE9PSAndXRmLTgnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbiBhIEJyb3dzZXIgZW52aXJvbm1lbnRzIG9ubHkgdXRmLTggdGV4dCBlbmNvZGluZyBpcyBzdXBwb3J0ZWQuIEJ1dCBnb3QgZW5jb2Rpbmc6ICR7ZW5jb2Rpbmd9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5zZW5kKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuc2VuZChkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGVuZCgpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuY2xvc2UoKTtcbiAgICB9XG59XG5jb25zdCBfdGV4dEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbmNvbnN0IF9yaWwgPSBPYmplY3QuZnJlZXplKHtcbiAgICBtZXNzYWdlQnVmZmVyOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgY3JlYXRlOiAoZW5jb2RpbmcpID0+IG5ldyBNZXNzYWdlQnVmZmVyKGVuY29kaW5nKVxuICAgIH0pLFxuICAgIGFwcGxpY2F0aW9uSnNvbjogT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIGVuY29kZXI6IE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgbmFtZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgZW5jb2RlOiAobXNnLCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2hhcnNldCAhPT0gJ3V0Zi04Jykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluIGEgQnJvd3NlciBlbnZpcm9ubWVudHMgb25seSB1dGYtOCB0ZXh0IGVuY29kaW5nIGlzIHN1cHBvcnRlZC4gQnV0IGdvdCBlbmNvZGluZzogJHtvcHRpb25zLmNoYXJzZXR9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoX3RleHRFbmNvZGVyLmVuY29kZShKU09OLnN0cmluZ2lmeShtc2csIHVuZGVmaW5lZCwgMCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIGRlY29kZXI6IE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgbmFtZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgZGVjb2RlOiAoYnVmZmVyLCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYnVmZmVyIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbiBhIEJyb3dzZXIgZW52aXJvbm1lbnRzIG9ubHkgVWludDhBcnJheXMgYXJlIHN1cHBvcnRlZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShKU09OLnBhcnNlKG5ldyBUZXh0RGVjb2RlcihvcHRpb25zLmNoYXJzZXQpLmRlY29kZShidWZmZXIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSksXG4gICAgc3RyZWFtOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgYXNSZWFkYWJsZVN0cmVhbTogKHNvY2tldCkgPT4gbmV3IFJlYWRhYmxlU3RyZWFtV3JhcHBlcihzb2NrZXQpLFxuICAgICAgICBhc1dyaXRhYmxlU3RyZWFtOiAoc29ja2V0KSA9PiBuZXcgV3JpdGFibGVTdHJlYW1XcmFwcGVyKHNvY2tldClcbiAgICB9KSxcbiAgICBjb25zb2xlOiBjb25zb2xlLFxuICAgIHRpbWVyOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgbXMsIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZSA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIG1zLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IGNsZWFyVGltZW91dChoYW5kbGUpIH07XG4gICAgICAgIH0sXG4gICAgICAgIHNldEltbWVkaWF0ZShjYWxsYmFjaywgLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlID0gc2V0VGltZW91dChjYWxsYmFjaywgMCwgLi4uYXJncyk7XG4gICAgICAgICAgICByZXR1cm4geyBkaXNwb3NlOiAoKSA9PiBjbGVhclRpbWVvdXQoaGFuZGxlKSB9O1xuICAgICAgICB9LFxuICAgICAgICBzZXRJbnRlcnZhbChjYWxsYmFjaywgbXMsIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZSA9IHNldEludGVydmFsKGNhbGxiYWNrLCBtcywgLi4uYXJncyk7XG4gICAgICAgICAgICByZXR1cm4geyBkaXNwb3NlOiAoKSA9PiBjbGVhckludGVydmFsKGhhbmRsZSkgfTtcbiAgICAgICAgfSxcbiAgICB9KVxufSk7XG5mdW5jdGlvbiBSSUwoKSB7XG4gICAgcmV0dXJuIF9yaWw7XG59XG4oZnVuY3Rpb24gKFJJTCkge1xuICAgIGZ1bmN0aW9uIGluc3RhbGwoKSB7XG4gICAgICAgIGFwaV8xLlJBTC5pbnN0YWxsKF9yaWwpO1xuICAgIH1cbiAgICBSSUwuaW5zdGFsbCA9IGluc3RhbGw7XG59KShSSUwgfHwgKFJJTCA9IHt9KSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFJJTDtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzY3Mjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL3RoZW5hYmxlLmQudHNcIiAvPlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLlByb2dyZXNzVHlwZSA9IGV4cG9ydHMuUHJvZ3Jlc3NUb2tlbiA9IGV4cG9ydHMuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24gPSBleHBvcnRzLk51bGxMb2dnZXIgPSBleHBvcnRzLkNvbm5lY3Rpb25PcHRpb25zID0gZXhwb3J0cy5Db25uZWN0aW9uU3RyYXRlZ3kgPSBleHBvcnRzLkFic3RyYWN0TWVzc2FnZUJ1ZmZlciA9IGV4cG9ydHMuV3JpdGVhYmxlU3RyZWFtTWVzc2FnZVdyaXRlciA9IGV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlV3JpdGVyID0gZXhwb3J0cy5NZXNzYWdlV3JpdGVyID0gZXhwb3J0cy5SZWFkYWJsZVN0cmVhbU1lc3NhZ2VSZWFkZXIgPSBleHBvcnRzLkFic3RyYWN0TWVzc2FnZVJlYWRlciA9IGV4cG9ydHMuTWVzc2FnZVJlYWRlciA9IGV4cG9ydHMuU2hhcmVkQXJyYXlSZWNlaXZlclN0cmF0ZWd5ID0gZXhwb3J0cy5TaGFyZWRBcnJheVNlbmRlclN0cmF0ZWd5ID0gZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlbiA9IGV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UgPSBleHBvcnRzLkVtaXR0ZXIgPSBleHBvcnRzLkV2ZW50ID0gZXhwb3J0cy5EaXNwb3NhYmxlID0gZXhwb3J0cy5MUlVDYWNoZSA9IGV4cG9ydHMuVG91Y2ggPSBleHBvcnRzLkxpbmtlZE1hcCA9IGV4cG9ydHMuUGFyYW1ldGVyU3RydWN0dXJlcyA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTkgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGU4ID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNyA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTYgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGU1ID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNCA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTMgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGUyID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMSA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTAgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGUgPSBleHBvcnRzLkVycm9yQ29kZXMgPSBleHBvcnRzLlJlc3BvbnNlRXJyb3IgPSBleHBvcnRzLlJlcXVlc3RUeXBlOSA9IGV4cG9ydHMuUmVxdWVzdFR5cGU4ID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTcgPSBleHBvcnRzLlJlcXVlc3RUeXBlNiA9IGV4cG9ydHMuUmVxdWVzdFR5cGU1ID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTQgPSBleHBvcnRzLlJlcXVlc3RUeXBlMyA9IGV4cG9ydHMuUmVxdWVzdFR5cGUyID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTEgPSBleHBvcnRzLlJlcXVlc3RUeXBlMCA9IGV4cG9ydHMuUmVxdWVzdFR5cGUgPSBleHBvcnRzLk1lc3NhZ2UgPSBleHBvcnRzLlJBTCA9IHZvaWQgMDtcbmV4cG9ydHMuTWVzc2FnZVN0cmF0ZWd5ID0gZXhwb3J0cy5DYW5jZWxsYXRpb25TdHJhdGVneSA9IGV4cG9ydHMuQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3kgPSBleHBvcnRzLkNhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kgPSBleHBvcnRzLkNvbm5lY3Rpb25FcnJvciA9IGV4cG9ydHMuQ29ubmVjdGlvbkVycm9ycyA9IGV4cG9ydHMuTG9nVHJhY2VOb3RpZmljYXRpb24gPSBleHBvcnRzLlNldFRyYWNlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5UcmFjZUZvcm1hdCA9IGV4cG9ydHMuVHJhY2VWYWx1ZXMgPSBleHBvcnRzLlRyYWNlID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzE2Mik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNZXNzYWdlXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5NZXNzYWdlOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RUeXBlXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5SZXF1ZXN0VHlwZTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTBcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlMDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTFcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlMTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlMjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTNcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlMzsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlNDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTVcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlNTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTZcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlNjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTdcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlNzsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZThcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlODsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTlcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlOTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXNwb25zZUVycm9yXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVycm9yQ29kZXNcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLkVycm9yQ29kZXM7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90aWZpY2F0aW9uVHlwZVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25UeXBlMFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTA7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90aWZpY2F0aW9uVHlwZTFcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLk5vdGlmaWNhdGlvblR5cGUxOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGlmaWNhdGlvblR5cGUyXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlMjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25UeXBlM1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTM7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90aWZpY2F0aW9uVHlwZTRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLk5vdGlmaWNhdGlvblR5cGU0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGlmaWNhdGlvblR5cGU1XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlNTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25UeXBlNlwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTY7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90aWZpY2F0aW9uVHlwZTdcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLk5vdGlmaWNhdGlvblR5cGU3OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGlmaWNhdGlvblR5cGU4XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlODsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25UeXBlOVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTk7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGFyYW1ldGVyU3RydWN0dXJlc1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlczsgfSB9KSk7XG5jb25zdCBsaW5rZWRNYXBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEwOSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMaW5rZWRNYXBcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaW5rZWRNYXBfMS5MaW5rZWRNYXA7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTFJVQ2FjaGVcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaW5rZWRNYXBfMS5MUlVDYWNoZTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUb3VjaFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpbmtlZE1hcF8xLlRvdWNoOyB9IH0pKTtcbmNvbnN0IGRpc3Bvc2FibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODg0NCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaXNwb3NhYmxlXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzcG9zYWJsZV8xLkRpc3Bvc2FibGU7IH0gfSkpO1xuY29uc3QgZXZlbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0NzkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXZlbnRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBldmVudHNfMS5FdmVudDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbWl0dGVyXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXZlbnRzXzEuRW1pdHRlcjsgfSB9KSk7XG5jb25zdCBjYW5jZWxsYXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1Nyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDYW5jZWxsYXRpb25Ub2tlblNvdXJjZVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbmNlbGxhdGlvbl8xLkNhbmNlbGxhdGlvblRva2VuU291cmNlOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhbmNlbGxhdGlvblRva2VuXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FuY2VsbGF0aW9uXzEuQ2FuY2VsbGF0aW9uVG9rZW47IH0gfSkpO1xuY29uc3Qgc2hhcmVkQXJyYXlDYW5jZWxsYXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzQ4OSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTaGFyZWRBcnJheVNlbmRlclN0cmF0ZWd5XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2hhcmVkQXJyYXlDYW5jZWxsYXRpb25fMS5TaGFyZWRBcnJheVNlbmRlclN0cmF0ZWd5OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNoYXJlZEFycmF5UmVjZWl2ZXJTdHJhdGVneVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNoYXJlZEFycmF5Q2FuY2VsbGF0aW9uXzEuU2hhcmVkQXJyYXlSZWNlaXZlclN0cmF0ZWd5OyB9IH0pKTtcbmNvbnN0IG1lc3NhZ2VSZWFkZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjU2KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1lc3NhZ2VSZWFkZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlUmVhZGVyXzEuTWVzc2FnZVJlYWRlcjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBYnN0cmFjdE1lc3NhZ2VSZWFkZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlUmVhZGVyXzEuQWJzdHJhY3RNZXNzYWdlUmVhZGVyOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlYWRhYmxlU3RyZWFtTWVzc2FnZVJlYWRlclwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VSZWFkZXJfMS5SZWFkYWJsZVN0cmVhbU1lc3NhZ2VSZWFkZXI7IH0gfSkpO1xuY29uc3QgbWVzc2FnZVdyaXRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MDM2KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1lc3NhZ2VXcml0ZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlV3JpdGVyXzEuTWVzc2FnZVdyaXRlcjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBYnN0cmFjdE1lc3NhZ2VXcml0ZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlV3JpdGVyXzEuQWJzdHJhY3RNZXNzYWdlV3JpdGVyOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldyaXRlYWJsZVN0cmVhbU1lc3NhZ2VXcml0ZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlV3JpdGVyXzEuV3JpdGVhYmxlU3RyZWFtTWVzc2FnZVdyaXRlcjsgfSB9KSk7XG5jb25zdCBtZXNzYWdlQnVmZmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4MDUpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQWJzdHJhY3RNZXNzYWdlQnVmZmVyXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZUJ1ZmZlcl8xLkFic3RyYWN0TWVzc2FnZUJ1ZmZlcjsgfSB9KSk7XG5jb25zdCBjb25uZWN0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwNTQpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29ubmVjdGlvblN0cmF0ZWd5XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLkNvbm5lY3Rpb25TdHJhdGVneTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25uZWN0aW9uT3B0aW9uc1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5Db25uZWN0aW9uT3B0aW9uczsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOdWxsTG9nZ2VyXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLk51bGxMb2dnZXI7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb25cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUHJvZ3Jlc3NUb2tlblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5Qcm9ncmVzc1Rva2VuOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlByb2dyZXNzVHlwZVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5Qcm9ncmVzc1R5cGU7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHJhY2VcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuVHJhY2U7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHJhY2VWYWx1ZXNcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuVHJhY2VWYWx1ZXM7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHJhY2VGb3JtYXRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuVHJhY2VGb3JtYXQ7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2V0VHJhY2VOb3RpZmljYXRpb25cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuU2V0VHJhY2VOb3RpZmljYXRpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTG9nVHJhY2VOb3RpZmljYXRpb25cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuTG9nVHJhY2VOb3RpZmljYXRpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29ubmVjdGlvbkVycm9yc1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5Db25uZWN0aW9uRXJyb3JzOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbm5lY3Rpb25FcnJvclwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5Db25uZWN0aW9uRXJyb3I7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5DYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLkNhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhbmNlbGxhdGlvblN0cmF0ZWd5XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLkNhbmNlbGxhdGlvblN0cmF0ZWd5OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1lc3NhZ2VTdHJhdGVneVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5NZXNzYWdlU3RyYXRlZ3k7IH0gfSkpO1xuY29uc3QgcmFsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwOTEpO1xuZXhwb3J0cy5SQUwgPSByYWxfMS5kZWZhdWx0O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2OTU3OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UgPSBleHBvcnRzLkNhbmNlbGxhdGlvblRva2VuID0gdm9pZCAwO1xuY29uc3QgcmFsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwOTEpO1xuY29uc3QgSXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2MTgpO1xuY29uc3QgZXZlbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0NzkpO1xudmFyIENhbmNlbGxhdGlvblRva2VuO1xuKGZ1bmN0aW9uIChDYW5jZWxsYXRpb25Ub2tlbikge1xuICAgIENhbmNlbGxhdGlvblRva2VuLk5vbmUgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IGZhbHNlLFxuICAgICAgICBvbkNhbmNlbGxhdGlvblJlcXVlc3RlZDogZXZlbnRzXzEuRXZlbnQuTm9uZVxuICAgIH0pO1xuICAgIENhbmNlbGxhdGlvblRva2VuLkNhbmNlbGxlZCA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZDogdHJ1ZSxcbiAgICAgICAgb25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IGV2ZW50c18xLkV2ZW50Lk5vbmVcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiAoY2FuZGlkYXRlID09PSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lXG4gICAgICAgICAgICB8fCBjYW5kaWRhdGUgPT09IENhbmNlbGxhdGlvblRva2VuLkNhbmNlbGxlZFxuICAgICAgICAgICAgfHwgKElzLmJvb2xlYW4oY2FuZGlkYXRlLmlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKSAmJiAhIWNhbmRpZGF0ZS5vbkNhbmNlbGxhdGlvblJlcXVlc3RlZCkpO1xuICAgIH1cbiAgICBDYW5jZWxsYXRpb25Ub2tlbi5pcyA9IGlzO1xufSkoQ2FuY2VsbGF0aW9uVG9rZW4gfHwgKGV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbiA9IHt9KSk7XG5jb25zdCBzaG9ydGN1dEV2ZW50ID0gT2JqZWN0LmZyZWV6ZShmdW5jdGlvbiAoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICBjb25zdCBoYW5kbGUgPSAoMCwgcmFsXzEuZGVmYXVsdCkoKS50aW1lci5zZXRUaW1lb3V0KGNhbGxiYWNrLmJpbmQoY29udGV4dCksIDApO1xuICAgIHJldHVybiB7IGRpc3Bvc2UoKSB7IGhhbmRsZS5kaXNwb3NlKCk7IH0gfTtcbn0pO1xuY2xhc3MgTXV0YWJsZVRva2VuIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5faXNDYW5jZWxsZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgY2FuY2VsKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzQ2FuY2VsbGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5fZW1pdHRlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZmlyZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQ2FuY2VsbGVkO1xuICAgIH1cbiAgICBnZXQgb25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0NhbmNlbGxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHNob3J0Y3V0RXZlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9lbWl0dGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyID0gbmV3IGV2ZW50c18xLkVtaXR0ZXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZW1pdHRlci5ldmVudDtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2VtaXR0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fZW1pdHRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNsYXNzIENhbmNlbGxhdGlvblRva2VuU291cmNlIHtcbiAgICBnZXQgdG9rZW4oKSB7XG4gICAgICAgIGlmICghdGhpcy5fdG9rZW4pIHtcbiAgICAgICAgICAgIC8vIGJlIGxhenkgYW5kIGNyZWF0ZSB0aGUgdG9rZW4gb25seSB3aGVuXG4gICAgICAgICAgICAvLyBhY3R1YWxseSBuZWVkZWRcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuID0gbmV3IE11dGFibGVUb2tlbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl90b2tlbjtcbiAgICB9XG4gICAgY2FuY2VsKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3Rva2VuKSB7XG4gICAgICAgICAgICAvLyBzYXZlIGFuIG9iamVjdCBieSByZXR1cm5pbmcgdGhlIGRlZmF1bHRcbiAgICAgICAgICAgIC8vIGNhbmNlbGxlZCB0b2tlbiB3aGVuIGNhbmNlbGxhdGlvbiBoYXBwZW5zXG4gICAgICAgICAgICAvLyBiZWZvcmUgc29tZW9uZSBhc2tzIGZvciB0aGUgdG9rZW5cbiAgICAgICAgICAgIHRoaXMuX3Rva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW4uQ2FuY2VsbGVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdG9rZW4uY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbikge1xuICAgICAgICAgICAgLy8gZW5zdXJlIHRvIGluaXRpYWxpemUgd2l0aCBhbiBlbXB0eSB0b2tlbiBpZiB3ZSBoYWQgbm9uZVxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3Rva2VuIGluc3RhbmNlb2YgTXV0YWJsZVRva2VuKSB7XG4gICAgICAgICAgICAvLyBhY3R1YWxseSBkaXNwb3NlXG4gICAgICAgICAgICB0aGlzLl90b2tlbi5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkNhbmNlbGxhdGlvblRva2VuU291cmNlID0gQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2U7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQwNTQ6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24gPSBleHBvcnRzLkNvbm5lY3Rpb25PcHRpb25zID0gZXhwb3J0cy5NZXNzYWdlU3RyYXRlZ3kgPSBleHBvcnRzLkNhbmNlbGxhdGlvblN0cmF0ZWd5ID0gZXhwb3J0cy5DYW5jZWxsYXRpb25TZW5kZXJTdHJhdGVneSA9IGV4cG9ydHMuQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IGV4cG9ydHMuUmVxdWVzdENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kgPSBleHBvcnRzLklkQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IGV4cG9ydHMuQ29ubmVjdGlvblN0cmF0ZWd5ID0gZXhwb3J0cy5Db25uZWN0aW9uRXJyb3IgPSBleHBvcnRzLkNvbm5lY3Rpb25FcnJvcnMgPSBleHBvcnRzLkxvZ1RyYWNlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5TZXRUcmFjZU5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuVHJhY2VGb3JtYXQgPSBleHBvcnRzLlRyYWNlVmFsdWVzID0gZXhwb3J0cy5UcmFjZSA9IGV4cG9ydHMuTnVsbExvZ2dlciA9IGV4cG9ydHMuUHJvZ3Jlc3NUeXBlID0gZXhwb3J0cy5Qcm9ncmVzc1Rva2VuID0gdm9pZCAwO1xuY29uc3QgcmFsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwOTEpO1xuY29uc3QgSXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2MTgpO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzE2Mik7XG5jb25zdCBsaW5rZWRNYXBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEwOSk7XG5jb25zdCBldmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjQ3OSk7XG5jb25zdCBjYW5jZWxsYXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1Nyk7XG52YXIgQ2FuY2VsTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChDYW5jZWxOb3RpZmljYXRpb24pIHtcbiAgICBDYW5jZWxOb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLk5vdGlmaWNhdGlvblR5cGUoJyQvY2FuY2VsUmVxdWVzdCcpO1xufSkoQ2FuY2VsTm90aWZpY2F0aW9uIHx8IChDYW5jZWxOb3RpZmljYXRpb24gPSB7fSkpO1xudmFyIFByb2dyZXNzVG9rZW47XG4oZnVuY3Rpb24gKFByb2dyZXNzVG9rZW4pIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO1xuICAgIH1cbiAgICBQcm9ncmVzc1Rva2VuLmlzID0gaXM7XG59KShQcm9ncmVzc1Rva2VuIHx8IChleHBvcnRzLlByb2dyZXNzVG9rZW4gPSBQcm9ncmVzc1Rva2VuID0ge30pKTtcbnZhciBQcm9ncmVzc05vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoUHJvZ3Jlc3NOb3RpZmljYXRpb24pIHtcbiAgICBQcm9ncmVzc05vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZSgnJC9wcm9ncmVzcycpO1xufSkoUHJvZ3Jlc3NOb3RpZmljYXRpb24gfHwgKFByb2dyZXNzTm90aWZpY2F0aW9uID0ge30pKTtcbmNsYXNzIFByb2dyZXNzVHlwZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgfVxufVxuZXhwb3J0cy5Qcm9ncmVzc1R5cGUgPSBQcm9ncmVzc1R5cGU7XG52YXIgU3RhclJlcXVlc3RIYW5kbGVyO1xuKGZ1bmN0aW9uIChTdGFyUmVxdWVzdEhhbmRsZXIpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gSXMuZnVuYyh2YWx1ZSk7XG4gICAgfVxuICAgIFN0YXJSZXF1ZXN0SGFuZGxlci5pcyA9IGlzO1xufSkoU3RhclJlcXVlc3RIYW5kbGVyIHx8IChTdGFyUmVxdWVzdEhhbmRsZXIgPSB7fSkpO1xuZXhwb3J0cy5OdWxsTG9nZ2VyID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgZXJyb3I6ICgpID0+IHsgfSxcbiAgICB3YXJuOiAoKSA9PiB7IH0sXG4gICAgaW5mbzogKCkgPT4geyB9LFxuICAgIGxvZzogKCkgPT4geyB9XG59KTtcbnZhciBUcmFjZTtcbihmdW5jdGlvbiAoVHJhY2UpIHtcbiAgICBUcmFjZVtUcmFjZVtcIk9mZlwiXSA9IDBdID0gXCJPZmZcIjtcbiAgICBUcmFjZVtUcmFjZVtcIk1lc3NhZ2VzXCJdID0gMV0gPSBcIk1lc3NhZ2VzXCI7XG4gICAgVHJhY2VbVHJhY2VbXCJDb21wYWN0XCJdID0gMl0gPSBcIkNvbXBhY3RcIjtcbiAgICBUcmFjZVtUcmFjZVtcIlZlcmJvc2VcIl0gPSAzXSA9IFwiVmVyYm9zZVwiO1xufSkoVHJhY2UgfHwgKGV4cG9ydHMuVHJhY2UgPSBUcmFjZSA9IHt9KSk7XG52YXIgVHJhY2VWYWx1ZXM7XG4oZnVuY3Rpb24gKFRyYWNlVmFsdWVzKSB7XG4gICAgLyoqXG4gICAgICogVHVybiB0cmFjaW5nIG9mZi5cbiAgICAgKi9cbiAgICBUcmFjZVZhbHVlcy5PZmYgPSAnb2ZmJztcbiAgICAvKipcbiAgICAgKiBUcmFjZSBtZXNzYWdlcyBvbmx5LlxuICAgICAqL1xuICAgIFRyYWNlVmFsdWVzLk1lc3NhZ2VzID0gJ21lc3NhZ2VzJztcbiAgICAvKipcbiAgICAgKiBDb21wYWN0IG1lc3NhZ2UgdHJhY2luZy5cbiAgICAgKi9cbiAgICBUcmFjZVZhbHVlcy5Db21wYWN0ID0gJ2NvbXBhY3QnO1xuICAgIC8qKlxuICAgICAqIFZlcmJvc2UgbWVzc2FnZSB0cmFjaW5nLlxuICAgICAqL1xuICAgIFRyYWNlVmFsdWVzLlZlcmJvc2UgPSAndmVyYm9zZSc7XG59KShUcmFjZVZhbHVlcyB8fCAoZXhwb3J0cy5UcmFjZVZhbHVlcyA9IFRyYWNlVmFsdWVzID0ge30pKTtcbihmdW5jdGlvbiAoVHJhY2UpIHtcbiAgICBmdW5jdGlvbiBmcm9tU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIGlmICghSXMuc3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFRyYWNlLk9mZjtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ29mZic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRyYWNlLk9mZjtcbiAgICAgICAgICAgIGNhc2UgJ21lc3NhZ2VzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gVHJhY2UuTWVzc2FnZXM7XG4gICAgICAgICAgICBjYXNlICdjb21wYWN0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gVHJhY2UuQ29tcGFjdDtcbiAgICAgICAgICAgIGNhc2UgJ3ZlcmJvc2UnOlxuICAgICAgICAgICAgICAgIHJldHVybiBUcmFjZS5WZXJib3NlO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gVHJhY2UuT2ZmO1xuICAgICAgICB9XG4gICAgfVxuICAgIFRyYWNlLmZyb21TdHJpbmcgPSBmcm9tU3RyaW5nO1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgVHJhY2UuT2ZmOlxuICAgICAgICAgICAgICAgIHJldHVybiAnb2ZmJztcbiAgICAgICAgICAgIGNhc2UgVHJhY2UuTWVzc2FnZXM6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtZXNzYWdlcyc7XG4gICAgICAgICAgICBjYXNlIFRyYWNlLkNvbXBhY3Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdjb21wYWN0JztcbiAgICAgICAgICAgIGNhc2UgVHJhY2UuVmVyYm9zZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3ZlcmJvc2UnO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ29mZic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVHJhY2UudG9TdHJpbmcgPSB0b1N0cmluZztcbn0pKFRyYWNlIHx8IChleHBvcnRzLlRyYWNlID0gVHJhY2UgPSB7fSkpO1xudmFyIFRyYWNlRm9ybWF0O1xuKGZ1bmN0aW9uIChUcmFjZUZvcm1hdCkge1xuICAgIFRyYWNlRm9ybWF0W1wiVGV4dFwiXSA9IFwidGV4dFwiO1xuICAgIFRyYWNlRm9ybWF0W1wiSlNPTlwiXSA9IFwianNvblwiO1xufSkoVHJhY2VGb3JtYXQgfHwgKGV4cG9ydHMuVHJhY2VGb3JtYXQgPSBUcmFjZUZvcm1hdCA9IHt9KSk7XG4oZnVuY3Rpb24gKFRyYWNlRm9ybWF0KSB7XG4gICAgZnVuY3Rpb24gZnJvbVN0cmluZyh2YWx1ZSkge1xuICAgICAgICBpZiAoIUlzLnN0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBUcmFjZUZvcm1hdC5UZXh0O1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnanNvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBUcmFjZUZvcm1hdC5KU09OO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFRyYWNlRm9ybWF0LlRleHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVHJhY2VGb3JtYXQuZnJvbVN0cmluZyA9IGZyb21TdHJpbmc7XG59KShUcmFjZUZvcm1hdCB8fCAoZXhwb3J0cy5UcmFjZUZvcm1hdCA9IFRyYWNlRm9ybWF0ID0ge30pKTtcbnZhciBTZXRUcmFjZU5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoU2V0VHJhY2VOb3RpZmljYXRpb24pIHtcbiAgICBTZXRUcmFjZU5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZSgnJC9zZXRUcmFjZScpO1xufSkoU2V0VHJhY2VOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuU2V0VHJhY2VOb3RpZmljYXRpb24gPSBTZXRUcmFjZU5vdGlmaWNhdGlvbiA9IHt9KSk7XG52YXIgTG9nVHJhY2VOb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKExvZ1RyYWNlTm90aWZpY2F0aW9uKSB7XG4gICAgTG9nVHJhY2VOb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLk5vdGlmaWNhdGlvblR5cGUoJyQvbG9nVHJhY2UnKTtcbn0pKExvZ1RyYWNlTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkxvZ1RyYWNlTm90aWZpY2F0aW9uID0gTG9nVHJhY2VOb3RpZmljYXRpb24gPSB7fSkpO1xudmFyIENvbm5lY3Rpb25FcnJvcnM7XG4oZnVuY3Rpb24gKENvbm5lY3Rpb25FcnJvcnMpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY29ubmVjdGlvbiBpcyBjbG9zZWQuXG4gICAgICovXG4gICAgQ29ubmVjdGlvbkVycm9yc1tDb25uZWN0aW9uRXJyb3JzW1wiQ2xvc2VkXCJdID0gMV0gPSBcIkNsb3NlZFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb25uZWN0aW9uIGdvdCBkaXNwb3NlZC5cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uRXJyb3JzW0Nvbm5lY3Rpb25FcnJvcnNbXCJEaXNwb3NlZFwiXSA9IDJdID0gXCJEaXNwb3NlZFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb25uZWN0aW9uIGlzIGFscmVhZHkgaW4gbGlzdGVuaW5nIG1vZGUuXG4gICAgICovXG4gICAgQ29ubmVjdGlvbkVycm9yc1tDb25uZWN0aW9uRXJyb3JzW1wiQWxyZWFkeUxpc3RlbmluZ1wiXSA9IDNdID0gXCJBbHJlYWR5TGlzdGVuaW5nXCI7XG59KShDb25uZWN0aW9uRXJyb3JzIHx8IChleHBvcnRzLkNvbm5lY3Rpb25FcnJvcnMgPSBDb25uZWN0aW9uRXJyb3JzID0ge30pKTtcbmNsYXNzIENvbm5lY3Rpb25FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ29ubmVjdGlvbkVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxufVxuZXhwb3J0cy5Db25uZWN0aW9uRXJyb3IgPSBDb25uZWN0aW9uRXJyb3I7XG52YXIgQ29ubmVjdGlvblN0cmF0ZWd5O1xuKGZ1bmN0aW9uIChDb25uZWN0aW9uU3RyYXRlZ3kpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5jYW5jZWxVbmRpc3BhdGNoZWQpO1xuICAgIH1cbiAgICBDb25uZWN0aW9uU3RyYXRlZ3kuaXMgPSBpcztcbn0pKENvbm5lY3Rpb25TdHJhdGVneSB8fCAoZXhwb3J0cy5Db25uZWN0aW9uU3RyYXRlZ3kgPSBDb25uZWN0aW9uU3RyYXRlZ3kgPSB7fSkpO1xudmFyIElkQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneTtcbihmdW5jdGlvbiAoSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5KSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgKGNhbmRpZGF0ZS5raW5kID09PSB1bmRlZmluZWQgfHwgY2FuZGlkYXRlLmtpbmQgPT09ICdpZCcpICYmIElzLmZ1bmMoY2FuZGlkYXRlLmNyZWF0ZUNhbmNlbGxhdGlvblRva2VuU291cmNlKSAmJiAoY2FuZGlkYXRlLmRpc3Bvc2UgPT09IHVuZGVmaW5lZCB8fCBJcy5mdW5jKGNhbmRpZGF0ZS5kaXNwb3NlKSk7XG4gICAgfVxuICAgIElkQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5pcyA9IGlzO1xufSkoSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5IHx8IChleHBvcnRzLklkQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IElkQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IHt9KSk7XG52YXIgUmVxdWVzdENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3k7XG4oZnVuY3Rpb24gKFJlcXVlc3RDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5KSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgY2FuZGlkYXRlLmtpbmQgPT09ICdyZXF1ZXN0JyAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5jcmVhdGVDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSkgJiYgKGNhbmRpZGF0ZS5kaXNwb3NlID09PSB1bmRlZmluZWQgfHwgSXMuZnVuYyhjYW5kaWRhdGUuZGlzcG9zZSkpO1xuICAgIH1cbiAgICBSZXF1ZXN0Q2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5pcyA9IGlzO1xufSkoUmVxdWVzdENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kgfHwgKGV4cG9ydHMuUmVxdWVzdENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kgPSBSZXF1ZXN0Q2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IHt9KSk7XG52YXIgQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneTtcbihmdW5jdGlvbiAoQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSkge1xuICAgIENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kuTWVzc2FnZSA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBjcmVhdGVDYW5jZWxsYXRpb25Ub2tlblNvdXJjZShfKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGNhbmNlbGxhdGlvbl8xLkNhbmNlbGxhdGlvblRva2VuU291cmNlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5LmlzKHZhbHVlKSB8fCBSZXF1ZXN0Q2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5pcyh2YWx1ZSk7XG4gICAgfVxuICAgIENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kuaXMgPSBpcztcbn0pKENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kgfHwgKGV4cG9ydHMuQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kgPSB7fSkpO1xudmFyIENhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5O1xuKGZ1bmN0aW9uIChDYW5jZWxsYXRpb25TZW5kZXJTdHJhdGVneSkge1xuICAgIENhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5Lk1lc3NhZ2UgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgc2VuZENhbmNlbGxhdGlvbihjb25uLCBpZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbm4uc2VuZE5vdGlmaWNhdGlvbihDYW5jZWxOb3RpZmljYXRpb24udHlwZSwgeyBpZCB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYW51cChfKSB7IH1cbiAgICB9KTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5zZW5kQ2FuY2VsbGF0aW9uKSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5jbGVhbnVwKTtcbiAgICB9XG4gICAgQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3kuaXMgPSBpcztcbn0pKENhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5IHx8IChleHBvcnRzLkNhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5ID0gQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3kgPSB7fSkpO1xudmFyIENhbmNlbGxhdGlvblN0cmF0ZWd5O1xuKGZ1bmN0aW9uIChDYW5jZWxsYXRpb25TdHJhdGVneSkge1xuICAgIENhbmNlbGxhdGlvblN0cmF0ZWd5Lk1lc3NhZ2UgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgcmVjZWl2ZXI6IENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kuTWVzc2FnZSxcbiAgICAgICAgc2VuZGVyOiBDYW5jZWxsYXRpb25TZW5kZXJTdHJhdGVneS5NZXNzYWdlXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5pcyhjYW5kaWRhdGUucmVjZWl2ZXIpICYmIENhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5LmlzKGNhbmRpZGF0ZS5zZW5kZXIpO1xuICAgIH1cbiAgICBDYW5jZWxsYXRpb25TdHJhdGVneS5pcyA9IGlzO1xufSkoQ2FuY2VsbGF0aW9uU3RyYXRlZ3kgfHwgKGV4cG9ydHMuQ2FuY2VsbGF0aW9uU3RyYXRlZ3kgPSBDYW5jZWxsYXRpb25TdHJhdGVneSA9IHt9KSk7XG52YXIgTWVzc2FnZVN0cmF0ZWd5O1xuKGZ1bmN0aW9uIChNZXNzYWdlU3RyYXRlZ3kpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5oYW5kbGVNZXNzYWdlKTtcbiAgICB9XG4gICAgTWVzc2FnZVN0cmF0ZWd5LmlzID0gaXM7XG59KShNZXNzYWdlU3RyYXRlZ3kgfHwgKGV4cG9ydHMuTWVzc2FnZVN0cmF0ZWd5ID0gTWVzc2FnZVN0cmF0ZWd5ID0ge30pKTtcbnZhciBDb25uZWN0aW9uT3B0aW9ucztcbihmdW5jdGlvbiAoQ29ubmVjdGlvbk9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiAoQ2FuY2VsbGF0aW9uU3RyYXRlZ3kuaXMoY2FuZGlkYXRlLmNhbmNlbGxhdGlvblN0cmF0ZWd5KSB8fCBDb25uZWN0aW9uU3RyYXRlZ3kuaXMoY2FuZGlkYXRlLmNvbm5lY3Rpb25TdHJhdGVneSkgfHwgTWVzc2FnZVN0cmF0ZWd5LmlzKGNhbmRpZGF0ZS5tZXNzYWdlU3RyYXRlZ3kpKTtcbiAgICB9XG4gICAgQ29ubmVjdGlvbk9wdGlvbnMuaXMgPSBpcztcbn0pKENvbm5lY3Rpb25PcHRpb25zIHx8IChleHBvcnRzLkNvbm5lY3Rpb25PcHRpb25zID0gQ29ubmVjdGlvbk9wdGlvbnMgPSB7fSkpO1xudmFyIENvbm5lY3Rpb25TdGF0ZTtcbihmdW5jdGlvbiAoQ29ubmVjdGlvblN0YXRlKSB7XG4gICAgQ29ubmVjdGlvblN0YXRlW0Nvbm5lY3Rpb25TdGF0ZVtcIk5ld1wiXSA9IDFdID0gXCJOZXdcIjtcbiAgICBDb25uZWN0aW9uU3RhdGVbQ29ubmVjdGlvblN0YXRlW1wiTGlzdGVuaW5nXCJdID0gMl0gPSBcIkxpc3RlbmluZ1wiO1xuICAgIENvbm5lY3Rpb25TdGF0ZVtDb25uZWN0aW9uU3RhdGVbXCJDbG9zZWRcIl0gPSAzXSA9IFwiQ2xvc2VkXCI7XG4gICAgQ29ubmVjdGlvblN0YXRlW0Nvbm5lY3Rpb25TdGF0ZVtcIkRpc3Bvc2VkXCJdID0gNF0gPSBcIkRpc3Bvc2VkXCI7XG59KShDb25uZWN0aW9uU3RhdGUgfHwgKENvbm5lY3Rpb25TdGF0ZSA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVNZXNzYWdlQ29ubmVjdGlvbihtZXNzYWdlUmVhZGVyLCBtZXNzYWdlV3JpdGVyLCBfbG9nZ2VyLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbG9nZ2VyID0gX2xvZ2dlciAhPT0gdW5kZWZpbmVkID8gX2xvZ2dlciA6IGV4cG9ydHMuTnVsbExvZ2dlcjtcbiAgICBsZXQgc2VxdWVuY2VOdW1iZXIgPSAwO1xuICAgIGxldCBub3RpZmljYXRpb25TZXF1ZW5jZU51bWJlciA9IDA7XG4gICAgbGV0IHVua25vd25SZXNwb25zZVNlcXVlbmNlTnVtYmVyID0gMDtcbiAgICBjb25zdCB2ZXJzaW9uID0gJzIuMCc7XG4gICAgbGV0IHN0YXJSZXF1ZXN0SGFuZGxlciA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCByZXF1ZXN0SGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IHN0YXJOb3RpZmljYXRpb25IYW5kbGVyID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbkhhbmRsZXJzID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHByb2dyZXNzSGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IHRpbWVyO1xuICAgIGxldCBtZXNzYWdlUXVldWUgPSBuZXcgbGlua2VkTWFwXzEuTGlua2VkTWFwKCk7XG4gICAgbGV0IHJlc3BvbnNlUHJvbWlzZXMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IGtub3duQ2FuY2VsZWRSZXF1ZXN0cyA9IG5ldyBTZXQoKTtcbiAgICBsZXQgcmVxdWVzdFRva2VucyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgdHJhY2UgPSBUcmFjZS5PZmY7XG4gICAgbGV0IHRyYWNlRm9ybWF0ID0gVHJhY2VGb3JtYXQuVGV4dDtcbiAgICBsZXQgdHJhY2VyO1xuICAgIGxldCBzdGF0ZSA9IENvbm5lY3Rpb25TdGF0ZS5OZXc7XG4gICAgY29uc3QgZXJyb3JFbWl0dGVyID0gbmV3IGV2ZW50c18xLkVtaXR0ZXIoKTtcbiAgICBjb25zdCBjbG9zZUVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgIGNvbnN0IHVuaGFuZGxlZE5vdGlmaWNhdGlvbkVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgIGNvbnN0IHVuaGFuZGxlZFByb2dyZXNzRW1pdHRlciA9IG5ldyBldmVudHNfMS5FbWl0dGVyKCk7XG4gICAgY29uc3QgZGlzcG9zZUVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgIGNvbnN0IGNhbmNlbGxhdGlvblN0cmF0ZWd5ID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5jYW5jZWxsYXRpb25TdHJhdGVneSkgPyBvcHRpb25zLmNhbmNlbGxhdGlvblN0cmF0ZWd5IDogQ2FuY2VsbGF0aW9uU3RyYXRlZ3kuTWVzc2FnZTtcbiAgICBmdW5jdGlvbiBjcmVhdGVSZXF1ZXN0UXVldWVLZXkoaWQpIHtcbiAgICAgICAgaWYgKGlkID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHNlbmQgcmVxdWVzdHMgd2l0aCBpZCBudWxsIHNpbmNlIHRoZSByZXNwb25zZSBjYW4ndCBiZSBjb3JyZWxhdGVkLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAncmVxLScgKyBpZC50b1N0cmluZygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVSZXNwb25zZVF1ZXVlS2V5KGlkKSB7XG4gICAgICAgIGlmIChpZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuICdyZXMtdW5rbm93bi0nICsgKCsrdW5rbm93blJlc3BvbnNlU2VxdWVuY2VOdW1iZXIpLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ3Jlcy0nICsgaWQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVOb3RpZmljYXRpb25RdWV1ZUtleSgpIHtcbiAgICAgICAgcmV0dXJuICdub3QtJyArICgrK25vdGlmaWNhdGlvblNlcXVlbmNlTnVtYmVyKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRNZXNzYWdlVG9RdWV1ZShxdWV1ZSwgbWVzc2FnZSkge1xuICAgICAgICBpZiAobWVzc2FnZXNfMS5NZXNzYWdlLmlzUmVxdWVzdChtZXNzYWdlKSkge1xuICAgICAgICAgICAgcXVldWUuc2V0KGNyZWF0ZVJlcXVlc3RRdWV1ZUtleShtZXNzYWdlLmlkKSwgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWVzc2FnZXNfMS5NZXNzYWdlLmlzUmVzcG9uc2UobWVzc2FnZSkpIHtcbiAgICAgICAgICAgIHF1ZXVlLnNldChjcmVhdGVSZXNwb25zZVF1ZXVlS2V5KG1lc3NhZ2UuaWQpLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXVlLnNldChjcmVhdGVOb3RpZmljYXRpb25RdWV1ZUtleSgpLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjYW5jZWxVbmRpc3BhdGNoZWQoX21lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNMaXN0ZW5pbmcoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkxpc3RlbmluZztcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNDbG9zZWQoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkNsb3NlZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNEaXNwb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlID09PSBDb25uZWN0aW9uU3RhdGUuRGlzcG9zZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsb3NlSGFuZGxlcigpIHtcbiAgICAgICAgaWYgKHN0YXRlID09PSBDb25uZWN0aW9uU3RhdGUuTmV3IHx8IHN0YXRlID09PSBDb25uZWN0aW9uU3RhdGUuTGlzdGVuaW5nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IENvbm5lY3Rpb25TdGF0ZS5DbG9zZWQ7XG4gICAgICAgICAgICBjbG9zZUVtaXR0ZXIuZmlyZSh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBjb25uZWN0aW9uIGlzIGRpc3Bvc2VkIGRvbid0IHNlbnQgY2xvc2UgZXZlbnRzLlxuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkRXJyb3JIYW5kbGVyKGVycm9yKSB7XG4gICAgICAgIGVycm9yRW1pdHRlci5maXJlKFtlcnJvciwgdW5kZWZpbmVkLCB1bmRlZmluZWRdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JpdGVFcnJvckhhbmRsZXIoZGF0YSkge1xuICAgICAgICBlcnJvckVtaXR0ZXIuZmlyZShkYXRhKTtcbiAgICB9XG4gICAgbWVzc2FnZVJlYWRlci5vbkNsb3NlKGNsb3NlSGFuZGxlcik7XG4gICAgbWVzc2FnZVJlYWRlci5vbkVycm9yKHJlYWRFcnJvckhhbmRsZXIpO1xuICAgIG1lc3NhZ2VXcml0ZXIub25DbG9zZShjbG9zZUhhbmRsZXIpO1xuICAgIG1lc3NhZ2VXcml0ZXIub25FcnJvcih3cml0ZUVycm9ySGFuZGxlcik7XG4gICAgZnVuY3Rpb24gdHJpZ2dlck1lc3NhZ2VRdWV1ZSgpIHtcbiAgICAgICAgaWYgKHRpbWVyIHx8IG1lc3NhZ2VRdWV1ZS5zaXplID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGltZXIgPSAoMCwgcmFsXzEuZGVmYXVsdCkoKS50aW1lci5zZXRJbW1lZGlhdGUoKCkgPT4ge1xuICAgICAgICAgICAgdGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBwcm9jZXNzTWVzc2FnZVF1ZXVlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2VzXzEuTWVzc2FnZS5pc1JlcXVlc3QobWVzc2FnZSkpIHtcbiAgICAgICAgICAgIGhhbmRsZVJlcXVlc3QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWVzc2FnZXNfMS5NZXNzYWdlLmlzTm90aWZpY2F0aW9uKG1lc3NhZ2UpKSB7XG4gICAgICAgICAgICBoYW5kbGVOb3RpZmljYXRpb24obWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWVzc2FnZXNfMS5NZXNzYWdlLmlzUmVzcG9uc2UobWVzc2FnZSkpIHtcbiAgICAgICAgICAgIGhhbmRsZVJlc3BvbnNlKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlSW52YWxpZE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvY2Vzc01lc3NhZ2VRdWV1ZSgpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2VRdWV1ZS5zaXplID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG1lc3NhZ2VRdWV1ZS5zaGlmdCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZVN0cmF0ZWd5ID0gb3B0aW9ucz8ubWVzc2FnZVN0cmF0ZWd5O1xuICAgICAgICAgICAgaWYgKE1lc3NhZ2VTdHJhdGVneS5pcyhtZXNzYWdlU3RyYXRlZ3kpKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZVN0cmF0ZWd5LmhhbmRsZU1lc3NhZ2UobWVzc2FnZSwgaGFuZGxlTWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJpZ2dlck1lc3NhZ2VRdWV1ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNhbGxiYWNrID0gKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgcmVjZWl2ZWQgYSBjYW5jZWxsYXRpb24gbWVzc2FnZS4gQ2hlY2sgaWYgdGhlIG1lc3NhZ2UgaXMgc3RpbGwgaW4gdGhlIHF1ZXVlXG4gICAgICAgICAgICAvLyBhbmQgY2FuY2VsIGl0IGlmIGFsbG93ZWQgdG8gZG8gc28uXG4gICAgICAgICAgICBpZiAobWVzc2FnZXNfMS5NZXNzYWdlLmlzTm90aWZpY2F0aW9uKG1lc3NhZ2UpICYmIG1lc3NhZ2UubWV0aG9kID09PSBDYW5jZWxOb3RpZmljYXRpb24udHlwZS5tZXRob2QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYW5jZWxJZCA9IG1lc3NhZ2UucGFyYW1zLmlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGNyZWF0ZVJlcXVlc3RRdWV1ZUtleShjYW5jZWxJZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9DYW5jZWwgPSBtZXNzYWdlUXVldWUuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VzXzEuTWVzc2FnZS5pc1JlcXVlc3QodG9DYW5jZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmF0ZWd5ID0gb3B0aW9ucz8uY29ubmVjdGlvblN0cmF0ZWd5O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IChzdHJhdGVneSAmJiBzdHJhdGVneS5jYW5jZWxVbmRpc3BhdGNoZWQpID8gc3RyYXRlZ3kuY2FuY2VsVW5kaXNwYXRjaGVkKHRvQ2FuY2VsLCBjYW5jZWxVbmRpc3BhdGNoZWQpIDogY2FuY2VsVW5kaXNwYXRjaGVkKHRvQ2FuY2VsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIChyZXNwb25zZS5lcnJvciAhPT0gdW5kZWZpbmVkIHx8IHJlc3BvbnNlLnJlc3VsdCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVF1ZXVlLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFRva2Vucy5kZWxldGUoY2FuY2VsSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuaWQgPSB0b0NhbmNlbC5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNlU2VuZGluZ1Jlc3BvbnNlKHJlc3BvbnNlLCBtZXNzYWdlLm1ldGhvZCwgRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlV3JpdGVyLndyaXRlKHJlc3BvbnNlKS5jYXRjaCgoKSA9PiBsb2dnZXIuZXJyb3IoYFNlbmRpbmcgcmVzcG9uc2UgZm9yIGNhbmNlbGVkIG1lc3NhZ2UgZmFpbGVkLmApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjYW5jZWxsYXRpb25Ub2tlbiA9IHJlcXVlc3RUb2tlbnMuZ2V0KGNhbmNlbElkKTtcbiAgICAgICAgICAgICAgICAvLyBUaGUgcmVxdWVzdCBpcyBhbHJlYWR5IHJ1bm5pbmcuIENhbmNlbCB0aGUgdG9rZW5cbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsbGF0aW9uVG9rZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxsYXRpb25Ub2tlbi5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2VSZWNlaXZlZE5vdGlmaWNhdGlvbihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhlIGNhbmNlbCBidXQgc3RpbGwgcXVldWUgdGhlIG1lc3NhZ2UgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gY2xlYW4gdXAgc3RhdGUgaW4gcHJvY2VzcyBtZXNzYWdlLlxuICAgICAgICAgICAgICAgICAgICBrbm93bkNhbmNlbGVkUmVxdWVzdHMuYWRkKGNhbmNlbElkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRNZXNzYWdlVG9RdWV1ZShtZXNzYWdlUXVldWUsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJpZ2dlck1lc3NhZ2VRdWV1ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0KHJlcXVlc3RNZXNzYWdlKSB7XG4gICAgICAgIGlmIChpc0Rpc3Bvc2VkKCkpIHtcbiAgICAgICAgICAgIC8vIHdlIHJldHVybiBoZXJlIHNpbGVudGx5IHNpbmNlIHdlIGZpcmVkIGFuIGV2ZW50IHdoZW4gdGhlXG4gICAgICAgICAgICAvLyBjb25uZWN0aW9uIGdvdCBkaXNwb3NlZC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZXBseShyZXN1bHRPckVycm9yLCBtZXRob2QsIHN0YXJ0VGltZSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICBqc29ucnBjOiB2ZXJzaW9uLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0TWVzc2FnZS5pZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChyZXN1bHRPckVycm9yIGluc3RhbmNlb2YgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5lcnJvciA9IHJlc3VsdE9yRXJyb3IudG9Kc29uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnJlc3VsdCA9IHJlc3VsdE9yRXJyb3IgPT09IHVuZGVmaW5lZCA/IG51bGwgOiByZXN1bHRPckVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhY2VTZW5kaW5nUmVzcG9uc2UobWVzc2FnZSwgbWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgbWVzc2FnZVdyaXRlci53cml0ZShtZXNzYWdlKS5jYXRjaCgoKSA9PiBsb2dnZXIuZXJyb3IoYFNlbmRpbmcgcmVzcG9uc2UgZmFpbGVkLmApKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZXBseUVycm9yKGVycm9yLCBtZXRob2QsIHN0YXJ0VGltZSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICBqc29ucnBjOiB2ZXJzaW9uLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0TWVzc2FnZS5pZCxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IudG9Kc29uKClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cmFjZVNlbmRpbmdSZXNwb25zZShtZXNzYWdlLCBtZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICBtZXNzYWdlV3JpdGVyLndyaXRlKG1lc3NhZ2UpLmNhdGNoKCgpID0+IGxvZ2dlci5lcnJvcihgU2VuZGluZyByZXNwb25zZSBmYWlsZWQuYCkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlcGx5U3VjY2VzcyhyZXN1bHQsIG1ldGhvZCwgc3RhcnRUaW1lKSB7XG4gICAgICAgICAgICAvLyBUaGUgSlNPTiBSUEMgZGVmaW5lcyB0aGF0IGEgcmVzcG9uc2UgbXVzdCBlaXRoZXIgaGF2ZSBhIHJlc3VsdCBvciBhbiBlcnJvclxuICAgICAgICAgICAgLy8gU28gd2UgY2FuJ3QgdHJlYXQgdW5kZWZpbmVkIGFzIGEgdmFsaWQgcmVzcG9uc2UgcmVzdWx0LlxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAganNvbnJwYzogdmVyc2lvbixcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdE1lc3NhZ2UuaWQsXG4gICAgICAgICAgICAgICAgcmVzdWx0OiByZXN1bHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cmFjZVNlbmRpbmdSZXNwb25zZShtZXNzYWdlLCBtZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICBtZXNzYWdlV3JpdGVyLndyaXRlKG1lc3NhZ2UpLmNhdGNoKCgpID0+IGxvZ2dlci5lcnJvcihgU2VuZGluZyByZXNwb25zZSBmYWlsZWQuYCkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYWNlUmVjZWl2ZWRSZXF1ZXN0KHJlcXVlc3RNZXNzYWdlKTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHJlcXVlc3RIYW5kbGVycy5nZXQocmVxdWVzdE1lc3NhZ2UubWV0aG9kKTtcbiAgICAgICAgbGV0IHR5cGU7XG4gICAgICAgIGxldCByZXF1ZXN0SGFuZGxlcjtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHR5cGUgPSBlbGVtZW50LnR5cGU7XG4gICAgICAgICAgICByZXF1ZXN0SGFuZGxlciA9IGVsZW1lbnQuaGFuZGxlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAocmVxdWVzdEhhbmRsZXIgfHwgc3RhclJlcXVlc3RIYW5kbGVyKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbktleSA9IHJlcXVlc3RNZXNzYWdlLmlkID8/IFN0cmluZyhEYXRlLm5vdygpKTsgLy9cbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbGxhdGlvblNvdXJjZSA9IElkQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5pcyhjYW5jZWxsYXRpb25TdHJhdGVneS5yZWNlaXZlcilcbiAgICAgICAgICAgICAgICA/IGNhbmNlbGxhdGlvblN0cmF0ZWd5LnJlY2VpdmVyLmNyZWF0ZUNhbmNlbGxhdGlvblRva2VuU291cmNlKHRva2VuS2V5KVxuICAgICAgICAgICAgICAgIDogY2FuY2VsbGF0aW9uU3RyYXRlZ3kucmVjZWl2ZXIuY3JlYXRlQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UocmVxdWVzdE1lc3NhZ2UpO1xuICAgICAgICAgICAgaWYgKHJlcXVlc3RNZXNzYWdlLmlkICE9PSBudWxsICYmIGtub3duQ2FuY2VsZWRSZXF1ZXN0cy5oYXMocmVxdWVzdE1lc3NhZ2UuaWQpKSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9uU291cmNlLmNhbmNlbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcXVlc3RNZXNzYWdlLmlkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdFRva2Vucy5zZXQodG9rZW5LZXksIGNhbmNlbGxhdGlvblNvdXJjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBoYW5kbGVyUmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0SGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdE1lc3NhZ2UucGFyYW1zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQgJiYgdHlwZS5udW1iZXJPZlBhcmFtcyAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGx5RXJyb3IobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihtZXNzYWdlc18xLkVycm9yQ29kZXMuSW52YWxpZFBhcmFtcywgYFJlcXVlc3QgJHtyZXF1ZXN0TWVzc2FnZS5tZXRob2R9IGRlZmluZXMgJHt0eXBlLm51bWJlck9mUGFyYW1zfSBwYXJhbXMgYnV0IHJlY2VpdmVkIG5vbmUuYCksIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyUmVzdWx0ID0gcmVxdWVzdEhhbmRsZXIoY2FuY2VsbGF0aW9uU291cmNlLnRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlcXVlc3RNZXNzYWdlLnBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQgJiYgdHlwZS5wYXJhbWV0ZXJTdHJ1Y3R1cmVzID09PSBtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYnlOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbHlFcnJvcihuZXcgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKG1lc3NhZ2VzXzEuRXJyb3JDb2Rlcy5JbnZhbGlkUGFyYW1zLCBgUmVxdWVzdCAke3JlcXVlc3RNZXNzYWdlLm1ldGhvZH0gZGVmaW5lcyBwYXJhbWV0ZXJzIGJ5IG5hbWUgYnV0IHJlY2VpdmVkIHBhcmFtZXRlcnMgYnkgcG9zaXRpb25gKSwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXJSZXN1bHQgPSByZXF1ZXN0SGFuZGxlciguLi5yZXF1ZXN0TWVzc2FnZS5wYXJhbXMsIGNhbmNlbGxhdGlvblNvdXJjZS50b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUucGFyYW1ldGVyU3RydWN0dXJlcyA9PT0gbWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBseUVycm9yKG5ldyBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IobWVzc2FnZXNfMS5FcnJvckNvZGVzLkludmFsaWRQYXJhbXMsIGBSZXF1ZXN0ICR7cmVxdWVzdE1lc3NhZ2UubWV0aG9kfSBkZWZpbmVzIHBhcmFtZXRlcnMgYnkgcG9zaXRpb24gYnV0IHJlY2VpdmVkIHBhcmFtZXRlcnMgYnkgbmFtZWApLCByZXF1ZXN0TWVzc2FnZS5tZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlclJlc3VsdCA9IHJlcXVlc3RIYW5kbGVyKHJlcXVlc3RNZXNzYWdlLnBhcmFtcywgY2FuY2VsbGF0aW9uU291cmNlLnRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGFyUmVxdWVzdEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlclJlc3VsdCA9IHN0YXJSZXF1ZXN0SGFuZGxlcihyZXF1ZXN0TWVzc2FnZS5tZXRob2QsIHJlcXVlc3RNZXNzYWdlLnBhcmFtcywgY2FuY2VsbGF0aW9uU291cmNlLnRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IGhhbmRsZXJSZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKCFoYW5kbGVyUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RUb2tlbnMuZGVsZXRlKHRva2VuS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgcmVwbHlTdWNjZXNzKGhhbmRsZXJSZXN1bHQsIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvbWlzZS50aGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UudGhlbigocmVzdWx0T3JFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFRva2Vucy5kZWxldGUodG9rZW5LZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbHkocmVzdWx0T3JFcnJvciwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VG9rZW5zLmRlbGV0ZSh0b2tlbktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBseUVycm9yKGVycm9yLCByZXF1ZXN0TWVzc2FnZS5tZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChlcnJvciAmJiBJcy5zdHJpbmcoZXJyb3IubWVzc2FnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBseUVycm9yKG5ldyBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IobWVzc2FnZXNfMS5FcnJvckNvZGVzLkludGVybmFsRXJyb3IsIGBSZXF1ZXN0ICR7cmVxdWVzdE1lc3NhZ2UubWV0aG9kfSBmYWlsZWQgd2l0aCBtZXNzYWdlOiAke2Vycm9yLm1lc3NhZ2V9YCksIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGx5RXJyb3IobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihtZXNzYWdlc18xLkVycm9yQ29kZXMuSW50ZXJuYWxFcnJvciwgYFJlcXVlc3QgJHtyZXF1ZXN0TWVzc2FnZS5tZXRob2R9IGZhaWxlZCB1bmV4cGVjdGVkbHkgd2l0aG91dCBwcm92aWRpbmcgYW55IGRldGFpbHMuYCksIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VG9rZW5zLmRlbGV0ZSh0b2tlbktleSk7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5KGhhbmRsZXJSZXN1bHQsIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0VG9rZW5zLmRlbGV0ZSh0b2tlbktleSk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5KGVycm9yLCByZXF1ZXN0TWVzc2FnZS5tZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVycm9yICYmIElzLnN0cmluZyhlcnJvci5tZXNzYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXBseUVycm9yKG5ldyBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IobWVzc2FnZXNfMS5FcnJvckNvZGVzLkludGVybmFsRXJyb3IsIGBSZXF1ZXN0ICR7cmVxdWVzdE1lc3NhZ2UubWV0aG9kfSBmYWlsZWQgd2l0aCBtZXNzYWdlOiAke2Vycm9yLm1lc3NhZ2V9YCksIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5RXJyb3IobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihtZXNzYWdlc18xLkVycm9yQ29kZXMuSW50ZXJuYWxFcnJvciwgYFJlcXVlc3QgJHtyZXF1ZXN0TWVzc2FnZS5tZXRob2R9IGZhaWxlZCB1bmV4cGVjdGVkbHkgd2l0aG91dCBwcm92aWRpbmcgYW55IGRldGFpbHMuYCksIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXBseUVycm9yKG5ldyBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IobWVzc2FnZXNfMS5FcnJvckNvZGVzLk1ldGhvZE5vdEZvdW5kLCBgVW5oYW5kbGVkIG1ldGhvZCAke3JlcXVlc3RNZXNzYWdlLm1ldGhvZH1gKSwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlTWVzc2FnZSkge1xuICAgICAgICBpZiAoaXNEaXNwb3NlZCgpKSB7XG4gICAgICAgICAgICAvLyBTZWUgaGFuZGxlIHJlcXVlc3QuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlTWVzc2FnZS5pZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlTWVzc2FnZS5lcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgUmVjZWl2ZWQgcmVzcG9uc2UgbWVzc2FnZSB3aXRob3V0IGlkOiBFcnJvciBpczogXFxuJHtKU09OLnN0cmluZ2lmeShyZXNwb25zZU1lc3NhZ2UuZXJyb3IsIHVuZGVmaW5lZCwgNCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoYFJlY2VpdmVkIHJlc3BvbnNlIG1lc3NhZ2Ugd2l0aG91dCBpZC4gTm8gZnVydGhlciBlcnJvciBpbmZvcm1hdGlvbiBwcm92aWRlZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHJlc3BvbnNlTWVzc2FnZS5pZDtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlUHJvbWlzZSA9IHJlc3BvbnNlUHJvbWlzZXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB0cmFjZVJlY2VpdmVkUmVzcG9uc2UocmVzcG9uc2VNZXNzYWdlLCByZXNwb25zZVByb21pc2UpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlUHJvbWlzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VQcm9taXNlcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VNZXNzYWdlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IHJlc3BvbnNlTWVzc2FnZS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlUHJvbWlzZS5yZWplY3QobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlLCBlcnJvci5kYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2VNZXNzYWdlLnJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVByb21pc2UucmVzb2x2ZShyZXNwb25zZU1lc3NhZ2UucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2hvdWxkIG5ldmVyIGhhcHBlbi4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgUmVzcG9uc2UgaGFuZGxlciAnJHtyZXNwb25zZVByb21pc2UubWV0aG9kfScgZmFpbGVkIHdpdGggbWVzc2FnZTogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBSZXNwb25zZSBoYW5kbGVyICcke3Jlc3BvbnNlUHJvbWlzZS5tZXRob2R9JyBmYWlsZWQgdW5leHBlY3RlZGx5LmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZU5vdGlmaWNhdGlvbihtZXNzYWdlKSB7XG4gICAgICAgIGlmIChpc0Rpc3Bvc2VkKCkpIHtcbiAgICAgICAgICAgIC8vIFNlZSBoYW5kbGUgcmVxdWVzdC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IG5vdGlmaWNhdGlvbkhhbmRsZXI7XG4gICAgICAgIGlmIChtZXNzYWdlLm1ldGhvZCA9PT0gQ2FuY2VsTm90aWZpY2F0aW9uLnR5cGUubWV0aG9kKSB7XG4gICAgICAgICAgICBjb25zdCBjYW5jZWxJZCA9IG1lc3NhZ2UucGFyYW1zLmlkO1xuICAgICAgICAgICAga25vd25DYW5jZWxlZFJlcXVlc3RzLmRlbGV0ZShjYW5jZWxJZCk7XG4gICAgICAgICAgICB0cmFjZVJlY2VpdmVkTm90aWZpY2F0aW9uKG1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG5vdGlmaWNhdGlvbkhhbmRsZXJzLmdldChtZXNzYWdlLm1ldGhvZCk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkhhbmRsZXIgPSBlbGVtZW50LmhhbmRsZXI7XG4gICAgICAgICAgICAgICAgdHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobm90aWZpY2F0aW9uSGFuZGxlciB8fCBzdGFyTm90aWZpY2F0aW9uSGFuZGxlcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0cmFjZVJlY2VpdmVkTm90aWZpY2F0aW9uKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb25IYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnBhcmFtcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUubnVtYmVyT2ZQYXJhbXMgIT09IDAgJiYgdHlwZS5wYXJhbWV0ZXJTdHJ1Y3R1cmVzICE9PSBtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYnlOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgTm90aWZpY2F0aW9uICR7bWVzc2FnZS5tZXRob2R9IGRlZmluZXMgJHt0eXBlLm51bWJlck9mUGFyYW1zfSBwYXJhbXMgYnV0IHJlY2VpdmVkIG5vbmUuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uSGFuZGxlcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobWVzc2FnZS5wYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBhcmUgSlNPTi1SUEMgbGlicmFyaWVzIHRoYXQgc2VuZCBwcm9ncmVzcyBtZXNzYWdlIGFzIHBvc2l0aW9uYWwgcGFyYW1zIGFsdGhvdWdoXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzcGVjaWZpZWQgYXMgbmFtZWQuIFNvIGNvbnZlcnQgdGhlbSBpZiB0aGlzIGlzIHRoZSBjYXNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gbWVzc2FnZS5wYXJhbXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5tZXRob2QgPT09IFByb2dyZXNzTm90aWZpY2F0aW9uLnR5cGUubWV0aG9kICYmIHBhcmFtcy5sZW5ndGggPT09IDIgJiYgUHJvZ3Jlc3NUb2tlbi5pcyhwYXJhbXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uSGFuZGxlcih7IHRva2VuOiBwYXJhbXNbMF0sIHZhbHVlOiBwYXJhbXNbMV0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlLnBhcmFtZXRlclN0cnVjdHVyZXMgPT09IG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgTm90aWZpY2F0aW9uICR7bWVzc2FnZS5tZXRob2R9IGRlZmluZXMgcGFyYW1ldGVycyBieSBuYW1lIGJ1dCByZWNlaXZlZCBwYXJhbWV0ZXJzIGJ5IHBvc2l0aW9uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUubnVtYmVyT2ZQYXJhbXMgIT09IG1lc3NhZ2UucGFyYW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBOb3RpZmljYXRpb24gJHttZXNzYWdlLm1ldGhvZH0gZGVmaW5lcyAke3R5cGUubnVtYmVyT2ZQYXJhbXN9IHBhcmFtcyBidXQgcmVjZWl2ZWQgJHtwYXJhbXMubGVuZ3RofSBhcmd1bWVudHNgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25IYW5kbGVyKC4uLnBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUucGFyYW1ldGVyU3RydWN0dXJlcyA9PT0gbWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoYE5vdGlmaWNhdGlvbiAke21lc3NhZ2UubWV0aG9kfSBkZWZpbmVzIHBhcmFtZXRlcnMgYnkgcG9zaXRpb24gYnV0IHJlY2VpdmVkIHBhcmFtZXRlcnMgYnkgbmFtZWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uSGFuZGxlcihtZXNzYWdlLnBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc3Rhck5vdGlmaWNhdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Rhck5vdGlmaWNhdGlvbkhhbmRsZXIobWVzc2FnZS5tZXRob2QsIG1lc3NhZ2UucGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoYE5vdGlmaWNhdGlvbiBoYW5kbGVyICcke21lc3NhZ2UubWV0aG9kfScgZmFpbGVkIHdpdGggbWVzc2FnZTogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBOb3RpZmljYXRpb24gaGFuZGxlciAnJHttZXNzYWdlLm1ldGhvZH0nIGZhaWxlZCB1bmV4cGVjdGVkbHkuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdW5oYW5kbGVkTm90aWZpY2F0aW9uRW1pdHRlci5maXJlKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUludmFsaWRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ1JlY2VpdmVkIGVtcHR5IG1lc3NhZ2UuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmVycm9yKGBSZWNlaXZlZCBtZXNzYWdlIHdoaWNoIGlzIG5laXRoZXIgYSByZXNwb25zZSBub3IgYSBub3RpZmljYXRpb24gbWVzc2FnZTpcXG4ke0pTT04uc3RyaW5naWZ5KG1lc3NhZ2UsIG51bGwsIDQpfWApO1xuICAgICAgICAvLyBUZXN0IHdoZXRoZXIgd2UgZmluZCBhbiBpZCB0byByZWplY3QgdGhlIHByb21pc2VcbiAgICAgICAgY29uc3QgcmVzcG9uc2VNZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgaWYgKElzLnN0cmluZyhyZXNwb25zZU1lc3NhZ2UuaWQpIHx8IElzLm51bWJlcihyZXNwb25zZU1lc3NhZ2UuaWQpKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSByZXNwb25zZU1lc3NhZ2UuaWQ7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZUhhbmRsZXIgPSByZXNwb25zZVByb21pc2VzLmdldChrZXkpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlSGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlSGFuZGxlci5yZWplY3QobmV3IEVycm9yKCdUaGUgcmVjZWl2ZWQgcmVzcG9uc2UgaGFzIG5laXRoZXIgYSByZXN1bHQgbm9yIGFuIGVycm9yIHByb3BlcnR5LicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdHJpbmdpZnlUcmFjZShwYXJhbXMpIHtcbiAgICAgICAgaWYgKHBhcmFtcyA9PT0gdW5kZWZpbmVkIHx8IHBhcmFtcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRyYWNlKSB7XG4gICAgICAgICAgICBjYXNlIFRyYWNlLlZlcmJvc2U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHBhcmFtcywgbnVsbCwgNCk7XG4gICAgICAgICAgICBjYXNlIFRyYWNlLkNvbXBhY3Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhY2VTZW5kaW5nUmVxdWVzdChtZXNzYWdlKSB7XG4gICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuT2ZmIHx8ICF0cmFjZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhY2VGb3JtYXQgPT09IFRyYWNlRm9ybWF0LlRleHQpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCh0cmFjZSA9PT0gVHJhY2UuVmVyYm9zZSB8fCB0cmFjZSA9PT0gVHJhY2UuQ29tcGFjdCkgJiYgbWVzc2FnZS5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gYFBhcmFtczogJHtzdHJpbmdpZnlUcmFjZShtZXNzYWdlLnBhcmFtcyl9XFxuXFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNlci5sb2coYFNlbmRpbmcgcmVxdWVzdCAnJHttZXNzYWdlLm1ldGhvZH0gLSAoJHttZXNzYWdlLmlkfSknLmAsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nTFNQTWVzc2FnZSgnc2VuZC1yZXF1ZXN0JywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhY2VTZW5kaW5nTm90aWZpY2F0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHRyYWNlID09PSBUcmFjZS5PZmYgfHwgIXRyYWNlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFjZUZvcm1hdCA9PT0gVHJhY2VGb3JtYXQuVGV4dCkge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLlZlcmJvc2UgfHwgdHJhY2UgPT09IFRyYWNlLkNvbXBhY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGBQYXJhbXM6ICR7c3RyaW5naWZ5VHJhY2UobWVzc2FnZS5wYXJhbXMpfVxcblxcbmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gJ05vIHBhcmFtZXRlcnMgcHJvdmlkZWQuXFxuXFxuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZXIubG9nKGBTZW5kaW5nIG5vdGlmaWNhdGlvbiAnJHttZXNzYWdlLm1ldGhvZH0nLmAsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nTFNQTWVzc2FnZSgnc2VuZC1ub3RpZmljYXRpb24nLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFjZVNlbmRpbmdSZXNwb25zZShtZXNzYWdlLCBtZXRob2QsIHN0YXJ0VGltZSkge1xuICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLk9mZiB8fCAhdHJhY2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYWNlRm9ybWF0ID09PSBUcmFjZUZvcm1hdC5UZXh0KSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuVmVyYm9zZSB8fCB0cmFjZSA9PT0gVHJhY2UuQ29tcGFjdCkge1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmVycm9yICYmIG1lc3NhZ2UuZXJyb3IuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gYEVycm9yIGRhdGE6ICR7c3RyaW5naWZ5VHJhY2UobWVzc2FnZS5lcnJvci5kYXRhKX1cXG5cXG5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gYFJlc3VsdDogJHtzdHJpbmdpZnlUcmFjZShtZXNzYWdlLnJlc3VsdCl9XFxuXFxuYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChtZXNzYWdlLmVycm9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSAnTm8gcmVzdWx0IHJldHVybmVkLlxcblxcbic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZXIubG9nKGBTZW5kaW5nIHJlc3BvbnNlICcke21ldGhvZH0gLSAoJHttZXNzYWdlLmlkfSknLiBQcm9jZXNzaW5nIHJlcXVlc3QgdG9vayAke0RhdGUubm93KCkgLSBzdGFydFRpbWV9bXNgLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ0xTUE1lc3NhZ2UoJ3NlbmQtcmVzcG9uc2UnLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFjZVJlY2VpdmVkUmVxdWVzdChtZXNzYWdlKSB7XG4gICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuT2ZmIHx8ICF0cmFjZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhY2VGb3JtYXQgPT09IFRyYWNlRm9ybWF0LlRleHQpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCh0cmFjZSA9PT0gVHJhY2UuVmVyYm9zZSB8fCB0cmFjZSA9PT0gVHJhY2UuQ29tcGFjdCkgJiYgbWVzc2FnZS5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gYFBhcmFtczogJHtzdHJpbmdpZnlUcmFjZShtZXNzYWdlLnBhcmFtcyl9XFxuXFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNlci5sb2coYFJlY2VpdmVkIHJlcXVlc3QgJyR7bWVzc2FnZS5tZXRob2R9IC0gKCR7bWVzc2FnZS5pZH0pJy5gLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ0xTUE1lc3NhZ2UoJ3JlY2VpdmUtcmVxdWVzdCcsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYWNlUmVjZWl2ZWROb3RpZmljYXRpb24obWVzc2FnZSkge1xuICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLk9mZiB8fCAhdHJhY2VyIHx8IG1lc3NhZ2UubWV0aG9kID09PSBMb2dUcmFjZU5vdGlmaWNhdGlvbi50eXBlLm1ldGhvZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFjZUZvcm1hdCA9PT0gVHJhY2VGb3JtYXQuVGV4dCkge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLlZlcmJvc2UgfHwgdHJhY2UgPT09IFRyYWNlLkNvbXBhY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGBQYXJhbXM6ICR7c3RyaW5naWZ5VHJhY2UobWVzc2FnZS5wYXJhbXMpfVxcblxcbmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gJ05vIHBhcmFtZXRlcnMgcHJvdmlkZWQuXFxuXFxuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZXIubG9nKGBSZWNlaXZlZCBub3RpZmljYXRpb24gJyR7bWVzc2FnZS5tZXRob2R9Jy5gLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ0xTUE1lc3NhZ2UoJ3JlY2VpdmUtbm90aWZpY2F0aW9uJywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhY2VSZWNlaXZlZFJlc3BvbnNlKG1lc3NhZ2UsIHJlc3BvbnNlUHJvbWlzZSkge1xuICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLk9mZiB8fCAhdHJhY2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYWNlRm9ybWF0ID09PSBUcmFjZUZvcm1hdC5UZXh0KSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuVmVyYm9zZSB8fCB0cmFjZSA9PT0gVHJhY2UuQ29tcGFjdCkge1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmVycm9yICYmIG1lc3NhZ2UuZXJyb3IuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gYEVycm9yIGRhdGE6ICR7c3RyaW5naWZ5VHJhY2UobWVzc2FnZS5lcnJvci5kYXRhKX1cXG5cXG5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gYFJlc3VsdDogJHtzdHJpbmdpZnlUcmFjZShtZXNzYWdlLnJlc3VsdCl9XFxuXFxuYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChtZXNzYWdlLmVycm9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSAnTm8gcmVzdWx0IHJldHVybmVkLlxcblxcbic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBtZXNzYWdlLmVycm9yID8gYCBSZXF1ZXN0IGZhaWxlZDogJHttZXNzYWdlLmVycm9yLm1lc3NhZ2V9ICgke21lc3NhZ2UuZXJyb3IuY29kZX0pLmAgOiAnJztcbiAgICAgICAgICAgICAgICB0cmFjZXIubG9nKGBSZWNlaXZlZCByZXNwb25zZSAnJHtyZXNwb25zZVByb21pc2UubWV0aG9kfSAtICgke21lc3NhZ2UuaWR9KScgaW4gJHtEYXRlLm5vdygpIC0gcmVzcG9uc2VQcm9taXNlLnRpbWVyU3RhcnR9bXMuJHtlcnJvcn1gLCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyYWNlci5sb2coYFJlY2VpdmVkIHJlc3BvbnNlICR7bWVzc2FnZS5pZH0gd2l0aG91dCBhY3RpdmUgcmVzcG9uc2UgcHJvbWlzZS5gLCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ0xTUE1lc3NhZ2UoJ3JlY2VpdmUtcmVzcG9uc2UnLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBsb2dMU1BNZXNzYWdlKHR5cGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKCF0cmFjZXIgfHwgdHJhY2UgPT09IFRyYWNlLk9mZikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxzcE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICBpc0xTUE1lc3NhZ2U6IHRydWUsXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgICB9O1xuICAgICAgICB0cmFjZXIubG9nKGxzcE1lc3NhZ2UpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0aHJvd0lmQ2xvc2VkT3JEaXNwb3NlZCgpIHtcbiAgICAgICAgaWYgKGlzQ2xvc2VkKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDb25uZWN0aW9uRXJyb3IoQ29ubmVjdGlvbkVycm9ycy5DbG9zZWQsICdDb25uZWN0aW9uIGlzIGNsb3NlZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEaXNwb3NlZCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdGlvbkVycm9yKENvbm5lY3Rpb25FcnJvcnMuRGlzcG9zZWQsICdDb25uZWN0aW9uIGlzIGRpc3Bvc2VkLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRocm93SWZMaXN0ZW5pbmcoKSB7XG4gICAgICAgIGlmIChpc0xpc3RlbmluZygpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdGlvbkVycm9yKENvbm5lY3Rpb25FcnJvcnMuQWxyZWFkeUxpc3RlbmluZywgJ0Nvbm5lY3Rpb24gaXMgYWxyZWFkeSBsaXN0ZW5pbmcnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0aHJvd0lmTm90TGlzdGVuaW5nKCkge1xuICAgICAgICBpZiAoIWlzTGlzdGVuaW5nKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FsbCBsaXN0ZW4oKSBmaXJzdC4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB1bmRlZmluZWRUb051bGwocGFyYW0pIHtcbiAgICAgICAgaWYgKHBhcmFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG51bGxUb1VuZGVmaW5lZChwYXJhbSkge1xuICAgICAgICBpZiAocGFyYW0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaXNOYW1lZFBhcmFtKHBhcmFtKSB7XG4gICAgICAgIHJldHVybiBwYXJhbSAhPT0gdW5kZWZpbmVkICYmIHBhcmFtICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHBhcmFtKSAmJiB0eXBlb2YgcGFyYW0gPT09ICdvYmplY3QnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlU2luZ2xlUGFyYW0ocGFyYW1ldGVyU3RydWN0dXJlcywgcGFyYW0pIHtcbiAgICAgICAgc3dpdGNoIChwYXJhbWV0ZXJTdHJ1Y3R1cmVzKSB7XG4gICAgICAgICAgICBjYXNlIG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvOlxuICAgICAgICAgICAgICAgIGlmIChpc05hbWVkUGFyYW0ocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsVG9VbmRlZmluZWQocGFyYW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt1bmRlZmluZWRUb051bGwocGFyYW0pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWU6XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hbWVkUGFyYW0ocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVjZWl2ZWQgcGFyYW1ldGVycyBieSBuYW1lIGJ1dCBwYXJhbSBpcyBub3QgYW4gb2JqZWN0IGxpdGVyYWwuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsVG9VbmRlZmluZWQocGFyYW0pO1xuICAgICAgICAgICAgY2FzZSBtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYnlQb3NpdGlvbjpcbiAgICAgICAgICAgICAgICByZXR1cm4gW3VuZGVmaW5lZFRvTnVsbChwYXJhbSldO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gcGFyYW1ldGVyIHN0cnVjdHVyZSAke3BhcmFtZXRlclN0cnVjdHVyZXMudG9TdHJpbmcoKX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlTWVzc2FnZVBhcmFtcyh0eXBlLCBwYXJhbXMpIHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgY29uc3QgbnVtYmVyT2ZQYXJhbXMgPSB0eXBlLm51bWJlck9mUGFyYW1zO1xuICAgICAgICBzd2l0Y2ggKG51bWJlck9mUGFyYW1zKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvbXB1dGVTaW5nbGVQYXJhbSh0eXBlLnBhcmFtZXRlclN0cnVjdHVyZXMsIHBhcmFtc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aCAmJiBpIDwgbnVtYmVyT2ZQYXJhbXM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh1bmRlZmluZWRUb051bGwocGFyYW1zW2ldKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMubGVuZ3RoIDwgbnVtYmVyT2ZQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHBhcmFtcy5sZW5ndGg7IGkgPCBudW1iZXJPZlBhcmFtczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjb25zdCBjb25uZWN0aW9uID0ge1xuICAgICAgICBzZW5kTm90aWZpY2F0aW9uOiAodHlwZSwgLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgdGhyb3dJZkNsb3NlZE9yRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIGxldCBtZXRob2Q7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZVBhcmFtcztcbiAgICAgICAgICAgIGlmIChJcy5zdHJpbmcodHlwZSkpIHtcbiAgICAgICAgICAgICAgICBtZXRob2QgPSB0eXBlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0ID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1TdGFydCA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRlclN0cnVjdHVyZXMgPSBtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYXV0bztcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmlzKGZpcnN0KSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbVN0YXJ0ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyU3RydWN0dXJlcyA9IGZpcnN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1FbmQgPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJPZlBhcmFtcyA9IHBhcmFtRW5kIC0gcGFyYW1TdGFydDtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG51bWJlck9mUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VQYXJhbXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVBhcmFtcyA9IGNvbXB1dGVTaW5nbGVQYXJhbShwYXJhbWV0ZXJTdHJ1Y3R1cmVzLCBhcmdzW3BhcmFtU3RhcnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlclN0cnVjdHVyZXMgPT09IG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlY2VpdmVkICR7bnVtYmVyT2ZQYXJhbXN9IHBhcmFtZXRlcnMgZm9yICdieSBOYW1lJyBub3RpZmljYXRpb24gcGFyYW1ldGVyIHN0cnVjdHVyZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VQYXJhbXMgPSBhcmdzLnNsaWNlKHBhcmFtU3RhcnQsIHBhcmFtRW5kKS5tYXAodmFsdWUgPT4gdW5kZWZpbmVkVG9OdWxsKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBhcmdzO1xuICAgICAgICAgICAgICAgIG1ldGhvZCA9IHR5cGUubWV0aG9kO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VQYXJhbXMgPSBjb21wdXRlTWVzc2FnZVBhcmFtcyh0eXBlLCBwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uTWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICBqc29ucnBjOiB2ZXJzaW9uLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhcmFtczogbWVzc2FnZVBhcmFtc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyYWNlU2VuZGluZ05vdGlmaWNhdGlvbihub3RpZmljYXRpb25NZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlV3JpdGVyLndyaXRlKG5vdGlmaWNhdGlvbk1lc3NhZ2UpLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgU2VuZGluZyBub3RpZmljYXRpb24gZmFpbGVkLmApO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uTm90aWZpY2F0aW9uOiAodHlwZSwgaGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgdGhyb3dJZkNsb3NlZE9yRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIGxldCBtZXRob2Q7XG4gICAgICAgICAgICBpZiAoSXMuZnVuYyh0eXBlKSkge1xuICAgICAgICAgICAgICAgIHN0YXJOb3RpZmljYXRpb25IYW5kbGVyID0gdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoSXMuc3RyaW5nKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IHR5cGU7XG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkhhbmRsZXJzLnNldCh0eXBlLCB7IHR5cGU6IHVuZGVmaW5lZCwgaGFuZGxlciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IHR5cGUubWV0aG9kO1xuICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25IYW5kbGVycy5zZXQodHlwZS5tZXRob2QsIHsgdHlwZSwgaGFuZGxlciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25IYW5kbGVycy5kZWxldGUobWV0aG9kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJOb3RpZmljYXRpb25IYW5kbGVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Qcm9ncmVzczogKF90eXBlLCB0b2tlbiwgaGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgaWYgKHByb2dyZXNzSGFuZGxlcnMuaGFzKHRva2VuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvZ3Jlc3MgaGFuZGxlciBmb3IgdG9rZW4gJHt0b2tlbn0gYWxyZWFkeSByZWdpc3RlcmVkYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9ncmVzc0hhbmRsZXJzLnNldCh0b2tlbiwgaGFuZGxlcik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NIYW5kbGVycy5kZWxldGUodG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHNlbmRQcm9ncmVzczogKF90eXBlLCB0b2tlbiwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIG5vdCBhd2FpdCBidXQgc2ltcGxlIHJldHVybiB0byBlbnN1cmUgdGhhdCB3ZSBkb24ndCBoYXZlIGFub3RoZXJcbiAgICAgICAgICAgIC8vIGFzeW5jIHNjaGVkdWxpbmcuIE90aGVyd2lzZSBvbmUgc2VuZCBjb3VsZCBvdmVydGFrZSBhbm90aGVyIHNlbmQuXG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbi5zZW5kTm90aWZpY2F0aW9uKFByb2dyZXNzTm90aWZpY2F0aW9uLnR5cGUsIHsgdG9rZW4sIHZhbHVlIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvblVuaGFuZGxlZFByb2dyZXNzOiB1bmhhbmRsZWRQcm9ncmVzc0VtaXR0ZXIuZXZlbnQsXG4gICAgICAgIHNlbmRSZXF1ZXN0OiAodHlwZSwgLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgdGhyb3dJZkNsb3NlZE9yRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIHRocm93SWZOb3RMaXN0ZW5pbmcoKTtcbiAgICAgICAgICAgIGxldCBtZXRob2Q7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZVBhcmFtcztcbiAgICAgICAgICAgIGxldCB0b2tlbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChJcy5zdHJpbmcodHlwZSkpIHtcbiAgICAgICAgICAgICAgICBtZXRob2QgPSB0eXBlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0ID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGxldCBwYXJhbVN0YXJ0ID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1ldGVyU3RydWN0dXJlcyA9IG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuaXMoZmlyc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtU3RhcnQgPSAxO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gZmlyc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBwYXJhbUVuZCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxsYXRpb25fMS5DYW5jZWxsYXRpb25Ub2tlbi5pcyhsYXN0KSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbUVuZCA9IHBhcmFtRW5kIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBsYXN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJPZlBhcmFtcyA9IHBhcmFtRW5kIC0gcGFyYW1TdGFydDtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG51bWJlck9mUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VQYXJhbXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVBhcmFtcyA9IGNvbXB1dGVTaW5nbGVQYXJhbShwYXJhbWV0ZXJTdHJ1Y3R1cmVzLCBhcmdzW3BhcmFtU3RhcnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlclN0cnVjdHVyZXMgPT09IG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlY2VpdmVkICR7bnVtYmVyT2ZQYXJhbXN9IHBhcmFtZXRlcnMgZm9yICdieSBOYW1lJyByZXF1ZXN0IHBhcmFtZXRlciBzdHJ1Y3R1cmUuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlUGFyYW1zID0gYXJncy5zbGljZShwYXJhbVN0YXJ0LCBwYXJhbUVuZCkubWFwKHZhbHVlID0+IHVuZGVmaW5lZFRvTnVsbCh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gYXJncztcbiAgICAgICAgICAgICAgICBtZXRob2QgPSB0eXBlLm1ldGhvZDtcbiAgICAgICAgICAgICAgICBtZXNzYWdlUGFyYW1zID0gY29tcHV0ZU1lc3NhZ2VQYXJhbXModHlwZSwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJPZlBhcmFtcyA9IHR5cGUubnVtYmVyT2ZQYXJhbXM7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSBjYW5jZWxsYXRpb25fMS5DYW5jZWxsYXRpb25Ub2tlbi5pcyhwYXJhbXNbbnVtYmVyT2ZQYXJhbXNdKSA/IHBhcmFtc1tudW1iZXJPZlBhcmFtc10gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpZCA9IHNlcXVlbmNlTnVtYmVyKys7XG4gICAgICAgICAgICBsZXQgZGlzcG9zYWJsZTtcbiAgICAgICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGUgPSB0b2tlbi5vbkNhbmNlbGxhdGlvblJlcXVlc3RlZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBjYW5jZWxsYXRpb25TdHJhdGVneS5zZW5kZXIuc2VuZENhbmNlbGxhdGlvbihjb25uZWN0aW9uLCBpZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coYFJlY2VpdmVkIG5vIHByb21pc2UgZnJvbSBjYW5jZWxsYXRpb24gc3RyYXRlZ3kgd2hlbiBjYW5jZWxsaW5nIGlkICR7aWR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhgU2VuZGluZyBjYW5jZWxsYXRpb24gbWVzc2FnZXMgZm9yIGlkICR7aWR9IGZhaWxlZGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RNZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIGpzb25ycGM6IHZlcnNpb24sXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhcmFtczogbWVzc2FnZVBhcmFtc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyYWNlU2VuZGluZ1JlcXVlc3QocmVxdWVzdE1lc3NhZ2UpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYW5jZWxsYXRpb25TdHJhdGVneS5zZW5kZXIuZW5hYmxlQ2FuY2VsbGF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9uU3RyYXRlZ3kuc2VuZGVyLmVuYWJsZUNhbmNlbGxhdGlvbihyZXF1ZXN0TWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVXaXRoQ2xlYW51cCA9IChyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocik7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbGxhdGlvblN0cmF0ZWd5LnNlbmRlci5jbGVhbnVwKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zYWJsZT8uZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVqZWN0V2l0aENsZWFudXAgPSAocikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qocik7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbGxhdGlvblN0cmF0ZWd5LnNlbmRlci5jbGVhbnVwKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zYWJsZT8uZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VQcm9taXNlID0geyBtZXRob2Q6IG1ldGhvZCwgdGltZXJTdGFydDogRGF0ZS5ub3coKSwgcmVzb2x2ZTogcmVzb2x2ZVdpdGhDbGVhbnVwLCByZWplY3Q6IHJlamVjdFdpdGhDbGVhbnVwIH07XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbWVzc2FnZVdyaXRlci53cml0ZShyZXF1ZXN0TWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlUHJvbWlzZXMuc2V0KGlkLCByZXNwb25zZVByb21pc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBTZW5kaW5nIHJlcXVlc3QgZmFpbGVkLmApO1xuICAgICAgICAgICAgICAgICAgICAvLyBXcml0aW5nIHRoZSBtZXNzYWdlIGZhaWxlZC4gU28gd2UgbmVlZCB0byByZWplY3QgdGhlIHByb21pc2UuXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlUHJvbWlzZS5yZWplY3QobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihtZXNzYWdlc18xLkVycm9yQ29kZXMuTWVzc2FnZVdyaXRlRXJyb3IsIGVycm9yLm1lc3NhZ2UgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gcmVhc29uJykpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25SZXF1ZXN0OiAodHlwZSwgaGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgdGhyb3dJZkNsb3NlZE9yRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIGxldCBtZXRob2QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKFN0YXJSZXF1ZXN0SGFuZGxlci5pcyh0eXBlKSkge1xuICAgICAgICAgICAgICAgIG1ldGhvZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBzdGFyUmVxdWVzdEhhbmRsZXIgPSB0eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoSXMuc3RyaW5nKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IHR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RIYW5kbGVycy5zZXQodHlwZSwgeyBoYW5kbGVyOiBoYW5kbGVyLCB0eXBlOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSB0eXBlLm1ldGhvZDtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEhhbmRsZXJzLnNldCh0eXBlLm1ldGhvZCwgeyB0eXBlLCBoYW5kbGVyIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SGFuZGxlcnMuZGVsZXRlKG1ldGhvZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFyUmVxdWVzdEhhbmRsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBoYXNQZW5kaW5nUmVzcG9uc2U6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZVByb21pc2VzLnNpemUgPiAwO1xuICAgICAgICB9LFxuICAgICAgICB0cmFjZTogYXN5bmMgKF92YWx1ZSwgX3RyYWNlciwgc2VuZE5vdGlmaWNhdGlvbk9yVHJhY2VPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBsZXQgX3NlbmROb3RpZmljYXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBfdHJhY2VGb3JtYXQgPSBUcmFjZUZvcm1hdC5UZXh0O1xuICAgICAgICAgICAgaWYgKHNlbmROb3RpZmljYXRpb25PclRyYWNlT3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKElzLmJvb2xlYW4oc2VuZE5vdGlmaWNhdGlvbk9yVHJhY2VPcHRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICBfc2VuZE5vdGlmaWNhdGlvbiA9IHNlbmROb3RpZmljYXRpb25PclRyYWNlT3B0aW9ucztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9zZW5kTm90aWZpY2F0aW9uID0gc2VuZE5vdGlmaWNhdGlvbk9yVHJhY2VPcHRpb25zLnNlbmROb3RpZmljYXRpb24gfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIF90cmFjZUZvcm1hdCA9IHNlbmROb3RpZmljYXRpb25PclRyYWNlT3B0aW9ucy50cmFjZUZvcm1hdCB8fCBUcmFjZUZvcm1hdC5UZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNlID0gX3ZhbHVlO1xuICAgICAgICAgICAgdHJhY2VGb3JtYXQgPSBfdHJhY2VGb3JtYXQ7XG4gICAgICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLk9mZikge1xuICAgICAgICAgICAgICAgIHRyYWNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyYWNlciA9IF90cmFjZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3NlbmROb3RpZmljYXRpb24gJiYgIWlzQ2xvc2VkKCkgJiYgIWlzRGlzcG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uc2VuZE5vdGlmaWNhdGlvbihTZXRUcmFjZU5vdGlmaWNhdGlvbi50eXBlLCB7IHZhbHVlOiBUcmFjZS50b1N0cmluZyhfdmFsdWUpIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkVycm9yOiBlcnJvckVtaXR0ZXIuZXZlbnQsXG4gICAgICAgIG9uQ2xvc2U6IGNsb3NlRW1pdHRlci5ldmVudCxcbiAgICAgICAgb25VbmhhbmRsZWROb3RpZmljYXRpb246IHVuaGFuZGxlZE5vdGlmaWNhdGlvbkVtaXR0ZXIuZXZlbnQsXG4gICAgICAgIG9uRGlzcG9zZTogZGlzcG9zZUVtaXR0ZXIuZXZlbnQsXG4gICAgICAgIGVuZDogKCkgPT4ge1xuICAgICAgICAgICAgbWVzc2FnZVdyaXRlci5lbmQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzRGlzcG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlID0gQ29ubmVjdGlvblN0YXRlLkRpc3Bvc2VkO1xuICAgICAgICAgICAgZGlzcG9zZUVtaXR0ZXIuZmlyZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKG1lc3NhZ2VzXzEuRXJyb3JDb2Rlcy5QZW5kaW5nUmVzcG9uc2VSZWplY3RlZCwgJ1BlbmRpbmcgcmVzcG9uc2UgcmVqZWN0ZWQgc2luY2UgY29ubmVjdGlvbiBnb3QgZGlzcG9zZWQnKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcHJvbWlzZSBvZiByZXNwb25zZVByb21pc2VzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzcG9uc2VQcm9taXNlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHJlcXVlc3RUb2tlbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBrbm93bkNhbmNlbGVkUmVxdWVzdHMgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBtZXNzYWdlUXVldWUgPSBuZXcgbGlua2VkTWFwXzEuTGlua2VkTWFwKCk7XG4gICAgICAgICAgICAvLyBUZXN0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgaWYgKElzLmZ1bmMobWVzc2FnZVdyaXRlci5kaXNwb3NlKSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VXcml0ZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKElzLmZ1bmMobWVzc2FnZVJlYWRlci5kaXNwb3NlKSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VSZWFkZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsaXN0ZW46ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93SWZDbG9zZWRPckRpc3Bvc2VkKCk7XG4gICAgICAgICAgICB0aHJvd0lmTGlzdGVuaW5nKCk7XG4gICAgICAgICAgICBzdGF0ZSA9IENvbm5lY3Rpb25TdGF0ZS5MaXN0ZW5pbmc7XG4gICAgICAgICAgICBtZXNzYWdlUmVhZGVyLmxpc3RlbihjYWxsYmFjayk7XG4gICAgICAgIH0sXG4gICAgICAgIGluc3BlY3Q6ICgpID0+IHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAoMCwgcmFsXzEuZGVmYXVsdCkoKS5jb25zb2xlLmxvZygnaW5zcGVjdCcpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25uZWN0aW9uLm9uTm90aWZpY2F0aW9uKExvZ1RyYWNlTm90aWZpY2F0aW9uLnR5cGUsIChwYXJhbXMpID0+IHtcbiAgICAgICAgaWYgKHRyYWNlID09PSBUcmFjZS5PZmYgfHwgIXRyYWNlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZlcmJvc2UgPSB0cmFjZSA9PT0gVHJhY2UuVmVyYm9zZSB8fCB0cmFjZSA9PT0gVHJhY2UuQ29tcGFjdDtcbiAgICAgICAgdHJhY2VyLmxvZyhwYXJhbXMubWVzc2FnZSwgdmVyYm9zZSA/IHBhcmFtcy52ZXJib3NlIDogdW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgICBjb25uZWN0aW9uLm9uTm90aWZpY2F0aW9uKFByb2dyZXNzTm90aWZpY2F0aW9uLnR5cGUsIChwYXJhbXMpID0+IHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IHByb2dyZXNzSGFuZGxlcnMuZ2V0KHBhcmFtcy50b2tlbik7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICBoYW5kbGVyKHBhcmFtcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB1bmhhbmRsZWRQcm9ncmVzc0VtaXR0ZXIuZmlyZShwYXJhbXMpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbm5lY3Rpb247XG59XG5leHBvcnRzLmNyZWF0ZU1lc3NhZ2VDb25uZWN0aW9uID0gY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb247XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDg4NDQ6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5EaXNwb3NhYmxlID0gdm9pZCAwO1xudmFyIERpc3Bvc2FibGU7XG4oZnVuY3Rpb24gKERpc3Bvc2FibGUpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUoZnVuYykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcG9zZTogZnVuY1xuICAgICAgICB9O1xuICAgIH1cbiAgICBEaXNwb3NhYmxlLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKERpc3Bvc2FibGUgfHwgKGV4cG9ydHMuRGlzcG9zYWJsZSA9IERpc3Bvc2FibGUgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyNDc5OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkVtaXR0ZXIgPSBleHBvcnRzLkV2ZW50ID0gdm9pZCAwO1xuY29uc3QgcmFsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwOTEpO1xudmFyIEV2ZW50O1xuKGZ1bmN0aW9uIChFdmVudCkge1xuICAgIGNvbnN0IF9kaXNwb3NhYmxlID0geyBkaXNwb3NlKCkgeyB9IH07XG4gICAgRXZlbnQuTm9uZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9kaXNwb3NhYmxlOyB9O1xufSkoRXZlbnQgfHwgKGV4cG9ydHMuRXZlbnQgPSBFdmVudCA9IHt9KSk7XG5jbGFzcyBDYWxsYmFja0xpc3Qge1xuICAgIGFkZChjYWxsYmFjaywgY29udGV4dCA9IG51bGwsIGJ1Y2tldCkge1xuICAgICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrcykge1xuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gW107XG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5fY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYnVja2V0KSkge1xuICAgICAgICAgICAgYnVja2V0LnB1c2goeyBkaXNwb3NlOiAoKSA9PiB0aGlzLnJlbW92ZShjYWxsYmFjaywgY29udGV4dCkgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVtb3ZlKGNhbGxiYWNrLCBjb250ZXh0ID0gbnVsbCkge1xuICAgICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBmb3VuZENhbGxiYWNrV2l0aERpZmZlcmVudENvbnRleHQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMuX2NhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NhbGxiYWNrc1tpXSA9PT0gY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29udGV4dHNbaV0gPT09IGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FsbGJhY2sgJiBjb250ZXh0IG1hdGNoID0+IHJlbW92ZSBpdFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWxsYmFja3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0cy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kQ2FsbGJhY2tXaXRoRGlmZmVyZW50Q29udGV4dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmb3VuZENhbGxiYWNrV2l0aERpZmZlcmVudENvbnRleHQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2hlbiBhZGRpbmcgYSBsaXN0ZW5lciB3aXRoIGEgY29udGV4dCwgeW91IHNob3VsZCByZW1vdmUgaXQgd2l0aCB0aGUgc2FtZSBjb250ZXh0Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW52b2tlKC4uLmFyZ3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXQgPSBbXSwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzLnNsaWNlKDApLCBjb250ZXh0cyA9IHRoaXMuX2NvbnRleHRzLnNsaWNlKDApO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldC5wdXNoKGNhbGxiYWNrc1tpXS5hcHBseShjb250ZXh0c1tpXSwgYXJncykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICgwLCByYWxfMS5kZWZhdWx0KSgpLmNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9jYWxsYmFja3MgfHwgdGhpcy5fY2FsbGJhY2tzLmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9jb250ZXh0cyA9IHVuZGVmaW5lZDtcbiAgICB9XG59XG5jbGFzcyBFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihfb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gX29wdGlvbnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvciB0aGUgcHVibGljIHRvIGFsbG93IHRvIHN1YnNjcmliZVxuICAgICAqIHRvIGV2ZW50cyBmcm9tIHRoaXMgRW1pdHRlclxuICAgICAqL1xuICAgIGdldCBldmVudCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ldmVudCkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnQgPSAobGlzdGVuZXIsIHRoaXNBcmdzLCBkaXNwb3NhYmxlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IG5ldyBDYWxsYmFja0xpc3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMgJiYgdGhpcy5fb3B0aW9ucy5vbkZpcnN0TGlzdGVuZXJBZGQgJiYgdGhpcy5fY2FsbGJhY2tzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zLm9uRmlyc3RMaXN0ZW5lckFkZCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzLmFkZChsaXN0ZW5lciwgdGhpc0FyZ3MpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jYWxsYmFja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXNwb3NhYmxlIGlzIGRpc3Bvc2VkIGFmdGVyIGVtaXR0ZXIgaXMgZGlzcG9zZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzLnJlbW92ZShsaXN0ZW5lciwgdGhpc0FyZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmRpc3Bvc2UgPSBFbWl0dGVyLl9ub29wO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX29wdGlvbnMgJiYgdGhpcy5fb3B0aW9ucy5vbkxhc3RMaXN0ZW5lclJlbW92ZSAmJiB0aGlzLl9jYWxsYmFja3MuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkxhc3RMaXN0ZW5lclJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGlzcG9zYWJsZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUbyBiZSBrZXB0IHByaXZhdGUgdG8gZmlyZSBhbiBldmVudCB0b1xuICAgICAqIHN1YnNjcmliZXJzXG4gICAgICovXG4gICAgZmlyZShldmVudCkge1xuICAgICAgICBpZiAodGhpcy5fY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MuaW52b2tlLmNhbGwodGhpcy5fY2FsbGJhY2tzLCBldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NhbGxiYWNrcykge1xuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRW1pdHRlciA9IEVtaXR0ZXI7XG5FbWl0dGVyLl9ub29wID0gZnVuY3Rpb24gKCkgeyB9O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2NjE4OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLnN0cmluZ0FycmF5ID0gZXhwb3J0cy5hcnJheSA9IGV4cG9ydHMuZnVuYyA9IGV4cG9ydHMuZXJyb3IgPSBleHBvcnRzLm51bWJlciA9IGV4cG9ydHMuc3RyaW5nID0gZXhwb3J0cy5ib29sZWFuID0gdm9pZCAwO1xuZnVuY3Rpb24gYm9vbGVhbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2U7XG59XG5leHBvcnRzLmJvb2xlYW4gPSBib29sZWFuO1xuZnVuY3Rpb24gc3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XG59XG5leHBvcnRzLnN0cmluZyA9IHN0cmluZztcbmZ1bmN0aW9uIG51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyO1xufVxuZXhwb3J0cy5udW1iZXIgPSBudW1iZXI7XG5mdW5jdGlvbiBlcnJvcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEVycm9yO1xufVxuZXhwb3J0cy5lcnJvciA9IGVycm9yO1xuZnVuY3Rpb24gZnVuYyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmZ1bmMgPSBmdW5jO1xuZnVuY3Rpb24gYXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5leHBvcnRzLmFycmF5ID0gYXJyYXk7XG5mdW5jdGlvbiBzdHJpbmdBcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBhcnJheSh2YWx1ZSkgJiYgdmFsdWUuZXZlcnkoZWxlbSA9PiBzdHJpbmcoZWxlbSkpO1xufVxuZXhwb3J0cy5zdHJpbmdBcnJheSA9IHN0cmluZ0FycmF5O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMTA5OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG52YXIgX2E7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuTFJVQ2FjaGUgPSBleHBvcnRzLkxpbmtlZE1hcCA9IGV4cG9ydHMuVG91Y2ggPSB2b2lkIDA7XG52YXIgVG91Y2g7XG4oZnVuY3Rpb24gKFRvdWNoKSB7XG4gICAgVG91Y2guTm9uZSA9IDA7XG4gICAgVG91Y2guRmlyc3QgPSAxO1xuICAgIFRvdWNoLkFzT2xkID0gVG91Y2guRmlyc3Q7XG4gICAgVG91Y2guTGFzdCA9IDI7XG4gICAgVG91Y2guQXNOZXcgPSBUb3VjaC5MYXN0O1xufSkoVG91Y2ggfHwgKGV4cG9ydHMuVG91Y2ggPSBUb3VjaCA9IHt9KSk7XG5jbGFzcyBMaW5rZWRNYXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzW19hXSA9ICdMaW5rZWRNYXAnO1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX2hlYWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3RhaWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IDA7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9tYXAuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5faGVhZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdGFpbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX3N0YXRlKys7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5faGVhZCAmJiAhdGhpcy5fdGFpbDtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuICAgIH1cbiAgICBnZXQgZmlyc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oZWFkPy52YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGxhc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90YWlsPy52YWx1ZTtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwLmhhcyhrZXkpO1xuICAgIH1cbiAgICBnZXQoa2V5LCB0b3VjaCA9IFRvdWNoLk5vbmUpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuX21hcC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b3VjaCAhPT0gVG91Y2guTm9uZSkge1xuICAgICAgICAgICAgdGhpcy50b3VjaChpdGVtLCB0b3VjaCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlLCB0b3VjaCA9IFRvdWNoLk5vbmUpIHtcbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLl9tYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICBpdGVtLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAodG91Y2ggIT09IFRvdWNoLk5vbmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvdWNoKGl0ZW0sIHRvdWNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0gPSB7IGtleSwgdmFsdWUsIG5leHQ6IHVuZGVmaW5lZCwgcHJldmlvdXM6IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgc3dpdGNoICh0b3VjaCkge1xuICAgICAgICAgICAgICAgIGNhc2UgVG91Y2guTm9uZTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJdGVtTGFzdChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUb3VjaC5GaXJzdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJdGVtRmlyc3QoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVG91Y2guTGFzdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJdGVtTGFzdChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJdGVtTGFzdChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tYXAuc2V0KGtleSwgaXRlbSk7XG4gICAgICAgICAgICB0aGlzLl9zaXplKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5yZW1vdmUoa2V5KTtcbiAgICB9XG4gICAgcmVtb3ZlKGtleSkge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5fbWFwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWFwLmRlbGV0ZShrZXkpO1xuICAgICAgICB0aGlzLnJlbW92ZUl0ZW0oaXRlbSk7XG4gICAgICAgIHRoaXMuX3NpemUtLTtcbiAgICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfVxuICAgIHNoaWZ0KCkge1xuICAgICAgICBpZiAoIXRoaXMuX2hlYWQgJiYgIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9oZWFkIHx8ICF0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9oZWFkO1xuICAgICAgICB0aGlzLl9tYXAuZGVsZXRlKGl0ZW0ua2V5KTtcbiAgICAgICAgdGhpcy5yZW1vdmVJdGVtKGl0ZW0pO1xuICAgICAgICB0aGlzLl9zaXplLS07XG4gICAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuICAgIH1cbiAgICBmb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLl9oZWFkO1xuICAgICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXNBcmcpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja2ZuLmJpbmQodGhpc0FyZykoY3VycmVudC52YWx1ZSwgY3VycmVudC5rZXksIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tmbihjdXJyZW50LnZhbHVlLCBjdXJyZW50LmtleSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUgIT09IHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5rZWRNYXAgZ290IG1vZGlmaWVkIGR1cmluZyBpdGVyYXRpb24uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGtleXMoKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5faGVhZDtcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSB7XG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlICE9PSBzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExpbmtlZE1hcCBnb3QgbW9kaWZpZWQgZHVyaW5nIGl0ZXJhdGlvbi5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geyB2YWx1ZTogY3VycmVudC5rZXksIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfVxuICAgIHZhbHVlcygpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLl9oZWFkO1xuICAgICAgICBjb25zdCBpdGVyYXRvciA9IHtcbiAgICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUgIT09IHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTGlua2VkTWFwIGdvdCBtb2RpZmllZCBkdXJpbmcgaXRlcmF0aW9uLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IHZhbHVlOiBjdXJyZW50LnZhbHVlLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgIH1cbiAgICBlbnRyaWVzKCkge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgIGNvbnN0IGl0ZXJhdG9yID0ge1xuICAgICAgICAgICAgW1N5bWJvbC5pdGVyYXRvcl06ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5rZWRNYXAgZ290IG1vZGlmaWVkIGR1cmluZyBpdGVyYXRpb24uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgdmFsdWU6IFtjdXJyZW50LmtleSwgY3VycmVudC52YWx1ZV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfVxuICAgIFsoX2EgPSBTeW1ib2wudG9TdHJpbmdUYWcsIFN5bWJvbC5pdGVyYXRvcildKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzKCk7XG4gICAgfVxuICAgIHRyaW1PbGQobmV3U2l6ZSkge1xuICAgICAgICBpZiAobmV3U2l6ZSA+PSB0aGlzLnNpemUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3U2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5faGVhZDtcbiAgICAgICAgbGV0IGN1cnJlbnRTaXplID0gdGhpcy5zaXplO1xuICAgICAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50U2l6ZSA+IG5ld1NpemUpIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5kZWxldGUoY3VycmVudC5rZXkpO1xuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICAgICAgICAgIGN1cnJlbnRTaXplLS07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGVhZCA9IGN1cnJlbnQ7XG4gICAgICAgIHRoaXMuX3NpemUgPSBjdXJyZW50U2l6ZTtcbiAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJlbnQucHJldmlvdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUrKztcbiAgICB9XG4gICAgYWRkSXRlbUZpcnN0KGl0ZW0pIHtcbiAgICAgICAgLy8gRmlyc3QgdGltZSBJbnNlcnRcbiAgICAgICAgaWYgKCF0aGlzLl9oZWFkICYmICF0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICB0aGlzLl90YWlsID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5faGVhZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxpc3QnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0ubmV4dCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICB0aGlzLl9oZWFkLnByZXZpb3VzID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oZWFkID0gaXRlbTtcbiAgICAgICAgdGhpcy5fc3RhdGUrKztcbiAgICB9XG4gICAgYWRkSXRlbUxhc3QoaXRlbSkge1xuICAgICAgICAvLyBGaXJzdCB0aW1lIEluc2VydFxuICAgICAgICBpZiAoIXRoaXMuX2hlYWQgJiYgIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5wcmV2aW91cyA9IHRoaXMuX3RhaWw7XG4gICAgICAgICAgICB0aGlzLl90YWlsLm5leHQgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RhaWwgPSBpdGVtO1xuICAgICAgICB0aGlzLl9zdGF0ZSsrO1xuICAgIH1cbiAgICByZW1vdmVJdGVtKGl0ZW0pIHtcbiAgICAgICAgaWYgKGl0ZW0gPT09IHRoaXMuX2hlYWQgJiYgaXRlbSA9PT0gdGhpcy5fdGFpbCkge1xuICAgICAgICAgICAgdGhpcy5faGVhZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXRlbSA9PT0gdGhpcy5faGVhZCkge1xuICAgICAgICAgICAgLy8gVGhpcyBjYW4gb25seSBoYXBwZW5lZCBpZiBzaXplID09PSAxIHdoaWNoIGlzIGhhbmRsZVxuICAgICAgICAgICAgLy8gYnkgdGhlIGNhc2UgYWJvdmUuXG4gICAgICAgICAgICBpZiAoIWl0ZW0ubmV4dCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsaXN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtLm5leHQucHJldmlvdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gaXRlbS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGl0ZW0gPT09IHRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgY2FuIG9ubHkgaGFwcGVuZWQgaWYgc2l6ZSA9PT0gMSB3aGljaCBpcyBoYW5kbGVcbiAgICAgICAgICAgIC8vIGJ5IHRoZSBjYXNlIGFib3ZlLlxuICAgICAgICAgICAgaWYgKCFpdGVtLnByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxpc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW0ucHJldmlvdXMubmV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSBpdGVtLnByZXZpb3VzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IGl0ZW0ubmV4dDtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzID0gaXRlbS5wcmV2aW91cztcbiAgICAgICAgICAgIGlmICghbmV4dCB8fCAhcHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV4dC5wcmV2aW91cyA9IHByZXZpb3VzO1xuICAgICAgICAgICAgcHJldmlvdXMubmV4dCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbS5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpdGVtLnByZXZpb3VzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zdGF0ZSsrO1xuICAgIH1cbiAgICB0b3VjaChpdGVtLCB0b3VjaCkge1xuICAgICAgICBpZiAoIXRoaXMuX2hlYWQgfHwgIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsaXN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0b3VjaCAhPT0gVG91Y2guRmlyc3QgJiYgdG91Y2ggIT09IFRvdWNoLkxhc3QpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvdWNoID09PSBUb3VjaC5GaXJzdCkge1xuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IHRoaXMuX2hlYWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gaXRlbS5uZXh0O1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXMgPSBpdGVtLnByZXZpb3VzO1xuICAgICAgICAgICAgLy8gVW5saW5rIHRoZSBpdGVtXG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gdGhpcy5fdGFpbCkge1xuICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzIG11c3QgYmUgZGVmaW5lZCBzaW5jZSBpdGVtIHdhcyBub3QgaGVhZCBidXQgaXMgdGFpbFxuICAgICAgICAgICAgICAgIC8vIFNvIHRoZXJlIGFyZSBtb3JlIHRoYW4gb24gaXRlbSBpbiB0aGUgbWFwXG4gICAgICAgICAgICAgICAgcHJldmlvdXMubmV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aGlzLl90YWlsID0gcHJldmlvdXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBCb3RoIG5leHQgYW5kIHByZXZpb3VzIGFyZSBub3QgdW5kZWZpbmVkIHNpbmNlIGl0ZW0gd2FzIG5laXRoZXIgaGVhZCBub3IgdGFpbC5cbiAgICAgICAgICAgICAgICBuZXh0LnByZXZpb3VzID0gcHJldmlvdXM7XG4gICAgICAgICAgICAgICAgcHJldmlvdXMubmV4dCA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJbnNlcnQgdGhlIG5vZGUgYXQgaGVhZFxuICAgICAgICAgICAgaXRlbS5wcmV2aW91cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGl0ZW0ubmV4dCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICB0aGlzLl9oZWFkLnByZXZpb3VzID0gaXRlbTtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQgPSBpdGVtO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0b3VjaCA9PT0gVG91Y2guTGFzdCkge1xuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IHRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gaXRlbS5uZXh0O1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXMgPSBpdGVtLnByZXZpb3VzO1xuICAgICAgICAgICAgLy8gVW5saW5rIHRoZSBpdGVtLlxuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IHRoaXMuX2hlYWQpIHtcbiAgICAgICAgICAgICAgICAvLyBuZXh0IG11c3QgYmUgZGVmaW5lZCBzaW5jZSBpdGVtIHdhcyBub3QgdGFpbCBidXQgaXMgaGVhZFxuICAgICAgICAgICAgICAgIC8vIFNvIHRoZXJlIGFyZSBtb3JlIHRoYW4gb24gaXRlbSBpbiB0aGUgbWFwXG4gICAgICAgICAgICAgICAgbmV4dC5wcmV2aW91cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aGlzLl9oZWFkID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEJvdGggbmV4dCBhbmQgcHJldmlvdXMgYXJlIG5vdCB1bmRlZmluZWQgc2luY2UgaXRlbSB3YXMgbmVpdGhlciBoZWFkIG5vciB0YWlsLlxuICAgICAgICAgICAgICAgIG5leHQucHJldmlvdXMgPSBwcmV2aW91cztcbiAgICAgICAgICAgICAgICBwcmV2aW91cy5uZXh0ID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW0ubmV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGl0ZW0ucHJldmlvdXMgPSB0aGlzLl90YWlsO1xuICAgICAgICAgICAgdGhpcy5fdGFpbC5uZXh0ID0gaXRlbTtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSBpdGVtO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBbXTtcbiAgICAgICAgdGhpcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBmcm9tSlNPTihkYXRhKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkxpbmtlZE1hcCA9IExpbmtlZE1hcDtcbmNsYXNzIExSVUNhY2hlIGV4dGVuZHMgTGlua2VkTWFwIHtcbiAgICBjb25zdHJ1Y3RvcihsaW1pdCwgcmF0aW8gPSAxKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2xpbWl0ID0gbGltaXQ7XG4gICAgICAgIHRoaXMuX3JhdGlvID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgcmF0aW8pLCAxKTtcbiAgICB9XG4gICAgZ2V0IGxpbWl0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGltaXQ7XG4gICAgfVxuICAgIHNldCBsaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLl9saW1pdCA9IGxpbWl0O1xuICAgICAgICB0aGlzLmNoZWNrVHJpbSgpO1xuICAgIH1cbiAgICBnZXQgcmF0aW8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXRpbztcbiAgICB9XG4gICAgc2V0IHJhdGlvKHJhdGlvKSB7XG4gICAgICAgIHRoaXMuX3JhdGlvID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgcmF0aW8pLCAxKTtcbiAgICAgICAgdGhpcy5jaGVja1RyaW0oKTtcbiAgICB9XG4gICAgZ2V0KGtleSwgdG91Y2ggPSBUb3VjaC5Bc05ldykge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSwgdG91Y2gpO1xuICAgIH1cbiAgICBwZWVrKGtleSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSwgVG91Y2guTm9uZSk7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHN1cGVyLnNldChrZXksIHZhbHVlLCBUb3VjaC5MYXN0KTtcbiAgICAgICAgdGhpcy5jaGVja1RyaW0oKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNoZWNrVHJpbSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2l6ZSA+IHRoaXMuX2xpbWl0KSB7XG4gICAgICAgICAgICB0aGlzLnRyaW1PbGQoTWF0aC5yb3VuZCh0aGlzLl9saW1pdCAqIHRoaXMuX3JhdGlvKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkxSVUNhY2hlID0gTFJVQ2FjaGU7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk4MDU6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5BYnN0cmFjdE1lc3NhZ2VCdWZmZXIgPSB2b2lkIDA7XG5jb25zdCBDUiA9IDEzO1xuY29uc3QgTEYgPSAxMDtcbmNvbnN0IENSTEYgPSAnXFxyXFxuJztcbmNsYXNzIEFic3RyYWN0TWVzc2FnZUJ1ZmZlciB7XG4gICAgY29uc3RydWN0b3IoZW5jb2RpbmcgPSAndXRmLTgnKSB7XG4gICAgICAgIHRoaXMuX2VuY29kaW5nID0gZW5jb2Rpbmc7XG4gICAgICAgIHRoaXMuX2NodW5rcyA9IFtdO1xuICAgICAgICB0aGlzLl90b3RhbExlbmd0aCA9IDA7XG4gICAgfVxuICAgIGdldCBlbmNvZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuY29kaW5nO1xuICAgIH1cbiAgICBhcHBlbmQoY2h1bmspIHtcbiAgICAgICAgY29uc3QgdG9BcHBlbmQgPSB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnID8gdGhpcy5mcm9tU3RyaW5nKGNodW5rLCB0aGlzLl9lbmNvZGluZykgOiBjaHVuaztcbiAgICAgICAgdGhpcy5fY2h1bmtzLnB1c2godG9BcHBlbmQpO1xuICAgICAgICB0aGlzLl90b3RhbExlbmd0aCArPSB0b0FwcGVuZC5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICB0cnlSZWFkSGVhZGVycyhsb3dlckNhc2VLZXlzID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NodW5rcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0YXRlID0gMDtcbiAgICAgICAgbGV0IGNodW5rSW5kZXggPSAwO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IGNodW5rQnl0ZXNSZWFkID0gMDtcbiAgICAgICAgcm93OiB3aGlsZSAoY2h1bmtJbmRleCA8IHRoaXMuX2NodW5rcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5fY2h1bmtzW2NodW5rSW5kZXhdO1xuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIGNvbHVtbjogd2hpbGUgKG9mZnNldCA8IGNodW5rLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2h1bmtbb2Zmc2V0XTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ1I6XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBMRjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayByb3c7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2h1bmtCeXRlc1JlYWQgKz0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIGNodW5rSW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUgIT09IDQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGJ1ZmZlciBjb250YWlucyB0aGUgdHdvIENSTEYgYXQgdGhlIGVuZC4gU28gd2Ugd2lsbFxuICAgICAgICAvLyBoYXZlIHR3byBlbXB0eSBsaW5lcyBhZnRlciB0aGUgc3BsaXQgYXQgdGhlIGVuZCBhcyB3ZWxsLlxuICAgICAgICBjb25zdCBidWZmZXIgPSB0aGlzLl9yZWFkKGNodW5rQnl0ZXNSZWFkICsgb2Zmc2V0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gdGhpcy50b1N0cmluZyhidWZmZXIsICdhc2NpaScpLnNwbGl0KENSTEYpO1xuICAgICAgICBpZiAoaGVhZGVycy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVhZGVycy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IGhlYWRlcnNbaV07XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGhlYWRlci5pbmRleE9mKCc6Jyk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNZXNzYWdlIGhlYWRlciBtdXN0IHNlcGFyYXRlIGtleSBhbmQgdmFsdWUgdXNpbmcgJzonXFxuJHtoZWFkZXJ9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBoZWFkZXIuc3Vic3RyKDAsIGluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gaGVhZGVyLnN1YnN0cihpbmRleCArIDEpLnRyaW0oKTtcbiAgICAgICAgICAgIHJlc3VsdC5zZXQobG93ZXJDYXNlS2V5cyA/IGtleS50b0xvd2VyQ2FzZSgpIDoga2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgdHJ5UmVhZEJvZHkobGVuZ3RoKSB7XG4gICAgICAgIGlmICh0aGlzLl90b3RhbExlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZChsZW5ndGgpO1xuICAgIH1cbiAgICBnZXQgbnVtYmVyT2ZCeXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvdGFsTGVuZ3RoO1xuICAgIH1cbiAgICBfcmVhZChieXRlQ291bnQpIHtcbiAgICAgICAgaWYgKGJ5dGVDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1wdHlCdWZmZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnl0ZUNvdW50ID4gdGhpcy5fdG90YWxMZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlYWQgc28gbWFueSBieXRlcyFgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY2h1bmtzWzBdLmJ5dGVMZW5ndGggPT09IGJ5dGVDb3VudCkge1xuICAgICAgICAgICAgLy8gc3VwZXIgZmFzdCBwYXRoLCBwcmVjaXNlbHkgZmlyc3QgY2h1bmsgbXVzdCBiZSByZXR1cm5lZFxuICAgICAgICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLl9jaHVua3NbMF07XG4gICAgICAgICAgICB0aGlzLl9jaHVua3Muc2hpZnQoKTtcbiAgICAgICAgICAgIHRoaXMuX3RvdGFsTGVuZ3RoIC09IGJ5dGVDb3VudDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzTmF0aXZlKGNodW5rKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY2h1bmtzWzBdLmJ5dGVMZW5ndGggPiBieXRlQ291bnQpIHtcbiAgICAgICAgICAgIC8vIGZhc3QgcGF0aCwgdGhlIHJlYWRpbmcgaXMgZW50aXJlbHkgd2l0aGluIHRoZSBmaXJzdCBjaHVua1xuICAgICAgICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLl9jaHVua3NbMF07XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmFzTmF0aXZlKGNodW5rLCBieXRlQ291bnQpO1xuICAgICAgICAgICAgdGhpcy5fY2h1bmtzWzBdID0gY2h1bmsuc2xpY2UoYnl0ZUNvdW50KTtcbiAgICAgICAgICAgIHRoaXMuX3RvdGFsTGVuZ3RoIC09IGJ5dGVDb3VudDtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5hbGxvY05hdGl2ZShieXRlQ291bnQpO1xuICAgICAgICBsZXQgcmVzdWx0T2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IGNodW5rSW5kZXggPSAwO1xuICAgICAgICB3aGlsZSAoYnl0ZUNvdW50ID4gMCkge1xuICAgICAgICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLl9jaHVua3NbY2h1bmtJbmRleF07XG4gICAgICAgICAgICBpZiAoY2h1bmsuYnl0ZUxlbmd0aCA+IGJ5dGVDb3VudCkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgY2h1bmsgd2lsbCBzdXJ2aXZlXG4gICAgICAgICAgICAgICAgY29uc3QgY2h1bmtQYXJ0ID0gY2h1bmsuc2xpY2UoMCwgYnl0ZUNvdW50KTtcbiAgICAgICAgICAgICAgICByZXN1bHQuc2V0KGNodW5rUGFydCwgcmVzdWx0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICByZXN1bHRPZmZzZXQgKz0gYnl0ZUNvdW50O1xuICAgICAgICAgICAgICAgIHRoaXMuX2NodW5rc1tjaHVua0luZGV4XSA9IGNodW5rLnNsaWNlKGJ5dGVDb3VudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG90YWxMZW5ndGggLT0gYnl0ZUNvdW50O1xuICAgICAgICAgICAgICAgIGJ5dGVDb3VudCAtPSBieXRlQ291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGNodW5rIHdpbGwgYmUgZW50aXJlbHkgcmVhZFxuICAgICAgICAgICAgICAgIHJlc3VsdC5zZXQoY2h1bmssIHJlc3VsdE9mZnNldCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0T2Zmc2V0ICs9IGNodW5rLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2h1bmtzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdG90YWxMZW5ndGggLT0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICBieXRlQ291bnQgLT0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlQnVmZmVyID0gQWJzdHJhY3RNZXNzYWdlQnVmZmVyO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2NTY6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuUmVhZGFibGVTdHJlYW1NZXNzYWdlUmVhZGVyID0gZXhwb3J0cy5BYnN0cmFjdE1lc3NhZ2VSZWFkZXIgPSBleHBvcnRzLk1lc3NhZ2VSZWFkZXIgPSB2b2lkIDA7XG5jb25zdCByYWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTA5MSk7XG5jb25zdCBJcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjYxOCk7XG5jb25zdCBldmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjQ3OSk7XG5jb25zdCBzZW1hcGhvcmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDE4KTtcbnZhciBNZXNzYWdlUmVhZGVyO1xuKGZ1bmN0aW9uIChNZXNzYWdlUmVhZGVyKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLmZ1bmMoY2FuZGlkYXRlLmxpc3RlbikgJiYgSXMuZnVuYyhjYW5kaWRhdGUuZGlzcG9zZSkgJiZcbiAgICAgICAgICAgIElzLmZ1bmMoY2FuZGlkYXRlLm9uRXJyb3IpICYmIElzLmZ1bmMoY2FuZGlkYXRlLm9uQ2xvc2UpICYmIElzLmZ1bmMoY2FuZGlkYXRlLm9uUGFydGlhbE1lc3NhZ2UpO1xuICAgIH1cbiAgICBNZXNzYWdlUmVhZGVyLmlzID0gaXM7XG59KShNZXNzYWdlUmVhZGVyIHx8IChleHBvcnRzLk1lc3NhZ2VSZWFkZXIgPSBNZXNzYWdlUmVhZGVyID0ge30pKTtcbmNsYXNzIEFic3RyYWN0TWVzc2FnZVJlYWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXJyb3JFbWl0dGVyID0gbmV3IGV2ZW50c18xLkVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5jbG9zZUVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgICAgICB0aGlzLnBhcnRpYWxNZXNzYWdlRW1pdHRlciA9IG5ldyBldmVudHNfMS5FbWl0dGVyKCk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuZXJyb3JFbWl0dGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5jbG9zZUVtaXR0ZXIuZGlzcG9zZSgpO1xuICAgIH1cbiAgICBnZXQgb25FcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JFbWl0dGVyLmV2ZW50O1xuICAgIH1cbiAgICBmaXJlRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5lcnJvckVtaXR0ZXIuZmlyZSh0aGlzLmFzRXJyb3IoZXJyb3IpKTtcbiAgICB9XG4gICAgZ2V0IG9uQ2xvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb3NlRW1pdHRlci5ldmVudDtcbiAgICB9XG4gICAgZmlyZUNsb3NlKCkge1xuICAgICAgICB0aGlzLmNsb3NlRW1pdHRlci5maXJlKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGdldCBvblBhcnRpYWxNZXNzYWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJ0aWFsTWVzc2FnZUVtaXR0ZXIuZXZlbnQ7XG4gICAgfVxuICAgIGZpcmVQYXJ0aWFsTWVzc2FnZShpbmZvKSB7XG4gICAgICAgIHRoaXMucGFydGlhbE1lc3NhZ2VFbWl0dGVyLmZpcmUoaW5mbyk7XG4gICAgfVxuICAgIGFzRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoYFJlYWRlciByZWNlaXZlZCBlcnJvci4gUmVhc29uOiAke0lzLnN0cmluZyhlcnJvci5tZXNzYWdlKSA/IGVycm9yLm1lc3NhZ2UgOiAndW5rbm93bid9YCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFic3RyYWN0TWVzc2FnZVJlYWRlciA9IEFic3RyYWN0TWVzc2FnZVJlYWRlcjtcbnZhciBSZXNvbHZlZE1lc3NhZ2VSZWFkZXJPcHRpb25zO1xuKGZ1bmN0aW9uIChSZXNvbHZlZE1lc3NhZ2VSZWFkZXJPcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gZnJvbU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBsZXQgY2hhcnNldDtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgbGV0IGNvbnRlbnREZWNvZGVyO1xuICAgICAgICBjb25zdCBjb250ZW50RGVjb2RlcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGxldCBjb250ZW50VHlwZURlY29kZXI7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRUeXBlRGVjb2RlcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjaGFyc2V0ID0gb3B0aW9ucyA/PyAndXRmLTgnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2hhcnNldCA9IG9wdGlvbnMuY2hhcnNldCA/PyAndXRmLTgnO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29udGVudERlY29kZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnREZWNvZGVyID0gb3B0aW9ucy5jb250ZW50RGVjb2RlcjtcbiAgICAgICAgICAgICAgICBjb250ZW50RGVjb2RlcnMuc2V0KGNvbnRlbnREZWNvZGVyLm5hbWUsIGNvbnRlbnREZWNvZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNvbnRlbnREZWNvZGVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBkZWNvZGVyIG9mIG9wdGlvbnMuY29udGVudERlY29kZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnREZWNvZGVycy5zZXQoZGVjb2Rlci5uYW1lLCBkZWNvZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jb250ZW50VHlwZURlY29kZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlRGVjb2RlciA9IG9wdGlvbnMuY29udGVudFR5cGVEZWNvZGVyO1xuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlRGVjb2RlcnMuc2V0KGNvbnRlbnRUeXBlRGVjb2Rlci5uYW1lLCBjb250ZW50VHlwZURlY29kZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29udGVudFR5cGVEZWNvZGVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBkZWNvZGVyIG9mIG9wdGlvbnMuY29udGVudFR5cGVEZWNvZGVycykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZURlY29kZXJzLnNldChkZWNvZGVyLm5hbWUsIGRlY29kZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGVudFR5cGVEZWNvZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlRGVjb2RlciA9ICgwLCByYWxfMS5kZWZhdWx0KSgpLmFwcGxpY2F0aW9uSnNvbi5kZWNvZGVyO1xuICAgICAgICAgICAgY29udGVudFR5cGVEZWNvZGVycy5zZXQoY29udGVudFR5cGVEZWNvZGVyLm5hbWUsIGNvbnRlbnRUeXBlRGVjb2Rlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgY2hhcnNldCwgY29udGVudERlY29kZXIsIGNvbnRlbnREZWNvZGVycywgY29udGVudFR5cGVEZWNvZGVyLCBjb250ZW50VHlwZURlY29kZXJzIH07XG4gICAgfVxuICAgIFJlc29sdmVkTWVzc2FnZVJlYWRlck9wdGlvbnMuZnJvbU9wdGlvbnMgPSBmcm9tT3B0aW9ucztcbn0pKFJlc29sdmVkTWVzc2FnZVJlYWRlck9wdGlvbnMgfHwgKFJlc29sdmVkTWVzc2FnZVJlYWRlck9wdGlvbnMgPSB7fSkpO1xuY2xhc3MgUmVhZGFibGVTdHJlYW1NZXNzYWdlUmVhZGVyIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlUmVhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihyZWFkYWJsZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJlYWRhYmxlID0gcmVhZGFibGU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IFJlc29sdmVkTWVzc2FnZVJlYWRlck9wdGlvbnMuZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gKDAsIHJhbF8xLmRlZmF1bHQpKCkubWVzc2FnZUJ1ZmZlci5jcmVhdGUodGhpcy5vcHRpb25zLmNoYXJzZXQpO1xuICAgICAgICB0aGlzLl9wYXJ0aWFsTWVzc2FnZVRpbWVvdXQgPSAxMDAwMDtcbiAgICAgICAgdGhpcy5uZXh0TWVzc2FnZUxlbmd0aCA9IC0xO1xuICAgICAgICB0aGlzLm1lc3NhZ2VUb2tlbiA9IDA7XG4gICAgICAgIHRoaXMucmVhZFNlbWFwaG9yZSA9IG5ldyBzZW1hcGhvcmVfMS5TZW1hcGhvcmUoMSk7XG4gICAgfVxuICAgIHNldCBwYXJ0aWFsTWVzc2FnZVRpbWVvdXQodGltZW91dCkge1xuICAgICAgICB0aGlzLl9wYXJ0aWFsTWVzc2FnZVRpbWVvdXQgPSB0aW1lb3V0O1xuICAgIH1cbiAgICBnZXQgcGFydGlhbE1lc3NhZ2VUaW1lb3V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFydGlhbE1lc3NhZ2VUaW1lb3V0O1xuICAgIH1cbiAgICBsaXN0ZW4oY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5uZXh0TWVzc2FnZUxlbmd0aCA9IC0xO1xuICAgICAgICB0aGlzLm1lc3NhZ2VUb2tlbiA9IDA7XG4gICAgICAgIHRoaXMucGFydGlhbE1lc3NhZ2VUaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnJlYWRhYmxlLm9uRGF0YSgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkRhdGEoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlYWRhYmxlLm9uRXJyb3IoKGVycm9yKSA9PiB0aGlzLmZpcmVFcnJvcihlcnJvcikpO1xuICAgICAgICB0aGlzLnJlYWRhYmxlLm9uQ2xvc2UoKCkgPT4gdGhpcy5maXJlQ2xvc2UoKSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIG9uRGF0YShkYXRhKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5hcHBlbmQoZGF0YSk7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5leHRNZXNzYWdlTGVuZ3RoID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5idWZmZXIudHJ5UmVhZEhlYWRlcnModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaGVhZGVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRMZW5ndGggPSBoZWFkZXJzLmdldCgnY29udGVudC1sZW5ndGgnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZW50TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmVFcnJvcihuZXcgRXJyb3IoYEhlYWRlciBtdXN0IHByb3ZpZGUgYSBDb250ZW50LUxlbmd0aCBwcm9wZXJ0eS5cXG4ke0pTT04uc3RyaW5naWZ5KE9iamVjdC5mcm9tRW50cmllcyhoZWFkZXJzKSl9YCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHBhcnNlSW50KGNvbnRlbnRMZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4obGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlRXJyb3IobmV3IEVycm9yKGBDb250ZW50LUxlbmd0aCB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyLiBHb3QgJHtjb250ZW50TGVuZ3RofWApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRNZXNzYWdlTGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBib2R5ID0gdGhpcy5idWZmZXIudHJ5UmVhZEJvZHkodGhpcy5uZXh0TWVzc2FnZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvKiogV2UgaGF2ZW4ndCByZWNlaXZlZCB0aGUgZnVsbCBtZXNzYWdlIHlldC4gKi9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRQYXJ0aWFsTWVzc2FnZVRpbWVyKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclBhcnRpYWxNZXNzYWdlVGltZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRNZXNzYWdlTGVuZ3RoID0gLTE7XG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgd2UgY29udmVydCBvbmUgcmVjZWl2ZWQgbWVzc2FnZSBhZnRlciB0aGVcbiAgICAgICAgICAgICAgICAvLyBvdGhlci4gT3RoZXJ3aXNlIGl0IGNvdWxkIGhhcHBlbiB0aGF0IGEgZGVjb2Rpbmcgb2YgYSBzZWNvbmRcbiAgICAgICAgICAgICAgICAvLyBzbWFsbGVyIG1lc3NhZ2UgZmluaXNoZWQgYmVmb3JlIHRoZSBkZWNvZGluZyBvZiBhIGZpcnN0IGxhcmdlclxuICAgICAgICAgICAgICAgIC8vIG1lc3NhZ2UgYW5kIHRoZW4gd2Ugd291bGQgZGVsaXZlciB0aGUgc2Vjb25kIG1lc3NhZ2UgZmlyc3QuXG4gICAgICAgICAgICAgICAgdGhpcy5yZWFkU2VtYXBob3JlLmxvY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBieXRlcyA9IHRoaXMub3B0aW9ucy5jb250ZW50RGVjb2RlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGF3YWl0IHRoaXMub3B0aW9ucy5jb250ZW50RGVjb2Rlci5kZWNvZGUoYm9keSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYm9keTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGF3YWl0IHRoaXMub3B0aW9ucy5jb250ZW50VHlwZURlY29kZXIuZGVjb2RlKGJ5dGVzLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmVFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmVFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXJQYXJ0aWFsTWVzc2FnZVRpbWVyKCkge1xuICAgICAgICBpZiAodGhpcy5wYXJ0aWFsTWVzc2FnZVRpbWVyKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnRpYWxNZXNzYWdlVGltZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5wYXJ0aWFsTWVzc2FnZVRpbWVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFBhcnRpYWxNZXNzYWdlVGltZXIoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJQYXJ0aWFsTWVzc2FnZVRpbWVyKCk7XG4gICAgICAgIGlmICh0aGlzLl9wYXJ0aWFsTWVzc2FnZVRpbWVvdXQgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGFydGlhbE1lc3NhZ2VUaW1lciA9ICgwLCByYWxfMS5kZWZhdWx0KSgpLnRpbWVyLnNldFRpbWVvdXQoKHRva2VuLCB0aW1lb3V0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBhcnRpYWxNZXNzYWdlVGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAodG9rZW4gPT09IHRoaXMubWVzc2FnZVRva2VuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlUGFydGlhbE1lc3NhZ2UoeyBtZXNzYWdlVG9rZW46IHRva2VuLCB3YWl0aW5nVGltZTogdGltZW91dCB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFBhcnRpYWxNZXNzYWdlVGltZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcy5fcGFydGlhbE1lc3NhZ2VUaW1lb3V0LCB0aGlzLm1lc3NhZ2VUb2tlbiwgdGhpcy5fcGFydGlhbE1lc3NhZ2VUaW1lb3V0KTtcbiAgICB9XG59XG5leHBvcnRzLlJlYWRhYmxlU3RyZWFtTWVzc2FnZVJlYWRlciA9IFJlYWRhYmxlU3RyZWFtTWVzc2FnZVJlYWRlcjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTAzNjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5Xcml0ZWFibGVTdHJlYW1NZXNzYWdlV3JpdGVyID0gZXhwb3J0cy5BYnN0cmFjdE1lc3NhZ2VXcml0ZXIgPSBleHBvcnRzLk1lc3NhZ2VXcml0ZXIgPSB2b2lkIDA7XG5jb25zdCByYWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTA5MSk7XG5jb25zdCBJcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjYxOCk7XG5jb25zdCBzZW1hcGhvcmVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDE4KTtcbmNvbnN0IGV2ZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNDc5KTtcbmNvbnN0IENvbnRlbnRMZW5ndGggPSAnQ29udGVudC1MZW5ndGg6ICc7XG5jb25zdCBDUkxGID0gJ1xcclxcbic7XG52YXIgTWVzc2FnZVdyaXRlcjtcbihmdW5jdGlvbiAoTWVzc2FnZVdyaXRlcikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5kaXNwb3NlKSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5vbkNsb3NlKSAmJlxuICAgICAgICAgICAgSXMuZnVuYyhjYW5kaWRhdGUub25FcnJvcikgJiYgSXMuZnVuYyhjYW5kaWRhdGUud3JpdGUpO1xuICAgIH1cbiAgICBNZXNzYWdlV3JpdGVyLmlzID0gaXM7XG59KShNZXNzYWdlV3JpdGVyIHx8IChleHBvcnRzLk1lc3NhZ2VXcml0ZXIgPSBNZXNzYWdlV3JpdGVyID0ge30pKTtcbmNsYXNzIEFic3RyYWN0TWVzc2FnZVdyaXRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXJyb3JFbWl0dGVyID0gbmV3IGV2ZW50c18xLkVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5jbG9zZUVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmVycm9yRW1pdHRlci5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuY2xvc2VFbWl0dGVyLmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgZ2V0IG9uRXJyb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yRW1pdHRlci5ldmVudDtcbiAgICB9XG4gICAgZmlyZUVycm9yKGVycm9yLCBtZXNzYWdlLCBjb3VudCkge1xuICAgICAgICB0aGlzLmVycm9yRW1pdHRlci5maXJlKFt0aGlzLmFzRXJyb3IoZXJyb3IpLCBtZXNzYWdlLCBjb3VudF0pO1xuICAgIH1cbiAgICBnZXQgb25DbG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2VFbWl0dGVyLmV2ZW50O1xuICAgIH1cbiAgICBmaXJlQ2xvc2UoKSB7XG4gICAgICAgIHRoaXMuY2xvc2VFbWl0dGVyLmZpcmUodW5kZWZpbmVkKTtcbiAgICB9XG4gICAgYXNFcnJvcihlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihgV3JpdGVyIHJlY2VpdmVkIGVycm9yLiBSZWFzb246ICR7SXMuc3RyaW5nKGVycm9yLm1lc3NhZ2UpID8gZXJyb3IubWVzc2FnZSA6ICd1bmtub3duJ31gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlV3JpdGVyID0gQWJzdHJhY3RNZXNzYWdlV3JpdGVyO1xudmFyIFJlc29sdmVkTWVzc2FnZVdyaXRlck9wdGlvbnM7XG4oZnVuY3Rpb24gKFJlc29sdmVkTWVzc2FnZVdyaXRlck9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiBmcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4geyBjaGFyc2V0OiBvcHRpb25zID8/ICd1dGYtOCcsIGNvbnRlbnRUeXBlRW5jb2RlcjogKDAsIHJhbF8xLmRlZmF1bHQpKCkuYXBwbGljYXRpb25Kc29uLmVuY29kZXIgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IGNoYXJzZXQ6IG9wdGlvbnMuY2hhcnNldCA/PyAndXRmLTgnLCBjb250ZW50RW5jb2Rlcjogb3B0aW9ucy5jb250ZW50RW5jb2RlciwgY29udGVudFR5cGVFbmNvZGVyOiBvcHRpb25zLmNvbnRlbnRUeXBlRW5jb2RlciA/PyAoMCwgcmFsXzEuZGVmYXVsdCkoKS5hcHBsaWNhdGlvbkpzb24uZW5jb2RlciB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIFJlc29sdmVkTWVzc2FnZVdyaXRlck9wdGlvbnMuZnJvbU9wdGlvbnMgPSBmcm9tT3B0aW9ucztcbn0pKFJlc29sdmVkTWVzc2FnZVdyaXRlck9wdGlvbnMgfHwgKFJlc29sdmVkTWVzc2FnZVdyaXRlck9wdGlvbnMgPSB7fSkpO1xuY2xhc3MgV3JpdGVhYmxlU3RyZWFtTWVzc2FnZVdyaXRlciBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVdyaXRlciB7XG4gICAgY29uc3RydWN0b3Iod3JpdGFibGUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy53cml0YWJsZSA9IHdyaXRhYmxlO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBSZXNvbHZlZE1lc3NhZ2VXcml0ZXJPcHRpb25zLmZyb21PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVycm9yQ291bnQgPSAwO1xuICAgICAgICB0aGlzLndyaXRlU2VtYXBob3JlID0gbmV3IHNlbWFwaG9yZV8xLlNlbWFwaG9yZSgxKTtcbiAgICAgICAgdGhpcy53cml0YWJsZS5vbkVycm9yKChlcnJvcikgPT4gdGhpcy5maXJlRXJyb3IoZXJyb3IpKTtcbiAgICAgICAgdGhpcy53cml0YWJsZS5vbkNsb3NlKCgpID0+IHRoaXMuZmlyZUNsb3NlKCkpO1xuICAgIH1cbiAgICBhc3luYyB3cml0ZShtc2cpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVTZW1hcGhvcmUubG9jayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gdGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlRW5jb2Rlci5lbmNvZGUobXNnLCB0aGlzLm9wdGlvbnMpLnRoZW4oKGJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGVudEVuY29kZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNvbnRlbnRFbmNvZGVyLmVuY29kZShidWZmZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkLnRoZW4oKGJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSBbXTtcbiAgICAgICAgICAgICAgICBoZWFkZXJzLnB1c2goQ29udGVudExlbmd0aCwgYnVmZmVyLmJ5dGVMZW5ndGgudG9TdHJpbmcoKSwgQ1JMRik7XG4gICAgICAgICAgICAgICAgaGVhZGVycy5wdXNoKENSTEYpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvV3JpdGUobXNnLCBoZWFkZXJzLCBidWZmZXIpO1xuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBkb1dyaXRlKG1zZywgaGVhZGVycywgZGF0YSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy53cml0YWJsZS53cml0ZShoZWFkZXJzLmpvaW4oJycpLCAnYXNjaWknKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndyaXRhYmxlLndyaXRlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgbXNnKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlRXJyb3IoZXJyb3IsIG1zZykge1xuICAgICAgICB0aGlzLmVycm9yQ291bnQrKztcbiAgICAgICAgdGhpcy5maXJlRXJyb3IoZXJyb3IsIG1zZywgdGhpcy5lcnJvckNvdW50KTtcbiAgICB9XG4gICAgZW5kKCkge1xuICAgICAgICB0aGlzLndyaXRhYmxlLmVuZCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuV3JpdGVhYmxlU3RyZWFtTWVzc2FnZVdyaXRlciA9IFdyaXRlYWJsZVN0cmVhbU1lc3NhZ2VXcml0ZXI7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDcxNjI6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuTWVzc2FnZSA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTkgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGU4ID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNyA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTYgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGU1ID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNCA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTMgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGUyID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMSA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTAgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGUgPSBleHBvcnRzLlJlcXVlc3RUeXBlOSA9IGV4cG9ydHMuUmVxdWVzdFR5cGU4ID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTcgPSBleHBvcnRzLlJlcXVlc3RUeXBlNiA9IGV4cG9ydHMuUmVxdWVzdFR5cGU1ID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTQgPSBleHBvcnRzLlJlcXVlc3RUeXBlMyA9IGV4cG9ydHMuUmVxdWVzdFR5cGUyID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTEgPSBleHBvcnRzLlJlcXVlc3RUeXBlID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTAgPSBleHBvcnRzLkFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSA9IGV4cG9ydHMuUGFyYW1ldGVyU3RydWN0dXJlcyA9IGV4cG9ydHMuUmVzcG9uc2VFcnJvciA9IGV4cG9ydHMuRXJyb3JDb2RlcyA9IHZvaWQgMDtcbmNvbnN0IGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NjE4KTtcbi8qKlxuICogUHJlZGVmaW5lZCBlcnJvciBjb2Rlcy5cbiAqL1xudmFyIEVycm9yQ29kZXM7XG4oZnVuY3Rpb24gKEVycm9yQ29kZXMpIHtcbiAgICAvLyBEZWZpbmVkIGJ5IEpTT04gUlBDXG4gICAgRXJyb3JDb2Rlcy5QYXJzZUVycm9yID0gLTMyNzAwO1xuICAgIEVycm9yQ29kZXMuSW52YWxpZFJlcXVlc3QgPSAtMzI2MDA7XG4gICAgRXJyb3JDb2Rlcy5NZXRob2ROb3RGb3VuZCA9IC0zMjYwMTtcbiAgICBFcnJvckNvZGVzLkludmFsaWRQYXJhbXMgPSAtMzI2MDI7XG4gICAgRXJyb3JDb2Rlcy5JbnRlcm5hbEVycm9yID0gLTMyNjAzO1xuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIHN0YXJ0IHJhbmdlIG9mIEpTT04gUlBDIHJlc2VydmVkIGVycm9yIGNvZGVzLlxuICAgICAqIEl0IGRvZXNuJ3QgZGVub3RlIGEgcmVhbCBlcnJvciBjb2RlLiBObyBhcHBsaWNhdGlvbiBlcnJvciBjb2RlcyBzaG91bGRcbiAgICAgKiBiZSBkZWZpbmVkIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgcmFuZ2UuIEZvciBiYWNrd2FyZHNcbiAgICAgKiBjb21wYXRpYmlsaXR5IHRoZSBgU2VydmVyTm90SW5pdGlhbGl6ZWRgIGFuZCB0aGUgYFVua25vd25FcnJvckNvZGVgXG4gICAgICogYXJlIGxlZnQgaW4gdGhlIHJhbmdlLlxuICAgICAqXG4gICAgICogQHNpbmNlIDMuMTYuMFxuICAgICovXG4gICAgRXJyb3JDb2Rlcy5qc29ucnBjUmVzZXJ2ZWRFcnJvclJhbmdlU3RhcnQgPSAtMzIwOTk7XG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZSAganNvbnJwY1Jlc2VydmVkRXJyb3JSYW5nZVN0YXJ0ICovXG4gICAgRXJyb3JDb2Rlcy5zZXJ2ZXJFcnJvclN0YXJ0ID0gLTMyMDk5O1xuICAgIC8qKlxuICAgICAqIEFuIGVycm9yIG9jY3VycmVkIHdoZW4gd3JpdGUgYSBtZXNzYWdlIHRvIHRoZSB0cmFuc3BvcnQgbGF5ZXIuXG4gICAgICovXG4gICAgRXJyb3JDb2Rlcy5NZXNzYWdlV3JpdGVFcnJvciA9IC0zMjA5OTtcbiAgICAvKipcbiAgICAgKiBBbiBlcnJvciBvY2N1cnJlZCB3aGVuIHJlYWRpbmcgYSBtZXNzYWdlIGZyb20gdGhlIHRyYW5zcG9ydCBsYXllci5cbiAgICAgKi9cbiAgICBFcnJvckNvZGVzLk1lc3NhZ2VSZWFkRXJyb3IgPSAtMzIwOTg7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbm5lY3Rpb24gZ290IGRpc3Bvc2VkIG9yIGxvc3QgYW5kIGFsbCBwZW5kaW5nIHJlc3BvbnNlcyBnb3RcbiAgICAgKiByZWplY3RlZC5cbiAgICAgKi9cbiAgICBFcnJvckNvZGVzLlBlbmRpbmdSZXNwb25zZVJlamVjdGVkID0gLTMyMDk3O1xuICAgIC8qKlxuICAgICAqIFRoZSBjb25uZWN0aW9uIGlzIGluYWN0aXZlIGFuZCBhIHVzZSBvZiBpdCBmYWlsZWQuXG4gICAgICovXG4gICAgRXJyb3JDb2Rlcy5Db25uZWN0aW9uSW5hY3RpdmUgPSAtMzIwOTY7XG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgYSBzZXJ2ZXIgcmVjZWl2ZWQgYSBub3RpZmljYXRpb24gb3JcbiAgICAgKiByZXF1ZXN0IGJlZm9yZSB0aGUgc2VydmVyIGhhcyByZWNlaXZlZCB0aGUgYGluaXRpYWxpemVgIHJlcXVlc3QuXG4gICAgICovXG4gICAgRXJyb3JDb2Rlcy5TZXJ2ZXJOb3RJbml0aWFsaXplZCA9IC0zMjAwMjtcbiAgICBFcnJvckNvZGVzLlVua25vd25FcnJvckNvZGUgPSAtMzIwMDE7XG4gICAgLyoqXG4gICAgICogVGhpcyBpcyB0aGUgZW5kIHJhbmdlIG9mIEpTT04gUlBDIHJlc2VydmVkIGVycm9yIGNvZGVzLlxuICAgICAqIEl0IGRvZXNuJ3QgZGVub3RlIGEgcmVhbCBlcnJvciBjb2RlLlxuICAgICAqXG4gICAgICogQHNpbmNlIDMuMTYuMFxuICAgICovXG4gICAgRXJyb3JDb2Rlcy5qc29ucnBjUmVzZXJ2ZWRFcnJvclJhbmdlRW5kID0gLTMyMDAwO1xuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2UgIGpzb25ycGNSZXNlcnZlZEVycm9yUmFuZ2VFbmQgKi9cbiAgICBFcnJvckNvZGVzLnNlcnZlckVycm9yRW5kID0gLTMyMDAwO1xufSkoRXJyb3JDb2RlcyB8fCAoZXhwb3J0cy5FcnJvckNvZGVzID0gRXJyb3JDb2RlcyA9IHt9KSk7XG4vKipcbiAqIEFuIGVycm9yIG9iamVjdCByZXR1cm4gaW4gYSByZXNwb25zZSBpbiBjYXNlIGEgcmVxdWVzdFxuICogaGFzIGZhaWxlZC5cbiAqL1xuY2xhc3MgUmVzcG9uc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2RlLCBtZXNzYWdlLCBkYXRhKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmNvZGUgPSBpcy5udW1iZXIoY29kZSkgPyBjb2RlIDogRXJyb3JDb2Rlcy5Vbmtub3duRXJyb3JDb2RlO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgUmVzcG9uc2VFcnJvci5wcm90b3R5cGUpO1xuICAgIH1cbiAgICB0b0pzb24oKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZVxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5kYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5kYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZXhwb3J0cy5SZXNwb25zZUVycm9yID0gUmVzcG9uc2VFcnJvcjtcbmNsYXNzIFBhcmFtZXRlclN0cnVjdHVyZXMge1xuICAgIGNvbnN0cnVjdG9yKGtpbmQpIHtcbiAgICAgICAgdGhpcy5raW5kID0ga2luZDtcbiAgICB9XG4gICAgc3RhdGljIGlzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvIHx8IHZhbHVlID09PSBQYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5TmFtZSB8fCB2YWx1ZSA9PT0gUGFyYW1ldGVyU3RydWN0dXJlcy5ieVBvc2l0aW9uO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMua2luZDtcbiAgICB9XG59XG5leHBvcnRzLlBhcmFtZXRlclN0cnVjdHVyZXMgPSBQYXJhbWV0ZXJTdHJ1Y3R1cmVzO1xuLyoqXG4gKiBUaGUgcGFyYW1ldGVyIHN0cnVjdHVyZSBpcyBhdXRvbWF0aWNhbGx5IGluZmVycmVkIG9uIHRoZSBudW1iZXIgb2YgcGFyYW1ldGVyc1xuICogYW5kIHRoZSBwYXJhbWV0ZXIgdHlwZSBpbiBjYXNlIG9mIGEgc2luZ2xlIHBhcmFtLlxuICovXG5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmF1dG8gPSBuZXcgUGFyYW1ldGVyU3RydWN0dXJlcygnYXV0bycpO1xuLyoqXG4gKiBGb3JjZXMgYGJ5UG9zaXRpb25gIHBhcmFtZXRlciBzdHJ1Y3R1cmUuIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSBoYXZlIGEgc2luZ2xlXG4gKiBwYXJhbWV0ZXIgd2hpY2ggaGFzIGEgbGl0ZXJhbCB0eXBlLlxuICovXG5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5UG9zaXRpb24gPSBuZXcgUGFyYW1ldGVyU3RydWN0dXJlcygnYnlQb3NpdGlvbicpO1xuLyoqXG4gKiBGb3JjZXMgYGJ5TmFtZWAgcGFyYW1ldGVyIHN0cnVjdHVyZS4gVGhpcyBpcyBvbmx5IHVzZWZ1bCB3aGVuIGhhdmluZyBhIHNpbmdsZVxuICogcGFyYW1ldGVyLiBUaGUgbGlicmFyeSB3aWxsIHJlcG9ydCBlcnJvcnMgaWYgdXNlZCB3aXRoIGEgZGlmZmVyZW50IG51bWJlciBvZlxuICogcGFyYW1ldGVycy5cbiAqL1xuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWUgPSBuZXcgUGFyYW1ldGVyU3RydWN0dXJlcygnYnlOYW1lJyk7XG4vKipcbiAqIEFuIGFic3RyYWN0IGltcGxlbWVudGF0aW9uIG9mIGEgTWVzc2FnZVR5cGUuXG4gKi9cbmNsYXNzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kLCBudW1iZXJPZlBhcmFtcykge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgICAgdGhpcy5udW1iZXJPZlBhcmFtcyA9IG51bWJlck9mUGFyYW1zO1xuICAgIH1cbiAgICBnZXQgcGFyYW1ldGVyU3RydWN0dXJlcygpIHtcbiAgICAgICAgcmV0dXJuIFBhcmFtZXRlclN0cnVjdHVyZXMuYXV0bztcbiAgICB9XG59XG5leHBvcnRzLkFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSA9IEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZTtcbi8qKlxuICogQ2xhc3NlcyB0byB0eXBlIHJlcXVlc3QgcmVzcG9uc2UgcGFpcnNcbiAqL1xuY2xhc3MgUmVxdWVzdFR5cGUwIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCAwKTtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVlc3RUeXBlMCA9IFJlcXVlc3RUeXBlMDtcbmNsYXNzIFJlcXVlc3RUeXBlIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QsIF9wYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgMSk7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlclN0cnVjdHVyZXMgPSBfcGFyYW1ldGVyU3RydWN0dXJlcztcbiAgICB9XG4gICAgZ2V0IHBhcmFtZXRlclN0cnVjdHVyZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJhbWV0ZXJTdHJ1Y3R1cmVzO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdFR5cGUgPSBSZXF1ZXN0VHlwZTtcbmNsYXNzIFJlcXVlc3RUeXBlMSBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kLCBfcGFyYW1ldGVyU3RydWN0dXJlcyA9IFBhcmFtZXRlclN0cnVjdHVyZXMuYXV0bykge1xuICAgICAgICBzdXBlcihtZXRob2QsIDEpO1xuICAgICAgICB0aGlzLl9wYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gX3BhcmFtZXRlclN0cnVjdHVyZXM7XG4gICAgfVxuICAgIGdldCBwYXJhbWV0ZXJTdHJ1Y3R1cmVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyYW1ldGVyU3RydWN0dXJlcztcbiAgICB9XG59XG5leHBvcnRzLlJlcXVlc3RUeXBlMSA9IFJlcXVlc3RUeXBlMTtcbmNsYXNzIFJlcXVlc3RUeXBlMiBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgMik7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0VHlwZTIgPSBSZXF1ZXN0VHlwZTI7XG5jbGFzcyBSZXF1ZXN0VHlwZTMgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDMpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdFR5cGUzID0gUmVxdWVzdFR5cGUzO1xuY2xhc3MgUmVxdWVzdFR5cGU0IGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCA0KTtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVlc3RUeXBlNCA9IFJlcXVlc3RUeXBlNDtcbmNsYXNzIFJlcXVlc3RUeXBlNSBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgNSk7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0VHlwZTUgPSBSZXF1ZXN0VHlwZTU7XG5jbGFzcyBSZXF1ZXN0VHlwZTYgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDYpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdFR5cGU2ID0gUmVxdWVzdFR5cGU2O1xuY2xhc3MgUmVxdWVzdFR5cGU3IGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCA3KTtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVlc3RUeXBlNyA9IFJlcXVlc3RUeXBlNztcbmNsYXNzIFJlcXVlc3RUeXBlOCBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgOCk7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0VHlwZTggPSBSZXF1ZXN0VHlwZTg7XG5jbGFzcyBSZXF1ZXN0VHlwZTkgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDkpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdFR5cGU5ID0gUmVxdWVzdFR5cGU5O1xuY2xhc3MgTm90aWZpY2F0aW9uVHlwZSBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kLCBfcGFyYW1ldGVyU3RydWN0dXJlcyA9IFBhcmFtZXRlclN0cnVjdHVyZXMuYXV0bykge1xuICAgICAgICBzdXBlcihtZXRob2QsIDEpO1xuICAgICAgICB0aGlzLl9wYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gX3BhcmFtZXRlclN0cnVjdHVyZXM7XG4gICAgfVxuICAgIGdldCBwYXJhbWV0ZXJTdHJ1Y3R1cmVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyYW1ldGVyU3RydWN0dXJlcztcbiAgICB9XG59XG5leHBvcnRzLk5vdGlmaWNhdGlvblR5cGUgPSBOb3RpZmljYXRpb25UeXBlO1xuY2xhc3MgTm90aWZpY2F0aW9uVHlwZTAgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDApO1xuICAgIH1cbn1cbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTAgPSBOb3RpZmljYXRpb25UeXBlMDtcbmNsYXNzIE5vdGlmaWNhdGlvblR5cGUxIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QsIF9wYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgMSk7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlclN0cnVjdHVyZXMgPSBfcGFyYW1ldGVyU3RydWN0dXJlcztcbiAgICB9XG4gICAgZ2V0IHBhcmFtZXRlclN0cnVjdHVyZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJhbWV0ZXJTdHJ1Y3R1cmVzO1xuICAgIH1cbn1cbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTEgPSBOb3RpZmljYXRpb25UeXBlMTtcbmNsYXNzIE5vdGlmaWNhdGlvblR5cGUyIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCAyKTtcbiAgICB9XG59XG5leHBvcnRzLk5vdGlmaWNhdGlvblR5cGUyID0gTm90aWZpY2F0aW9uVHlwZTI7XG5jbGFzcyBOb3RpZmljYXRpb25UeXBlMyBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgMyk7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMyA9IE5vdGlmaWNhdGlvblR5cGUzO1xuY2xhc3MgTm90aWZpY2F0aW9uVHlwZTQgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDQpO1xuICAgIH1cbn1cbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTQgPSBOb3RpZmljYXRpb25UeXBlNDtcbmNsYXNzIE5vdGlmaWNhdGlvblR5cGU1IGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCA1KTtcbiAgICB9XG59XG5leHBvcnRzLk5vdGlmaWNhdGlvblR5cGU1ID0gTm90aWZpY2F0aW9uVHlwZTU7XG5jbGFzcyBOb3RpZmljYXRpb25UeXBlNiBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgNik7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNiA9IE5vdGlmaWNhdGlvblR5cGU2O1xuY2xhc3MgTm90aWZpY2F0aW9uVHlwZTcgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDcpO1xuICAgIH1cbn1cbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTcgPSBOb3RpZmljYXRpb25UeXBlNztcbmNsYXNzIE5vdGlmaWNhdGlvblR5cGU4IGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCA4KTtcbiAgICB9XG59XG5leHBvcnRzLk5vdGlmaWNhdGlvblR5cGU4ID0gTm90aWZpY2F0aW9uVHlwZTg7XG5jbGFzcyBOb3RpZmljYXRpb25UeXBlOSBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgOSk7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlOSA9IE5vdGlmaWNhdGlvblR5cGU5O1xudmFyIE1lc3NhZ2U7XG4oZnVuY3Rpb24gKE1lc3NhZ2UpIHtcbiAgICAvKipcbiAgICAgKiBUZXN0cyBpZiB0aGUgZ2l2ZW4gbWVzc2FnZSBpcyBhIHJlcXVlc3QgbWVzc2FnZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUmVxdWVzdChtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IG1lc3NhZ2U7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgaXMuc3RyaW5nKGNhbmRpZGF0ZS5tZXRob2QpICYmIChpcy5zdHJpbmcoY2FuZGlkYXRlLmlkKSB8fCBpcy5udW1iZXIoY2FuZGlkYXRlLmlkKSk7XG4gICAgfVxuICAgIE1lc3NhZ2UuaXNSZXF1ZXN0ID0gaXNSZXF1ZXN0O1xuICAgIC8qKlxuICAgICAqIFRlc3RzIGlmIHRoZSBnaXZlbiBtZXNzYWdlIGlzIGEgbm90aWZpY2F0aW9uIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05vdGlmaWNhdGlvbihtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IG1lc3NhZ2U7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgaXMuc3RyaW5nKGNhbmRpZGF0ZS5tZXRob2QpICYmIG1lc3NhZ2UuaWQgPT09IHZvaWQgMDtcbiAgICB9XG4gICAgTWVzc2FnZS5pc05vdGlmaWNhdGlvbiA9IGlzTm90aWZpY2F0aW9uO1xuICAgIC8qKlxuICAgICAqIFRlc3RzIGlmIHRoZSBnaXZlbiBtZXNzYWdlIGlzIGEgcmVzcG9uc2UgbWVzc2FnZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUmVzcG9uc2UobWVzc2FnZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSBtZXNzYWdlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIChjYW5kaWRhdGUucmVzdWx0ICE9PSB2b2lkIDAgfHwgISFjYW5kaWRhdGUuZXJyb3IpICYmIChpcy5zdHJpbmcoY2FuZGlkYXRlLmlkKSB8fCBpcy5udW1iZXIoY2FuZGlkYXRlLmlkKSB8fCBjYW5kaWRhdGUuaWQgPT09IG51bGwpO1xuICAgIH1cbiAgICBNZXNzYWdlLmlzUmVzcG9uc2UgPSBpc1Jlc3BvbnNlO1xufSkoTWVzc2FnZSB8fCAoZXhwb3J0cy5NZXNzYWdlID0gTWVzc2FnZSA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDUwOTE6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmxldCBfcmFsO1xuZnVuY3Rpb24gUkFMKCkge1xuICAgIGlmIChfcmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBydW50aW1lIGFic3RyYWN0aW9uIGxheWVyIGluc3RhbGxlZGApO1xuICAgIH1cbiAgICByZXR1cm4gX3JhbDtcbn1cbihmdW5jdGlvbiAoUkFMKSB7XG4gICAgZnVuY3Rpb24gaW5zdGFsbChyYWwpIHtcbiAgICAgICAgaWYgKHJhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHJ1bnRpbWUgYWJzdHJhY3Rpb24gbGF5ZXIgcHJvdmlkZWRgKTtcbiAgICAgICAgfVxuICAgICAgICBfcmFsID0gcmFsO1xuICAgIH1cbiAgICBSQUwuaW5zdGFsbCA9IGluc3RhbGw7XG59KShSQUwgfHwgKFJBTCA9IHt9KSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFJBTDtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDE4OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLlNlbWFwaG9yZSA9IHZvaWQgMDtcbmNvbnN0IHJhbF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MDkxKTtcbmNsYXNzIFNlbWFwaG9yZSB7XG4gICAgY29uc3RydWN0b3IoY2FwYWNpdHkgPSAxKSB7XG4gICAgICAgIGlmIChjYXBhY2l0eSA8PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhcGFjaXR5IG11c3QgYmUgZ3JlYXRlciB0aGFuIDAnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jYXBhY2l0eSA9IGNhcGFjaXR5O1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSAwO1xuICAgICAgICB0aGlzLl93YWl0aW5nID0gW107XG4gICAgfVxuICAgIGxvY2sodGh1bmspIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3dhaXRpbmcucHVzaCh7IHRodW5rLCByZXNvbHZlLCByZWplY3QgfSk7XG4gICAgICAgICAgICB0aGlzLnJ1bk5leHQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gICAgfVxuICAgIHJ1bk5leHQoKSB7XG4gICAgICAgIGlmICh0aGlzLl93YWl0aW5nLmxlbmd0aCA9PT0gMCB8fCB0aGlzLl9hY3RpdmUgPT09IHRoaXMuX2NhcGFjaXR5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgKDAsIHJhbF8xLmRlZmF1bHQpKCkudGltZXIuc2V0SW1tZWRpYXRlKCgpID0+IHRoaXMuZG9SdW5OZXh0KCkpO1xuICAgIH1cbiAgICBkb1J1bk5leHQoKSB7XG4gICAgICAgIGlmICh0aGlzLl93YWl0aW5nLmxlbmd0aCA9PT0gMCB8fCB0aGlzLl9hY3RpdmUgPT09IHRoaXMuX2NhcGFjaXR5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuX3dhaXRpbmcuc2hpZnQoKTtcbiAgICAgICAgdGhpcy5fYWN0aXZlKys7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUgPiB0aGlzLl9jYXBhY2l0eSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUbyBtYW55IHRodW5rcyBhY3RpdmVgKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV4dC50aHVuaygpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlLS07XG4gICAgICAgICAgICAgICAgICAgIG5leHQucmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucnVuTmV4dCgpO1xuICAgICAgICAgICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlLS07XG4gICAgICAgICAgICAgICAgICAgIG5leHQucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucnVuTmV4dCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlLS07XG4gICAgICAgICAgICAgICAgbmV4dC5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgdGhpcy5ydW5OZXh0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlLS07XG4gICAgICAgICAgICBuZXh0LnJlamVjdChlcnIpO1xuICAgICAgICAgICAgdGhpcy5ydW5OZXh0KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlNlbWFwaG9yZSA9IFNlbWFwaG9yZTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzQ4OTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5TaGFyZWRBcnJheVJlY2VpdmVyU3RyYXRlZ3kgPSBleHBvcnRzLlNoYXJlZEFycmF5U2VuZGVyU3RyYXRlZ3kgPSB2b2lkIDA7XG5jb25zdCBjYW5jZWxsYXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1Nyk7XG52YXIgQ2FuY2VsbGF0aW9uU3RhdGU7XG4oZnVuY3Rpb24gKENhbmNlbGxhdGlvblN0YXRlKSB7XG4gICAgQ2FuY2VsbGF0aW9uU3RhdGUuQ29udGludWUgPSAwO1xuICAgIENhbmNlbGxhdGlvblN0YXRlLkNhbmNlbGxlZCA9IDE7XG59KShDYW5jZWxsYXRpb25TdGF0ZSB8fCAoQ2FuY2VsbGF0aW9uU3RhdGUgPSB7fSkpO1xuY2xhc3MgU2hhcmVkQXJyYXlTZW5kZXJTdHJhdGVneSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgZW5hYmxlQ2FuY2VsbGF0aW9uKHJlcXVlc3QpIHtcbiAgICAgICAgaWYgKHJlcXVlc3QuaWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgU2hhcmVkQXJyYXlCdWZmZXIoNCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgSW50MzJBcnJheShidWZmZXIsIDAsIDEpO1xuICAgICAgICBkYXRhWzBdID0gQ2FuY2VsbGF0aW9uU3RhdGUuQ29udGludWU7XG4gICAgICAgIHRoaXMuYnVmZmVycy5zZXQocmVxdWVzdC5pZCwgYnVmZmVyKTtcbiAgICAgICAgcmVxdWVzdC4kY2FuY2VsbGF0aW9uRGF0YSA9IGJ1ZmZlcjtcbiAgICB9XG4gICAgYXN5bmMgc2VuZENhbmNlbGxhdGlvbihfY29ubiwgaWQpIHtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXJzLmdldChpZCk7XG4gICAgICAgIGlmIChidWZmZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgSW50MzJBcnJheShidWZmZXIsIDAsIDEpO1xuICAgICAgICBBdG9taWNzLnN0b3JlKGRhdGEsIDAsIENhbmNlbGxhdGlvblN0YXRlLkNhbmNlbGxlZCk7XG4gICAgfVxuICAgIGNsZWFudXAoaWQpIHtcbiAgICAgICAgdGhpcy5idWZmZXJzLmRlbGV0ZShpZCk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuYnVmZmVycy5jbGVhcigpO1xuICAgIH1cbn1cbmV4cG9ydHMuU2hhcmVkQXJyYXlTZW5kZXJTdHJhdGVneSA9IFNoYXJlZEFycmF5U2VuZGVyU3RyYXRlZ3k7XG5jbGFzcyBTaGFyZWRBcnJheUJ1ZmZlckNhbmNlbGxhdGlvblRva2VuIHtcbiAgICBjb25zdHJ1Y3RvcihidWZmZXIpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gbmV3IEludDMyQXJyYXkoYnVmZmVyLCAwLCAxKTtcbiAgICB9XG4gICAgZ2V0IGlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKCkge1xuICAgICAgICByZXR1cm4gQXRvbWljcy5sb2FkKHRoaXMuZGF0YSwgMCkgPT09IENhbmNlbGxhdGlvblN0YXRlLkNhbmNlbGxlZDtcbiAgICB9XG4gICAgZ2V0IG9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbmNlbGxhdGlvbiBvdmVyIFNoYXJlZEFycmF5QnVmZmVyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxsYXRpb24gZXZlbnRzYCk7XG4gICAgfVxufVxuY2xhc3MgU2hhcmVkQXJyYXlCdWZmZXJDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoYnVmZmVyKSB7XG4gICAgICAgIHRoaXMudG9rZW4gPSBuZXcgU2hhcmVkQXJyYXlCdWZmZXJDYW5jZWxsYXRpb25Ub2tlbihidWZmZXIpO1xuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgfVxufVxuY2xhc3MgU2hhcmVkQXJyYXlSZWNlaXZlclN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5raW5kID0gJ3JlcXVlc3QnO1xuICAgIH1cbiAgICBjcmVhdGVDYW5jZWxsYXRpb25Ub2tlblNvdXJjZShyZXF1ZXN0KSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHJlcXVlc3QuJGNhbmNlbGxhdGlvbkRhdGE7XG4gICAgICAgIGlmIChidWZmZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBjYW5jZWxsYXRpb25fMS5DYW5jZWxsYXRpb25Ub2tlblNvdXJjZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgU2hhcmVkQXJyYXlCdWZmZXJDYW5jZWxsYXRpb25Ub2tlblNvdXJjZShidWZmZXIpO1xuICAgIH1cbn1cbmV4cG9ydHMuU2hhcmVkQXJyYXlSZWNlaXZlclN0cmF0ZWd5ID0gU2hhcmVkQXJyYXlSZWNlaXZlclN0cmF0ZWd5O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1NTAxOlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5jcmVhdGVQcm90b2NvbENvbm5lY3Rpb24gPSB2b2lkIDA7XG5jb25zdCBicm93c2VyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyMDgpO1xuX19leHBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oOTIwOCksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMzE0NyksIGV4cG9ydHMpO1xuZnVuY3Rpb24gY3JlYXRlUHJvdG9jb2xDb25uZWN0aW9uKHJlYWRlciwgd3JpdGVyLCBsb2dnZXIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKDAsIGJyb3dzZXJfMS5jcmVhdGVNZXNzYWdlQ29ubmVjdGlvbikocmVhZGVyLCB3cml0ZXIsIGxvZ2dlciwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbiA9IGNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzE0Nzpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuTFNQRXJyb3JDb2RlcyA9IGV4cG9ydHMuY3JlYXRlUHJvdG9jb2xDb25uZWN0aW9uID0gdm9pZCAwO1xuX19leHBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oOTExMCksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMjg1MiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oODQzMSksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oMTgxNSksIGV4cG9ydHMpO1xudmFyIGNvbm5lY3Rpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkxKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZVByb3RvY29sQ29ubmVjdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5jcmVhdGVQcm90b2NvbENvbm5lY3Rpb247IH0gfSkpO1xudmFyIExTUEVycm9yQ29kZXM7XG4oZnVuY3Rpb24gKExTUEVycm9yQ29kZXMpIHtcbiAgICAvKipcbiAgICAqIFRoaXMgaXMgdGhlIHN0YXJ0IHJhbmdlIG9mIExTUCByZXNlcnZlZCBlcnJvciBjb2Rlcy5cbiAgICAqIEl0IGRvZXNuJ3QgZGVub3RlIGEgcmVhbCBlcnJvciBjb2RlLlxuICAgICpcbiAgICAqIEBzaW5jZSAzLjE2LjBcbiAgICAqL1xuICAgIExTUEVycm9yQ29kZXMubHNwUmVzZXJ2ZWRFcnJvclJhbmdlU3RhcnQgPSAtMzI4OTk7XG4gICAgLyoqXG4gICAgICogQSByZXF1ZXN0IGZhaWxlZCBidXQgaXQgd2FzIHN5bnRhY3RpY2FsbHkgY29ycmVjdCwgZS5nIHRoZVxuICAgICAqIG1ldGhvZCBuYW1lIHdhcyBrbm93biBhbmQgdGhlIHBhcmFtZXRlcnMgd2VyZSB2YWxpZC4gVGhlIGVycm9yXG4gICAgICogbWVzc2FnZSBzaG91bGQgY29udGFpbiBodW1hbiByZWFkYWJsZSBpbmZvcm1hdGlvbiBhYm91dCB3aHlcbiAgICAgKiB0aGUgcmVxdWVzdCBmYWlsZWQuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMy4xNy4wXG4gICAgICovXG4gICAgTFNQRXJyb3JDb2Rlcy5SZXF1ZXN0RmFpbGVkID0gLTMyODAzO1xuICAgIC8qKlxuICAgICAqIFRoZSBzZXJ2ZXIgY2FuY2VsbGVkIHRoZSByZXF1ZXN0LiBUaGlzIGVycm9yIGNvZGUgc2hvdWxkXG4gICAgICogb25seSBiZSB1c2VkIGZvciByZXF1ZXN0cyB0aGF0IGV4cGxpY2l0bHkgc3VwcG9ydCBiZWluZ1xuICAgICAqIHNlcnZlciBjYW5jZWxsYWJsZS5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAzLjE3LjBcbiAgICAgKi9cbiAgICBMU1BFcnJvckNvZGVzLlNlcnZlckNhbmNlbGxlZCA9IC0zMjgwMjtcbiAgICAvKipcbiAgICAgKiBUaGUgc2VydmVyIGRldGVjdGVkIHRoYXQgdGhlIGNvbnRlbnQgb2YgYSBkb2N1bWVudCBnb3RcbiAgICAgKiBtb2RpZmllZCBvdXRzaWRlIG5vcm1hbCBjb25kaXRpb25zLiBBIHNlcnZlciBzaG91bGRcbiAgICAgKiBOT1Qgc2VuZCB0aGlzIGVycm9yIGNvZGUgaWYgaXQgZGV0ZWN0cyBhIGNvbnRlbnQgY2hhbmdlXG4gICAgICogaW4gaXQgdW5wcm9jZXNzZWQgbWVzc2FnZXMuIFRoZSByZXN1bHQgZXZlbiBjb21wdXRlZFxuICAgICAqIG9uIGFuIG9sZGVyIHN0YXRlIG1pZ2h0IHN0aWxsIGJlIHVzZWZ1bCBmb3IgdGhlIGNsaWVudC5cbiAgICAgKlxuICAgICAqIElmIGEgY2xpZW50IGRlY2lkZXMgdGhhdCBhIHJlc3VsdCBpcyBub3Qgb2YgYW55IHVzZSBhbnltb3JlXG4gICAgICogdGhlIGNsaWVudCBzaG91bGQgY2FuY2VsIHRoZSByZXF1ZXN0LlxuICAgICAqL1xuICAgIExTUEVycm9yQ29kZXMuQ29udGVudE1vZGlmaWVkID0gLTMyODAxO1xuICAgIC8qKlxuICAgICAqIFRoZSBjbGllbnQgaGFzIGNhbmNlbGVkIGEgcmVxdWVzdCBhbmQgYSBzZXJ2ZXIgYXMgZGV0ZWN0ZWRcbiAgICAgKiB0aGUgY2FuY2VsLlxuICAgICAqL1xuICAgIExTUEVycm9yQ29kZXMuUmVxdWVzdENhbmNlbGxlZCA9IC0zMjgwMDtcbiAgICAvKipcbiAgICAqIFRoaXMgaXMgdGhlIGVuZCByYW5nZSBvZiBMU1AgcmVzZXJ2ZWQgZXJyb3IgY29kZXMuXG4gICAgKiBJdCBkb2Vzbid0IGRlbm90ZSBhIHJlYWwgZXJyb3IgY29kZS5cbiAgICAqXG4gICAgKiBAc2luY2UgMy4xNi4wXG4gICAgKi9cbiAgICBMU1BFcnJvckNvZGVzLmxzcFJlc2VydmVkRXJyb3JSYW5nZUVuZCA9IC0zMjgwMDtcbn0pKExTUEVycm9yQ29kZXMgfHwgKGV4cG9ydHMuTFNQRXJyb3JDb2RlcyA9IExTUEVycm9yQ29kZXMgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyOTE6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuY3JlYXRlUHJvdG9jb2xDb25uZWN0aW9uID0gdm9pZCAwO1xuY29uc3QgdnNjb2RlX2pzb25ycGNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTExMCk7XG5mdW5jdGlvbiBjcmVhdGVQcm90b2NvbENvbm5lY3Rpb24oaW5wdXQsIG91dHB1dCwgbG9nZ2VyLCBvcHRpb25zKSB7XG4gICAgaWYgKHZzY29kZV9qc29ucnBjXzEuQ29ubmVjdGlvblN0cmF0ZWd5LmlzKG9wdGlvbnMpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7IGNvbm5lY3Rpb25TdHJhdGVneTogb3B0aW9ucyB9O1xuICAgIH1cbiAgICByZXR1cm4gKDAsIHZzY29kZV9qc29ucnBjXzEuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24pKGlucHV0LCBvdXRwdXQsIGxvZ2dlciwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbiA9IGNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODQzMTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUgPSBleHBvcnRzLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZTAgPSBleHBvcnRzLlByb3RvY29sUmVxdWVzdFR5cGUgPSBleHBvcnRzLlByb3RvY29sUmVxdWVzdFR5cGUwID0gZXhwb3J0cy5SZWdpc3RyYXRpb25UeXBlID0gZXhwb3J0cy5NZXNzYWdlRGlyZWN0aW9uID0gdm9pZCAwO1xuY29uc3QgdnNjb2RlX2pzb25ycGNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTExMCk7XG52YXIgTWVzc2FnZURpcmVjdGlvbjtcbihmdW5jdGlvbiAoTWVzc2FnZURpcmVjdGlvbikge1xuICAgIE1lc3NhZ2VEaXJlY3Rpb25bXCJjbGllbnRUb1NlcnZlclwiXSA9IFwiY2xpZW50VG9TZXJ2ZXJcIjtcbiAgICBNZXNzYWdlRGlyZWN0aW9uW1wic2VydmVyVG9DbGllbnRcIl0gPSBcInNlcnZlclRvQ2xpZW50XCI7XG4gICAgTWVzc2FnZURpcmVjdGlvbltcImJvdGhcIl0gPSBcImJvdGhcIjtcbn0pKE1lc3NhZ2VEaXJlY3Rpb24gfHwgKGV4cG9ydHMuTWVzc2FnZURpcmVjdGlvbiA9IE1lc3NhZ2VEaXJlY3Rpb24gPSB7fSkpO1xuY2xhc3MgUmVnaXN0cmF0aW9uVHlwZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVnaXN0cmF0aW9uVHlwZSA9IFJlZ2lzdHJhdGlvblR5cGU7XG5jbGFzcyBQcm90b2NvbFJlcXVlc3RUeXBlMCBleHRlbmRzIHZzY29kZV9qc29ucnBjXzEuUmVxdWVzdFR5cGUwIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kKTtcbiAgICB9XG59XG5leHBvcnRzLlByb3RvY29sUmVxdWVzdFR5cGUwID0gUHJvdG9jb2xSZXF1ZXN0VHlwZTA7XG5jbGFzcyBQcm90b2NvbFJlcXVlc3RUeXBlIGV4dGVuZHMgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgdnNjb2RlX2pzb25ycGNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5TmFtZSk7XG4gICAgfVxufVxuZXhwb3J0cy5Qcm90b2NvbFJlcXVlc3RUeXBlID0gUHJvdG9jb2xSZXF1ZXN0VHlwZTtcbmNsYXNzIFByb3RvY29sTm90aWZpY2F0aW9uVHlwZTAgZXh0ZW5kcyB2c2NvZGVfanNvbnJwY18xLk5vdGlmaWNhdGlvblR5cGUwIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kKTtcbiAgICB9XG59XG5leHBvcnRzLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZTAgPSBQcm90b2NvbE5vdGlmaWNhdGlvblR5cGUwO1xuY2xhc3MgUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlIGV4dGVuZHMgdnNjb2RlX2pzb25ycGNfMS5Ob3RpZmljYXRpb25UeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCB2c2NvZGVfanNvbnJwY18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYnlOYW1lKTtcbiAgICB9XG59XG5leHBvcnRzLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZSA9IFByb3RvY29sTm90aWZpY2F0aW9uVHlwZTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzYwMjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIFR5cGVGb3gsIE1pY3Jvc29mdCBhbmQgb3RoZXJzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkNhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdCA9IGV4cG9ydHMuQ2FsbEhpZXJhcmNoeUluY29taW5nQ2FsbHNSZXF1ZXN0ID0gZXhwb3J0cy5DYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc3VsdCBhIGBDYWxsSGllcmFyY2h5SXRlbWAgaW4gYSBkb2N1bWVudCBhdCBhIGdpdmVuIHBvc2l0aW9uLlxuICogQ2FuIGJlIHVzZWQgYXMgYW4gaW5wdXQgdG8gYW4gaW5jb21pbmcgb3Igb3V0Z29pbmcgY2FsbCBoaWVyYXJjaHkuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgQ2FsbEhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0O1xuKGZ1bmN0aW9uIChDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QpIHtcbiAgICBDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9wcmVwYXJlQ2FsbEhpZXJhcmNoeSc7XG4gICAgQ2FsbEhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgQ2FsbEhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKENhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdC5tZXRob2QpO1xufSkoQ2FsbEhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0IHx8IChleHBvcnRzLkNhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCA9IENhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byByZXNvbHZlIHRoZSBpbmNvbWluZyBjYWxscyBmb3IgYSBnaXZlbiBgQ2FsbEhpZXJhcmNoeUl0ZW1gLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIENhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdDtcbihmdW5jdGlvbiAoQ2FsbEhpZXJhcmNoeUluY29taW5nQ2FsbHNSZXF1ZXN0KSB7XG4gICAgQ2FsbEhpZXJhcmNoeUluY29taW5nQ2FsbHNSZXF1ZXN0Lm1ldGhvZCA9ICdjYWxsSGllcmFyY2h5L2luY29taW5nQ2FsbHMnO1xuICAgIENhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIENhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShDYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3QubWV0aG9kKTtcbn0pKENhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdCB8fCAoZXhwb3J0cy5DYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3QgPSBDYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSB0aGUgb3V0Z29pbmcgY2FsbHMgZm9yIGEgZ2l2ZW4gYENhbGxIaWVyYXJjaHlJdGVtYC5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBDYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3Q7XG4oZnVuY3Rpb24gKENhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdCkge1xuICAgIENhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdC5tZXRob2QgPSAnY2FsbEhpZXJhcmNoeS9vdXRnb2luZ0NhbGxzJztcbiAgICBDYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ2FsbEhpZXJhcmNoeU91dGdvaW5nQ2FsbHNSZXF1ZXN0Lm1ldGhvZCk7XG59KShDYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3QgfHwgKGV4cG9ydHMuQ2FsbEhpZXJhcmNoeU91dGdvaW5nQ2FsbHNSZXF1ZXN0ID0gQ2FsbEhpZXJhcmNoeU91dGdvaW5nQ2FsbHNSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzc0Nzpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5Db2xvclByZXNlbnRhdGlvblJlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50Q29sb3JSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBsaXN0IGFsbCBjb2xvciBzeW1ib2xzIGZvdW5kIGluIGEgZ2l2ZW4gdGV4dCBkb2N1bWVudC4gVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIERvY3VtZW50Q29sb3JQYXJhbXN9IHRoZVxuICogcmVzcG9uc2UgaXMgb2YgdHlwZSB7QGxpbmsgQ29sb3JJbmZvcm1hdGlvbiBDb2xvckluZm9ybWF0aW9uW119IG9yIGEgVGhlbmFibGVcbiAqIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIERvY3VtZW50Q29sb3JSZXF1ZXN0O1xuKGZ1bmN0aW9uIChEb2N1bWVudENvbG9yUmVxdWVzdCkge1xuICAgIERvY3VtZW50Q29sb3JSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRDb2xvcic7XG4gICAgRG9jdW1lbnRDb2xvclJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEb2N1bWVudENvbG9yUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShEb2N1bWVudENvbG9yUmVxdWVzdC5tZXRob2QpO1xufSkoRG9jdW1lbnRDb2xvclJlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRDb2xvclJlcXVlc3QgPSBEb2N1bWVudENvbG9yUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBsaXN0IGFsbCBwcmVzZW50YXRpb24gZm9yIGEgY29sb3IuIFRoZSByZXF1ZXN0J3NcbiAqIHBhcmFtZXRlciBpcyBvZiB0eXBlIHtAbGluayBDb2xvclByZXNlbnRhdGlvblBhcmFtc30gdGhlXG4gKiByZXNwb25zZSBpcyBvZiB0eXBlIHtAbGluayBDb2xvckluZm9ybWF0aW9uIENvbG9ySW5mb3JtYXRpb25bXX0gb3IgYSBUaGVuYWJsZVxuICogdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChDb2xvclByZXNlbnRhdGlvblJlcXVlc3QpIHtcbiAgICBDb2xvclByZXNlbnRhdGlvblJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9jb2xvclByZXNlbnRhdGlvbic7XG4gICAgQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKENvbG9yUHJlc2VudGF0aW9uUmVxdWVzdC5tZXRob2QpO1xufSkoQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLkNvbG9yUHJlc2VudGF0aW9uUmVxdWVzdCA9IENvbG9yUHJlc2VudGF0aW9uUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDc2Mzk6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuQ29uZmlndXJhdGlvblJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8vLS0tLSBHZXQgQ29uZmlndXJhdGlvbiByZXF1ZXN0IC0tLS1cbi8qKlxuICogVGhlICd3b3Jrc3BhY2UvY29uZmlndXJhdGlvbicgcmVxdWVzdCBpcyBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IHRvIGZldGNoIGEgY2VydGFpblxuICogY29uZmlndXJhdGlvbiBzZXR0aW5nLlxuICpcbiAqIFRoaXMgcHVsbCBtb2RlbCByZXBsYWNlcyB0aGUgb2xkIHB1c2ggbW9kZWwgd2VyZSB0aGUgY2xpZW50IHNpZ25hbGVkIGNvbmZpZ3VyYXRpb24gY2hhbmdlIHZpYSBhblxuICogZXZlbnQuIElmIHRoZSBzZXJ2ZXIgc3RpbGwgbmVlZHMgdG8gcmVhY3QgdG8gY29uZmlndXJhdGlvbiBjaGFuZ2VzIChzaW5jZSB0aGUgc2VydmVyIGNhY2hlcyB0aGVcbiAqIHJlc3VsdCBvZiBgd29ya3NwYWNlL2NvbmZpZ3VyYXRpb25gIHJlcXVlc3RzKSB0aGUgc2VydmVyIHNob3VsZCByZWdpc3RlciBmb3IgYW4gZW1wdHkgY29uZmlndXJhdGlvblxuICogY2hhbmdlIGV2ZW50IGFuZCBlbXB0eSB0aGUgY2FjaGUgaWYgc3VjaCBhbiBldmVudCBpcyByZWNlaXZlZC5cbiAqL1xudmFyIENvbmZpZ3VyYXRpb25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChDb25maWd1cmF0aW9uUmVxdWVzdCkge1xuICAgIENvbmZpZ3VyYXRpb25SZXF1ZXN0Lm1ldGhvZCA9ICd3b3Jrc3BhY2UvY29uZmlndXJhdGlvbic7XG4gICAgQ29uZmlndXJhdGlvblJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBDb25maWd1cmF0aW9uUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShDb25maWd1cmF0aW9uUmVxdWVzdC5tZXRob2QpO1xufSkoQ29uZmlndXJhdGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuQ29uZmlndXJhdGlvblJlcXVlc3QgPSBDb25maWd1cmF0aW9uUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDU1ODE6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuRGVjbGFyYXRpb25SZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vLyBAdHMtaWdub3JlOiB0byBhdm9pZCBpbmxpbmluZyBMb2NhdGlvbkxpbmsgYXMgZHluYW1pYyBpbXBvcnRcbmxldCBfX25vRHluYW1pY0ltcG9ydDtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIHR5cGUgZGVmaW5pdGlvbiBsb2NhdGlvbnMgb2YgYSBzeW1ib2wgYXQgYSBnaXZlbiB0ZXh0XG4gKiBkb2N1bWVudCBwb3NpdGlvbi4gVGhlIHJlcXVlc3QncyBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXN9XG4gKiB0aGUgcmVzcG9uc2UgaXMgb2YgdHlwZSB7QGxpbmsgRGVjbGFyYXRpb259IG9yIGEgdHlwZWQgYXJyYXkgb2Yge0BsaW5rIERlY2xhcmF0aW9uTGlua31cbiAqIG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgRGVjbGFyYXRpb25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChEZWNsYXJhdGlvblJlcXVlc3QpIHtcbiAgICBEZWNsYXJhdGlvblJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9kZWNsYXJhdGlvbic7XG4gICAgRGVjbGFyYXRpb25SZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGVjbGFyYXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERlY2xhcmF0aW9uUmVxdWVzdC5tZXRob2QpO1xufSkoRGVjbGFyYXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLkRlY2xhcmF0aW9uUmVxdWVzdCA9IERlY2xhcmF0aW9uUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE0OTQ6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuRGlhZ25vc3RpY1JlZnJlc2hSZXF1ZXN0ID0gZXhwb3J0cy5Xb3Jrc3BhY2VEaWFnbm9zdGljUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnREaWFnbm9zdGljUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnREaWFnbm9zdGljUmVwb3J0S2luZCA9IGV4cG9ydHMuRGlhZ25vc3RpY1NlcnZlckNhbmNlbGxhdGlvbkRhdGEgPSB2b2lkIDA7XG5jb25zdCB2c2NvZGVfanNvbnJwY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MTEwKTtcbmNvbnN0IElzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NjMzKTtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBEaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YTtcbihmdW5jdGlvbiAoRGlhZ25vc3RpY1NlcnZlckNhbmNlbGxhdGlvbkRhdGEpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5ib29sZWFuKGNhbmRpZGF0ZS5yZXRyaWdnZXJSZXF1ZXN0KTtcbiAgICB9XG4gICAgRGlhZ25vc3RpY1NlcnZlckNhbmNlbGxhdGlvbkRhdGEuaXMgPSBpcztcbn0pKERpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhIHx8IChleHBvcnRzLkRpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhID0gRGlhZ25vc3RpY1NlcnZlckNhbmNlbGxhdGlvbkRhdGEgPSB7fSkpO1xuLyoqXG4gKiBUaGUgZG9jdW1lbnQgZGlhZ25vc3RpYyByZXBvcnQga2luZHMuXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgRG9jdW1lbnREaWFnbm9zdGljUmVwb3J0S2luZDtcbihmdW5jdGlvbiAoRG9jdW1lbnREaWFnbm9zdGljUmVwb3J0S2luZCkge1xuICAgIC8qKlxuICAgICAqIEEgZGlhZ25vc3RpYyByZXBvcnQgd2l0aCBhIGZ1bGxcbiAgICAgKiBzZXQgb2YgcHJvYmxlbXMuXG4gICAgICovXG4gICAgRG9jdW1lbnREaWFnbm9zdGljUmVwb3J0S2luZC5GdWxsID0gJ2Z1bGwnO1xuICAgIC8qKlxuICAgICAqIEEgcmVwb3J0IGluZGljYXRpbmcgdGhhdCB0aGUgbGFzdFxuICAgICAqIHJldHVybmVkIHJlcG9ydCBpcyBzdGlsbCBhY2N1cmF0ZS5cbiAgICAgKi9cbiAgICBEb2N1bWVudERpYWdub3N0aWNSZXBvcnRLaW5kLlVuY2hhbmdlZCA9ICd1bmNoYW5nZWQnO1xufSkoRG9jdW1lbnREaWFnbm9zdGljUmVwb3J0S2luZCB8fCAoZXhwb3J0cy5Eb2N1bWVudERpYWdub3N0aWNSZXBvcnRLaW5kID0gRG9jdW1lbnREaWFnbm9zdGljUmVwb3J0S2luZCA9IHt9KSk7XG4vKipcbiAqIFRoZSBkb2N1bWVudCBkaWFnbm9zdGljIHJlcXVlc3QgZGVmaW5pdGlvbi5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0KSB7XG4gICAgRG9jdW1lbnREaWFnbm9zdGljUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2RpYWdub3N0aWMnO1xuICAgIERvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3QubWV0aG9kKTtcbiAgICBEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0LnBhcnRpYWxSZXN1bHQgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5Qcm9ncmVzc1R5cGUoKTtcbn0pKERvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnREaWFnbm9zdGljUmVxdWVzdCA9IERvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBUaGUgd29ya3NwYWNlIGRpYWdub3N0aWMgcmVxdWVzdCBkZWZpbml0aW9uLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIFdvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChXb3Jrc3BhY2VEaWFnbm9zdGljUmVxdWVzdCkge1xuICAgIFdvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0Lm1ldGhvZCA9ICd3b3Jrc3BhY2UvZGlhZ25vc3RpYyc7XG4gICAgV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBXb3Jrc3BhY2VEaWFnbm9zdGljUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShXb3Jrc3BhY2VEaWFnbm9zdGljUmVxdWVzdC5tZXRob2QpO1xuICAgIFdvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0LnBhcnRpYWxSZXN1bHQgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5Qcm9ncmVzc1R5cGUoKTtcbn0pKFdvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0IHx8IChleHBvcnRzLldvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0ID0gV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBUaGUgZGlhZ25vc3RpYyByZWZyZXNoIHJlcXVlc3QgZGVmaW5pdGlvbi5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBEaWFnbm9zdGljUmVmcmVzaFJlcXVlc3Q7XG4oZnVuY3Rpb24gKERpYWdub3N0aWNSZWZyZXNoUmVxdWVzdCkge1xuICAgIERpYWdub3N0aWNSZWZyZXNoUmVxdWVzdC5tZXRob2QgPSBgd29ya3NwYWNlL2RpYWdub3N0aWMvcmVmcmVzaGA7XG4gICAgRGlhZ25vc3RpY1JlZnJlc2hSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgRGlhZ25vc3RpY1JlZnJlc2hSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlMChEaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QubWV0aG9kKTtcbn0pKERpYWdub3N0aWNSZWZyZXNoUmVxdWVzdCB8fCAoZXhwb3J0cy5EaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QgPSBEaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0NzgxOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLldpbGxEZWxldGVGaWxlc1JlcXVlc3QgPSBleHBvcnRzLkRpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV2lsbFJlbmFtZUZpbGVzUmVxdWVzdCA9IGV4cG9ydHMuRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb24gPSBleHBvcnRzLldpbGxDcmVhdGVGaWxlc1JlcXVlc3QgPSBleHBvcnRzLkZpbGVPcGVyYXRpb25QYXR0ZXJuS2luZCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBBIHBhdHRlcm4ga2luZCBkZXNjcmliaW5nIGlmIGEgZ2xvYiBwYXR0ZXJuIG1hdGNoZXMgYSBmaWxlIGEgZm9sZGVyIG9yXG4gKiBib3RoLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIEZpbGVPcGVyYXRpb25QYXR0ZXJuS2luZDtcbihmdW5jdGlvbiAoRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHBhdHRlcm4gbWF0Y2hlcyBhIGZpbGUgb25seS5cbiAgICAgKi9cbiAgICBGaWxlT3BlcmF0aW9uUGF0dGVybktpbmQuZmlsZSA9ICdmaWxlJztcbiAgICAvKipcbiAgICAgKiBUaGUgcGF0dGVybiBtYXRjaGVzIGEgZm9sZGVyIG9ubHkuXG4gICAgICovXG4gICAgRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kLmZvbGRlciA9ICdmb2xkZXInO1xufSkoRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kIHx8IChleHBvcnRzLkZpbGVPcGVyYXRpb25QYXR0ZXJuS2luZCA9IEZpbGVPcGVyYXRpb25QYXR0ZXJuS2luZCA9IHt9KSk7XG4vKipcbiAqIFRoZSB3aWxsIGNyZWF0ZSBmaWxlcyByZXF1ZXN0IGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgYmVmb3JlIGZpbGVzIGFyZSBhY3R1YWxseVxuICogY3JlYXRlZCBhcyBsb25nIGFzIHRoZSBjcmVhdGlvbiBpcyB0cmlnZ2VyZWQgZnJvbSB3aXRoaW4gdGhlIGNsaWVudC5cbiAqXG4gKiBUaGUgcmVxdWVzdCBjYW4gcmV0dXJuIGEgYFdvcmtzcGFjZUVkaXRgIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB3b3Jrc3BhY2UgYmVmb3JlIHRoZVxuICogZmlsZXMgYXJlIGNyZWF0ZWQuIEhlbmNlIHRoZSBgV29ya3NwYWNlRWRpdGAgY2FuIG5vdCBtYW5pcHVsYXRlIHRoZSBjb250ZW50IG9mIHRoZSBmaWxlXG4gKiB0byBiZSBjcmVhdGVkLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIFdpbGxDcmVhdGVGaWxlc1JlcXVlc3Q7XG4oZnVuY3Rpb24gKFdpbGxDcmVhdGVGaWxlc1JlcXVlc3QpIHtcbiAgICBXaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0Lm1ldGhvZCA9ICd3b3Jrc3BhY2Uvd2lsbENyZWF0ZUZpbGVzJztcbiAgICBXaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgV2lsbENyZWF0ZUZpbGVzUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShXaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0Lm1ldGhvZCk7XG59KShXaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0IHx8IChleHBvcnRzLldpbGxDcmVhdGVGaWxlc1JlcXVlc3QgPSBXaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogVGhlIGRpZCBjcmVhdGUgZmlsZXMgbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgd2hlblxuICogZmlsZXMgd2VyZSBjcmVhdGVkIGZyb20gd2l0aGluIHRoZSBjbGllbnQuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uKSB7XG4gICAgRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb24ubWV0aG9kID0gJ3dvcmtzcGFjZS9kaWRDcmVhdGVGaWxlcyc7XG4gICAgRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShEaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5EaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvbiA9IERpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIHdpbGwgcmVuYW1lIGZpbGVzIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciBiZWZvcmUgZmlsZXMgYXJlIGFjdHVhbGx5XG4gKiByZW5hbWVkIGFzIGxvbmcgYXMgdGhlIHJlbmFtZSBpcyB0cmlnZ2VyZWQgZnJvbSB3aXRoaW4gdGhlIGNsaWVudC5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0KSB7XG4gICAgV2lsbFJlbmFtZUZpbGVzUmVxdWVzdC5tZXRob2QgPSAnd29ya3NwYWNlL3dpbGxSZW5hbWVGaWxlcyc7XG4gICAgV2lsbFJlbmFtZUZpbGVzUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFdpbGxSZW5hbWVGaWxlc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoV2lsbFJlbmFtZUZpbGVzUmVxdWVzdC5tZXRob2QpO1xufSkoV2lsbFJlbmFtZUZpbGVzUmVxdWVzdCB8fCAoZXhwb3J0cy5XaWxsUmVuYW1lRmlsZXNSZXF1ZXN0ID0gV2lsbFJlbmFtZUZpbGVzUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBkaWQgcmVuYW1lIGZpbGVzIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIHdoZW5cbiAqIGZpbGVzIHdlcmUgcmVuYW1lZCBmcm9tIHdpdGhpbiB0aGUgY2xpZW50LlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIERpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChEaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvbikge1xuICAgIERpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uLm1ldGhvZCA9ICd3b3Jrc3BhY2UvZGlkUmVuYW1lRmlsZXMnO1xuICAgIERpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24gPSBEaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSB3aWxsIGRlbGV0ZSBmaWxlcyByZXF1ZXN0IGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgYmVmb3JlIGZpbGVzIGFyZSBhY3R1YWxseVxuICogZGVsZXRlZCBhcyBsb25nIGFzIHRoZSBkZWxldGlvbiBpcyB0cmlnZ2VyZWQgZnJvbSB3aXRoaW4gdGhlIGNsaWVudC5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBEaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb24pIHtcbiAgICBEaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbi5tZXRob2QgPSAnd29ya3NwYWNlL2RpZERlbGV0ZUZpbGVzJztcbiAgICBEaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKERpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uID0gRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgZGlkIGRlbGV0ZSBmaWxlcyBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB3aGVuXG4gKiBmaWxlcyB3ZXJlIGRlbGV0ZWQgZnJvbSB3aXRoaW4gdGhlIGNsaWVudC5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBXaWxsRGVsZXRlRmlsZXNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChXaWxsRGVsZXRlRmlsZXNSZXF1ZXN0KSB7XG4gICAgV2lsbERlbGV0ZUZpbGVzUmVxdWVzdC5tZXRob2QgPSAnd29ya3NwYWNlL3dpbGxEZWxldGVGaWxlcyc7XG4gICAgV2lsbERlbGV0ZUZpbGVzUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFdpbGxEZWxldGVGaWxlc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoV2lsbERlbGV0ZUZpbGVzUmVxdWVzdC5tZXRob2QpO1xufSkoV2lsbERlbGV0ZUZpbGVzUmVxdWVzdCB8fCAoZXhwb3J0cy5XaWxsRGVsZXRlRmlsZXNSZXF1ZXN0ID0gV2lsbERlbGV0ZUZpbGVzUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDEyMDM6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5Gb2xkaW5nUmFuZ2VSZWZyZXNoUmVxdWVzdCA9IGV4cG9ydHMuRm9sZGluZ1JhbmdlUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcHJvdmlkZSBmb2xkaW5nIHJhbmdlcyBpbiBhIGRvY3VtZW50LiBUaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgRm9sZGluZ1JhbmdlUGFyYW1zfSwgdGhlXG4gKiByZXNwb25zZSBpcyBvZiB0eXBlIHtAbGluayBGb2xkaW5nUmFuZ2VMaXN0fSBvciBhIFRoZW5hYmxlXG4gKiB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBGb2xkaW5nUmFuZ2VSZXF1ZXN0O1xuKGZ1bmN0aW9uIChGb2xkaW5nUmFuZ2VSZXF1ZXN0KSB7XG4gICAgRm9sZGluZ1JhbmdlUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2ZvbGRpbmdSYW5nZSc7XG4gICAgRm9sZGluZ1JhbmdlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIEZvbGRpbmdSYW5nZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoRm9sZGluZ1JhbmdlUmVxdWVzdC5tZXRob2QpO1xufSkoRm9sZGluZ1JhbmdlUmVxdWVzdCB8fCAoZXhwb3J0cy5Gb2xkaW5nUmFuZ2VSZXF1ZXN0ID0gRm9sZGluZ1JhbmdlUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEBzaW5jZSAzLjE4LjBcbiAqIEBwcm9wb3NlZFxuICovXG52YXIgRm9sZGluZ1JhbmdlUmVmcmVzaFJlcXVlc3Q7XG4oZnVuY3Rpb24gKEZvbGRpbmdSYW5nZVJlZnJlc2hSZXF1ZXN0KSB7XG4gICAgRm9sZGluZ1JhbmdlUmVmcmVzaFJlcXVlc3QubWV0aG9kID0gYHdvcmtzcGFjZS9mb2xkaW5nUmFuZ2UvcmVmcmVzaGA7XG4gICAgRm9sZGluZ1JhbmdlUmVmcmVzaFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBGb2xkaW5nUmFuZ2VSZWZyZXNoUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZTAoRm9sZGluZ1JhbmdlUmVmcmVzaFJlcXVlc3QubWV0aG9kKTtcbn0pKEZvbGRpbmdSYW5nZVJlZnJlc2hSZXF1ZXN0IHx8IChleHBvcnRzLkZvbGRpbmdSYW5nZVJlZnJlc2hSZXF1ZXN0ID0gRm9sZGluZ1JhbmdlUmVmcmVzaFJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3Mjg3OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkltcGxlbWVudGF0aW9uUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLy8gQHRzLWlnbm9yZTogdG8gYXZvaWQgaW5saW5pbmcgTG9jYXRpb25MaW5rIGFzIGR5bmFtaWMgaW1wb3J0XG5sZXQgX19ub0R5bmFtaWNJbXBvcnQ7XG4vKipcbiAqIEEgcmVxdWVzdCB0byByZXNvbHZlIHRoZSBpbXBsZW1lbnRhdGlvbiBsb2NhdGlvbnMgb2YgYSBzeW1ib2wgYXQgYSBnaXZlbiB0ZXh0XG4gKiBkb2N1bWVudCBwb3NpdGlvbi4gVGhlIHJlcXVlc3QncyBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXN9XG4gKiB0aGUgcmVzcG9uc2UgaXMgb2YgdHlwZSB7QGxpbmsgRGVmaW5pdGlvbn0gb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBJbXBsZW1lbnRhdGlvblJlcXVlc3Q7XG4oZnVuY3Rpb24gKEltcGxlbWVudGF0aW9uUmVxdWVzdCkge1xuICAgIEltcGxlbWVudGF0aW9uUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2ltcGxlbWVudGF0aW9uJztcbiAgICBJbXBsZW1lbnRhdGlvblJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBJbXBsZW1lbnRhdGlvblJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoSW1wbGVtZW50YXRpb25SZXF1ZXN0Lm1ldGhvZCk7XG59KShJbXBsZW1lbnRhdGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuSW1wbGVtZW50YXRpb25SZXF1ZXN0ID0gSW1wbGVtZW50YXRpb25SZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTM4Mzpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLklubGF5SGludFJlZnJlc2hSZXF1ZXN0ID0gZXhwb3J0cy5JbmxheUhpbnRSZXNvbHZlUmVxdWVzdCA9IGV4cG9ydHMuSW5sYXlIaW50UmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcHJvdmlkZSBpbmxheSBoaW50cyBpbiBhIGRvY3VtZW50LiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZlxuICogdHlwZSB7QGxpbmsgSW5sYXlIaW50c1BhcmFtc30sIHRoZSByZXNwb25zZSBpcyBvZiB0eXBlXG4gKiB7QGxpbmsgSW5sYXlIaW50IElubGF5SGludFtdfSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxheUhpbnRSZXF1ZXN0O1xuKGZ1bmN0aW9uIChJbmxheUhpbnRSZXF1ZXN0KSB7XG4gICAgSW5sYXlIaW50UmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2lubGF5SGludCc7XG4gICAgSW5sYXlIaW50UmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIElubGF5SGludFJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoSW5sYXlIaW50UmVxdWVzdC5tZXRob2QpO1xufSkoSW5sYXlIaW50UmVxdWVzdCB8fCAoZXhwb3J0cy5JbmxheUhpbnRSZXF1ZXN0ID0gSW5sYXlIaW50UmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byByZXNvbHZlIGFkZGl0aW9uYWwgcHJvcGVydGllcyBmb3IgYW4gaW5sYXkgaGludC5cbiAqIFRoZSByZXF1ZXN0J3MgcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIElubGF5SGludH0sIHRoZSByZXNwb25zZSBpc1xuICogb2YgdHlwZSB7QGxpbmsgSW5sYXlIaW50fSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxheUhpbnRSZXNvbHZlUmVxdWVzdDtcbihmdW5jdGlvbiAoSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QpIHtcbiAgICBJbmxheUhpbnRSZXNvbHZlUmVxdWVzdC5tZXRob2QgPSAnaW5sYXlIaW50L3Jlc29sdmUnO1xuICAgIElubGF5SGludFJlc29sdmVSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QubWV0aG9kKTtcbn0pKElubGF5SGludFJlc29sdmVSZXF1ZXN0IHx8IChleHBvcnRzLklubGF5SGludFJlc29sdmVSZXF1ZXN0ID0gSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxheUhpbnRSZWZyZXNoUmVxdWVzdDtcbihmdW5jdGlvbiAoSW5sYXlIaW50UmVmcmVzaFJlcXVlc3QpIHtcbiAgICBJbmxheUhpbnRSZWZyZXNoUmVxdWVzdC5tZXRob2QgPSBgd29ya3NwYWNlL2lubGF5SGludC9yZWZyZXNoYDtcbiAgICBJbmxheUhpbnRSZWZyZXNoUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIElubGF5SGludFJlZnJlc2hSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlMChJbmxheUhpbnRSZWZyZXNoUmVxdWVzdC5tZXRob2QpO1xufSkoSW5sYXlIaW50UmVmcmVzaFJlcXVlc3QgfHwgKGV4cG9ydHMuSW5sYXlIaW50UmVmcmVzaFJlcXVlc3QgPSBJbmxheUhpbnRSZWZyZXNoUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDIzMjI6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5JbmxpbmVDb21wbGV0aW9uUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcHJvdmlkZSBpbmxpbmUgY29tcGxldGlvbnMgaW4gYSBkb2N1bWVudC4gVGhlIHJlcXVlc3QncyBwYXJhbWV0ZXIgaXMgb2ZcbiAqIHR5cGUge0BsaW5rIElubGluZUNvbXBsZXRpb25QYXJhbXN9LCB0aGUgcmVzcG9uc2UgaXMgb2YgdHlwZVxuICoge0BsaW5rIElubGluZUNvbXBsZXRpb24gSW5saW5lQ29tcGxldGlvbltdfSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqXG4gKiBAc2luY2UgMy4xOC4wXG4gKiBAcHJvcG9zZWRcbiAqL1xudmFyIElubGluZUNvbXBsZXRpb25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChJbmxpbmVDb21wbGV0aW9uUmVxdWVzdCkge1xuICAgIElubGluZUNvbXBsZXRpb25SZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvaW5saW5lQ29tcGxldGlvbic7XG4gICAgSW5saW5lQ29tcGxldGlvblJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBJbmxpbmVDb21wbGV0aW9uUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShJbmxpbmVDb21wbGV0aW9uUmVxdWVzdC5tZXRob2QpO1xufSkoSW5saW5lQ29tcGxldGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuSW5saW5lQ29tcGxldGlvblJlcXVlc3QgPSBJbmxpbmVDb21wbGV0aW9uUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM0OTE6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5JbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0ID0gZXhwb3J0cy5JbmxpbmVWYWx1ZVJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHByb3ZpZGUgaW5saW5lIHZhbHVlcyBpbiBhIGRvY3VtZW50LiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZlxuICogdHlwZSB7QGxpbmsgSW5saW5lVmFsdWVQYXJhbXN9LCB0aGUgcmVzcG9uc2UgaXMgb2YgdHlwZVxuICoge0BsaW5rIElubGluZVZhbHVlIElubGluZVZhbHVlW119IG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIElubGluZVZhbHVlUmVxdWVzdDtcbihmdW5jdGlvbiAoSW5saW5lVmFsdWVSZXF1ZXN0KSB7XG4gICAgSW5saW5lVmFsdWVSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvaW5saW5lVmFsdWUnO1xuICAgIElubGluZVZhbHVlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIElubGluZVZhbHVlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShJbmxpbmVWYWx1ZVJlcXVlc3QubWV0aG9kKTtcbn0pKElubGluZVZhbHVlUmVxdWVzdCB8fCAoZXhwb3J0cy5JbmxpbmVWYWx1ZVJlcXVlc3QgPSBJbmxpbmVWYWx1ZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0O1xuKGZ1bmN0aW9uIChJbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0KSB7XG4gICAgSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdC5tZXRob2QgPSBgd29ya3NwYWNlL2lubGluZVZhbHVlL3JlZnJlc2hgO1xuICAgIElubGluZVZhbHVlUmVmcmVzaFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBJbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlMChJbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0Lm1ldGhvZCk7XG59KShJbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0IHx8IChleHBvcnRzLklubGluZVZhbHVlUmVmcmVzaFJlcXVlc3QgPSBJbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTgxNTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5Xb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0ID0gZXhwb3J0cy5Db2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QgPSBleHBvcnRzLkNvZGVBY3Rpb25SZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudFN5bWJvbFJlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdCA9IGV4cG9ydHMuUmVmZXJlbmNlc1JlcXVlc3QgPSBleHBvcnRzLkRlZmluaXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5TaWduYXR1cmVIZWxwUmVxdWVzdCA9IGV4cG9ydHMuU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kID0gZXhwb3J0cy5Ib3ZlclJlcXVlc3QgPSBleHBvcnRzLkNvbXBsZXRpb25SZXNvbHZlUmVxdWVzdCA9IGV4cG9ydHMuQ29tcGxldGlvblJlcXVlc3QgPSBleHBvcnRzLkNvbXBsZXRpb25UcmlnZ2VyS2luZCA9IGV4cG9ydHMuUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uID0gZXhwb3J0cy5XYXRjaEtpbmQgPSBleHBvcnRzLlJlbGF0aXZlUGF0dGVybiA9IGV4cG9ydHMuRmlsZUNoYW5nZVR5cGUgPSBleHBvcnRzLkRpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV2lsbFNhdmVUZXh0RG9jdW1lbnRXYWl0VW50aWxSZXF1ZXN0ID0gZXhwb3J0cy5XaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuVGV4dERvY3VtZW50U2F2ZVJlYXNvbiA9IGV4cG9ydHMuRGlkU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuVGV4dERvY3VtZW50Q29udGVudENoYW5nZUV2ZW50ID0gZXhwb3J0cy5EaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5UZXh0RG9jdW1lbnRTeW5jS2luZCA9IGV4cG9ydHMuVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkxvZ01lc3NhZ2VOb3RpZmljYXRpb24gPSBleHBvcnRzLlNob3dNZXNzYWdlUmVxdWVzdCA9IGV4cG9ydHMuU2hvd01lc3NhZ2VOb3RpZmljYXRpb24gPSBleHBvcnRzLk1lc3NhZ2VUeXBlID0gZXhwb3J0cy5EaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uID0gZXhwb3J0cy5FeGl0Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5TaHV0ZG93blJlcXVlc3QgPSBleHBvcnRzLkluaXRpYWxpemVkTm90aWZpY2F0aW9uID0gZXhwb3J0cy5Jbml0aWFsaXplRXJyb3JDb2RlcyA9IGV4cG9ydHMuSW5pdGlhbGl6ZVJlcXVlc3QgPSBleHBvcnRzLldvcmtEb25lUHJvZ3Jlc3NPcHRpb25zID0gZXhwb3J0cy5UZXh0RG9jdW1lbnRSZWdpc3RyYXRpb25PcHRpb25zID0gZXhwb3J0cy5TdGF0aWNSZWdpc3RyYXRpb25PcHRpb25zID0gZXhwb3J0cy5Qb3NpdGlvbkVuY29kaW5nS2luZCA9IGV4cG9ydHMuRmFpbHVyZUhhbmRsaW5nS2luZCA9IGV4cG9ydHMuUmVzb3VyY2VPcGVyYXRpb25LaW5kID0gZXhwb3J0cy5VbnJlZ2lzdHJhdGlvblJlcXVlc3QgPSBleHBvcnRzLlJlZ2lzdHJhdGlvblJlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50U2VsZWN0b3IgPSBleHBvcnRzLk5vdGVib29rQ2VsbFRleHREb2N1bWVudEZpbHRlciA9IGV4cG9ydHMuTm90ZWJvb2tEb2N1bWVudEZpbHRlciA9IGV4cG9ydHMuVGV4dERvY3VtZW50RmlsdGVyID0gdm9pZCAwO1xuZXhwb3J0cy5Nb25pa2VyUmVxdWVzdCA9IGV4cG9ydHMuTW9uaWtlcktpbmQgPSBleHBvcnRzLlVuaXF1ZW5lc3NMZXZlbCA9IGV4cG9ydHMuV2lsbERlbGV0ZUZpbGVzUmVxdWVzdCA9IGV4cG9ydHMuRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb24gPSBleHBvcnRzLldpbGxSZW5hbWVGaWxlc1JlcXVlc3QgPSBleHBvcnRzLkRpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uID0gZXhwb3J0cy5XaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0ID0gZXhwb3J0cy5EaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kID0gZXhwb3J0cy5MaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0ID0gZXhwb3J0cy5TaG93RG9jdW1lbnRSZXF1ZXN0ID0gZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUgPSBleHBvcnRzLlNlbWFudGljVG9rZW5zUmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLlNlbWFudGljVG9rZW5zUmFuZ2VSZXF1ZXN0ID0gZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdCA9IGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSZXF1ZXN0ID0gZXhwb3J0cy5Ub2tlbkZvcm1hdCA9IGV4cG9ydHMuQ2FsbEhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0ID0gZXhwb3J0cy5DYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3QgPSBleHBvcnRzLkNhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdCA9IGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3QgPSBleHBvcnRzLldvcmtEb25lUHJvZ3Jlc3MgPSBleHBvcnRzLlNlbGVjdGlvblJhbmdlUmVxdWVzdCA9IGV4cG9ydHMuRGVjbGFyYXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5Gb2xkaW5nUmFuZ2VSZWZyZXNoUmVxdWVzdCA9IGV4cG9ydHMuRm9sZGluZ1JhbmdlUmVxdWVzdCA9IGV4cG9ydHMuQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudENvbG9yUmVxdWVzdCA9IGV4cG9ydHMuQ29uZmlndXJhdGlvblJlcXVlc3QgPSBleHBvcnRzLkRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24gPSBleHBvcnRzLldvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0ID0gZXhwb3J0cy5UeXBlRGVmaW5pdGlvblJlcXVlc3QgPSBleHBvcnRzLkltcGxlbWVudGF0aW9uUmVxdWVzdCA9IGV4cG9ydHMuQXBwbHlXb3Jrc3BhY2VFZGl0UmVxdWVzdCA9IGV4cG9ydHMuRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0ID0gZXhwb3J0cy5QcmVwYXJlUmVuYW1lUmVxdWVzdCA9IGV4cG9ydHMuUmVuYW1lUmVxdWVzdCA9IGV4cG9ydHMuUHJlcGFyZVN1cHBvcnREZWZhdWx0QmVoYXZpb3IgPSBleHBvcnRzLkRvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50UmFuZ2VzRm9ybWF0dGluZ1JlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRMaW5rUmVzb2x2ZVJlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50TGlua1JlcXVlc3QgPSBleHBvcnRzLkNvZGVMZW5zUmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLkNvZGVMZW5zUmVzb2x2ZVJlcXVlc3QgPSBleHBvcnRzLkNvZGVMZW5zUmVxdWVzdCA9IGV4cG9ydHMuV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QgPSB2b2lkIDA7XG5leHBvcnRzLklubGluZUNvbXBsZXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5EaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5Ob3RlYm9va0NlbGxBcnJheUNoYW5nZSA9IGV4cG9ydHMuRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLk5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZSA9IGV4cG9ydHMuTm90ZWJvb2tEb2N1bWVudCA9IGV4cG9ydHMuTm90ZWJvb2tDZWxsID0gZXhwb3J0cy5FeGVjdXRpb25TdW1tYXJ5ID0gZXhwb3J0cy5Ob3RlYm9va0NlbGxLaW5kID0gZXhwb3J0cy5EaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLldvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudERpYWdub3N0aWNSZXBvcnRLaW5kID0gZXhwb3J0cy5EaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YSA9IGV4cG9ydHMuSW5sYXlIaW50UmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLklubGF5SGludFJlc29sdmVSZXF1ZXN0ID0gZXhwb3J0cy5JbmxheUhpbnRSZXF1ZXN0ID0gZXhwb3J0cy5JbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0ID0gZXhwb3J0cy5JbmxpbmVWYWx1ZVJlcXVlc3QgPSBleHBvcnRzLlR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdCA9IGV4cG9ydHMuVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdCA9IGV4cG9ydHMuVHlwZUhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG5jb25zdCB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjg1Mik7XG5jb25zdCBJcyA9IF9fd2VicGFja19yZXF1aXJlX18oODYzMyk7XG5jb25zdCBwcm90b2NvbF9pbXBsZW1lbnRhdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Mjg3KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkltcGxlbWVudGF0aW9uUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2ltcGxlbWVudGF0aW9uXzEuSW1wbGVtZW50YXRpb25SZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX3R5cGVEZWZpbml0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyNjQpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHlwZURlZmluaXRpb25SZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfdHlwZURlZmluaXRpb25fMS5UeXBlRGVmaW5pdGlvblJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfd29ya3NwYWNlRm9sZGVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4NjApO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV29ya3NwYWNlRm9sZGVyc1JlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF93b3Jrc3BhY2VGb2xkZXJfMS5Xb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfd29ya3NwYWNlRm9sZGVyXzEuRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbjsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9jb25maWd1cmF0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2MzkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29uZmlndXJhdGlvblJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9jb25maWd1cmF0aW9uXzEuQ29uZmlndXJhdGlvblJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfY29sb3JQcm92aWRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzQ3KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRvY3VtZW50Q29sb3JSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfY29sb3JQcm92aWRlcl8xLkRvY3VtZW50Q29sb3JSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbG9yUHJlc2VudGF0aW9uUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2NvbG9yUHJvdmlkZXJfMS5Db2xvclByZXNlbnRhdGlvblJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfZm9sZGluZ1JhbmdlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMDMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRm9sZGluZ1JhbmdlUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2ZvbGRpbmdSYW5nZV8xLkZvbGRpbmdSYW5nZVJlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRm9sZGluZ1JhbmdlUmVmcmVzaFJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9mb2xkaW5nUmFuZ2VfMS5Gb2xkaW5nUmFuZ2VSZWZyZXNoUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9kZWNsYXJhdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NTgxKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlY2xhcmF0aW9uUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2RlY2xhcmF0aW9uXzEuRGVjbGFyYXRpb25SZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX3NlbGVjdGlvblJhbmdlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1MzApO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfc2VsZWN0aW9uUmFuZ2VfMS5TZWxlY3Rpb25SYW5nZVJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfcHJvZ3Jlc3NfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDE2Nik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXb3JrRG9uZVByb2dyZXNzXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfcHJvZ3Jlc3NfMS5Xb3JrRG9uZVByb2dyZXNzOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfcHJvZ3Jlc3NfMS5Xb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfcHJvZ3Jlc3NfMS5Xb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uOyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX2NhbGxIaWVyYXJjaHlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzYwMik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9jYWxsSGllcmFyY2h5XzEuQ2FsbEhpZXJhcmNoeUluY29taW5nQ2FsbHNSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2NhbGxIaWVyYXJjaHlfMS5DYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FsbEhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfY2FsbEhpZXJhcmNoeV8xLkNhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9zZW1hbnRpY1Rva2Vuc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMDY3KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRva2VuRm9ybWF0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfc2VtYW50aWNUb2tlbnNfMS5Ub2tlbkZvcm1hdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZW1hbnRpY1Rva2Vuc1JlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9zZW1hbnRpY1Rva2Vuc18xLlNlbWFudGljVG9rZW5zUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX3NlbWFudGljVG9rZW5zXzEuU2VtYW50aWNUb2tlbnNEZWx0YVJlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9zZW1hbnRpY1Rva2Vuc18xLlNlbWFudGljVG9rZW5zUmFuZ2VSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlbWFudGljVG9rZW5zUmVmcmVzaFJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9zZW1hbnRpY1Rva2Vuc18xLlNlbWFudGljVG9rZW5zUmVmcmVzaFJlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfc2VtYW50aWNUb2tlbnNfMS5TZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGU7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfc2hvd0RvY3VtZW50XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzMzMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2hvd0RvY3VtZW50UmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX3Nob3dEb2N1bWVudF8xLlNob3dEb2N1bWVudFJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfbGlua2VkRWRpdGluZ1JhbmdlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyNDkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2xpbmtlZEVkaXRpbmdSYW5nZV8xLkxpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDc4MSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJGaWxlT3BlcmF0aW9uUGF0dGVybktpbmRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9maWxlT3BlcmF0aW9uc18xLkZpbGVPcGVyYXRpb25QYXR0ZXJuS2luZDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2ZpbGVPcGVyYXRpb25zXzEuRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV2lsbENyZWF0ZUZpbGVzUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2ZpbGVPcGVyYXRpb25zXzEuV2lsbENyZWF0ZUZpbGVzUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2ZpbGVPcGVyYXRpb25zXzEuRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV2lsbFJlbmFtZUZpbGVzUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2ZpbGVPcGVyYXRpb25zXzEuV2lsbFJlbmFtZUZpbGVzUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaWREZWxldGVGaWxlc05vdGlmaWNhdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2ZpbGVPcGVyYXRpb25zXzEuRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV2lsbERlbGV0ZUZpbGVzUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2ZpbGVPcGVyYXRpb25zXzEuV2lsbERlbGV0ZUZpbGVzUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9tb25pa2VyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2ODQpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVW5pcXVlbmVzc0xldmVsXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbW9uaWtlcl8xLlVuaXF1ZW5lc3NMZXZlbDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNb25pa2VyS2luZFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX21vbmlrZXJfMS5Nb25pa2VyS2luZDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNb25pa2VyUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX21vbmlrZXJfMS5Nb25pa2VyUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF90eXBlSGllcmFyY2h5XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwNjIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHlwZUhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfdHlwZUhpZXJhcmNoeV8xLlR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUeXBlSGllcmFyY2h5U3VidHlwZXNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfdHlwZUhpZXJhcmNoeV8xLlR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfdHlwZUhpZXJhcmNoeV8xLlR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9pbmxpbmVWYWx1ZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNDkxKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklubGluZVZhbHVlUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2lubGluZVZhbHVlXzEuSW5saW5lVmFsdWVSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklubGluZVZhbHVlUmVmcmVzaFJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9pbmxpbmVWYWx1ZV8xLklubGluZVZhbHVlUmVmcmVzaFJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfaW5sYXlIaW50XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzODMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5sYXlIaW50UmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2lubGF5SGludF8xLklubGF5SGludFJlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9pbmxheUhpbnRfMS5JbmxheUhpbnRSZXNvbHZlUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbmxheUhpbnRSZWZyZXNoUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2lubGF5SGludF8xLklubGF5SGludFJlZnJlc2hSZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX2RpYWdub3N0aWNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQ5NCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2RpYWdub3N0aWNfMS5EaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEb2N1bWVudERpYWdub3N0aWNSZXBvcnRLaW5kXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZGlhZ25vc3RpY18xLkRvY3VtZW50RGlhZ25vc3RpY1JlcG9ydEtpbmQ7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRG9jdW1lbnREaWFnbm9zdGljUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2RpYWdub3N0aWNfMS5Eb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZGlhZ25vc3RpY18xLldvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpYWdub3N0aWNSZWZyZXNoUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2RpYWdub3N0aWNfMS5EaWFnbm9zdGljUmVmcmVzaFJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfbm90ZWJvb2tfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDc5Mik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RlYm9va0NlbGxLaW5kXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbm90ZWJvb2tfMS5Ob3RlYm9va0NlbGxLaW5kOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkV4ZWN1dGlvblN1bW1hcnlcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9ub3RlYm9va18xLkV4ZWN1dGlvblN1bW1hcnk7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90ZWJvb2tDZWxsXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbm90ZWJvb2tfMS5Ob3RlYm9va0NlbGw7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90ZWJvb2tEb2N1bWVudFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuTm90ZWJvb2tEb2N1bWVudDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGVcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9ub3RlYm9va18xLk5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90ZWJvb2tDZWxsQXJyYXlDaGFuZ2VcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9ub3RlYm9va18xLk5vdGVib29rQ2VsbEFycmF5Q2hhbmdlOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb25cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9ub3RlYm9va18xLkRpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb25cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9ub3RlYm9va18xLkRpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuRGlkQ2xvc2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uOyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX2lubGluZUNvbXBsZXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjMyMik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbmxpbmVDb21wbGV0aW9uUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2lubGluZUNvbXBsZXRpb25fMS5JbmxpbmVDb21wbGV0aW9uUmVxdWVzdDsgfSB9KSk7XG4vLyBAdHMtaWdub3JlOiB0byBhdm9pZCBpbmxpbmluZyBMb2NhdGlvbkxpbmsgYXMgZHluYW1pYyBpbXBvcnRcbmxldCBfX25vRHluYW1pY0ltcG9ydDtcbi8qKlxuICogVGhlIFRleHREb2N1bWVudEZpbHRlciBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBUZXh0RG9jdW1lbnRGaWx0ZXJ9IGxpdGVyYWxzLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIFRleHREb2N1bWVudEZpbHRlcjtcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50RmlsdGVyKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5zdHJpbmcoY2FuZGlkYXRlKSB8fCAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYW5ndWFnZSkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5zY2hlbWUpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUucGF0dGVybikpO1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRGaWx0ZXIuaXMgPSBpcztcbn0pKFRleHREb2N1bWVudEZpbHRlciB8fCAoZXhwb3J0cy5UZXh0RG9jdW1lbnRGaWx0ZXIgPSBUZXh0RG9jdW1lbnRGaWx0ZXIgPSB7fSkpO1xuLyoqXG4gKiBUaGUgTm90ZWJvb2tEb2N1bWVudEZpbHRlciBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBOb3RlYm9va0RvY3VtZW50RmlsdGVyfSBsaXRlcmFscy5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBOb3RlYm9va0RvY3VtZW50RmlsdGVyO1xuKGZ1bmN0aW9uIChOb3RlYm9va0RvY3VtZW50RmlsdGVyKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUubm90ZWJvb2tUeXBlKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnNjaGVtZSkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5wYXR0ZXJuKSk7XG4gICAgfVxuICAgIE5vdGVib29rRG9jdW1lbnRGaWx0ZXIuaXMgPSBpcztcbn0pKE5vdGVib29rRG9jdW1lbnRGaWx0ZXIgfHwgKGV4cG9ydHMuTm90ZWJvb2tEb2N1bWVudEZpbHRlciA9IE5vdGVib29rRG9jdW1lbnRGaWx0ZXIgPSB7fSkpO1xuLyoqXG4gKiBUaGUgTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIE5vdGVib29rQ2VsbFRleHREb2N1bWVudEZpbHRlcn0gbGl0ZXJhbHMuXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyO1xuKGZ1bmN0aW9uIChOb3RlYm9va0NlbGxUZXh0RG9jdW1lbnRGaWx0ZXIpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKVxuICAgICAgICAgICAgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUubm90ZWJvb2spIHx8IE5vdGVib29rRG9jdW1lbnRGaWx0ZXIuaXMoY2FuZGlkYXRlLm5vdGVib29rKSlcbiAgICAgICAgICAgICYmIChjYW5kaWRhdGUubGFuZ3VhZ2UgPT09IHVuZGVmaW5lZCB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlKSk7XG4gICAgfVxuICAgIE5vdGVib29rQ2VsbFRleHREb2N1bWVudEZpbHRlci5pcyA9IGlzO1xufSkoTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyIHx8IChleHBvcnRzLk5vdGVib29rQ2VsbFRleHREb2N1bWVudEZpbHRlciA9IE5vdGVib29rQ2VsbFRleHREb2N1bWVudEZpbHRlciA9IHt9KSk7XG4vKipcbiAqIFRoZSBEb2N1bWVudFNlbGVjdG9yIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIERvY3VtZW50U2VsZWN0b3J9cy5cbiAqL1xudmFyIERvY3VtZW50U2VsZWN0b3I7XG4oZnVuY3Rpb24gKERvY3VtZW50U2VsZWN0b3IpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgZWxlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFJcy5zdHJpbmcoZWxlbSkgJiYgIVRleHREb2N1bWVudEZpbHRlci5pcyhlbGVtKSAmJiAhTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyLmlzKGVsZW0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBEb2N1bWVudFNlbGVjdG9yLmlzID0gaXM7XG59KShEb2N1bWVudFNlbGVjdG9yIHx8IChleHBvcnRzLkRvY3VtZW50U2VsZWN0b3IgPSBEb2N1bWVudFNlbGVjdG9yID0ge30pKTtcbi8qKlxuICogVGhlIGBjbGllbnQvcmVnaXN0ZXJDYXBhYmlsaXR5YCByZXF1ZXN0IGlzIHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgdG8gcmVnaXN0ZXIgYSBuZXcgY2FwYWJpbGl0eVxuICogaGFuZGxlciBvbiB0aGUgY2xpZW50IHNpZGUuXG4gKi9cbnZhciBSZWdpc3RyYXRpb25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChSZWdpc3RyYXRpb25SZXF1ZXN0KSB7XG4gICAgUmVnaXN0cmF0aW9uUmVxdWVzdC5tZXRob2QgPSAnY2xpZW50L3JlZ2lzdGVyQ2FwYWJpbGl0eSc7XG4gICAgUmVnaXN0cmF0aW9uUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIFJlZ2lzdHJhdGlvblJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoUmVnaXN0cmF0aW9uUmVxdWVzdC5tZXRob2QpO1xufSkoUmVnaXN0cmF0aW9uUmVxdWVzdCB8fCAoZXhwb3J0cy5SZWdpc3RyYXRpb25SZXF1ZXN0ID0gUmVnaXN0cmF0aW9uUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBgY2xpZW50L3VucmVnaXN0ZXJDYXBhYmlsaXR5YCByZXF1ZXN0IGlzIHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgdG8gdW5yZWdpc3RlciBhIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBjYXBhYmlsaXR5XG4gKiBoYW5kbGVyIG9uIHRoZSBjbGllbnQgc2lkZS5cbiAqL1xudmFyIFVucmVnaXN0cmF0aW9uUmVxdWVzdDtcbihmdW5jdGlvbiAoVW5yZWdpc3RyYXRpb25SZXF1ZXN0KSB7XG4gICAgVW5yZWdpc3RyYXRpb25SZXF1ZXN0Lm1ldGhvZCA9ICdjbGllbnQvdW5yZWdpc3RlckNhcGFiaWxpdHknO1xuICAgIFVucmVnaXN0cmF0aW9uUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIFVucmVnaXN0cmF0aW9uUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShVbnJlZ2lzdHJhdGlvblJlcXVlc3QubWV0aG9kKTtcbn0pKFVucmVnaXN0cmF0aW9uUmVxdWVzdCB8fCAoZXhwb3J0cy5VbnJlZ2lzdHJhdGlvblJlcXVlc3QgPSBVbnJlZ2lzdHJhdGlvblJlcXVlc3QgPSB7fSkpO1xudmFyIFJlc291cmNlT3BlcmF0aW9uS2luZDtcbihmdW5jdGlvbiAoUmVzb3VyY2VPcGVyYXRpb25LaW5kKSB7XG4gICAgLyoqXG4gICAgICogU3VwcG9ydHMgY3JlYXRpbmcgbmV3IGZpbGVzIGFuZCBmb2xkZXJzLlxuICAgICAqL1xuICAgIFJlc291cmNlT3BlcmF0aW9uS2luZC5DcmVhdGUgPSAnY3JlYXRlJztcbiAgICAvKipcbiAgICAgKiBTdXBwb3J0cyByZW5hbWluZyBleGlzdGluZyBmaWxlcyBhbmQgZm9sZGVycy5cbiAgICAgKi9cbiAgICBSZXNvdXJjZU9wZXJhdGlvbktpbmQuUmVuYW1lID0gJ3JlbmFtZSc7XG4gICAgLyoqXG4gICAgICogU3VwcG9ydHMgZGVsZXRpbmcgZXhpc3RpbmcgZmlsZXMgYW5kIGZvbGRlcnMuXG4gICAgICovXG4gICAgUmVzb3VyY2VPcGVyYXRpb25LaW5kLkRlbGV0ZSA9ICdkZWxldGUnO1xufSkoUmVzb3VyY2VPcGVyYXRpb25LaW5kIHx8IChleHBvcnRzLlJlc291cmNlT3BlcmF0aW9uS2luZCA9IFJlc291cmNlT3BlcmF0aW9uS2luZCA9IHt9KSk7XG52YXIgRmFpbHVyZUhhbmRsaW5nS2luZDtcbihmdW5jdGlvbiAoRmFpbHVyZUhhbmRsaW5nS2luZCkge1xuICAgIC8qKlxuICAgICAqIEFwcGx5aW5nIHRoZSB3b3Jrc3BhY2UgY2hhbmdlIGlzIHNpbXBseSBhYm9ydGVkIGlmIG9uZSBvZiB0aGUgY2hhbmdlcyBwcm92aWRlZFxuICAgICAqIGZhaWxzLiBBbGwgb3BlcmF0aW9ucyBleGVjdXRlZCBiZWZvcmUgdGhlIGZhaWxpbmcgb3BlcmF0aW9uIHN0YXkgZXhlY3V0ZWQuXG4gICAgICovXG4gICAgRmFpbHVyZUhhbmRsaW5nS2luZC5BYm9ydCA9ICdhYm9ydCc7XG4gICAgLyoqXG4gICAgICogQWxsIG9wZXJhdGlvbnMgYXJlIGV4ZWN1dGVkIHRyYW5zYWN0aW9uYWwuIFRoYXQgbWVhbnMgdGhleSBlaXRoZXIgYWxsXG4gICAgICogc3VjY2VlZCBvciBubyBjaGFuZ2VzIGF0IGFsbCBhcmUgYXBwbGllZCB0byB0aGUgd29ya3NwYWNlLlxuICAgICAqL1xuICAgIEZhaWx1cmVIYW5kbGluZ0tpbmQuVHJhbnNhY3Rpb25hbCA9ICd0cmFuc2FjdGlvbmFsJztcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgd29ya3NwYWNlIGVkaXQgY29udGFpbnMgb25seSB0ZXh0dWFsIGZpbGUgY2hhbmdlcyB0aGV5IGFyZSBleGVjdXRlZCB0cmFuc2FjdGlvbmFsLlxuICAgICAqIElmIHJlc291cmNlIGNoYW5nZXMgKGNyZWF0ZSwgcmVuYW1lIG9yIGRlbGV0ZSBmaWxlKSBhcmUgcGFydCBvZiB0aGUgY2hhbmdlIHRoZSBmYWlsdXJlXG4gICAgICogaGFuZGxpbmcgc3RyYXRlZ3kgaXMgYWJvcnQuXG4gICAgICovXG4gICAgRmFpbHVyZUhhbmRsaW5nS2luZC5UZXh0T25seVRyYW5zYWN0aW9uYWwgPSAndGV4dE9ubHlUcmFuc2FjdGlvbmFsJztcbiAgICAvKipcbiAgICAgKiBUaGUgY2xpZW50IHRyaWVzIHRvIHVuZG8gdGhlIG9wZXJhdGlvbnMgYWxyZWFkeSBleGVjdXRlZC4gQnV0IHRoZXJlIGlzIG5vXG4gICAgICogZ3VhcmFudGVlIHRoYXQgdGhpcyBpcyBzdWNjZWVkaW5nLlxuICAgICAqL1xuICAgIEZhaWx1cmVIYW5kbGluZ0tpbmQuVW5kbyA9ICd1bmRvJztcbn0pKEZhaWx1cmVIYW5kbGluZ0tpbmQgfHwgKGV4cG9ydHMuRmFpbHVyZUhhbmRsaW5nS2luZCA9IEZhaWx1cmVIYW5kbGluZ0tpbmQgPSB7fSkpO1xuLyoqXG4gKiBBIHNldCBvZiBwcmVkZWZpbmVkIHBvc2l0aW9uIGVuY29kaW5nIGtpbmRzLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIFBvc2l0aW9uRW5jb2RpbmdLaW5kO1xuKGZ1bmN0aW9uIChQb3NpdGlvbkVuY29kaW5nS2luZCkge1xuICAgIC8qKlxuICAgICAqIENoYXJhY3RlciBvZmZzZXRzIGNvdW50IFVURi04IGNvZGUgdW5pdHMgKGUuZy4gYnl0ZXMpLlxuICAgICAqL1xuICAgIFBvc2l0aW9uRW5jb2RpbmdLaW5kLlVURjggPSAndXRmLTgnO1xuICAgIC8qKlxuICAgICAqIENoYXJhY3RlciBvZmZzZXRzIGNvdW50IFVURi0xNiBjb2RlIHVuaXRzLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB0aGUgZGVmYXVsdCBhbmQgbXVzdCBhbHdheXMgYmUgc3VwcG9ydGVkXG4gICAgICogYnkgc2VydmVyc1xuICAgICAqL1xuICAgIFBvc2l0aW9uRW5jb2RpbmdLaW5kLlVURjE2ID0gJ3V0Zi0xNic7XG4gICAgLyoqXG4gICAgICogQ2hhcmFjdGVyIG9mZnNldHMgY291bnQgVVRGLTMyIGNvZGUgdW5pdHMuXG4gICAgICpcbiAgICAgKiBJbXBsZW1lbnRhdGlvbiBub3RlOiB0aGVzZSBhcmUgdGhlIHNhbWUgYXMgVW5pY29kZSBjb2RlcG9pbnRzLFxuICAgICAqIHNvIHRoaXMgYFBvc2l0aW9uRW5jb2RpbmdLaW5kYCBtYXkgYWxzbyBiZSB1c2VkIGZvciBhblxuICAgICAqIGVuY29kaW5nLWFnbm9zdGljIHJlcHJlc2VudGF0aW9uIG9mIGNoYXJhY3RlciBvZmZzZXRzLlxuICAgICAqL1xuICAgIFBvc2l0aW9uRW5jb2RpbmdLaW5kLlVURjMyID0gJ3V0Zi0zMic7XG59KShQb3NpdGlvbkVuY29kaW5nS2luZCB8fCAoZXhwb3J0cy5Qb3NpdGlvbkVuY29kaW5nS2luZCA9IFBvc2l0aW9uRW5jb2RpbmdLaW5kID0ge30pKTtcbi8qKlxuICogVGhlIFN0YXRpY1JlZ2lzdHJhdGlvbk9wdGlvbnMgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgU3RhdGljUmVnaXN0cmF0aW9uT3B0aW9uc30gbGl0ZXJhbHMuXG4gKi9cbnZhciBTdGF0aWNSZWdpc3RyYXRpb25PcHRpb25zO1xuKGZ1bmN0aW9uIChTdGF0aWNSZWdpc3RyYXRpb25PcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gaGFzSWQodmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5pZCkgJiYgY2FuZGlkYXRlLmlkLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIFN0YXRpY1JlZ2lzdHJhdGlvbk9wdGlvbnMuaGFzSWQgPSBoYXNJZDtcbn0pKFN0YXRpY1JlZ2lzdHJhdGlvbk9wdGlvbnMgfHwgKGV4cG9ydHMuU3RhdGljUmVnaXN0cmF0aW9uT3B0aW9ucyA9IFN0YXRpY1JlZ2lzdHJhdGlvbk9wdGlvbnMgPSB7fSkpO1xuLyoqXG4gKiBUaGUgVGV4dERvY3VtZW50UmVnaXN0cmF0aW9uT3B0aW9ucyBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBUZXh0RG9jdW1lbnRSZWdpc3RyYXRpb25PcHRpb25zfSBsaXRlcmFscy5cbiAqL1xudmFyIFRleHREb2N1bWVudFJlZ2lzdHJhdGlvbk9wdGlvbnM7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudFJlZ2lzdHJhdGlvbk9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiAoY2FuZGlkYXRlLmRvY3VtZW50U2VsZWN0b3IgPT09IG51bGwgfHwgRG9jdW1lbnRTZWxlY3Rvci5pcyhjYW5kaWRhdGUuZG9jdW1lbnRTZWxlY3RvcikpO1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRSZWdpc3RyYXRpb25PcHRpb25zLmlzID0gaXM7XG59KShUZXh0RG9jdW1lbnRSZWdpc3RyYXRpb25PcHRpb25zIHx8IChleHBvcnRzLlRleHREb2N1bWVudFJlZ2lzdHJhdGlvbk9wdGlvbnMgPSBUZXh0RG9jdW1lbnRSZWdpc3RyYXRpb25PcHRpb25zID0ge30pKTtcbi8qKlxuICogVGhlIFdvcmtEb25lUHJvZ3Jlc3NPcHRpb25zIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFdvcmtEb25lUHJvZ3Jlc3NPcHRpb25zfSBsaXRlcmFscy5cbiAqL1xudmFyIFdvcmtEb25lUHJvZ3Jlc3NPcHRpb25zO1xuKGZ1bmN0aW9uIChXb3JrRG9uZVByb2dyZXNzT3B0aW9ucykge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIChjYW5kaWRhdGUud29ya0RvbmVQcm9ncmVzcyA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLndvcmtEb25lUHJvZ3Jlc3MpKTtcbiAgICB9XG4gICAgV29ya0RvbmVQcm9ncmVzc09wdGlvbnMuaXMgPSBpcztcbiAgICBmdW5jdGlvbiBoYXNXb3JrRG9uZVByb2dyZXNzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLmJvb2xlYW4oY2FuZGlkYXRlLndvcmtEb25lUHJvZ3Jlc3MpO1xuICAgIH1cbiAgICBXb3JrRG9uZVByb2dyZXNzT3B0aW9ucy5oYXNXb3JrRG9uZVByb2dyZXNzID0gaGFzV29ya0RvbmVQcm9ncmVzcztcbn0pKFdvcmtEb25lUHJvZ3Jlc3NPcHRpb25zIHx8IChleHBvcnRzLldvcmtEb25lUHJvZ3Jlc3NPcHRpb25zID0gV29ya0RvbmVQcm9ncmVzc09wdGlvbnMgPSB7fSkpO1xuLyoqXG4gKiBUaGUgaW5pdGlhbGl6ZSByZXF1ZXN0IGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKiBJdCBpcyBzZW50IG9uY2UgYXMgdGhlIHJlcXVlc3QgYWZ0ZXIgc3RhcnRpbmcgdXAgdGhlIHNlcnZlci5cbiAqIFRoZSByZXF1ZXN0cyBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgSW5pdGlhbGl6ZVBhcmFtc31cbiAqIHRoZSByZXNwb25zZSBpZiBvZiB0eXBlIHtAbGluayBJbml0aWFsaXplUmVzdWx0fSBvZiBhIFRoZW5hYmxlIHRoYXRcbiAqIHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBJbml0aWFsaXplUmVxdWVzdDtcbihmdW5jdGlvbiAoSW5pdGlhbGl6ZVJlcXVlc3QpIHtcbiAgICBJbml0aWFsaXplUmVxdWVzdC5tZXRob2QgPSAnaW5pdGlhbGl6ZSc7XG4gICAgSW5pdGlhbGl6ZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBJbml0aWFsaXplUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShJbml0aWFsaXplUmVxdWVzdC5tZXRob2QpO1xufSkoSW5pdGlhbGl6ZVJlcXVlc3QgfHwgKGV4cG9ydHMuSW5pdGlhbGl6ZVJlcXVlc3QgPSBJbml0aWFsaXplUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEtub3duIGVycm9yIGNvZGVzIGZvciBhbiBgSW5pdGlhbGl6ZUVycm9yQ29kZXNgO1xuICovXG52YXIgSW5pdGlhbGl6ZUVycm9yQ29kZXM7XG4oZnVuY3Rpb24gKEluaXRpYWxpemVFcnJvckNvZGVzKSB7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHByb3RvY29sIHZlcnNpb24gcHJvdmlkZWQgYnkgdGhlIGNsaWVudCBjYW4ndCBiZSBoYW5kbGVkIGJ5IHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGlzIGluaXRpYWxpemUgZXJyb3IgZ290IHJlcGxhY2VkIGJ5IGNsaWVudCBjYXBhYmlsaXRpZXMuIFRoZXJlIGlzXG4gICAgICogbm8gdmVyc2lvbiBoYW5kc2hha2UgaW4gdmVyc2lvbiAzLjB4XG4gICAgICovXG4gICAgSW5pdGlhbGl6ZUVycm9yQ29kZXMudW5rbm93blByb3RvY29sVmVyc2lvbiA9IDE7XG59KShJbml0aWFsaXplRXJyb3JDb2RlcyB8fCAoZXhwb3J0cy5Jbml0aWFsaXplRXJyb3JDb2RlcyA9IEluaXRpYWxpemVFcnJvckNvZGVzID0ge30pKTtcbi8qKlxuICogVGhlIGluaXRpYWxpemVkIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGVcbiAqIHNlcnZlciBhZnRlciB0aGUgY2xpZW50IGlzIGZ1bGx5IGluaXRpYWxpemVkIGFuZCB0aGUgc2VydmVyXG4gKiBpcyBhbGxvd2VkIHRvIHNlbmQgcmVxdWVzdHMgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQuXG4gKi9cbnZhciBJbml0aWFsaXplZE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoSW5pdGlhbGl6ZWROb3RpZmljYXRpb24pIHtcbiAgICBJbml0aWFsaXplZE5vdGlmaWNhdGlvbi5tZXRob2QgPSAnaW5pdGlhbGl6ZWQnO1xuICAgIEluaXRpYWxpemVkTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgSW5pdGlhbGl6ZWROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShJbml0aWFsaXplZE5vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoSW5pdGlhbGl6ZWROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuSW5pdGlhbGl6ZWROb3RpZmljYXRpb24gPSBJbml0aWFsaXplZE5vdGlmaWNhdGlvbiA9IHt9KSk7XG4vLy0tLS0gU2h1dGRvd24gTWV0aG9kIC0tLS1cbi8qKlxuICogQSBzaHV0ZG93biByZXF1ZXN0IGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKiBJdCBpcyBzZW50IG9uY2Ugd2hlbiB0aGUgY2xpZW50IGRlY2lkZXMgdG8gc2h1dGRvd24gdGhlXG4gKiBzZXJ2ZXIuIFRoZSBvbmx5IG5vdGlmaWNhdGlvbiB0aGF0IGlzIHNlbnQgYWZ0ZXIgYSBzaHV0ZG93biByZXF1ZXN0XG4gKiBpcyB0aGUgZXhpdCBldmVudC5cbiAqL1xudmFyIFNodXRkb3duUmVxdWVzdDtcbihmdW5jdGlvbiAoU2h1dGRvd25SZXF1ZXN0KSB7XG4gICAgU2h1dGRvd25SZXF1ZXN0Lm1ldGhvZCA9ICdzaHV0ZG93bic7XG4gICAgU2h1dGRvd25SZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgU2h1dGRvd25SZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlMChTaHV0ZG93blJlcXVlc3QubWV0aG9kKTtcbn0pKFNodXRkb3duUmVxdWVzdCB8fCAoZXhwb3J0cy5TaHV0ZG93blJlcXVlc3QgPSBTaHV0ZG93blJlcXVlc3QgPSB7fSkpO1xuLy8tLS0tIEV4aXQgTm90aWZpY2F0aW9uIC0tLS1cbi8qKlxuICogVGhlIGV4aXQgZXZlbnQgaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB0b1xuICogYXNrIHRoZSBzZXJ2ZXIgdG8gZXhpdCBpdHMgcHJvY2Vzcy5cbiAqL1xudmFyIEV4aXROb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKEV4aXROb3RpZmljYXRpb24pIHtcbiAgICBFeGl0Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICdleGl0JztcbiAgICBFeGl0Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRXhpdE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlMChFeGl0Tm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShFeGl0Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkV4aXROb3RpZmljYXRpb24gPSBFeGl0Tm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIGNvbmZpZ3VyYXRpb24gY2hhbmdlIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyXG4gKiB3aGVuIHRoZSBjbGllbnQncyBjb25maWd1cmF0aW9uIGhhcyBjaGFuZ2VkLiBUaGUgbm90aWZpY2F0aW9uIGNvbnRhaW5zXG4gKiB0aGUgY2hhbmdlZCBjb25maWd1cmF0aW9uIGFzIGRlZmluZWQgYnkgdGhlIGxhbmd1YWdlIGNsaWVudC5cbiAqL1xudmFyIERpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24pIHtcbiAgICBEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uLm1ldGhvZCA9ICd3b3Jrc3BhY2UvZGlkQ2hhbmdlQ29uZmlndXJhdGlvbic7XG4gICAgRGlkQ2hhbmdlQ29uZmlndXJhdGlvbk5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24gPSBEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uID0ge30pKTtcbi8vLS0tLSBNZXNzYWdlIHNob3cgYW5kIGxvZyBub3RpZmljYXRpb25zIC0tLS1cbi8qKlxuICogVGhlIG1lc3NhZ2UgdHlwZVxuICovXG52YXIgTWVzc2FnZVR5cGU7XG4oZnVuY3Rpb24gKE1lc3NhZ2VUeXBlKSB7XG4gICAgLyoqXG4gICAgICogQW4gZXJyb3IgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBNZXNzYWdlVHlwZS5FcnJvciA9IDE7XG4gICAgLyoqXG4gICAgICogQSB3YXJuaW5nIG1lc3NhZ2UuXG4gICAgICovXG4gICAgTWVzc2FnZVR5cGUuV2FybmluZyA9IDI7XG4gICAgLyoqXG4gICAgICogQW4gaW5mb3JtYXRpb24gbWVzc2FnZS5cbiAgICAgKi9cbiAgICBNZXNzYWdlVHlwZS5JbmZvID0gMztcbiAgICAvKipcbiAgICAgKiBBIGxvZyBtZXNzYWdlLlxuICAgICAqL1xuICAgIE1lc3NhZ2VUeXBlLkxvZyA9IDQ7XG4gICAgLyoqXG4gICAgICogQSBkZWJ1ZyBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQHNpbmNlIDMuMTguMFxuICAgICAqL1xuICAgIE1lc3NhZ2VUeXBlLkRlYnVnID0gNTtcbn0pKE1lc3NhZ2VUeXBlIHx8IChleHBvcnRzLk1lc3NhZ2VUeXBlID0gTWVzc2FnZVR5cGUgPSB7fSkpO1xuLyoqXG4gKiBUaGUgc2hvdyBtZXNzYWdlIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gYSBzZXJ2ZXIgdG8gYSBjbGllbnQgdG8gYXNrXG4gKiB0aGUgY2xpZW50IHRvIGRpc3BsYXkgYSBwYXJ0aWN1bGFyIG1lc3NhZ2UgaW4gdGhlIHVzZXIgaW50ZXJmYWNlLlxuICovXG52YXIgU2hvd01lc3NhZ2VOb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKFNob3dNZXNzYWdlTm90aWZpY2F0aW9uKSB7XG4gICAgU2hvd01lc3NhZ2VOb3RpZmljYXRpb24ubWV0aG9kID0gJ3dpbmRvdy9zaG93TWVzc2FnZSc7XG4gICAgU2hvd01lc3NhZ2VOb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBTaG93TWVzc2FnZU5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKFNob3dNZXNzYWdlTm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShTaG93TWVzc2FnZU5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5TaG93TWVzc2FnZU5vdGlmaWNhdGlvbiA9IFNob3dNZXNzYWdlTm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIHNob3cgbWVzc2FnZSByZXF1ZXN0IGlzIHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgdG8gc2hvdyBhIG1lc3NhZ2VcbiAqIGFuZCBhIHNldCBvZiBvcHRpb25zIGFjdGlvbnMgdG8gdGhlIHVzZXIuXG4gKi9cbnZhciBTaG93TWVzc2FnZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKFNob3dNZXNzYWdlUmVxdWVzdCkge1xuICAgIFNob3dNZXNzYWdlUmVxdWVzdC5tZXRob2QgPSAnd2luZG93L3Nob3dNZXNzYWdlUmVxdWVzdCc7XG4gICAgU2hvd01lc3NhZ2VSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgU2hvd01lc3NhZ2VSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFNob3dNZXNzYWdlUmVxdWVzdC5tZXRob2QpO1xufSkoU2hvd01lc3NhZ2VSZXF1ZXN0IHx8IChleHBvcnRzLlNob3dNZXNzYWdlUmVxdWVzdCA9IFNob3dNZXNzYWdlUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBsb2cgbWVzc2FnZSBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBhc2tcbiAqIHRoZSBjbGllbnQgdG8gbG9nIGEgcGFydGljdWxhciBtZXNzYWdlLlxuICovXG52YXIgTG9nTWVzc2FnZU5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoTG9nTWVzc2FnZU5vdGlmaWNhdGlvbikge1xuICAgIExvZ01lc3NhZ2VOb3RpZmljYXRpb24ubWV0aG9kID0gJ3dpbmRvdy9sb2dNZXNzYWdlJztcbiAgICBMb2dNZXNzYWdlTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgTG9nTWVzc2FnZU5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKExvZ01lc3NhZ2VOb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKExvZ01lc3NhZ2VOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuTG9nTWVzc2FnZU5vdGlmaWNhdGlvbiA9IExvZ01lc3NhZ2VOb3RpZmljYXRpb24gPSB7fSkpO1xuLy8tLS0tIFRlbGVtZXRyeSBub3RpZmljYXRpb25cbi8qKlxuICogVGhlIHRlbGVtZXRyeSBldmVudCBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBhc2tcbiAqIHRoZSBjbGllbnQgdG8gbG9nIHRlbGVtZXRyeSBkYXRhLlxuICovXG52YXIgVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKFRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uKSB7XG4gICAgVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb24ubWV0aG9kID0gJ3RlbGVtZXRyeS9ldmVudCc7XG4gICAgVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBUZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKFRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShUZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5UZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbiA9IFRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogRGVmaW5lcyBob3cgdGhlIGhvc3QgKGVkaXRvcikgc2hvdWxkIHN5bmNcbiAqIGRvY3VtZW50IGNoYW5nZXMgdG8gdGhlIGxhbmd1YWdlIHNlcnZlci5cbiAqL1xudmFyIFRleHREb2N1bWVudFN5bmNLaW5kO1xuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnRTeW5jS2luZCkge1xuICAgIC8qKlxuICAgICAqIERvY3VtZW50cyBzaG91bGQgbm90IGJlIHN5bmNlZCBhdCBhbGwuXG4gICAgICovXG4gICAgVGV4dERvY3VtZW50U3luY0tpbmQuTm9uZSA9IDA7XG4gICAgLyoqXG4gICAgICogRG9jdW1lbnRzIGFyZSBzeW5jZWQgYnkgYWx3YXlzIHNlbmRpbmcgdGhlIGZ1bGwgY29udGVudFxuICAgICAqIG9mIHRoZSBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBUZXh0RG9jdW1lbnRTeW5jS2luZC5GdWxsID0gMTtcbiAgICAvKipcbiAgICAgKiBEb2N1bWVudHMgYXJlIHN5bmNlZCBieSBzZW5kaW5nIHRoZSBmdWxsIGNvbnRlbnQgb24gb3Blbi5cbiAgICAgKiBBZnRlciB0aGF0IG9ubHkgaW5jcmVtZW50YWwgdXBkYXRlcyB0byB0aGUgZG9jdW1lbnQgYXJlXG4gICAgICogc2VuZC5cbiAgICAgKi9cbiAgICBUZXh0RG9jdW1lbnRTeW5jS2luZC5JbmNyZW1lbnRhbCA9IDI7XG59KShUZXh0RG9jdW1lbnRTeW5jS2luZCB8fCAoZXhwb3J0cy5UZXh0RG9jdW1lbnRTeW5jS2luZCA9IFRleHREb2N1bWVudFN5bmNLaW5kID0ge30pKTtcbi8qKlxuICogVGhlIGRvY3VtZW50IG9wZW4gbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgdG8gc2lnbmFsXG4gKiBuZXdseSBvcGVuZWQgdGV4dCBkb2N1bWVudHMuIFRoZSBkb2N1bWVudCdzIHRydXRoIGlzIG5vdyBtYW5hZ2VkIGJ5IHRoZSBjbGllbnRcbiAqIGFuZCB0aGUgc2VydmVyIG11c3Qgbm90IHRyeSB0byByZWFkIHRoZSBkb2N1bWVudCdzIHRydXRoIHVzaW5nIHRoZSBkb2N1bWVudCdzXG4gKiB1cmkuIE9wZW4gaW4gdGhpcyBzZW5zZSBtZWFucyBpdCBpcyBtYW5hZ2VkIGJ5IHRoZSBjbGllbnQuIEl0IGRvZXNuJ3QgbmVjZXNzYXJpbHlcbiAqIG1lYW4gdGhhdCBpdHMgY29udGVudCBpcyBwcmVzZW50ZWQgaW4gYW4gZWRpdG9yLiBBbiBvcGVuIG5vdGlmaWNhdGlvbiBtdXN0IG5vdFxuICogYmUgc2VudCBtb3JlIHRoYW4gb25jZSB3aXRob3V0IGEgY29ycmVzcG9uZGluZyBjbG9zZSBub3RpZmljYXRpb24gc2VuZCBiZWZvcmUuXG4gKiBUaGlzIG1lYW5zIG9wZW4gYW5kIGNsb3NlIG5vdGlmaWNhdGlvbiBtdXN0IGJlIGJhbGFuY2VkIGFuZCB0aGUgbWF4IG9wZW4gY291bnRcbiAqIGlzIG9uZS5cbiAqL1xudmFyIERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24pIHtcbiAgICBEaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZGlkT3Blbic7XG4gICAgRGlkT3BlblRleHREb2N1bWVudE5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShEaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSBEaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0ge30pKTtcbnZhciBUZXh0RG9jdW1lbnRDb250ZW50Q2hhbmdlRXZlbnQ7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudENvbnRlbnRDaGFuZ2VFdmVudCkge1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBpbmZvcm1hdGlvbiBkZXNjcmliZXMgYSBkZWx0YSBldmVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luY3JlbWVudGFsKGV2ZW50KSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSBldmVudDtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGNhbmRpZGF0ZS50ZXh0ID09PSAnc3RyaW5nJyAmJiBjYW5kaWRhdGUucmFuZ2UgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5yYW5nZUxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBjYW5kaWRhdGUucmFuZ2VMZW5ndGggPT09ICdudW1iZXInKTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50Q29udGVudENoYW5nZUV2ZW50LmlzSW5jcmVtZW50YWwgPSBpc0luY3JlbWVudGFsO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBpbmZvcm1hdGlvbiBkZXNjcmliZXMgYSBmdWxsIHJlcGxhY2VtZW50IGV2ZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRnVsbChldmVudCkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gZXZlbnQ7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgIT09IHVuZGVmaW5lZCAmJiBjYW5kaWRhdGUgIT09IG51bGwgJiZcbiAgICAgICAgICAgIHR5cGVvZiBjYW5kaWRhdGUudGV4dCA9PT0gJ3N0cmluZycgJiYgY2FuZGlkYXRlLnJhbmdlID09PSB1bmRlZmluZWQgJiYgY2FuZGlkYXRlLnJhbmdlTGVuZ3RoID09PSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIFRleHREb2N1bWVudENvbnRlbnRDaGFuZ2VFdmVudC5pc0Z1bGwgPSBpc0Z1bGw7XG59KShUZXh0RG9jdW1lbnRDb250ZW50Q2hhbmdlRXZlbnQgfHwgKGV4cG9ydHMuVGV4dERvY3VtZW50Q29udGVudENoYW5nZUV2ZW50ID0gVGV4dERvY3VtZW50Q29udGVudENoYW5nZUV2ZW50ID0ge30pKTtcbi8qKlxuICogVGhlIGRvY3VtZW50IGNoYW5nZSBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB0byBzaWduYWxcbiAqIGNoYW5nZXMgdG8gYSB0ZXh0IGRvY3VtZW50LlxuICovXG52YXIgRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChEaWRDaGFuZ2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24pIHtcbiAgICBEaWRDaGFuZ2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kID0gJ3RleHREb2N1bWVudC9kaWRDaGFuZ2UnO1xuICAgIERpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IERpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBkb2N1bWVudCBjbG9zZSBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB3aGVuXG4gKiB0aGUgZG9jdW1lbnQgZ290IGNsb3NlZCBpbiB0aGUgY2xpZW50LiBUaGUgZG9jdW1lbnQncyB0cnV0aCBub3cgZXhpc3RzIHdoZXJlXG4gKiB0aGUgZG9jdW1lbnQncyB1cmkgcG9pbnRzIHRvIChlLmcuIGlmIHRoZSBkb2N1bWVudCdzIHVyaSBpcyBhIGZpbGUgdXJpIHRoZVxuICogdHJ1dGggbm93IGV4aXN0cyBvbiBkaXNrKS4gQXMgd2l0aCB0aGUgb3BlbiBub3RpZmljYXRpb24gdGhlIGNsb3NlIG5vdGlmaWNhdGlvblxuICogaXMgYWJvdXQgbWFuYWdpbmcgdGhlIGRvY3VtZW50J3MgY29udGVudC4gUmVjZWl2aW5nIGEgY2xvc2Ugbm90aWZpY2F0aW9uXG4gKiBkb2Vzbid0IG1lYW4gdGhhdCB0aGUgZG9jdW1lbnQgd2FzIG9wZW4gaW4gYW4gZWRpdG9yIGJlZm9yZS4gQSBjbG9zZVxuICogbm90aWZpY2F0aW9uIHJlcXVpcmVzIGEgcHJldmlvdXMgb3BlbiBub3RpZmljYXRpb24gdG8gYmUgc2VudC5cbiAqL1xudmFyIERpZENsb3NlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChEaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbikge1xuICAgIERpZENsb3NlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZGlkQ2xvc2UnO1xuICAgIERpZENsb3NlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSBEaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBkb2N1bWVudCBzYXZlIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIHdoZW5cbiAqIHRoZSBkb2N1bWVudCBnb3Qgc2F2ZWQgaW4gdGhlIGNsaWVudC5cbiAqL1xudmFyIERpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24pIHtcbiAgICBEaWRTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZGlkU2F2ZSc7XG4gICAgRGlkU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShEaWRTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSBEaWRTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogUmVwcmVzZW50cyByZWFzb25zIHdoeSBhIHRleHQgZG9jdW1lbnQgaXMgc2F2ZWQuXG4gKi9cbnZhciBUZXh0RG9jdW1lbnRTYXZlUmVhc29uO1xuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnRTYXZlUmVhc29uKSB7XG4gICAgLyoqXG4gICAgICogTWFudWFsbHkgdHJpZ2dlcmVkLCBlLmcuIGJ5IHRoZSB1c2VyIHByZXNzaW5nIHNhdmUsIGJ5IHN0YXJ0aW5nIGRlYnVnZ2luZyxcbiAgICAgKiBvciBieSBhbiBBUEkgY2FsbC5cbiAgICAgKi9cbiAgICBUZXh0RG9jdW1lbnRTYXZlUmVhc29uLk1hbnVhbCA9IDE7XG4gICAgLyoqXG4gICAgICogQXV0b21hdGljIGFmdGVyIGEgZGVsYXkuXG4gICAgICovXG4gICAgVGV4dERvY3VtZW50U2F2ZVJlYXNvbi5BZnRlckRlbGF5ID0gMjtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRoZSBlZGl0b3IgbG9zdCBmb2N1cy5cbiAgICAgKi9cbiAgICBUZXh0RG9jdW1lbnRTYXZlUmVhc29uLkZvY3VzT3V0ID0gMztcbn0pKFRleHREb2N1bWVudFNhdmVSZWFzb24gfHwgKGV4cG9ydHMuVGV4dERvY3VtZW50U2F2ZVJlYXNvbiA9IFRleHREb2N1bWVudFNhdmVSZWFzb24gPSB7fSkpO1xuLyoqXG4gKiBBIGRvY3VtZW50IHdpbGwgc2F2ZSBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciBiZWZvcmVcbiAqIHRoZSBkb2N1bWVudCBpcyBhY3R1YWxseSBzYXZlZC5cbiAqL1xudmFyIFdpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChXaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbikge1xuICAgIFdpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvd2lsbFNhdmUnO1xuICAgIFdpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgV2lsbFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShXaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoV2lsbFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuV2lsbFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSBXaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIEEgZG9jdW1lbnQgd2lsbCBzYXZlIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciBiZWZvcmVcbiAqIHRoZSBkb2N1bWVudCBpcyBhY3R1YWxseSBzYXZlZC4gVGhlIHJlcXVlc3QgY2FuIHJldHVybiBhbiBhcnJheSBvZiBUZXh0RWRpdHNcbiAqIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgdGV4dCBkb2N1bWVudCBiZWZvcmUgaXQgaXMgc2F2ZWQuIFBsZWFzZSBub3RlIHRoYXRcbiAqIGNsaWVudHMgbWlnaHQgZHJvcCByZXN1bHRzIGlmIGNvbXB1dGluZyB0aGUgdGV4dCBlZGl0cyB0b29rIHRvbyBsb25nIG9yIGlmIGFcbiAqIHNlcnZlciBjb25zdGFudGx5IGZhaWxzIG9uIHRoaXMgcmVxdWVzdC4gVGhpcyBpcyBkb25lIHRvIGtlZXAgdGhlIHNhdmUgZmFzdCBhbmRcbiAqIHJlbGlhYmxlLlxuICovXG52YXIgV2lsbFNhdmVUZXh0RG9jdW1lbnRXYWl0VW50aWxSZXF1ZXN0O1xuKGZ1bmN0aW9uIChXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QpIHtcbiAgICBXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC93aWxsU2F2ZVdhaXRVbnRpbCc7XG4gICAgV2lsbFNhdmVUZXh0RG9jdW1lbnRXYWl0VW50aWxSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgV2lsbFNhdmVUZXh0RG9jdW1lbnRXYWl0VW50aWxSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFdpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdC5tZXRob2QpO1xufSkoV2lsbFNhdmVUZXh0RG9jdW1lbnRXYWl0VW50aWxSZXF1ZXN0IHx8IChleHBvcnRzLldpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdCA9IFdpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFRoZSB3YXRjaGVkIGZpbGVzIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIHdoZW5cbiAqIHRoZSBjbGllbnQgZGV0ZWN0cyBjaGFuZ2VzIHRvIGZpbGUgd2F0Y2hlZCBieSB0aGUgbGFuZ3VhZ2UgY2xpZW50LlxuICovXG52YXIgRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChEaWRDaGFuZ2VXYXRjaGVkRmlsZXNOb3RpZmljYXRpb24pIHtcbiAgICBEaWRDaGFuZ2VXYXRjaGVkRmlsZXNOb3RpZmljYXRpb24ubWV0aG9kID0gJ3dvcmtzcGFjZS9kaWRDaGFuZ2VXYXRjaGVkRmlsZXMnO1xuICAgIERpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbiA9IERpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBmaWxlIGV2ZW50IHR5cGVcbiAqL1xudmFyIEZpbGVDaGFuZ2VUeXBlO1xuKGZ1bmN0aW9uIChGaWxlQ2hhbmdlVHlwZSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBmaWxlIGdvdCBjcmVhdGVkLlxuICAgICAqL1xuICAgIEZpbGVDaGFuZ2VUeXBlLkNyZWF0ZWQgPSAxO1xuICAgIC8qKlxuICAgICAqIFRoZSBmaWxlIGdvdCBjaGFuZ2VkLlxuICAgICAqL1xuICAgIEZpbGVDaGFuZ2VUeXBlLkNoYW5nZWQgPSAyO1xuICAgIC8qKlxuICAgICAqIFRoZSBmaWxlIGdvdCBkZWxldGVkLlxuICAgICAqL1xuICAgIEZpbGVDaGFuZ2VUeXBlLkRlbGV0ZWQgPSAzO1xufSkoRmlsZUNoYW5nZVR5cGUgfHwgKGV4cG9ydHMuRmlsZUNoYW5nZVR5cGUgPSBGaWxlQ2hhbmdlVHlwZSA9IHt9KSk7XG52YXIgUmVsYXRpdmVQYXR0ZXJuO1xuKGZ1bmN0aW9uIChSZWxhdGl2ZVBhdHRlcm4pIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiAodnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEuVVJJLmlzKGNhbmRpZGF0ZS5iYXNlVXJpKSB8fCB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS5Xb3Jrc3BhY2VGb2xkZXIuaXMoY2FuZGlkYXRlLmJhc2VVcmkpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnBhdHRlcm4pO1xuICAgIH1cbiAgICBSZWxhdGl2ZVBhdHRlcm4uaXMgPSBpcztcbn0pKFJlbGF0aXZlUGF0dGVybiB8fCAoZXhwb3J0cy5SZWxhdGl2ZVBhdHRlcm4gPSBSZWxhdGl2ZVBhdHRlcm4gPSB7fSkpO1xudmFyIFdhdGNoS2luZDtcbihmdW5jdGlvbiAoV2F0Y2hLaW5kKSB7XG4gICAgLyoqXG4gICAgICogSW50ZXJlc3RlZCBpbiBjcmVhdGUgZXZlbnRzLlxuICAgICAqL1xuICAgIFdhdGNoS2luZC5DcmVhdGUgPSAxO1xuICAgIC8qKlxuICAgICAqIEludGVyZXN0ZWQgaW4gY2hhbmdlIGV2ZW50c1xuICAgICAqL1xuICAgIFdhdGNoS2luZC5DaGFuZ2UgPSAyO1xuICAgIC8qKlxuICAgICAqIEludGVyZXN0ZWQgaW4gZGVsZXRlIGV2ZW50c1xuICAgICAqL1xuICAgIFdhdGNoS2luZC5EZWxldGUgPSA0O1xufSkoV2F0Y2hLaW5kIHx8IChleHBvcnRzLldhdGNoS2luZCA9IFdhdGNoS2luZCA9IHt9KSk7XG4vKipcbiAqIERpYWdub3N0aWNzIG5vdGlmaWNhdGlvbiBhcmUgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBzaWduYWxcbiAqIHJlc3VsdHMgb2YgdmFsaWRhdGlvbiBydW5zLlxuICovXG52YXIgUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChQdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb24pIHtcbiAgICBQdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb24ubWV0aG9kID0gJ3RleHREb2N1bWVudC9wdWJsaXNoRGlhZ25vc3RpY3MnO1xuICAgIFB1Ymxpc2hEaWFnbm9zdGljc05vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIFB1Ymxpc2hEaWFnbm9zdGljc05vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKFB1Ymxpc2hEaWFnbm9zdGljc05vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLlB1Ymxpc2hEaWFnbm9zdGljc05vdGlmaWNhdGlvbiA9IFB1Ymxpc2hEaWFnbm9zdGljc05vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIEhvdyBhIGNvbXBsZXRpb24gd2FzIHRyaWdnZXJlZFxuICovXG52YXIgQ29tcGxldGlvblRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uVHJpZ2dlcktpbmQpIHtcbiAgICAvKipcbiAgICAgKiBDb21wbGV0aW9uIHdhcyB0cmlnZ2VyZWQgYnkgdHlwaW5nIGFuIGlkZW50aWZpZXIgKDI0eDcgY29kZVxuICAgICAqIGNvbXBsZXRlKSwgbWFudWFsIGludm9jYXRpb24gKGUuZyBDdHJsK1NwYWNlKSBvciB2aWEgQVBJLlxuICAgICAqL1xuICAgIENvbXBsZXRpb25UcmlnZ2VyS2luZC5JbnZva2VkID0gMTtcbiAgICAvKipcbiAgICAgKiBDb21wbGV0aW9uIHdhcyB0cmlnZ2VyZWQgYnkgYSB0cmlnZ2VyIGNoYXJhY3RlciBzcGVjaWZpZWQgYnlcbiAgICAgKiB0aGUgYHRyaWdnZXJDaGFyYWN0ZXJzYCBwcm9wZXJ0aWVzIG9mIHRoZSBgQ29tcGxldGlvblJlZ2lzdHJhdGlvbk9wdGlvbnNgLlxuICAgICAqL1xuICAgIENvbXBsZXRpb25UcmlnZ2VyS2luZC5UcmlnZ2VyQ2hhcmFjdGVyID0gMjtcbiAgICAvKipcbiAgICAgKiBDb21wbGV0aW9uIHdhcyByZS10cmlnZ2VyZWQgYXMgY3VycmVudCBjb21wbGV0aW9uIGxpc3QgaXMgaW5jb21wbGV0ZVxuICAgICAqL1xuICAgIENvbXBsZXRpb25UcmlnZ2VyS2luZC5UcmlnZ2VyRm9ySW5jb21wbGV0ZUNvbXBsZXRpb25zID0gMztcbn0pKENvbXBsZXRpb25UcmlnZ2VyS2luZCB8fCAoZXhwb3J0cy5Db21wbGV0aW9uVHJpZ2dlcktpbmQgPSBDb21wbGV0aW9uVHJpZ2dlcktpbmQgPSB7fSkpO1xuLyoqXG4gKiBSZXF1ZXN0IHRvIHJlcXVlc3QgY29tcGxldGlvbiBhdCBhIGdpdmVuIHRleHQgZG9jdW1lbnQgcG9zaXRpb24uIFRoZSByZXF1ZXN0J3NcbiAqIHBhcmFtZXRlciBpcyBvZiB0eXBlIHtAbGluayBUZXh0RG9jdW1lbnRQb3NpdGlvbn0gdGhlIHJlc3BvbnNlXG4gKiBpcyBvZiB0eXBlIHtAbGluayBDb21wbGV0aW9uSXRlbSBDb21wbGV0aW9uSXRlbVtdfSBvciB7QGxpbmsgQ29tcGxldGlvbkxpc3R9XG4gKiBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqXG4gKiBUaGUgcmVxdWVzdCBjYW4gZGVsYXkgdGhlIGNvbXB1dGF0aW9uIG9mIHRoZSB7QGxpbmsgQ29tcGxldGlvbkl0ZW0uZGV0YWlsIGBkZXRhaWxgfVxuICogYW5kIHtAbGluayBDb21wbGV0aW9uSXRlbS5kb2N1bWVudGF0aW9uIGBkb2N1bWVudGF0aW9uYH0gcHJvcGVydGllcyB0byB0aGUgYGNvbXBsZXRpb25JdGVtL3Jlc29sdmVgXG4gKiByZXF1ZXN0LiBIb3dldmVyLCBwcm9wZXJ0aWVzIHRoYXQgYXJlIG5lZWRlZCBmb3IgdGhlIGluaXRpYWwgc29ydGluZyBhbmQgZmlsdGVyaW5nLCBsaWtlIGBzb3J0VGV4dGAsXG4gKiBgZmlsdGVyVGV4dGAsIGBpbnNlcnRUZXh0YCwgYW5kIGB0ZXh0RWRpdGAsIG11c3Qgbm90IGJlIGNoYW5nZWQgZHVyaW5nIHJlc29sdmUuXG4gKi9cbnZhciBDb21wbGV0aW9uUmVxdWVzdDtcbihmdW5jdGlvbiAoQ29tcGxldGlvblJlcXVlc3QpIHtcbiAgICBDb21wbGV0aW9uUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2NvbXBsZXRpb24nO1xuICAgIENvbXBsZXRpb25SZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgQ29tcGxldGlvblJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ29tcGxldGlvblJlcXVlc3QubWV0aG9kKTtcbn0pKENvbXBsZXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLkNvbXBsZXRpb25SZXF1ZXN0ID0gQ29tcGxldGlvblJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBSZXF1ZXN0IHRvIHJlc29sdmUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgYSBnaXZlbiBjb21wbGV0aW9uIGl0ZW0uVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIENvbXBsZXRpb25JdGVtfSB0aGUgcmVzcG9uc2VcbiAqIGlzIG9mIHR5cGUge0BsaW5rIENvbXBsZXRpb25JdGVtfSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIENvbXBsZXRpb25SZXNvbHZlUmVxdWVzdDtcbihmdW5jdGlvbiAoQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0KSB7XG4gICAgQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0Lm1ldGhvZCA9ICdjb21wbGV0aW9uSXRlbS9yZXNvbHZlJztcbiAgICBDb21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDb21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShDb21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QgfHwgKGV4cG9ydHMuQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0ID0gQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogUmVxdWVzdCB0byByZXF1ZXN0IGhvdmVyIGluZm9ybWF0aW9uIGF0IGEgZ2l2ZW4gdGV4dCBkb2N1bWVudCBwb3NpdGlvbi4gVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIFRleHREb2N1bWVudFBvc2l0aW9ufSB0aGUgcmVzcG9uc2UgaXMgb2ZcbiAqIHR5cGUge0BsaW5rIEhvdmVyfSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIEhvdmVyUmVxdWVzdDtcbihmdW5jdGlvbiAoSG92ZXJSZXF1ZXN0KSB7XG4gICAgSG92ZXJSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvaG92ZXInO1xuICAgIEhvdmVyUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIEhvdmVyUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShIb3ZlclJlcXVlc3QubWV0aG9kKTtcbn0pKEhvdmVyUmVxdWVzdCB8fCAoZXhwb3J0cy5Ib3ZlclJlcXVlc3QgPSBIb3ZlclJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBIb3cgYSBzaWduYXR1cmUgaGVscCB3YXMgdHJpZ2dlcmVkLlxuICpcbiAqIEBzaW5jZSAzLjE1LjBcbiAqL1xudmFyIFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZDtcbihmdW5jdGlvbiAoU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kKSB7XG4gICAgLyoqXG4gICAgICogU2lnbmF0dXJlIGhlbHAgd2FzIGludm9rZWQgbWFudWFsbHkgYnkgdGhlIHVzZXIgb3IgYnkgYSBjb21tYW5kLlxuICAgICAqL1xuICAgIFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZC5JbnZva2VkID0gMTtcbiAgICAvKipcbiAgICAgKiBTaWduYXR1cmUgaGVscCB3YXMgdHJpZ2dlcmVkIGJ5IGEgdHJpZ2dlciBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kLlRyaWdnZXJDaGFyYWN0ZXIgPSAyO1xuICAgIC8qKlxuICAgICAqIFNpZ25hdHVyZSBoZWxwIHdhcyB0cmlnZ2VyZWQgYnkgdGhlIGN1cnNvciBtb3Zpbmcgb3IgYnkgdGhlIGRvY3VtZW50IGNvbnRlbnQgY2hhbmdpbmcuXG4gICAgICovXG4gICAgU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kLkNvbnRlbnRDaGFuZ2UgPSAzO1xufSkoU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kIHx8IChleHBvcnRzLlNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZCA9IFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZCA9IHt9KSk7XG52YXIgU2lnbmF0dXJlSGVscFJlcXVlc3Q7XG4oZnVuY3Rpb24gKFNpZ25hdHVyZUhlbHBSZXF1ZXN0KSB7XG4gICAgU2lnbmF0dXJlSGVscFJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9zaWduYXR1cmVIZWxwJztcbiAgICBTaWduYXR1cmVIZWxwUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFNpZ25hdHVyZUhlbHBSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFNpZ25hdHVyZUhlbHBSZXF1ZXN0Lm1ldGhvZCk7XG59KShTaWduYXR1cmVIZWxwUmVxdWVzdCB8fCAoZXhwb3J0cy5TaWduYXR1cmVIZWxwUmVxdWVzdCA9IFNpZ25hdHVyZUhlbHBSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIGRlZmluaXRpb24gbG9jYXRpb24gb2YgYSBzeW1ib2wgYXQgYSBnaXZlbiB0ZXh0XG4gKiBkb2N1bWVudCBwb3NpdGlvbi4gVGhlIHJlcXVlc3QncyBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgVGV4dERvY3VtZW50UG9zaXRpb259XG4gKiB0aGUgcmVzcG9uc2UgaXMgb2YgZWl0aGVyIHR5cGUge0BsaW5rIERlZmluaXRpb259IG9yIGEgdHlwZWQgYXJyYXkgb2ZcbiAqIHtAbGluayBEZWZpbml0aW9uTGlua30gb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBEZWZpbml0aW9uUmVxdWVzdDtcbihmdW5jdGlvbiAoRGVmaW5pdGlvblJlcXVlc3QpIHtcbiAgICBEZWZpbml0aW9uUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2RlZmluaXRpb24nO1xuICAgIERlZmluaXRpb25SZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGVmaW5pdGlvblJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoRGVmaW5pdGlvblJlcXVlc3QubWV0aG9kKTtcbn0pKERlZmluaXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLkRlZmluaXRpb25SZXF1ZXN0ID0gRGVmaW5pdGlvblJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSBwcm9qZWN0LXdpZGUgcmVmZXJlbmNlcyBmb3IgdGhlIHN5bWJvbCBkZW5vdGVkXG4gKiBieSB0aGUgZ2l2ZW4gdGV4dCBkb2N1bWVudCBwb3NpdGlvbi4gVGhlIHJlcXVlc3QncyBwYXJhbWV0ZXIgaXMgb2ZcbiAqIHR5cGUge0BsaW5rIFJlZmVyZW5jZVBhcmFtc30gdGhlIHJlc3BvbnNlIGlzIG9mIHR5cGVcbiAqIHtAbGluayBMb2NhdGlvbiBMb2NhdGlvbltdfSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIFJlZmVyZW5jZXNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChSZWZlcmVuY2VzUmVxdWVzdCkge1xuICAgIFJlZmVyZW5jZXNSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvcmVmZXJlbmNlcyc7XG4gICAgUmVmZXJlbmNlc1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBSZWZlcmVuY2VzUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShSZWZlcmVuY2VzUmVxdWVzdC5tZXRob2QpO1xufSkoUmVmZXJlbmNlc1JlcXVlc3QgfHwgKGV4cG9ydHMuUmVmZXJlbmNlc1JlcXVlc3QgPSBSZWZlcmVuY2VzUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFJlcXVlc3QgdG8gcmVzb2x2ZSBhIHtAbGluayBEb2N1bWVudEhpZ2hsaWdodH0gZm9yIGEgZ2l2ZW5cbiAqIHRleHQgZG9jdW1lbnQgcG9zaXRpb24uIFRoZSByZXF1ZXN0J3MgcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIFRleHREb2N1bWVudFBvc2l0aW9ufVxuICogdGhlIHJlcXVlc3QgcmVzcG9uc2UgaXMgYW4gYXJyYXkgb2YgdHlwZSB7QGxpbmsgRG9jdW1lbnRIaWdobGlnaHR9XG4gKiBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIERvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdDtcbihmdW5jdGlvbiAoRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0KSB7XG4gICAgRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRIaWdobGlnaHQnO1xuICAgIERvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShEb2N1bWVudEhpZ2hsaWdodFJlcXVlc3QubWV0aG9kKTtcbn0pKERvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdCB8fCAoZXhwb3J0cy5Eb2N1bWVudEhpZ2hsaWdodFJlcXVlc3QgPSBEb2N1bWVudEhpZ2hsaWdodFJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gbGlzdCBhbGwgc3ltYm9scyBmb3VuZCBpbiBhIGdpdmVuIHRleHQgZG9jdW1lbnQuIFRoZSByZXF1ZXN0J3NcbiAqIHBhcmFtZXRlciBpcyBvZiB0eXBlIHtAbGluayBUZXh0RG9jdW1lbnRJZGVudGlmaWVyfSB0aGVcbiAqIHJlc3BvbnNlIGlzIG9mIHR5cGUge0BsaW5rIFN5bWJvbEluZm9ybWF0aW9uIFN5bWJvbEluZm9ybWF0aW9uW119IG9yIGEgVGhlbmFibGVcbiAqIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIERvY3VtZW50U3ltYm9sUmVxdWVzdDtcbihmdW5jdGlvbiAoRG9jdW1lbnRTeW1ib2xSZXF1ZXN0KSB7XG4gICAgRG9jdW1lbnRTeW1ib2xSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRTeW1ib2wnO1xuICAgIERvY3VtZW50U3ltYm9sUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERvY3VtZW50U3ltYm9sUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShEb2N1bWVudFN5bWJvbFJlcXVlc3QubWV0aG9kKTtcbn0pKERvY3VtZW50U3ltYm9sUmVxdWVzdCB8fCAoZXhwb3J0cy5Eb2N1bWVudFN5bWJvbFJlcXVlc3QgPSBEb2N1bWVudFN5bWJvbFJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcHJvdmlkZSBjb21tYW5kcyBmb3IgdGhlIGdpdmVuIHRleHQgZG9jdW1lbnQgYW5kIHJhbmdlLlxuICovXG52YXIgQ29kZUFjdGlvblJlcXVlc3Q7XG4oZnVuY3Rpb24gKENvZGVBY3Rpb25SZXF1ZXN0KSB7XG4gICAgQ29kZUFjdGlvblJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9jb2RlQWN0aW9uJztcbiAgICBDb2RlQWN0aW9uUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIENvZGVBY3Rpb25SZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKENvZGVBY3Rpb25SZXF1ZXN0Lm1ldGhvZCk7XG59KShDb2RlQWN0aW9uUmVxdWVzdCB8fCAoZXhwb3J0cy5Db2RlQWN0aW9uUmVxdWVzdCA9IENvZGVBY3Rpb25SZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogUmVxdWVzdCB0byByZXNvbHZlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gZm9yIGEgZ2l2ZW4gY29kZSBhY3Rpb24uVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIENvZGVBY3Rpb259IHRoZSByZXNwb25zZVxuICogaXMgb2YgdHlwZSB7QGxpbmsgQ29kZUFjdGlvbn0gb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBDb2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKENvZGVBY3Rpb25SZXNvbHZlUmVxdWVzdCkge1xuICAgIENvZGVBY3Rpb25SZXNvbHZlUmVxdWVzdC5tZXRob2QgPSAnY29kZUFjdGlvbi9yZXNvbHZlJztcbiAgICBDb2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDb2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ29kZUFjdGlvblJlc29sdmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShDb2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QgfHwgKGV4cG9ydHMuQ29kZUFjdGlvblJlc29sdmVSZXF1ZXN0ID0gQ29kZUFjdGlvblJlc29sdmVSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIGxpc3QgcHJvamVjdC13aWRlIHN5bWJvbHMgbWF0Y2hpbmcgdGhlIHF1ZXJ5IHN0cmluZyBnaXZlblxuICogYnkgdGhlIHtAbGluayBXb3Jrc3BhY2VTeW1ib2xQYXJhbXN9LiBUaGUgcmVzcG9uc2UgaXNcbiAqIG9mIHR5cGUge0BsaW5rIFN5bWJvbEluZm9ybWF0aW9uIFN5bWJvbEluZm9ybWF0aW9uW119IG9yIGEgVGhlbmFibGUgdGhhdFxuICogcmVzb2x2ZXMgdG8gc3VjaC5cbiAqXG4gKiBAc2luY2UgMy4xNy4wIC0gc3VwcG9ydCBmb3IgV29ya3NwYWNlU3ltYm9sIGluIHRoZSByZXR1cm5lZCBkYXRhLiBDbGllbnRzXG4gKiAgbmVlZCB0byBhZHZlcnRpc2Ugc3VwcG9ydCBmb3IgV29ya3NwYWNlU3ltYm9scyB2aWEgdGhlIGNsaWVudCBjYXBhYmlsaXR5XG4gKiAgYHdvcmtzcGFjZS5zeW1ib2wucmVzb2x2ZVN1cHBvcnRgLlxuICpcbiAqL1xudmFyIFdvcmtzcGFjZVN5bWJvbFJlcXVlc3Q7XG4oZnVuY3Rpb24gKFdvcmtzcGFjZVN5bWJvbFJlcXVlc3QpIHtcbiAgICBXb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0Lm1ldGhvZCA9ICd3b3Jrc3BhY2Uvc3ltYm9sJztcbiAgICBXb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgV29ya3NwYWNlU3ltYm9sUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShXb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0Lm1ldGhvZCk7XG59KShXb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0IHx8IChleHBvcnRzLldvcmtzcGFjZVN5bWJvbFJlcXVlc3QgPSBXb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIHJhbmdlIGluc2lkZSB0aGUgd29ya3NwYWNlXG4gKiBzeW1ib2wncyBsb2NhdGlvbi5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBXb3Jrc3BhY2VTeW1ib2xSZXNvbHZlUmVxdWVzdDtcbihmdW5jdGlvbiAoV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QpIHtcbiAgICBXb3Jrc3BhY2VTeW1ib2xSZXNvbHZlUmVxdWVzdC5tZXRob2QgPSAnd29ya3NwYWNlU3ltYm9sL3Jlc29sdmUnO1xuICAgIFdvcmtzcGFjZVN5bWJvbFJlc29sdmVSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QubWV0aG9kKTtcbn0pKFdvcmtzcGFjZVN5bWJvbFJlc29sdmVSZXF1ZXN0IHx8IChleHBvcnRzLldvcmtzcGFjZVN5bWJvbFJlc29sdmVSZXF1ZXN0ID0gV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcHJvdmlkZSBjb2RlIGxlbnMgZm9yIHRoZSBnaXZlbiB0ZXh0IGRvY3VtZW50LlxuICovXG52YXIgQ29kZUxlbnNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChDb2RlTGVuc1JlcXVlc3QpIHtcbiAgICBDb2RlTGVuc1JlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9jb2RlTGVucyc7XG4gICAgQ29kZUxlbnNSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgQ29kZUxlbnNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKENvZGVMZW5zUmVxdWVzdC5tZXRob2QpO1xufSkoQ29kZUxlbnNSZXF1ZXN0IHx8IChleHBvcnRzLkNvZGVMZW5zUmVxdWVzdCA9IENvZGVMZW5zUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byByZXNvbHZlIGEgY29tbWFuZCBmb3IgYSBnaXZlbiBjb2RlIGxlbnMuXG4gKi9cbnZhciBDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0O1xuKGZ1bmN0aW9uIChDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0KSB7XG4gICAgQ29kZUxlbnNSZXNvbHZlUmVxdWVzdC5tZXRob2QgPSAnY29kZUxlbnMvcmVzb2x2ZSc7XG4gICAgQ29kZUxlbnNSZXNvbHZlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIENvZGVMZW5zUmVzb2x2ZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ29kZUxlbnNSZXNvbHZlUmVxdWVzdC5tZXRob2QpO1xufSkoQ29kZUxlbnNSZXNvbHZlUmVxdWVzdCB8fCAoZXhwb3J0cy5Db2RlTGVuc1Jlc29sdmVSZXF1ZXN0ID0gQ29kZUxlbnNSZXNvbHZlUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byByZWZyZXNoIGFsbCBjb2RlIGFjdGlvbnNcbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBDb2RlTGVuc1JlZnJlc2hSZXF1ZXN0O1xuKGZ1bmN0aW9uIChDb2RlTGVuc1JlZnJlc2hSZXF1ZXN0KSB7XG4gICAgQ29kZUxlbnNSZWZyZXNoUmVxdWVzdC5tZXRob2QgPSBgd29ya3NwYWNlL2NvZGVMZW5zL3JlZnJlc2hgO1xuICAgIENvZGVMZW5zUmVmcmVzaFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBDb2RlTGVuc1JlZnJlc2hSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlMChDb2RlTGVuc1JlZnJlc2hSZXF1ZXN0Lm1ldGhvZCk7XG59KShDb2RlTGVuc1JlZnJlc2hSZXF1ZXN0IHx8IChleHBvcnRzLkNvZGVMZW5zUmVmcmVzaFJlcXVlc3QgPSBDb2RlTGVuc1JlZnJlc2hSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHByb3ZpZGUgZG9jdW1lbnQgbGlua3NcbiAqL1xudmFyIERvY3VtZW50TGlua1JlcXVlc3Q7XG4oZnVuY3Rpb24gKERvY3VtZW50TGlua1JlcXVlc3QpIHtcbiAgICBEb2N1bWVudExpbmtSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRMaW5rJztcbiAgICBEb2N1bWVudExpbmtSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRG9jdW1lbnRMaW5rUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShEb2N1bWVudExpbmtSZXF1ZXN0Lm1ldGhvZCk7XG59KShEb2N1bWVudExpbmtSZXF1ZXN0IHx8IChleHBvcnRzLkRvY3VtZW50TGlua1JlcXVlc3QgPSBEb2N1bWVudExpbmtSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogUmVxdWVzdCB0byByZXNvbHZlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gZm9yIGEgZ2l2ZW4gZG9jdW1lbnQgbGluay4gVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIERvY3VtZW50TGlua30gdGhlIHJlc3BvbnNlXG4gKiBpcyBvZiB0eXBlIHtAbGluayBEb2N1bWVudExpbmt9IG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgRG9jdW1lbnRMaW5rUmVzb2x2ZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKERvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0KSB7XG4gICAgRG9jdW1lbnRMaW5rUmVzb2x2ZVJlcXVlc3QubWV0aG9kID0gJ2RvY3VtZW50TGluay9yZXNvbHZlJztcbiAgICBEb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShEb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdCB8fCAoZXhwb3J0cy5Eb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdCA9IERvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIGZvcm1hdCBhIHdob2xlIGRvY3VtZW50LlxuICovXG52YXIgRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdDtcbihmdW5jdGlvbiAoRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdCkge1xuICAgIERvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9mb3JtYXR0aW5nJztcbiAgICBEb2N1bWVudEZvcm1hdHRpbmdSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShEb2N1bWVudEZvcm1hdHRpbmdSZXF1ZXN0Lm1ldGhvZCk7XG59KShEb2N1bWVudEZvcm1hdHRpbmdSZXF1ZXN0IHx8IChleHBvcnRzLkRvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3QgPSBEb2N1bWVudEZvcm1hdHRpbmdSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIGZvcm1hdCBhIHJhbmdlIGluIGEgZG9jdW1lbnQuXG4gKi9cbnZhciBEb2N1bWVudFJhbmdlRm9ybWF0dGluZ1JlcXVlc3Q7XG4oZnVuY3Rpb24gKERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdCkge1xuICAgIERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3JhbmdlRm9ybWF0dGluZyc7XG4gICAgRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdC5tZXRob2QpO1xufSkoRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0IHx8IChleHBvcnRzLkRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdCA9IERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBmb3JtYXQgcmFuZ2VzIGluIGEgZG9jdW1lbnQuXG4gKlxuICogQHNpbmNlIDMuMTguMFxuICogQHByb3Bvc2VkXG4gKi9cbnZhciBEb2N1bWVudFJhbmdlc0Zvcm1hdHRpbmdSZXF1ZXN0O1xuKGZ1bmN0aW9uIChEb2N1bWVudFJhbmdlc0Zvcm1hdHRpbmdSZXF1ZXN0KSB7XG4gICAgRG9jdW1lbnRSYW5nZXNGb3JtYXR0aW5nUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3Jhbmdlc0Zvcm1hdHRpbmcnO1xuICAgIERvY3VtZW50UmFuZ2VzRm9ybWF0dGluZ1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEb2N1bWVudFJhbmdlc0Zvcm1hdHRpbmdSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50UmFuZ2VzRm9ybWF0dGluZ1JlcXVlc3QubWV0aG9kKTtcbn0pKERvY3VtZW50UmFuZ2VzRm9ybWF0dGluZ1JlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRSYW5nZXNGb3JtYXR0aW5nUmVxdWVzdCA9IERvY3VtZW50UmFuZ2VzRm9ybWF0dGluZ1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gZm9ybWF0IGEgZG9jdW1lbnQgb24gdHlwZS5cbiAqL1xudmFyIERvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3Q7XG4oZnVuY3Rpb24gKERvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QpIHtcbiAgICBEb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvb25UeXBlRm9ybWF0dGluZyc7XG4gICAgRG9jdW1lbnRPblR5cGVGb3JtYXR0aW5nUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoRG9jdW1lbnRPblR5cGVGb3JtYXR0aW5nUmVxdWVzdC5tZXRob2QpO1xufSkoRG9jdW1lbnRPblR5cGVGb3JtYXR0aW5nUmVxdWVzdCB8fCAoZXhwb3J0cy5Eb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0ID0gRG9jdW1lbnRPblR5cGVGb3JtYXR0aW5nUmVxdWVzdCA9IHt9KSk7XG4vLy0tLS0gUmVuYW1lIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnZhciBQcmVwYXJlU3VwcG9ydERlZmF1bHRCZWhhdmlvcjtcbihmdW5jdGlvbiAoUHJlcGFyZVN1cHBvcnREZWZhdWx0QmVoYXZpb3IpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY2xpZW50J3MgZGVmYXVsdCBiZWhhdmlvciBpcyB0byBzZWxlY3QgdGhlIGlkZW50aWZpZXJcbiAgICAgKiBhY2NvcmRpbmcgdGhlIHRvIGxhbmd1YWdlJ3Mgc3ludGF4IHJ1bGUuXG4gICAgICovXG4gICAgUHJlcGFyZVN1cHBvcnREZWZhdWx0QmVoYXZpb3IuSWRlbnRpZmllciA9IDE7XG59KShQcmVwYXJlU3VwcG9ydERlZmF1bHRCZWhhdmlvciB8fCAoZXhwb3J0cy5QcmVwYXJlU3VwcG9ydERlZmF1bHRCZWhhdmlvciA9IFByZXBhcmVTdXBwb3J0RGVmYXVsdEJlaGF2aW9yID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlbmFtZSBhIHN5bWJvbC5cbiAqL1xudmFyIFJlbmFtZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKFJlbmFtZVJlcXVlc3QpIHtcbiAgICBSZW5hbWVSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvcmVuYW1lJztcbiAgICBSZW5hbWVSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgUmVuYW1lUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShSZW5hbWVSZXF1ZXN0Lm1ldGhvZCk7XG59KShSZW5hbWVSZXF1ZXN0IHx8IChleHBvcnRzLlJlbmFtZVJlcXVlc3QgPSBSZW5hbWVSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHRlc3QgYW5kIHBlcmZvcm0gdGhlIHNldHVwIG5lY2Vzc2FyeSBmb3IgYSByZW5hbWUuXG4gKlxuICogQHNpbmNlIDMuMTYgLSBzdXBwb3J0IGZvciBkZWZhdWx0IGJlaGF2aW9yXG4gKi9cbnZhciBQcmVwYXJlUmVuYW1lUmVxdWVzdDtcbihmdW5jdGlvbiAoUHJlcGFyZVJlbmFtZVJlcXVlc3QpIHtcbiAgICBQcmVwYXJlUmVuYW1lUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3ByZXBhcmVSZW5hbWUnO1xuICAgIFByZXBhcmVSZW5hbWVSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgUHJlcGFyZVJlbmFtZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoUHJlcGFyZVJlbmFtZVJlcXVlc3QubWV0aG9kKTtcbn0pKFByZXBhcmVSZW5hbWVSZXF1ZXN0IHx8IChleHBvcnRzLlByZXBhcmVSZW5hbWVSZXF1ZXN0ID0gUHJlcGFyZVJlbmFtZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3Qgc2VuZCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB0byBleGVjdXRlIGEgY29tbWFuZC4gVGhlIHJlcXVlc3QgbWlnaHQgcmV0dXJuXG4gKiBhIHdvcmtzcGFjZSBlZGl0IHdoaWNoIHRoZSBjbGllbnQgd2lsbCBhcHBseSB0byB0aGUgd29ya3NwYWNlLlxuICovXG52YXIgRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0O1xuKGZ1bmN0aW9uIChFeGVjdXRlQ29tbWFuZFJlcXVlc3QpIHtcbiAgICBFeGVjdXRlQ29tbWFuZFJlcXVlc3QubWV0aG9kID0gJ3dvcmtzcGFjZS9leGVjdXRlQ29tbWFuZCc7XG4gICAgRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKEV4ZWN1dGVDb21tYW5kUmVxdWVzdC5tZXRob2QpO1xufSkoRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0IHx8IChleHBvcnRzLkV4ZWN1dGVDb21tYW5kUmVxdWVzdCA9IEV4ZWN1dGVDb21tYW5kUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IHRvIG1vZGlmaWVkIGNlcnRhaW4gcmVzb3VyY2VzLlxuICovXG52YXIgQXBwbHlXb3Jrc3BhY2VFZGl0UmVxdWVzdDtcbihmdW5jdGlvbiAoQXBwbHlXb3Jrc3BhY2VFZGl0UmVxdWVzdCkge1xuICAgIEFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QubWV0aG9kID0gJ3dvcmtzcGFjZS9hcHBseUVkaXQnO1xuICAgIEFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBBcHBseVdvcmtzcGFjZUVkaXRSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKCd3b3Jrc3BhY2UvYXBwbHlFZGl0Jyk7XG59KShBcHBseVdvcmtzcGFjZUVkaXRSZXF1ZXN0IHx8IChleHBvcnRzLkFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QgPSBBcHBseVdvcmtzcGFjZUVkaXRSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjI0OTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkxpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHByb3ZpZGUgcmFuZ2VzIHRoYXQgY2FuIGJlIGVkaXRlZCB0b2dldGhlci5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBMaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0O1xuKGZ1bmN0aW9uIChMaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0KSB7XG4gICAgTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2xpbmtlZEVkaXRpbmdSYW5nZSc7XG4gICAgTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIExpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdC5tZXRob2QpO1xufSkoTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdCB8fCAoZXhwb3J0cy5MaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0ID0gTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDc2ODQ6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuTW9uaWtlclJlcXVlc3QgPSBleHBvcnRzLk1vbmlrZXJLaW5kID0gZXhwb3J0cy5VbmlxdWVuZXNzTGV2ZWwgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogTW9uaWtlciB1bmlxdWVuZXNzIGxldmVsIHRvIGRlZmluZSBzY29wZSBvZiB0aGUgbW9uaWtlci5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBVbmlxdWVuZXNzTGV2ZWw7XG4oZnVuY3Rpb24gKFVuaXF1ZW5lc3NMZXZlbCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBtb25pa2VyIGlzIG9ubHkgdW5pcXVlIGluc2lkZSBhIGRvY3VtZW50XG4gICAgICovXG4gICAgVW5pcXVlbmVzc0xldmVsLmRvY3VtZW50ID0gJ2RvY3VtZW50JztcbiAgICAvKipcbiAgICAgKiBUaGUgbW9uaWtlciBpcyB1bmlxdWUgaW5zaWRlIGEgcHJvamVjdCBmb3Igd2hpY2ggYSBkdW1wIGdvdCBjcmVhdGVkXG4gICAgICovXG4gICAgVW5pcXVlbmVzc0xldmVsLnByb2plY3QgPSAncHJvamVjdCc7XG4gICAgLyoqXG4gICAgICogVGhlIG1vbmlrZXIgaXMgdW5pcXVlIGluc2lkZSB0aGUgZ3JvdXAgdG8gd2hpY2ggYSBwcm9qZWN0IGJlbG9uZ3NcbiAgICAgKi9cbiAgICBVbmlxdWVuZXNzTGV2ZWwuZ3JvdXAgPSAnZ3JvdXAnO1xuICAgIC8qKlxuICAgICAqIFRoZSBtb25pa2VyIGlzIHVuaXF1ZSBpbnNpZGUgdGhlIG1vbmlrZXIgc2NoZW1lLlxuICAgICAqL1xuICAgIFVuaXF1ZW5lc3NMZXZlbC5zY2hlbWUgPSAnc2NoZW1lJztcbiAgICAvKipcbiAgICAgKiBUaGUgbW9uaWtlciBpcyBnbG9iYWxseSB1bmlxdWVcbiAgICAgKi9cbiAgICBVbmlxdWVuZXNzTGV2ZWwuZ2xvYmFsID0gJ2dsb2JhbCc7XG59KShVbmlxdWVuZXNzTGV2ZWwgfHwgKGV4cG9ydHMuVW5pcXVlbmVzc0xldmVsID0gVW5pcXVlbmVzc0xldmVsID0ge30pKTtcbi8qKlxuICogVGhlIG1vbmlrZXIga2luZC5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBNb25pa2VyS2luZDtcbihmdW5jdGlvbiAoTW9uaWtlcktpbmQpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbW9uaWtlciByZXByZXNlbnQgYSBzeW1ib2wgdGhhdCBpcyBpbXBvcnRlZCBpbnRvIGEgcHJvamVjdFxuICAgICAqL1xuICAgIE1vbmlrZXJLaW5kLiRpbXBvcnQgPSAnaW1wb3J0JztcbiAgICAvKipcbiAgICAgKiBUaGUgbW9uaWtlciByZXByZXNlbnRzIGEgc3ltYm9sIHRoYXQgaXMgZXhwb3J0ZWQgZnJvbSBhIHByb2plY3RcbiAgICAgKi9cbiAgICBNb25pa2VyS2luZC4kZXhwb3J0ID0gJ2V4cG9ydCc7XG4gICAgLyoqXG4gICAgICogVGhlIG1vbmlrZXIgcmVwcmVzZW50cyBhIHN5bWJvbCB0aGF0IGlzIGxvY2FsIHRvIGEgcHJvamVjdCAoZS5nLiBhIGxvY2FsXG4gICAgICogdmFyaWFibGUgb2YgYSBmdW5jdGlvbiwgYSBjbGFzcyBub3QgdmlzaWJsZSBvdXRzaWRlIHRoZSBwcm9qZWN0LCAuLi4pXG4gICAgICovXG4gICAgTW9uaWtlcktpbmQubG9jYWwgPSAnbG9jYWwnO1xufSkoTW9uaWtlcktpbmQgfHwgKGV4cG9ydHMuTW9uaWtlcktpbmQgPSBNb25pa2VyS2luZCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBnZXQgdGhlIG1vbmlrZXIgb2YgYSBzeW1ib2wgYXQgYSBnaXZlbiB0ZXh0IGRvY3VtZW50IHBvc2l0aW9uLlxuICogVGhlIHJlcXVlc3QgcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIFRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zfS5cbiAqIFRoZSByZXNwb25zZSBpcyBvZiB0eXBlIHtAbGluayBNb25pa2VyIE1vbmlrZXJbXX0gb3IgYG51bGxgLlxuICovXG52YXIgTW9uaWtlclJlcXVlc3Q7XG4oZnVuY3Rpb24gKE1vbmlrZXJSZXF1ZXN0KSB7XG4gICAgTW9uaWtlclJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9tb25pa2VyJztcbiAgICBNb25pa2VyUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIE1vbmlrZXJSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKE1vbmlrZXJSZXF1ZXN0Lm1ldGhvZCk7XG59KShNb25pa2VyUmVxdWVzdCB8fCAoZXhwb3J0cy5Nb25pa2VyUmVxdWVzdCA9IE1vbmlrZXJSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDc5Mjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5EaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5Ob3RlYm9va0NlbGxBcnJheUNoYW5nZSA9IGV4cG9ydHMuRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLk5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZSA9IGV4cG9ydHMuTm90ZWJvb2tEb2N1bWVudCA9IGV4cG9ydHMuTm90ZWJvb2tDZWxsID0gZXhwb3J0cy5FeGVjdXRpb25TdW1tYXJ5ID0gZXhwb3J0cy5Ob3RlYm9va0NlbGxLaW5kID0gdm9pZCAwO1xuY29uc3QgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4NTIpO1xuY29uc3QgSXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2MzMpO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgbm90ZWJvb2sgY2VsbCBraW5kLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIE5vdGVib29rQ2VsbEtpbmQ7XG4oZnVuY3Rpb24gKE5vdGVib29rQ2VsbEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBBIG1hcmt1cC1jZWxsIGlzIGZvcm1hdHRlZCBzb3VyY2UgdGhhdCBpcyB1c2VkIGZvciBkaXNwbGF5LlxuICAgICAqL1xuICAgIE5vdGVib29rQ2VsbEtpbmQuTWFya3VwID0gMTtcbiAgICAvKipcbiAgICAgKiBBIGNvZGUtY2VsbCBpcyBzb3VyY2UgY29kZS5cbiAgICAgKi9cbiAgICBOb3RlYm9va0NlbGxLaW5kLkNvZGUgPSAyO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMSB8fCB2YWx1ZSA9PT0gMjtcbiAgICB9XG4gICAgTm90ZWJvb2tDZWxsS2luZC5pcyA9IGlzO1xufSkoTm90ZWJvb2tDZWxsS2luZCB8fCAoZXhwb3J0cy5Ob3RlYm9va0NlbGxLaW5kID0gTm90ZWJvb2tDZWxsS2luZCA9IHt9KSk7XG52YXIgRXhlY3V0aW9uU3VtbWFyeTtcbihmdW5jdGlvbiAoRXhlY3V0aW9uU3VtbWFyeSkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShleGVjdXRpb25PcmRlciwgc3VjY2Vzcykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7IGV4ZWN1dGlvbk9yZGVyIH07XG4gICAgICAgIGlmIChzdWNjZXNzID09PSB0cnVlIHx8IHN1Y2Nlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXN1bHQuc3VjY2VzcyA9IHN1Y2Nlc3M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgRXhlY3V0aW9uU3VtbWFyeS5jcmVhdGUgPSBjcmVhdGU7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEudWludGVnZXIuaXMoY2FuZGlkYXRlLmV4ZWN1dGlvbk9yZGVyKSAmJiAoY2FuZGlkYXRlLnN1Y2Nlc3MgPT09IHVuZGVmaW5lZCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5zdWNjZXNzKSk7XG4gICAgfVxuICAgIEV4ZWN1dGlvblN1bW1hcnkuaXMgPSBpcztcbiAgICBmdW5jdGlvbiBlcXVhbHMob25lLCBvdGhlcikge1xuICAgICAgICBpZiAob25lID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9uZSA9PT0gbnVsbCB8fCBvbmUgPT09IHVuZGVmaW5lZCB8fCBvdGhlciA9PT0gbnVsbCB8fCBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9uZS5leGVjdXRpb25PcmRlciA9PT0gb3RoZXIuZXhlY3V0aW9uT3JkZXIgJiYgb25lLnN1Y2Nlc3MgPT09IG90aGVyLnN1Y2Nlc3M7XG4gICAgfVxuICAgIEV4ZWN1dGlvblN1bW1hcnkuZXF1YWxzID0gZXF1YWxzO1xufSkoRXhlY3V0aW9uU3VtbWFyeSB8fCAoZXhwb3J0cy5FeGVjdXRpb25TdW1tYXJ5ID0gRXhlY3V0aW9uU3VtbWFyeSA9IHt9KSk7XG52YXIgTm90ZWJvb2tDZWxsO1xuKGZ1bmN0aW9uIChOb3RlYm9va0NlbGwpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUoa2luZCwgZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHsga2luZCwgZG9jdW1lbnQgfTtcbiAgICB9XG4gICAgTm90ZWJvb2tDZWxsLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBOb3RlYm9va0NlbGxLaW5kLmlzKGNhbmRpZGF0ZS5raW5kKSAmJiB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS5Eb2N1bWVudFVyaS5pcyhjYW5kaWRhdGUuZG9jdW1lbnQpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLm1ldGFkYXRhID09PSB1bmRlZmluZWQgfHwgSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUubWV0YWRhdGEpKTtcbiAgICB9XG4gICAgTm90ZWJvb2tDZWxsLmlzID0gaXM7XG4gICAgZnVuY3Rpb24gZGlmZihvbmUsIHR3bykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgU2V0KCk7XG4gICAgICAgIGlmIChvbmUuZG9jdW1lbnQgIT09IHR3by5kb2N1bWVudCkge1xuICAgICAgICAgICAgcmVzdWx0LmFkZCgnZG9jdW1lbnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob25lLmtpbmQgIT09IHR3by5raW5kKSB7XG4gICAgICAgICAgICByZXN1bHQuYWRkKCdraW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9uZS5leGVjdXRpb25TdW1tYXJ5ICE9PSB0d28uZXhlY3V0aW9uU3VtbWFyeSkge1xuICAgICAgICAgICAgcmVzdWx0LmFkZCgnZXhlY3V0aW9uU3VtbWFyeScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgob25lLm1ldGFkYXRhICE9PSB1bmRlZmluZWQgfHwgdHdvLm1ldGFkYXRhICE9PSB1bmRlZmluZWQpICYmICFlcXVhbHNNZXRhZGF0YShvbmUubWV0YWRhdGEsIHR3by5tZXRhZGF0YSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hZGQoJ21ldGFkYXRhJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChvbmUuZXhlY3V0aW9uU3VtbWFyeSAhPT0gdW5kZWZpbmVkIHx8IHR3by5leGVjdXRpb25TdW1tYXJ5ICE9PSB1bmRlZmluZWQpICYmICFFeGVjdXRpb25TdW1tYXJ5LmVxdWFscyhvbmUuZXhlY3V0aW9uU3VtbWFyeSwgdHdvLmV4ZWN1dGlvblN1bW1hcnkpKSB7XG4gICAgICAgICAgICByZXN1bHQuYWRkKCdleGVjdXRpb25TdW1tYXJ5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgTm90ZWJvb2tDZWxsLmRpZmYgPSBkaWZmO1xuICAgIGZ1bmN0aW9uIGVxdWFsc01ldGFkYXRhKG9uZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKG9uZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbmUgPT09IG51bGwgfHwgb25lID09PSB1bmRlZmluZWQgfHwgb3RoZXIgPT09IG51bGwgfHwgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb25lICE9PSB0eXBlb2Ygb3RoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9uZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvbmVBcnJheSA9IEFycmF5LmlzQXJyYXkob25lKTtcbiAgICAgICAgY29uc3Qgb3RoZXJBcnJheSA9IEFycmF5LmlzQXJyYXkob3RoZXIpO1xuICAgICAgICBpZiAob25lQXJyYXkgIT09IG90aGVyQXJyYXkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob25lQXJyYXkgJiYgb3RoZXJBcnJheSkge1xuICAgICAgICAgICAgaWYgKG9uZS5sZW5ndGggIT09IG90aGVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb25lLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcXVhbHNNZXRhZGF0YShvbmVbaV0sIG90aGVyW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChJcy5vYmplY3RMaXRlcmFsKG9uZSkgJiYgSXMub2JqZWN0TGl0ZXJhbChvdGhlcikpIHtcbiAgICAgICAgICAgIGNvbnN0IG9uZUtleXMgPSBPYmplY3Qua2V5cyhvbmUpO1xuICAgICAgICAgICAgY29uc3Qgb3RoZXJLZXlzID0gT2JqZWN0LmtleXMob3RoZXIpO1xuICAgICAgICAgICAgaWYgKG9uZUtleXMubGVuZ3RoICE9PSBvdGhlcktleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25lS2V5cy5zb3J0KCk7XG4gICAgICAgICAgICBvdGhlcktleXMuc29ydCgpO1xuICAgICAgICAgICAgaWYgKCFlcXVhbHNNZXRhZGF0YShvbmVLZXlzLCBvdGhlcktleXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvbmVLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcCA9IG9uZUtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFlcXVhbHNNZXRhZGF0YShvbmVbcHJvcF0sIG90aGVyW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn0pKE5vdGVib29rQ2VsbCB8fCAoZXhwb3J0cy5Ob3RlYm9va0NlbGwgPSBOb3RlYm9va0NlbGwgPSB7fSkpO1xudmFyIE5vdGVib29rRG9jdW1lbnQ7XG4oZnVuY3Rpb24gKE5vdGVib29rRG9jdW1lbnQpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUodXJpLCBub3RlYm9va1R5cGUsIHZlcnNpb24sIGNlbGxzKSB7XG4gICAgICAgIHJldHVybiB7IHVyaSwgbm90ZWJvb2tUeXBlLCB2ZXJzaW9uLCBjZWxscyB9O1xuICAgIH1cbiAgICBOb3RlYm9va0RvY3VtZW50LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEuaW50ZWdlci5pcyhjYW5kaWRhdGUudmVyc2lvbikgJiYgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuY2VsbHMsIE5vdGVib29rQ2VsbC5pcyk7XG4gICAgfVxuICAgIE5vdGVib29rRG9jdW1lbnQuaXMgPSBpcztcbn0pKE5vdGVib29rRG9jdW1lbnQgfHwgKGV4cG9ydHMuTm90ZWJvb2tEb2N1bWVudCA9IE5vdGVib29rRG9jdW1lbnQgPSB7fSkpO1xudmFyIE5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZTtcbihmdW5jdGlvbiAoTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlKSB7XG4gICAgTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlLm1ldGhvZCA9ICdub3RlYm9va0RvY3VtZW50L3N5bmMnO1xuICAgIE5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZS5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIE5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZS50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUmVnaXN0cmF0aW9uVHlwZShOb3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGUubWV0aG9kKTtcbn0pKE5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZSB8fCAoZXhwb3J0cy5Ob3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGUgPSBOb3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGUgPSB7fSkpO1xuLyoqXG4gKiBBIG5vdGlmaWNhdGlvbiBzZW50IHdoZW4gYSBub3RlYm9vayBvcGVucy5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBEaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24pIHtcbiAgICBEaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5tZXRob2QgPSAnbm90ZWJvb2tEb2N1bWVudC9kaWRPcGVuJztcbiAgICBEaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kKTtcbiAgICBEaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5yZWdpc3RyYXRpb25NZXRob2QgPSBOb3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGUubWV0aG9kO1xufSkoRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBEaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IHt9KSk7XG52YXIgTm90ZWJvb2tDZWxsQXJyYXlDaGFuZ2U7XG4oZnVuY3Rpb24gKE5vdGVib29rQ2VsbEFycmF5Q2hhbmdlKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEudWludGVnZXIuaXMoY2FuZGlkYXRlLnN0YXJ0KSAmJiB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS51aW50ZWdlci5pcyhjYW5kaWRhdGUuZGVsZXRlQ291bnQpICYmIChjYW5kaWRhdGUuY2VsbHMgPT09IHVuZGVmaW5lZCB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5jZWxscywgTm90ZWJvb2tDZWxsLmlzKSk7XG4gICAgfVxuICAgIE5vdGVib29rQ2VsbEFycmF5Q2hhbmdlLmlzID0gaXM7XG4gICAgZnVuY3Rpb24gY3JlYXRlKHN0YXJ0LCBkZWxldGVDb3VudCwgY2VsbHMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0geyBzdGFydCwgZGVsZXRlQ291bnQgfTtcbiAgICAgICAgaWYgKGNlbGxzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jZWxscyA9IGNlbGxzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIE5vdGVib29rQ2VsbEFycmF5Q2hhbmdlLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKE5vdGVib29rQ2VsbEFycmF5Q2hhbmdlIHx8IChleHBvcnRzLk5vdGVib29rQ2VsbEFycmF5Q2hhbmdlID0gTm90ZWJvb2tDZWxsQXJyYXlDaGFuZ2UgPSB7fSkpO1xudmFyIERpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24pIHtcbiAgICBEaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICdub3RlYm9va0RvY3VtZW50L2RpZENoYW5nZSc7XG4gICAgRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCk7XG4gICAgRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5yZWdpc3RyYXRpb25NZXRob2QgPSBOb3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGUubWV0aG9kO1xufSkoRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5EaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0gRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIEEgbm90aWZpY2F0aW9uIHNlbnQgd2hlbiBhIG5vdGVib29rIGRvY3VtZW50IGlzIHNhdmVkLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIERpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChEaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbikge1xuICAgIERpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICdub3RlYm9va0RvY3VtZW50L2RpZFNhdmUnO1xuICAgIERpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5tZXRob2QpO1xuICAgIERpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLnJlZ2lzdHJhdGlvbk1ldGhvZCA9IE5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZS5tZXRob2Q7XG59KShEaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5EaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IERpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogQSBub3RpZmljYXRpb24gc2VudCB3aGVuIGEgbm90ZWJvb2sgY2xvc2VzLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIERpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkQ2xvc2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uKSB7XG4gICAgRGlkQ2xvc2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICdub3RlYm9va0RvY3VtZW50L2RpZENsb3NlJztcbiAgICBEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kKTtcbiAgICBEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ucmVnaXN0cmF0aW9uTWV0aG9kID0gTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlLm1ldGhvZDtcbn0pKERpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5EaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0MTY2OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLldvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb24gPSBleHBvcnRzLldvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0ID0gZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzID0gdm9pZCAwO1xuY29uc3QgdnNjb2RlX2pzb25ycGNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTExMCk7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbnZhciBXb3JrRG9uZVByb2dyZXNzO1xuKGZ1bmN0aW9uIChXb3JrRG9uZVByb2dyZXNzKSB7XG4gICAgV29ya0RvbmVQcm9ncmVzcy50eXBlID0gbmV3IHZzY29kZV9qc29ucnBjXzEuUHJvZ3Jlc3NUeXBlKCk7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBXb3JrRG9uZVByb2dyZXNzLnR5cGU7XG4gICAgfVxuICAgIFdvcmtEb25lUHJvZ3Jlc3MuaXMgPSBpcztcbn0pKFdvcmtEb25lUHJvZ3Jlc3MgfHwgKGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzcyA9IFdvcmtEb25lUHJvZ3Jlc3MgPSB7fSkpO1xuLyoqXG4gKiBUaGUgYHdpbmRvdy93b3JrRG9uZVByb2dyZXNzL2NyZWF0ZWAgcmVxdWVzdCBpcyBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IHRvIGluaXRpYXRlIHByb2dyZXNzXG4gKiByZXBvcnRpbmcgZnJvbSB0aGUgc2VydmVyLlxuICovXG52YXIgV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKFdvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0KSB7XG4gICAgV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3QubWV0aG9kID0gJ3dpbmRvdy93b3JrRG9uZVByb2dyZXNzL2NyZWF0ZSc7XG4gICAgV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBXb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShXb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdC5tZXRob2QpO1xufSkoV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3QgfHwgKGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3QgPSBXb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBgd2luZG93L3dvcmtEb25lUHJvZ3Jlc3MvY2FuY2VsYCBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tICB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgdG8gY2FuY2VsIGEgcHJvZ3Jlc3NcbiAqIGluaXRpYXRlZCBvbiB0aGUgc2VydmVyIHNpZGUuXG4gKi9cbnZhciBXb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChXb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uKSB7XG4gICAgV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbi5tZXRob2QgPSAnd2luZG93L3dvcmtEb25lUHJvZ3Jlc3MvY2FuY2VsJztcbiAgICBXb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKFdvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKFdvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbiA9IFdvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb24gPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxNTMwOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBwcm92aWRlIHNlbGVjdGlvbiByYW5nZXMgaW4gYSBkb2N1bWVudC4gVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIFNlbGVjdGlvblJhbmdlUGFyYW1zfSwgdGhlXG4gKiByZXNwb25zZSBpcyBvZiB0eXBlIHtAbGluayBTZWxlY3Rpb25SYW5nZSBTZWxlY3Rpb25SYW5nZVtdfSBvciBhIFRoZW5hYmxlXG4gKiB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBTZWxlY3Rpb25SYW5nZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKFNlbGVjdGlvblJhbmdlUmVxdWVzdCkge1xuICAgIFNlbGVjdGlvblJhbmdlUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3NlbGVjdGlvblJhbmdlJztcbiAgICBTZWxlY3Rpb25SYW5nZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBTZWxlY3Rpb25SYW5nZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0Lm1ldGhvZCk7XG59KShTZWxlY3Rpb25SYW5nZVJlcXVlc3QgfHwgKGV4cG9ydHMuU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0ID0gU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjA2Nzpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0ID0gZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdCA9IGV4cG9ydHMuU2VtYW50aWNUb2tlbnNEZWx0YVJlcXVlc3QgPSBleHBvcnRzLlNlbWFudGljVG9rZW5zUmVxdWVzdCA9IGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlID0gZXhwb3J0cy5Ub2tlbkZvcm1hdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLy8tLS0tLS0tICd0ZXh0RG9jdW1lbnQvc2VtYW50aWNUb2tlbnMnIC0tLS0tXG52YXIgVG9rZW5Gb3JtYXQ7XG4oZnVuY3Rpb24gKFRva2VuRm9ybWF0KSB7XG4gICAgVG9rZW5Gb3JtYXQuUmVsYXRpdmUgPSAncmVsYXRpdmUnO1xufSkoVG9rZW5Gb3JtYXQgfHwgKGV4cG9ydHMuVG9rZW5Gb3JtYXQgPSBUb2tlbkZvcm1hdCA9IHt9KSk7XG52YXIgU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlO1xuKGZ1bmN0aW9uIChTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUpIHtcbiAgICBTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUubWV0aG9kID0gJ3RleHREb2N1bWVudC9zZW1hbnRpY1Rva2Vucyc7XG4gICAgU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5SZWdpc3RyYXRpb25UeXBlKFNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZS5tZXRob2QpO1xufSkoU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlIHx8IChleHBvcnRzLlNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZSA9IFNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZSA9IHt9KSk7XG4vKipcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIFNlbWFudGljVG9rZW5zUmVxdWVzdDtcbihmdW5jdGlvbiAoU2VtYW50aWNUb2tlbnNSZXF1ZXN0KSB7XG4gICAgU2VtYW50aWNUb2tlbnNSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvc2VtYW50aWNUb2tlbnMvZnVsbCc7XG4gICAgU2VtYW50aWNUb2tlbnNSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgU2VtYW50aWNUb2tlbnNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFNlbWFudGljVG9rZW5zUmVxdWVzdC5tZXRob2QpO1xuICAgIFNlbWFudGljVG9rZW5zUmVxdWVzdC5yZWdpc3RyYXRpb25NZXRob2QgPSBTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUubWV0aG9kO1xufSkoU2VtYW50aWNUb2tlbnNSZXF1ZXN0IHx8IChleHBvcnRzLlNlbWFudGljVG9rZW5zUmVxdWVzdCA9IFNlbWFudGljVG9rZW5zUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIFNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0O1xuKGZ1bmN0aW9uIChTZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdCkge1xuICAgIFNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvc2VtYW50aWNUb2tlbnMvZnVsbC9kZWx0YSc7XG4gICAgU2VtYW50aWNUb2tlbnNEZWx0YVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBTZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShTZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdC5tZXRob2QpO1xuICAgIFNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0LnJlZ2lzdHJhdGlvbk1ldGhvZCA9IFNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZS5tZXRob2Q7XG59KShTZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdCB8fCAoZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdCA9IFNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKFNlbWFudGljVG9rZW5zUmFuZ2VSZXF1ZXN0KSB7XG4gICAgU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9zZW1hbnRpY1Rva2Vucy9yYW5nZSc7XG4gICAgU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBTZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShTZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdC5tZXRob2QpO1xuICAgIFNlbWFudGljVG9rZW5zUmFuZ2VSZXF1ZXN0LnJlZ2lzdHJhdGlvbk1ldGhvZCA9IFNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZS5tZXRob2Q7XG59KShTZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdCB8fCAoZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdCA9IFNlbWFudGljVG9rZW5zUmFuZ2VSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdDtcbihmdW5jdGlvbiAoU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdCkge1xuICAgIFNlbWFudGljVG9rZW5zUmVmcmVzaFJlcXVlc3QubWV0aG9kID0gYHdvcmtzcGFjZS9zZW1hbnRpY1Rva2Vucy9yZWZyZXNoYDtcbiAgICBTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZTAoU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdC5tZXRob2QpO1xufSkoU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdCB8fCAoZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0ID0gU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQzMzM6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuU2hvd0RvY3VtZW50UmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gc2hvdyBhIGRvY3VtZW50LiBUaGlzIHJlcXVlc3QgbWlnaHQgb3BlbiBhblxuICogZXh0ZXJuYWwgcHJvZ3JhbSBkZXBlbmRpbmcgb24gdGhlIHZhbHVlIG9mIHRoZSBVUkkgdG8gb3Blbi5cbiAqIEZvciBleGFtcGxlIGEgcmVxdWVzdCB0byBvcGVuIGBodHRwczovL2NvZGUudmlzdWFsc3R1ZGlvLmNvbS9gXG4gKiB3aWxsIHZlcnkgbGlrZWx5IG9wZW4gdGhlIFVSSSBpbiBhIFdFQiBicm93c2VyLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiovXG52YXIgU2hvd0RvY3VtZW50UmVxdWVzdDtcbihmdW5jdGlvbiAoU2hvd0RvY3VtZW50UmVxdWVzdCkge1xuICAgIFNob3dEb2N1bWVudFJlcXVlc3QubWV0aG9kID0gJ3dpbmRvdy9zaG93RG9jdW1lbnQnO1xuICAgIFNob3dEb2N1bWVudFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBTaG93RG9jdW1lbnRSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFNob3dEb2N1bWVudFJlcXVlc3QubWV0aG9kKTtcbn0pKFNob3dEb2N1bWVudFJlcXVlc3QgfHwgKGV4cG9ydHMuU2hvd0RvY3VtZW50UmVxdWVzdCA9IFNob3dEb2N1bWVudFJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5MjY0OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLlR5cGVEZWZpbml0aW9uUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLy8gQHRzLWlnbm9yZTogdG8gYXZvaWQgaW5saW5pbmcgTG9jYXRpb0xpbmsgYXMgZHluYW1pYyBpbXBvcnRcbmxldCBfX25vRHluYW1pY0ltcG9ydDtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIHR5cGUgZGVmaW5pdGlvbiBsb2NhdGlvbnMgb2YgYSBzeW1ib2wgYXQgYSBnaXZlbiB0ZXh0XG4gKiBkb2N1bWVudCBwb3NpdGlvbi4gVGhlIHJlcXVlc3QncyBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXN9XG4gKiB0aGUgcmVzcG9uc2UgaXMgb2YgdHlwZSB7QGxpbmsgRGVmaW5pdGlvbn0gb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBUeXBlRGVmaW5pdGlvblJlcXVlc3Q7XG4oZnVuY3Rpb24gKFR5cGVEZWZpbml0aW9uUmVxdWVzdCkge1xuICAgIFR5cGVEZWZpbml0aW9uUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3R5cGVEZWZpbml0aW9uJztcbiAgICBUeXBlRGVmaW5pdGlvblJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBUeXBlRGVmaW5pdGlvblJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoVHlwZURlZmluaXRpb25SZXF1ZXN0Lm1ldGhvZCk7XG59KShUeXBlRGVmaW5pdGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuVHlwZURlZmluaXRpb25SZXF1ZXN0ID0gVHlwZURlZmluaXRpb25SZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzA2Mjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIFR5cGVGb3gsIE1pY3Jvc29mdCBhbmQgb3RoZXJzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLlR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3QgPSBleHBvcnRzLlR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdCA9IGV4cG9ydHMuVHlwZUhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byByZXN1bHQgYSBgVHlwZUhpZXJhcmNoeUl0ZW1gIGluIGEgZG9jdW1lbnQgYXQgYSBnaXZlbiBwb3NpdGlvbi5cbiAqIENhbiBiZSB1c2VkIGFzIGFuIGlucHV0IHRvIGEgc3VidHlwZXMgb3Igc3VwZXJ0eXBlcyB0eXBlIGhpZXJhcmNoeS5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBUeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKFR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCkge1xuICAgIFR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3ByZXBhcmVUeXBlSGllcmFyY2h5JztcbiAgICBUeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBUeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoVHlwZUhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShUeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgfHwgKGV4cG9ydHMuVHlwZUhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0ID0gVHlwZUhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIHN1cGVydHlwZXMgZm9yIGEgZ2l2ZW4gYFR5cGVIaWVyYXJjaHlJdGVtYC5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBUeXBlSGllcmFyY2h5U3VwZXJ0eXBlc1JlcXVlc3Q7XG4oZnVuY3Rpb24gKFR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdCkge1xuICAgIFR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdC5tZXRob2QgPSAndHlwZUhpZXJhcmNoeS9zdXBlcnR5cGVzJztcbiAgICBUeXBlSGllcmFyY2h5U3VwZXJ0eXBlc1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBUeXBlSGllcmFyY2h5U3VwZXJ0eXBlc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0Lm1ldGhvZCk7XG59KShUeXBlSGllcmFyY2h5U3VwZXJ0eXBlc1JlcXVlc3QgfHwgKGV4cG9ydHMuVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0ID0gVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIHN1YnR5cGVzIGZvciBhIGdpdmVuIGBUeXBlSGllcmFyY2h5SXRlbWAuXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdDtcbihmdW5jdGlvbiAoVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdCkge1xuICAgIFR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3QubWV0aG9kID0gJ3R5cGVIaWVyYXJjaHkvc3VidHlwZXMnO1xuICAgIFR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBUeXBlSGllcmFyY2h5U3VidHlwZXNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3QubWV0aG9kKTtcbn0pKFR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3QgfHwgKGV4cG9ydHMuVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdCA9IFR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2ODYwOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24gPSBleHBvcnRzLldvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIFRoZSBgd29ya3NwYWNlL3dvcmtzcGFjZUZvbGRlcnNgIGlzIHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgdG8gZmV0Y2ggdGhlIG9wZW4gd29ya3NwYWNlIGZvbGRlcnMuXG4gKi9cbnZhciBXb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdDtcbihmdW5jdGlvbiAoV29ya3NwYWNlRm9sZGVyc1JlcXVlc3QpIHtcbiAgICBXb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdC5tZXRob2QgPSAnd29ya3NwYWNlL3dvcmtzcGFjZUZvbGRlcnMnO1xuICAgIFdvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgV29ya3NwYWNlRm9sZGVyc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUwKFdvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0Lm1ldGhvZCk7XG59KShXb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdCB8fCAoZXhwb3J0cy5Xb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdCA9IFdvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogVGhlIGB3b3Jrc3BhY2UvZGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc2Agbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgd2hlbiB0aGUgd29ya3NwYWNlXG4gKiBmb2xkZXIgY29uZmlndXJhdGlvbiBjaGFuZ2VzLlxuICovXG52YXIgRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbikge1xuICAgIERpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24ubWV0aG9kID0gJ3dvcmtzcGFjZS9kaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzJztcbiAgICBEaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKERpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbiA9IERpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24gPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4NjMzOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLm9iamVjdExpdGVyYWwgPSBleHBvcnRzLnR5cGVkQXJyYXkgPSBleHBvcnRzLnN0cmluZ0FycmF5ID0gZXhwb3J0cy5hcnJheSA9IGV4cG9ydHMuZnVuYyA9IGV4cG9ydHMuZXJyb3IgPSBleHBvcnRzLm51bWJlciA9IGV4cG9ydHMuc3RyaW5nID0gZXhwb3J0cy5ib29sZWFuID0gdm9pZCAwO1xuZnVuY3Rpb24gYm9vbGVhbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2U7XG59XG5leHBvcnRzLmJvb2xlYW4gPSBib29sZWFuO1xuZnVuY3Rpb24gc3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XG59XG5leHBvcnRzLnN0cmluZyA9IHN0cmluZztcbmZ1bmN0aW9uIG51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyO1xufVxuZXhwb3J0cy5udW1iZXIgPSBudW1iZXI7XG5mdW5jdGlvbiBlcnJvcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEVycm9yO1xufVxuZXhwb3J0cy5lcnJvciA9IGVycm9yO1xuZnVuY3Rpb24gZnVuYyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmZ1bmMgPSBmdW5jO1xuZnVuY3Rpb24gYXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5leHBvcnRzLmFycmF5ID0gYXJyYXk7XG5mdW5jdGlvbiBzdHJpbmdBcnJheSh2YWx1ZSkge1xuICAgIHJldHVybiBhcnJheSh2YWx1ZSkgJiYgdmFsdWUuZXZlcnkoZWxlbSA9PiBzdHJpbmcoZWxlbSkpO1xufVxuZXhwb3J0cy5zdHJpbmdBcnJheSA9IHN0cmluZ0FycmF5O1xuZnVuY3Rpb24gdHlwZWRBcnJheSh2YWx1ZSwgY2hlY2spIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUuZXZlcnkoY2hlY2spO1xufVxuZXhwb3J0cy50eXBlZEFycmF5ID0gdHlwZWRBcnJheTtcbmZ1bmN0aW9uIG9iamVjdExpdGVyYWwodmFsdWUpIHtcbiAgICAvLyBTdHJpY3RseSBzcGVha2luZyBjbGFzcyBpbnN0YW5jZXMgcGFzcyB0aGlzIGNoZWNrIGFzIHdlbGwuIFNpbmNlIHRoZSBMU1BcbiAgICAvLyBkb2Vzbid0IHVzZSBjbGFzc2VzIHdlIGlnbm9yZSB0aGlzIGZvciBub3cuIElmIHdlIGRvIHdlIG5lZWQgdG8gYWRkIHNvbWV0aGluZ1xuICAgIC8vIGxpa2UgdGhpczogYE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoeCkpID09PSBudWxsYFxuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnO1xufVxuZXhwb3J0cy5vYmplY3RMaXRlcmFsID0gb2JqZWN0TGl0ZXJhbDtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjczMDpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGZvckVhY2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwNSk7XG52YXIgYXZhaWxhYmxlVHlwZWRBcnJheXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4MzQpO1xudmFyIGNhbGxCaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDk4KTtcbnZhciBjYWxsQm91bmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4MTgpO1xudmFyIGdPUEQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzMzYpO1xuXG52YXIgJHRvU3RyaW5nID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5MTMpKCk7XG5cbnZhciBnID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX3JlcXVpcmVfXy5nIDogZ2xvYmFsVGhpcztcbnZhciB0eXBlZEFycmF5cyA9IGF2YWlsYWJsZVR5cGVkQXJyYXlzKCk7XG5cbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjsgLy8gcmVxdWlyZSgnZ2V0cHJvdG90eXBlb2YnKTtcblxudmFyICRpbmRleE9mID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUuaW5kZXhPZicsIHRydWUpIHx8IGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gaTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIC0xO1xufTtcbnZhciBjYWNoZSA9IHsgX19wcm90b19fOiBudWxsIH07XG5pZiAoaGFzVG9TdHJpbmdUYWcgJiYgZ09QRCAmJiBnZXRQcm90b3R5cGVPZikge1xuXHRmb3JFYWNoKHR5cGVkQXJyYXlzLCBmdW5jdGlvbiAodHlwZWRBcnJheSkge1xuXHRcdHZhciBhcnIgPSBuZXcgZ1t0eXBlZEFycmF5XSgpO1xuXHRcdGlmIChTeW1ib2wudG9TdHJpbmdUYWcgaW4gYXJyKSB7XG5cdFx0XHR2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGVPZihhcnIpO1xuXHRcdFx0dmFyIGRlc2NyaXB0b3IgPSBnT1BEKHByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuXHRcdFx0aWYgKCFkZXNjcmlwdG9yKSB7XG5cdFx0XHRcdHZhciBzdXBlclByb3RvID0gZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuXHRcdFx0XHRkZXNjcmlwdG9yID0gZ09QRChzdXBlclByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuXHRcdFx0fVxuXHRcdFx0Y2FjaGVbJyQnICsgdHlwZWRBcnJheV0gPSBjYWxsQmluZChkZXNjcmlwdG9yLmdldCk7XG5cdFx0fVxuXHR9KTtcbn0gZWxzZSB7XG5cdGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdFx0dmFyIGFyciA9IG5ldyBnW3R5cGVkQXJyYXldKCk7XG5cdFx0Y2FjaGVbJyQnICsgdHlwZWRBcnJheV0gPSBjYWxsQmluZChhcnIuc2xpY2UpO1xuXHR9KTtcbn1cblxudmFyIHRyeVR5cGVkQXJyYXlzID0gZnVuY3Rpb24gdHJ5QWxsVHlwZWRBcnJheXModmFsdWUpIHtcblx0dmFyIGZvdW5kID0gZmFsc2U7XG5cdGZvckVhY2goY2FjaGUsIGZ1bmN0aW9uIChnZXR0ZXIsIHR5cGVkQXJyYXkpIHtcblx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoJyQnICsgZ2V0dGVyKHZhbHVlKSA9PT0gdHlwZWRBcnJheSkge1xuXHRcdFx0XHRcdGZvdW5kID0gJHNsaWNlKHR5cGVkQXJyYXksIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7IC8qKi8gfVxuXHRcdH1cblx0fSk7XG5cdHJldHVybiBmb3VuZDtcbn07XG5cbnZhciB0cnlTbGljZXMgPSBmdW5jdGlvbiB0cnlBbGxTbGljZXModmFsdWUpIHtcblx0dmFyIGZvdW5kID0gZmFsc2U7XG5cdGZvckVhY2goY2FjaGUsIGZ1bmN0aW9uIChnZXR0ZXIsIG5hbWUpIHtcblx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRnZXR0ZXIodmFsdWUpO1xuXHRcdFx0XHRmb3VuZCA9ICRzbGljZShuYW1lLCAxKTtcblx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGZvdW5kO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB3aGljaFR5cGVkQXJyYXkodmFsdWUpIHtcblx0aWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnKSB7XG5cdFx0dmFyIHRhZyA9ICRzbGljZSgkdG9TdHJpbmcodmFsdWUpLCA4LCAtMSk7XG5cdFx0aWYgKCRpbmRleE9mKHR5cGVkQXJyYXlzLCB0YWcpID4gLTEpIHtcblx0XHRcdHJldHVybiB0YWc7XG5cdFx0fVxuXHRcdGlmICh0YWcgIT09ICdPYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdC8vIG5vZGUgPCAwLjYgaGl0cyBoZXJlIG9uIHJlYWwgVHlwZWQgQXJyYXlzXG5cdFx0cmV0dXJuIHRyeVNsaWNlcyh2YWx1ZSk7XG5cdH1cblx0aWYgKCFnT1BEKSB7IHJldHVybiBudWxsOyB9IC8vIHVua25vd24gZW5naW5lXG5cdHJldHVybiB0cnlUeXBlZEFycmF5cyh2YWx1ZSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0ODM0OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgcG9zc2libGVOYW1lcyA9IFtcblx0J0JpZ0ludDY0QXJyYXknLFxuXHQnQmlnVWludDY0QXJyYXknLFxuXHQnRmxvYXQzMkFycmF5Jyxcblx0J0Zsb2F0NjRBcnJheScsXG5cdCdJbnQxNkFycmF5Jyxcblx0J0ludDMyQXJyYXknLFxuXHQnSW50OEFycmF5Jyxcblx0J1VpbnQxNkFycmF5Jyxcblx0J1VpbnQzMkFycmF5Jyxcblx0J1VpbnQ4QXJyYXknLFxuXHQnVWludDhDbGFtcGVkQXJyYXknXG5dO1xuXG52YXIgZyA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19yZXF1aXJlX18uZyA6IGdsb2JhbFRoaXM7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXZhaWxhYmxlVHlwZWRBcnJheXMoKSB7XG5cdHZhciBvdXQgPSBbXTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwb3NzaWJsZU5hbWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKHR5cGVvZiBnW3Bvc3NpYmxlTmFtZXNbaV1dID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRvdXRbb3V0Lmxlbmd0aF0gPSBwb3NzaWJsZU5hbWVzW2ldO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gb3V0O1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODA0MTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBWOiAoKSA9PiAoLyogYmluZGluZyAqLyBUZXh0RG9jdW1lbnQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuY2xhc3MgRnVsbFRleHREb2N1bWVudCB7XG4gICAgY29uc3RydWN0b3IodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KSB7XG4gICAgICAgIHRoaXMuX3VyaSA9IHVyaTtcbiAgICAgICAgdGhpcy5fbGFuZ3VhZ2VJZCA9IGxhbmd1YWdlSWQ7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLl9jb250ZW50ID0gY29udGVudDtcbiAgICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldCB1cmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91cmk7XG4gICAgfVxuICAgIGdldCBsYW5ndWFnZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2VJZDtcbiAgICB9XG4gICAgZ2V0IHZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92ZXJzaW9uO1xuICAgIH1cbiAgICBnZXRUZXh0KHJhbmdlKSB7XG4gICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSB0aGlzLm9mZnNldEF0KHJhbmdlLnN0YXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IHRoaXMub2Zmc2V0QXQocmFuZ2UuZW5kKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50LnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudDtcbiAgICB9XG4gICAgdXBkYXRlKGNoYW5nZXMsIHZlcnNpb24pIHtcbiAgICAgICAgZm9yIChjb25zdCBjaGFuZ2Ugb2YgY2hhbmdlcykge1xuICAgICAgICAgICAgaWYgKEZ1bGxUZXh0RG9jdW1lbnQuaXNJbmNyZW1lbnRhbChjaGFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFrZXMgc3VyZSBzdGFydCBpcyBiZWZvcmUgZW5kXG4gICAgICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBnZXRXZWxsZm9ybWVkUmFuZ2UoY2hhbmdlLnJhbmdlKTtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgY29udGVudFxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gdGhpcy5vZmZzZXRBdChyYW5nZS5zdGFydCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kT2Zmc2V0ID0gdGhpcy5vZmZzZXRBdChyYW5nZS5lbmQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRlbnQgPSB0aGlzLl9jb250ZW50LnN1YnN0cmluZygwLCBzdGFydE9mZnNldCkgKyBjaGFuZ2UudGV4dCArIHRoaXMuX2NvbnRlbnQuc3Vic3RyaW5nKGVuZE9mZnNldCwgdGhpcy5fY29udGVudC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgb2Zmc2V0c1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0TGluZSA9IE1hdGgubWF4KHJhbmdlLnN0YXJ0LmxpbmUsIDApO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZExpbmUgPSBNYXRoLm1heChyYW5nZS5lbmQubGluZSwgMCk7XG4gICAgICAgICAgICAgICAgbGV0IGxpbmVPZmZzZXRzID0gdGhpcy5fbGluZU9mZnNldHM7XG4gICAgICAgICAgICAgICAgY29uc3QgYWRkZWRMaW5lT2Zmc2V0cyA9IGNvbXB1dGVMaW5lT2Zmc2V0cyhjaGFuZ2UudGV4dCwgZmFsc2UsIHN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBpZiAoZW5kTGluZSAtIHN0YXJ0TGluZSA9PT0gYWRkZWRMaW5lT2Zmc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGFkZGVkTGluZU9mZnNldHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVPZmZzZXRzW2kgKyBzdGFydExpbmUgKyAxXSA9IGFkZGVkTGluZU9mZnNldHNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGRlZExpbmVPZmZzZXRzLmxlbmd0aCA8IDEwMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lT2Zmc2V0cy5zcGxpY2Uoc3RhcnRMaW5lICsgMSwgZW5kTGluZSAtIHN0YXJ0TGluZSwgLi4uYWRkZWRMaW5lT2Zmc2V0cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7IC8vIGF2b2lkIHRvbyBtYW55IGFyZ3VtZW50cyBmb3Igc3BsaWNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IGxpbmVPZmZzZXRzID0gbGluZU9mZnNldHMuc2xpY2UoMCwgc3RhcnRMaW5lICsgMSkuY29uY2F0KGFkZGVkTGluZU9mZnNldHMsIGxpbmVPZmZzZXRzLnNsaWNlKGVuZExpbmUgKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZGlmZiA9IGNoYW5nZS50ZXh0Lmxlbmd0aCAtIChlbmRPZmZzZXQgLSBzdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgaWYgKGRpZmYgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0TGluZSArIDEgKyBhZGRlZExpbmVPZmZzZXRzLmxlbmd0aCwgbGVuID0gbGluZU9mZnNldHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVPZmZzZXRzW2ldID0gbGluZU9mZnNldHNbaV0gKyBkaWZmO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoRnVsbFRleHREb2N1bWVudC5pc0Z1bGwoY2hhbmdlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRlbnQgPSBjaGFuZ2UudGV4dDtcbiAgICAgICAgICAgICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBjaGFuZ2UgZXZlbnQgcmVjZWl2ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICB9XG4gICAgZ2V0TGluZU9mZnNldHMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9saW5lT2Zmc2V0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IGNvbXB1dGVMaW5lT2Zmc2V0cyh0aGlzLl9jb250ZW50LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbGluZU9mZnNldHM7XG4gICAgfVxuICAgIHBvc2l0aW9uQXQob2Zmc2V0KSB7XG4gICAgICAgIG9mZnNldCA9IE1hdGgubWF4KE1hdGgubWluKG9mZnNldCwgdGhpcy5fY29udGVudC5sZW5ndGgpLCAwKTtcbiAgICAgICAgY29uc3QgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XG4gICAgICAgIGxldCBsb3cgPSAwLCBoaWdoID0gbGluZU9mZnNldHMubGVuZ3RoO1xuICAgICAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgbGluZTogMCwgY2hhcmFjdGVyOiBvZmZzZXQgfTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgICAgY29uc3QgbWlkID0gTWF0aC5mbG9vcigobG93ICsgaGlnaCkgLyAyKTtcbiAgICAgICAgICAgIGlmIChsaW5lT2Zmc2V0c1ttaWRdID4gb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG93IGlzIHRoZSBsZWFzdCB4IGZvciB3aGljaCB0aGUgbGluZSBvZmZzZXQgaXMgbGFyZ2VyIHRoYW4gdGhlIGN1cnJlbnQgb2Zmc2V0XG4gICAgICAgIC8vIG9yIGFycmF5Lmxlbmd0aCBpZiBubyBsaW5lIG9mZnNldCBpcyBsYXJnZXIgdGhhbiB0aGUgY3VycmVudCBvZmZzZXRcbiAgICAgICAgY29uc3QgbGluZSA9IGxvdyAtIDE7XG4gICAgICAgIG9mZnNldCA9IHRoaXMuZW5zdXJlQmVmb3JlRU9MKG9mZnNldCwgbGluZU9mZnNldHNbbGluZV0pO1xuICAgICAgICByZXR1cm4geyBsaW5lLCBjaGFyYWN0ZXI6IG9mZnNldCAtIGxpbmVPZmZzZXRzW2xpbmVdIH07XG4gICAgfVxuICAgIG9mZnNldEF0KHBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IGxpbmVPZmZzZXRzID0gdGhpcy5nZXRMaW5lT2Zmc2V0cygpO1xuICAgICAgICBpZiAocG9zaXRpb24ubGluZSA+PSBsaW5lT2Zmc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwb3NpdGlvbi5saW5lIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGluZU9mZnNldCA9IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmVdO1xuICAgICAgICBpZiAocG9zaXRpb24uY2hhcmFjdGVyIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiBsaW5lT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5leHRMaW5lT2Zmc2V0ID0gKHBvc2l0aW9uLmxpbmUgKyAxIDwgbGluZU9mZnNldHMubGVuZ3RoKSA/IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmUgKyAxXSA6IHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBNYXRoLm1pbihsaW5lT2Zmc2V0ICsgcG9zaXRpb24uY2hhcmFjdGVyLCBuZXh0TGluZU9mZnNldCk7XG4gICAgICAgIHJldHVybiB0aGlzLmVuc3VyZUJlZm9yZUVPTChvZmZzZXQsIGxpbmVPZmZzZXQpO1xuICAgIH1cbiAgICBlbnN1cmVCZWZvcmVFT0wob2Zmc2V0LCBsaW5lT2Zmc2V0KSB7XG4gICAgICAgIHdoaWxlIChvZmZzZXQgPiBsaW5lT2Zmc2V0ICYmIGlzRU9MKHRoaXMuX2NvbnRlbnQuY2hhckNvZGVBdChvZmZzZXQgLSAxKSkpIHtcbiAgICAgICAgICAgIG9mZnNldC0tO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuICAgIGdldCBsaW5lQ291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldExpbmVPZmZzZXRzKCkubGVuZ3RoO1xuICAgIH1cbiAgICBzdGF0aWMgaXNJbmNyZW1lbnRhbChldmVudCkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSBldmVudDtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGNhbmRpZGF0ZS50ZXh0ID09PSAnc3RyaW5nJyAmJiBjYW5kaWRhdGUucmFuZ2UgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5yYW5nZUxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBjYW5kaWRhdGUucmFuZ2VMZW5ndGggPT09ICdudW1iZXInKTtcbiAgICB9XG4gICAgc3RhdGljIGlzRnVsbChldmVudCkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSBldmVudDtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGNhbmRpZGF0ZS50ZXh0ID09PSAnc3RyaW5nJyAmJiBjYW5kaWRhdGUucmFuZ2UgPT09IHVuZGVmaW5lZCAmJiBjYW5kaWRhdGUucmFuZ2VMZW5ndGggPT09IHVuZGVmaW5lZDtcbiAgICB9XG59XG52YXIgVGV4dERvY3VtZW50O1xuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRleHQgZG9jdW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2VJZCAgVGhlIGRvY3VtZW50J3MgbGFuZ3VhZ2UgSWQuXG4gICAgICogQHBhcmFtIHZlcnNpb24gVGhlIGRvY3VtZW50J3MgaW5pdGlhbCB2ZXJzaW9uIG51bWJlci5cbiAgICAgKiBAcGFyYW0gY29udGVudCBUaGUgZG9jdW1lbnQncyBjb250ZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGdWxsVGV4dERvY3VtZW50KHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCk7XG4gICAgfVxuICAgIFRleHREb2N1bWVudC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBhIFRleHREb2N1bWVudCBieSBtb2RpZnlpbmcgaXRzIGNvbnRlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZG9jdW1lbnQgdGhlIGRvY3VtZW50IHRvIHVwZGF0ZS4gT25seSBkb2N1bWVudHMgY3JlYXRlZCBieSBUZXh0RG9jdW1lbnQuY3JlYXRlIGFyZSB2YWxpZCBpbnB1dHMuXG4gICAgICogQHBhcmFtIGNoYW5nZXMgdGhlIGNoYW5nZXMgdG8gYXBwbHkgdG8gdGhlIGRvY3VtZW50LlxuICAgICAqIEBwYXJhbSB2ZXJzaW9uIHRoZSBjaGFuZ2VzIHZlcnNpb24gZm9yIHRoZSBkb2N1bWVudC5cbiAgICAgKiBAcmV0dXJucyBUaGUgdXBkYXRlZCBUZXh0RG9jdW1lbnQuIE5vdGU6IFRoYXQncyB0aGUgc2FtZSBkb2N1bWVudCBpbnN0YW5jZSBwYXNzZWQgaW4gYXMgZmlyc3QgcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKGRvY3VtZW50LCBjaGFuZ2VzLCB2ZXJzaW9uKSB7XG4gICAgICAgIGlmIChkb2N1bWVudCBpbnN0YW5jZW9mIEZ1bGxUZXh0RG9jdW1lbnQpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnVwZGF0ZShjaGFuZ2VzLCB2ZXJzaW9uKTtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGV4dERvY3VtZW50LnVwZGF0ZTogZG9jdW1lbnQgbXVzdCBiZSBjcmVhdGVkIGJ5IFRleHREb2N1bWVudC5jcmVhdGUnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBUZXh0RG9jdW1lbnQudXBkYXRlID0gdXBkYXRlO1xuICAgIGZ1bmN0aW9uIGFwcGx5RWRpdHMoZG9jdW1lbnQsIGVkaXRzKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5nZXRUZXh0KCk7XG4gICAgICAgIGNvbnN0IHNvcnRlZEVkaXRzID0gbWVyZ2VTb3J0KGVkaXRzLm1hcChnZXRXZWxsZm9ybWVkRWRpdCksIChhLCBiKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkaWZmID0gYS5yYW5nZS5zdGFydC5saW5lIC0gYi5yYW5nZS5zdGFydC5saW5lO1xuICAgICAgICAgICAgaWYgKGRpZmYgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5yYW5nZS5zdGFydC5jaGFyYWN0ZXIgLSBiLnJhbmdlLnN0YXJ0LmNoYXJhY3RlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkaWZmO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGxhc3RNb2RpZmllZE9mZnNldCA9IDA7XG4gICAgICAgIGNvbnN0IHNwYW5zID0gW107XG4gICAgICAgIGZvciAoY29uc3QgZSBvZiBzb3J0ZWRFZGl0cykge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRPZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChlLnJhbmdlLnN0YXJ0KTtcbiAgICAgICAgICAgIGlmIChzdGFydE9mZnNldCA8IGxhc3RNb2RpZmllZE9mZnNldCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT3ZlcmxhcHBpbmcgZWRpdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3RhcnRPZmZzZXQgPiBsYXN0TW9kaWZpZWRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBzcGFucy5wdXNoKHRleHQuc3Vic3RyaW5nKGxhc3RNb2RpZmllZE9mZnNldCwgc3RhcnRPZmZzZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlLm5ld1RleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3BhbnMucHVzaChlLm5ld1RleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdE1vZGlmaWVkT2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoZS5yYW5nZS5lbmQpO1xuICAgICAgICB9XG4gICAgICAgIHNwYW5zLnB1c2godGV4dC5zdWJzdHIobGFzdE1vZGlmaWVkT2Zmc2V0KSk7XG4gICAgICAgIHJldHVybiBzcGFucy5qb2luKCcnKTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50LmFwcGx5RWRpdHMgPSBhcHBseUVkaXRzO1xufSkoVGV4dERvY3VtZW50IHx8IChUZXh0RG9jdW1lbnQgPSB7fSkpO1xuZnVuY3Rpb24gbWVyZ2VTb3J0KGRhdGEsIGNvbXBhcmUpIHtcbiAgICBpZiAoZGF0YS5sZW5ndGggPD0gMSkge1xuICAgICAgICAvLyBzb3J0ZWRcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGNvbnN0IHAgPSAoZGF0YS5sZW5ndGggLyAyKSB8IDA7XG4gICAgY29uc3QgbGVmdCA9IGRhdGEuc2xpY2UoMCwgcCk7XG4gICAgY29uc3QgcmlnaHQgPSBkYXRhLnNsaWNlKHApO1xuICAgIG1lcmdlU29ydChsZWZ0LCBjb21wYXJlKTtcbiAgICBtZXJnZVNvcnQocmlnaHQsIGNvbXBhcmUpO1xuICAgIGxldCBsZWZ0SWR4ID0gMDtcbiAgICBsZXQgcmlnaHRJZHggPSAwO1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAobGVmdElkeCA8IGxlZnQubGVuZ3RoICYmIHJpZ2h0SWR4IDwgcmlnaHQubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IGNvbXBhcmUobGVmdFtsZWZ0SWR4XSwgcmlnaHRbcmlnaHRJZHhdKTtcbiAgICAgICAgaWYgKHJldCA8PSAwKSB7XG4gICAgICAgICAgICAvLyBzbWFsbGVyX2VxdWFsIC0+IHRha2UgbGVmdCB0byBwcmVzZXJ2ZSBvcmRlclxuICAgICAgICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZ3JlYXRlciAtPiB0YWtlIHJpZ2h0XG4gICAgICAgICAgICBkYXRhW2krK10gPSByaWdodFtyaWdodElkeCsrXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAobGVmdElkeCA8IGxlZnQubGVuZ3RoKSB7XG4gICAgICAgIGRhdGFbaSsrXSA9IGxlZnRbbGVmdElkeCsrXTtcbiAgICB9XG4gICAgd2hpbGUgKHJpZ2h0SWR4IDwgcmlnaHQubGVuZ3RoKSB7XG4gICAgICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVMaW5lT2Zmc2V0cyh0ZXh0LCBpc0F0TGluZVN0YXJ0LCB0ZXh0T2Zmc2V0ID0gMCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGlzQXRMaW5lU3RhcnQgPyBbdGV4dE9mZnNldF0gOiBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2ggPSB0ZXh0LmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChpc0VPTChjaCkpIHtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gMTMgLyogQ2hhckNvZGUuQ2FycmlhZ2VSZXR1cm4gKi8gJiYgaSArIDEgPCB0ZXh0Lmxlbmd0aCAmJiB0ZXh0LmNoYXJDb2RlQXQoaSArIDEpID09PSAxMCAvKiBDaGFyQ29kZS5MaW5lRmVlZCAqLykge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRleHRPZmZzZXQgKyBpICsgMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGlzRU9MKGNoYXIpIHtcbiAgICByZXR1cm4gY2hhciA9PT0gMTMgLyogQ2hhckNvZGUuQ2FycmlhZ2VSZXR1cm4gKi8gfHwgY2hhciA9PT0gMTAgLyogQ2hhckNvZGUuTGluZUZlZWQgKi87XG59XG5mdW5jdGlvbiBnZXRXZWxsZm9ybWVkUmFuZ2UocmFuZ2UpIHtcbiAgICBjb25zdCBzdGFydCA9IHJhbmdlLnN0YXJ0O1xuICAgIGNvbnN0IGVuZCA9IHJhbmdlLmVuZDtcbiAgICBpZiAoc3RhcnQubGluZSA+IGVuZC5saW5lIHx8IChzdGFydC5saW5lID09PSBlbmQubGluZSAmJiBzdGFydC5jaGFyYWN0ZXIgPiBlbmQuY2hhcmFjdGVyKSkge1xuICAgICAgICByZXR1cm4geyBzdGFydDogZW5kLCBlbmQ6IHN0YXJ0IH07XG4gICAgfVxuICAgIHJldHVybiByYW5nZTtcbn1cbmZ1bmN0aW9uIGdldFdlbGxmb3JtZWRFZGl0KHRleHRFZGl0KSB7XG4gICAgY29uc3QgcmFuZ2UgPSBnZXRXZWxsZm9ybWVkUmFuZ2UodGV4dEVkaXQucmFuZ2UpO1xuICAgIGlmIChyYW5nZSAhPT0gdGV4dEVkaXQucmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHsgbmV3VGV4dDogdGV4dEVkaXQubmV3VGV4dCwgcmFuZ2UgfTtcbiAgICB9XG4gICAgcmV0dXJuIHRleHRFZGl0O1xufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyODUyOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEFubm90YXRlZFRleHRFZGl0OiAoKSA9PiAoLyogYmluZGluZyAqLyBBbm5vdGF0ZWRUZXh0RWRpdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENoYW5nZUFubm90YXRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIENoYW5nZUFubm90YXRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb2RlQWN0aW9uOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb2RlQWN0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29kZUFjdGlvbkNvbnRleHQ6ICgpID0+ICgvKiBiaW5kaW5nICovIENvZGVBY3Rpb25Db250ZXh0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29kZUFjdGlvbktpbmQ6ICgpID0+ICgvKiBiaW5kaW5nICovIENvZGVBY3Rpb25LaW5kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29kZUFjdGlvblRyaWdnZXJLaW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb2RlQWN0aW9uVHJpZ2dlcktpbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb2RlRGVzY3JpcHRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIENvZGVEZXNjcmlwdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvZGVMZW5zOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb2RlTGVucyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvbG9yOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb2xvciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvbG9ySW5mb3JtYXRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIENvbG9ySW5mb3JtYXRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb2xvclByZXNlbnRhdGlvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29sb3JQcmVzZW50YXRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb21tYW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb21tYW5kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29tcGxldGlvbkl0ZW06ICgpID0+ICgvKiBiaW5kaW5nICovIENvbXBsZXRpb25JdGVtKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29tcGxldGlvbkl0ZW1LaW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb21wbGV0aW9uSXRlbUtpbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlsczogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb21wbGV0aW9uSXRlbVRhZzogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29tcGxldGlvbkl0ZW1UYWcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb21wbGV0aW9uTGlzdDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29tcGxldGlvbkxpc3QpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDcmVhdGVGaWxlOiAoKSA9PiAoLyogYmluZGluZyAqLyBDcmVhdGVGaWxlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRGVsZXRlRmlsZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRGVsZXRlRmlsZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIERpYWdub3N0aWM6ICgpID0+ICgvKiBiaW5kaW5nICovIERpYWdub3N0aWMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uOiAoKSA9PiAoLyogYmluZGluZyAqLyBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRGlhZ25vc3RpY1NldmVyaXR5OiAoKSA9PiAoLyogYmluZGluZyAqLyBEaWFnbm9zdGljU2V2ZXJpdHkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBEaWFnbm9zdGljVGFnOiAoKSA9PiAoLyogYmluZGluZyAqLyBEaWFnbm9zdGljVGFnKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRG9jdW1lbnRIaWdobGlnaHQ6ICgpID0+ICgvKiBiaW5kaW5nICovIERvY3VtZW50SGlnaGxpZ2h0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBEb2N1bWVudEhpZ2hsaWdodEtpbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBEb2N1bWVudExpbms6ICgpID0+ICgvKiBiaW5kaW5nICovIERvY3VtZW50TGluayksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIERvY3VtZW50U3ltYm9sOiAoKSA9PiAoLyogYmluZGluZyAqLyBEb2N1bWVudFN5bWJvbCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIERvY3VtZW50VXJpOiAoKSA9PiAoLyogYmluZGluZyAqLyBEb2N1bWVudFVyaSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEVPTDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRU9MKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRm9sZGluZ1JhbmdlOiAoKSA9PiAoLyogYmluZGluZyAqLyBGb2xkaW5nUmFuZ2UpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBGb2xkaW5nUmFuZ2VLaW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBGb2xkaW5nUmFuZ2VLaW5kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRm9ybWF0dGluZ09wdGlvbnM6ICgpID0+ICgvKiBiaW5kaW5nICovIEZvcm1hdHRpbmdPcHRpb25zKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSG92ZXI6ICgpID0+ICgvKiBiaW5kaW5nICovIEhvdmVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5sYXlIaW50OiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmxheUhpbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxheUhpbnRLaW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmxheUhpbnRLaW5kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5sYXlIaW50TGFiZWxQYXJ0OiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmxheUhpbnRMYWJlbFBhcnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxpbmVDb21wbGV0aW9uQ29udGV4dDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5saW5lQ29tcGxldGlvbkNvbnRleHQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxpbmVDb21wbGV0aW9uSXRlbTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5saW5lQ29tcGxldGlvbkl0ZW0pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxpbmVDb21wbGV0aW9uTGlzdDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5saW5lQ29tcGxldGlvbkxpc3QpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQ6ICgpID0+ICgvKiBiaW5kaW5nICovIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIElubGluZVZhbHVlQ29udGV4dDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5saW5lVmFsdWVDb250ZXh0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb246ICgpID0+ICgvKiBiaW5kaW5nICovIElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5saW5lVmFsdWVUZXh0OiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmxpbmVWYWx1ZVRleHQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5zZXJ0UmVwbGFjZUVkaXQ6ICgpID0+ICgvKiBiaW5kaW5nICovIEluc2VydFJlcGxhY2VFZGl0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5zZXJ0VGV4dEZvcm1hdDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5zZXJ0VGV4dEZvcm1hdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEluc2VydFRleHRNb2RlOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbnNlcnRUZXh0TW9kZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIExvY2F0aW9uOiAoKSA9PiAoLyogYmluZGluZyAqLyBMb2NhdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIExvY2F0aW9uTGluazogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTG9jYXRpb25MaW5rKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgTWFya2VkU3RyaW5nOiAoKSA9PiAoLyogYmluZGluZyAqLyBNYXJrZWRTdHJpbmcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBNYXJrdXBDb250ZW50OiAoKSA9PiAoLyogYmluZGluZyAqLyBNYXJrdXBDb250ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgTWFya3VwS2luZDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWFya3VwS2luZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUGFyYW1ldGVySW5mb3JtYXRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIFBhcmFtZXRlckluZm9ybWF0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUG9zaXRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIFBvc2l0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUmFuZ2U6ICgpID0+ICgvKiBiaW5kaW5nICovIFJhbmdlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUmVuYW1lRmlsZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUmVuYW1lRmlsZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFNlbGVjdGVkQ29tcGxldGlvbkluZm86ICgpID0+ICgvKiBiaW5kaW5nICovIFNlbGVjdGVkQ29tcGxldGlvbkluZm8pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTZWxlY3Rpb25SYW5nZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2VsZWN0aW9uUmFuZ2UpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzOiAoKSA9PiAoLyogYmluZGluZyAqLyBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgU2VtYW50aWNUb2tlblR5cGVzOiAoKSA9PiAoLyogYmluZGluZyAqLyBTZW1hbnRpY1Rva2VuVHlwZXMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTZW1hbnRpY1Rva2VuczogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2VtYW50aWNUb2tlbnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTaWduYXR1cmVJbmZvcm1hdGlvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2lnbmF0dXJlSW5mb3JtYXRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTdHJpbmdWYWx1ZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3RyaW5nVmFsdWUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTeW1ib2xJbmZvcm1hdGlvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3ltYm9sSW5mb3JtYXRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTeW1ib2xLaW5kOiAoKSA9PiAoLyogYmluZGluZyAqLyBTeW1ib2xLaW5kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgU3ltYm9sVGFnOiAoKSA9PiAoLyogYmluZGluZyAqLyBTeW1ib2xUYWcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBUZXh0RG9jdW1lbnQ6ICgpID0+ICgvKiBiaW5kaW5nICovIFRleHREb2N1bWVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFRleHREb2N1bWVudEVkaXQ6ICgpID0+ICgvKiBiaW5kaW5nICovIFRleHREb2N1bWVudEVkaXQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBUZXh0RG9jdW1lbnRJZGVudGlmaWVyOiAoKSA9PiAoLyogYmluZGluZyAqLyBUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgVGV4dERvY3VtZW50SXRlbTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVGV4dERvY3VtZW50SXRlbSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFRleHRFZGl0OiAoKSA9PiAoLyogYmluZGluZyAqLyBUZXh0RWRpdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFVSSTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVVJJKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFdvcmtzcGFjZUNoYW5nZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV29ya3NwYWNlQ2hhbmdlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgV29ya3NwYWNlRWRpdDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV29ya3NwYWNlRWRpdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFdvcmtzcGFjZUZvbGRlcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV29ya3NwYWNlRm9sZGVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgV29ya3NwYWNlU3ltYm9sOiAoKSA9PiAoLyogYmluZGluZyAqLyBXb3Jrc3BhY2VTeW1ib2wpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBpbnRlZ2VyOiAoKSA9PiAoLyogYmluZGluZyAqLyBpbnRlZ2VyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgdWludGVnZXI6ICgpID0+ICgvKiBiaW5kaW5nICovIHVpbnRlZ2VyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbnZhciBEb2N1bWVudFVyaTtcbihmdW5jdGlvbiAoRG9jdW1lbnRVcmkpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICB9XG4gICAgRG9jdW1lbnRVcmkuaXMgPSBpcztcbn0pKERvY3VtZW50VXJpIHx8IChEb2N1bWVudFVyaSA9IHt9KSk7XG52YXIgVVJJO1xuKGZ1bmN0aW9uIChVUkkpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICB9XG4gICAgVVJJLmlzID0gaXM7XG59KShVUkkgfHwgKFVSSSA9IHt9KSk7XG52YXIgaW50ZWdlcjtcbihmdW5jdGlvbiAoaW50ZWdlcikge1xuICAgIGludGVnZXIuTUlOX1ZBTFVFID0gLTIxNDc0ODM2NDg7XG4gICAgaW50ZWdlci5NQVhfVkFMVUUgPSAyMTQ3NDgzNjQ3O1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGludGVnZXIuTUlOX1ZBTFVFIDw9IHZhbHVlICYmIHZhbHVlIDw9IGludGVnZXIuTUFYX1ZBTFVFO1xuICAgIH1cbiAgICBpbnRlZ2VyLmlzID0gaXM7XG59KShpbnRlZ2VyIHx8IChpbnRlZ2VyID0ge30pKTtcbnZhciB1aW50ZWdlcjtcbihmdW5jdGlvbiAodWludGVnZXIpIHtcbiAgICB1aW50ZWdlci5NSU5fVkFMVUUgPSAwO1xuICAgIHVpbnRlZ2VyLk1BWF9WQUxVRSA9IDIxNDc0ODM2NDc7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdWludGVnZXIuTUlOX1ZBTFVFIDw9IHZhbHVlICYmIHZhbHVlIDw9IHVpbnRlZ2VyLk1BWF9WQUxVRTtcbiAgICB9XG4gICAgdWludGVnZXIuaXMgPSBpcztcbn0pKHVpbnRlZ2VyIHx8ICh1aW50ZWdlciA9IHt9KSk7XG4vKipcbiAqIFRoZSBQb3NpdGlvbiBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBQb3NpdGlvbn0gbGl0ZXJhbHMuXG4gKi9cbnZhciBQb3NpdGlvbjtcbihmdW5jdGlvbiAoUG9zaXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFBvc2l0aW9uIGxpdGVyYWwgZnJvbSB0aGUgZ2l2ZW4gbGluZSBhbmQgY2hhcmFjdGVyLlxuICAgICAqIEBwYXJhbSBsaW5lIFRoZSBwb3NpdGlvbidzIGxpbmUuXG4gICAgICogQHBhcmFtIGNoYXJhY3RlciBUaGUgcG9zaXRpb24ncyBjaGFyYWN0ZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGxpbmUsIGNoYXJhY3Rlcikge1xuICAgICAgICBpZiAobGluZSA9PT0gTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgICAgbGluZSA9IHVpbnRlZ2VyLk1BWF9WQUxVRTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgICBjaGFyYWN0ZXIgPSB1aW50ZWdlci5NQVhfVkFMVUU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgbGluZSwgY2hhcmFjdGVyIH07XG4gICAgfVxuICAgIFBvc2l0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIFBvc2l0aW9ufSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5saW5lKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUuY2hhcmFjdGVyKTtcbiAgICB9XG4gICAgUG9zaXRpb24uaXMgPSBpcztcbn0pKFBvc2l0aW9uIHx8IChQb3NpdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBSYW5nZSBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBSYW5nZX0gbGl0ZXJhbHMuXG4gKi9cbnZhciBSYW5nZTtcbihmdW5jdGlvbiAoUmFuZ2UpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUob25lLCB0d28sIHRocmVlLCBmb3VyKSB7XG4gICAgICAgIGlmIChJcy51aW50ZWdlcihvbmUpICYmIElzLnVpbnRlZ2VyKHR3bykgJiYgSXMudWludGVnZXIodGhyZWUpICYmIElzLnVpbnRlZ2VyKGZvdXIpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdGFydDogUG9zaXRpb24uY3JlYXRlKG9uZSwgdHdvKSwgZW5kOiBQb3NpdGlvbi5jcmVhdGUodGhyZWUsIGZvdXIpIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoUG9zaXRpb24uaXMob25lKSAmJiBQb3NpdGlvbi5pcyh0d28pKSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdGFydDogb25lLCBlbmQ6IHR3byB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSYW5nZSNjcmVhdGUgY2FsbGVkIHdpdGggaW52YWxpZCBhcmd1bWVudHNbJHtvbmV9LCAke3R3b30sICR7dGhyZWV9LCAke2ZvdXJ9XWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIFJhbmdlLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIFJhbmdlfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFBvc2l0aW9uLmlzKGNhbmRpZGF0ZS5zdGFydCkgJiYgUG9zaXRpb24uaXMoY2FuZGlkYXRlLmVuZCk7XG4gICAgfVxuICAgIFJhbmdlLmlzID0gaXM7XG59KShSYW5nZSB8fCAoUmFuZ2UgPSB7fSkpO1xuLyoqXG4gKiBUaGUgTG9jYXRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgTG9jYXRpb259IGxpdGVyYWxzLlxuICovXG52YXIgTG9jYXRpb247XG4oZnVuY3Rpb24gKExvY2F0aW9uKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIExvY2F0aW9uIGxpdGVyYWwuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgbG9jYXRpb24ncyB1cmkuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSBsb2NhdGlvbidzIHJhbmdlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHJhbmdlKSB7XG4gICAgICAgIHJldHVybiB7IHVyaSwgcmFuZ2UgfTtcbiAgICB9XG4gICAgTG9jYXRpb24uY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgTG9jYXRpb259IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUudXJpKSk7XG4gICAgfVxuICAgIExvY2F0aW9uLmlzID0gaXM7XG59KShMb2NhdGlvbiB8fCAoTG9jYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgTG9jYXRpb25MaW5rIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIExvY2F0aW9uTGlua30gbGl0ZXJhbHMuXG4gKi9cbnZhciBMb2NhdGlvbkxpbms7XG4oZnVuY3Rpb24gKExvY2F0aW9uTGluaykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBMb2NhdGlvbkxpbmsgbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0VXJpIFRoZSBkZWZpbml0aW9uJ3MgdXJpLlxuICAgICAqIEBwYXJhbSB0YXJnZXRSYW5nZSBUaGUgZnVsbCByYW5nZSBvZiB0aGUgZGVmaW5pdGlvbi5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0U2VsZWN0aW9uUmFuZ2UgVGhlIHNwYW4gb2YgdGhlIHN5bWJvbCBkZWZpbml0aW9uIGF0IHRoZSB0YXJnZXQuXG4gICAgICogQHBhcmFtIG9yaWdpblNlbGVjdGlvblJhbmdlIFRoZSBzcGFuIG9mIHRoZSBzeW1ib2wgYmVpbmcgZGVmaW5lZCBpbiB0aGUgb3JpZ2luYXRpbmcgc291cmNlIGZpbGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRhcmdldFVyaSwgdGFyZ2V0UmFuZ2UsIHRhcmdldFNlbGVjdGlvblJhbmdlLCBvcmlnaW5TZWxlY3Rpb25SYW5nZSkge1xuICAgICAgICByZXR1cm4geyB0YXJnZXRVcmksIHRhcmdldFJhbmdlLCB0YXJnZXRTZWxlY3Rpb25SYW5nZSwgb3JpZ2luU2VsZWN0aW9uUmFuZ2UgfTtcbiAgICB9XG4gICAgTG9jYXRpb25MaW5rLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIExvY2F0aW9uTGlua30gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUudGFyZ2V0UmFuZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGFyZ2V0VXJpKVxuICAgICAgICAgICAgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnRhcmdldFNlbGVjdGlvblJhbmdlKVxuICAgICAgICAgICAgJiYgKFJhbmdlLmlzKGNhbmRpZGF0ZS5vcmlnaW5TZWxlY3Rpb25SYW5nZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5vcmlnaW5TZWxlY3Rpb25SYW5nZSkpO1xuICAgIH1cbiAgICBMb2NhdGlvbkxpbmsuaXMgPSBpcztcbn0pKExvY2F0aW9uTGluayB8fCAoTG9jYXRpb25MaW5rID0ge30pKTtcbi8qKlxuICogVGhlIENvbG9yIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIENvbG9yfSBsaXRlcmFscy5cbiAqL1xudmFyIENvbG9yO1xuKGZ1bmN0aW9uIChDb2xvcikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3IgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlZCxcbiAgICAgICAgICAgIGdyZWVuLFxuICAgICAgICAgICAgYmx1ZSxcbiAgICAgICAgICAgIGFscGhhLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBDb2xvci5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBDb2xvcn0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLm51bWJlclJhbmdlKGNhbmRpZGF0ZS5yZWQsIDAsIDEpXG4gICAgICAgICAgICAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuZ3JlZW4sIDAsIDEpXG4gICAgICAgICAgICAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuYmx1ZSwgMCwgMSlcbiAgICAgICAgICAgICYmIElzLm51bWJlclJhbmdlKGNhbmRpZGF0ZS5hbHBoYSwgMCwgMSk7XG4gICAgfVxuICAgIENvbG9yLmlzID0gaXM7XG59KShDb2xvciB8fCAoQ29sb3IgPSB7fSkpO1xuLyoqXG4gKiBUaGUgQ29sb3JJbmZvcm1hdGlvbiBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBDb2xvckluZm9ybWF0aW9ufSBsaXRlcmFscy5cbiAqL1xudmFyIENvbG9ySW5mb3JtYXRpb247XG4oZnVuY3Rpb24gKENvbG9ySW5mb3JtYXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvbG9ySW5mb3JtYXRpb24gbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGNvbG9yKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByYW5nZSxcbiAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBDb2xvckluZm9ybWF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIENvbG9ySW5mb3JtYXRpb259IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIENvbG9yLmlzKGNhbmRpZGF0ZS5jb2xvcik7XG4gICAgfVxuICAgIENvbG9ySW5mb3JtYXRpb24uaXMgPSBpcztcbn0pKENvbG9ySW5mb3JtYXRpb24gfHwgKENvbG9ySW5mb3JtYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgQ29sb3IgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgQ29sb3JQcmVzZW50YXRpb259IGxpdGVyYWxzLlxuICovXG52YXIgQ29sb3JQcmVzZW50YXRpb247XG4oZnVuY3Rpb24gKENvbG9yUHJlc2VudGF0aW9uKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvckluZm9ybWF0aW9uIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCB0ZXh0RWRpdCwgYWRkaXRpb25hbFRleHRFZGl0cykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgICB0ZXh0RWRpdCxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxUZXh0RWRpdHMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIENvbG9yUHJlc2VudGF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIENvbG9ySW5mb3JtYXRpb259IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhYmVsKVxuICAgICAgICAgICAgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUudGV4dEVkaXQpIHx8IFRleHRFZGl0LmlzKGNhbmRpZGF0ZSkpXG4gICAgICAgICAgICAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5hZGRpdGlvbmFsVGV4dEVkaXRzKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5hZGRpdGlvbmFsVGV4dEVkaXRzLCBUZXh0RWRpdC5pcykpO1xuICAgIH1cbiAgICBDb2xvclByZXNlbnRhdGlvbi5pcyA9IGlzO1xufSkoQ29sb3JQcmVzZW50YXRpb24gfHwgKENvbG9yUHJlc2VudGF0aW9uID0ge30pKTtcbi8qKlxuICogQSBzZXQgb2YgcHJlZGVmaW5lZCByYW5nZSBraW5kcy5cbiAqL1xudmFyIEZvbGRpbmdSYW5nZUtpbmQ7XG4oZnVuY3Rpb24gKEZvbGRpbmdSYW5nZUtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBGb2xkaW5nIHJhbmdlIGZvciBhIGNvbW1lbnRcbiAgICAgKi9cbiAgICBGb2xkaW5nUmFuZ2VLaW5kLkNvbW1lbnQgPSAnY29tbWVudCc7XG4gICAgLyoqXG4gICAgICogRm9sZGluZyByYW5nZSBmb3IgYW4gaW1wb3J0IG9yIGluY2x1ZGVcbiAgICAgKi9cbiAgICBGb2xkaW5nUmFuZ2VLaW5kLkltcG9ydHMgPSAnaW1wb3J0cyc7XG4gICAgLyoqXG4gICAgICogRm9sZGluZyByYW5nZSBmb3IgYSByZWdpb24gKGUuZy4gYCNyZWdpb25gKVxuICAgICAqL1xuICAgIEZvbGRpbmdSYW5nZUtpbmQuUmVnaW9uID0gJ3JlZ2lvbic7XG59KShGb2xkaW5nUmFuZ2VLaW5kIHx8IChGb2xkaW5nUmFuZ2VLaW5kID0ge30pKTtcbi8qKlxuICogVGhlIGZvbGRpbmcgcmFuZ2UgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgRm9sZGluZ1JhbmdlfSBsaXRlcmFscy5cbiAqL1xudmFyIEZvbGRpbmdSYW5nZTtcbihmdW5jdGlvbiAoRm9sZGluZ1JhbmdlKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBGb2xkaW5nUmFuZ2UgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUoc3RhcnRMaW5lLCBlbmRMaW5lLCBzdGFydENoYXJhY3RlciwgZW5kQ2hhcmFjdGVyLCBraW5kLCBjb2xsYXBzZWRUZXh0KSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgIHN0YXJ0TGluZSxcbiAgICAgICAgICAgIGVuZExpbmVcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKElzLmRlZmluZWQoc3RhcnRDaGFyYWN0ZXIpKSB7XG4gICAgICAgICAgICByZXN1bHQuc3RhcnRDaGFyYWN0ZXIgPSBzdGFydENoYXJhY3RlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoSXMuZGVmaW5lZChlbmRDaGFyYWN0ZXIpKSB7XG4gICAgICAgICAgICByZXN1bHQuZW5kQ2hhcmFjdGVyID0gZW5kQ2hhcmFjdGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKGtpbmQpKSB7XG4gICAgICAgICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKElzLmRlZmluZWQoY29sbGFwc2VkVGV4dCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb2xsYXBzZWRUZXh0ID0gY29sbGFwc2VkVGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBGb2xkaW5nUmFuZ2UuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgRm9sZGluZ1JhbmdlfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLnN0YXJ0TGluZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLnN0YXJ0TGluZSlcbiAgICAgICAgICAgICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLnN0YXJ0Q2hhcmFjdGVyKSB8fCBJcy51aW50ZWdlcihjYW5kaWRhdGUuc3RhcnRDaGFyYWN0ZXIpKVxuICAgICAgICAgICAgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuZW5kQ2hhcmFjdGVyKSB8fCBJcy51aW50ZWdlcihjYW5kaWRhdGUuZW5kQ2hhcmFjdGVyKSlcbiAgICAgICAgICAgICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmtpbmQpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUua2luZCkpO1xuICAgIH1cbiAgICBGb2xkaW5nUmFuZ2UuaXMgPSBpcztcbn0pKEZvbGRpbmdSYW5nZSB8fCAoRm9sZGluZ1JhbmdlID0ge30pKTtcbi8qKlxuICogVGhlIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbn0gbGl0ZXJhbHMuXG4gKi9cbnZhciBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uIChEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGxvY2F0aW9uLCBtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICAgIG1lc3NhZ2VcbiAgICAgICAgfTtcbiAgICB9XG4gICAgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbi5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9ufSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIExvY2F0aW9uLmlzKGNhbmRpZGF0ZS5sb2NhdGlvbikgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5tZXNzYWdlKTtcbiAgICB9XG4gICAgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbi5pcyA9IGlzO1xufSkoRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiB8fCAoRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBkaWFnbm9zdGljJ3Mgc2V2ZXJpdHkuXG4gKi9cbnZhciBEaWFnbm9zdGljU2V2ZXJpdHk7XG4oZnVuY3Rpb24gKERpYWdub3N0aWNTZXZlcml0eSkge1xuICAgIC8qKlxuICAgICAqIFJlcG9ydHMgYW4gZXJyb3IuXG4gICAgICovXG4gICAgRGlhZ25vc3RpY1NldmVyaXR5LkVycm9yID0gMTtcbiAgICAvKipcbiAgICAgKiBSZXBvcnRzIGEgd2FybmluZy5cbiAgICAgKi9cbiAgICBEaWFnbm9zdGljU2V2ZXJpdHkuV2FybmluZyA9IDI7XG4gICAgLyoqXG4gICAgICogUmVwb3J0cyBhbiBpbmZvcm1hdGlvbi5cbiAgICAgKi9cbiAgICBEaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb24gPSAzO1xuICAgIC8qKlxuICAgICAqIFJlcG9ydHMgYSBoaW50LlxuICAgICAqL1xuICAgIERpYWdub3N0aWNTZXZlcml0eS5IaW50ID0gNDtcbn0pKERpYWdub3N0aWNTZXZlcml0eSB8fCAoRGlhZ25vc3RpY1NldmVyaXR5ID0ge30pKTtcbi8qKlxuICogVGhlIGRpYWdub3N0aWMgdGFncy5cbiAqXG4gKiBAc2luY2UgMy4xNS4wXG4gKi9cbnZhciBEaWFnbm9zdGljVGFnO1xuKGZ1bmN0aW9uIChEaWFnbm9zdGljVGFnKSB7XG4gICAgLyoqXG4gICAgICogVW51c2VkIG9yIHVubmVjZXNzYXJ5IGNvZGUuXG4gICAgICpcbiAgICAgKiBDbGllbnRzIGFyZSBhbGxvd2VkIHRvIHJlbmRlciBkaWFnbm9zdGljcyB3aXRoIHRoaXMgdGFnIGZhZGVkIG91dCBpbnN0ZWFkIG9mIGhhdmluZ1xuICAgICAqIGFuIGVycm9yIHNxdWlnZ2xlLlxuICAgICAqL1xuICAgIERpYWdub3N0aWNUYWcuVW5uZWNlc3NhcnkgPSAxO1xuICAgIC8qKlxuICAgICAqIERlcHJlY2F0ZWQgb3Igb2Jzb2xldGUgY29kZS5cbiAgICAgKlxuICAgICAqIENsaWVudHMgYXJlIGFsbG93ZWQgdG8gcmVuZGVyZWQgZGlhZ25vc3RpY3Mgd2l0aCB0aGlzIHRhZyBzdHJpa2UgdGhyb3VnaC5cbiAgICAgKi9cbiAgICBEaWFnbm9zdGljVGFnLkRlcHJlY2F0ZWQgPSAyO1xufSkoRGlhZ25vc3RpY1RhZyB8fCAoRGlhZ25vc3RpY1RhZyA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb2RlRGVzY3JpcHRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0byBkZWFsIHdpdGggZGVzY3JpcHRpb25zIGZvciBkaWFnbm9zdGljIGNvZGVzLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIENvZGVEZXNjcmlwdGlvbjtcbihmdW5jdGlvbiAoQ29kZURlc2NyaXB0aW9uKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5ocmVmKTtcbiAgICB9XG4gICAgQ29kZURlc2NyaXB0aW9uLmlzID0gaXM7XG59KShDb2RlRGVzY3JpcHRpb24gfHwgKENvZGVEZXNjcmlwdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBEaWFnbm9zdGljIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIERpYWdub3N0aWN9IGxpdGVyYWxzLlxuICovXG52YXIgRGlhZ25vc3RpYztcbihmdW5jdGlvbiAoRGlhZ25vc3RpYykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgRGlhZ25vc3RpYyBsaXRlcmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgbWVzc2FnZSwgc2V2ZXJpdHksIGNvZGUsIHNvdXJjZSwgcmVsYXRlZEluZm9ybWF0aW9uKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7IHJhbmdlLCBtZXNzYWdlIH07XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHNldmVyaXR5KSkge1xuICAgICAgICAgICAgcmVzdWx0LnNldmVyaXR5ID0gc2V2ZXJpdHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKElzLmRlZmluZWQoY29kZSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb2RlID0gY29kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoSXMuZGVmaW5lZChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHJlbGF0ZWRJbmZvcm1hdGlvbikpIHtcbiAgICAgICAgICAgIHJlc3VsdC5yZWxhdGVkSW5mb3JtYXRpb24gPSByZWxhdGVkSW5mb3JtYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgRGlhZ25vc3RpYy5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBEaWFnbm9zdGljfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSlcbiAgICAgICAgICAgICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSlcbiAgICAgICAgICAgICYmIElzLnN0cmluZyhjYW5kaWRhdGUubWVzc2FnZSlcbiAgICAgICAgICAgICYmIChJcy5udW1iZXIoY2FuZGlkYXRlLnNldmVyaXR5KSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnNldmVyaXR5KSlcbiAgICAgICAgICAgICYmIChJcy5pbnRlZ2VyKGNhbmRpZGF0ZS5jb2RlKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmNvZGUpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUuY29kZSkpXG4gICAgICAgICAgICAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5jb2RlRGVzY3JpcHRpb24pIHx8IChJcy5zdHJpbmcoKF9hID0gY2FuZGlkYXRlLmNvZGVEZXNjcmlwdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhyZWYpKSlcbiAgICAgICAgICAgICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLnNvdXJjZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5zb3VyY2UpKVxuICAgICAgICAgICAgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUucmVsYXRlZEluZm9ybWF0aW9uKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5yZWxhdGVkSW5mb3JtYXRpb24sIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24uaXMpKTtcbiAgICB9XG4gICAgRGlhZ25vc3RpYy5pcyA9IGlzO1xufSkoRGlhZ25vc3RpYyB8fCAoRGlhZ25vc3RpYyA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb21tYW5kIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIENvbW1hbmR9IGxpdGVyYWxzLlxuICovXG52YXIgQ29tbWFuZDtcbihmdW5jdGlvbiAoQ29tbWFuZCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29tbWFuZCBsaXRlcmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh0aXRsZSwgY29tbWFuZCwgLi4uYXJncykge1xuICAgICAgICBsZXQgcmVzdWx0ID0geyB0aXRsZSwgY29tbWFuZCB9O1xuICAgICAgICBpZiAoSXMuZGVmaW5lZChhcmdzKSAmJiBhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5hcmd1bWVudHMgPSBhcmdzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIENvbW1hbmQuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgQ29tbWFuZH0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRpdGxlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmNvbW1hbmQpO1xuICAgIH1cbiAgICBDb21tYW5kLmlzID0gaXM7XG59KShDb21tYW5kIHx8IChDb21tYW5kID0ge30pKTtcbi8qKlxuICogVGhlIFRleHRFZGl0IG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIHJlcGxhY2UsXG4gKiBpbnNlcnQgYW5kIGRlbGV0ZSBlZGl0cyBtb3JlIGVhc2lseS5cbiAqL1xudmFyIFRleHRFZGl0O1xuKGZ1bmN0aW9uIChUZXh0RWRpdCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZXBsYWNlIHRleHQgZWRpdC5cbiAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIG9mIHRleHQgdG8gYmUgcmVwbGFjZWQuXG4gICAgICogQHBhcmFtIG5ld1RleHQgVGhlIG5ldyB0ZXh0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UocmFuZ2UsIG5ld1RleHQpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2UsIG5ld1RleHQgfTtcbiAgICB9XG4gICAgVGV4dEVkaXQucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBpbnNlcnQgdGV4dCBlZGl0LlxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiBUaGUgcG9zaXRpb24gdG8gaW5zZXJ0IHRoZSB0ZXh0IGF0LlxuICAgICAqIEBwYXJhbSBuZXdUZXh0IFRoZSB0ZXh0IHRvIGJlIGluc2VydGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydChwb3NpdGlvbiwgbmV3VGV4dCkge1xuICAgICAgICByZXR1cm4geyByYW5nZTogeyBzdGFydDogcG9zaXRpb24sIGVuZDogcG9zaXRpb24gfSwgbmV3VGV4dCB9O1xuICAgIH1cbiAgICBUZXh0RWRpdC5pbnNlcnQgPSBpbnNlcnQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGRlbGV0ZSB0ZXh0IGVkaXQuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSBvZiB0ZXh0IHRvIGJlIGRlbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVsKHJhbmdlKSB7XG4gICAgICAgIHJldHVybiB7IHJhbmdlLCBuZXdUZXh0OiAnJyB9O1xuICAgIH1cbiAgICBUZXh0RWRpdC5kZWwgPSBkZWw7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSlcbiAgICAgICAgICAgICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VGV4dClcbiAgICAgICAgICAgICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSk7XG4gICAgfVxuICAgIFRleHRFZGl0LmlzID0gaXM7XG59KShUZXh0RWRpdCB8fCAoVGV4dEVkaXQgPSB7fSkpO1xudmFyIENoYW5nZUFubm90YXRpb247XG4oZnVuY3Rpb24gKENoYW5nZUFubm90YXRpb24pIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIG5lZWRzQ29uZmlybWF0aW9uLCBkZXNjcmlwdGlvbikge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7IGxhYmVsIH07XG4gICAgICAgIGlmIChuZWVkc0NvbmZpcm1hdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHQubmVlZHNDb25maXJtYXRpb24gPSBuZWVkc0NvbmZpcm1hdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgQ2hhbmdlQW5ub3RhdGlvbi5jcmVhdGUgPSBjcmVhdGU7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYWJlbCkgJiZcbiAgICAgICAgICAgIChJcy5ib29sZWFuKGNhbmRpZGF0ZS5uZWVkc0NvbmZpcm1hdGlvbikgfHwgY2FuZGlkYXRlLm5lZWRzQ29uZmlybWF0aW9uID09PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5kZXNjcmlwdGlvbikgfHwgY2FuZGlkYXRlLmRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQpO1xuICAgIH1cbiAgICBDaGFuZ2VBbm5vdGF0aW9uLmlzID0gaXM7XG59KShDaGFuZ2VBbm5vdGF0aW9uIHx8IChDaGFuZ2VBbm5vdGF0aW9uID0ge30pKTtcbnZhciBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllcjtcbihmdW5jdGlvbiAoQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLnN0cmluZyhjYW5kaWRhdGUpO1xuICAgIH1cbiAgICBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyA9IGlzO1xufSkoQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIgfHwgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyID0ge30pKTtcbnZhciBBbm5vdGF0ZWRUZXh0RWRpdDtcbihmdW5jdGlvbiAoQW5ub3RhdGVkVGV4dEVkaXQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFubm90YXRlZCByZXBsYWNlIHRleHQgZWRpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2Ugb2YgdGV4dCB0byBiZSByZXBsYWNlZC5cbiAgICAgKiBAcGFyYW0gbmV3VGV4dCBUaGUgbmV3IHRleHQuXG4gICAgICogQHBhcmFtIGFubm90YXRpb24gVGhlIGFubm90YXRpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZShyYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbikge1xuICAgICAgICByZXR1cm4geyByYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbklkOiBhbm5vdGF0aW9uIH07XG4gICAgfVxuICAgIEFubm90YXRlZFRleHRFZGl0LnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYW5ub3RhdGVkIGluc2VydCB0ZXh0IGVkaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcG9zaXRpb24gVGhlIHBvc2l0aW9uIHRvIGluc2VydCB0aGUgdGV4dCBhdC5cbiAgICAgKiBAcGFyYW0gbmV3VGV4dCBUaGUgdGV4dCB0byBiZSBpbnNlcnRlZC5cbiAgICAgKiBAcGFyYW0gYW5ub3RhdGlvbiBUaGUgYW5ub3RhdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnQocG9zaXRpb24sIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IHsgc3RhcnQ6IHBvc2l0aW9uLCBlbmQ6IHBvc2l0aW9uIH0sIG5ld1RleHQsIGFubm90YXRpb25JZDogYW5ub3RhdGlvbiB9O1xuICAgIH1cbiAgICBBbm5vdGF0ZWRUZXh0RWRpdC5pbnNlcnQgPSBpbnNlcnQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhbm5vdGF0ZWQgZGVsZXRlIHRleHQgZWRpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2Ugb2YgdGV4dCB0byBiZSBkZWxldGVkLlxuICAgICAqIEBwYXJhbSBhbm5vdGF0aW9uIFRoZSBhbm5vdGF0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlbChyYW5nZSwgYW5ub3RhdGlvbikge1xuICAgICAgICByZXR1cm4geyByYW5nZSwgbmV3VGV4dDogJycsIGFubm90YXRpb25JZDogYW5ub3RhdGlvbiB9O1xuICAgIH1cbiAgICBBbm5vdGF0ZWRUZXh0RWRpdC5kZWwgPSBkZWw7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBUZXh0RWRpdC5pcyhjYW5kaWRhdGUpICYmIChDaGFuZ2VBbm5vdGF0aW9uLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpKTtcbiAgICB9XG4gICAgQW5ub3RhdGVkVGV4dEVkaXQuaXMgPSBpcztcbn0pKEFubm90YXRlZFRleHRFZGl0IHx8IChBbm5vdGF0ZWRUZXh0RWRpdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBUZXh0RG9jdW1lbnRFZGl0IG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlXG4gKiBhbiBlZGl0IHRoYXQgbWFuaXB1bGF0ZXMgYSB0ZXh0IGRvY3VtZW50LlxuICovXG52YXIgVGV4dERvY3VtZW50RWRpdDtcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50RWRpdCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYFRleHREb2N1bWVudEVkaXRgXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRleHREb2N1bWVudCwgZWRpdHMpIHtcbiAgICAgICAgcmV0dXJuIHsgdGV4dERvY3VtZW50LCBlZGl0cyB9O1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRFZGl0LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSlcbiAgICAgICAgICAgICYmIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyhjYW5kaWRhdGUudGV4dERvY3VtZW50KVxuICAgICAgICAgICAgJiYgQXJyYXkuaXNBcnJheShjYW5kaWRhdGUuZWRpdHMpO1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRFZGl0LmlzID0gaXM7XG59KShUZXh0RG9jdW1lbnRFZGl0IHx8IChUZXh0RG9jdW1lbnRFZGl0ID0ge30pKTtcbnZhciBDcmVhdGVGaWxlO1xuKGZ1bmN0aW9uIChDcmVhdGVGaWxlKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgb3B0aW9ucywgYW5ub3RhdGlvbikge1xuICAgICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAgICAga2luZDogJ2NyZWF0ZScsXG4gICAgICAgICAgICB1cmlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiAob3B0aW9ucy5vdmVyd3JpdGUgIT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLmlnbm9yZUlmRXhpc3RzICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFubm90YXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmFubm90YXRpb25JZCA9IGFubm90YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgQ3JlYXRlRmlsZS5jcmVhdGUgPSBjcmVhdGU7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIGNhbmRpZGF0ZS5raW5kID09PSAnY3JlYXRlJyAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICgoY2FuZGlkYXRlLm9wdGlvbnMub3ZlcndyaXRlID09PSB1bmRlZmluZWQgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMgPT09IHVuZGVmaW5lZCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmRXhpc3RzKSkpKSAmJiAoY2FuZGlkYXRlLmFubm90YXRpb25JZCA9PT0gdW5kZWZpbmVkIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpKTtcbiAgICB9XG4gICAgQ3JlYXRlRmlsZS5pcyA9IGlzO1xufSkoQ3JlYXRlRmlsZSB8fCAoQ3JlYXRlRmlsZSA9IHt9KSk7XG52YXIgUmVuYW1lRmlsZTtcbihmdW5jdGlvbiAoUmVuYW1lRmlsZSkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShvbGRVcmksIG5ld1VyaSwgb3B0aW9ucywgYW5ub3RhdGlvbikge1xuICAgICAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgICAgICAga2luZDogJ3JlbmFtZScsXG4gICAgICAgICAgICBvbGRVcmksXG4gICAgICAgICAgICBuZXdVcmlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiAob3B0aW9ucy5vdmVyd3JpdGUgIT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLmlnbm9yZUlmRXhpc3RzICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFubm90YXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmFubm90YXRpb25JZCA9IGFubm90YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgUmVuYW1lRmlsZS5jcmVhdGUgPSBjcmVhdGU7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIGNhbmRpZGF0ZS5raW5kID09PSAncmVuYW1lJyAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm9sZFVyaSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5uZXdVcmkpICYmIChjYW5kaWRhdGUub3B0aW9ucyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAoKGNhbmRpZGF0ZS5vcHRpb25zLm92ZXJ3cml0ZSA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMub3ZlcndyaXRlKSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmRXhpc3RzID09PSB1bmRlZmluZWQgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZkV4aXN0cykpKSkgJiYgKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQgPT09IHVuZGVmaW5lZCB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhjYW5kaWRhdGUuYW5ub3RhdGlvbklkKSk7XG4gICAgfVxuICAgIFJlbmFtZUZpbGUuaXMgPSBpcztcbn0pKFJlbmFtZUZpbGUgfHwgKFJlbmFtZUZpbGUgPSB7fSkpO1xudmFyIERlbGV0ZUZpbGU7XG4oZnVuY3Rpb24gKERlbGV0ZUZpbGUpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUodXJpLCBvcHRpb25zLCBhbm5vdGF0aW9uKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICBraW5kOiAnZGVsZXRlJyxcbiAgICAgICAgICAgIHVyaVxuICAgICAgICB9O1xuICAgICAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmIChvcHRpb25zLnJlY3Vyc2l2ZSAhPT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5ub3RhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHQuYW5ub3RhdGlvbklkID0gYW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBEZWxldGVGaWxlLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgY2FuZGlkYXRlLmtpbmQgPT09ICdkZWxldGUnICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgKChjYW5kaWRhdGUub3B0aW9ucy5yZWN1cnNpdmUgPT09IHVuZGVmaW5lZCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLnJlY3Vyc2l2ZSkpICYmIChjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZk5vdEV4aXN0cyA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMpKSkpICYmIChjYW5kaWRhdGUuYW5ub3RhdGlvbklkID09PSB1bmRlZmluZWQgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkpO1xuICAgIH1cbiAgICBEZWxldGVGaWxlLmlzID0gaXM7XG59KShEZWxldGVGaWxlIHx8IChEZWxldGVGaWxlID0ge30pKTtcbnZhciBXb3Jrc3BhY2VFZGl0O1xuKGZ1bmN0aW9uIChXb3Jrc3BhY2VFZGl0KSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmNoYW5nZXMgIT09IHVuZGVmaW5lZCB8fCBjYW5kaWRhdGUuZG9jdW1lbnRDaGFuZ2VzICE9PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmRvY3VtZW50Q2hhbmdlcyA9PT0gdW5kZWZpbmVkIHx8IGNhbmRpZGF0ZS5kb2N1bWVudENoYW5nZXMuZXZlcnkoKGNoYW5nZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChJcy5zdHJpbmcoY2hhbmdlLmtpbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDcmVhdGVGaWxlLmlzKGNoYW5nZSkgfHwgUmVuYW1lRmlsZS5pcyhjaGFuZ2UpIHx8IERlbGV0ZUZpbGUuaXMoY2hhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBUZXh0RG9jdW1lbnRFZGl0LmlzKGNoYW5nZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgIH1cbiAgICBXb3Jrc3BhY2VFZGl0LmlzID0gaXM7XG59KShXb3Jrc3BhY2VFZGl0IHx8IChXb3Jrc3BhY2VFZGl0ID0ge30pKTtcbmNsYXNzIFRleHRFZGl0Q2hhbmdlSW1wbCB7XG4gICAgY29uc3RydWN0b3IoZWRpdHMsIGNoYW5nZUFubm90YXRpb25zKSB7XG4gICAgICAgIHRoaXMuZWRpdHMgPSBlZGl0cztcbiAgICAgICAgdGhpcy5jaGFuZ2VBbm5vdGF0aW9ucyA9IGNoYW5nZUFubm90YXRpb25zO1xuICAgIH1cbiAgICBpbnNlcnQocG9zaXRpb24sIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICAgICAgbGV0IGVkaXQ7XG4gICAgICAgIGxldCBpZDtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZWRpdCA9IFRleHRFZGl0Lmluc2VydChwb3NpdGlvbiwgbmV3VGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoYW5ub3RhdGlvbikpIHtcbiAgICAgICAgICAgIGlkID0gYW5ub3RhdGlvbjtcbiAgICAgICAgICAgIGVkaXQgPSBBbm5vdGF0ZWRUZXh0RWRpdC5pbnNlcnQocG9zaXRpb24sIG5ld1RleHQsIGFubm90YXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyh0aGlzLmNoYW5nZUFubm90YXRpb25zKTtcbiAgICAgICAgICAgIGlkID0gdGhpcy5jaGFuZ2VBbm5vdGF0aW9ucy5tYW5hZ2UoYW5ub3RhdGlvbik7XG4gICAgICAgICAgICBlZGl0ID0gQW5ub3RhdGVkVGV4dEVkaXQuaW5zZXJ0KHBvc2l0aW9uLCBuZXdUZXh0LCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKGVkaXQpO1xuICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlcGxhY2UocmFuZ2UsIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICAgICAgbGV0IGVkaXQ7XG4gICAgICAgIGxldCBpZDtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZWRpdCA9IFRleHRFZGl0LnJlcGxhY2UocmFuZ2UsIG5ld1RleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGFubm90YXRpb24pKSB7XG4gICAgICAgICAgICBpZCA9IGFubm90YXRpb247XG4gICAgICAgICAgICBlZGl0ID0gQW5ub3RhdGVkVGV4dEVkaXQucmVwbGFjZShyYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFzc2VydENoYW5nZUFubm90YXRpb25zKHRoaXMuY2hhbmdlQW5ub3RhdGlvbnMpO1xuICAgICAgICAgICAgaWQgPSB0aGlzLmNoYW5nZUFubm90YXRpb25zLm1hbmFnZShhbm5vdGF0aW9uKTtcbiAgICAgICAgICAgIGVkaXQgPSBBbm5vdGF0ZWRUZXh0RWRpdC5yZXBsYWNlKHJhbmdlLCBuZXdUZXh0LCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKGVkaXQpO1xuICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlbGV0ZShyYW5nZSwgYW5ub3RhdGlvbikge1xuICAgICAgICBsZXQgZWRpdDtcbiAgICAgICAgbGV0IGlkO1xuICAgICAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBlZGl0ID0gVGV4dEVkaXQuZGVsKHJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhhbm5vdGF0aW9uKSkge1xuICAgICAgICAgICAgaWQgPSBhbm5vdGF0aW9uO1xuICAgICAgICAgICAgZWRpdCA9IEFubm90YXRlZFRleHRFZGl0LmRlbChyYW5nZSwgYW5ub3RhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFzc2VydENoYW5nZUFubm90YXRpb25zKHRoaXMuY2hhbmdlQW5ub3RhdGlvbnMpO1xuICAgICAgICAgICAgaWQgPSB0aGlzLmNoYW5nZUFubm90YXRpb25zLm1hbmFnZShhbm5vdGF0aW9uKTtcbiAgICAgICAgICAgIGVkaXQgPSBBbm5vdGF0ZWRUZXh0RWRpdC5kZWwocmFuZ2UsIGlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVkaXRzLnB1c2goZWRpdCk7XG4gICAgICAgIGlmIChpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkKGVkaXQpIHtcbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKGVkaXQpO1xuICAgIH1cbiAgICBhbGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRzO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5lZGl0cy5zcGxpY2UoMCwgdGhpcy5lZGl0cy5sZW5ndGgpO1xuICAgIH1cbiAgICBhc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUZXh0IGVkaXQgY2hhbmdlIGlzIG5vdCBjb25maWd1cmVkIHRvIG1hbmFnZSBjaGFuZ2UgYW5ub3RhdGlvbnMuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEEgaGVscGVyIGNsYXNzXG4gKi9cbmNsYXNzIENoYW5nZUFubm90YXRpb25zIHtcbiAgICBjb25zdHJ1Y3Rvcihhbm5vdGF0aW9ucykge1xuICAgICAgICB0aGlzLl9hbm5vdGF0aW9ucyA9IGFubm90YXRpb25zID09PSB1bmRlZmluZWQgPyBPYmplY3QuY3JlYXRlKG51bGwpIDogYW5ub3RhdGlvbnM7XG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICB9XG4gICAgYWxsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYW5ub3RhdGlvbnM7XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICB9XG4gICAgbWFuYWdlKGlkT3JBbm5vdGF0aW9uLCBhbm5vdGF0aW9uKSB7XG4gICAgICAgIGxldCBpZDtcbiAgICAgICAgaWYgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGlkT3JBbm5vdGF0aW9uKSkge1xuICAgICAgICAgICAgaWQgPSBpZE9yQW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlkID0gdGhpcy5uZXh0SWQoKTtcbiAgICAgICAgICAgIGFubm90YXRpb24gPSBpZE9yQW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYW5ub3RhdGlvbnNbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSWQgJHtpZH0gaXMgYWxyZWFkeSBpbiB1c2UuYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBhbm5vdGF0aW9uIHByb3ZpZGVkIGZvciBpZCAke2lkfWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Fubm90YXRpb25zW2lkXSA9IGFubm90YXRpb247XG4gICAgICAgIHRoaXMuX3NpemUrKztcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICBuZXh0SWQoKSB7XG4gICAgICAgIHRoaXMuX2NvdW50ZXIrKztcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvdW50ZXIudG9TdHJpbmcoKTtcbiAgICB9XG59XG4vKipcbiAqIEEgd29ya3NwYWNlIGNoYW5nZSBoZWxwcyBjb25zdHJ1Y3RpbmcgY2hhbmdlcyB0byBhIHdvcmtzcGFjZS5cbiAqL1xuY2xhc3MgV29ya3NwYWNlQ2hhbmdlIHtcbiAgICBjb25zdHJ1Y3Rvcih3b3Jrc3BhY2VFZGl0KSB7XG4gICAgICAgIHRoaXMuX3RleHRFZGl0Q2hhbmdlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGlmICh3b3Jrc3BhY2VFZGl0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQgPSB3b3Jrc3BhY2VFZGl0O1xuICAgICAgICAgICAgaWYgKHdvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMgPSBuZXcgQ2hhbmdlQW5ub3RhdGlvbnMod29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyk7XG4gICAgICAgICAgICAgICAgd29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyA9IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLmFsbCgpO1xuICAgICAgICAgICAgICAgIHdvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLmZvckVhY2goKGNoYW5nZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoVGV4dERvY3VtZW50RWRpdC5pcyhjaGFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0RWRpdENoYW5nZSA9IG5ldyBUZXh0RWRpdENoYW5nZUltcGwoY2hhbmdlLmVkaXRzLCB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0RWRpdENoYW5nZXNbY2hhbmdlLnRleHREb2N1bWVudC51cmldID0gdGV4dEVkaXRDaGFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHdvcmtzcGFjZUVkaXQuY2hhbmdlcykge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHdvcmtzcGFjZUVkaXQuY2hhbmdlcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHRFZGl0Q2hhbmdlID0gbmV3IFRleHRFZGl0Q2hhbmdlSW1wbCh3b3Jrc3BhY2VFZGl0LmNoYW5nZXNba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHRFZGl0Q2hhbmdlc1trZXldID0gdGV4dEVkaXRDaGFuZ2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0ID0ge307XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdW5kZXJseWluZyB7QGxpbmsgV29ya3NwYWNlRWRpdH0gbGl0ZXJhbFxuICAgICAqIHVzZSB0byBiZSByZXR1cm5lZCBmcm9tIGEgd29ya3NwYWNlIGVkaXQgb3BlcmF0aW9uIGxpa2UgcmVuYW1lLlxuICAgICAqL1xuICAgIGdldCBlZGl0KCkge1xuICAgICAgICB0aGlzLmluaXREb2N1bWVudENoYW5nZXMoKTtcbiAgICAgICAgaWYgKHRoaXMuX2NoYW5nZUFubm90YXRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuY2hhbmdlQW5ub3RhdGlvbnMgPSB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucy5hbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fd29ya3NwYWNlRWRpdDtcbiAgICB9XG4gICAgZ2V0VGV4dEVkaXRDaGFuZ2Uoa2V5KSB7XG4gICAgICAgIGlmIChPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIuaXMoa2V5KSkge1xuICAgICAgICAgICAgdGhpcy5pbml0RG9jdW1lbnRDaGFuZ2VzKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIGRvY3VtZW50IGNoYW5nZXMuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0ZXh0RG9jdW1lbnQgPSB7IHVyaToga2V5LnVyaSwgdmVyc2lvbjoga2V5LnZlcnNpb24gfTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB0aGlzLl90ZXh0RWRpdENoYW5nZXNbdGV4dERvY3VtZW50LnVyaV07XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVkaXRzID0gW107XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dERvY3VtZW50RWRpdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dERvY3VtZW50LFxuICAgICAgICAgICAgICAgICAgICBlZGl0c1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMucHVzaCh0ZXh0RG9jdW1lbnRFZGl0KTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKGVkaXRzLCB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dEVkaXRDaGFuZ2VzW3RleHREb2N1bWVudC51cmldID0gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdENoYW5nZXMoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIG5vcm1hbCB0ZXh0IGVkaXQgY2hhbmdlcy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB0aGlzLl90ZXh0RWRpdENoYW5nZXNba2V5XTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgbGV0IGVkaXRzID0gW107XG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VzW2tleV0gPSBlZGl0cztcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKGVkaXRzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0RWRpdENoYW5nZXNba2V5XSA9IHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5pdERvY3VtZW50Q2hhbmdlcygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzID09PSB1bmRlZmluZWQgJiYgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZUFubm90YXRpb25zID0gbmV3IENoYW5nZUFubm90YXRpb25zKCk7XG4gICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyA9IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLmFsbCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluaXRDaGFuZ2VzKCkge1xuICAgICAgICBpZiAodGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMgPT09IHVuZGVmaW5lZCAmJiB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVGaWxlKHVyaSwgb3B0aW9uc09yQW5ub3RhdGlvbiwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXREb2N1bWVudENoYW5nZXMoKTtcbiAgICAgICAgaWYgKHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIGRvY3VtZW50IGNoYW5nZXMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFubm90YXRpb247XG4gICAgICAgIGlmIChDaGFuZ2VBbm5vdGF0aW9uLmlzKG9wdGlvbnNPckFubm90YXRpb24pIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKG9wdGlvbnNPckFubm90YXRpb24pKSB7XG4gICAgICAgICAgICBhbm5vdGF0aW9uID0gb3B0aW9uc09yQW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zT3JBbm5vdGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvcGVyYXRpb247XG4gICAgICAgIGxldCBpZDtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3BlcmF0aW9uID0gQ3JlYXRlRmlsZS5jcmVhdGUodXJpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlkID0gQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoYW5ub3RhdGlvbikgPyBhbm5vdGF0aW9uIDogdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMubWFuYWdlKGFubm90YXRpb24pO1xuICAgICAgICAgICAgb3BlcmF0aW9uID0gQ3JlYXRlRmlsZS5jcmVhdGUodXJpLCBvcHRpb25zLCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMucHVzaChvcGVyYXRpb24pO1xuICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbmFtZUZpbGUob2xkVXJpLCBuZXdVcmksIG9wdGlvbnNPckFubm90YXRpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0RG9jdW1lbnRDaGFuZ2VzKCk7XG4gICAgICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dvcmtzcGFjZSBlZGl0IGlzIG5vdCBjb25maWd1cmVkIGZvciBkb2N1bWVudCBjaGFuZ2VzLicpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhbm5vdGF0aW9uO1xuICAgICAgICBpZiAoQ2hhbmdlQW5ub3RhdGlvbi5pcyhvcHRpb25zT3JBbm5vdGF0aW9uKSB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhvcHRpb25zT3JBbm5vdGF0aW9uKSkge1xuICAgICAgICAgICAgYW5ub3RhdGlvbiA9IG9wdGlvbnNPckFubm90YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9uc09yQW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3BlcmF0aW9uO1xuICAgICAgICBsZXQgaWQ7XG4gICAgICAgIGlmIChhbm5vdGF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbiA9IFJlbmFtZUZpbGUuY3JlYXRlKG9sZFVyaSwgbmV3VXJpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlkID0gQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoYW5ub3RhdGlvbikgPyBhbm5vdGF0aW9uIDogdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMubWFuYWdlKGFubm90YXRpb24pO1xuICAgICAgICAgICAgb3BlcmF0aW9uID0gUmVuYW1lRmlsZS5jcmVhdGUob2xkVXJpLCBuZXdVcmksIG9wdGlvbnMsIGlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcy5wdXNoKG9wZXJhdGlvbik7XG4gICAgICAgIGlmIChpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVsZXRlRmlsZSh1cmksIG9wdGlvbnNPckFubm90YXRpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pbml0RG9jdW1lbnRDaGFuZ2VzKCk7XG4gICAgICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dvcmtzcGFjZSBlZGl0IGlzIG5vdCBjb25maWd1cmVkIGZvciBkb2N1bWVudCBjaGFuZ2VzLicpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhbm5vdGF0aW9uO1xuICAgICAgICBpZiAoQ2hhbmdlQW5ub3RhdGlvbi5pcyhvcHRpb25zT3JBbm5vdGF0aW9uKSB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhvcHRpb25zT3JBbm5vdGF0aW9uKSkge1xuICAgICAgICAgICAgYW5ub3RhdGlvbiA9IG9wdGlvbnNPckFubm90YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9uc09yQW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgb3BlcmF0aW9uO1xuICAgICAgICBsZXQgaWQ7XG4gICAgICAgIGlmIChhbm5vdGF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9wZXJhdGlvbiA9IERlbGV0ZUZpbGUuY3JlYXRlKHVyaSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZCA9IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGFubm90YXRpb24pID8gYW5ub3RhdGlvbiA6IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLm1hbmFnZShhbm5vdGF0aW9uKTtcbiAgICAgICAgICAgIG9wZXJhdGlvbiA9IERlbGV0ZUZpbGUuY3JlYXRlKHVyaSwgb3B0aW9ucywgaWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLnB1c2gob3BlcmF0aW9uKTtcbiAgICAgICAgaWYgKGlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVGhlIFRleHREb2N1bWVudElkZW50aWZpZXIgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgVGV4dERvY3VtZW50SWRlbnRpZmllcn0gbGl0ZXJhbHMuXG4gKi9cbnZhciBUZXh0RG9jdW1lbnRJZGVudGlmaWVyO1xuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBUZXh0RG9jdW1lbnRJZGVudGlmaWVyIGxpdGVyYWwuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgZG9jdW1lbnQncyB1cmkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSkge1xuICAgICAgICByZXR1cm4geyB1cmkgfTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50SWRlbnRpZmllci5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBUZXh0RG9jdW1lbnRJZGVudGlmaWVyfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50SWRlbnRpZmllciB8fCAoVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG4vKipcbiAqIFRoZSBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXJ9IGxpdGVyYWxzLlxuICovXG52YXIgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjtcbihmdW5jdGlvbiAoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciBsaXRlcmFsLlxuICAgICAqIEBwYXJhbSB1cmkgVGhlIGRvY3VtZW50J3MgdXJpLlxuICAgICAqIEBwYXJhbSB2ZXJzaW9uIFRoZSBkb2N1bWVudCdzIHZlcnNpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgdmVyc2lvbikge1xuICAgICAgICByZXR1cm4geyB1cmksIHZlcnNpb24gfTtcbiAgICB9XG4gICAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiBJcy5pbnRlZ2VyKGNhbmRpZGF0ZS52ZXJzaW9uKTtcbiAgICB9XG4gICAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyA9IGlzO1xufSkoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciB8fCAoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG4vKipcbiAqIFRoZSBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyfSBsaXRlcmFscy5cbiAqL1xudmFyIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjtcbihmdW5jdGlvbiAoT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKiBAcGFyYW0gdmVyc2lvbiBUaGUgZG9jdW1lbnQncyB2ZXJzaW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHsgdXJpLCB2ZXJzaW9uIH07XG4gICAgfVxuICAgIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXJ9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpICYmIChjYW5kaWRhdGUudmVyc2lvbiA9PT0gbnVsbCB8fCBJcy5pbnRlZ2VyKGNhbmRpZGF0ZS52ZXJzaW9uKSk7XG4gICAgfVxuICAgIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyA9IGlzO1xufSkoT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIHx8IChPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgPSB7fSkpO1xuLyoqXG4gKiBUaGUgVGV4dERvY3VtZW50SXRlbSBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBUZXh0RG9jdW1lbnRJdGVtfSBsaXRlcmFscy5cbiAqL1xudmFyIFRleHREb2N1bWVudEl0ZW07XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudEl0ZW0pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFRleHREb2N1bWVudEl0ZW0gbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2VJZCBUaGUgZG9jdW1lbnQncyBsYW5ndWFnZSBpZGVudGlmaWVyLlxuICAgICAqIEBwYXJhbSB2ZXJzaW9uIFRoZSBkb2N1bWVudCdzIHZlcnNpb24gbnVtYmVyLlxuICAgICAqIEBwYXJhbSB0ZXh0IFRoZSBkb2N1bWVudCdzIHRleHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgdGV4dCkge1xuICAgICAgICByZXR1cm4geyB1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIHRleHQgfTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50SXRlbS5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBUZXh0RG9jdW1lbnRJdGVtfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlSWQpICYmIElzLmludGVnZXIoY2FuZGlkYXRlLnZlcnNpb24pICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGV4dCk7XG4gICAgfVxuICAgIFRleHREb2N1bWVudEl0ZW0uaXMgPSBpcztcbn0pKFRleHREb2N1bWVudEl0ZW0gfHwgKFRleHREb2N1bWVudEl0ZW0gPSB7fSkpO1xuLyoqXG4gKiBEZXNjcmliZXMgdGhlIGNvbnRlbnQgdHlwZSB0aGF0IGEgY2xpZW50IHN1cHBvcnRzIGluIHZhcmlvdXNcbiAqIHJlc3VsdCBsaXRlcmFscyBsaWtlIGBIb3ZlcmAsIGBQYXJhbWV0ZXJJbmZvYCBvciBgQ29tcGxldGlvbkl0ZW1gLlxuICpcbiAqIFBsZWFzZSBub3RlIHRoYXQgYE1hcmt1cEtpbmRzYCBtdXN0IG5vdCBzdGFydCB3aXRoIGEgYCRgLiBUaGlzIGtpbmRzXG4gKiBhcmUgcmVzZXJ2ZWQgZm9yIGludGVybmFsIHVzYWdlLlxuICovXG52YXIgTWFya3VwS2luZDtcbihmdW5jdGlvbiAoTWFya3VwS2luZCkge1xuICAgIC8qKlxuICAgICAqIFBsYWluIHRleHQgaXMgc3VwcG9ydGVkIGFzIGEgY29udGVudCBmb3JtYXRcbiAgICAgKi9cbiAgICBNYXJrdXBLaW5kLlBsYWluVGV4dCA9ICdwbGFpbnRleHQnO1xuICAgIC8qKlxuICAgICAqIE1hcmtkb3duIGlzIHN1cHBvcnRlZCBhcyBhIGNvbnRlbnQgZm9ybWF0XG4gICAgICovXG4gICAgTWFya3VwS2luZC5NYXJrZG93biA9ICdtYXJrZG93bic7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGEgdmFsdWUgb2YgdGhlIHtAbGluayBNYXJrdXBLaW5kfSB0eXBlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlID09PSBNYXJrdXBLaW5kLlBsYWluVGV4dCB8fCBjYW5kaWRhdGUgPT09IE1hcmt1cEtpbmQuTWFya2Rvd247XG4gICAgfVxuICAgIE1hcmt1cEtpbmQuaXMgPSBpcztcbn0pKE1hcmt1cEtpbmQgfHwgKE1hcmt1cEtpbmQgPSB7fSkpO1xudmFyIE1hcmt1cENvbnRlbnQ7XG4oZnVuY3Rpb24gKE1hcmt1cENvbnRlbnQpIHtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgY29uZm9ybXMgdG8gdGhlIHtAbGluayBNYXJrdXBDb250ZW50fSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKHZhbHVlKSAmJiBNYXJrdXBLaW5kLmlzKGNhbmRpZGF0ZS5raW5kKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnZhbHVlKTtcbiAgICB9XG4gICAgTWFya3VwQ29udGVudC5pcyA9IGlzO1xufSkoTWFya3VwQ29udGVudCB8fCAoTWFya3VwQ29udGVudCA9IHt9KSk7XG4vKipcbiAqIFRoZSBraW5kIG9mIGEgY29tcGxldGlvbiBlbnRyeS5cbiAqL1xudmFyIENvbXBsZXRpb25JdGVtS2luZDtcbihmdW5jdGlvbiAoQ29tcGxldGlvbkl0ZW1LaW5kKSB7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlRleHQgPSAxO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5NZXRob2QgPSAyO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbiA9IDM7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0cnVjdG9yID0gNDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRmllbGQgPSA1O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZSA9IDY7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkNsYXNzID0gNztcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlID0gODtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlID0gOTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHkgPSAxMDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuVW5pdCA9IDExO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5WYWx1ZSA9IDEyO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5FbnVtID0gMTM7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQgPSAxNDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuU25pcHBldCA9IDE1O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Db2xvciA9IDE2O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5GaWxlID0gMTc7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlJlZmVyZW5jZSA9IDE4O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Gb2xkZXIgPSAxOTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRW51bU1lbWJlciA9IDIwO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Db25zdGFudCA9IDIxO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5TdHJ1Y3QgPSAyMjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRXZlbnQgPSAyMztcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuT3BlcmF0b3IgPSAyNDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuVHlwZVBhcmFtZXRlciA9IDI1O1xufSkoQ29tcGxldGlvbkl0ZW1LaW5kIHx8IChDb21wbGV0aW9uSXRlbUtpbmQgPSB7fSkpO1xuLyoqXG4gKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGluc2VydCB0ZXh0IGluIGEgY29tcGxldGlvbiBpdGVtIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhc1xuICogcGxhaW4gdGV4dCBvciBhIHNuaXBwZXQuXG4gKi9cbnZhciBJbnNlcnRUZXh0Rm9ybWF0O1xuKGZ1bmN0aW9uIChJbnNlcnRUZXh0Rm9ybWF0KSB7XG4gICAgLyoqXG4gICAgICogVGhlIHByaW1hcnkgdGV4dCB0byBiZSBpbnNlcnRlZCBpcyB0cmVhdGVkIGFzIGEgcGxhaW4gc3RyaW5nLlxuICAgICAqL1xuICAgIEluc2VydFRleHRGb3JtYXQuUGxhaW5UZXh0ID0gMTtcbiAgICAvKipcbiAgICAgKiBUaGUgcHJpbWFyeSB0ZXh0IHRvIGJlIGluc2VydGVkIGlzIHRyZWF0ZWQgYXMgYSBzbmlwcGV0LlxuICAgICAqXG4gICAgICogQSBzbmlwcGV0IGNhbiBkZWZpbmUgdGFiIHN0b3BzIGFuZCBwbGFjZWhvbGRlcnMgd2l0aCBgJDFgLCBgJDJgXG4gICAgICogYW5kIGAkezM6Zm9vfWAuIGAkMGAgZGVmaW5lcyB0aGUgZmluYWwgdGFiIHN0b3AsIGl0IGRlZmF1bHRzIHRvXG4gICAgICogdGhlIGVuZCBvZiB0aGUgc25pcHBldC4gUGxhY2Vob2xkZXJzIHdpdGggZXF1YWwgaWRlbnRpZmllcnMgYXJlIGxpbmtlZCxcbiAgICAgKiB0aGF0IGlzIHR5cGluZyBpbiBvbmUgd2lsbCB1cGRhdGUgb3RoZXJzIHRvby5cbiAgICAgKlxuICAgICAqIFNlZSBhbHNvOiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jc25pcHBldF9zeW50YXhcbiAgICAgKi9cbiAgICBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQgPSAyO1xufSkoSW5zZXJ0VGV4dEZvcm1hdCB8fCAoSW5zZXJ0VGV4dEZvcm1hdCA9IHt9KSk7XG4vKipcbiAqIENvbXBsZXRpb24gaXRlbSB0YWdzIGFyZSBleHRyYSBhbm5vdGF0aW9ucyB0aGF0IHR3ZWFrIHRoZSByZW5kZXJpbmcgb2YgYSBjb21wbGV0aW9uXG4gKiBpdGVtLlxuICpcbiAqIEBzaW5jZSAzLjE1LjBcbiAqL1xudmFyIENvbXBsZXRpb25JdGVtVGFnO1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uSXRlbVRhZykge1xuICAgIC8qKlxuICAgICAqIFJlbmRlciBhIGNvbXBsZXRpb24gYXMgb2Jzb2xldGUsIHVzdWFsbHkgdXNpbmcgYSBzdHJpa2Utb3V0LlxuICAgICAqL1xuICAgIENvbXBsZXRpb25JdGVtVGFnLkRlcHJlY2F0ZWQgPSAxO1xufSkoQ29tcGxldGlvbkl0ZW1UYWcgfHwgKENvbXBsZXRpb25JdGVtVGFnID0ge30pKTtcbi8qKlxuICogVGhlIEluc2VydFJlcGxhY2VFZGl0IG5hbWVzcGFjZSBwcm92aWRlcyBmdW5jdGlvbnMgdG8gZGVhbCB3aXRoIGluc2VydCAvIHJlcGxhY2UgZWRpdHMuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgSW5zZXJ0UmVwbGFjZUVkaXQ7XG4oZnVuY3Rpb24gKEluc2VydFJlcGxhY2VFZGl0KSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnNlcnQgLyByZXBsYWNlIGVkaXRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUobmV3VGV4dCwgaW5zZXJ0LCByZXBsYWNlKSB7XG4gICAgICAgIHJldHVybiB7IG5ld1RleHQsIGluc2VydCwgcmVwbGFjZSB9O1xuICAgIH1cbiAgICBJbnNlcnRSZXBsYWNlRWRpdC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBJbnNlcnRSZXBsYWNlRWRpdH0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VGV4dCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLmluc2VydCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJlcGxhY2UpO1xuICAgIH1cbiAgICBJbnNlcnRSZXBsYWNlRWRpdC5pcyA9IGlzO1xufSkoSW5zZXJ0UmVwbGFjZUVkaXQgfHwgKEluc2VydFJlcGxhY2VFZGl0ID0ge30pKTtcbi8qKlxuICogSG93IHdoaXRlc3BhY2UgYW5kIGluZGVudGF0aW9uIGlzIGhhbmRsZWQgZHVyaW5nIGNvbXBsZXRpb25cbiAqIGl0ZW0gaW5zZXJ0aW9uLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIEluc2VydFRleHRNb2RlO1xuKGZ1bmN0aW9uIChJbnNlcnRUZXh0TW9kZSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBpbnNlcnRpb24gb3IgcmVwbGFjZSBzdHJpbmdzIGlzIHRha2VuIGFzIGl0IGlzLiBJZiB0aGVcbiAgICAgKiB2YWx1ZSBpcyBtdWx0aSBsaW5lIHRoZSBsaW5lcyBiZWxvdyB0aGUgY3Vyc29yIHdpbGwgYmVcbiAgICAgKiBpbnNlcnRlZCB1c2luZyB0aGUgaW5kZW50YXRpb24gZGVmaW5lZCBpbiB0aGUgc3RyaW5nIHZhbHVlLlxuICAgICAqIFRoZSBjbGllbnQgd2lsbCBub3QgYXBwbHkgYW55IGtpbmQgb2YgYWRqdXN0bWVudHMgdG8gdGhlXG4gICAgICogc3RyaW5nLlxuICAgICAqL1xuICAgIEluc2VydFRleHRNb2RlLmFzSXMgPSAxO1xuICAgIC8qKlxuICAgICAqIFRoZSBlZGl0b3IgYWRqdXN0cyBsZWFkaW5nIHdoaXRlc3BhY2Ugb2YgbmV3IGxpbmVzIHNvIHRoYXRcbiAgICAgKiB0aGV5IG1hdGNoIHRoZSBpbmRlbnRhdGlvbiB1cCB0byB0aGUgY3Vyc29yIG9mIHRoZSBsaW5lIGZvclxuICAgICAqIHdoaWNoIHRoZSBpdGVtIGlzIGFjY2VwdGVkLlxuICAgICAqXG4gICAgICogQ29uc2lkZXIgYSBsaW5lIGxpa2UgdGhpczogPDJ0YWJzPjxjdXJzb3I+PDN0YWJzPmZvby4gQWNjZXB0aW5nIGFcbiAgICAgKiBtdWx0aSBsaW5lIGNvbXBsZXRpb24gaXRlbSBpcyBpbmRlbnRlZCB1c2luZyAyIHRhYnMgYW5kIGFsbFxuICAgICAqIGZvbGxvd2luZyBsaW5lcyBpbnNlcnRlZCB3aWxsIGJlIGluZGVudGVkIHVzaW5nIDIgdGFicyBhcyB3ZWxsLlxuICAgICAqL1xuICAgIEluc2VydFRleHRNb2RlLmFkanVzdEluZGVudGF0aW9uID0gMjtcbn0pKEluc2VydFRleHRNb2RlIHx8IChJbnNlcnRUZXh0TW9kZSA9IHt9KSk7XG52YXIgQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHM7XG4oZnVuY3Rpb24gKENvbXBsZXRpb25JdGVtTGFiZWxEZXRhaWxzKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUuZGV0YWlsKSB8fCBjYW5kaWRhdGUuZGV0YWlsID09PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5kZXNjcmlwdGlvbikgfHwgY2FuZGlkYXRlLmRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQpO1xuICAgIH1cbiAgICBDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlscy5pcyA9IGlzO1xufSkoQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHMgfHwgKENvbXBsZXRpb25JdGVtTGFiZWxEZXRhaWxzID0ge30pKTtcbi8qKlxuICogVGhlIENvbXBsZXRpb25JdGVtIG5hbWVzcGFjZSBwcm92aWRlcyBmdW5jdGlvbnMgdG8gZGVhbCB3aXRoXG4gKiBjb21wbGV0aW9uIGl0ZW1zLlxuICovXG52YXIgQ29tcGxldGlvbkl0ZW07XG4oZnVuY3Rpb24gKENvbXBsZXRpb25JdGVtKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY29tcGxldGlvbiBpdGVtIGFuZCBzZWVkIGl0IHdpdGggYSBsYWJlbC5cbiAgICAgKiBAcGFyYW0gbGFiZWwgVGhlIGNvbXBsZXRpb24gaXRlbSdzIGxhYmVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsKSB7XG4gICAgICAgIHJldHVybiB7IGxhYmVsIH07XG4gICAgfVxuICAgIENvbXBsZXRpb25JdGVtLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKENvbXBsZXRpb25JdGVtIHx8IChDb21wbGV0aW9uSXRlbSA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb21wbGV0aW9uTGlzdCBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aFxuICogY29tcGxldGlvbiBsaXN0cy5cbiAqL1xudmFyIENvbXBsZXRpb25MaXN0O1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uTGlzdCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29tcGxldGlvbiBsaXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGl0ZW1zIFRoZSBjb21wbGV0aW9uIGl0ZW1zLlxuICAgICAqIEBwYXJhbSBpc0luY29tcGxldGUgVGhlIGxpc3QgaXMgbm90IGNvbXBsZXRlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShpdGVtcywgaXNJbmNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiB7IGl0ZW1zOiBpdGVtcyA/IGl0ZW1zIDogW10sIGlzSW5jb21wbGV0ZTogISFpc0luY29tcGxldGUgfTtcbiAgICB9XG4gICAgQ29tcGxldGlvbkxpc3QuY3JlYXRlID0gY3JlYXRlO1xufSkoQ29tcGxldGlvbkxpc3QgfHwgKENvbXBsZXRpb25MaXN0ID0ge30pKTtcbnZhciBNYXJrZWRTdHJpbmc7XG4oZnVuY3Rpb24gKE1hcmtlZFN0cmluZykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXJrZWQgc3RyaW5nIGZyb20gcGxhaW4gdGV4dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwbGFpblRleHQgVGhlIHBsYWluIHRleHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBsYWluVGV4dChwbGFpblRleHQpIHtcbiAgICAgICAgcmV0dXJuIHBsYWluVGV4dC5yZXBsYWNlKC9bXFxcXGAqX3t9W1xcXSgpIytcXC0uIV0vZywgJ1xcXFwkJicpOyAvLyBlc2NhcGUgbWFya2Rvd24gc3ludGF4IHRva2VuczogaHR0cDovL2RhcmluZ2ZpcmViYWxsLm5ldC9wcm9qZWN0cy9tYXJrZG93bi9zeW50YXgjYmFja3NsYXNoXG4gICAgfVxuICAgIE1hcmtlZFN0cmluZy5mcm9tUGxhaW5UZXh0ID0gZnJvbVBsYWluVGV4dDtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgY29uZm9ybXMgdG8gdGhlIHtAbGluayBNYXJrZWRTdHJpbmd9IHR5cGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5zdHJpbmcoY2FuZGlkYXRlKSB8fCAoSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudmFsdWUpKTtcbiAgICB9XG4gICAgTWFya2VkU3RyaW5nLmlzID0gaXM7XG59KShNYXJrZWRTdHJpbmcgfHwgKE1hcmtlZFN0cmluZyA9IHt9KSk7XG52YXIgSG92ZXI7XG4oZnVuY3Rpb24gKEhvdmVyKSB7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgSG92ZXJ9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiAhIWNhbmRpZGF0ZSAmJiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgKE1hcmt1cENvbnRlbnQuaXMoY2FuZGlkYXRlLmNvbnRlbnRzKSB8fFxuICAgICAgICAgICAgTWFya2VkU3RyaW5nLmlzKGNhbmRpZGF0ZS5jb250ZW50cykgfHxcbiAgICAgICAgICAgIElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmNvbnRlbnRzLCBNYXJrZWRTdHJpbmcuaXMpKSAmJiAodmFsdWUucmFuZ2UgPT09IHVuZGVmaW5lZCB8fCBSYW5nZS5pcyh2YWx1ZS5yYW5nZSkpO1xuICAgIH1cbiAgICBIb3Zlci5pcyA9IGlzO1xufSkoSG92ZXIgfHwgKEhvdmVyID0ge30pKTtcbi8qKlxuICogVGhlIFBhcmFtZXRlckluZm9ybWF0aW9uIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFBhcmFtZXRlckluZm9ybWF0aW9ufSBsaXRlcmFscy5cbiAqL1xudmFyIFBhcmFtZXRlckluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uIChQYXJhbWV0ZXJJbmZvcm1hdGlvbikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcGFyYW1ldGVyIGluZm9ybWF0aW9uIGxpdGVyYWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGFiZWwgQSBsYWJlbCBzdHJpbmcuXG4gICAgICogQHBhcmFtIGRvY3VtZW50YXRpb24gQSBkb2Mgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgZG9jdW1lbnRhdGlvbikge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnRhdGlvbiA/IHsgbGFiZWwsIGRvY3VtZW50YXRpb24gfSA6IHsgbGFiZWwgfTtcbiAgICB9XG4gICAgUGFyYW1ldGVySW5mb3JtYXRpb24uY3JlYXRlID0gY3JlYXRlO1xufSkoUGFyYW1ldGVySW5mb3JtYXRpb24gfHwgKFBhcmFtZXRlckluZm9ybWF0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIFNpZ25hdHVyZUluZm9ybWF0aW9uIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFNpZ25hdHVyZUluZm9ybWF0aW9ufSBsaXRlcmFscy5cbiAqL1xudmFyIFNpZ25hdHVyZUluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uIChTaWduYXR1cmVJbmZvcm1hdGlvbikge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgZG9jdW1lbnRhdGlvbiwgLi4ucGFyYW1ldGVycykge1xuICAgICAgICBsZXQgcmVzdWx0ID0geyBsYWJlbCB9O1xuICAgICAgICBpZiAoSXMuZGVmaW5lZChkb2N1bWVudGF0aW9uKSkge1xuICAgICAgICAgICAgcmVzdWx0LmRvY3VtZW50YXRpb24gPSBkb2N1bWVudGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHBhcmFtZXRlcnMpKSB7XG4gICAgICAgICAgICByZXN1bHQucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucGFyYW1ldGVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFNpZ25hdHVyZUluZm9ybWF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFNpZ25hdHVyZUluZm9ybWF0aW9uIHx8IChTaWduYXR1cmVJbmZvcm1hdGlvbiA9IHt9KSk7XG4vKipcbiAqIEEgZG9jdW1lbnQgaGlnaGxpZ2h0IGtpbmQuXG4gKi9cbnZhciBEb2N1bWVudEhpZ2hsaWdodEtpbmQ7XG4oZnVuY3Rpb24gKERvY3VtZW50SGlnaGxpZ2h0S2luZCkge1xuICAgIC8qKlxuICAgICAqIEEgdGV4dHVhbCBvY2N1cnJlbmNlLlxuICAgICAqL1xuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZC5UZXh0ID0gMTtcbiAgICAvKipcbiAgICAgKiBSZWFkLWFjY2VzcyBvZiBhIHN5bWJvbCwgbGlrZSByZWFkaW5nIGEgdmFyaWFibGUuXG4gICAgICovXG4gICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kLlJlYWQgPSAyO1xuICAgIC8qKlxuICAgICAqIFdyaXRlLWFjY2VzcyBvZiBhIHN5bWJvbCwgbGlrZSB3cml0aW5nIHRvIGEgdmFyaWFibGUuXG4gICAgICovXG4gICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kLldyaXRlID0gMztcbn0pKERvY3VtZW50SGlnaGxpZ2h0S2luZCB8fCAoRG9jdW1lbnRIaWdobGlnaHRLaW5kID0ge30pKTtcbi8qKlxuICogRG9jdW1lbnRIaWdobGlnaHQgbmFtZXNwYWNlIHRvIHByb3ZpZGUgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBEb2N1bWVudEhpZ2hsaWdodH0gbGl0ZXJhbHMuXG4gKi9cbnZhciBEb2N1bWVudEhpZ2hsaWdodDtcbihmdW5jdGlvbiAoRG9jdW1lbnRIaWdobGlnaHQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBEb2N1bWVudEhpZ2hsaWdodCBvYmplY3QuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0aGUgaGlnaGxpZ2h0IGFwcGxpZXMgdG8uXG4gICAgICogQHBhcmFtIGtpbmQgVGhlIGhpZ2hsaWdodCBraW5kXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBraW5kKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7IHJhbmdlIH07XG4gICAgICAgIGlmIChJcy5udW1iZXIoa2luZCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5raW5kID0ga2luZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBEb2N1bWVudEhpZ2hsaWdodC5jcmVhdGUgPSBjcmVhdGU7XG59KShEb2N1bWVudEhpZ2hsaWdodCB8fCAoRG9jdW1lbnRIaWdobGlnaHQgPSB7fSkpO1xuLyoqXG4gKiBBIHN5bWJvbCBraW5kLlxuICovXG52YXIgU3ltYm9sS2luZDtcbihmdW5jdGlvbiAoU3ltYm9sS2luZCkge1xuICAgIFN5bWJvbEtpbmQuRmlsZSA9IDE7XG4gICAgU3ltYm9sS2luZC5Nb2R1bGUgPSAyO1xuICAgIFN5bWJvbEtpbmQuTmFtZXNwYWNlID0gMztcbiAgICBTeW1ib2xLaW5kLlBhY2thZ2UgPSA0O1xuICAgIFN5bWJvbEtpbmQuQ2xhc3MgPSA1O1xuICAgIFN5bWJvbEtpbmQuTWV0aG9kID0gNjtcbiAgICBTeW1ib2xLaW5kLlByb3BlcnR5ID0gNztcbiAgICBTeW1ib2xLaW5kLkZpZWxkID0gODtcbiAgICBTeW1ib2xLaW5kLkNvbnN0cnVjdG9yID0gOTtcbiAgICBTeW1ib2xLaW5kLkVudW0gPSAxMDtcbiAgICBTeW1ib2xLaW5kLkludGVyZmFjZSA9IDExO1xuICAgIFN5bWJvbEtpbmQuRnVuY3Rpb24gPSAxMjtcbiAgICBTeW1ib2xLaW5kLlZhcmlhYmxlID0gMTM7XG4gICAgU3ltYm9sS2luZC5Db25zdGFudCA9IDE0O1xuICAgIFN5bWJvbEtpbmQuU3RyaW5nID0gMTU7XG4gICAgU3ltYm9sS2luZC5OdW1iZXIgPSAxNjtcbiAgICBTeW1ib2xLaW5kLkJvb2xlYW4gPSAxNztcbiAgICBTeW1ib2xLaW5kLkFycmF5ID0gMTg7XG4gICAgU3ltYm9sS2luZC5PYmplY3QgPSAxOTtcbiAgICBTeW1ib2xLaW5kLktleSA9IDIwO1xuICAgIFN5bWJvbEtpbmQuTnVsbCA9IDIxO1xuICAgIFN5bWJvbEtpbmQuRW51bU1lbWJlciA9IDIyO1xuICAgIFN5bWJvbEtpbmQuU3RydWN0ID0gMjM7XG4gICAgU3ltYm9sS2luZC5FdmVudCA9IDI0O1xuICAgIFN5bWJvbEtpbmQuT3BlcmF0b3IgPSAyNTtcbiAgICBTeW1ib2xLaW5kLlR5cGVQYXJhbWV0ZXIgPSAyNjtcbn0pKFN5bWJvbEtpbmQgfHwgKFN5bWJvbEtpbmQgPSB7fSkpO1xuLyoqXG4gKiBTeW1ib2wgdGFncyBhcmUgZXh0cmEgYW5ub3RhdGlvbnMgdGhhdCB0d2VhayB0aGUgcmVuZGVyaW5nIG9mIGEgc3ltYm9sLlxuICpcbiAqIEBzaW5jZSAzLjE2XG4gKi9cbnZhciBTeW1ib2xUYWc7XG4oZnVuY3Rpb24gKFN5bWJvbFRhZykge1xuICAgIC8qKlxuICAgICAqIFJlbmRlciBhIHN5bWJvbCBhcyBvYnNvbGV0ZSwgdXN1YWxseSB1c2luZyBhIHN0cmlrZS1vdXQuXG4gICAgICovXG4gICAgU3ltYm9sVGFnLkRlcHJlY2F0ZWQgPSAxO1xufSkoU3ltYm9sVGFnIHx8IChTeW1ib2xUYWcgPSB7fSkpO1xudmFyIFN5bWJvbEluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uIChTeW1ib2xJbmZvcm1hdGlvbikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgc3ltYm9sIGluZm9ybWF0aW9uIGxpdGVyYWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc3ltYm9sLlxuICAgICAqIEBwYXJhbSBraW5kIFRoZSBraW5kIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSBvZiB0aGUgbG9jYXRpb24gb2YgdGhlIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSByZXNvdXJjZSBvZiB0aGUgbG9jYXRpb24gb2Ygc3ltYm9sLlxuICAgICAqIEBwYXJhbSBjb250YWluZXJOYW1lIFRoZSBuYW1lIG9mIHRoZSBzeW1ib2wgY29udGFpbmluZyB0aGUgc3ltYm9sLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBraW5kLCByYW5nZSwgdXJpLCBjb250YWluZXJOYW1lKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAga2luZCxcbiAgICAgICAgICAgIGxvY2F0aW9uOiB7IHVyaSwgcmFuZ2UgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoY29udGFpbmVyTmFtZSkge1xuICAgICAgICAgICAgcmVzdWx0LmNvbnRhaW5lck5hbWUgPSBjb250YWluZXJOYW1lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFN5bWJvbEluZm9ybWF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFN5bWJvbEluZm9ybWF0aW9uIHx8IChTeW1ib2xJbmZvcm1hdGlvbiA9IHt9KSk7XG52YXIgV29ya3NwYWNlU3ltYm9sO1xuKGZ1bmN0aW9uIChXb3Jrc3BhY2VTeW1ib2wpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgd29ya3NwYWNlIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIGtpbmQgVGhlIGtpbmQgb2YgdGhlIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSByZXNvdXJjZSBvZiB0aGUgbG9jYXRpb24gb2YgdGhlIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0gcmFuZ2UgQW4gb3B0aW9ucyByYW5nZSBvZiB0aGUgbG9jYXRpb24uXG4gICAgICogQHJldHVybnMgQSBXb3Jrc3BhY2VTeW1ib2wuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKG5hbWUsIGtpbmQsIHVyaSwgcmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHJhbmdlICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8geyBuYW1lLCBraW5kLCBsb2NhdGlvbjogeyB1cmksIHJhbmdlIH0gfVxuICAgICAgICAgICAgOiB7IG5hbWUsIGtpbmQsIGxvY2F0aW9uOiB7IHVyaSB9IH07XG4gICAgfVxuICAgIFdvcmtzcGFjZVN5bWJvbC5jcmVhdGUgPSBjcmVhdGU7XG59KShXb3Jrc3BhY2VTeW1ib2wgfHwgKFdvcmtzcGFjZVN5bWJvbCA9IHt9KSk7XG52YXIgRG9jdW1lbnRTeW1ib2w7XG4oZnVuY3Rpb24gKERvY3VtZW50U3ltYm9sKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBzeW1ib2wgaW5mb3JtYXRpb24gbGl0ZXJhbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIGRldGFpbCBUaGUgZGV0YWlsIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIGtpbmQgVGhlIGtpbmQgb2YgdGhlIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIHNlbGVjdGlvblJhbmdlIFRoZSBzZWxlY3Rpb25SYW5nZSBvZiB0aGUgc3ltYm9sLlxuICAgICAqIEBwYXJhbSBjaGlsZHJlbiBDaGlsZHJlbiBvZiB0aGUgc3ltYm9sLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBkZXRhaWwsIGtpbmQsIHJhbmdlLCBzZWxlY3Rpb25SYW5nZSwgY2hpbGRyZW4pIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBkZXRhaWwsXG4gICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgcmFuZ2UsXG4gICAgICAgICAgICBzZWxlY3Rpb25SYW5nZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgRG9jdW1lbnRTeW1ib2wuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgRG9jdW1lbnRTeW1ib2x9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiZcbiAgICAgICAgICAgIElzLnN0cmluZyhjYW5kaWRhdGUubmFtZSkgJiYgSXMubnVtYmVyKGNhbmRpZGF0ZS5raW5kKSAmJlxuICAgICAgICAgICAgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUuc2VsZWN0aW9uUmFuZ2UpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmRldGFpbCA9PT0gdW5kZWZpbmVkIHx8IElzLnN0cmluZyhjYW5kaWRhdGUuZGV0YWlsKSkgJiZcbiAgICAgICAgICAgIChjYW5kaWRhdGUuZGVwcmVjYXRlZCA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLmRlcHJlY2F0ZWQpKSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5jaGlsZHJlbiA9PT0gdW5kZWZpbmVkIHx8IEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLmNoaWxkcmVuKSkgJiZcbiAgICAgICAgICAgIChjYW5kaWRhdGUudGFncyA9PT0gdW5kZWZpbmVkIHx8IEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLnRhZ3MpKTtcbiAgICB9XG4gICAgRG9jdW1lbnRTeW1ib2wuaXMgPSBpcztcbn0pKERvY3VtZW50U3ltYm9sIHx8IChEb2N1bWVudFN5bWJvbCA9IHt9KSk7XG4vKipcbiAqIEEgc2V0IG9mIHByZWRlZmluZWQgY29kZSBhY3Rpb24ga2luZHNcbiAqL1xudmFyIENvZGVBY3Rpb25LaW5kO1xuKGZ1bmN0aW9uIChDb2RlQWN0aW9uS2luZCkge1xuICAgIC8qKlxuICAgICAqIEVtcHR5IGtpbmQuXG4gICAgICovXG4gICAgQ29kZUFjdGlvbktpbmQuRW1wdHkgPSAnJztcbiAgICAvKipcbiAgICAgKiBCYXNlIGtpbmQgZm9yIHF1aWNrZml4IGFjdGlvbnM6ICdxdWlja2ZpeCdcbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uS2luZC5RdWlja0ZpeCA9ICdxdWlja2ZpeCc7XG4gICAgLyoqXG4gICAgICogQmFzZSBraW5kIGZvciByZWZhY3RvcmluZyBhY3Rpb25zOiAncmVmYWN0b3InXG4gICAgICovXG4gICAgQ29kZUFjdGlvbktpbmQuUmVmYWN0b3IgPSAncmVmYWN0b3InO1xuICAgIC8qKlxuICAgICAqIEJhc2Uga2luZCBmb3IgcmVmYWN0b3JpbmcgZXh0cmFjdGlvbiBhY3Rpb25zOiAncmVmYWN0b3IuZXh0cmFjdCdcbiAgICAgKlxuICAgICAqIEV4YW1wbGUgZXh0cmFjdCBhY3Rpb25zOlxuICAgICAqXG4gICAgICogLSBFeHRyYWN0IG1ldGhvZFxuICAgICAqIC0gRXh0cmFjdCBmdW5jdGlvblxuICAgICAqIC0gRXh0cmFjdCB2YXJpYWJsZVxuICAgICAqIC0gRXh0cmFjdCBpbnRlcmZhY2UgZnJvbSBjbGFzc1xuICAgICAqIC0gLi4uXG4gICAgICovXG4gICAgQ29kZUFjdGlvbktpbmQuUmVmYWN0b3JFeHRyYWN0ID0gJ3JlZmFjdG9yLmV4dHJhY3QnO1xuICAgIC8qKlxuICAgICAqIEJhc2Uga2luZCBmb3IgcmVmYWN0b3JpbmcgaW5saW5lIGFjdGlvbnM6ICdyZWZhY3Rvci5pbmxpbmUnXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIGlubGluZSBhY3Rpb25zOlxuICAgICAqXG4gICAgICogLSBJbmxpbmUgZnVuY3Rpb25cbiAgICAgKiAtIElubGluZSB2YXJpYWJsZVxuICAgICAqIC0gSW5saW5lIGNvbnN0YW50XG4gICAgICogLSAuLi5cbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uS2luZC5SZWZhY3RvcklubGluZSA9ICdyZWZhY3Rvci5pbmxpbmUnO1xuICAgIC8qKlxuICAgICAqIEJhc2Uga2luZCBmb3IgcmVmYWN0b3JpbmcgcmV3cml0ZSBhY3Rpb25zOiAncmVmYWN0b3IucmV3cml0ZSdcbiAgICAgKlxuICAgICAqIEV4YW1wbGUgcmV3cml0ZSBhY3Rpb25zOlxuICAgICAqXG4gICAgICogLSBDb252ZXJ0IEphdmFTY3JpcHQgZnVuY3Rpb24gdG8gY2xhc3NcbiAgICAgKiAtIEFkZCBvciByZW1vdmUgcGFyYW1ldGVyXG4gICAgICogLSBFbmNhcHN1bGF0ZSBmaWVsZFxuICAgICAqIC0gTWFrZSBtZXRob2Qgc3RhdGljXG4gICAgICogLSBNb3ZlIG1ldGhvZCB0byBiYXNlIGNsYXNzXG4gICAgICogLSAuLi5cbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uS2luZC5SZWZhY3RvclJld3JpdGUgPSAncmVmYWN0b3IucmV3cml0ZSc7XG4gICAgLyoqXG4gICAgICogQmFzZSBraW5kIGZvciBzb3VyY2UgYWN0aW9uczogYHNvdXJjZWBcbiAgICAgKlxuICAgICAqIFNvdXJjZSBjb2RlIGFjdGlvbnMgYXBwbHkgdG8gdGhlIGVudGlyZSBmaWxlLlxuICAgICAqL1xuICAgIENvZGVBY3Rpb25LaW5kLlNvdXJjZSA9ICdzb3VyY2UnO1xuICAgIC8qKlxuICAgICAqIEJhc2Uga2luZCBmb3IgYW4gb3JnYW5pemUgaW1wb3J0cyBzb3VyY2UgYWN0aW9uOiBgc291cmNlLm9yZ2FuaXplSW1wb3J0c2BcbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uS2luZC5Tb3VyY2VPcmdhbml6ZUltcG9ydHMgPSAnc291cmNlLm9yZ2FuaXplSW1wb3J0cyc7XG4gICAgLyoqXG4gICAgICogQmFzZSBraW5kIGZvciBhdXRvLWZpeCBzb3VyY2UgYWN0aW9uczogYHNvdXJjZS5maXhBbGxgLlxuICAgICAqXG4gICAgICogRml4IGFsbCBhY3Rpb25zIGF1dG9tYXRpY2FsbHkgZml4IGVycm9ycyB0aGF0IGhhdmUgYSBjbGVhciBmaXggdGhhdCBkbyBub3QgcmVxdWlyZSB1c2VyIGlucHV0LlxuICAgICAqIFRoZXkgc2hvdWxkIG5vdCBzdXBwcmVzcyBlcnJvcnMgb3IgcGVyZm9ybSB1bnNhZmUgZml4ZXMgc3VjaCBhcyBnZW5lcmF0aW5nIG5ldyB0eXBlcyBvciBjbGFzc2VzLlxuICAgICAqXG4gICAgICogQHNpbmNlIDMuMTUuMFxuICAgICAqL1xuICAgIENvZGVBY3Rpb25LaW5kLlNvdXJjZUZpeEFsbCA9ICdzb3VyY2UuZml4QWxsJztcbn0pKENvZGVBY3Rpb25LaW5kIHx8IChDb2RlQWN0aW9uS2luZCA9IHt9KSk7XG4vKipcbiAqIFRoZSByZWFzb24gd2h5IGNvZGUgYWN0aW9ucyB3ZXJlIHJlcXVlc3RlZC5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBDb2RlQWN0aW9uVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKENvZGVBY3Rpb25UcmlnZ2VyS2luZCkge1xuICAgIC8qKlxuICAgICAqIENvZGUgYWN0aW9ucyB3ZXJlIGV4cGxpY2l0bHkgcmVxdWVzdGVkIGJ5IHRoZSB1c2VyIG9yIGJ5IGFuIGV4dGVuc2lvbi5cbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uVHJpZ2dlcktpbmQuSW52b2tlZCA9IDE7XG4gICAgLyoqXG4gICAgICogQ29kZSBhY3Rpb25zIHdlcmUgcmVxdWVzdGVkIGF1dG9tYXRpY2FsbHkuXG4gICAgICpcbiAgICAgKiBUaGlzIHR5cGljYWxseSBoYXBwZW5zIHdoZW4gY3VycmVudCBzZWxlY3Rpb24gaW4gYSBmaWxlIGNoYW5nZXMsIGJ1dCBjYW5cbiAgICAgKiBhbHNvIGJlIHRyaWdnZXJlZCB3aGVuIGZpbGUgY29udGVudCBjaGFuZ2VzLlxuICAgICAqL1xuICAgIENvZGVBY3Rpb25UcmlnZ2VyS2luZC5BdXRvbWF0aWMgPSAyO1xufSkoQ29kZUFjdGlvblRyaWdnZXJLaW5kIHx8IChDb2RlQWN0aW9uVHJpZ2dlcktpbmQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgQ29kZUFjdGlvbkNvbnRleHQgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgQ29kZUFjdGlvbkNvbnRleHR9IGxpdGVyYWxzLlxuICovXG52YXIgQ29kZUFjdGlvbkNvbnRleHQ7XG4oZnVuY3Rpb24gKENvZGVBY3Rpb25Db250ZXh0KSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2RlQWN0aW9uQ29udGV4dCBsaXRlcmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShkaWFnbm9zdGljcywgb25seSwgdHJpZ2dlcktpbmQpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgZGlhZ25vc3RpY3MgfTtcbiAgICAgICAgaWYgKG9ubHkgIT09IHVuZGVmaW5lZCAmJiBvbmx5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQub25seSA9IG9ubHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyaWdnZXJLaW5kICE9PSB1bmRlZmluZWQgJiYgdHJpZ2dlcktpbmQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC50cmlnZ2VyS2luZCA9IHRyaWdnZXJLaW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIENvZGVBY3Rpb25Db250ZXh0LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIENvZGVBY3Rpb25Db250ZXh0fSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmRpYWdub3N0aWNzLCBEaWFnbm9zdGljLmlzKVxuICAgICAgICAgICAgJiYgKGNhbmRpZGF0ZS5vbmx5ID09PSB1bmRlZmluZWQgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUub25seSwgSXMuc3RyaW5nKSlcbiAgICAgICAgICAgICYmIChjYW5kaWRhdGUudHJpZ2dlcktpbmQgPT09IHVuZGVmaW5lZCB8fCBjYW5kaWRhdGUudHJpZ2dlcktpbmQgPT09IENvZGVBY3Rpb25UcmlnZ2VyS2luZC5JbnZva2VkIHx8IGNhbmRpZGF0ZS50cmlnZ2VyS2luZCA9PT0gQ29kZUFjdGlvblRyaWdnZXJLaW5kLkF1dG9tYXRpYyk7XG4gICAgfVxuICAgIENvZGVBY3Rpb25Db250ZXh0LmlzID0gaXM7XG59KShDb2RlQWN0aW9uQ29udGV4dCB8fCAoQ29kZUFjdGlvbkNvbnRleHQgPSB7fSkpO1xudmFyIENvZGVBY3Rpb247XG4oZnVuY3Rpb24gKENvZGVBY3Rpb24pIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUodGl0bGUsIGtpbmRPckNvbW1hbmRPckVkaXQsIGtpbmQpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgdGl0bGUgfTtcbiAgICAgICAgbGV0IGNoZWNrS2luZCA9IHRydWU7XG4gICAgICAgIGlmICh0eXBlb2Yga2luZE9yQ29tbWFuZE9yRWRpdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNoZWNrS2luZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmVzdWx0LmtpbmQgPSBraW5kT3JDb21tYW5kT3JFZGl0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKENvbW1hbmQuaXMoa2luZE9yQ29tbWFuZE9yRWRpdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb21tYW5kID0ga2luZE9yQ29tbWFuZE9yRWRpdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5lZGl0ID0ga2luZE9yQ29tbWFuZE9yRWRpdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hlY2tLaW5kICYmIGtpbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmtpbmQgPSBraW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIENvZGVBY3Rpb24uY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRpdGxlKSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5kaWFnbm9zdGljcyA9PT0gdW5kZWZpbmVkIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmRpYWdub3N0aWNzLCBEaWFnbm9zdGljLmlzKSkgJiZcbiAgICAgICAgICAgIChjYW5kaWRhdGUua2luZCA9PT0gdW5kZWZpbmVkIHx8IElzLnN0cmluZyhjYW5kaWRhdGUua2luZCkpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmVkaXQgIT09IHVuZGVmaW5lZCB8fCBjYW5kaWRhdGUuY29tbWFuZCAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5jb21tYW5kID09PSB1bmRlZmluZWQgfHwgQ29tbWFuZC5pcyhjYW5kaWRhdGUuY29tbWFuZCkpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmlzUHJlZmVycmVkID09PSB1bmRlZmluZWQgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUuaXNQcmVmZXJyZWQpKSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5lZGl0ID09PSB1bmRlZmluZWQgfHwgV29ya3NwYWNlRWRpdC5pcyhjYW5kaWRhdGUuZWRpdCkpO1xuICAgIH1cbiAgICBDb2RlQWN0aW9uLmlzID0gaXM7XG59KShDb2RlQWN0aW9uIHx8IChDb2RlQWN0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIENvZGVMZW5zIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIENvZGVMZW5zfSBsaXRlcmFscy5cbiAqL1xudmFyIENvZGVMZW5zO1xuKGZ1bmN0aW9uIChDb2RlTGVucykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29kZUxlbnMgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGRhdGEpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHsgcmFuZ2UgfTtcbiAgICAgICAgaWYgKElzLmRlZmluZWQoZGF0YSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5kYXRhID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBDb2RlTGVucy5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBDb2RlTGVuc30gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmNvbW1hbmQpIHx8IENvbW1hbmQuaXMoY2FuZGlkYXRlLmNvbW1hbmQpKTtcbiAgICB9XG4gICAgQ29kZUxlbnMuaXMgPSBpcztcbn0pKENvZGVMZW5zIHx8IChDb2RlTGVucyA9IHt9KSk7XG4vKipcbiAqIFRoZSBGb3JtYXR0aW5nT3B0aW9ucyBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBGb3JtYXR0aW5nT3B0aW9uc30gbGl0ZXJhbHMuXG4gKi9cbnZhciBGb3JtYXR0aW5nT3B0aW9ucztcbihmdW5jdGlvbiAoRm9ybWF0dGluZ09wdGlvbnMpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEZvcm1hdHRpbmdPcHRpb25zIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRhYlNpemUsIGluc2VydFNwYWNlcykge1xuICAgICAgICByZXR1cm4geyB0YWJTaXplLCBpbnNlcnRTcGFjZXMgfTtcbiAgICB9XG4gICAgRm9ybWF0dGluZ09wdGlvbnMuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgRm9ybWF0dGluZ09wdGlvbnN9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLnRhYlNpemUpICYmIElzLmJvb2xlYW4oY2FuZGlkYXRlLmluc2VydFNwYWNlcyk7XG4gICAgfVxuICAgIEZvcm1hdHRpbmdPcHRpb25zLmlzID0gaXM7XG59KShGb3JtYXR0aW5nT3B0aW9ucyB8fCAoRm9ybWF0dGluZ09wdGlvbnMgPSB7fSkpO1xuLyoqXG4gKiBUaGUgRG9jdW1lbnRMaW5rIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIERvY3VtZW50TGlua30gbGl0ZXJhbHMuXG4gKi9cbnZhciBEb2N1bWVudExpbms7XG4oZnVuY3Rpb24gKERvY3VtZW50TGluaykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgRG9jdW1lbnRMaW5rIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCB0YXJnZXQsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2UsIHRhcmdldCwgZGF0YSB9O1xuICAgIH1cbiAgICBEb2N1bWVudExpbmsuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgRG9jdW1lbnRMaW5rfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUudGFyZ2V0KSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnRhcmdldCkpO1xuICAgIH1cbiAgICBEb2N1bWVudExpbmsuaXMgPSBpcztcbn0pKERvY3VtZW50TGluayB8fCAoRG9jdW1lbnRMaW5rID0ge30pKTtcbi8qKlxuICogVGhlIFNlbGVjdGlvblJhbmdlIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb24gdG8gd29yayB3aXRoXG4gKiBTZWxlY3Rpb25SYW5nZSBsaXRlcmFscy5cbiAqL1xudmFyIFNlbGVjdGlvblJhbmdlO1xuKGZ1bmN0aW9uIChTZWxlY3Rpb25SYW5nZSkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgU2VsZWN0aW9uUmFuZ2VcbiAgICAgKiBAcGFyYW0gcmFuZ2UgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSBwYXJlbnQgYW4gb3B0aW9uYWwgcGFyZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgcGFyZW50KSB7XG4gICAgICAgIHJldHVybiB7IHJhbmdlLCBwYXJlbnQgfTtcbiAgICB9XG4gICAgU2VsZWN0aW9uUmFuZ2UuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChjYW5kaWRhdGUucGFyZW50ID09PSB1bmRlZmluZWQgfHwgU2VsZWN0aW9uUmFuZ2UuaXMoY2FuZGlkYXRlLnBhcmVudCkpO1xuICAgIH1cbiAgICBTZWxlY3Rpb25SYW5nZS5pcyA9IGlzO1xufSkoU2VsZWN0aW9uUmFuZ2UgfHwgKFNlbGVjdGlvblJhbmdlID0ge30pKTtcbi8qKlxuICogQSBzZXQgb2YgcHJlZGVmaW5lZCB0b2tlbiB0eXBlcy4gVGhpcyBzZXQgaXMgbm90IGZpeGVkXG4gKiBhbiBjbGllbnRzIGNhbiBzcGVjaWZ5IGFkZGl0aW9uYWwgdG9rZW4gdHlwZXMgdmlhIHRoZVxuICogY29ycmVzcG9uZGluZyBjbGllbnQgY2FwYWJpbGl0aWVzLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIFNlbWFudGljVG9rZW5UeXBlcztcbihmdW5jdGlvbiAoU2VtYW50aWNUb2tlblR5cGVzKSB7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wibmFtZXNwYWNlXCJdID0gXCJuYW1lc3BhY2VcIjtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgZ2VuZXJpYyB0eXBlLiBBY3RzIGFzIGEgZmFsbGJhY2sgZm9yIHR5cGVzIHdoaWNoIGNhbid0IGJlIG1hcHBlZCB0b1xuICAgICAqIGEgc3BlY2lmaWMgdHlwZSBsaWtlIGNsYXNzIG9yIGVudW0uXG4gICAgICovXG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1widHlwZVwiXSA9IFwidHlwZVwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImNsYXNzXCJdID0gXCJjbGFzc1wiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImVudW1cIl0gPSBcImVudW1cIjtcbiAgICBTZW1hbnRpY1Rva2VuVHlwZXNbXCJpbnRlcmZhY2VcIl0gPSBcImludGVyZmFjZVwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcInN0cnVjdFwiXSA9IFwic3RydWN0XCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1widHlwZVBhcmFtZXRlclwiXSA9IFwidHlwZVBhcmFtZXRlclwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcInBhcmFtZXRlclwiXSA9IFwicGFyYW1ldGVyXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1widmFyaWFibGVcIl0gPSBcInZhcmlhYmxlXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wicHJvcGVydHlcIl0gPSBcInByb3BlcnR5XCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wiZW51bU1lbWJlclwiXSA9IFwiZW51bU1lbWJlclwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImV2ZW50XCJdID0gXCJldmVudFwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImZ1bmN0aW9uXCJdID0gXCJmdW5jdGlvblwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcIm1ldGhvZFwiXSA9IFwibWV0aG9kXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wibWFjcm9cIl0gPSBcIm1hY3JvXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wia2V5d29yZFwiXSA9IFwia2V5d29yZFwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcIm1vZGlmaWVyXCJdID0gXCJtb2RpZmllclwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImNvbW1lbnRcIl0gPSBcImNvbW1lbnRcIjtcbiAgICBTZW1hbnRpY1Rva2VuVHlwZXNbXCJzdHJpbmdcIl0gPSBcInN0cmluZ1wiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcIm51bWJlclwiXSA9IFwibnVtYmVyXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wicmVnZXhwXCJdID0gXCJyZWdleHBcIjtcbiAgICBTZW1hbnRpY1Rva2VuVHlwZXNbXCJvcGVyYXRvclwiXSA9IFwib3BlcmF0b3JcIjtcbiAgICAvKipcbiAgICAgKiBAc2luY2UgMy4xNy4wXG4gICAgICovXG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wiZGVjb3JhdG9yXCJdID0gXCJkZWNvcmF0b3JcIjtcbn0pKFNlbWFudGljVG9rZW5UeXBlcyB8fCAoU2VtYW50aWNUb2tlblR5cGVzID0ge30pKTtcbi8qKlxuICogQSBzZXQgb2YgcHJlZGVmaW5lZCB0b2tlbiBtb2RpZmllcnMuIFRoaXMgc2V0IGlzIG5vdCBmaXhlZFxuICogYW4gY2xpZW50cyBjYW4gc3BlY2lmeSBhZGRpdGlvbmFsIHRva2VuIHR5cGVzIHZpYSB0aGVcbiAqIGNvcnJlc3BvbmRpbmcgY2xpZW50IGNhcGFiaWxpdGllcy5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzO1xuKGZ1bmN0aW9uIChTZW1hbnRpY1Rva2VuTW9kaWZpZXJzKSB7XG4gICAgU2VtYW50aWNUb2tlbk1vZGlmaWVyc1tcImRlY2xhcmF0aW9uXCJdID0gXCJkZWNsYXJhdGlvblwiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJkZWZpbml0aW9uXCJdID0gXCJkZWZpbml0aW9uXCI7XG4gICAgU2VtYW50aWNUb2tlbk1vZGlmaWVyc1tcInJlYWRvbmx5XCJdID0gXCJyZWFkb25seVwiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJzdGF0aWNcIl0gPSBcInN0YXRpY1wiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJkZXByZWNhdGVkXCJdID0gXCJkZXByZWNhdGVkXCI7XG4gICAgU2VtYW50aWNUb2tlbk1vZGlmaWVyc1tcImFic3RyYWN0XCJdID0gXCJhYnN0cmFjdFwiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJhc3luY1wiXSA9IFwiYXN5bmNcIjtcbiAgICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzW1wibW9kaWZpY2F0aW9uXCJdID0gXCJtb2RpZmljYXRpb25cIjtcbiAgICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzW1wiZG9jdW1lbnRhdGlvblwiXSA9IFwiZG9jdW1lbnRhdGlvblwiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJkZWZhdWx0TGlicmFyeVwiXSA9IFwiZGVmYXVsdExpYnJhcnlcIjtcbn0pKFNlbWFudGljVG9rZW5Nb2RpZmllcnMgfHwgKFNlbWFudGljVG9rZW5Nb2RpZmllcnMgPSB7fSkpO1xuLyoqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBTZW1hbnRpY1Rva2VucztcbihmdW5jdGlvbiAoU2VtYW50aWNUb2tlbnMpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiAoY2FuZGlkYXRlLnJlc3VsdElkID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGNhbmRpZGF0ZS5yZXN1bHRJZCA9PT0gJ3N0cmluZycpICYmXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KGNhbmRpZGF0ZS5kYXRhKSAmJiAoY2FuZGlkYXRlLmRhdGEubGVuZ3RoID09PSAwIHx8IHR5cGVvZiBjYW5kaWRhdGUuZGF0YVswXSA9PT0gJ251bWJlcicpO1xuICAgIH1cbiAgICBTZW1hbnRpY1Rva2Vucy5pcyA9IGlzO1xufSkoU2VtYW50aWNUb2tlbnMgfHwgKFNlbWFudGljVG9rZW5zID0ge30pKTtcbi8qKlxuICogVGhlIElubGluZVZhbHVlVGV4dCBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aCBJbmxpbmVWYWx1ZVRleHRzLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIElubGluZVZhbHVlVGV4dDtcbihmdW5jdGlvbiAoSW5saW5lVmFsdWVUZXh0KSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBJbmxpbmVWYWx1ZVRleHQgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2UsIHRleHQgfTtcbiAgICB9XG4gICAgSW5saW5lVmFsdWVUZXh0LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGV4dCk7XG4gICAgfVxuICAgIElubGluZVZhbHVlVGV4dC5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVUZXh0IHx8IChJbmxpbmVWYWx1ZVRleHQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aCBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3Vwcy5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwO1xuKGZ1bmN0aW9uIChJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBJbmxpbmVWYWx1ZVRleHQgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHZhcmlhYmxlTmFtZSwgY2FzZVNlbnNpdGl2ZUxvb2t1cCkge1xuICAgICAgICByZXR1cm4geyByYW5nZSwgdmFyaWFibGVOYW1lLCBjYXNlU2Vuc2l0aXZlTG9va3VwIH07XG4gICAgfVxuICAgIElubGluZVZhbHVlVmFyaWFibGVMb29rdXAuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB1bmRlZmluZWQgJiYgY2FuZGlkYXRlICE9PSBudWxsICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgSXMuYm9vbGVhbihjYW5kaWRhdGUuY2FzZVNlbnNpdGl2ZUxvb2t1cClcbiAgICAgICAgICAgICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLnZhcmlhYmxlTmFtZSkgfHwgY2FuZGlkYXRlLnZhcmlhYmxlTmFtZSA9PT0gdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cC5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCB8fCAoSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCA9IHt9KSk7XG4vKipcbiAqIFRoZSBJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbiBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aCBJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbi5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbjtcbihmdW5jdGlvbiAoSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBleHByZXNzaW9uKSB7XG4gICAgICAgIHJldHVybiB7IHJhbmdlLCBleHByZXNzaW9uIH07XG4gICAgfVxuICAgIElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpXG4gICAgICAgICAgICAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5leHByZXNzaW9uKSB8fCBjYW5kaWRhdGUuZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24uaXMgPSBpcztcbn0pKElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uIHx8IChJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBJbmxpbmVWYWx1ZUNvbnRleHQgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgSW5saW5lVmFsdWVDb250ZXh0fSBsaXRlcmFscy5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxpbmVWYWx1ZUNvbnRleHQ7XG4oZnVuY3Rpb24gKElubGluZVZhbHVlQ29udGV4dCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgSW5saW5lVmFsdWVDb250ZXh0IGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGZyYW1lSWQsIHN0b3BwZWRMb2NhdGlvbikge1xuICAgICAgICByZXR1cm4geyBmcmFtZUlkLCBzdG9wcGVkTG9jYXRpb24gfTtcbiAgICB9XG4gICAgSW5saW5lVmFsdWVDb250ZXh0LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIElubGluZVZhbHVlQ29udGV4dH0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKHZhbHVlLnN0b3BwZWRMb2NhdGlvbik7XG4gICAgfVxuICAgIElubGluZVZhbHVlQ29udGV4dC5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVDb250ZXh0IHx8IChJbmxpbmVWYWx1ZUNvbnRleHQgPSB7fSkpO1xuLyoqXG4gKiBJbmxheSBoaW50IGtpbmRzLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIElubGF5SGludEtpbmQ7XG4oZnVuY3Rpb24gKElubGF5SGludEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBBbiBpbmxheSBoaW50IHRoYXQgZm9yIGEgdHlwZSBhbm5vdGF0aW9uLlxuICAgICAqL1xuICAgIElubGF5SGludEtpbmQuVHlwZSA9IDE7XG4gICAgLyoqXG4gICAgICogQW4gaW5sYXkgaGludCB0aGF0IGlzIGZvciBhIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBJbmxheUhpbnRLaW5kLlBhcmFtZXRlciA9IDI7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAxIHx8IHZhbHVlID09PSAyO1xuICAgIH1cbiAgICBJbmxheUhpbnRLaW5kLmlzID0gaXM7XG59KShJbmxheUhpbnRLaW5kIHx8IChJbmxheUhpbnRLaW5kID0ge30pKTtcbnZhciBJbmxheUhpbnRMYWJlbFBhcnQ7XG4oZnVuY3Rpb24gKElubGF5SGludExhYmVsUGFydCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4geyB2YWx1ZSB9O1xuICAgIH1cbiAgICBJbmxheUhpbnRMYWJlbFBhcnQuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpXG4gICAgICAgICAgICAmJiAoY2FuZGlkYXRlLnRvb2x0aXAgPT09IHVuZGVmaW5lZCB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnRvb2x0aXApIHx8IE1hcmt1cENvbnRlbnQuaXMoY2FuZGlkYXRlLnRvb2x0aXApKVxuICAgICAgICAgICAgJiYgKGNhbmRpZGF0ZS5sb2NhdGlvbiA9PT0gdW5kZWZpbmVkIHx8IExvY2F0aW9uLmlzKGNhbmRpZGF0ZS5sb2NhdGlvbikpXG4gICAgICAgICAgICAmJiAoY2FuZGlkYXRlLmNvbW1hbmQgPT09IHVuZGVmaW5lZCB8fCBDb21tYW5kLmlzKGNhbmRpZGF0ZS5jb21tYW5kKSk7XG4gICAgfVxuICAgIElubGF5SGludExhYmVsUGFydC5pcyA9IGlzO1xufSkoSW5sYXlIaW50TGFiZWxQYXJ0IHx8IChJbmxheUhpbnRMYWJlbFBhcnQgPSB7fSkpO1xudmFyIElubGF5SGludDtcbihmdW5jdGlvbiAoSW5sYXlIaW50KSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKHBvc2l0aW9uLCBsYWJlbCwga2luZCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7IHBvc2l0aW9uLCBsYWJlbCB9O1xuICAgICAgICBpZiAoa2luZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgSW5sYXlIaW50LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBQb3NpdGlvbi5pcyhjYW5kaWRhdGUucG9zaXRpb24pXG4gICAgICAgICAgICAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYWJlbCkgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUubGFiZWwsIElubGF5SGludExhYmVsUGFydC5pcykpXG4gICAgICAgICAgICAmJiAoY2FuZGlkYXRlLmtpbmQgPT09IHVuZGVmaW5lZCB8fCBJbmxheUhpbnRLaW5kLmlzKGNhbmRpZGF0ZS5raW5kKSlcbiAgICAgICAgICAgICYmIChjYW5kaWRhdGUudGV4dEVkaXRzID09PSB1bmRlZmluZWQpIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLnRleHRFZGl0cywgVGV4dEVkaXQuaXMpXG4gICAgICAgICAgICAmJiAoY2FuZGlkYXRlLnRvb2x0aXAgPT09IHVuZGVmaW5lZCB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnRvb2x0aXApIHx8IE1hcmt1cENvbnRlbnQuaXMoY2FuZGlkYXRlLnRvb2x0aXApKVxuICAgICAgICAgICAgJiYgKGNhbmRpZGF0ZS5wYWRkaW5nTGVmdCA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLnBhZGRpbmdMZWZ0KSlcbiAgICAgICAgICAgICYmIChjYW5kaWRhdGUucGFkZGluZ1JpZ2h0ID09PSB1bmRlZmluZWQgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUucGFkZGluZ1JpZ2h0KSk7XG4gICAgfVxuICAgIElubGF5SGludC5pcyA9IGlzO1xufSkoSW5sYXlIaW50IHx8IChJbmxheUhpbnQgPSB7fSkpO1xudmFyIFN0cmluZ1ZhbHVlO1xuKGZ1bmN0aW9uIChTdHJpbmdWYWx1ZSkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVNuaXBwZXQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHsga2luZDogJ3NuaXBwZXQnLCB2YWx1ZSB9O1xuICAgIH1cbiAgICBTdHJpbmdWYWx1ZS5jcmVhdGVTbmlwcGV0ID0gY3JlYXRlU25pcHBldDtcbn0pKFN0cmluZ1ZhbHVlIHx8IChTdHJpbmdWYWx1ZSA9IHt9KSk7XG52YXIgSW5saW5lQ29tcGxldGlvbkl0ZW07XG4oZnVuY3Rpb24gKElubGluZUNvbXBsZXRpb25JdGVtKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKGluc2VydFRleHQsIGZpbHRlclRleHQsIHJhbmdlLCBjb21tYW5kKSB7XG4gICAgICAgIHJldHVybiB7IGluc2VydFRleHQsIGZpbHRlclRleHQsIHJhbmdlLCBjb21tYW5kIH07XG4gICAgfVxuICAgIElubGluZUNvbXBsZXRpb25JdGVtLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKElubGluZUNvbXBsZXRpb25JdGVtIHx8IChJbmxpbmVDb21wbGV0aW9uSXRlbSA9IHt9KSk7XG52YXIgSW5saW5lQ29tcGxldGlvbkxpc3Q7XG4oZnVuY3Rpb24gKElubGluZUNvbXBsZXRpb25MaXN0KSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKGl0ZW1zKSB7XG4gICAgICAgIHJldHVybiB7IGl0ZW1zIH07XG4gICAgfVxuICAgIElubGluZUNvbXBsZXRpb25MaXN0LmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKElubGluZUNvbXBsZXRpb25MaXN0IHx8IChJbmxpbmVDb21wbGV0aW9uTGlzdCA9IHt9KSk7XG4vKipcbiAqIERlc2NyaWJlcyBob3cgYW4ge0BsaW5rIElubGluZUNvbXBsZXRpb25JdGVtUHJvdmlkZXIgaW5saW5lIGNvbXBsZXRpb24gcHJvdmlkZXJ9IHdhcyB0cmlnZ2VyZWQuXG4gKlxuICogQHNpbmNlIDMuMTguMFxuICogQHByb3Bvc2VkXG4gKi9cbnZhciBJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCkge1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBleHBsaWNpdGx5IGJ5IGEgdXNlciBnZXN0dXJlLlxuICAgICAqL1xuICAgIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZC5JbnZva2VkID0gMDtcbiAgICAvKipcbiAgICAgKiBDb21wbGV0aW9uIHdhcyB0cmlnZ2VyZWQgYXV0b21hdGljYWxseSB3aGlsZSBlZGl0aW5nLlxuICAgICAqL1xuICAgIElubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZC5BdXRvbWF0aWMgPSAxO1xufSkoSW5saW5lQ29tcGxldGlvblRyaWdnZXJLaW5kIHx8IChJbmxpbmVDb21wbGV0aW9uVHJpZ2dlcktpbmQgPSB7fSkpO1xudmFyIFNlbGVjdGVkQ29tcGxldGlvbkluZm87XG4oZnVuY3Rpb24gKFNlbGVjdGVkQ29tcGxldGlvbkluZm8pIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2UsIHRleHQgfTtcbiAgICB9XG4gICAgU2VsZWN0ZWRDb21wbGV0aW9uSW5mby5jcmVhdGUgPSBjcmVhdGU7XG59KShTZWxlY3RlZENvbXBsZXRpb25JbmZvIHx8IChTZWxlY3RlZENvbXBsZXRpb25JbmZvID0ge30pKTtcbnZhciBJbmxpbmVDb21wbGV0aW9uQ29udGV4dDtcbihmdW5jdGlvbiAoSW5saW5lQ29tcGxldGlvbkNvbnRleHQpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUodHJpZ2dlcktpbmQsIHNlbGVjdGVkQ29tcGxldGlvbkluZm8pIHtcbiAgICAgICAgcmV0dXJuIHsgdHJpZ2dlcktpbmQsIHNlbGVjdGVkQ29tcGxldGlvbkluZm8gfTtcbiAgICB9XG4gICAgSW5saW5lQ29tcGxldGlvbkNvbnRleHQuY3JlYXRlID0gY3JlYXRlO1xufSkoSW5saW5lQ29tcGxldGlvbkNvbnRleHQgfHwgKElubGluZUNvbXBsZXRpb25Db250ZXh0ID0ge30pKTtcbnZhciBXb3Jrc3BhY2VGb2xkZXI7XG4oZnVuY3Rpb24gKFdvcmtzcGFjZUZvbGRlcikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFVSSS5pcyhjYW5kaWRhdGUudXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm5hbWUpO1xuICAgIH1cbiAgICBXb3Jrc3BhY2VGb2xkZXIuaXMgPSBpcztcbn0pKFdvcmtzcGFjZUZvbGRlciB8fCAoV29ya3NwYWNlRm9sZGVyID0ge30pKTtcbmNvbnN0IEVPTCA9IFsnXFxuJywgJ1xcclxcbicsICdcXHInXTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSB0ZXh0IGRvY3VtZW50IGZyb20gdGhlIG5ldyB2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItdGV4dGRvY3VtZW50IHBhY2thZ2UuXG4gKi9cbnZhciBUZXh0RG9jdW1lbnQ7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgSVRleHREb2N1bWVudCBsaXRlcmFsIGZyb20gdGhlIGdpdmVuIHVyaSBhbmQgY29udGVudC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2VJZCBUaGUgZG9jdW1lbnQncyBsYW5ndWFnZSBJZC5cbiAgICAgKiBAcGFyYW0gdmVyc2lvbiBUaGUgZG9jdW1lbnQncyB2ZXJzaW9uLlxuICAgICAqIEBwYXJhbSBjb250ZW50IFRoZSBkb2N1bWVudCdzIGNvbnRlbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCkge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bGxUZXh0RG9jdW1lbnQodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIElUZXh0RG9jdW1lbnR9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmxhbmd1YWdlSWQpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2VJZCkpICYmIElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5saW5lQ291bnQpXG4gICAgICAgICAgICAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5nZXRUZXh0KSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5wb3NpdGlvbkF0KSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5vZmZzZXRBdCkgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuICAgIFRleHREb2N1bWVudC5pcyA9IGlzO1xuICAgIGZ1bmN0aW9uIGFwcGx5RWRpdHMoZG9jdW1lbnQsIGVkaXRzKSB7XG4gICAgICAgIGxldCB0ZXh0ID0gZG9jdW1lbnQuZ2V0VGV4dCgpO1xuICAgICAgICBsZXQgc29ydGVkRWRpdHMgPSBtZXJnZVNvcnQoZWRpdHMsIChhLCBiKSA9PiB7XG4gICAgICAgICAgICBsZXQgZGlmZiA9IGEucmFuZ2Uuc3RhcnQubGluZSAtIGIucmFuZ2Uuc3RhcnQubGluZTtcbiAgICAgICAgICAgIGlmIChkaWZmID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyIC0gYi5yYW5nZS5zdGFydC5jaGFyYWN0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGlmZjtcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBsYXN0TW9kaWZpZWRPZmZzZXQgPSB0ZXh0Lmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNvcnRlZEVkaXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgZSA9IHNvcnRlZEVkaXRzW2ldO1xuICAgICAgICAgICAgbGV0IHN0YXJ0T2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoZS5yYW5nZS5zdGFydCk7XG4gICAgICAgICAgICBsZXQgZW5kT2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoZS5yYW5nZS5lbmQpO1xuICAgICAgICAgICAgaWYgKGVuZE9mZnNldCA8PSBsYXN0TW9kaWZpZWRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgc3RhcnRPZmZzZXQpICsgZS5uZXdUZXh0ICsgdGV4dC5zdWJzdHJpbmcoZW5kT2Zmc2V0LCB0ZXh0Lmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ092ZXJsYXBwaW5nIGVkaXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RNb2RpZmllZE9mZnNldCA9IHN0YXJ0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnQuYXBwbHlFZGl0cyA9IGFwcGx5RWRpdHM7XG4gICAgZnVuY3Rpb24gbWVyZ2VTb3J0KGRhdGEsIGNvbXBhcmUpIHtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgIC8vIHNvcnRlZFxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcCA9IChkYXRhLmxlbmd0aCAvIDIpIHwgMDtcbiAgICAgICAgY29uc3QgbGVmdCA9IGRhdGEuc2xpY2UoMCwgcCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gZGF0YS5zbGljZShwKTtcbiAgICAgICAgbWVyZ2VTb3J0KGxlZnQsIGNvbXBhcmUpO1xuICAgICAgICBtZXJnZVNvcnQocmlnaHQsIGNvbXBhcmUpO1xuICAgICAgICBsZXQgbGVmdElkeCA9IDA7XG4gICAgICAgIGxldCByaWdodElkeCA9IDA7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgd2hpbGUgKGxlZnRJZHggPCBsZWZ0Lmxlbmd0aCAmJiByaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICAgICAgbGV0IHJldCA9IGNvbXBhcmUobGVmdFtsZWZ0SWR4XSwgcmlnaHRbcmlnaHRJZHhdKTtcbiAgICAgICAgICAgIGlmIChyZXQgPD0gMCkge1xuICAgICAgICAgICAgICAgIC8vIHNtYWxsZXJfZXF1YWwgLT4gdGFrZSBsZWZ0IHRvIHByZXNlcnZlIG9yZGVyXG4gICAgICAgICAgICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZ3JlYXRlciAtPiB0YWtlIHJpZ2h0XG4gICAgICAgICAgICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGxlZnRJZHggPCBsZWZ0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChyaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxufSkoVGV4dERvY3VtZW50IHx8IChUZXh0RG9jdW1lbnQgPSB7fSkpO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIHRleHQgZG9jdW1lbnQgZnJvbSB0aGUgbmV3IHZzY29kZS1sYW5ndWFnZXNlcnZlci10ZXh0ZG9jdW1lbnQgcGFja2FnZS5cbiAqL1xuY2xhc3MgRnVsbFRleHREb2N1bWVudCB7XG4gICAgY29uc3RydWN0b3IodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KSB7XG4gICAgICAgIHRoaXMuX3VyaSA9IHVyaTtcbiAgICAgICAgdGhpcy5fbGFuZ3VhZ2VJZCA9IGxhbmd1YWdlSWQ7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLl9jb250ZW50ID0gY29udGVudDtcbiAgICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldCB1cmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91cmk7XG4gICAgfVxuICAgIGdldCBsYW5ndWFnZUlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2VJZDtcbiAgICB9XG4gICAgZ2V0IHZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92ZXJzaW9uO1xuICAgIH1cbiAgICBnZXRUZXh0KHJhbmdlKSB7XG4gICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5vZmZzZXRBdChyYW5nZS5zdGFydCk7XG4gICAgICAgICAgICBsZXQgZW5kID0gdGhpcy5vZmZzZXRBdChyYW5nZS5lbmQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xuICAgIH1cbiAgICB1cGRhdGUoZXZlbnQsIHZlcnNpb24pIHtcbiAgICAgICAgdGhpcy5fY29udGVudCA9IGV2ZW50LnRleHQ7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0TGluZU9mZnNldHMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9saW5lT2Zmc2V0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsZXQgbGluZU9mZnNldHMgPSBbXTtcbiAgICAgICAgICAgIGxldCB0ZXh0ID0gdGhpcy5fY29udGVudDtcbiAgICAgICAgICAgIGxldCBpc0xpbmVTdGFydCA9IHRydWU7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNMaW5lU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZU9mZnNldHMucHVzaChpKTtcbiAgICAgICAgICAgICAgICAgICAgaXNMaW5lU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGNoID0gdGV4dC5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgaXNMaW5lU3RhcnQgPSAoY2ggPT09ICdcXHInIHx8IGNoID09PSAnXFxuJyk7XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXFxyJyAmJiBpICsgMSA8IHRleHQubGVuZ3RoICYmIHRleHQuY2hhckF0KGkgKyAxKSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0xpbmVTdGFydCAmJiB0ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBsaW5lT2Zmc2V0cy5wdXNoKHRleHQubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gbGluZU9mZnNldHM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbmVPZmZzZXRzO1xuICAgIH1cbiAgICBwb3NpdGlvbkF0KG9mZnNldCkge1xuICAgICAgICBvZmZzZXQgPSBNYXRoLm1heChNYXRoLm1pbihvZmZzZXQsIHRoaXMuX2NvbnRlbnQubGVuZ3RoKSwgMCk7XG4gICAgICAgIGxldCBsaW5lT2Zmc2V0cyA9IHRoaXMuZ2V0TGluZU9mZnNldHMoKTtcbiAgICAgICAgbGV0IGxvdyA9IDAsIGhpZ2ggPSBsaW5lT2Zmc2V0cy5sZW5ndGg7XG4gICAgICAgIGlmIChoaWdoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gUG9zaXRpb24uY3JlYXRlKDAsIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICAgIGxldCBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgICAgICAgaWYgKGxpbmVPZmZzZXRzW21pZF0gPiBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBsb3cgaXMgdGhlIGxlYXN0IHggZm9yIHdoaWNoIHRoZSBsaW5lIG9mZnNldCBpcyBsYXJnZXIgdGhhbiB0aGUgY3VycmVudCBvZmZzZXRcbiAgICAgICAgLy8gb3IgYXJyYXkubGVuZ3RoIGlmIG5vIGxpbmUgb2Zmc2V0IGlzIGxhcmdlciB0aGFuIHRoZSBjdXJyZW50IG9mZnNldFxuICAgICAgICBsZXQgbGluZSA9IGxvdyAtIDE7XG4gICAgICAgIHJldHVybiBQb3NpdGlvbi5jcmVhdGUobGluZSwgb2Zmc2V0IC0gbGluZU9mZnNldHNbbGluZV0pO1xuICAgIH1cbiAgICBvZmZzZXRBdChwb3NpdGlvbikge1xuICAgICAgICBsZXQgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XG4gICAgICAgIGlmIChwb3NpdGlvbi5saW5lID49IGxpbmVPZmZzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBvc2l0aW9uLmxpbmUgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGluZU9mZnNldCA9IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmVdO1xuICAgICAgICBsZXQgbmV4dExpbmVPZmZzZXQgPSAocG9zaXRpb24ubGluZSArIDEgPCBsaW5lT2Zmc2V0cy5sZW5ndGgpID8gbGluZU9mZnNldHNbcG9zaXRpb24ubGluZSArIDFdIDogdGhpcy5fY29udGVudC5sZW5ndGg7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihsaW5lT2Zmc2V0ICsgcG9zaXRpb24uY2hhcmFjdGVyLCBuZXh0TGluZU9mZnNldCksIGxpbmVPZmZzZXQpO1xuICAgIH1cbiAgICBnZXQgbGluZUNvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMaW5lT2Zmc2V0cygpLmxlbmd0aDtcbiAgICB9XG59XG52YXIgSXM7XG4oZnVuY3Rpb24gKElzKSB7XG4gICAgY29uc3QgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICAgIGZ1bmN0aW9uIGRlZmluZWQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxuICAgIElzLmRlZmluZWQgPSBkZWZpbmVkO1xuICAgIGZ1bmN0aW9uIHVuZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbiAgICB9XG4gICAgSXMudW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgIGZ1bmN0aW9uIGJvb2xlYW4odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSBmYWxzZTtcbiAgICB9XG4gICAgSXMuYm9vbGVhbiA9IGJvb2xlYW47XG4gICAgZnVuY3Rpb24gc3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XG4gICAgfVxuICAgIElzLnN0cmluZyA9IHN0cmluZztcbiAgICBmdW5jdGlvbiBudW1iZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBOdW1iZXJdJztcbiAgICB9XG4gICAgSXMubnVtYmVyID0gbnVtYmVyO1xuICAgIGZ1bmN0aW9uIG51bWJlclJhbmdlKHZhbHVlLCBtaW4sIG1heCkge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE51bWJlcl0nICYmIG1pbiA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSBtYXg7XG4gICAgfVxuICAgIElzLm51bWJlclJhbmdlID0gbnVtYmVyUmFuZ2U7XG4gICAgZnVuY3Rpb24gaW50ZWdlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE51bWJlcl0nICYmIC0yMTQ3NDgzNjQ4IDw9IHZhbHVlICYmIHZhbHVlIDw9IDIxNDc0ODM2NDc7XG4gICAgfVxuICAgIElzLmludGVnZXIgPSBpbnRlZ2VyO1xuICAgIGZ1bmN0aW9uIHVpbnRlZ2VyKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScgJiYgMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAyMTQ3NDgzNjQ3O1xuICAgIH1cbiAgICBJcy51aW50ZWdlciA9IHVpbnRlZ2VyO1xuICAgIGZ1bmN0aW9uIGZ1bmModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICAgIH1cbiAgICBJcy5mdW5jID0gZnVuYztcbiAgICBmdW5jdGlvbiBvYmplY3RMaXRlcmFsKHZhbHVlKSB7XG4gICAgICAgIC8vIFN0cmljdGx5IHNwZWFraW5nIGNsYXNzIGluc3RhbmNlcyBwYXNzIHRoaXMgY2hlY2sgYXMgd2VsbC4gU2luY2UgdGhlIExTUFxuICAgICAgICAvLyBkb2Vzbid0IHVzZSBjbGFzc2VzIHdlIGlnbm9yZSB0aGlzIGZvciBub3cuIElmIHdlIGRvIHdlIG5lZWQgdG8gYWRkIHNvbWV0aGluZ1xuICAgICAgICAvLyBsaWtlIHRoaXM6IGBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKHgpKSA9PT0gbnVsbGBcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XG4gICAgfVxuICAgIElzLm9iamVjdExpdGVyYWwgPSBvYmplY3RMaXRlcmFsO1xuICAgIGZ1bmN0aW9uIHR5cGVkQXJyYXkodmFsdWUsIGNoZWNrKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5ldmVyeShjaGVjayk7XG4gICAgfVxuICAgIElzLnR5cGVkQXJyYXkgPSB0eXBlZEFycmF5O1xufSkoSXMgfHwgKElzID0ge30pKTtcblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyBcdH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuLyoqKioqKi8gXHRcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuLyoqKioqKi8gXHRcdFx0XHQoKSA9PiAobW9kdWxlKTtcbi8qKioqKiovIFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2dsb2JhbCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRcdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuLyoqKioqKi8gXHRcdFx0dHJ5IHtcbi8qKioqKiovIFx0XHRcdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4vKioqKioqLyBcdFx0XHR9IGNhdGNoIChlKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9KSgpO1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSlcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovIFx0KCgpID0+IHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcbi8qKioqKiovIFx0XHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcbi8vIFRoaXMgZW50cnkgbmVlZCB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkIHRvIGJlIGluIHN0cmljdCBtb2RlLlxuKCgpID0+IHtcblwidXNlIHN0cmljdFwiO1xuLy8gRVNNIENPTVBBVCBGTEFHXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG5cbi8vIEVYUE9SVFNcbl9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4gIFBocFNlcnZpY2U6ICgpID0+ICgvKiBiaW5kaW5nICovIFBocFNlcnZpY2UpXG59KTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9zZXJ2aWNlcy9iYXNlLXNlcnZpY2UudHNcbnZhciBiYXNlX3NlcnZpY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxMjUpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9zZXJ2aWNlcy9waHAvbGliL3BocC5qc1xudmFyIHBocCA9IF9fd2VicGFja19yZXF1aXJlX18oNDg0OSk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4uLy4uL25vZGVfbW9kdWxlcy92c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItcHJvdG9jb2wvbGliL2Jyb3dzZXIvbWFpbi5qc1xudmFyIG1haW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1MDEpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy91dGlscy50c1xudmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NzcwKTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9hY2UvcmFuZ2Utc2luZ2xldG9uLnRzXG5mdW5jdGlvbiBfZGVmaW5lX3Byb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5jbGFzcyBBY2VSYW5nZSB7XG4gICAgc3RhdGljIGdldENvbnN0cnVjdG9yKGVkaXRvcikge1xuICAgICAgICBpZiAoIUFjZVJhbmdlLl9pbnN0YW5jZSAmJiBlZGl0b3IpIHtcbiAgICAgICAgICAgIEFjZVJhbmdlLl9pbnN0YW5jZSA9IGVkaXRvci5nZXRTZWxlY3Rpb25SYW5nZSgpLmNvbnN0cnVjdG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBY2VSYW5nZS5faW5zdGFuY2U7XG4gICAgfVxufVxuX2RlZmluZV9wcm9wZXJ0eShBY2VSYW5nZSwgXCJfaW5zdGFuY2VcIiwgdm9pZCAwKTtcblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3R5cGUtY29udmVydGVycy9jb21tb24tY29udmVydGVycy50c1xuXG5cblxudmFyIGNvbW1vbl9jb252ZXJ0ZXJzX0NvbW1vbkNvbnZlcnRlcjtcbihmdW5jdGlvbihDb21tb25Db252ZXJ0ZXIpIHtcbiAgICBmdW5jdGlvbiBub3JtYWxpemVSYW5nZXMoY29tcGxldGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBsZXRpb25zICYmIGNvbXBsZXRpb25zLm1hcCgoZWwpPT57XG4gICAgICAgICAgICBpZiAoZWxbXCJyYW5nZVwiXSkge1xuICAgICAgICAgICAgICAgIGVsW1wicmFuZ2VcIl0gPSB0b1JhbmdlKGVsW1wicmFuZ2VcIl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgQ29tbW9uQ29udmVydGVyLm5vcm1hbGl6ZVJhbmdlcyA9IG5vcm1hbGl6ZVJhbmdlcztcbiAgICBmdW5jdGlvbiBjbGVhbkh0bWwoaHRtbCkge1xuICAgICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKC88YVxccy8sIFwiPGEgdGFyZ2V0PSdfYmxhbmsnIFwiKTtcbiAgICB9XG4gICAgQ29tbW9uQ29udmVydGVyLmNsZWFuSHRtbCA9IGNsZWFuSHRtbDtcbiAgICBmdW5jdGlvbiB0b1JhbmdlKHJhbmdlKSB7XG4gICAgICAgIGlmICghcmFuZ2UgfHwgIXJhbmdlLnN0YXJ0IHx8ICFyYW5nZS5lbmQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgUmFuZ2UgPSBBY2VSYW5nZS5nZXRDb25zdHJ1Y3RvcigpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBSYW5nZS5mcm9tUG9pbnRzKHJhbmdlLnN0YXJ0LCByYW5nZS5lbmQpO1xuICAgIH1cbiAgICBDb21tb25Db252ZXJ0ZXIudG9SYW5nZSA9IHRvUmFuZ2U7XG4gICAgZnVuY3Rpb24gY29udmVydEtpbmQoa2luZCkge1xuICAgICAgICBzd2l0Y2goa2luZCl7XG4gICAgICAgICAgICBjYXNlIFwicHJpbWl0aXZlVHlwZVwiOlxuICAgICAgICAgICAgY2FzZSBcImtleXdvcmRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFpbi5Db21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZDtcbiAgICAgICAgICAgIGNhc2UgXCJ2YXJpYWJsZVwiOlxuICAgICAgICAgICAgY2FzZSBcImxvY2FsVmFyaWFibGVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFpbi5Db21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGU7XG4gICAgICAgICAgICBjYXNlIFwibWVtYmVyVmFyaWFibGVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJtZW1iZXJHZXRBY2Nlc3NvclwiOlxuICAgICAgICAgICAgY2FzZSBcIm1lbWJlclNldEFjY2Vzc29yXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1haW4uQ29tcGxldGlvbkl0ZW1LaW5kLkZpZWxkO1xuICAgICAgICAgICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICAgICAgICBjYXNlIFwibWVtYmVyRnVuY3Rpb25cIjpcbiAgICAgICAgICAgIGNhc2UgXCJjb25zdHJ1Y3RTaWduYXR1cmVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJjYWxsU2lnbmF0dXJlXCI6XG4gICAgICAgICAgICBjYXNlIFwiaW5kZXhTaWduYXR1cmVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFpbi5Db21wbGV0aW9uSXRlbUtpbmQuRnVuY3Rpb247XG4gICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBtYWluLkNvbXBsZXRpb25JdGVtS2luZC5FbnVtO1xuICAgICAgICAgICAgY2FzZSBcIm1vZHVsZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBtYWluLkNvbXBsZXRpb25JdGVtS2luZC5Nb2R1bGU7XG4gICAgICAgICAgICBjYXNlIFwiY2xhc3NcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFpbi5Db21wbGV0aW9uSXRlbUtpbmQuQ2xhc3M7XG4gICAgICAgICAgICBjYXNlIFwiaW50ZXJmYWNlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1haW4uQ29tcGxldGlvbkl0ZW1LaW5kLkludGVyZmFjZTtcbiAgICAgICAgICAgIGNhc2UgXCJ3YXJuaW5nXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1haW4uQ29tcGxldGlvbkl0ZW1LaW5kLkZpbGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1haW4uQ29tcGxldGlvbkl0ZW1LaW5kLlByb3BlcnR5O1xuICAgIH1cbiAgICBDb21tb25Db252ZXJ0ZXIuY29udmVydEtpbmQgPSBjb252ZXJ0S2luZDtcbiAgICBmdW5jdGlvbiBleGNsdWRlQnlFcnJvck1lc3NhZ2UoZGlhZ25vc3RpY3MsIGVycm9yTWVzc2FnZXNUb0lnbm9yZSwgZmllbGROYW1lID0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgaWYgKCFlcnJvck1lc3NhZ2VzVG9JZ25vcmUpIHJldHVybiBkaWFnbm9zdGljcztcbiAgICAgICAgcmV0dXJuIGRpYWdub3N0aWNzLmZpbHRlcigoZWwpPT4hKDAsdXRpbHMvKiBjaGVja1ZhbHVlQWdhaW5zdFJlZ2V4cEFycmF5ICovLlRrKShlbFtmaWVsZE5hbWVdLCBlcnJvck1lc3NhZ2VzVG9JZ25vcmUpKTtcbiAgICB9XG4gICAgQ29tbW9uQ29udmVydGVyLmV4Y2x1ZGVCeUVycm9yTWVzc2FnZSA9IGV4Y2x1ZGVCeUVycm9yTWVzc2FnZTtcbn0pKGNvbW1vbl9jb252ZXJ0ZXJzX0NvbW1vbkNvbnZlcnRlciB8fCAoY29tbW9uX2NvbnZlcnRlcnNfQ29tbW9uQ29udmVydGVyID0ge30pKTtcblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3R5cGUtY29udmVydGVycy9sc3AvbHNwLWNvbnZlcnRlcnMudHNcblxuXG5cblxuZnVuY3Rpb24gZnJvbVJhbmdlKHJhbmdlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgIGxpbmU6IHJhbmdlLnN0YXJ0LnJvdyxcbiAgICAgICAgICAgIGNoYXJhY3RlcjogcmFuZ2Uuc3RhcnQuY29sdW1uXG4gICAgICAgIH0sXG4gICAgICAgIGVuZDoge1xuICAgICAgICAgICAgbGluZTogcmFuZ2UuZW5kLnJvdyxcbiAgICAgICAgICAgIGNoYXJhY3RlcjogcmFuZ2UuZW5kLmNvbHVtblxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJhbmdlRnJvbVBvc2l0aW9ucyhzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICBlbmQ6IGVuZFxuICAgIH07XG59XG5mdW5jdGlvbiB0b1JhbmdlKHJhbmdlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgIHJvdzogcmFuZ2Uuc3RhcnQubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogcmFuZ2Uuc3RhcnQuY2hhcmFjdGVyXG4gICAgICAgIH0sXG4gICAgICAgIGVuZDoge1xuICAgICAgICAgICAgcm93OiByYW5nZS5lbmQubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogcmFuZ2UuZW5kLmNoYXJhY3RlclxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZyb21Qb2ludChwb2ludCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGxpbmU6IHBvaW50LnJvdyxcbiAgICAgICAgY2hhcmFjdGVyOiBwb2ludC5jb2x1bW5cbiAgICB9O1xufVxuZnVuY3Rpb24gdG9Qb2ludChwb3NpdGlvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJvdzogcG9zaXRpb24ubGluZSxcbiAgICAgICAgY29sdW1uOiBwb3NpdGlvbi5jaGFyYWN0ZXJcbiAgICB9O1xufVxuZnVuY3Rpb24gdG9Bbm5vdGF0aW9ucyhkaWFnbm9zdGljcykge1xuICAgIHZhciBfZGlhZ25vc3RpY3M7XG4gICAgcmV0dXJuIChfZGlhZ25vc3RpY3MgPSBkaWFnbm9zdGljcykgPT09IG51bGwgfHwgX2RpYWdub3N0aWNzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGlhZ25vc3RpY3MubWFwKChlbCk9PntcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJvdzogZWwucmFuZ2Uuc3RhcnQubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogZWwucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyLFxuICAgICAgICAgICAgdGV4dDogZWwubWVzc2FnZSxcbiAgICAgICAgICAgIHR5cGU6IGVsLnNldmVyaXR5ID09PSAxID8gXCJlcnJvclwiIDogZWwuc2V2ZXJpdHkgPT09IDIgPyBcIndhcm5pbmdcIiA6IFwiaW5mb1wiLFxuICAgICAgICAgICAgY29kZTogZWwuY29kZVxuICAgICAgICB9O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZnJvbUFubm90YXRpb25zKGFubm90YXRpb25zKSB7XG4gICAgdmFyIF9hbm5vdGF0aW9ucztcbiAgICByZXR1cm4gKF9hbm5vdGF0aW9ucyA9IGFubm90YXRpb25zKSA9PT0gbnVsbCB8fCBfYW5ub3RhdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hbm5vdGF0aW9ucy5tYXAoKGVsKT0+e1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmFuZ2U6IHtcbiAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICBsaW5lOiBlbC5yb3csXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogZWwuY29sdW1uXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZTogZWwucm93LFxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IGVsLmNvbHVtblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtZXNzYWdlOiBlbC50ZXh0LFxuICAgICAgICAgICAgc2V2ZXJpdHk6IGVsLnR5cGUgPT09IFwiZXJyb3JcIiA/IDEgOiBlbC50eXBlID09PSBcIndhcm5pbmdcIiA/IDIgOiAzLFxuICAgICAgICAgICAgY29kZTogZWxbXCJjb2RlXCJdXG4gICAgICAgIH07XG4gICAgfSk7XG59XG5mdW5jdGlvbiB0b0NvbXBsZXRpb24oaXRlbSkge1xuICAgIHZhciBfaXRlbV90ZXh0RWRpdCwgX2l0ZW1fY29tbWFuZDtcbiAgICBsZXQgaXRlbUtpbmQgPSBpdGVtLmtpbmQ7XG4gICAgbGV0IGtpbmQgPSBpdGVtS2luZCA/IE9iamVjdC5rZXlzKENvbXBsZXRpb25JdGVtS2luZClbT2JqZWN0LnZhbHVlcyhDb21wbGV0aW9uSXRlbUtpbmQpLmluZGV4T2YoaXRlbUtpbmQpXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgX2l0ZW1fdGV4dEVkaXRfbmV3VGV4dCwgX3JlZjtcbiAgICBsZXQgdGV4dCA9IChfcmVmID0gKF9pdGVtX3RleHRFZGl0X25ld1RleHQgPSAoX2l0ZW1fdGV4dEVkaXQgPSBpdGVtLnRleHRFZGl0KSA9PT0gbnVsbCB8fCBfaXRlbV90ZXh0RWRpdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2l0ZW1fdGV4dEVkaXQubmV3VGV4dCkgIT09IG51bGwgJiYgX2l0ZW1fdGV4dEVkaXRfbmV3VGV4dCAhPT0gdm9pZCAwID8gX2l0ZW1fdGV4dEVkaXRfbmV3VGV4dCA6IGl0ZW0uaW5zZXJ0VGV4dCkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IGl0ZW0ubGFiZWw7XG4gICAgbGV0IGZpbHRlclRleHQ7XG4gICAgLy8gZmlsdGVyaW5nIHdvdWxkIGhhcHBlbiBvbiBhY2UgZWRpdG9yIHNpZGVcbiAgICAvL1RPRE86IGlmIGZpbHRlcmluZyBhbmQgc29ydGluZyBhcmUgb24gc2VydmVyIHNpZGUsIHdlIHNob3VsZCBkaXNhYmxlIEZpbHRlcmVkTGlzdCBpbiBhY2UgY29tcGxldGVyXG4gICAgaWYgKGl0ZW0uZmlsdGVyVGV4dCkge1xuICAgICAgICBjb25zdCBmaXJzdFdvcmRNYXRjaCA9IGl0ZW0uZmlsdGVyVGV4dC5tYXRjaCgvXFx3Ky8pO1xuICAgICAgICBjb25zdCBmaXJzdFdvcmQgPSBmaXJzdFdvcmRNYXRjaCA/IGZpcnN0V29yZE1hdGNoWzBdIDogbnVsbDtcbiAgICAgICAgaWYgKGZpcnN0V29yZCkge1xuICAgICAgICAgICAgY29uc3Qgd29yZFJlZ2V4ID0gbmV3IFJlZ0V4cChgXFxcXGIke2ZpcnN0V29yZH1cXFxcYmAsICdpJyk7XG4gICAgICAgICAgICBpZiAoIXdvcmRSZWdleC50ZXN0KHRleHQpKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGAke2l0ZW0uZmlsdGVyVGV4dH0gJHt0ZXh0fWA7XG4gICAgICAgICAgICAgICAgZmlsdGVyVGV4dCA9IGl0ZW0uZmlsdGVyVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGV4dC5pbmNsdWRlcyhpdGVtLmZpbHRlclRleHQpKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGAke2l0ZW0uZmlsdGVyVGV4dH0gJHt0ZXh0fWA7XG4gICAgICAgICAgICAgICAgZmlsdGVyVGV4dCA9IGl0ZW0uZmlsdGVyVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgY29tbWFuZCA9ICgoX2l0ZW1fY29tbWFuZCA9IGl0ZW0uY29tbWFuZCkgPT09IG51bGwgfHwgX2l0ZW1fY29tbWFuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2l0ZW1fY29tbWFuZC5jb21tYW5kKSA9PSBcImVkaXRvci5hY3Rpb24udHJpZ2dlclN1Z2dlc3RcIiA/IFwic3RhcnRBdXRvY29tcGxldGVcIiA6IHVuZGVmaW5lZDtcbiAgICBsZXQgcmFuZ2UgPSBpdGVtLnRleHRFZGl0ID8gZ2V0VGV4dEVkaXRSYW5nZShpdGVtLnRleHRFZGl0LCBmaWx0ZXJUZXh0KSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgY29tcGxldGlvbiA9IHtcbiAgICAgICAgbWV0YToga2luZCxcbiAgICAgICAgY2FwdGlvbjogaXRlbS5sYWJlbCxcbiAgICAgICAgc2NvcmU6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgY29tcGxldGlvbltcImNvbW1hbmRcIl0gPSBjb21tYW5kO1xuICAgIGNvbXBsZXRpb25bXCJyYW5nZVwiXSA9IHJhbmdlO1xuICAgIGNvbXBsZXRpb25bXCJpdGVtXCJdID0gaXRlbTtcbiAgICBpZiAoaXRlbS5pbnNlcnRUZXh0Rm9ybWF0ID09IEluc2VydFRleHRGb3JtYXQuU25pcHBldCkge1xuICAgICAgICBjb21wbGV0aW9uW1wic25pcHBldFwiXSA9IHRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGlvbltcInZhbHVlXCJdID0gdGV4dCAhPT0gbnVsbCAmJiB0ZXh0ICE9PSB2b2lkIDAgPyB0ZXh0IDogXCJcIjtcbiAgICB9XG4gICAgY29tcGxldGlvbltcImRvY3VtZW50YXRpb25cIl0gPSBpdGVtLmRvY3VtZW50YXRpb247IC8vVE9ETzogdGhpcyBpcyB3b3JrYXJvdW5kIGZvciBzZXJ2aWNlcyB3aXRoIGluc3RhbnQgY29tcGxldGlvblxuICAgIGNvbXBsZXRpb25bXCJwb3NpdGlvblwiXSA9IGl0ZW1bXCJwb3NpdGlvblwiXTtcbiAgICBjb21wbGV0aW9uW1wic2VydmljZVwiXSA9IGl0ZW1bXCJzZXJ2aWNlXCJdOyAvL1RPRE86IHNpbmNlIHdlIGhhdmUgbXVsdGlwbGUgc2VydmVycywgd2UgbmVlZCB0byBkZXRlcm1pbmUgd2hpY2hcbiAgICAvLyBzZXJ2ZXIgdG8gdXNlIGZvciByZXNvbHZpbmdcbiAgICByZXR1cm4gY29tcGxldGlvbjtcbn1cbmZ1bmN0aW9uIHRvQ29tcGxldGlvbnMoY29tcGxldGlvbnMpIHtcbiAgICBpZiAoY29tcGxldGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgY29tYmluZWRDb21wbGV0aW9ucyA9IGdldENvbXBsZXRpb25JdGVtcyhjb21wbGV0aW9ucyk7XG4gICAgICAgIHJldHVybiBjb21iaW5lZENvbXBsZXRpb25zLm1hcCgoaXRlbSk9PnRvQ29tcGxldGlvbihpdGVtKSk7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbn1cbmZ1bmN0aW9uIGdldENvbXBsZXRpb25JdGVtcyhjb21wbGV0aW9ucykge1xuICAgIHJldHVybiBjb21wbGV0aW9ucy5tYXAoKGVsKT0+e1xuICAgICAgICBpZiAoIWVsLmNvbXBsZXRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFsbENvbXBsZXRpb25zO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbC5jb21wbGV0aW9ucykpIHtcbiAgICAgICAgICAgIGFsbENvbXBsZXRpb25zID0gZWwuY29tcGxldGlvbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbGxDb21wbGV0aW9ucyA9IGVsLmNvbXBsZXRpb25zLml0ZW1zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGxDb21wbGV0aW9ucy5tYXAoKGl0ZW0pPT57XG4gICAgICAgICAgICBpdGVtW1wic2VydmljZVwiXSA9IGVsLnNlcnZpY2U7XG4gICAgICAgICAgICByZXR1cm4gaXRlbTtcbiAgICAgICAgfSk7XG4gICAgfSkuZmxhdCgpO1xufVxuZnVuY3Rpb24gdG9JbmxpbmVDb21wbGV0aW9uKGl0ZW0pIHtcbiAgICB2YXIgX2l0ZW1fY29tbWFuZDtcbiAgICBsZXQgdGV4dCA9IHR5cGVvZiBpdGVtLmluc2VydFRleHQgPT09IFwic3RyaW5nXCIgPyBpdGVtLmluc2VydFRleHQgOiBpdGVtLmluc2VydFRleHQudmFsdWU7XG4gICAgbGV0IGZpbHRlclRleHQ7XG4gICAgLy8gZmlsdGVyaW5nIHdvdWxkIGhhcHBlbiBvbiBhY2UgZWRpdG9yIHNpZGVcbiAgICAvL1RPRE86IGlmIGZpbHRlcmluZyBhbmQgc29ydGluZyBhcmUgb24gc2VydmVyIHNpZGUsIHdlIHNob3VsZCBkaXNhYmxlIEZpbHRlcmVkTGlzdCBpbiBhY2UgY29tcGxldGVyXG4gICAgaWYgKGl0ZW0uZmlsdGVyVGV4dCkge1xuICAgICAgICBjb25zdCBmaXJzdFdvcmRNYXRjaCA9IGl0ZW0uZmlsdGVyVGV4dC5tYXRjaCgvXFx3Ky8pO1xuICAgICAgICBjb25zdCBmaXJzdFdvcmQgPSBmaXJzdFdvcmRNYXRjaCA/IGZpcnN0V29yZE1hdGNoWzBdIDogbnVsbDtcbiAgICAgICAgaWYgKGZpcnN0V29yZCkge1xuICAgICAgICAgICAgY29uc3Qgd29yZFJlZ2V4ID0gbmV3IFJlZ0V4cChgXFxcXGIke2ZpcnN0V29yZH1cXFxcYmAsICdpJyk7XG4gICAgICAgICAgICBpZiAoIXdvcmRSZWdleC50ZXN0KHRleHQpKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGAke2l0ZW0uZmlsdGVyVGV4dH0gJHt0ZXh0fWA7XG4gICAgICAgICAgICAgICAgZmlsdGVyVGV4dCA9IGl0ZW0uZmlsdGVyVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGV4dC5pbmNsdWRlcyhpdGVtLmZpbHRlclRleHQpKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGAke2l0ZW0uZmlsdGVyVGV4dH0gJHt0ZXh0fWA7XG4gICAgICAgICAgICAgICAgZmlsdGVyVGV4dCA9IGl0ZW0uZmlsdGVyVGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgY29tbWFuZCA9ICgoX2l0ZW1fY29tbWFuZCA9IGl0ZW0uY29tbWFuZCkgPT09IG51bGwgfHwgX2l0ZW1fY29tbWFuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2l0ZW1fY29tbWFuZC5jb21tYW5kKSA9PSBcImVkaXRvci5hY3Rpb24udHJpZ2dlclN1Z2dlc3RcIiA/IFwic3RhcnRBdXRvY29tcGxldGVcIiA6IHVuZGVmaW5lZDtcbiAgICBsZXQgcmFuZ2UgPSBpdGVtLnJhbmdlID8gZ2V0SW5saW5lQ29tcGxldGlvblJhbmdlKGl0ZW0ucmFuZ2UsIGZpbHRlclRleHQpIDogdW5kZWZpbmVkO1xuICAgIGxldCBjb21wbGV0aW9uID0ge307XG4gICAgY29tcGxldGlvbltcImNvbW1hbmRcIl0gPSBjb21tYW5kO1xuICAgIGNvbXBsZXRpb25bXCJyYW5nZVwiXSA9IHJhbmdlO1xuICAgIGNvbXBsZXRpb25bXCJpdGVtXCJdID0gaXRlbTtcbiAgICBpZiAodHlwZW9mIGl0ZW0uaW5zZXJ0VGV4dCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb21wbGV0aW9uW1wic25pcHBldFwiXSA9IHRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGlvbltcInZhbHVlXCJdID0gdGV4dCAhPT0gbnVsbCAmJiB0ZXh0ICE9PSB2b2lkIDAgPyB0ZXh0IDogXCJcIjtcbiAgICB9XG4gICAgY29tcGxldGlvbltcInBvc2l0aW9uXCJdID0gaXRlbVtcInBvc2l0aW9uXCJdO1xuICAgIGNvbXBsZXRpb25bXCJzZXJ2aWNlXCJdID0gaXRlbVtcInNlcnZpY2VcIl07IC8vVE9ETzogc2luY2Ugd2UgaGF2ZSBtdWx0aXBsZSBzZXJ2ZXJzLCB3ZSBuZWVkIHRvIGRldGVybWluZSB3aGljaFxuICAgIC8vIHNlcnZlciB0byB1c2UgZm9yIHJlc29sdmluZ1xuICAgIHJldHVybiBjb21wbGV0aW9uO1xufVxuZnVuY3Rpb24gdG9JbmxpbmVDb21wbGV0aW9ucyhjb21wbGV0aW9ucykge1xuICAgIGlmIChjb21wbGV0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBjb21iaW5lZENvbXBsZXRpb25zID0gZ2V0Q29tcGxldGlvbkl0ZW1zKGNvbXBsZXRpb25zKTtcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkQ29tcGxldGlvbnMubWFwKChpdGVtKT0+dG9JbmxpbmVDb21wbGV0aW9uKGl0ZW0pKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufVxuZnVuY3Rpb24gdG9SZXNvbHZlZENvbXBsZXRpb24oY29tcGxldGlvbiwgaXRlbSkge1xuICAgIGNvbXBsZXRpb25bXCJkb2NNYXJrZG93blwiXSA9IGZyb21NYXJrdXBDb250ZW50KGl0ZW0uZG9jdW1lbnRhdGlvbik7XG4gICAgcmV0dXJuIGNvbXBsZXRpb247XG59XG5mdW5jdGlvbiB0b0NvbXBsZXRpb25JdGVtKGNvbXBsZXRpb24pIHtcbiAgICBsZXQgY29tbWFuZDtcbiAgICBpZiAoY29tcGxldGlvbltcImNvbW1hbmRcIl0pIHtcbiAgICAgICAgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIHRpdGxlOiBcInRyaWdnZXJTdWdnZXN0XCIsXG4gICAgICAgICAgICBjb21tYW5kOiBjb21wbGV0aW9uW1wiY29tbWFuZFwiXVxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgX2NvbXBsZXRpb25fY2FwdGlvbjtcbiAgICBsZXQgY29tcGxldGlvbkl0ZW0gPSB7XG4gICAgICAgIGxhYmVsOiAoX2NvbXBsZXRpb25fY2FwdGlvbiA9IGNvbXBsZXRpb24uY2FwdGlvbikgIT09IG51bGwgJiYgX2NvbXBsZXRpb25fY2FwdGlvbiAhPT0gdm9pZCAwID8gX2NvbXBsZXRpb25fY2FwdGlvbiA6IFwiXCIsXG4gICAgICAgIGtpbmQ6IENvbW1vbkNvbnZlcnRlci5jb252ZXJ0S2luZChjb21wbGV0aW9uLm1ldGEpLFxuICAgICAgICBjb21tYW5kOiBjb21tYW5kLFxuICAgICAgICBpbnNlcnRUZXh0Rm9ybWF0OiBjb21wbGV0aW9uW1wic25pcHBldFwiXSA/IEluc2VydFRleHRGb3JtYXQuU25pcHBldCA6IEluc2VydFRleHRGb3JtYXQuUGxhaW5UZXh0LFxuICAgICAgICBkb2N1bWVudGF0aW9uOiBjb21wbGV0aW9uW1wiZG9jdW1lbnRhdGlvblwiXVxuICAgIH07XG4gICAgaWYgKGNvbXBsZXRpb25bXCJyYW5nZVwiXSkge1xuICAgICAgICB2YXIgX2NvbXBsZXRpb25fc25pcHBldDtcbiAgICAgICAgY29tcGxldGlvbkl0ZW0udGV4dEVkaXQgPSB7XG4gICAgICAgICAgICByYW5nZTogZnJvbVJhbmdlKGNvbXBsZXRpb25bXCJyYW5nZVwiXSksXG4gICAgICAgICAgICBuZXdUZXh0OiAoX2NvbXBsZXRpb25fc25pcHBldCA9IGNvbXBsZXRpb25bXCJzbmlwcGV0XCJdKSAhPT0gbnVsbCAmJiBfY29tcGxldGlvbl9zbmlwcGV0ICE9PSB2b2lkIDAgPyBfY29tcGxldGlvbl9zbmlwcGV0IDogY29tcGxldGlvbltcInZhbHVlXCJdXG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9jb21wbGV0aW9uX3NuaXBwZXQxO1xuICAgICAgICBjb21wbGV0aW9uSXRlbS5pbnNlcnRUZXh0ID0gKF9jb21wbGV0aW9uX3NuaXBwZXQxID0gY29tcGxldGlvbltcInNuaXBwZXRcIl0pICE9PSBudWxsICYmIF9jb21wbGV0aW9uX3NuaXBwZXQxICE9PSB2b2lkIDAgPyBfY29tcGxldGlvbl9zbmlwcGV0MSA6IGNvbXBsZXRpb25bXCJ2YWx1ZVwiXTtcbiAgICB9XG4gICAgY29tcGxldGlvbkl0ZW1bXCJmaWxlTmFtZVwiXSA9IGNvbXBsZXRpb25bXCJmaWxlTmFtZVwiXTtcbiAgICBjb21wbGV0aW9uSXRlbVtcInBvc2l0aW9uXCJdID0gY29tcGxldGlvbltcInBvc2l0aW9uXCJdO1xuICAgIGNvbXBsZXRpb25JdGVtW1wiaXRlbVwiXSA9IGNvbXBsZXRpb25bXCJpdGVtXCJdO1xuICAgIGNvbXBsZXRpb25JdGVtW1wic2VydmljZVwiXSA9IGNvbXBsZXRpb25bXCJzZXJ2aWNlXCJdOyAvL1RPRE86XG4gICAgcmV0dXJuIGNvbXBsZXRpb25JdGVtO1xufVxuZnVuY3Rpb24gZ2V0VGV4dEVkaXRSYW5nZSh0ZXh0RWRpdCwgZmlsdGVyVGV4dCkge1xuICAgIGNvbnN0IGZpbHRlckxlbmd0aCA9IGZpbHRlclRleHQgPyBmaWx0ZXJUZXh0Lmxlbmd0aCA6IDA7XG4gICAgaWYgKFwiaW5zZXJ0XCIgaW4gdGV4dEVkaXQgJiYgXCJyZXBsYWNlXCIgaW4gdGV4dEVkaXQpIHtcbiAgICAgICAgbGV0IG1lcmdlZFJhbmdlcyA9IG1lcmdlUmFuZ2VzKFtcbiAgICAgICAgICAgIHRvUmFuZ2UodGV4dEVkaXQuaW5zZXJ0KSxcbiAgICAgICAgICAgIHRvUmFuZ2UodGV4dEVkaXQucmVwbGFjZSlcbiAgICAgICAgXSk7XG4gICAgICAgIHJldHVybiBtZXJnZWRSYW5nZXNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGV4dEVkaXQucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyIC09IGZpbHRlckxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRvUmFuZ2UodGV4dEVkaXQucmFuZ2UpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldElubGluZUNvbXBsZXRpb25SYW5nZShyYW5nZSwgZmlsdGVyVGV4dCkge1xuICAgIGNvbnN0IGZpbHRlckxlbmd0aCA9IGZpbHRlclRleHQgPyBmaWx0ZXJUZXh0Lmxlbmd0aCA6IDA7XG4gICAgcmFuZ2Uuc3RhcnQuY2hhcmFjdGVyIC09IGZpbHRlckxlbmd0aDtcbiAgICByZXR1cm4gdG9SYW5nZShyYW5nZSk7XG59XG5mdW5jdGlvbiB0b1Rvb2x0aXAoaG92ZXIpIHtcbiAgICB2YXIgX2hvdmVyX2ZpbmQ7XG4gICAgaWYgKCFob3ZlcikgcmV0dXJuO1xuICAgIGxldCBjb250ZW50ID0gaG92ZXIubWFwKChlbCk9PntcbiAgICAgICAgaWYgKCFlbCB8fCAhZWwuY29udGVudHMpIHJldHVybjtcbiAgICAgICAgaWYgKE1hcmt1cENvbnRlbnQuaXMoZWwuY29udGVudHMpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbU1hcmt1cENvbnRlbnQoZWwuY29udGVudHMpO1xuICAgICAgICB9IGVsc2UgaWYgKE1hcmtlZFN0cmluZy5pcyhlbC5jb250ZW50cykpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWwuY29udGVudHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwuY29udGVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJgYGBcIiArIGVsLmNvbnRlbnRzLnZhbHVlICsgXCJgYGBcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBjb250ZW50cyA9IGVsLmNvbnRlbnRzLm1hcCgoZWwpPT57XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFxcYFxcYFxcYCR7ZWwudmFsdWV9XFxgXFxgXFxgYDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29udGVudHMuam9pbihcIlxcblxcblwiKTtcbiAgICAgICAgfVxuICAgIH0pLmZpbHRlcihub3RFbXB0eSk7XG4gICAgaWYgKGNvbnRlbnQubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgLy9UT0RPOiBpdCBjb3VsZCBiZSBtZXJnZWQgd2l0aGluIGFsbCByYW5nZXMgaW4gZnV0dXJlXG4gICAgbGV0IGxzcFJhbmdlID0gKF9ob3Zlcl9maW5kID0gaG92ZXIuZmluZCgoZWwpPT57XG4gICAgICAgIHZhciBfZWw7XG4gICAgICAgIHJldHVybiAoX2VsID0gZWwpID09PSBudWxsIHx8IF9lbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2VsLnJhbmdlO1xuICAgIH0pKSA9PT0gbnVsbCB8fCBfaG92ZXJfZmluZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2hvdmVyX2ZpbmQucmFuZ2U7XG4gICAgbGV0IHJhbmdlO1xuICAgIGlmIChsc3BSYW5nZSkgcmFuZ2UgPSB0b1JhbmdlKGxzcFJhbmdlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiB7XG4gICAgICAgICAgICB0eXBlOiBcIm1hcmtkb3duXCIsXG4gICAgICAgICAgICB0ZXh0OiBjb250ZW50LmpvaW4oXCJcXG5cXG5cIilcbiAgICAgICAgfSxcbiAgICAgICAgcmFuZ2U6IHJhbmdlXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZyb21TaWduYXR1cmVIZWxwKHNpZ25hdHVyZUhlbHApIHtcbiAgICBpZiAoIXNpZ25hdHVyZUhlbHApIHJldHVybjtcbiAgICBsZXQgY29udGVudCA9IHNpZ25hdHVyZUhlbHAubWFwKChlbCk9PntcbiAgICAgICAgdmFyIF9lbCwgX2VsMTtcbiAgICAgICAgaWYgKCFlbCkgcmV0dXJuO1xuICAgICAgICBsZXQgc2lnbmF0dXJlSW5kZXggPSAoKF9lbCA9IGVsKSA9PT0gbnVsbCB8fCBfZWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lbC5hY3RpdmVTaWduYXR1cmUpIHx8IDA7XG4gICAgICAgIGxldCBhY3RpdmVTaWduYXR1cmUgPSBlbC5zaWduYXR1cmVzW3NpZ25hdHVyZUluZGV4XTtcbiAgICAgICAgaWYgKCFhY3RpdmVTaWduYXR1cmUpIHJldHVybjtcbiAgICAgICAgbGV0IGFjdGl2ZVBhcmFtID0gKF9lbDEgPSBlbCkgPT09IG51bGwgfHwgX2VsMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2VsMS5hY3RpdmVQYXJhbWV0ZXI7XG4gICAgICAgIGxldCBjb250ZW50cyA9IGFjdGl2ZVNpZ25hdHVyZS5sYWJlbDtcbiAgICAgICAgaWYgKGFjdGl2ZVBhcmFtICE9IHVuZGVmaW5lZCAmJiBhY3RpdmVTaWduYXR1cmUucGFyYW1ldGVycyAmJiBhY3RpdmVTaWduYXR1cmUucGFyYW1ldGVyc1thY3RpdmVQYXJhbV0pIHtcbiAgICAgICAgICAgIGxldCBwYXJhbSA9IGFjdGl2ZVNpZ25hdHVyZS5wYXJhbWV0ZXJzW2FjdGl2ZVBhcmFtXS5sYWJlbDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW0gPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGNvbnRlbnRzID0gY29udGVudHMucmVwbGFjZShwYXJhbSwgYCoqJHtwYXJhbX0qKmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhY3RpdmVTaWduYXR1cmUuZG9jdW1lbnRhdGlvbikge1xuICAgICAgICAgICAgaWYgKE1hcmt1cENvbnRlbnQuaXMoYWN0aXZlU2lnbmF0dXJlLmRvY3VtZW50YXRpb24pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRzICsgXCJcXG5cXG5cIiArIGZyb21NYXJrdXBDb250ZW50KGFjdGl2ZVNpZ25hdHVyZS5kb2N1bWVudGF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29udGVudHMgKz0gXCJcXG5cXG5cIiArIGFjdGl2ZVNpZ25hdHVyZS5kb2N1bWVudGF0aW9uO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50cztcbiAgICAgICAgfVxuICAgIH0pLmZpbHRlcihub3RFbXB0eSk7XG4gICAgaWYgKGNvbnRlbnQubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgdHlwZTogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgdGV4dDogY29udGVudC5qb2luKFwiXFxuXFxuXCIpXG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gZnJvbU1hcmt1cENvbnRlbnQoY29udGVudCkge1xuICAgIGlmICghY29udGVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29udGVudC52YWx1ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBmcm9tQWNlRGVsdGEoZGVsdGEsIGVvbCkge1xuICAgIGNvbnN0IHRleHQgPSBkZWx0YS5saW5lcy5sZW5ndGggPiAxID8gZGVsdGEubGluZXMuam9pbihlb2wpIDogZGVsdGEubGluZXNbMF07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmFuZ2U6IGRlbHRhLmFjdGlvbiA9PT0gXCJpbnNlcnRcIiA/IHJhbmdlRnJvbVBvc2l0aW9ucyhmcm9tUG9pbnQoZGVsdGEuc3RhcnQpLCBmcm9tUG9pbnQoZGVsdGEuc3RhcnQpKSA6IHJhbmdlRnJvbVBvc2l0aW9ucyhmcm9tUG9pbnQoZGVsdGEuc3RhcnQpLCBmcm9tUG9pbnQoZGVsdGEuZW5kKSksXG4gICAgICAgIHRleHQ6IGRlbHRhLmFjdGlvbiA9PT0gXCJpbnNlcnRcIiA/IHRleHQgOiBcIlwiXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZpbHRlckRpYWdub3N0aWNzKGRpYWdub3N0aWNzLCBmaWx0ZXJFcnJvcnMpIHtcbiAgICByZXR1cm4gY29tbW9uX2NvbnZlcnRlcnNfQ29tbW9uQ29udmVydGVyLmV4Y2x1ZGVCeUVycm9yTWVzc2FnZShkaWFnbm9zdGljcywgZmlsdGVyRXJyb3JzLmVycm9yTWVzc2FnZXNUb0lnbm9yZSkubWFwKChlbCk9PntcbiAgICAgICAgaWYgKCgwLHV0aWxzLyogY2hlY2tWYWx1ZUFnYWluc3RSZWdleHBBcnJheSAqLy5UaykoZWwubWVzc2FnZSwgZmlsdGVyRXJyb3JzLmVycm9yTWVzc2FnZXNUb1RyZWF0QXNXYXJuaW5nKSkge1xuICAgICAgICAgICAgZWwuc2V2ZXJpdHkgPSBtYWluLkRpYWdub3N0aWNTZXZlcml0eS5XYXJuaW5nO1xuICAgICAgICB9IGVsc2UgaWYgKCgwLHV0aWxzLyogY2hlY2tWYWx1ZUFnYWluc3RSZWdleHBBcnJheSAqLy5UaykoZWwubWVzc2FnZSwgZmlsdGVyRXJyb3JzLmVycm9yTWVzc2FnZXNUb1RyZWF0QXNJbmZvKSkge1xuICAgICAgICAgICAgZWwuc2V2ZXJpdHkgPSBtYWluLkRpYWdub3N0aWNTZXZlcml0eS5JbmZvcm1hdGlvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWw7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmcm9tRG9jdW1lbnRIaWdobGlnaHRzKGRvY3VtZW50SGlnaGxpZ2h0cykge1xuICAgIHJldHVybiBkb2N1bWVudEhpZ2hsaWdodHMubWFwKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIGxldCBjbGFzc05hbWUgPSBlbC5raW5kID09IDIgPyBcImxhbmd1YWdlX2hpZ2hsaWdodF9yZWFkXCIgOiBlbC5raW5kID09IDMgPyBcImxhbmd1YWdlX2hpZ2hsaWdodF93cml0ZVwiIDogXCJsYW5ndWFnZV9oaWdobGlnaHRfdGV4dFwiO1xuICAgICAgICByZXR1cm4gdG9NYXJrZXJHcm91cEl0ZW0oQ29tbW9uQ29udmVydGVyLnRvUmFuZ2UodG9SYW5nZShlbC5yYW5nZSkpLCBjbGFzc05hbWUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdG9NYXJrZXJHcm91cEl0ZW0ocmFuZ2UsIGNsYXNzTmFtZSwgdG9vbHRpcFRleHQpIHtcbiAgICBsZXQgbWFya2VyR3JvdXBJdGVtID0ge1xuICAgICAgICByYW5nZTogcmFuZ2UsXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgfTtcbiAgICBpZiAodG9vbHRpcFRleHQpIHtcbiAgICAgICAgbWFya2VyR3JvdXBJdGVtW1widG9vbHRpcFRleHRcIl0gPSB0b29sdGlwVGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIG1hcmtlckdyb3VwSXRlbTtcbn1cblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3NlcnZpY2VzL3BocC9waHAtc2VydmljZS50c1xuZnVuY3Rpb24gcGhwX3NlcnZpY2VfZGVmaW5lX3Byb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5cblxuXG5jbGFzcyBQaHBTZXJ2aWNlIGV4dGVuZHMgYmFzZV9zZXJ2aWNlLkJhc2VTZXJ2aWNlIHtcbiAgICBhc3luYyBkb1ZhbGlkYXRpb24oZG9jdW1lbnQpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5nZXREb2N1bWVudFZhbHVlKGRvY3VtZW50LnVyaSk7XG4gICAgICAgIGlmICghdmFsdWUpIHJldHVybiBbXTtcbiAgICAgICAgaWYgKHRoaXMuZ2V0T3B0aW9uKGRvY3VtZW50LnVyaSwgXCJpbmxpbmVcIikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gXCI8P1wiICsgdmFsdWUgKyBcIj8+XCI7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRva2VucyA9IHBocC8qIFBIUCAqLy5qLkxleGVyKHZhbHVlLCB7XG4gICAgICAgICAgICBzaG9ydF9vcGVuX3RhZzogMVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGVycm9ycyA9IFtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbmV3IHBocC8qIFBIUCAqLy5qLlBhcnNlcih0b2tlbnMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgcmFuZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IGUubGluZSAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IDBcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBlLmxpbmUgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGUubWVzc2FnZS5zdWJzdHJpbmcoMSksXG4gICAgICAgICAgICAgICAgc2V2ZXJpdHk6IDFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXJEaWFnbm9zdGljcyhlcnJvcnMsIHRoaXMub3B0aW9uc1RvRmlsdGVyRGlhZ25vc3RpY3MpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihtb2RlKXtcbiAgICAgICAgc3VwZXIobW9kZSk7XG4gICAgICAgIHBocF9zZXJ2aWNlX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcIiRzZXJ2aWNlXCIsIHZvaWQgMCk7XG4gICAgICAgIHBocF9zZXJ2aWNlX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcInNlcnZpY2VDYXBhYmlsaXRpZXNcIiwge1xuICAgICAgICAgICAgZGlhZ25vc3RpY1Byb3ZpZGVyOiB7XG4gICAgICAgICAgICAgICAgaW50ZXJGaWxlRGVwZW5kZW5jaWVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHdvcmtzcGFjZURpYWdub3N0aWNzOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxufSkoKTtcblxuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX2V4cG9ydHNfXztcbi8qKioqKiovIH0pKClcbjtcbn0pOyJdLCJuYW1lcyI6WyJ3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsImEiLCJpIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIl9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJwcm9jZXNzIiwiY29uc29sZSIsIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9yZXF1aXJlIiwiX3JlcXVpcmUkY29kZXMiLCJjb2RlcyIsIkVSUl9BTUJJR1VPVVNfQVJHVU1FTlQiLCJFUlJfSU5WQUxJRF9BUkdfVFlQRSIsIkVSUl9JTlZBTElEX0FSR19WQUxVRSIsIkVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRSIsIkVSUl9NSVNTSU5HX0FSR1MiLCJBc3NlcnRpb25FcnJvciIsIl9yZXF1aXJlMiIsImluc3BlY3QiLCJfcmVxdWlyZSR0eXBlcyIsInR5cGVzIiwiaXNQcm9taXNlIiwiaXNSZWdFeHAiLCJvYmplY3RBc3NpZ24iLCJPYmplY3QiLCJhc3NpZ24iLCJvYmplY3RJcyIsImlzIiwiZXJyb3JDYWNoZSIsIk1hcCIsImlzRGVlcEVxdWFsIiwiaXNEZWVwU3RyaWN0RXF1YWwiLCJwYXJzZUV4cHJlc3Npb25BdCIsImZpbmROb2RlQXJvdW5kIiwiZGVjb2RlciIsImxhenlMb2FkQ29tcGFyaXNvbiIsImNvbXBhcmlzb24iLCJlc2NhcGVTZXF1ZW5jZXNSZWdFeHAiLCJtZXRhIiwiZXNjYXBlRm4iLCJzdHIiLCJjaGFyQ29kZUF0Iiwid2FybmVkIiwiYXNzZXJ0Iiwib2siLCJOT19FWENFUFRJT05fU0VOVElORUwiLCJpbm5lckZhaWwiLCJtZXNzYWdlIiwiRXJyb3IiLCJmYWlsIiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJvcGVyYXRvciIsInN0YWNrU3RhcnRGbiIsImFyZ3NMZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJpbnRlcm5hbE1lc3NhZ2UiLCJ1bmRlZmluZWQiLCJ3YXJuIiwiZW1pdFdhcm5pbmciLCJiaW5kIiwiZXJyQXJncyIsImVyciIsImdlbmVyYXRlZE1lc3NhZ2UiLCJpbm5lck9rIiwiZm4iLCJhcmdMZW4iLCJ2YWx1ZSIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiYXBwbHkiLCJjb25jYXQiLCJlcXVhbCIsIm5vdEVxdWFsIiwiZGVlcEVxdWFsIiwibm90RGVlcEVxdWFsIiwiZGVlcFN0cmljdEVxdWFsIiwibm90RGVlcFN0cmljdEVxdWFsIiwic3RyaWN0RXF1YWwiLCJub3RTdHJpY3RFcXVhbCIsIkNvbXBhcmlzb24iLCJrZXlzIiwiX3RoaXMiLCJmb3JFYWNoIiwia2V5IiwidGVzdCIsImNvbXBhcmVFeGNlcHRpb25LZXkiLCJiIiwibmFtZSIsImV4cGVjdGVkRXhjZXB0aW9uIiwibXNnIiwicHVzaCIsImlzUHJvdG90eXBlT2YiLCJjYWxsIiwiZ2V0QWN0dWFsIiwiZSIsImNoZWNrSXNQcm9taXNlIiwidGhlbiIsImNhdGNoIiwid2FpdEZvckFjdHVhbCIsInByb21pc2VGbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVzdWx0UHJvbWlzZSIsImV4cGVjdHNFcnJvciIsImVycm9yIiwiZGV0YWlscyIsImZuVHlwZSIsImV4cGVjdHNOb0Vycm9yIiwidGhyb3dzIiwiX2xlbjIiLCJfa2V5MiIsInJlamVjdHMiLCJfbGVuMyIsIl9rZXkzIiwicmVzdWx0IiwiZG9lc05vdFRocm93IiwiX2xlbjQiLCJfa2V5NCIsImRvZXNOb3RSZWplY3QiLCJfbGVuNSIsIl9rZXk1IiwiaWZFcnJvciIsIm5ld0VyciIsIm9yaWdTdGFjayIsInN0YWNrIiwidG1wMiIsInNwbGl0Iiwic2hpZnQiLCJ0bXAxIiwicG9zIiwiaW5kZXhPZiIsInNsaWNlIiwiam9pbiIsInN0cmljdCIsIl9sZW42IiwiX2tleTYiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0Iiwic291cmNlIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJfZGVmaW5lUHJvcGVydHkiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJfc2V0UHJvdG90eXBlT2YiLCJfd3JhcE5hdGl2ZVN1cGVyIiwiQ2xhc3MiLCJfY2FjaGUiLCJfaXNOYXRpdmVGdW5jdGlvbiIsImhhcyIsImdldCIsInNldCIsIldyYXBwZXIiLCJfY29uc3RydWN0IiwiX2dldFByb3RvdHlwZU9mIiwiaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIkRhdGUiLCJ0b1N0cmluZyIsIlBhcmVudCIsIkZ1bmN0aW9uIiwibyIsInAiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImdldFByb3RvdHlwZU9mIiwiZW5kc1dpdGgiLCJzZWFyY2giLCJ0aGlzX2xlbiIsInN1YnN0cmluZyIsInJlcGVhdCIsImNvdW50IiwiTWF0aCIsImZsb29yIiwibWF4Q291bnQiLCJsb2ciLCJibHVlIiwiZ3JlZW4iLCJyZWQiLCJ3aGl0ZSIsImtSZWFkYWJsZU9wZXJhdG9yIiwic3RyaWN0RXF1YWxPYmplY3QiLCJub3RTdHJpY3RFcXVhbE9iamVjdCIsIm5vdElkZW50aWNhbCIsImtNYXhTaG9ydExlbmd0aCIsImNvcHlFcnJvciIsImluc3BlY3RWYWx1ZSIsInZhbCIsImNvbXBhY3QiLCJjdXN0b21JbnNwZWN0IiwiZGVwdGgiLCJtYXhBcnJheUxlbmd0aCIsIkluZmluaXR5Iiwic2hvd0hpZGRlbiIsImJyZWFrTGVuZ3RoIiwic2hvd1Byb3h5Iiwic29ydGVkIiwiZ2V0dGVycyIsImNyZWF0ZUVyckRpZmYiLCJvdGhlciIsInJlcyIsImxhc3RQb3MiLCJlbmQiLCJza2lwcGVkIiwiYWN0dWFsSW5zcGVjdGVkIiwiYWN0dWFsTGluZXMiLCJleHBlY3RlZExpbmVzIiwiaW5kaWNhdG9yIiwiaW5wdXRMZW5ndGgiLCJtYXhMZW5ndGgiLCJzdGRlcnIiLCJpc1RUWSIsImNvbHVtbnMiLCJwb3AiLCJtYXhMaW5lcyIsIm1heCIsIl9hY3R1YWxMaW5lcyIsInByaW50ZWRMaW5lcyIsInNraXBwZWRNc2ciLCJjdXIiLCJleHBlY3RlZExpbmUiLCJhY3R1YWxMaW5lIiwiZGl2ZXJnaW5nTGluZXMiLCJfRXJyb3IiLCJvcHRpb25zIiwibGltaXQiLCJzdGFja1RyYWNlTGltaXQiLCJTdHJpbmciLCJnZXRDb2xvckRlcHRoIiwiYmFzZSIsIl9yZXMiLCJrbm93bk9wZXJhdG9ycyIsImNvZGUiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImN1c3RvbSIsInJlY3Vyc2VUaW1lcyIsImN0eCIsInV0aWwiLCJjcmVhdGVFcnJvclR5cGUiLCJCYXNlIiwiZ2V0TWVzc2FnZSIsImFyZzEiLCJhcmcyIiwiYXJnMyIsIk5vZGVFcnJvciIsIl9CYXNlIiwib25lT2YiLCJ0aGluZyIsImlzQXJyYXkiLCJsZW4iLCJtYXAiLCJzdGFydHNXaXRoIiwic3Vic3RyIiwiaW5jbHVkZXMiLCJzdGFydCIsImRldGVybWluZXIiLCJyZXBsYWNlIiwidHlwZSIsInJlYXNvbiIsImluc3BlY3RlZCIsIlJhbmdlRXJyb3IiLCJpbnB1dCIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX25vbkl0ZXJhYmxlUmVzdCIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfaSIsIl9zIiwibmV4dCIsImRvbmUiLCJyZWdleEZsYWdzU3VwcG9ydGVkIiwiZmxhZ3MiLCJhcnJheUZyb21TZXQiLCJhcnJheSIsImFycmF5RnJvbU1hcCIsIm9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyIsIm51bWJlcklzTmFOIiwiTnVtYmVyIiwiaXNOYU4iLCJ1bmN1cnJ5VGhpcyIsImYiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwib2JqZWN0VG9TdHJpbmciLCJpc0FueUFycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJpc0RhdGUiLCJpc01hcCIsImlzU2V0IiwiaXNOYXRpdmVFcnJvciIsImlzQm94ZWRQcmltaXRpdmUiLCJpc051bWJlck9iamVjdCIsImlzU3RyaW5nT2JqZWN0IiwiaXNCb29sZWFuT2JqZWN0IiwiaXNCaWdJbnRPYmplY3QiLCJpc1N5bWJvbE9iamVjdCIsImlzRmxvYXQzMkFycmF5IiwiaXNGbG9hdDY0QXJyYXkiLCJpc05vbkluZGV4IiwicG93IiwiZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzIiwiY29tcGFyZSIsIngiLCJ5IiwibWluIiwiT05MWV9FTlVNRVJBQkxFIiwia1N0cmljdCIsImtMb29zZSIsImtOb0l0ZXJhdG9yIiwia0lzQXJyYXkiLCJrSXNTZXQiLCJrSXNNYXAiLCJhcmVTaW1pbGFyUmVnRXhwcyIsIlJlZ0V4cCIsImFyZVNpbWlsYXJGbG9hdEFycmF5cyIsImJ5dGVMZW5ndGgiLCJvZmZzZXQiLCJhcmVTaW1pbGFyVHlwZWRBcnJheXMiLCJVaW50OEFycmF5IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImFyZUVxdWFsQXJyYXlCdWZmZXJzIiwiYnVmMSIsImJ1ZjIiLCJpc0VxdWFsQm94ZWRQcmltaXRpdmUiLCJ2YWwxIiwidmFsMiIsInZhbHVlT2YiLCJCb29sZWFuIiwiQmlnSW50IiwiaW5uZXJEZWVwRXF1YWwiLCJtZW1vcyIsInZhbDFUYWciLCJ2YWwyVGFnIiwia2V5czEiLCJrZXlzMiIsImtleUNoZWNrIiwiZ2V0VGltZSIsIl9rZXlzIiwiX2tleXMyIiwic2l6ZSIsImdldEVudW1lcmFibGVzIiwiayIsIml0ZXJhdGlvblR5cGUiLCJhS2V5cyIsImJLZXlzIiwic3ltYm9sS2V5c0EiLCJzeW1ib2xLZXlzQiIsIl9zeW1ib2xLZXlzQiIsInBvc2l0aW9uIiwidmFsMk1lbW9BIiwidmFsMk1lbW9CIiwiYXJlRXEiLCJvYmpFcXVpdiIsImRlbGV0ZSIsInNldEhhc0VxdWFsRWxlbWVudCIsIm1lbW8iLCJzZXRWYWx1ZXMiLCJmaW5kTG9vc2VNYXRjaGluZ1ByaW1pdGl2ZXMiLCJwcmltIiwic2V0TWlnaHRIYXZlTG9vc2VQcmltIiwiYWx0VmFsdWUiLCJtYXBNaWdodEhhdmVMb29zZVByaW0iLCJpdGVtIiwiY3VyQiIsInNldEVxdWl2IiwiYVZhbHVlcyIsIlNldCIsImFkZCIsImJWYWx1ZXMiLCJfdmFsIiwibWFwSGFzRXF1YWxFbnRyeSIsImtleTEiLCJpdGVtMSIsImtleTIiLCJtYXBFcXVpdiIsImFFbnRyaWVzIiwiX2FFbnRyaWVzJGkiLCJpdGVtMiIsImJFbnRyaWVzIiwiX2kyIiwiX2JFbnRyaWVzJF9pIiwia2V5c0EiLCJHZXRJbnRyaW5zaWMiLCJjYWxsQmluZCIsIiRpbmRleE9mIiwiY2FsbEJvdW5kSW50cmluc2ljIiwiYWxsb3dNaXNzaW5nIiwiaW50cmluc2ljIiwic2V0RnVuY3Rpb25MZW5ndGgiLCIkVHlwZUVycm9yIiwiJGFwcGx5IiwiJGNhbGwiLCIkcmVmbGVjdEFwcGx5IiwiJGRlZmluZVByb3BlcnR5IiwiJG1heCIsIm9yaWdpbmFsRnVuY3Rpb24iLCJmdW5jIiwiYXBwbHlCaW5kIiwibm93IiwidGltZXMiLCJnIiwid2luZG93IiwiZnVuY3Rpb25zIiwiaW5mbyIsInRpbWUiLCJ0aW1lRW5kIiwidHJhY2UiLCJkaXIiLCJjb25zb2xlQXNzZXJ0IiwidHVwbGUiLCJsYWJlbCIsImR1cmF0aW9uIiwiZm9ybWF0Iiwib2JqZWN0IiwiZXhwcmVzc2lvbiIsIiRTeW50YXhFcnJvciIsImdvcGQiLCJkZWZpbmVEYXRhUHJvcGVydHkiLCJwcm9wZXJ0eSIsIm5vbkVudW1lcmFibGUiLCJub25Xcml0YWJsZSIsIm5vbkNvbmZpZ3VyYWJsZSIsImxvb3NlIiwiZGVzYyIsImhhc1N5bWJvbHMiLCJ0b1N0ciIsImlzRnVuY3Rpb24iLCJzdXBwb3J0c0Rlc2NyaXB0b3JzIiwicHJlZGljYXRlIiwiZGVmaW5lUHJvcGVydGllcyIsInByZWRpY2F0ZXMiLCJFdmFsRXJyb3IiLCJTeW50YXhFcnJvciIsIlVSSUVycm9yIiwiZmlyc3RTb3VyY2UiLCJ0byIsIm5leHRTb3VyY2UiLCJrZXlzQXJyYXkiLCJuZXh0SW5kZXgiLCJuZXh0S2V5IiwicG9seWZpbGwiLCJpc0NhbGxhYmxlIiwiZm9yRWFjaEFycmF5IiwicmVjZWl2ZXIiLCJmb3JFYWNoU3RyaW5nIiwic3RyaW5nIiwiY2hhckF0IiwiZm9yRWFjaE9iamVjdCIsImxpc3QiLCJ0aGlzQXJnIiwiRVJST1JfTUVTU0FHRSIsImZ1bmNUeXBlIiwiY29uY2F0dHkiLCJqIiwic2xpY3kiLCJhcnJMaWtlIiwiam9pbnkiLCJqb2luZXIiLCJ0aGF0IiwiYm91bmQiLCJiaW5kZXIiLCJib3VuZExlbmd0aCIsImJvdW5kQXJncyIsIkVtcHR5IiwiaW1wbGVtZW50YXRpb24iLCIkRXJyb3IiLCIkRXZhbEVycm9yIiwiJFJhbmdlRXJyb3IiLCIkUmVmZXJlbmNlRXJyb3IiLCIkVVJJRXJyb3IiLCIkRnVuY3Rpb24iLCJnZXRFdmFsbGVkQ29uc3RydWN0b3IiLCJleHByZXNzaW9uU3ludGF4IiwiJGdPUEQiLCJ0aHJvd1R5cGVFcnJvciIsIlRocm93VHlwZUVycm9yIiwiY2FsbGVlIiwiY2FsbGVlVGhyb3dzIiwiZ09QRHRocm93cyIsImhhc1Byb3RvIiwiZ2V0UHJvdG8iLCJuZWVkc0V2YWwiLCJUeXBlZEFycmF5IiwiSU5UUklOU0lDUyIsIkFnZ3JlZ2F0ZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJBdG9taWNzIiwiQmlnSW50NjRBcnJheSIsIkJpZ1VpbnQ2NEFycmF5IiwiRGF0YVZpZXciLCJkZWNvZGVVUkkiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVVUkkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJldmFsIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiRmluYWxpemF0aW9uUmVnaXN0cnkiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsImlzRmluaXRlIiwiSlNPTiIsInBhcnNlRmxvYXQiLCJwYXJzZUludCIsIlNoYXJlZEFycmF5QnVmZmVyIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiV2Vha01hcCIsIldlYWtSZWYiLCJXZWFrU2V0IiwiZXJyb3JQcm90byIsImRvRXZhbCIsImdlbiIsIkxFR0FDWV9BTElBU0VTIiwiaGFzT3duIiwiJGNvbmNhdCIsIiRzcGxpY2VBcHBseSIsInNwbGljZSIsIiRyZXBsYWNlIiwiJHN0clNsaWNlIiwiJGV4ZWMiLCJleGVjIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN0cmluZ1RvUGF0aCIsImZpcnN0IiwibGFzdCIsIm1hdGNoIiwibnVtYmVyIiwicXVvdGUiLCJzdWJTdHJpbmciLCJnZXRCYXNlSW50cmluc2ljIiwiaW50cmluc2ljTmFtZSIsImFsaWFzIiwicGFydHMiLCJpbnRyaW5zaWNCYXNlTmFtZSIsImludHJpbnNpY1JlYWxOYW1lIiwic2tpcEZ1cnRoZXJDYWNoaW5nIiwiaXNPd24iLCJwYXJ0IiwiaGFzUHJvcGVydHlEZXNjcmlwdG9ycyIsImhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnIiwiZm9vIiwiJE9iamVjdCIsIm9yaWdTeW1ib2wiLCJoYXNTeW1ib2xTaGFtIiwiaGFzTmF0aXZlU3ltYm9scyIsInN5bU9iaiIsInN5bVZhbCIsImdldE93blByb3BlcnR5TmFtZXMiLCJzeW1zIiwiaGFzVG9TdHJpbmdUYWdTaGFtcyIsInRvU3RyaW5nVGFnIiwiJGhhc093biIsImluaGVyaXRzIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiaGFzVG9TdHJpbmdUYWciLCJjYWxsQm91bmQiLCIkdG9TdHJpbmciLCJpc1N0YW5kYXJkQXJndW1lbnRzIiwiaXNBcmd1bWVudHMiLCJpc0xlZ2FjeUFyZ3VtZW50cyIsInN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMiLCJmblRvU3RyIiwicmVmbGVjdEFwcGx5IiwiYmFkQXJyYXlMaWtlIiwiaXNDYWxsYWJsZU1hcmtlciIsIl8iLCJjb25zdHJ1Y3RvclJlZ2V4IiwiaXNFUzZDbGFzc0ZuIiwiaXNFUzZDbGFzc0Z1bmN0aW9uIiwiZm5TdHIiLCJ0cnlGdW5jdGlvbk9iamVjdCIsInRyeUZ1bmN0aW9uVG9TdHIiLCJvYmplY3RDbGFzcyIsImZuQ2xhc3MiLCJnZW5DbGFzcyIsImRkYUNsYXNzIiwiZGRhQ2xhc3MyIiwiZGRhQ2xhc3MzIiwiaXNJRTY4IiwiaXNEREEiLCJpc0RvY3VtZW50RG90QWxsIiwiZG9jdW1lbnQiLCJhbGwiLCJzdHJDbGFzcyIsImlzRm5SZWdleCIsImdldEdlbmVyYXRvckZ1bmMiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5lcmF0b3JGdW5jIiwiZ2V0UG9seWZpbGwiLCJzaGltIiwiTmFOIiwic2hpbU51bWJlcklzTmFOIiwidGVzdElzTmFOIiwid2hpY2hUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5Iiwic2hpbU9iamVjdElzIiwidGVzdE9iamVjdElzIiwia2V5c1NoaW0iLCJpc0FyZ3MiLCJpc0VudW1lcmFibGUiLCJoYXNEb250RW51bUJ1ZyIsImhhc1Byb3RvRW51bUJ1ZyIsImRvbnRFbnVtcyIsImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlIiwiZXhjbHVkZWRLZXlzIiwiJGFwcGxpY2F0aW9uQ2FjaGUiLCIkY29uc29sZSIsIiRleHRlcm5hbCIsIiRmcmFtZSIsIiRmcmFtZUVsZW1lbnQiLCIkZnJhbWVzIiwiJGlubmVySGVpZ2h0IiwiJGlubmVyV2lkdGgiLCIkb25tb3pmdWxsc2NyZWVuY2hhbmdlIiwiJG9ubW96ZnVsbHNjcmVlbmVycm9yIiwiJG91dGVySGVpZ2h0IiwiJG91dGVyV2lkdGgiLCIkcGFnZVhPZmZzZXQiLCIkcGFnZVlPZmZzZXQiLCIkcGFyZW50IiwiJHNjcm9sbExlZnQiLCIkc2Nyb2xsVG9wIiwiJHNjcm9sbFgiLCIkc2Nyb2xsWSIsIiRzZWxmIiwiJHdlYmtpdEluZGV4ZWREQiIsIiR3ZWJraXRTdG9yYWdlSW5mbyIsIiR3aW5kb3ciLCJoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWciLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kiLCJpc09iamVjdCIsImlzU3RyaW5nIiwidGhlS2V5cyIsInNraXBQcm90byIsInNraXBDb25zdHJ1Y3RvciIsIm9yaWdLZXlzIiwib3JpZ2luYWxLZXlzIiwic2hpbU9iamVjdEtleXMiLCJrZXlzV29ya3NXaXRoQXJndW1lbnRzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJydW5DbGVhclRpbWVvdXQiLCJtYXJrZXIiLCJxdWV1ZSIsImRyYWluaW5nIiwiY3VycmVudFF1ZXVlIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibmV4dFRpY2siLCJJdGVtIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm5vb3AiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsImhhc0Rlc2NyaXB0b3JzIiwiZ09QRCIsIiRmbG9vciIsImZ1bmN0aW9uTGVuZ3RoSXNDb25maWd1cmFibGUiLCJmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUiLCJfX3VudXNlZF93ZWJwYWNrX21vZHVsZSIsIl9fd2VicGFja19leHBvcnRzX18iLCJkIiwiQmFzZVNlcnZpY2UiLCJ2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInZzY29kZV9sYW5ndWFnZXNlcnZlcl9wcm90b2NvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJuIiwiX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJ2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdGV4dGRvY3VtZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfZGVmaW5lX3Byb3BlcnR5IiwiYWRkRG9jdW1lbnQiLCJkb2N1bWVudHMiLCJ1cmkiLCJWIiwibGFuZ3VhZ2VJZCIsInRleHQiLCJnZXREb2N1bWVudCIsInJlbW92ZURvY3VtZW50IiwicmVuYW1lRG9jdW1lbnQiLCJuZXdEb2N1bWVudFVyaSIsImdldERvY3VtZW50VmFsdWUiLCJfdGhpc19nZXREb2N1bWVudCIsImdldFRleHQiLCJzZXRWYWx1ZSIsImlkZW50aWZpZXIiLCJzZXRHbG9iYWxPcHRpb25zIiwiZ2xvYmFsT3B0aW9ucyIsInNldFdvcmtzcGFjZSIsIndvcmtzcGFjZVVyaSIsInNldE9wdGlvbnMiLCJkb2N1bWVudFVyaSIsIm1lcmdlIiwickwiLCJnZXRPcHRpb24iLCJvcHRpb25OYW1lIiwiYXBwbHlEZWx0YXMiLCJkZWx0YXMiLCJ1cGRhdGUiLCJkb0NvbXBsZXRlIiwiZG9JbmxpbmVDb21wbGV0ZSIsImRvSG92ZXIiLCJkb1Jlc29sdmUiLCJkb1ZhbGlkYXRpb24iLCJyYW5nZSIsInByb3ZpZGVTaWduYXR1cmVIZWxwIiwiZmluZERvY3VtZW50SGlnaGxpZ2h0cyIsIm9wdGlvbnNUb0ZpbHRlckRpYWdub3N0aWNzIiwiX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9JZ25vcmUiLCJfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb1RyZWF0QXNXYXJuaW5nIiwiX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9UcmVhdEFzSW5mbyIsIl90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvSWdub3JlIiwiX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvck1lc3NhZ2VzVG9UcmVhdEFzV2FybmluZyIsIl90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvVHJlYXRBc0luZm8iLCJlcnJvckNvZGVzVG9JZ25vcmUiLCJlcnJvckNvZGVzVG9UcmVhdEFzV2FybmluZyIsImVycm9yQ29kZXNUb1RyZWF0QXNJbmZvIiwiZXJyb3JNZXNzYWdlc1RvSWdub3JlIiwiZXJyb3JNZXNzYWdlc1RvVHJlYXRBc1dhcm5pbmciLCJlcnJvck1lc3NhZ2VzVG9UcmVhdEFzSW5mbyIsImdldFNlbWFudGljVG9rZW5zIiwiZGlzcG9zZSIsImNsb3NlQ29ubmVjdGlvbiIsImdldENvZGVBY3Rpb25zIiwiY29udGV4dCIsImV4ZWN1dGVDb21tYW5kIiwiY29tbWFuZCIsInNlbmRBcHBsaWVkUmVzdWx0IiwiY2FsbGJhY2tJZCIsInNlbmRSZXF1ZXN0Iiwic2VuZFJlc3BvbnNlIiwibW9kZSIsInRleHREb2N1bWVudCIsImRpYWdub3N0aWMiLCJkeW5hbWljUmVnaXN0cmF0aW9uIiwicmVsYXRlZERvY3VtZW50U3VwcG9ydCIsInB1Ymxpc2hEaWFnbm9zdGljcyIsInJlbGF0ZWRJbmZvcm1hdGlvbiIsInZlcnNpb25TdXBwb3J0IiwidGFnU3VwcG9ydCIsInZhbHVlU2V0IiwiRGlhZ25vc3RpY1RhZyIsIlVubmVjZXNzYXJ5IiwiRGVwcmVjYXRlZCIsImhvdmVyIiwiY29udGVudEZvcm1hdCIsInN5bmNocm9uaXphdGlvbiIsIndpbGxTYXZlIiwiZGlkU2F2ZSIsIndpbGxTYXZlV2FpdFVudGlsIiwiZm9ybWF0dGluZyIsImNvbXBsZXRpb24iLCJjb21wbGV0aW9uSXRlbSIsInNuaXBwZXRTdXBwb3J0IiwiY29tbWl0Q2hhcmFjdGVyc1N1cHBvcnQiLCJkb2N1bWVudGF0aW9uRm9ybWF0IiwiZGVwcmVjYXRlZFN1cHBvcnQiLCJwcmVzZWxlY3RTdXBwb3J0IiwiY29udGV4dFN1cHBvcnQiLCJzaWduYXR1cmVIZWxwIiwic2lnbmF0dXJlSW5mb3JtYXRpb24iLCJhY3RpdmVQYXJhbWV0ZXJTdXBwb3J0IiwiZG9jdW1lbnRIaWdobGlnaHQiLCJzZW1hbnRpY1Rva2VucyIsIm11bHRpbGluZVRva2VuU3VwcG9ydCIsIm92ZXJsYXBwaW5nVG9rZW5TdXBwb3J0IiwidG9rZW5UeXBlcyIsInRva2VuTW9kaWZpZXJzIiwiZm9ybWF0cyIsInJlcXVlc3RzIiwiZnVsbCIsImRlbHRhIiwiYXVnbWVudHNTeW50YXhUb2tlbnMiLCJjb2RlQWN0aW9uIiwiaW5saW5lQ29tcGxldGlvbiIsInNob3dEb2N1bWVudCIsInN1cHBvcnQiLCJ3b3Jrc3BhY2UiLCJkaWRDaGFuZ2VDb25maWd1cmF0aW9uIiwiYXBwbHlFZGl0Iiwid29ya3NwYWNlRWRpdCIsImZhaWx1cmVIYW5kbGluZyIsIm5vcm1hbGl6ZXNMaW5lRW5kaW5ncyIsImRvY3VtZW50Q2hhbmdlcyIsInNlcnZpY2VOYW1lIiwic2VydmljZURhdGEiLCJjbGFzc05hbWUiLCJtb2RlcyIsIlBIUCIsIkNvbnN0YW50cyIsIlRfVEhST1ciLCJUX0lOQ0xVREUiLCJUX0lOQ0xVREVfT05DRSIsIlRfRVZBTCIsIlRfUkVRVUlSRSIsIlRfUkVRVUlSRV9PTkNFIiwiVF9MT0dJQ0FMX09SIiwiVF9MT0dJQ0FMX1hPUiIsIlRfTE9HSUNBTF9BTkQiLCJUX1BSSU5UIiwiVF9ZSUVMRCIsIlRfRE9VQkxFX0FSUk9XIiwiVF9ZSUVMRF9GUk9NIiwiVF9QTFVTX0VRVUFMIiwiVF9NSU5VU19FUVVBTCIsIlRfTVVMX0VRVUFMIiwiVF9ESVZfRVFVQUwiLCJUX0NPTkNBVF9FUVVBTCIsIlRfTU9EX0VRVUFMIiwiVF9BTkRfRVFVQUwiLCJUX09SX0VRVUFMIiwiVF9YT1JfRVFVQUwiLCJUX1NMX0VRVUFMIiwiVF9TUl9FUVVBTCIsIlRfUE9XX0VRVUFMIiwiVF9DT0FMRVNDRV9FUVVBTCIsIlRfQ09BTEVTQ0UiLCJUX0JPT0xFQU5fT1IiLCJUX0JPT0xFQU5fQU5EIiwiVF9BTVBFUlNBTkRfTk9UX0ZPTExPV0VEX0JZX1ZBUl9PUl9WQVJBUkciLCJUX0FNUEVSU0FORF9GT0xMT1dFRF9CWV9WQVJfT1JfVkFSQVJHIiwiVF9JU19FUVVBTCIsIlRfSVNfTk9UX0VRVUFMIiwiVF9JU19JREVOVElDQUwiLCJUX0lTX05PVF9JREVOVElDQUwiLCJUX1NQQUNFU0hJUCIsIlRfSVNfU01BTExFUl9PUl9FUVVBTCIsIlRfSVNfR1JFQVRFUl9PUl9FUVVBTCIsIlRfU0wiLCJUX1NSIiwiVF9JTlNUQU5DRU9GIiwiVF9JTkMiLCJUX0RFQyIsIlRfSU5UX0NBU1QiLCJUX0RPVUJMRV9DQVNUIiwiVF9TVFJJTkdfQ0FTVCIsIlRfQVJSQVlfQ0FTVCIsIlRfT0JKRUNUX0NBU1QiLCJUX0JPT0xfQ0FTVCIsIlRfVU5TRVRfQ0FTVCIsIlRfUE9XIiwiVF9ORVciLCJUX0NMT05FIiwiVF9FWElUIiwiVF9JRiIsIlRfRUxTRUlGIiwiVF9FTFNFIiwiVF9FTkRJRiIsIlRfTE5VTUJFUiIsIlRfRE5VTUJFUiIsIlRfU1RSSU5HIiwiVF9TVFJJTkdfVkFSTkFNRSIsIlRfVkFSSUFCTEUiLCJUX05VTV9TVFJJTkciLCJUX0lOTElORV9IVE1MIiwiVF9FTkNBUFNFRF9BTkRfV0hJVEVTUEFDRSIsIlRfQ09OU1RBTlRfRU5DQVBTRURfU1RSSU5HIiwiVF9FQ0hPIiwiVF9ETyIsIlRfV0hJTEUiLCJUX0VORFdISUxFIiwiVF9GT1IiLCJUX0VOREZPUiIsIlRfRk9SRUFDSCIsIlRfRU5ERk9SRUFDSCIsIlRfREVDTEFSRSIsIlRfRU5EREVDTEFSRSIsIlRfQVMiLCJUX1NXSVRDSCIsIlRfTUFUQ0giLCJUX0VORFNXSVRDSCIsIlRfQ0FTRSIsIlRfREVGQVVMVCIsIlRfQlJFQUsiLCJUX0NPTlRJTlVFIiwiVF9HT1RPIiwiVF9GVU5DVElPTiIsIlRfRk4iLCJUX0NPTlNUIiwiVF9SRVRVUk4iLCJUX1RSWSIsIlRfQ0FUQ0giLCJUX0ZJTkFMTFkiLCJUX1VTRSIsIlRfSU5TVEVBRE9GIiwiVF9HTE9CQUwiLCJUX1NUQVRJQyIsIlRfQUJTVFJBQ1QiLCJUX0ZJTkFMIiwiVF9QUklWQVRFIiwiVF9QUk9URUNURUQiLCJUX1BVQkxJQyIsIlRfUkVBRE9OTFkiLCJUX1ZBUiIsIlRfVU5TRVQiLCJUX0lTU0VUIiwiVF9FTVBUWSIsIlRfSEFMVF9DT01QSUxFUiIsIlRfQ0xBU1MiLCJUX1RSQUlUIiwiVF9JTlRFUkZBQ0UiLCJUX0VOVU0iLCJUX0VYVEVORFMiLCJUX0lNUExFTUVOVFMiLCJUX09CSkVDVF9PUEVSQVRPUiIsIlRfTlVMTFNBRkVfT0JKRUNUX09QRVJBVE9SIiwiVF9MSVNUIiwiVF9BUlJBWSIsIlRfQ0FMTEFCTEUiLCJUX0NMQVNTX0MiLCJUX1RSQUlUX0MiLCJUX01FVEhPRF9DIiwiVF9GVU5DX0MiLCJUX0xJTkUiLCJUX0ZJTEUiLCJUX1NUQVJUX0hFUkVET0MiLCJUX0VORF9IRVJFRE9DIiwiVF9ET0xMQVJfT1BFTl9DVVJMWV9CUkFDRVMiLCJUX0NVUkxZX09QRU4iLCJUX1BBQU1BWUlNX05FS1VET1RBWUlNIiwiVF9OQU1FU1BBQ0UiLCJUX05TX0MiLCJUX0RJUiIsIlRfTlNfU0VQQVJBVE9SIiwiVF9FTExJUFNJUyIsIlRfTkFNRV9GVUxMWV9RVUFMSUZJRUQiLCJUX05BTUVfUVVBTElGSUVEIiwiVF9OQU1FX1JFTEFUSVZFIiwiVF9BVFRSSUJVVEUiLCJUX0JBRF9DSEFSQUNURVIiLCJUX0NPTU1FTlQiLCJUX0RPQ19DT01NRU5UIiwiVF9PUEVOX1RBRyIsIlRfT1BFTl9UQUdfV0lUSF9FQ0hPIiwiVF9DTE9TRV9UQUciLCJUX1dISVRFU1BBQ0UiLCJMZXhlciIsInNyYyIsImluaSIsImhlcmVkb2MiLCJoZXJlZG9jRW5kQWxsb3dlZCIsInN0YXRlU3RhY2siLCJzdGFja1BvcyIsInN3YXBTdGF0ZSIsInN0YXRlIiwicHVzaFN0YXRlIiwicG9wU3RhdGUiLCJzaG9ydE9wZW5UYWciLCJzaG9ydF9vcGVuX3RhZyIsIm9wZW5UYWciLCJpbmxpbmVIdG1sIiwibGFiZWxSZWdleFBhcnQiLCJzdHJpbmdSZWdleFBhcnQiLCJzaGFyZWRTdHJpbmdUb2tlbnMiLCJyZSIsImRhdGEiLCJtYXRjaEZ1bmMiLCJpbmRleCIsInJlc3VsdHMiLCJsaW5lIiwiY2FuY2VsIiwidG9rZW5zIiwic29tZSIsInRva2VuIiwicmVzdWx0U3RyaW5nIiwiUGFyc2VyIiwicHJlcHJvY2Vzc2VkVG9rZW5zIiwiZXZhbHVhdGUiLCJ5eWJhc2UiLCJ5eWRlZmF1bHQiLCJ5eWNoZWNrIiwieXlhY3Rpb24iLCJ5eWxlbiIsInl5Z2Jhc2UiLCJ5eWdjaGVjayIsInl5cCIsInl5Z290byIsInl5bGhzIiwidGVybWluYWxzIiwidHJhbnNsYXRlIiwieXlnZGVmYXVsdCIsInRva2VuTWFwIiwiY3JlYXRlVG9rZW5NYXAiLCJkcm9wVG9rZW5zIiwidG9rZW5JZCIsIlRPS0VOX05PTkUiLCJzdGFydEF0dHJpYnV0ZXMiLCJlbmRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlU3RhY2siLCJ5eWFzdGsiLCJ5eW4iLCJvcmlnVG9rZW5JZCIsImdldE5leHRUb2tlbiIsIlRPS0VOX01BUF9TSVpFIiwiVE9LRU5fSU5WQUxJRCIsIllZTEFTVCIsIllZMlRCTFNUQVRFIiwiWVlOTFNUQVRFUyIsIllZREVGQVVMVCIsInRva2VuVmFsdWUiLCJ5eXZhbCIsIllZVU5FWFBFQ1RFRCIsImF0dHIiLCJZWUdMQVNUIiwiZXhwZWN0ZWRTdHJpbmciLCJQYXJzZUVycm9yIiwidG1wIiwiY29tbWVudCIsIlBIUFBhcnNlcl9Db21tZW50X0RvYyIsInRva2VuTmFtZSIsImNvbnN0YW50cyIsImN1cnJlbnQiLCJjb25zdGFudCIsIllZRVJSVE9LIiwiVGsiLCJjaGVja1ZhbHVlQWdhaW5zdFJlZ2V4cEFycmF5IiwibWVyZ2VPYmplY3RzIiwib2JqMSIsIm9iajIiLCJleGNsdWRlVW5kZWZpbmVkIiwiZXhjbHVkZVVuZGVmaW5lZFZhbHVlcyIsIm1lcmdlZE9iamVjdHMiLCJmaWx0ZXJlZEVudHJpZXMiLCJlbnRyaWVzIiwiZnJvbUVudHJpZXMiLCJub3RFbXB0eSIsImlzRW1wdHlSYW5nZSIsInJvdyIsImNvbHVtbiIsIm1lcmdlUmFuZ2VzIiwicmFuZ2VzIiwic29ydCIsImNvbXBhcmVQb2ludHMiLCJjbXAiLCJwMSIsInAyIiwicmVnZXhwQXJyYXkiLCJjb252ZXJ0VG9VcmkiLCJmaWxlUGF0aCIsIlVSSSIsImZpbGUiLCJpc0J1ZmZlciIsImFyZyIsImNvcHkiLCJmaWxsIiwicmVhZFVJbnQ4IiwiaXNBcmd1bWVudHNPYmplY3QiLCJCaWdJbnRTdXBwb3J0ZWQiLCJTeW1ib2xTdXBwb3J0ZWQiLCJPYmplY3RUb1N0cmluZyIsIm51bWJlclZhbHVlIiwic3RyaW5nVmFsdWUiLCJib29sZWFuVmFsdWUiLCJiaWdJbnRWYWx1ZSIsInN5bWJvbFZhbHVlIiwiY2hlY2tCb3hlZFByaW1pdGl2ZSIsInByb3RvdHlwZVZhbHVlT2YiLCJpc1ZpZXciLCJpc0RhdGFWaWV3IiwiaXNVaW50OEFycmF5IiwiaXNVaW50OENsYW1wZWRBcnJheSIsImlzVWludDE2QXJyYXkiLCJpc1VpbnQzMkFycmF5IiwiaXNJbnQ4QXJyYXkiLCJpc0ludDE2QXJyYXkiLCJpc0ludDMyQXJyYXkiLCJpc0JpZ0ludDY0QXJyYXkiLCJpc0JpZ1VpbnQ2NEFycmF5IiwiaXNNYXBUb1N0cmluZyIsIndvcmtpbmciLCJpc1NldFRvU3RyaW5nIiwiaXNXZWFrTWFwVG9TdHJpbmciLCJpc1dlYWtNYXAiLCJpc1dlYWtTZXRUb1N0cmluZyIsImlzV2Vha1NldCIsImlzQXJyYXlCdWZmZXJUb1N0cmluZyIsImlzQXJyYXlCdWZmZXIiLCJpc0RhdGFWaWV3VG9TdHJpbmciLCJTaGFyZWRBcnJheUJ1ZmZlckNvcHkiLCJpc1NoYXJlZEFycmF5QnVmZmVyVG9TdHJpbmciLCJpc1NoYXJlZEFycmF5QnVmZmVyIiwiaXNBc3luY0Z1bmN0aW9uIiwiaXNNYXBJdGVyYXRvciIsImlzU2V0SXRlcmF0b3IiLCJpc0dlbmVyYXRvck9iamVjdCIsImlzV2ViQXNzZW1ibHlDb21waWxlZE1vZHVsZSIsIm1ldGhvZCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9ycyIsImZvcm1hdFJlZ0V4cCIsIm9iamVjdHMiLCJzdHJpbmdpZnkiLCJpc051bGwiLCJkZXByZWNhdGUiLCJub0RlcHJlY2F0aW9uIiwiZGVwcmVjYXRlZCIsInRocm93RGVwcmVjYXRpb24iLCJ0cmFjZURlcHJlY2F0aW9uIiwiZGVidWdzIiwiZGVidWdFbnZSZWdleCIsIk5PREVfREVCVUciLCJkZWJ1Z0VudiIsInRvVXBwZXJDYXNlIiwiZGVidWdsb2ciLCJwaWQiLCJvcHRzIiwic2VlbiIsInN0eWxpemUiLCJzdHlsaXplTm9Db2xvciIsImNvbG9ycyIsImlzQm9vbGVhbiIsIl9leHRlbmQiLCJpc1VuZGVmaW5lZCIsInN0eWxpemVXaXRoQ29sb3IiLCJmb3JtYXRWYWx1ZSIsInN0eWxlcyIsInN0eWxlVHlwZSIsInN0eWxlIiwiYXJyYXlUb0hhc2giLCJoYXNoIiwiaWR4IiwicmV0IiwicHJpbWl0aXZlIiwiZm9ybWF0UHJpbWl0aXZlIiwidmlzaWJsZUtleXMiLCJpc0Vycm9yIiwiZm9ybWF0RXJyb3IiLCJicmFjZXMiLCJ0b1VUQ1N0cmluZyIsIm91dHB1dCIsImZvcm1hdEFycmF5IiwiZm9ybWF0UHJvcGVydHkiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsInNpbXBsZSIsImlzTnVtYmVyIiwibCIsIm51bUxpbmVzRXN0IiwicmVkdWNlIiwicHJldiIsImFyIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpc1N5bWJvbCIsImlzUHJpbWl0aXZlIiwicGFkIiwibW9udGhzIiwidGltZXN0YW1wIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldERhdGUiLCJnZXRNb250aCIsIm9yaWdpbiIsInByb3AiLCJrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wiLCJwcm9taXNpZnkiLCJvcmlnaW5hbCIsInByb21pc2VSZXNvbHZlIiwicHJvbWlzZVJlamVjdCIsInByb21pc2UiLCJyZWplY3QiLCJjYWxsYmFja2lmeU9uUmVqZWN0ZWQiLCJjYiIsIm5ld1JlYXNvbiIsImNhbGxiYWNraWZ5IiwiY2FsbGJhY2tpZmllZCIsIm1heWJlQ2IiLCJyZWoiLCJfX2NyZWF0ZUJpbmRpbmciLCJtIiwiazIiLCJfX2VzTW9kdWxlIiwiX19leHBvcnRTdGFyIiwiY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24iLCJCcm93c2VyTWVzc2FnZVdyaXRlciIsIkJyb3dzZXJNZXNzYWdlUmVhZGVyIiwicmlsXzEiLCJkZWZhdWx0IiwiaW5zdGFsbCIsImFwaV8xIiwiQWJzdHJhY3RNZXNzYWdlUmVhZGVyIiwibGlzdGVuIiwiY2FsbGJhY2siLCJfb25EYXRhIiwiZXZlbnQiLCJwb3J0IiwiRW1pdHRlciIsIl9tZXNzYWdlTGlzdGVuZXIiLCJmaXJlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImZpcmVFcnJvciIsIm9ubWVzc2FnZSIsIkFic3RyYWN0TWVzc2FnZVdyaXRlciIsIndyaXRlIiwicG9zdE1lc3NhZ2UiLCJoYW5kbGVFcnJvciIsImVycm9yQ291bnQiLCJyZWFkZXIiLCJ3cml0ZXIiLCJsb2dnZXIiLCJOdWxsTG9nZ2VyIiwiQ29ubmVjdGlvblN0cmF0ZWd5IiwiY29ubmVjdGlvblN0cmF0ZWd5IiwiTWVzc2FnZUJ1ZmZlciIsIkFic3RyYWN0TWVzc2FnZUJ1ZmZlciIsImVtcHR5QnVmZmVyIiwiZnJvbVN0cmluZyIsIl9lbmNvZGluZyIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiZW5jb2RpbmciLCJhc2NpaURlY29kZXIiLCJkZWNvZGUiLCJUZXh0RGVjb2RlciIsImFzTmF0aXZlIiwiYWxsb2NOYXRpdmUiLCJSZWFkYWJsZVN0cmVhbVdyYXBwZXIiLCJvbkNsb3NlIiwibGlzdGVuZXIiLCJzb2NrZXQiLCJEaXNwb3NhYmxlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uRXJyb3IiLCJvbkVuZCIsIm9uRGF0YSIsImJsb2IiLCJhcnJheUJ1ZmZlciIsIlJBTCIsIldyaXRhYmxlU3RyZWFtV3JhcHBlciIsInNlbmQiLCJjbG9zZSIsIl90ZXh0RW5jb2RlciIsIl9yaWwiLCJmcmVlemUiLCJtZXNzYWdlQnVmZmVyIiwiYXBwbGljYXRpb25Kc29uIiwiZW5jb2RlciIsImNoYXJzZXQiLCJwYXJzZSIsInN0cmVhbSIsImFzUmVhZGFibGVTdHJlYW0iLCJhc1dyaXRhYmxlU3RyZWFtIiwidGltZXIiLCJtcyIsImhhbmRsZSIsInNldEltbWVkaWF0ZSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIlJJTCIsIlByb2dyZXNzVHlwZSIsIlByb2dyZXNzVG9rZW4iLCJDb25uZWN0aW9uT3B0aW9ucyIsIldyaXRlYWJsZVN0cmVhbU1lc3NhZ2VXcml0ZXIiLCJNZXNzYWdlV3JpdGVyIiwiUmVhZGFibGVTdHJlYW1NZXNzYWdlUmVhZGVyIiwiTWVzc2FnZVJlYWRlciIsIlNoYXJlZEFycmF5UmVjZWl2ZXJTdHJhdGVneSIsIlNoYXJlZEFycmF5U2VuZGVyU3RyYXRlZ3kiLCJDYW5jZWxsYXRpb25Ub2tlbiIsIkNhbmNlbGxhdGlvblRva2VuU291cmNlIiwiRXZlbnQiLCJMUlVDYWNoZSIsIlRvdWNoIiwiTGlua2VkTWFwIiwiUGFyYW1ldGVyU3RydWN0dXJlcyIsIk5vdGlmaWNhdGlvblR5cGU5IiwiTm90aWZpY2F0aW9uVHlwZTgiLCJOb3RpZmljYXRpb25UeXBlNyIsIk5vdGlmaWNhdGlvblR5cGU2IiwiTm90aWZpY2F0aW9uVHlwZTUiLCJOb3RpZmljYXRpb25UeXBlNCIsIk5vdGlmaWNhdGlvblR5cGUzIiwiTm90aWZpY2F0aW9uVHlwZTIiLCJOb3RpZmljYXRpb25UeXBlMSIsIk5vdGlmaWNhdGlvblR5cGUwIiwiTm90aWZpY2F0aW9uVHlwZSIsIkVycm9yQ29kZXMiLCJSZXNwb25zZUVycm9yIiwiUmVxdWVzdFR5cGU5IiwiUmVxdWVzdFR5cGU4IiwiUmVxdWVzdFR5cGU3IiwiUmVxdWVzdFR5cGU2IiwiUmVxdWVzdFR5cGU1IiwiUmVxdWVzdFR5cGU0IiwiUmVxdWVzdFR5cGUzIiwiUmVxdWVzdFR5cGUyIiwiUmVxdWVzdFR5cGUxIiwiUmVxdWVzdFR5cGUwIiwiUmVxdWVzdFR5cGUiLCJNZXNzYWdlIiwiTWVzc2FnZVN0cmF0ZWd5IiwiQ2FuY2VsbGF0aW9uU3RyYXRlZ3kiLCJDYW5jZWxsYXRpb25TZW5kZXJTdHJhdGVneSIsIkNhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kiLCJDb25uZWN0aW9uRXJyb3IiLCJDb25uZWN0aW9uRXJyb3JzIiwiTG9nVHJhY2VOb3RpZmljYXRpb24iLCJTZXRUcmFjZU5vdGlmaWNhdGlvbiIsIlRyYWNlRm9ybWF0IiwiVHJhY2VWYWx1ZXMiLCJUcmFjZSIsIm1lc3NhZ2VzXzEiLCJsaW5rZWRNYXBfMSIsImRpc3Bvc2FibGVfMSIsImV2ZW50c18xIiwiY2FuY2VsbGF0aW9uXzEiLCJzaGFyZWRBcnJheUNhbmNlbGxhdGlvbl8xIiwibWVzc2FnZVJlYWRlcl8xIiwibWVzc2FnZVdyaXRlcl8xIiwibWVzc2FnZUJ1ZmZlcl8xIiwiY29ubmVjdGlvbl8xIiwicmFsXzEiLCJJcyIsIk5vbmUiLCJpc0NhbmNlbGxhdGlvblJlcXVlc3RlZCIsIm9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwiQ2FuY2VsbGVkIiwiY2FuZGlkYXRlIiwiYm9vbGVhbiIsInNob3J0Y3V0RXZlbnQiLCJNdXRhYmxlVG9rZW4iLCJfaXNDYW5jZWxsZWQiLCJfZW1pdHRlciIsIl90b2tlbiIsIlJlcXVlc3RDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5IiwiSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5IiwiQ2FuY2VsTm90aWZpY2F0aW9uIiwiUHJvZ3Jlc3NOb3RpZmljYXRpb24iLCJTdGFyUmVxdWVzdEhhbmRsZXIiLCJPZmYiLCJNZXNzYWdlcyIsIkNvbXBhY3QiLCJWZXJib3NlIiwidG9Mb3dlckNhc2UiLCJUZXh0IiwiY2FuY2VsVW5kaXNwYXRjaGVkIiwia2luZCIsImNyZWF0ZUNhbmNlbGxhdGlvblRva2VuU291cmNlIiwic2VuZENhbmNlbGxhdGlvbiIsImNvbm4iLCJpZCIsInNlbmROb3RpZmljYXRpb24iLCJjbGVhbnVwIiwic2VuZGVyIiwiaGFuZGxlTWVzc2FnZSIsImNhbmNlbGxhdGlvblN0cmF0ZWd5IiwibWVzc2FnZVN0cmF0ZWd5IiwiQ29ubmVjdGlvblN0YXRlIiwibWVzc2FnZVJlYWRlciIsIm1lc3NhZ2VXcml0ZXIiLCJfbG9nZ2VyIiwic2VxdWVuY2VOdW1iZXIiLCJub3RpZmljYXRpb25TZXF1ZW5jZU51bWJlciIsInVua25vd25SZXNwb25zZVNlcXVlbmNlTnVtYmVyIiwic3RhclJlcXVlc3RIYW5kbGVyIiwicmVxdWVzdEhhbmRsZXJzIiwic3Rhck5vdGlmaWNhdGlvbkhhbmRsZXIiLCJub3RpZmljYXRpb25IYW5kbGVycyIsInByb2dyZXNzSGFuZGxlcnMiLCJtZXNzYWdlUXVldWUiLCJyZXNwb25zZVByb21pc2VzIiwia25vd25DYW5jZWxlZFJlcXVlc3RzIiwicmVxdWVzdFRva2VucyIsInRyYWNlRm9ybWF0IiwidHJhY2VyIiwiTmV3IiwiZXJyb3JFbWl0dGVyIiwiY2xvc2VFbWl0dGVyIiwidW5oYW5kbGVkTm90aWZpY2F0aW9uRW1pdHRlciIsInVuaGFuZGxlZFByb2dyZXNzRW1pdHRlciIsImRpc3Bvc2VFbWl0dGVyIiwiY3JlYXRlUmVxdWVzdFF1ZXVlS2V5IiwiY3JlYXRlUmVzcG9uc2VRdWV1ZUtleSIsImNyZWF0ZU5vdGlmaWNhdGlvblF1ZXVlS2V5IiwiYWRkTWVzc2FnZVRvUXVldWUiLCJpc1JlcXVlc3QiLCJpc1Jlc3BvbnNlIiwiX21lc3NhZ2UiLCJpc0xpc3RlbmluZyIsIkxpc3RlbmluZyIsImlzQ2xvc2VkIiwiQ2xvc2VkIiwiaXNEaXNwb3NlZCIsIkRpc3Bvc2VkIiwiY2xvc2VIYW5kbGVyIiwicmVhZEVycm9ySGFuZGxlciIsIndyaXRlRXJyb3JIYW5kbGVyIiwidHJpZ2dlck1lc3NhZ2VRdWV1ZSIsInByb2Nlc3NNZXNzYWdlUXVldWUiLCJoYW5kbGVSZXF1ZXN0IiwiaXNOb3RpZmljYXRpb24iLCJoYW5kbGVOb3RpZmljYXRpb24iLCJoYW5kbGVSZXNwb25zZSIsImhhbmRsZUludmFsaWRNZXNzYWdlIiwiY2FuY2VsSWQiLCJwYXJhbXMiLCJ0b0NhbmNlbCIsInN0cmF0ZWd5IiwicmVzcG9uc2UiLCJ0cmFjZVNlbmRpbmdSZXNwb25zZSIsImNhbmNlbGxhdGlvblRva2VuIiwidHJhY2VSZWNlaXZlZE5vdGlmaWNhdGlvbiIsInJlcXVlc3RNZXNzYWdlIiwicmVwbHkiLCJyZXN1bHRPckVycm9yIiwic3RhcnRUaW1lIiwianNvbnJwYyIsInRvSnNvbiIsInJlcGx5RXJyb3IiLCJyZXBseVN1Y2Nlc3MiLCJ0cmFjZVJlY2VpdmVkUmVxdWVzdCIsImVsZW1lbnQiLCJyZXF1ZXN0SGFuZGxlciIsImhhbmRsZXIiLCJ0b2tlbktleSIsImNhbmNlbGxhdGlvblNvdXJjZSIsImhhbmRsZXJSZXN1bHQiLCJudW1iZXJPZlBhcmFtcyIsIkludmFsaWRQYXJhbXMiLCJwYXJhbWV0ZXJTdHJ1Y3R1cmVzIiwiYnlOYW1lIiwiYnlQb3NpdGlvbiIsIkludGVybmFsRXJyb3IiLCJNZXRob2ROb3RGb3VuZCIsInJlc3BvbnNlTWVzc2FnZSIsInJlc3BvbnNlUHJvbWlzZSIsInRyYWNlUmVjZWl2ZWRSZXNwb25zZSIsIm5vdGlmaWNhdGlvbkhhbmRsZXIiLCJyZXNwb25zZUhhbmRsZXIiLCJzdHJpbmdpZnlUcmFjZSIsInRyYWNlU2VuZGluZ1JlcXVlc3QiLCJsb2dMU1BNZXNzYWdlIiwidHJhY2VTZW5kaW5nTm90aWZpY2F0aW9uIiwidGltZXJTdGFydCIsImxzcE1lc3NhZ2UiLCJpc0xTUE1lc3NhZ2UiLCJ0aHJvd0lmQ2xvc2VkT3JEaXNwb3NlZCIsInRocm93SWZMaXN0ZW5pbmciLCJBbHJlYWR5TGlzdGVuaW5nIiwidGhyb3dJZk5vdExpc3RlbmluZyIsInVuZGVmaW5lZFRvTnVsbCIsInBhcmFtIiwibnVsbFRvVW5kZWZpbmVkIiwiaXNOYW1lZFBhcmFtIiwiY29tcHV0ZVNpbmdsZVBhcmFtIiwiYXV0byIsImNvbXB1dGVNZXNzYWdlUGFyYW1zIiwiY29ubmVjdGlvbiIsIm1lc3NhZ2VQYXJhbXMiLCJwYXJhbVN0YXJ0IiwicGFyYW1FbmQiLCJub3RpZmljYXRpb25NZXNzYWdlIiwib25Ob3RpZmljYXRpb24iLCJvblByb2dyZXNzIiwiX3R5cGUiLCJzZW5kUHJvZ3Jlc3MiLCJvblVuaGFuZGxlZFByb2dyZXNzIiwiZGlzcG9zYWJsZSIsImVuYWJsZUNhbmNlbGxhdGlvbiIsInJlc29sdmVXaXRoQ2xlYW51cCIsInIiLCJyZWplY3RXaXRoQ2xlYW51cCIsIk1lc3NhZ2VXcml0ZUVycm9yIiwib25SZXF1ZXN0IiwiaGFzUGVuZGluZ1Jlc3BvbnNlIiwiX3ZhbHVlIiwiX3RyYWNlciIsInNlbmROb3RpZmljYXRpb25PclRyYWNlT3B0aW9ucyIsIl9zZW5kTm90aWZpY2F0aW9uIiwiX3RyYWNlRm9ybWF0Iiwib25VbmhhbmRsZWROb3RpZmljYXRpb24iLCJvbkRpc3Bvc2UiLCJQZW5kaW5nUmVzcG9uc2VSZWplY3RlZCIsInZhbHVlcyIsInZlcmJvc2UiLCJfZGlzcG9zYWJsZSIsIkNhbGxiYWNrTGlzdCIsImJ1Y2tldCIsIl9jYWxsYmFja3MiLCJfY29udGV4dHMiLCJyZW1vdmUiLCJmb3VuZENhbGxiYWNrV2l0aERpZmZlcmVudENvbnRleHQiLCJpbnZva2UiLCJjYWxsYmFja3MiLCJjb250ZXh0cyIsImlzRW1wdHkiLCJfZXZlbnQiLCJ0aGlzQXJncyIsImRpc3Bvc2FibGVzIiwiX29wdGlvbnMiLCJvbkZpcnN0TGlzdGVuZXJBZGQiLCJfbm9vcCIsIm9uTGFzdExpc3RlbmVyUmVtb3ZlIiwic3RyaW5nQXJyYXkiLCJldmVyeSIsImVsZW0iLCJfYSIsIkZpcnN0IiwiQXNPbGQiLCJMYXN0IiwiQXNOZXciLCJjbGVhciIsIl9tYXAiLCJfaGVhZCIsIl90YWlsIiwiX3NpemUiLCJfc3RhdGUiLCJ0b3VjaCIsInByZXZpb3VzIiwiYWRkSXRlbUxhc3QiLCJhZGRJdGVtRmlyc3QiLCJyZW1vdmVJdGVtIiwiY2FsbGJhY2tmbiIsInRyaW1PbGQiLCJuZXdTaXplIiwiY3VycmVudFNpemUiLCJ0b0pTT04iLCJmcm9tSlNPTiIsIl9saW1pdCIsImNoZWNrVHJpbSIsInJhdGlvIiwiX3JhdGlvIiwicGVlayIsInJvdW5kIiwiQ1IiLCJMRiIsIkNSTEYiLCJhcHBlbmQiLCJjaHVuayIsInRvQXBwZW5kIiwiX2NodW5rcyIsIl90b3RhbExlbmd0aCIsInRyeVJlYWRIZWFkZXJzIiwibG93ZXJDYXNlS2V5cyIsImNodW5rSW5kZXgiLCJjaHVua0J5dGVzUmVhZCIsIl9yZWFkIiwiaGVhZGVycyIsImhlYWRlciIsInRyaW0iLCJ0cnlSZWFkQm9keSIsIm51bWJlck9mQnl0ZXMiLCJieXRlQ291bnQiLCJyZXN1bHRPZmZzZXQiLCJjaHVua1BhcnQiLCJzZW1hcGhvcmVfMSIsIm9uUGFydGlhbE1lc3NhZ2UiLCJhc0Vycm9yIiwiZmlyZUNsb3NlIiwicGFydGlhbE1lc3NhZ2VFbWl0dGVyIiwiZmlyZVBhcnRpYWxNZXNzYWdlIiwiUmVzb2x2ZWRNZXNzYWdlUmVhZGVyT3B0aW9ucyIsImZyb21PcHRpb25zIiwiY29udGVudERlY29kZXIiLCJjb250ZW50RGVjb2RlcnMiLCJjb250ZW50VHlwZURlY29kZXIiLCJjb250ZW50VHlwZURlY29kZXJzIiwicGFydGlhbE1lc3NhZ2VUaW1lb3V0IiwiX3BhcnRpYWxNZXNzYWdlVGltZW91dCIsIm5leHRNZXNzYWdlTGVuZ3RoIiwibWVzc2FnZVRva2VuIiwicGFydGlhbE1lc3NhZ2VUaW1lciIsInJlYWRhYmxlIiwiY29udGVudExlbmd0aCIsImJvZHkiLCJzZXRQYXJ0aWFsTWVzc2FnZVRpbWVyIiwiY2xlYXJQYXJ0aWFsTWVzc2FnZVRpbWVyIiwicmVhZFNlbWFwaG9yZSIsImxvY2siLCJieXRlcyIsIndhaXRpbmdUaW1lIiwiU2VtYXBob3JlIiwiQ29udGVudExlbmd0aCIsIlJlc29sdmVkTWVzc2FnZVdyaXRlck9wdGlvbnMiLCJjb250ZW50VHlwZUVuY29kZXIiLCJjb250ZW50RW5jb2RlciIsIndyaXRlU2VtYXBob3JlIiwicGF5bG9hZCIsImRvV3JpdGUiLCJBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUiLCJJbnZhbGlkUmVxdWVzdCIsImpzb25ycGNSZXNlcnZlZEVycm9yUmFuZ2VTdGFydCIsInNlcnZlckVycm9yU3RhcnQiLCJNZXNzYWdlUmVhZEVycm9yIiwiQ29ubmVjdGlvbkluYWN0aXZlIiwiU2VydmVyTm90SW5pdGlhbGl6ZWQiLCJVbmtub3duRXJyb3JDb2RlIiwianNvbnJwY1Jlc2VydmVkRXJyb3JSYW5nZUVuZCIsInNlcnZlckVycm9yRW5kIiwiX3BhcmFtZXRlclN0cnVjdHVyZXMiLCJfcmFsIiwicmFsIiwidGh1bmsiLCJfd2FpdGluZyIsInJ1bk5leHQiLCJhY3RpdmUiLCJfYWN0aXZlIiwiX2NhcGFjaXR5IiwiZG9SdW5OZXh0IiwiY2FwYWNpdHkiLCJDYW5jZWxsYXRpb25TdGF0ZSIsIkNvbnRpbnVlIiwicmVxdWVzdCIsImJ1ZmZlcnMiLCIkY2FuY2VsbGF0aW9uRGF0YSIsIl9jb25uIiwic3RvcmUiLCJTaGFyZWRBcnJheUJ1ZmZlckNhbmNlbGxhdGlvblRva2VuIiwibG9hZCIsIlNoYXJlZEFycmF5QnVmZmVyQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UiLCJjcmVhdGVQcm90b2NvbENvbm5lY3Rpb24iLCJicm93c2VyXzEiLCJMU1BFcnJvckNvZGVzIiwibHNwUmVzZXJ2ZWRFcnJvclJhbmdlU3RhcnQiLCJSZXF1ZXN0RmFpbGVkIiwiU2VydmVyQ2FuY2VsbGVkIiwiQ29udGVudE1vZGlmaWVkIiwiUmVxdWVzdENhbmNlbGxlZCIsImxzcFJlc2VydmVkRXJyb3JSYW5nZUVuZCIsInZzY29kZV9qc29ucnBjXzEiLCJQcm90b2NvbE5vdGlmaWNhdGlvblR5cGUiLCJQcm90b2NvbE5vdGlmaWNhdGlvblR5cGUwIiwiUHJvdG9jb2xSZXF1ZXN0VHlwZSIsIlByb3RvY29sUmVxdWVzdFR5cGUwIiwiUmVnaXN0cmF0aW9uVHlwZSIsIk1lc3NhZ2VEaXJlY3Rpb24iLCJDYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3QiLCJDYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3QiLCJDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QiLCJtZXNzYWdlRGlyZWN0aW9uIiwiY2xpZW50VG9TZXJ2ZXIiLCJDb2xvclByZXNlbnRhdGlvblJlcXVlc3QiLCJEb2N1bWVudENvbG9yUmVxdWVzdCIsIkNvbmZpZ3VyYXRpb25SZXF1ZXN0Iiwic2VydmVyVG9DbGllbnQiLCJEZWNsYXJhdGlvblJlcXVlc3QiLCJfX25vRHluYW1pY0ltcG9ydCIsIkRpYWdub3N0aWNSZWZyZXNoUmVxdWVzdCIsIldvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0IiwiRG9jdW1lbnREaWFnbm9zdGljUmVxdWVzdCIsIkRvY3VtZW50RGlhZ25vc3RpY1JlcG9ydEtpbmQiLCJEaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YSIsInJldHJpZ2dlclJlcXVlc3QiLCJGdWxsIiwiVW5jaGFuZ2VkIiwicGFydGlhbFJlc3VsdCIsIldpbGxEZWxldGVGaWxlc1JlcXVlc3QiLCJEaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbiIsIkRpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uIiwiV2lsbFJlbmFtZUZpbGVzUmVxdWVzdCIsIkRpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uIiwiV2lsbENyZWF0ZUZpbGVzUmVxdWVzdCIsIkZpbGVPcGVyYXRpb25QYXR0ZXJuS2luZCIsImZvbGRlciIsIkZvbGRpbmdSYW5nZVJlZnJlc2hSZXF1ZXN0IiwiRm9sZGluZ1JhbmdlUmVxdWVzdCIsIkltcGxlbWVudGF0aW9uUmVxdWVzdCIsIklubGF5SGludFJlZnJlc2hSZXF1ZXN0IiwiSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QiLCJJbmxheUhpbnRSZXF1ZXN0IiwiSW5saW5lQ29tcGxldGlvblJlcXVlc3QiLCJJbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0IiwiSW5saW5lVmFsdWVSZXF1ZXN0IiwiV29ya3NwYWNlU3ltYm9sUmVxdWVzdCIsIkNvZGVBY3Rpb25SZXNvbHZlUmVxdWVzdCIsIkNvZGVBY3Rpb25SZXF1ZXN0IiwiRG9jdW1lbnRTeW1ib2xSZXF1ZXN0IiwiRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0IiwiUmVmZXJlbmNlc1JlcXVlc3QiLCJEZWZpbml0aW9uUmVxdWVzdCIsIlNpZ25hdHVyZUhlbHBSZXF1ZXN0IiwiU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kIiwiSG92ZXJSZXF1ZXN0IiwiQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0IiwiQ29tcGxldGlvblJlcXVlc3QiLCJDb21wbGV0aW9uVHJpZ2dlcktpbmQiLCJQdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb24iLCJXYXRjaEtpbmQiLCJSZWxhdGl2ZVBhdHRlcm4iLCJGaWxlQ2hhbmdlVHlwZSIsIkRpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbiIsIldpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdCIsIldpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uIiwiVGV4dERvY3VtZW50U2F2ZVJlYXNvbiIsIkRpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24iLCJEaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiIsIkRpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiIsIlRleHREb2N1bWVudENvbnRlbnRDaGFuZ2VFdmVudCIsIkRpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24iLCJUZXh0RG9jdW1lbnRTeW5jS2luZCIsIlRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uIiwiTG9nTWVzc2FnZU5vdGlmaWNhdGlvbiIsIlNob3dNZXNzYWdlUmVxdWVzdCIsIlNob3dNZXNzYWdlTm90aWZpY2F0aW9uIiwiTWVzc2FnZVR5cGUiLCJEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uIiwiRXhpdE5vdGlmaWNhdGlvbiIsIlNodXRkb3duUmVxdWVzdCIsIkluaXRpYWxpemVkTm90aWZpY2F0aW9uIiwiSW5pdGlhbGl6ZUVycm9yQ29kZXMiLCJJbml0aWFsaXplUmVxdWVzdCIsIldvcmtEb25lUHJvZ3Jlc3NPcHRpb25zIiwiVGV4dERvY3VtZW50UmVnaXN0cmF0aW9uT3B0aW9ucyIsIlN0YXRpY1JlZ2lzdHJhdGlvbk9wdGlvbnMiLCJQb3NpdGlvbkVuY29kaW5nS2luZCIsIkZhaWx1cmVIYW5kbGluZ0tpbmQiLCJSZXNvdXJjZU9wZXJhdGlvbktpbmQiLCJVbnJlZ2lzdHJhdGlvblJlcXVlc3QiLCJSZWdpc3RyYXRpb25SZXF1ZXN0IiwiRG9jdW1lbnRTZWxlY3RvciIsIk5vdGVib29rQ2VsbFRleHREb2N1bWVudEZpbHRlciIsIk5vdGVib29rRG9jdW1lbnRGaWx0ZXIiLCJUZXh0RG9jdW1lbnRGaWx0ZXIiLCJNb25pa2VyUmVxdWVzdCIsIk1vbmlrZXJLaW5kIiwiVW5pcXVlbmVzc0xldmVsIiwiTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdCIsIlNob3dEb2N1bWVudFJlcXVlc3QiLCJTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUiLCJTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0IiwiU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QiLCJTZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdCIsIlNlbWFudGljVG9rZW5zUmVxdWVzdCIsIlRva2VuRm9ybWF0IiwiV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbiIsIldvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0IiwiV29ya0RvbmVQcm9ncmVzcyIsIlNlbGVjdGlvblJhbmdlUmVxdWVzdCIsIkRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24iLCJXb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdCIsIlR5cGVEZWZpbml0aW9uUmVxdWVzdCIsIkFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QiLCJFeGVjdXRlQ29tbWFuZFJlcXVlc3QiLCJQcmVwYXJlUmVuYW1lUmVxdWVzdCIsIlJlbmFtZVJlcXVlc3QiLCJQcmVwYXJlU3VwcG9ydERlZmF1bHRCZWhhdmlvciIsIkRvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QiLCJEb2N1bWVudFJhbmdlc0Zvcm1hdHRpbmdSZXF1ZXN0IiwiRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0IiwiRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdCIsIkRvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0IiwiRG9jdW1lbnRMaW5rUmVxdWVzdCIsIkNvZGVMZW5zUmVmcmVzaFJlcXVlc3QiLCJDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0IiwiQ29kZUxlbnNSZXF1ZXN0IiwiV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QiLCJEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24iLCJEaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiIsIkRpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24iLCJOb3RlYm9va0NlbGxBcnJheUNoYW5nZSIsIkRpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uIiwiTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlIiwiTm90ZWJvb2tEb2N1bWVudCIsIk5vdGVib29rQ2VsbCIsIkV4ZWN1dGlvblN1bW1hcnkiLCJOb3RlYm9va0NlbGxLaW5kIiwiVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0IiwiVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdCIsIlR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCIsInZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xIiwicHJvdG9jb2xfaW1wbGVtZW50YXRpb25fMSIsInByb3RvY29sX3R5cGVEZWZpbml0aW9uXzEiLCJwcm90b2NvbF93b3Jrc3BhY2VGb2xkZXJfMSIsInByb3RvY29sX2NvbmZpZ3VyYXRpb25fMSIsInByb3RvY29sX2NvbG9yUHJvdmlkZXJfMSIsInByb3RvY29sX2ZvbGRpbmdSYW5nZV8xIiwicHJvdG9jb2xfZGVjbGFyYXRpb25fMSIsInByb3RvY29sX3NlbGVjdGlvblJhbmdlXzEiLCJwcm90b2NvbF9wcm9ncmVzc18xIiwicHJvdG9jb2xfY2FsbEhpZXJhcmNoeV8xIiwicHJvdG9jb2xfc2VtYW50aWNUb2tlbnNfMSIsInByb3RvY29sX3Nob3dEb2N1bWVudF8xIiwicHJvdG9jb2xfbGlua2VkRWRpdGluZ1JhbmdlXzEiLCJwcm90b2NvbF9maWxlT3BlcmF0aW9uc18xIiwicHJvdG9jb2xfbW9uaWtlcl8xIiwicHJvdG9jb2xfdHlwZUhpZXJhcmNoeV8xIiwicHJvdG9jb2xfaW5saW5lVmFsdWVfMSIsInByb3RvY29sX2lubGF5SGludF8xIiwicHJvdG9jb2xfZGlhZ25vc3RpY18xIiwicHJvdG9jb2xfbm90ZWJvb2tfMSIsInByb3RvY29sX2lubGluZUNvbXBsZXRpb25fMSIsImxhbmd1YWdlIiwic2NoZW1lIiwicGF0dGVybiIsIm9iamVjdExpdGVyYWwiLCJub3RlYm9va1R5cGUiLCJub3RlYm9vayIsIkNyZWF0ZSIsIlJlbmFtZSIsIkRlbGV0ZSIsIkFib3J0IiwiVHJhbnNhY3Rpb25hbCIsIlRleHRPbmx5VHJhbnNhY3Rpb25hbCIsIlVuZG8iLCJVVEY4IiwiVVRGMTYiLCJVVEYzMiIsImhhc0lkIiwiZG9jdW1lbnRTZWxlY3RvciIsIndvcmtEb25lUHJvZ3Jlc3MiLCJoYXNXb3JrRG9uZVByb2dyZXNzIiwidW5rbm93blByb3RvY29sVmVyc2lvbiIsIldhcm5pbmciLCJJbmZvIiwiTG9nIiwiRGVidWciLCJJbmNyZW1lbnRhbCIsImlzSW5jcmVtZW50YWwiLCJyYW5nZUxlbmd0aCIsImlzRnVsbCIsIk1hbnVhbCIsIkFmdGVyRGVsYXkiLCJGb2N1c091dCIsIkNyZWF0ZWQiLCJDaGFuZ2VkIiwiRGVsZXRlZCIsImJhc2VVcmkiLCJXb3Jrc3BhY2VGb2xkZXIiLCJDaGFuZ2UiLCJJbnZva2VkIiwiVHJpZ2dlckNoYXJhY3RlciIsIlRyaWdnZXJGb3JJbmNvbXBsZXRlQ29tcGxldGlvbnMiLCJDb250ZW50Q2hhbmdlIiwiSWRlbnRpZmllciIsInByb2plY3QiLCJncm91cCIsImdsb2JhbCIsIiRpbXBvcnQiLCIkZXhwb3J0IiwibG9jYWwiLCJNYXJrdXAiLCJDb2RlIiwiZXhlY3V0aW9uT3JkZXIiLCJzdWNjZXNzIiwidWludGVnZXIiLCJlcXVhbHMiLCJvbmUiLCJEb2N1bWVudFVyaSIsIm1ldGFkYXRhIiwiZGlmZiIsInR3byIsImV4ZWN1dGlvblN1bW1hcnkiLCJlcXVhbHNNZXRhZGF0YSIsIm9uZUFycmF5Iiwib3RoZXJBcnJheSIsIm9uZUtleXMiLCJvdGhlcktleXMiLCJjZWxscyIsImludGVnZXIiLCJ0eXBlZEFycmF5IiwicmVnaXN0cmF0aW9uTWV0aG9kIiwiZGVsZXRlQ291bnQiLCJSZWxhdGl2ZSIsImNoZWNrIiwiYXZhaWxhYmxlVHlwZWRBcnJheXMiLCJnbG9iYWxUaGlzIiwidHlwZWRBcnJheXMiLCIkc2xpY2UiLCJjYWNoZSIsInByb3RvIiwic3VwZXJQcm90byIsInRyeVR5cGVkQXJyYXlzIiwidHJ5QWxsVHlwZWRBcnJheXMiLCJmb3VuZCIsImdldHRlciIsInRyeVNsaWNlcyIsInRyeUFsbFNsaWNlcyIsInRhZyIsInBvc3NpYmxlTmFtZXMiLCJvdXQiLCJfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXyIsIlRleHREb2N1bWVudCIsIkZ1bGxUZXh0RG9jdW1lbnQiLCJfdXJpIiwiX2xhbmd1YWdlSWQiLCJfdmVyc2lvbiIsIm9mZnNldEF0IiwiX2NvbnRlbnQiLCJjaGFuZ2VzIiwiY2hhbmdlIiwiZ2V0V2VsbGZvcm1lZFJhbmdlIiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJzdGFydExpbmUiLCJlbmRMaW5lIiwibGluZU9mZnNldHMiLCJfbGluZU9mZnNldHMiLCJhZGRlZExpbmVPZmZzZXRzIiwiY29tcHV0ZUxpbmVPZmZzZXRzIiwiZ2V0TGluZU9mZnNldHMiLCJwb3NpdGlvbkF0IiwibG93IiwiaGlnaCIsImNoYXJhY3RlciIsIm1pZCIsImVuc3VyZUJlZm9yZUVPTCIsImxpbmVPZmZzZXQiLCJuZXh0TGluZU9mZnNldCIsImlzRU9MIiwibGluZUNvdW50IiwiY29udGVudCIsImFwcGx5RWRpdHMiLCJlZGl0cyIsInNvcnRlZEVkaXRzIiwibWVyZ2VTb3J0IiwiZ2V0V2VsbGZvcm1lZEVkaXQiLCJsYXN0TW9kaWZpZWRPZmZzZXQiLCJzcGFucyIsIm5ld1RleHQiLCJsZWZ0IiwicmlnaHQiLCJsZWZ0SWR4IiwicmlnaHRJZHgiLCJpc0F0TGluZVN0YXJ0IiwidGV4dE9mZnNldCIsImNoIiwiY2hhciIsInRleHRFZGl0IiwiQW5ub3RhdGVkVGV4dEVkaXQiLCJDaGFuZ2VBbm5vdGF0aW9uIiwiQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIiLCJDb2RlQWN0aW9uIiwiQ29kZUFjdGlvbkNvbnRleHQiLCJDb2RlQWN0aW9uS2luZCIsIkNvZGVBY3Rpb25UcmlnZ2VyS2luZCIsIkNvZGVEZXNjcmlwdGlvbiIsIkNvZGVMZW5zIiwiQ29sb3IiLCJDb2xvckluZm9ybWF0aW9uIiwiQ29sb3JQcmVzZW50YXRpb24iLCJDb21tYW5kIiwiQ29tcGxldGlvbkl0ZW0iLCJDb21wbGV0aW9uSXRlbUtpbmQiLCJDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlscyIsIkNvbXBsZXRpb25JdGVtVGFnIiwiQ29tcGxldGlvbkxpc3QiLCJDcmVhdGVGaWxlIiwiRGVsZXRlRmlsZSIsIkRpYWdub3N0aWMiLCJEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uIiwiRGlhZ25vc3RpY1NldmVyaXR5IiwiRG9jdW1lbnRIaWdobGlnaHQiLCJEb2N1bWVudEhpZ2hsaWdodEtpbmQiLCJEb2N1bWVudExpbmsiLCJEb2N1bWVudFN5bWJvbCIsIkVPTCIsIkZvbGRpbmdSYW5nZSIsIkZvbGRpbmdSYW5nZUtpbmQiLCJGb3JtYXR0aW5nT3B0aW9ucyIsIkhvdmVyIiwiSW5sYXlIaW50IiwiSW5sYXlIaW50S2luZCIsIklubGF5SGludExhYmVsUGFydCIsIklubGluZUNvbXBsZXRpb25Db250ZXh0IiwiSW5saW5lQ29tcGxldGlvbkl0ZW0iLCJJbmxpbmVDb21wbGV0aW9uTGlzdCIsIklubGluZUNvbXBsZXRpb25UcmlnZ2VyS2luZCIsIklubGluZVZhbHVlQ29udGV4dCIsIklubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uIiwiSW5saW5lVmFsdWVUZXh0IiwiSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCIsIkluc2VydFJlcGxhY2VFZGl0IiwiSW5zZXJ0VGV4dEZvcm1hdCIsIkluc2VydFRleHRNb2RlIiwiTG9jYXRpb24iLCJMb2NhdGlvbkxpbmsiLCJNYXJrZWRTdHJpbmciLCJNYXJrdXBDb250ZW50IiwiTWFya3VwS2luZCIsIk9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciIsIlBhcmFtZXRlckluZm9ybWF0aW9uIiwiUG9zaXRpb24iLCJSYW5nZSIsIlJlbmFtZUZpbGUiLCJTZWxlY3RlZENvbXBsZXRpb25JbmZvIiwiU2VsZWN0aW9uUmFuZ2UiLCJTZW1hbnRpY1Rva2VuTW9kaWZpZXJzIiwiU2VtYW50aWNUb2tlblR5cGVzIiwiU2VtYW50aWNUb2tlbnMiLCJTaWduYXR1cmVJbmZvcm1hdGlvbiIsIlN0cmluZ1ZhbHVlIiwiU3ltYm9sSW5mb3JtYXRpb24iLCJTeW1ib2xLaW5kIiwiU3ltYm9sVGFnIiwiVGV4dERvY3VtZW50RWRpdCIsIlRleHREb2N1bWVudElkZW50aWZpZXIiLCJUZXh0RG9jdW1lbnRJdGVtIiwiVGV4dEVkaXQiLCJWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIiwiV29ya3NwYWNlQ2hhbmdlIiwiV29ya3NwYWNlRWRpdCIsIldvcmtzcGFjZVN5bWJvbCIsIk1JTl9WQUxVRSIsIk1BWF9WQUxVRSIsInRocmVlIiwiZm91ciIsInRhcmdldFVyaSIsInRhcmdldFJhbmdlIiwidGFyZ2V0U2VsZWN0aW9uUmFuZ2UiLCJvcmlnaW5TZWxlY3Rpb25SYW5nZSIsImFscGhhIiwibnVtYmVyUmFuZ2UiLCJjb2xvciIsImFkZGl0aW9uYWxUZXh0RWRpdHMiLCJDb21tZW50IiwiSW1wb3J0cyIsIlJlZ2lvbiIsInN0YXJ0Q2hhcmFjdGVyIiwiZW5kQ2hhcmFjdGVyIiwiY29sbGFwc2VkVGV4dCIsImRlZmluZWQiLCJsb2NhdGlvbiIsIkluZm9ybWF0aW9uIiwiSGludCIsImhyZWYiLCJzZXZlcml0eSIsImNvZGVEZXNjcmlwdGlvbiIsImluc2VydCIsImRlbCIsIm5lZWRzQ29uZmlybWF0aW9uIiwiZGVzY3JpcHRpb24iLCJhbm5vdGF0aW9uIiwiYW5ub3RhdGlvbklkIiwib3ZlcndyaXRlIiwiaWdub3JlSWZFeGlzdHMiLCJvbGRVcmkiLCJuZXdVcmkiLCJyZWN1cnNpdmUiLCJpZ25vcmVJZk5vdEV4aXN0cyIsIlRleHRFZGl0Q2hhbmdlSW1wbCIsImVkaXQiLCJhc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyIsImNoYW5nZUFubm90YXRpb25zIiwibWFuYWdlIiwiQ2hhbmdlQW5ub3RhdGlvbnMiLCJfYW5ub3RhdGlvbnMiLCJpZE9yQW5ub3RhdGlvbiIsIm5leHRJZCIsIl9jb3VudGVyIiwiYW5ub3RhdGlvbnMiLCJpbml0RG9jdW1lbnRDaGFuZ2VzIiwiX2NoYW5nZUFubm90YXRpb25zIiwiX3dvcmtzcGFjZUVkaXQiLCJnZXRUZXh0RWRpdENoYW5nZSIsIl90ZXh0RWRpdENoYW5nZXMiLCJ0ZXh0RG9jdW1lbnRFZGl0IiwiaW5pdENoYW5nZXMiLCJjcmVhdGVGaWxlIiwib3B0aW9uc09yQW5ub3RhdGlvbiIsIm9wZXJhdGlvbiIsInJlbmFtZUZpbGUiLCJkZWxldGVGaWxlIiwidGV4dEVkaXRDaGFuZ2UiLCJQbGFpblRleHQiLCJNYXJrZG93biIsIk1ldGhvZCIsIkZpZWxkIiwiVmFyaWFibGUiLCJJbnRlcmZhY2UiLCJNb2R1bGUiLCJQcm9wZXJ0eSIsIlVuaXQiLCJWYWx1ZSIsIkVudW0iLCJLZXl3b3JkIiwiU25pcHBldCIsIkZpbGUiLCJSZWZlcmVuY2UiLCJGb2xkZXIiLCJFbnVtTWVtYmVyIiwiQ29uc3RhbnQiLCJTdHJ1Y3QiLCJPcGVyYXRvciIsIlR5cGVQYXJhbWV0ZXIiLCJhc0lzIiwiYWRqdXN0SW5kZW50YXRpb24iLCJkZXRhaWwiLCJpdGVtcyIsImlzSW5jb21wbGV0ZSIsImZyb21QbGFpblRleHQiLCJwbGFpblRleHQiLCJjb250ZW50cyIsImRvY3VtZW50YXRpb24iLCJwYXJhbWV0ZXJzIiwiUmVhZCIsIldyaXRlIiwiTmFtZXNwYWNlIiwiUGFja2FnZSIsIktleSIsIk51bGwiLCJjb250YWluZXJOYW1lIiwic2VsZWN0aW9uUmFuZ2UiLCJjaGlsZHJlbiIsInRhZ3MiLCJRdWlja0ZpeCIsIlJlZmFjdG9yIiwiUmVmYWN0b3JFeHRyYWN0IiwiUmVmYWN0b3JJbmxpbmUiLCJSZWZhY3RvclJld3JpdGUiLCJTb3VyY2UiLCJTb3VyY2VPcmdhbml6ZUltcG9ydHMiLCJTb3VyY2VGaXhBbGwiLCJBdXRvbWF0aWMiLCJkaWFnbm9zdGljcyIsIm9ubHkiLCJ0cmlnZ2VyS2luZCIsImtpbmRPckNvbW1hbmRPckVkaXQiLCJjaGVja0tpbmQiLCJpc1ByZWZlcnJlZCIsInRhYlNpemUiLCJpbnNlcnRTcGFjZXMiLCJwYXJlbnQiLCJyZXN1bHRJZCIsInZhcmlhYmxlTmFtZSIsImNhc2VTZW5zaXRpdmVMb29rdXAiLCJmcmFtZUlkIiwic3RvcHBlZExvY2F0aW9uIiwiVHlwZSIsIlBhcmFtZXRlciIsInRvb2x0aXAiLCJ0ZXh0RWRpdHMiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImNyZWF0ZVNuaXBwZXQiLCJpbnNlcnRUZXh0IiwiZmlsdGVyVGV4dCIsInNlbGVjdGVkQ29tcGxldGlvbkluZm8iLCJpc0xpbmVTdGFydCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiZGVmaW5pdGlvbiIsIlBocFNlcnZpY2UiLCJiYXNlX3NlcnZpY2UiLCJwaHAiLCJtYWluIiwidXRpbHMiLCJBY2VSYW5nZSIsImdldENvbnN0cnVjdG9yIiwiZWRpdG9yIiwiX2luc3RhbmNlIiwiZ2V0U2VsZWN0aW9uUmFuZ2UiLCJjb21tb25fY29udmVydGVyc19Db21tb25Db252ZXJ0ZXIiLCJDb21tb25Db252ZXJ0ZXIiLCJub3JtYWxpemVSYW5nZXMiLCJjb21wbGV0aW9ucyIsImVsIiwidG9SYW5nZSIsImNsZWFuSHRtbCIsImh0bWwiLCJmcm9tUG9pbnRzIiwiY29udmVydEtpbmQiLCJleGNsdWRlQnlFcnJvck1lc3NhZ2UiLCJmaWVsZE5hbWUiLCJmcm9tUmFuZ2UiLCJyYW5nZUZyb21Qb3NpdGlvbnMiLCJmcm9tUG9pbnQiLCJwb2ludCIsInRvUG9pbnQiLCJ0b0Fubm90YXRpb25zIiwiX2RpYWdub3N0aWNzIiwiZnJvbUFubm90YXRpb25zIiwidG9Db21wbGV0aW9uIiwiX2l0ZW1fdGV4dEVkaXQiLCJfaXRlbV9jb21tYW5kIiwiaXRlbUtpbmQiLCJfaXRlbV90ZXh0RWRpdF9uZXdUZXh0IiwiX3JlZiIsImZpcnN0V29yZE1hdGNoIiwiZmlyc3RXb3JkIiwid29yZFJlZ2V4IiwiZ2V0VGV4dEVkaXRSYW5nZSIsImNhcHRpb24iLCJzY29yZSIsImluc2VydFRleHRGb3JtYXQiLCJ0b0NvbXBsZXRpb25zIiwiY29tYmluZWRDb21wbGV0aW9ucyIsImdldENvbXBsZXRpb25JdGVtcyIsImFsbENvbXBsZXRpb25zIiwic2VydmljZSIsImZsYXQiLCJ0b0lubGluZUNvbXBsZXRpb24iLCJnZXRJbmxpbmVDb21wbGV0aW9uUmFuZ2UiLCJ0b0lubGluZUNvbXBsZXRpb25zIiwidG9SZXNvbHZlZENvbXBsZXRpb24iLCJmcm9tTWFya3VwQ29udGVudCIsInRvQ29tcGxldGlvbkl0ZW0iLCJfY29tcGxldGlvbl9jYXB0aW9uIiwiX2NvbXBsZXRpb25fc25pcHBldCIsIl9jb21wbGV0aW9uX3NuaXBwZXQxIiwiZmlsdGVyTGVuZ3RoIiwibWVyZ2VkUmFuZ2VzIiwidG9Ub29sdGlwIiwiX2hvdmVyX2ZpbmQiLCJsc3BSYW5nZSIsImZpbmQiLCJfZWwiLCJmcm9tU2lnbmF0dXJlSGVscCIsIl9lbDEiLCJzaWduYXR1cmVJbmRleCIsImFjdGl2ZVNpZ25hdHVyZSIsInNpZ25hdHVyZXMiLCJhY3RpdmVQYXJhbSIsImFjdGl2ZVBhcmFtZXRlciIsImZyb21BY2VEZWx0YSIsImVvbCIsImxpbmVzIiwiYWN0aW9uIiwiZmlsdGVyRGlhZ25vc3RpY3MiLCJmaWx0ZXJFcnJvcnMiLCJmcm9tRG9jdW1lbnRIaWdobGlnaHRzIiwiZG9jdW1lbnRIaWdobGlnaHRzIiwidG9NYXJrZXJHcm91cEl0ZW0iLCJ0b29sdGlwVGV4dCIsIm1hcmtlckdyb3VwSXRlbSIsInBocF9zZXJ2aWNlX2RlZmluZV9wcm9wZXJ0eSIsImVycm9ycyIsImRpYWdub3N0aWNQcm92aWRlciIsImludGVyRmlsZURlcGVuZGVuY2llcyIsIndvcmtzcGFjZURpYWdub3N0aWNzIl0sInNvdXJjZVJvb3QiOiIifQ==