(self["webpackChunkace_linters_root"] = self["webpackChunkace_linters_root"] || []).push([[4358],{

/***/ 74358:
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
    if (true) module.exports = factory();
    else { var i, a; }
})(this, ()=>{
    return /******/ (()=>{
        /******/ var __webpack_modules__ = {
            /***/ 6093: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_511__)=>{
                "use strict";
                /* provided dependency */ var process = __nested_webpack_require_511__(9907);
                /* provided dependency */ var console = __nested_webpack_require_511__(4364);
                // Currently in sync with Node.js lib/assert.js
                // https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
                // Originally from narwhal.js (http://narwhaljs.org)
                // Copyright (c) 2009 Thomas Robinson <280north.com>
                //
                // Permission is hereby granted, free of charge, to any person obtaining a copy
                // of this software and associated documentation files (the 'Software'), to
                // deal in the Software without restriction, including without limitation the
                // rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
                // sell copies of the Software, and to permit persons to whom the Software is
                // furnished to do so, subject to the following conditions:
                //
                // The above copyright notice and this permission notice shall be included in
                // all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                // AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
                // ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
                // WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }
                var _require = __nested_webpack_require_511__(1342), _require$codes = _require.codes, ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE, ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
                var AssertionError = __nested_webpack_require_511__(9801);
                var _require2 = __nested_webpack_require_511__(6827), inspect = _require2.inspect;
                var _require$types = __nested_webpack_require_511__(6827).types, isPromise = _require$types.isPromise, isRegExp = _require$types.isRegExp;
                var objectAssign = Object.assign ? Object.assign : __nested_webpack_require_511__(3046).assign;
                var objectIs = Object.is ? Object.is : __nested_webpack_require_511__(5968);
                var errorCache = new Map();
                var isDeepEqual;
                var isDeepStrictEqual;
                var parseExpressionAt;
                var findNodeAround;
                var decoder;
                function lazyLoadComparison() {
                    var comparison = __nested_webpack_require_511__(5656);
                    isDeepEqual = comparison.isDeepEqual;
                    isDeepStrictEqual = comparison.isDeepStrictEqual;
                } // Escape control characters but not \n and \t to keep the line breaks and
                // indentation intact.
                // eslint-disable-next-line no-control-regex
                var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
                var meta = /* unused pure expression or super */ null && 0;
                var escapeFn = function escapeFn(str) {
                    return meta[str.charCodeAt(0)];
                };
                var warned = false; // The assert module provides functions that throw
                // AssertionError's when particular conditions are not met. The
                // assert module must conform to the following interface.
                var assert = module1.exports = ok;
                var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
                // when a corresponding condition is not met, with a message that
                // may be undefined if not provided. All assertion methods provide
                // both the actual and expected values to the assertion error for
                // display purposes.
                function innerFail(obj) {
                    if (obj.message instanceof Error) throw obj.message;
                    throw new AssertionError(obj);
                }
                function fail(actual, expected, message, operator, stackStartFn) {
                    var argsLen = arguments.length;
                    var internalMessage;
                    if (argsLen === 0) {
                        internalMessage = 'Failed';
                    } else if (argsLen === 1) {
                        message = actual;
                        actual = undefined;
                    } else {
                        if (warned === false) {
                            warned = true;
                            var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
                            warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
                        }
                        if (argsLen === 2) operator = '!=';
                    }
                    if (message instanceof Error) throw message;
                    var errArgs = {
                        actual: actual,
                        expected: expected,
                        operator: operator === undefined ? 'fail' : operator,
                        stackStartFn: stackStartFn || fail
                    };
                    if (message !== undefined) {
                        errArgs.message = message;
                    }
                    var err = new AssertionError(errArgs);
                    if (internalMessage) {
                        err.message = internalMessage;
                        err.generatedMessage = true;
                    }
                    throw err;
                }
                assert.fail = fail; // The AssertionError is defined in internal/error.
                assert.AssertionError = AssertionError;
                function innerOk(fn, argLen, value, message) {
                    if (!value) {
                        var generatedMessage = false;
                        if (argLen === 0) {
                            generatedMessage = true;
                            message = 'No value argument passed to `assert.ok()`';
                        } else if (message instanceof Error) {
                            throw message;
                        }
                        var err = new AssertionError({
                            actual: value,
                            expected: true,
                            message: message,
                            operator: '==',
                            stackStartFn: fn
                        });
                        err.generatedMessage = generatedMessage;
                        throw err;
                    }
                } // Pure assertion tests whether a value is truthy, as determined
                // by !!value.
                function ok() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    innerOk.apply(void 0, [
                        ok,
                        args.length
                    ].concat(args));
                }
                assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.
                /* eslint-disable no-restricted-properties */ assert.equal = function equal(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    } // eslint-disable-next-line eqeqeq
                    if (actual != expected) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: '==',
                            stackStartFn: equal
                        });
                    }
                }; // The non-equality assertion tests for whether two objects are not
                // equal with !=.
                assert.notEqual = function notEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    } // eslint-disable-next-line eqeqeq
                    if (actual == expected) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: '!=',
                            stackStartFn: notEqual
                        });
                    }
                }; // The equivalence assertion tests a deep equality relation.
                assert.deepEqual = function deepEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    if (!isDeepEqual(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'deepEqual',
                            stackStartFn: deepEqual
                        });
                    }
                }; // The non-equivalence assertion tests for any deep inequality.
                assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    if (isDeepEqual(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'notDeepEqual',
                            stackStartFn: notDeepEqual
                        });
                    }
                };
                /* eslint-enable */ assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    if (!isDeepStrictEqual(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'deepStrictEqual',
                            stackStartFn: deepStrictEqual
                        });
                    }
                };
                assert.notDeepStrictEqual = notDeepStrictEqual;
                function notDeepStrictEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (isDeepEqual === undefined) lazyLoadComparison();
                    if (isDeepStrictEqual(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'notDeepStrictEqual',
                            stackStartFn: notDeepStrictEqual
                        });
                    }
                }
                assert.strictEqual = function strictEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (!objectIs(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'strictEqual',
                            stackStartFn: strictEqual
                        });
                    }
                };
                assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
                    if (arguments.length < 2) {
                        throw new ERR_MISSING_ARGS('actual', 'expected');
                    }
                    if (objectIs(actual, expected)) {
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: 'notStrictEqual',
                            stackStartFn: notStrictEqual
                        });
                    }
                };
                var Comparison = function Comparison(obj, keys, actual) {
                    var _this = this;
                    _classCallCheck(this, Comparison);
                    keys.forEach(function(key) {
                        if (key in obj) {
                            if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
                                _this[key] = actual[key];
                            } else {
                                _this[key] = obj[key];
                            }
                        }
                    });
                };
                function compareExceptionKey(actual, expected, key, message, keys, fn) {
                    if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
                        if (!message) {
                            // Create placeholder objects to create a nice output.
                            var a = new Comparison(actual, keys);
                            var b = new Comparison(expected, keys, actual);
                            var err = new AssertionError({
                                actual: a,
                                expected: b,
                                operator: 'deepStrictEqual',
                                stackStartFn: fn
                            });
                            err.actual = actual;
                            err.expected = expected;
                            err.operator = fn.name;
                            throw err;
                        }
                        innerFail({
                            actual: actual,
                            expected: expected,
                            message: message,
                            operator: fn.name,
                            stackStartFn: fn
                        });
                    }
                }
                function expectedException(actual, expected, msg, fn) {
                    if (typeof expected !== 'function') {
                        if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.
                        if (arguments.length === 2) {
                            throw new ERR_INVALID_ARG_TYPE('expected', [
                                'Function',
                                'RegExp'
                            ], expected);
                        } // Handle primitives properly.
                        if (_typeof(actual) !== 'object' || actual === null) {
                            var err = new AssertionError({
                                actual: actual,
                                expected: expected,
                                message: msg,
                                operator: 'deepStrictEqual',
                                stackStartFn: fn
                            });
                            err.operator = fn.name;
                            throw err;
                        }
                        var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
                        // as well.
                        if (expected instanceof Error) {
                            keys.push('name', 'message');
                        } else if (keys.length === 0) {
                            throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
                        }
                        if (isDeepEqual === undefined) lazyLoadComparison();
                        keys.forEach(function(key) {
                            if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
                                return;
                            }
                            compareExceptionKey(actual, expected, key, msg, keys, fn);
                        });
                        return true;
                    } // Guard instanceof against arrow functions as they don't have a prototype.
                    if (expected.prototype !== undefined && actual instanceof expected) {
                        return true;
                    }
                    if (Error.isPrototypeOf(expected)) {
                        return false;
                    }
                    return expected.call({}, actual) === true;
                }
                function getActual(fn) {
                    if (typeof fn !== 'function') {
                        throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
                    }
                    try {
                        fn();
                    } catch (e) {
                        return e;
                    }
                    return NO_EXCEPTION_SENTINEL;
                }
                function checkIsPromise(obj) {
                    // Accept native ES6 promises and promises that are implemented in a similar
                    // way. Do not accept thenables that use a function as `obj` and that have no
                    // `catch` handler.
                    // TODO: thenables are checked up until they have the correct methods,
                    // but according to documentation, the `then` method should receive
                    // the `fulfill` and `reject` arguments as well or it may be never resolved.
                    return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
                }
                function waitForActual(promiseFn) {
                    return Promise.resolve().then(function() {
                        var resultPromise;
                        if (typeof promiseFn === 'function') {
                            // Return a rejected promise if `promiseFn` throws synchronously.
                            resultPromise = promiseFn(); // Fail in case no promise is returned.
                            if (!checkIsPromise(resultPromise)) {
                                throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
                            }
                        } else if (checkIsPromise(promiseFn)) {
                            resultPromise = promiseFn;
                        } else {
                            throw new ERR_INVALID_ARG_TYPE('promiseFn', [
                                'Function',
                                'Promise'
                            ], promiseFn);
                        }
                        return Promise.resolve().then(function() {
                            return resultPromise;
                        }).then(function() {
                            return NO_EXCEPTION_SENTINEL;
                        }).catch(function(e) {
                            return e;
                        });
                    });
                }
                function expectsError(stackStartFn, actual, error, message) {
                    if (typeof error === 'string') {
                        if (arguments.length === 4) {
                            throw new ERR_INVALID_ARG_TYPE('error', [
                                'Object',
                                'Error',
                                'Function',
                                'RegExp'
                            ], error);
                        }
                        if (_typeof(actual) === 'object' && actual !== null) {
                            if (actual.message === error) {
                                throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
                            }
                        } else if (actual === error) {
                            throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
                        }
                        message = error;
                        error = undefined;
                    } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
                        throw new ERR_INVALID_ARG_TYPE('error', [
                            'Object',
                            'Error',
                            'Function',
                            'RegExp'
                        ], error);
                    }
                    if (actual === NO_EXCEPTION_SENTINEL) {
                        var details = '';
                        if (error && error.name) {
                            details += " (".concat(error.name, ")");
                        }
                        details += message ? ": ".concat(message) : '.';
                        var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
                        innerFail({
                            actual: undefined,
                            expected: error,
                            operator: stackStartFn.name,
                            message: "Missing expected ".concat(fnType).concat(details),
                            stackStartFn: stackStartFn
                        });
                    }
                    if (error && !expectedException(actual, error, message, stackStartFn)) {
                        throw actual;
                    }
                }
                function expectsNoError(stackStartFn, actual, error, message) {
                    if (actual === NO_EXCEPTION_SENTINEL) return;
                    if (typeof error === 'string') {
                        message = error;
                        error = undefined;
                    }
                    if (!error || expectedException(actual, error)) {
                        var details = message ? ": ".concat(message) : '.';
                        var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
                        innerFail({
                            actual: actual,
                            expected: error,
                            operator: stackStartFn.name,
                            message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
                            stackStartFn: stackStartFn
                        });
                    }
                    throw actual;
                }
                assert.throws = function throws(promiseFn) {
                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){
                        args[_key2 - 1] = arguments[_key2];
                    }
                    expectsError.apply(void 0, [
                        throws,
                        getActual(promiseFn)
                    ].concat(args));
                };
                assert.rejects = function rejects(promiseFn) {
                    for(var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++){
                        args[_key3 - 1] = arguments[_key3];
                    }
                    return waitForActual(promiseFn).then(function(result) {
                        return expectsError.apply(void 0, [
                            rejects,
                            result
                        ].concat(args));
                    });
                };
                assert.doesNotThrow = function doesNotThrow(fn) {
                    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++){
                        args[_key4 - 1] = arguments[_key4];
                    }
                    expectsNoError.apply(void 0, [
                        doesNotThrow,
                        getActual(fn)
                    ].concat(args));
                };
                assert.doesNotReject = function doesNotReject(fn) {
                    for(var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++){
                        args[_key5 - 1] = arguments[_key5];
                    }
                    return waitForActual(fn).then(function(result) {
                        return expectsNoError.apply(void 0, [
                            doesNotReject,
                            result
                        ].concat(args));
                    });
                };
                assert.ifError = function ifError(err) {
                    if (err !== null && err !== undefined) {
                        var message = 'ifError got unwanted exception: ';
                        if (_typeof(err) === 'object' && typeof err.message === 'string') {
                            if (err.message.length === 0 && err.constructor) {
                                message += err.constructor.name;
                            } else {
                                message += err.message;
                            }
                        } else {
                            message += inspect(err);
                        }
                        var newErr = new AssertionError({
                            actual: err,
                            expected: null,
                            operator: 'ifError',
                            message: message,
                            stackStartFn: ifError
                        }); // Make sure we actually have a stack trace!
                        var origStack = err.stack;
                        if (typeof origStack === 'string') {
                            // This will remove any duplicated frames from the error frames taken
                            // from within `ifError` and add the original error frames to the newly
                            // created ones.
                            var tmp2 = origStack.split('\n');
                            tmp2.shift(); // Filter all frames existing in err.stack.
                            var tmp1 = newErr.stack.split('\n');
                            for(var i = 0; i < tmp2.length; i++){
                                // Find the first occurrence of the frame.
                                var pos = tmp1.indexOf(tmp2[i]);
                                if (pos !== -1) {
                                    // Only keep new frames.
                                    tmp1 = tmp1.slice(0, pos);
                                    break;
                                }
                            }
                            newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
                        }
                        throw newErr;
                    }
                }; // Expose a strict only variant of assert
                function strict() {
                    for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++){
                        args[_key6] = arguments[_key6];
                    }
                    innerOk.apply(void 0, [
                        strict,
                        args.length
                    ].concat(args));
                }
                assert.strict = objectAssign(strict, assert, {
                    equal: assert.strictEqual,
                    deepEqual: assert.deepStrictEqual,
                    notEqual: assert.notStrictEqual,
                    notDeepEqual: assert.notDeepStrictEqual
                });
                assert.strict.strict = assert.strict;
            /***/ },
            /***/ 9801: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_31729__)=>{
                "use strict";
                /* provided dependency */ var process = __nested_webpack_require_31729__(9907);
                // Currently in sync with Node.js lib/internal/assert/assertion_error.js
                // https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c
                function _objectSpread(target) {
                    for(var i = 1; i < arguments.length; i++){
                        var source = arguments[i] != null ? arguments[i] : {};
                        var ownKeys = Object.keys(source);
                        if (typeof Object.getOwnPropertySymbols === 'function') {
                            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
                            }));
                        }
                        ownKeys.forEach(function(key) {
                            _defineProperty(target, key, source[key]);
                        });
                    }
                    return target;
                }
                function _defineProperty(obj, key, value) {
                    if (key in obj) {
                        Object.defineProperty(obj, key, {
                            value: value,
                            enumerable: true,
                            configurable: true,
                            writable: true
                        });
                    } else {
                        obj[key] = value;
                    }
                    return obj;
                }
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }
                function _defineProperties(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) _defineProperties(Constructor, staticProps);
                    return Constructor;
                }
                function _possibleConstructorReturn(self, call) {
                    if (call && (_typeof(call) === "object" || typeof call === "function")) {
                        return call;
                    }
                    return _assertThisInitialized(self);
                }
                function _assertThisInitialized(self) {
                    if (self === void 0) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self;
                }
                function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                        throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (superClass) _setPrototypeOf(subClass, superClass);
                }
                function _wrapNativeSuper(Class) {
                    var _cache = typeof Map === "function" ? new Map() : undefined;
                    _wrapNativeSuper = function _wrapNativeSuper(Class) {
                        if (Class === null || !_isNativeFunction(Class)) return Class;
                        if (typeof Class !== "function") {
                            throw new TypeError("Super expression must either be null or a function");
                        }
                        if (typeof _cache !== "undefined") {
                            if (_cache.has(Class)) return _cache.get(Class);
                            _cache.set(Class, Wrapper);
                        }
                        function Wrapper() {
                            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
                        }
                        Wrapper.prototype = Object.create(Class.prototype, {
                            constructor: {
                                value: Wrapper,
                                enumerable: false,
                                writable: true,
                                configurable: true
                            }
                        });
                        return _setPrototypeOf(Wrapper, Class);
                    };
                    return _wrapNativeSuper(Class);
                }
                function isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
                function _construct(Parent, args, Class) {
                    if (isNativeReflectConstruct()) {
                        _construct = Reflect.construct;
                    } else {
                        _construct = function _construct(Parent, args, Class) {
                            var a = [
                                null
                            ];
                            a.push.apply(a, args);
                            var Constructor = Function.bind.apply(Parent, a);
                            var instance = new Constructor();
                            if (Class) _setPrototypeOf(instance, Class.prototype);
                            return instance;
                        };
                    }
                    return _construct.apply(null, arguments);
                }
                function _isNativeFunction(fn) {
                    return Function.toString.call(fn).indexOf("[native code]") !== -1;
                }
                function _setPrototypeOf(o, p) {
                    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                        o.__proto__ = p;
                        return o;
                    };
                    return _setPrototypeOf(o, p);
                }
                function _getPrototypeOf(o) {
                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                        return o.__proto__ || Object.getPrototypeOf(o);
                    };
                    return _getPrototypeOf(o);
                }
                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }
                var _require = __nested_webpack_require_31729__(6827), inspect = _require.inspect;
                var _require2 = __nested_webpack_require_31729__(1342), ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
                function endsWith(str, search, this_len) {
                    if (this_len === undefined || this_len > str.length) {
                        this_len = str.length;
                    }
                    return str.substring(this_len - search.length, this_len) === search;
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
                function repeat(str, count) {
                    count = Math.floor(count);
                    if (str.length == 0 || count == 0) return '';
                    var maxCount = str.length * count;
                    count = Math.floor(Math.log(count) / Math.log(2));
                    while(count){
                        str += str;
                        count--;
                    }
                    str += str.substring(0, maxCount - str.length);
                    return str;
                }
                var blue = '';
                var green = '';
                var red = '';
                var white = '';
                var kReadableOperator = {
                    deepStrictEqual: 'Expected values to be strictly deep-equal:',
                    strictEqual: 'Expected values to be strictly equal:',
                    strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
                    deepEqual: 'Expected values to be loosely deep-equal:',
                    equal: 'Expected values to be loosely equal:',
                    notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
                    notStrictEqual: 'Expected "actual" to be strictly unequal to:',
                    notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
                    notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
                    notEqual: 'Expected "actual" to be loosely unequal to:',
                    notIdentical: 'Values identical but not reference-equal:'
                }; // Comparing short primitives should just show === / !== instead of using the
                // diff.
                var kMaxShortLength = 10;
                function copyError(source) {
                    var keys = Object.keys(source);
                    var target = Object.create(Object.getPrototypeOf(source));
                    keys.forEach(function(key) {
                        target[key] = source[key];
                    });
                    Object.defineProperty(target, 'message', {
                        value: source.message
                    });
                    return target;
                }
                function inspectValue(val) {
                    // The util.inspect default values could be changed. This makes sure the
                    // error messages contain the necessary information nevertheless.
                    return inspect(val, {
                        compact: false,
                        customInspect: false,
                        depth: 1000,
                        maxArrayLength: Infinity,
                        // Assert compares only enumerable properties (with a few exceptions).
                        showHidden: false,
                        // Having a long line as error is better than wrapping the line for
                        // comparison for now.
                        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
                        // have meta information about the inspected properties (i.e., know where
                        // in what line the property starts and ends).
                        breakLength: Infinity,
                        // Assert does not detect proxies currently.
                        showProxy: false,
                        sorted: true,
                        // Inspect getters as we also check them when comparing entries.
                        getters: true
                    });
                }
                function createErrDiff(actual, expected, operator) {
                    var other = '';
                    var res = '';
                    var lastPos = 0;
                    var end = '';
                    var skipped = false;
                    var actualInspected = inspectValue(actual);
                    var actualLines = actualInspected.split('\n');
                    var expectedLines = inspectValue(expected).split('\n');
                    var i = 0;
                    var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
                    // for the `strictEqual` operator.
                    if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
                        operator = 'strictEqualObject';
                    } // If "actual" and "expected" fit on a single line and they are not strictly
                    // equal, check further special handling.
                    if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
                        var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
                        // kMaxShortLength and if neither is an object and at least one of them is
                        // not `zero`, use the strict equal comparison to visualize the output.
                        if (inputLength <= kMaxShortLength) {
                            if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
                                // -0 === +0
                                return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
                            }
                        } else if (operator !== 'strictEqualObject') {
                            // If the stderr is a tty and the input length is lower than the current
                            // columns per line, add a mismatch indicator below the output. If it is
                            // not a tty, use a default value of 80 characters.
                            var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
                            if (inputLength < maxLength) {
                                while(actualLines[0][i] === expectedLines[0][i]){
                                    i++;
                                } // Ignore the first characters.
                                if (i > 2) {
                                    // Add position indicator for the first mismatch in case it is a
                                    // single line and the input length is less than the column length.
                                    indicator = "\n  ".concat(repeat(' ', i), "^");
                                    i = 0;
                                }
                            }
                        }
                    } // Remove all ending lines that match (this optimizes the output for
                    // readability by reducing the number of total changed lines).
                    var a = actualLines[actualLines.length - 1];
                    var b = expectedLines[expectedLines.length - 1];
                    while(a === b){
                        if (i++ < 2) {
                            end = "\n  ".concat(a).concat(end);
                        } else {
                            other = a;
                        }
                        actualLines.pop();
                        expectedLines.pop();
                        if (actualLines.length === 0 || expectedLines.length === 0) break;
                        a = actualLines[actualLines.length - 1];
                        b = expectedLines[expectedLines.length - 1];
                    }
                    var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
                    // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })
                    if (maxLines === 0) {
                        // We have to get the result again. The lines were all removed before.
                        var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
                        // TODO: Accept env to always show the full error.
                        if (_actualLines.length > 30) {
                            _actualLines[26] = "".concat(blue, "...").concat(white);
                            while(_actualLines.length > 27){
                                _actualLines.pop();
                            }
                        }
                        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
                    }
                    if (i > 3) {
                        end = "\n".concat(blue, "...").concat(white).concat(end);
                        skipped = true;
                    }
                    if (other !== '') {
                        end = "\n  ".concat(other).concat(end);
                        other = '';
                    }
                    var printedLines = 0;
                    var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
                    var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
                    for(i = 0; i < maxLines; i++){
                        // Only extra expected lines exist
                        var cur = i - lastPos;
                        if (actualLines.length < i + 1) {
                            // If the last diverging line is more than one line above and the
                            // current line is at least line three, add some of the former lines and
                            // also add dots to indicate skipped entries.
                            if (cur > 1 && i > 2) {
                                if (cur > 4) {
                                    res += "\n".concat(blue, "...").concat(white);
                                    skipped = true;
                                } else if (cur > 3) {
                                    res += "\n  ".concat(expectedLines[i - 2]);
                                    printedLines++;
                                }
                                res += "\n  ".concat(expectedLines[i - 1]);
                                printedLines++;
                            } // Mark the current line as the last diverging one.
                            lastPos = i; // Add the expected line to the cache.
                            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
                            printedLines++; // Only extra actual lines exist
                        } else if (expectedLines.length < i + 1) {
                            // If the last diverging line is more than one line above and the
                            // current line is at least line three, add some of the former lines and
                            // also add dots to indicate skipped entries.
                            if (cur > 1 && i > 2) {
                                if (cur > 4) {
                                    res += "\n".concat(blue, "...").concat(white);
                                    skipped = true;
                                } else if (cur > 3) {
                                    res += "\n  ".concat(actualLines[i - 2]);
                                    printedLines++;
                                }
                                res += "\n  ".concat(actualLines[i - 1]);
                                printedLines++;
                            } // Mark the current line as the last diverging one.
                            lastPos = i; // Add the actual line to the result.
                            res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
                            printedLines++; // Lines diverge
                        } else {
                            var expectedLine = expectedLines[i];
                            var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
                            // a trailing comma. In that case it is actually identical and we should
                            // mark it as such.
                            var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
                            // add a comma at the end of the actual line. Otherwise the output could
                            // look weird as in:
                            //
                            //   [
                            //     1         // No comma at the end!
                            // +   2
                            //   ]
                            //
                            if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
                                divergingLines = false;
                                actualLine += ',';
                            }
                            if (divergingLines) {
                                // If the last diverging line is more than one line above and the
                                // current line is at least line three, add some of the former lines and
                                // also add dots to indicate skipped entries.
                                if (cur > 1 && i > 2) {
                                    if (cur > 4) {
                                        res += "\n".concat(blue, "...").concat(white);
                                        skipped = true;
                                    } else if (cur > 3) {
                                        res += "\n  ".concat(actualLines[i - 2]);
                                        printedLines++;
                                    }
                                    res += "\n  ".concat(actualLines[i - 1]);
                                    printedLines++;
                                } // Mark the current line as the last diverging one.
                                lastPos = i; // Add the actual line to the result and cache the expected diverging
                                // line so consecutive diverging lines show up as +++--- and not +-+-+-.
                                res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
                                other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
                                printedLines += 2; // Lines are identical
                            } else {
                                // Add all cached information to the result before adding other things
                                // and reset the cache.
                                res += other;
                                other = ''; // If the last diverging line is exactly one line above or if it is the
                                // very first line, add the line to the result.
                                if (cur === 1 || i === 0) {
                                    res += "\n  ".concat(actualLine);
                                    printedLines++;
                                }
                            }
                        } // Inspected object to big (Show ~20 rows max)
                        if (printedLines > 20 && i < maxLines - 2) {
                            return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
                        }
                    }
                    return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
                }
                var AssertionError = /*#__PURE__*/ function(_Error) {
                    _inherits(AssertionError, _Error);
                    function AssertionError(options) {
                        var _this;
                        _classCallCheck(this, AssertionError);
                        if (_typeof(options) !== 'object' || options === null) {
                            throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
                        }
                        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
                        var actual = options.actual, expected = options.expected;
                        var limit = Error.stackTraceLimit;
                        Error.stackTraceLimit = 0;
                        if (message != null) {
                            _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
                        } else {
                            if (process.stderr && process.stderr.isTTY) {
                                // Reset on each call to make sure we handle dynamically set environment
                                // variables correct.
                                if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
                                    blue = "\x1B[34m";
                                    green = "\x1B[32m";
                                    white = "\x1B[39m";
                                    red = "\x1B[31m";
                                } else {
                                    blue = '';
                                    green = '';
                                    white = '';
                                    red = '';
                                }
                            } // Prevent the error stack from being visible by duplicating the error
                            // in a very close way to the original in case both sides are actually
                            // instances of Error.
                            if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
                                actual = copyError(actual);
                                expected = copyError(expected);
                            }
                            if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
                                _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
                            } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
                                // In case the objects are equal but the operator requires unequal, show
                                // the first object and say A equals B
                                var base = kReadableOperator[operator];
                                var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.
                                if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
                                    base = kReadableOperator.notStrictEqualObject;
                                } // Only remove lines in case it makes sense to collapse those.
                                // TODO: Accept env to always show the full error.
                                if (res.length > 30) {
                                    res[26] = "".concat(blue, "...").concat(white);
                                    while(res.length > 27){
                                        res.pop();
                                    }
                                } // Only print a single input.
                                if (res.length === 1) {
                                    _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
                                } else {
                                    _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
                                }
                            } else {
                                var _res = inspectValue(actual);
                                var other = '';
                                var knownOperators = kReadableOperator[operator];
                                if (operator === 'notDeepEqual' || operator === 'notEqual') {
                                    _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
                                    if (_res.length > 1024) {
                                        _res = "".concat(_res.slice(0, 1021), "...");
                                    }
                                } else {
                                    other = "".concat(inspectValue(expected));
                                    if (_res.length > 512) {
                                        _res = "".concat(_res.slice(0, 509), "...");
                                    }
                                    if (other.length > 512) {
                                        other = "".concat(other.slice(0, 509), "...");
                                    }
                                    if (operator === 'deepEqual' || operator === 'equal') {
                                        _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
                                    } else {
                                        other = " ".concat(operator, " ").concat(other);
                                    }
                                }
                                _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
                            }
                        }
                        Error.stackTraceLimit = limit;
                        _this.generatedMessage = !message;
                        Object.defineProperty(_assertThisInitialized(_this), 'name', {
                            value: 'AssertionError [ERR_ASSERTION]',
                            enumerable: false,
                            writable: true,
                            configurable: true
                        });
                        _this.code = 'ERR_ASSERTION';
                        _this.actual = actual;
                        _this.expected = expected;
                        _this.operator = operator;
                        if (Error.captureStackTrace) {
                            // eslint-disable-next-line no-restricted-syntax
                            Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
                        } // Create error message including the error code in the name.
                        _this.stack; // Reset the name.
                        _this.name = 'AssertionError';
                        return _possibleConstructorReturn(_this);
                    }
                    _createClass(AssertionError, [
                        {
                            key: "toString",
                            value: function toString() {
                                return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
                            }
                        },
                        {
                            key: inspect.custom,
                            value: function value(recurseTimes, ctx) {
                                // This limits the `actual` and `expected` property default inspection to
                                // the minimum depth. Otherwise those values would be too verbose compared
                                // to the actual error message which contains a combined view of these two
                                // input values.
                                return inspect(this, _objectSpread({}, ctx, {
                                    customInspect: false,
                                    depth: 0
                                }));
                            }
                        }
                    ]);
                    return AssertionError;
                }(_wrapNativeSuper(Error));
                module1.exports = AssertionError;
            /***/ },
            /***/ 1342: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_65318__)=>{
                "use strict";
                // Currently in sync with Node.js lib/internal/errors.js
                // https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f
                /* eslint node-core/documented-errors: "error" */ /* eslint node-core/alphabetize-errors: "error" */ /* eslint node-core/prefer-util-format-errors: "error" */ // The whole point behind this internal module is to allow Node.js to no
                // longer be forced to treat every error message change as a semver-major
                // change. The NodeError classes here all expose a `code` property whose
                // value statically and permanently identifies the error. While the error
                // message may change, the code should not.
                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                        throw new TypeError("Cannot call a class as a function");
                    }
                }
                function _possibleConstructorReturn(self, call) {
                    if (call && (_typeof(call) === "object" || typeof call === "function")) {
                        return call;
                    }
                    return _assertThisInitialized(self);
                }
                function _assertThisInitialized(self) {
                    if (self === void 0) {
                        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self;
                }
                function _getPrototypeOf(o) {
                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                        return o.__proto__ || Object.getPrototypeOf(o);
                    };
                    return _getPrototypeOf(o);
                }
                function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                        throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, {
                        constructor: {
                            value: subClass,
                            writable: true,
                            configurable: true
                        }
                    });
                    if (superClass) _setPrototypeOf(subClass, superClass);
                }
                function _setPrototypeOf(o, p) {
                    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                        o.__proto__ = p;
                        return o;
                    };
                    return _setPrototypeOf(o, p);
                }
                var codes = {}; // Lazy loaded
                var assert;
                var util;
                function createErrorType(code, message, Base) {
                    if (!Base) {
                        Base = Error;
                    }
                    function getMessage(arg1, arg2, arg3) {
                        if (typeof message === 'string') {
                            return message;
                        } else {
                            return message(arg1, arg2, arg3);
                        }
                    }
                    var NodeError = /*#__PURE__*/ function(_Base) {
                        _inherits(NodeError, _Base);
                        function NodeError(arg1, arg2, arg3) {
                            var _this;
                            _classCallCheck(this, NodeError);
                            _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
                            _this.code = code;
                            return _this;
                        }
                        return NodeError;
                    }(Base);
                    codes[code] = NodeError;
                } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
                function oneOf(expected, thing) {
                    if (Array.isArray(expected)) {
                        var len = expected.length;
                        expected = expected.map(function(i) {
                            return String(i);
                        });
                        if (len > 2) {
                            return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
                        } else if (len === 2) {
                            return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
                        } else {
                            return "of ".concat(thing, " ").concat(expected[0]);
                        }
                    } else {
                        return "of ".concat(thing, " ").concat(String(expected));
                    }
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
                function startsWith(str, search, pos) {
                    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
                function endsWith(str, search, this_len) {
                    if (this_len === undefined || this_len > str.length) {
                        this_len = str.length;
                    }
                    return str.substring(this_len - search.length, this_len) === search;
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
                function includes(str, search, start) {
                    if (typeof start !== 'number') {
                        start = 0;
                    }
                    if (start + search.length > str.length) {
                        return false;
                    } else {
                        return str.indexOf(search, start) !== -1;
                    }
                }
                createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
                createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
                    if (assert === undefined) assert = __nested_webpack_require_65318__(6093);
                    assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'
                    var determiner;
                    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
                        determiner = 'must not be';
                        expected = expected.replace(/^not /, '');
                    } else {
                        determiner = 'must be';
                    }
                    var msg;
                    if (endsWith(name, ' argument')) {
                        // For cases like 'first argument'
                        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
                    } else {
                        var type = includes(name, '.') ? 'property' : 'argument';
                        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
                    } // TODO(BridgeAR): Improve the output by showing `null` and similar.
                    msg += ". Received type ".concat(_typeof(actual));
                    return msg;
                }, TypeError);
                createErrorType('ERR_INVALID_ARG_VALUE', function(name, value) {
                    var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
                    if (util === undefined) util = __nested_webpack_require_65318__(6827);
                    var inspected = util.inspect(value);
                    if (inspected.length > 128) {
                        inspected = "".concat(inspected.slice(0, 128), "...");
                    }
                    return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
                }, TypeError, RangeError);
                createErrorType('ERR_INVALID_RETURN_VALUE', function(input, name, value) {
                    var type;
                    if (value && value.constructor && value.constructor.name) {
                        type = "instance of ".concat(value.constructor.name);
                    } else {
                        type = "type ".concat(_typeof(value));
                    }
                    return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
                }, TypeError);
                createErrorType('ERR_MISSING_ARGS', function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                        args[_key] = arguments[_key];
                    }
                    if (assert === undefined) assert = __nested_webpack_require_65318__(6093);
                    assert(args.length > 0, 'At least one arg needs to be specified');
                    var msg = 'The ';
                    var len = args.length;
                    args = args.map(function(a) {
                        return "\"".concat(a, "\"");
                    });
                    switch(len){
                        case 1:
                            msg += "".concat(args[0], " argument");
                            break;
                        case 2:
                            msg += "".concat(args[0], " and ").concat(args[1], " arguments");
                            break;
                        default:
                            msg += args.slice(0, len - 1).join(', ');
                            msg += ", and ".concat(args[len - 1], " arguments");
                            break;
                    }
                    return "".concat(msg, " must be specified");
                }, TypeError);
                module1.exports.codes = codes;
            /***/ },
            /***/ 5656: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_76379__)=>{
                "use strict";
                // Currently in sync with Node.js lib/internal/util/comparisons.js
                // https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
                function _slicedToArray(arr, i) {
                    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
                }
                function _nonIterableRest() {
                    throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
                function _iterableToArrayLimit(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;
                    try {
                        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                            _arr.push(_s.value);
                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally{
                        try {
                            if (!_n && _i["return"] != null) _i["return"]();
                        } finally{
                            if (_d) throw _e;
                        }
                    }
                    return _arr;
                }
                function _arrayWithHoles(arr) {
                    if (Array.isArray(arr)) return arr;
                }
                function _typeof(obj) {
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                        _typeof = function _typeof(obj) {
                            return typeof obj;
                        };
                    } else {
                        _typeof = function _typeof(obj) {
                            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                        };
                    }
                    return _typeof(obj);
                }
                var regexFlagsSupported = /a/g.flags !== undefined;
                var arrayFromSet = function arrayFromSet(set) {
                    var array = [];
                    set.forEach(function(value) {
                        return array.push(value);
                    });
                    return array;
                };
                var arrayFromMap = function arrayFromMap(map) {
                    var array = [];
                    map.forEach(function(value, key) {
                        return array.push([
                            key,
                            value
                        ]);
                    });
                    return array;
                };
                var objectIs = Object.is ? Object.is : __nested_webpack_require_76379__(5968);
                var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
                    return [];
                };
                var numberIsNaN = Number.isNaN ? Number.isNaN : __nested_webpack_require_76379__(7838);
                function uncurryThis(f) {
                    return f.call.bind(f);
                }
                var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
                var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
                var objectToString = uncurryThis(Object.prototype.toString);
                var _require$types = __nested_webpack_require_76379__(6827).types, isAnyArrayBuffer = _require$types.isAnyArrayBuffer, isArrayBufferView = _require$types.isArrayBufferView, isDate = _require$types.isDate, isMap = _require$types.isMap, isRegExp = _require$types.isRegExp, isSet = _require$types.isSet, isNativeError = _require$types.isNativeError, isBoxedPrimitive = _require$types.isBoxedPrimitive, isNumberObject = _require$types.isNumberObject, isStringObject = _require$types.isStringObject, isBooleanObject = _require$types.isBooleanObject, isBigIntObject = _require$types.isBigIntObject, isSymbolObject = _require$types.isSymbolObject, isFloat32Array = _require$types.isFloat32Array, isFloat64Array = _require$types.isFloat64Array;
                function isNonIndex(key) {
                    if (key.length === 0 || key.length > 10) return true;
                    for(var i = 0; i < key.length; i++){
                        var code = key.charCodeAt(i);
                        if (code < 48 || code > 57) return true;
                    } // The maximum size for an array is 2 ** 32 -1.
                    return key.length === 10 && key >= Math.pow(2, 32);
                }
                function getOwnNonIndexProperties(value) {
                    return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
                } // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
                // original notice:
                /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */ function compare(a, b) {
                    if (a === b) {
                        return 0;
                    }
                    var x = a.length;
                    var y = b.length;
                    for(var i = 0, len = Math.min(x, y); i < len; ++i){
                        if (a[i] !== b[i]) {
                            x = a[i];
                            y = b[i];
                            break;
                        }
                    }
                    if (x < y) {
                        return -1;
                    }
                    if (y < x) {
                        return 1;
                    }
                    return 0;
                }
                var ONLY_ENUMERABLE = undefined;
                var kStrict = true;
                var kLoose = false;
                var kNoIterator = 0;
                var kIsArray = 1;
                var kIsSet = 2;
                var kIsMap = 3; // Check if they have the same source and flags
                function areSimilarRegExps(a, b) {
                    return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
                }
                function areSimilarFloatArrays(a, b) {
                    if (a.byteLength !== b.byteLength) {
                        return false;
                    }
                    for(var offset = 0; offset < a.byteLength; offset++){
                        if (a[offset] !== b[offset]) {
                            return false;
                        }
                    }
                    return true;
                }
                function areSimilarTypedArrays(a, b) {
                    if (a.byteLength !== b.byteLength) {
                        return false;
                    }
                    return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
                }
                function areEqualArrayBuffers(buf1, buf2) {
                    return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
                }
                function isEqualBoxedPrimitive(val1, val2) {
                    if (isNumberObject(val1)) {
                        return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
                    }
                    if (isStringObject(val1)) {
                        return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
                    }
                    if (isBooleanObject(val1)) {
                        return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
                    }
                    if (isBigIntObject(val1)) {
                        return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
                    }
                    return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
                } // Notes: Type tags are historical [[Class]] properties that can be set by
                // FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
                // and retrieved using Object.prototype.toString.call(obj) in JS
                // See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
                // for a list of tags pre-defined in the spec.
                // There are some unspecified tags in the wild too (e.g. typed array tags).
                // Since tags can be altered, they only serve fast failures
                //
                // Typed arrays and buffers are checked by comparing the content in their
                // underlying ArrayBuffer. This optimization requires that it's
                // reasonable to interpret their underlying memory in the same way,
                // which is checked by comparing their type tags.
                // (e.g. a Uint8Array and a Uint16Array with the same memory content
                // could still be different because they will be interpreted differently).
                //
                // For strict comparison, objects should have
                // a) The same built-in type tags
                // b) The same prototypes.
                function innerDeepEqual(val1, val2, strict, memos) {
                    // All identical values are equivalent, as determined by ===.
                    if (val1 === val2) {
                        if (val1 !== 0) return true;
                        return strict ? objectIs(val1, val2) : true;
                    } // Check more closely if val1 and val2 are equal.
                    if (strict) {
                        if (_typeof(val1) !== 'object') {
                            return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
                        }
                        if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
                            return false;
                        }
                        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
                            return false;
                        }
                    } else {
                        if (val1 === null || _typeof(val1) !== 'object') {
                            if (val2 === null || _typeof(val2) !== 'object') {
                                // eslint-disable-next-line eqeqeq
                                return val1 == val2;
                            }
                            return false;
                        }
                        if (val2 === null || _typeof(val2) !== 'object') {
                            return false;
                        }
                    }
                    var val1Tag = objectToString(val1);
                    var val2Tag = objectToString(val2);
                    if (val1Tag !== val2Tag) {
                        return false;
                    }
                    if (Array.isArray(val1)) {
                        // Check for sparse arrays and general fast path
                        if (val1.length !== val2.length) {
                            return false;
                        }
                        var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
                        var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
                        if (keys1.length !== keys2.length) {
                            return false;
                        }
                        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
                    } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
                    // wan't to early return out of the rest of the checks. However we can check
                    // if the second value is one of these values and the first isn't.
                    if (val1Tag === '[object Object]') {
                        // return keyCheck(val1, val2, strict, memos, kNoIterator);
                        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
                            return false;
                        }
                    }
                    if (isDate(val1)) {
                        if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
                            return false;
                        }
                    } else if (isRegExp(val1)) {
                        if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
                            return false;
                        }
                    } else if (isNativeError(val1) || val1 instanceof Error) {
                        // Do not compare the stack as it might differ even though the error itself
                        // is otherwise identical.
                        if (val1.message !== val2.message || val1.name !== val2.name) {
                            return false;
                        }
                    } else if (isArrayBufferView(val1)) {
                        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
                            if (!areSimilarFloatArrays(val1, val2)) {
                                return false;
                            }
                        } else if (!areSimilarTypedArrays(val1, val2)) {
                            return false;
                        } // Buffer.compare returns true, so val1.length === val2.length. If they both
                        // only contain numeric keys, we don't need to exam further than checking
                        // the symbols.
                        var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
                        var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
                        if (_keys.length !== _keys2.length) {
                            return false;
                        }
                        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
                    } else if (isSet(val1)) {
                        if (!isSet(val2) || val1.size !== val2.size) {
                            return false;
                        }
                        return keyCheck(val1, val2, strict, memos, kIsSet);
                    } else if (isMap(val1)) {
                        if (!isMap(val2) || val1.size !== val2.size) {
                            return false;
                        }
                        return keyCheck(val1, val2, strict, memos, kIsMap);
                    } else if (isAnyArrayBuffer(val1)) {
                        if (!areEqualArrayBuffers(val1, val2)) {
                            return false;
                        }
                    } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
                        return false;
                    }
                    return keyCheck(val1, val2, strict, memos, kNoIterator);
                }
                function getEnumerables(val, keys) {
                    return keys.filter(function(k) {
                        return propertyIsEnumerable(val, k);
                    });
                }
                function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
                    // For all remaining Object pairs, including Array, objects and Maps,
                    // equivalence is determined by having:
                    // a) The same number of owned enumerable properties
                    // b) The same set of keys/indexes (although not necessarily the same order)
                    // c) Equivalent values for every corresponding key/index
                    // d) For Sets and Maps, equal contents
                    // Note: this accounts for both named and indexed properties on Arrays.
                    if (arguments.length === 5) {
                        aKeys = Object.keys(val1);
                        var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.
                        if (aKeys.length !== bKeys.length) {
                            return false;
                        }
                    } // Cheap key test
                    var i = 0;
                    for(; i < aKeys.length; i++){
                        if (!hasOwnProperty(val2, aKeys[i])) {
                            return false;
                        }
                    }
                    if (strict && arguments.length === 5) {
                        var symbolKeysA = objectGetOwnPropertySymbols(val1);
                        if (symbolKeysA.length !== 0) {
                            var count = 0;
                            for(i = 0; i < symbolKeysA.length; i++){
                                var key = symbolKeysA[i];
                                if (propertyIsEnumerable(val1, key)) {
                                    if (!propertyIsEnumerable(val2, key)) {
                                        return false;
                                    }
                                    aKeys.push(key);
                                    count++;
                                } else if (propertyIsEnumerable(val2, key)) {
                                    return false;
                                }
                            }
                            var symbolKeysB = objectGetOwnPropertySymbols(val2);
                            if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
                                return false;
                            }
                        } else {
                            var _symbolKeysB = objectGetOwnPropertySymbols(val2);
                            if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
                                return false;
                            }
                        }
                    }
                    if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
                        return true;
                    } // Use memos to handle cycles.
                    if (memos === undefined) {
                        memos = {
                            val1: new Map(),
                            val2: new Map(),
                            position: 0
                        };
                    } else {
                        // We prevent up to two map.has(x) calls by directly retrieving the value
                        // and checking for undefined. The map can only contain numbers, so it is
                        // safe to check for undefined only.
                        var val2MemoA = memos.val1.get(val1);
                        if (val2MemoA !== undefined) {
                            var val2MemoB = memos.val2.get(val2);
                            if (val2MemoB !== undefined) {
                                return val2MemoA === val2MemoB;
                            }
                        }
                        memos.position++;
                    }
                    memos.val1.set(val1, memos.position);
                    memos.val2.set(val2, memos.position);
                    var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
                    memos.val1.delete(val1);
                    memos.val2.delete(val2);
                    return areEq;
                }
                function setHasEqualElement(set, val1, strict, memo) {
                    // Go looking.
                    var setValues = arrayFromSet(set);
                    for(var i = 0; i < setValues.length; i++){
                        var val2 = setValues[i];
                        if (innerDeepEqual(val1, val2, strict, memo)) {
                            // Remove the matching element to make sure we do not check that again.
                            set.delete(val2);
                            return true;
                        }
                    }
                    return false;
                } // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
                // Sadly it is not possible to detect corresponding values properly in case the
                // type is a string, number, bigint or boolean. The reason is that those values
                // can match lots of different string values (e.g., 1n == '+00001').
                function findLooseMatchingPrimitives(prim) {
                    switch(_typeof(prim)){
                        case 'undefined':
                            return null;
                        case 'object':
                            // Only pass in null as object!
                            return undefined;
                        case 'symbol':
                            return false;
                        case 'string':
                            prim = +prim;
                        // Loose equal entries exist only if the string is possible to convert to
                        // a regular number and not NaN.
                        // Fall through
                        case 'number':
                            if (numberIsNaN(prim)) {
                                return false;
                            }
                    }
                    return true;
                }
                function setMightHaveLoosePrim(a, b, prim) {
                    var altValue = findLooseMatchingPrimitives(prim);
                    if (altValue != null) return altValue;
                    return b.has(altValue) && !a.has(altValue);
                }
                function mapMightHaveLoosePrim(a, b, prim, item, memo) {
                    var altValue = findLooseMatchingPrimitives(prim);
                    if (altValue != null) {
                        return altValue;
                    }
                    var curB = b.get(altValue);
                    if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
                        return false;
                    }
                    return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
                }
                function setEquiv(a, b, strict, memo) {
                    // This is a lazily initiated Set of entries which have to be compared
                    // pairwise.
                    var set = null;
                    var aValues = arrayFromSet(a);
                    for(var i = 0; i < aValues.length; i++){
                        var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
                        // heavy sets but it is a minor slow down for primitives. As they are fast
                        // to check this improves the worst case scenario instead.
                        if (_typeof(val) === 'object' && val !== null) {
                            if (set === null) {
                                set = new Set();
                            } // If the specified value doesn't exist in the second set its an not null
                            // object (or non strict only: a not matching primitive) we'll need to go
                            // hunting for something thats deep-(strict-)equal to it. To make this
                            // O(n log n) complexity we have to copy these values in a new set first.
                            set.add(val);
                        } else if (!b.has(val)) {
                            if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.
                            if (!setMightHaveLoosePrim(a, b, val)) {
                                return false;
                            }
                            if (set === null) {
                                set = new Set();
                            }
                            set.add(val);
                        }
                    }
                    if (set !== null) {
                        var bValues = arrayFromSet(b);
                        for(var _i = 0; _i < bValues.length; _i++){
                            var _val = bValues[_i]; // We have to check if a primitive value is already
                            // matching and only if it's not, go hunting for it.
                            if (_typeof(_val) === 'object' && _val !== null) {
                                if (!setHasEqualElement(set, _val, strict, memo)) return false;
                            } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
                                return false;
                            }
                        }
                        return set.size === 0;
                    }
                    return true;
                }
                function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
                    // To be able to handle cases like:
                    //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
                    // ... we need to consider *all* matching keys, not just the first we find.
                    var setValues = arrayFromSet(set);
                    for(var i = 0; i < setValues.length; i++){
                        var key2 = setValues[i];
                        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
                            set.delete(key2);
                            return true;
                        }
                    }
                    return false;
                }
                function mapEquiv(a, b, strict, memo) {
                    var set = null;
                    var aEntries = arrayFromMap(a);
                    for(var i = 0; i < aEntries.length; i++){
                        var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
                        if (_typeof(key) === 'object' && key !== null) {
                            if (set === null) {
                                set = new Set();
                            }
                            set.add(key);
                        } else {
                            // By directly retrieving the value we prevent another b.has(key) check in
                            // almost all possible cases.
                            var item2 = b.get(key);
                            if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
                                if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
                                // keys.
                                if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
                                if (set === null) {
                                    set = new Set();
                                }
                                set.add(key);
                            }
                        }
                    }
                    if (set !== null) {
                        var bEntries = arrayFromMap(b);
                        for(var _i2 = 0; _i2 < bEntries.length; _i2++){
                            var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), key = _bEntries$_i[0], item = _bEntries$_i[1];
                            if (_typeof(key) === 'object' && key !== null) {
                                if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
                            } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
                                return false;
                            }
                        }
                        return set.size === 0;
                    }
                    return true;
                }
                function objEquiv(a, b, strict, keys, memos, iterationType) {
                    // Sets and maps don't have their entries accessible via normal object
                    // properties.
                    var i = 0;
                    if (iterationType === kIsSet) {
                        if (!setEquiv(a, b, strict, memos)) {
                            return false;
                        }
                    } else if (iterationType === kIsMap) {
                        if (!mapEquiv(a, b, strict, memos)) {
                            return false;
                        }
                    } else if (iterationType === kIsArray) {
                        for(; i < a.length; i++){
                            if (hasOwnProperty(a, i)) {
                                if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
                                    return false;
                                }
                            } else if (hasOwnProperty(b, i)) {
                                return false;
                            } else {
                                // Array is sparse.
                                var keysA = Object.keys(a);
                                for(; i < keysA.length; i++){
                                    var key = keysA[i];
                                    if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
                                        return false;
                                    }
                                }
                                if (keysA.length !== Object.keys(b).length) {
                                    return false;
                                }
                                return true;
                            }
                        }
                    } // The pair must have equivalent values for every corresponding key.
                    // Possibly expensive deep test:
                    for(i = 0; i < keys.length; i++){
                        var _key = keys[i];
                        if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
                            return false;
                        }
                    }
                    return true;
                }
                function isDeepEqual(val1, val2) {
                    return innerDeepEqual(val1, val2, kLoose);
                }
                function isDeepStrictEqual(val1, val2) {
                    return innerDeepEqual(val1, val2, kStrict);
                }
                module1.exports = {
                    isDeepEqual: isDeepEqual,
                    isDeepStrictEqual: isDeepStrictEqual
                };
            /***/ },
            /***/ 9818: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_107933__)=>{
                "use strict";
                var GetIntrinsic = __nested_webpack_require_107933__(528);
                var callBind = __nested_webpack_require_107933__(8498);
                var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));
                module1.exports = function callBoundIntrinsic(name, allowMissing) {
                    var intrinsic = GetIntrinsic(name, !!allowMissing);
                    if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
                        return callBind(intrinsic);
                    }
                    return intrinsic;
                };
            /***/ },
            /***/ 8498: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_108660__)=>{
                "use strict";
                var bind = __nested_webpack_require_108660__(9138);
                var GetIntrinsic = __nested_webpack_require_108660__(528);
                var $apply = GetIntrinsic('%Function.prototype.apply%');
                var $call = GetIntrinsic('%Function.prototype.call%');
                var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);
                var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
                var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
                var $max = GetIntrinsic('%Math.max%');
                if ($defineProperty) {
                    try {
                        $defineProperty({}, 'a', {
                            value: 1
                        });
                    } catch (e) {
                        // IE 8 has a broken defineProperty
                        $defineProperty = null;
                    }
                }
                module1.exports = function callBind(originalFunction) {
                    var func = $reflectApply(bind, $call, arguments);
                    if ($gOPD && $defineProperty) {
                        var desc = $gOPD(func, 'length');
                        if (desc.configurable) {
                            // original length, plus the receiver, minus any additional arguments (after the receiver)
                            $defineProperty(func, 'length', {
                                value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
                            });
                        }
                    }
                    return func;
                };
                var applyBind = function applyBind() {
                    return $reflectApply(bind, $apply, arguments);
                };
                if ($defineProperty) {
                    $defineProperty(module1.exports, 'apply', {
                        value: applyBind
                    });
                } else {
                    module1.exports.apply = applyBind;
                }
            /***/ },
            /***/ 4364: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_110873__)=>{
                /*global window, global*/ var util = __nested_webpack_require_110873__(6827);
                var assert = __nested_webpack_require_110873__(6093);
                function now() {
                    return new Date().getTime();
                }
                var slice = Array.prototype.slice;
                var console;
                var times = {};
                if (typeof __nested_webpack_require_110873__.g !== "undefined" && __nested_webpack_require_110873__.g.console) {
                    console = __nested_webpack_require_110873__.g.console;
                } else if (typeof window !== "undefined" && window.console) {
                    console = window.console;
                } else {
                    console = {};
                }
                var functions = [
                    [
                        log,
                        "log"
                    ],
                    [
                        info,
                        "info"
                    ],
                    [
                        warn,
                        "warn"
                    ],
                    [
                        error,
                        "error"
                    ],
                    [
                        time,
                        "time"
                    ],
                    [
                        timeEnd,
                        "timeEnd"
                    ],
                    [
                        trace,
                        "trace"
                    ],
                    [
                        dir,
                        "dir"
                    ],
                    [
                        consoleAssert,
                        "assert"
                    ]
                ];
                for(var i = 0; i < functions.length; i++){
                    var tuple = functions[i];
                    var f = tuple[0];
                    var name = tuple[1];
                    if (!console[name]) {
                        console[name] = f;
                    }
                }
                module1.exports = console;
                function log() {}
                function info() {
                    console.log.apply(console, arguments);
                }
                function warn() {
                    console.log.apply(console, arguments);
                }
                function error() {
                    console.warn.apply(console, arguments);
                }
                function time(label) {
                    times[label] = now();
                }
                function timeEnd(label) {
                    var time = times[label];
                    if (!time) {
                        throw new Error("No such label: " + label);
                    }
                    delete times[label];
                    var duration = now() - time;
                    console.log(label + ": " + duration + "ms");
                }
                function trace() {
                    var err = new Error();
                    err.name = "Trace";
                    err.message = util.format.apply(null, arguments);
                    console.error(err.stack);
                }
                function dir(object) {
                    console.log(util.inspect(object) + "\n");
                }
                function consoleAssert(expression) {
                    if (!expression) {
                        var arr = slice.call(arguments, 1);
                        assert.ok(false, util.format.apply(null, arr));
                    }
                }
            /***/ },
            /***/ 1857: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_114556__)=>{
                "use strict";
                var keys = __nested_webpack_require_114556__(9228);
                var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
                var toStr = Object.prototype.toString;
                var concat = Array.prototype.concat;
                var origDefineProperty = Object.defineProperty;
                var isFunction = function(fn) {
                    return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
                };
                var hasPropertyDescriptors = __nested_webpack_require_114556__(7239)();
                var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;
                var defineProperty = function(object, name, value, predicate) {
                    if (name in object) {
                        if (predicate === true) {
                            if (object[name] === value) {
                                return;
                            }
                        } else if (!isFunction(predicate) || !predicate()) {
                            return;
                        }
                    }
                    if (supportsDescriptors) {
                        origDefineProperty(object, name, {
                            configurable: true,
                            enumerable: false,
                            value: value,
                            writable: true
                        });
                    } else {
                        object[name] = value; // eslint-disable-line no-param-reassign
                    }
                };
                var defineProperties = function(object, map) {
                    var predicates = arguments.length > 2 ? arguments[2] : {};
                    var props = keys(map);
                    if (hasSymbols) {
                        props = concat.call(props, Object.getOwnPropertySymbols(map));
                    }
                    for(var i = 0; i < props.length; i += 1){
                        defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
                    }
                };
                defineProperties.supportsDescriptors = !!supportsDescriptors;
                module1.exports = defineProperties;
            /***/ },
            /***/ 3046: /***/ (module1)=>{
                "use strict";
                /**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */ function assign(target, firstSource) {
                    if (target === undefined || target === null) {
                        throw new TypeError('Cannot convert first argument to object');
                    }
                    var to = Object(target);
                    for(var i = 1; i < arguments.length; i++){
                        var nextSource = arguments[i];
                        if (nextSource === undefined || nextSource === null) {
                            continue;
                        }
                        var keysArray = Object.keys(Object(nextSource));
                        for(var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++){
                            var nextKey = keysArray[nextIndex];
                            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                            if (desc !== undefined && desc.enumerable) {
                                to[nextKey] = nextSource[nextKey];
                            }
                        }
                    }
                    return to;
                }
                function polyfill() {
                    if (!Object.assign) {
                        Object.defineProperty(Object, 'assign', {
                            enumerable: false,
                            configurable: true,
                            writable: true,
                            value: assign
                        });
                    }
                }
                module1.exports = {
                    assign: assign,
                    polyfill: polyfill
                };
            /***/ },
            /***/ 705: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_118851__)=>{
                "use strict";
                var isCallable = __nested_webpack_require_118851__(9617);
                var toStr = Object.prototype.toString;
                var hasOwnProperty = Object.prototype.hasOwnProperty;
                var forEachArray = function forEachArray(array, iterator, receiver) {
                    for(var i = 0, len = array.length; i < len; i++){
                        if (hasOwnProperty.call(array, i)) {
                            if (receiver == null) {
                                iterator(array[i], i, array);
                            } else {
                                iterator.call(receiver, array[i], i, array);
                            }
                        }
                    }
                };
                var forEachString = function forEachString(string, iterator, receiver) {
                    for(var i = 0, len = string.length; i < len; i++){
                        // no such thing as a sparse string.
                        if (receiver == null) {
                            iterator(string.charAt(i), i, string);
                        } else {
                            iterator.call(receiver, string.charAt(i), i, string);
                        }
                    }
                };
                var forEachObject = function forEachObject(object, iterator, receiver) {
                    for(var k in object){
                        if (hasOwnProperty.call(object, k)) {
                            if (receiver == null) {
                                iterator(object[k], k, object);
                            } else {
                                iterator.call(receiver, object[k], k, object);
                            }
                        }
                    }
                };
                var forEach = function forEach(list, iterator, thisArg) {
                    if (!isCallable(iterator)) {
                        throw new TypeError('iterator must be a function');
                    }
                    var receiver;
                    if (arguments.length >= 3) {
                        receiver = thisArg;
                    }
                    if (toStr.call(list) === '[object Array]') {
                        forEachArray(list, iterator, receiver);
                    } else if (typeof list === 'string') {
                        forEachString(list, iterator, receiver);
                    } else {
                        forEachObject(list, iterator, receiver);
                    }
                };
                module1.exports = forEach;
            /***/ },
            /***/ 8794: /***/ (module1)=>{
                "use strict";
                /* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
                var slice = Array.prototype.slice;
                var toStr = Object.prototype.toString;
                var funcType = '[object Function]';
                module1.exports = function bind(that) {
                    var target = this;
                    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
                        throw new TypeError(ERROR_MESSAGE + target);
                    }
                    var args = slice.call(arguments, 1);
                    var bound;
                    var binder = function() {
                        if (this instanceof bound) {
                            var result = target.apply(this, args.concat(slice.call(arguments)));
                            if (Object(result) === result) {
                                return result;
                            }
                            return this;
                        } else {
                            return target.apply(that, args.concat(slice.call(arguments)));
                        }
                    };
                    var boundLength = Math.max(0, target.length - args.length);
                    var boundArgs = [];
                    for(var i = 0; i < boundLength; i++){
                        boundArgs.push('$' + i);
                    }
                    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);
                    if (target.prototype) {
                        var Empty = function Empty() {};
                        Empty.prototype = target.prototype;
                        bound.prototype = new Empty();
                        Empty.prototype = null;
                    }
                    return bound;
                };
            /***/ },
            /***/ 9138: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_123577__)=>{
                "use strict";
                var implementation = __nested_webpack_require_123577__(8794);
                module1.exports = Function.prototype.bind || implementation;
            /***/ },
            /***/ 528: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_123858__)=>{
                "use strict";
                var undefined1;
                var $SyntaxError = SyntaxError;
                var $Function = Function;
                var $TypeError = TypeError;
                // eslint-disable-next-line consistent-return
                var getEvalledConstructor = function(expressionSyntax) {
                    try {
                        return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
                    } catch (e) {}
                };
                var $gOPD = Object.getOwnPropertyDescriptor;
                if ($gOPD) {
                    try {
                        $gOPD({}, '');
                    } catch (e) {
                        $gOPD = null; // this is IE 8, which has a broken gOPD
                    }
                }
                var throwTypeError = function() {
                    throw new $TypeError();
                };
                var ThrowTypeError = $gOPD ? function() {
                    try {
                        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
                        arguments.callee; // IE 8 does not throw here
                        return throwTypeError;
                    } catch (calleeThrows) {
                        try {
                            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
                            return $gOPD(arguments, 'callee').get;
                        } catch (gOPDthrows) {
                            return throwTypeError;
                        }
                    }
                }() : throwTypeError;
                var hasSymbols = __nested_webpack_require_123858__(3558)();
                var hasProto = __nested_webpack_require_123858__(6869)();
                var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
                    return x.__proto__;
                } // eslint-disable-line no-proto
                 : null);
                var needsEval = {};
                var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined1 : getProto(Uint8Array);
                var INTRINSICS = {
                    '%AggregateError%': typeof AggregateError === 'undefined' ? undefined1 : AggregateError,
                    '%Array%': Array,
                    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined1 : ArrayBuffer,
                    '%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined1,
                    '%AsyncFromSyncIteratorPrototype%': undefined1,
                    '%AsyncFunction%': needsEval,
                    '%AsyncGenerator%': needsEval,
                    '%AsyncGeneratorFunction%': needsEval,
                    '%AsyncIteratorPrototype%': needsEval,
                    '%Atomics%': typeof Atomics === 'undefined' ? undefined1 : Atomics,
                    '%BigInt%': typeof BigInt === 'undefined' ? undefined1 : BigInt,
                    '%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined1 : BigInt64Array,
                    '%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined1 : BigUint64Array,
                    '%Boolean%': Boolean,
                    '%DataView%': typeof DataView === 'undefined' ? undefined1 : DataView,
                    '%Date%': Date,
                    '%decodeURI%': decodeURI,
                    '%decodeURIComponent%': decodeURIComponent,
                    '%encodeURI%': encodeURI,
                    '%encodeURIComponent%': encodeURIComponent,
                    '%Error%': Error,
                    '%eval%': eval,
                    '%EvalError%': EvalError,
                    '%Float32Array%': typeof Float32Array === 'undefined' ? undefined1 : Float32Array,
                    '%Float64Array%': typeof Float64Array === 'undefined' ? undefined1 : Float64Array,
                    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined1 : FinalizationRegistry,
                    '%Function%': $Function,
                    '%GeneratorFunction%': needsEval,
                    '%Int8Array%': typeof Int8Array === 'undefined' ? undefined1 : Int8Array,
                    '%Int16Array%': typeof Int16Array === 'undefined' ? undefined1 : Int16Array,
                    '%Int32Array%': typeof Int32Array === 'undefined' ? undefined1 : Int32Array,
                    '%isFinite%': isFinite,
                    '%isNaN%': isNaN,
                    '%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined1,
                    '%JSON%': typeof JSON === 'object' ? JSON : undefined1,
                    '%Map%': typeof Map === 'undefined' ? undefined1 : Map,
                    '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined1 : getProto(new Map()[Symbol.iterator]()),
                    '%Math%': Math,
                    '%Number%': Number,
                    '%Object%': Object,
                    '%parseFloat%': parseFloat,
                    '%parseInt%': parseInt,
                    '%Promise%': typeof Promise === 'undefined' ? undefined1 : Promise,
                    '%Proxy%': typeof Proxy === 'undefined' ? undefined1 : Proxy,
                    '%RangeError%': RangeError,
                    '%ReferenceError%': ReferenceError,
                    '%Reflect%': typeof Reflect === 'undefined' ? undefined1 : Reflect,
                    '%RegExp%': RegExp,
                    '%Set%': typeof Set === 'undefined' ? undefined1 : Set,
                    '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined1 : getProto(new Set()[Symbol.iterator]()),
                    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined1 : SharedArrayBuffer,
                    '%String%': String,
                    '%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined1,
                    '%Symbol%': hasSymbols ? Symbol : undefined1,
                    '%SyntaxError%': $SyntaxError,
                    '%ThrowTypeError%': ThrowTypeError,
                    '%TypedArray%': TypedArray,
                    '%TypeError%': $TypeError,
                    '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined1 : Uint8Array,
                    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined1 : Uint8ClampedArray,
                    '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined1 : Uint16Array,
                    '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined1 : Uint32Array,
                    '%URIError%': URIError,
                    '%WeakMap%': typeof WeakMap === 'undefined' ? undefined1 : WeakMap,
                    '%WeakRef%': typeof WeakRef === 'undefined' ? undefined1 : WeakRef,
                    '%WeakSet%': typeof WeakSet === 'undefined' ? undefined1 : WeakSet
                };
                if (getProto) {
                    try {
                        null.error; // eslint-disable-line no-unused-expressions
                    } catch (e) {
                        // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
                        var errorProto = getProto(getProto(e));
                        INTRINSICS['%Error.prototype%'] = errorProto;
                    }
                }
                var doEval = function doEval(name) {
                    var value;
                    if (name === '%AsyncFunction%') {
                        value = getEvalledConstructor('async function () {}');
                    } else if (name === '%GeneratorFunction%') {
                        value = getEvalledConstructor('function* () {}');
                    } else if (name === '%AsyncGeneratorFunction%') {
                        value = getEvalledConstructor('async function* () {}');
                    } else if (name === '%AsyncGenerator%') {
                        var fn = doEval('%AsyncGeneratorFunction%');
                        if (fn) {
                            value = fn.prototype;
                        }
                    } else if (name === '%AsyncIteratorPrototype%') {
                        var gen = doEval('%AsyncGenerator%');
                        if (gen && getProto) {
                            value = getProto(gen.prototype);
                        }
                    }
                    INTRINSICS[name] = value;
                    return value;
                };
                var LEGACY_ALIASES = {
                    '%ArrayBufferPrototype%': [
                        'ArrayBuffer',
                        'prototype'
                    ],
                    '%ArrayPrototype%': [
                        'Array',
                        'prototype'
                    ],
                    '%ArrayProto_entries%': [
                        'Array',
                        'prototype',
                        'entries'
                    ],
                    '%ArrayProto_forEach%': [
                        'Array',
                        'prototype',
                        'forEach'
                    ],
                    '%ArrayProto_keys%': [
                        'Array',
                        'prototype',
                        'keys'
                    ],
                    '%ArrayProto_values%': [
                        'Array',
                        'prototype',
                        'values'
                    ],
                    '%AsyncFunctionPrototype%': [
                        'AsyncFunction',
                        'prototype'
                    ],
                    '%AsyncGenerator%': [
                        'AsyncGeneratorFunction',
                        'prototype'
                    ],
                    '%AsyncGeneratorPrototype%': [
                        'AsyncGeneratorFunction',
                        'prototype',
                        'prototype'
                    ],
                    '%BooleanPrototype%': [
                        'Boolean',
                        'prototype'
                    ],
                    '%DataViewPrototype%': [
                        'DataView',
                        'prototype'
                    ],
                    '%DatePrototype%': [
                        'Date',
                        'prototype'
                    ],
                    '%ErrorPrototype%': [
                        'Error',
                        'prototype'
                    ],
                    '%EvalErrorPrototype%': [
                        'EvalError',
                        'prototype'
                    ],
                    '%Float32ArrayPrototype%': [
                        'Float32Array',
                        'prototype'
                    ],
                    '%Float64ArrayPrototype%': [
                        'Float64Array',
                        'prototype'
                    ],
                    '%FunctionPrototype%': [
                        'Function',
                        'prototype'
                    ],
                    '%Generator%': [
                        'GeneratorFunction',
                        'prototype'
                    ],
                    '%GeneratorPrototype%': [
                        'GeneratorFunction',
                        'prototype',
                        'prototype'
                    ],
                    '%Int8ArrayPrototype%': [
                        'Int8Array',
                        'prototype'
                    ],
                    '%Int16ArrayPrototype%': [
                        'Int16Array',
                        'prototype'
                    ],
                    '%Int32ArrayPrototype%': [
                        'Int32Array',
                        'prototype'
                    ],
                    '%JSONParse%': [
                        'JSON',
                        'parse'
                    ],
                    '%JSONStringify%': [
                        'JSON',
                        'stringify'
                    ],
                    '%MapPrototype%': [
                        'Map',
                        'prototype'
                    ],
                    '%NumberPrototype%': [
                        'Number',
                        'prototype'
                    ],
                    '%ObjectPrototype%': [
                        'Object',
                        'prototype'
                    ],
                    '%ObjProto_toString%': [
                        'Object',
                        'prototype',
                        'toString'
                    ],
                    '%ObjProto_valueOf%': [
                        'Object',
                        'prototype',
                        'valueOf'
                    ],
                    '%PromisePrototype%': [
                        'Promise',
                        'prototype'
                    ],
                    '%PromiseProto_then%': [
                        'Promise',
                        'prototype',
                        'then'
                    ],
                    '%Promise_all%': [
                        'Promise',
                        'all'
                    ],
                    '%Promise_reject%': [
                        'Promise',
                        'reject'
                    ],
                    '%Promise_resolve%': [
                        'Promise',
                        'resolve'
                    ],
                    '%RangeErrorPrototype%': [
                        'RangeError',
                        'prototype'
                    ],
                    '%ReferenceErrorPrototype%': [
                        'ReferenceError',
                        'prototype'
                    ],
                    '%RegExpPrototype%': [
                        'RegExp',
                        'prototype'
                    ],
                    '%SetPrototype%': [
                        'Set',
                        'prototype'
                    ],
                    '%SharedArrayBufferPrototype%': [
                        'SharedArrayBuffer',
                        'prototype'
                    ],
                    '%StringPrototype%': [
                        'String',
                        'prototype'
                    ],
                    '%SymbolPrototype%': [
                        'Symbol',
                        'prototype'
                    ],
                    '%SyntaxErrorPrototype%': [
                        'SyntaxError',
                        'prototype'
                    ],
                    '%TypedArrayPrototype%': [
                        'TypedArray',
                        'prototype'
                    ],
                    '%TypeErrorPrototype%': [
                        'TypeError',
                        'prototype'
                    ],
                    '%Uint8ArrayPrototype%': [
                        'Uint8Array',
                        'prototype'
                    ],
                    '%Uint8ClampedArrayPrototype%': [
                        'Uint8ClampedArray',
                        'prototype'
                    ],
                    '%Uint16ArrayPrototype%': [
                        'Uint16Array',
                        'prototype'
                    ],
                    '%Uint32ArrayPrototype%': [
                        'Uint32Array',
                        'prototype'
                    ],
                    '%URIErrorPrototype%': [
                        'URIError',
                        'prototype'
                    ],
                    '%WeakMapPrototype%': [
                        'WeakMap',
                        'prototype'
                    ],
                    '%WeakSetPrototype%': [
                        'WeakSet',
                        'prototype'
                    ]
                };
                var bind = __nested_webpack_require_123858__(9138);
                var hasOwn = __nested_webpack_require_123858__(2571);
                var $concat = bind.call(Function.call, Array.prototype.concat);
                var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
                var $replace = bind.call(Function.call, String.prototype.replace);
                var $strSlice = bind.call(Function.call, String.prototype.slice);
                var $exec = bind.call(Function.call, RegExp.prototype.exec);
                /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
                var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
                var stringToPath = function stringToPath(string) {
                    var first = $strSlice(string, 0, 1);
                    var last = $strSlice(string, -1);
                    if (first === '%' && last !== '%') {
                        throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
                    } else if (last === '%' && first !== '%') {
                        throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
                    }
                    var result = [];
                    $replace(string, rePropName, function(match, number, quote, subString) {
                        result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
                    });
                    return result;
                };
                /* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
                    var intrinsicName = name;
                    var alias;
                    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
                        alias = LEGACY_ALIASES[intrinsicName];
                        intrinsicName = '%' + alias[0] + '%';
                    }
                    if (hasOwn(INTRINSICS, intrinsicName)) {
                        var value = INTRINSICS[intrinsicName];
                        if (value === needsEval) {
                            value = doEval(intrinsicName);
                        }
                        if (typeof value === 'undefined' && !allowMissing) {
                            throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
                        }
                        return {
                            alias: alias,
                            name: intrinsicName,
                            value: value
                        };
                    }
                    throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
                };
                module1.exports = function GetIntrinsic(name, allowMissing) {
                    if (typeof name !== 'string' || name.length === 0) {
                        throw new $TypeError('intrinsic name must be a non-empty string');
                    }
                    if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
                        throw new $TypeError('"allowMissing" argument must be a boolean');
                    }
                    if ($exec(/^%?[^%]*%?$/, name) === null) {
                        throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
                    }
                    var parts = stringToPath(name);
                    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
                    var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
                    var intrinsicRealName = intrinsic.name;
                    var value = intrinsic.value;
                    var skipFurtherCaching = false;
                    var alias = intrinsic.alias;
                    if (alias) {
                        intrinsicBaseName = alias[0];
                        $spliceApply(parts, $concat([
                            0,
                            1
                        ], alias));
                    }
                    for(var i = 1, isOwn = true; i < parts.length; i += 1){
                        var part = parts[i];
                        var first = $strSlice(part, 0, 1);
                        var last = $strSlice(part, -1);
                        if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
                            throw new $SyntaxError('property names with quotes must have matching quotes');
                        }
                        if (part === 'constructor' || !isOwn) {
                            skipFurtherCaching = true;
                        }
                        intrinsicBaseName += '.' + part;
                        intrinsicRealName = '%' + intrinsicBaseName + '%';
                        if (hasOwn(INTRINSICS, intrinsicRealName)) {
                            value = INTRINSICS[intrinsicRealName];
                        } else if (value != null) {
                            if (!(part in value)) {
                                if (!allowMissing) {
                                    throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
                                }
                                return void undefined1;
                            }
                            if ($gOPD && i + 1 >= parts.length) {
                                var desc = $gOPD(value, part);
                                isOwn = !!desc;
                                // By convention, when a data property is converted to an accessor
                                // property to emulate a data property that does not suffer from
                                // the override mistake, that accessor's getter is marked with
                                // an `originalValue` property. Here, when we detect this, we
                                // uphold the illusion by pretending to see that original data
                                // property, i.e., returning the value rather than the getter
                                // itself.
                                if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
                                    value = desc.get;
                                } else {
                                    value = value[part];
                                }
                            } else {
                                isOwn = hasOwn(value, part);
                                value = value[part];
                            }
                            if (isOwn && !skipFurtherCaching) {
                                INTRINSICS[intrinsicRealName] = value;
                            }
                        }
                    }
                    return value;
                };
            /***/ },
            /***/ 9336: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_147326__)=>{
                "use strict";
                var GetIntrinsic = __nested_webpack_require_147326__(528);
                var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
                if ($gOPD) {
                    try {
                        $gOPD([], 'length');
                    } catch (e) {
                        // IE 8 has a broken gOPD
                        $gOPD = null;
                    }
                }
                module1.exports = $gOPD;
            /***/ },
            /***/ 7239: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_147916__)=>{
                "use strict";
                var GetIntrinsic = __nested_webpack_require_147916__(528);
                var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
                var hasPropertyDescriptors = function hasPropertyDescriptors() {
                    if ($defineProperty) {
                        try {
                            $defineProperty({}, 'a', {
                                value: 1
                            });
                            return true;
                        } catch (e) {
                            // IE 8 has a broken defineProperty
                            return false;
                        }
                    }
                    return false;
                };
                hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
                    // node v0.6 has a bug where array lengths can be Set but not Defined
                    if (!hasPropertyDescriptors()) {
                        return null;
                    }
                    try {
                        return $defineProperty([], 'length', {
                            value: 1
                        }).length !== 1;
                    } catch (e) {
                        // In Firefox 4-22, defining length on an array throws an exception.
                        return true;
                    }
                };
                module1.exports = hasPropertyDescriptors;
            /***/ },
            /***/ 6869: /***/ (module1)=>{
                "use strict";
                var test = {
                    foo: {}
                };
                var $Object = Object;
                module1.exports = function hasProto() {
                    return ({
                        __proto__: test
                    }).foo === test.foo && !(({
                        __proto__: null
                    }) instanceof $Object);
                };
            /***/ },
            /***/ 3558: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_149990__)=>{
                "use strict";
                var origSymbol = typeof Symbol !== 'undefined' && Symbol;
                var hasSymbolSham = __nested_webpack_require_149990__(2908);
                module1.exports = function hasNativeSymbols() {
                    if (typeof origSymbol !== 'function') {
                        return false;
                    }
                    if (typeof Symbol !== 'function') {
                        return false;
                    }
                    if (typeof origSymbol('foo') !== 'symbol') {
                        return false;
                    }
                    if (typeof Symbol('bar') !== 'symbol') {
                        return false;
                    }
                    return hasSymbolSham();
                };
            /***/ },
            /***/ 2908: /***/ (module1)=>{
                "use strict";
                /* eslint complexity: [2, 18], max-statements: [2, 33] */ module1.exports = function hasSymbols() {
                    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
                        return false;
                    }
                    if (typeof Symbol.iterator === 'symbol') {
                        return true;
                    }
                    var obj = {};
                    var sym = Symbol('test');
                    var symObj = Object(sym);
                    if (typeof sym === 'string') {
                        return false;
                    }
                    if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
                        return false;
                    }
                    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
                        return false;
                    }
                    // temp disabled per https://github.com/ljharb/object.assign/issues/17
                    // if (sym instanceof Symbol) { return false; }
                    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
                    // if (!(symObj instanceof Symbol)) { return false; }
                    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
                    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
                    var symVal = 42;
                    obj[sym] = symVal;
                    for(sym in obj){
                        return false;
                    } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
                    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
                        return false;
                    }
                    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
                        return false;
                    }
                    var syms = Object.getOwnPropertySymbols(obj);
                    if (syms.length !== 1 || syms[0] !== sym) {
                        return false;
                    }
                    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
                        return false;
                    }
                    if (typeof Object.getOwnPropertyDescriptor === 'function') {
                        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
                        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
                            return false;
                        }
                    }
                    return true;
                };
            /***/ },
            /***/ 1913: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_153749__)=>{
                "use strict";
                var hasSymbols = __nested_webpack_require_153749__(2908);
                module1.exports = function hasToStringTagShams() {
                    return hasSymbols() && !!Symbol.toStringTag;
                };
            /***/ },
            /***/ 2571: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_154101__)=>{
                "use strict";
                var bind = __nested_webpack_require_154101__(9138);
                module1.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
            /***/ },
            /***/ 5615: /***/ (module1)=>{
                if (typeof Object.create === 'function') {
                    // implementation from standard node.js 'util' module
                    module1.exports = function inherits(ctor, superCtor) {
                        if (superCtor) {
                            ctor.super_ = superCtor;
                            ctor.prototype = Object.create(superCtor.prototype, {
                                constructor: {
                                    value: ctor,
                                    enumerable: false,
                                    writable: true,
                                    configurable: true
                                }
                            });
                        }
                    };
                } else {
                    // old school shim for old browsers
                    module1.exports = function inherits(ctor, superCtor) {
                        if (superCtor) {
                            ctor.super_ = superCtor;
                            var TempCtor = function() {};
                            TempCtor.prototype = superCtor.prototype;
                            ctor.prototype = new TempCtor();
                            ctor.prototype.constructor = ctor;
                        }
                    };
                }
            /***/ },
            /***/ 5387: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_155779__)=>{
                "use strict";
                var hasToStringTag = __nested_webpack_require_155779__(1913)();
                var callBound = __nested_webpack_require_155779__(9818);
                var $toString = callBound('Object.prototype.toString');
                var isStandardArguments = function isArguments(value) {
                    if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
                        return false;
                    }
                    return $toString(value) === '[object Arguments]';
                };
                var isLegacyArguments = function isArguments(value) {
                    if (isStandardArguments(value)) {
                        return true;
                    }
                    return value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && $toString(value) !== '[object Array]' && $toString(value.callee) === '[object Function]';
                };
                var supportsStandardArguments = function() {
                    return isStandardArguments(arguments);
                }();
                isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests
                module1.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
            /***/ },
            /***/ 9617: /***/ (module1)=>{
                "use strict";
                var fnToStr = Function.prototype.toString;
                var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
                var badArrayLike;
                var isCallableMarker;
                if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
                    try {
                        badArrayLike = Object.defineProperty({}, 'length', {
                            get: function() {
                                throw isCallableMarker;
                            }
                        });
                        isCallableMarker = {};
                        // eslint-disable-next-line no-throw-literal
                        reflectApply(function() {
                            throw 42;
                        }, null, badArrayLike);
                    } catch (_) {
                        if (_ !== isCallableMarker) {
                            reflectApply = null;
                        }
                    }
                } else {
                    reflectApply = null;
                }
                var constructorRegex = /^\s*class\b/;
                var isES6ClassFn = function isES6ClassFunction(value) {
                    try {
                        var fnStr = fnToStr.call(value);
                        return constructorRegex.test(fnStr);
                    } catch (e) {
                        return false; // not a function
                    }
                };
                var tryFunctionObject = function tryFunctionToStr(value) {
                    try {
                        if (isES6ClassFn(value)) {
                            return false;
                        }
                        fnToStr.call(value);
                        return true;
                    } catch (e) {
                        return false;
                    }
                };
                var toStr = Object.prototype.toString;
                var objectClass = '[object Object]';
                var fnClass = '[object Function]';
                var genClass = '[object GeneratorFunction]';
                var ddaClass = '[object HTMLAllCollection]'; // IE 11
                var ddaClass2 = '[object HTML document.all class]';
                var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
                var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
                var isIE68 = !(0 in [
                    , 
                ]); // eslint-disable-line no-sparse-arrays, comma-spacing
                var isDDA = function isDocumentDotAll() {
                    return false;
                };
                if (typeof document === 'object') {
                    // Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
                    var all = document.all;
                    if (toStr.call(all) === toStr.call(document.all)) {
                        isDDA = function isDocumentDotAll(value) {
                            /* globals document: false */ // in IE 6-8, typeof document.all is "object" and it's truthy
                            if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
                                try {
                                    var str = toStr.call(value);
                                    return (str === ddaClass || str === ddaClass2 || str === ddaClass3 // opera 12.16
                                     || str === objectClass // IE 6-8
                                    ) && value('') == null; // eslint-disable-line eqeqeq
                                } catch (e) {}
                            }
                            return false;
                        };
                    }
                }
                module1.exports = reflectApply ? function isCallable(value) {
                    if (isDDA(value)) {
                        return true;
                    }
                    if (!value) {
                        return false;
                    }
                    if (typeof value !== 'function' && typeof value !== 'object') {
                        return false;
                    }
                    try {
                        reflectApply(value, null, badArrayLike);
                    } catch (e) {
                        if (e !== isCallableMarker) {
                            return false;
                        }
                    }
                    return !isES6ClassFn(value) && tryFunctionObject(value);
                } : function isCallable(value) {
                    if (isDDA(value)) {
                        return true;
                    }
                    if (!value) {
                        return false;
                    }
                    if (typeof value !== 'function' && typeof value !== 'object') {
                        return false;
                    }
                    if (hasToStringTag) {
                        return tryFunctionObject(value);
                    }
                    if (isES6ClassFn(value)) {
                        return false;
                    }
                    var strClass = toStr.call(value);
                    if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
                        return false;
                    }
                    return tryFunctionObject(value);
                };
            /***/ },
            /***/ 2625: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_162839__)=>{
                "use strict";
                var toStr = Object.prototype.toString;
                var fnToStr = Function.prototype.toString;
                var isFnRegex = /^\s*(?:function)?\*/;
                var hasToStringTag = __nested_webpack_require_162839__(1913)();
                var getProto = Object.getPrototypeOf;
                var getGeneratorFunc = function() {
                    if (!hasToStringTag) {
                        return false;
                    }
                    try {
                        return Function('return function*() {}')();
                    } catch (e) {}
                };
                var GeneratorFunction;
                module1.exports = function isGeneratorFunction(fn) {
                    if (typeof fn !== 'function') {
                        return false;
                    }
                    if (isFnRegex.test(fnToStr.call(fn))) {
                        return true;
                    }
                    if (!hasToStringTag) {
                        var str = toStr.call(fn);
                        return str === '[object GeneratorFunction]';
                    }
                    if (!getProto) {
                        return false;
                    }
                    if (typeof GeneratorFunction === 'undefined') {
                        var generatorFunc = getGeneratorFunc();
                        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
                    }
                    return getProto(fn) === GeneratorFunction;
                };
            /***/ },
            /***/ 8006: /***/ (module1)=>{
                "use strict";
                /* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module1.exports = function isNaN1(value) {
                    return value !== value;
                };
            /***/ },
            /***/ 7838: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_164808__)=>{
                "use strict";
                var callBind = __nested_webpack_require_164808__(8498);
                var define1 = __nested_webpack_require_164808__(1857);
                var implementation = __nested_webpack_require_164808__(8006);
                var getPolyfill = __nested_webpack_require_164808__(1591);
                var shim = __nested_webpack_require_164808__(1641);
                var polyfill = callBind(getPolyfill(), Number);
                /* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ define1(polyfill, {
                    getPolyfill: getPolyfill,
                    implementation: implementation,
                    shim: shim
                });
                module1.exports = polyfill;
            /***/ },
            /***/ 1591: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_165607__)=>{
                "use strict";
                var implementation = __nested_webpack_require_165607__(8006);
                module1.exports = function getPolyfill() {
                    if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
                        return Number.isNaN;
                    }
                    return implementation;
                };
            /***/ },
            /***/ 1641: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_166083__)=>{
                "use strict";
                var define1 = __nested_webpack_require_166083__(1857);
                var getPolyfill = __nested_webpack_require_166083__(1591);
                /* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module1.exports = function shimNumberIsNaN() {
                    var polyfill = getPolyfill();
                    define1(Number, {
                        isNaN: polyfill
                    }, {
                        isNaN: function testIsNaN() {
                            return Number.isNaN !== polyfill;
                        }
                    });
                    return polyfill;
                };
            /***/ },
            /***/ 5943: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_166851__)=>{
                "use strict";
                var whichTypedArray = __nested_webpack_require_166851__(2730);
                module1.exports = function isTypedArray(value) {
                    return !!whichTypedArray(value);
                };
            /***/ },
            /***/ 2372: /***/ (module1)=>{
                "use strict";
                var numberIsNaN = function(value) {
                    return value !== value;
                };
                module1.exports = function is(a, b) {
                    if (a === 0 && b === 0) {
                        return 1 / a === 1 / b;
                    }
                    if (a === b) {
                        return true;
                    }
                    if (numberIsNaN(a) && numberIsNaN(b)) {
                        return true;
                    }
                    return false;
                };
            /***/ },
            /***/ 5968: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_167839__)=>{
                "use strict";
                var define1 = __nested_webpack_require_167839__(1857);
                var callBind = __nested_webpack_require_167839__(8498);
                var implementation = __nested_webpack_require_167839__(2372);
                var getPolyfill = __nested_webpack_require_167839__(1937);
                var shim = __nested_webpack_require_167839__(5087);
                var polyfill = callBind(getPolyfill(), Object);
                define1(polyfill, {
                    getPolyfill: getPolyfill,
                    implementation: implementation,
                    shim: shim
                });
                module1.exports = polyfill;
            /***/ },
            /***/ 1937: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_168567__)=>{
                "use strict";
                var implementation = __nested_webpack_require_168567__(2372);
                module1.exports = function getPolyfill() {
                    return typeof Object.is === 'function' ? Object.is : implementation;
                };
            /***/ },
            /***/ 5087: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_168939__)=>{
                "use strict";
                var getPolyfill = __nested_webpack_require_168939__(1937);
                var define1 = __nested_webpack_require_168939__(1857);
                module1.exports = function shimObjectIs() {
                    var polyfill = getPolyfill();
                    define1(Object, {
                        is: polyfill
                    }, {
                        is: function testObjectIs() {
                            return Object.is !== polyfill;
                        }
                    });
                    return polyfill;
                };
            /***/ },
            /***/ 8160: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_169627__)=>{
                "use strict";
                var keysShim;
                if (!Object.keys) {
                    // modified from https://github.com/es-shims/es5-shim
                    var has = Object.prototype.hasOwnProperty;
                    var toStr = Object.prototype.toString;
                    var isArgs = __nested_webpack_require_169627__(968); // eslint-disable-line global-require
                    var isEnumerable = Object.prototype.propertyIsEnumerable;
                    var hasDontEnumBug = !isEnumerable.call({
                        toString: null
                    }, 'toString');
                    var hasProtoEnumBug = isEnumerable.call(function() {}, 'prototype');
                    var dontEnums = [
                        'toString',
                        'toLocaleString',
                        'valueOf',
                        'hasOwnProperty',
                        'isPrototypeOf',
                        'propertyIsEnumerable',
                        'constructor'
                    ];
                    var equalsConstructorPrototype = function(o) {
                        var ctor = o.constructor;
                        return ctor && ctor.prototype === o;
                    };
                    var excludedKeys = {
                        $applicationCache: true,
                        $console: true,
                        $external: true,
                        $frame: true,
                        $frameElement: true,
                        $frames: true,
                        $innerHeight: true,
                        $innerWidth: true,
                        $onmozfullscreenchange: true,
                        $onmozfullscreenerror: true,
                        $outerHeight: true,
                        $outerWidth: true,
                        $pageXOffset: true,
                        $pageYOffset: true,
                        $parent: true,
                        $scrollLeft: true,
                        $scrollTop: true,
                        $scrollX: true,
                        $scrollY: true,
                        $self: true,
                        $webkitIndexedDB: true,
                        $webkitStorageInfo: true,
                        $window: true
                    };
                    var hasAutomationEqualityBug = function() {
                        /* global window */ if (typeof window === 'undefined') {
                            return false;
                        }
                        for(var k in window){
                            try {
                                if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
                                    try {
                                        equalsConstructorPrototype(window[k]);
                                    } catch (e) {
                                        return true;
                                    }
                                }
                            } catch (e) {
                                return true;
                            }
                        }
                        return false;
                    }();
                    var equalsConstructorPrototypeIfNotBuggy = function(o) {
                        /* global window */ if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
                            return equalsConstructorPrototype(o);
                        }
                        try {
                            return equalsConstructorPrototype(o);
                        } catch (e) {
                            return false;
                        }
                    };
                    keysShim = function keys(object) {
                        var isObject = object !== null && typeof object === 'object';
                        var isFunction = toStr.call(object) === '[object Function]';
                        var isArguments = isArgs(object);
                        var isString = isObject && toStr.call(object) === '[object String]';
                        var theKeys = [];
                        if (!isObject && !isFunction && !isArguments) {
                            throw new TypeError('Object.keys called on a non-object');
                        }
                        var skipProto = hasProtoEnumBug && isFunction;
                        if (isString && object.length > 0 && !has.call(object, 0)) {
                            for(var i = 0; i < object.length; ++i){
                                theKeys.push(String(i));
                            }
                        }
                        if (isArguments && object.length > 0) {
                            for(var j = 0; j < object.length; ++j){
                                theKeys.push(String(j));
                            }
                        } else {
                            for(var name in object){
                                if (!(skipProto && name === 'prototype') && has.call(object, name)) {
                                    theKeys.push(String(name));
                                }
                            }
                        }
                        if (hasDontEnumBug) {
                            var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
                            for(var k = 0; k < dontEnums.length; ++k){
                                if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
                                    theKeys.push(dontEnums[k]);
                                }
                            }
                        }
                        return theKeys;
                    };
                }
                module1.exports = keysShim;
            /***/ },
            /***/ 9228: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_175596__)=>{
                "use strict";
                var slice = Array.prototype.slice;
                var isArgs = __nested_webpack_require_175596__(968);
                var origKeys = Object.keys;
                var keysShim = origKeys ? function keys(o) {
                    return origKeys(o);
                } : __nested_webpack_require_175596__(8160);
                var originalKeys = Object.keys;
                keysShim.shim = function shimObjectKeys() {
                    if (Object.keys) {
                        var keysWorksWithArguments = function() {
                            // Safari 5.0 bug
                            var args = Object.keys(arguments);
                            return args && args.length === arguments.length;
                        }(1, 2);
                        if (!keysWorksWithArguments) {
                            Object.keys = function keys(object) {
                                if (isArgs(object)) {
                                    return originalKeys(slice.call(object));
                                }
                                return originalKeys(object);
                            };
                        }
                    } else {
                        Object.keys = keysShim;
                    }
                    return Object.keys || keysShim;
                };
                module1.exports = keysShim;
            /***/ },
            /***/ 968: /***/ (module1)=>{
                "use strict";
                var toStr = Object.prototype.toString;
                module1.exports = function isArguments(value) {
                    var str = toStr.call(value);
                    var isArgs = str === '[object Arguments]';
                    if (!isArgs) {
                        isArgs = str !== '[object Array]' && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && toStr.call(value.callee) === '[object Function]';
                    }
                    return isArgs;
                };
            /***/ },
            /***/ 9907: /***/ (module1)=>{
                // shim for using process in browser
                var process = module1.exports = {};
                // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.
                var cachedSetTimeout;
                var cachedClearTimeout;
                function defaultSetTimout() {
                    throw new Error('setTimeout has not been defined');
                }
                function defaultClearTimeout() {
                    throw new Error('clearTimeout has not been defined');
                }
                (function() {
                    try {
                        if (typeof setTimeout === 'function') {
                            cachedSetTimeout = setTimeout;
                        } else {
                            cachedSetTimeout = defaultSetTimout;
                        }
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === 'function') {
                            cachedClearTimeout = clearTimeout;
                        } else {
                            cachedClearTimeout = defaultClearTimeout;
                        }
                    } catch (e) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                })();
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) {
                        //normal enviroments in sane situations
                        return setTimeout(fun, 0);
                    }
                    // if setTimeout wasn't available but was latter defined
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }
                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) {
                        //normal enviroments in sane situations
                        return clearTimeout(marker);
                    }
                    // if clearTimeout wasn't available but was latter defined
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                            return cachedClearTimeout.call(this, marker);
                        }
                    }
                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;
                function cleanUpNextTick() {
                    if (!draining || !currentQueue) {
                        return;
                    }
                    draining = false;
                    if (currentQueue.length) {
                        queue = currentQueue.concat(queue);
                    } else {
                        queueIndex = -1;
                    }
                    if (queue.length) {
                        drainQueue();
                    }
                }
                function drainQueue() {
                    if (draining) {
                        return;
                    }
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;
                    var len = queue.length;
                    while(len){
                        currentQueue = queue;
                        queue = [];
                        while(++queueIndex < len){
                            if (currentQueue) {
                                currentQueue[queueIndex].run();
                            }
                        }
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }
                process.nextTick = function(fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) {
                        for(var i = 1; i < arguments.length; i++){
                            args[i - 1] = arguments[i];
                        }
                    }
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) {
                        runTimeout(drainQueue);
                    }
                };
                // v8 likes predictible objects
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function() {
                    this.fun.apply(null, this.array);
                };
                process.title = 'browser';
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = ''; // empty string to avoid regexp issues
                process.versions = {};
                function noop() {}
                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.prependListener = noop;
                process.prependOnceListener = noop;
                process.listeners = function(name) {
                    return [];
                };
                process.binding = function(name) {
                    throw new Error('process.binding is not supported');
                };
                process.cwd = function() {
                    return '/';
                };
                process.chdir = function(dir) {
                    throw new Error('process.chdir is not supported');
                };
                process.umask = function() {
                    return 0;
                };
            /***/ },
            /***/ 2125: /***/ (__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_185971__)=>{
                "use strict";
                /* harmony export */ __nested_webpack_require_185971__.d(__nested_webpack_exports__, {
                    /* harmony export */ BaseService: ()=>/* binding */ BaseService
                });
                /* harmony import */ var vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_185971__(5501);
                /* harmony import */ var vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __nested_webpack_require_185971__.n(vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0__);
                /* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_185971__(7770);
                /* harmony import */ var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_185971__(8778);
                function _define_property(obj, key, value) {
                    if (key in obj) {
                        Object.defineProperty(obj, key, {
                            value: value,
                            enumerable: true,
                            configurable: true,
                            writable: true
                        });
                    } else {
                        obj[key] = value;
                    }
                    return obj;
                }
                class BaseService {
                    addDocument(document1) {
                        this.documents[document1.uri] = vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__ /* .TextDocument */ .V.create(document1.uri, document1.languageId, document1.version, document1.text);
                    }
                    getDocument(uri) {
                        return this.documents[uri];
                    }
                    removeDocument(document1) {
                        delete this.documents[document1.uri];
                        if (this.options[document1.uri]) {
                            delete this.options[document1.uri];
                        }
                    }
                    getDocumentValue(uri) {
                        var _this_getDocument;
                        return (_this_getDocument = this.getDocument(uri)) === null || _this_getDocument === void 0 ? void 0 : _this_getDocument.getText();
                    }
                    setValue(identifier, value) {
                        let document1 = this.getDocument(identifier.uri);
                        if (document1) {
                            document1 = vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__ /* .TextDocument */ .V.create(document1.uri, document1.languageId, document1.version, value);
                            this.documents[document1.uri] = document1;
                        }
                    }
                    setGlobalOptions(options) {
                        this.globalOptions = options !== null && options !== void 0 ? options : {};
                    }
                    setWorkspace(workspaceUri) {
                        this.workspaceUri = workspaceUri;
                    }
                    setOptions(documentUri, options, merge = false) {
                        this.options[documentUri] = merge ? (0, _utils__WEBPACK_IMPORTED_MODULE_2__ /* .mergeObjects */ .rL)(options, this.options[documentUri]) : options;
                    }
                    getOption(documentUri, optionName) {
                        if (this.options[documentUri] && this.options[documentUri][optionName]) {
                            return this.options[documentUri][optionName];
                        } else {
                            return this.globalOptions[optionName];
                        }
                    }
                    applyDeltas(identifier, deltas) {
                        let document1 = this.getDocument(identifier.uri);
                        if (document1) vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__ /* .TextDocument */ .V.update(document1, deltas, identifier.version);
                    }
                    async doComplete(document1, position) {
                        return null;
                    }
                    async doHover(document1, position) {
                        return null;
                    }
                    async doResolve(item) {
                        return null;
                    }
                    async doValidation(document1) {
                        return [];
                    }
                    format(document1, range, options) {
                        return Promise.resolve([]);
                    }
                    async provideSignatureHelp(document1, position) {
                        return null;
                    }
                    async findDocumentHighlights(document1, position) {
                        return [];
                    }
                    get optionsToFilterDiagnostics() {
                        var _this_globalOptions_errorCodesToIgnore, _this_globalOptions_errorCodesToTreatAsWarning, _this_globalOptions_errorCodesToTreatAsInfo, _this_globalOptions_errorMessagesToIgnore, _this_globalOptions_errorMessagesToTreatAsWarning, _this_globalOptions_errorMessagesToTreatAsInfo;
                        return {
                            errorCodesToIgnore: (_this_globalOptions_errorCodesToIgnore = this.globalOptions.errorCodesToIgnore) !== null && _this_globalOptions_errorCodesToIgnore !== void 0 ? _this_globalOptions_errorCodesToIgnore : [],
                            errorCodesToTreatAsWarning: (_this_globalOptions_errorCodesToTreatAsWarning = this.globalOptions.errorCodesToTreatAsWarning) !== null && _this_globalOptions_errorCodesToTreatAsWarning !== void 0 ? _this_globalOptions_errorCodesToTreatAsWarning : [],
                            errorCodesToTreatAsInfo: (_this_globalOptions_errorCodesToTreatAsInfo = this.globalOptions.errorCodesToTreatAsInfo) !== null && _this_globalOptions_errorCodesToTreatAsInfo !== void 0 ? _this_globalOptions_errorCodesToTreatAsInfo : [],
                            errorMessagesToIgnore: (_this_globalOptions_errorMessagesToIgnore = this.globalOptions.errorMessagesToIgnore) !== null && _this_globalOptions_errorMessagesToIgnore !== void 0 ? _this_globalOptions_errorMessagesToIgnore : [],
                            errorMessagesToTreatAsWarning: (_this_globalOptions_errorMessagesToTreatAsWarning = this.globalOptions.errorMessagesToTreatAsWarning) !== null && _this_globalOptions_errorMessagesToTreatAsWarning !== void 0 ? _this_globalOptions_errorMessagesToTreatAsWarning : [],
                            errorMessagesToTreatAsInfo: (_this_globalOptions_errorMessagesToTreatAsInfo = this.globalOptions.errorMessagesToTreatAsInfo) !== null && _this_globalOptions_errorMessagesToTreatAsInfo !== void 0 ? _this_globalOptions_errorMessagesToTreatAsInfo : []
                        };
                    }
                    getSemanticTokens(document1, range) {
                        return Promise.resolve(null);
                    }
                    dispose() {
                        return Promise.resolve();
                    }
                    closeConnection() {
                        return Promise.resolve();
                    }
                    getCodeActions(document1, range, context) {
                        return Promise.resolve(null);
                    }
                    executeCommand(command, args) {
                        return Promise.resolve(null);
                    }
                    sendAppliedResult(result, callbackId) {}
                    constructor(mode, workspaceUri){
                        _define_property(this, "serviceName", void 0);
                        _define_property(this, "mode", void 0);
                        _define_property(this, "documents", {});
                        _define_property(this, "options", {});
                        _define_property(this, "globalOptions", {});
                        _define_property(this, "serviceData", void 0);
                        _define_property(this, "serviceCapabilities", {});
                        _define_property(this, "workspaceUri", void 0);
                        _define_property(this, "clientCapabilities", {
                            textDocument: {
                                diagnostic: {
                                    dynamicRegistration: true,
                                    relatedDocumentSupport: true
                                },
                                publishDiagnostics: {
                                    relatedInformation: true,
                                    versionSupport: false,
                                    tagSupport: {
                                        valueSet: [
                                            vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0__.DiagnosticTag.Unnecessary,
                                            vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0__.DiagnosticTag.Deprecated
                                        ]
                                    }
                                },
                                hover: {
                                    dynamicRegistration: true,
                                    contentFormat: [
                                        'markdown',
                                        'plaintext'
                                    ]
                                },
                                synchronization: {
                                    dynamicRegistration: true,
                                    willSave: false,
                                    didSave: false,
                                    willSaveWaitUntil: false
                                },
                                formatting: {
                                    dynamicRegistration: true
                                },
                                completion: {
                                    dynamicRegistration: true,
                                    completionItem: {
                                        snippetSupport: true,
                                        commitCharactersSupport: false,
                                        documentationFormat: [
                                            'markdown',
                                            'plaintext'
                                        ],
                                        deprecatedSupport: false,
                                        preselectSupport: false
                                    },
                                    contextSupport: false
                                },
                                signatureHelp: {
                                    signatureInformation: {
                                        documentationFormat: [
                                            'markdown',
                                            'plaintext'
                                        ],
                                        activeParameterSupport: true
                                    }
                                },
                                documentHighlight: {
                                    dynamicRegistration: true
                                },
                                semanticTokens: {
                                    multilineTokenSupport: false,
                                    overlappingTokenSupport: false,
                                    tokenTypes: [],
                                    tokenModifiers: [],
                                    formats: [
                                        "relative"
                                    ],
                                    requests: {
                                        full: {
                                            delta: false
                                        },
                                        range: true
                                    },
                                    augmentsSyntaxTokens: true
                                },
                                codeAction: {
                                    dynamicRegistration: true
                                }
                            },
                            workspace: {
                                didChangeConfiguration: {
                                    dynamicRegistration: true
                                },
                                executeCommand: {
                                    dynamicRegistration: true
                                },
                                applyEdit: true,
                                workspaceEdit: {
                                    failureHandling: "abort",
                                    normalizesLineEndings: false,
                                    documentChanges: false
                                }
                            }
                        });
                        this.mode = mode;
                        this.workspaceUri = workspaceUri;
                    }
                }
            /***/ },
            /***/ 4849: /***/ (__unused_webpack_module, exports1)=>{
                /*
  php.js 0.1.0 <http://phpjs.hertzen.com/>
  Copyright (c) 2013 Niklas von Hertzen

  Released under MIT License

  This file contains:
  - [var PHP = {Constants:{}};]
  - src/modules/tokenizer/constants.js
  - src/parser/lexer.js
  - src/parser/parser.js
  - src/parser/yyn.js
  - src/parser/yyn_stmt.js
  - src/parser/yyn_expr.js
  - src/parser/yyn_scalar.js
*/ var PHP = {
                    Constants: {}
                };
                PHP.Constants.T_THROW = 317;
                PHP.Constants.T_INCLUDE = 272;
                PHP.Constants.T_INCLUDE_ONCE = 273;
                PHP.Constants.T_EVAL = 274;
                PHP.Constants.T_REQUIRE = 275;
                PHP.Constants.T_REQUIRE_ONCE = 276;
                PHP.Constants.T_LOGICAL_OR = 277;
                PHP.Constants.T_LOGICAL_XOR = 278;
                PHP.Constants.T_LOGICAL_AND = 279;
                PHP.Constants.T_PRINT = 280;
                PHP.Constants.T_YIELD = 281;
                PHP.Constants.T_DOUBLE_ARROW = 386;
                PHP.Constants.T_YIELD_FROM = 282;
                PHP.Constants.T_PLUS_EQUAL = 352;
                PHP.Constants.T_MINUS_EQUAL = 353;
                PHP.Constants.T_MUL_EQUAL = 354;
                PHP.Constants.T_DIV_EQUAL = 355;
                PHP.Constants.T_CONCAT_EQUAL = 356;
                PHP.Constants.T_MOD_EQUAL = 357;
                PHP.Constants.T_AND_EQUAL = 358;
                PHP.Constants.T_OR_EQUAL = 359;
                PHP.Constants.T_XOR_EQUAL = 360;
                PHP.Constants.T_SL_EQUAL = 361;
                PHP.Constants.T_SR_EQUAL = 362;
                PHP.Constants.T_POW_EQUAL = 402;
                PHP.Constants.T_COALESCE_EQUAL = 363;
                PHP.Constants.T_COALESCE = 400;
                PHP.Constants.T_BOOLEAN_OR = 364;
                PHP.Constants.T_BOOLEAN_AND = 365;
                PHP.Constants.T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG = 404;
                PHP.Constants.T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG = 403;
                PHP.Constants.T_IS_EQUAL = 366;
                PHP.Constants.T_IS_NOT_EQUAL = 367;
                PHP.Constants.T_IS_IDENTICAL = 368;
                PHP.Constants.T_IS_NOT_IDENTICAL = 369;
                PHP.Constants.T_SPACESHIP = 372;
                PHP.Constants.T_IS_SMALLER_OR_EQUAL = 370;
                PHP.Constants.T_IS_GREATER_OR_EQUAL = 371;
                PHP.Constants.T_SL = 373;
                PHP.Constants.T_SR = 374;
                PHP.Constants.T_INSTANCEOF = 283;
                PHP.Constants.T_INC = 375;
                PHP.Constants.T_DEC = 376;
                PHP.Constants.T_INT_CAST = 377;
                PHP.Constants.T_DOUBLE_CAST = 378;
                PHP.Constants.T_STRING_CAST = 379;
                PHP.Constants.T_ARRAY_CAST = 380;
                PHP.Constants.T_OBJECT_CAST = 381;
                PHP.Constants.T_BOOL_CAST = 382;
                PHP.Constants.T_UNSET_CAST = 383;
                PHP.Constants.T_POW = 401;
                PHP.Constants.T_NEW = 284;
                PHP.Constants.T_CLONE = 285;
                PHP.Constants.T_EXIT = 286;
                PHP.Constants.T_IF = 287;
                PHP.Constants.T_ELSEIF = 288;
                PHP.Constants.T_ELSE = 289;
                PHP.Constants.T_ENDIF = 290;
                PHP.Constants.T_LNUMBER = 260;
                PHP.Constants.T_DNUMBER = 261;
                PHP.Constants.T_STRING = 262;
                PHP.Constants.T_STRING_VARNAME = 270;
                PHP.Constants.T_VARIABLE = 266;
                PHP.Constants.T_NUM_STRING = 271;
                PHP.Constants.T_INLINE_HTML = 267;
                PHP.Constants.T_ENCAPSED_AND_WHITESPACE = 268;
                PHP.Constants.T_CONSTANT_ENCAPSED_STRING = 269;
                PHP.Constants.T_ECHO = 291;
                PHP.Constants.T_DO = 292;
                PHP.Constants.T_WHILE = 293;
                PHP.Constants.T_ENDWHILE = 294;
                PHP.Constants.T_FOR = 295;
                PHP.Constants.T_ENDFOR = 296;
                PHP.Constants.T_FOREACH = 297;
                PHP.Constants.T_ENDFOREACH = 298;
                PHP.Constants.T_DECLARE = 299;
                PHP.Constants.T_ENDDECLARE = 300;
                PHP.Constants.T_AS = 301;
                PHP.Constants.T_SWITCH = 302;
                PHP.Constants.T_MATCH = 306;
                PHP.Constants.T_ENDSWITCH = 303;
                PHP.Constants.T_CASE = 304;
                PHP.Constants.T_DEFAULT = 305;
                PHP.Constants.T_BREAK = 307;
                PHP.Constants.T_CONTINUE = 308;
                PHP.Constants.T_GOTO = 309;
                PHP.Constants.T_FUNCTION = 310;
                PHP.Constants.T_FN = 311;
                PHP.Constants.T_CONST = 312;
                PHP.Constants.T_RETURN = 313;
                PHP.Constants.T_TRY = 314;
                PHP.Constants.T_CATCH = 315;
                PHP.Constants.T_FINALLY = 316;
                PHP.Constants.T_THROW = 317;
                PHP.Constants.T_USE = 318;
                PHP.Constants.T_INSTEADOF = 319;
                PHP.Constants.T_GLOBAL = 320;
                PHP.Constants.T_STATIC = 321;
                PHP.Constants.T_ABSTRACT = 322;
                PHP.Constants.T_FINAL = 323;
                PHP.Constants.T_PRIVATE = 324;
                PHP.Constants.T_PROTECTED = 325;
                PHP.Constants.T_PUBLIC = 326;
                PHP.Constants.T_READONLY = 327;
                PHP.Constants.T_VAR = 328;
                PHP.Constants.T_UNSET = 329;
                PHP.Constants.T_ISSET = 330;
                PHP.Constants.T_EMPTY = 331;
                PHP.Constants.T_HALT_COMPILER = 332;
                PHP.Constants.T_CLASS = 333;
                PHP.Constants.T_TRAIT = 334;
                PHP.Constants.T_INTERFACE = 335;
                PHP.Constants.T_ENUM = 336;
                PHP.Constants.T_EXTENDS = 337;
                PHP.Constants.T_IMPLEMENTS = 338;
                PHP.Constants.T_OBJECT_OPERATOR = 384;
                PHP.Constants.T_NULLSAFE_OBJECT_OPERATOR = 385;
                PHP.Constants.T_DOUBLE_ARROW = 386;
                PHP.Constants.T_LIST = 340;
                PHP.Constants.T_ARRAY = 341;
                PHP.Constants.T_CALLABLE = 342;
                PHP.Constants.T_CLASS_C = 346;
                PHP.Constants.T_TRAIT_C = 347;
                PHP.Constants.T_METHOD_C = 348;
                PHP.Constants.T_FUNC_C = 349;
                PHP.Constants.T_LINE = 343;
                PHP.Constants.T_FILE = 344;
                PHP.Constants.T_START_HEREDOC = 393;
                PHP.Constants.T_END_HEREDOC = 394;
                PHP.Constants.T_DOLLAR_OPEN_CURLY_BRACES = 395;
                PHP.Constants.T_CURLY_OPEN = 396;
                PHP.Constants.T_PAAMAYIM_NEKUDOTAYIM = 397;
                PHP.Constants.T_NAMESPACE = 339;
                PHP.Constants.T_NS_C = 350;
                PHP.Constants.T_DIR = 345;
                PHP.Constants.T_NS_SEPARATOR = 398;
                PHP.Constants.T_ELLIPSIS = 399;
                PHP.Constants.T_NAME_FULLY_QUALIFIED = 263;
                PHP.Constants.T_NAME_QUALIFIED = 265;
                PHP.Constants.T_NAME_RELATIVE = 264;
                PHP.Constants.T_ATTRIBUTE = 351;
                PHP.Constants.T_ENUM = 336;
                PHP.Constants.T_BAD_CHARACTER = 405;
                PHP.Constants.T_COMMENT = 387;
                PHP.Constants.T_DOC_COMMENT = 388;
                PHP.Constants.T_OPEN_TAG = 389;
                PHP.Constants.T_OPEN_TAG_WITH_ECHO = 390;
                PHP.Constants.T_CLOSE_TAG = 391;
                PHP.Constants.T_WHITESPACE = 392;
                PHP.Lexer = function(src, ini) {
                    var heredoc, heredocEndAllowed, stateStack = [
                        'INITIAL'
                    ], stackPos = 0, swapState = function(state) {
                        stateStack[stackPos] = state;
                    }, pushState = function(state) {
                        stateStack[++stackPos] = state;
                    }, popState = function() {
                        --stackPos;
                    }, shortOpenTag = ini === undefined || /^(on|true|1)$/i.test(ini.short_open_tag), openTag = shortOpenTag ? /^(\<\?php(?:\r\n|[ \t\r\n])|<\?|\<script language\=('|")?php('|")?\>)/i : /^(\<\?php(?:\r\n|[ \t\r\n])|\<script language\=('|")?php('|")?\>)/i, inlineHtml = shortOpenTag ? /[^<]*(?:<(?!\?|script language\=('|")?php('|")?\>)[^<]*)*/i : /[^<]*(?:<(?!\?=|\?php[ \t\r\n]|script language\=('|")?php('|")?\>)[^<]*)*/i, labelRegexPart = '[a-zA-Z_\\x7f-\\uffff][a-zA-Z0-9_\\x7f-\\uffff]*', stringRegexPart = function(quote) {
                        // Matches non-interpolated portion of interpolated string
                        return '[^' + quote + '\\\\${]*(?:(?:\\\\[\\s\\S]|\\$(?!\\{|[a-zA-Z_\\x7f-\\uffff])|\\{(?!\\$))[^' + quote + '\\\\${]*)*';
                    }, sharedStringTokens = [
                        {
                            value: PHP.Constants.T_VARIABLE,
                            re: new RegExp('^\\$' + labelRegexPart + '(?=\\[)'),
                            func: function() {
                                pushState('VAR_OFFSET');
                            }
                        },
                        {
                            value: PHP.Constants.T_VARIABLE,
                            re: new RegExp('^\\$' + labelRegexPart + '(?=->' + labelRegexPart + ')'),
                            func: function() {
                                pushState('LOOKING_FOR_PROPERTY');
                            }
                        },
                        {
                            value: PHP.Constants.T_DOLLAR_OPEN_CURLY_BRACES,
                            re: new RegExp('^\\$\\{(?=' + labelRegexPart + '[\\[}])'),
                            func: function() {
                                pushState('LOOKING_FOR_VARNAME');
                            }
                        },
                        {
                            value: PHP.Constants.T_VARIABLE,
                            re: new RegExp('^\\$' + labelRegexPart)
                        },
                        {
                            value: PHP.Constants.T_DOLLAR_OPEN_CURLY_BRACES,
                            re: /^\$\{/,
                            func: function() {
                                pushState('IN_SCRIPTING');
                            }
                        },
                        {
                            value: PHP.Constants.T_CURLY_OPEN,
                            re: /^\{(?=\$)/,
                            func: function() {
                                pushState('IN_SCRIPTING');
                            }
                        }
                    ], data = {
                        // Outside of PHP
                        'INITIAL': [
                            {
                                value: PHP.Constants.T_OPEN_TAG_WITH_ECHO,
                                re: /^<\?=/i,
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: PHP.Constants.T_OPEN_TAG,
                                re: openTag,
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: PHP.Constants.T_INLINE_HTML,
                                re: inlineHtml
                            }
                        ],
                        'IN_SCRIPTING': [
                            // Match whitespace first
                            {
                                value: PHP.Constants.T_WHITESPACE,
                                re: /^[ \n\r\t]+/
                            },
                            // Keywords, sorted alphabetically
                            {
                                value: PHP.Constants.T_ABSTRACT,
                                re: /^abstract\b/i
                            },
                            {
                                value: PHP.Constants.T_LOGICAL_AND,
                                re: /^and\b/i
                            },
                            {
                                value: PHP.Constants.T_ARRAY,
                                re: /^array\b/i
                            },
                            {
                                value: PHP.Constants.T_AS,
                                re: /^as\b/i
                            },
                            {
                                value: PHP.Constants.T_BREAK,
                                re: /^break\b/i
                            },
                            {
                                value: PHP.Constants.T_CALLABLE,
                                re: /^callable\b/i
                            },
                            {
                                value: PHP.Constants.T_CASE,
                                re: /^case\b/i
                            },
                            {
                                value: PHP.Constants.T_CATCH,
                                re: /^catch\b/i
                            },
                            {
                                value: PHP.Constants.T_CLASS,
                                re: /^class\b/i
                            },
                            {
                                value: PHP.Constants.T_CLONE,
                                re: /^clone\b/i
                            },
                            {
                                value: PHP.Constants.T_CONST,
                                re: /^const\b/i
                            },
                            {
                                value: PHP.Constants.T_CONTINUE,
                                re: /^continue\b/i
                            },
                            {
                                value: PHP.Constants.T_DECLARE,
                                re: /^declare\b/i
                            },
                            {
                                value: PHP.Constants.T_DEFAULT,
                                re: /^default\b/i
                            },
                            {
                                value: PHP.Constants.T_DO,
                                re: /^do\b/i
                            },
                            {
                                value: PHP.Constants.T_ECHO,
                                re: /^echo\b/i
                            },
                            {
                                value: PHP.Constants.T_ELSE,
                                re: /^else\b/i
                            },
                            {
                                value: PHP.Constants.T_ELSEIF,
                                re: /^elseif\b/i
                            },
                            {
                                value: PHP.Constants.T_ENUM,
                                re: /^enum\b/i
                            },
                            {
                                value: PHP.Constants.T_ENDDECLARE,
                                re: /^enddeclare\b/i
                            },
                            {
                                value: PHP.Constants.T_ENDFOR,
                                re: /^endfor\b/i
                            },
                            {
                                value: PHP.Constants.T_ENDFOREACH,
                                re: /^endforeach\b/i
                            },
                            {
                                value: PHP.Constants.T_ENDIF,
                                re: /^endif\b/i
                            },
                            {
                                value: PHP.Constants.T_ENDSWITCH,
                                re: /^endswitch\b/i
                            },
                            {
                                value: PHP.Constants.T_ENDWHILE,
                                re: /^endwhile\b/i
                            },
                            {
                                value: PHP.Constants.T_ENUM,
                                re: /^enum\b/i
                            },
                            {
                                value: PHP.Constants.T_EMPTY,
                                re: /^empty\b/i
                            },
                            {
                                value: PHP.Constants.T_EVAL,
                                re: /^eval\b/i
                            },
                            {
                                value: PHP.Constants.T_EXIT,
                                re: /^(?:exit|die)\b/i
                            },
                            {
                                value: PHP.Constants.T_EXTENDS,
                                re: /^extends\b/i
                            },
                            {
                                value: PHP.Constants.T_FINAL,
                                re: /^final\b/i
                            },
                            {
                                value: PHP.Constants.T_FINALLY,
                                re: /^finally\b/i
                            },
                            {
                                value: PHP.Constants.T_FN,
                                re: /^fn\b/i
                            },
                            {
                                value: PHP.Constants.T_FOR,
                                re: /^for\b/i
                            },
                            {
                                value: PHP.Constants.T_FOREACH,
                                re: /^foreach\b/i
                            },
                            {
                                value: PHP.Constants.T_FUNCTION,
                                re: /^function\b/i
                            },
                            {
                                value: PHP.Constants.T_GLOBAL,
                                re: /^global\b/i
                            },
                            {
                                value: PHP.Constants.T_GOTO,
                                re: /^goto\b/i
                            },
                            {
                                value: PHP.Constants.T_IF,
                                re: /^if\b/i
                            },
                            {
                                value: PHP.Constants.T_IMPLEMENTS,
                                re: /^implements\b/i
                            },
                            {
                                value: PHP.Constants.T_INCLUDE,
                                re: /^include\b/i
                            },
                            {
                                value: PHP.Constants.T_INCLUDE_ONCE,
                                re: /^include_once\b/i
                            },
                            {
                                value: PHP.Constants.T_INSTANCEOF,
                                re: /^instanceof\b/i
                            },
                            {
                                value: PHP.Constants.T_INSTEADOF,
                                re: /^insteadof\b/i
                            },
                            {
                                value: PHP.Constants.T_INTERFACE,
                                re: /^interface\b/i
                            },
                            {
                                value: PHP.Constants.T_ISSET,
                                re: /^isset\b/i
                            },
                            {
                                value: PHP.Constants.T_LIST,
                                re: /^list\b/i
                            },
                            {
                                value: PHP.Constants.T_MATCH,
                                re: /^match\b/i
                            },
                            {
                                value: PHP.Constants.T_NEW,
                                re: /^new\b/i
                            },
                            {
                                value: PHP.Constants.T_LOGICAL_OR,
                                re: /^or\b/i
                            },
                            {
                                value: PHP.Constants.T_PRINT,
                                re: /^print\b/i
                            },
                            {
                                value: PHP.Constants.T_PRIVATE,
                                re: /^private\b/i
                            },
                            {
                                value: PHP.Constants.T_PROTECTED,
                                re: /^protected\b/i
                            },
                            {
                                value: PHP.Constants.T_PUBLIC,
                                re: /^public\b/i
                            },
                            {
                                value: PHP.Constants.T_READONLY,
                                re: /^readonly\b/i
                            },
                            {
                                value: PHP.Constants.T_REQUIRE,
                                re: /^require\b/i
                            },
                            {
                                value: PHP.Constants.T_REQUIRE_ONCE,
                                re: /^require_once\b/i
                            },
                            {
                                value: PHP.Constants.T_STATIC,
                                re: /^static\b/i
                            },
                            {
                                value: PHP.Constants.T_SWITCH,
                                re: /^switch\b/i
                            },
                            {
                                value: PHP.Constants.T_THROW,
                                re: /^throw\b/i
                            },
                            {
                                value: PHP.Constants.T_TRAIT,
                                re: /^trait\b/i
                            },
                            {
                                value: PHP.Constants.T_TRY,
                                re: /^try\b/i
                            },
                            {
                                value: PHP.Constants.T_UNSET,
                                re: /^unset\b/i
                            },
                            {
                                value: PHP.Constants.T_USE,
                                re: /^use\b/i
                            },
                            {
                                value: PHP.Constants.T_VAR,
                                re: /^var\b/i
                            },
                            {
                                value: PHP.Constants.T_WHILE,
                                re: /^while\b/i
                            },
                            {
                                value: PHP.Constants.T_LOGICAL_XOR,
                                re: /^xor\b/i
                            },
                            {
                                value: PHP.Constants.T_YIELD_FROM,
                                re: /^yield\s+from\b/i
                            },
                            {
                                value: PHP.Constants.T_YIELD,
                                re: /^yield\b/i
                            },
                            {
                                value: PHP.Constants.T_RETURN,
                                re: /^return\b/i
                            },
                            {
                                value: PHP.Constants.T_METHOD_C,
                                re: /^__METHOD__\b/i
                            },
                            {
                                value: PHP.Constants.T_LINE,
                                re: /^__LINE__\b/i
                            },
                            {
                                value: PHP.Constants.T_FILE,
                                re: /^__FILE__\b/i
                            },
                            {
                                value: PHP.Constants.T_FUNC_C,
                                re: /^__FUNCTION__\b/i
                            },
                            {
                                value: PHP.Constants.T_NS_C,
                                re: /^__NAMESPACE__\b/i
                            },
                            {
                                value: PHP.Constants.T_TRAIT_C,
                                re: /^__TRAIT__\b/i
                            },
                            {
                                value: PHP.Constants.T_DIR,
                                re: /^__DIR__\b/i
                            },
                            {
                                value: PHP.Constants.T_CLASS_C,
                                re: /^__CLASS__\b/i
                            },
                            // Other tokens
                            {
                                value: PHP.Constants.T_AND_EQUAL,
                                re: /^&=/
                            },
                            {
                                value: PHP.Constants.T_ARRAY_CAST,
                                re: /^\([ \t]*array[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_BOOL_CAST,
                                re: /^\([ \t]*(?:bool|boolean)[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_DOUBLE_CAST,
                                re: /^\([ \t]*(?:real|float|double)[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_INT_CAST,
                                re: /^\([ \t]*(?:int|integer)[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_OBJECT_CAST,
                                re: /^\([ \t]*object[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_STRING_CAST,
                                re: /^\([ \t]*(?:binary|string)[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_UNSET_CAST,
                                re: /^\([ \t]*unset[ \t]*\)/i
                            },
                            {
                                value: PHP.Constants.T_BOOLEAN_AND,
                                re: /^&&/
                            },
                            {
                                value: PHP.Constants.T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG,
                                re: /^&(?=[$])/
                            },
                            {
                                value: PHP.Constants.T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG,
                                re: /^(&)(?=[^\$|^&])/
                            },
                            {
                                value: PHP.Constants.T_BOOLEAN_OR,
                                re: /^\|\|/
                            },
                            {
                                value: PHP.Constants.T_CLOSE_TAG,
                                re: /^(?:\?>|<\/script>)(\r\n|\r|\n)?/i,
                                func: function() {
                                    swapState('INITIAL');
                                }
                            },
                            {
                                value: PHP.Constants.T_DOUBLE_ARROW,
                                re: /^=>/
                            },
                            {
                                value: PHP.Constants.T_PAAMAYIM_NEKUDOTAYIM,
                                re: /^::/
                            },
                            {
                                value: PHP.Constants.T_INC,
                                re: /^\+\+/
                            },
                            {
                                value: PHP.Constants.T_DEC,
                                re: /^--/
                            },
                            {
                                value: PHP.Constants.T_CONCAT_EQUAL,
                                re: /^\.=/
                            },
                            {
                                value: PHP.Constants.T_DIV_EQUAL,
                                re: /^\/=/
                            },
                            {
                                value: PHP.Constants.T_XOR_EQUAL,
                                re: /^\^=/
                            },
                            {
                                value: PHP.Constants.T_MUL_EQUAL,
                                re: /^\*=/
                            },
                            {
                                value: PHP.Constants.T_MOD_EQUAL,
                                re: /^%=/
                            },
                            {
                                value: PHP.Constants.T_SL_EQUAL,
                                re: /^<<=/
                            },
                            {
                                value: PHP.Constants.T_START_HEREDOC,
                                re: new RegExp('^[bB]?<<<[ \\t]*\'(' + labelRegexPart + ')\'(?:\\r\\n|\\r|\\n)'),
                                func: function(result) {
                                    heredoc = result[1];
                                    swapState('NOWDOC');
                                }
                            },
                            {
                                value: PHP.Constants.T_START_HEREDOC,
                                re: new RegExp('^[bB]?<<<[ \\t]*("?)(' + labelRegexPart + ')\\1(?:\\r\\n|\\r|\\n)'),
                                func: function(result) {
                                    heredoc = result[2];
                                    heredocEndAllowed = true;
                                    swapState('HEREDOC');
                                }
                            },
                            {
                                value: PHP.Constants.T_SL,
                                re: /^<</
                            },
                            {
                                value: PHP.Constants.T_SPACESHIP,
                                re: /^<=>/
                            },
                            {
                                value: PHP.Constants.T_IS_SMALLER_OR_EQUAL,
                                re: /^<=/
                            },
                            {
                                value: PHP.Constants.T_SR_EQUAL,
                                re: /^>>=/
                            },
                            {
                                value: PHP.Constants.T_SR,
                                re: /^>>/
                            },
                            {
                                value: PHP.Constants.T_IS_GREATER_OR_EQUAL,
                                re: /^>=/
                            },
                            {
                                value: PHP.Constants.T_OR_EQUAL,
                                re: /^\|=/
                            },
                            {
                                value: PHP.Constants.T_PLUS_EQUAL,
                                re: /^\+=/
                            },
                            {
                                value: PHP.Constants.T_MINUS_EQUAL,
                                re: /^-=/
                            },
                            {
                                value: PHP.Constants.T_OBJECT_OPERATOR,
                                re: new RegExp('^->(?=[ \n\r\t]*' + labelRegexPart + ')'),
                                func: function() {
                                    pushState('LOOKING_FOR_PROPERTY');
                                }
                            },
                            {
                                value: PHP.Constants.T_OBJECT_OPERATOR,
                                re: /^->/i
                            },
                            {
                                value: PHP.Constants.T_ELLIPSIS,
                                re: /^\.\.\./
                            },
                            {
                                value: PHP.Constants.T_POW_EQUAL,
                                re: /^\*\*=/
                            },
                            {
                                value: PHP.Constants.T_POW,
                                re: /^\*\*/
                            },
                            {
                                value: PHP.Constants.T_COALESCE_EQUAL,
                                re: /^\?\?=/
                            },
                            {
                                value: PHP.Constants.T_COALESCE,
                                re: /^\?\?/
                            },
                            {
                                value: PHP.Constants.T_NULLSAFE_OBJECT_OPERATOR,
                                re: /^\?->/
                            },
                            {
                                value: PHP.Constants.T_NAME_FULLY_QUALIFIED,
                                re: /^\\\w+(?:\\\w+)*/
                            },
                            {
                                value: PHP.Constants.T_NAME_QUALIFIED,
                                re: /^\w+\\\w+(?:\\\w+)*/
                            },
                            {
                                value: PHP.Constants.T_NAME_RELATIVE,
                                re: /^namespace\\\w+(?:\\\w+)*/
                            },
                            {
                                value: PHP.Constants.T_NAMESPACE,
                                re: /^namespace\b/i
                            },
                            {
                                value: PHP.Constants.T_ATTRIBUTE,
                                re: /^#\[([\S\s]*?)]/
                            },
                            {
                                value: PHP.Constants.T_COMMENT,
                                re: /^\/\*([\S\s]*?)(?:\*\/|$)/
                            },
                            {
                                value: PHP.Constants.T_COMMENT,
                                re: /^(?:\/\/|#)[^\r\n?]*(?:\?(?!>)[^\r\n?]*)*(?:\r\n|\r|\n)?/
                            },
                            {
                                value: PHP.Constants.T_IS_IDENTICAL,
                                re: /^===/
                            },
                            {
                                value: PHP.Constants.T_IS_EQUAL,
                                re: /^==/
                            },
                            {
                                value: PHP.Constants.T_IS_NOT_IDENTICAL,
                                re: /^!==/
                            },
                            {
                                value: PHP.Constants.T_IS_NOT_EQUAL,
                                re: /^(!=|<>)/
                            },
                            {
                                value: PHP.Constants.T_DNUMBER,
                                re: /^(?:[0-9]+\.[0-9]*|\.[0-9]+)(?:[eE][+-]?[0-9]+)?/
                            },
                            {
                                value: PHP.Constants.T_DNUMBER,
                                re: /^[0-9]+[eE][+-]?[0-9]+/
                            },
                            {
                                value: PHP.Constants.T_LNUMBER,
                                re: /^(?:0x[0-9A-F]+|0b[01]+|[0-9]+)/i
                            },
                            {
                                value: PHP.Constants.T_VARIABLE,
                                re: new RegExp('^\\$' + labelRegexPart)
                            },
                            {
                                value: PHP.Constants.T_CONSTANT_ENCAPSED_STRING,
                                re: /^[bB]?'[^'\\]*(?:\\[\s\S][^'\\]*)*'/
                            },
                            {
                                value: PHP.Constants.T_CONSTANT_ENCAPSED_STRING,
                                re: new RegExp('^[bB]?"' + stringRegexPart('"') + '"')
                            },
                            {
                                value: -1,
                                re: /^[bB]?"/,
                                func: function() {
                                    swapState('DOUBLE_QUOTES');
                                }
                            },
                            {
                                value: -1,
                                re: /^`/,
                                func: function() {
                                    swapState('BACKTICKS');
                                }
                            },
                            {
                                value: PHP.Constants.T_NS_SEPARATOR,
                                re: /^\\/
                            },
                            {
                                value: PHP.Constants.T_STRING,
                                re: /^[a-zA-Z_\x7f-\uffff][a-zA-Z0-9_\x7f-\uffff]*/
                            },
                            {
                                value: -1,
                                re: /^\{/,
                                func: function() {
                                    pushState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: -1,
                                re: /^\}/,
                                func: function() {
                                    if (stackPos > 0) {
                                        popState();
                                    }
                                }
                            },
                            {
                                value: -1,
                                re: /^[\[\];:?()!.,><=+-/*|&@^%"'$~]/
                            }
                        ],
                        'DOUBLE_QUOTES': sharedStringTokens.concat([
                            {
                                value: -1,
                                re: /^"/,
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: PHP.Constants.T_ENCAPSED_AND_WHITESPACE,
                                re: new RegExp('^' + stringRegexPart('"'))
                            }
                        ]),
                        'BACKTICKS': sharedStringTokens.concat([
                            {
                                value: -1,
                                re: /^`/,
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: PHP.Constants.T_ENCAPSED_AND_WHITESPACE,
                                re: new RegExp('^' + stringRegexPart('`'))
                            }
                        ]),
                        'VAR_OFFSET': [
                            {
                                value: -1,
                                re: /^\]/,
                                func: function() {
                                    popState();
                                }
                            },
                            {
                                value: PHP.Constants.T_NUM_STRING,
                                re: /^(?:0x[0-9A-F]+|0b[01]+|[0-9]+)/i
                            },
                            {
                                value: PHP.Constants.T_VARIABLE,
                                re: new RegExp('^\\$' + labelRegexPart)
                            },
                            {
                                value: PHP.Constants.T_STRING,
                                re: new RegExp('^' + labelRegexPart)
                            },
                            {
                                value: -1,
                                re: /^[;:,.\[()|^&+-/*=%!~$<>?@{}"`]/
                            }
                        ],
                        'LOOKING_FOR_PROPERTY': [
                            {
                                value: PHP.Constants.T_OBJECT_OPERATOR,
                                re: /^->/
                            },
                            {
                                value: PHP.Constants.T_STRING,
                                re: new RegExp('^' + labelRegexPart),
                                func: function() {
                                    popState();
                                }
                            },
                            {
                                value: PHP.Constants.T_WHITESPACE,
                                re: /^[ \n\r\t]+/
                            }
                        ],
                        'LOOKING_FOR_VARNAME': [
                            {
                                value: PHP.Constants.T_STRING_VARNAME,
                                re: new RegExp('^' + labelRegexPart + '(?=[\\[}])'),
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            }
                        ],
                        'NOWDOC': [
                            {
                                value: PHP.Constants.T_END_HEREDOC,
                                matchFunc: function(src) {
                                    var re = new RegExp('^' + heredoc + '(?=;?[\\r\\n])');
                                    if (src.match(re)) {
                                        return [
                                            src.substr(0, heredoc.length)
                                        ];
                                    } else {
                                        return null;
                                    }
                                },
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: PHP.Constants.T_ENCAPSED_AND_WHITESPACE,
                                matchFunc: function(src) {
                                    var re = new RegExp('[\\r\\n]' + heredoc + '(?=;?[\\r\\n])');
                                    var result = re.exec(src);
                                    var end = result ? result.index + 1 : src.length;
                                    return [
                                        src.substring(0, end)
                                    ];
                                }
                            }
                        ],
                        'HEREDOC': sharedStringTokens.concat([
                            {
                                value: PHP.Constants.T_END_HEREDOC,
                                matchFunc: function(src) {
                                    if (!heredocEndAllowed) {
                                        return null;
                                    }
                                    var re = new RegExp('^' + heredoc + '(?=;?[\\r\\n])');
                                    if (src.match(re)) {
                                        return [
                                            src.substr(0, heredoc.length)
                                        ];
                                    } else {
                                        return null;
                                    }
                                },
                                func: function() {
                                    swapState('IN_SCRIPTING');
                                }
                            },
                            {
                                value: PHP.Constants.T_ENCAPSED_AND_WHITESPACE,
                                matchFunc: function(src) {
                                    var end = src.length;
                                    // Find next interpolation
                                    var re = new RegExp('^' + stringRegexPart(''));
                                    var result = re.exec(src);
                                    if (result) {
                                        end = result[0].length;
                                    }
                                    // Find heredoc end
                                    re = new RegExp('([\\r\\n])' + heredoc + '(?=;?[\\r\\n])');
                                    result = re.exec(src.substring(0, end));
                                    if (result) {
                                        end = result.index + 1;
                                        heredocEndAllowed = true;
                                    } else {
                                        heredocEndAllowed = false;
                                    }
                                    if (end == 0) {
                                        return null;
                                    }
                                    return [
                                        src.substring(0, end)
                                    ];
                                }
                            }
                        ])
                    };
                    var results = [], line = 1, cancel = true;
                    if (src === null) {
                        return results;
                    }
                    if (typeof src !== "string") {
                        src = src.toString();
                    }
                    while(src.length > 0 && cancel === true){
                        var state = stateStack[stackPos];
                        var tokens = data[state];
                        cancel = tokens.some(function(token) {
                            var result = token.matchFunc !== undefined ? token.matchFunc(src) : src.match(token.re);
                            if (result !== null) {
                                if (result[0].length == 0) {
                                    // Error in the lexer definition, prevent infinite loop
                                    throw new Error("empty match");
                                }
                                if (token.func !== undefined) {
                                    token.func(result);
                                }
                                if (token.value === -1) {
                                    // character token
                                    results.push(result[0]);
                                } else {
                                    var resultString = result[0];
                                    results.push([
                                        parseInt(token.value, 10),
                                        resultString,
                                        line
                                    ]);
                                    line += resultString.split('\n').length - 1;
                                }
                                src = src.substring(result[0].length);
                                return true;
                            }
                            return false;
                        });
                    }
                    return results;
                };
                /*
	 * @author Niklas von Hertzen <niklas at hertzen.com>
	 * @created 15.6.2012
	 * @website http://hertzen.com
	 */ /*
	 * The skeleton for this parser was written by Moriyoshi Koizumi and is based on
	 * the work by Masato Bito and is in the PUBLIC DOMAIN.
	 * Ported to JavaScript by Niklas von Hertzen
	 */ PHP.Parser = function(preprocessedTokens, evaluate) {
                    var yybase = this.yybase, yydefault = this.yydefault, yycheck = this.yycheck, yyaction = this.yyaction, yylen = this.yylen, yygbase = this.yygbase, yygcheck = this.yygcheck, yyp = this.yyp, yygoto = this.yygoto, yylhs = this.yylhs, terminals = this.terminals, translate = this.translate, yygdefault = this.yygdefault;
                    this.pos = -1;
                    this.line = 1;
                    this.tokenMap = this.createTokenMap();
                    this.dropTokens = {};
                    this.dropTokens[PHP.Constants.T_WHITESPACE] = 1;
                    this.dropTokens[PHP.Constants.T_OPEN_TAG] = 1;
                    var tokens = [];
                    // pre-process
                    preprocessedTokens.forEach(function(token, index) {
                        if (typeof token === "object" && token[0] === PHP.Constants.T_OPEN_TAG_WITH_ECHO) {
                            tokens.push([
                                PHP.Constants.T_OPEN_TAG,
                                token[1],
                                token[2]
                            ]);
                            tokens.push([
                                PHP.Constants.T_ECHO,
                                token[1],
                                token[2]
                            ]);
                        } else {
                            tokens.push(token);
                        }
                    });
                    this.tokens = tokens;
                    // We start off with no lookahead-token
                    var tokenId = this.TOKEN_NONE;
                    // The attributes for a node are taken from the first and last token of the node.
                    // From the first token only the startAttributes are taken and from the last only
                    // the endAttributes. Both are merged using the array union operator (+).
                    this.startAttributes = {
                        'startLine': 1
                    };
                    this.endAttributes = {};
                    // In order to figure out the attributes for the starting token, we have to keep
                    // them in a stack
                    var attributeStack = [
                        this.startAttributes
                    ];
                    // Start off in the initial state and keep a stack of previous states
                    var state = 0;
                    var stateStack = [
                        state
                    ];
                    // AST stack
                    this.yyastk = [];
                    // Current position in the stack(s)
                    this.stackPos = 0;
                    var yyn;
                    var origTokenId;
                    for(;;){
                        if (yybase[state] === 0) {
                            yyn = yydefault[state];
                        } else {
                            if (tokenId === this.TOKEN_NONE) {
                                // fetch the next token id from the lexer and fetch additional info by-ref
                                origTokenId = this.getNextToken();
                                // map the lexer token id to the internally used token id's
                                tokenId = origTokenId >= 0 && origTokenId < this.TOKEN_MAP_SIZE ? translate[origTokenId] : this.TOKEN_INVALID;
                                attributeStack[this.stackPos] = this.startAttributes;
                            }
                            if (((yyn = yybase[state] + tokenId) >= 0 && yyn < this.YYLAST && yycheck[yyn] === tokenId || state < this.YY2TBLSTATE && (yyn = yybase[state + this.YYNLSTATES] + tokenId) >= 0 && yyn < this.YYLAST && yycheck[yyn] === tokenId) && (yyn = yyaction[yyn]) !== this.YYDEFAULT) {
                                /*
					 * >= YYNLSTATE: shift and reduce
					 * > 0: shift
					 * = 0: accept
					 * < 0: reduce
					 * = -YYUNEXPECTED: error
					 */ if (yyn > 0) {
                                    /* shift */ ++this.stackPos;
                                    stateStack[this.stackPos] = state = yyn;
                                    this.yyastk[this.stackPos] = this.tokenValue;
                                    attributeStack[this.stackPos] = this.startAttributes;
                                    tokenId = this.TOKEN_NONE;
                                    if (yyn < this.YYNLSTATES) continue;
                                    /* $yyn >= YYNLSTATES means shift-and-reduce */ yyn -= this.YYNLSTATES;
                                } else {
                                    yyn = -yyn;
                                }
                            } else {
                                yyn = yydefault[state];
                            }
                        }
                        for(;;){
                            /* reduce/error */ if (yyn === 0) {
                                /* accept */ return this.yyval;
                            } else if (yyn !== this.YYUNEXPECTED) {
                                /* reduce */ for(var attr in this.endAttributes){
                                    attributeStack[this.stackPos - yylen[yyn]][attr] = this.endAttributes[attr];
                                }
                                // We do not build an AST!
                                // this['yyn' + yyn](attributeStack[ this.stackPos - yylen[ yyn ] ]);
                                /* Goto - shift nonterminal */ this.stackPos -= yylen[yyn];
                                yyn = yylhs[yyn];
                                if ((yyp = yygbase[yyn] + stateStack[this.stackPos]) >= 0 && yyp < this.YYGLAST && yygcheck[yyp] === yyn) {
                                    state = yygoto[yyp];
                                } else {
                                    state = yygdefault[yyn];
                                }
                                ++this.stackPos;
                                stateStack[this.stackPos] = state;
                                this.yyastk[this.stackPos] = this.yyval;
                                attributeStack[this.stackPos] = this.startAttributes;
                            } else {
                                /* error */ if (evaluate !== true) {
                                    var expected = [];
                                    for(var i = 0; i < this.TOKEN_MAP_SIZE; ++i){
                                        if ((yyn = yybase[state] + i) >= 0 && yyn < this.YYLAST && yycheck[yyn] == i || state < this.YY2TBLSTATE && (yyn = yybase[state + this.YYNLSTATES] + i) && yyn < this.YYLAST && yycheck[yyn] == i) {
                                            if (yyaction[yyn] != this.YYUNEXPECTED) {
                                                if (expected.length == 4) {
                                                    /* Too many expected tokens */ expected = [];
                                                    break;
                                                }
                                                expected.push(this.terminals[i]);
                                            }
                                        }
                                    }
                                    var expectedString = '';
                                    if (expected.length) {
                                        expectedString = ', expecting ' + expected.join(' or ');
                                    }
                                    throw new PHP.ParseError('syntax error, unexpected ' + terminals[tokenId] + expectedString, this.startAttributes['startLine']);
                                } else {
                                    return this.startAttributes['startLine'];
                                }
                            }
                            if (state < this.YYNLSTATES) break;
                            /* >= YYNLSTATES means shift-and-reduce */ yyn = state - this.YYNLSTATES;
                        }
                    }
                };
                PHP.ParseError = function(msg, line) {
                    this.message = msg;
                    this.line = line;
                };
                PHP.Parser.prototype.getNextToken = function() {
                    this.startAttributes = {};
                    this.endAttributes = {};
                    var token, tmp;
                    while(this.tokens[++this.pos] !== undefined){
                        token = this.tokens[this.pos];
                        if (typeof token === "string") {
                            this.startAttributes['startLine'] = this.line;
                            this.endAttributes['endLine'] = this.line;
                            // bug in token_get_all
                            if ('b"' === token) {
                                this.tokenValue = 'b"';
                                return '"'.charCodeAt(0);
                            } else {
                                this.tokenValue = token;
                                return token.charCodeAt(0);
                            }
                        } else {
                            this.line += (tmp = token[1].match(/\n/g)) === null ? 0 : tmp.length;
                            if (PHP.Constants.T_COMMENT === token[0]) {
                                if (!Array.isArray(this.startAttributes['comments'])) {
                                    this.startAttributes['comments'] = [];
                                }
                                this.startAttributes['comments'].push({
                                    type: "comment",
                                    comment: token[1],
                                    line: token[2]
                                });
                            } else if (PHP.Constants.T_ATTRIBUTE === token[0]) {
                                this.tokenValue = token[1];
                                this.startAttributes['startLine'] = token[2];
                                this.endAttributes['endLine'] = this.line;
                            } else if (PHP.Constants.T_DOC_COMMENT === token[0]) {
                                this.startAttributes['comments'].push(new PHPParser_Comment_Doc(token[1], token[2]));
                            } else if (this.dropTokens[token[0]] === undefined) {
                                this.tokenValue = token[1];
                                this.startAttributes['startLine'] = token[2];
                                this.endAttributes['endLine'] = this.line;
                                return this.tokenMap[token[0]];
                            }
                        }
                    }
                    this.startAttributes['startLine'] = this.line;
                    // 0 is the EOF token
                    return 0;
                };
                PHP.Parser.prototype.tokenName = function(token) {
                    var constants = [
                        "T_THROW",
                        "T_INCLUDE",
                        "T_INCLUDE_ONCE",
                        "T_EVAL",
                        "T_REQUIRE",
                        "T_REQUIRE_ONCE",
                        "T_LOGICAL_OR",
                        "T_LOGICAL_XOR",
                        "T_LOGICAL_AND",
                        "T_PRINT",
                        "T_YIELD",
                        "T_DOUBLE_ARROW",
                        "T_YIELD_FROM",
                        "T_PLUS_EQUAL",
                        "T_MINUS_EQUAL",
                        "T_MUL_EQUAL",
                        "T_DIV_EQUAL",
                        "T_CONCAT_EQUAL",
                        "T_MOD_EQUAL",
                        "T_AND_EQUAL",
                        "T_OR_EQUAL",
                        "T_XOR_EQUAL",
                        "T_SL_EQUAL",
                        "T_SR_EQUAL",
                        "T_POW_EQUAL",
                        "T_COALESCE_EQUAL",
                        "T_COALESCE",
                        "T_BOOLEAN_OR",
                        "T_BOOLEAN_AND",
                        "T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG",
                        "T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG",
                        "T_IS_EQUAL",
                        "T_IS_NOT_EQUAL",
                        "T_IS_IDENTICAL",
                        "T_IS_NOT_IDENTICAL",
                        "T_SPACESHIP",
                        "T_IS_SMALLER_OR_EQUAL",
                        "T_IS_GREATER_OR_EQUAL",
                        "T_SL",
                        "T_SR",
                        "T_INSTANCEOF",
                        "T_INC",
                        "T_DEC",
                        "T_INT_CAST",
                        "T_DOUBLE_CAST",
                        "T_STRING_CAST",
                        "T_ARRAY_CAST",
                        "T_OBJECT_CAST",
                        "T_BOOL_CAST",
                        "T_UNSET_CAST",
                        "T_POW",
                        "T_NEW",
                        "T_CLONE",
                        "T_EXIT",
                        "T_IF",
                        "T_ELSEIF",
                        "T_ELSE",
                        "T_ENDIF",
                        "T_LNUMBER",
                        "T_DNUMBER",
                        "T_STRING",
                        "T_STRING_VARNAME",
                        "T_VARIABLE",
                        "T_NUM_STRING",
                        "T_INLINE_HTML",
                        "T_ENCAPSED_AND_WHITESPACE",
                        "T_CONSTANT_ENCAPSED_STRING",
                        "T_ECHO",
                        "T_DO",
                        "T_WHILE",
                        "T_ENDWHILE",
                        "T_FOR",
                        "T_ENDFOR",
                        "T_FOREACH",
                        "T_ENDFOREACH",
                        "T_DECLARE",
                        "T_ENDDECLARE",
                        "T_AS",
                        "T_SWITCH",
                        "T_MATCH",
                        "T_ENDSWITCH",
                        "T_CASE",
                        "T_DEFAULT",
                        "T_BREAK",
                        "T_CONTINUE",
                        "T_GOTO",
                        "T_FUNCTION",
                        "T_FN",
                        "T_CONST",
                        "T_RETURN",
                        "T_TRY",
                        "T_CATCH",
                        "T_FINALLY",
                        "T_THROW",
                        "T_USE",
                        "T_INSTEADOF",
                        "T_GLOBAL",
                        "T_STATIC",
                        "T_ABSTRACT",
                        "T_FINAL",
                        "T_PRIVATE",
                        "T_PROTECTED",
                        "T_PUBLIC",
                        "T_READONLY",
                        "T_VAR",
                        "T_UNSET",
                        "T_ISSET",
                        "T_EMPTY",
                        "T_HALT_COMPILER",
                        "T_CLASS",
                        "T_TRAIT",
                        "T_INTERFACE",
                        "T_ENUM",
                        "T_EXTENDS",
                        "T_IMPLEMENTS",
                        "T_OBJECT_OPERATOR",
                        "T_NULLSAFE_OBJECT_OPERATOR",
                        "T_DOUBLE_ARROW",
                        "T_LIST",
                        "T_ARRAY",
                        "T_CALLABLE",
                        "T_CLASS_C",
                        "T_TRAIT_C",
                        "T_METHOD_C",
                        "T_FUNC_C",
                        "T_LINE",
                        "T_FILE",
                        "T_START_HEREDOC",
                        "T_END_HEREDOC",
                        "T_DOLLAR_OPEN_CURLY_BRACES",
                        "T_CURLY_OPEN",
                        "T_PAAMAYIM_NEKUDOTAYIM",
                        "T_NAMESPACE",
                        "T_NS_C",
                        "T_DIR",
                        "T_NS_SEPARATOR",
                        "T_ELLIPSIS",
                        "T_NAME_FULLY_QUALIFIED",
                        "T_NAME_QUALIFIED",
                        "T_NAME_RELATIVE",
                        "T_ATTRIBUTE",
                        "T_ENUM",
                        "T_BAD_CHARACTER",
                        "T_COMMENT",
                        "T_DOC_COMMENT",
                        "T_OPEN_TAG",
                        "T_OPEN_TAG_WITH_ECHO",
                        "T_CLOSE_TAG",
                        "T_WHITESPACE"
                    ];
                    var current = "UNKNOWN";
                    constants.some(function(constant) {
                        if (PHP.Constants[constant] === token) {
                            current = constant;
                            return true;
                        } else {
                            return false;
                        }
                    });
                    return current;
                };
                /**
 * Creates the token map.
 *
 * The token map maps the PHP internal token identifiers
 * to the identifiers used by the PHP.Parser. Additionally it
 * maps T_OPEN_TAG_WITH_ECHO to T_ECHO and T_CLOSE_TAG to ';'.
 *
 * @return array The token map
 */ PHP.Parser.prototype.createTokenMap = function() {
                    var tokenMap = {}, name, i;
                    // 256 is the minimum possible token number, as everything below
                    // it is an ASCII value
                    for(i = 256; i < 1000; ++i){
                        // T_OPEN_TAG_WITH_ECHO with dropped T_OPEN_TAG results in T_ECHO
                        if (PHP.Constants.T_OPEN_TAG_WITH_ECHO === i) {
                            tokenMap[i] = PHP.Constants.T_ECHO;
                        // T_CLOSE_TAG is equivalent to ';'
                        } else if (PHP.Constants.T_CLOSE_TAG === i) {
                            tokenMap[i] = 59;
                        // and the others can be mapped directly
                        } else if ('UNKNOWN' !== (name = this.tokenName(i))) {
                            tokenMap[i] = this[name];
                        }
                    }
                    return tokenMap;
                };
                /* This is an automatically GENERATED file, which should not be manually edited.
	 * Instead edit one of the following:
	 *  * the grammar file grammar/zend_language_parser.jsy
	 *  * the parser skeleton grammar/kymacc.js.parser
	 *  * the preprocessing script grammar/rebuildParser.php
	 *
	 * The skeleton for this parser was written by Moriyoshi Koizumi and is based on
	 * the work by Masato Bito and is in the PUBLIC DOMAIN.
	 * Ported to JavaScript by Niklas von Hertzen
	 */ PHP.Parser.prototype.TOKEN_NONE = -1;
                PHP.Parser.prototype.TOKEN_INVALID = 175;
                PHP.Parser.prototype.TOKEN_MAP_SIZE = 403;
                PHP.Parser.prototype.YYLAST = 1196;
                PHP.Parser.prototype.YY2TBLSTATE = 420;
                PHP.Parser.prototype.YYGLAST = 545;
                PHP.Parser.prototype.YYNLSTATES = 710;
                PHP.Parser.prototype.YYUNEXPECTED = 32767;
                PHP.Parser.prototype.YYDEFAULT = -32766;
                // {{{ Tokens
                PHP.Parser.prototype.YYERRTOK = 256;
                PHP.Parser.prototype.T_THROW = 257;
                PHP.Parser.prototype.T_INCLUDE = 258;
                PHP.Parser.prototype.T_INCLUDE_ONCE = 259;
                PHP.Parser.prototype.T_EVAL = 260;
                PHP.Parser.prototype.T_REQUIRE = 261;
                PHP.Parser.prototype.T_REQUIRE_ONCE = 262;
                PHP.Parser.prototype.T_LOGICAL_OR = 263;
                PHP.Parser.prototype.T_LOGICAL_XOR = 264;
                PHP.Parser.prototype.T_LOGICAL_AND = 265;
                PHP.Parser.prototype.T_PRINT = 266;
                PHP.Parser.prototype.T_YIELD = 267;
                PHP.Parser.prototype.T_DOUBLE_ARROW = 268;
                PHP.Parser.prototype.T_YIELD_FROM = 269;
                PHP.Parser.prototype.T_PLUS_EQUAL = 270;
                PHP.Parser.prototype.T_MINUS_EQUAL = 271;
                PHP.Parser.prototype.T_MUL_EQUAL = 272;
                PHP.Parser.prototype.T_DIV_EQUAL = 273;
                PHP.Parser.prototype.T_CONCAT_EQUAL = 274;
                PHP.Parser.prototype.T_MOD_EQUAL = 275;
                PHP.Parser.prototype.T_AND_EQUAL = 276;
                PHP.Parser.prototype.T_OR_EQUAL = 277;
                PHP.Parser.prototype.T_XOR_EQUAL = 278;
                PHP.Parser.prototype.T_SL_EQUAL = 279;
                PHP.Parser.prototype.T_SR_EQUAL = 280;
                PHP.Parser.prototype.T_POW_EQUAL = 281;
                PHP.Parser.prototype.T_COALESCE_EQUAL = 282;
                PHP.Parser.prototype.T_COALESCE = 283;
                PHP.Parser.prototype.T_BOOLEAN_OR = 284;
                PHP.Parser.prototype.T_BOOLEAN_AND = 285;
                PHP.Parser.prototype.T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG = 286;
                PHP.Parser.prototype.T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG = 287;
                PHP.Parser.prototype.T_IS_EQUAL = 288;
                PHP.Parser.prototype.T_IS_NOT_EQUAL = 289;
                PHP.Parser.prototype.T_IS_IDENTICAL = 290;
                PHP.Parser.prototype.T_IS_NOT_IDENTICAL = 291;
                PHP.Parser.prototype.T_SPACESHIP = 292;
                PHP.Parser.prototype.T_IS_SMALLER_OR_EQUAL = 293;
                PHP.Parser.prototype.T_IS_GREATER_OR_EQUAL = 294;
                PHP.Parser.prototype.T_SL = 295;
                PHP.Parser.prototype.T_SR = 296;
                PHP.Parser.prototype.T_INSTANCEOF = 297;
                PHP.Parser.prototype.T_INC = 298;
                PHP.Parser.prototype.T_DEC = 299;
                PHP.Parser.prototype.T_INT_CAST = 300;
                PHP.Parser.prototype.T_DOUBLE_CAST = 301;
                PHP.Parser.prototype.T_STRING_CAST = 302;
                PHP.Parser.prototype.T_ARRAY_CAST = 303;
                PHP.Parser.prototype.T_OBJECT_CAST = 304;
                PHP.Parser.prototype.T_BOOL_CAST = 305;
                PHP.Parser.prototype.T_UNSET_CAST = 306;
                PHP.Parser.prototype.T_POW = 307;
                PHP.Parser.prototype.T_NEW = 308;
                PHP.Parser.prototype.T_CLONE = 309;
                PHP.Parser.prototype.T_EXIT = 310;
                PHP.Parser.prototype.T_IF = 311;
                PHP.Parser.prototype.T_ELSEIF = 312;
                PHP.Parser.prototype.T_ELSE = 313;
                PHP.Parser.prototype.T_ENDIF = 314;
                PHP.Parser.prototype.T_LNUMBER = 315;
                PHP.Parser.prototype.T_DNUMBER = 316;
                PHP.Parser.prototype.T_STRING = 317;
                PHP.Parser.prototype.T_STRING_VARNAME = 318;
                PHP.Parser.prototype.T_VARIABLE = 319;
                PHP.Parser.prototype.T_NUM_STRING = 320;
                PHP.Parser.prototype.T_INLINE_HTML = 321;
                PHP.Parser.prototype.T_ENCAPSED_AND_WHITESPACE = 322;
                PHP.Parser.prototype.T_CONSTANT_ENCAPSED_STRING = 323;
                PHP.Parser.prototype.T_ECHO = 324;
                PHP.Parser.prototype.T_DO = 325;
                PHP.Parser.prototype.T_WHILE = 326;
                PHP.Parser.prototype.T_ENDWHILE = 327;
                PHP.Parser.prototype.T_FOR = 328;
                PHP.Parser.prototype.T_ENDFOR = 329;
                PHP.Parser.prototype.T_FOREACH = 330;
                PHP.Parser.prototype.T_ENDFOREACH = 331;
                PHP.Parser.prototype.T_DECLARE = 332;
                PHP.Parser.prototype.T_ENDDECLARE = 333;
                PHP.Parser.prototype.T_AS = 334;
                PHP.Parser.prototype.T_SWITCH = 335;
                PHP.Parser.prototype.T_MATCH = 336;
                PHP.Parser.prototype.T_ENDSWITCH = 337;
                PHP.Parser.prototype.T_CASE = 338;
                PHP.Parser.prototype.T_DEFAULT = 339;
                PHP.Parser.prototype.T_BREAK = 340;
                PHP.Parser.prototype.T_CONTINUE = 341;
                PHP.Parser.prototype.T_GOTO = 342;
                PHP.Parser.prototype.T_FUNCTION = 343;
                PHP.Parser.prototype.T_FN = 344;
                PHP.Parser.prototype.T_CONST = 345;
                PHP.Parser.prototype.T_RETURN = 346;
                PHP.Parser.prototype.T_TRY = 347;
                PHP.Parser.prototype.T_CATCH = 348;
                PHP.Parser.prototype.T_FINALLY = 349;
                PHP.Parser.prototype.T_USE = 350;
                PHP.Parser.prototype.T_INSTEADOF = 351;
                PHP.Parser.prototype.T_GLOBAL = 352;
                PHP.Parser.prototype.T_STATIC = 353;
                PHP.Parser.prototype.T_ABSTRACT = 354;
                PHP.Parser.prototype.T_FINAL = 355;
                PHP.Parser.prototype.T_PRIVATE = 356;
                PHP.Parser.prototype.T_PROTECTED = 357;
                PHP.Parser.prototype.T_PUBLIC = 358;
                PHP.Parser.prototype.T_READONLY = 359;
                PHP.Parser.prototype.T_VAR = 360;
                PHP.Parser.prototype.T_UNSET = 361;
                PHP.Parser.prototype.T_ISSET = 362;
                PHP.Parser.prototype.T_EMPTY = 363;
                PHP.Parser.prototype.T_HALT_COMPILER = 364;
                PHP.Parser.prototype.T_CLASS = 365;
                PHP.Parser.prototype.T_TRAIT = 366;
                PHP.Parser.prototype.T_INTERFACE = 367;
                PHP.Parser.prototype.T_ENUM = 368;
                PHP.Parser.prototype.T_EXTENDS = 369;
                PHP.Parser.prototype.T_IMPLEMENTS = 370;
                PHP.Parser.prototype.T_OBJECT_OPERATOR = 371;
                PHP.Parser.prototype.T_NULLSAFE_OBJECT_OPERATOR = 372;
                PHP.Parser.prototype.T_LIST = 373;
                PHP.Parser.prototype.T_ARRAY = 374;
                PHP.Parser.prototype.T_CALLABLE = 375;
                PHP.Parser.prototype.T_CLASS_C = 376;
                PHP.Parser.prototype.T_TRAIT_C = 377;
                PHP.Parser.prototype.T_METHOD_C = 378;
                PHP.Parser.prototype.T_FUNC_C = 379;
                PHP.Parser.prototype.T_LINE = 380;
                PHP.Parser.prototype.T_FILE = 381;
                PHP.Parser.prototype.T_START_HEREDOC = 382;
                PHP.Parser.prototype.T_END_HEREDOC = 383;
                PHP.Parser.prototype.T_DOLLAR_OPEN_CURLY_BRACES = 384;
                PHP.Parser.prototype.T_CURLY_OPEN = 385;
                PHP.Parser.prototype.T_PAAMAYIM_NEKUDOTAYIM = 386;
                PHP.Parser.prototype.T_NAMESPACE = 387;
                PHP.Parser.prototype.T_NS_C = 388;
                PHP.Parser.prototype.T_DIR = 389;
                PHP.Parser.prototype.T_NS_SEPARATOR = 390;
                PHP.Parser.prototype.T_ELLIPSIS = 391;
                PHP.Parser.prototype.T_NAME_FULLY_QUALIFIED = 392;
                PHP.Parser.prototype.T_NAME_QUALIFIED = 393;
                PHP.Parser.prototype.T_NAME_RELATIVE = 394;
                PHP.Parser.prototype.T_ATTRIBUTE = 395;
                PHP.Parser.prototype.T_BAD_CHARACTER = 396;
                PHP.Parser.prototype.T_COMMENT = 397;
                PHP.Parser.prototype.T_DOC_COMMENT = 398;
                PHP.Parser.prototype.T_OPEN_TAG = 399;
                PHP.Parser.prototype.T_OPEN_TAG_WITH_ECHO = 400;
                PHP.Parser.prototype.T_CLOSE_TAG = 401;
                PHP.Parser.prototype.T_WHITESPACE = 402;
                // }}}
                /* @var array Map of token ids to their respective names */ PHP.Parser.prototype.terminals = [
                    "EOF",
                    "error",
                    "T_THROW",
                    "T_INCLUDE",
                    "T_INCLUDE_ONCE",
                    "T_EVAL",
                    "T_REQUIRE",
                    "T_REQUIRE_ONCE",
                    "','",
                    "T_LOGICAL_OR",
                    "T_LOGICAL_XOR",
                    "T_LOGICAL_AND",
                    "T_PRINT",
                    "T_YIELD",
                    "T_DOUBLE_ARROW",
                    "T_YIELD_FROM",
                    "'='",
                    "T_PLUS_EQUAL",
                    "T_MINUS_EQUAL",
                    "T_MUL_EQUAL",
                    "T_DIV_EQUAL",
                    "T_CONCAT_EQUAL",
                    "T_MOD_EQUAL",
                    "T_AND_EQUAL",
                    "T_OR_EQUAL",
                    "T_XOR_EQUAL",
                    "T_SL_EQUAL",
                    "T_SR_EQUAL",
                    "T_POW_EQUAL",
                    "T_COALESCE_EQUAL",
                    "'?'",
                    "':'",
                    "T_COALESCE",
                    "T_BOOLEAN_OR",
                    "T_BOOLEAN_AND",
                    "'|'",
                    "'^'",
                    "T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG",
                    "T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG",
                    "T_IS_EQUAL",
                    "T_IS_NOT_EQUAL",
                    "T_IS_IDENTICAL",
                    "T_IS_NOT_IDENTICAL",
                    "T_SPACESHIP",
                    "'<'",
                    "T_IS_SMALLER_OR_EQUAL",
                    "'>'",
                    "T_IS_GREATER_OR_EQUAL",
                    "T_SL",
                    "T_SR",
                    "'+'",
                    "'-'",
                    "'.'",
                    "'*'",
                    "'/'",
                    "'%'",
                    "'!'",
                    "T_INSTANCEOF",
                    "'~'",
                    "T_INC",
                    "T_DEC",
                    "T_INT_CAST",
                    "T_DOUBLE_CAST",
                    "T_STRING_CAST",
                    "T_ARRAY_CAST",
                    "T_OBJECT_CAST",
                    "T_BOOL_CAST",
                    "T_UNSET_CAST",
                    "'@'",
                    "T_POW",
                    "'['",
                    "T_NEW",
                    "T_CLONE",
                    "T_EXIT",
                    "T_IF",
                    "T_ELSEIF",
                    "T_ELSE",
                    "T_ENDIF",
                    "T_LNUMBER",
                    "T_DNUMBER",
                    "T_STRING",
                    "T_STRING_VARNAME",
                    "T_VARIABLE",
                    "T_NUM_STRING",
                    "T_INLINE_HTML",
                    "T_ENCAPSED_AND_WHITESPACE",
                    "T_CONSTANT_ENCAPSED_STRING",
                    "T_ECHO",
                    "T_DO",
                    "T_WHILE",
                    "T_ENDWHILE",
                    "T_FOR",
                    "T_ENDFOR",
                    "T_FOREACH",
                    "T_ENDFOREACH",
                    "T_DECLARE",
                    "T_ENDDECLARE",
                    "T_AS",
                    "T_SWITCH",
                    "T_MATCH",
                    "T_ENDSWITCH",
                    "T_CASE",
                    "T_DEFAULT",
                    "T_BREAK",
                    "T_CONTINUE",
                    "T_GOTO",
                    "T_FUNCTION",
                    "T_FN",
                    "T_CONST",
                    "T_RETURN",
                    "T_TRY",
                    "T_CATCH",
                    "T_FINALLY",
                    "T_USE",
                    "T_INSTEADOF",
                    "T_GLOBAL",
                    "T_STATIC",
                    "T_ABSTRACT",
                    "T_FINAL",
                    "T_PRIVATE",
                    "T_PROTECTED",
                    "T_PUBLIC",
                    "T_READONLY",
                    "T_VAR",
                    "T_UNSET",
                    "T_ISSET",
                    "T_EMPTY",
                    "T_HALT_COMPILER",
                    "T_CLASS",
                    "T_TRAIT",
                    "T_INTERFACE",
                    "T_ENUM",
                    "T_EXTENDS",
                    "T_IMPLEMENTS",
                    "T_OBJECT_OPERATOR",
                    "T_NULLSAFE_OBJECT_OPERATOR",
                    "T_LIST",
                    "T_ARRAY",
                    "T_CALLABLE",
                    "T_CLASS_C",
                    "T_TRAIT_C",
                    "T_METHOD_C",
                    "T_FUNC_C",
                    "T_LINE",
                    "T_FILE",
                    "T_START_HEREDOC",
                    "T_END_HEREDOC",
                    "T_DOLLAR_OPEN_CURLY_BRACES",
                    "T_CURLY_OPEN",
                    "T_PAAMAYIM_NEKUDOTAYIM",
                    "T_NAMESPACE",
                    "T_NS_C",
                    "T_DIR",
                    "T_NS_SEPARATOR",
                    "T_ELLIPSIS",
                    "T_NAME_FULLY_QUALIFIED",
                    "T_NAME_QUALIFIED",
                    "T_NAME_RELATIVE",
                    "T_ATTRIBUTE",
                    "';'",
                    "']'",
                    "'{'",
                    "'}'",
                    "'('",
                    "')'",
                    "'`'",
                    "'\"'",
                    "'$'",
                    "T_BAD_CHARACTER",
                    "T_COMMENT",
                    "T_DOC_COMMENT",
                    "T_OPEN_TAG",
                    "T_OPEN_TAG_WITH_ECHO",
                    "T_CLOSE_TAG",
                    "T_WHITESPACE",
                    "???"
                ];
                /* @var Map which translates lexer tokens to internal tokens */ PHP.Parser.prototype.translate = [
                    0,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    56,
                    166,
                    175,
                    167,
                    55,
                    175,
                    175,
                    163,
                    164,
                    53,
                    50,
                    8,
                    51,
                    52,
                    54,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    31,
                    159,
                    44,
                    16,
                    46,
                    30,
                    68,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    70,
                    175,
                    160,
                    36,
                    175,
                    165,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    161,
                    35,
                    162,
                    58,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    175,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    32,
                    33,
                    34,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    45,
                    47,
                    48,
                    49,
                    57,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    69,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    174
                ];
                PHP.Parser.prototype.yyaction = [
                    132,
                    133,
                    134,
                    569,
                    135,
                    136,
                    0,
                    722,
                    723,
                    724,
                    137,
                    37,
                    834,
                    911,
                    835,
                    469,
                    -32766,
                    -32766,
                    -32766,
                    -32767,
                    -32767,
                    -32767,
                    -32767,
                    101,
                    102,
                    103,
                    104,
                    105,
                    1068,
                    1069,
                    1070,
                    1067,
                    1066,
                    1065,
                    1071,
                    716,
                    715,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32767,
                    -32767,
                    -32767,
                    -32767,
                    -32767,
                    545,
                    546,
                    -32766,
                    -32766,
                    725,
                    -32766,
                    -32766,
                    -32766,
                    998,
                    999,
                    806,
                    922,
                    447,
                    448,
                    449,
                    370,
                    371,
                    2,
                    267,
                    138,
                    396,
                    729,
                    730,
                    731,
                    732,
                    414,
                    -32766,
                    420,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    990,
                    733,
                    734,
                    735,
                    736,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    763,
                    570,
                    764,
                    765,
                    766,
                    767,
                    755,
                    756,
                    336,
                    337,
                    758,
                    759,
                    744,
                    745,
                    746,
                    748,
                    749,
                    750,
                    346,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    751,
                    752,
                    571,
                    572,
                    784,
                    775,
                    773,
                    774,
                    787,
                    770,
                    771,
                    283,
                    420,
                    573,
                    574,
                    769,
                    575,
                    576,
                    577,
                    578,
                    579,
                    580,
                    598,
                    -575,
                    470,
                    14,
                    798,
                    772,
                    581,
                    582,
                    -575,
                    139,
                    -32766,
                    -32766,
                    -32766,
                    132,
                    133,
                    134,
                    569,
                    135,
                    136,
                    1017,
                    722,
                    723,
                    724,
                    137,
                    37,
                    1060,
                    -32766,
                    -32766,
                    -32766,
                    1303,
                    696,
                    -32766,
                    1304,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    1068,
                    1069,
                    1070,
                    1067,
                    1066,
                    1065,
                    1071,
                    -32766,
                    716,
                    715,
                    372,
                    371,
                    1258,
                    -32766,
                    -32766,
                    -32766,
                    -572,
                    106,
                    107,
                    108,
                    414,
                    270,
                    891,
                    -572,
                    240,
                    1193,
                    1192,
                    1194,
                    725,
                    -32766,
                    -32766,
                    -32766,
                    1046,
                    109,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    986,
                    985,
                    984,
                    987,
                    267,
                    138,
                    396,
                    729,
                    730,
                    731,
                    732,
                    12,
                    -32766,
                    420,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    998,
                    999,
                    733,
                    734,
                    735,
                    736,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    763,
                    570,
                    764,
                    765,
                    766,
                    767,
                    755,
                    756,
                    336,
                    337,
                    758,
                    759,
                    744,
                    745,
                    746,
                    748,
                    749,
                    750,
                    346,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    751,
                    752,
                    571,
                    572,
                    784,
                    775,
                    773,
                    774,
                    787,
                    770,
                    771,
                    881,
                    321,
                    573,
                    574,
                    769,
                    575,
                    576,
                    577,
                    578,
                    579,
                    580,
                    -32766,
                    82,
                    83,
                    84,
                    -575,
                    772,
                    581,
                    582,
                    -575,
                    148,
                    747,
                    717,
                    718,
                    719,
                    720,
                    721,
                    1278,
                    722,
                    723,
                    724,
                    760,
                    761,
                    36,
                    1277,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    996,
                    270,
                    150,
                    -32766,
                    -32766,
                    -32766,
                    455,
                    456,
                    81,
                    34,
                    -264,
                    -572,
                    1016,
                    109,
                    320,
                    -572,
                    893,
                    725,
                    682,
                    803,
                    128,
                    998,
                    999,
                    592,
                    -32766,
                    1044,
                    -32766,
                    -32766,
                    -32766,
                    809,
                    151,
                    726,
                    727,
                    728,
                    729,
                    730,
                    731,
                    732,
                    -88,
                    1198,
                    796,
                    278,
                    -526,
                    283,
                    -32766,
                    -32766,
                    -32766,
                    733,
                    734,
                    735,
                    736,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    763,
                    786,
                    764,
                    765,
                    766,
                    767,
                    755,
                    756,
                    757,
                    785,
                    758,
                    759,
                    744,
                    745,
                    746,
                    748,
                    749,
                    750,
                    789,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    751,
                    752,
                    753,
                    754,
                    784,
                    775,
                    773,
                    774,
                    787,
                    770,
                    771,
                    144,
                    804,
                    762,
                    768,
                    769,
                    776,
                    777,
                    779,
                    778,
                    780,
                    781,
                    -314,
                    -526,
                    -526,
                    -193,
                    -192,
                    772,
                    783,
                    782,
                    49,
                    50,
                    51,
                    500,
                    52,
                    53,
                    239,
                    807,
                    -526,
                    -86,
                    54,
                    55,
                    -111,
                    56,
                    996,
                    253,
                    -32766,
                    -111,
                    800,
                    -111,
                    -526,
                    541,
                    -532,
                    -352,
                    300,
                    -352,
                    304,
                    -111,
                    -111,
                    -111,
                    -111,
                    -111,
                    -111,
                    -111,
                    -111,
                    998,
                    999,
                    998,
                    999,
                    153,
                    -32766,
                    -32766,
                    -32766,
                    1191,
                    807,
                    126,
                    306,
                    1293,
                    57,
                    58,
                    103,
                    104,
                    105,
                    -111,
                    59,
                    1218,
                    60,
                    246,
                    247,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    -525,
                    27,
                    268,
                    69,
                    436,
                    501,
                    -328,
                    808,
                    -86,
                    1224,
                    1225,
                    502,
                    1189,
                    807,
                    1198,
                    1230,
                    293,
                    1222,
                    41,
                    24,
                    503,
                    74,
                    504,
                    953,
                    505,
                    320,
                    506,
                    802,
                    154,
                    507,
                    508,
                    279,
                    684,
                    280,
                    43,
                    44,
                    437,
                    367,
                    366,
                    891,
                    45,
                    509,
                    35,
                    249,
                    -16,
                    -566,
                    358,
                    332,
                    318,
                    -566,
                    1198,
                    1193,
                    1192,
                    1194,
                    -527,
                    510,
                    511,
                    512,
                    333,
                    -524,
                    1274,
                    48,
                    716,
                    715,
                    -525,
                    -525,
                    334,
                    513,
                    514,
                    807,
                    1212,
                    1213,
                    1214,
                    1215,
                    1209,
                    1210,
                    292,
                    360,
                    284,
                    -525,
                    285,
                    -314,
                    1216,
                    1211,
                    -193,
                    -192,
                    1193,
                    1192,
                    1194,
                    293,
                    891,
                    -525,
                    364,
                    -531,
                    70,
                    807,
                    316,
                    317,
                    320,
                    31,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    -153,
                    -153,
                    -153,
                    638,
                    25,
                    -527,
                    -527,
                    687,
                    379,
                    881,
                    -524,
                    -524,
                    296,
                    297,
                    891,
                    -153,
                    432,
                    -153,
                    807,
                    -153,
                    -527,
                    -153,
                    716,
                    715,
                    433,
                    -524,
                    798,
                    363,
                    -111,
                    1105,
                    1107,
                    365,
                    -527,
                    434,
                    891,
                    140,
                    435,
                    -524,
                    954,
                    127,
                    -524,
                    320,
                    -111,
                    -111,
                    688,
                    813,
                    381,
                    -529,
                    11,
                    834,
                    155,
                    835,
                    867,
                    -111,
                    -111,
                    -111,
                    -111,
                    47,
                    293,
                    -32766,
                    881,
                    654,
                    655,
                    74,
                    689,
                    1191,
                    1045,
                    320,
                    708,
                    149,
                    399,
                    157,
                    -32766,
                    -32766,
                    -32766,
                    32,
                    -32766,
                    -79,
                    -32766,
                    123,
                    -32766,
                    716,
                    715,
                    -32766,
                    893,
                    891,
                    682,
                    -153,
                    -32766,
                    -32766,
                    -32766,
                    716,
                    715,
                    891,
                    -32766,
                    -32766,
                    124,
                    881,
                    129,
                    74,
                    -32766,
                    411,
                    130,
                    320,
                    -524,
                    -524,
                    143,
                    141,
                    -75,
                    -32766,
                    158,
                    -529,
                    -529,
                    320,
                    27,
                    691,
                    159,
                    881,
                    160,
                    -524,
                    161,
                    294,
                    295,
                    698,
                    368,
                    369,
                    807,
                    -73,
                    -32766,
                    -72,
                    1222,
                    -524,
                    373,
                    374,
                    1191,
                    893,
                    -71,
                    682,
                    -529,
                    73,
                    -70,
                    -32766,
                    -32766,
                    -32766,
                    -69,
                    -32766,
                    -68,
                    -32766,
                    125,
                    -32766,
                    630,
                    631,
                    -32766,
                    -67,
                    -66,
                    -47,
                    -51,
                    -32766,
                    -32766,
                    -32766,
                    -18,
                    147,
                    271,
                    -32766,
                    -32766,
                    277,
                    697,
                    700,
                    881,
                    -32766,
                    411,
                    890,
                    893,
                    146,
                    682,
                    282,
                    881,
                    907,
                    -32766,
                    281,
                    513,
                    514,
                    286,
                    1212,
                    1213,
                    1214,
                    1215,
                    1209,
                    1210,
                    326,
                    131,
                    145,
                    939,
                    287,
                    682,
                    1216,
                    1211,
                    109,
                    270,
                    -32766,
                    798,
                    807,
                    -32766,
                    662,
                    639,
                    1191,
                    657,
                    72,
                    675,
                    1075,
                    317,
                    320,
                    -32766,
                    -32766,
                    -32766,
                    1305,
                    -32766,
                    301,
                    -32766,
                    628,
                    -32766,
                    431,
                    543,
                    -32766,
                    -32766,
                    923,
                    555,
                    924,
                    -32766,
                    -32766,
                    -32766,
                    1229,
                    549,
                    -32766,
                    -32766,
                    -32766,
                    -4,
                    891,
                    -490,
                    1191,
                    -32766,
                    411,
                    644,
                    893,
                    299,
                    682,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    893,
                    -32766,
                    682,
                    -32766,
                    13,
                    1231,
                    -32766,
                    452,
                    480,
                    645,
                    909,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    658,
                    -480,
                    -32766,
                    -32766,
                    0,
                    1191,
                    0,
                    0,
                    -32766,
                    411,
                    0,
                    298,
                    -32766,
                    -32766,
                    -32766,
                    305,
                    -32766,
                    -32766,
                    -32766,
                    0,
                    -32766,
                    0,
                    806,
                    -32766,
                    0,
                    0,
                    0,
                    475,
                    -32766,
                    -32766,
                    -32766,
                    -32766,
                    0,
                    7,
                    -32766,
                    -32766,
                    16,
                    1191,
                    561,
                    596,
                    -32766,
                    411,
                    1219,
                    891,
                    -32766,
                    -32766,
                    -32766,
                    362,
                    -32766,
                    -32766,
                    -32766,
                    818,
                    -32766,
                    -267,
                    881,
                    -32766,
                    39,
                    293,
                    0,
                    0,
                    -32766,
                    -32766,
                    -32766,
                    40,
                    705,
                    706,
                    -32766,
                    -32766,
                    872,
                    963,
                    940,
                    947,
                    -32766,
                    411,
                    937,
                    948,
                    365,
                    870,
                    427,
                    891,
                    935,
                    -32766,
                    1049,
                    291,
                    1244,
                    1052,
                    1053,
                    -111,
                    -111,
                    1050,
                    1051,
                    1057,
                    -560,
                    1262,
                    1296,
                    633,
                    0,
                    826,
                    -111,
                    -111,
                    -111,
                    -111,
                    33,
                    315,
                    -32766,
                    361,
                    683,
                    686,
                    690,
                    692,
                    1191,
                    693,
                    694,
                    695,
                    699,
                    685,
                    320,
                    -32766,
                    -32766,
                    -32766,
                    9,
                    -32766,
                    702,
                    -32766,
                    868,
                    -32766,
                    881,
                    1300,
                    -32766,
                    893,
                    1302,
                    682,
                    -4,
                    -32766,
                    -32766,
                    -32766,
                    829,
                    828,
                    837,
                    -32766,
                    -32766,
                    916,
                    -242,
                    -242,
                    -242,
                    -32766,
                    411,
                    955,
                    365,
                    27,
                    836,
                    1301,
                    915,
                    917,
                    -32766,
                    914,
                    1177,
                    900,
                    910,
                    -111,
                    -111,
                    807,
                    881,
                    898,
                    945,
                    1222,
                    946,
                    1299,
                    1256,
                    867,
                    -111,
                    -111,
                    -111,
                    -111,
                    1245,
                    1263,
                    1269,
                    1272,
                    -241,
                    -241,
                    -241,
                    -558,
                    -532,
                    -531,
                    365,
                    -530,
                    1,
                    28,
                    29,
                    38,
                    42,
                    46,
                    71,
                    0,
                    75,
                    -111,
                    -111,
                    76,
                    77,
                    78,
                    79,
                    893,
                    80,
                    682,
                    -242,
                    867,
                    -111,
                    -111,
                    -111,
                    -111,
                    142,
                    152,
                    156,
                    245,
                    322,
                    347,
                    514,
                    348,
                    1212,
                    1213,
                    1214,
                    1215,
                    1209,
                    1210,
                    349,
                    350,
                    351,
                    352,
                    353,
                    354,
                    1216,
                    1211,
                    355,
                    356,
                    357,
                    359,
                    428,
                    893,
                    -265,
                    682,
                    -241,
                    -264,
                    72,
                    0,
                    18,
                    317,
                    320,
                    19,
                    20,
                    21,
                    23,
                    398,
                    471,
                    472,
                    479,
                    482,
                    483,
                    484,
                    485,
                    489,
                    490,
                    491,
                    498,
                    669,
                    1202,
                    1145,
                    1220,
                    1019,
                    1018,
                    1181,
                    -269,
                    -103,
                    17,
                    22,
                    26,
                    290,
                    397,
                    589,
                    593,
                    620,
                    674,
                    1149,
                    1197,
                    1146,
                    1275,
                    0,
                    -494,
                    1162,
                    0,
                    1223
                ];
                PHP.Parser.prototype.yycheck = [
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    0,
                    9,
                    10,
                    11,
                    12,
                    13,
                    106,
                    1,
                    108,
                    31,
                    9,
                    10,
                    11,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    37,
                    38,
                    30,
                    116,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    117,
                    118,
                    9,
                    10,
                    57,
                    9,
                    10,
                    11,
                    137,
                    138,
                    155,
                    128,
                    129,
                    130,
                    131,
                    106,
                    107,
                    8,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    116,
                    30,
                    80,
                    32,
                    33,
                    34,
                    35,
                    36,
                    1,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    30,
                    80,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    51,
                    1,
                    161,
                    101,
                    80,
                    150,
                    151,
                    152,
                    8,
                    154,
                    9,
                    10,
                    11,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    164,
                    9,
                    10,
                    11,
                    12,
                    13,
                    123,
                    9,
                    10,
                    11,
                    80,
                    161,
                    30,
                    83,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    30,
                    37,
                    38,
                    106,
                    107,
                    1,
                    9,
                    10,
                    11,
                    1,
                    53,
                    54,
                    55,
                    116,
                    57,
                    1,
                    8,
                    14,
                    155,
                    156,
                    157,
                    57,
                    9,
                    10,
                    11,
                    162,
                    69,
                    30,
                    116,
                    32,
                    33,
                    119,
                    120,
                    121,
                    122,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    8,
                    30,
                    80,
                    32,
                    33,
                    34,
                    35,
                    137,
                    138,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    84,
                    70,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    9,
                    9,
                    10,
                    11,
                    160,
                    150,
                    151,
                    152,
                    164,
                    154,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    1,
                    9,
                    10,
                    11,
                    12,
                    13,
                    30,
                    8,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    116,
                    57,
                    14,
                    9,
                    10,
                    11,
                    134,
                    135,
                    161,
                    8,
                    164,
                    160,
                    1,
                    69,
                    167,
                    164,
                    159,
                    57,
                    161,
                    80,
                    8,
                    137,
                    138,
                    1,
                    30,
                    1,
                    32,
                    33,
                    34,
                    1,
                    14,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    31,
                    1,
                    80,
                    30,
                    70,
                    30,
                    9,
                    10,
                    11,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    8,
                    156,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    8,
                    134,
                    135,
                    8,
                    8,
                    150,
                    151,
                    152,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    97,
                    82,
                    149,
                    31,
                    12,
                    13,
                    101,
                    15,
                    116,
                    8,
                    116,
                    106,
                    80,
                    108,
                    161,
                    85,
                    163,
                    106,
                    113,
                    108,
                    8,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    137,
                    138,
                    137,
                    138,
                    14,
                    9,
                    10,
                    11,
                    80,
                    82,
                    14,
                    8,
                    85,
                    50,
                    51,
                    50,
                    51,
                    52,
                    128,
                    56,
                    1,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    70,
                    70,
                    71,
                    72,
                    73,
                    74,
                    162,
                    159,
                    97,
                    78,
                    79,
                    80,
                    116,
                    82,
                    1,
                    146,
                    158,
                    86,
                    87,
                    88,
                    89,
                    163,
                    91,
                    31,
                    93,
                    167,
                    95,
                    156,
                    14,
                    98,
                    99,
                    35,
                    161,
                    37,
                    103,
                    104,
                    105,
                    106,
                    107,
                    1,
                    109,
                    110,
                    147,
                    148,
                    31,
                    160,
                    115,
                    116,
                    8,
                    164,
                    1,
                    155,
                    156,
                    157,
                    70,
                    124,
                    125,
                    126,
                    8,
                    70,
                    1,
                    70,
                    37,
                    38,
                    134,
                    135,
                    8,
                    136,
                    137,
                    82,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    8,
                    35,
                    149,
                    37,
                    164,
                    151,
                    152,
                    164,
                    164,
                    155,
                    156,
                    157,
                    158,
                    1,
                    161,
                    8,
                    163,
                    163,
                    82,
                    165,
                    166,
                    167,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    75,
                    76,
                    77,
                    75,
                    76,
                    134,
                    135,
                    31,
                    8,
                    84,
                    134,
                    135,
                    134,
                    135,
                    1,
                    90,
                    8,
                    92,
                    82,
                    94,
                    149,
                    96,
                    37,
                    38,
                    8,
                    149,
                    80,
                    149,
                    128,
                    59,
                    60,
                    106,
                    161,
                    8,
                    1,
                    161,
                    8,
                    161,
                    159,
                    161,
                    70,
                    167,
                    117,
                    118,
                    31,
                    8,
                    106,
                    70,
                    108,
                    106,
                    14,
                    108,
                    127,
                    128,
                    129,
                    130,
                    131,
                    70,
                    158,
                    74,
                    84,
                    75,
                    76,
                    163,
                    31,
                    80,
                    159,
                    167,
                    161,
                    101,
                    102,
                    14,
                    87,
                    88,
                    89,
                    14,
                    91,
                    31,
                    93,
                    16,
                    95,
                    37,
                    38,
                    98,
                    159,
                    1,
                    161,
                    162,
                    103,
                    104,
                    105,
                    37,
                    38,
                    1,
                    109,
                    110,
                    16,
                    84,
                    16,
                    163,
                    115,
                    116,
                    16,
                    167,
                    134,
                    135,
                    16,
                    161,
                    31,
                    124,
                    16,
                    134,
                    135,
                    167,
                    70,
                    31,
                    16,
                    84,
                    16,
                    149,
                    16,
                    134,
                    135,
                    31,
                    106,
                    107,
                    82,
                    31,
                    74,
                    31,
                    86,
                    161,
                    106,
                    107,
                    80,
                    159,
                    31,
                    161,
                    161,
                    154,
                    31,
                    87,
                    88,
                    89,
                    31,
                    91,
                    31,
                    93,
                    161,
                    95,
                    111,
                    112,
                    98,
                    31,
                    31,
                    31,
                    31,
                    103,
                    104,
                    105,
                    31,
                    31,
                    31,
                    109,
                    110,
                    31,
                    31,
                    31,
                    84,
                    115,
                    116,
                    31,
                    159,
                    31,
                    161,
                    37,
                    84,
                    38,
                    124,
                    35,
                    136,
                    137,
                    35,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    35,
                    31,
                    70,
                    159,
                    37,
                    161,
                    151,
                    152,
                    69,
                    57,
                    74,
                    80,
                    82,
                    85,
                    77,
                    90,
                    80,
                    94,
                    163,
                    92,
                    82,
                    166,
                    167,
                    87,
                    88,
                    89,
                    83,
                    91,
                    114,
                    93,
                    113,
                    95,
                    128,
                    85,
                    98,
                    116,
                    128,
                    153,
                    128,
                    103,
                    104,
                    105,
                    146,
                    89,
                    74,
                    109,
                    110,
                    0,
                    1,
                    149,
                    80,
                    115,
                    116,
                    96,
                    159,
                    133,
                    161,
                    87,
                    88,
                    89,
                    124,
                    91,
                    159,
                    93,
                    161,
                    95,
                    97,
                    146,
                    98,
                    97,
                    97,
                    100,
                    154,
                    103,
                    104,
                    105,
                    74,
                    100,
                    149,
                    109,
                    110,
                    -1,
                    80,
                    -1,
                    -1,
                    115,
                    116,
                    -1,
                    132,
                    87,
                    88,
                    89,
                    132,
                    91,
                    124,
                    93,
                    -1,
                    95,
                    -1,
                    155,
                    98,
                    -1,
                    -1,
                    -1,
                    102,
                    103,
                    104,
                    105,
                    74,
                    -1,
                    149,
                    109,
                    110,
                    149,
                    80,
                    81,
                    153,
                    115,
                    116,
                    160,
                    1,
                    87,
                    88,
                    89,
                    149,
                    91,
                    124,
                    93,
                    160,
                    95,
                    164,
                    84,
                    98,
                    159,
                    158,
                    -1,
                    -1,
                    103,
                    104,
                    105,
                    159,
                    159,
                    159,
                    109,
                    110,
                    159,
                    159,
                    159,
                    159,
                    115,
                    116,
                    159,
                    159,
                    106,
                    159,
                    108,
                    1,
                    159,
                    124,
                    159,
                    113,
                    160,
                    159,
                    159,
                    117,
                    118,
                    159,
                    159,
                    159,
                    163,
                    160,
                    160,
                    160,
                    -1,
                    127,
                    128,
                    129,
                    130,
                    131,
                    161,
                    161,
                    74,
                    161,
                    161,
                    161,
                    161,
                    161,
                    80,
                    161,
                    161,
                    161,
                    161,
                    161,
                    167,
                    87,
                    88,
                    89,
                    150,
                    91,
                    162,
                    93,
                    162,
                    95,
                    84,
                    162,
                    98,
                    159,
                    162,
                    161,
                    162,
                    103,
                    104,
                    105,
                    162,
                    162,
                    162,
                    109,
                    110,
                    162,
                    100,
                    101,
                    102,
                    115,
                    116,
                    162,
                    106,
                    70,
                    162,
                    162,
                    162,
                    162,
                    124,
                    162,
                    162,
                    162,
                    162,
                    117,
                    118,
                    82,
                    84,
                    162,
                    162,
                    86,
                    162,
                    162,
                    162,
                    127,
                    128,
                    129,
                    130,
                    131,
                    162,
                    162,
                    162,
                    162,
                    100,
                    101,
                    102,
                    163,
                    163,
                    163,
                    106,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    -1,
                    163,
                    117,
                    118,
                    163,
                    163,
                    163,
                    163,
                    159,
                    163,
                    161,
                    162,
                    127,
                    128,
                    129,
                    130,
                    131,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    137,
                    163,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    151,
                    152,
                    163,
                    163,
                    163,
                    163,
                    163,
                    159,
                    164,
                    161,
                    162,
                    164,
                    163,
                    -1,
                    164,
                    166,
                    167,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    164,
                    -1,
                    165,
                    165,
                    -1,
                    166
                ];
                PHP.Parser.prototype.yybase = [
                    0,
                    -2,
                    154,
                    565,
                    876,
                    948,
                    984,
                    514,
                    53,
                    398,
                    837,
                    307,
                    307,
                    67,
                    307,
                    307,
                    307,
                    653,
                    724,
                    724,
                    732,
                    724,
                    616,
                    673,
                    204,
                    204,
                    204,
                    625,
                    625,
                    625,
                    625,
                    694,
                    694,
                    831,
                    831,
                    863,
                    799,
                    765,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    936,
                    375,
                    519,
                    369,
                    701,
                    1017,
                    1023,
                    1019,
                    1024,
                    1015,
                    1014,
                    1018,
                    1020,
                    1025,
                    911,
                    912,
                    782,
                    918,
                    919,
                    920,
                    921,
                    1021,
                    841,
                    1016,
                    1022,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    290,
                    491,
                    44,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    382,
                    160,
                    160,
                    160,
                    187,
                    684,
                    684,
                    341,
                    203,
                    610,
                    47,
                    985,
                    985,
                    985,
                    985,
                    985,
                    985,
                    985,
                    985,
                    985,
                    985,
                    144,
                    144,
                    7,
                    7,
                    7,
                    7,
                    7,
                    371,
                    -25,
                    -25,
                    -25,
                    -25,
                    540,
                    385,
                    102,
                    576,
                    358,
                    45,
                    377,
                    460,
                    460,
                    360,
                    231,
                    231,
                    231,
                    231,
                    231,
                    231,
                    -78,
                    -78,
                    -78,
                    -78,
                    -78,
                    -66,
                    319,
                    457,
                    -94,
                    396,
                    423,
                    586,
                    586,
                    586,
                    586,
                    423,
                    423,
                    423,
                    423,
                    750,
                    1029,
                    423,
                    423,
                    423,
                    511,
                    516,
                    516,
                    518,
                    147,
                    147,
                    147,
                    516,
                    583,
                    777,
                    422,
                    583,
                    422,
                    194,
                    92,
                    748,
                    -40,
                    87,
                    412,
                    748,
                    617,
                    627,
                    198,
                    143,
                    773,
                    658,
                    773,
                    1013,
                    757,
                    764,
                    717,
                    838,
                    860,
                    1026,
                    800,
                    908,
                    806,
                    910,
                    219,
                    686,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    1012,
                    855,
                    552,
                    1013,
                    286,
                    855,
                    855,
                    855,
                    552,
                    552,
                    552,
                    552,
                    552,
                    552,
                    552,
                    552,
                    552,
                    552,
                    679,
                    286,
                    568,
                    626,
                    286,
                    794,
                    552,
                    375,
                    758,
                    375,
                    375,
                    375,
                    375,
                    958,
                    375,
                    375,
                    375,
                    375,
                    375,
                    375,
                    970,
                    769,
                    -16,
                    375,
                    519,
                    12,
                    12,
                    547,
                    83,
                    12,
                    12,
                    12,
                    12,
                    375,
                    375,
                    375,
                    658,
                    781,
                    713,
                    666,
                    792,
                    448,
                    781,
                    781,
                    781,
                    438,
                    444,
                    193,
                    447,
                    570,
                    523,
                    580,
                    760,
                    760,
                    767,
                    929,
                    929,
                    760,
                    759,
                    760,
                    767,
                    934,
                    760,
                    929,
                    805,
                    359,
                    648,
                    577,
                    611,
                    656,
                    929,
                    478,
                    760,
                    760,
                    760,
                    760,
                    665,
                    760,
                    467,
                    433,
                    760,
                    760,
                    785,
                    774,
                    789,
                    60,
                    929,
                    929,
                    929,
                    789,
                    596,
                    751,
                    751,
                    751,
                    811,
                    812,
                    746,
                    771,
                    567,
                    498,
                    677,
                    348,
                    779,
                    771,
                    771,
                    760,
                    640,
                    746,
                    771,
                    746,
                    771,
                    747,
                    771,
                    771,
                    771,
                    746,
                    771,
                    759,
                    585,
                    771,
                    734,
                    668,
                    224,
                    771,
                    6,
                    935,
                    937,
                    354,
                    940,
                    932,
                    941,
                    979,
                    942,
                    943,
                    851,
                    956,
                    933,
                    945,
                    931,
                    930,
                    780,
                    703,
                    720,
                    790,
                    729,
                    928,
                    768,
                    768,
                    768,
                    925,
                    768,
                    768,
                    768,
                    768,
                    768,
                    768,
                    768,
                    768,
                    703,
                    788,
                    804,
                    733,
                    783,
                    960,
                    722,
                    726,
                    725,
                    868,
                    1027,
                    1028,
                    737,
                    739,
                    958,
                    1006,
                    953,
                    803,
                    730,
                    992,
                    967,
                    866,
                    848,
                    968,
                    969,
                    993,
                    1007,
                    1008,
                    871,
                    761,
                    874,
                    880,
                    797,
                    971,
                    852,
                    768,
                    935,
                    943,
                    933,
                    945,
                    931,
                    930,
                    763,
                    762,
                    753,
                    755,
                    749,
                    745,
                    736,
                    738,
                    770,
                    1009,
                    924,
                    835,
                    830,
                    970,
                    926,
                    703,
                    839,
                    986,
                    847,
                    994,
                    995,
                    850,
                    801,
                    772,
                    840,
                    881,
                    972,
                    975,
                    976,
                    853,
                    1010,
                    810,
                    989,
                    795,
                    996,
                    802,
                    882,
                    997,
                    998,
                    999,
                    1000,
                    885,
                    854,
                    856,
                    857,
                    815,
                    754,
                    980,
                    786,
                    891,
                    335,
                    787,
                    796,
                    978,
                    363,
                    957,
                    858,
                    894,
                    895,
                    1001,
                    1002,
                    1003,
                    896,
                    954,
                    816,
                    990,
                    752,
                    991,
                    983,
                    817,
                    818,
                    485,
                    784,
                    778,
                    541,
                    676,
                    897,
                    899,
                    900,
                    955,
                    775,
                    766,
                    821,
                    822,
                    1011,
                    901,
                    697,
                    824,
                    740,
                    902,
                    1005,
                    742,
                    744,
                    756,
                    859,
                    793,
                    743,
                    798,
                    977,
                    776,
                    827,
                    907,
                    829,
                    832,
                    833,
                    1004,
                    836,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    307,
                    307,
                    307,
                    307,
                    0,
                    0,
                    307,
                    0,
                    0,
                    0,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    458,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    423,
                    423,
                    291,
                    291,
                    0,
                    291,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    291,
                    805,
                    147,
                    147,
                    147,
                    147,
                    423,
                    423,
                    423,
                    423,
                    423,
                    -88,
                    -88,
                    147,
                    147,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    423,
                    0,
                    0,
                    0,
                    286,
                    422,
                    0,
                    759,
                    759,
                    759,
                    759,
                    0,
                    0,
                    0,
                    0,
                    422,
                    422,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    286,
                    422,
                    0,
                    286,
                    0,
                    759,
                    759,
                    423,
                    805,
                    805,
                    314,
                    423,
                    0,
                    0,
                    0,
                    0,
                    286,
                    759,
                    286,
                    552,
                    422,
                    552,
                    552,
                    12,
                    375,
                    314,
                    608,
                    608,
                    608,
                    608,
                    0,
                    658,
                    805,
                    805,
                    805,
                    805,
                    805,
                    805,
                    805,
                    805,
                    805,
                    805,
                    805,
                    759,
                    0,
                    805,
                    0,
                    759,
                    759,
                    759,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    759,
                    0,
                    0,
                    929,
                    0,
                    0,
                    0,
                    0,
                    760,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    760,
                    934,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    759,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    768,
                    801,
                    0,
                    801,
                    0,
                    768,
                    768,
                    768
                ];
                PHP.Parser.prototype.yydefault = [
                    3,
                    32767,
                    103,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    101,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    578,
                    578,
                    578,
                    578,
                    32767,
                    32767,
                    246,
                    103,
                    32767,
                    32767,
                    454,
                    372,
                    372,
                    372,
                    32767,
                    32767,
                    522,
                    522,
                    522,
                    522,
                    522,
                    522,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    454,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    101,
                    32767,
                    32767,
                    32767,
                    37,
                    7,
                    8,
                    10,
                    11,
                    50,
                    17,
                    310,
                    32767,
                    32767,
                    32767,
                    32767,
                    103,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    571,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    458,
                    437,
                    438,
                    440,
                    441,
                    371,
                    523,
                    577,
                    313,
                    574,
                    370,
                    146,
                    325,
                    315,
                    234,
                    316,
                    250,
                    459,
                    251,
                    460,
                    463,
                    464,
                    211,
                    279,
                    367,
                    150,
                    401,
                    455,
                    403,
                    453,
                    457,
                    402,
                    377,
                    382,
                    383,
                    384,
                    385,
                    386,
                    387,
                    388,
                    389,
                    390,
                    391,
                    392,
                    393,
                    394,
                    375,
                    376,
                    456,
                    434,
                    433,
                    432,
                    399,
                    32767,
                    32767,
                    400,
                    404,
                    374,
                    407,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    103,
                    32767,
                    405,
                    406,
                    423,
                    424,
                    421,
                    422,
                    425,
                    32767,
                    426,
                    427,
                    428,
                    429,
                    32767,
                    32767,
                    302,
                    32767,
                    32767,
                    351,
                    349,
                    414,
                    415,
                    302,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    516,
                    431,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    103,
                    32767,
                    101,
                    518,
                    396,
                    398,
                    486,
                    409,
                    410,
                    408,
                    378,
                    32767,
                    493,
                    32767,
                    103,
                    495,
                    32767,
                    32767,
                    32767,
                    112,
                    32767,
                    32767,
                    32767,
                    517,
                    32767,
                    524,
                    524,
                    32767,
                    479,
                    101,
                    194,
                    32767,
                    194,
                    194,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    585,
                    479,
                    111,
                    111,
                    111,
                    111,
                    111,
                    111,
                    111,
                    111,
                    111,
                    111,
                    111,
                    32767,
                    194,
                    111,
                    32767,
                    32767,
                    32767,
                    101,
                    194,
                    194,
                    194,
                    194,
                    194,
                    194,
                    194,
                    194,
                    194,
                    194,
                    189,
                    32767,
                    260,
                    262,
                    103,
                    539,
                    194,
                    32767,
                    498,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    491,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    479,
                    419,
                    139,
                    32767,
                    139,
                    524,
                    411,
                    412,
                    413,
                    481,
                    524,
                    524,
                    524,
                    298,
                    281,
                    32767,
                    32767,
                    32767,
                    32767,
                    496,
                    496,
                    101,
                    101,
                    101,
                    101,
                    491,
                    32767,
                    32767,
                    112,
                    100,
                    100,
                    100,
                    100,
                    100,
                    104,
                    102,
                    32767,
                    32767,
                    32767,
                    32767,
                    100,
                    32767,
                    102,
                    102,
                    32767,
                    32767,
                    217,
                    208,
                    215,
                    102,
                    32767,
                    543,
                    544,
                    215,
                    102,
                    219,
                    219,
                    219,
                    239,
                    239,
                    470,
                    304,
                    102,
                    100,
                    102,
                    102,
                    196,
                    304,
                    304,
                    32767,
                    102,
                    470,
                    304,
                    470,
                    304,
                    198,
                    304,
                    304,
                    304,
                    470,
                    304,
                    32767,
                    102,
                    304,
                    210,
                    100,
                    100,
                    304,
                    32767,
                    32767,
                    32767,
                    481,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    511,
                    32767,
                    528,
                    541,
                    417,
                    418,
                    420,
                    526,
                    442,
                    443,
                    444,
                    445,
                    446,
                    447,
                    448,
                    450,
                    573,
                    32767,
                    485,
                    32767,
                    32767,
                    32767,
                    32767,
                    324,
                    583,
                    32767,
                    583,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    584,
                    32767,
                    524,
                    32767,
                    32767,
                    32767,
                    32767,
                    416,
                    9,
                    76,
                    43,
                    44,
                    52,
                    58,
                    502,
                    503,
                    504,
                    505,
                    499,
                    500,
                    506,
                    501,
                    32767,
                    32767,
                    507,
                    549,
                    32767,
                    32767,
                    525,
                    576,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    139,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    511,
                    32767,
                    137,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    524,
                    32767,
                    32767,
                    32767,
                    300,
                    301,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    524,
                    32767,
                    32767,
                    32767,
                    283,
                    284,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    278,
                    32767,
                    32767,
                    366,
                    32767,
                    32767,
                    32767,
                    32767,
                    345,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    32767,
                    152,
                    152,
                    3,
                    3,
                    327,
                    152,
                    152,
                    152,
                    327,
                    152,
                    327,
                    327,
                    327,
                    152,
                    152,
                    152,
                    152,
                    152,
                    152,
                    272,
                    184,
                    254,
                    257,
                    239,
                    239,
                    152,
                    337,
                    152
                ];
                PHP.Parser.prototype.yygoto = [
                    194,
                    194,
                    670,
                    422,
                    643,
                    463,
                    1264,
                    1265,
                    1022,
                    416,
                    308,
                    309,
                    329,
                    563,
                    314,
                    421,
                    330,
                    423,
                    622,
                    801,
                    678,
                    637,
                    586,
                    651,
                    652,
                    653,
                    165,
                    165,
                    165,
                    165,
                    218,
                    195,
                    191,
                    191,
                    175,
                    177,
                    213,
                    191,
                    191,
                    191,
                    191,
                    191,
                    192,
                    192,
                    192,
                    192,
                    192,
                    192,
                    186,
                    187,
                    188,
                    189,
                    190,
                    215,
                    213,
                    216,
                    521,
                    522,
                    412,
                    523,
                    525,
                    526,
                    527,
                    528,
                    529,
                    530,
                    531,
                    532,
                    1091,
                    166,
                    167,
                    168,
                    193,
                    169,
                    170,
                    171,
                    164,
                    172,
                    173,
                    174,
                    176,
                    212,
                    214,
                    217,
                    235,
                    238,
                    241,
                    242,
                    244,
                    255,
                    256,
                    257,
                    258,
                    259,
                    260,
                    261,
                    263,
                    264,
                    265,
                    266,
                    274,
                    275,
                    311,
                    312,
                    313,
                    417,
                    418,
                    419,
                    568,
                    219,
                    220,
                    221,
                    222,
                    223,
                    224,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    178,
                    234,
                    179,
                    196,
                    197,
                    198,
                    236,
                    186,
                    187,
                    188,
                    189,
                    190,
                    215,
                    1091,
                    199,
                    180,
                    181,
                    182,
                    200,
                    196,
                    183,
                    237,
                    201,
                    199,
                    163,
                    202,
                    203,
                    184,
                    204,
                    205,
                    206,
                    185,
                    207,
                    208,
                    209,
                    210,
                    211,
                    323,
                    323,
                    323,
                    323,
                    827,
                    608,
                    608,
                    824,
                    547,
                    538,
                    342,
                    1221,
                    1221,
                    1221,
                    1221,
                    1221,
                    1221,
                    1221,
                    1221,
                    1221,
                    1221,
                    1239,
                    1239,
                    288,
                    288,
                    288,
                    288,
                    1239,
                    1239,
                    1239,
                    1239,
                    1239,
                    1239,
                    1239,
                    1239,
                    1239,
                    1239,
                    388,
                    538,
                    547,
                    556,
                    557,
                    395,
                    566,
                    588,
                    602,
                    603,
                    832,
                    825,
                    880,
                    875,
                    876,
                    889,
                    15,
                    833,
                    877,
                    830,
                    878,
                    879,
                    831,
                    799,
                    251,
                    251,
                    883,
                    919,
                    992,
                    1000,
                    1004,
                    1001,
                    1005,
                    1237,
                    1237,
                    938,
                    1043,
                    1039,
                    1040,
                    1237,
                    1237,
                    1237,
                    1237,
                    1237,
                    1237,
                    1237,
                    1237,
                    1237,
                    1237,
                    858,
                    248,
                    248,
                    248,
                    248,
                    250,
                    252,
                    533,
                    533,
                    533,
                    533,
                    487,
                    590,
                    488,
                    1190,
                    1190,
                    997,
                    1190,
                    997,
                    494,
                    1290,
                    1290,
                    560,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    997,
                    1261,
                    1261,
                    1290,
                    1261,
                    340,
                    1190,
                    930,
                    402,
                    677,
                    1279,
                    1190,
                    1190,
                    1190,
                    1190,
                    959,
                    345,
                    1190,
                    1190,
                    1190,
                    1271,
                    1271,
                    1271,
                    1271,
                    606,
                    640,
                    345,
                    345,
                    1273,
                    1273,
                    1273,
                    1273,
                    820,
                    820,
                    805,
                    896,
                    884,
                    840,
                    885,
                    897,
                    345,
                    345,
                    5,
                    345,
                    6,
                    1306,
                    384,
                    535,
                    535,
                    559,
                    535,
                    415,
                    852,
                    597,
                    1257,
                    839,
                    540,
                    524,
                    524,
                    345,
                    1289,
                    1289,
                    642,
                    524,
                    524,
                    524,
                    524,
                    524,
                    524,
                    524,
                    524,
                    524,
                    524,
                    445,
                    805,
                    1140,
                    805,
                    1289,
                    932,
                    932,
                    932,
                    932,
                    1063,
                    1064,
                    445,
                    926,
                    933,
                    386,
                    390,
                    548,
                    587,
                    591,
                    1030,
                    1292,
                    331,
                    554,
                    1259,
                    1259,
                    1030,
                    704,
                    621,
                    623,
                    823,
                    641,
                    1250,
                    319,
                    303,
                    660,
                    664,
                    973,
                    668,
                    676,
                    969,
                    429,
                    553,
                    962,
                    936,
                    936,
                    934,
                    936,
                    703,
                    601,
                    537,
                    971,
                    966,
                    343,
                    344,
                    663,
                    817,
                    595,
                    609,
                    612,
                    613,
                    614,
                    615,
                    634,
                    635,
                    636,
                    680,
                    439,
                    1186,
                    845,
                    454,
                    454,
                    439,
                    439,
                    1266,
                    1267,
                    820,
                    901,
                    1079,
                    454,
                    394,
                    539,
                    551,
                    1183,
                    605,
                    540,
                    539,
                    842,
                    551,
                    978,
                    272,
                    387,
                    618,
                    619,
                    981,
                    536,
                    536,
                    844,
                    707,
                    646,
                    957,
                    567,
                    457,
                    458,
                    459,
                    838,
                    850,
                    254,
                    254,
                    1297,
                    1298,
                    400,
                    401,
                    976,
                    976,
                    464,
                    649,
                    1182,
                    650,
                    1028,
                    404,
                    405,
                    406,
                    1187,
                    661,
                    424,
                    1032,
                    407,
                    564,
                    600,
                    815,
                    338,
                    424,
                    854,
                    848,
                    853,
                    841,
                    1027,
                    1031,
                    1009,
                    1002,
                    1006,
                    1003,
                    1007,
                    1185,
                    941,
                    1188,
                    1247,
                    1248,
                    943,
                    0,
                    1074,
                    439,
                    439,
                    439,
                    439,
                    439,
                    439,
                    439,
                    439,
                    439,
                    439,
                    439,
                    0,
                    468,
                    439,
                    585,
                    1056,
                    931,
                    681,
                    667,
                    667,
                    0,
                    495,
                    673,
                    1054,
                    1171,
                    912,
                    0,
                    0,
                    1172,
                    1175,
                    913,
                    1176,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1072,
                    857
                ];
                PHP.Parser.prototype.yygcheck = [
                    42,
                    42,
                    72,
                    65,
                    65,
                    166,
                    166,
                    166,
                    119,
                    65,
                    65,
                    65,
                    65,
                    65,
                    65,
                    65,
                    65,
                    65,
                    65,
                    7,
                    9,
                    84,
                    122,
                    84,
                    84,
                    84,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    23,
                    23,
                    23,
                    23,
                    15,
                    104,
                    104,
                    26,
                    75,
                    75,
                    93,
                    104,
                    104,
                    104,
                    104,
                    104,
                    104,
                    104,
                    104,
                    104,
                    104,
                    160,
                    160,
                    24,
                    24,
                    24,
                    24,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    75,
                    75,
                    75,
                    75,
                    75,
                    75,
                    75,
                    75,
                    75,
                    75,
                    15,
                    27,
                    15,
                    15,
                    15,
                    15,
                    75,
                    15,
                    15,
                    15,
                    15,
                    15,
                    15,
                    6,
                    5,
                    5,
                    15,
                    87,
                    87,
                    87,
                    87,
                    87,
                    87,
                    161,
                    161,
                    49,
                    15,
                    15,
                    15,
                    161,
                    161,
                    161,
                    161,
                    161,
                    161,
                    161,
                    161,
                    161,
                    161,
                    45,
                    5,
                    5,
                    5,
                    5,
                    5,
                    5,
                    103,
                    103,
                    103,
                    103,
                    147,
                    103,
                    147,
                    72,
                    72,
                    72,
                    72,
                    72,
                    147,
                    173,
                    173,
                    162,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    72,
                    122,
                    122,
                    173,
                    122,
                    169,
                    72,
                    89,
                    89,
                    89,
                    171,
                    72,
                    72,
                    72,
                    72,
                    99,
                    14,
                    72,
                    72,
                    72,
                    9,
                    9,
                    9,
                    9,
                    55,
                    55,
                    14,
                    14,
                    122,
                    122,
                    122,
                    122,
                    22,
                    22,
                    12,
                    72,
                    64,
                    35,
                    64,
                    72,
                    14,
                    14,
                    46,
                    14,
                    46,
                    14,
                    61,
                    19,
                    19,
                    100,
                    19,
                    13,
                    35,
                    13,
                    122,
                    35,
                    14,
                    163,
                    163,
                    14,
                    172,
                    172,
                    63,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    163,
                    19,
                    12,
                    143,
                    12,
                    172,
                    19,
                    19,
                    19,
                    19,
                    136,
                    136,
                    19,
                    19,
                    19,
                    58,
                    58,
                    58,
                    58,
                    58,
                    122,
                    172,
                    29,
                    48,
                    122,
                    122,
                    122,
                    48,
                    48,
                    48,
                    25,
                    48,
                    14,
                    159,
                    159,
                    48,
                    48,
                    48,
                    48,
                    48,
                    48,
                    109,
                    9,
                    25,
                    25,
                    25,
                    25,
                    25,
                    25,
                    9,
                    25,
                    25,
                    25,
                    93,
                    93,
                    14,
                    18,
                    79,
                    79,
                    79,
                    79,
                    79,
                    79,
                    79,
                    79,
                    79,
                    79,
                    23,
                    20,
                    39,
                    141,
                    141,
                    23,
                    23,
                    168,
                    168,
                    22,
                    17,
                    17,
                    141,
                    28,
                    9,
                    9,
                    152,
                    17,
                    14,
                    9,
                    37,
                    9,
                    17,
                    24,
                    9,
                    83,
                    83,
                    106,
                    24,
                    24,
                    17,
                    95,
                    17,
                    17,
                    9,
                    9,
                    9,
                    9,
                    17,
                    9,
                    5,
                    5,
                    9,
                    9,
                    80,
                    80,
                    103,
                    103,
                    149,
                    80,
                    17,
                    80,
                    121,
                    80,
                    80,
                    80,
                    20,
                    80,
                    113,
                    124,
                    80,
                    2,
                    2,
                    20,
                    80,
                    113,
                    41,
                    9,
                    16,
                    16,
                    16,
                    16,
                    113,
                    113,
                    113,
                    113,
                    113,
                    14,
                    16,
                    20,
                    20,
                    20,
                    92,
                    -1,
                    139,
                    23,
                    23,
                    23,
                    23,
                    23,
                    23,
                    23,
                    23,
                    23,
                    23,
                    23,
                    -1,
                    82,
                    23,
                    8,
                    8,
                    16,
                    8,
                    8,
                    8,
                    -1,
                    8,
                    8,
                    8,
                    78,
                    78,
                    -1,
                    -1,
                    78,
                    78,
                    78,
                    78,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    -1,
                    16,
                    16
                ];
                PHP.Parser.prototype.yygbase = [
                    0,
                    0,
                    -203,
                    0,
                    0,
                    221,
                    208,
                    10,
                    512,
                    7,
                    0,
                    0,
                    24,
                    1,
                    5,
                    -174,
                    47,
                    -23,
                    105,
                    61,
                    38,
                    0,
                    -10,
                    158,
                    181,
                    379,
                    164,
                    205,
                    102,
                    84,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -43,
                    0,
                    107,
                    0,
                    104,
                    0,
                    54,
                    -1,
                    0,
                    0,
                    235,
                    -384,
                    0,
                    -307,
                    210,
                    0,
                    0,
                    0,
                    0,
                    0,
                    266,
                    0,
                    0,
                    324,
                    0,
                    0,
                    286,
                    0,
                    103,
                    298,
                    -236,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    -6,
                    0,
                    0,
                    -167,
                    0,
                    0,
                    129,
                    62,
                    -14,
                    0,
                    53,
                    -22,
                    -669,
                    0,
                    0,
                    -52,
                    0,
                    -11,
                    0,
                    0,
                    68,
                    -299,
                    0,
                    52,
                    0,
                    0,
                    0,
                    262,
                    288,
                    0,
                    0,
                    227,
                    -73,
                    0,
                    87,
                    0,
                    0,
                    118,
                    0,
                    0,
                    0,
                    209,
                    0,
                    0,
                    0,
                    0,
                    0,
                    6,
                    0,
                    108,
                    15,
                    0,
                    46,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    91,
                    0,
                    0,
                    69,
                    0,
                    390,
                    0,
                    86,
                    0,
                    0,
                    0,
                    -224,
                    0,
                    37,
                    0,
                    0,
                    77,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    70,
                    -57,
                    -8,
                    241,
                    99,
                    0,
                    0,
                    -290,
                    0,
                    65,
                    257,
                    0,
                    261,
                    39,
                    -35,
                    0,
                    0
                ];
                PHP.Parser.prototype.yygdefault = [
                    -32768,
                    499,
                    711,
                    4,
                    712,
                    905,
                    788,
                    797,
                    583,
                    515,
                    679,
                    339,
                    610,
                    413,
                    1255,
                    882,
                    1078,
                    565,
                    816,
                    1199,
                    1207,
                    446,
                    819,
                    324,
                    701,
                    864,
                    865,
                    866,
                    391,
                    376,
                    382,
                    389,
                    632,
                    611,
                    481,
                    851,
                    442,
                    843,
                    473,
                    846,
                    441,
                    855,
                    162,
                    410,
                    497,
                    859,
                    3,
                    861,
                    542,
                    892,
                    377,
                    869,
                    378,
                    656,
                    871,
                    550,
                    873,
                    874,
                    385,
                    392,
                    393,
                    1083,
                    558,
                    607,
                    886,
                    243,
                    552,
                    887,
                    375,
                    888,
                    895,
                    380,
                    383,
                    665,
                    453,
                    492,
                    486,
                    403,
                    1058,
                    594,
                    629,
                    450,
                    467,
                    617,
                    616,
                    604,
                    466,
                    425,
                    408,
                    928,
                    474,
                    451,
                    942,
                    341,
                    950,
                    709,
                    1090,
                    624,
                    476,
                    958,
                    625,
                    965,
                    968,
                    516,
                    517,
                    465,
                    980,
                    269,
                    983,
                    477,
                    1015,
                    647,
                    648,
                    995,
                    626,
                    627,
                    1013,
                    460,
                    584,
                    1021,
                    443,
                    1029,
                    1243,
                    444,
                    1033,
                    262,
                    1036,
                    276,
                    409,
                    426,
                    1041,
                    1042,
                    8,
                    1048,
                    671,
                    672,
                    10,
                    273,
                    496,
                    1073,
                    666,
                    440,
                    1089,
                    430,
                    1159,
                    1161,
                    544,
                    478,
                    1179,
                    1178,
                    659,
                    493,
                    1184,
                    1246,
                    438,
                    518,
                    461,
                    310,
                    519,
                    302,
                    327,
                    307,
                    534,
                    289,
                    328,
                    520,
                    462,
                    1252,
                    1260,
                    325,
                    30,
                    1280,
                    1291,
                    335,
                    562,
                    599
                ];
                PHP.Parser.prototype.yylhs = [
                    0,
                    1,
                    3,
                    3,
                    2,
                    5,
                    5,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    6,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    7,
                    8,
                    8,
                    9,
                    10,
                    11,
                    11,
                    11,
                    12,
                    12,
                    13,
                    13,
                    14,
                    15,
                    15,
                    16,
                    16,
                    17,
                    17,
                    18,
                    18,
                    21,
                    21,
                    22,
                    23,
                    23,
                    24,
                    24,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    4,
                    29,
                    29,
                    30,
                    30,
                    32,
                    34,
                    34,
                    28,
                    36,
                    36,
                    33,
                    38,
                    38,
                    35,
                    35,
                    37,
                    37,
                    39,
                    39,
                    31,
                    40,
                    40,
                    41,
                    43,
                    44,
                    44,
                    45,
                    46,
                    46,
                    48,
                    47,
                    47,
                    47,
                    47,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    49,
                    25,
                    25,
                    68,
                    68,
                    71,
                    71,
                    70,
                    69,
                    69,
                    62,
                    74,
                    74,
                    75,
                    75,
                    76,
                    76,
                    77,
                    77,
                    78,
                    78,
                    26,
                    26,
                    27,
                    27,
                    27,
                    27,
                    86,
                    86,
                    88,
                    88,
                    81,
                    81,
                    81,
                    82,
                    82,
                    85,
                    85,
                    83,
                    83,
                    89,
                    90,
                    90,
                    56,
                    56,
                    64,
                    64,
                    67,
                    67,
                    67,
                    66,
                    91,
                    91,
                    92,
                    57,
                    57,
                    57,
                    57,
                    93,
                    93,
                    94,
                    94,
                    95,
                    95,
                    96,
                    97,
                    97,
                    98,
                    98,
                    99,
                    99,
                    54,
                    54,
                    50,
                    50,
                    101,
                    52,
                    52,
                    102,
                    51,
                    51,
                    53,
                    53,
                    63,
                    63,
                    63,
                    63,
                    79,
                    79,
                    105,
                    105,
                    107,
                    107,
                    108,
                    108,
                    108,
                    108,
                    106,
                    106,
                    106,
                    110,
                    110,
                    110,
                    110,
                    87,
                    87,
                    113,
                    113,
                    113,
                    111,
                    111,
                    114,
                    114,
                    112,
                    112,
                    115,
                    115,
                    116,
                    116,
                    116,
                    116,
                    109,
                    109,
                    80,
                    80,
                    80,
                    20,
                    20,
                    20,
                    118,
                    117,
                    117,
                    119,
                    119,
                    119,
                    119,
                    59,
                    120,
                    120,
                    121,
                    60,
                    123,
                    123,
                    124,
                    124,
                    125,
                    125,
                    84,
                    126,
                    126,
                    126,
                    126,
                    126,
                    126,
                    131,
                    131,
                    132,
                    132,
                    133,
                    133,
                    133,
                    133,
                    133,
                    134,
                    135,
                    135,
                    130,
                    130,
                    127,
                    127,
                    129,
                    129,
                    137,
                    137,
                    136,
                    136,
                    136,
                    136,
                    136,
                    136,
                    136,
                    128,
                    138,
                    138,
                    140,
                    139,
                    139,
                    61,
                    100,
                    141,
                    141,
                    55,
                    55,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    42,
                    148,
                    142,
                    142,
                    147,
                    147,
                    150,
                    151,
                    151,
                    152,
                    153,
                    153,
                    153,
                    19,
                    19,
                    72,
                    72,
                    72,
                    72,
                    143,
                    143,
                    143,
                    143,
                    155,
                    155,
                    144,
                    144,
                    146,
                    146,
                    146,
                    149,
                    149,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    160,
                    161,
                    161,
                    104,
                    163,
                    163,
                    163,
                    163,
                    145,
                    145,
                    145,
                    145,
                    145,
                    145,
                    145,
                    145,
                    58,
                    58,
                    158,
                    158,
                    158,
                    158,
                    164,
                    164,
                    154,
                    154,
                    154,
                    165,
                    165,
                    165,
                    165,
                    165,
                    165,
                    73,
                    73,
                    65,
                    65,
                    65,
                    65,
                    122,
                    122,
                    122,
                    122,
                    168,
                    167,
                    157,
                    157,
                    157,
                    157,
                    157,
                    157,
                    157,
                    156,
                    156,
                    156,
                    166,
                    166,
                    166,
                    166,
                    103,
                    162,
                    170,
                    170,
                    169,
                    169,
                    171,
                    171,
                    171,
                    171,
                    171,
                    171,
                    171,
                    171,
                    159,
                    159,
                    159,
                    159,
                    173,
                    174,
                    172,
                    172,
                    172,
                    172,
                    172,
                    172,
                    172,
                    172,
                    175,
                    175,
                    175,
                    175
                ];
                PHP.Parser.prototype.yylen = [
                    1,
                    1,
                    2,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    0,
                    1,
                    0,
                    1,
                    1,
                    2,
                    1,
                    3,
                    4,
                    1,
                    2,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    5,
                    4,
                    3,
                    4,
                    2,
                    3,
                    1,
                    1,
                    7,
                    6,
                    2,
                    3,
                    1,
                    2,
                    3,
                    1,
                    2,
                    3,
                    1,
                    1,
                    3,
                    1,
                    3,
                    1,
                    2,
                    2,
                    3,
                    1,
                    3,
                    2,
                    3,
                    1,
                    3,
                    2,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    7,
                    10,
                    5,
                    7,
                    9,
                    5,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    1,
                    2,
                    5,
                    7,
                    9,
                    6,
                    5,
                    6,
                    3,
                    2,
                    1,
                    1,
                    1,
                    0,
                    2,
                    1,
                    3,
                    8,
                    0,
                    4,
                    2,
                    1,
                    3,
                    0,
                    1,
                    0,
                    1,
                    0,
                    1,
                    3,
                    1,
                    8,
                    9,
                    8,
                    7,
                    6,
                    8,
                    0,
                    2,
                    0,
                    2,
                    1,
                    2,
                    2,
                    0,
                    2,
                    0,
                    2,
                    0,
                    2,
                    2,
                    1,
                    3,
                    1,
                    4,
                    1,
                    4,
                    1,
                    1,
                    4,
                    2,
                    1,
                    3,
                    3,
                    3,
                    4,
                    4,
                    5,
                    0,
                    2,
                    4,
                    3,
                    1,
                    1,
                    7,
                    0,
                    2,
                    1,
                    3,
                    3,
                    4,
                    1,
                    4,
                    0,
                    2,
                    5,
                    0,
                    2,
                    6,
                    0,
                    2,
                    0,
                    3,
                    1,
                    2,
                    1,
                    1,
                    2,
                    0,
                    1,
                    3,
                    0,
                    2,
                    1,
                    1,
                    1,
                    1,
                    6,
                    8,
                    6,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    1,
                    2,
                    1,
                    1,
                    0,
                    1,
                    0,
                    2,
                    2,
                    2,
                    4,
                    3,
                    1,
                    1,
                    3,
                    1,
                    2,
                    2,
                    3,
                    2,
                    3,
                    1,
                    1,
                    2,
                    3,
                    1,
                    1,
                    3,
                    2,
                    0,
                    1,
                    5,
                    5,
                    10,
                    3,
                    5,
                    1,
                    1,
                    3,
                    0,
                    2,
                    4,
                    5,
                    4,
                    4,
                    4,
                    3,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    0,
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    1,
                    3,
                    1,
                    1,
                    3,
                    2,
                    2,
                    3,
                    1,
                    0,
                    1,
                    1,
                    3,
                    3,
                    3,
                    4,
                    1,
                    1,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    2,
                    2,
                    2,
                    2,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    5,
                    4,
                    3,
                    4,
                    4,
                    2,
                    2,
                    4,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    1,
                    3,
                    2,
                    1,
                    2,
                    4,
                    2,
                    2,
                    8,
                    9,
                    8,
                    9,
                    9,
                    10,
                    9,
                    10,
                    8,
                    3,
                    2,
                    0,
                    4,
                    2,
                    1,
                    3,
                    2,
                    2,
                    2,
                    4,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    1,
                    1,
                    1,
                    0,
                    3,
                    0,
                    1,
                    1,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    3,
                    3,
                    4,
                    1,
                    1,
                    3,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    2,
                    3,
                    0,
                    1,
                    1,
                    3,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    1,
                    1,
                    4,
                    4,
                    1,
                    4,
                    4,
                    0,
                    1,
                    1,
                    1,
                    3,
                    3,
                    1,
                    4,
                    2,
                    2,
                    1,
                    3,
                    1,
                    4,
                    4,
                    3,
                    3,
                    3,
                    3,
                    1,
                    3,
                    1,
                    1,
                    3,
                    1,
                    1,
                    4,
                    1,
                    1,
                    1,
                    3,
                    1,
                    1,
                    2,
                    1,
                    3,
                    4,
                    3,
                    2,
                    0,
                    2,
                    2,
                    1,
                    2,
                    1,
                    1,
                    1,
                    4,
                    3,
                    3,
                    3,
                    3,
                    6,
                    3,
                    1,
                    1,
                    2,
                    1
                ];
                exports1.j = PHP;
            /***/ },
            /***/ 7770: /***/ (__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_463237__)=>{
                "use strict";
                /* harmony export */ __nested_webpack_require_463237__.d(__nested_webpack_exports__, {
                    /* harmony export */ Tk: ()=>/* binding */ checkValueAgainstRegexpArray,
                    /* harmony export */ rL: ()=>/* binding */ mergeObjects
                });
                /* unused harmony exports notEmpty, mergeRanges, convertToUri */ function mergeObjects(obj1, obj2, excludeUndefined = false) {
                    if (!obj1) return obj2;
                    if (!obj2) return obj1;
                    if (excludeUndefined) {
                        obj1 = excludeUndefinedValues(obj1);
                        obj2 = excludeUndefinedValues(obj2);
                    }
                    const mergedObjects = {
                        ...obj2,
                        ...obj1
                    }; // Give priority to obj1 values by spreading obj2 first, then obj1
                    for (const key of Object.keys(mergedObjects)){
                        if (obj1[key] && obj2[key]) {
                            if (Array.isArray(obj1[key])) {
                                mergedObjects[key] = obj1[key].concat(obj2[key]);
                            } else if (Array.isArray(obj2[key])) {
                                mergedObjects[key] = obj2[key].concat(obj1[key]);
                            } else if (typeof obj1[key] === 'object' && typeof obj2[key] === 'object') {
                                mergedObjects[key] = mergeObjects(obj1[key], obj2[key]);
                            }
                        }
                    }
                    return mergedObjects;
                }
                function excludeUndefinedValues(obj) {
                    const filteredEntries = Object.entries(obj).filter(([_, value])=>value !== undefined);
                    return Object.fromEntries(filteredEntries);
                }
                function notEmpty1(value) {
                    return value !== null && value !== undefined;
                }
                //taken with small changes from ace-code
                function mergeRanges1(ranges) {
                    var list = ranges;
                    list = list.sort(function(a, b) {
                        return comparePoints(a.start, b.start);
                    });
                    var next = list[0], range;
                    for(var i = 1; i < list.length; i++){
                        range = next;
                        next = list[i];
                        var cmp = comparePoints(range.end, next.start);
                        if (cmp < 0) continue;
                        if (cmp == 0 && !range.isEmpty() && !next.isEmpty()) continue;
                        if (comparePoints(range.end, next.end) < 0) {
                            range.end.row = next.end.row;
                            range.end.column = next.end.column;
                        }
                        list.splice(i, 1);
                        next = range;
                        i--;
                    }
                    return list;
                }
                function comparePoints(p1, p2) {
                    return p1.row - p2.row || p1.column - p2.column;
                }
                function checkValueAgainstRegexpArray(value, regexpArray) {
                    if (!regexpArray) {
                        return false;
                    }
                    for(let i = 0; i < regexpArray.length; i++){
                        if (regexpArray[i].test(value)) {
                            return true;
                        }
                    }
                    return false;
                }
                function convertToUri(filePath) {
                    //already URI
                    if (filePath.startsWith("file:///")) {
                        return filePath;
                    }
                    return URI.file(filePath).toString();
                }
            /***/ },
            /***/ 5272: /***/ (module1)=>{
                module1.exports = function isBuffer(arg) {
                    return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
                };
            /***/ },
            /***/ 1531: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_467625__)=>{
                "use strict";
                // Currently in sync with Node.js lib/internal/util/types.js
                // https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
                var isArgumentsObject = __nested_webpack_require_467625__(5387);
                var isGeneratorFunction = __nested_webpack_require_467625__(2625);
                var whichTypedArray = __nested_webpack_require_467625__(2730);
                var isTypedArray = __nested_webpack_require_467625__(5943);
                function uncurryThis(f) {
                    return f.call.bind(f);
                }
                var BigIntSupported = typeof BigInt !== 'undefined';
                var SymbolSupported = typeof Symbol !== 'undefined';
                var ObjectToString = uncurryThis(Object.prototype.toString);
                var numberValue = uncurryThis(Number.prototype.valueOf);
                var stringValue = uncurryThis(String.prototype.valueOf);
                var booleanValue = uncurryThis(Boolean.prototype.valueOf);
                if (BigIntSupported) {
                    var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
                }
                if (SymbolSupported) {
                    var symbolValue = uncurryThis(Symbol.prototype.valueOf);
                }
                function checkBoxedPrimitive(value, prototypeValueOf) {
                    if (typeof value !== 'object') {
                        return false;
                    }
                    try {
                        prototypeValueOf(value);
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
                exports1.isArgumentsObject = isArgumentsObject;
                exports1.isGeneratorFunction = isGeneratorFunction;
                exports1.isTypedArray = isTypedArray;
                // Taken from here and modified for better browser support
                // https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
                function isPromise(input) {
                    return typeof Promise !== 'undefined' && input instanceof Promise || input !== null && typeof input === 'object' && typeof input.then === 'function' && typeof input.catch === 'function';
                }
                exports1.isPromise = isPromise;
                function isArrayBufferView(value) {
                    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
                        return ArrayBuffer.isView(value);
                    }
                    return isTypedArray(value) || isDataView(value);
                }
                exports1.isArrayBufferView = isArrayBufferView;
                function isUint8Array(value) {
                    return whichTypedArray(value) === 'Uint8Array';
                }
                exports1.isUint8Array = isUint8Array;
                function isUint8ClampedArray(value) {
                    return whichTypedArray(value) === 'Uint8ClampedArray';
                }
                exports1.isUint8ClampedArray = isUint8ClampedArray;
                function isUint16Array(value) {
                    return whichTypedArray(value) === 'Uint16Array';
                }
                exports1.isUint16Array = isUint16Array;
                function isUint32Array(value) {
                    return whichTypedArray(value) === 'Uint32Array';
                }
                exports1.isUint32Array = isUint32Array;
                function isInt8Array(value) {
                    return whichTypedArray(value) === 'Int8Array';
                }
                exports1.isInt8Array = isInt8Array;
                function isInt16Array(value) {
                    return whichTypedArray(value) === 'Int16Array';
                }
                exports1.isInt16Array = isInt16Array;
                function isInt32Array(value) {
                    return whichTypedArray(value) === 'Int32Array';
                }
                exports1.isInt32Array = isInt32Array;
                function isFloat32Array(value) {
                    return whichTypedArray(value) === 'Float32Array';
                }
                exports1.isFloat32Array = isFloat32Array;
                function isFloat64Array(value) {
                    return whichTypedArray(value) === 'Float64Array';
                }
                exports1.isFloat64Array = isFloat64Array;
                function isBigInt64Array(value) {
                    return whichTypedArray(value) === 'BigInt64Array';
                }
                exports1.isBigInt64Array = isBigInt64Array;
                function isBigUint64Array(value) {
                    return whichTypedArray(value) === 'BigUint64Array';
                }
                exports1.isBigUint64Array = isBigUint64Array;
                function isMapToString(value) {
                    return ObjectToString(value) === '[object Map]';
                }
                isMapToString.working = typeof Map !== 'undefined' && isMapToString(new Map());
                function isMap(value) {
                    if (typeof Map === 'undefined') {
                        return false;
                    }
                    return isMapToString.working ? isMapToString(value) : value instanceof Map;
                }
                exports1.isMap = isMap;
                function isSetToString(value) {
                    return ObjectToString(value) === '[object Set]';
                }
                isSetToString.working = typeof Set !== 'undefined' && isSetToString(new Set());
                function isSet(value) {
                    if (typeof Set === 'undefined') {
                        return false;
                    }
                    return isSetToString.working ? isSetToString(value) : value instanceof Set;
                }
                exports1.isSet = isSet;
                function isWeakMapToString(value) {
                    return ObjectToString(value) === '[object WeakMap]';
                }
                isWeakMapToString.working = typeof WeakMap !== 'undefined' && isWeakMapToString(new WeakMap());
                function isWeakMap(value) {
                    if (typeof WeakMap === 'undefined') {
                        return false;
                    }
                    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
                }
                exports1.isWeakMap = isWeakMap;
                function isWeakSetToString(value) {
                    return ObjectToString(value) === '[object WeakSet]';
                }
                isWeakSetToString.working = typeof WeakSet !== 'undefined' && isWeakSetToString(new WeakSet());
                function isWeakSet(value) {
                    return isWeakSetToString(value);
                }
                exports1.isWeakSet = isWeakSet;
                function isArrayBufferToString(value) {
                    return ObjectToString(value) === '[object ArrayBuffer]';
                }
                isArrayBufferToString.working = typeof ArrayBuffer !== 'undefined' && isArrayBufferToString(new ArrayBuffer());
                function isArrayBuffer(value) {
                    if (typeof ArrayBuffer === 'undefined') {
                        return false;
                    }
                    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
                }
                exports1.isArrayBuffer = isArrayBuffer;
                function isDataViewToString(value) {
                    return ObjectToString(value) === '[object DataView]';
                }
                isDataViewToString.working = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined' && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
                function isDataView(value) {
                    if (typeof DataView === 'undefined') {
                        return false;
                    }
                    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
                }
                exports1.isDataView = isDataView;
                // Store a copy of SharedArrayBuffer in case it's deleted elsewhere
                var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
                function isSharedArrayBufferToString(value) {
                    return ObjectToString(value) === '[object SharedArrayBuffer]';
                }
                function isSharedArrayBuffer(value) {
                    if (typeof SharedArrayBufferCopy === 'undefined') {
                        return false;
                    }
                    if (typeof isSharedArrayBufferToString.working === 'undefined') {
                        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
                    }
                    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
                }
                exports1.isSharedArrayBuffer = isSharedArrayBuffer;
                function isAsyncFunction(value) {
                    return ObjectToString(value) === '[object AsyncFunction]';
                }
                exports1.isAsyncFunction = isAsyncFunction;
                function isMapIterator(value) {
                    return ObjectToString(value) === '[object Map Iterator]';
                }
                exports1.isMapIterator = isMapIterator;
                function isSetIterator(value) {
                    return ObjectToString(value) === '[object Set Iterator]';
                }
                exports1.isSetIterator = isSetIterator;
                function isGeneratorObject(value) {
                    return ObjectToString(value) === '[object Generator]';
                }
                exports1.isGeneratorObject = isGeneratorObject;
                function isWebAssemblyCompiledModule(value) {
                    return ObjectToString(value) === '[object WebAssembly.Module]';
                }
                exports1.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
                function isNumberObject(value) {
                    return checkBoxedPrimitive(value, numberValue);
                }
                exports1.isNumberObject = isNumberObject;
                function isStringObject(value) {
                    return checkBoxedPrimitive(value, stringValue);
                }
                exports1.isStringObject = isStringObject;
                function isBooleanObject(value) {
                    return checkBoxedPrimitive(value, booleanValue);
                }
                exports1.isBooleanObject = isBooleanObject;
                function isBigIntObject(value) {
                    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
                }
                exports1.isBigIntObject = isBigIntObject;
                function isSymbolObject(value) {
                    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
                }
                exports1.isSymbolObject = isSymbolObject;
                function isBoxedPrimitive(value) {
                    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
                }
                exports1.isBoxedPrimitive = isBoxedPrimitive;
                function isAnyArrayBuffer(value) {
                    return typeof Uint8Array !== 'undefined' && (isArrayBuffer(value) || isSharedArrayBuffer(value));
                }
                exports1.isAnyArrayBuffer = isAnyArrayBuffer;
                [
                    'isProxy',
                    'isExternal',
                    'isModuleNamespaceObject'
                ].forEach(function(method) {
                    Object.defineProperty(exports1, method, {
                        enumerable: false,
                        value: function() {
                            throw new Error(method + ' is not supported in userland');
                        }
                    });
                });
            /***/ },
            /***/ 6827: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_480102__)=>{
                /* provided dependency */ var process = __nested_webpack_require_480102__(9907);
                /* provided dependency */ var console = __nested_webpack_require_480102__(4364);
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
                    var keys = Object.keys(obj);
                    var descriptors = {};
                    for(var i = 0; i < keys.length; i++){
                        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
                    }
                    return descriptors;
                };
                var formatRegExp = /%[sdj%]/g;
                exports1.format = function(f) {
                    if (!isString(f)) {
                        var objects = [];
                        for(var i = 0; i < arguments.length; i++){
                            objects.push(inspect(arguments[i]));
                        }
                        return objects.join(' ');
                    }
                    var i = 1;
                    var args = arguments;
                    var len = args.length;
                    var str = String(f).replace(formatRegExp, function(x) {
                        if (x === '%%') return '%';
                        if (i >= len) return x;
                        switch(x){
                            case '%s':
                                return String(args[i++]);
                            case '%d':
                                return Number(args[i++]);
                            case '%j':
                                try {
                                    return JSON.stringify(args[i++]);
                                } catch (_) {
                                    return '[Circular]';
                                }
                            default:
                                return x;
                        }
                    });
                    for(var x = args[i]; i < len; x = args[++i]){
                        if (isNull(x) || !isObject(x)) {
                            str += ' ' + x;
                        } else {
                            str += ' ' + inspect(x);
                        }
                    }
                    return str;
                };
                // Mark that a method should not be used.
                // Returns a modified function which warns once by default.
                // If --no-deprecation is set, then it is a no-op.
                exports1.deprecate = function(fn, msg) {
                    if (typeof process !== 'undefined' && process.noDeprecation === true) {
                        return fn;
                    }
                    // Allow for deprecating things in the process of starting up.
                    if (typeof process === 'undefined') {
                        return function() {
                            return exports1.deprecate(fn, msg).apply(this, arguments);
                        };
                    }
                    var warned = false;
                    function deprecated() {
                        if (!warned) {
                            if (process.throwDeprecation) {
                                throw new Error(msg);
                            } else if (process.traceDeprecation) {
                                console.trace(msg);
                            } else {
                                console.error(msg);
                            }
                            warned = true;
                        }
                        return fn.apply(this, arguments);
                    }
                    return deprecated;
                };
                var debugs = {};
                var debugEnvRegex = /^$/;
                if (process.env.NODE_DEBUG) {
                    var debugEnv = process.env.NODE_DEBUG;
                    debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&').replace(/\*/g, '.*').replace(/,/g, '$|^').toUpperCase();
                    debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
                }
                exports1.debuglog = function(set) {
                    set = set.toUpperCase();
                    if (!debugs[set]) {
                        if (debugEnvRegex.test(set)) {
                            var pid = process.pid;
                            debugs[set] = function() {
                                var msg = exports1.format.apply(exports1, arguments);
                                console.error('%s %d: %s', set, pid, msg);
                            };
                        } else {
                            debugs[set] = function() {};
                        }
                    }
                    return debugs[set];
                };
                /**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function inspect(obj, opts) {
                    // default options
                    var ctx = {
                        seen: [],
                        stylize: stylizeNoColor
                    };
                    // legacy...
                    if (arguments.length >= 3) ctx.depth = arguments[2];
                    if (arguments.length >= 4) ctx.colors = arguments[3];
                    if (isBoolean(opts)) {
                        // legacy...
                        ctx.showHidden = opts;
                    } else if (opts) {
                        // got an "options" object
                        exports1._extend(ctx, opts);
                    }
                    // set default options
                    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                    if (isUndefined(ctx.depth)) ctx.depth = 2;
                    if (isUndefined(ctx.colors)) ctx.colors = false;
                    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                    if (ctx.colors) ctx.stylize = stylizeWithColor;
                    return formatValue(ctx, obj, ctx.depth);
                }
                exports1.inspect = inspect;
                // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
                inspect.colors = {
                    'bold': [
                        1,
                        22
                    ],
                    'italic': [
                        3,
                        23
                    ],
                    'underline': [
                        4,
                        24
                    ],
                    'inverse': [
                        7,
                        27
                    ],
                    'white': [
                        37,
                        39
                    ],
                    'grey': [
                        90,
                        39
                    ],
                    'black': [
                        30,
                        39
                    ],
                    'blue': [
                        34,
                        39
                    ],
                    'cyan': [
                        36,
                        39
                    ],
                    'green': [
                        32,
                        39
                    ],
                    'magenta': [
                        35,
                        39
                    ],
                    'red': [
                        31,
                        39
                    ],
                    'yellow': [
                        33,
                        39
                    ]
                };
                // Don't use 'blue' not visible on cmd.exe
                inspect.styles = {
                    'special': 'cyan',
                    'number': 'yellow',
                    'boolean': 'yellow',
                    'undefined': 'grey',
                    'null': 'bold',
                    'string': 'green',
                    'date': 'magenta',
                    // "name": intentionally not styling
                    'regexp': 'red'
                };
                function stylizeWithColor(str, styleType) {
                    var style = inspect.styles[styleType];
                    if (style) {
                        return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
                    } else {
                        return str;
                    }
                }
                function stylizeNoColor(str, styleType) {
                    return str;
                }
                function arrayToHash(array) {
                    var hash = {};
                    array.forEach(function(val, idx) {
                        hash[val] = true;
                    });
                    return hash;
                }
                function formatValue(ctx, value, recurseTimes) {
                    // Provide a hook for user-specified inspect functions.
                    // Check that value is an object with an inspect function on it
                    if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
                    value.inspect !== exports1.inspect && // Also filter out any prototype objects using the circular check.
                    !(value.constructor && value.constructor.prototype === value)) {
                        var ret = value.inspect(recurseTimes, ctx);
                        if (!isString(ret)) {
                            ret = formatValue(ctx, ret, recurseTimes);
                        }
                        return ret;
                    }
                    // Primitive types cannot have properties
                    var primitive = formatPrimitive(ctx, value);
                    if (primitive) {
                        return primitive;
                    }
                    // Look up the keys of the object.
                    var keys = Object.keys(value);
                    var visibleKeys = arrayToHash(keys);
                    if (ctx.showHidden) {
                        keys = Object.getOwnPropertyNames(value);
                    }
                    // IE doesn't make error fields non-enumerable
                    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                        return formatError(value);
                    }
                    // Some type of object without properties can be shortcutted.
                    if (keys.length === 0) {
                        if (isFunction(value)) {
                            var name = value.name ? ': ' + value.name : '';
                            return ctx.stylize('[Function' + name + ']', 'special');
                        }
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        }
                        if (isDate(value)) {
                            return ctx.stylize(Date.prototype.toString.call(value), 'date');
                        }
                        if (isError(value)) {
                            return formatError(value);
                        }
                    }
                    var base = '', array = false, braces = [
                        '{',
                        '}'
                    ];
                    // Make Array say that they are Array
                    if (isArray(value)) {
                        array = true;
                        braces = [
                            '[',
                            ']'
                        ];
                    }
                    // Make functions say that they are functions
                    if (isFunction(value)) {
                        var n = value.name ? ': ' + value.name : '';
                        base = ' [Function' + n + ']';
                    }
                    // Make RegExps say that they are RegExps
                    if (isRegExp(value)) {
                        base = ' ' + RegExp.prototype.toString.call(value);
                    }
                    // Make dates with properties first say the date
                    if (isDate(value)) {
                        base = ' ' + Date.prototype.toUTCString.call(value);
                    }
                    // Make error with message first say the error
                    if (isError(value)) {
                        base = ' ' + formatError(value);
                    }
                    if (keys.length === 0 && (!array || value.length == 0)) {
                        return braces[0] + base + braces[1];
                    }
                    if (recurseTimes < 0) {
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                        } else {
                            return ctx.stylize('[Object]', 'special');
                        }
                    }
                    ctx.seen.push(value);
                    var output;
                    if (array) {
                        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                    } else {
                        output = keys.map(function(key) {
                            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                        });
                    }
                    ctx.seen.pop();
                    return reduceToSingleString(output, base, braces);
                }
                function formatPrimitive(ctx, value) {
                    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
                    if (isString(value)) {
                        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
                        return ctx.stylize(simple, 'string');
                    }
                    if (isNumber(value)) return ctx.stylize('' + value, 'number');
                    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
                    // For some reason typeof null is "object", so special case here.
                    if (isNull(value)) return ctx.stylize('null', 'null');
                }
                function formatError(value) {
                    return '[' + Error.prototype.toString.call(value) + ']';
                }
                function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                    var output = [];
                    for(var i = 0, l = value.length; i < l; ++i){
                        if (hasOwnProperty(value, String(i))) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
                        } else {
                            output.push('');
                        }
                    }
                    keys.forEach(function(key) {
                        if (!key.match(/^\d+$/)) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                        }
                    });
                    return output;
                }
                function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                    var name, str, desc;
                    desc = Object.getOwnPropertyDescriptor(value, key) || {
                        value: value[key]
                    };
                    if (desc.get) {
                        if (desc.set) {
                            str = ctx.stylize('[Getter/Setter]', 'special');
                        } else {
                            str = ctx.stylize('[Getter]', 'special');
                        }
                    } else {
                        if (desc.set) {
                            str = ctx.stylize('[Setter]', 'special');
                        }
                    }
                    if (!hasOwnProperty(visibleKeys, key)) {
                        name = '[' + key + ']';
                    }
                    if (!str) {
                        if (ctx.seen.indexOf(desc.value) < 0) {
                            if (isNull(recurseTimes)) {
                                str = formatValue(ctx, desc.value, null);
                            } else {
                                str = formatValue(ctx, desc.value, recurseTimes - 1);
                            }
                            if (str.indexOf('\n') > -1) {
                                if (array) {
                                    str = str.split('\n').map(function(line) {
                                        return '  ' + line;
                                    }).join('\n').slice(2);
                                } else {
                                    str = '\n' + str.split('\n').map(function(line) {
                                        return '   ' + line;
                                    }).join('\n');
                                }
                            }
                        } else {
                            str = ctx.stylize('[Circular]', 'special');
                        }
                    }
                    if (isUndefined(name)) {
                        if (array && key.match(/^\d+$/)) {
                            return str;
                        }
                        name = JSON.stringify('' + key);
                        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                            name = name.slice(1, -1);
                            name = ctx.stylize(name, 'name');
                        } else {
                            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                            name = ctx.stylize(name, 'string');
                        }
                    }
                    return name + ': ' + str;
                }
                function reduceToSingleString(output, base, braces) {
                    var numLinesEst = 0;
                    var length = output.reduce(function(prev, cur) {
                        numLinesEst++;
                        if (cur.indexOf('\n') >= 0) numLinesEst++;
                        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
                    }, 0);
                    if (length > 60) {
                        return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
                    }
                    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
                }
                // NOTE: These type checking functions intentionally don't use `instanceof`
                // because it is fragile and can be easily faked with `Object.create()`.
                exports1.types = __nested_webpack_require_480102__(1531);
                function isArray(ar) {
                    return Array.isArray(ar);
                }
                exports1.isArray = isArray;
                function isBoolean(arg) {
                    return typeof arg === 'boolean';
                }
                exports1.isBoolean = isBoolean;
                function isNull(arg) {
                    return arg === null;
                }
                exports1.isNull = isNull;
                function isNullOrUndefined(arg) {
                    return arg == null;
                }
                exports1.isNullOrUndefined = isNullOrUndefined;
                function isNumber(arg) {
                    return typeof arg === 'number';
                }
                exports1.isNumber = isNumber;
                function isString(arg) {
                    return typeof arg === 'string';
                }
                exports1.isString = isString;
                function isSymbol(arg) {
                    return typeof arg === 'symbol';
                }
                exports1.isSymbol = isSymbol;
                function isUndefined(arg) {
                    return arg === void 0;
                }
                exports1.isUndefined = isUndefined;
                function isRegExp(re) {
                    return isObject(re) && objectToString(re) === '[object RegExp]';
                }
                exports1.isRegExp = isRegExp;
                exports1.types.isRegExp = isRegExp;
                function isObject(arg) {
                    return typeof arg === 'object' && arg !== null;
                }
                exports1.isObject = isObject;
                function isDate(d) {
                    return isObject(d) && objectToString(d) === '[object Date]';
                }
                exports1.isDate = isDate;
                exports1.types.isDate = isDate;
                function isError(e) {
                    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
                }
                exports1.isError = isError;
                exports1.types.isNativeError = isError;
                function isFunction(arg) {
                    return typeof arg === 'function';
                }
                exports1.isFunction = isFunction;
                function isPrimitive(arg) {
                    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
                    typeof arg === 'undefined';
                }
                exports1.isPrimitive = isPrimitive;
                exports1.isBuffer = __nested_webpack_require_480102__(5272);
                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }
                function pad(n) {
                    return n < 10 ? '0' + n.toString(10) : n.toString(10);
                }
                var months = [
                    'Jan',
                    'Feb',
                    'Mar',
                    'Apr',
                    'May',
                    'Jun',
                    'Jul',
                    'Aug',
                    'Sep',
                    'Oct',
                    'Nov',
                    'Dec'
                ];
                // 26 Feb 16:19:34
                function timestamp() {
                    var d = new Date();
                    var time = [
                        pad(d.getHours()),
                        pad(d.getMinutes()),
                        pad(d.getSeconds())
                    ].join(':');
                    return [
                        d.getDate(),
                        months[d.getMonth()],
                        time
                    ].join(' ');
                }
                // log is just a thin wrapper to console.log that prepends a timestamp
                exports1.log = function() {
                    console.log('%s - %s', timestamp(), exports1.format.apply(exports1, arguments));
                };
                /**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ exports1.inherits = __nested_webpack_require_480102__(5615);
                exports1._extend = function(origin, add) {
                    // Don't do anything if add isn't an object
                    if (!add || !isObject(add)) return origin;
                    var keys = Object.keys(add);
                    var i = keys.length;
                    while(i--){
                        origin[keys[i]] = add[keys[i]];
                    }
                    return origin;
                };
                function hasOwnProperty(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                }
                var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
                exports1.promisify = function promisify(original) {
                    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
                    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
                        var fn = original[kCustomPromisifiedSymbol];
                        if (typeof fn !== 'function') {
                            throw new TypeError('The "util.promisify.custom" argument must be of type Function');
                        }
                        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                            value: fn,
                            enumerable: false,
                            writable: false,
                            configurable: true
                        });
                        return fn;
                    }
                    function fn() {
                        var promiseResolve, promiseReject;
                        var promise = new Promise(function(resolve, reject) {
                            promiseResolve = resolve;
                            promiseReject = reject;
                        });
                        var args = [];
                        for(var i = 0; i < arguments.length; i++){
                            args.push(arguments[i]);
                        }
                        args.push(function(err, value) {
                            if (err) {
                                promiseReject(err);
                            } else {
                                promiseResolve(value);
                            }
                        });
                        try {
                            original.apply(this, args);
                        } catch (err) {
                            promiseReject(err);
                        }
                        return promise;
                    }
                    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
                    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                        value: fn,
                        enumerable: false,
                        writable: false,
                        configurable: true
                    });
                    return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
                };
                exports1.promisify.custom = kCustomPromisifiedSymbol;
                function callbackifyOnRejected(reason, cb) {
                    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
                    // Because `null` is a special error value in callbacks which means "no error
                    // occurred", we error-wrap so the callback consumer can distinguish between
                    // "the promise rejected with null" or "the promise fulfilled with undefined".
                    if (!reason) {
                        var newReason = new Error('Promise was rejected with a falsy value');
                        newReason.reason = reason;
                        reason = newReason;
                    }
                    return cb(reason);
                }
                function callbackify(original) {
                    if (typeof original !== 'function') {
                        throw new TypeError('The "original" argument must be of type Function');
                    }
                    // We DO NOT return the promise as it gives the user a false sense that
                    // the promise is actually somehow related to the callback's execution
                    // and that the callback throwing will reject the promise.
                    function callbackified() {
                        var args = [];
                        for(var i = 0; i < arguments.length; i++){
                            args.push(arguments[i]);
                        }
                        var maybeCb = args.pop();
                        if (typeof maybeCb !== 'function') {
                            throw new TypeError('The last argument must be of type Function');
                        }
                        var self = this;
                        var cb = function() {
                            return maybeCb.apply(self, arguments);
                        };
                        // In true node style we process the callback on `nextTick` with all the
                        // implications (stack, `uncaughtException`, `async_hooks`)
                        original.apply(this, args).then(function(ret) {
                            process.nextTick(cb.bind(null, null, ret));
                        }, function(rej) {
                            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
                        });
                    }
                    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
                    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
                    return callbackified;
                }
                exports1.callbackify = callbackify;
            /***/ },
            /***/ 9208: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_511700__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */ module1.exports = __nested_webpack_require_511700__(9110);
            /***/ },
            /***/ 9110: /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_512259__) {
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    var desc = Object.getOwnPropertyDescriptor(m, k);
                    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                        desc = {
                            enumerable: true,
                            get: function() {
                                return m[k];
                            }
                        };
                    }
                    Object.defineProperty(o, k2, desc);
                } : function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports1) {
                    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
                };
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.createMessageConnection = exports1.BrowserMessageWriter = exports1.BrowserMessageReader = void 0;
                const ril_1 = __nested_webpack_require_512259__(3312);
                // Install the browser runtime abstract.
                ril_1.default.install();
                const api_1 = __nested_webpack_require_512259__(7672);
                __exportStar(__nested_webpack_require_512259__(7672), exports1);
                class BrowserMessageReader extends api_1.AbstractMessageReader {
                    listen(callback) {
                        return this._onData.event(callback);
                    }
                    constructor(port){
                        super();
                        this._onData = new api_1.Emitter();
                        this._messageListener = (event)=>{
                            this._onData.fire(event.data);
                        };
                        port.addEventListener('error', (event)=>this.fireError(event));
                        port.onmessage = this._messageListener;
                    }
                }
                exports1.BrowserMessageReader = BrowserMessageReader;
                class BrowserMessageWriter extends api_1.AbstractMessageWriter {
                    write(msg) {
                        try {
                            this.port.postMessage(msg);
                            return Promise.resolve();
                        } catch (error) {
                            this.handleError(error, msg);
                            return Promise.reject(error);
                        }
                    }
                    handleError(error, msg) {
                        this.errorCount++;
                        this.fireError(error, msg, this.errorCount);
                    }
                    end() {}
                    constructor(port){
                        super();
                        this.port = port;
                        this.errorCount = 0;
                        port.addEventListener('error', (event)=>this.fireError(event));
                    }
                }
                exports1.BrowserMessageWriter = BrowserMessageWriter;
                function createMessageConnection(reader, writer, logger, options) {
                    if (logger === undefined) {
                        logger = api_1.NullLogger;
                    }
                    if (api_1.ConnectionStrategy.is(options)) {
                        options = {
                            connectionStrategy: options
                        };
                    }
                    return (0, api_1.createMessageConnection)(reader, writer, logger, options);
                }
                exports1.createMessageConnection = createMessageConnection;
            /***/ },
            /***/ 3312: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_516674__)=>{
                "use strict";
                /* provided dependency */ var console = __nested_webpack_require_516674__(4364);
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                const api_1 = __nested_webpack_require_516674__(7672);
                class MessageBuffer extends api_1.AbstractMessageBuffer {
                    emptyBuffer() {
                        return MessageBuffer.emptyBuffer;
                    }
                    fromString(value, _encoding) {
                        return new TextEncoder().encode(value);
                    }
                    toString(value, encoding) {
                        if (encoding === 'ascii') {
                            return this.asciiDecoder.decode(value);
                        } else {
                            return new TextDecoder(encoding).decode(value);
                        }
                    }
                    asNative(buffer, length) {
                        if (length === undefined) {
                            return buffer;
                        } else {
                            return buffer.slice(0, length);
                        }
                    }
                    allocNative(length) {
                        return new Uint8Array(length);
                    }
                    constructor(encoding = 'utf-8'){
                        super(encoding);
                        this.asciiDecoder = new TextDecoder('ascii');
                    }
                }
                MessageBuffer.emptyBuffer = new Uint8Array(0);
                class ReadableStreamWrapper {
                    onClose(listener) {
                        this.socket.addEventListener('close', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('close', listener));
                    }
                    onError(listener) {
                        this.socket.addEventListener('error', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('error', listener));
                    }
                    onEnd(listener) {
                        this.socket.addEventListener('end', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('end', listener));
                    }
                    onData(listener) {
                        return this._onData.event(listener);
                    }
                    constructor(socket){
                        this.socket = socket;
                        this._onData = new api_1.Emitter();
                        this._messageListener = (event)=>{
                            const blob = event.data;
                            blob.arrayBuffer().then((buffer)=>{
                                this._onData.fire(new Uint8Array(buffer));
                            }, ()=>{
                                (0, api_1.RAL)().console.error(`Converting blob to array buffer failed.`);
                            });
                        };
                        this.socket.addEventListener('message', this._messageListener);
                    }
                }
                class WritableStreamWrapper {
                    onClose(listener) {
                        this.socket.addEventListener('close', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('close', listener));
                    }
                    onError(listener) {
                        this.socket.addEventListener('error', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('error', listener));
                    }
                    onEnd(listener) {
                        this.socket.addEventListener('end', listener);
                        return api_1.Disposable.create(()=>this.socket.removeEventListener('end', listener));
                    }
                    write(data, encoding) {
                        if (typeof data === 'string') {
                            if (encoding !== undefined && encoding !== 'utf-8') {
                                throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);
                            }
                            this.socket.send(data);
                        } else {
                            this.socket.send(data);
                        }
                        return Promise.resolve();
                    }
                    end() {
                        this.socket.close();
                    }
                    constructor(socket){
                        this.socket = socket;
                    }
                }
                const _textEncoder = new TextEncoder();
                const _ril = Object.freeze({
                    messageBuffer: Object.freeze({
                        create: (encoding)=>new MessageBuffer(encoding)
                    }),
                    applicationJson: Object.freeze({
                        encoder: Object.freeze({
                            name: 'application/json',
                            encode: (msg, options)=>{
                                if (options.charset !== 'utf-8') {
                                    throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);
                                }
                                return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, undefined, 0)));
                            }
                        }),
                        decoder: Object.freeze({
                            name: 'application/json',
                            decode: (buffer, options)=>{
                                if (!(buffer instanceof Uint8Array)) {
                                    throw new Error(`In a Browser environments only Uint8Arrays are supported.`);
                                }
                                return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
                            }
                        })
                    }),
                    stream: Object.freeze({
                        asReadableStream: (socket)=>new ReadableStreamWrapper(socket),
                        asWritableStream: (socket)=>new WritableStreamWrapper(socket)
                    }),
                    console: console,
                    timer: Object.freeze({
                        setTimeout (callback, ms, ...args) {
                            const handle = setTimeout(callback, ms, ...args);
                            return {
                                dispose: ()=>clearTimeout(handle)
                            };
                        },
                        setImmediate (callback, ...args) {
                            const handle = setTimeout(callback, 0, ...args);
                            return {
                                dispose: ()=>clearTimeout(handle)
                            };
                        },
                        setInterval (callback, ms, ...args) {
                            const handle = setInterval(callback, ms, ...args);
                            return {
                                dispose: ()=>clearInterval(handle)
                            };
                        }
                    })
                });
                function RIL() {
                    return _ril;
                }
                (function(RIL) {
                    function install() {
                        api_1.RAL.install(_ril);
                    }
                    RIL.install = install;
                })(RIL || (RIL = {}));
                exports1["default"] = RIL;
            /***/ },
            /***/ 7672: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_525053__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ /// <reference path="../../typings/thenable.d.ts" />
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ProgressType = exports1.ProgressToken = exports1.createMessageConnection = exports1.NullLogger = exports1.ConnectionOptions = exports1.ConnectionStrategy = exports1.AbstractMessageBuffer = exports1.WriteableStreamMessageWriter = exports1.AbstractMessageWriter = exports1.MessageWriter = exports1.ReadableStreamMessageReader = exports1.AbstractMessageReader = exports1.MessageReader = exports1.SharedArrayReceiverStrategy = exports1.SharedArraySenderStrategy = exports1.CancellationToken = exports1.CancellationTokenSource = exports1.Emitter = exports1.Event = exports1.Disposable = exports1.LRUCache = exports1.Touch = exports1.LinkedMap = exports1.ParameterStructures = exports1.NotificationType9 = exports1.NotificationType8 = exports1.NotificationType7 = exports1.NotificationType6 = exports1.NotificationType5 = exports1.NotificationType4 = exports1.NotificationType3 = exports1.NotificationType2 = exports1.NotificationType1 = exports1.NotificationType0 = exports1.NotificationType = exports1.ErrorCodes = exports1.ResponseError = exports1.RequestType9 = exports1.RequestType8 = exports1.RequestType7 = exports1.RequestType6 = exports1.RequestType5 = exports1.RequestType4 = exports1.RequestType3 = exports1.RequestType2 = exports1.RequestType1 = exports1.RequestType0 = exports1.RequestType = exports1.Message = exports1.RAL = void 0;
                exports1.MessageStrategy = exports1.CancellationStrategy = exports1.CancellationSenderStrategy = exports1.CancellationReceiverStrategy = exports1.ConnectionError = exports1.ConnectionErrors = exports1.LogTraceNotification = exports1.SetTraceNotification = exports1.TraceFormat = exports1.TraceValues = exports1.Trace = void 0;
                const messages_1 = __nested_webpack_require_525053__(7162);
                Object.defineProperty(exports1, "Message", {
                    enumerable: true,
                    get: function() {
                        return messages_1.Message;
                    }
                });
                Object.defineProperty(exports1, "RequestType", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType;
                    }
                });
                Object.defineProperty(exports1, "RequestType0", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType0;
                    }
                });
                Object.defineProperty(exports1, "RequestType1", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType1;
                    }
                });
                Object.defineProperty(exports1, "RequestType2", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType2;
                    }
                });
                Object.defineProperty(exports1, "RequestType3", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType3;
                    }
                });
                Object.defineProperty(exports1, "RequestType4", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType4;
                    }
                });
                Object.defineProperty(exports1, "RequestType5", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType5;
                    }
                });
                Object.defineProperty(exports1, "RequestType6", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType6;
                    }
                });
                Object.defineProperty(exports1, "RequestType7", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType7;
                    }
                });
                Object.defineProperty(exports1, "RequestType8", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType8;
                    }
                });
                Object.defineProperty(exports1, "RequestType9", {
                    enumerable: true,
                    get: function() {
                        return messages_1.RequestType9;
                    }
                });
                Object.defineProperty(exports1, "ResponseError", {
                    enumerable: true,
                    get: function() {
                        return messages_1.ResponseError;
                    }
                });
                Object.defineProperty(exports1, "ErrorCodes", {
                    enumerable: true,
                    get: function() {
                        return messages_1.ErrorCodes;
                    }
                });
                Object.defineProperty(exports1, "NotificationType", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType;
                    }
                });
                Object.defineProperty(exports1, "NotificationType0", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType0;
                    }
                });
                Object.defineProperty(exports1, "NotificationType1", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType1;
                    }
                });
                Object.defineProperty(exports1, "NotificationType2", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType2;
                    }
                });
                Object.defineProperty(exports1, "NotificationType3", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType3;
                    }
                });
                Object.defineProperty(exports1, "NotificationType4", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType4;
                    }
                });
                Object.defineProperty(exports1, "NotificationType5", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType5;
                    }
                });
                Object.defineProperty(exports1, "NotificationType6", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType6;
                    }
                });
                Object.defineProperty(exports1, "NotificationType7", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType7;
                    }
                });
                Object.defineProperty(exports1, "NotificationType8", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType8;
                    }
                });
                Object.defineProperty(exports1, "NotificationType9", {
                    enumerable: true,
                    get: function() {
                        return messages_1.NotificationType9;
                    }
                });
                Object.defineProperty(exports1, "ParameterStructures", {
                    enumerable: true,
                    get: function() {
                        return messages_1.ParameterStructures;
                    }
                });
                const linkedMap_1 = __nested_webpack_require_525053__(1109);
                Object.defineProperty(exports1, "LinkedMap", {
                    enumerable: true,
                    get: function() {
                        return linkedMap_1.LinkedMap;
                    }
                });
                Object.defineProperty(exports1, "LRUCache", {
                    enumerable: true,
                    get: function() {
                        return linkedMap_1.LRUCache;
                    }
                });
                Object.defineProperty(exports1, "Touch", {
                    enumerable: true,
                    get: function() {
                        return linkedMap_1.Touch;
                    }
                });
                const disposable_1 = __nested_webpack_require_525053__(8844);
                Object.defineProperty(exports1, "Disposable", {
                    enumerable: true,
                    get: function() {
                        return disposable_1.Disposable;
                    }
                });
                const events_1 = __nested_webpack_require_525053__(2479);
                Object.defineProperty(exports1, "Event", {
                    enumerable: true,
                    get: function() {
                        return events_1.Event;
                    }
                });
                Object.defineProperty(exports1, "Emitter", {
                    enumerable: true,
                    get: function() {
                        return events_1.Emitter;
                    }
                });
                const cancellation_1 = __nested_webpack_require_525053__(6957);
                Object.defineProperty(exports1, "CancellationTokenSource", {
                    enumerable: true,
                    get: function() {
                        return cancellation_1.CancellationTokenSource;
                    }
                });
                Object.defineProperty(exports1, "CancellationToken", {
                    enumerable: true,
                    get: function() {
                        return cancellation_1.CancellationToken;
                    }
                });
                const sharedArrayCancellation_1 = __nested_webpack_require_525053__(3489);
                Object.defineProperty(exports1, "SharedArraySenderStrategy", {
                    enumerable: true,
                    get: function() {
                        return sharedArrayCancellation_1.SharedArraySenderStrategy;
                    }
                });
                Object.defineProperty(exports1, "SharedArrayReceiverStrategy", {
                    enumerable: true,
                    get: function() {
                        return sharedArrayCancellation_1.SharedArrayReceiverStrategy;
                    }
                });
                const messageReader_1 = __nested_webpack_require_525053__(656);
                Object.defineProperty(exports1, "MessageReader", {
                    enumerable: true,
                    get: function() {
                        return messageReader_1.MessageReader;
                    }
                });
                Object.defineProperty(exports1, "AbstractMessageReader", {
                    enumerable: true,
                    get: function() {
                        return messageReader_1.AbstractMessageReader;
                    }
                });
                Object.defineProperty(exports1, "ReadableStreamMessageReader", {
                    enumerable: true,
                    get: function() {
                        return messageReader_1.ReadableStreamMessageReader;
                    }
                });
                const messageWriter_1 = __nested_webpack_require_525053__(9036);
                Object.defineProperty(exports1, "MessageWriter", {
                    enumerable: true,
                    get: function() {
                        return messageWriter_1.MessageWriter;
                    }
                });
                Object.defineProperty(exports1, "AbstractMessageWriter", {
                    enumerable: true,
                    get: function() {
                        return messageWriter_1.AbstractMessageWriter;
                    }
                });
                Object.defineProperty(exports1, "WriteableStreamMessageWriter", {
                    enumerable: true,
                    get: function() {
                        return messageWriter_1.WriteableStreamMessageWriter;
                    }
                });
                const messageBuffer_1 = __nested_webpack_require_525053__(9805);
                Object.defineProperty(exports1, "AbstractMessageBuffer", {
                    enumerable: true,
                    get: function() {
                        return messageBuffer_1.AbstractMessageBuffer;
                    }
                });
                const connection_1 = __nested_webpack_require_525053__(4054);
                Object.defineProperty(exports1, "ConnectionStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ConnectionStrategy;
                    }
                });
                Object.defineProperty(exports1, "ConnectionOptions", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ConnectionOptions;
                    }
                });
                Object.defineProperty(exports1, "NullLogger", {
                    enumerable: true,
                    get: function() {
                        return connection_1.NullLogger;
                    }
                });
                Object.defineProperty(exports1, "createMessageConnection", {
                    enumerable: true,
                    get: function() {
                        return connection_1.createMessageConnection;
                    }
                });
                Object.defineProperty(exports1, "ProgressToken", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ProgressToken;
                    }
                });
                Object.defineProperty(exports1, "ProgressType", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ProgressType;
                    }
                });
                Object.defineProperty(exports1, "Trace", {
                    enumerable: true,
                    get: function() {
                        return connection_1.Trace;
                    }
                });
                Object.defineProperty(exports1, "TraceValues", {
                    enumerable: true,
                    get: function() {
                        return connection_1.TraceValues;
                    }
                });
                Object.defineProperty(exports1, "TraceFormat", {
                    enumerable: true,
                    get: function() {
                        return connection_1.TraceFormat;
                    }
                });
                Object.defineProperty(exports1, "SetTraceNotification", {
                    enumerable: true,
                    get: function() {
                        return connection_1.SetTraceNotification;
                    }
                });
                Object.defineProperty(exports1, "LogTraceNotification", {
                    enumerable: true,
                    get: function() {
                        return connection_1.LogTraceNotification;
                    }
                });
                Object.defineProperty(exports1, "ConnectionErrors", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ConnectionErrors;
                    }
                });
                Object.defineProperty(exports1, "ConnectionError", {
                    enumerable: true,
                    get: function() {
                        return connection_1.ConnectionError;
                    }
                });
                Object.defineProperty(exports1, "CancellationReceiverStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.CancellationReceiverStrategy;
                    }
                });
                Object.defineProperty(exports1, "CancellationSenderStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.CancellationSenderStrategy;
                    }
                });
                Object.defineProperty(exports1, "CancellationStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.CancellationStrategy;
                    }
                });
                Object.defineProperty(exports1, "MessageStrategy", {
                    enumerable: true,
                    get: function() {
                        return connection_1.MessageStrategy;
                    }
                });
                const ral_1 = __nested_webpack_require_525053__(5091);
                exports1.RAL = ral_1.default;
            /***/ },
            /***/ 6957: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_543117__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.CancellationTokenSource = exports1.CancellationToken = void 0;
                const ral_1 = __nested_webpack_require_543117__(5091);
                const Is = __nested_webpack_require_543117__(6618);
                const events_1 = __nested_webpack_require_543117__(2479);
                var CancellationToken;
                (function(CancellationToken) {
                    CancellationToken.None = Object.freeze({
                        isCancellationRequested: false,
                        onCancellationRequested: events_1.Event.None
                    });
                    CancellationToken.Cancelled = Object.freeze({
                        isCancellationRequested: true,
                        onCancellationRequested: events_1.Event.None
                    });
                    function is(value) {
                        const candidate = value;
                        return candidate && (candidate === CancellationToken.None || candidate === CancellationToken.Cancelled || Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested);
                    }
                    CancellationToken.is = is;
                })(CancellationToken = exports1.CancellationToken || (exports1.CancellationToken = {}));
                const shortcutEvent = Object.freeze(function(callback, context) {
                    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
                    return {
                        dispose () {
                            handle.dispose();
                        }
                    };
                });
                class MutableToken {
                    cancel() {
                        if (!this._isCancelled) {
                            this._isCancelled = true;
                            if (this._emitter) {
                                this._emitter.fire(undefined);
                                this.dispose();
                            }
                        }
                    }
                    get isCancellationRequested() {
                        return this._isCancelled;
                    }
                    get onCancellationRequested() {
                        if (this._isCancelled) {
                            return shortcutEvent;
                        }
                        if (!this._emitter) {
                            this._emitter = new events_1.Emitter();
                        }
                        return this._emitter.event;
                    }
                    dispose() {
                        if (this._emitter) {
                            this._emitter.dispose();
                            this._emitter = undefined;
                        }
                    }
                    constructor(){
                        this._isCancelled = false;
                    }
                }
                class CancellationTokenSource {
                    get token() {
                        if (!this._token) {
                            // be lazy and create the token only when
                            // actually needed
                            this._token = new MutableToken();
                        }
                        return this._token;
                    }
                    cancel() {
                        if (!this._token) {
                            // save an object by returning the default
                            // cancelled token when cancellation happens
                            // before someone asks for the token
                            this._token = CancellationToken.Cancelled;
                        } else {
                            this._token.cancel();
                        }
                    }
                    dispose() {
                        if (!this._token) {
                            // ensure to initialize with an empty token if we had none
                            this._token = CancellationToken.None;
                        } else if (this._token instanceof MutableToken) {
                            // actually dispose
                            this._token.dispose();
                        }
                    }
                }
                exports1.CancellationTokenSource = CancellationTokenSource;
            /***/ },
            /***/ 4054: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_548051__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.createMessageConnection = exports1.ConnectionOptions = exports1.MessageStrategy = exports1.CancellationStrategy = exports1.CancellationSenderStrategy = exports1.CancellationReceiverStrategy = exports1.RequestCancellationReceiverStrategy = exports1.IdCancellationReceiverStrategy = exports1.ConnectionStrategy = exports1.ConnectionError = exports1.ConnectionErrors = exports1.LogTraceNotification = exports1.SetTraceNotification = exports1.TraceFormat = exports1.TraceValues = exports1.Trace = exports1.NullLogger = exports1.ProgressType = exports1.ProgressToken = void 0;
                const ral_1 = __nested_webpack_require_548051__(5091);
                const Is = __nested_webpack_require_548051__(6618);
                const messages_1 = __nested_webpack_require_548051__(7162);
                const linkedMap_1 = __nested_webpack_require_548051__(1109);
                const events_1 = __nested_webpack_require_548051__(2479);
                const cancellation_1 = __nested_webpack_require_548051__(6957);
                var CancelNotification;
                (function(CancelNotification) {
                    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
                })(CancelNotification || (CancelNotification = {}));
                var ProgressToken;
                (function(ProgressToken) {
                    function is(value) {
                        return typeof value === 'string' || typeof value === 'number';
                    }
                    ProgressToken.is = is;
                })(ProgressToken = exports1.ProgressToken || (exports1.ProgressToken = {}));
                var ProgressNotification;
                (function(ProgressNotification) {
                    ProgressNotification.type = new messages_1.NotificationType('$/progress');
                })(ProgressNotification || (ProgressNotification = {}));
                class ProgressType {
                    constructor(){}
                }
                exports1.ProgressType = ProgressType;
                var StarRequestHandler;
                (function(StarRequestHandler) {
                    function is(value) {
                        return Is.func(value);
                    }
                    StarRequestHandler.is = is;
                })(StarRequestHandler || (StarRequestHandler = {}));
                exports1.NullLogger = Object.freeze({
                    error: ()=>{},
                    warn: ()=>{},
                    info: ()=>{},
                    log: ()=>{}
                });
                var Trace;
                (function(Trace) {
                    Trace[Trace["Off"] = 0] = "Off";
                    Trace[Trace["Messages"] = 1] = "Messages";
                    Trace[Trace["Compact"] = 2] = "Compact";
                    Trace[Trace["Verbose"] = 3] = "Verbose";
                })(Trace = exports1.Trace || (exports1.Trace = {}));
                var TraceValues;
                (function(TraceValues) {
                    /**
     * Turn tracing off.
     */ TraceValues.Off = 'off';
                    /**
     * Trace messages only.
     */ TraceValues.Messages = 'messages';
                    /**
     * Compact message tracing.
     */ TraceValues.Compact = 'compact';
                    /**
     * Verbose message tracing.
     */ TraceValues.Verbose = 'verbose';
                })(TraceValues = exports1.TraceValues || (exports1.TraceValues = {}));
                (function(Trace) {
                    function fromString(value) {
                        if (!Is.string(value)) {
                            return Trace.Off;
                        }
                        value = value.toLowerCase();
                        switch(value){
                            case 'off':
                                return Trace.Off;
                            case 'messages':
                                return Trace.Messages;
                            case 'compact':
                                return Trace.Compact;
                            case 'verbose':
                                return Trace.Verbose;
                            default:
                                return Trace.Off;
                        }
                    }
                    Trace.fromString = fromString;
                    function toString(value) {
                        switch(value){
                            case Trace.Off:
                                return 'off';
                            case Trace.Messages:
                                return 'messages';
                            case Trace.Compact:
                                return 'compact';
                            case Trace.Verbose:
                                return 'verbose';
                            default:
                                return 'off';
                        }
                    }
                    Trace.toString = toString;
                })(Trace = exports1.Trace || (exports1.Trace = {}));
                var TraceFormat;
                (function(TraceFormat) {
                    TraceFormat["Text"] = "text";
                    TraceFormat["JSON"] = "json";
                })(TraceFormat = exports1.TraceFormat || (exports1.TraceFormat = {}));
                (function(TraceFormat) {
                    function fromString(value) {
                        if (!Is.string(value)) {
                            return TraceFormat.Text;
                        }
                        value = value.toLowerCase();
                        if (value === 'json') {
                            return TraceFormat.JSON;
                        } else {
                            return TraceFormat.Text;
                        }
                    }
                    TraceFormat.fromString = fromString;
                })(TraceFormat = exports1.TraceFormat || (exports1.TraceFormat = {}));
                var SetTraceNotification;
                (function(SetTraceNotification) {
                    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');
                })(SetTraceNotification = exports1.SetTraceNotification || (exports1.SetTraceNotification = {}));
                var LogTraceNotification;
                (function(LogTraceNotification) {
                    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');
                })(LogTraceNotification = exports1.LogTraceNotification || (exports1.LogTraceNotification = {}));
                var ConnectionErrors;
                (function(ConnectionErrors) {
                    /**
     * The connection is closed.
     */ ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
                    /**
     * The connection got disposed.
     */ ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
                    /**
     * The connection is already in listening mode.
     */ ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
                })(ConnectionErrors = exports1.ConnectionErrors || (exports1.ConnectionErrors = {}));
                class ConnectionError extends Error {
                    constructor(code, message){
                        super(message);
                        this.code = code;
                        Object.setPrototypeOf(this, ConnectionError.prototype);
                    }
                }
                exports1.ConnectionError = ConnectionError;
                var ConnectionStrategy;
                (function(ConnectionStrategy) {
                    function is(value) {
                        const candidate = value;
                        return candidate && Is.func(candidate.cancelUndispatched);
                    }
                    ConnectionStrategy.is = is;
                })(ConnectionStrategy = exports1.ConnectionStrategy || (exports1.ConnectionStrategy = {}));
                var IdCancellationReceiverStrategy;
                (function(IdCancellationReceiverStrategy) {
                    function is(value) {
                        const candidate = value;
                        return candidate && (candidate.kind === undefined || candidate.kind === 'id') && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
                    }
                    IdCancellationReceiverStrategy.is = is;
                })(IdCancellationReceiverStrategy = exports1.IdCancellationReceiverStrategy || (exports1.IdCancellationReceiverStrategy = {}));
                var RequestCancellationReceiverStrategy;
                (function(RequestCancellationReceiverStrategy) {
                    function is(value) {
                        const candidate = value;
                        return candidate && candidate.kind === 'request' && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
                    }
                    RequestCancellationReceiverStrategy.is = is;
                })(RequestCancellationReceiverStrategy = exports1.RequestCancellationReceiverStrategy || (exports1.RequestCancellationReceiverStrategy = {}));
                var CancellationReceiverStrategy;
                (function(CancellationReceiverStrategy) {
                    CancellationReceiverStrategy.Message = Object.freeze({
                        createCancellationTokenSource (_) {
                            return new cancellation_1.CancellationTokenSource();
                        }
                    });
                    function is(value) {
                        return IdCancellationReceiverStrategy.is(value) || RequestCancellationReceiverStrategy.is(value);
                    }
                    CancellationReceiverStrategy.is = is;
                })(CancellationReceiverStrategy = exports1.CancellationReceiverStrategy || (exports1.CancellationReceiverStrategy = {}));
                var CancellationSenderStrategy;
                (function(CancellationSenderStrategy) {
                    CancellationSenderStrategy.Message = Object.freeze({
                        sendCancellation (conn, id) {
                            return conn.sendNotification(CancelNotification.type, {
                                id
                            });
                        },
                        cleanup (_) {}
                    });
                    function is(value) {
                        const candidate = value;
                        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);
                    }
                    CancellationSenderStrategy.is = is;
                })(CancellationSenderStrategy = exports1.CancellationSenderStrategy || (exports1.CancellationSenderStrategy = {}));
                var CancellationStrategy;
                (function(CancellationStrategy) {
                    CancellationStrategy.Message = Object.freeze({
                        receiver: CancellationReceiverStrategy.Message,
                        sender: CancellationSenderStrategy.Message
                    });
                    function is(value) {
                        const candidate = value;
                        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
                    }
                    CancellationStrategy.is = is;
                })(CancellationStrategy = exports1.CancellationStrategy || (exports1.CancellationStrategy = {}));
                var MessageStrategy;
                (function(MessageStrategy) {
                    function is(value) {
                        const candidate = value;
                        return candidate && Is.func(candidate.handleMessage);
                    }
                    MessageStrategy.is = is;
                })(MessageStrategy = exports1.MessageStrategy || (exports1.MessageStrategy = {}));
                var ConnectionOptions;
                (function(ConnectionOptions) {
                    function is(value) {
                        const candidate = value;
                        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy) || MessageStrategy.is(candidate.messageStrategy));
                    }
                    ConnectionOptions.is = is;
                })(ConnectionOptions = exports1.ConnectionOptions || (exports1.ConnectionOptions = {}));
                var ConnectionState;
                (function(ConnectionState) {
                    ConnectionState[ConnectionState["New"] = 1] = "New";
                    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
                    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
                    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
                })(ConnectionState || (ConnectionState = {}));
                function createMessageConnection(messageReader, messageWriter, _logger, options) {
                    const logger = _logger !== undefined ? _logger : exports1.NullLogger;
                    let sequenceNumber = 0;
                    let notificationSequenceNumber = 0;
                    let unknownResponseSequenceNumber = 0;
                    const version = '2.0';
                    let starRequestHandler = undefined;
                    const requestHandlers = new Map();
                    let starNotificationHandler = undefined;
                    const notificationHandlers = new Map();
                    const progressHandlers = new Map();
                    let timer;
                    let messageQueue = new linkedMap_1.LinkedMap();
                    let responsePromises = new Map();
                    let knownCanceledRequests = new Set();
                    let requestTokens = new Map();
                    let trace = Trace.Off;
                    let traceFormat = TraceFormat.Text;
                    let tracer;
                    let state = ConnectionState.New;
                    const errorEmitter = new events_1.Emitter();
                    const closeEmitter = new events_1.Emitter();
                    const unhandledNotificationEmitter = new events_1.Emitter();
                    const unhandledProgressEmitter = new events_1.Emitter();
                    const disposeEmitter = new events_1.Emitter();
                    const cancellationStrategy = options && options.cancellationStrategy ? options.cancellationStrategy : CancellationStrategy.Message;
                    function createRequestQueueKey(id) {
                        if (id === null) {
                            throw new Error(`Can't send requests with id null since the response can't be correlated.`);
                        }
                        return 'req-' + id.toString();
                    }
                    function createResponseQueueKey(id) {
                        if (id === null) {
                            return 'res-unknown-' + (++unknownResponseSequenceNumber).toString();
                        } else {
                            return 'res-' + id.toString();
                        }
                    }
                    function createNotificationQueueKey() {
                        return 'not-' + (++notificationSequenceNumber).toString();
                    }
                    function addMessageToQueue(queue, message) {
                        if (messages_1.Message.isRequest(message)) {
                            queue.set(createRequestQueueKey(message.id), message);
                        } else if (messages_1.Message.isResponse(message)) {
                            queue.set(createResponseQueueKey(message.id), message);
                        } else {
                            queue.set(createNotificationQueueKey(), message);
                        }
                    }
                    function cancelUndispatched(_message) {
                        return undefined;
                    }
                    function isListening() {
                        return state === ConnectionState.Listening;
                    }
                    function isClosed() {
                        return state === ConnectionState.Closed;
                    }
                    function isDisposed() {
                        return state === ConnectionState.Disposed;
                    }
                    function closeHandler() {
                        if (state === ConnectionState.New || state === ConnectionState.Listening) {
                            state = ConnectionState.Closed;
                            closeEmitter.fire(undefined);
                        }
                    // If the connection is disposed don't sent close events.
                    }
                    function readErrorHandler(error) {
                        errorEmitter.fire([
                            error,
                            undefined,
                            undefined
                        ]);
                    }
                    function writeErrorHandler(data) {
                        errorEmitter.fire(data);
                    }
                    messageReader.onClose(closeHandler);
                    messageReader.onError(readErrorHandler);
                    messageWriter.onClose(closeHandler);
                    messageWriter.onError(writeErrorHandler);
                    function triggerMessageQueue() {
                        if (timer || messageQueue.size === 0) {
                            return;
                        }
                        timer = (0, ral_1.default)().timer.setImmediate(()=>{
                            timer = undefined;
                            processMessageQueue();
                        });
                    }
                    function handleMessage(message) {
                        if (messages_1.Message.isRequest(message)) {
                            handleRequest(message);
                        } else if (messages_1.Message.isNotification(message)) {
                            handleNotification(message);
                        } else if (messages_1.Message.isResponse(message)) {
                            handleResponse(message);
                        } else {
                            handleInvalidMessage(message);
                        }
                    }
                    function processMessageQueue() {
                        if (messageQueue.size === 0) {
                            return;
                        }
                        const message = messageQueue.shift();
                        try {
                            var _options;
                            const messageStrategy = (_options = options) === null || _options === void 0 ? void 0 : _options.messageStrategy;
                            if (MessageStrategy.is(messageStrategy)) {
                                messageStrategy.handleMessage(message, handleMessage);
                            } else {
                                handleMessage(message);
                            }
                        } finally{
                            triggerMessageQueue();
                        }
                    }
                    const callback = (message)=>{
                        try {
                            // We have received a cancellation message. Check if the message is still in the queue
                            // and cancel it if allowed to do so.
                            if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
                                const cancelId = message.params.id;
                                const key = createRequestQueueKey(cancelId);
                                const toCancel = messageQueue.get(key);
                                if (messages_1.Message.isRequest(toCancel)) {
                                    var _options;
                                    const strategy = (_options = options) === null || _options === void 0 ? void 0 : _options.connectionStrategy;
                                    const response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                                    if (response && (response.error !== undefined || response.result !== undefined)) {
                                        messageQueue.delete(key);
                                        requestTokens.delete(cancelId);
                                        response.id = toCancel.id;
                                        traceSendingResponse(response, message.method, Date.now());
                                        messageWriter.write(response).catch(()=>logger.error(`Sending response for canceled message failed.`));
                                        return;
                                    }
                                }
                                const cancellationToken = requestTokens.get(cancelId);
                                // The request is already running. Cancel the token
                                if (cancellationToken !== undefined) {
                                    cancellationToken.cancel();
                                    traceReceivedNotification(message);
                                    return;
                                } else {
                                    // Remember the cancel but still queue the message to
                                    // clean up state in process message.
                                    knownCanceledRequests.add(cancelId);
                                }
                            }
                            addMessageToQueue(messageQueue, message);
                        } finally{
                            triggerMessageQueue();
                        }
                    };
                    function handleRequest(requestMessage) {
                        if (isDisposed()) {
                            // we return here silently since we fired an event when the
                            // connection got disposed.
                            return;
                        }
                        function reply(resultOrError, method, startTime) {
                            const message = {
                                jsonrpc: version,
                                id: requestMessage.id
                            };
                            if (resultOrError instanceof messages_1.ResponseError) {
                                message.error = resultOrError.toJson();
                            } else {
                                message.result = resultOrError === undefined ? null : resultOrError;
                            }
                            traceSendingResponse(message, method, startTime);
                            messageWriter.write(message).catch(()=>logger.error(`Sending response failed.`));
                        }
                        function replyError(error, method, startTime) {
                            const message = {
                                jsonrpc: version,
                                id: requestMessage.id,
                                error: error.toJson()
                            };
                            traceSendingResponse(message, method, startTime);
                            messageWriter.write(message).catch(()=>logger.error(`Sending response failed.`));
                        }
                        function replySuccess(result, method, startTime) {
                            // The JSON RPC defines that a response must either have a result or an error
                            // So we can't treat undefined as a valid response result.
                            if (result === undefined) {
                                result = null;
                            }
                            const message = {
                                jsonrpc: version,
                                id: requestMessage.id,
                                result: result
                            };
                            traceSendingResponse(message, method, startTime);
                            messageWriter.write(message).catch(()=>logger.error(`Sending response failed.`));
                        }
                        traceReceivedRequest(requestMessage);
                        const element = requestHandlers.get(requestMessage.method);
                        let type;
                        let requestHandler;
                        if (element) {
                            type = element.type;
                            requestHandler = element.handler;
                        }
                        const startTime = Date.now();
                        if (requestHandler || starRequestHandler) {
                            var _requestMessage_id;
                            const tokenKey = (_requestMessage_id = requestMessage.id) !== null && _requestMessage_id !== void 0 ? _requestMessage_id : String(Date.now()); //
                            const cancellationSource = IdCancellationReceiverStrategy.is(cancellationStrategy.receiver) ? cancellationStrategy.receiver.createCancellationTokenSource(tokenKey) : cancellationStrategy.receiver.createCancellationTokenSource(requestMessage);
                            if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
                                cancellationSource.cancel();
                            }
                            if (requestMessage.id !== null) {
                                requestTokens.set(tokenKey, cancellationSource);
                            }
                            try {
                                let handlerResult;
                                if (requestHandler) {
                                    if (requestMessage.params === undefined) {
                                        if (type !== undefined && type.numberOfParams !== 0) {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);
                                            return;
                                        }
                                        handlerResult = requestHandler(cancellationSource.token);
                                    } else if (Array.isArray(requestMessage.params)) {
                                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                                            return;
                                        }
                                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                                    } else {
                                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                                            return;
                                        }
                                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                                    }
                                } else if (starRequestHandler) {
                                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                                }
                                const promise = handlerResult;
                                if (!handlerResult) {
                                    requestTokens.delete(tokenKey);
                                    replySuccess(handlerResult, requestMessage.method, startTime);
                                } else if (promise.then) {
                                    promise.then((resultOrError)=>{
                                        requestTokens.delete(tokenKey);
                                        reply(resultOrError, requestMessage.method, startTime);
                                    }, (error)=>{
                                        requestTokens.delete(tokenKey);
                                        if (error instanceof messages_1.ResponseError) {
                                            replyError(error, requestMessage.method, startTime);
                                        } else if (error && Is.string(error.message)) {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                                        } else {
                                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                                        }
                                    });
                                } else {
                                    requestTokens.delete(tokenKey);
                                    reply(handlerResult, requestMessage.method, startTime);
                                }
                            } catch (error) {
                                requestTokens.delete(tokenKey);
                                if (error instanceof messages_1.ResponseError) {
                                    reply(error, requestMessage.method, startTime);
                                } else if (error && Is.string(error.message)) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                                } else {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                                }
                            }
                        } else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
                        }
                    }
                    function handleResponse(responseMessage) {
                        if (isDisposed()) {
                            // See handle request.
                            return;
                        }
                        if (responseMessage.id === null) {
                            if (responseMessage.error) {
                                logger.error(`Received response message without id: Error is: \n${JSON.stringify(responseMessage.error, undefined, 4)}`);
                            } else {
                                logger.error(`Received response message without id. No further error information provided.`);
                            }
                        } else {
                            const key = responseMessage.id;
                            const responsePromise = responsePromises.get(key);
                            traceReceivedResponse(responseMessage, responsePromise);
                            if (responsePromise !== undefined) {
                                responsePromises.delete(key);
                                try {
                                    if (responseMessage.error) {
                                        const error = responseMessage.error;
                                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                                    } else if (responseMessage.result !== undefined) {
                                        responsePromise.resolve(responseMessage.result);
                                    } else {
                                        throw new Error('Should never happen.');
                                    }
                                } catch (error) {
                                    if (error.message) {
                                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                                    } else {
                                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                                    }
                                }
                            }
                        }
                    }
                    function handleNotification(message) {
                        if (isDisposed()) {
                            // See handle request.
                            return;
                        }
                        let type = undefined;
                        let notificationHandler;
                        if (message.method === CancelNotification.type.method) {
                            const cancelId = message.params.id;
                            knownCanceledRequests.delete(cancelId);
                            traceReceivedNotification(message);
                            return;
                        } else {
                            const element = notificationHandlers.get(message.method);
                            if (element) {
                                notificationHandler = element.handler;
                                type = element.type;
                            }
                        }
                        if (notificationHandler || starNotificationHandler) {
                            try {
                                traceReceivedNotification(message);
                                if (notificationHandler) {
                                    if (message.params === undefined) {
                                        if (type !== undefined) {
                                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                                            }
                                        }
                                        notificationHandler();
                                    } else if (Array.isArray(message.params)) {
                                        // There are JSON-RPC libraries that send progress message as positional params although
                                        // specified as named. So convert them if this is the case.
                                        const params = message.params;
                                        if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                                            notificationHandler({
                                                token: params[0],
                                                value: params[1]
                                            });
                                        } else {
                                            if (type !== undefined) {
                                                if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                                    logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                                                }
                                                if (type.numberOfParams !== message.params.length) {
                                                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                                                }
                                            }
                                            notificationHandler(...params);
                                        }
                                    } else {
                                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                                        }
                                        notificationHandler(message.params);
                                    }
                                } else if (starNotificationHandler) {
                                    starNotificationHandler(message.method, message.params);
                                }
                            } catch (error) {
                                if (error.message) {
                                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                                } else {
                                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                                }
                            }
                        } else {
                            unhandledNotificationEmitter.fire(message);
                        }
                    }
                    function handleInvalidMessage(message) {
                        if (!message) {
                            logger.error('Received empty message.');
                            return;
                        }
                        logger.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(message, null, 4)}`);
                        // Test whether we find an id to reject the promise
                        const responseMessage = message;
                        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
                            const key = responseMessage.id;
                            const responseHandler = responsePromises.get(key);
                            if (responseHandler) {
                                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
                            }
                        }
                    }
                    function stringifyTrace(params) {
                        if (params === undefined || params === null) {
                            return undefined;
                        }
                        switch(trace){
                            case Trace.Verbose:
                                return JSON.stringify(params, null, 4);
                            case Trace.Compact:
                                return JSON.stringify(params);
                            default:
                                return undefined;
                        }
                    }
                    function traceSendingRequest(message) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                                data = `Params: ${stringifyTrace(message.params)}\n\n`;
                            }
                            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
                        } else {
                            logLSPMessage('send-request', message);
                        }
                    }
                    function traceSendingNotification(message) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if (trace === Trace.Verbose || trace === Trace.Compact) {
                                if (message.params) {
                                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                                } else {
                                    data = 'No parameters provided.\n\n';
                                }
                            }
                            tracer.log(`Sending notification '${message.method}'.`, data);
                        } else {
                            logLSPMessage('send-notification', message);
                        }
                    }
                    function traceSendingResponse(message, method, startTime) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if (trace === Trace.Verbose || trace === Trace.Compact) {
                                if (message.error && message.error.data) {
                                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                                } else {
                                    if (message.result) {
                                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                                    } else if (message.error === undefined) {
                                        data = 'No result returned.\n\n';
                                    }
                                }
                            }
                            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
                        } else {
                            logLSPMessage('send-response', message);
                        }
                    }
                    function traceReceivedRequest(message) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                                data = `Params: ${stringifyTrace(message.params)}\n\n`;
                            }
                            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
                        } else {
                            logLSPMessage('receive-request', message);
                        }
                    }
                    function traceReceivedNotification(message) {
                        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if (trace === Trace.Verbose || trace === Trace.Compact) {
                                if (message.params) {
                                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                                } else {
                                    data = 'No parameters provided.\n\n';
                                }
                            }
                            tracer.log(`Received notification '${message.method}'.`, data);
                        } else {
                            logLSPMessage('receive-notification', message);
                        }
                    }
                    function traceReceivedResponse(message, responsePromise) {
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        if (traceFormat === TraceFormat.Text) {
                            let data = undefined;
                            if (trace === Trace.Verbose || trace === Trace.Compact) {
                                if (message.error && message.error.data) {
                                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                                } else {
                                    if (message.result) {
                                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                                    } else if (message.error === undefined) {
                                        data = 'No result returned.\n\n';
                                    }
                                }
                            }
                            if (responsePromise) {
                                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';
                                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
                            } else {
                                tracer.log(`Received response ${message.id} without active response promise.`, data);
                            }
                        } else {
                            logLSPMessage('receive-response', message);
                        }
                    }
                    function logLSPMessage(type, message) {
                        if (!tracer || trace === Trace.Off) {
                            return;
                        }
                        const lspMessage = {
                            isLSPMessage: true,
                            type,
                            message,
                            timestamp: Date.now()
                        };
                        tracer.log(lspMessage);
                    }
                    function throwIfClosedOrDisposed() {
                        if (isClosed()) {
                            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
                        }
                        if (isDisposed()) {
                            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
                        }
                    }
                    function throwIfListening() {
                        if (isListening()) {
                            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
                        }
                    }
                    function throwIfNotListening() {
                        if (!isListening()) {
                            throw new Error('Call listen() first.');
                        }
                    }
                    function undefinedToNull(param) {
                        if (param === undefined) {
                            return null;
                        } else {
                            return param;
                        }
                    }
                    function nullToUndefined(param) {
                        if (param === null) {
                            return undefined;
                        } else {
                            return param;
                        }
                    }
                    function isNamedParam(param) {
                        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';
                    }
                    function computeSingleParam(parameterStructures, param) {
                        switch(parameterStructures){
                            case messages_1.ParameterStructures.auto:
                                if (isNamedParam(param)) {
                                    return nullToUndefined(param);
                                } else {
                                    return [
                                        undefinedToNull(param)
                                    ];
                                }
                            case messages_1.ParameterStructures.byName:
                                if (!isNamedParam(param)) {
                                    throw new Error(`Received parameters by name but param is not an object literal.`);
                                }
                                return nullToUndefined(param);
                            case messages_1.ParameterStructures.byPosition:
                                return [
                                    undefinedToNull(param)
                                ];
                            default:
                                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
                        }
                    }
                    function computeMessageParams(type, params) {
                        let result;
                        const numberOfParams = type.numberOfParams;
                        switch(numberOfParams){
                            case 0:
                                result = undefined;
                                break;
                            case 1:
                                result = computeSingleParam(type.parameterStructures, params[0]);
                                break;
                            default:
                                result = [];
                                for(let i = 0; i < params.length && i < numberOfParams; i++){
                                    result.push(undefinedToNull(params[i]));
                                }
                                if (params.length < numberOfParams) {
                                    for(let i = params.length; i < numberOfParams; i++){
                                        result.push(null);
                                    }
                                }
                                break;
                        }
                        return result;
                    }
                    const connection = {
                        sendNotification: (type, ...args)=>{
                            throwIfClosedOrDisposed();
                            let method;
                            let messageParams;
                            if (Is.string(type)) {
                                method = type;
                                const first = args[0];
                                let paramStart = 0;
                                let parameterStructures = messages_1.ParameterStructures.auto;
                                if (messages_1.ParameterStructures.is(first)) {
                                    paramStart = 1;
                                    parameterStructures = first;
                                }
                                let paramEnd = args.length;
                                const numberOfParams = paramEnd - paramStart;
                                switch(numberOfParams){
                                    case 0:
                                        messageParams = undefined;
                                        break;
                                    case 1:
                                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                                        break;
                                    default:
                                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                                        }
                                        messageParams = args.slice(paramStart, paramEnd).map((value)=>undefinedToNull(value));
                                        break;
                                }
                            } else {
                                const params = args;
                                method = type.method;
                                messageParams = computeMessageParams(type, params);
                            }
                            const notificationMessage = {
                                jsonrpc: version,
                                method: method,
                                params: messageParams
                            };
                            traceSendingNotification(notificationMessage);
                            return messageWriter.write(notificationMessage).catch((error)=>{
                                logger.error(`Sending notification failed.`);
                                throw error;
                            });
                        },
                        onNotification: (type, handler)=>{
                            throwIfClosedOrDisposed();
                            let method;
                            if (Is.func(type)) {
                                starNotificationHandler = type;
                            } else if (handler) {
                                if (Is.string(type)) {
                                    method = type;
                                    notificationHandlers.set(type, {
                                        type: undefined,
                                        handler
                                    });
                                } else {
                                    method = type.method;
                                    notificationHandlers.set(type.method, {
                                        type,
                                        handler
                                    });
                                }
                            }
                            return {
                                dispose: ()=>{
                                    if (method !== undefined) {
                                        notificationHandlers.delete(method);
                                    } else {
                                        starNotificationHandler = undefined;
                                    }
                                }
                            };
                        },
                        onProgress: (_type, token, handler)=>{
                            if (progressHandlers.has(token)) {
                                throw new Error(`Progress handler for token ${token} already registered`);
                            }
                            progressHandlers.set(token, handler);
                            return {
                                dispose: ()=>{
                                    progressHandlers.delete(token);
                                }
                            };
                        },
                        sendProgress: (_type, token, value)=>{
                            // This should not await but simple return to ensure that we don't have another
                            // async scheduling. Otherwise one send could overtake another send.
                            return connection.sendNotification(ProgressNotification.type, {
                                token,
                                value
                            });
                        },
                        onUnhandledProgress: unhandledProgressEmitter.event,
                        sendRequest: (type, ...args)=>{
                            throwIfClosedOrDisposed();
                            throwIfNotListening();
                            let method;
                            let messageParams;
                            let token = undefined;
                            if (Is.string(type)) {
                                method = type;
                                const first = args[0];
                                const last = args[args.length - 1];
                                let paramStart = 0;
                                let parameterStructures = messages_1.ParameterStructures.auto;
                                if (messages_1.ParameterStructures.is(first)) {
                                    paramStart = 1;
                                    parameterStructures = first;
                                }
                                let paramEnd = args.length;
                                if (cancellation_1.CancellationToken.is(last)) {
                                    paramEnd = paramEnd - 1;
                                    token = last;
                                }
                                const numberOfParams = paramEnd - paramStart;
                                switch(numberOfParams){
                                    case 0:
                                        messageParams = undefined;
                                        break;
                                    case 1:
                                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                                        break;
                                    default:
                                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                                        }
                                        messageParams = args.slice(paramStart, paramEnd).map((value)=>undefinedToNull(value));
                                        break;
                                }
                            } else {
                                const params = args;
                                method = type.method;
                                messageParams = computeMessageParams(type, params);
                                const numberOfParams = type.numberOfParams;
                                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
                            }
                            const id = sequenceNumber++;
                            let disposable;
                            if (token) {
                                disposable = token.onCancellationRequested(()=>{
                                    const p = cancellationStrategy.sender.sendCancellation(connection, id);
                                    if (p === undefined) {
                                        logger.log(`Received no promise from cancellation strategy when cancelling id ${id}`);
                                        return Promise.resolve();
                                    } else {
                                        return p.catch(()=>{
                                            logger.log(`Sending cancellation messages for id ${id} failed`);
                                        });
                                    }
                                });
                            }
                            const requestMessage = {
                                jsonrpc: version,
                                id: id,
                                method: method,
                                params: messageParams
                            };
                            traceSendingRequest(requestMessage);
                            if (typeof cancellationStrategy.sender.enableCancellation === 'function') {
                                cancellationStrategy.sender.enableCancellation(requestMessage);
                            }
                            return new Promise(async (resolve, reject)=>{
                                const resolveWithCleanup = (r)=>{
                                    var _disposable;
                                    resolve(r);
                                    cancellationStrategy.sender.cleanup(id);
                                    (_disposable = disposable) === null || _disposable === void 0 ? void 0 : _disposable.dispose();
                                };
                                const rejectWithCleanup = (r)=>{
                                    var _disposable;
                                    reject(r);
                                    cancellationStrategy.sender.cleanup(id);
                                    (_disposable = disposable) === null || _disposable === void 0 ? void 0 : _disposable.dispose();
                                };
                                const responsePromise = {
                                    method: method,
                                    timerStart: Date.now(),
                                    resolve: resolveWithCleanup,
                                    reject: rejectWithCleanup
                                };
                                try {
                                    await messageWriter.write(requestMessage);
                                    responsePromises.set(id, responsePromise);
                                } catch (error) {
                                    logger.error(`Sending request failed.`);
                                    // Writing the message failed. So we need to reject the promise.
                                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, error.message ? error.message : 'Unknown reason'));
                                    throw error;
                                }
                            });
                        },
                        onRequest: (type, handler)=>{
                            throwIfClosedOrDisposed();
                            let method = null;
                            if (StarRequestHandler.is(type)) {
                                method = undefined;
                                starRequestHandler = type;
                            } else if (Is.string(type)) {
                                method = null;
                                if (handler !== undefined) {
                                    method = type;
                                    requestHandlers.set(type, {
                                        handler: handler,
                                        type: undefined
                                    });
                                }
                            } else {
                                if (handler !== undefined) {
                                    method = type.method;
                                    requestHandlers.set(type.method, {
                                        type,
                                        handler
                                    });
                                }
                            }
                            return {
                                dispose: ()=>{
                                    if (method === null) {
                                        return;
                                    }
                                    if (method !== undefined) {
                                        requestHandlers.delete(method);
                                    } else {
                                        starRequestHandler = undefined;
                                    }
                                }
                            };
                        },
                        hasPendingResponse: ()=>{
                            return responsePromises.size > 0;
                        },
                        trace: async (_value, _tracer, sendNotificationOrTraceOptions)=>{
                            let _sendNotification = false;
                            let _traceFormat = TraceFormat.Text;
                            if (sendNotificationOrTraceOptions !== undefined) {
                                if (Is.boolean(sendNotificationOrTraceOptions)) {
                                    _sendNotification = sendNotificationOrTraceOptions;
                                } else {
                                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                                }
                            }
                            trace = _value;
                            traceFormat = _traceFormat;
                            if (trace === Trace.Off) {
                                tracer = undefined;
                            } else {
                                tracer = _tracer;
                            }
                            if (_sendNotification && !isClosed() && !isDisposed()) {
                                await connection.sendNotification(SetTraceNotification.type, {
                                    value: Trace.toString(_value)
                                });
                            }
                        },
                        onError: errorEmitter.event,
                        onClose: closeEmitter.event,
                        onUnhandledNotification: unhandledNotificationEmitter.event,
                        onDispose: disposeEmitter.event,
                        end: ()=>{
                            messageWriter.end();
                        },
                        dispose: ()=>{
                            if (isDisposed()) {
                                return;
                            }
                            state = ConnectionState.Disposed;
                            disposeEmitter.fire(undefined);
                            const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, 'Pending response rejected since connection got disposed');
                            for (const promise of responsePromises.values()){
                                promise.reject(error);
                            }
                            responsePromises = new Map();
                            requestTokens = new Map();
                            knownCanceledRequests = new Set();
                            messageQueue = new linkedMap_1.LinkedMap();
                            // Test for backwards compatibility
                            if (Is.func(messageWriter.dispose)) {
                                messageWriter.dispose();
                            }
                            if (Is.func(messageReader.dispose)) {
                                messageReader.dispose();
                            }
                        },
                        listen: ()=>{
                            throwIfClosedOrDisposed();
                            throwIfListening();
                            state = ConnectionState.Listening;
                            messageReader.listen(callback);
                        },
                        inspect: ()=>{
                            // eslint-disable-next-line no-console
                            (0, ral_1.default)().console.log('inspect');
                        }
                    };
                    connection.onNotification(LogTraceNotification.type, (params)=>{
                        if (trace === Trace.Off || !tracer) {
                            return;
                        }
                        const verbose = trace === Trace.Verbose || trace === Trace.Compact;
                        tracer.log(params.message, verbose ? params.verbose : undefined);
                    });
                    connection.onNotification(ProgressNotification.type, (params)=>{
                        const handler = progressHandlers.get(params.token);
                        if (handler) {
                            handler(params.value);
                        } else {
                            unhandledProgressEmitter.fire(params);
                        }
                    });
                    return connection;
                }
                exports1.createMessageConnection = createMessageConnection;
            /***/ },
            /***/ 8844: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.Disposable = void 0;
                var Disposable;
                (function(Disposable) {
                    function create(func) {
                        return {
                            dispose: func
                        };
                    }
                    Disposable.create = create;
                })(Disposable = exports1.Disposable || (exports1.Disposable = {}));
            /***/ },
            /***/ 2479: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_619143__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.Emitter = exports1.Event = void 0;
                const ral_1 = __nested_webpack_require_619143__(5091);
                var Event;
                (function(Event) {
                    const _disposable = {
                        dispose () {}
                    };
                    Event.None = function() {
                        return _disposable;
                    };
                })(Event = exports1.Event || (exports1.Event = {}));
                class CallbackList {
                    add(callback, context = null, bucket) {
                        if (!this._callbacks) {
                            this._callbacks = [];
                            this._contexts = [];
                        }
                        this._callbacks.push(callback);
                        this._contexts.push(context);
                        if (Array.isArray(bucket)) {
                            bucket.push({
                                dispose: ()=>this.remove(callback, context)
                            });
                        }
                    }
                    remove(callback, context = null) {
                        if (!this._callbacks) {
                            return;
                        }
                        let foundCallbackWithDifferentContext = false;
                        for(let i = 0, len = this._callbacks.length; i < len; i++){
                            if (this._callbacks[i] === callback) {
                                if (this._contexts[i] === context) {
                                    // callback & context match => remove it
                                    this._callbacks.splice(i, 1);
                                    this._contexts.splice(i, 1);
                                    return;
                                } else {
                                    foundCallbackWithDifferentContext = true;
                                }
                            }
                        }
                        if (foundCallbackWithDifferentContext) {
                            throw new Error('When adding a listener with a context, you should remove it with the same context');
                        }
                    }
                    invoke(...args) {
                        if (!this._callbacks) {
                            return [];
                        }
                        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
                        for(let i = 0, len = callbacks.length; i < len; i++){
                            try {
                                ret.push(callbacks[i].apply(contexts[i], args));
                            } catch (e) {
                                // eslint-disable-next-line no-console
                                (0, ral_1.default)().console.error(e);
                            }
                        }
                        return ret;
                    }
                    isEmpty() {
                        return !this._callbacks || this._callbacks.length === 0;
                    }
                    dispose() {
                        this._callbacks = undefined;
                        this._contexts = undefined;
                    }
                }
                class Emitter {
                    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */ get event() {
                        if (!this._event) {
                            this._event = (listener, thisArgs, disposables)=>{
                                if (!this._callbacks) {
                                    this._callbacks = new CallbackList();
                                }
                                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                                    this._options.onFirstListenerAdd(this);
                                }
                                this._callbacks.add(listener, thisArgs);
                                const result = {
                                    dispose: ()=>{
                                        if (!this._callbacks) {
                                            // disposable is disposed after emitter is disposed.
                                            return;
                                        }
                                        this._callbacks.remove(listener, thisArgs);
                                        result.dispose = Emitter._noop;
                                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                                            this._options.onLastListenerRemove(this);
                                        }
                                    }
                                };
                                if (Array.isArray(disposables)) {
                                    disposables.push(result);
                                }
                                return result;
                            };
                        }
                        return this._event;
                    }
                    /**
     * To be kept private to fire an event to
     * subscribers
     */ fire(event) {
                        if (this._callbacks) {
                            this._callbacks.invoke.call(this._callbacks, event);
                        }
                    }
                    dispose() {
                        if (this._callbacks) {
                            this._callbacks.dispose();
                            this._callbacks = undefined;
                        }
                    }
                    constructor(_options){
                        this._options = _options;
                    }
                }
                exports1.Emitter = Emitter;
                Emitter._noop = function() {};
            /***/ },
            /***/ 6618: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.stringArray = exports1.array = exports1.func = exports1.error = exports1.number = exports1.string = exports1.boolean = void 0;
                function boolean(value) {
                    return value === true || value === false;
                }
                exports1.boolean = boolean;
                function string(value) {
                    return typeof value === 'string' || value instanceof String;
                }
                exports1.string = string;
                function number(value) {
                    return typeof value === 'number' || value instanceof Number;
                }
                exports1.number = number;
                function error(value) {
                    return value instanceof Error;
                }
                exports1.error = error;
                function func(value) {
                    return typeof value === 'function';
                }
                exports1.func = func;
                function array(value) {
                    return Array.isArray(value);
                }
                exports1.array = array;
                function stringArray(value) {
                    return array(value) && value.every((elem)=>string(elem));
                }
                exports1.stringArray = stringArray;
            /***/ },
            /***/ 1109: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ var _a;
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.LRUCache = exports1.LinkedMap = exports1.Touch = void 0;
                var Touch;
                (function(Touch) {
                    Touch.None = 0;
                    Touch.First = 1;
                    Touch.AsOld = Touch.First;
                    Touch.Last = 2;
                    Touch.AsNew = Touch.Last;
                })(Touch = exports1.Touch || (exports1.Touch = {}));
                class LinkedMap {
                    clear() {
                        this._map.clear();
                        this._head = undefined;
                        this._tail = undefined;
                        this._size = 0;
                        this._state++;
                    }
                    isEmpty() {
                        return !this._head && !this._tail;
                    }
                    get size() {
                        return this._size;
                    }
                    get first() {
                        var _this__head;
                        return (_this__head = this._head) === null || _this__head === void 0 ? void 0 : _this__head.value;
                    }
                    get last() {
                        var _this__tail;
                        return (_this__tail = this._tail) === null || _this__tail === void 0 ? void 0 : _this__tail.value;
                    }
                    has(key) {
                        return this._map.has(key);
                    }
                    get(key, touch = Touch.None) {
                        const item = this._map.get(key);
                        if (!item) {
                            return undefined;
                        }
                        if (touch !== Touch.None) {
                            this.touch(item, touch);
                        }
                        return item.value;
                    }
                    set(key, value, touch = Touch.None) {
                        let item = this._map.get(key);
                        if (item) {
                            item.value = value;
                            if (touch !== Touch.None) {
                                this.touch(item, touch);
                            }
                        } else {
                            item = {
                                key,
                                value,
                                next: undefined,
                                previous: undefined
                            };
                            switch(touch){
                                case Touch.None:
                                    this.addItemLast(item);
                                    break;
                                case Touch.First:
                                    this.addItemFirst(item);
                                    break;
                                case Touch.Last:
                                    this.addItemLast(item);
                                    break;
                                default:
                                    this.addItemLast(item);
                                    break;
                            }
                            this._map.set(key, item);
                            this._size++;
                        }
                        return this;
                    }
                    delete(key) {
                        return !!this.remove(key);
                    }
                    remove(key) {
                        const item = this._map.get(key);
                        if (!item) {
                            return undefined;
                        }
                        this._map.delete(key);
                        this.removeItem(item);
                        this._size--;
                        return item.value;
                    }
                    shift() {
                        if (!this._head && !this._tail) {
                            return undefined;
                        }
                        if (!this._head || !this._tail) {
                            throw new Error('Invalid list');
                        }
                        const item = this._head;
                        this._map.delete(item.key);
                        this.removeItem(item);
                        this._size--;
                        return item.value;
                    }
                    forEach(callbackfn, thisArg) {
                        const state = this._state;
                        let current = this._head;
                        while(current){
                            if (thisArg) {
                                callbackfn.bind(thisArg)(current.value, current.key, this);
                            } else {
                                callbackfn(current.value, current.key, this);
                            }
                            if (this._state !== state) {
                                throw new Error(`LinkedMap got modified during iteration.`);
                            }
                            current = current.next;
                        }
                    }
                    keys() {
                        const state = this._state;
                        let current = this._head;
                        const iterator = {
                            [Symbol.iterator]: ()=>{
                                return iterator;
                            },
                            next: ()=>{
                                if (this._state !== state) {
                                    throw new Error(`LinkedMap got modified during iteration.`);
                                }
                                if (current) {
                                    const result = {
                                        value: current.key,
                                        done: false
                                    };
                                    current = current.next;
                                    return result;
                                } else {
                                    return {
                                        value: undefined,
                                        done: true
                                    };
                                }
                            }
                        };
                        return iterator;
                    }
                    values() {
                        const state = this._state;
                        let current = this._head;
                        const iterator = {
                            [Symbol.iterator]: ()=>{
                                return iterator;
                            },
                            next: ()=>{
                                if (this._state !== state) {
                                    throw new Error(`LinkedMap got modified during iteration.`);
                                }
                                if (current) {
                                    const result = {
                                        value: current.value,
                                        done: false
                                    };
                                    current = current.next;
                                    return result;
                                } else {
                                    return {
                                        value: undefined,
                                        done: true
                                    };
                                }
                            }
                        };
                        return iterator;
                    }
                    entries() {
                        const state = this._state;
                        let current = this._head;
                        const iterator = {
                            [Symbol.iterator]: ()=>{
                                return iterator;
                            },
                            next: ()=>{
                                if (this._state !== state) {
                                    throw new Error(`LinkedMap got modified during iteration.`);
                                }
                                if (current) {
                                    const result = {
                                        value: [
                                            current.key,
                                            current.value
                                        ],
                                        done: false
                                    };
                                    current = current.next;
                                    return result;
                                } else {
                                    return {
                                        value: undefined,
                                        done: true
                                    };
                                }
                            }
                        };
                        return iterator;
                    }
                    [(_a = Symbol.toStringTag, Symbol.iterator)]() {
                        return this.entries();
                    }
                    trimOld(newSize) {
                        if (newSize >= this.size) {
                            return;
                        }
                        if (newSize === 0) {
                            this.clear();
                            return;
                        }
                        let current = this._head;
                        let currentSize = this.size;
                        while(current && currentSize > newSize){
                            this._map.delete(current.key);
                            current = current.next;
                            currentSize--;
                        }
                        this._head = current;
                        this._size = currentSize;
                        if (current) {
                            current.previous = undefined;
                        }
                        this._state++;
                    }
                    addItemFirst(item) {
                        // First time Insert
                        if (!this._head && !this._tail) {
                            this._tail = item;
                        } else if (!this._head) {
                            throw new Error('Invalid list');
                        } else {
                            item.next = this._head;
                            this._head.previous = item;
                        }
                        this._head = item;
                        this._state++;
                    }
                    addItemLast(item) {
                        // First time Insert
                        if (!this._head && !this._tail) {
                            this._head = item;
                        } else if (!this._tail) {
                            throw new Error('Invalid list');
                        } else {
                            item.previous = this._tail;
                            this._tail.next = item;
                        }
                        this._tail = item;
                        this._state++;
                    }
                    removeItem(item) {
                        if (item === this._head && item === this._tail) {
                            this._head = undefined;
                            this._tail = undefined;
                        } else if (item === this._head) {
                            // This can only happened if size === 1 which is handle
                            // by the case above.
                            if (!item.next) {
                                throw new Error('Invalid list');
                            }
                            item.next.previous = undefined;
                            this._head = item.next;
                        } else if (item === this._tail) {
                            // This can only happened if size === 1 which is handle
                            // by the case above.
                            if (!item.previous) {
                                throw new Error('Invalid list');
                            }
                            item.previous.next = undefined;
                            this._tail = item.previous;
                        } else {
                            const next = item.next;
                            const previous = item.previous;
                            if (!next || !previous) {
                                throw new Error('Invalid list');
                            }
                            next.previous = previous;
                            previous.next = next;
                        }
                        item.next = undefined;
                        item.previous = undefined;
                        this._state++;
                    }
                    touch(item, touch) {
                        if (!this._head || !this._tail) {
                            throw new Error('Invalid list');
                        }
                        if (touch !== Touch.First && touch !== Touch.Last) {
                            return;
                        }
                        if (touch === Touch.First) {
                            if (item === this._head) {
                                return;
                            }
                            const next = item.next;
                            const previous = item.previous;
                            // Unlink the item
                            if (item === this._tail) {
                                // previous must be defined since item was not head but is tail
                                // So there are more than on item in the map
                                previous.next = undefined;
                                this._tail = previous;
                            } else {
                                // Both next and previous are not undefined since item was neither head nor tail.
                                next.previous = previous;
                                previous.next = next;
                            }
                            // Insert the node at head
                            item.previous = undefined;
                            item.next = this._head;
                            this._head.previous = item;
                            this._head = item;
                            this._state++;
                        } else if (touch === Touch.Last) {
                            if (item === this._tail) {
                                return;
                            }
                            const next = item.next;
                            const previous = item.previous;
                            // Unlink the item.
                            if (item === this._head) {
                                // next must be defined since item was not tail but is head
                                // So there are more than on item in the map
                                next.previous = undefined;
                                this._head = next;
                            } else {
                                // Both next and previous are not undefined since item was neither head nor tail.
                                next.previous = previous;
                                previous.next = next;
                            }
                            item.next = undefined;
                            item.previous = this._tail;
                            this._tail.next = item;
                            this._tail = item;
                            this._state++;
                        }
                    }
                    toJSON() {
                        const data = [];
                        this.forEach((value, key)=>{
                            data.push([
                                key,
                                value
                            ]);
                        });
                        return data;
                    }
                    fromJSON(data) {
                        this.clear();
                        for (const [key, value] of data){
                            this.set(key, value);
                        }
                    }
                    constructor(){
                        this[_a] = 'LinkedMap';
                        this._map = new Map();
                        this._head = undefined;
                        this._tail = undefined;
                        this._size = 0;
                        this._state = 0;
                    }
                }
                exports1.LinkedMap = LinkedMap;
                class LRUCache extends LinkedMap {
                    get limit() {
                        return this._limit;
                    }
                    set limit(limit) {
                        this._limit = limit;
                        this.checkTrim();
                    }
                    get ratio() {
                        return this._ratio;
                    }
                    set ratio(ratio) {
                        this._ratio = Math.min(Math.max(0, ratio), 1);
                        this.checkTrim();
                    }
                    get(key, touch = Touch.AsNew) {
                        return super.get(key, touch);
                    }
                    peek(key) {
                        return super.get(key, Touch.None);
                    }
                    set(key, value) {
                        super.set(key, value, Touch.Last);
                        this.checkTrim();
                        return this;
                    }
                    checkTrim() {
                        if (this.size > this._limit) {
                            this.trimOld(Math.round(this._limit * this._ratio));
                        }
                    }
                    constructor(limit, ratio = 1){
                        super();
                        this._limit = limit;
                        this._ratio = Math.min(Math.max(0, ratio), 1);
                    }
                }
                exports1.LRUCache = LRUCache;
            /***/ },
            /***/ 9805: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.AbstractMessageBuffer = void 0;
                const CR = 13;
                const LF = 10;
                const CRLF = '\r\n';
                class AbstractMessageBuffer {
                    get encoding() {
                        return this._encoding;
                    }
                    append(chunk) {
                        const toAppend = typeof chunk === 'string' ? this.fromString(chunk, this._encoding) : chunk;
                        this._chunks.push(toAppend);
                        this._totalLength += toAppend.byteLength;
                    }
                    tryReadHeaders(lowerCaseKeys = false) {
                        if (this._chunks.length === 0) {
                            return undefined;
                        }
                        let state = 0;
                        let chunkIndex = 0;
                        let offset = 0;
                        let chunkBytesRead = 0;
                        row: while(chunkIndex < this._chunks.length){
                            const chunk = this._chunks[chunkIndex];
                            offset = 0;
                            column: while(offset < chunk.length){
                                const value = chunk[offset];
                                switch(value){
                                    case CR:
                                        switch(state){
                                            case 0:
                                                state = 1;
                                                break;
                                            case 2:
                                                state = 3;
                                                break;
                                            default:
                                                state = 0;
                                        }
                                        break;
                                    case LF:
                                        switch(state){
                                            case 1:
                                                state = 2;
                                                break;
                                            case 3:
                                                state = 4;
                                                offset++;
                                                break row;
                                            default:
                                                state = 0;
                                        }
                                        break;
                                    default:
                                        state = 0;
                                }
                                offset++;
                            }
                            chunkBytesRead += chunk.byteLength;
                            chunkIndex++;
                        }
                        if (state !== 4) {
                            return undefined;
                        }
                        // The buffer contains the two CRLF at the end. So we will
                        // have two empty lines after the split at the end as well.
                        const buffer = this._read(chunkBytesRead + offset);
                        const result = new Map();
                        const headers = this.toString(buffer, 'ascii').split(CRLF);
                        if (headers.length < 2) {
                            return result;
                        }
                        for(let i = 0; i < headers.length - 2; i++){
                            const header = headers[i];
                            const index = header.indexOf(':');
                            if (index === -1) {
                                throw new Error('Message header must separate key and value using :');
                            }
                            const key = header.substr(0, index);
                            const value = header.substr(index + 1).trim();
                            result.set(lowerCaseKeys ? key.toLowerCase() : key, value);
                        }
                        return result;
                    }
                    tryReadBody(length) {
                        if (this._totalLength < length) {
                            return undefined;
                        }
                        return this._read(length);
                    }
                    get numberOfBytes() {
                        return this._totalLength;
                    }
                    _read(byteCount) {
                        if (byteCount === 0) {
                            return this.emptyBuffer();
                        }
                        if (byteCount > this._totalLength) {
                            throw new Error(`Cannot read so many bytes!`);
                        }
                        if (this._chunks[0].byteLength === byteCount) {
                            // super fast path, precisely first chunk must be returned
                            const chunk = this._chunks[0];
                            this._chunks.shift();
                            this._totalLength -= byteCount;
                            return this.asNative(chunk);
                        }
                        if (this._chunks[0].byteLength > byteCount) {
                            // fast path, the reading is entirely within the first chunk
                            const chunk = this._chunks[0];
                            const result = this.asNative(chunk, byteCount);
                            this._chunks[0] = chunk.slice(byteCount);
                            this._totalLength -= byteCount;
                            return result;
                        }
                        const result = this.allocNative(byteCount);
                        let resultOffset = 0;
                        let chunkIndex = 0;
                        while(byteCount > 0){
                            const chunk = this._chunks[chunkIndex];
                            if (chunk.byteLength > byteCount) {
                                // this chunk will survive
                                const chunkPart = chunk.slice(0, byteCount);
                                result.set(chunkPart, resultOffset);
                                resultOffset += byteCount;
                                this._chunks[chunkIndex] = chunk.slice(byteCount);
                                this._totalLength -= byteCount;
                                byteCount -= byteCount;
                            } else {
                                // this chunk will be entirely read
                                result.set(chunk, resultOffset);
                                resultOffset += chunk.byteLength;
                                this._chunks.shift();
                                this._totalLength -= chunk.byteLength;
                                byteCount -= chunk.byteLength;
                            }
                        }
                        return result;
                    }
                    constructor(encoding = 'utf-8'){
                        this._encoding = encoding;
                        this._chunks = [];
                        this._totalLength = 0;
                    }
                }
                exports1.AbstractMessageBuffer = AbstractMessageBuffer;
            /***/ },
            /***/ 656: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_654835__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ReadableStreamMessageReader = exports1.AbstractMessageReader = exports1.MessageReader = void 0;
                const ral_1 = __nested_webpack_require_654835__(5091);
                const Is = __nested_webpack_require_654835__(6618);
                const events_1 = __nested_webpack_require_654835__(2479);
                const semaphore_1 = __nested_webpack_require_654835__(418);
                var MessageReader;
                (function(MessageReader) {
                    function is(value) {
                        let candidate = value;
                        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) && Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
                    }
                    MessageReader.is = is;
                })(MessageReader = exports1.MessageReader || (exports1.MessageReader = {}));
                class AbstractMessageReader {
                    dispose() {
                        this.errorEmitter.dispose();
                        this.closeEmitter.dispose();
                    }
                    get onError() {
                        return this.errorEmitter.event;
                    }
                    fireError(error) {
                        this.errorEmitter.fire(this.asError(error));
                    }
                    get onClose() {
                        return this.closeEmitter.event;
                    }
                    fireClose() {
                        this.closeEmitter.fire(undefined);
                    }
                    get onPartialMessage() {
                        return this.partialMessageEmitter.event;
                    }
                    firePartialMessage(info) {
                        this.partialMessageEmitter.fire(info);
                    }
                    asError(error) {
                        if (error instanceof Error) {
                            return error;
                        } else {
                            return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
                        }
                    }
                    constructor(){
                        this.errorEmitter = new events_1.Emitter();
                        this.closeEmitter = new events_1.Emitter();
                        this.partialMessageEmitter = new events_1.Emitter();
                    }
                }
                exports1.AbstractMessageReader = AbstractMessageReader;
                var ResolvedMessageReaderOptions;
                (function(ResolvedMessageReaderOptions) {
                    function fromOptions(options) {
                        let charset;
                        let result;
                        let contentDecoder;
                        const contentDecoders = new Map();
                        let contentTypeDecoder;
                        const contentTypeDecoders = new Map();
                        if (options === undefined || typeof options === 'string') {
                            charset = options !== null && options !== void 0 ? options : 'utf-8';
                        } else {
                            var _options_charset;
                            charset = (_options_charset = options.charset) !== null && _options_charset !== void 0 ? _options_charset : 'utf-8';
                            if (options.contentDecoder !== undefined) {
                                contentDecoder = options.contentDecoder;
                                contentDecoders.set(contentDecoder.name, contentDecoder);
                            }
                            if (options.contentDecoders !== undefined) {
                                for (const decoder of options.contentDecoders){
                                    contentDecoders.set(decoder.name, decoder);
                                }
                            }
                            if (options.contentTypeDecoder !== undefined) {
                                contentTypeDecoder = options.contentTypeDecoder;
                                contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
                            }
                            if (options.contentTypeDecoders !== undefined) {
                                for (const decoder of options.contentTypeDecoders){
                                    contentTypeDecoders.set(decoder.name, decoder);
                                }
                            }
                        }
                        if (contentTypeDecoder === undefined) {
                            contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
                            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
                        }
                        return {
                            charset,
                            contentDecoder,
                            contentDecoders,
                            contentTypeDecoder,
                            contentTypeDecoders
                        };
                    }
                    ResolvedMessageReaderOptions.fromOptions = fromOptions;
                })(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
                class ReadableStreamMessageReader extends AbstractMessageReader {
                    set partialMessageTimeout(timeout) {
                        this._partialMessageTimeout = timeout;
                    }
                    get partialMessageTimeout() {
                        return this._partialMessageTimeout;
                    }
                    listen(callback) {
                        this.nextMessageLength = -1;
                        this.messageToken = 0;
                        this.partialMessageTimer = undefined;
                        this.callback = callback;
                        const result = this.readable.onData((data)=>{
                            this.onData(data);
                        });
                        this.readable.onError((error)=>this.fireError(error));
                        this.readable.onClose(()=>this.fireClose());
                        return result;
                    }
                    onData(data) {
                        this.buffer.append(data);
                        while(true){
                            if (this.nextMessageLength === -1) {
                                const headers = this.buffer.tryReadHeaders(true);
                                if (!headers) {
                                    return;
                                }
                                const contentLength = headers.get('content-length');
                                if (!contentLength) {
                                    this.fireError(new Error('Header must provide a Content-Length property.'));
                                    return;
                                }
                                const length = parseInt(contentLength);
                                if (isNaN(length)) {
                                    this.fireError(new Error('Content-Length value must be a number.'));
                                    return;
                                }
                                this.nextMessageLength = length;
                            }
                            const body = this.buffer.tryReadBody(this.nextMessageLength);
                            if (body === undefined) {
                                /** We haven't received the full message yet. */ this.setPartialMessageTimer();
                                return;
                            }
                            this.clearPartialMessageTimer();
                            this.nextMessageLength = -1;
                            // Make sure that we convert one received message after the
                            // other. Otherwise it could happen that a decoding of a second
                            // smaller message finished before the decoding of a first larger
                            // message and then we would deliver the second message first.
                            this.readSemaphore.lock(async ()=>{
                                const bytes = this.options.contentDecoder !== undefined ? await this.options.contentDecoder.decode(body) : body;
                                const message = await this.options.contentTypeDecoder.decode(bytes, this.options);
                                this.callback(message);
                            }).catch((error)=>{
                                this.fireError(error);
                            });
                        }
                    }
                    clearPartialMessageTimer() {
                        if (this.partialMessageTimer) {
                            this.partialMessageTimer.dispose();
                            this.partialMessageTimer = undefined;
                        }
                    }
                    setPartialMessageTimer() {
                        this.clearPartialMessageTimer();
                        if (this._partialMessageTimeout <= 0) {
                            return;
                        }
                        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout)=>{
                            this.partialMessageTimer = undefined;
                            if (token === this.messageToken) {
                                this.firePartialMessage({
                                    messageToken: token,
                                    waitingTime: timeout
                                });
                                this.setPartialMessageTimer();
                            }
                        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
                    }
                    constructor(readable, options){
                        super();
                        this.readable = readable;
                        this.options = ResolvedMessageReaderOptions.fromOptions(options);
                        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
                        this._partialMessageTimeout = 10000;
                        this.nextMessageLength = -1;
                        this.messageToken = 0;
                        this.readSemaphore = new semaphore_1.Semaphore(1);
                    }
                }
                exports1.ReadableStreamMessageReader = ReadableStreamMessageReader;
            /***/ },
            /***/ 9036: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_666096__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.WriteableStreamMessageWriter = exports1.AbstractMessageWriter = exports1.MessageWriter = void 0;
                const ral_1 = __nested_webpack_require_666096__(5091);
                const Is = __nested_webpack_require_666096__(6618);
                const semaphore_1 = __nested_webpack_require_666096__(418);
                const events_1 = __nested_webpack_require_666096__(2479);
                const ContentLength = 'Content-Length: ';
                const CRLF = '\r\n';
                var MessageWriter;
                (function(MessageWriter) {
                    function is(value) {
                        let candidate = value;
                        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) && Is.func(candidate.onError) && Is.func(candidate.write);
                    }
                    MessageWriter.is = is;
                })(MessageWriter = exports1.MessageWriter || (exports1.MessageWriter = {}));
                class AbstractMessageWriter {
                    dispose() {
                        this.errorEmitter.dispose();
                        this.closeEmitter.dispose();
                    }
                    get onError() {
                        return this.errorEmitter.event;
                    }
                    fireError(error, message, count) {
                        this.errorEmitter.fire([
                            this.asError(error),
                            message,
                            count
                        ]);
                    }
                    get onClose() {
                        return this.closeEmitter.event;
                    }
                    fireClose() {
                        this.closeEmitter.fire(undefined);
                    }
                    asError(error) {
                        if (error instanceof Error) {
                            return error;
                        } else {
                            return new Error(`Writer received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
                        }
                    }
                    constructor(){
                        this.errorEmitter = new events_1.Emitter();
                        this.closeEmitter = new events_1.Emitter();
                    }
                }
                exports1.AbstractMessageWriter = AbstractMessageWriter;
                var ResolvedMessageWriterOptions;
                (function(ResolvedMessageWriterOptions) {
                    function fromOptions(options) {
                        if (options === undefined || typeof options === 'string') {
                            return {
                                charset: options !== null && options !== void 0 ? options : 'utf-8',
                                contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder
                            };
                        } else {
                            var _options_charset, _options_contentTypeEncoder;
                            return {
                                charset: (_options_charset = options.charset) !== null && _options_charset !== void 0 ? _options_charset : 'utf-8',
                                contentEncoder: options.contentEncoder,
                                contentTypeEncoder: (_options_contentTypeEncoder = options.contentTypeEncoder) !== null && _options_contentTypeEncoder !== void 0 ? _options_contentTypeEncoder : (0, ral_1.default)().applicationJson.encoder
                            };
                        }
                    }
                    ResolvedMessageWriterOptions.fromOptions = fromOptions;
                })(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
                class WriteableStreamMessageWriter extends AbstractMessageWriter {
                    async write(msg) {
                        return this.writeSemaphore.lock(async ()=>{
                            const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer)=>{
                                if (this.options.contentEncoder !== undefined) {
                                    return this.options.contentEncoder.encode(buffer);
                                } else {
                                    return buffer;
                                }
                            });
                            return payload.then((buffer)=>{
                                const headers = [];
                                headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                                headers.push(CRLF);
                                return this.doWrite(msg, headers, buffer);
                            }, (error)=>{
                                this.fireError(error);
                                throw error;
                            });
                        });
                    }
                    async doWrite(msg, headers, data) {
                        try {
                            await this.writable.write(headers.join(''), 'ascii');
                            return this.writable.write(data);
                        } catch (error) {
                            this.handleError(error, msg);
                            return Promise.reject(error);
                        }
                    }
                    handleError(error, msg) {
                        this.errorCount++;
                        this.fireError(error, msg, this.errorCount);
                    }
                    end() {
                        this.writable.end();
                    }
                    constructor(writable, options){
                        super();
                        this.writable = writable;
                        this.options = ResolvedMessageWriterOptions.fromOptions(options);
                        this.errorCount = 0;
                        this.writeSemaphore = new semaphore_1.Semaphore(1);
                        this.writable.onError((error)=>this.fireError(error));
                        this.writable.onClose(()=>this.fireClose());
                    }
                }
                exports1.WriteableStreamMessageWriter = WriteableStreamMessageWriter;
            /***/ },
            /***/ 7162: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_672981__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.Message = exports1.NotificationType9 = exports1.NotificationType8 = exports1.NotificationType7 = exports1.NotificationType6 = exports1.NotificationType5 = exports1.NotificationType4 = exports1.NotificationType3 = exports1.NotificationType2 = exports1.NotificationType1 = exports1.NotificationType0 = exports1.NotificationType = exports1.RequestType9 = exports1.RequestType8 = exports1.RequestType7 = exports1.RequestType6 = exports1.RequestType5 = exports1.RequestType4 = exports1.RequestType3 = exports1.RequestType2 = exports1.RequestType1 = exports1.RequestType = exports1.RequestType0 = exports1.AbstractMessageSignature = exports1.ParameterStructures = exports1.ResponseError = exports1.ErrorCodes = void 0;
                const is = __nested_webpack_require_672981__(6618);
                /**
 * Predefined error codes.
 */ var ErrorCodes;
                (function(ErrorCodes) {
                    // Defined by JSON RPC
                    ErrorCodes.ParseError = -32700;
                    ErrorCodes.InvalidRequest = -32600;
                    ErrorCodes.MethodNotFound = -32601;
                    ErrorCodes.InvalidParams = -32602;
                    ErrorCodes.InternalError = -32603;
                    /**
     * This is the start range of JSON RPC reserved error codes.
     * It doesn't denote a real error code. No application error codes should
     * be defined between the start and end range. For backwards
     * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
     * are left in the range.
     *
     * @since 3.16.0
    */ ErrorCodes.jsonrpcReservedErrorRangeStart = -32099;
                    /** @deprecated use  jsonrpcReservedErrorRangeStart */ ErrorCodes.serverErrorStart = -32099;
                    /**
     * An error occurred when write a message to the transport layer.
     */ ErrorCodes.MessageWriteError = -32099;
                    /**
     * An error occurred when reading a message from the transport layer.
     */ ErrorCodes.MessageReadError = -32098;
                    /**
     * The connection got disposed or lost and all pending responses got
     * rejected.
     */ ErrorCodes.PendingResponseRejected = -32097;
                    /**
     * The connection is inactive and a use of it failed.
     */ ErrorCodes.ConnectionInactive = -32096;
                    /**
     * Error code indicating that a server received a notification or
     * request before the server has received the `initialize` request.
     */ ErrorCodes.ServerNotInitialized = -32002;
                    ErrorCodes.UnknownErrorCode = -32001;
                    /**
     * This is the end range of JSON RPC reserved error codes.
     * It doesn't denote a real error code.
     *
     * @since 3.16.0
    */ ErrorCodes.jsonrpcReservedErrorRangeEnd = -32000;
                    /** @deprecated use  jsonrpcReservedErrorRangeEnd */ ErrorCodes.serverErrorEnd = -32000;
                })(ErrorCodes = exports1.ErrorCodes || (exports1.ErrorCodes = {}));
                /**
 * An error object return in a response in case a request
 * has failed.
 */ class ResponseError extends Error {
                    toJson() {
                        const result = {
                            code: this.code,
                            message: this.message
                        };
                        if (this.data !== undefined) {
                            result.data = this.data;
                        }
                        return result;
                    }
                    constructor(code, message, data){
                        super(message);
                        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
                        this.data = data;
                        Object.setPrototypeOf(this, ResponseError.prototype);
                    }
                }
                exports1.ResponseError = ResponseError;
                class ParameterStructures {
                    static is(value) {
                        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
                    }
                    toString() {
                        return this.kind;
                    }
                    constructor(kind){
                        this.kind = kind;
                    }
                }
                exports1.ParameterStructures = ParameterStructures;
                /**
 * The parameter structure is automatically inferred on the number of parameters
 * and the parameter type in case of a single param.
 */ ParameterStructures.auto = new ParameterStructures('auto');
                /**
 * Forces `byPosition` parameter structure. This is useful if you have a single
 * parameter which has a literal type.
 */ ParameterStructures.byPosition = new ParameterStructures('byPosition');
                /**
 * Forces `byName` parameter structure. This is only useful when having a single
 * parameter. The library will report errors if used with a different number of
 * parameters.
 */ ParameterStructures.byName = new ParameterStructures('byName');
                /**
 * An abstract implementation of a MessageType.
 */ class AbstractMessageSignature {
                    get parameterStructures() {
                        return ParameterStructures.auto;
                    }
                    constructor(method, numberOfParams){
                        this.method = method;
                        this.numberOfParams = numberOfParams;
                    }
                }
                exports1.AbstractMessageSignature = AbstractMessageSignature;
                /**
 * Classes to type request response pairs
 */ class RequestType0 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 0);
                    }
                }
                exports1.RequestType0 = RequestType0;
                class RequestType extends AbstractMessageSignature {
                    get parameterStructures() {
                        return this._parameterStructures;
                    }
                    constructor(method, _parameterStructures = ParameterStructures.auto){
                        super(method, 1);
                        this._parameterStructures = _parameterStructures;
                    }
                }
                exports1.RequestType = RequestType;
                class RequestType1 extends AbstractMessageSignature {
                    get parameterStructures() {
                        return this._parameterStructures;
                    }
                    constructor(method, _parameterStructures = ParameterStructures.auto){
                        super(method, 1);
                        this._parameterStructures = _parameterStructures;
                    }
                }
                exports1.RequestType1 = RequestType1;
                class RequestType2 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 2);
                    }
                }
                exports1.RequestType2 = RequestType2;
                class RequestType3 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 3);
                    }
                }
                exports1.RequestType3 = RequestType3;
                class RequestType4 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 4);
                    }
                }
                exports1.RequestType4 = RequestType4;
                class RequestType5 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 5);
                    }
                }
                exports1.RequestType5 = RequestType5;
                class RequestType6 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 6);
                    }
                }
                exports1.RequestType6 = RequestType6;
                class RequestType7 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 7);
                    }
                }
                exports1.RequestType7 = RequestType7;
                class RequestType8 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 8);
                    }
                }
                exports1.RequestType8 = RequestType8;
                class RequestType9 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 9);
                    }
                }
                exports1.RequestType9 = RequestType9;
                class NotificationType extends AbstractMessageSignature {
                    get parameterStructures() {
                        return this._parameterStructures;
                    }
                    constructor(method, _parameterStructures = ParameterStructures.auto){
                        super(method, 1);
                        this._parameterStructures = _parameterStructures;
                    }
                }
                exports1.NotificationType = NotificationType;
                class NotificationType0 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 0);
                    }
                }
                exports1.NotificationType0 = NotificationType0;
                class NotificationType1 extends AbstractMessageSignature {
                    get parameterStructures() {
                        return this._parameterStructures;
                    }
                    constructor(method, _parameterStructures = ParameterStructures.auto){
                        super(method, 1);
                        this._parameterStructures = _parameterStructures;
                    }
                }
                exports1.NotificationType1 = NotificationType1;
                class NotificationType2 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 2);
                    }
                }
                exports1.NotificationType2 = NotificationType2;
                class NotificationType3 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 3);
                    }
                }
                exports1.NotificationType3 = NotificationType3;
                class NotificationType4 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 4);
                    }
                }
                exports1.NotificationType4 = NotificationType4;
                class NotificationType5 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 5);
                    }
                }
                exports1.NotificationType5 = NotificationType5;
                class NotificationType6 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 6);
                    }
                }
                exports1.NotificationType6 = NotificationType6;
                class NotificationType7 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 7);
                    }
                }
                exports1.NotificationType7 = NotificationType7;
                class NotificationType8 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 8);
                    }
                }
                exports1.NotificationType8 = NotificationType8;
                class NotificationType9 extends AbstractMessageSignature {
                    constructor(method){
                        super(method, 9);
                    }
                }
                exports1.NotificationType9 = NotificationType9;
                var Message;
                (function(Message) {
                    /**
     * Tests if the given message is a request message
     */ function isRequest(message) {
                        const candidate = message;
                        return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
                    }
                    Message.isRequest = isRequest;
                    /**
     * Tests if the given message is a notification message
     */ function isNotification(message) {
                        const candidate = message;
                        return candidate && is.string(candidate.method) && message.id === void 0;
                    }
                    Message.isNotification = isNotification;
                    /**
     * Tests if the given message is a response message
     */ function isResponse(message) {
                        const candidate = message;
                        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
                    }
                    Message.isResponse = isResponse;
                })(Message = exports1.Message || (exports1.Message = {}));
            /***/ },
            /***/ 5091: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                let _ral;
                function RAL() {
                    if (_ral === undefined) {
                        throw new Error(`No runtime abstraction layer installed`);
                    }
                    return _ral;
                }
                (function(RAL) {
                    function install(ral) {
                        if (ral === undefined) {
                            throw new Error(`No runtime abstraction layer provided`);
                        }
                        _ral = ral;
                    }
                    RAL.install = install;
                })(RAL || (RAL = {}));
                exports1["default"] = RAL;
            /***/ },
            /***/ 418: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_688488__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.Semaphore = void 0;
                const ral_1 = __nested_webpack_require_688488__(5091);
                class Semaphore {
                    lock(thunk) {
                        return new Promise((resolve, reject)=>{
                            this._waiting.push({
                                thunk,
                                resolve,
                                reject
                            });
                            this.runNext();
                        });
                    }
                    get active() {
                        return this._active;
                    }
                    runNext() {
                        if (this._waiting.length === 0 || this._active === this._capacity) {
                            return;
                        }
                        (0, ral_1.default)().timer.setImmediate(()=>this.doRunNext());
                    }
                    doRunNext() {
                        if (this._waiting.length === 0 || this._active === this._capacity) {
                            return;
                        }
                        const next = this._waiting.shift();
                        this._active++;
                        if (this._active > this._capacity) {
                            throw new Error(`To many thunks active`);
                        }
                        try {
                            const result = next.thunk();
                            if (result instanceof Promise) {
                                result.then((value)=>{
                                    this._active--;
                                    next.resolve(value);
                                    this.runNext();
                                }, (err)=>{
                                    this._active--;
                                    next.reject(err);
                                    this.runNext();
                                });
                            } else {
                                this._active--;
                                next.resolve(result);
                                this.runNext();
                            }
                        } catch (err) {
                            this._active--;
                            next.reject(err);
                            this.runNext();
                        }
                    }
                    constructor(capacity = 1){
                        if (capacity <= 0) {
                            throw new Error('Capacity must be greater than 0');
                        }
                        this._capacity = capacity;
                        this._active = 0;
                        this._waiting = [];
                    }
                }
                exports1.Semaphore = Semaphore;
            /***/ },
            /***/ 3489: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_691931__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.SharedArrayReceiverStrategy = exports1.SharedArraySenderStrategy = void 0;
                const cancellation_1 = __nested_webpack_require_691931__(6957);
                var CancellationState;
                (function(CancellationState) {
                    CancellationState.Continue = 0;
                    CancellationState.Cancelled = 1;
                })(CancellationState || (CancellationState = {}));
                class SharedArraySenderStrategy {
                    enableCancellation(request) {
                        if (request.id === null) {
                            return;
                        }
                        const buffer = new SharedArrayBuffer(4);
                        const data = new Int32Array(buffer, 0, 1);
                        data[0] = CancellationState.Continue;
                        this.buffers.set(request.id, buffer);
                        request.$cancellationData = buffer;
                    }
                    async sendCancellation(_conn, id) {
                        const buffer = this.buffers.get(id);
                        if (buffer === undefined) {
                            return;
                        }
                        const data = new Int32Array(buffer, 0, 1);
                        Atomics.store(data, 0, CancellationState.Cancelled);
                    }
                    cleanup(id) {
                        this.buffers.delete(id);
                    }
                    dispose() {
                        this.buffers.clear();
                    }
                    constructor(){
                        this.buffers = new Map();
                    }
                }
                exports1.SharedArraySenderStrategy = SharedArraySenderStrategy;
                class SharedArrayBufferCancellationToken {
                    get isCancellationRequested() {
                        return Atomics.load(this.data, 0) === CancellationState.Cancelled;
                    }
                    get onCancellationRequested() {
                        throw new Error(`Cancellation over SharedArrayBuffer doesn't support cancellation events`);
                    }
                    constructor(buffer){
                        this.data = new Int32Array(buffer, 0, 1);
                    }
                }
                class SharedArrayBufferCancellationTokenSource {
                    cancel() {}
                    dispose() {}
                    constructor(buffer){
                        this.token = new SharedArrayBufferCancellationToken(buffer);
                    }
                }
                class SharedArrayReceiverStrategy {
                    createCancellationTokenSource(request) {
                        const buffer = request.$cancellationData;
                        if (buffer === undefined) {
                            return new cancellation_1.CancellationTokenSource();
                        }
                        return new SharedArrayBufferCancellationTokenSource(buffer);
                    }
                    constructor(){
                        this.kind = 'request';
                    }
                }
                exports1.SharedArrayReceiverStrategy = SharedArrayReceiverStrategy;
            /***/ },
            /***/ 5501: /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_695836__) {
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    var desc = Object.getOwnPropertyDescriptor(m, k);
                    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                        desc = {
                            enumerable: true,
                            get: function() {
                                return m[k];
                            }
                        };
                    }
                    Object.defineProperty(o, k2, desc);
                } : function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports1) {
                    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
                };
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.createProtocolConnection = void 0;
                const browser_1 = __nested_webpack_require_695836__(9208);
                __exportStar(__nested_webpack_require_695836__(9208), exports1);
                __exportStar(__nested_webpack_require_695836__(3147), exports1);
                function createProtocolConnection(reader, writer, logger, options) {
                    return (0, browser_1.createMessageConnection)(reader, writer, logger, options);
                }
                exports1.createProtocolConnection = createProtocolConnection;
            /***/ },
            /***/ 3147: /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_698025__) {
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    var desc = Object.getOwnPropertyDescriptor(m, k);
                    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                        desc = {
                            enumerable: true,
                            get: function() {
                                return m[k];
                            }
                        };
                    }
                    Object.defineProperty(o, k2, desc);
                } : function(o, m, k, k2) {
                    if (k2 === undefined) k2 = k;
                    o[k2] = m[k];
                });
                var __exportStar = this && this.__exportStar || function(m, exports1) {
                    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
                };
                Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.LSPErrorCodes = exports1.createProtocolConnection = void 0;
                __exportStar(__nested_webpack_require_698025__(9110), exports1);
                __exportStar(__nested_webpack_require_698025__(7717), exports1);
                __exportStar(__nested_webpack_require_698025__(8431), exports1);
                __exportStar(__nested_webpack_require_698025__(1815), exports1);
                var connection_1 = __nested_webpack_require_698025__(291);
                Object.defineProperty(exports1, "createProtocolConnection", {
                    enumerable: true,
                    get: function() {
                        return connection_1.createProtocolConnection;
                    }
                });
                var LSPErrorCodes;
                (function(LSPErrorCodes) {
                    /**
    * This is the start range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */ LSPErrorCodes.lspReservedErrorRangeStart = -32899;
                    /**
     * A request failed but it was syntactically correct, e.g the
     * method name was known and the parameters were valid. The error
     * message should contain human readable information about why
     * the request failed.
     *
     * @since 3.17.0
     */ LSPErrorCodes.RequestFailed = -32803;
                    /**
     * The server cancelled the request. This error code should
     * only be used for requests that explicitly support being
     * server cancellable.
     *
     * @since 3.17.0
     */ LSPErrorCodes.ServerCancelled = -32802;
                    /**
     * The server detected that the content of a document got
     * modified outside normal conditions. A server should
     * NOT send this error code if it detects a content change
     * in it unprocessed messages. The result even computed
     * on an older state might still be useful for the client.
     *
     * If a client decides that a result is not of any use anymore
     * the client should cancel the request.
     */ LSPErrorCodes.ContentModified = -32801;
                    /**
     * The client has canceled a request and a server as detected
     * the cancel.
     */ LSPErrorCodes.RequestCancelled = -32800;
                    /**
    * This is the end range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */ LSPErrorCodes.lspReservedErrorRangeEnd = -32800;
                })(LSPErrorCodes = exports1.LSPErrorCodes || (exports1.LSPErrorCodes = {}));
            /***/ },
            /***/ 291: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_702174__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.createProtocolConnection = void 0;
                const vscode_jsonrpc_1 = __nested_webpack_require_702174__(9110);
                function createProtocolConnection(input, output, logger, options) {
                    if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
                        options = {
                            connectionStrategy: options
                        };
                    }
                    return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
                }
                exports1.createProtocolConnection = createProtocolConnection;
            /***/ },
            /***/ 8431: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_703411__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ProtocolNotificationType = exports1.ProtocolNotificationType0 = exports1.ProtocolRequestType = exports1.ProtocolRequestType0 = exports1.RegistrationType = exports1.MessageDirection = void 0;
                const vscode_jsonrpc_1 = __nested_webpack_require_703411__(9110);
                var MessageDirection;
                (function(MessageDirection) {
                    MessageDirection["clientToServer"] = "clientToServer";
                    MessageDirection["serverToClient"] = "serverToClient";
                    MessageDirection["both"] = "both";
                })(MessageDirection = exports1.MessageDirection || (exports1.MessageDirection = {}));
                class RegistrationType {
                    constructor(method){
                        this.method = method;
                    }
                }
                exports1.RegistrationType = RegistrationType;
                class ProtocolRequestType0 extends vscode_jsonrpc_1.RequestType0 {
                    constructor(method){
                        super(method);
                    }
                }
                exports1.ProtocolRequestType0 = ProtocolRequestType0;
                class ProtocolRequestType extends vscode_jsonrpc_1.RequestType {
                    constructor(method){
                        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
                    }
                }
                exports1.ProtocolRequestType = ProtocolRequestType;
                class ProtocolNotificationType0 extends vscode_jsonrpc_1.NotificationType0 {
                    constructor(method){
                        super(method);
                    }
                }
                exports1.ProtocolNotificationType0 = ProtocolNotificationType0;
                class ProtocolNotificationType extends vscode_jsonrpc_1.NotificationType {
                    constructor(method){
                        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
                    }
                }
                exports1.ProtocolNotificationType = ProtocolNotificationType;
            /***/ },
            /***/ 7602: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_706137__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.CallHierarchyOutgoingCallsRequest = exports1.CallHierarchyIncomingCallsRequest = exports1.CallHierarchyPrepareRequest = void 0;
                const messages_1 = __nested_webpack_require_706137__(8431);
                /**
 * A request to result a `CallHierarchyItem` in a document at a given position.
 * Can be used as an input to an incoming or outgoing call hierarchy.
 *
 * @since 3.16.0
 */ var CallHierarchyPrepareRequest;
                (function(CallHierarchyPrepareRequest) {
                    CallHierarchyPrepareRequest.method = 'textDocument/prepareCallHierarchy';
                    CallHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CallHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest.method);
                })(CallHierarchyPrepareRequest = exports1.CallHierarchyPrepareRequest || (exports1.CallHierarchyPrepareRequest = {}));
                /**
 * A request to resolve the incoming calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */ var CallHierarchyIncomingCallsRequest;
                (function(CallHierarchyIncomingCallsRequest) {
                    CallHierarchyIncomingCallsRequest.method = 'callHierarchy/incomingCalls';
                    CallHierarchyIncomingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CallHierarchyIncomingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest.method);
                })(CallHierarchyIncomingCallsRequest = exports1.CallHierarchyIncomingCallsRequest || (exports1.CallHierarchyIncomingCallsRequest = {}));
                /**
 * A request to resolve the outgoing calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */ var CallHierarchyOutgoingCallsRequest;
                (function(CallHierarchyOutgoingCallsRequest) {
                    CallHierarchyOutgoingCallsRequest.method = 'callHierarchy/outgoingCalls';
                    CallHierarchyOutgoingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CallHierarchyOutgoingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest.method);
                })(CallHierarchyOutgoingCallsRequest = exports1.CallHierarchyOutgoingCallsRequest || (exports1.CallHierarchyOutgoingCallsRequest = {}));
            /***/ },
            /***/ 3747: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_709168__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ColorPresentationRequest = exports1.DocumentColorRequest = void 0;
                const messages_1 = __nested_webpack_require_709168__(8431);
                /**
 * A request to list all color symbols found in a given text document. The request's
 * parameter is of type {@link DocumentColorParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */ var DocumentColorRequest;
                (function(DocumentColorRequest) {
                    DocumentColorRequest.method = 'textDocument/documentColor';
                    DocumentColorRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentColorRequest.type = new messages_1.ProtocolRequestType(DocumentColorRequest.method);
                })(DocumentColorRequest = exports1.DocumentColorRequest || (exports1.DocumentColorRequest = {}));
                /**
 * A request to list all presentation for a color. The request's
 * parameter is of type {@link ColorPresentationParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */ var ColorPresentationRequest;
                (function(ColorPresentationRequest) {
                    ColorPresentationRequest.method = 'textDocument/colorPresentation';
                    ColorPresentationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ColorPresentationRequest.type = new messages_1.ProtocolRequestType(ColorPresentationRequest.method);
                })(ColorPresentationRequest = exports1.ColorPresentationRequest || (exports1.ColorPresentationRequest = {}));
            /***/ },
            /***/ 7639: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_711471__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ConfigurationRequest = void 0;
                const messages_1 = __nested_webpack_require_711471__(8431);
                //---- Get Configuration request ----
                /**
 * The 'workspace/configuration' request is sent from the server to the client to fetch a certain
 * configuration setting.
 *
 * This pull model replaces the old push model were the client signaled configuration change via an
 * event. If the server still needs to react to configuration changes (since the server caches the
 * result of `workspace/configuration` requests) the server should register for an empty configuration
 * change event and empty the cache if such an event is received.
 */ var ConfigurationRequest;
                (function(ConfigurationRequest) {
                    ConfigurationRequest.method = 'workspace/configuration';
                    ConfigurationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    ConfigurationRequest.type = new messages_1.ProtocolRequestType(ConfigurationRequest.method);
                })(ConfigurationRequest = exports1.ConfigurationRequest || (exports1.ConfigurationRequest = {}));
            /***/ },
            /***/ 5581: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_713253__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.DeclarationRequest = void 0;
                const messages_1 = __nested_webpack_require_713253__(8431);
                // @ts-ignore: to avoid inlining LocationLink as dynamic import
                let __noDynamicImport;
                /**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type {@link Declaration}
 * or a typed array of {@link DeclarationLink} or a Thenable that resolves
 * to such.
 */ var DeclarationRequest;
                (function(DeclarationRequest) {
                    DeclarationRequest.method = 'textDocument/declaration';
                    DeclarationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DeclarationRequest.type = new messages_1.ProtocolRequestType(DeclarationRequest.method);
                })(DeclarationRequest = exports1.DeclarationRequest || (exports1.DeclarationRequest = {}));
            /***/ },
            /***/ 1494: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_714918__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.DiagnosticRefreshRequest = exports1.WorkspaceDiagnosticRequest = exports1.DocumentDiagnosticRequest = exports1.DocumentDiagnosticReportKind = exports1.DiagnosticServerCancellationData = void 0;
                const vscode_jsonrpc_1 = __nested_webpack_require_714918__(9110);
                const Is = __nested_webpack_require_714918__(8633);
                const messages_1 = __nested_webpack_require_714918__(8431);
                /**
 * @since 3.17.0
 */ var DiagnosticServerCancellationData;
                (function(DiagnosticServerCancellationData) {
                    function is(value) {
                        const candidate = value;
                        return candidate && Is.boolean(candidate.retriggerRequest);
                    }
                    DiagnosticServerCancellationData.is = is;
                })(DiagnosticServerCancellationData = exports1.DiagnosticServerCancellationData || (exports1.DiagnosticServerCancellationData = {}));
                /**
 * The document diagnostic report kinds.
 *
 * @since 3.17.0
 */ var DocumentDiagnosticReportKind;
                (function(DocumentDiagnosticReportKind) {
                    /**
     * A diagnostic report with a full
     * set of problems.
     */ DocumentDiagnosticReportKind.Full = 'full';
                    /**
     * A report indicating that the last
     * returned report is still accurate.
     */ DocumentDiagnosticReportKind.Unchanged = 'unchanged';
                })(DocumentDiagnosticReportKind = exports1.DocumentDiagnosticReportKind || (exports1.DocumentDiagnosticReportKind = {}));
                /**
 * The document diagnostic request definition.
 *
 * @since 3.17.0
 */ var DocumentDiagnosticRequest;
                (function(DocumentDiagnosticRequest) {
                    DocumentDiagnosticRequest.method = 'textDocument/diagnostic';
                    DocumentDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentDiagnosticRequest.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest.method);
                    DocumentDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
                })(DocumentDiagnosticRequest = exports1.DocumentDiagnosticRequest || (exports1.DocumentDiagnosticRequest = {}));
                /**
 * The workspace diagnostic request definition.
 *
 * @since 3.17.0
 */ var WorkspaceDiagnosticRequest;
                (function(WorkspaceDiagnosticRequest) {
                    WorkspaceDiagnosticRequest.method = 'workspace/diagnostic';
                    WorkspaceDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WorkspaceDiagnosticRequest.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest.method);
                    WorkspaceDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
                })(WorkspaceDiagnosticRequest = exports1.WorkspaceDiagnosticRequest || (exports1.WorkspaceDiagnosticRequest = {}));
                /**
 * The diagnostic refresh request definition.
 *
 * @since 3.17.0
 */ var DiagnosticRefreshRequest;
                (function(DiagnosticRefreshRequest) {
                    DiagnosticRefreshRequest.method = `workspace/diagnostic/refresh`;
                    DiagnosticRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);
                })(DiagnosticRefreshRequest = exports1.DiagnosticRefreshRequest || (exports1.DiagnosticRefreshRequest = {}));
            /***/ },
            /***/ 4781: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_719162__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.WillDeleteFilesRequest = exports1.DidDeleteFilesNotification = exports1.DidRenameFilesNotification = exports1.WillRenameFilesRequest = exports1.DidCreateFilesNotification = exports1.WillCreateFilesRequest = exports1.FileOperationPatternKind = void 0;
                const messages_1 = __nested_webpack_require_719162__(8431);
                /**
 * A pattern kind describing if a glob pattern matches a file a folder or
 * both.
 *
 * @since 3.16.0
 */ var FileOperationPatternKind;
                (function(FileOperationPatternKind) {
                    /**
     * The pattern matches a file only.
     */ FileOperationPatternKind.file = 'file';
                    /**
     * The pattern matches a folder only.
     */ FileOperationPatternKind.folder = 'folder';
                })(FileOperationPatternKind = exports1.FileOperationPatternKind || (exports1.FileOperationPatternKind = {}));
                /**
 * The will create files request is sent from the client to the server before files are actually
 * created as long as the creation is triggered from within the client.
 *
 * The request can return a `WorkspaceEdit` which will be applied to workspace before the
 * files are created. Hence the `WorkspaceEdit` can not manipulate the content of the file
 * to be created.
 *
 * @since 3.16.0
 */ var WillCreateFilesRequest;
                (function(WillCreateFilesRequest) {
                    WillCreateFilesRequest.method = 'workspace/willCreateFiles';
                    WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);
                })(WillCreateFilesRequest = exports1.WillCreateFilesRequest || (exports1.WillCreateFilesRequest = {}));
                /**
 * The did create files notification is sent from the client to the server when
 * files were created from within the client.
 *
 * @since 3.16.0
 */ var DidCreateFilesNotification;
                (function(DidCreateFilesNotification) {
                    DidCreateFilesNotification.method = 'workspace/didCreateFiles';
                    DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);
                })(DidCreateFilesNotification = exports1.DidCreateFilesNotification || (exports1.DidCreateFilesNotification = {}));
                /**
 * The will rename files request is sent from the client to the server before files are actually
 * renamed as long as the rename is triggered from within the client.
 *
 * @since 3.16.0
 */ var WillRenameFilesRequest;
                (function(WillRenameFilesRequest) {
                    WillRenameFilesRequest.method = 'workspace/willRenameFiles';
                    WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);
                })(WillRenameFilesRequest = exports1.WillRenameFilesRequest || (exports1.WillRenameFilesRequest = {}));
                /**
 * The did rename files notification is sent from the client to the server when
 * files were renamed from within the client.
 *
 * @since 3.16.0
 */ var DidRenameFilesNotification;
                (function(DidRenameFilesNotification) {
                    DidRenameFilesNotification.method = 'workspace/didRenameFiles';
                    DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);
                })(DidRenameFilesNotification = exports1.DidRenameFilesNotification || (exports1.DidRenameFilesNotification = {}));
                /**
 * The will delete files request is sent from the client to the server before files are actually
 * deleted as long as the deletion is triggered from within the client.
 *
 * @since 3.16.0
 */ var DidDeleteFilesNotification;
                (function(DidDeleteFilesNotification) {
                    DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';
                    DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);
                })(DidDeleteFilesNotification = exports1.DidDeleteFilesNotification || (exports1.DidDeleteFilesNotification = {}));
                /**
 * The did delete files notification is sent from the client to the server when
 * files were deleted from within the client.
 *
 * @since 3.16.0
 */ var WillDeleteFilesRequest;
                (function(WillDeleteFilesRequest) {
                    WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';
                    WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);
                })(WillDeleteFilesRequest = exports1.WillDeleteFilesRequest || (exports1.WillDeleteFilesRequest = {}));
            /***/ },
            /***/ 1203: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_725167__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.FoldingRangeRequest = void 0;
                const messages_1 = __nested_webpack_require_725167__(8431);
                /**
 * A request to provide folding ranges in a document. The request's
 * parameter is of type {@link FoldingRangeParams}, the
 * response is of type {@link FoldingRangeList} or a Thenable
 * that resolves to such.
 */ var FoldingRangeRequest;
                (function(FoldingRangeRequest) {
                    FoldingRangeRequest.method = 'textDocument/foldingRange';
                    FoldingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    FoldingRangeRequest.type = new messages_1.ProtocolRequestType(FoldingRangeRequest.method);
                })(FoldingRangeRequest = exports1.FoldingRangeRequest || (exports1.FoldingRangeRequest = {}));
            /***/ },
            /***/ 7287: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_726606__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ImplementationRequest = void 0;
                const messages_1 = __nested_webpack_require_726606__(8431);
                // @ts-ignore: to avoid inlining LocationLink as dynamic import
                let __noDynamicImport;
                /**
 * A request to resolve the implementation locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type {@link Definition} or a
 * Thenable that resolves to such.
 */ var ImplementationRequest;
                (function(ImplementationRequest) {
                    ImplementationRequest.method = 'textDocument/implementation';
                    ImplementationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ImplementationRequest.type = new messages_1.ProtocolRequestType(ImplementationRequest.method);
                })(ImplementationRequest = exports1.ImplementationRequest || (exports1.ImplementationRequest = {}));
            /***/ },
            /***/ 9383: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_728255__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.InlayHintRefreshRequest = exports1.InlayHintResolveRequest = exports1.InlayHintRequest = void 0;
                const messages_1 = __nested_webpack_require_728255__(8431);
                /**
 * A request to provide inlay hints in a document. The request's parameter is of
 * type {@link InlayHintsParams}, the response is of type
 * {@link InlayHint InlayHint[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */ var InlayHintRequest;
                (function(InlayHintRequest) {
                    InlayHintRequest.method = 'textDocument/inlayHint';
                    InlayHintRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InlayHintRequest.type = new messages_1.ProtocolRequestType(InlayHintRequest.method);
                })(InlayHintRequest = exports1.InlayHintRequest || (exports1.InlayHintRequest = {}));
                /**
 * A request to resolve additional properties for an inlay hint.
 * The request's parameter is of type {@link InlayHint}, the response is
 * of type {@link InlayHint} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */ var InlayHintResolveRequest;
                (function(InlayHintResolveRequest) {
                    InlayHintResolveRequest.method = 'inlayHint/resolve';
                    InlayHintResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InlayHintResolveRequest.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest.method);
                })(InlayHintResolveRequest = exports1.InlayHintResolveRequest || (exports1.InlayHintResolveRequest = {}));
                /**
 * @since 3.17.0
 */ var InlayHintRefreshRequest;
                (function(InlayHintRefreshRequest) {
                    InlayHintRefreshRequest.method = `workspace/inlayHint/refresh`;
                    InlayHintRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    InlayHintRefreshRequest.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest.method);
                })(InlayHintRefreshRequest = exports1.InlayHintRefreshRequest || (exports1.InlayHintRefreshRequest = {}));
            /***/ },
            /***/ 3491: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_731058__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.InlineValueRefreshRequest = exports1.InlineValueRequest = void 0;
                const messages_1 = __nested_webpack_require_731058__(8431);
                /**
 * A request to provide inline values in a document. The request's parameter is of
 * type {@link InlineValueParams}, the response is of type
 * {@link InlineValue InlineValue[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */ var InlineValueRequest;
                (function(InlineValueRequest) {
                    InlineValueRequest.method = 'textDocument/inlineValue';
                    InlineValueRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InlineValueRequest.type = new messages_1.ProtocolRequestType(InlineValueRequest.method);
                })(InlineValueRequest = exports1.InlineValueRequest || (exports1.InlineValueRequest = {}));
                /**
 * @since 3.17.0
 */ var InlineValueRefreshRequest;
                (function(InlineValueRefreshRequest) {
                    InlineValueRefreshRequest.method = `workspace/inlineValue/refresh`;
                    InlineValueRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    InlineValueRefreshRequest.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest.method);
                })(InlineValueRefreshRequest = exports1.InlineValueRefreshRequest || (exports1.InlineValueRefreshRequest = {}));
            /***/ },
            /***/ 1815: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_733124__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.WorkspaceSymbolRequest = exports1.CodeActionResolveRequest = exports1.CodeActionRequest = exports1.DocumentSymbolRequest = exports1.DocumentHighlightRequest = exports1.ReferencesRequest = exports1.DefinitionRequest = exports1.SignatureHelpRequest = exports1.SignatureHelpTriggerKind = exports1.HoverRequest = exports1.CompletionResolveRequest = exports1.CompletionRequest = exports1.CompletionTriggerKind = exports1.PublishDiagnosticsNotification = exports1.WatchKind = exports1.RelativePattern = exports1.FileChangeType = exports1.DidChangeWatchedFilesNotification = exports1.WillSaveTextDocumentWaitUntilRequest = exports1.WillSaveTextDocumentNotification = exports1.TextDocumentSaveReason = exports1.DidSaveTextDocumentNotification = exports1.DidCloseTextDocumentNotification = exports1.DidChangeTextDocumentNotification = exports1.TextDocumentContentChangeEvent = exports1.DidOpenTextDocumentNotification = exports1.TextDocumentSyncKind = exports1.TelemetryEventNotification = exports1.LogMessageNotification = exports1.ShowMessageRequest = exports1.ShowMessageNotification = exports1.MessageType = exports1.DidChangeConfigurationNotification = exports1.ExitNotification = exports1.ShutdownRequest = exports1.InitializedNotification = exports1.InitializeErrorCodes = exports1.InitializeRequest = exports1.WorkDoneProgressOptions = exports1.TextDocumentRegistrationOptions = exports1.StaticRegistrationOptions = exports1.PositionEncodingKind = exports1.FailureHandlingKind = exports1.ResourceOperationKind = exports1.UnregistrationRequest = exports1.RegistrationRequest = exports1.DocumentSelector = exports1.NotebookCellTextDocumentFilter = exports1.NotebookDocumentFilter = exports1.TextDocumentFilter = void 0;
                exports1.TypeHierarchySubtypesRequest = exports1.TypeHierarchyPrepareRequest = exports1.MonikerRequest = exports1.MonikerKind = exports1.UniquenessLevel = exports1.WillDeleteFilesRequest = exports1.DidDeleteFilesNotification = exports1.WillRenameFilesRequest = exports1.DidRenameFilesNotification = exports1.WillCreateFilesRequest = exports1.DidCreateFilesNotification = exports1.FileOperationPatternKind = exports1.LinkedEditingRangeRequest = exports1.ShowDocumentRequest = exports1.SemanticTokensRegistrationType = exports1.SemanticTokensRefreshRequest = exports1.SemanticTokensRangeRequest = exports1.SemanticTokensDeltaRequest = exports1.SemanticTokensRequest = exports1.TokenFormat = exports1.CallHierarchyPrepareRequest = exports1.CallHierarchyOutgoingCallsRequest = exports1.CallHierarchyIncomingCallsRequest = exports1.WorkDoneProgressCancelNotification = exports1.WorkDoneProgressCreateRequest = exports1.WorkDoneProgress = exports1.SelectionRangeRequest = exports1.DeclarationRequest = exports1.FoldingRangeRequest = exports1.ColorPresentationRequest = exports1.DocumentColorRequest = exports1.ConfigurationRequest = exports1.DidChangeWorkspaceFoldersNotification = exports1.WorkspaceFoldersRequest = exports1.TypeDefinitionRequest = exports1.ImplementationRequest = exports1.ApplyWorkspaceEditRequest = exports1.ExecuteCommandRequest = exports1.PrepareRenameRequest = exports1.RenameRequest = exports1.PrepareSupportDefaultBehavior = exports1.DocumentOnTypeFormattingRequest = exports1.DocumentRangeFormattingRequest = exports1.DocumentFormattingRequest = exports1.DocumentLinkResolveRequest = exports1.DocumentLinkRequest = exports1.CodeLensRefreshRequest = exports1.CodeLensResolveRequest = exports1.CodeLensRequest = exports1.WorkspaceSymbolResolveRequest = void 0;
                exports1.DidCloseNotebookDocumentNotification = exports1.DidSaveNotebookDocumentNotification = exports1.DidChangeNotebookDocumentNotification = exports1.NotebookCellArrayChange = exports1.DidOpenNotebookDocumentNotification = exports1.NotebookDocumentSyncRegistrationType = exports1.NotebookDocument = exports1.NotebookCell = exports1.ExecutionSummary = exports1.NotebookCellKind = exports1.DiagnosticRefreshRequest = exports1.WorkspaceDiagnosticRequest = exports1.DocumentDiagnosticRequest = exports1.DocumentDiagnosticReportKind = exports1.DiagnosticServerCancellationData = exports1.InlayHintRefreshRequest = exports1.InlayHintResolveRequest = exports1.InlayHintRequest = exports1.InlineValueRefreshRequest = exports1.InlineValueRequest = exports1.TypeHierarchySupertypesRequest = void 0;
                const messages_1 = __nested_webpack_require_733124__(8431);
                const vscode_languageserver_types_1 = __nested_webpack_require_733124__(7717);
                const Is = __nested_webpack_require_733124__(8633);
                const protocol_implementation_1 = __nested_webpack_require_733124__(7287);
                Object.defineProperty(exports1, "ImplementationRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_implementation_1.ImplementationRequest;
                    }
                });
                const protocol_typeDefinition_1 = __nested_webpack_require_733124__(9264);
                Object.defineProperty(exports1, "TypeDefinitionRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_typeDefinition_1.TypeDefinitionRequest;
                    }
                });
                const protocol_workspaceFolder_1 = __nested_webpack_require_733124__(6860);
                Object.defineProperty(exports1, "WorkspaceFoldersRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_workspaceFolder_1.WorkspaceFoldersRequest;
                    }
                });
                Object.defineProperty(exports1, "DidChangeWorkspaceFoldersNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification;
                    }
                });
                const protocol_configuration_1 = __nested_webpack_require_733124__(7639);
                Object.defineProperty(exports1, "ConfigurationRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_configuration_1.ConfigurationRequest;
                    }
                });
                const protocol_colorProvider_1 = __nested_webpack_require_733124__(3747);
                Object.defineProperty(exports1, "DocumentColorRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_colorProvider_1.DocumentColorRequest;
                    }
                });
                Object.defineProperty(exports1, "ColorPresentationRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_colorProvider_1.ColorPresentationRequest;
                    }
                });
                const protocol_foldingRange_1 = __nested_webpack_require_733124__(1203);
                Object.defineProperty(exports1, "FoldingRangeRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_foldingRange_1.FoldingRangeRequest;
                    }
                });
                const protocol_declaration_1 = __nested_webpack_require_733124__(5581);
                Object.defineProperty(exports1, "DeclarationRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_declaration_1.DeclarationRequest;
                    }
                });
                const protocol_selectionRange_1 = __nested_webpack_require_733124__(1530);
                Object.defineProperty(exports1, "SelectionRangeRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_selectionRange_1.SelectionRangeRequest;
                    }
                });
                const protocol_progress_1 = __nested_webpack_require_733124__(4166);
                Object.defineProperty(exports1, "WorkDoneProgress", {
                    enumerable: true,
                    get: function() {
                        return protocol_progress_1.WorkDoneProgress;
                    }
                });
                Object.defineProperty(exports1, "WorkDoneProgressCreateRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_progress_1.WorkDoneProgressCreateRequest;
                    }
                });
                Object.defineProperty(exports1, "WorkDoneProgressCancelNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_progress_1.WorkDoneProgressCancelNotification;
                    }
                });
                const protocol_callHierarchy_1 = __nested_webpack_require_733124__(7602);
                Object.defineProperty(exports1, "CallHierarchyIncomingCallsRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest;
                    }
                });
                Object.defineProperty(exports1, "CallHierarchyOutgoingCallsRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest;
                    }
                });
                Object.defineProperty(exports1, "CallHierarchyPrepareRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_callHierarchy_1.CallHierarchyPrepareRequest;
                    }
                });
                const protocol_semanticTokens_1 = __nested_webpack_require_733124__(2067);
                Object.defineProperty(exports1, "TokenFormat", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.TokenFormat;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensRequest;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensDeltaRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensDeltaRequest;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensRangeRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensRangeRequest;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensRefreshRequest;
                    }
                });
                Object.defineProperty(exports1, "SemanticTokensRegistrationType", {
                    enumerable: true,
                    get: function() {
                        return protocol_semanticTokens_1.SemanticTokensRegistrationType;
                    }
                });
                const protocol_showDocument_1 = __nested_webpack_require_733124__(4333);
                Object.defineProperty(exports1, "ShowDocumentRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_showDocument_1.ShowDocumentRequest;
                    }
                });
                const protocol_linkedEditingRange_1 = __nested_webpack_require_733124__(2249);
                Object.defineProperty(exports1, "LinkedEditingRangeRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_linkedEditingRange_1.LinkedEditingRangeRequest;
                    }
                });
                const protocol_fileOperations_1 = __nested_webpack_require_733124__(4781);
                Object.defineProperty(exports1, "FileOperationPatternKind", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.FileOperationPatternKind;
                    }
                });
                Object.defineProperty(exports1, "DidCreateFilesNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.DidCreateFilesNotification;
                    }
                });
                Object.defineProperty(exports1, "WillCreateFilesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.WillCreateFilesRequest;
                    }
                });
                Object.defineProperty(exports1, "DidRenameFilesNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.DidRenameFilesNotification;
                    }
                });
                Object.defineProperty(exports1, "WillRenameFilesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.WillRenameFilesRequest;
                    }
                });
                Object.defineProperty(exports1, "DidDeleteFilesNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.DidDeleteFilesNotification;
                    }
                });
                Object.defineProperty(exports1, "WillDeleteFilesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_fileOperations_1.WillDeleteFilesRequest;
                    }
                });
                const protocol_moniker_1 = __nested_webpack_require_733124__(7684);
                Object.defineProperty(exports1, "UniquenessLevel", {
                    enumerable: true,
                    get: function() {
                        return protocol_moniker_1.UniquenessLevel;
                    }
                });
                Object.defineProperty(exports1, "MonikerKind", {
                    enumerable: true,
                    get: function() {
                        return protocol_moniker_1.MonikerKind;
                    }
                });
                Object.defineProperty(exports1, "MonikerRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_moniker_1.MonikerRequest;
                    }
                });
                const protocol_typeHierarchy_1 = __nested_webpack_require_733124__(7062);
                Object.defineProperty(exports1, "TypeHierarchyPrepareRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest;
                    }
                });
                Object.defineProperty(exports1, "TypeHierarchySubtypesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest;
                    }
                });
                Object.defineProperty(exports1, "TypeHierarchySupertypesRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest;
                    }
                });
                const protocol_inlineValue_1 = __nested_webpack_require_733124__(3491);
                Object.defineProperty(exports1, "InlineValueRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlineValue_1.InlineValueRequest;
                    }
                });
                Object.defineProperty(exports1, "InlineValueRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlineValue_1.InlineValueRefreshRequest;
                    }
                });
                const protocol_inlayHint_1 = __nested_webpack_require_733124__(9383);
                Object.defineProperty(exports1, "InlayHintRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlayHint_1.InlayHintRequest;
                    }
                });
                Object.defineProperty(exports1, "InlayHintResolveRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlayHint_1.InlayHintResolveRequest;
                    }
                });
                Object.defineProperty(exports1, "InlayHintRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_inlayHint_1.InlayHintRefreshRequest;
                    }
                });
                const protocol_diagnostic_1 = __nested_webpack_require_733124__(1494);
                Object.defineProperty(exports1, "DiagnosticServerCancellationData", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.DiagnosticServerCancellationData;
                    }
                });
                Object.defineProperty(exports1, "DocumentDiagnosticReportKind", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.DocumentDiagnosticReportKind;
                    }
                });
                Object.defineProperty(exports1, "DocumentDiagnosticRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.DocumentDiagnosticRequest;
                    }
                });
                Object.defineProperty(exports1, "WorkspaceDiagnosticRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.WorkspaceDiagnosticRequest;
                    }
                });
                Object.defineProperty(exports1, "DiagnosticRefreshRequest", {
                    enumerable: true,
                    get: function() {
                        return protocol_diagnostic_1.DiagnosticRefreshRequest;
                    }
                });
                const protocol_notebook_1 = __nested_webpack_require_733124__(4792);
                Object.defineProperty(exports1, "NotebookCellKind", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookCellKind;
                    }
                });
                Object.defineProperty(exports1, "ExecutionSummary", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.ExecutionSummary;
                    }
                });
                Object.defineProperty(exports1, "NotebookCell", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookCell;
                    }
                });
                Object.defineProperty(exports1, "NotebookDocument", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookDocument;
                    }
                });
                Object.defineProperty(exports1, "NotebookDocumentSyncRegistrationType", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookDocumentSyncRegistrationType;
                    }
                });
                Object.defineProperty(exports1, "DidOpenNotebookDocumentNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.DidOpenNotebookDocumentNotification;
                    }
                });
                Object.defineProperty(exports1, "NotebookCellArrayChange", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.NotebookCellArrayChange;
                    }
                });
                Object.defineProperty(exports1, "DidChangeNotebookDocumentNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.DidChangeNotebookDocumentNotification;
                    }
                });
                Object.defineProperty(exports1, "DidSaveNotebookDocumentNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.DidSaveNotebookDocumentNotification;
                    }
                });
                Object.defineProperty(exports1, "DidCloseNotebookDocumentNotification", {
                    enumerable: true,
                    get: function() {
                        return protocol_notebook_1.DidCloseNotebookDocumentNotification;
                    }
                });
                // @ts-ignore: to avoid inlining LocationLink as dynamic import
                let __noDynamicImport;
                /**
 * The TextDocumentFilter namespace provides helper functions to work with
 * {@link TextDocumentFilter} literals.
 *
 * @since 3.17.0
 */ var TextDocumentFilter;
                (function(TextDocumentFilter) {
                    function is(value) {
                        const candidate = value;
                        return Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern);
                    }
                    TextDocumentFilter.is = is;
                })(TextDocumentFilter = exports1.TextDocumentFilter || (exports1.TextDocumentFilter = {}));
                /**
 * The NotebookDocumentFilter namespace provides helper functions to work with
 * {@link NotebookDocumentFilter} literals.
 *
 * @since 3.17.0
 */ var NotebookDocumentFilter;
                (function(NotebookDocumentFilter) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
                    }
                    NotebookDocumentFilter.is = is;
                })(NotebookDocumentFilter = exports1.NotebookDocumentFilter || (exports1.NotebookDocumentFilter = {}));
                /**
 * The NotebookCellTextDocumentFilter namespace provides helper functions to work with
 * {@link NotebookCellTextDocumentFilter} literals.
 *
 * @since 3.17.0
 */ var NotebookCellTextDocumentFilter;
                (function(NotebookCellTextDocumentFilter) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook)) && (candidate.language === undefined || Is.string(candidate.language));
                    }
                    NotebookCellTextDocumentFilter.is = is;
                })(NotebookCellTextDocumentFilter = exports1.NotebookCellTextDocumentFilter || (exports1.NotebookCellTextDocumentFilter = {}));
                /**
 * The DocumentSelector namespace provides helper functions to work with
 * {@link DocumentSelector}s.
 */ var DocumentSelector;
                (function(DocumentSelector) {
                    function is(value) {
                        if (!Array.isArray(value)) {
                            return false;
                        }
                        for (let elem of value){
                            if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
                                return false;
                            }
                        }
                        return true;
                    }
                    DocumentSelector.is = is;
                })(DocumentSelector = exports1.DocumentSelector || (exports1.DocumentSelector = {}));
                /**
 * The `client/registerCapability` request is sent from the server to the client to register a new capability
 * handler on the client side.
 */ var RegistrationRequest;
                (function(RegistrationRequest) {
                    RegistrationRequest.method = 'client/registerCapability';
                    RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);
                })(RegistrationRequest = exports1.RegistrationRequest || (exports1.RegistrationRequest = {}));
                /**
 * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
 * handler on the client side.
 */ var UnregistrationRequest;
                (function(UnregistrationRequest) {
                    UnregistrationRequest.method = 'client/unregisterCapability';
                    UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);
                })(UnregistrationRequest = exports1.UnregistrationRequest || (exports1.UnregistrationRequest = {}));
                var ResourceOperationKind;
                (function(ResourceOperationKind) {
                    /**
     * Supports creating new files and folders.
     */ ResourceOperationKind.Create = 'create';
                    /**
     * Supports renaming existing files and folders.
     */ ResourceOperationKind.Rename = 'rename';
                    /**
     * Supports deleting existing files and folders.
     */ ResourceOperationKind.Delete = 'delete';
                })(ResourceOperationKind = exports1.ResourceOperationKind || (exports1.ResourceOperationKind = {}));
                var FailureHandlingKind;
                (function(FailureHandlingKind) {
                    /**
     * Applying the workspace change is simply aborted if one of the changes provided
     * fails. All operations executed before the failing operation stay executed.
     */ FailureHandlingKind.Abort = 'abort';
                    /**
     * All operations are executed transactional. That means they either all
     * succeed or no changes at all are applied to the workspace.
     */ FailureHandlingKind.Transactional = 'transactional';
                    /**
     * If the workspace edit contains only textual file changes they are executed transactional.
     * If resource changes (create, rename or delete file) are part of the change the failure
     * handling strategy is abort.
     */ FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';
                    /**
     * The client tries to undo the operations already executed. But there is no
     * guarantee that this is succeeding.
     */ FailureHandlingKind.Undo = 'undo';
                })(FailureHandlingKind = exports1.FailureHandlingKind || (exports1.FailureHandlingKind = {}));
                /**
 * A set of predefined position encoding kinds.
 *
 * @since 3.17.0
 */ var PositionEncodingKind;
                (function(PositionEncodingKind) {
                    /**
     * Character offsets count UTF-8 code units (e.g. bytes).
     */ PositionEncodingKind.UTF8 = 'utf-8';
                    /**
     * Character offsets count UTF-16 code units.
     *
     * This is the default and must always be supported
     * by servers
     */ PositionEncodingKind.UTF16 = 'utf-16';
                    /**
     * Character offsets count UTF-32 code units.
     *
     * Implementation note: these are the same as Unicode codepoints,
     * so this `PositionEncodingKind` may also be used for an
     * encoding-agnostic representation of character offsets.
     */ PositionEncodingKind.UTF32 = 'utf-32';
                })(PositionEncodingKind = exports1.PositionEncodingKind || (exports1.PositionEncodingKind = {}));
                /**
 * The StaticRegistrationOptions namespace provides helper functions to work with
 * {@link StaticRegistrationOptions} literals.
 */ var StaticRegistrationOptions;
                (function(StaticRegistrationOptions) {
                    function hasId(value) {
                        const candidate = value;
                        return candidate && Is.string(candidate.id) && candidate.id.length > 0;
                    }
                    StaticRegistrationOptions.hasId = hasId;
                })(StaticRegistrationOptions = exports1.StaticRegistrationOptions || (exports1.StaticRegistrationOptions = {}));
                /**
 * The TextDocumentRegistrationOptions namespace provides helper functions to work with
 * {@link TextDocumentRegistrationOptions} literals.
 */ var TextDocumentRegistrationOptions;
                (function(TextDocumentRegistrationOptions) {
                    function is(value) {
                        const candidate = value;
                        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
                    }
                    TextDocumentRegistrationOptions.is = is;
                })(TextDocumentRegistrationOptions = exports1.TextDocumentRegistrationOptions || (exports1.TextDocumentRegistrationOptions = {}));
                /**
 * The WorkDoneProgressOptions namespace provides helper functions to work with
 * {@link WorkDoneProgressOptions} literals.
 */ var WorkDoneProgressOptions;
                (function(WorkDoneProgressOptions) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));
                    }
                    WorkDoneProgressOptions.is = is;
                    function hasWorkDoneProgress(value) {
                        const candidate = value;
                        return candidate && Is.boolean(candidate.workDoneProgress);
                    }
                    WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;
                })(WorkDoneProgressOptions = exports1.WorkDoneProgressOptions || (exports1.WorkDoneProgressOptions = {}));
                /**
 * The initialize request is sent from the client to the server.
 * It is sent once as the request after starting up the server.
 * The requests parameter is of type {@link InitializeParams}
 * the response if of type {@link InitializeResult} of a Thenable that
 * resolves to such.
 */ var InitializeRequest;
                (function(InitializeRequest) {
                    InitializeRequest.method = 'initialize';
                    InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);
                })(InitializeRequest = exports1.InitializeRequest || (exports1.InitializeRequest = {}));
                /**
 * Known error codes for an `InitializeErrorCodes`;
 */ var InitializeErrorCodes;
                (function(InitializeErrorCodes) {
                    /**
     * If the protocol version provided by the client can't be handled by the server.
     *
     * @deprecated This initialize error got replaced by client capabilities. There is
     * no version handshake in version 3.0x
     */ InitializeErrorCodes.unknownProtocolVersion = 1;
                })(InitializeErrorCodes = exports1.InitializeErrorCodes || (exports1.InitializeErrorCodes = {}));
                /**
 * The initialized notification is sent from the client to the
 * server after the client is fully initialized and the server
 * is allowed to send requests from the server to the client.
 */ var InitializedNotification;
                (function(InitializedNotification) {
                    InitializedNotification.method = 'initialized';
                    InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);
                })(InitializedNotification = exports1.InitializedNotification || (exports1.InitializedNotification = {}));
                //---- Shutdown Method ----
                /**
 * A shutdown request is sent from the client to the server.
 * It is sent once when the client decides to shutdown the
 * server. The only notification that is sent after a shutdown request
 * is the exit event.
 */ var ShutdownRequest;
                (function(ShutdownRequest) {
                    ShutdownRequest.method = 'shutdown';
                    ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);
                })(ShutdownRequest = exports1.ShutdownRequest || (exports1.ShutdownRequest = {}));
                //---- Exit Notification ----
                /**
 * The exit event is sent from the client to the server to
 * ask the server to exit its process.
 */ var ExitNotification;
                (function(ExitNotification) {
                    ExitNotification.method = 'exit';
                    ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);
                })(ExitNotification = exports1.ExitNotification || (exports1.ExitNotification = {}));
                /**
 * The configuration change notification is sent from the client to the server
 * when the client's configuration has changed. The notification contains
 * the changed configuration as defined by the language client.
 */ var DidChangeConfigurationNotification;
                (function(DidChangeConfigurationNotification) {
                    DidChangeConfigurationNotification.method = 'workspace/didChangeConfiguration';
                    DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);
                })(DidChangeConfigurationNotification = exports1.DidChangeConfigurationNotification || (exports1.DidChangeConfigurationNotification = {}));
                //---- Message show and log notifications ----
                /**
 * The message type
 */ var MessageType;
                (function(MessageType) {
                    /**
     * An error message.
     */ MessageType.Error = 1;
                    /**
     * A warning message.
     */ MessageType.Warning = 2;
                    /**
     * An information message.
     */ MessageType.Info = 3;
                    /**
     * A log message.
     */ MessageType.Log = 4;
                })(MessageType = exports1.MessageType || (exports1.MessageType = {}));
                /**
 * The show message notification is sent from a server to a client to ask
 * the client to display a particular message in the user interface.
 */ var ShowMessageNotification;
                (function(ShowMessageNotification) {
                    ShowMessageNotification.method = 'window/showMessage';
                    ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
                    ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);
                })(ShowMessageNotification = exports1.ShowMessageNotification || (exports1.ShowMessageNotification = {}));
                /**
 * The show message request is sent from the server to the client to show a message
 * and a set of options actions to the user.
 */ var ShowMessageRequest;
                (function(ShowMessageRequest) {
                    ShowMessageRequest.method = 'window/showMessageRequest';
                    ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);
                })(ShowMessageRequest = exports1.ShowMessageRequest || (exports1.ShowMessageRequest = {}));
                /**
 * The log message notification is sent from the server to the client to ask
 * the client to log a particular message.
 */ var LogMessageNotification;
                (function(LogMessageNotification) {
                    LogMessageNotification.method = 'window/logMessage';
                    LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
                    LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);
                })(LogMessageNotification = exports1.LogMessageNotification || (exports1.LogMessageNotification = {}));
                //---- Telemetry notification
                /**
 * The telemetry event notification is sent from the server to the client to ask
 * the client to log telemetry data.
 */ var TelemetryEventNotification;
                (function(TelemetryEventNotification) {
                    TelemetryEventNotification.method = 'telemetry/event';
                    TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;
                    TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);
                })(TelemetryEventNotification = exports1.TelemetryEventNotification || (exports1.TelemetryEventNotification = {}));
                /**
 * Defines how the host (editor) should sync
 * document changes to the language server.
 */ var TextDocumentSyncKind;
                (function(TextDocumentSyncKind) {
                    /**
     * Documents should not be synced at all.
     */ TextDocumentSyncKind.None = 0;
                    /**
     * Documents are synced by always sending the full content
     * of the document.
     */ TextDocumentSyncKind.Full = 1;
                    /**
     * Documents are synced by sending the full content on open.
     * After that only incremental updates to the document are
     * send.
     */ TextDocumentSyncKind.Incremental = 2;
                })(TextDocumentSyncKind = exports1.TextDocumentSyncKind || (exports1.TextDocumentSyncKind = {}));
                /**
 * The document open notification is sent from the client to the server to signal
 * newly opened text documents. The document's truth is now managed by the client
 * and the server must not try to read the document's truth using the document's
 * uri. Open in this sense means it is managed by the client. It doesn't necessarily
 * mean that its content is presented in an editor. An open notification must not
 * be sent more than once without a corresponding close notification send before.
 * This means open and close notification must be balanced and the max open count
 * is one.
 */ var DidOpenTextDocumentNotification;
                (function(DidOpenTextDocumentNotification) {
                    DidOpenTextDocumentNotification.method = 'textDocument/didOpen';
                    DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);
                })(DidOpenTextDocumentNotification = exports1.DidOpenTextDocumentNotification || (exports1.DidOpenTextDocumentNotification = {}));
                var TextDocumentContentChangeEvent;
                (function(TextDocumentContentChangeEvent) {
                    /**
     * Checks whether the information describes a delta event.
     */ function isIncremental(event) {
                        let candidate = event;
                        return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range !== undefined && (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
                    }
                    TextDocumentContentChangeEvent.isIncremental = isIncremental;
                    /**
     * Checks whether the information describes a full replacement event.
     */ function isFull(event) {
                        let candidate = event;
                        return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
                    }
                    TextDocumentContentChangeEvent.isFull = isFull;
                })(TextDocumentContentChangeEvent = exports1.TextDocumentContentChangeEvent || (exports1.TextDocumentContentChangeEvent = {}));
                /**
 * The document change notification is sent from the client to the server to signal
 * changes to a text document.
 */ var DidChangeTextDocumentNotification;
                (function(DidChangeTextDocumentNotification) {
                    DidChangeTextDocumentNotification.method = 'textDocument/didChange';
                    DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);
                })(DidChangeTextDocumentNotification = exports1.DidChangeTextDocumentNotification || (exports1.DidChangeTextDocumentNotification = {}));
                /**
 * The document close notification is sent from the client to the server when
 * the document got closed in the client. The document's truth now exists where
 * the document's uri points to (e.g. if the document's uri is a file uri the
 * truth now exists on disk). As with the open notification the close notification
 * is about managing the document's content. Receiving a close notification
 * doesn't mean that the document was open in an editor before. A close
 * notification requires a previous open notification to be sent.
 */ var DidCloseTextDocumentNotification;
                (function(DidCloseTextDocumentNotification) {
                    DidCloseTextDocumentNotification.method = 'textDocument/didClose';
                    DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);
                })(DidCloseTextDocumentNotification = exports1.DidCloseTextDocumentNotification || (exports1.DidCloseTextDocumentNotification = {}));
                /**
 * The document save notification is sent from the client to the server when
 * the document got saved in the client.
 */ var DidSaveTextDocumentNotification;
                (function(DidSaveTextDocumentNotification) {
                    DidSaveTextDocumentNotification.method = 'textDocument/didSave';
                    DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);
                })(DidSaveTextDocumentNotification = exports1.DidSaveTextDocumentNotification || (exports1.DidSaveTextDocumentNotification = {}));
                /**
 * Represents reasons why a text document is saved.
 */ var TextDocumentSaveReason;
                (function(TextDocumentSaveReason) {
                    /**
     * Manually triggered, e.g. by the user pressing save, by starting debugging,
     * or by an API call.
     */ TextDocumentSaveReason.Manual = 1;
                    /**
     * Automatic after a delay.
     */ TextDocumentSaveReason.AfterDelay = 2;
                    /**
     * When the editor lost focus.
     */ TextDocumentSaveReason.FocusOut = 3;
                })(TextDocumentSaveReason = exports1.TextDocumentSaveReason || (exports1.TextDocumentSaveReason = {}));
                /**
 * A document will save notification is sent from the client to the server before
 * the document is actually saved.
 */ var WillSaveTextDocumentNotification;
                (function(WillSaveTextDocumentNotification) {
                    WillSaveTextDocumentNotification.method = 'textDocument/willSave';
                    WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);
                })(WillSaveTextDocumentNotification = exports1.WillSaveTextDocumentNotification || (exports1.WillSaveTextDocumentNotification = {}));
                /**
 * A document will save request is sent from the client to the server before
 * the document is actually saved. The request can return an array of TextEdits
 * which will be applied to the text document before it is saved. Please note that
 * clients might drop results if computing the text edits took too long or if a
 * server constantly fails on this request. This is done to keep the save fast and
 * reliable.
 */ var WillSaveTextDocumentWaitUntilRequest;
                (function(WillSaveTextDocumentWaitUntilRequest) {
                    WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';
                    WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);
                })(WillSaveTextDocumentWaitUntilRequest = exports1.WillSaveTextDocumentWaitUntilRequest || (exports1.WillSaveTextDocumentWaitUntilRequest = {}));
                /**
 * The watched files notification is sent from the client to the server when
 * the client detects changes to file watched by the language client.
 */ var DidChangeWatchedFilesNotification;
                (function(DidChangeWatchedFilesNotification) {
                    DidChangeWatchedFilesNotification.method = 'workspace/didChangeWatchedFiles';
                    DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);
                })(DidChangeWatchedFilesNotification = exports1.DidChangeWatchedFilesNotification || (exports1.DidChangeWatchedFilesNotification = {}));
                /**
 * The file event type
 */ var FileChangeType;
                (function(FileChangeType) {
                    /**
     * The file got created.
     */ FileChangeType.Created = 1;
                    /**
     * The file got changed.
     */ FileChangeType.Changed = 2;
                    /**
     * The file got deleted.
     */ FileChangeType.Deleted = 3;
                })(FileChangeType = exports1.FileChangeType || (exports1.FileChangeType = {}));
                var RelativePattern;
                (function(RelativePattern) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);
                    }
                    RelativePattern.is = is;
                })(RelativePattern = exports1.RelativePattern || (exports1.RelativePattern = {}));
                var WatchKind;
                (function(WatchKind) {
                    /**
     * Interested in create events.
     */ WatchKind.Create = 1;
                    /**
     * Interested in change events
     */ WatchKind.Change = 2;
                    /**
     * Interested in delete events
     */ WatchKind.Delete = 4;
                })(WatchKind = exports1.WatchKind || (exports1.WatchKind = {}));
                /**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */ var PublishDiagnosticsNotification;
                (function(PublishDiagnosticsNotification) {
                    PublishDiagnosticsNotification.method = 'textDocument/publishDiagnostics';
                    PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;
                    PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);
                })(PublishDiagnosticsNotification = exports1.PublishDiagnosticsNotification || (exports1.PublishDiagnosticsNotification = {}));
                /**
 * How a completion was triggered
 */ var CompletionTriggerKind;
                (function(CompletionTriggerKind) {
                    /**
     * Completion was triggered by typing an identifier (24x7 code
     * complete), manual invocation (e.g Ctrl+Space) or via API.
     */ CompletionTriggerKind.Invoked = 1;
                    /**
     * Completion was triggered by a trigger character specified by
     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
     */ CompletionTriggerKind.TriggerCharacter = 2;
                    /**
     * Completion was re-triggered as current completion list is incomplete
     */ CompletionTriggerKind.TriggerForIncompleteCompletions = 3;
                })(CompletionTriggerKind = exports1.CompletionTriggerKind || (exports1.CompletionTriggerKind = {}));
                /**
 * Request to request completion at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response
 * is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}
 * or a Thenable that resolves to such.
 *
 * The request can delay the computation of the {@link CompletionItem.detail `detail`}
 * and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`
 * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
 * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
 */ var CompletionRequest;
                (function(CompletionRequest) {
                    CompletionRequest.method = 'textDocument/completion';
                    CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);
                })(CompletionRequest = exports1.CompletionRequest || (exports1.CompletionRequest = {}));
                /**
 * Request to resolve additional information for a given completion item.The request's
 * parameter is of type {@link CompletionItem} the response
 * is of type {@link CompletionItem} or a Thenable that resolves to such.
 */ var CompletionResolveRequest;
                (function(CompletionResolveRequest) {
                    CompletionResolveRequest.method = 'completionItem/resolve';
                    CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);
                })(CompletionResolveRequest = exports1.CompletionResolveRequest || (exports1.CompletionResolveRequest = {}));
                /**
 * Request to request hover information at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response is of
 * type {@link Hover} or a Thenable that resolves to such.
 */ var HoverRequest;
                (function(HoverRequest) {
                    HoverRequest.method = 'textDocument/hover';
                    HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);
                })(HoverRequest = exports1.HoverRequest || (exports1.HoverRequest = {}));
                /**
 * How a signature help was triggered.
 *
 * @since 3.15.0
 */ var SignatureHelpTriggerKind;
                (function(SignatureHelpTriggerKind) {
                    /**
     * Signature help was invoked manually by the user or by a command.
     */ SignatureHelpTriggerKind.Invoked = 1;
                    /**
     * Signature help was triggered by a trigger character.
     */ SignatureHelpTriggerKind.TriggerCharacter = 2;
                    /**
     * Signature help was triggered by the cursor moving or by the document content changing.
     */ SignatureHelpTriggerKind.ContentChange = 3;
                })(SignatureHelpTriggerKind = exports1.SignatureHelpTriggerKind || (exports1.SignatureHelpTriggerKind = {}));
                var SignatureHelpRequest;
                (function(SignatureHelpRequest) {
                    SignatureHelpRequest.method = 'textDocument/signatureHelp';
                    SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);
                })(SignatureHelpRequest = exports1.SignatureHelpRequest || (exports1.SignatureHelpRequest = {}));
                /**
 * A request to resolve the definition location of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the response is of either type {@link Definition}
 * or a typed array of {@link DefinitionLink} or a Thenable that resolves
 * to such.
 */ var DefinitionRequest;
                (function(DefinitionRequest) {
                    DefinitionRequest.method = 'textDocument/definition';
                    DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);
                })(DefinitionRequest = exports1.DefinitionRequest || (exports1.DefinitionRequest = {}));
                /**
 * A request to resolve project-wide references for the symbol denoted
 * by the given text document position. The request's parameter is of
 * type {@link ReferenceParams} the response is of type
 * {@link Location Location[]} or a Thenable that resolves to such.
 */ var ReferencesRequest;
                (function(ReferencesRequest) {
                    ReferencesRequest.method = 'textDocument/references';
                    ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);
                })(ReferencesRequest = exports1.ReferencesRequest || (exports1.ReferencesRequest = {}));
                /**
 * Request to resolve a {@link DocumentHighlight} for a given
 * text document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the request response is of type [DocumentHighlight[]]
 * (#DocumentHighlight) or a Thenable that resolves to such.
 */ var DocumentHighlightRequest;
                (function(DocumentHighlightRequest) {
                    DocumentHighlightRequest.method = 'textDocument/documentHighlight';
                    DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);
                })(DocumentHighlightRequest = exports1.DocumentHighlightRequest || (exports1.DocumentHighlightRequest = {}));
                /**
 * A request to list all symbols found in a given text document. The request's
 * parameter is of type {@link TextDocumentIdentifier} the
 * response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable
 * that resolves to such.
 */ var DocumentSymbolRequest;
                (function(DocumentSymbolRequest) {
                    DocumentSymbolRequest.method = 'textDocument/documentSymbol';
                    DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);
                })(DocumentSymbolRequest = exports1.DocumentSymbolRequest || (exports1.DocumentSymbolRequest = {}));
                /**
 * A request to provide commands for the given text document and range.
 */ var CodeActionRequest;
                (function(CodeActionRequest) {
                    CodeActionRequest.method = 'textDocument/codeAction';
                    CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);
                })(CodeActionRequest = exports1.CodeActionRequest || (exports1.CodeActionRequest = {}));
                /**
 * Request to resolve additional information for a given code action.The request's
 * parameter is of type {@link CodeAction} the response
 * is of type {@link CodeAction} or a Thenable that resolves to such.
 */ var CodeActionResolveRequest;
                (function(CodeActionResolveRequest) {
                    CodeActionResolveRequest.method = 'codeAction/resolve';
                    CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);
                })(CodeActionResolveRequest = exports1.CodeActionResolveRequest || (exports1.CodeActionResolveRequest = {}));
                /**
 * A request to list project-wide symbols matching the query string given
 * by the {@link WorkspaceSymbolParams}. The response is
 * of type {@link SymbolInformation SymbolInformation[]} or a Thenable that
 * resolves to such.
 *
 * @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients
 *  need to advertise support for WorkspaceSymbols via the client capability
 *  `workspace.symbol.resolveSupport`.
 *
 */ var WorkspaceSymbolRequest;
                (function(WorkspaceSymbolRequest) {
                    WorkspaceSymbolRequest.method = 'workspace/symbol';
                    WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);
                })(WorkspaceSymbolRequest = exports1.WorkspaceSymbolRequest || (exports1.WorkspaceSymbolRequest = {}));
                /**
 * A request to resolve the range inside the workspace
 * symbol's location.
 *
 * @since 3.17.0
 */ var WorkspaceSymbolResolveRequest;
                (function(WorkspaceSymbolResolveRequest) {
                    WorkspaceSymbolResolveRequest.method = 'workspaceSymbol/resolve';
                    WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);
                })(WorkspaceSymbolResolveRequest = exports1.WorkspaceSymbolResolveRequest || (exports1.WorkspaceSymbolResolveRequest = {}));
                /**
 * A request to provide code lens for the given text document.
 */ var CodeLensRequest;
                (function(CodeLensRequest) {
                    CodeLensRequest.method = 'textDocument/codeLens';
                    CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);
                })(CodeLensRequest = exports1.CodeLensRequest || (exports1.CodeLensRequest = {}));
                /**
 * A request to resolve a command for a given code lens.
 */ var CodeLensResolveRequest;
                (function(CodeLensResolveRequest) {
                    CodeLensResolveRequest.method = 'codeLens/resolve';
                    CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);
                })(CodeLensResolveRequest = exports1.CodeLensResolveRequest || (exports1.CodeLensResolveRequest = {}));
                /**
 * A request to refresh all code actions
 *
 * @since 3.16.0
 */ var CodeLensRefreshRequest;
                (function(CodeLensRefreshRequest) {
                    CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;
                    CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);
                })(CodeLensRefreshRequest = exports1.CodeLensRefreshRequest || (exports1.CodeLensRefreshRequest = {}));
                /**
 * A request to provide document links
 */ var DocumentLinkRequest;
                (function(DocumentLinkRequest) {
                    DocumentLinkRequest.method = 'textDocument/documentLink';
                    DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);
                })(DocumentLinkRequest = exports1.DocumentLinkRequest || (exports1.DocumentLinkRequest = {}));
                /**
 * Request to resolve additional information for a given document link. The request's
 * parameter is of type {@link DocumentLink} the response
 * is of type {@link DocumentLink} or a Thenable that resolves to such.
 */ var DocumentLinkResolveRequest;
                (function(DocumentLinkResolveRequest) {
                    DocumentLinkResolveRequest.method = 'documentLink/resolve';
                    DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);
                })(DocumentLinkResolveRequest = exports1.DocumentLinkResolveRequest || (exports1.DocumentLinkResolveRequest = {}));
                /**
 * A request to to format a whole document.
 */ var DocumentFormattingRequest;
                (function(DocumentFormattingRequest) {
                    DocumentFormattingRequest.method = 'textDocument/formatting';
                    DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);
                })(DocumentFormattingRequest = exports1.DocumentFormattingRequest || (exports1.DocumentFormattingRequest = {}));
                /**
 * A request to to format a range in a document.
 */ var DocumentRangeFormattingRequest;
                (function(DocumentRangeFormattingRequest) {
                    DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';
                    DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);
                })(DocumentRangeFormattingRequest = exports1.DocumentRangeFormattingRequest || (exports1.DocumentRangeFormattingRequest = {}));
                /**
 * A request to format a document on type.
 */ var DocumentOnTypeFormattingRequest;
                (function(DocumentOnTypeFormattingRequest) {
                    DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';
                    DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);
                })(DocumentOnTypeFormattingRequest = exports1.DocumentOnTypeFormattingRequest || (exports1.DocumentOnTypeFormattingRequest = {}));
                //---- Rename ----------------------------------------------
                var PrepareSupportDefaultBehavior;
                (function(PrepareSupportDefaultBehavior) {
                    /**
     * The client's default behavior is to select the identifier
     * according the to language's syntax rule.
     */ PrepareSupportDefaultBehavior.Identifier = 1;
                })(PrepareSupportDefaultBehavior = exports1.PrepareSupportDefaultBehavior || (exports1.PrepareSupportDefaultBehavior = {}));
                /**
 * A request to rename a symbol.
 */ var RenameRequest;
                (function(RenameRequest) {
                    RenameRequest.method = 'textDocument/rename';
                    RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);
                })(RenameRequest = exports1.RenameRequest || (exports1.RenameRequest = {}));
                /**
 * A request to test and perform the setup necessary for a rename.
 *
 * @since 3.16 - support for default behavior
 */ var PrepareRenameRequest;
                (function(PrepareRenameRequest) {
                    PrepareRenameRequest.method = 'textDocument/prepareRename';
                    PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);
                })(PrepareRenameRequest = exports1.PrepareRenameRequest || (exports1.PrepareRenameRequest = {}));
                /**
 * A request send from the client to the server to execute a command. The request might return
 * a workspace edit which the client will apply to the workspace.
 */ var ExecuteCommandRequest;
                (function(ExecuteCommandRequest) {
                    ExecuteCommandRequest.method = 'workspace/executeCommand';
                    ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);
                })(ExecuteCommandRequest = exports1.ExecuteCommandRequest || (exports1.ExecuteCommandRequest = {}));
                /**
 * A request sent from the server to the client to modified certain resources.
 */ var ApplyWorkspaceEditRequest;
                (function(ApplyWorkspaceEditRequest) {
                    ApplyWorkspaceEditRequest.method = 'workspace/applyEdit';
                    ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');
                })(ApplyWorkspaceEditRequest = exports1.ApplyWorkspaceEditRequest || (exports1.ApplyWorkspaceEditRequest = {}));
            /***/ },
            /***/ 2249: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_802240__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.LinkedEditingRangeRequest = void 0;
                const messages_1 = __nested_webpack_require_802240__(8431);
                /**
 * A request to provide ranges that can be edited together.
 *
 * @since 3.16.0
 */ var LinkedEditingRangeRequest;
                (function(LinkedEditingRangeRequest) {
                    LinkedEditingRangeRequest.method = 'textDocument/linkedEditingRange';
                    LinkedEditingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    LinkedEditingRangeRequest.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest.method);
                })(LinkedEditingRangeRequest = exports1.LinkedEditingRangeRequest || (exports1.LinkedEditingRangeRequest = {}));
            /***/ },
            /***/ 7684: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_803613__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.MonikerRequest = exports1.MonikerKind = exports1.UniquenessLevel = void 0;
                const messages_1 = __nested_webpack_require_803613__(8431);
                /**
 * Moniker uniqueness level to define scope of the moniker.
 *
 * @since 3.16.0
 */ var UniquenessLevel;
                (function(UniquenessLevel) {
                    /**
     * The moniker is only unique inside a document
     */ UniquenessLevel.document = 'document';
                    /**
     * The moniker is unique inside a project for which a dump got created
     */ UniquenessLevel.project = 'project';
                    /**
     * The moniker is unique inside the group to which a project belongs
     */ UniquenessLevel.group = 'group';
                    /**
     * The moniker is unique inside the moniker scheme.
     */ UniquenessLevel.scheme = 'scheme';
                    /**
     * The moniker is globally unique
     */ UniquenessLevel.global = 'global';
                })(UniquenessLevel = exports1.UniquenessLevel || (exports1.UniquenessLevel = {}));
                /**
 * The moniker kind.
 *
 * @since 3.16.0
 */ var MonikerKind;
                (function(MonikerKind) {
                    /**
     * The moniker represent a symbol that is imported into a project
     */ MonikerKind.$import = 'import';
                    /**
     * The moniker represents a symbol that is exported from a project
     */ MonikerKind.$export = 'export';
                    /**
     * The moniker represents a symbol that is local to a project (e.g. a local
     * variable of a function, a class not visible outside the project, ...)
     */ MonikerKind.local = 'local';
                })(MonikerKind = exports1.MonikerKind || (exports1.MonikerKind = {}));
                /**
 * A request to get the moniker of a symbol at a given text document position.
 * The request parameter is of type {@link TextDocumentPositionParams}.
 * The response is of type {@link Moniker Moniker[]} or `null`.
 */ var MonikerRequest;
                (function(MonikerRequest) {
                    MonikerRequest.method = 'textDocument/moniker';
                    MonikerRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    MonikerRequest.type = new messages_1.ProtocolRequestType(MonikerRequest.method);
                })(MonikerRequest = exports1.MonikerRequest || (exports1.MonikerRequest = {}));
            /***/ },
            /***/ 4792: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_806647__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.DidCloseNotebookDocumentNotification = exports1.DidSaveNotebookDocumentNotification = exports1.DidChangeNotebookDocumentNotification = exports1.NotebookCellArrayChange = exports1.DidOpenNotebookDocumentNotification = exports1.NotebookDocumentSyncRegistrationType = exports1.NotebookDocument = exports1.NotebookCell = exports1.ExecutionSummary = exports1.NotebookCellKind = void 0;
                const vscode_languageserver_types_1 = __nested_webpack_require_806647__(7717);
                const Is = __nested_webpack_require_806647__(8633);
                const messages_1 = __nested_webpack_require_806647__(8431);
                /**
 * A notebook cell kind.
 *
 * @since 3.17.0
 */ var NotebookCellKind;
                (function(NotebookCellKind) {
                    /**
     * A markup-cell is formatted source that is used for display.
     */ NotebookCellKind.Markup = 1;
                    /**
     * A code-cell is source code.
     */ NotebookCellKind.Code = 2;
                    function is(value) {
                        return value === 1 || value === 2;
                    }
                    NotebookCellKind.is = is;
                })(NotebookCellKind = exports1.NotebookCellKind || (exports1.NotebookCellKind = {}));
                var ExecutionSummary;
                (function(ExecutionSummary) {
                    function create(executionOrder, success) {
                        const result = {
                            executionOrder
                        };
                        if (success === true || success === false) {
                            result.success = success;
                        }
                        return result;
                    }
                    ExecutionSummary.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === undefined || Is.boolean(candidate.success));
                    }
                    ExecutionSummary.is = is;
                    function equals(one, other) {
                        if (one === other) {
                            return true;
                        }
                        if (one === null || one === undefined || other === null || other === undefined) {
                            return false;
                        }
                        return one.executionOrder === other.executionOrder && one.success === other.success;
                    }
                    ExecutionSummary.equals = equals;
                })(ExecutionSummary = exports1.ExecutionSummary || (exports1.ExecutionSummary = {}));
                var NotebookCell;
                (function(NotebookCell) {
                    function create(kind, document1) {
                        return {
                            kind,
                            document: document1
                        };
                    }
                    NotebookCell.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) && (candidate.metadata === undefined || Is.objectLiteral(candidate.metadata));
                    }
                    NotebookCell.is = is;
                    function diff(one, two) {
                        const result = new Set();
                        if (one.document !== two.document) {
                            result.add('document');
                        }
                        if (one.kind !== two.kind) {
                            result.add('kind');
                        }
                        if (one.executionSummary !== two.executionSummary) {
                            result.add('executionSummary');
                        }
                        if ((one.metadata !== undefined || two.metadata !== undefined) && !equalsMetadata(one.metadata, two.metadata)) {
                            result.add('metadata');
                        }
                        if ((one.executionSummary !== undefined || two.executionSummary !== undefined) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
                            result.add('executionSummary');
                        }
                        return result;
                    }
                    NotebookCell.diff = diff;
                    function equalsMetadata(one, other) {
                        if (one === other) {
                            return true;
                        }
                        if (one === null || one === undefined || other === null || other === undefined) {
                            return false;
                        }
                        if (typeof one !== typeof other) {
                            return false;
                        }
                        if (typeof one !== 'object') {
                            return false;
                        }
                        const oneArray = Array.isArray(one);
                        const otherArray = Array.isArray(other);
                        if (oneArray !== otherArray) {
                            return false;
                        }
                        if (oneArray && otherArray) {
                            if (one.length !== other.length) {
                                return false;
                            }
                            for(let i = 0; i < one.length; i++){
                                if (!equalsMetadata(one[i], other[i])) {
                                    return false;
                                }
                            }
                        }
                        if (Is.objectLiteral(one) && Is.objectLiteral(other)) {
                            const oneKeys = Object.keys(one);
                            const otherKeys = Object.keys(other);
                            if (oneKeys.length !== otherKeys.length) {
                                return false;
                            }
                            oneKeys.sort();
                            otherKeys.sort();
                            if (!equalsMetadata(oneKeys, otherKeys)) {
                                return false;
                            }
                            for(let i = 0; i < oneKeys.length; i++){
                                const prop = oneKeys[i];
                                if (!equalsMetadata(one[prop], other[prop])) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    }
                })(NotebookCell = exports1.NotebookCell || (exports1.NotebookCell = {}));
                var NotebookDocument;
                (function(NotebookDocument) {
                    function create(uri, notebookType, version, cells) {
                        return {
                            uri,
                            notebookType,
                            version,
                            cells
                        };
                    }
                    NotebookDocument.create = create;
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);
                    }
                    NotebookDocument.is = is;
                })(NotebookDocument = exports1.NotebookDocument || (exports1.NotebookDocument = {}));
                var NotebookDocumentSyncRegistrationType;
                (function(NotebookDocumentSyncRegistrationType) {
                    NotebookDocumentSyncRegistrationType.method = 'notebookDocument/sync';
                    NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer;
                    NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);
                })(NotebookDocumentSyncRegistrationType = exports1.NotebookDocumentSyncRegistrationType || (exports1.NotebookDocumentSyncRegistrationType = {}));
                /**
 * A notification sent when a notebook opens.
 *
 * @since 3.17.0
 */ var DidOpenNotebookDocumentNotification;
                (function(DidOpenNotebookDocumentNotification) {
                    DidOpenNotebookDocumentNotification.method = 'notebookDocument/didOpen';
                    DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);
                    DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
                })(DidOpenNotebookDocumentNotification = exports1.DidOpenNotebookDocumentNotification || (exports1.DidOpenNotebookDocumentNotification = {}));
                var NotebookCellArrayChange;
                (function(NotebookCellArrayChange) {
                    function is(value) {
                        const candidate = value;
                        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === undefined || Is.typedArray(candidate.cells, NotebookCell.is));
                    }
                    NotebookCellArrayChange.is = is;
                    function create(start, deleteCount, cells) {
                        const result = {
                            start,
                            deleteCount
                        };
                        if (cells !== undefined) {
                            result.cells = cells;
                        }
                        return result;
                    }
                    NotebookCellArrayChange.create = create;
                })(NotebookCellArrayChange = exports1.NotebookCellArrayChange || (exports1.NotebookCellArrayChange = {}));
                var DidChangeNotebookDocumentNotification;
                (function(DidChangeNotebookDocumentNotification) {
                    DidChangeNotebookDocumentNotification.method = 'notebookDocument/didChange';
                    DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);
                    DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
                })(DidChangeNotebookDocumentNotification = exports1.DidChangeNotebookDocumentNotification || (exports1.DidChangeNotebookDocumentNotification = {}));
                /**
 * A notification sent when a notebook document is saved.
 *
 * @since 3.17.0
 */ var DidSaveNotebookDocumentNotification;
                (function(DidSaveNotebookDocumentNotification) {
                    DidSaveNotebookDocumentNotification.method = 'notebookDocument/didSave';
                    DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);
                    DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
                })(DidSaveNotebookDocumentNotification = exports1.DidSaveNotebookDocumentNotification || (exports1.DidSaveNotebookDocumentNotification = {}));
                /**
 * A notification sent when a notebook closes.
 *
 * @since 3.17.0
 */ var DidCloseNotebookDocumentNotification;
                (function(DidCloseNotebookDocumentNotification) {
                    DidCloseNotebookDocumentNotification.method = 'notebookDocument/didClose';
                    DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);
                    DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
                })(DidCloseNotebookDocumentNotification = exports1.DidCloseNotebookDocumentNotification || (exports1.DidCloseNotebookDocumentNotification = {}));
            /***/ },
            /***/ 4166: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_820224__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.WorkDoneProgressCancelNotification = exports1.WorkDoneProgressCreateRequest = exports1.WorkDoneProgress = void 0;
                const vscode_jsonrpc_1 = __nested_webpack_require_820224__(9110);
                const messages_1 = __nested_webpack_require_820224__(8431);
                var WorkDoneProgress;
                (function(WorkDoneProgress) {
                    WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();
                    function is(value) {
                        return value === WorkDoneProgress.type;
                    }
                    WorkDoneProgress.is = is;
                })(WorkDoneProgress = exports1.WorkDoneProgress || (exports1.WorkDoneProgress = {}));
                /**
 * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress
 * reporting from the server.
 */ var WorkDoneProgressCreateRequest;
                (function(WorkDoneProgressCreateRequest) {
                    WorkDoneProgressCreateRequest.method = 'window/workDoneProgress/create';
                    WorkDoneProgressCreateRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest.method);
                })(WorkDoneProgressCreateRequest = exports1.WorkDoneProgressCreateRequest || (exports1.WorkDoneProgressCreateRequest = {}));
                /**
 * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress
 * initiated on the server side.
 */ var WorkDoneProgressCancelNotification;
                (function(WorkDoneProgressCancelNotification) {
                    WorkDoneProgressCancelNotification.method = 'window/workDoneProgress/cancel';
                    WorkDoneProgressCancelNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification.method);
                })(WorkDoneProgressCancelNotification = exports1.WorkDoneProgressCancelNotification || (exports1.WorkDoneProgressCancelNotification = {}));
            /***/ },
            /***/ 1530: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_823065__)=>{
                "use strict";
                /*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.SelectionRangeRequest = void 0;
                const messages_1 = __nested_webpack_require_823065__(8431);
                /**
 * A request to provide selection ranges in a document. The request's
 * parameter is of type {@link SelectionRangeParams}, the
 * response is of type {@link SelectionRange SelectionRange[]} or a Thenable
 * that resolves to such.
 */ var SelectionRangeRequest;
                (function(SelectionRangeRequest) {
                    SelectionRangeRequest.method = 'textDocument/selectionRange';
                    SelectionRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SelectionRangeRequest.type = new messages_1.ProtocolRequestType(SelectionRangeRequest.method);
                })(SelectionRangeRequest = exports1.SelectionRangeRequest || (exports1.SelectionRangeRequest = {}));
            /***/ },
            /***/ 2067: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_824545__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.SemanticTokensRefreshRequest = exports1.SemanticTokensRangeRequest = exports1.SemanticTokensDeltaRequest = exports1.SemanticTokensRequest = exports1.SemanticTokensRegistrationType = exports1.TokenFormat = void 0;
                const messages_1 = __nested_webpack_require_824545__(8431);
                //------- 'textDocument/semanticTokens' -----
                var TokenFormat;
                (function(TokenFormat) {
                    TokenFormat.Relative = 'relative';
                })(TokenFormat = exports1.TokenFormat || (exports1.TokenFormat = {}));
                var SemanticTokensRegistrationType;
                (function(SemanticTokensRegistrationType) {
                    SemanticTokensRegistrationType.method = 'textDocument/semanticTokens';
                    SemanticTokensRegistrationType.type = new messages_1.RegistrationType(SemanticTokensRegistrationType.method);
                })(SemanticTokensRegistrationType = exports1.SemanticTokensRegistrationType || (exports1.SemanticTokensRegistrationType = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokensRequest;
                (function(SemanticTokensRequest) {
                    SemanticTokensRequest.method = 'textDocument/semanticTokens/full';
                    SemanticTokensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SemanticTokensRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRequest.method);
                    SemanticTokensRequest.registrationMethod = SemanticTokensRegistrationType.method;
                })(SemanticTokensRequest = exports1.SemanticTokensRequest || (exports1.SemanticTokensRequest = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokensDeltaRequest;
                (function(SemanticTokensDeltaRequest) {
                    SemanticTokensDeltaRequest.method = 'textDocument/semanticTokens/full/delta';
                    SemanticTokensDeltaRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SemanticTokensDeltaRequest.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest.method);
                    SemanticTokensDeltaRequest.registrationMethod = SemanticTokensRegistrationType.method;
                })(SemanticTokensDeltaRequest = exports1.SemanticTokensDeltaRequest || (exports1.SemanticTokensDeltaRequest = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokensRangeRequest;
                (function(SemanticTokensRangeRequest) {
                    SemanticTokensRangeRequest.method = 'textDocument/semanticTokens/range';
                    SemanticTokensRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    SemanticTokensRangeRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest.method);
                    SemanticTokensRangeRequest.registrationMethod = SemanticTokensRegistrationType.method;
                })(SemanticTokensRangeRequest = exports1.SemanticTokensRangeRequest || (exports1.SemanticTokensRangeRequest = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokensRefreshRequest;
                (function(SemanticTokensRefreshRequest) {
                    SemanticTokensRefreshRequest.method = `workspace/semanticTokens/refresh`;
                    SemanticTokensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    SemanticTokensRefreshRequest.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest.method);
                })(SemanticTokensRefreshRequest = exports1.SemanticTokensRefreshRequest || (exports1.SemanticTokensRefreshRequest = {}));
            /***/ },
            /***/ 4333: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_828856__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.ShowDocumentRequest = void 0;
                const messages_1 = __nested_webpack_require_828856__(8431);
                /**
 * A request to show a document. This request might open an
 * external program depending on the value of the URI to open.
 * For example a request to open `https://code.visualstudio.com/`
 * will very likely open the URI in a WEB browser.
 *
 * @since 3.16.0
*/ var ShowDocumentRequest;
                (function(ShowDocumentRequest) {
                    ShowDocumentRequest.method = 'window/showDocument';
                    ShowDocumentRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    ShowDocumentRequest.type = new messages_1.ProtocolRequestType(ShowDocumentRequest.method);
                })(ShowDocumentRequest = exports1.ShowDocumentRequest || (exports1.ShowDocumentRequest = {}));
            /***/ },
            /***/ 9264: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_830334__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.TypeDefinitionRequest = void 0;
                const messages_1 = __nested_webpack_require_830334__(8431);
                // @ts-ignore: to avoid inlining LocatioLink as dynamic import
                let __noDynamicImport;
                /**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPositionParams]
 * (#TextDocumentPositionParams) the response is of type {@link Definition} or a
 * Thenable that resolves to such.
 */ var TypeDefinitionRequest;
                (function(TypeDefinitionRequest) {
                    TypeDefinitionRequest.method = 'textDocument/typeDefinition';
                    TypeDefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    TypeDefinitionRequest.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest.method);
                })(TypeDefinitionRequest = exports1.TypeDefinitionRequest || (exports1.TypeDefinitionRequest = {}));
            /***/ },
            /***/ 7062: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_831983__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.TypeHierarchySubtypesRequest = exports1.TypeHierarchySupertypesRequest = exports1.TypeHierarchyPrepareRequest = void 0;
                const messages_1 = __nested_webpack_require_831983__(8431);
                /**
 * A request to result a `TypeHierarchyItem` in a document at a given position.
 * Can be used as an input to a subtypes or supertypes type hierarchy.
 *
 * @since 3.17.0
 */ var TypeHierarchyPrepareRequest;
                (function(TypeHierarchyPrepareRequest) {
                    TypeHierarchyPrepareRequest.method = 'textDocument/prepareTypeHierarchy';
                    TypeHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    TypeHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest.method);
                })(TypeHierarchyPrepareRequest = exports1.TypeHierarchyPrepareRequest || (exports1.TypeHierarchyPrepareRequest = {}));
                /**
 * A request to resolve the supertypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */ var TypeHierarchySupertypesRequest;
                (function(TypeHierarchySupertypesRequest) {
                    TypeHierarchySupertypesRequest.method = 'typeHierarchy/supertypes';
                    TypeHierarchySupertypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    TypeHierarchySupertypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest.method);
                })(TypeHierarchySupertypesRequest = exports1.TypeHierarchySupertypesRequest || (exports1.TypeHierarchySupertypesRequest = {}));
                /**
 * A request to resolve the subtypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */ var TypeHierarchySubtypesRequest;
                (function(TypeHierarchySubtypesRequest) {
                    TypeHierarchySubtypesRequest.method = 'typeHierarchy/subtypes';
                    TypeHierarchySubtypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
                    TypeHierarchySubtypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest.method);
                })(TypeHierarchySubtypesRequest = exports1.TypeHierarchySubtypesRequest || (exports1.TypeHierarchySubtypesRequest = {}));
            /***/ },
            /***/ 6860: /***/ (__unused_webpack_module, exports1, __nested_webpack_require_834917__)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.DidChangeWorkspaceFoldersNotification = exports1.WorkspaceFoldersRequest = void 0;
                const messages_1 = __nested_webpack_require_834917__(8431);
                /**
 * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
 */ var WorkspaceFoldersRequest;
                (function(WorkspaceFoldersRequest) {
                    WorkspaceFoldersRequest.method = 'workspace/workspaceFolders';
                    WorkspaceFoldersRequest.messageDirection = messages_1.MessageDirection.serverToClient;
                    WorkspaceFoldersRequest.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest.method);
                })(WorkspaceFoldersRequest = exports1.WorkspaceFoldersRequest || (exports1.WorkspaceFoldersRequest = {}));
                /**
 * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
 * folder configuration changes.
 */ var DidChangeWorkspaceFoldersNotification;
                (function(DidChangeWorkspaceFoldersNotification) {
                    DidChangeWorkspaceFoldersNotification.method = 'workspace/didChangeWorkspaceFolders';
                    DidChangeWorkspaceFoldersNotification.messageDirection = messages_1.MessageDirection.clientToServer;
                    DidChangeWorkspaceFoldersNotification.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification.method);
                })(DidChangeWorkspaceFoldersNotification = exports1.DidChangeWorkspaceFoldersNotification || (exports1.DidChangeWorkspaceFoldersNotification = {}));
            /***/ },
            /***/ 8633: /***/ (__unused_webpack_module, exports1)=>{
                "use strict";
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ Object.defineProperty(exports1, "__esModule", {
                    value: true
                });
                exports1.objectLiteral = exports1.typedArray = exports1.stringArray = exports1.array = exports1.func = exports1.error = exports1.number = exports1.string = exports1.boolean = void 0;
                function boolean(value) {
                    return value === true || value === false;
                }
                exports1.boolean = boolean;
                function string(value) {
                    return typeof value === 'string' || value instanceof String;
                }
                exports1.string = string;
                function number(value) {
                    return typeof value === 'number' || value instanceof Number;
                }
                exports1.number = number;
                function error(value) {
                    return value instanceof Error;
                }
                exports1.error = error;
                function func(value) {
                    return typeof value === 'function';
                }
                exports1.func = func;
                function array(value) {
                    return Array.isArray(value);
                }
                exports1.array = array;
                function stringArray(value) {
                    return array(value) && value.every((elem)=>string(elem));
                }
                exports1.stringArray = stringArray;
                function typedArray(value, check) {
                    return Array.isArray(value) && value.every(check);
                }
                exports1.typedArray = typedArray;
                function objectLiteral(value) {
                    // Strictly speaking class instances pass this check as well. Since the LSP
                    // doesn't use classes we ignore this for now. If we do we need to add something
                    // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
                    return value !== null && typeof value === 'object';
                }
                exports1.objectLiteral = objectLiteral;
            /***/ },
            /***/ 8778: /***/ (__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_839812__)=>{
                "use strict";
                /* harmony export */ __nested_webpack_require_839812__.d(__nested_webpack_exports__, {
                    /* harmony export */ V: ()=>/* binding */ TextDocument
                });
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var __spreadArray =  false || function(to, from, pack) {
                    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){
                        if (ar || !(i in from)) {
                            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                            ar[i] = from[i];
                        }
                    }
                    return to.concat(ar || Array.prototype.slice.call(from));
                };
                var FullTextDocument = /** @class */ function() {
                    function FullTextDocument(uri, languageId, version, content) {
                        this._uri = uri;
                        this._languageId = languageId;
                        this._version = version;
                        this._content = content;
                        this._lineOffsets = undefined;
                    }
                    Object.defineProperty(FullTextDocument.prototype, "uri", {
                        get: function() {
                            return this._uri;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(FullTextDocument.prototype, "languageId", {
                        get: function() {
                            return this._languageId;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(FullTextDocument.prototype, "version", {
                        get: function() {
                            return this._version;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    FullTextDocument.prototype.getText = function(range) {
                        if (range) {
                            var start = this.offsetAt(range.start);
                            var end = this.offsetAt(range.end);
                            return this._content.substring(start, end);
                        }
                        return this._content;
                    };
                    FullTextDocument.prototype.update = function(changes, version) {
                        for(var _i = 0, changes_1 = changes; _i < changes_1.length; _i++){
                            var change = changes_1[_i];
                            if (FullTextDocument.isIncremental(change)) {
                                // makes sure start is before end
                                var range = getWellformedRange(change.range);
                                // update content
                                var startOffset = this.offsetAt(range.start);
                                var endOffset = this.offsetAt(range.end);
                                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
                                // update the offsets
                                var startLine = Math.max(range.start.line, 0);
                                var endLine = Math.max(range.end.line, 0);
                                var lineOffsets = this._lineOffsets;
                                var addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
                                if (endLine - startLine === addedLineOffsets.length) {
                                    for(var i = 0, len = addedLineOffsets.length; i < len; i++){
                                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                                    }
                                } else {
                                    if (addedLineOffsets.length < 10000) {
                                        lineOffsets.splice.apply(lineOffsets, __spreadArray([
                                            startLine + 1,
                                            endLine - startLine
                                        ], addedLineOffsets, false));
                                    } else {
                                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                                    }
                                }
                                var diff = change.text.length - (endOffset - startOffset);
                                if (diff !== 0) {
                                    for(var i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++){
                                        lineOffsets[i] = lineOffsets[i] + diff;
                                    }
                                }
                            } else if (FullTextDocument.isFull(change)) {
                                this._content = change.text;
                                this._lineOffsets = undefined;
                            } else {
                                throw new Error('Unknown change event received');
                            }
                        }
                        this._version = version;
                    };
                    FullTextDocument.prototype.getLineOffsets = function() {
                        if (this._lineOffsets === undefined) {
                            this._lineOffsets = computeLineOffsets(this._content, true);
                        }
                        return this._lineOffsets;
                    };
                    FullTextDocument.prototype.positionAt = function(offset) {
                        offset = Math.max(Math.min(offset, this._content.length), 0);
                        var lineOffsets = this.getLineOffsets();
                        var low = 0, high = lineOffsets.length;
                        if (high === 0) {
                            return {
                                line: 0,
                                character: offset
                            };
                        }
                        while(low < high){
                            var mid = Math.floor((low + high) / 2);
                            if (lineOffsets[mid] > offset) {
                                high = mid;
                            } else {
                                low = mid + 1;
                            }
                        }
                        // low is the least x for which the line offset is larger than the current offset
                        // or array.length if no line offset is larger than the current offset
                        var line = low - 1;
                        return {
                            line: line,
                            character: offset - lineOffsets[line]
                        };
                    };
                    FullTextDocument.prototype.offsetAt = function(position) {
                        var lineOffsets = this.getLineOffsets();
                        if (position.line >= lineOffsets.length) {
                            return this._content.length;
                        } else if (position.line < 0) {
                            return 0;
                        }
                        var lineOffset = lineOffsets[position.line];
                        var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
                        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
                    };
                    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
                        get: function() {
                            return this.getLineOffsets().length;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    FullTextDocument.isIncremental = function(event) {
                        var candidate = event;
                        return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range !== undefined && (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
                    };
                    FullTextDocument.isFull = function(event) {
                        var candidate = event;
                        return candidate !== undefined && candidate !== null && typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
                    };
                    return FullTextDocument;
                }();
                var TextDocument;
                (function(TextDocument) {
                    /**
     * Creates a new text document.
     *
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param version The document's initial version number.
     * @param content The document's content.
     */ function create(uri, languageId, version, content) {
                        return new FullTextDocument(uri, languageId, version, content);
                    }
                    TextDocument.create = create;
                    /**
     * Updates a TextDocument by modifying its content.
     *
     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.
     * @param changes the changes to apply to the document.
     * @param version the changes version for the document.
     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.
     *
     */ function update(document1, changes, version) {
                        if (document1 instanceof FullTextDocument) {
                            document1.update(changes, version);
                            return document1;
                        } else {
                            throw new Error('TextDocument.update: document must be created by TextDocument.create');
                        }
                    }
                    TextDocument.update = update;
                    function applyEdits(document1, edits) {
                        var text = document1.getText();
                        var sortedEdits = mergeSort(edits.map(getWellformedEdit), function(a, b) {
                            var diff = a.range.start.line - b.range.start.line;
                            if (diff === 0) {
                                return a.range.start.character - b.range.start.character;
                            }
                            return diff;
                        });
                        var lastModifiedOffset = 0;
                        var spans = [];
                        for(var _i = 0, sortedEdits_1 = sortedEdits; _i < sortedEdits_1.length; _i++){
                            var e = sortedEdits_1[_i];
                            var startOffset = document1.offsetAt(e.range.start);
                            if (startOffset < lastModifiedOffset) {
                                throw new Error('Overlapping edit');
                            } else if (startOffset > lastModifiedOffset) {
                                spans.push(text.substring(lastModifiedOffset, startOffset));
                            }
                            if (e.newText.length) {
                                spans.push(e.newText);
                            }
                            lastModifiedOffset = document1.offsetAt(e.range.end);
                        }
                        spans.push(text.substr(lastModifiedOffset));
                        return spans.join('');
                    }
                    TextDocument.applyEdits = applyEdits;
                })(TextDocument || (TextDocument = {}));
                function mergeSort(data, compare) {
                    if (data.length <= 1) {
                        // sorted
                        return data;
                    }
                    var p = data.length / 2 | 0;
                    var left = data.slice(0, p);
                    var right = data.slice(p);
                    mergeSort(left, compare);
                    mergeSort(right, compare);
                    var leftIdx = 0;
                    var rightIdx = 0;
                    var i = 0;
                    while(leftIdx < left.length && rightIdx < right.length){
                        var ret = compare(left[leftIdx], right[rightIdx]);
                        if (ret <= 0) {
                            // smaller_equal -> take left to preserve order
                            data[i++] = left[leftIdx++];
                        } else {
                            // greater -> take right
                            data[i++] = right[rightIdx++];
                        }
                    }
                    while(leftIdx < left.length){
                        data[i++] = left[leftIdx++];
                    }
                    while(rightIdx < right.length){
                        data[i++] = right[rightIdx++];
                    }
                    return data;
                }
                function computeLineOffsets(text, isAtLineStart, textOffset) {
                    if (textOffset === void 0) {
                        textOffset = 0;
                    }
                    var result = isAtLineStart ? [
                        textOffset
                    ] : [];
                    for(var i = 0; i < text.length; i++){
                        var ch = text.charCodeAt(i);
                        if (ch === 13 /* CharCode.CarriageReturn */  || ch === 10 /* CharCode.LineFeed */ ) {
                            if (ch === 13 /* CharCode.CarriageReturn */  && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */ ) {
                                i++;
                            }
                            result.push(textOffset + i + 1);
                        }
                    }
                    return result;
                }
                function getWellformedRange(range) {
                    var start = range.start;
                    var end = range.end;
                    if (start.line > end.line || start.line === end.line && start.character > end.character) {
                        return {
                            start: end,
                            end: start
                        };
                    }
                    return range;
                }
                function getWellformedEdit(textEdit) {
                    var range = getWellformedRange(textEdit.range);
                    if (range !== textEdit.range) {
                        return {
                            newText: textEdit.newText,
                            range: range
                        };
                    }
                    return textEdit;
                }
            /***/ },
            /***/ 7717: /***/ (__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_855636__)=>{
                "use strict";
                __nested_webpack_require_855636__.r(__nested_webpack_exports__);
                /* harmony export */ __nested_webpack_require_855636__.d(__nested_webpack_exports__, {
                    /* harmony export */ AnnotatedTextEdit: ()=>/* binding */ AnnotatedTextEdit,
                    /* harmony export */ ChangeAnnotation: ()=>/* binding */ ChangeAnnotation,
                    /* harmony export */ ChangeAnnotationIdentifier: ()=>/* binding */ ChangeAnnotationIdentifier,
                    /* harmony export */ CodeAction: ()=>/* binding */ CodeAction,
                    /* harmony export */ CodeActionContext: ()=>/* binding */ CodeActionContext,
                    /* harmony export */ CodeActionKind: ()=>/* binding */ CodeActionKind,
                    /* harmony export */ CodeActionTriggerKind: ()=>/* binding */ CodeActionTriggerKind,
                    /* harmony export */ CodeDescription: ()=>/* binding */ CodeDescription,
                    /* harmony export */ CodeLens: ()=>/* binding */ CodeLens,
                    /* harmony export */ Color: ()=>/* binding */ Color,
                    /* harmony export */ ColorInformation: ()=>/* binding */ ColorInformation,
                    /* harmony export */ ColorPresentation: ()=>/* binding */ ColorPresentation,
                    /* harmony export */ Command: ()=>/* binding */ Command,
                    /* harmony export */ CompletionItem: ()=>/* binding */ CompletionItem,
                    /* harmony export */ CompletionItemKind: ()=>/* binding */ CompletionItemKind1,
                    /* harmony export */ CompletionItemLabelDetails: ()=>/* binding */ CompletionItemLabelDetails,
                    /* harmony export */ CompletionItemTag: ()=>/* binding */ CompletionItemTag,
                    /* harmony export */ CompletionList: ()=>/* binding */ CompletionList,
                    /* harmony export */ CreateFile: ()=>/* binding */ CreateFile,
                    /* harmony export */ DeleteFile: ()=>/* binding */ DeleteFile,
                    /* harmony export */ Diagnostic: ()=>/* binding */ Diagnostic,
                    /* harmony export */ DiagnosticRelatedInformation: ()=>/* binding */ DiagnosticRelatedInformation,
                    /* harmony export */ DiagnosticSeverity: ()=>/* binding */ DiagnosticSeverity,
                    /* harmony export */ DiagnosticTag: ()=>/* binding */ DiagnosticTag,
                    /* harmony export */ DocumentHighlight: ()=>/* binding */ DocumentHighlight,
                    /* harmony export */ DocumentHighlightKind: ()=>/* binding */ DocumentHighlightKind,
                    /* harmony export */ DocumentLink: ()=>/* binding */ DocumentLink,
                    /* harmony export */ DocumentSymbol: ()=>/* binding */ DocumentSymbol,
                    /* harmony export */ DocumentUri: ()=>/* binding */ DocumentUri,
                    /* harmony export */ EOL: ()=>/* binding */ EOL,
                    /* harmony export */ FoldingRange: ()=>/* binding */ FoldingRange,
                    /* harmony export */ FoldingRangeKind: ()=>/* binding */ FoldingRangeKind,
                    /* harmony export */ FormattingOptions: ()=>/* binding */ FormattingOptions,
                    /* harmony export */ Hover: ()=>/* binding */ Hover,
                    /* harmony export */ InlayHint: ()=>/* binding */ InlayHint,
                    /* harmony export */ InlayHintKind: ()=>/* binding */ InlayHintKind,
                    /* harmony export */ InlayHintLabelPart: ()=>/* binding */ InlayHintLabelPart,
                    /* harmony export */ InlineValueContext: ()=>/* binding */ InlineValueContext,
                    /* harmony export */ InlineValueEvaluatableExpression: ()=>/* binding */ InlineValueEvaluatableExpression,
                    /* harmony export */ InlineValueText: ()=>/* binding */ InlineValueText,
                    /* harmony export */ InlineValueVariableLookup: ()=>/* binding */ InlineValueVariableLookup,
                    /* harmony export */ InsertReplaceEdit: ()=>/* binding */ InsertReplaceEdit,
                    /* harmony export */ InsertTextFormat: ()=>/* binding */ InsertTextFormat1,
                    /* harmony export */ InsertTextMode: ()=>/* binding */ InsertTextMode,
                    /* harmony export */ Location: ()=>/* binding */ Location,
                    /* harmony export */ LocationLink: ()=>/* binding */ LocationLink,
                    /* harmony export */ MarkedString: ()=>/* binding */ MarkedString1,
                    /* harmony export */ MarkupContent: ()=>/* binding */ MarkupContent1,
                    /* harmony export */ MarkupKind: ()=>/* binding */ MarkupKind,
                    /* harmony export */ OptionalVersionedTextDocumentIdentifier: ()=>/* binding */ OptionalVersionedTextDocumentIdentifier,
                    /* harmony export */ ParameterInformation: ()=>/* binding */ ParameterInformation,
                    /* harmony export */ Position: ()=>/* binding */ Position,
                    /* harmony export */ Range: ()=>/* binding */ Range,
                    /* harmony export */ RenameFile: ()=>/* binding */ RenameFile,
                    /* harmony export */ SelectionRange: ()=>/* binding */ SelectionRange,
                    /* harmony export */ SemanticTokenModifiers: ()=>/* binding */ SemanticTokenModifiers,
                    /* harmony export */ SemanticTokenTypes: ()=>/* binding */ SemanticTokenTypes,
                    /* harmony export */ SemanticTokens: ()=>/* binding */ SemanticTokens,
                    /* harmony export */ SignatureInformation: ()=>/* binding */ SignatureInformation,
                    /* harmony export */ SymbolInformation: ()=>/* binding */ SymbolInformation,
                    /* harmony export */ SymbolKind: ()=>/* binding */ SymbolKind,
                    /* harmony export */ SymbolTag: ()=>/* binding */ SymbolTag,
                    /* harmony export */ TextDocument: ()=>/* binding */ TextDocument,
                    /* harmony export */ TextDocumentEdit: ()=>/* binding */ TextDocumentEdit,
                    /* harmony export */ TextDocumentIdentifier: ()=>/* binding */ TextDocumentIdentifier,
                    /* harmony export */ TextDocumentItem: ()=>/* binding */ TextDocumentItem,
                    /* harmony export */ TextEdit: ()=>/* binding */ TextEdit,
                    /* harmony export */ URI: ()=>/* binding */ URI1,
                    /* harmony export */ VersionedTextDocumentIdentifier: ()=>/* binding */ VersionedTextDocumentIdentifier,
                    /* harmony export */ WorkspaceChange: ()=>/* binding */ WorkspaceChange,
                    /* harmony export */ WorkspaceEdit: ()=>/* binding */ WorkspaceEdit,
                    /* harmony export */ WorkspaceFolder: ()=>/* binding */ WorkspaceFolder,
                    /* harmony export */ WorkspaceSymbol: ()=>/* binding */ WorkspaceSymbol,
                    /* harmony export */ integer: ()=>/* binding */ integer,
                    /* harmony export */ uinteger: ()=>/* binding */ uinteger
                });
                /* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */ var DocumentUri;
                (function(DocumentUri) {
                    function is(value) {
                        return typeof value === 'string';
                    }
                    DocumentUri.is = is;
                })(DocumentUri || (DocumentUri = {}));
                var URI1;
                (function(URI1) {
                    function is(value) {
                        return typeof value === 'string';
                    }
                    URI1.is = is;
                })(URI1 || (URI1 = {}));
                var integer;
                (function(integer) {
                    integer.MIN_VALUE = -2147483648;
                    integer.MAX_VALUE = 2147483647;
                    function is(value) {
                        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;
                    }
                    integer.is = is;
                })(integer || (integer = {}));
                var uinteger;
                (function(uinteger) {
                    uinteger.MIN_VALUE = 0;
                    uinteger.MAX_VALUE = 2147483647;
                    function is(value) {
                        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;
                    }
                    uinteger.is = is;
                })(uinteger || (uinteger = {}));
                /**
 * The Position namespace provides helper functions to work with
 * {@link Position} literals.
 */ var Position;
                (function(Position) {
                    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */ function create(line, character) {
                        if (line === Number.MAX_VALUE) {
                            line = uinteger.MAX_VALUE;
                        }
                        if (character === Number.MAX_VALUE) {
                            character = uinteger.MAX_VALUE;
                        }
                        return {
                            line: line,
                            character: character
                        };
                    }
                    Position.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Position} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
                    }
                    Position.is = is;
                })(Position || (Position = {}));
                /**
 * The Range namespace provides helper functions to work with
 * {@link Range} literals.
 */ var Range;
                (function(Range) {
                    function create(one, two, three, four) {
                        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
                            return {
                                start: Position.create(one, two),
                                end: Position.create(three, four)
                            };
                        } else if (Position.is(one) && Position.is(two)) {
                            return {
                                start: one,
                                end: two
                            };
                        } else {
                            throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
                        }
                    }
                    Range.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Range} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
                    }
                    Range.is = is;
                })(Range || (Range = {}));
                /**
 * The Location namespace provides helper functions to work with
 * {@link Location} literals.
 */ var Location;
                (function(Location) {
                    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */ function create(uri, range) {
                        return {
                            uri: uri,
                            range: range
                        };
                    }
                    Location.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Location} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
                    }
                    Location.is = is;
                })(Location || (Location = {}));
                /**
 * The LocationLink namespace provides helper functions to work with
 * {@link LocationLink} literals.
 */ var LocationLink;
                (function(LocationLink) {
                    /**
     * Creates a LocationLink literal.
     * @param targetUri The definition's uri.
     * @param targetRange The full range of the definition.
     * @param targetSelectionRange The span of the symbol definition at the target.
     * @param originSelectionRange The span of the symbol being defined in the originating source file.
     */ function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
                        return {
                            targetUri: targetUri,
                            targetRange: targetRange,
                            targetSelectionRange: targetSelectionRange,
                            originSelectionRange: originSelectionRange
                        };
                    }
                    LocationLink.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link LocationLink} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range.is(candidate.targetSelectionRange) && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
                    }
                    LocationLink.is = is;
                })(LocationLink || (LocationLink = {}));
                /**
 * The Color namespace provides helper functions to work with
 * {@link Color} literals.
 */ var Color;
                (function(Color) {
                    /**
     * Creates a new Color literal.
     */ function create(red, green, blue, alpha) {
                        return {
                            red: red,
                            green: green,
                            blue: blue,
                            alpha: alpha
                        };
                    }
                    Color.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Color} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);
                    }
                    Color.is = is;
                })(Color || (Color = {}));
                /**
 * The ColorInformation namespace provides helper functions to work with
 * {@link ColorInformation} literals.
 */ var ColorInformation;
                (function(ColorInformation) {
                    /**
     * Creates a new ColorInformation literal.
     */ function create(range, color) {
                        return {
                            range: range,
                            color: color
                        };
                    }
                    ColorInformation.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
                    }
                    ColorInformation.is = is;
                })(ColorInformation || (ColorInformation = {}));
                /**
 * The Color namespace provides helper functions to work with
 * {@link ColorPresentation} literals.
 */ var ColorPresentation;
                (function(ColorPresentation) {
                    /**
     * Creates a new ColorInformation literal.
     */ function create(label, textEdit, additionalTextEdits) {
                        return {
                            label: label,
                            textEdit: textEdit,
                            additionalTextEdits: additionalTextEdits
                        };
                    }
                    ColorPresentation.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
                    }
                    ColorPresentation.is = is;
                })(ColorPresentation || (ColorPresentation = {}));
                /**
 * A set of predefined range kinds.
 */ var FoldingRangeKind;
                (function(FoldingRangeKind) {
                    /**
     * Folding range for a comment
     */ FoldingRangeKind.Comment = 'comment';
                    /**
     * Folding range for an import or include
     */ FoldingRangeKind.Imports = 'imports';
                    /**
     * Folding range for a region (e.g. `#region`)
     */ FoldingRangeKind.Region = 'region';
                })(FoldingRangeKind || (FoldingRangeKind = {}));
                /**
 * The folding range namespace provides helper functions to work with
 * {@link FoldingRange} literals.
 */ var FoldingRange;
                (function(FoldingRange) {
                    /**
     * Creates a new FoldingRange literal.
     */ function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
                        var result = {
                            startLine: startLine,
                            endLine: endLine
                        };
                        if (Is.defined(startCharacter)) {
                            result.startCharacter = startCharacter;
                        }
                        if (Is.defined(endCharacter)) {
                            result.endCharacter = endCharacter;
                        }
                        if (Is.defined(kind)) {
                            result.kind = kind;
                        }
                        if (Is.defined(collapsedText)) {
                            result.collapsedText = collapsedText;
                        }
                        return result;
                    }
                    FoldingRange.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link FoldingRange} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
                    }
                    FoldingRange.is = is;
                })(FoldingRange || (FoldingRange = {}));
                /**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * {@link DiagnosticRelatedInformation} literals.
 */ var DiagnosticRelatedInformation;
                (function(DiagnosticRelatedInformation) {
                    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */ function create(location, message) {
                        return {
                            location: location,
                            message: message
                        };
                    }
                    DiagnosticRelatedInformation.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
                    }
                    DiagnosticRelatedInformation.is = is;
                })(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
                /**
 * The diagnostic's severity.
 */ var DiagnosticSeverity;
                (function(DiagnosticSeverity) {
                    /**
     * Reports an error.
     */ DiagnosticSeverity.Error = 1;
                    /**
     * Reports a warning.
     */ DiagnosticSeverity.Warning = 2;
                    /**
     * Reports an information.
     */ DiagnosticSeverity.Information = 3;
                    /**
     * Reports a hint.
     */ DiagnosticSeverity.Hint = 4;
                })(DiagnosticSeverity || (DiagnosticSeverity = {}));
                /**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */ var DiagnosticTag;
                (function(DiagnosticTag) {
                    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out instead of having
     * an error squiggle.
     */ DiagnosticTag.Unnecessary = 1;
                    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */ DiagnosticTag.Deprecated = 2;
                })(DiagnosticTag || (DiagnosticTag = {}));
                /**
 * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
 *
 * @since 3.16.0
 */ var CodeDescription;
                (function(CodeDescription) {
                    function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.href);
                    }
                    CodeDescription.is = is;
                })(CodeDescription || (CodeDescription = {}));
                /**
 * The Diagnostic namespace provides helper functions to work with
 * {@link Diagnostic} literals.
 */ var Diagnostic;
                (function(Diagnostic) {
                    /**
     * Creates a new Diagnostic literal.
     */ function create(range, message, severity, code, source, relatedInformation) {
                        var result = {
                            range: range,
                            message: message
                        };
                        if (Is.defined(severity)) {
                            result.severity = severity;
                        }
                        if (Is.defined(code)) {
                            result.code = code;
                        }
                        if (Is.defined(source)) {
                            result.source = source;
                        }
                        if (Is.defined(relatedInformation)) {
                            result.relatedInformation = relatedInformation;
                        }
                        return result;
                    }
                    Diagnostic.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Diagnostic} interface.
     */ function is(value) {
                        var _a;
                        var candidate = value;
                        return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
                    }
                    Diagnostic.is = is;
                })(Diagnostic || (Diagnostic = {}));
                /**
 * The Command namespace provides helper functions to work with
 * {@link Command} literals.
 */ var Command;
                (function(Command) {
                    /**
     * Creates a new Command literal.
     */ function create(title, command) {
                        var args = [];
                        for(var _i = 2; _i < arguments.length; _i++){
                            args[_i - 2] = arguments[_i];
                        }
                        var result = {
                            title: title,
                            command: command
                        };
                        if (Is.defined(args) && args.length > 0) {
                            result.arguments = args;
                        }
                        return result;
                    }
                    Command.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link Command} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
                    }
                    Command.is = is;
                })(Command || (Command = {}));
                /**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */ var TextEdit;
                (function(TextEdit) {
                    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */ function replace(range, newText) {
                        return {
                            range: range,
                            newText: newText
                        };
                    }
                    TextEdit.replace = replace;
                    /**
     * Creates an insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */ function insert(position, newText) {
                        return {
                            range: {
                                start: position,
                                end: position
                            },
                            newText: newText
                        };
                    }
                    TextEdit.insert = insert;
                    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */ function del(range) {
                        return {
                            range: range,
                            newText: ''
                        };
                    }
                    TextEdit.del = del;
                    function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range.is(candidate.range);
                    }
                    TextEdit.is = is;
                })(TextEdit || (TextEdit = {}));
                var ChangeAnnotation;
                (function(ChangeAnnotation) {
                    function create(label, needsConfirmation, description) {
                        var result = {
                            label: label
                        };
                        if (needsConfirmation !== undefined) {
                            result.needsConfirmation = needsConfirmation;
                        }
                        if (description !== undefined) {
                            result.description = description;
                        }
                        return result;
                    }
                    ChangeAnnotation.create = create;
                    function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) && (Is.string(candidate.description) || candidate.description === undefined);
                    }
                    ChangeAnnotation.is = is;
                })(ChangeAnnotation || (ChangeAnnotation = {}));
                var ChangeAnnotationIdentifier;
                (function(ChangeAnnotationIdentifier) {
                    function is(value) {
                        var candidate = value;
                        return Is.string(candidate);
                    }
                    ChangeAnnotationIdentifier.is = is;
                })(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
                var AnnotatedTextEdit;
                (function(AnnotatedTextEdit) {
                    /**
     * Creates an annotated replace text edit.
     *
     * @param range The range of text to be replaced.
     * @param newText The new text.
     * @param annotation The annotation.
     */ function replace(range, newText, annotation) {
                        return {
                            range: range,
                            newText: newText,
                            annotationId: annotation
                        };
                    }
                    AnnotatedTextEdit.replace = replace;
                    /**
     * Creates an annotated insert text edit.
     *
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     * @param annotation The annotation.
     */ function insert(position, newText, annotation) {
                        return {
                            range: {
                                start: position,
                                end: position
                            },
                            newText: newText,
                            annotationId: annotation
                        };
                    }
                    AnnotatedTextEdit.insert = insert;
                    /**
     * Creates an annotated delete text edit.
     *
     * @param range The range of text to be deleted.
     * @param annotation The annotation.
     */ function del(range, annotation) {
                        return {
                            range: range,
                            newText: '',
                            annotationId: annotation
                        };
                    }
                    AnnotatedTextEdit.del = del;
                    function is(value) {
                        var candidate = value;
                        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
                    }
                    AnnotatedTextEdit.is = is;
                })(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
                /**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */ var TextDocumentEdit;
                (function(TextDocumentEdit) {
                    /**
     * Creates a new `TextDocumentEdit`
     */ function create(textDocument, edits) {
                        return {
                            textDocument: textDocument,
                            edits: edits
                        };
                    }
                    TextDocumentEdit.create = create;
                    function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
                    }
                    TextDocumentEdit.is = is;
                })(TextDocumentEdit || (TextDocumentEdit = {}));
                var CreateFile;
                (function(CreateFile) {
                    function create(uri, options, annotation) {
                        var result = {
                            kind: 'create',
                            uri: uri
                        };
                        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
                            result.options = options;
                        }
                        if (annotation !== undefined) {
                            result.annotationId = annotation;
                        }
                        return result;
                    }
                    CreateFile.create = create;
                    function is(value) {
                        var candidate = value;
                        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined || (candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
                    }
                    CreateFile.is = is;
                })(CreateFile || (CreateFile = {}));
                var RenameFile;
                (function(RenameFile) {
                    function create(oldUri, newUri, options, annotation) {
                        var result = {
                            kind: 'rename',
                            oldUri: oldUri,
                            newUri: newUri
                        };
                        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
                            result.options = options;
                        }
                        if (annotation !== undefined) {
                            result.annotationId = annotation;
                        }
                        return result;
                    }
                    RenameFile.create = create;
                    function is(value) {
                        var candidate = value;
                        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined || (candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
                    }
                    RenameFile.is = is;
                })(RenameFile || (RenameFile = {}));
                var DeleteFile;
                (function(DeleteFile) {
                    function create(uri, options, annotation) {
                        var result = {
                            kind: 'delete',
                            uri: uri
                        };
                        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {
                            result.options = options;
                        }
                        if (annotation !== undefined) {
                            result.annotationId = annotation;
                        }
                        return result;
                    }
                    DeleteFile.create = create;
                    function is(value) {
                        var candidate = value;
                        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined || (candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
                    }
                    DeleteFile.is = is;
                })(DeleteFile || (DeleteFile = {}));
                var WorkspaceEdit;
                (function(WorkspaceEdit) {
                    function is(value) {
                        var candidate = value;
                        return candidate && (candidate.changes !== undefined || candidate.documentChanges !== undefined) && (candidate.documentChanges === undefined || candidate.documentChanges.every(function(change) {
                            if (Is.string(change.kind)) {
                                return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                            } else {
                                return TextDocumentEdit.is(change);
                            }
                        }));
                    }
                    WorkspaceEdit.is = is;
                })(WorkspaceEdit || (WorkspaceEdit = {}));
                var TextEditChangeImpl = /** @class */ function() {
                    function TextEditChangeImpl(edits, changeAnnotations) {
                        this.edits = edits;
                        this.changeAnnotations = changeAnnotations;
                    }
                    TextEditChangeImpl.prototype.insert = function(position, newText, annotation) {
                        var edit;
                        var id;
                        if (annotation === undefined) {
                            edit = TextEdit.insert(position, newText);
                        } else if (ChangeAnnotationIdentifier.is(annotation)) {
                            id = annotation;
                            edit = AnnotatedTextEdit.insert(position, newText, annotation);
                        } else {
                            this.assertChangeAnnotations(this.changeAnnotations);
                            id = this.changeAnnotations.manage(annotation);
                            edit = AnnotatedTextEdit.insert(position, newText, id);
                        }
                        this.edits.push(edit);
                        if (id !== undefined) {
                            return id;
                        }
                    };
                    TextEditChangeImpl.prototype.replace = function(range, newText, annotation) {
                        var edit;
                        var id;
                        if (annotation === undefined) {
                            edit = TextEdit.replace(range, newText);
                        } else if (ChangeAnnotationIdentifier.is(annotation)) {
                            id = annotation;
                            edit = AnnotatedTextEdit.replace(range, newText, annotation);
                        } else {
                            this.assertChangeAnnotations(this.changeAnnotations);
                            id = this.changeAnnotations.manage(annotation);
                            edit = AnnotatedTextEdit.replace(range, newText, id);
                        }
                        this.edits.push(edit);
                        if (id !== undefined) {
                            return id;
                        }
                    };
                    TextEditChangeImpl.prototype.delete = function(range, annotation) {
                        var edit;
                        var id;
                        if (annotation === undefined) {
                            edit = TextEdit.del(range);
                        } else if (ChangeAnnotationIdentifier.is(annotation)) {
                            id = annotation;
                            edit = AnnotatedTextEdit.del(range, annotation);
                        } else {
                            this.assertChangeAnnotations(this.changeAnnotations);
                            id = this.changeAnnotations.manage(annotation);
                            edit = AnnotatedTextEdit.del(range, id);
                        }
                        this.edits.push(edit);
                        if (id !== undefined) {
                            return id;
                        }
                    };
                    TextEditChangeImpl.prototype.add = function(edit) {
                        this.edits.push(edit);
                    };
                    TextEditChangeImpl.prototype.all = function() {
                        return this.edits;
                    };
                    TextEditChangeImpl.prototype.clear = function() {
                        this.edits.splice(0, this.edits.length);
                    };
                    TextEditChangeImpl.prototype.assertChangeAnnotations = function(value) {
                        if (value === undefined) {
                            throw new Error("Text edit change is not configured to manage change annotations.");
                        }
                    };
                    return TextEditChangeImpl;
                }();
                /**
 * A helper class
 */ var ChangeAnnotations = /** @class */ function() {
                    function ChangeAnnotations(annotations) {
                        this._annotations = annotations === undefined ? Object.create(null) : annotations;
                        this._counter = 0;
                        this._size = 0;
                    }
                    ChangeAnnotations.prototype.all = function() {
                        return this._annotations;
                    };
                    Object.defineProperty(ChangeAnnotations.prototype, "size", {
                        get: function() {
                            return this._size;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    ChangeAnnotations.prototype.manage = function(idOrAnnotation, annotation) {
                        var id;
                        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
                            id = idOrAnnotation;
                        } else {
                            id = this.nextId();
                            annotation = idOrAnnotation;
                        }
                        if (this._annotations[id] !== undefined) {
                            throw new Error("Id ".concat(id, " is already in use."));
                        }
                        if (annotation === undefined) {
                            throw new Error("No annotation provided for id ".concat(id));
                        }
                        this._annotations[id] = annotation;
                        this._size++;
                        return id;
                    };
                    ChangeAnnotations.prototype.nextId = function() {
                        this._counter++;
                        return this._counter.toString();
                    };
                    return ChangeAnnotations;
                }();
                /**
 * A workspace change helps constructing changes to a workspace.
 */ var WorkspaceChange = /** @class */ function() {
                    function WorkspaceChange(workspaceEdit) {
                        var _this = this;
                        this._textEditChanges = Object.create(null);
                        if (workspaceEdit !== undefined) {
                            this._workspaceEdit = workspaceEdit;
                            if (workspaceEdit.documentChanges) {
                                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                                workspaceEdit.documentChanges.forEach(function(change) {
                                    if (TextDocumentEdit.is(change)) {
                                        var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
                                        _this._textEditChanges[change.textDocument.uri] = textEditChange;
                                    }
                                });
                            } else if (workspaceEdit.changes) {
                                Object.keys(workspaceEdit.changes).forEach(function(key) {
                                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                                    _this._textEditChanges[key] = textEditChange;
                                });
                            }
                        } else {
                            this._workspaceEdit = {};
                        }
                    }
                    Object.defineProperty(WorkspaceChange.prototype, "edit", {
                        /**
         * Returns the underlying {@link WorkspaceEdit} literal
         * use to be returned from a workspace edit operation like rename.
         */ get: function() {
                            this.initDocumentChanges();
                            if (this._changeAnnotations !== undefined) {
                                if (this._changeAnnotations.size === 0) {
                                    this._workspaceEdit.changeAnnotations = undefined;
                                } else {
                                    this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                                }
                            }
                            return this._workspaceEdit;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    WorkspaceChange.prototype.getTextEditChange = function(key) {
                        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
                            this.initDocumentChanges();
                            if (this._workspaceEdit.documentChanges === undefined) {
                                throw new Error('Workspace edit is not configured for document changes.');
                            }
                            var textDocument = {
                                uri: key.uri,
                                version: key.version
                            };
                            var result = this._textEditChanges[textDocument.uri];
                            if (!result) {
                                var edits = [];
                                var textDocumentEdit = {
                                    textDocument: textDocument,
                                    edits: edits
                                };
                                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                                this._textEditChanges[textDocument.uri] = result;
                            }
                            return result;
                        } else {
                            this.initChanges();
                            if (this._workspaceEdit.changes === undefined) {
                                throw new Error('Workspace edit is not configured for normal text edit changes.');
                            }
                            var result = this._textEditChanges[key];
                            if (!result) {
                                var edits = [];
                                this._workspaceEdit.changes[key] = edits;
                                result = new TextEditChangeImpl(edits);
                                this._textEditChanges[key] = result;
                            }
                            return result;
                        }
                    };
                    WorkspaceChange.prototype.initDocumentChanges = function() {
                        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
                            this._changeAnnotations = new ChangeAnnotations();
                            this._workspaceEdit.documentChanges = [];
                            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                        }
                    };
                    WorkspaceChange.prototype.initChanges = function() {
                        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
                            this._workspaceEdit.changes = Object.create(null);
                        }
                    };
                    WorkspaceChange.prototype.createFile = function(uri, optionsOrAnnotation, options) {
                        this.initDocumentChanges();
                        if (this._workspaceEdit.documentChanges === undefined) {
                            throw new Error('Workspace edit is not configured for document changes.');
                        }
                        var annotation;
                        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                            annotation = optionsOrAnnotation;
                        } else {
                            options = optionsOrAnnotation;
                        }
                        var operation;
                        var id;
                        if (annotation === undefined) {
                            operation = CreateFile.create(uri, options);
                        } else {
                            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                            operation = CreateFile.create(uri, options, id);
                        }
                        this._workspaceEdit.documentChanges.push(operation);
                        if (id !== undefined) {
                            return id;
                        }
                    };
                    WorkspaceChange.prototype.renameFile = function(oldUri, newUri, optionsOrAnnotation, options) {
                        this.initDocumentChanges();
                        if (this._workspaceEdit.documentChanges === undefined) {
                            throw new Error('Workspace edit is not configured for document changes.');
                        }
                        var annotation;
                        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                            annotation = optionsOrAnnotation;
                        } else {
                            options = optionsOrAnnotation;
                        }
                        var operation;
                        var id;
                        if (annotation === undefined) {
                            operation = RenameFile.create(oldUri, newUri, options);
                        } else {
                            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                            operation = RenameFile.create(oldUri, newUri, options, id);
                        }
                        this._workspaceEdit.documentChanges.push(operation);
                        if (id !== undefined) {
                            return id;
                        }
                    };
                    WorkspaceChange.prototype.deleteFile = function(uri, optionsOrAnnotation, options) {
                        this.initDocumentChanges();
                        if (this._workspaceEdit.documentChanges === undefined) {
                            throw new Error('Workspace edit is not configured for document changes.');
                        }
                        var annotation;
                        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                            annotation = optionsOrAnnotation;
                        } else {
                            options = optionsOrAnnotation;
                        }
                        var operation;
                        var id;
                        if (annotation === undefined) {
                            operation = DeleteFile.create(uri, options);
                        } else {
                            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                            operation = DeleteFile.create(uri, options, id);
                        }
                        this._workspaceEdit.documentChanges.push(operation);
                        if (id !== undefined) {
                            return id;
                        }
                    };
                    return WorkspaceChange;
                }();
                /**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * {@link TextDocumentIdentifier} literals.
 */ var TextDocumentIdentifier;
                (function(TextDocumentIdentifier) {
                    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */ function create(uri) {
                        return {
                            uri: uri
                        };
                    }
                    TextDocumentIdentifier.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri);
                    }
                    TextDocumentIdentifier.is = is;
                })(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
                /**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link VersionedTextDocumentIdentifier} literals.
 */ var VersionedTextDocumentIdentifier;
                (function(VersionedTextDocumentIdentifier) {
                    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */ function create(uri, version) {
                        return {
                            uri: uri,
                            version: version
                        };
                    }
                    VersionedTextDocumentIdentifier.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
                    }
                    VersionedTextDocumentIdentifier.is = is;
                })(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
                /**
 * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link OptionalVersionedTextDocumentIdentifier} literals.
 */ var OptionalVersionedTextDocumentIdentifier;
                (function(OptionalVersionedTextDocumentIdentifier) {
                    /**
     * Creates a new OptionalVersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */ function create(uri, version) {
                        return {
                            uri: uri,
                            version: version
                        };
                    }
                    OptionalVersionedTextDocumentIdentifier.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
                    }
                    OptionalVersionedTextDocumentIdentifier.is = is;
                })(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
                /**
 * The TextDocumentItem namespace provides helper functions to work with
 * {@link TextDocumentItem} literals.
 */ var TextDocumentItem;
                (function(TextDocumentItem) {
                    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */ function create(uri, languageId, version, text) {
                        return {
                            uri: uri,
                            languageId: languageId,
                            version: version,
                            text: text
                        };
                    }
                    TextDocumentItem.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
                    }
                    TextDocumentItem.is = is;
                })(TextDocumentItem || (TextDocumentItem = {}));
                /**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */ var MarkupKind;
                (function(MarkupKind) {
                    /**
     * Plain text is supported as a content format
     */ MarkupKind.PlainText = 'plaintext';
                    /**
     * Markdown is supported as a content format
     */ MarkupKind.Markdown = 'markdown';
                    /**
     * Checks whether the given value is a value of the {@link MarkupKind} type.
     */ function is(value) {
                        var candidate = value;
                        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
                    }
                    MarkupKind.is = is;
                })(MarkupKind || (MarkupKind = {}));
                var MarkupContent1;
                (function(MarkupContent1) {
                    /**
     * Checks whether the given value conforms to the {@link MarkupContent} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
                    }
                    MarkupContent1.is = is;
                })(MarkupContent1 || (MarkupContent1 = {}));
                /**
 * The kind of a completion entry.
 */ var CompletionItemKind1;
                (function(CompletionItemKind1) {
                    CompletionItemKind1.Text = 1;
                    CompletionItemKind1.Method = 2;
                    CompletionItemKind1.Function = 3;
                    CompletionItemKind1.Constructor = 4;
                    CompletionItemKind1.Field = 5;
                    CompletionItemKind1.Variable = 6;
                    CompletionItemKind1.Class = 7;
                    CompletionItemKind1.Interface = 8;
                    CompletionItemKind1.Module = 9;
                    CompletionItemKind1.Property = 10;
                    CompletionItemKind1.Unit = 11;
                    CompletionItemKind1.Value = 12;
                    CompletionItemKind1.Enum = 13;
                    CompletionItemKind1.Keyword = 14;
                    CompletionItemKind1.Snippet = 15;
                    CompletionItemKind1.Color = 16;
                    CompletionItemKind1.File = 17;
                    CompletionItemKind1.Reference = 18;
                    CompletionItemKind1.Folder = 19;
                    CompletionItemKind1.EnumMember = 20;
                    CompletionItemKind1.Constant = 21;
                    CompletionItemKind1.Struct = 22;
                    CompletionItemKind1.Event = 23;
                    CompletionItemKind1.Operator = 24;
                    CompletionItemKind1.TypeParameter = 25;
                })(CompletionItemKind1 || (CompletionItemKind1 = {}));
                /**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */ var InsertTextFormat1;
                (function(InsertTextFormat1) {
                    /**
     * The primary text to be inserted is treated as a plain string.
     */ InsertTextFormat1.PlainText = 1;
                    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
     */ InsertTextFormat1.Snippet = 2;
                })(InsertTextFormat1 || (InsertTextFormat1 = {}));
                /**
 * Completion item tags are extra annotations that tweak the rendering of a completion
 * item.
 *
 * @since 3.15.0
 */ var CompletionItemTag;
                (function(CompletionItemTag) {
                    /**
     * Render a completion as obsolete, usually using a strike-out.
     */ CompletionItemTag.Deprecated = 1;
                })(CompletionItemTag || (CompletionItemTag = {}));
                /**
 * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
 *
 * @since 3.16.0
 */ var InsertReplaceEdit;
                (function(InsertReplaceEdit) {
                    /**
     * Creates a new insert / replace edit
     */ function create(newText, insert, replace) {
                        return {
                            newText: newText,
                            insert: insert,
                            replace: replace
                        };
                    }
                    InsertReplaceEdit.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.
     */ function is(value) {
                        var candidate = value;
                        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
                    }
                    InsertReplaceEdit.is = is;
                })(InsertReplaceEdit || (InsertReplaceEdit = {}));
                /**
 * How whitespace and indentation is handled during completion
 * item insertion.
 *
 * @since 3.16.0
 */ var InsertTextMode;
                (function(InsertTextMode) {
                    /**
     * The insertion or replace strings is taken as it is. If the
     * value is multi line the lines below the cursor will be
     * inserted using the indentation defined in the string value.
     * The client will not apply any kind of adjustments to the
     * string.
     */ InsertTextMode.asIs = 1;
                    /**
     * The editor adjusts leading whitespace of new lines so that
     * they match the indentation up to the cursor of the line for
     * which the item is accepted.
     *
     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
     * multi line completion item is indented using 2 tabs and all
     * following lines inserted will be indented using 2 tabs as well.
     */ InsertTextMode.adjustIndentation = 2;
                })(InsertTextMode || (InsertTextMode = {}));
                var CompletionItemLabelDetails;
                (function(CompletionItemLabelDetails) {
                    function is(value) {
                        var candidate = value;
                        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) && (Is.string(candidate.description) || candidate.description === undefined);
                    }
                    CompletionItemLabelDetails.is = is;
                })(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
                /**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */ var CompletionItem;
                (function(CompletionItem) {
                    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */ function create(label) {
                        return {
                            label: label
                        };
                    }
                    CompletionItem.create = create;
                })(CompletionItem || (CompletionItem = {}));
                /**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */ var CompletionList;
                (function(CompletionList) {
                    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */ function create(items, isIncomplete) {
                        return {
                            items: items ? items : [],
                            isIncomplete: !!isIncomplete
                        };
                    }
                    CompletionList.create = create;
                })(CompletionList || (CompletionList = {}));
                var MarkedString1;
                (function(MarkedString1) {
                    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */ function fromPlainText(plainText) {
                        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
                    }
                    MarkedString1.fromPlainText = fromPlainText;
                    /**
     * Checks whether the given value conforms to the {@link MarkedString} type.
     */ function is(value) {
                        var candidate = value;
                        return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);
                    }
                    MarkedString1.is = is;
                })(MarkedString1 || (MarkedString1 = {}));
                var Hover;
                (function(Hover) {
                    /**
     * Checks whether the given value conforms to the {@link Hover} interface.
     */ function is(value) {
                        var candidate = value;
                        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent1.is(candidate.contents) || MarkedString1.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString1.is)) && (value.range === undefined || Range.is(value.range));
                    }
                    Hover.is = is;
                })(Hover || (Hover = {}));
                /**
 * The ParameterInformation namespace provides helper functions to work with
 * {@link ParameterInformation} literals.
 */ var ParameterInformation;
                (function(ParameterInformation) {
                    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */ function create(label, documentation) {
                        return documentation ? {
                            label: label,
                            documentation: documentation
                        } : {
                            label: label
                        };
                    }
                    ParameterInformation.create = create;
                })(ParameterInformation || (ParameterInformation = {}));
                /**
 * The SignatureInformation namespace provides helper functions to work with
 * {@link SignatureInformation} literals.
 */ var SignatureInformation;
                (function(SignatureInformation) {
                    function create(label, documentation) {
                        var parameters = [];
                        for(var _i = 2; _i < arguments.length; _i++){
                            parameters[_i - 2] = arguments[_i];
                        }
                        var result = {
                            label: label
                        };
                        if (Is.defined(documentation)) {
                            result.documentation = documentation;
                        }
                        if (Is.defined(parameters)) {
                            result.parameters = parameters;
                        } else {
                            result.parameters = [];
                        }
                        return result;
                    }
                    SignatureInformation.create = create;
                })(SignatureInformation || (SignatureInformation = {}));
                /**
 * A document highlight kind.
 */ var DocumentHighlightKind;
                (function(DocumentHighlightKind) {
                    /**
     * A textual occurrence.
     */ DocumentHighlightKind.Text = 1;
                    /**
     * Read-access of a symbol, like reading a variable.
     */ DocumentHighlightKind.Read = 2;
                    /**
     * Write-access of a symbol, like writing to a variable.
     */ DocumentHighlightKind.Write = 3;
                })(DocumentHighlightKind || (DocumentHighlightKind = {}));
                /**
 * DocumentHighlight namespace to provide helper functions to work with
 * {@link DocumentHighlight} literals.
 */ var DocumentHighlight;
                (function(DocumentHighlight) {
                    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     * @param kind The highlight kind
     */ function create(range, kind) {
                        var result = {
                            range: range
                        };
                        if (Is.number(kind)) {
                            result.kind = kind;
                        }
                        return result;
                    }
                    DocumentHighlight.create = create;
                })(DocumentHighlight || (DocumentHighlight = {}));
                /**
 * A symbol kind.
 */ var SymbolKind;
                (function(SymbolKind) {
                    SymbolKind.File = 1;
                    SymbolKind.Module = 2;
                    SymbolKind.Namespace = 3;
                    SymbolKind.Package = 4;
                    SymbolKind.Class = 5;
                    SymbolKind.Method = 6;
                    SymbolKind.Property = 7;
                    SymbolKind.Field = 8;
                    SymbolKind.Constructor = 9;
                    SymbolKind.Enum = 10;
                    SymbolKind.Interface = 11;
                    SymbolKind.Function = 12;
                    SymbolKind.Variable = 13;
                    SymbolKind.Constant = 14;
                    SymbolKind.String = 15;
                    SymbolKind.Number = 16;
                    SymbolKind.Boolean = 17;
                    SymbolKind.Array = 18;
                    SymbolKind.Object = 19;
                    SymbolKind.Key = 20;
                    SymbolKind.Null = 21;
                    SymbolKind.EnumMember = 22;
                    SymbolKind.Struct = 23;
                    SymbolKind.Event = 24;
                    SymbolKind.Operator = 25;
                    SymbolKind.TypeParameter = 26;
                })(SymbolKind || (SymbolKind = {}));
                /**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 *
 * @since 3.16
 */ var SymbolTag;
                (function(SymbolTag) {
                    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */ SymbolTag.Deprecated = 1;
                })(SymbolTag || (SymbolTag = {}));
                var SymbolInformation;
                (function(SymbolInformation) {
                    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol.
     * @param containerName The name of the symbol containing the symbol.
     */ function create(name, kind, range, uri, containerName) {
                        var result = {
                            name: name,
                            kind: kind,
                            location: {
                                uri: uri,
                                range: range
                            }
                        };
                        if (containerName) {
                            result.containerName = containerName;
                        }
                        return result;
                    }
                    SymbolInformation.create = create;
                })(SymbolInformation || (SymbolInformation = {}));
                var WorkspaceSymbol;
                (function(WorkspaceSymbol) {
                    /**
     * Create a new workspace symbol.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param uri The resource of the location of the symbol.
     * @param range An options range of the location.
     * @returns A WorkspaceSymbol.
     */ function create(name, kind, uri, range) {
                        return range !== undefined ? {
                            name: name,
                            kind: kind,
                            location: {
                                uri: uri,
                                range: range
                            }
                        } : {
                            name: name,
                            kind: kind,
                            location: {
                                uri: uri
                            }
                        };
                    }
                    WorkspaceSymbol.create = create;
                })(WorkspaceSymbol || (WorkspaceSymbol = {}));
                var DocumentSymbol;
                (function(DocumentSymbol) {
                    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param detail The detail of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the symbol.
     * @param selectionRange The selectionRange of the symbol.
     * @param children Children of the symbol.
     */ function create(name, detail, kind, range, selectionRange, children) {
                        var result = {
                            name: name,
                            detail: detail,
                            kind: kind,
                            range: range,
                            selectionRange: selectionRange
                        };
                        if (children !== undefined) {
                            result.children = children;
                        }
                        return result;
                    }
                    DocumentSymbol.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.
     */ function is(value) {
                        var candidate = value;
                        return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range.is(candidate.range) && Range.is(candidate.selectionRange) && (candidate.detail === undefined || Is.string(candidate.detail)) && (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) && (candidate.children === undefined || Array.isArray(candidate.children)) && (candidate.tags === undefined || Array.isArray(candidate.tags));
                    }
                    DocumentSymbol.is = is;
                })(DocumentSymbol || (DocumentSymbol = {}));
                /**
 * A set of predefined code action kinds
 */ var CodeActionKind;
                (function(CodeActionKind) {
                    /**
     * Empty kind.
     */ CodeActionKind.Empty = '';
                    /**
     * Base kind for quickfix actions: 'quickfix'
     */ CodeActionKind.QuickFix = 'quickfix';
                    /**
     * Base kind for refactoring actions: 'refactor'
     */ CodeActionKind.Refactor = 'refactor';
                    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */ CodeActionKind.RefactorExtract = 'refactor.extract';
                    /**
     * Base kind for refactoring inline actions: 'refactor.inline'
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */ CodeActionKind.RefactorInline = 'refactor.inline';
                    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */ CodeActionKind.RefactorRewrite = 'refactor.rewrite';
                    /**
     * Base kind for source actions: `source`
     *
     * Source code actions apply to the entire file.
     */ CodeActionKind.Source = 'source';
                    /**
     * Base kind for an organize imports source action: `source.organizeImports`
     */ CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
                    /**
     * Base kind for auto-fix source actions: `source.fixAll`.
     *
     * Fix all actions automatically fix errors that have a clear fix that do not require user input.
     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
     *
     * @since 3.15.0
     */ CodeActionKind.SourceFixAll = 'source.fixAll';
                })(CodeActionKind || (CodeActionKind = {}));
                /**
 * The reason why code actions were requested.
 *
 * @since 3.17.0
 */ var CodeActionTriggerKind;
                (function(CodeActionTriggerKind) {
                    /**
     * Code actions were explicitly requested by the user or by an extension.
     */ CodeActionTriggerKind.Invoked = 1;
                    /**
     * Code actions were requested automatically.
     *
     * This typically happens when current selection in a file changes, but can
     * also be triggered when file content changes.
     */ CodeActionTriggerKind.Automatic = 2;
                })(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
                /**
 * The CodeActionContext namespace provides helper functions to work with
 * {@link CodeActionContext} literals.
 */ var CodeActionContext;
                (function(CodeActionContext) {
                    /**
     * Creates a new CodeActionContext literal.
     */ function create(diagnostics, only, triggerKind) {
                        var result = {
                            diagnostics: diagnostics
                        };
                        if (only !== undefined && only !== null) {
                            result.only = only;
                        }
                        if (triggerKind !== undefined && triggerKind !== null) {
                            result.triggerKind = triggerKind;
                        }
                        return result;
                    }
                    CodeActionContext.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
                    }
                    CodeActionContext.is = is;
                })(CodeActionContext || (CodeActionContext = {}));
                var CodeAction;
                (function(CodeAction) {
                    function create(title, kindOrCommandOrEdit, kind) {
                        var result = {
                            title: title
                        };
                        var checkKind = true;
                        if (typeof kindOrCommandOrEdit === 'string') {
                            checkKind = false;
                            result.kind = kindOrCommandOrEdit;
                        } else if (Command.is(kindOrCommandOrEdit)) {
                            result.command = kindOrCommandOrEdit;
                        } else {
                            result.edit = kindOrCommandOrEdit;
                        }
                        if (checkKind && kind !== undefined) {
                            result.kind = kind;
                        }
                        return result;
                    }
                    CodeAction.create = create;
                    function is(value) {
                        var candidate = value;
                        return candidate && Is.string(candidate.title) && (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === undefined || Is.string(candidate.kind)) && (candidate.edit !== undefined || candidate.command !== undefined) && (candidate.command === undefined || Command.is(candidate.command)) && (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) && (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));
                    }
                    CodeAction.is = is;
                })(CodeAction || (CodeAction = {}));
                /**
 * The CodeLens namespace provides helper functions to work with
 * {@link CodeLens} literals.
 */ var CodeLens;
                (function(CodeLens) {
                    /**
     * Creates a new CodeLens literal.
     */ function create(range, data) {
                        var result = {
                            range: range
                        };
                        if (Is.defined(data)) {
                            result.data = data;
                        }
                        return result;
                    }
                    CodeLens.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link CodeLens} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
                    }
                    CodeLens.is = is;
                })(CodeLens || (CodeLens = {}));
                /**
 * The FormattingOptions namespace provides helper functions to work with
 * {@link FormattingOptions} literals.
 */ var FormattingOptions;
                (function(FormattingOptions) {
                    /**
     * Creates a new FormattingOptions literal.
     */ function create(tabSize, insertSpaces) {
                        return {
                            tabSize: tabSize,
                            insertSpaces: insertSpaces
                        };
                    }
                    FormattingOptions.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
                    }
                    FormattingOptions.is = is;
                })(FormattingOptions || (FormattingOptions = {}));
                /**
 * The DocumentLink namespace provides helper functions to work with
 * {@link DocumentLink} literals.
 */ var DocumentLink;
                (function(DocumentLink) {
                    /**
     * Creates a new DocumentLink literal.
     */ function create(range, target, data) {
                        return {
                            range: range,
                            target: target,
                            data: data
                        };
                    }
                    DocumentLink.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link DocumentLink} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
                    }
                    DocumentLink.is = is;
                })(DocumentLink || (DocumentLink = {}));
                /**
 * The SelectionRange namespace provides helper function to work with
 * SelectionRange literals.
 */ var SelectionRange;
                (function(SelectionRange) {
                    /**
     * Creates a new SelectionRange
     * @param range the range.
     * @param parent an optional parent.
     */ function create(range, parent) {
                        return {
                            range: range,
                            parent: parent
                        };
                    }
                    SelectionRange.create = create;
                    function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
                    }
                    SelectionRange.is = is;
                })(SelectionRange || (SelectionRange = {}));
                /**
 * A set of predefined token types. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */ var SemanticTokenTypes;
                (function(SemanticTokenTypes) {
                    SemanticTokenTypes["namespace"] = "namespace";
                    /**
     * Represents a generic type. Acts as a fallback for types which can't be mapped to
     * a specific type like class or enum.
     */ SemanticTokenTypes["type"] = "type";
                    SemanticTokenTypes["class"] = "class";
                    SemanticTokenTypes["enum"] = "enum";
                    SemanticTokenTypes["interface"] = "interface";
                    SemanticTokenTypes["struct"] = "struct";
                    SemanticTokenTypes["typeParameter"] = "typeParameter";
                    SemanticTokenTypes["parameter"] = "parameter";
                    SemanticTokenTypes["variable"] = "variable";
                    SemanticTokenTypes["property"] = "property";
                    SemanticTokenTypes["enumMember"] = "enumMember";
                    SemanticTokenTypes["event"] = "event";
                    SemanticTokenTypes["function"] = "function";
                    SemanticTokenTypes["method"] = "method";
                    SemanticTokenTypes["macro"] = "macro";
                    SemanticTokenTypes["keyword"] = "keyword";
                    SemanticTokenTypes["modifier"] = "modifier";
                    SemanticTokenTypes["comment"] = "comment";
                    SemanticTokenTypes["string"] = "string";
                    SemanticTokenTypes["number"] = "number";
                    SemanticTokenTypes["regexp"] = "regexp";
                    SemanticTokenTypes["operator"] = "operator";
                    /**
     * @since 3.17.0
     */ SemanticTokenTypes["decorator"] = "decorator";
                })(SemanticTokenTypes || (SemanticTokenTypes = {}));
                /**
 * A set of predefined token modifiers. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */ var SemanticTokenModifiers;
                (function(SemanticTokenModifiers) {
                    SemanticTokenModifiers["declaration"] = "declaration";
                    SemanticTokenModifiers["definition"] = "definition";
                    SemanticTokenModifiers["readonly"] = "readonly";
                    SemanticTokenModifiers["static"] = "static";
                    SemanticTokenModifiers["deprecated"] = "deprecated";
                    SemanticTokenModifiers["abstract"] = "abstract";
                    SemanticTokenModifiers["async"] = "async";
                    SemanticTokenModifiers["modification"] = "modification";
                    SemanticTokenModifiers["documentation"] = "documentation";
                    SemanticTokenModifiers["defaultLibrary"] = "defaultLibrary";
                })(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
                /**
 * @since 3.16.0
 */ var SemanticTokens;
                (function(SemanticTokens) {
                    function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');
                    }
                    SemanticTokens.is = is;
                })(SemanticTokens || (SemanticTokens = {}));
                /**
 * The InlineValueText namespace provides functions to deal with InlineValueTexts.
 *
 * @since 3.17.0
 */ var InlineValueText;
                (function(InlineValueText) {
                    /**
     * Creates a new InlineValueText literal.
     */ function create(range, text) {
                        return {
                            range: range,
                            text: text
                        };
                    }
                    InlineValueText.create = create;
                    function is(value) {
                        var candidate = value;
                        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
                    }
                    InlineValueText.is = is;
                })(InlineValueText || (InlineValueText = {}));
                /**
 * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.
 *
 * @since 3.17.0
 */ var InlineValueVariableLookup;
                (function(InlineValueVariableLookup) {
                    /**
     * Creates a new InlineValueText literal.
     */ function create(range, variableName, caseSensitiveLookup) {
                        return {
                            range: range,
                            variableName: variableName,
                            caseSensitiveLookup: caseSensitiveLookup
                        };
                    }
                    InlineValueVariableLookup.create = create;
                    function is(value) {
                        var candidate = value;
                        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === undefined);
                    }
                    InlineValueVariableLookup.is = is;
                })(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
                /**
 * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.
 *
 * @since 3.17.0
 */ var InlineValueEvaluatableExpression;
                (function(InlineValueEvaluatableExpression) {
                    /**
     * Creates a new InlineValueEvaluatableExpression literal.
     */ function create(range, expression) {
                        return {
                            range: range,
                            expression: expression
                        };
                    }
                    InlineValueEvaluatableExpression.create = create;
                    function is(value) {
                        var candidate = value;
                        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === undefined);
                    }
                    InlineValueEvaluatableExpression.is = is;
                })(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
                /**
 * The InlineValueContext namespace provides helper functions to work with
 * {@link InlineValueContext} literals.
 *
 * @since 3.17.0
 */ var InlineValueContext;
                (function(InlineValueContext) {
                    /**
     * Creates a new InlineValueContext literal.
     */ function create(frameId, stoppedLocation) {
                        return {
                            frameId: frameId,
                            stoppedLocation: stoppedLocation
                        };
                    }
                    InlineValueContext.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && Range.is(value.stoppedLocation);
                    }
                    InlineValueContext.is = is;
                })(InlineValueContext || (InlineValueContext = {}));
                /**
 * Inlay hint kinds.
 *
 * @since 3.17.0
 */ var InlayHintKind;
                (function(InlayHintKind) {
                    /**
     * An inlay hint that for a type annotation.
     */ InlayHintKind.Type = 1;
                    /**
     * An inlay hint that is for a parameter.
     */ InlayHintKind.Parameter = 2;
                    function is(value) {
                        return value === 1 || value === 2;
                    }
                    InlayHintKind.is = is;
                })(InlayHintKind || (InlayHintKind = {}));
                var InlayHintLabelPart;
                (function(InlayHintLabelPart) {
                    function create(value) {
                        return {
                            value: value
                        };
                    }
                    InlayHintLabelPart.create = create;
                    function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent1.is(candidate.tooltip)) && (candidate.location === undefined || Location.is(candidate.location)) && (candidate.command === undefined || Command.is(candidate.command));
                    }
                    InlayHintLabelPart.is = is;
                })(InlayHintLabelPart || (InlayHintLabelPart = {}));
                var InlayHint;
                (function(InlayHint) {
                    function create(position, label, kind) {
                        var result = {
                            position: position,
                            label: label
                        };
                        if (kind !== undefined) {
                            result.kind = kind;
                        }
                        return result;
                    }
                    InlayHint.create = create;
                    function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && Position.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === undefined || InlayHintKind.is(candidate.kind)) && candidate.textEdits === undefined || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent1.is(candidate.tooltip)) && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));
                    }
                    InlayHint.is = is;
                })(InlayHint || (InlayHint = {}));
                var WorkspaceFolder;
                (function(WorkspaceFolder) {
                    function is(value) {
                        var candidate = value;
                        return Is.objectLiteral(candidate) && URI1.is(candidate.uri) && Is.string(candidate.name);
                    }
                    WorkspaceFolder.is = is;
                })(WorkspaceFolder || (WorkspaceFolder = {}));
                var EOL = [
                    '\n',
                    '\r\n',
                    '\r'
                ];
                /**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */ var TextDocument;
                (function(TextDocument) {
                    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId The document's language Id.
     * @param version The document's version.
     * @param content The document's content.
     */ function create(uri, languageId, version, content) {
                        return new FullTextDocument(uri, languageId, version, content);
                    }
                    TextDocument.create = create;
                    /**
     * Checks whether the given literal conforms to the {@link ITextDocument} interface.
     */ function is(value) {
                        var candidate = value;
                        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
                    }
                    TextDocument.is = is;
                    function applyEdits(document1, edits) {
                        var text = document1.getText();
                        var sortedEdits = mergeSort(edits, function(a, b) {
                            var diff = a.range.start.line - b.range.start.line;
                            if (diff === 0) {
                                return a.range.start.character - b.range.start.character;
                            }
                            return diff;
                        });
                        var lastModifiedOffset = text.length;
                        for(var i = sortedEdits.length - 1; i >= 0; i--){
                            var e = sortedEdits[i];
                            var startOffset = document1.offsetAt(e.range.start);
                            var endOffset = document1.offsetAt(e.range.end);
                            if (endOffset <= lastModifiedOffset) {
                                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
                            } else {
                                throw new Error('Overlapping edit');
                            }
                            lastModifiedOffset = startOffset;
                        }
                        return text;
                    }
                    TextDocument.applyEdits = applyEdits;
                    function mergeSort(data, compare) {
                        if (data.length <= 1) {
                            // sorted
                            return data;
                        }
                        var p = data.length / 2 | 0;
                        var left = data.slice(0, p);
                        var right = data.slice(p);
                        mergeSort(left, compare);
                        mergeSort(right, compare);
                        var leftIdx = 0;
                        var rightIdx = 0;
                        var i = 0;
                        while(leftIdx < left.length && rightIdx < right.length){
                            var ret = compare(left[leftIdx], right[rightIdx]);
                            if (ret <= 0) {
                                // smaller_equal -> take left to preserve order
                                data[i++] = left[leftIdx++];
                            } else {
                                // greater -> take right
                                data[i++] = right[rightIdx++];
                            }
                        }
                        while(leftIdx < left.length){
                            data[i++] = left[leftIdx++];
                        }
                        while(rightIdx < right.length){
                            data[i++] = right[rightIdx++];
                        }
                        return data;
                    }
                })(TextDocument || (TextDocument = {}));
                /**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */ var FullTextDocument = /** @class */ function() {
                    function FullTextDocument(uri, languageId, version, content) {
                        this._uri = uri;
                        this._languageId = languageId;
                        this._version = version;
                        this._content = content;
                        this._lineOffsets = undefined;
                    }
                    Object.defineProperty(FullTextDocument.prototype, "uri", {
                        get: function() {
                            return this._uri;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(FullTextDocument.prototype, "languageId", {
                        get: function() {
                            return this._languageId;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(FullTextDocument.prototype, "version", {
                        get: function() {
                            return this._version;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    FullTextDocument.prototype.getText = function(range) {
                        if (range) {
                            var start = this.offsetAt(range.start);
                            var end = this.offsetAt(range.end);
                            return this._content.substring(start, end);
                        }
                        return this._content;
                    };
                    FullTextDocument.prototype.update = function(event, version) {
                        this._content = event.text;
                        this._version = version;
                        this._lineOffsets = undefined;
                    };
                    FullTextDocument.prototype.getLineOffsets = function() {
                        if (this._lineOffsets === undefined) {
                            var lineOffsets = [];
                            var text = this._content;
                            var isLineStart = true;
                            for(var i = 0; i < text.length; i++){
                                if (isLineStart) {
                                    lineOffsets.push(i);
                                    isLineStart = false;
                                }
                                var ch = text.charAt(i);
                                isLineStart = ch === '\r' || ch === '\n';
                                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                                    i++;
                                }
                            }
                            if (isLineStart && text.length > 0) {
                                lineOffsets.push(text.length);
                            }
                            this._lineOffsets = lineOffsets;
                        }
                        return this._lineOffsets;
                    };
                    FullTextDocument.prototype.positionAt = function(offset) {
                        offset = Math.max(Math.min(offset, this._content.length), 0);
                        var lineOffsets = this.getLineOffsets();
                        var low = 0, high = lineOffsets.length;
                        if (high === 0) {
                            return Position.create(0, offset);
                        }
                        while(low < high){
                            var mid = Math.floor((low + high) / 2);
                            if (lineOffsets[mid] > offset) {
                                high = mid;
                            } else {
                                low = mid + 1;
                            }
                        }
                        // low is the least x for which the line offset is larger than the current offset
                        // or array.length if no line offset is larger than the current offset
                        var line = low - 1;
                        return Position.create(line, offset - lineOffsets[line]);
                    };
                    FullTextDocument.prototype.offsetAt = function(position) {
                        var lineOffsets = this.getLineOffsets();
                        if (position.line >= lineOffsets.length) {
                            return this._content.length;
                        } else if (position.line < 0) {
                            return 0;
                        }
                        var lineOffset = lineOffsets[position.line];
                        var nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
                        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
                    };
                    Object.defineProperty(FullTextDocument.prototype, "lineCount", {
                        get: function() {
                            return this.getLineOffsets().length;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    return FullTextDocument;
                }();
                var Is;
                (function(Is) {
                    var toString = Object.prototype.toString;
                    function defined(value) {
                        return typeof value !== 'undefined';
                    }
                    Is.defined = defined;
                    function undefined1(value) {
                        return typeof value === 'undefined';
                    }
                    Is.undefined = undefined1;
                    function boolean(value) {
                        return value === true || value === false;
                    }
                    Is.boolean = boolean;
                    function string(value) {
                        return toString.call(value) === '[object String]';
                    }
                    Is.string = string;
                    function number(value) {
                        return toString.call(value) === '[object Number]';
                    }
                    Is.number = number;
                    function numberRange(value, min, max) {
                        return toString.call(value) === '[object Number]' && min <= value && value <= max;
                    }
                    Is.numberRange = numberRange;
                    function integer(value) {
                        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;
                    }
                    Is.integer = integer;
                    function uinteger(value) {
                        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;
                    }
                    Is.uinteger = uinteger;
                    function func(value) {
                        return toString.call(value) === '[object Function]';
                    }
                    Is.func = func;
                    function objectLiteral(value) {
                        // Strictly speaking class instances pass this check as well. Since the LSP
                        // doesn't use classes we ignore this for now. If we do we need to add something
                        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
                        return value !== null && typeof value === 'object';
                    }
                    Is.objectLiteral = objectLiteral;
                    function typedArray(value, check) {
                        return Array.isArray(value) && value.every(check);
                    }
                    Is.typedArray = typedArray;
                })(Is || (Is = {}));
            /***/ },
            /***/ 2730: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_966740__)=>{
                "use strict";
                var forEach = __nested_webpack_require_966740__(705);
                var availableTypedArrays = __nested_webpack_require_966740__(4834);
                var callBind = __nested_webpack_require_966740__(8498);
                var callBound = __nested_webpack_require_966740__(9818);
                var gOPD = __nested_webpack_require_966740__(9336);
                var $toString = callBound('Object.prototype.toString');
                var hasToStringTag = __nested_webpack_require_966740__(1913)();
                var g = typeof globalThis === 'undefined' ? __nested_webpack_require_966740__.g : globalThis;
                var typedArrays = availableTypedArrays();
                var $slice = callBound('String.prototype.slice');
                var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
                var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
                    for(var i = 0; i < array.length; i += 1){
                        if (array[i] === value) {
                            return i;
                        }
                    }
                    return -1;
                };
                var cache = {
                    __proto__: null
                };
                if (hasToStringTag && gOPD && getPrototypeOf) {
                    forEach(typedArrays, function(typedArray) {
                        var arr = new g[typedArray]();
                        if (Symbol.toStringTag in arr) {
                            var proto = getPrototypeOf(arr);
                            var descriptor = gOPD(proto, Symbol.toStringTag);
                            if (!descriptor) {
                                var superProto = getPrototypeOf(proto);
                                descriptor = gOPD(superProto, Symbol.toStringTag);
                            }
                            cache['$' + typedArray] = callBind(descriptor.get);
                        }
                    });
                } else {
                    forEach(typedArrays, function(typedArray) {
                        var arr = new g[typedArray]();
                        cache['$' + typedArray] = callBind(arr.slice);
                    });
                }
                var tryTypedArrays = function tryAllTypedArrays(value) {
                    var found = false;
                    forEach(cache, function(getter, typedArray) {
                        if (!found) {
                            try {
                                if ('$' + getter(value) === typedArray) {
                                    found = $slice(typedArray, 1);
                                }
                            } catch (e) {}
                        }
                    });
                    return found;
                };
                var trySlices = function tryAllSlices(value) {
                    var found = false;
                    forEach(cache, function(getter, name) {
                        if (!found) {
                            try {
                                getter(value);
                                found = $slice(name, 1);
                            } catch (e) {}
                        }
                    });
                    return found;
                };
                module1.exports = function whichTypedArray(value) {
                    if (!value || typeof value !== 'object') {
                        return false;
                    }
                    if (!hasToStringTag) {
                        var tag = $slice($toString(value), 8, -1);
                        if ($indexOf(typedArrays, tag) > -1) {
                            return tag;
                        }
                        if (tag !== 'Object') {
                            return false;
                        }
                        // node < 0.6 hits here on real Typed Arrays
                        return trySlices(value);
                    }
                    if (!gOPD) {
                        return null;
                    } // unknown engine
                    return tryTypedArrays(value);
                };
            /***/ },
            /***/ 4834: /***/ (module1, __unused_webpack_exports, __nested_webpack_require_970987__)=>{
                "use strict";
                var possibleNames = [
                    'BigInt64Array',
                    'BigUint64Array',
                    'Float32Array',
                    'Float64Array',
                    'Int16Array',
                    'Int32Array',
                    'Int8Array',
                    'Uint16Array',
                    'Uint32Array',
                    'Uint8Array',
                    'Uint8ClampedArray'
                ];
                var g = typeof globalThis === 'undefined' ? __nested_webpack_require_970987__.g : globalThis;
                module1.exports = function availableTypedArrays() {
                    var out = [];
                    for(var i = 0; i < possibleNames.length; i++){
                        if (typeof g[possibleNames[i]] === 'function') {
                            out[out.length] = possibleNames[i];
                        }
                    }
                    return out;
                };
            /***/ }
        };
        /************************************************************************/ /******/ // The module cache
        /******/ var __webpack_module_cache__ = {};
        /******/ /******/ // The require function
        /******/ function __nested_webpack_require_972253__(moduleId) {
            /******/ // Check if module is in cache
            /******/ var cachedModule = __webpack_module_cache__[moduleId];
            /******/ if (cachedModule !== undefined) {
                /******/ return cachedModule.exports;
            /******/ }
            /******/ // Create a new module (and put it into the cache)
            /******/ var module1 = __webpack_module_cache__[moduleId] = {
                /******/ // no module.id needed
                /******/ // no module.loaded needed
                /******/ exports: {}
            };
            /******/ /******/ // Execute the module function
            /******/ __webpack_modules__[moduleId].call(module1.exports, module1, module1.exports, __nested_webpack_require_972253__);
            /******/ /******/ // Return the exports of the module
            /******/ return module1.exports;
        /******/ }
        /******/ /************************************************************************/ /******/ /* webpack/runtime/compat get default export */ /******/ (()=>{
            /******/ // getDefaultExport function for compatibility with non-harmony modules
            /******/ __nested_webpack_require_972253__.n = (module1)=>{
                /******/ var getter = module1 && module1.__esModule ? /******/ ()=>module1['default'] : /******/ ()=>module1;
                /******/ __nested_webpack_require_972253__.d(getter, {
                    a: getter
                });
                /******/ return getter;
            /******/ };
        /******/ })();
        /******/ /******/ /* webpack/runtime/define property getters */ /******/ (()=>{
            /******/ // define getter functions for harmony exports
            /******/ __nested_webpack_require_972253__.d = (exports1, definition)=>{
                /******/ for(var key in definition){
                    /******/ if (__nested_webpack_require_972253__.o(definition, key) && !__nested_webpack_require_972253__.o(exports1, key)) {
                        /******/ Object.defineProperty(exports1, key, {
                            enumerable: true,
                            get: definition[key]
                        });
                    /******/ }
                /******/ }
            /******/ };
        /******/ })();
        /******/ /******/ /* webpack/runtime/global */ /******/ (()=>{
            /******/ __nested_webpack_require_972253__.g = function() {
                /******/ if (typeof globalThis === 'object') return globalThis;
                /******/ try {
                    /******/ return this || new Function('return this')();
                /******/ } catch (e) {
                    /******/ if (typeof window === 'object') return window;
                /******/ }
            /******/ }();
        /******/ })();
        /******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/ (()=>{
            /******/ __nested_webpack_require_972253__.o = (obj, prop)=>Object.prototype.hasOwnProperty.call(obj, prop);
        /******/ })();
        /******/ /******/ /* webpack/runtime/make namespace object */ /******/ (()=>{
            /******/ // define __esModule on exports
            /******/ __nested_webpack_require_972253__.r = (exports1)=>{
                /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                    /******/ Object.defineProperty(exports1, Symbol.toStringTag, {
                        value: 'Module'
                    });
                /******/ }
                /******/ Object.defineProperty(exports1, '__esModule', {
                    value: true
                });
            /******/ };
        /******/ })();
        /******/ /************************************************************************/ var __nested_webpack_exports__ = {};
        // This entry need to be wrapped in an IIFE because it need to be in strict mode.
        (()=>{
            "use strict";
            // ESM COMPAT FLAG
            __nested_webpack_require_972253__.r(__nested_webpack_exports__);
            // EXPORTS
            __nested_webpack_require_972253__.d(__nested_webpack_exports__, {
                PhpService: ()=>/* binding */ PhpService
            });
            // EXTERNAL MODULE: ./src/services/base-service.ts
            var base_service = __nested_webpack_require_972253__(2125);
            // EXTERNAL MODULE: ./src/services/php/lib/php.js
            var php = __nested_webpack_require_972253__(4849);
            // EXTERNAL MODULE: ../../node_modules/vscode-languageserver-protocol/lib/browser/main.js
            var main = __nested_webpack_require_972253__(5501);
            // EXTERNAL MODULE: ./src/utils.ts
            var utils = __nested_webpack_require_972253__(7770);
            ; // CONCATENATED MODULE: ./src/ace/range-singleton.ts
            function _define_property(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }
            class AceRange {
                static getConstructor(editor) {
                    if (!AceRange._instance && editor) {
                        AceRange._instance = editor.getSelectionRange().constructor;
                    }
                    return AceRange._instance;
                }
            }
            _define_property(AceRange, "_instance", void 0);
            ; // CONCATENATED MODULE: ./src/type-converters/common-converters.ts
            var common_converters_CommonConverter;
            (function(CommonConverter1) {
                function normalizeRanges(completions) {
                    return completions && completions.map((el)=>{
                        if (el["range"]) {
                            el["range"] = toRange(el["range"]);
                        }
                        return el;
                    });
                }
                CommonConverter1.normalizeRanges = normalizeRanges;
                function cleanHtml(html) {
                    return html.replace(/<a\s/, "<a target='_blank' ");
                }
                CommonConverter1.cleanHtml = cleanHtml;
                function toRange(range) {
                    if (!range || !range.start || !range.end) {
                        return;
                    }
                    let Range = AceRange.getConstructor();
                    // @ts-ignore
                    return Range.fromPoints(range.start, range.end);
                }
                CommonConverter1.toRange = toRange;
                function convertKind(kind) {
                    switch(kind){
                        case "primitiveType":
                        case "keyword":
                            return main.CompletionItemKind.Keyword;
                        case "variable":
                        case "localVariable":
                            return main.CompletionItemKind.Variable;
                        case "memberVariable":
                        case "memberGetAccessor":
                        case "memberSetAccessor":
                            return main.CompletionItemKind.Field;
                        case "function":
                        case "memberFunction":
                        case "constructSignature":
                        case "callSignature":
                        case "indexSignature":
                            return main.CompletionItemKind.Function;
                        case "enum":
                            return main.CompletionItemKind.Enum;
                        case "module":
                            return main.CompletionItemKind.Module;
                        case "class":
                            return main.CompletionItemKind.Class;
                        case "interface":
                            return main.CompletionItemKind.Interface;
                        case "warning":
                            return main.CompletionItemKind.File;
                    }
                    return main.CompletionItemKind.Property;
                }
                CommonConverter1.convertKind = convertKind;
                function excludeByErrorMessage(diagnostics, errorMessagesToIgnore, fieldName = "message") {
                    if (!errorMessagesToIgnore) return diagnostics;
                    return diagnostics.filter((el)=>!(0, utils /* checkValueAgainstRegexpArray */ .Tk)(el[fieldName], errorMessagesToIgnore));
                }
                CommonConverter1.excludeByErrorMessage = excludeByErrorMessage;
            })(common_converters_CommonConverter || (common_converters_CommonConverter = {}));
            ; // CONCATENATED MODULE: ./src/type-converters/lsp/lsp-converters.ts
            function fromRange(range) {
                return {
                    start: {
                        line: range.start.row,
                        character: range.start.column
                    },
                    end: {
                        line: range.end.row,
                        character: range.end.column
                    }
                };
            }
            function rangeFromPositions(start, end) {
                return {
                    start: start,
                    end: end
                };
            }
            function toRange(range) {
                return {
                    start: {
                        row: range.start.line,
                        column: range.start.character
                    },
                    end: {
                        row: range.end.line,
                        column: range.end.character
                    }
                };
            }
            function fromPoint(point) {
                return {
                    line: point.row,
                    character: point.column
                };
            }
            function toPoint(position) {
                return {
                    row: position.line,
                    column: position.character
                };
            }
            function toAnnotations(diagnostics) {
                var _diagnostics;
                return (_diagnostics = diagnostics) === null || _diagnostics === void 0 ? void 0 : _diagnostics.map((el)=>{
                    return {
                        row: el.range.start.line,
                        column: el.range.start.character,
                        text: el.message,
                        type: el.severity === 1 ? "error" : el.severity === 2 ? "warning" : "info",
                        code: el.code
                    };
                });
            }
            function fromAnnotations(annotations) {
                var _annotations;
                return (_annotations = annotations) === null || _annotations === void 0 ? void 0 : _annotations.map((el)=>{
                    return {
                        range: {
                            start: {
                                line: el.row,
                                character: el.column
                            },
                            end: {
                                line: el.row,
                                character: el.column
                            }
                        },
                        message: el.text,
                        severity: el.type === "error" ? 1 : el.type === "warning" ? 2 : 3,
                        code: el["code"]
                    };
                });
            }
            function toCompletion(item) {
                var _item_textEdit, _item_command;
                let itemKind = item.kind;
                let kind = itemKind ? Object.keys(CompletionItemKind)[Object.values(CompletionItemKind).indexOf(itemKind)] : undefined;
                var _item_textEdit_newText, _ref;
                let text = (_ref = (_item_textEdit_newText = (_item_textEdit = item.textEdit) === null || _item_textEdit === void 0 ? void 0 : _item_textEdit.newText) !== null && _item_textEdit_newText !== void 0 ? _item_textEdit_newText : item.insertText) !== null && _ref !== void 0 ? _ref : item.label;
                // filtering would happen on ace editor side
                // TODO: if filtering and sorting are on server side, we should disable FilteredList in ace completer
                text = item.filterText && !text.startsWith(item.filterText) ? item.filterText + text : text;
                let command = ((_item_command = item.command) === null || _item_command === void 0 ? void 0 : _item_command.command) == "editor.action.triggerSuggest" ? "startAutocomplete" : undefined;
                let range = item.textEdit ? getTextEditRange(item.textEdit, item.filterText) : undefined;
                let completion = {
                    meta: kind,
                    caption: item.label,
                    score: undefined
                };
                completion["command"] = command;
                completion["range"] = range;
                completion["item"] = item;
                if (item.insertTextFormat == InsertTextFormat.Snippet) {
                    completion["snippet"] = text;
                } else {
                    completion["value"] = text !== null && text !== void 0 ? text : "";
                }
                completion["documentation"] = item.documentation; //TODO: this is workaround for services with instant completion
                completion["position"] = item["position"];
                completion["service"] = item["service"]; //TODO: since we have multiple servers, we need to determine which
                // server to use for resolving
                return completion;
            }
            function toCompletions(completions) {
                if (completions.length > 0) {
                    let combinedCompletions = completions.map((el)=>{
                        if (!el.completions) {
                            return [];
                        }
                        let allCompletions;
                        if (Array.isArray(el.completions)) {
                            allCompletions = el.completions;
                        } else {
                            allCompletions = el.completions.items;
                        }
                        return allCompletions.map((item)=>{
                            item["service"] = el.service;
                            return item;
                        });
                    }).flat();
                    return combinedCompletions.map((item)=>toCompletion(item));
                }
                return [];
            }
            function toResolvedCompletion(completion, item) {
                completion["docMarkdown"] = fromMarkupContent(item.documentation);
                return completion;
            }
            function toCompletionItem(completion) {
                let command;
                if (completion["command"]) {
                    command = {
                        title: "triggerSuggest",
                        command: completion["command"]
                    };
                }
                var _completion_caption;
                let completionItem = {
                    label: (_completion_caption = completion.caption) !== null && _completion_caption !== void 0 ? _completion_caption : "",
                    kind: CommonConverter.convertKind(completion.meta),
                    command: command,
                    insertTextFormat: completion["snippet"] ? InsertTextFormat.Snippet : InsertTextFormat.PlainText,
                    documentation: completion["documentation"]
                };
                if (completion["range"]) {
                    var _completion_snippet;
                    completionItem.textEdit = {
                        range: fromRange(completion["range"]),
                        newText: (_completion_snippet = completion["snippet"]) !== null && _completion_snippet !== void 0 ? _completion_snippet : completion["value"]
                    };
                } else {
                    var _completion_snippet1;
                    completionItem.insertText = (_completion_snippet1 = completion["snippet"]) !== null && _completion_snippet1 !== void 0 ? _completion_snippet1 : completion["value"];
                }
                completionItem["fileName"] = completion["fileName"];
                completionItem["position"] = completion["position"];
                completionItem["item"] = completion["item"];
                completionItem["service"] = completion["service"]; //TODO:
                return completionItem;
            }
            function getTextEditRange(textEdit, filterText) {
                const filterLength = filterText ? filterText.length : 0;
                if ("insert" in textEdit && "replace" in textEdit) {
                    let mergedRanges = mergeRanges([
                        toRange(textEdit.insert),
                        toRange(textEdit.replace)
                    ]);
                    return mergedRanges[0];
                } else {
                    textEdit.range.start.character -= filterLength;
                    return toRange(textEdit.range);
                }
            }
            function toTooltip(hover) {
                var _hover_find;
                if (!hover) return;
                let content = hover.map((el)=>{
                    if (!el || !el.contents) return;
                    if (MarkupContent.is(el.contents)) {
                        return fromMarkupContent(el.contents);
                    } else if (MarkedString.is(el.contents)) {
                        if (typeof el.contents === "string") {
                            return el.contents;
                        }
                        return "```" + el.contents.value + "```";
                    } else {
                        let contents = el.contents.map((el)=>{
                            if (typeof el !== "string") {
                                return `\`\`\`${el.value}\`\`\``;
                            } else {
                                return el;
                            }
                        });
                        return contents.join("\n\n");
                    }
                }).filter(notEmpty);
                if (content.length === 0) return;
                //TODO: it could be merged within all ranges in future
                let lspRange = (_hover_find = hover.find((el)=>{
                    var _el;
                    return (_el = el) === null || _el === void 0 ? void 0 : _el.range;
                })) === null || _hover_find === void 0 ? void 0 : _hover_find.range;
                let range;
                if (lspRange) range = toRange(lspRange);
                return {
                    content: {
                        type: "markdown",
                        text: content.join("\n\n")
                    },
                    range: range
                };
            }
            function fromSignatureHelp(signatureHelp) {
                if (!signatureHelp) return;
                let content = signatureHelp.map((el)=>{
                    var _el, _el1;
                    if (!el) return;
                    let signatureIndex = ((_el = el) === null || _el === void 0 ? void 0 : _el.activeSignature) || 0;
                    let activeSignature = el.signatures[signatureIndex];
                    if (!activeSignature) return;
                    let activeParam = (_el1 = el) === null || _el1 === void 0 ? void 0 : _el1.activeParameter;
                    let contents = activeSignature.label;
                    if (activeParam != undefined && activeSignature.parameters && activeSignature.parameters[activeParam]) {
                        let param = activeSignature.parameters[activeParam].label;
                        if (typeof param == "string") {
                            contents = contents.replace(param, `**${param}**`);
                        }
                    }
                    if (activeSignature.documentation) {
                        if (MarkupContent.is(activeSignature.documentation)) {
                            return contents + "\n\n" + fromMarkupContent(activeSignature.documentation);
                        } else {
                            contents += "\n\n" + activeSignature.documentation;
                            return contents;
                        }
                    } else {
                        return contents;
                    }
                }).filter(notEmpty);
                if (content.length === 0) return;
                return {
                    content: {
                        type: "markdown",
                        text: content.join("\n\n")
                    }
                };
            }
            function fromMarkupContent(content) {
                if (!content) return;
                if (typeof content === "string") {
                    return content;
                } else {
                    return content.value;
                }
            }
            function fromAceDelta(delta, eol) {
                const text = delta.lines.length > 1 ? delta.lines.join(eol) : delta.lines[0];
                return {
                    range: delta.action === "insert" ? rangeFromPositions(fromPoint(delta.start), fromPoint(delta.start)) : rangeFromPositions(fromPoint(delta.start), fromPoint(delta.end)),
                    text: delta.action === "insert" ? text : ""
                };
            }
            function filterDiagnostics(diagnostics, filterErrors) {
                return common_converters_CommonConverter.excludeByErrorMessage(diagnostics, filterErrors.errorMessagesToIgnore).map((el)=>{
                    if ((0, utils /* checkValueAgainstRegexpArray */ .Tk)(el.message, filterErrors.errorMessagesToTreatAsWarning)) {
                        el.severity = main.DiagnosticSeverity.Warning;
                    } else if ((0, utils /* checkValueAgainstRegexpArray */ .Tk)(el.message, filterErrors.errorMessagesToTreatAsInfo)) {
                        el.severity = main.DiagnosticSeverity.Information;
                    }
                    return el;
                });
            }
            function fromDocumentHighlights(documentHighlights) {
                return documentHighlights.map(function(el) {
                    let className = el.kind == 2 ? "language_highlight_read" : el.kind == 3 ? "language_highlight_write" : "language_highlight_text";
                    return toMarkerGroupItem(CommonConverter.toRange(toRange(el.range)), className);
                });
            }
            function toMarkerGroupItem(range, className, tooltipText) {
                let markerGroupItem = {
                    range: range,
                    className: className
                };
                if (tooltipText) {
                    markerGroupItem["tooltipText"] = tooltipText;
                }
                return markerGroupItem;
            }
            ; // CONCATENATED MODULE: ./src/services/php/php-service.ts
            function php_service_define_property(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }
                return obj;
            }
            class PhpService extends base_service.BaseService {
                async doValidation(document1) {
                    let value = this.getDocumentValue(document1.uri);
                    if (!value) return [];
                    if (this.getOption(document1.uri, "inline")) {
                        value = "<?" + value + "?>";
                    }
                    var tokens = php /* PHP */ .j.Lexer(value, {
                        short_open_tag: 1
                    });
                    let errors = [];
                    try {
                        new php /* PHP */ .j.Parser(tokens);
                    } catch (e) {
                        errors.push({
                            range: {
                                start: {
                                    line: e.line - 1,
                                    character: 0
                                },
                                end: {
                                    line: e.line - 1,
                                    character: 0
                                }
                            },
                            message: e.message.charAt(0).toUpperCase() + e.message.substring(1),
                            severity: 1
                        });
                    }
                    return filterDiagnostics(errors, this.optionsToFilterDiagnostics);
                }
                constructor(mode){
                    super(mode);
                    php_service_define_property(this, "$service", void 0);
                    php_service_define_property(this, "serviceCapabilities", {
                        diagnosticProvider: {
                            interFileDependencies: true,
                            workspaceDiagnostics: true
                        }
                    });
                }
            }
        })();
        /******/ return __nested_webpack_exports__;
    /******/ })();
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtpQkFDSDtnQkFDRCw2REFBNkQsR0FBRzlMLElBQUlpTCxNQUFNLENBQUMvOUIsU0FBUyxDQUFDNitCLFNBQVMsR0FBRztvQkFDN0Y7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7aUJBQ0g7Z0JBQ0QvTCxJQUFJaUwsTUFBTSxDQUFDLzlCLFNBQVMsQ0FBQ3ErQixRQUFRLEdBQUc7b0JBQzVCO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtpQkFDSDtnQkFDRHZMLElBQUlpTCxNQUFNLENBQUMvOUIsU0FBUyxDQUFDbytCLE9BQU8sR0FBRztvQkFDM0I7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO2lCQUNIO2dCQUNEdEwsSUFBSWlMLE1BQU0sQ0FBQy85QixTQUFTLENBQUNrK0IsTUFBTSxHQUFHO29CQUMxQjtvQkFDQSxb0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxlCQUNIO2dCQUNEcEwsSUFBSWlMLE1BQU0sQ0FBQy85QixTQUFTLENBQUNtK0IsU0FBUyxHQUFHO29CQUM3QjtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtpQkFDSDtnQkFDRHJMLElBQUlpTCxNQUFNLENBQUMvOUIsU0FBUyxDQUFDMCtCLE1BQU0sR0FBRztvQkFDMUI7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7aUJBQ0g7Z0JBQ0Q1TCxJQUFJaUwsTUFBTSxDQUFDLzlCLFNBQVMsQ0FBQ3crQixRQUFRLEdBQUc7b0JBQzb0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRCxDQUFDO29CQUNELENBQUM7b0JBQ0QsQ0FBQztvQkFDRDtvQkFDQTtpQkFDSDtnQkFDRDFMLElBQUlpTCxNQUFNLENBQUMvOUIsU0FBUyxDQUFDdStCLE9BQU8sR0FBRztvQkFDM0I7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRCxDQUFDO29CQUNEO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBLENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNELENBQUM7b0JBQ0Q7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0EsQ0FBQztvQkFDRDtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQSxDQUFDO29CQUNEO29CQUNBO2lCQUNIO2dCQUNEekwsSUFBSWlMLE1BQU0sQ0FBQy85QixTQUFTLENBQUM4K0IsVUFBVSxHQUFHO29CQUM5QixDQUFDO29CQUNEO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO29CQUNBO2lCQUNIO2dCQUNEaE0sSUFBSWlMLE1BQU0sQ0FBQy85QixTQUFTLENBQUMyK0IsS0FBSyxHQUFHO29CQUN6QjtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtvQkFDQTtpQkFDSDtnQkFDRDdMLElBQUlpTCxNQUFNLENBQUMvOUIsU0FBUyxDQUFDcytCLEtBQUssR0FBRztvQkFDekI7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7b0JBQ0E7aUJBQ0g7Z0JBQ0R0L0IsU0FBUTRwQixDQUFDLEdBQUdrSztZQUdaLEdBQUcsR0FBRztZQUVOLEdBQUcsR0FBRyxNQUNOLEdBQUcsR0FBSSxDQUFDbkgseUJBQXlCQywwQkFBbUJBLEVBQUVwc0IsaUNBQW1CQTtnQkFFekU7Z0JBQ0Esa0JBQWtCLEdBQUdBLGlDQUFtQkEsQ0FBQ3FzQixDQUFDLENBQUNELDBCQUFtQkEsRUFBRTtvQkFDaEUsa0JBQWtCLEdBQUtvVixJQUFJLElBQU8sV0FBVyxHQUFHQztvQkFDaEQsa0JBQWtCLEdBQUt4VCxJQUFJLElBQU8sV0FBVyxHQUFHeVQ7Z0JBQzNCO2dCQUNyQiw4REFBOEQsR0FFOUQsU0FBU0EsYUFBYUMsSUFBSSxFQUFFQyxJQUFJLEVBQU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hDLDBCQUEwQjtnQkFDcEU7Z0JBQ0F2dUIsWUFBWTZ2QixJQUFJLENBQUM7b0JBQ2IsS0FBSyxDQUFDQTtvQkFDTm03Qyw0QkFBNEIsSUFBSSxFQUFFLFlBQVksS0FBSztvQkFDbkRBLDRCQUE0QixJQUFJLEVBQUUsdUJBQXVCO3dCQUNyREUsb0JBQW9COzRCQUNoQkMsdUJBQXVCOzRCQUN2QkMsc0JBQXNCO3dCQUMxQjtvQkFDSjtnQkFDSjtZQUNKO1FBRUE7UUFFQSxNQUFNLEdBQUksT0FBT3YvQywwQkFBbUJBO0lBQ3BDLE1BQU0sR0FBRztBQUVUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWNlLWxpbnRlcnMtcm9vdC8uL3BhY2thZ2VzL2FjZS1saW50ZXJzL2J1aWxkL3BocC1zZXJ2aWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh0aGlzLCAoKSA9PiB7XG5yZXR1cm4gLyoqKioqKi8gKCgpID0+IHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHR2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9ICh7XG5cbi8qKiovIDYwOTM6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogcHJvdmlkZWQgZGVwZW5kZW5jeSAqLyB2YXIgcHJvY2VzcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTkwNyk7XG4vKiBwcm92aWRlZCBkZXBlbmRlbmN5ICovIHZhciBjb25zb2xlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MzY0KTtcbi8vIEN1cnJlbnRseSBpbiBzeW5jIHdpdGggTm9kZS5qcyBsaWIvYXNzZXJ0LmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzJhNTFhZTQyNGE1MTNlYzlhNmFhMzQ2NmJhYTBjYzFkNTVkZDRmM2Jcbi8vIE9yaWdpbmFsbHkgZnJvbSBuYXJ3aGFsLmpzIChodHRwOi8vbmFyd2hhbGpzLm9yZylcbi8vIENvcHlyaWdodCAoYykgMjAwOSBUaG9tYXMgUm9iaW5zb24gPDI4MG5vcnRoLmNvbT5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAnU29mdHdhcmUnKSwgdG9cbi8vIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlXG4vLyByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Jcbi8vIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgJ0FTIElTJywgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOXG4vLyBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OXG4vLyBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgX3JlcXVpcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNDIpLFxuICAgIF9yZXF1aXJlJGNvZGVzID0gX3JlcXVpcmUuY29kZXMsXG4gICAgRVJSX0FNQklHVU9VU19BUkdVTUVOVCA9IF9yZXF1aXJlJGNvZGVzLkVSUl9BTUJJR1VPVVNfQVJHVU1FTlQsXG4gICAgRVJSX0lOVkFMSURfQVJHX1RZUEUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVFlQRSxcbiAgICBFUlJfSU5WQUxJRF9BUkdfVkFMVUUgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfSU5WQUxJRF9BUkdfVkFMVUUsXG4gICAgRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFID0gX3JlcXVpcmUkY29kZXMuRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFLFxuICAgIEVSUl9NSVNTSU5HX0FSR1MgPSBfcmVxdWlyZSRjb2Rlcy5FUlJfTUlTU0lOR19BUkdTO1xuXG52YXIgQXNzZXJ0aW9uRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4MDEpO1xuXG52YXIgX3JlcXVpcmUyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2ODI3KSxcbiAgICBpbnNwZWN0ID0gX3JlcXVpcmUyLmluc3BlY3Q7XG5cbnZhciBfcmVxdWlyZSR0eXBlcyA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKDY4MjcpLnR5cGVzKSxcbiAgICBpc1Byb21pc2UgPSBfcmVxdWlyZSR0eXBlcy5pc1Byb21pc2UsXG4gICAgaXNSZWdFeHAgPSBfcmVxdWlyZSR0eXBlcy5pc1JlZ0V4cDtcblxudmFyIG9iamVjdEFzc2lnbiA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduIDogKF9fd2VicGFja19yZXF1aXJlX18oMzA0NikuYXNzaWduKTtcbnZhciBvYmplY3RJcyA9IE9iamVjdC5pcyA/IE9iamVjdC5pcyA6IF9fd2VicGFja19yZXF1aXJlX18oNTk2OCk7XG52YXIgZXJyb3JDYWNoZSA9IG5ldyBNYXAoKTtcbnZhciBpc0RlZXBFcXVhbDtcbnZhciBpc0RlZXBTdHJpY3RFcXVhbDtcbnZhciBwYXJzZUV4cHJlc3Npb25BdDtcbnZhciBmaW5kTm9kZUFyb3VuZDtcbnZhciBkZWNvZGVyO1xuXG5mdW5jdGlvbiBsYXp5TG9hZENvbXBhcmlzb24oKSB7XG4gIHZhciBjb21wYXJpc29uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NjU2KTtcblxuICBpc0RlZXBFcXVhbCA9IGNvbXBhcmlzb24uaXNEZWVwRXF1YWw7XG4gIGlzRGVlcFN0cmljdEVxdWFsID0gY29tcGFyaXNvbi5pc0RlZXBTdHJpY3RFcXVhbDtcbn0gLy8gRXNjYXBlIGNvbnRyb2wgY2hhcmFjdGVycyBidXQgbm90IFxcbiBhbmQgXFx0IHRvIGtlZXAgdGhlIGxpbmUgYnJlYWtzIGFuZFxuLy8gaW5kZW50YXRpb24gaW50YWN0LlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcblxuXG52YXIgZXNjYXBlU2VxdWVuY2VzUmVnRXhwID0gL1tcXHgwMC1cXHgwOFxceDBiXFx4MGNcXHgwZS1cXHgxZl0vZztcbnZhciBtZXRhID0gKC8qIHVudXNlZCBwdXJlIGV4cHJlc3Npb24gb3Igc3VwZXIgKi8gbnVsbCAmJiAoW1wiXFxcXHUwMDAwXCIsIFwiXFxcXHUwMDAxXCIsIFwiXFxcXHUwMDAyXCIsIFwiXFxcXHUwMDAzXCIsIFwiXFxcXHUwMDA0XCIsIFwiXFxcXHUwMDA1XCIsIFwiXFxcXHUwMDA2XCIsIFwiXFxcXHUwMDA3XCIsICdcXFxcYicsICcnLCAnJywgXCJcXFxcdTAwMGJcIiwgJ1xcXFxmJywgJycsIFwiXFxcXHUwMDBlXCIsIFwiXFxcXHUwMDBmXCIsIFwiXFxcXHUwMDEwXCIsIFwiXFxcXHUwMDExXCIsIFwiXFxcXHUwMDEyXCIsIFwiXFxcXHUwMDEzXCIsIFwiXFxcXHUwMDE0XCIsIFwiXFxcXHUwMDE1XCIsIFwiXFxcXHUwMDE2XCIsIFwiXFxcXHUwMDE3XCIsIFwiXFxcXHUwMDE4XCIsIFwiXFxcXHUwMDE5XCIsIFwiXFxcXHUwMDFhXCIsIFwiXFxcXHUwMDFiXCIsIFwiXFxcXHUwMDFjXCIsIFwiXFxcXHUwMDFkXCIsIFwiXFxcXHUwMDFlXCIsIFwiXFxcXHUwMDFmXCJdKSk7XG5cbnZhciBlc2NhcGVGbiA9IGZ1bmN0aW9uIGVzY2FwZUZuKHN0cikge1xuICByZXR1cm4gbWV0YVtzdHIuY2hhckNvZGVBdCgwKV07XG59O1xuXG52YXIgd2FybmVkID0gZmFsc2U7IC8vIFRoZSBhc3NlcnQgbW9kdWxlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0aGF0IHRocm93XG4vLyBBc3NlcnRpb25FcnJvcidzIHdoZW4gcGFydGljdWxhciBjb25kaXRpb25zIGFyZSBub3QgbWV0LiBUaGVcbi8vIGFzc2VydCBtb2R1bGUgbXVzdCBjb25mb3JtIHRvIHRoZSBmb2xsb3dpbmcgaW50ZXJmYWNlLlxuXG52YXIgYXNzZXJ0ID0gbW9kdWxlLmV4cG9ydHMgPSBvaztcbnZhciBOT19FWENFUFRJT05fU0VOVElORUwgPSB7fTsgLy8gQWxsIG9mIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIG11c3QgdGhyb3cgYW4gQXNzZXJ0aW9uRXJyb3Jcbi8vIHdoZW4gYSBjb3JyZXNwb25kaW5nIGNvbmRpdGlvbiBpcyBub3QgbWV0LCB3aXRoIGEgbWVzc2FnZSB0aGF0XG4vLyBtYXkgYmUgdW5kZWZpbmVkIGlmIG5vdCBwcm92aWRlZC4gQWxsIGFzc2VydGlvbiBtZXRob2RzIHByb3ZpZGVcbi8vIGJvdGggdGhlIGFjdHVhbCBhbmQgZXhwZWN0ZWQgdmFsdWVzIHRvIHRoZSBhc3NlcnRpb24gZXJyb3IgZm9yXG4vLyBkaXNwbGF5IHB1cnBvc2VzLlxuXG5mdW5jdGlvbiBpbm5lckZhaWwob2JqKSB7XG4gIGlmIChvYmoubWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB0aHJvdyBvYmoubWVzc2FnZTtcbiAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKG9iaik7XG59XG5cbmZ1bmN0aW9uIGZhaWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSwgb3BlcmF0b3IsIHN0YWNrU3RhcnRGbikge1xuICB2YXIgYXJnc0xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbnRlcm5hbE1lc3NhZ2U7XG5cbiAgaWYgKGFyZ3NMZW4gPT09IDApIHtcbiAgICBpbnRlcm5hbE1lc3NhZ2UgPSAnRmFpbGVkJztcbiAgfSBlbHNlIGlmIChhcmdzTGVuID09PSAxKSB7XG4gICAgbWVzc2FnZSA9IGFjdHVhbDtcbiAgICBhY3R1YWwgPSB1bmRlZmluZWQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHdhcm5lZCA9PT0gZmFsc2UpIHtcbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgICB2YXIgd2FybiA9IHByb2Nlc3MuZW1pdFdhcm5pbmcgPyBwcm9jZXNzLmVtaXRXYXJuaW5nIDogY29uc29sZS53YXJuLmJpbmQoY29uc29sZSk7XG4gICAgICB3YXJuKCdhc3NlcnQuZmFpbCgpIHdpdGggbW9yZSB0aGFuIG9uZSBhcmd1bWVudCBpcyBkZXByZWNhdGVkLiAnICsgJ1BsZWFzZSB1c2UgYXNzZXJ0LnN0cmljdEVxdWFsKCkgaW5zdGVhZCBvciBvbmx5IHBhc3MgYSBtZXNzYWdlLicsICdEZXByZWNhdGlvbldhcm5pbmcnLCAnREVQMDA5NCcpO1xuICAgIH1cblxuICAgIGlmIChhcmdzTGVuID09PSAyKSBvcGVyYXRvciA9ICchPSc7XG4gIH1cblxuICBpZiAobWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB0aHJvdyBtZXNzYWdlO1xuICB2YXIgZXJyQXJncyA9IHtcbiAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgb3BlcmF0b3I6IG9wZXJhdG9yID09PSB1bmRlZmluZWQgPyAnZmFpbCcgOiBvcGVyYXRvcixcbiAgICBzdGFja1N0YXJ0Rm46IHN0YWNrU3RhcnRGbiB8fCBmYWlsXG4gIH07XG5cbiAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgIGVyckFyZ3MubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIH1cblxuICB2YXIgZXJyID0gbmV3IEFzc2VydGlvbkVycm9yKGVyckFyZ3MpO1xuXG4gIGlmIChpbnRlcm5hbE1lc3NhZ2UpIHtcbiAgICBlcnIubWVzc2FnZSA9IGludGVybmFsTWVzc2FnZTtcbiAgICBlcnIuZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7XG4gIH1cblxuICB0aHJvdyBlcnI7XG59XG5cbmFzc2VydC5mYWlsID0gZmFpbDsgLy8gVGhlIEFzc2VydGlvbkVycm9yIGlzIGRlZmluZWQgaW4gaW50ZXJuYWwvZXJyb3IuXG5cbmFzc2VydC5Bc3NlcnRpb25FcnJvciA9IEFzc2VydGlvbkVycm9yO1xuXG5mdW5jdGlvbiBpbm5lck9rKGZuLCBhcmdMZW4sIHZhbHVlLCBtZXNzYWdlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICB2YXIgZ2VuZXJhdGVkTWVzc2FnZSA9IGZhbHNlO1xuXG4gICAgaWYgKGFyZ0xlbiA9PT0gMCkge1xuICAgICAgZ2VuZXJhdGVkTWVzc2FnZSA9IHRydWU7XG4gICAgICBtZXNzYWdlID0gJ05vIHZhbHVlIGFyZ3VtZW50IHBhc3NlZCB0byBgYXNzZXJ0Lm9rKClgJztcbiAgICB9IGVsc2UgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgdGhyb3cgbWVzc2FnZTtcbiAgICB9XG5cbiAgICB2YXIgZXJyID0gbmV3IEFzc2VydGlvbkVycm9yKHtcbiAgICAgIGFjdHVhbDogdmFsdWUsXG4gICAgICBleHBlY3RlZDogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJz09JyxcbiAgICAgIHN0YWNrU3RhcnRGbjogZm5cbiAgICB9KTtcbiAgICBlcnIuZ2VuZXJhdGVkTWVzc2FnZSA9IGdlbmVyYXRlZE1lc3NhZ2U7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59IC8vIFB1cmUgYXNzZXJ0aW9uIHRlc3RzIHdoZXRoZXIgYSB2YWx1ZSBpcyB0cnV0aHksIGFzIGRldGVybWluZWRcbi8vIGJ5ICEhdmFsdWUuXG5cblxuZnVuY3Rpb24gb2soKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpbm5lck9rLmFwcGx5KHZvaWQgMCwgW29rLCBhcmdzLmxlbmd0aF0uY29uY2F0KGFyZ3MpKTtcbn1cblxuYXNzZXJ0Lm9rID0gb2s7IC8vIFRoZSBlcXVhbGl0eSBhc3NlcnRpb24gdGVzdHMgc2hhbGxvdywgY29lcmNpdmUgZXF1YWxpdHkgd2l0aCA9PS5cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzICovXG5cbmFzc2VydC5lcXVhbCA9IGZ1bmN0aW9uIGVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblxuXG4gIGlmIChhY3R1YWwgIT0gZXhwZWN0ZWQpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICc9PScsXG4gICAgICBzdGFja1N0YXJ0Rm46IGVxdWFsXG4gICAgfSk7XG4gIH1cbn07IC8vIFRoZSBub24tZXF1YWxpdHkgYXNzZXJ0aW9uIHRlc3RzIGZvciB3aGV0aGVyIHR3byBvYmplY3RzIGFyZSBub3Rcbi8vIGVxdWFsIHdpdGggIT0uXG5cblxuYXNzZXJ0Lm5vdEVxdWFsID0gZnVuY3Rpb24gbm90RXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXG5cbiAgaWYgKGFjdHVhbCA9PSBleHBlY3RlZCkge1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IGFjdHVhbCxcbiAgICAgIGV4cGVjdGVkOiBleHBlY3RlZCxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBvcGVyYXRvcjogJyE9JyxcbiAgICAgIHN0YWNrU3RhcnRGbjogbm90RXF1YWxcbiAgICB9KTtcbiAgfVxufTsgLy8gVGhlIGVxdWl2YWxlbmNlIGFzc2VydGlvbiB0ZXN0cyBhIGRlZXAgZXF1YWxpdHkgcmVsYXRpb24uXG5cblxuYXNzZXJ0LmRlZXBFcXVhbCA9IGZ1bmN0aW9uIGRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmIChpc0RlZXBFcXVhbCA9PT0gdW5kZWZpbmVkKSBsYXp5TG9hZENvbXBhcmlzb24oKTtcblxuICBpZiAoIWlzRGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnZGVlcEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogZGVlcEVxdWFsXG4gICAgfSk7XG4gIH1cbn07IC8vIFRoZSBub24tZXF1aXZhbGVuY2UgYXNzZXJ0aW9uIHRlc3RzIGZvciBhbnkgZGVlcCBpbmVxdWFsaXR5LlxuXG5cbmFzc2VydC5ub3REZWVwRXF1YWwgPSBmdW5jdGlvbiBub3REZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnYWN0dWFsJywgJ2V4cGVjdGVkJyk7XG4gIH1cblxuICBpZiAoaXNEZWVwRXF1YWwgPT09IHVuZGVmaW5lZCkgbGF6eUxvYWRDb21wYXJpc29uKCk7XG5cbiAgaWYgKGlzRGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnbm90RGVlcEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogbm90RGVlcEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG4vKiBlc2xpbnQtZW5hYmxlICovXG5cblxuYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIGRlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmIChpc0RlZXBFcXVhbCA9PT0gdW5kZWZpbmVkKSBsYXp5TG9hZENvbXBhcmlzb24oKTtcblxuICBpZiAoIWlzRGVlcFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnZGVlcFN0cmljdEVxdWFsJyxcbiAgICAgIHN0YWNrU3RhcnRGbjogZGVlcFN0cmljdEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG5cbmFzc2VydC5ub3REZWVwU3RyaWN0RXF1YWwgPSBub3REZWVwU3RyaWN0RXF1YWw7XG5cbmZ1bmN0aW9uIG5vdERlZXBTdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmIChpc0RlZXBFcXVhbCA9PT0gdW5kZWZpbmVkKSBsYXp5TG9hZENvbXBhcmlzb24oKTtcblxuICBpZiAoaXNEZWVwU3RyaWN0RXF1YWwoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdub3REZWVwU3RyaWN0RXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBub3REZWVwU3RyaWN0RXF1YWxcbiAgICB9KTtcbiAgfVxufVxuXG5hc3NlcnQuc3RyaWN0RXF1YWwgPSBmdW5jdGlvbiBzdHJpY3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFUlJfTUlTU0lOR19BUkdTKCdhY3R1YWwnLCAnZXhwZWN0ZWQnKTtcbiAgfVxuXG4gIGlmICghb2JqZWN0SXMoYWN0dWFsLCBleHBlY3RlZCkpIHtcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6ICdzdHJpY3RFcXVhbCcsXG4gICAgICBzdGFja1N0YXJ0Rm46IHN0cmljdEVxdWFsXG4gICAgfSk7XG4gIH1cbn07XG5cbmFzc2VydC5ub3RTdHJpY3RFcXVhbCA9IGZ1bmN0aW9uIG5vdFN0cmljdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9NSVNTSU5HX0FSR1MoJ2FjdHVhbCcsICdleHBlY3RlZCcpO1xuICB9XG5cbiAgaWYgKG9iamVjdElzKGFjdHVhbCwgZXhwZWN0ZWQpKSB7XG4gICAgaW5uZXJGYWlsKHtcbiAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG9wZXJhdG9yOiAnbm90U3RyaWN0RXF1YWwnLFxuICAgICAgc3RhY2tTdGFydEZuOiBub3RTdHJpY3RFcXVhbFxuICAgIH0pO1xuICB9XG59O1xuXG52YXIgQ29tcGFyaXNvbiA9IGZ1bmN0aW9uIENvbXBhcmlzb24ob2JqLCBrZXlzLCBhY3R1YWwpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tcGFyaXNvbik7XG5cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgaWYgKGFjdHVhbCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBhY3R1YWxba2V5XSA9PT0gJ3N0cmluZycgJiYgaXNSZWdFeHAob2JqW2tleV0pICYmIG9ialtrZXldLnRlc3QoYWN0dWFsW2tleV0pKSB7XG4gICAgICAgIF90aGlzW2tleV0gPSBhY3R1YWxba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzW2tleV0gPSBvYmpba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gY29tcGFyZUV4Y2VwdGlvbktleShhY3R1YWwsIGV4cGVjdGVkLCBrZXksIG1lc3NhZ2UsIGtleXMsIGZuKSB7XG4gIGlmICghKGtleSBpbiBhY3R1YWwpIHx8ICFpc0RlZXBTdHJpY3RFcXVhbChhY3R1YWxba2V5XSwgZXhwZWN0ZWRba2V5XSkpIHtcbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgIC8vIENyZWF0ZSBwbGFjZWhvbGRlciBvYmplY3RzIHRvIGNyZWF0ZSBhIG5pY2Ugb3V0cHV0LlxuICAgICAgdmFyIGEgPSBuZXcgQ29tcGFyaXNvbihhY3R1YWwsIGtleXMpO1xuICAgICAgdmFyIGIgPSBuZXcgQ29tcGFyaXNvbihleHBlY3RlZCwga2V5cywgYWN0dWFsKTtcbiAgICAgIHZhciBlcnIgPSBuZXcgQXNzZXJ0aW9uRXJyb3Ioe1xuICAgICAgICBhY3R1YWw6IGEsXG4gICAgICAgIGV4cGVjdGVkOiBiLFxuICAgICAgICBvcGVyYXRvcjogJ2RlZXBTdHJpY3RFcXVhbCcsXG4gICAgICAgIHN0YWNrU3RhcnRGbjogZm5cbiAgICAgIH0pO1xuICAgICAgZXJyLmFjdHVhbCA9IGFjdHVhbDtcbiAgICAgIGVyci5leHBlY3RlZCA9IGV4cGVjdGVkO1xuICAgICAgZXJyLm9wZXJhdG9yID0gZm4ubmFtZTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgb3BlcmF0b3I6IGZuLm5hbWUsXG4gICAgICBzdGFja1N0YXJ0Rm46IGZuXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBleHBlY3RlZCwgbXNnLCBmbikge1xuICBpZiAodHlwZW9mIGV4cGVjdGVkICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKGlzUmVnRXhwKGV4cGVjdGVkKSkgcmV0dXJuIGV4cGVjdGVkLnRlc3QoYWN0dWFsKTsgLy8gYXNzZXJ0LmRvZXNOb3RUaHJvdyBkb2VzIG5vdCBhY2NlcHQgb2JqZWN0cy5cblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ2V4cGVjdGVkJywgWydGdW5jdGlvbicsICdSZWdFeHAnXSwgZXhwZWN0ZWQpO1xuICAgIH0gLy8gSGFuZGxlIHByaW1pdGl2ZXMgcHJvcGVybHkuXG5cblxuICAgIGlmIChfdHlwZW9mKGFjdHVhbCkgIT09ICdvYmplY3QnIHx8IGFjdHVhbCA9PT0gbnVsbCkge1xuICAgICAgdmFyIGVyciA9IG5ldyBBc3NlcnRpb25FcnJvcih7XG4gICAgICAgIGFjdHVhbDogYWN0dWFsLFxuICAgICAgICBleHBlY3RlZDogZXhwZWN0ZWQsXG4gICAgICAgIG1lc3NhZ2U6IG1zZyxcbiAgICAgICAgb3BlcmF0b3I6ICdkZWVwU3RyaWN0RXF1YWwnLFxuICAgICAgICBzdGFja1N0YXJ0Rm46IGZuXG4gICAgICB9KTtcbiAgICAgIGVyci5vcGVyYXRvciA9IGZuLm5hbWU7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhleHBlY3RlZCk7IC8vIFNwZWNpYWwgaGFuZGxlIGVycm9ycyB0byBtYWtlIHN1cmUgdGhlIG5hbWUgYW5kIHRoZSBtZXNzYWdlIGFyZSBjb21wYXJlZFxuICAgIC8vIGFzIHdlbGwuXG5cbiAgICBpZiAoZXhwZWN0ZWQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAga2V5cy5wdXNoKCduYW1lJywgJ21lc3NhZ2UnKTtcbiAgICB9IGVsc2UgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1ZBTFVFKCdlcnJvcicsIGV4cGVjdGVkLCAnbWF5IG5vdCBiZSBhbiBlbXB0eSBvYmplY3QnKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWVwRXF1YWwgPT09IHVuZGVmaW5lZCkgbGF6eUxvYWRDb21wYXJpc29uKCk7XG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICh0eXBlb2YgYWN0dWFsW2tleV0gPT09ICdzdHJpbmcnICYmIGlzUmVnRXhwKGV4cGVjdGVkW2tleV0pICYmIGV4cGVjdGVkW2tleV0udGVzdChhY3R1YWxba2V5XSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb21wYXJlRXhjZXB0aW9uS2V5KGFjdHVhbCwgZXhwZWN0ZWQsIGtleSwgbXNnLCBrZXlzLCBmbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gR3VhcmQgaW5zdGFuY2VvZiBhZ2FpbnN0IGFycm93IGZ1bmN0aW9ucyBhcyB0aGV5IGRvbid0IGhhdmUgYSBwcm90b3R5cGUuXG5cblxuICBpZiAoZXhwZWN0ZWQucHJvdG90eXBlICE9PSB1bmRlZmluZWQgJiYgYWN0dWFsIGluc3RhbmNlb2YgZXhwZWN0ZWQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChFcnJvci5pc1Byb3RvdHlwZU9mKGV4cGVjdGVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBleHBlY3RlZC5jYWxsKHt9LCBhY3R1YWwpID09PSB0cnVlO1xufVxuXG5mdW5jdGlvbiBnZXRBY3R1YWwoZm4pIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnZm4nLCAnRnVuY3Rpb24nLCBmbik7XG4gIH1cblxuICB0cnkge1xuICAgIGZuKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZTtcbiAgfVxuXG4gIHJldHVybiBOT19FWENFUFRJT05fU0VOVElORUw7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSXNQcm9taXNlKG9iaikge1xuICAvLyBBY2NlcHQgbmF0aXZlIEVTNiBwcm9taXNlcyBhbmQgcHJvbWlzZXMgdGhhdCBhcmUgaW1wbGVtZW50ZWQgaW4gYSBzaW1pbGFyXG4gIC8vIHdheS4gRG8gbm90IGFjY2VwdCB0aGVuYWJsZXMgdGhhdCB1c2UgYSBmdW5jdGlvbiBhcyBgb2JqYCBhbmQgdGhhdCBoYXZlIG5vXG4gIC8vIGBjYXRjaGAgaGFuZGxlci5cbiAgLy8gVE9ETzogdGhlbmFibGVzIGFyZSBjaGVja2VkIHVwIHVudGlsIHRoZXkgaGF2ZSB0aGUgY29ycmVjdCBtZXRob2RzLFxuICAvLyBidXQgYWNjb3JkaW5nIHRvIGRvY3VtZW50YXRpb24sIHRoZSBgdGhlbmAgbWV0aG9kIHNob3VsZCByZWNlaXZlXG4gIC8vIHRoZSBgZnVsZmlsbGAgYW5kIGByZWplY3RgIGFyZ3VtZW50cyBhcyB3ZWxsIG9yIGl0IG1heSBiZSBuZXZlciByZXNvbHZlZC5cbiAgcmV0dXJuIGlzUHJvbWlzZShvYmopIHx8IG9iaiAhPT0gbnVsbCAmJiBfdHlwZW9mKG9iaikgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLmNhdGNoID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiB3YWl0Rm9yQWN0dWFsKHByb21pc2VGbikge1xuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdFByb21pc2U7XG5cbiAgICBpZiAodHlwZW9mIHByb21pc2VGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gUmV0dXJuIGEgcmVqZWN0ZWQgcHJvbWlzZSBpZiBgcHJvbWlzZUZuYCB0aHJvd3Mgc3luY2hyb25vdXNseS5cbiAgICAgIHJlc3VsdFByb21pc2UgPSBwcm9taXNlRm4oKTsgLy8gRmFpbCBpbiBjYXNlIG5vIHByb21pc2UgaXMgcmV0dXJuZWQuXG5cbiAgICAgIGlmICghY2hlY2tJc1Byb21pc2UocmVzdWx0UHJvbWlzZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX1JFVFVSTl9WQUxVRSgnaW5zdGFuY2Ugb2YgUHJvbWlzZScsICdwcm9taXNlRm4nLCByZXN1bHRQcm9taXNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNoZWNrSXNQcm9taXNlKHByb21pc2VGbikpIHtcbiAgICAgIHJlc3VsdFByb21pc2UgPSBwcm9taXNlRm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgncHJvbWlzZUZuJywgWydGdW5jdGlvbicsICdQcm9taXNlJ10sIHByb21pc2VGbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlc3VsdFByb21pc2U7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gTk9fRVhDRVBUSU9OX1NFTlRJTkVMO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGV4cGVjdHNFcnJvcihzdGFja1N0YXJ0Rm4sIGFjdHVhbCwgZXJyb3IsIG1lc3NhZ2UpIHtcbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdlcnJvcicsIFsnT2JqZWN0JywgJ0Vycm9yJywgJ0Z1bmN0aW9uJywgJ1JlZ0V4cCddLCBlcnJvcik7XG4gICAgfVxuXG4gICAgaWYgKF90eXBlb2YoYWN0dWFsKSA9PT0gJ29iamVjdCcgJiYgYWN0dWFsICE9PSBudWxsKSB7XG4gICAgICBpZiAoYWN0dWFsLm1lc3NhZ2UgPT09IGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFUlJfQU1CSUdVT1VTX0FSR1VNRU5UKCdlcnJvci9tZXNzYWdlJywgXCJUaGUgZXJyb3IgbWVzc2FnZSBcXFwiXCIuY29uY2F0KGFjdHVhbC5tZXNzYWdlLCBcIlxcXCIgaXMgaWRlbnRpY2FsIHRvIHRoZSBtZXNzYWdlLlwiKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhY3R1YWwgPT09IGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0FNQklHVU9VU19BUkdVTUVOVCgnZXJyb3IvbWVzc2FnZScsIFwiVGhlIGVycm9yIFxcXCJcIi5jb25jYXQoYWN0dWFsLCBcIlxcXCIgaXMgaWRlbnRpY2FsIHRvIHRoZSBtZXNzYWdlLlwiKSk7XG4gICAgfVxuXG4gICAgbWVzc2FnZSA9IGVycm9yO1xuICAgIGVycm9yID0gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKGVycm9yICE9IG51bGwgJiYgX3R5cGVvZihlcnJvcikgIT09ICdvYmplY3QnICYmIHR5cGVvZiBlcnJvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRSgnZXJyb3InLCBbJ09iamVjdCcsICdFcnJvcicsICdGdW5jdGlvbicsICdSZWdFeHAnXSwgZXJyb3IpO1xuICB9XG5cbiAgaWYgKGFjdHVhbCA9PT0gTk9fRVhDRVBUSU9OX1NFTlRJTkVMKSB7XG4gICAgdmFyIGRldGFpbHMgPSAnJztcblxuICAgIGlmIChlcnJvciAmJiBlcnJvci5uYW1lKSB7XG4gICAgICBkZXRhaWxzICs9IFwiIChcIi5jb25jYXQoZXJyb3IubmFtZSwgXCIpXCIpO1xuICAgIH1cblxuICAgIGRldGFpbHMgKz0gbWVzc2FnZSA/IFwiOiBcIi5jb25jYXQobWVzc2FnZSkgOiAnLic7XG4gICAgdmFyIGZuVHlwZSA9IHN0YWNrU3RhcnRGbi5uYW1lID09PSAncmVqZWN0cycgPyAncmVqZWN0aW9uJyA6ICdleGNlcHRpb24nO1xuICAgIGlubmVyRmFpbCh7XG4gICAgICBhY3R1YWw6IHVuZGVmaW5lZCxcbiAgICAgIGV4cGVjdGVkOiBlcnJvcixcbiAgICAgIG9wZXJhdG9yOiBzdGFja1N0YXJ0Rm4ubmFtZSxcbiAgICAgIG1lc3NhZ2U6IFwiTWlzc2luZyBleHBlY3RlZCBcIi5jb25jYXQoZm5UeXBlKS5jb25jYXQoZGV0YWlscyksXG4gICAgICBzdGFja1N0YXJ0Rm46IHN0YWNrU3RhcnRGblxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGVycm9yICYmICFleHBlY3RlZEV4Y2VwdGlvbihhY3R1YWwsIGVycm9yLCBtZXNzYWdlLCBzdGFja1N0YXJ0Rm4pKSB7XG4gICAgdGhyb3cgYWN0dWFsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4cGVjdHNOb0Vycm9yKHN0YWNrU3RhcnRGbiwgYWN0dWFsLCBlcnJvciwgbWVzc2FnZSkge1xuICBpZiAoYWN0dWFsID09PSBOT19FWENFUFRJT05fU0VOVElORUwpIHJldHVybjtcblxuICBpZiAodHlwZW9mIGVycm9yID09PSAnc3RyaW5nJykge1xuICAgIG1lc3NhZ2UgPSBlcnJvcjtcbiAgICBlcnJvciA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghZXJyb3IgfHwgZXhwZWN0ZWRFeGNlcHRpb24oYWN0dWFsLCBlcnJvcikpIHtcbiAgICB2YXIgZGV0YWlscyA9IG1lc3NhZ2UgPyBcIjogXCIuY29uY2F0KG1lc3NhZ2UpIDogJy4nO1xuICAgIHZhciBmblR5cGUgPSBzdGFja1N0YXJ0Rm4ubmFtZSA9PT0gJ2RvZXNOb3RSZWplY3QnID8gJ3JlamVjdGlvbicgOiAnZXhjZXB0aW9uJztcbiAgICBpbm5lckZhaWwoe1xuICAgICAgYWN0dWFsOiBhY3R1YWwsXG4gICAgICBleHBlY3RlZDogZXJyb3IsXG4gICAgICBvcGVyYXRvcjogc3RhY2tTdGFydEZuLm5hbWUsXG4gICAgICBtZXNzYWdlOiBcIkdvdCB1bndhbnRlZCBcIi5jb25jYXQoZm5UeXBlKS5jb25jYXQoZGV0YWlscywgXCJcXG5cIikgKyBcIkFjdHVhbCBtZXNzYWdlOiBcXFwiXCIuY29uY2F0KGFjdHVhbCAmJiBhY3R1YWwubWVzc2FnZSwgXCJcXFwiXCIpLFxuICAgICAgc3RhY2tTdGFydEZuOiBzdGFja1N0YXJ0Rm5cbiAgICB9KTtcbiAgfVxuXG4gIHRocm93IGFjdHVhbDtcbn1cblxuYXNzZXJ0LnRocm93cyA9IGZ1bmN0aW9uIHRocm93cyhwcm9taXNlRm4pIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgZXhwZWN0c0Vycm9yLmFwcGx5KHZvaWQgMCwgW3Rocm93cywgZ2V0QWN0dWFsKHByb21pc2VGbildLmNvbmNhdChhcmdzKSk7XG59O1xuXG5hc3NlcnQucmVqZWN0cyA9IGZ1bmN0aW9uIHJlamVjdHMocHJvbWlzZUZuKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyA+IDEgPyBfbGVuMyAtIDEgOiAwKSwgX2tleTMgPSAxOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgYXJnc1tfa2V5MyAtIDFdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgfVxuXG4gIHJldHVybiB3YWl0Rm9yQWN0dWFsKHByb21pc2VGbikudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgcmV0dXJuIGV4cGVjdHNFcnJvci5hcHBseSh2b2lkIDAsIFtyZWplY3RzLCByZXN1bHRdLmNvbmNhdChhcmdzKSk7XG4gIH0pO1xufTtcblxuYXNzZXJ0LmRvZXNOb3RUaHJvdyA9IGZ1bmN0aW9uIGRvZXNOb3RUaHJvdyhmbikge1xuICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQgPiAxID8gX2xlbjQgLSAxIDogMCksIF9rZXk0ID0gMTsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGFyZ3NbX2tleTQgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICBleHBlY3RzTm9FcnJvci5hcHBseSh2b2lkIDAsIFtkb2VzTm90VGhyb3csIGdldEFjdHVhbChmbildLmNvbmNhdChhcmdzKSk7XG59O1xuXG5hc3NlcnQuZG9lc05vdFJlamVjdCA9IGZ1bmN0aW9uIGRvZXNOb3RSZWplY3QoZm4pIHtcbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41ID4gMSA/IF9sZW41IC0gMSA6IDApLCBfa2V5NSA9IDE7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICBhcmdzW19rZXk1IC0gMV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICB9XG5cbiAgcmV0dXJuIHdhaXRGb3JBY3R1YWwoZm4pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHJldHVybiBleHBlY3RzTm9FcnJvci5hcHBseSh2b2lkIDAsIFtkb2VzTm90UmVqZWN0LCByZXN1bHRdLmNvbmNhdChhcmdzKSk7XG4gIH0pO1xufTtcblxuYXNzZXJ0LmlmRXJyb3IgPSBmdW5jdGlvbiBpZkVycm9yKGVycikge1xuICBpZiAoZXJyICE9PSBudWxsICYmIGVyciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnaWZFcnJvciBnb3QgdW53YW50ZWQgZXhjZXB0aW9uOiAnO1xuXG4gICAgaWYgKF90eXBlb2YoZXJyKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGVyci5tZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGVyci5tZXNzYWdlLmxlbmd0aCA9PT0gMCAmJiBlcnIuY29uc3RydWN0b3IpIHtcbiAgICAgICAgbWVzc2FnZSArPSBlcnIuY29uc3RydWN0b3IubmFtZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gZXJyLm1lc3NhZ2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lc3NhZ2UgKz0gaW5zcGVjdChlcnIpO1xuICAgIH1cblxuICAgIHZhciBuZXdFcnIgPSBuZXcgQXNzZXJ0aW9uRXJyb3Ioe1xuICAgICAgYWN0dWFsOiBlcnIsXG4gICAgICBleHBlY3RlZDogbnVsbCxcbiAgICAgIG9wZXJhdG9yOiAnaWZFcnJvcicsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgc3RhY2tTdGFydEZuOiBpZkVycm9yXG4gICAgfSk7IC8vIE1ha2Ugc3VyZSB3ZSBhY3R1YWxseSBoYXZlIGEgc3RhY2sgdHJhY2UhXG5cbiAgICB2YXIgb3JpZ1N0YWNrID0gZXJyLnN0YWNrO1xuXG4gICAgaWYgKHR5cGVvZiBvcmlnU3RhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBUaGlzIHdpbGwgcmVtb3ZlIGFueSBkdXBsaWNhdGVkIGZyYW1lcyBmcm9tIHRoZSBlcnJvciBmcmFtZXMgdGFrZW5cbiAgICAgIC8vIGZyb20gd2l0aGluIGBpZkVycm9yYCBhbmQgYWRkIHRoZSBvcmlnaW5hbCBlcnJvciBmcmFtZXMgdG8gdGhlIG5ld2x5XG4gICAgICAvLyBjcmVhdGVkIG9uZXMuXG4gICAgICB2YXIgdG1wMiA9IG9yaWdTdGFjay5zcGxpdCgnXFxuJyk7XG4gICAgICB0bXAyLnNoaWZ0KCk7IC8vIEZpbHRlciBhbGwgZnJhbWVzIGV4aXN0aW5nIGluIGVyci5zdGFjay5cblxuICAgICAgdmFyIHRtcDEgPSBuZXdFcnIuc3RhY2suc3BsaXQoJ1xcbicpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRtcDIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gRmluZCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiB0aGUgZnJhbWUuXG4gICAgICAgIHZhciBwb3MgPSB0bXAxLmluZGV4T2YodG1wMltpXSk7XG5cbiAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAvLyBPbmx5IGtlZXAgbmV3IGZyYW1lcy5cbiAgICAgICAgICB0bXAxID0gdG1wMS5zbGljZSgwLCBwb3MpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5ld0Vyci5zdGFjayA9IFwiXCIuY29uY2F0KHRtcDEuam9pbignXFxuJyksIFwiXFxuXCIpLmNvbmNhdCh0bXAyLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXdFcnI7XG4gIH1cbn07IC8vIEV4cG9zZSBhIHN0cmljdCBvbmx5IHZhcmlhbnQgb2YgYXNzZXJ0XG5cblxuZnVuY3Rpb24gc3RyaWN0KCkge1xuICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICBhcmdzW19rZXk2XSA9IGFyZ3VtZW50c1tfa2V5Nl07XG4gIH1cblxuICBpbm5lck9rLmFwcGx5KHZvaWQgMCwgW3N0cmljdCwgYXJncy5sZW5ndGhdLmNvbmNhdChhcmdzKSk7XG59XG5cbmFzc2VydC5zdHJpY3QgPSBvYmplY3RBc3NpZ24oc3RyaWN0LCBhc3NlcnQsIHtcbiAgZXF1YWw6IGFzc2VydC5zdHJpY3RFcXVhbCxcbiAgZGVlcEVxdWFsOiBhc3NlcnQuZGVlcFN0cmljdEVxdWFsLFxuICBub3RFcXVhbDogYXNzZXJ0Lm5vdFN0cmljdEVxdWFsLFxuICBub3REZWVwRXF1YWw6IGFzc2VydC5ub3REZWVwU3RyaWN0RXF1YWxcbn0pO1xuYXNzZXJ0LnN0cmljdC5zdHJpY3QgPSBhc3NlcnQuc3RyaWN0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gOTgwMTpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBwcm92aWRlZCBkZXBlbmRlbmN5ICovIHZhciBwcm9jZXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5OTA3KTtcbi8vIEN1cnJlbnRseSBpbiBzeW5jIHdpdGggTm9kZS5qcyBsaWIvaW50ZXJuYWwvYXNzZXJ0L2Fzc2VydGlvbl9lcnJvci5qc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2NvbW1pdC8wODE3ODQwZjc3NTAzMjE2OWRkZDcwYzg1YWMwNTlmMThmZmNjODFjXG5cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7IG93bktleXMgPSBvd25LZXlzLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSkuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7IH0pKTsgfSBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDsgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzczsgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikgeyBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTsgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7IH0gZnVuY3Rpb24gV3JhcHBlcigpIHsgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTsgfSBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBXcmFwcGVyLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTsgfTsgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgaWYgKGlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7IF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDsgfSBlbHNlIHsgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykgeyB2YXIgYSA9IFtudWxsXTsgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpOyB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7IHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpOyBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTsgcmV0dXJuIGluc3RhbmNlOyB9OyB9IHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHsgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbnZhciBfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX18oNjgyNyksXG4gICAgaW5zcGVjdCA9IF9yZXF1aXJlLmluc3BlY3Q7XG5cbnZhciBfcmVxdWlyZTIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNDIpLFxuICAgIEVSUl9JTlZBTElEX0FSR19UWVBFID0gX3JlcXVpcmUyLmNvZGVzLkVSUl9JTlZBTElEX0FSR19UWVBFOyAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvZW5kc1dpdGhcblxuXG5mdW5jdGlvbiBlbmRzV2l0aChzdHIsIHNlYXJjaCwgdGhpc19sZW4pIHtcbiAgaWYgKHRoaXNfbGVuID09PSB1bmRlZmluZWQgfHwgdGhpc19sZW4gPiBzdHIubGVuZ3RoKSB7XG4gICAgdGhpc19sZW4gPSBzdHIubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIHN0ci5zdWJzdHJpbmcodGhpc19sZW4gLSBzZWFyY2gubGVuZ3RoLCB0aGlzX2xlbikgPT09IHNlYXJjaDtcbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3JlcGVhdFxuXG5cbmZ1bmN0aW9uIHJlcGVhdChzdHIsIGNvdW50KSB7XG4gIGNvdW50ID0gTWF0aC5mbG9vcihjb3VudCk7XG4gIGlmIChzdHIubGVuZ3RoID09IDAgfHwgY291bnQgPT0gMCkgcmV0dXJuICcnO1xuICB2YXIgbWF4Q291bnQgPSBzdHIubGVuZ3RoICogY291bnQ7XG4gIGNvdW50ID0gTWF0aC5mbG9vcihNYXRoLmxvZyhjb3VudCkgLyBNYXRoLmxvZygyKSk7XG5cbiAgd2hpbGUgKGNvdW50KSB7XG4gICAgc3RyICs9IHN0cjtcbiAgICBjb3VudC0tO1xuICB9XG5cbiAgc3RyICs9IHN0ci5zdWJzdHJpbmcoMCwgbWF4Q291bnQgLSBzdHIubGVuZ3RoKTtcbiAgcmV0dXJuIHN0cjtcbn1cblxudmFyIGJsdWUgPSAnJztcbnZhciBncmVlbiA9ICcnO1xudmFyIHJlZCA9ICcnO1xudmFyIHdoaXRlID0gJyc7XG52YXIga1JlYWRhYmxlT3BlcmF0b3IgPSB7XG4gIGRlZXBTdHJpY3RFcXVhbDogJ0V4cGVjdGVkIHZhbHVlcyB0byBiZSBzdHJpY3RseSBkZWVwLWVxdWFsOicsXG4gIHN0cmljdEVxdWFsOiAnRXhwZWN0ZWQgdmFsdWVzIHRvIGJlIHN0cmljdGx5IGVxdWFsOicsXG4gIHN0cmljdEVxdWFsT2JqZWN0OiAnRXhwZWN0ZWQgXCJhY3R1YWxcIiB0byBiZSByZWZlcmVuY2UtZXF1YWwgdG8gXCJleHBlY3RlZFwiOicsXG4gIGRlZXBFcXVhbDogJ0V4cGVjdGVkIHZhbHVlcyB0byBiZSBsb29zZWx5IGRlZXAtZXF1YWw6JyxcbiAgZXF1YWw6ICdFeHBlY3RlZCB2YWx1ZXMgdG8gYmUgbG9vc2VseSBlcXVhbDonLFxuICBub3REZWVwU3RyaWN0RXF1YWw6ICdFeHBlY3RlZCBcImFjdHVhbFwiIG5vdCB0byBiZSBzdHJpY3RseSBkZWVwLWVxdWFsIHRvOicsXG4gIG5vdFN0cmljdEVxdWFsOiAnRXhwZWN0ZWQgXCJhY3R1YWxcIiB0byBiZSBzdHJpY3RseSB1bmVxdWFsIHRvOicsXG4gIG5vdFN0cmljdEVxdWFsT2JqZWN0OiAnRXhwZWN0ZWQgXCJhY3R1YWxcIiBub3QgdG8gYmUgcmVmZXJlbmNlLWVxdWFsIHRvIFwiZXhwZWN0ZWRcIjonLFxuICBub3REZWVwRXF1YWw6ICdFeHBlY3RlZCBcImFjdHVhbFwiIG5vdCB0byBiZSBsb29zZWx5IGRlZXAtZXF1YWwgdG86JyxcbiAgbm90RXF1YWw6ICdFeHBlY3RlZCBcImFjdHVhbFwiIHRvIGJlIGxvb3NlbHkgdW5lcXVhbCB0bzonLFxuICBub3RJZGVudGljYWw6ICdWYWx1ZXMgaWRlbnRpY2FsIGJ1dCBub3QgcmVmZXJlbmNlLWVxdWFsOidcbn07IC8vIENvbXBhcmluZyBzaG9ydCBwcmltaXRpdmVzIHNob3VsZCBqdXN0IHNob3cgPT09IC8gIT09IGluc3RlYWQgb2YgdXNpbmcgdGhlXG4vLyBkaWZmLlxuXG52YXIga01heFNob3J0TGVuZ3RoID0gMTA7XG5cbmZ1bmN0aW9uIGNvcHlFcnJvcihzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIgdGFyZ2V0ID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlKSk7XG4gIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsICdtZXNzYWdlJywge1xuICAgIHZhbHVlOiBzb3VyY2UubWVzc2FnZVxuICB9KTtcbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gaW5zcGVjdFZhbHVlKHZhbCkge1xuICAvLyBUaGUgdXRpbC5pbnNwZWN0IGRlZmF1bHQgdmFsdWVzIGNvdWxkIGJlIGNoYW5nZWQuIFRoaXMgbWFrZXMgc3VyZSB0aGVcbiAgLy8gZXJyb3IgbWVzc2FnZXMgY29udGFpbiB0aGUgbmVjZXNzYXJ5IGluZm9ybWF0aW9uIG5ldmVydGhlbGVzcy5cbiAgcmV0dXJuIGluc3BlY3QodmFsLCB7XG4gICAgY29tcGFjdDogZmFsc2UsXG4gICAgY3VzdG9tSW5zcGVjdDogZmFsc2UsXG4gICAgZGVwdGg6IDEwMDAsXG4gICAgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5LFxuICAgIC8vIEFzc2VydCBjb21wYXJlcyBvbmx5IGVudW1lcmFibGUgcHJvcGVydGllcyAod2l0aCBhIGZldyBleGNlcHRpb25zKS5cbiAgICBzaG93SGlkZGVuOiBmYWxzZSxcbiAgICAvLyBIYXZpbmcgYSBsb25nIGxpbmUgYXMgZXJyb3IgaXMgYmV0dGVyIHRoYW4gd3JhcHBpbmcgdGhlIGxpbmUgZm9yXG4gICAgLy8gY29tcGFyaXNvbiBmb3Igbm93LlxuICAgIC8vIFRPRE8oQnJpZGdlQVIpOiBgYnJlYWtMZW5ndGhgIHNob3VsZCBiZSBsaW1pdGVkIGFzIHNvb24gYXMgc29vbiBhcyB3ZVxuICAgIC8vIGhhdmUgbWV0YSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaW5zcGVjdGVkIHByb3BlcnRpZXMgKGkuZS4sIGtub3cgd2hlcmVcbiAgICAvLyBpbiB3aGF0IGxpbmUgdGhlIHByb3BlcnR5IHN0YXJ0cyBhbmQgZW5kcykuXG4gICAgYnJlYWtMZW5ndGg6IEluZmluaXR5LFxuICAgIC8vIEFzc2VydCBkb2VzIG5vdCBkZXRlY3QgcHJveGllcyBjdXJyZW50bHkuXG4gICAgc2hvd1Byb3h5OiBmYWxzZSxcbiAgICBzb3J0ZWQ6IHRydWUsXG4gICAgLy8gSW5zcGVjdCBnZXR0ZXJzIGFzIHdlIGFsc28gY2hlY2sgdGhlbSB3aGVuIGNvbXBhcmluZyBlbnRyaWVzLlxuICAgIGdldHRlcnM6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVyckRpZmYoYWN0dWFsLCBleHBlY3RlZCwgb3BlcmF0b3IpIHtcbiAgdmFyIG90aGVyID0gJyc7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIGxhc3RQb3MgPSAwO1xuICB2YXIgZW5kID0gJyc7XG4gIHZhciBza2lwcGVkID0gZmFsc2U7XG4gIHZhciBhY3R1YWxJbnNwZWN0ZWQgPSBpbnNwZWN0VmFsdWUoYWN0dWFsKTtcbiAgdmFyIGFjdHVhbExpbmVzID0gYWN0dWFsSW5zcGVjdGVkLnNwbGl0KCdcXG4nKTtcbiAgdmFyIGV4cGVjdGVkTGluZXMgPSBpbnNwZWN0VmFsdWUoZXhwZWN0ZWQpLnNwbGl0KCdcXG4nKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgaW5kaWNhdG9yID0gJyc7IC8vIEluIGNhc2UgYm90aCB2YWx1ZXMgYXJlIG9iamVjdHMgZXhwbGljaXRseSBtYXJrIHRoZW0gYXMgbm90IHJlZmVyZW5jZSBlcXVhbFxuICAvLyBmb3IgdGhlIGBzdHJpY3RFcXVhbGAgb3BlcmF0b3IuXG5cbiAgaWYgKG9wZXJhdG9yID09PSAnc3RyaWN0RXF1YWwnICYmIF90eXBlb2YoYWN0dWFsKSA9PT0gJ29iamVjdCcgJiYgX3R5cGVvZihleHBlY3RlZCkgPT09ICdvYmplY3QnICYmIGFjdHVhbCAhPT0gbnVsbCAmJiBleHBlY3RlZCAhPT0gbnVsbCkge1xuICAgIG9wZXJhdG9yID0gJ3N0cmljdEVxdWFsT2JqZWN0JztcbiAgfSAvLyBJZiBcImFjdHVhbFwiIGFuZCBcImV4cGVjdGVkXCIgZml0IG9uIGEgc2luZ2xlIGxpbmUgYW5kIHRoZXkgYXJlIG5vdCBzdHJpY3RseVxuICAvLyBlcXVhbCwgY2hlY2sgZnVydGhlciBzcGVjaWFsIGhhbmRsaW5nLlxuXG5cbiAgaWYgKGFjdHVhbExpbmVzLmxlbmd0aCA9PT0gMSAmJiBleHBlY3RlZExpbmVzLmxlbmd0aCA9PT0gMSAmJiBhY3R1YWxMaW5lc1swXSAhPT0gZXhwZWN0ZWRMaW5lc1swXSkge1xuICAgIHZhciBpbnB1dExlbmd0aCA9IGFjdHVhbExpbmVzWzBdLmxlbmd0aCArIGV4cGVjdGVkTGluZXNbMF0ubGVuZ3RoOyAvLyBJZiB0aGUgY2hhcmFjdGVyIGxlbmd0aCBvZiBcImFjdHVhbFwiIGFuZCBcImV4cGVjdGVkXCIgdG9nZXRoZXIgaXMgbGVzcyB0aGFuXG4gICAgLy8ga01heFNob3J0TGVuZ3RoIGFuZCBpZiBuZWl0aGVyIGlzIGFuIG9iamVjdCBhbmQgYXQgbGVhc3Qgb25lIG9mIHRoZW0gaXNcbiAgICAvLyBub3QgYHplcm9gLCB1c2UgdGhlIHN0cmljdCBlcXVhbCBjb21wYXJpc29uIHRvIHZpc3VhbGl6ZSB0aGUgb3V0cHV0LlxuXG4gICAgaWYgKGlucHV0TGVuZ3RoIDw9IGtNYXhTaG9ydExlbmd0aCkge1xuICAgICAgaWYgKChfdHlwZW9mKGFjdHVhbCkgIT09ICdvYmplY3QnIHx8IGFjdHVhbCA9PT0gbnVsbCkgJiYgKF90eXBlb2YoZXhwZWN0ZWQpICE9PSAnb2JqZWN0JyB8fCBleHBlY3RlZCA9PT0gbnVsbCkgJiYgKGFjdHVhbCAhPT0gMCB8fCBleHBlY3RlZCAhPT0gMCkpIHtcbiAgICAgICAgLy8gLTAgPT09ICswXG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChrUmVhZGFibGVPcGVyYXRvcltvcGVyYXRvcl0sIFwiXFxuXFxuXCIpICsgXCJcIi5jb25jYXQoYWN0dWFsTGluZXNbMF0sIFwiICE9PSBcIikuY29uY2F0KGV4cGVjdGVkTGluZXNbMF0sIFwiXFxuXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgIT09ICdzdHJpY3RFcXVhbE9iamVjdCcpIHtcbiAgICAgIC8vIElmIHRoZSBzdGRlcnIgaXMgYSB0dHkgYW5kIHRoZSBpbnB1dCBsZW5ndGggaXMgbG93ZXIgdGhhbiB0aGUgY3VycmVudFxuICAgICAgLy8gY29sdW1ucyBwZXIgbGluZSwgYWRkIGEgbWlzbWF0Y2ggaW5kaWNhdG9yIGJlbG93IHRoZSBvdXRwdXQuIElmIGl0IGlzXG4gICAgICAvLyBub3QgYSB0dHksIHVzZSBhIGRlZmF1bHQgdmFsdWUgb2YgODAgY2hhcmFjdGVycy5cbiAgICAgIHZhciBtYXhMZW5ndGggPSBwcm9jZXNzLnN0ZGVyciAmJiBwcm9jZXNzLnN0ZGVyci5pc1RUWSA/IHByb2Nlc3Muc3RkZXJyLmNvbHVtbnMgOiA4MDtcblxuICAgICAgaWYgKGlucHV0TGVuZ3RoIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHdoaWxlIChhY3R1YWxMaW5lc1swXVtpXSA9PT0gZXhwZWN0ZWRMaW5lc1swXVtpXSkge1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfSAvLyBJZ25vcmUgdGhlIGZpcnN0IGNoYXJhY3RlcnMuXG5cblxuICAgICAgICBpZiAoaSA+IDIpIHtcbiAgICAgICAgICAvLyBBZGQgcG9zaXRpb24gaW5kaWNhdG9yIGZvciB0aGUgZmlyc3QgbWlzbWF0Y2ggaW4gY2FzZSBpdCBpcyBhXG4gICAgICAgICAgLy8gc2luZ2xlIGxpbmUgYW5kIHRoZSBpbnB1dCBsZW5ndGggaXMgbGVzcyB0aGFuIHRoZSBjb2x1bW4gbGVuZ3RoLlxuICAgICAgICAgIGluZGljYXRvciA9IFwiXFxuICBcIi5jb25jYXQocmVwZWF0KCcgJywgaSksIFwiXlwiKTtcbiAgICAgICAgICBpID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSAvLyBSZW1vdmUgYWxsIGVuZGluZyBsaW5lcyB0aGF0IG1hdGNoICh0aGlzIG9wdGltaXplcyB0aGUgb3V0cHV0IGZvclxuICAvLyByZWFkYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgbnVtYmVyIG9mIHRvdGFsIGNoYW5nZWQgbGluZXMpLlxuXG5cbiAgdmFyIGEgPSBhY3R1YWxMaW5lc1thY3R1YWxMaW5lcy5sZW5ndGggLSAxXTtcbiAgdmFyIGIgPSBleHBlY3RlZExpbmVzW2V4cGVjdGVkTGluZXMubGVuZ3RoIC0gMV07XG5cbiAgd2hpbGUgKGEgPT09IGIpIHtcbiAgICBpZiAoaSsrIDwgMikge1xuICAgICAgZW5kID0gXCJcXG4gIFwiLmNvbmNhdChhKS5jb25jYXQoZW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3RoZXIgPSBhO1xuICAgIH1cblxuICAgIGFjdHVhbExpbmVzLnBvcCgpO1xuICAgIGV4cGVjdGVkTGluZXMucG9wKCk7XG4gICAgaWYgKGFjdHVhbExpbmVzLmxlbmd0aCA9PT0gMCB8fCBleHBlY3RlZExpbmVzLmxlbmd0aCA9PT0gMCkgYnJlYWs7XG4gICAgYSA9IGFjdHVhbExpbmVzW2FjdHVhbExpbmVzLmxlbmd0aCAtIDFdO1xuICAgIGIgPSBleHBlY3RlZExpbmVzW2V4cGVjdGVkTGluZXMubGVuZ3RoIC0gMV07XG4gIH1cblxuICB2YXIgbWF4TGluZXMgPSBNYXRoLm1heChhY3R1YWxMaW5lcy5sZW5ndGgsIGV4cGVjdGVkTGluZXMubGVuZ3RoKTsgLy8gU3RyaWN0IGVxdWFsIHdpdGggaWRlbnRpY2FsIG9iamVjdHMgdGhhdCBhcmUgbm90IGlkZW50aWNhbCBieSByZWZlcmVuY2UuXG4gIC8vIEUuZy4sIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwoeyBhOiBTeW1ib2woKSB9LCB7IGE6IFN5bWJvbCgpIH0pXG5cbiAgaWYgKG1heExpbmVzID09PSAwKSB7XG4gICAgLy8gV2UgaGF2ZSB0byBnZXQgdGhlIHJlc3VsdCBhZ2Fpbi4gVGhlIGxpbmVzIHdlcmUgYWxsIHJlbW92ZWQgYmVmb3JlLlxuICAgIHZhciBfYWN0dWFsTGluZXMgPSBhY3R1YWxJbnNwZWN0ZWQuc3BsaXQoJ1xcbicpOyAvLyBPbmx5IHJlbW92ZSBsaW5lcyBpbiBjYXNlIGl0IG1ha2VzIHNlbnNlIHRvIGNvbGxhcHNlIHRob3NlLlxuICAgIC8vIFRPRE86IEFjY2VwdCBlbnYgdG8gYWx3YXlzIHNob3cgdGhlIGZ1bGwgZXJyb3IuXG5cblxuICAgIGlmIChfYWN0dWFsTGluZXMubGVuZ3RoID4gMzApIHtcbiAgICAgIF9hY3R1YWxMaW5lc1syNl0gPSBcIlwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuXG4gICAgICB3aGlsZSAoX2FjdHVhbExpbmVzLmxlbmd0aCA+IDI3KSB7XG4gICAgICAgIF9hY3R1YWxMaW5lcy5wb3AoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIi5jb25jYXQoa1JlYWRhYmxlT3BlcmF0b3Iubm90SWRlbnRpY2FsLCBcIlxcblxcblwiKS5jb25jYXQoX2FjdHVhbExpbmVzLmpvaW4oJ1xcbicpLCBcIlxcblwiKTtcbiAgfVxuXG4gIGlmIChpID4gMykge1xuICAgIGVuZCA9IFwiXFxuXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSkuY29uY2F0KGVuZCk7XG4gICAgc2tpcHBlZCA9IHRydWU7XG4gIH1cblxuICBpZiAob3RoZXIgIT09ICcnKSB7XG4gICAgZW5kID0gXCJcXG4gIFwiLmNvbmNhdChvdGhlcikuY29uY2F0KGVuZCk7XG4gICAgb3RoZXIgPSAnJztcbiAgfVxuXG4gIHZhciBwcmludGVkTGluZXMgPSAwO1xuICB2YXIgbXNnID0ga1JlYWRhYmxlT3BlcmF0b3Jbb3BlcmF0b3JdICsgXCJcXG5cIi5jb25jYXQoZ3JlZW4sIFwiKyBhY3R1YWxcIikuY29uY2F0KHdoaXRlLCBcIiBcIikuY29uY2F0KHJlZCwgXCItIGV4cGVjdGVkXCIpLmNvbmNhdCh3aGl0ZSk7XG4gIHZhciBza2lwcGVkTXNnID0gXCIgXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSwgXCIgTGluZXMgc2tpcHBlZFwiKTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbWF4TGluZXM7IGkrKykge1xuICAgIC8vIE9ubHkgZXh0cmEgZXhwZWN0ZWQgbGluZXMgZXhpc3RcbiAgICB2YXIgY3VyID0gaSAtIGxhc3RQb3M7XG5cbiAgICBpZiAoYWN0dWFsTGluZXMubGVuZ3RoIDwgaSArIDEpIHtcbiAgICAgIC8vIElmIHRoZSBsYXN0IGRpdmVyZ2luZyBsaW5lIGlzIG1vcmUgdGhhbiBvbmUgbGluZSBhYm92ZSBhbmQgdGhlXG4gICAgICAvLyBjdXJyZW50IGxpbmUgaXMgYXQgbGVhc3QgbGluZSB0aHJlZSwgYWRkIHNvbWUgb2YgdGhlIGZvcm1lciBsaW5lcyBhbmRcbiAgICAgIC8vIGFsc28gYWRkIGRvdHMgdG8gaW5kaWNhdGUgc2tpcHBlZCBlbnRyaWVzLlxuICAgICAgaWYgKGN1ciA+IDEgJiYgaSA+IDIpIHtcbiAgICAgICAgaWYgKGN1ciA+IDQpIHtcbiAgICAgICAgICByZXMgKz0gXCJcXG5cIi5jb25jYXQoYmx1ZSwgXCIuLi5cIikuY29uY2F0KHdoaXRlKTtcbiAgICAgICAgICBza2lwcGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXIgPiAzKSB7XG4gICAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoZXhwZWN0ZWRMaW5lc1tpIC0gMl0pO1xuICAgICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoZXhwZWN0ZWRMaW5lc1tpIC0gMV0pO1xuICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgIH0gLy8gTWFyayB0aGUgY3VycmVudCBsaW5lIGFzIHRoZSBsYXN0IGRpdmVyZ2luZyBvbmUuXG5cblxuICAgICAgbGFzdFBvcyA9IGk7IC8vIEFkZCB0aGUgZXhwZWN0ZWQgbGluZSB0byB0aGUgY2FjaGUuXG5cbiAgICAgIG90aGVyICs9IFwiXFxuXCIuY29uY2F0KHJlZCwgXCItXCIpLmNvbmNhdCh3aGl0ZSwgXCIgXCIpLmNvbmNhdChleHBlY3RlZExpbmVzW2ldKTtcbiAgICAgIHByaW50ZWRMaW5lcysrOyAvLyBPbmx5IGV4dHJhIGFjdHVhbCBsaW5lcyBleGlzdFxuICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWRMaW5lcy5sZW5ndGggPCBpICsgMSkge1xuICAgICAgLy8gSWYgdGhlIGxhc3QgZGl2ZXJnaW5nIGxpbmUgaXMgbW9yZSB0aGFuIG9uZSBsaW5lIGFib3ZlIGFuZCB0aGVcbiAgICAgIC8vIGN1cnJlbnQgbGluZSBpcyBhdCBsZWFzdCBsaW5lIHRocmVlLCBhZGQgc29tZSBvZiB0aGUgZm9ybWVyIGxpbmVzIGFuZFxuICAgICAgLy8gYWxzbyBhZGQgZG90cyB0byBpbmRpY2F0ZSBza2lwcGVkIGVudHJpZXMuXG4gICAgICBpZiAoY3VyID4gMSAmJiBpID4gMikge1xuICAgICAgICBpZiAoY3VyID4gNCkge1xuICAgICAgICAgIHJlcyArPSBcIlxcblwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuICAgICAgICAgIHNraXBwZWQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGN1ciA+IDMpIHtcbiAgICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChhY3R1YWxMaW5lc1tpIC0gMl0pO1xuICAgICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoYWN0dWFsTGluZXNbaSAtIDFdKTtcbiAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICB9IC8vIE1hcmsgdGhlIGN1cnJlbnQgbGluZSBhcyB0aGUgbGFzdCBkaXZlcmdpbmcgb25lLlxuXG5cbiAgICAgIGxhc3RQb3MgPSBpOyAvLyBBZGQgdGhlIGFjdHVhbCBsaW5lIHRvIHRoZSByZXN1bHQuXG5cbiAgICAgIHJlcyArPSBcIlxcblwiLmNvbmNhdChncmVlbiwgXCIrXCIpLmNvbmNhdCh3aGl0ZSwgXCIgXCIpLmNvbmNhdChhY3R1YWxMaW5lc1tpXSk7XG4gICAgICBwcmludGVkTGluZXMrKzsgLy8gTGluZXMgZGl2ZXJnZVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZXhwZWN0ZWRMaW5lID0gZXhwZWN0ZWRMaW5lc1tpXTtcbiAgICAgIHZhciBhY3R1YWxMaW5lID0gYWN0dWFsTGluZXNbaV07IC8vIElmIHRoZSBsaW5lcyBkaXZlcmdlLCBzcGVjaWZpY2FsbHkgY2hlY2sgZm9yIGxpbmVzIHRoYXQgb25seSBkaXZlcmdlIGJ5XG4gICAgICAvLyBhIHRyYWlsaW5nIGNvbW1hLiBJbiB0aGF0IGNhc2UgaXQgaXMgYWN0dWFsbHkgaWRlbnRpY2FsIGFuZCB3ZSBzaG91bGRcbiAgICAgIC8vIG1hcmsgaXQgYXMgc3VjaC5cblxuICAgICAgdmFyIGRpdmVyZ2luZ0xpbmVzID0gYWN0dWFsTGluZSAhPT0gZXhwZWN0ZWRMaW5lICYmICghZW5kc1dpdGgoYWN0dWFsTGluZSwgJywnKSB8fCBhY3R1YWxMaW5lLnNsaWNlKDAsIC0xKSAhPT0gZXhwZWN0ZWRMaW5lKTsgLy8gSWYgdGhlIGV4cGVjdGVkIGxpbmUgaGFzIGEgdHJhaWxpbmcgY29tbWEgYnV0IGlzIG90aGVyd2lzZSBpZGVudGljYWwsXG4gICAgICAvLyBhZGQgYSBjb21tYSBhdCB0aGUgZW5kIG9mIHRoZSBhY3R1YWwgbGluZS4gT3RoZXJ3aXNlIHRoZSBvdXRwdXQgY291bGRcbiAgICAgIC8vIGxvb2sgd2VpcmQgYXMgaW46XG4gICAgICAvL1xuICAgICAgLy8gICBbXG4gICAgICAvLyAgICAgMSAgICAgICAgIC8vIE5vIGNvbW1hIGF0IHRoZSBlbmQhXG4gICAgICAvLyArICAgMlxuICAgICAgLy8gICBdXG4gICAgICAvL1xuXG4gICAgICBpZiAoZGl2ZXJnaW5nTGluZXMgJiYgZW5kc1dpdGgoZXhwZWN0ZWRMaW5lLCAnLCcpICYmIGV4cGVjdGVkTGluZS5zbGljZSgwLCAtMSkgPT09IGFjdHVhbExpbmUpIHtcbiAgICAgICAgZGl2ZXJnaW5nTGluZXMgPSBmYWxzZTtcbiAgICAgICAgYWN0dWFsTGluZSArPSAnLCc7XG4gICAgICB9XG5cbiAgICAgIGlmIChkaXZlcmdpbmdMaW5lcykge1xuICAgICAgICAvLyBJZiB0aGUgbGFzdCBkaXZlcmdpbmcgbGluZSBpcyBtb3JlIHRoYW4gb25lIGxpbmUgYWJvdmUgYW5kIHRoZVxuICAgICAgICAvLyBjdXJyZW50IGxpbmUgaXMgYXQgbGVhc3QgbGluZSB0aHJlZSwgYWRkIHNvbWUgb2YgdGhlIGZvcm1lciBsaW5lcyBhbmRcbiAgICAgICAgLy8gYWxzbyBhZGQgZG90cyB0byBpbmRpY2F0ZSBza2lwcGVkIGVudHJpZXMuXG4gICAgICAgIGlmIChjdXIgPiAxICYmIGkgPiAyKSB7XG4gICAgICAgICAgaWYgKGN1ciA+IDQpIHtcbiAgICAgICAgICAgIHJlcyArPSBcIlxcblwiLmNvbmNhdChibHVlLCBcIi4uLlwiKS5jb25jYXQod2hpdGUpO1xuICAgICAgICAgICAgc2tpcHBlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChjdXIgPiAzKSB7XG4gICAgICAgICAgICByZXMgKz0gXCJcXG4gIFwiLmNvbmNhdChhY3R1YWxMaW5lc1tpIC0gMl0pO1xuICAgICAgICAgICAgcHJpbnRlZExpbmVzKys7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVzICs9IFwiXFxuICBcIi5jb25jYXQoYWN0dWFsTGluZXNbaSAtIDFdKTtcbiAgICAgICAgICBwcmludGVkTGluZXMrKztcbiAgICAgICAgfSAvLyBNYXJrIHRoZSBjdXJyZW50IGxpbmUgYXMgdGhlIGxhc3QgZGl2ZXJnaW5nIG9uZS5cblxuXG4gICAgICAgIGxhc3RQb3MgPSBpOyAvLyBBZGQgdGhlIGFjdHVhbCBsaW5lIHRvIHRoZSByZXN1bHQgYW5kIGNhY2hlIHRoZSBleHBlY3RlZCBkaXZlcmdpbmdcbiAgICAgICAgLy8gbGluZSBzbyBjb25zZWN1dGl2ZSBkaXZlcmdpbmcgbGluZXMgc2hvdyB1cCBhcyArKystLS0gYW5kIG5vdCArLSstKy0uXG5cbiAgICAgICAgcmVzICs9IFwiXFxuXCIuY29uY2F0KGdyZWVuLCBcIitcIikuY29uY2F0KHdoaXRlLCBcIiBcIikuY29uY2F0KGFjdHVhbExpbmUpO1xuICAgICAgICBvdGhlciArPSBcIlxcblwiLmNvbmNhdChyZWQsIFwiLVwiKS5jb25jYXQod2hpdGUsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRMaW5lKTtcbiAgICAgICAgcHJpbnRlZExpbmVzICs9IDI7IC8vIExpbmVzIGFyZSBpZGVudGljYWxcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFkZCBhbGwgY2FjaGVkIGluZm9ybWF0aW9uIHRvIHRoZSByZXN1bHQgYmVmb3JlIGFkZGluZyBvdGhlciB0aGluZ3NcbiAgICAgICAgLy8gYW5kIHJlc2V0IHRoZSBjYWNoZS5cbiAgICAgICAgcmVzICs9IG90aGVyO1xuICAgICAgICBvdGhlciA9ICcnOyAvLyBJZiB0aGUgbGFzdCBkaXZlcmdpbmcgbGluZSBpcyBleGFjdGx5IG9uZSBsaW5lIGFib3ZlIG9yIGlmIGl0IGlzIHRoZVxuICAgICAgICAvLyB2ZXJ5IGZpcnN0IGxpbmUsIGFkZCB0aGUgbGluZSB0byB0aGUgcmVzdWx0LlxuXG4gICAgICAgIGlmIChjdXIgPT09IDEgfHwgaSA9PT0gMCkge1xuICAgICAgICAgIHJlcyArPSBcIlxcbiAgXCIuY29uY2F0KGFjdHVhbExpbmUpO1xuICAgICAgICAgIHByaW50ZWRMaW5lcysrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBJbnNwZWN0ZWQgb2JqZWN0IHRvIGJpZyAoU2hvdyB+MjAgcm93cyBtYXgpXG5cblxuICAgIGlmIChwcmludGVkTGluZXMgPiAyMCAmJiBpIDwgbWF4TGluZXMgLSAyKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQobXNnKS5jb25jYXQoc2tpcHBlZE1zZywgXCJcXG5cIikuY29uY2F0KHJlcywgXCJcXG5cIikuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSkuY29uY2F0KG90aGVyLCBcIlxcblwiKSArIFwiXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFwiXCIuY29uY2F0KG1zZykuY29uY2F0KHNraXBwZWQgPyBza2lwcGVkTXNnIDogJycsIFwiXFxuXCIpLmNvbmNhdChyZXMpLmNvbmNhdChvdGhlcikuY29uY2F0KGVuZCkuY29uY2F0KGluZGljYXRvcik7XG59XG5cbnZhciBBc3NlcnRpb25FcnJvciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Vycm9yKSB7XG4gIF9pbmhlcml0cyhBc3NlcnRpb25FcnJvciwgX0Vycm9yKTtcblxuICBmdW5jdGlvbiBBc3NlcnRpb25FcnJvcihvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFzc2VydGlvbkVycm9yKTtcblxuICAgIGlmIChfdHlwZW9mKG9wdGlvbnMpICE9PSAnb2JqZWN0JyB8fCBvcHRpb25zID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ29wdGlvbnMnLCAnT2JqZWN0Jywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIG1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2UsXG4gICAgICAgIG9wZXJhdG9yID0gb3B0aW9ucy5vcGVyYXRvcixcbiAgICAgICAgc3RhY2tTdGFydEZuID0gb3B0aW9ucy5zdGFja1N0YXJ0Rm47XG4gICAgdmFyIGFjdHVhbCA9IG9wdGlvbnMuYWN0dWFsLFxuICAgICAgICBleHBlY3RlZCA9IG9wdGlvbnMuZXhwZWN0ZWQ7XG4gICAgdmFyIGxpbWl0ID0gRXJyb3Iuc3RhY2tUcmFjZUxpbWl0O1xuICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IDA7XG5cbiAgICBpZiAobWVzc2FnZSAhPSBudWxsKSB7XG4gICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihBc3NlcnRpb25FcnJvcikuY2FsbCh0aGlzLCBTdHJpbmcobWVzc2FnZSkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3Muc3RkZXJyICYmIHByb2Nlc3Muc3RkZXJyLmlzVFRZKSB7XG4gICAgICAgIC8vIFJlc2V0IG9uIGVhY2ggY2FsbCB0byBtYWtlIHN1cmUgd2UgaGFuZGxlIGR5bmFtaWNhbGx5IHNldCBlbnZpcm9ubWVudFxuICAgICAgICAvLyB2YXJpYWJsZXMgY29ycmVjdC5cbiAgICAgICAgaWYgKHByb2Nlc3Muc3RkZXJyICYmIHByb2Nlc3Muc3RkZXJyLmdldENvbG9yRGVwdGggJiYgcHJvY2Vzcy5zdGRlcnIuZ2V0Q29sb3JEZXB0aCgpICE9PSAxKSB7XG4gICAgICAgICAgYmx1ZSA9IFwiXFx4MUJbMzRtXCI7XG4gICAgICAgICAgZ3JlZW4gPSBcIlxceDFCWzMybVwiO1xuICAgICAgICAgIHdoaXRlID0gXCJcXHgxQlszOW1cIjtcbiAgICAgICAgICByZWQgPSBcIlxceDFCWzMxbVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJsdWUgPSAnJztcbiAgICAgICAgICBncmVlbiA9ICcnO1xuICAgICAgICAgIHdoaXRlID0gJyc7XG4gICAgICAgICAgcmVkID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gUHJldmVudCB0aGUgZXJyb3Igc3RhY2sgZnJvbSBiZWluZyB2aXNpYmxlIGJ5IGR1cGxpY2F0aW5nIHRoZSBlcnJvclxuICAgICAgLy8gaW4gYSB2ZXJ5IGNsb3NlIHdheSB0byB0aGUgb3JpZ2luYWwgaW4gY2FzZSBib3RoIHNpZGVzIGFyZSBhY3R1YWxseVxuICAgICAgLy8gaW5zdGFuY2VzIG9mIEVycm9yLlxuXG5cbiAgICAgIGlmIChfdHlwZW9mKGFjdHVhbCkgPT09ICdvYmplY3QnICYmIGFjdHVhbCAhPT0gbnVsbCAmJiBfdHlwZW9mKGV4cGVjdGVkKSA9PT0gJ29iamVjdCcgJiYgZXhwZWN0ZWQgIT09IG51bGwgJiYgJ3N0YWNrJyBpbiBhY3R1YWwgJiYgYWN0dWFsIGluc3RhbmNlb2YgRXJyb3IgJiYgJ3N0YWNrJyBpbiBleHBlY3RlZCAmJiBleHBlY3RlZCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGFjdHVhbCA9IGNvcHlFcnJvcihhY3R1YWwpO1xuICAgICAgICBleHBlY3RlZCA9IGNvcHlFcnJvcihleHBlY3RlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcGVyYXRvciA9PT0gJ2RlZXBTdHJpY3RFcXVhbCcgfHwgb3BlcmF0b3IgPT09ICdzdHJpY3RFcXVhbCcpIHtcbiAgICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXNzZXJ0aW9uRXJyb3IpLmNhbGwodGhpcywgY3JlYXRlRXJyRGlmZihhY3R1YWwsIGV4cGVjdGVkLCBvcGVyYXRvcikpKTtcbiAgICAgIH0gZWxzZSBpZiAob3BlcmF0b3IgPT09ICdub3REZWVwU3RyaWN0RXF1YWwnIHx8IG9wZXJhdG9yID09PSAnbm90U3RyaWN0RXF1YWwnKSB7XG4gICAgICAgIC8vIEluIGNhc2UgdGhlIG9iamVjdHMgYXJlIGVxdWFsIGJ1dCB0aGUgb3BlcmF0b3IgcmVxdWlyZXMgdW5lcXVhbCwgc2hvd1xuICAgICAgICAvLyB0aGUgZmlyc3Qgb2JqZWN0IGFuZCBzYXkgQSBlcXVhbHMgQlxuICAgICAgICB2YXIgYmFzZSA9IGtSZWFkYWJsZU9wZXJhdG9yW29wZXJhdG9yXTtcbiAgICAgICAgdmFyIHJlcyA9IGluc3BlY3RWYWx1ZShhY3R1YWwpLnNwbGl0KCdcXG4nKTsgLy8gSW4gY2FzZSBcImFjdHVhbFwiIGlzIGFuIG9iamVjdCwgaXQgc2hvdWxkIG5vdCBiZSByZWZlcmVuY2UgZXF1YWwuXG5cbiAgICAgICAgaWYgKG9wZXJhdG9yID09PSAnbm90U3RyaWN0RXF1YWwnICYmIF90eXBlb2YoYWN0dWFsKSA9PT0gJ29iamVjdCcgJiYgYWN0dWFsICE9PSBudWxsKSB7XG4gICAgICAgICAgYmFzZSA9IGtSZWFkYWJsZU9wZXJhdG9yLm5vdFN0cmljdEVxdWFsT2JqZWN0O1xuICAgICAgICB9IC8vIE9ubHkgcmVtb3ZlIGxpbmVzIGluIGNhc2UgaXQgbWFrZXMgc2Vuc2UgdG8gY29sbGFwc2UgdGhvc2UuXG4gICAgICAgIC8vIFRPRE86IEFjY2VwdCBlbnYgdG8gYWx3YXlzIHNob3cgdGhlIGZ1bGwgZXJyb3IuXG5cblxuICAgICAgICBpZiAocmVzLmxlbmd0aCA+IDMwKSB7XG4gICAgICAgICAgcmVzWzI2XSA9IFwiXCIuY29uY2F0KGJsdWUsIFwiLi4uXCIpLmNvbmNhdCh3aGl0ZSk7XG5cbiAgICAgICAgICB3aGlsZSAocmVzLmxlbmd0aCA+IDI3KSB7XG4gICAgICAgICAgICByZXMucG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIE9ubHkgcHJpbnQgYSBzaW5nbGUgaW5wdXQuXG5cblxuICAgICAgICBpZiAocmVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFzc2VydGlvbkVycm9yKS5jYWxsKHRoaXMsIFwiXCIuY29uY2F0KGJhc2UsIFwiIFwiKS5jb25jYXQocmVzWzBdKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX2dldFByb3RvdHlwZU9mKEFzc2VydGlvbkVycm9yKS5jYWxsKHRoaXMsIFwiXCIuY29uY2F0KGJhc2UsIFwiXFxuXFxuXCIpLmNvbmNhdChyZXMuam9pbignXFxuJyksIFwiXFxuXCIpKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBfcmVzID0gaW5zcGVjdFZhbHVlKGFjdHVhbCk7XG5cbiAgICAgICAgdmFyIG90aGVyID0gJyc7XG4gICAgICAgIHZhciBrbm93bk9wZXJhdG9ycyA9IGtSZWFkYWJsZU9wZXJhdG9yW29wZXJhdG9yXTtcblxuICAgICAgICBpZiAob3BlcmF0b3IgPT09ICdub3REZWVwRXF1YWwnIHx8IG9wZXJhdG9yID09PSAnbm90RXF1YWwnKSB7XG4gICAgICAgICAgX3JlcyA9IFwiXCIuY29uY2F0KGtSZWFkYWJsZU9wZXJhdG9yW29wZXJhdG9yXSwgXCJcXG5cXG5cIikuY29uY2F0KF9yZXMpO1xuXG4gICAgICAgICAgaWYgKF9yZXMubGVuZ3RoID4gMTAyNCkge1xuICAgICAgICAgICAgX3JlcyA9IFwiXCIuY29uY2F0KF9yZXMuc2xpY2UoMCwgMTAyMSksIFwiLi4uXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdGhlciA9IFwiXCIuY29uY2F0KGluc3BlY3RWYWx1ZShleHBlY3RlZCkpO1xuXG4gICAgICAgICAgaWYgKF9yZXMubGVuZ3RoID4gNTEyKSB7XG4gICAgICAgICAgICBfcmVzID0gXCJcIi5jb25jYXQoX3Jlcy5zbGljZSgwLCA1MDkpLCBcIi4uLlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3RoZXIubGVuZ3RoID4gNTEyKSB7XG4gICAgICAgICAgICBvdGhlciA9IFwiXCIuY29uY2F0KG90aGVyLnNsaWNlKDAsIDUwOSksIFwiLi4uXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvcGVyYXRvciA9PT0gJ2RlZXBFcXVhbCcgfHwgb3BlcmF0b3IgPT09ICdlcXVhbCcpIHtcbiAgICAgICAgICAgIF9yZXMgPSBcIlwiLmNvbmNhdChrbm93bk9wZXJhdG9ycywgXCJcXG5cXG5cIikuY29uY2F0KF9yZXMsIFwiXFxuXFxuc2hvdWxkIGVxdWFsXFxuXFxuXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdGhlciA9IFwiIFwiLmNvbmNhdChvcGVyYXRvciwgXCIgXCIpLmNvbmNhdChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfZ2V0UHJvdG90eXBlT2YoQXNzZXJ0aW9uRXJyb3IpLmNhbGwodGhpcywgXCJcIi5jb25jYXQoX3JlcykuY29uY2F0KG90aGVyKSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IGxpbWl0O1xuICAgIF90aGlzLmdlbmVyYXRlZE1lc3NhZ2UgPSAhbWVzc2FnZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICduYW1lJywge1xuICAgICAgdmFsdWU6ICdBc3NlcnRpb25FcnJvciBbRVJSX0FTU0VSVElPTl0nLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIF90aGlzLmNvZGUgPSAnRVJSX0FTU0VSVElPTic7XG4gICAgX3RoaXMuYWN0dWFsID0gYWN0dWFsO1xuICAgIF90aGlzLmV4cGVjdGVkID0gZXhwZWN0ZWQ7XG4gICAgX3RoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcblxuICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgc3RhY2tTdGFydEZuKTtcbiAgICB9IC8vIENyZWF0ZSBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZXJyb3IgY29kZSBpbiB0aGUgbmFtZS5cblxuXG4gICAgX3RoaXMuc3RhY2s7IC8vIFJlc2V0IHRoZSBuYW1lLlxuXG4gICAgX3RoaXMubmFtZSA9ICdBc3NlcnRpb25FcnJvcic7XG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBc3NlcnRpb25FcnJvciwgW3tcbiAgICBrZXk6IFwidG9TdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIiBbXCIpLmNvbmNhdCh0aGlzLmNvZGUsIFwiXTogXCIpLmNvbmNhdCh0aGlzLm1lc3NhZ2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogaW5zcGVjdC5jdXN0b20sXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHJlY3Vyc2VUaW1lcywgY3R4KSB7XG4gICAgICAvLyBUaGlzIGxpbWl0cyB0aGUgYGFjdHVhbGAgYW5kIGBleHBlY3RlZGAgcHJvcGVydHkgZGVmYXVsdCBpbnNwZWN0aW9uIHRvXG4gICAgICAvLyB0aGUgbWluaW11bSBkZXB0aC4gT3RoZXJ3aXNlIHRob3NlIHZhbHVlcyB3b3VsZCBiZSB0b28gdmVyYm9zZSBjb21wYXJlZFxuICAgICAgLy8gdG8gdGhlIGFjdHVhbCBlcnJvciBtZXNzYWdlIHdoaWNoIGNvbnRhaW5zIGEgY29tYmluZWQgdmlldyBvZiB0aGVzZSB0d29cbiAgICAgIC8vIGlucHV0IHZhbHVlcy5cbiAgICAgIHJldHVybiBpbnNwZWN0KHRoaXMsIF9vYmplY3RTcHJlYWQoe30sIGN0eCwge1xuICAgICAgICBjdXN0b21JbnNwZWN0OiBmYWxzZSxcbiAgICAgICAgZGVwdGg6IDBcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQXNzZXJ0aW9uRXJyb3I7XG59KF93cmFwTmF0aXZlU3VwZXIoRXJyb3IpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBc3NlcnRpb25FcnJvcjtcblxuLyoqKi8gfSksXG5cbi8qKiovIDEzNDI6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9pbnRlcm5hbC9lcnJvcnMuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9jb21taXQvM2IwNDQ5NjJjNDhmZTMxMzkwNTg3N2E5NmI1ZDA4OTRhNTQwNGY2ZlxuXG4vKiBlc2xpbnQgbm9kZS1jb3JlL2RvY3VtZW50ZWQtZXJyb3JzOiBcImVycm9yXCIgKi9cblxuLyogZXNsaW50IG5vZGUtY29yZS9hbHBoYWJldGl6ZS1lcnJvcnM6IFwiZXJyb3JcIiAqL1xuXG4vKiBlc2xpbnQgbm9kZS1jb3JlL3ByZWZlci11dGlsLWZvcm1hdC1lcnJvcnM6IFwiZXJyb3JcIiAqL1xuIC8vIFRoZSB3aG9sZSBwb2ludCBiZWhpbmQgdGhpcyBpbnRlcm5hbCBtb2R1bGUgaXMgdG8gYWxsb3cgTm9kZS5qcyB0byBub1xuLy8gbG9uZ2VyIGJlIGZvcmNlZCB0byB0cmVhdCBldmVyeSBlcnJvciBtZXNzYWdlIGNoYW5nZSBhcyBhIHNlbXZlci1tYWpvclxuLy8gY2hhbmdlLiBUaGUgTm9kZUVycm9yIGNsYXNzZXMgaGVyZSBhbGwgZXhwb3NlIGEgYGNvZGVgIHByb3BlcnR5IHdob3NlXG4vLyB2YWx1ZSBzdGF0aWNhbGx5IGFuZCBwZXJtYW5lbnRseSBpZGVudGlmaWVzIHRoZSBlcnJvci4gV2hpbGUgdGhlIGVycm9yXG4vLyBtZXNzYWdlIG1heSBjaGFuZ2UsIHRoZSBjb2RlIHNob3VsZCBub3QuXG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxudmFyIGNvZGVzID0ge307IC8vIExhenkgbG9hZGVkXG5cbnZhciBhc3NlcnQ7XG52YXIgdXRpbDtcblxuZnVuY3Rpb24gY3JlYXRlRXJyb3JUeXBlKGNvZGUsIG1lc3NhZ2UsIEJhc2UpIHtcbiAgaWYgKCFCYXNlKSB7XG4gICAgQmFzZSA9IEVycm9yO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtZXNzYWdlKGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBOb2RlRXJyb3IgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQmFzZSkge1xuICAgIF9pbmhlcml0cyhOb2RlRXJyb3IsIF9CYXNlKTtcblxuICAgIGZ1bmN0aW9uIE5vZGVFcnJvcihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBOb2RlRXJyb3IpO1xuXG4gICAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihOb2RlRXJyb3IpLmNhbGwodGhpcywgZ2V0TWVzc2FnZShhcmcxLCBhcmcyLCBhcmczKSkpO1xuICAgICAgX3RoaXMuY29kZSA9IGNvZGU7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIE5vZGVFcnJvcjtcbiAgfShCYXNlKTtcblxuICBjb2Rlc1tjb2RlXSA9IE5vZGVFcnJvcjtcbn0gLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2Jsb2IvdjEwLjguMC9saWIvaW50ZXJuYWwvZXJyb3JzLmpzXG5cblxuZnVuY3Rpb24gb25lT2YoZXhwZWN0ZWQsIHRoaW5nKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdGVkKSkge1xuICAgIHZhciBsZW4gPSBleHBlY3RlZC5sZW5ndGg7XG4gICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgIHJldHVybiBTdHJpbmcoaSk7XG4gICAgfSk7XG5cbiAgICBpZiAobGVuID4gMikge1xuICAgICAgcmV0dXJuIFwib25lIG9mIFwiLmNvbmNhdCh0aGluZywgXCIgXCIpLmNvbmNhdChleHBlY3RlZC5zbGljZSgwLCBsZW4gLSAxKS5qb2luKCcsICcpLCBcIiwgb3IgXCIpICsgZXhwZWN0ZWRbbGVuIC0gMV07XG4gICAgfSBlbHNlIGlmIChsZW4gPT09IDIpIHtcbiAgICAgIHJldHVybiBcIm9uZSBvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRbMF0sIFwiIG9yIFwiKS5jb25jYXQoZXhwZWN0ZWRbMV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoZXhwZWN0ZWRbMF0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJvZiBcIi5jb25jYXQodGhpbmcsIFwiIFwiKS5jb25jYXQoU3RyaW5nKGV4cGVjdGVkKSk7XG4gIH1cbn0gLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3N0YXJ0c1dpdGhcblxuXG5mdW5jdGlvbiBzdGFydHNXaXRoKHN0ciwgc2VhcmNoLCBwb3MpIHtcbiAgcmV0dXJuIHN0ci5zdWJzdHIoIXBvcyB8fCBwb3MgPCAwID8gMCA6ICtwb3MsIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG59IC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy9lbmRzV2l0aFxuXG5cbmZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoLCB0aGlzX2xlbikge1xuICBpZiAodGhpc19sZW4gPT09IHVuZGVmaW5lZCB8fCB0aGlzX2xlbiA+IHN0ci5sZW5ndGgpIHtcbiAgICB0aGlzX2xlbiA9IHN0ci5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gc3RyLnN1YnN0cmluZyh0aGlzX2xlbiAtIHNlYXJjaC5sZW5ndGgsIHRoaXNfbGVuKSA9PT0gc2VhcmNoO1xufSAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9TdHJpbmcvaW5jbHVkZXNcblxuXG5mdW5jdGlvbiBpbmNsdWRlcyhzdHIsIHNlYXJjaCwgc3RhcnQpIHtcbiAgaWYgKHR5cGVvZiBzdGFydCAhPT0gJ251bWJlcicpIHtcbiAgICBzdGFydCA9IDA7XG4gIH1cblxuICBpZiAoc3RhcnQgKyBzZWFyY2gubGVuZ3RoID4gc3RyLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyLmluZGV4T2Yoc2VhcmNoLCBzdGFydCkgIT09IC0xO1xuICB9XG59XG5cbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0FNQklHVU9VU19BUkdVTUVOVCcsICdUaGUgXCIlc1wiIGFyZ3VtZW50IGlzIGFtYmlndW91cy4gJXMnLCBUeXBlRXJyb3IpO1xuY3JlYXRlRXJyb3JUeXBlKCdFUlJfSU5WQUxJRF9BUkdfVFlQRScsIGZ1bmN0aW9uIChuYW1lLCBleHBlY3RlZCwgYWN0dWFsKSB7XG4gIGlmIChhc3NlcnQgPT09IHVuZGVmaW5lZCkgYXNzZXJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDkzKTtcbiAgYXNzZXJ0KHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJywgXCInbmFtZScgbXVzdCBiZSBhIHN0cmluZ1wiKTsgLy8gZGV0ZXJtaW5lcjogJ211c3QgYmUnIG9yICdtdXN0IG5vdCBiZSdcblxuICB2YXIgZGV0ZXJtaW5lcjtcblxuICBpZiAodHlwZW9mIGV4cGVjdGVkID09PSAnc3RyaW5nJyAmJiBzdGFydHNXaXRoKGV4cGVjdGVkLCAnbm90ICcpKSB7XG4gICAgZGV0ZXJtaW5lciA9ICdtdXN0IG5vdCBiZSc7XG4gICAgZXhwZWN0ZWQgPSBleHBlY3RlZC5yZXBsYWNlKC9ebm90IC8sICcnKTtcbiAgfSBlbHNlIHtcbiAgICBkZXRlcm1pbmVyID0gJ211c3QgYmUnO1xuICB9XG5cbiAgdmFyIG1zZztcblxuICBpZiAoZW5kc1dpdGgobmFtZSwgJyBhcmd1bWVudCcpKSB7XG4gICAgLy8gRm9yIGNhc2VzIGxpa2UgJ2ZpcnN0IGFyZ3VtZW50J1xuICAgIG1zZyA9IFwiVGhlIFwiLmNvbmNhdChuYW1lLCBcIiBcIikuY29uY2F0KGRldGVybWluZXIsIFwiIFwiKS5jb25jYXQob25lT2YoZXhwZWN0ZWQsICd0eXBlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0eXBlID0gaW5jbHVkZXMobmFtZSwgJy4nKSA/ICdwcm9wZXJ0eScgOiAnYXJndW1lbnQnO1xuICAgIG1zZyA9IFwiVGhlIFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIFwiKS5jb25jYXQodHlwZSwgXCIgXCIpLmNvbmNhdChkZXRlcm1pbmVyLCBcIiBcIikuY29uY2F0KG9uZU9mKGV4cGVjdGVkLCAndHlwZScpKTtcbiAgfSAvLyBUT0RPKEJyaWRnZUFSKTogSW1wcm92ZSB0aGUgb3V0cHV0IGJ5IHNob3dpbmcgYG51bGxgIGFuZCBzaW1pbGFyLlxuXG5cbiAgbXNnICs9IFwiLiBSZWNlaXZlZCB0eXBlIFwiLmNvbmNhdChfdHlwZW9mKGFjdHVhbCkpO1xuICByZXR1cm4gbXNnO1xufSwgVHlwZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfQVJHX1ZBTFVFJywgZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gIHZhciByZWFzb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdpcyBpbnZhbGlkJztcbiAgaWYgKHV0aWwgPT09IHVuZGVmaW5lZCkgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oNjgyNyk7XG4gIHZhciBpbnNwZWN0ZWQgPSB1dGlsLmluc3BlY3QodmFsdWUpO1xuXG4gIGlmIChpbnNwZWN0ZWQubGVuZ3RoID4gMTI4KSB7XG4gICAgaW5zcGVjdGVkID0gXCJcIi5jb25jYXQoaW5zcGVjdGVkLnNsaWNlKDAsIDEyOCksIFwiLi4uXCIpO1xuICB9XG5cbiAgcmV0dXJuIFwiVGhlIGFyZ3VtZW50ICdcIi5jb25jYXQobmFtZSwgXCInIFwiKS5jb25jYXQocmVhc29uLCBcIi4gUmVjZWl2ZWQgXCIpLmNvbmNhdChpbnNwZWN0ZWQpO1xufSwgVHlwZUVycm9yLCBSYW5nZUVycm9yKTtcbmNyZWF0ZUVycm9yVHlwZSgnRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFJywgZnVuY3Rpb24gKGlucHV0LCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgdHlwZTtcblxuICBpZiAodmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IgJiYgdmFsdWUuY29uc3RydWN0b3IubmFtZSkge1xuICAgIHR5cGUgPSBcImluc3RhbmNlIG9mIFwiLmNvbmNhdCh2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB0eXBlID0gXCJ0eXBlIFwiLmNvbmNhdChfdHlwZW9mKHZhbHVlKSk7XG4gIH1cblxuICByZXR1cm4gXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5wdXQsIFwiIHRvIGJlIHJldHVybmVkIGZyb20gdGhlIFxcXCJcIikuY29uY2F0KG5hbWUsIFwiXFxcIlwiKSArIFwiIGZ1bmN0aW9uIGJ1dCBnb3QgXCIuY29uY2F0KHR5cGUsIFwiLlwiKTtcbn0sIFR5cGVFcnJvcik7XG5jcmVhdGVFcnJvclR5cGUoJ0VSUl9NSVNTSU5HX0FSR1MnLCBmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoYXNzZXJ0ID09PSB1bmRlZmluZWQpIGFzc2VydCA9IF9fd2VicGFja19yZXF1aXJlX18oNjA5Myk7XG4gIGFzc2VydChhcmdzLmxlbmd0aCA+IDAsICdBdCBsZWFzdCBvbmUgYXJnIG5lZWRzIHRvIGJlIHNwZWNpZmllZCcpO1xuICB2YXIgbXNnID0gJ1RoZSAnO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIGFyZ3MgPSBhcmdzLm1hcChmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQoYSwgXCJcXFwiXCIpO1xuICB9KTtcblxuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMTpcbiAgICAgIG1zZyArPSBcIlwiLmNvbmNhdChhcmdzWzBdLCBcIiBhcmd1bWVudFwiKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAyOlxuICAgICAgbXNnICs9IFwiXCIuY29uY2F0KGFyZ3NbMF0sIFwiIGFuZCBcIikuY29uY2F0KGFyZ3NbMV0sIFwiIGFyZ3VtZW50c1wiKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG1zZyArPSBhcmdzLnNsaWNlKDAsIGxlbiAtIDEpLmpvaW4oJywgJyk7XG4gICAgICBtc2cgKz0gXCIsIGFuZCBcIi5jb25jYXQoYXJnc1tsZW4gLSAxXSwgXCIgYXJndW1lbnRzXCIpO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQobXNnLCBcIiBtdXN0IGJlIHNwZWNpZmllZFwiKTtcbn0sIFR5cGVFcnJvcik7XG5tb2R1bGUuZXhwb3J0cy5jb2RlcyA9IGNvZGVzO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNTY1Njpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBDdXJyZW50bHkgaW4gc3luYyB3aXRoIE5vZGUuanMgbGliL2ludGVybmFsL3V0aWwvY29tcGFyaXNvbnMuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9jb21taXQvMTEyY2M3YzI3NTUxMjU0YWEyYjE3MDk4ZmI3NzQ4NjdmMDVlZDBkOVxuXG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG52YXIgcmVnZXhGbGFnc1N1cHBvcnRlZCA9IC9hL2cuZmxhZ3MgIT09IHVuZGVmaW5lZDtcblxudmFyIGFycmF5RnJvbVNldCA9IGZ1bmN0aW9uIGFycmF5RnJvbVNldChzZXQpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBhcnJheS5wdXNoKHZhbHVlKTtcbiAgfSk7XG4gIHJldHVybiBhcnJheTtcbn07XG5cbnZhciBhcnJheUZyb21NYXAgPSBmdW5jdGlvbiBhcnJheUZyb21NYXAobWFwKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBtYXAuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHJldHVybiBhcnJheS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0pO1xuICByZXR1cm4gYXJyYXk7XG59O1xuXG52YXIgb2JqZWN0SXMgPSBPYmplY3QuaXMgPyBPYmplY3QuaXMgOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5NjgpO1xudmFyIG9iamVjdEdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gW107XG59O1xudmFyIG51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOID8gTnVtYmVyLmlzTmFOIDogX193ZWJwYWNrX3JlcXVpcmVfXyg3ODM4KTtcblxuZnVuY3Rpb24gdW5jdXJyeVRoaXMoZikge1xuICByZXR1cm4gZi5jYWxsLmJpbmQoZik7XG59XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gdW5jdXJyeVRoaXMoT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZSk7XG52YXIgb2JqZWN0VG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcblxudmFyIF9yZXF1aXJlJHR5cGVzID0gKF9fd2VicGFja19yZXF1aXJlX18oNjgyNykudHlwZXMpLFxuICAgIGlzQW55QXJyYXlCdWZmZXIgPSBfcmVxdWlyZSR0eXBlcy5pc0FueUFycmF5QnVmZmVyLFxuICAgIGlzQXJyYXlCdWZmZXJWaWV3ID0gX3JlcXVpcmUkdHlwZXMuaXNBcnJheUJ1ZmZlclZpZXcsXG4gICAgaXNEYXRlID0gX3JlcXVpcmUkdHlwZXMuaXNEYXRlLFxuICAgIGlzTWFwID0gX3JlcXVpcmUkdHlwZXMuaXNNYXAsXG4gICAgaXNSZWdFeHAgPSBfcmVxdWlyZSR0eXBlcy5pc1JlZ0V4cCxcbiAgICBpc1NldCA9IF9yZXF1aXJlJHR5cGVzLmlzU2V0LFxuICAgIGlzTmF0aXZlRXJyb3IgPSBfcmVxdWlyZSR0eXBlcy5pc05hdGl2ZUVycm9yLFxuICAgIGlzQm94ZWRQcmltaXRpdmUgPSBfcmVxdWlyZSR0eXBlcy5pc0JveGVkUHJpbWl0aXZlLFxuICAgIGlzTnVtYmVyT2JqZWN0ID0gX3JlcXVpcmUkdHlwZXMuaXNOdW1iZXJPYmplY3QsXG4gICAgaXNTdHJpbmdPYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc1N0cmluZ09iamVjdCxcbiAgICBpc0Jvb2xlYW5PYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc0Jvb2xlYW5PYmplY3QsXG4gICAgaXNCaWdJbnRPYmplY3QgPSBfcmVxdWlyZSR0eXBlcy5pc0JpZ0ludE9iamVjdCxcbiAgICBpc1N5bWJvbE9iamVjdCA9IF9yZXF1aXJlJHR5cGVzLmlzU3ltYm9sT2JqZWN0LFxuICAgIGlzRmxvYXQzMkFycmF5ID0gX3JlcXVpcmUkdHlwZXMuaXNGbG9hdDMyQXJyYXksXG4gICAgaXNGbG9hdDY0QXJyYXkgPSBfcmVxdWlyZSR0eXBlcy5pc0Zsb2F0NjRBcnJheTtcblxuZnVuY3Rpb24gaXNOb25JbmRleChrZXkpIHtcbiAgaWYgKGtleS5sZW5ndGggPT09IDAgfHwga2V5Lmxlbmd0aCA+IDEwKSByZXR1cm4gdHJ1ZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjb2RlID0ga2V5LmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gNTcpIHJldHVybiB0cnVlO1xuICB9IC8vIFRoZSBtYXhpbXVtIHNpemUgZm9yIGFuIGFycmF5IGlzIDIgKiogMzIgLTEuXG5cblxuICByZXR1cm4ga2V5Lmxlbmd0aCA9PT0gMTAgJiYga2V5ID49IE1hdGgucG93KDIsIDMyKTtcbn1cblxuZnVuY3Rpb24gZ2V0T3duTm9uSW5kZXhQcm9wZXJ0aWVzKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyh2YWx1ZSkuZmlsdGVyKGlzTm9uSW5kZXgpLmNvbmNhdChvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsdWUpLmZpbHRlcihPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmJpbmQodmFsdWUpKSk7XG59IC8vIFRha2VuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvYmxvYi82ODBlOWU1ZTQ4OGYyMmFhYzI3NTk5YTU3ZGM4NDRhNjMxNTkyOGRkL2luZGV4LmpzXG4vLyBvcmlnaW5hbCBub3RpY2U6XG5cbi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuXG5mdW5jdGlvbiBjb21wYXJlKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhciB4ID0gYS5sZW5ndGg7XG4gIHZhciB5ID0gYi5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV07XG4gICAgICB5ID0gYltpXTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGlmICh5IDwgeCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbnZhciBPTkxZX0VOVU1FUkFCTEUgPSB1bmRlZmluZWQ7XG52YXIga1N0cmljdCA9IHRydWU7XG52YXIga0xvb3NlID0gZmFsc2U7XG52YXIga05vSXRlcmF0b3IgPSAwO1xudmFyIGtJc0FycmF5ID0gMTtcbnZhciBrSXNTZXQgPSAyO1xudmFyIGtJc01hcCA9IDM7IC8vIENoZWNrIGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSBzb3VyY2UgYW5kIGZsYWdzXG5cbmZ1bmN0aW9uIGFyZVNpbWlsYXJSZWdFeHBzKGEsIGIpIHtcbiAgcmV0dXJuIHJlZ2V4RmxhZ3NTdXBwb3J0ZWQgPyBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgYS5mbGFncyA9PT0gYi5mbGFncyA6IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKSA9PT0gUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO1xufVxuXG5mdW5jdGlvbiBhcmVTaW1pbGFyRmxvYXRBcnJheXMoYSwgYikge1xuICBpZiAoYS5ieXRlTGVuZ3RoICE9PSBiLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBhLmJ5dGVMZW5ndGg7IG9mZnNldCsrKSB7XG4gICAgaWYgKGFbb2Zmc2V0XSAhPT0gYltvZmZzZXRdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGFyZVNpbWlsYXJUeXBlZEFycmF5cyhhLCBiKSB7XG4gIGlmIChhLmJ5dGVMZW5ndGggIT09IGIuYnl0ZUxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjb21wYXJlKG5ldyBVaW50OEFycmF5KGEuYnVmZmVyLCBhLmJ5dGVPZmZzZXQsIGEuYnl0ZUxlbmd0aCksIG5ldyBVaW50OEFycmF5KGIuYnVmZmVyLCBiLmJ5dGVPZmZzZXQsIGIuYnl0ZUxlbmd0aCkpID09PSAwO1xufVxuXG5mdW5jdGlvbiBhcmVFcXVhbEFycmF5QnVmZmVycyhidWYxLCBidWYyKSB7XG4gIHJldHVybiBidWYxLmJ5dGVMZW5ndGggPT09IGJ1ZjIuYnl0ZUxlbmd0aCAmJiBjb21wYXJlKG5ldyBVaW50OEFycmF5KGJ1ZjEpLCBuZXcgVWludDhBcnJheShidWYyKSkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzRXF1YWxCb3hlZFByaW1pdGl2ZSh2YWwxLCB2YWwyKSB7XG4gIGlmIChpc051bWJlck9iamVjdCh2YWwxKSkge1xuICAgIHJldHVybiBpc051bWJlck9iamVjdCh2YWwyKSAmJiBvYmplY3RJcyhOdW1iZXIucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSwgTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMikpO1xuICB9XG5cbiAgaWYgKGlzU3RyaW5nT2JqZWN0KHZhbDEpKSB7XG4gICAgcmV0dXJuIGlzU3RyaW5nT2JqZWN0KHZhbDIpICYmIFN0cmluZy5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDEpID09PSBTdHJpbmcucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKTtcbiAgfVxuXG4gIGlmIChpc0Jvb2xlYW5PYmplY3QodmFsMSkpIHtcbiAgICByZXR1cm4gaXNCb29sZWFuT2JqZWN0KHZhbDIpICYmIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSA9PT0gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDIpO1xuICB9XG5cbiAgaWYgKGlzQmlnSW50T2JqZWN0KHZhbDEpKSB7XG4gICAgcmV0dXJuIGlzQmlnSW50T2JqZWN0KHZhbDIpICYmIEJpZ0ludC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKHZhbDEpID09PSBCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwyKTtcbiAgfVxuXG4gIHJldHVybiBpc1N5bWJvbE9iamVjdCh2YWwyKSAmJiBTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwxKSA9PT0gU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwodmFsMik7XG59IC8vIE5vdGVzOiBUeXBlIHRhZ3MgYXJlIGhpc3RvcmljYWwgW1tDbGFzc11dIHByb3BlcnRpZXMgdGhhdCBjYW4gYmUgc2V0IGJ5XG4vLyBGdW5jdGlvblRlbXBsYXRlOjpTZXRDbGFzc05hbWUoKSBpbiBDKysgb3IgU3ltYm9sLnRvU3RyaW5nVGFnIGluIEpTXG4vLyBhbmQgcmV0cmlldmVkIHVzaW5nIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopIGluIEpTXG4vLyBTZWUgaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuLy8gZm9yIGEgbGlzdCBvZiB0YWdzIHByZS1kZWZpbmVkIGluIHRoZSBzcGVjLlxuLy8gVGhlcmUgYXJlIHNvbWUgdW5zcGVjaWZpZWQgdGFncyBpbiB0aGUgd2lsZCB0b28gKGUuZy4gdHlwZWQgYXJyYXkgdGFncykuXG4vLyBTaW5jZSB0YWdzIGNhbiBiZSBhbHRlcmVkLCB0aGV5IG9ubHkgc2VydmUgZmFzdCBmYWlsdXJlc1xuLy9cbi8vIFR5cGVkIGFycmF5cyBhbmQgYnVmZmVycyBhcmUgY2hlY2tlZCBieSBjb21wYXJpbmcgdGhlIGNvbnRlbnQgaW4gdGhlaXJcbi8vIHVuZGVybHlpbmcgQXJyYXlCdWZmZXIuIFRoaXMgb3B0aW1pemF0aW9uIHJlcXVpcmVzIHRoYXQgaXQnc1xuLy8gcmVhc29uYWJsZSB0byBpbnRlcnByZXQgdGhlaXIgdW5kZXJseWluZyBtZW1vcnkgaW4gdGhlIHNhbWUgd2F5LFxuLy8gd2hpY2ggaXMgY2hlY2tlZCBieSBjb21wYXJpbmcgdGhlaXIgdHlwZSB0YWdzLlxuLy8gKGUuZy4gYSBVaW50OEFycmF5IGFuZCBhIFVpbnQxNkFycmF5IHdpdGggdGhlIHNhbWUgbWVtb3J5IGNvbnRlbnRcbi8vIGNvdWxkIHN0aWxsIGJlIGRpZmZlcmVudCBiZWNhdXNlIHRoZXkgd2lsbCBiZSBpbnRlcnByZXRlZCBkaWZmZXJlbnRseSkuXG4vL1xuLy8gRm9yIHN0cmljdCBjb21wYXJpc29uLCBvYmplY3RzIHNob3VsZCBoYXZlXG4vLyBhKSBUaGUgc2FtZSBidWlsdC1pbiB0eXBlIHRhZ3Ncbi8vIGIpIFRoZSBzYW1lIHByb3RvdHlwZXMuXG5cblxuZnVuY3Rpb24gaW5uZXJEZWVwRXF1YWwodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcykge1xuICAvLyBBbGwgaWRlbnRpY2FsIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgYXMgZGV0ZXJtaW5lZCBieSA9PT0uXG4gIGlmICh2YWwxID09PSB2YWwyKSB7XG4gICAgaWYgKHZhbDEgIT09IDApIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBzdHJpY3QgPyBvYmplY3RJcyh2YWwxLCB2YWwyKSA6IHRydWU7XG4gIH0gLy8gQ2hlY2sgbW9yZSBjbG9zZWx5IGlmIHZhbDEgYW5kIHZhbDIgYXJlIGVxdWFsLlxuXG5cbiAgaWYgKHN0cmljdCkge1xuICAgIGlmIChfdHlwZW9mKHZhbDEpICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwxID09PSAnbnVtYmVyJyAmJiBudW1iZXJJc05hTih2YWwxKSAmJiBudW1iZXJJc05hTih2YWwyKTtcbiAgICB9XG5cbiAgICBpZiAoX3R5cGVvZih2YWwyKSAhPT0gJ29iamVjdCcgfHwgdmFsMSA9PT0gbnVsbCB8fCB2YWwyID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwxKSAhPT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2YWwxID09PSBudWxsIHx8IF90eXBlb2YodmFsMSkgIT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodmFsMiA9PT0gbnVsbCB8fCBfdHlwZW9mKHZhbDIpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gICAgICAgIHJldHVybiB2YWwxID09IHZhbDI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodmFsMiA9PT0gbnVsbCB8fCBfdHlwZW9mKHZhbDIpICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHZhciB2YWwxVGFnID0gb2JqZWN0VG9TdHJpbmcodmFsMSk7XG4gIHZhciB2YWwyVGFnID0gb2JqZWN0VG9TdHJpbmcodmFsMik7XG5cbiAgaWYgKHZhbDFUYWcgIT09IHZhbDJUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwxKSkge1xuICAgIC8vIENoZWNrIGZvciBzcGFyc2UgYXJyYXlzIGFuZCBnZW5lcmFsIGZhc3QgcGF0aFxuICAgIGlmICh2YWwxLmxlbmd0aCAhPT0gdmFsMi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIga2V5czEgPSBnZXRPd25Ob25JbmRleFByb3BlcnRpZXModmFsMSwgT05MWV9FTlVNRVJBQkxFKTtcbiAgICB2YXIga2V5czIgPSBnZXRPd25Ob25JbmRleFByb3BlcnRpZXModmFsMiwgT05MWV9FTlVNRVJBQkxFKTtcblxuICAgIGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrSXNBcnJheSwga2V5czEpO1xuICB9IC8vIFticm93c2VyaWZ5XSBUaGlzIHRyaWdnZXJzIG9uIGNlcnRhaW4gdHlwZXMgaW4gSUUgKE1hcC9TZXQpIHNvIHdlIGRvbid0XG4gIC8vIHdhbid0IHRvIGVhcmx5IHJldHVybiBvdXQgb2YgdGhlIHJlc3Qgb2YgdGhlIGNoZWNrcy4gSG93ZXZlciB3ZSBjYW4gY2hlY2tcbiAgLy8gaWYgdGhlIHNlY29uZCB2YWx1ZSBpcyBvbmUgb2YgdGhlc2UgdmFsdWVzIGFuZCB0aGUgZmlyc3QgaXNuJ3QuXG5cblxuICBpZiAodmFsMVRhZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAvLyByZXR1cm4ga2V5Q2hlY2sodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vcywga05vSXRlcmF0b3IpO1xuICAgIGlmICghaXNNYXAodmFsMSkgJiYgaXNNYXAodmFsMikgfHwgIWlzU2V0KHZhbDEpICYmIGlzU2V0KHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzRGF0ZSh2YWwxKSkge1xuICAgIGlmICghaXNEYXRlKHZhbDIpIHx8IERhdGUucHJvdG90eXBlLmdldFRpbWUuY2FsbCh2YWwxKSAhPT0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZS5jYWxsKHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUmVnRXhwKHZhbDEpKSB7XG4gICAgaWYgKCFpc1JlZ0V4cCh2YWwyKSB8fCAhYXJlU2ltaWxhclJlZ0V4cHModmFsMSwgdmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNOYXRpdmVFcnJvcih2YWwxKSB8fCB2YWwxIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAvLyBEbyBub3QgY29tcGFyZSB0aGUgc3RhY2sgYXMgaXQgbWlnaHQgZGlmZmVyIGV2ZW4gdGhvdWdoIHRoZSBlcnJvciBpdHNlbGZcbiAgICAvLyBpcyBvdGhlcndpc2UgaWRlbnRpY2FsLlxuICAgIGlmICh2YWwxLm1lc3NhZ2UgIT09IHZhbDIubWVzc2FnZSB8fCB2YWwxLm5hbWUgIT09IHZhbDIubmFtZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0FycmF5QnVmZmVyVmlldyh2YWwxKSkge1xuICAgIGlmICghc3RyaWN0ICYmIChpc0Zsb2F0MzJBcnJheSh2YWwxKSB8fCBpc0Zsb2F0NjRBcnJheSh2YWwxKSkpIHtcbiAgICAgIGlmICghYXJlU2ltaWxhckZsb2F0QXJyYXlzKHZhbDEsIHZhbDIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFhcmVTaW1pbGFyVHlwZWRBcnJheXModmFsMSwgdmFsMikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIEJ1ZmZlci5jb21wYXJlIHJldHVybnMgdHJ1ZSwgc28gdmFsMS5sZW5ndGggPT09IHZhbDIubGVuZ3RoLiBJZiB0aGV5IGJvdGhcbiAgICAvLyBvbmx5IGNvbnRhaW4gbnVtZXJpYyBrZXlzLCB3ZSBkb24ndCBuZWVkIHRvIGV4YW0gZnVydGhlciB0aGFuIGNoZWNraW5nXG4gICAgLy8gdGhlIHN5bWJvbHMuXG5cblxuICAgIHZhciBfa2V5cyA9IGdldE93bk5vbkluZGV4UHJvcGVydGllcyh2YWwxLCBPTkxZX0VOVU1FUkFCTEUpO1xuXG4gICAgdmFyIF9rZXlzMiA9IGdldE93bk5vbkluZGV4UHJvcGVydGllcyh2YWwyLCBPTkxZX0VOVU1FUkFCTEUpO1xuXG4gICAgaWYgKF9rZXlzLmxlbmd0aCAhPT0gX2tleXMyLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrTm9JdGVyYXRvciwgX2tleXMpO1xuICB9IGVsc2UgaWYgKGlzU2V0KHZhbDEpKSB7XG4gICAgaWYgKCFpc1NldCh2YWwyKSB8fCB2YWwxLnNpemUgIT09IHZhbDIuc2l6ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrSXNTZXQpO1xuICB9IGVsc2UgaWYgKGlzTWFwKHZhbDEpKSB7XG4gICAgaWYgKCFpc01hcCh2YWwyKSB8fCB2YWwxLnNpemUgIT09IHZhbDIuc2l6ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrSXNNYXApO1xuICB9IGVsc2UgaWYgKGlzQW55QXJyYXlCdWZmZXIodmFsMSkpIHtcbiAgICBpZiAoIWFyZUVxdWFsQXJyYXlCdWZmZXJzKHZhbDEsIHZhbDIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQm94ZWRQcmltaXRpdmUodmFsMSkgJiYgIWlzRXF1YWxCb3hlZFByaW1pdGl2ZSh2YWwxLCB2YWwyKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBrZXlDaGVjayh2YWwxLCB2YWwyLCBzdHJpY3QsIG1lbW9zLCBrTm9JdGVyYXRvcik7XG59XG5cbmZ1bmN0aW9uIGdldEVudW1lcmFibGVzKHZhbCwga2V5cykge1xuICByZXR1cm4ga2V5cy5maWx0ZXIoZnVuY3Rpb24gKGspIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUodmFsLCBrKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGtleUNoZWNrKHZhbDEsIHZhbDIsIHN0cmljdCwgbWVtb3MsIGl0ZXJhdGlvblR5cGUsIGFLZXlzKSB7XG4gIC8vIEZvciBhbGwgcmVtYWluaW5nIE9iamVjdCBwYWlycywgaW5jbHVkaW5nIEFycmF5LCBvYmplY3RzIGFuZCBNYXBzLFxuICAvLyBlcXVpdmFsZW5jZSBpcyBkZXRlcm1pbmVkIGJ5IGhhdmluZzpcbiAgLy8gYSkgVGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAvLyBiKSBUaGUgc2FtZSBzZXQgb2Yga2V5cy9pbmRleGVzIChhbHRob3VnaCBub3QgbmVjZXNzYXJpbHkgdGhlIHNhbWUgb3JkZXIpXG4gIC8vIGMpIEVxdWl2YWxlbnQgdmFsdWVzIGZvciBldmVyeSBjb3JyZXNwb25kaW5nIGtleS9pbmRleFxuICAvLyBkKSBGb3IgU2V0cyBhbmQgTWFwcywgZXF1YWwgY29udGVudHNcbiAgLy8gTm90ZTogdGhpcyBhY2NvdW50cyBmb3IgYm90aCBuYW1lZCBhbmQgaW5kZXhlZCBwcm9wZXJ0aWVzIG9uIEFycmF5cy5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDUpIHtcbiAgICBhS2V5cyA9IE9iamVjdC5rZXlzKHZhbDEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKHZhbDIpOyAvLyBUaGUgcGFpciBtdXN0IGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIG93bmVkIHByb3BlcnRpZXMuXG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gLy8gQ2hlYXAga2V5IHRlc3RcblxuXG4gIHZhciBpID0gMDtcblxuICBmb3IgKDsgaSA8IGFLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2YWwyLCBhS2V5c1tpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3RyaWN0ICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDUpIHtcbiAgICB2YXIgc3ltYm9sS2V5c0EgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsMSk7XG5cbiAgICBpZiAoc3ltYm9sS2V5c0EubGVuZ3RoICE9PSAwKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgc3ltYm9sS2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IHN5bWJvbEtleXNBW2ldO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0eUlzRW51bWVyYWJsZSh2YWwxLCBrZXkpKSB7XG4gICAgICAgICAgaWYgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZSh2YWwyLCBrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYUtleXMucHVzaChrZXkpO1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJc0VudW1lcmFibGUodmFsMiwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3ltYm9sS2V5c0IgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsMik7XG5cbiAgICAgIGlmIChzeW1ib2xLZXlzQS5sZW5ndGggIT09IHN5bWJvbEtleXNCLmxlbmd0aCAmJiBnZXRFbnVtZXJhYmxlcyh2YWwyLCBzeW1ib2xLZXlzQikubGVuZ3RoICE9PSBjb3VudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfc3ltYm9sS2V5c0IgPSBvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHModmFsMik7XG5cbiAgICAgIGlmIChfc3ltYm9sS2V5c0IubGVuZ3RoICE9PSAwICYmIGdldEVudW1lcmFibGVzKHZhbDIsIF9zeW1ib2xLZXlzQikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoYUtleXMubGVuZ3RoID09PSAwICYmIChpdGVyYXRpb25UeXBlID09PSBrTm9JdGVyYXRvciB8fCBpdGVyYXRpb25UeXBlID09PSBrSXNBcnJheSAmJiB2YWwxLmxlbmd0aCA9PT0gMCB8fCB2YWwxLnNpemUgPT09IDApKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gVXNlIG1lbW9zIHRvIGhhbmRsZSBjeWNsZXMuXG5cblxuICBpZiAobWVtb3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG1lbW9zID0ge1xuICAgICAgdmFsMTogbmV3IE1hcCgpLFxuICAgICAgdmFsMjogbmV3IE1hcCgpLFxuICAgICAgcG9zaXRpb246IDBcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIFdlIHByZXZlbnQgdXAgdG8gdHdvIG1hcC5oYXMoeCkgY2FsbHMgYnkgZGlyZWN0bHkgcmV0cmlldmluZyB0aGUgdmFsdWVcbiAgICAvLyBhbmQgY2hlY2tpbmcgZm9yIHVuZGVmaW5lZC4gVGhlIG1hcCBjYW4gb25seSBjb250YWluIG51bWJlcnMsIHNvIGl0IGlzXG4gICAgLy8gc2FmZSB0byBjaGVjayBmb3IgdW5kZWZpbmVkIG9ubHkuXG4gICAgdmFyIHZhbDJNZW1vQSA9IG1lbW9zLnZhbDEuZ2V0KHZhbDEpO1xuXG4gICAgaWYgKHZhbDJNZW1vQSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgdmFsMk1lbW9CID0gbWVtb3MudmFsMi5nZXQodmFsMik7XG5cbiAgICAgIGlmICh2YWwyTWVtb0IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdmFsMk1lbW9BID09PSB2YWwyTWVtb0I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb3MucG9zaXRpb24rKztcbiAgfVxuXG4gIG1lbW9zLnZhbDEuc2V0KHZhbDEsIG1lbW9zLnBvc2l0aW9uKTtcbiAgbWVtb3MudmFsMi5zZXQodmFsMiwgbWVtb3MucG9zaXRpb24pO1xuICB2YXIgYXJlRXEgPSBvYmpFcXVpdih2YWwxLCB2YWwyLCBzdHJpY3QsIGFLZXlzLCBtZW1vcywgaXRlcmF0aW9uVHlwZSk7XG4gIG1lbW9zLnZhbDEuZGVsZXRlKHZhbDEpO1xuICBtZW1vcy52YWwyLmRlbGV0ZSh2YWwyKTtcbiAgcmV0dXJuIGFyZUVxO1xufVxuXG5mdW5jdGlvbiBzZXRIYXNFcXVhbEVsZW1lbnQoc2V0LCB2YWwxLCBzdHJpY3QsIG1lbW8pIHtcbiAgLy8gR28gbG9va2luZy5cbiAgdmFyIHNldFZhbHVlcyA9IGFycmF5RnJvbVNldChzZXQpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0VmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbDIgPSBzZXRWYWx1ZXNbaV07XG5cbiAgICBpZiAoaW5uZXJEZWVwRXF1YWwodmFsMSwgdmFsMiwgc3RyaWN0LCBtZW1vKSkge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBtYXRjaGluZyBlbGVtZW50IHRvIG1ha2Ugc3VyZSB3ZSBkbyBub3QgY2hlY2sgdGhhdCBhZ2Fpbi5cbiAgICAgIHNldC5kZWxldGUodmFsMik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59IC8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L0VxdWFsaXR5X2NvbXBhcmlzb25zX2FuZF9zYW1lbmVzcyNMb29zZV9lcXVhbGl0eV91c2luZ1xuLy8gU2FkbHkgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGRldGVjdCBjb3JyZXNwb25kaW5nIHZhbHVlcyBwcm9wZXJseSBpbiBjYXNlIHRoZVxuLy8gdHlwZSBpcyBhIHN0cmluZywgbnVtYmVyLCBiaWdpbnQgb3IgYm9vbGVhbi4gVGhlIHJlYXNvbiBpcyB0aGF0IHRob3NlIHZhbHVlc1xuLy8gY2FuIG1hdGNoIGxvdHMgb2YgZGlmZmVyZW50IHN0cmluZyB2YWx1ZXMgKGUuZy4sIDFuID09ICcrMDAwMDEnKS5cblxuXG5mdW5jdGlvbiBmaW5kTG9vc2VNYXRjaGluZ1ByaW1pdGl2ZXMocHJpbSkge1xuICBzd2l0Y2ggKF90eXBlb2YocHJpbSkpIHtcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgLy8gT25seSBwYXNzIGluIG51bGwgYXMgb2JqZWN0IVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIGNhc2UgJ3N5bWJvbCc6XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcHJpbSA9ICtwcmltO1xuICAgIC8vIExvb3NlIGVxdWFsIGVudHJpZXMgZXhpc3Qgb25seSBpZiB0aGUgc3RyaW5nIGlzIHBvc3NpYmxlIHRvIGNvbnZlcnQgdG9cbiAgICAvLyBhIHJlZ3VsYXIgbnVtYmVyIGFuZCBub3QgTmFOLlxuICAgIC8vIEZhbGwgdGhyb3VnaFxuXG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGlmIChudW1iZXJJc05hTihwcmltKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzZXRNaWdodEhhdmVMb29zZVByaW0oYSwgYiwgcHJpbSkge1xuICB2YXIgYWx0VmFsdWUgPSBmaW5kTG9vc2VNYXRjaGluZ1ByaW1pdGl2ZXMocHJpbSk7XG4gIGlmIChhbHRWYWx1ZSAhPSBudWxsKSByZXR1cm4gYWx0VmFsdWU7XG4gIHJldHVybiBiLmhhcyhhbHRWYWx1ZSkgJiYgIWEuaGFzKGFsdFZhbHVlKTtcbn1cblxuZnVuY3Rpb24gbWFwTWlnaHRIYXZlTG9vc2VQcmltKGEsIGIsIHByaW0sIGl0ZW0sIG1lbW8pIHtcbiAgdmFyIGFsdFZhbHVlID0gZmluZExvb3NlTWF0Y2hpbmdQcmltaXRpdmVzKHByaW0pO1xuXG4gIGlmIChhbHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGFsdFZhbHVlO1xuICB9XG5cbiAgdmFyIGN1ckIgPSBiLmdldChhbHRWYWx1ZSk7XG5cbiAgaWYgKGN1ckIgPT09IHVuZGVmaW5lZCAmJiAhYi5oYXMoYWx0VmFsdWUpIHx8ICFpbm5lckRlZXBFcXVhbChpdGVtLCBjdXJCLCBmYWxzZSwgbWVtbykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gIWEuaGFzKGFsdFZhbHVlKSAmJiBpbm5lckRlZXBFcXVhbChpdGVtLCBjdXJCLCBmYWxzZSwgbWVtbyk7XG59XG5cbmZ1bmN0aW9uIHNldEVxdWl2KGEsIGIsIHN0cmljdCwgbWVtbykge1xuICAvLyBUaGlzIGlzIGEgbGF6aWx5IGluaXRpYXRlZCBTZXQgb2YgZW50cmllcyB3aGljaCBoYXZlIHRvIGJlIGNvbXBhcmVkXG4gIC8vIHBhaXJ3aXNlLlxuICB2YXIgc2V0ID0gbnVsbDtcbiAgdmFyIGFWYWx1ZXMgPSBhcnJheUZyb21TZXQoYSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHZhbCA9IGFWYWx1ZXNbaV07IC8vIE5vdGU6IENoZWNraW5nIGZvciB0aGUgb2JqZWN0cyBmaXJzdCBpbXByb3ZlcyB0aGUgcGVyZm9ybWFuY2UgZm9yIG9iamVjdFxuICAgIC8vIGhlYXZ5IHNldHMgYnV0IGl0IGlzIGEgbWlub3Igc2xvdyBkb3duIGZvciBwcmltaXRpdmVzLiBBcyB0aGV5IGFyZSBmYXN0XG4gICAgLy8gdG8gY2hlY2sgdGhpcyBpbXByb3ZlcyB0aGUgd29yc3QgY2FzZSBzY2VuYXJpbyBpbnN0ZWFkLlxuXG4gICAgaWYgKF90eXBlb2YodmFsKSA9PT0gJ29iamVjdCcgJiYgdmFsICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2V0ID09PSBudWxsKSB7XG4gICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgIH0gLy8gSWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBkb2Vzbid0IGV4aXN0IGluIHRoZSBzZWNvbmQgc2V0IGl0cyBhbiBub3QgbnVsbFxuICAgICAgLy8gb2JqZWN0IChvciBub24gc3RyaWN0IG9ubHk6IGEgbm90IG1hdGNoaW5nIHByaW1pdGl2ZSkgd2UnbGwgbmVlZCB0byBnb1xuICAgICAgLy8gaHVudGluZyBmb3Igc29tZXRoaW5nIHRoYXRzIGRlZXAtKHN0cmljdC0pZXF1YWwgdG8gaXQuIFRvIG1ha2UgdGhpc1xuICAgICAgLy8gTyhuIGxvZyBuKSBjb21wbGV4aXR5IHdlIGhhdmUgdG8gY29weSB0aGVzZSB2YWx1ZXMgaW4gYSBuZXcgc2V0IGZpcnN0LlxuXG5cbiAgICAgIHNldC5hZGQodmFsKTtcbiAgICB9IGVsc2UgaWYgKCFiLmhhcyh2YWwpKSB7XG4gICAgICBpZiAoc3RyaWN0KSByZXR1cm4gZmFsc2U7IC8vIEZhc3QgcGF0aCB0byBkZXRlY3QgbWlzc2luZyBzdHJpbmcsIHN5bWJvbCwgdW5kZWZpbmVkIGFuZCBudWxsIHZhbHVlcy5cblxuICAgICAgaWYgKCFzZXRNaWdodEhhdmVMb29zZVByaW0oYSwgYiwgdmFsKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZXQgPT09IG51bGwpIHtcbiAgICAgICAgc2V0ID0gbmV3IFNldCgpO1xuICAgICAgfVxuXG4gICAgICBzZXQuYWRkKHZhbCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNldCAhPT0gbnVsbCkge1xuICAgIHZhciBiVmFsdWVzID0gYXJyYXlGcm9tU2V0KGIpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGJWYWx1ZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX3ZhbCA9IGJWYWx1ZXNbX2ldOyAvLyBXZSBoYXZlIHRvIGNoZWNrIGlmIGEgcHJpbWl0aXZlIHZhbHVlIGlzIGFscmVhZHlcbiAgICAgIC8vIG1hdGNoaW5nIGFuZCBvbmx5IGlmIGl0J3Mgbm90LCBnbyBodW50aW5nIGZvciBpdC5cblxuICAgICAgaWYgKF90eXBlb2YoX3ZhbCkgPT09ICdvYmplY3QnICYmIF92YWwgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFzZXRIYXNFcXVhbEVsZW1lbnQoc2V0LCBfdmFsLCBzdHJpY3QsIG1lbW8pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgIWEuaGFzKF92YWwpICYmICFzZXRIYXNFcXVhbEVsZW1lbnQoc2V0LCBfdmFsLCBzdHJpY3QsIG1lbW8pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2V0LnNpemUgPT09IDA7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWFwSGFzRXF1YWxFbnRyeShzZXQsIG1hcCwga2V5MSwgaXRlbTEsIHN0cmljdCwgbWVtbykge1xuICAvLyBUbyBiZSBhYmxlIHRvIGhhbmRsZSBjYXNlcyBsaWtlOlxuICAvLyAgIE1hcChbW3t9LCAnYSddLCBbe30sICdiJ11dKSB2cyBNYXAoW1t7fSwgJ2InXSwgW3t9LCAnYSddXSlcbiAgLy8gLi4uIHdlIG5lZWQgdG8gY29uc2lkZXIgKmFsbCogbWF0Y2hpbmcga2V5cywgbm90IGp1c3QgdGhlIGZpcnN0IHdlIGZpbmQuXG4gIHZhciBzZXRWYWx1ZXMgPSBhcnJheUZyb21TZXQoc2V0KTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNldFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkyID0gc2V0VmFsdWVzW2ldO1xuXG4gICAgaWYgKGlubmVyRGVlcEVxdWFsKGtleTEsIGtleTIsIHN0cmljdCwgbWVtbykgJiYgaW5uZXJEZWVwRXF1YWwoaXRlbTEsIG1hcC5nZXQoa2V5MiksIHN0cmljdCwgbWVtbykpIHtcbiAgICAgIHNldC5kZWxldGUoa2V5Mik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG1hcEVxdWl2KGEsIGIsIHN0cmljdCwgbWVtbykge1xuICB2YXIgc2V0ID0gbnVsbDtcbiAgdmFyIGFFbnRyaWVzID0gYXJyYXlGcm9tTWFwKGEpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYUVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2FFbnRyaWVzJGkgPSBfc2xpY2VkVG9BcnJheShhRW50cmllc1tpXSwgMiksXG4gICAgICAgIGtleSA9IF9hRW50cmllcyRpWzBdLFxuICAgICAgICBpdGVtMSA9IF9hRW50cmllcyRpWzFdO1xuXG4gICAgaWYgKF90eXBlb2Yoa2V5KSA9PT0gJ29iamVjdCcgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2V0ID09PSBudWxsKSB7XG4gICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgIH1cblxuICAgICAgc2V0LmFkZChrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBCeSBkaXJlY3RseSByZXRyaWV2aW5nIHRoZSB2YWx1ZSB3ZSBwcmV2ZW50IGFub3RoZXIgYi5oYXMoa2V5KSBjaGVjayBpblxuICAgICAgLy8gYWxtb3N0IGFsbCBwb3NzaWJsZSBjYXNlcy5cbiAgICAgIHZhciBpdGVtMiA9IGIuZ2V0KGtleSk7XG5cbiAgICAgIGlmIChpdGVtMiA9PT0gdW5kZWZpbmVkICYmICFiLmhhcyhrZXkpIHx8ICFpbm5lckRlZXBFcXVhbChpdGVtMSwgaXRlbTIsIHN0cmljdCwgbWVtbykpIHtcbiAgICAgICAgaWYgKHN0cmljdCkgcmV0dXJuIGZhbHNlOyAvLyBGYXN0IHBhdGggdG8gZGV0ZWN0IG1pc3Npbmcgc3RyaW5nLCBzeW1ib2wsIHVuZGVmaW5lZCBhbmQgbnVsbFxuICAgICAgICAvLyBrZXlzLlxuXG4gICAgICAgIGlmICghbWFwTWlnaHRIYXZlTG9vc2VQcmltKGEsIGIsIGtleSwgaXRlbTEsIG1lbW8pKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKHNldCA9PT0gbnVsbCkge1xuICAgICAgICAgIHNldCA9IG5ldyBTZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldC5hZGQoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoc2V0ICE9PSBudWxsKSB7XG4gICAgdmFyIGJFbnRyaWVzID0gYXJyYXlGcm9tTWFwKGIpO1xuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgYkVudHJpZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgdmFyIF9iRW50cmllcyRfaSA9IF9zbGljZWRUb0FycmF5KGJFbnRyaWVzW19pMl0sIDIpLFxuICAgICAgICAgIGtleSA9IF9iRW50cmllcyRfaVswXSxcbiAgICAgICAgICBpdGVtID0gX2JFbnRyaWVzJF9pWzFdO1xuXG4gICAgICBpZiAoX3R5cGVvZihrZXkpID09PSAnb2JqZWN0JyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKCFtYXBIYXNFcXVhbEVudHJ5KHNldCwgYSwga2V5LCBpdGVtLCBzdHJpY3QsIG1lbW8pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgKCFhLmhhcyhrZXkpIHx8ICFpbm5lckRlZXBFcXVhbChhLmdldChrZXkpLCBpdGVtLCBmYWxzZSwgbWVtbykpICYmICFtYXBIYXNFcXVhbEVudHJ5KHNldCwgYSwga2V5LCBpdGVtLCBmYWxzZSwgbWVtbykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZXQuc2l6ZSA9PT0gMDtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBvYmpFcXVpdihhLCBiLCBzdHJpY3QsIGtleXMsIG1lbW9zLCBpdGVyYXRpb25UeXBlKSB7XG4gIC8vIFNldHMgYW5kIG1hcHMgZG9uJ3QgaGF2ZSB0aGVpciBlbnRyaWVzIGFjY2Vzc2libGUgdmlhIG5vcm1hbCBvYmplY3RcbiAgLy8gcHJvcGVydGllcy5cbiAgdmFyIGkgPSAwO1xuXG4gIGlmIChpdGVyYXRpb25UeXBlID09PSBrSXNTZXQpIHtcbiAgICBpZiAoIXNldEVxdWl2KGEsIGIsIHN0cmljdCwgbWVtb3MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGl0ZXJhdGlvblR5cGUgPT09IGtJc01hcCkge1xuICAgIGlmICghbWFwRXF1aXYoYSwgYiwgc3RyaWN0LCBtZW1vcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXRlcmF0aW9uVHlwZSA9PT0ga0lzQXJyYXkpIHtcbiAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eShhLCBpKSkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5KGIsIGkpIHx8ICFpbm5lckRlZXBFcXVhbChhW2ldLCBiW2ldLCBzdHJpY3QsIG1lbW9zKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChoYXNPd25Qcm9wZXJ0eShiLCBpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBcnJheSBpcyBzcGFyc2UuXG4gICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuXG4gICAgICAgIGZvciAoOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0ga2V5c0FbaV07XG5cbiAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5KGIsIGtleSkgfHwgIWlubmVyRGVlcEVxdWFsKGFba2V5XSwgYltrZXldLCBzdHJpY3QsIG1lbW9zKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChrZXlzQS5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBUaGUgcGFpciBtdXN0IGhhdmUgZXF1aXZhbGVudCB2YWx1ZXMgZm9yIGV2ZXJ5IGNvcnJlc3BvbmRpbmcga2V5LlxuICAvLyBQb3NzaWJseSBleHBlbnNpdmUgZGVlcCB0ZXN0OlxuXG5cbiAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgX2tleSA9IGtleXNbaV07XG5cbiAgICBpZiAoIWlubmVyRGVlcEVxdWFsKGFbX2tleV0sIGJbX2tleV0sIHN0cmljdCwgbWVtb3MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzRGVlcEVxdWFsKHZhbDEsIHZhbDIpIHtcbiAgcmV0dXJuIGlubmVyRGVlcEVxdWFsKHZhbDEsIHZhbDIsIGtMb29zZSk7XG59XG5cbmZ1bmN0aW9uIGlzRGVlcFN0cmljdEVxdWFsKHZhbDEsIHZhbDIpIHtcbiAgcmV0dXJuIGlubmVyRGVlcEVxdWFsKHZhbDEsIHZhbDIsIGtTdHJpY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNEZWVwRXF1YWw6IGlzRGVlcEVxdWFsLFxuICBpc0RlZXBTdHJpY3RFcXVhbDogaXNEZWVwU3RyaWN0RXF1YWxcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyA5ODE4OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgR2V0SW50cmluc2ljID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MjgpO1xuXG52YXIgY2FsbEJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0OTgpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQmluZChHZXRJbnRyaW5zaWMoJ1N0cmluZy5wcm90b3R5cGUuaW5kZXhPZicpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQm91bmRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWMgPSBHZXRJbnRyaW5zaWMobmFtZSwgISFhbGxvd01pc3NpbmcpO1xuXHRpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gJ2Z1bmN0aW9uJyAmJiAkaW5kZXhPZihuYW1lLCAnLnByb3RvdHlwZS4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDg0OTg6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBiaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MTM4KTtcbnZhciBHZXRJbnRyaW5zaWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyOCk7XG5cbnZhciAkYXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHklJyk7XG52YXIgJGNhbGwgPSBHZXRJbnRyaW5zaWMoJyVGdW5jdGlvbi5wcm90b3R5cGUuY2FsbCUnKTtcbnZhciAkcmVmbGVjdEFwcGx5ID0gR2V0SW50cmluc2ljKCclUmVmbGVjdC5hcHBseSUnLCB0cnVlKSB8fCBiaW5kLmNhbGwoJGNhbGwsICRhcHBseSk7XG5cbnZhciAkZ09QRCA9IEdldEludHJpbnNpYygnJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlJywgdHJ1ZSk7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmRlZmluZVByb3BlcnR5JScsIHRydWUpO1xudmFyICRtYXggPSBHZXRJbnRyaW5zaWMoJyVNYXRoLm1heCUnKTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHR0cnkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHQkZGVmaW5lUHJvcGVydHkgPSBudWxsO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJpbmQob3JpZ2luYWxGdW5jdGlvbikge1xuXHR2YXIgZnVuYyA9ICRyZWZsZWN0QXBwbHkoYmluZCwgJGNhbGwsIGFyZ3VtZW50cyk7XG5cdGlmICgkZ09QRCAmJiAkZGVmaW5lUHJvcGVydHkpIHtcblx0XHR2YXIgZGVzYyA9ICRnT1BEKGZ1bmMsICdsZW5ndGgnKTtcblx0XHRpZiAoZGVzYy5jb25maWd1cmFibGUpIHtcblx0XHRcdC8vIG9yaWdpbmFsIGxlbmd0aCwgcGx1cyB0aGUgcmVjZWl2ZXIsIG1pbnVzIGFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyAoYWZ0ZXIgdGhlIHJlY2VpdmVyKVxuXHRcdFx0JGRlZmluZVByb3BlcnR5KFxuXHRcdFx0XHRmdW5jLFxuXHRcdFx0XHQnbGVuZ3RoJyxcblx0XHRcdFx0eyB2YWx1ZTogMSArICRtYXgoMCwgb3JpZ2luYWxGdW5jdGlvbi5sZW5ndGggLSAoYXJndW1lbnRzLmxlbmd0aCAtIDEpKSB9XG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZnVuYztcbn07XG5cbnZhciBhcHBseUJpbmQgPSBmdW5jdGlvbiBhcHBseUJpbmQoKSB7XG5cdHJldHVybiAkcmVmbGVjdEFwcGx5KGJpbmQsICRhcHBseSwgYXJndW1lbnRzKTtcbn07XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0JGRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnYXBwbHknLCB7IHZhbHVlOiBhcHBseUJpbmQgfSk7XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cy5hcHBseSA9IGFwcGx5QmluZDtcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDM2NDpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuLypnbG9iYWwgd2luZG93LCBnbG9iYWwqL1xudmFyIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY4MjcpXG52YXIgYXNzZXJ0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDkzKVxuZnVuY3Rpb24gbm93KCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCkgfVxuXG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2VcbnZhciBjb25zb2xlXG52YXIgdGltZXMgPSB7fVxuXG5pZiAodHlwZW9mIF9fd2VicGFja19yZXF1aXJlX18uZyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuY29uc29sZSkge1xuICAgIGNvbnNvbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuY29uc29sZVxufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5jb25zb2xlKSB7XG4gICAgY29uc29sZSA9IHdpbmRvdy5jb25zb2xlXG59IGVsc2Uge1xuICAgIGNvbnNvbGUgPSB7fVxufVxuXG52YXIgZnVuY3Rpb25zID0gW1xuICAgIFtsb2csIFwibG9nXCJdLFxuICAgIFtpbmZvLCBcImluZm9cIl0sXG4gICAgW3dhcm4sIFwid2FyblwiXSxcbiAgICBbZXJyb3IsIFwiZXJyb3JcIl0sXG4gICAgW3RpbWUsIFwidGltZVwiXSxcbiAgICBbdGltZUVuZCwgXCJ0aW1lRW5kXCJdLFxuICAgIFt0cmFjZSwgXCJ0cmFjZVwiXSxcbiAgICBbZGlyLCBcImRpclwiXSxcbiAgICBbY29uc29sZUFzc2VydCwgXCJhc3NlcnRcIl1cbl1cblxuZm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdHVwbGUgPSBmdW5jdGlvbnNbaV1cbiAgICB2YXIgZiA9IHR1cGxlWzBdXG4gICAgdmFyIG5hbWUgPSB0dXBsZVsxXVxuXG4gICAgaWYgKCFjb25zb2xlW25hbWVdKSB7XG4gICAgICAgIGNvbnNvbGVbbmFtZV0gPSBmXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnNvbGVcblxuZnVuY3Rpb24gbG9nKCkge31cblxuZnVuY3Rpb24gaW5mbygpIHtcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpXG59XG5cbmZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKVxufVxuXG5mdW5jdGlvbiBlcnJvcigpIHtcbiAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKVxufVxuXG5mdW5jdGlvbiB0aW1lKGxhYmVsKSB7XG4gICAgdGltZXNbbGFiZWxdID0gbm93KClcbn1cblxuZnVuY3Rpb24gdGltZUVuZChsYWJlbCkge1xuICAgIHZhciB0aW1lID0gdGltZXNbbGFiZWxdXG4gICAgaWYgKCF0aW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHN1Y2ggbGFiZWw6IFwiICsgbGFiZWwpXG4gICAgfVxuXG4gICAgZGVsZXRlIHRpbWVzW2xhYmVsXVxuICAgIHZhciBkdXJhdGlvbiA9IG5vdygpIC0gdGltZVxuICAgIGNvbnNvbGUubG9nKGxhYmVsICsgXCI6IFwiICsgZHVyYXRpb24gKyBcIm1zXCIpXG59XG5cbmZ1bmN0aW9uIHRyYWNlKCkge1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoKVxuICAgIGVyci5uYW1lID0gXCJUcmFjZVwiXG4gICAgZXJyLm1lc3NhZ2UgPSB1dGlsLmZvcm1hdC5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgY29uc29sZS5lcnJvcihlcnIuc3RhY2spXG59XG5cbmZ1bmN0aW9uIGRpcihvYmplY3QpIHtcbiAgICBjb25zb2xlLmxvZyh1dGlsLmluc3BlY3Qob2JqZWN0KSArIFwiXFxuXCIpXG59XG5cbmZ1bmN0aW9uIGNvbnNvbGVBc3NlcnQoZXhwcmVzc2lvbikge1xuICAgIGlmICghZXhwcmVzc2lvbikge1xuICAgICAgICB2YXIgYXJyID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpXG4gICAgICAgIGFzc2VydC5vayhmYWxzZSwgdXRpbC5mb3JtYXQuYXBwbHkobnVsbCwgYXJyKSlcbiAgICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE4NTc6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBrZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MjI4KTtcbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciBvcmlnRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oNzIzOSkoKTtcblxudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSBvcmlnRGVmaW5lUHJvcGVydHkgJiYgaGFzUHJvcGVydHlEZXNjcmlwdG9ycztcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QpIHtcblx0XHRpZiAocHJlZGljYXRlID09PSB0cnVlKSB7XG5cdFx0XHRpZiAob2JqZWN0W25hbWVdID09PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvYmplY3RbbmFtZV0gPSB2YWx1ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHR9XG59O1xuXG52YXIgZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIChvYmplY3QsIG1hcCkge1xuXHR2YXIgcHJlZGljYXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDoge307XG5cdHZhciBwcm9wcyA9IGtleXMobWFwKTtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHRwcm9wcyA9IGNvbmNhdC5jYWxsKHByb3BzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG1hcCkpO1xuXHR9XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRkZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BzW2ldLCBtYXBbcHJvcHNbaV1dLCBwcmVkaWNhdGVzW3Byb3BzW2ldXSk7XG5cdH1cbn07XG5cbmRlZmluZVByb3BlcnRpZXMuc3VwcG9ydHNEZXNjcmlwdG9ycyA9ICEhc3VwcG9ydHNEZXNjcmlwdG9ycztcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0aWVzO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMDQ2OlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvZGUgcmVmYWN0b3JlZCBmcm9tIE1vemlsbGEgRGV2ZWxvcGVyIE5ldHdvcms6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduXG4gKi9cblxuXG5cbmZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIGZpcnN0U291cmNlKSB7XG4gIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCB8fCB0YXJnZXQgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBmaXJzdCBhcmd1bWVudCB0byBvYmplY3QnKTtcbiAgfVxuXG4gIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuZXh0U291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgIGlmIChuZXh0U291cmNlID09PSB1bmRlZmluZWQgfHwgbmV4dFNvdXJjZSA9PT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSk7XG4gICAgZm9yICh2YXIgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXgrKykge1xuICAgICAgdmFyIG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcbiAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufVxuXG5mdW5jdGlvbiBwb2x5ZmlsbCgpIHtcbiAgaWYgKCFPYmplY3QuYXNzaWduKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE9iamVjdCwgJ2Fzc2lnbicsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogYXNzaWduXG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2lnbjogYXNzaWduLFxuICBwb2x5ZmlsbDogcG9seWZpbGxcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDcwNTpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGlzQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2MTcpO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZvckVhY2hBcnJheSA9IGZ1bmN0aW9uIGZvckVhY2hBcnJheShhcnJheSwgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCBpKSkge1xuICAgICAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvcihhcnJheVtpXSwgaSwgYXJyYXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBhcnJheVtpXSwgaSwgYXJyYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGZvckVhY2hTdHJpbmcgPSBmdW5jdGlvbiBmb3JFYWNoU3RyaW5nKHN0cmluZywgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN0cmluZy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAvLyBubyBzdWNoIHRoaW5nIGFzIGEgc3BhcnNlIHN0cmluZy5cbiAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yKHN0cmluZy5jaGFyQXQoaSksIGksIHN0cmluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBzdHJpbmcuY2hhckF0KGkpLCBpLCBzdHJpbmcpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGZvckVhY2hPYmplY3QgPSBmdW5jdGlvbiBmb3JFYWNoT2JqZWN0KG9iamVjdCwgaXRlcmF0b3IsIHJlY2VpdmVyKSB7XG4gICAgZm9yICh2YXIgayBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrKSkge1xuICAgICAgICAgICAgaWYgKHJlY2VpdmVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvcihvYmplY3Rba10sIGssIG9iamVjdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwocmVjZWl2ZXIsIG9iamVjdFtrXSwgaywgb2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBmb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChsaXN0LCBpdGVyYXRvciwgdGhpc0FyZykge1xuICAgIGlmICghaXNDYWxsYWJsZShpdGVyYXRvcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgdmFyIHJlY2VpdmVyO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgcmVjZWl2ZXIgPSB0aGlzQXJnO1xuICAgIH1cblxuICAgIGlmICh0b1N0ci5jYWxsKGxpc3QpID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAgIGZvckVhY2hBcnJheShsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZvckVhY2hTdHJpbmcobGlzdCwgaXRlcmF0b3IsIHJlY2VpdmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3JFYWNoT2JqZWN0KGxpc3QsIGl0ZXJhdG9yLCByZWNlaXZlcik7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmb3JFYWNoO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4Nzk0OlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5jYWxsKHRhcmdldCkgIT09IGZ1bmNUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJST1JfTUVTU0FHRSArIHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBNYXRoLm1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm91bmRBcmdzLnB1c2goJyQnICsgaSk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTEzODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGltcGxlbWVudGF0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4Nzk0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCB8fCBpbXBsZW1lbnRhdGlvbjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTI4OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdW5kZWZpbmVkO1xuXG52YXIgJFN5bnRheEVycm9yID0gU3ludGF4RXJyb3I7XG52YXIgJEZ1bmN0aW9uID0gRnVuY3Rpb247XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG52YXIgZ2V0RXZhbGxlZENvbnN0cnVjdG9yID0gZnVuY3Rpb24gKGV4cHJlc3Npb25TeW50YXgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gJEZ1bmN0aW9uKCdcInVzZSBzdHJpY3RcIjsgcmV0dXJuICgnICsgZXhwcmVzc2lvblN5bnRheCArICcpLmNvbnN0cnVjdG9yOycpKCk7XG5cdH0gY2F0Y2ggKGUpIHt9XG59O1xuXG52YXIgJGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuaWYgKCRnT1BEKSB7XG5cdHRyeSB7XG5cdFx0JGdPUEQoe30sICcnKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdCRnT1BEID0gbnVsbDsgLy8gdGhpcyBpcyBJRSA4LCB3aGljaCBoYXMgYSBicm9rZW4gZ09QRFxuXHR9XG59XG5cbnZhciB0aHJvd1R5cGVFcnJvciA9IGZ1bmN0aW9uICgpIHtcblx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoKTtcbn07XG52YXIgVGhyb3dUeXBlRXJyb3IgPSAkZ09QRFxuXHQ/IChmdW5jdGlvbiAoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnMsIG5vLWNhbGxlciwgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG5cdFx0XHRhcmd1bWVudHMuY2FsbGVlOyAvLyBJRSA4IGRvZXMgbm90IHRocm93IGhlcmVcblx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHR9IGNhdGNoIChjYWxsZWVUaHJvd3MpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdC8vIElFIDggdGhyb3dzIG9uIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYXJndW1lbnRzLCAnJylcblx0XHRcdFx0cmV0dXJuICRnT1BEKGFyZ3VtZW50cywgJ2NhbGxlZScpLmdldDtcblx0XHRcdH0gY2F0Y2ggKGdPUER0aHJvd3MpIHtcblx0XHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdFx0fVxuXHRcdH1cblx0fSgpKVxuXHQ6IHRocm93VHlwZUVycm9yO1xuXG52YXIgaGFzU3ltYm9scyA9IF9fd2VicGFja19yZXF1aXJlX18oMzU1OCkoKTtcbnZhciBoYXNQcm90byA9IF9fd2VicGFja19yZXF1aXJlX18oNjg2OSkoKTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IChcblx0aGFzUHJvdG9cblx0XHQ/IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Ll9fcHJvdG9fXzsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG5cdFx0OiBudWxsXG4pO1xuXG52YXIgbmVlZHNFdmFsID0ge307XG5cbnZhciBUeXBlZEFycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKFVpbnQ4QXJyYXkpO1xuXG52YXIgSU5UUklOU0lDUyA9IHtcblx0JyVBZ2dyZWdhdGVFcnJvciUnOiB0eXBlb2YgQWdncmVnYXRlRXJyb3IgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQWdncmVnYXRlRXJyb3IsXG5cdCclQXJyYXklJzogQXJyYXksXG5cdCclQXJyYXlCdWZmZXIlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLFxuXHQnJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGcm9tU3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Z1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiBuZWVkc0V2YWwsXG5cdCclQXRvbWljcyUnOiB0eXBlb2YgQXRvbWljcyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBdG9taWNzLFxuXHQnJUJpZ0ludCUnOiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ0ludCxcblx0JyVCaWdJbnQ2NEFycmF5JSc6IHR5cGVvZiBCaWdJbnQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ0ludDY0QXJyYXksXG5cdCclQmlnVWludDY0QXJyYXklJzogdHlwZW9mIEJpZ1VpbnQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEJpZ1VpbnQ2NEFycmF5LFxuXHQnJUJvb2xlYW4lJzogQm9vbGVhbixcblx0JyVEYXRhVmlldyUnOiB0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRGF0YVZpZXcsXG5cdCclRGF0ZSUnOiBEYXRlLFxuXHQnJWRlY29kZVVSSSUnOiBkZWNvZGVVUkksXG5cdCclZGVjb2RlVVJJQ29tcG9uZW50JSc6IGRlY29kZVVSSUNvbXBvbmVudCxcblx0JyVlbmNvZGVVUkklJzogZW5jb2RlVVJJLFxuXHQnJWVuY29kZVVSSUNvbXBvbmVudCUnOiBlbmNvZGVVUklDb21wb25lbnQsXG5cdCclRXJyb3IlJzogRXJyb3IsXG5cdCclZXZhbCUnOiBldmFsLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcblx0JyVFdmFsRXJyb3IlJzogRXZhbEVycm9yLFxuXHQnJUZsb2F0MzJBcnJheSUnOiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MzJBcnJheSxcblx0JyVGbG9hdDY0QXJyYXklJzogdHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDY0QXJyYXksXG5cdCclRmluYWxpemF0aW9uUmVnaXN0cnklJzogdHlwZW9mIEZpbmFsaXphdGlvblJlZ2lzdHJ5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZpbmFsaXphdGlvblJlZ2lzdHJ5LFxuXHQnJUZ1bmN0aW9uJSc6ICRGdW5jdGlvbixcblx0JyVHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclSW50OEFycmF5JSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LFxuXHQnJUludDE2QXJyYXklJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MTZBcnJheSxcblx0JyVJbnQzMkFycmF5JSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXksXG5cdCclaXNGaW5pdGUlJzogaXNGaW5pdGUsXG5cdCclaXNOYU4lJzogaXNOYU4sXG5cdCclSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkpIDogdW5kZWZpbmVkLFxuXHQnJUpTT04lJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTiA6IHVuZGVmaW5lZCxcblx0JyVNYXAlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAsXG5cdCclTWFwSXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IE1hcCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclTWF0aCUnOiBNYXRoLFxuXHQnJU51bWJlciUnOiBOdW1iZXIsXG5cdCclT2JqZWN0JSc6IE9iamVjdCxcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6IFJhbmdlRXJyb3IsXG5cdCclUmVmZXJlbmNlRXJyb3IlJzogUmVmZXJlbmNlRXJyb3IsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzIHx8ICFnZXRQcm90byA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bnRheEVycm9yJSc6ICRTeW50YXhFcnJvcixcblx0JyVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyVUeXBlZEFycmF5JSc6IFR5cGVkQXJyYXksXG5cdCclVHlwZUVycm9yJSc6ICRUeXBlRXJyb3IsXG5cdCclVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJVVSSUVycm9yJSc6IFVSSUVycm9yLFxuXHQnJVdlYWtNYXAlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcCxcblx0JyVXZWFrUmVmJSc6IHR5cGVvZiBXZWFrUmVmID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtSZWYsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0XG59O1xuXG5pZiAoZ2V0UHJvdG8pIHtcblx0dHJ5IHtcblx0XHRudWxsLmVycm9yOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2hhZG93cmVhbG0vcHVsbC8zODQjaXNzdWVjb21tZW50LTEzNjQyNjQyMjlcblx0XHR2YXIgZXJyb3JQcm90byA9IGdldFByb3RvKGdldFByb3RvKGUpKTtcblx0XHRJTlRSSU5TSUNTWyclRXJyb3IucHJvdG90eXBlJSddID0gZXJyb3JQcm90bztcblx0fVxufVxuXG52YXIgZG9FdmFsID0gZnVuY3Rpb24gZG9FdmFsKG5hbWUpIHtcblx0dmFyIHZhbHVlO1xuXHRpZiAobmFtZSA9PT0gJyVBc3luY0Z1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24gKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUdlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvciUnKSB7XG5cdFx0dmFyIGZuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKTtcblx0XHRpZiAoZm4pIHtcblx0XHRcdHZhbHVlID0gZm4ucHJvdG90eXBlO1xuXHRcdH1cblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJykge1xuXHRcdHZhciBnZW4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvciUnKTtcblx0XHRpZiAoZ2VuICYmIGdldFByb3RvKSB7XG5cdFx0XHR2YWx1ZSA9IGdldFByb3RvKGdlbi5wcm90b3R5cGUpO1xuXHRcdH1cblx0fVxuXG5cdElOVFJJTlNJQ1NbbmFtZV0gPSB2YWx1ZTtcblxuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgTEVHQUNZX0FMSUFTRVMgPSB7XG5cdCclQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogWydBcnJheUJ1ZmZlcicsICdwcm90b3R5cGUnXSxcblx0JyVBcnJheVByb3RvdHlwZSUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG9fZW50cmllcyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdlbnRyaWVzJ10sXG5cdCclQXJyYXlQcm90b19mb3JFYWNoJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2ZvckVhY2gnXSxcblx0JyVBcnJheVByb3RvX2tleXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAna2V5cyddLFxuXHQnJUFycmF5UHJvdG9fdmFsdWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ3ZhbHVlcyddLFxuXHQnJUFzeW5jRnVuY3Rpb25Qcm90b3R5cGUlJzogWydBc3luY0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVBc3luY0dlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUJvb2xlYW5Qcm90b3R5cGUlJzogWydCb29sZWFuJywgJ3Byb3RvdHlwZSddLFxuXHQnJURhdGFWaWV3UHJvdG90eXBlJSc6IFsnRGF0YVZpZXcnLCAncHJvdG90eXBlJ10sXG5cdCclRGF0ZVByb3RvdHlwZSUnOiBbJ0RhdGUnLCAncHJvdG90eXBlJ10sXG5cdCclRXJyb3JQcm90b3R5cGUlJzogWydFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVFdmFsRXJyb3JQcm90b3R5cGUlJzogWydFdmFsRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQzMkFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZsb2F0NjRBcnJheVByb3RvdHlwZSUnOiBbJ0Zsb2F0NjRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0Z1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvciUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUdlbmVyYXRvclByb3RvdHlwZSUnOiBbJ0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQ4QXJyYXlQcm90b3R5cGUlJzogWydJbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ0ludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSW50MzJBcnJheVByb3RvdHlwZSUnOiBbJ0ludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclSlNPTlBhcnNlJSc6IFsnSlNPTicsICdwYXJzZSddLFxuXHQnJUpTT05TdHJpbmdpZnklJzogWydKU09OJywgJ3N0cmluZ2lmeSddLFxuXHQnJU1hcFByb3RvdHlwZSUnOiBbJ01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVOdW1iZXJQcm90b3R5cGUlJzogWydOdW1iZXInLCAncHJvdG90eXBlJ10sXG5cdCclT2JqZWN0UHJvdG90eXBlJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZSddLFxuXHQnJU9ialByb3RvX3RvU3RyaW5nJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZScsICd0b1N0cmluZyddLFxuXHQnJU9ialByb3RvX3ZhbHVlT2YlJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3ZhbHVlT2YnXSxcblx0JyVQcm9taXNlUHJvdG90eXBlJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnXSxcblx0JyVQcm9taXNlUHJvdG9fdGhlbiUnOiBbJ1Byb21pc2UnLCAncHJvdG90eXBlJywgJ3RoZW4nXSxcblx0JyVQcm9taXNlX2FsbCUnOiBbJ1Byb21pc2UnLCAnYWxsJ10sXG5cdCclUHJvbWlzZV9yZWplY3QlJzogWydQcm9taXNlJywgJ3JlamVjdCddLFxuXHQnJVByb21pc2VfcmVzb2x2ZSUnOiBbJ1Byb21pc2UnLCAncmVzb2x2ZSddLFxuXHQnJVJhbmdlRXJyb3JQcm90b3R5cGUlJzogWydSYW5nZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVJlZmVyZW5jZUVycm9yUHJvdG90eXBlJSc6IFsnUmVmZXJlbmNlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVnRXhwUHJvdG90eXBlJSc6IFsnUmVnRXhwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVNldFByb3RvdHlwZSUnOiBbJ1NldCcsICdwcm90b3R5cGUnXSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ1NoYXJlZEFycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN0cmluZ1Byb3RvdHlwZSUnOiBbJ1N0cmluZycsICdwcm90b3R5cGUnXSxcblx0JyVTeW1ib2xQcm90b3R5cGUlJzogWydTeW1ib2wnLCAncHJvdG90eXBlJ10sXG5cdCclU3ludGF4RXJyb3JQcm90b3R5cGUlJzogWydTeW50YXhFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlZEFycmF5UHJvdG90eXBlJSc6IFsnVHlwZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVUeXBlRXJyb3JQcm90b3R5cGUlJzogWydUeXBlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlJzogWydVaW50OENsYW1wZWRBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50MTZBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQxNkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnVWludDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVVJJRXJyb3JQcm90b3R5cGUlJzogWydVUklFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrTWFwUHJvdG90eXBlJSc6IFsnV2Vha01hcCcsICdwcm90b3R5cGUnXSxcblx0JyVXZWFrU2V0UHJvdG90eXBlJSc6IFsnV2Vha1NldCcsICdwcm90b3R5cGUnXVxufTtcblxudmFyIGJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxMzgpO1xudmFyIGhhc093biA9IF9fd2VicGFja19yZXF1aXJlX18oMjU3MSk7XG52YXIgJGNvbmNhdCA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBBcnJheS5wcm90b3R5cGUuY29uY2F0KTtcbnZhciAkc3BsaWNlQXBwbHkgPSBiaW5kLmNhbGwoRnVuY3Rpb24uYXBwbHksIEFycmF5LnByb3RvdHlwZS5zcGxpY2UpO1xudmFyICRyZXBsYWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgJHN0clNsaWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUuc2xpY2UpO1xudmFyICRleGVjID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFJlZ0V4cC5wcm90b3R5cGUuZXhlYyk7XG5cbi8qIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTUvZGlzdC9sb2Rhc2guanMjTDY3MzUtTDY3NDQgKi9cbnZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7IC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aChzdHJpbmcpIHtcblx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHN0cmluZywgMCwgMSk7XG5cdHZhciBsYXN0ID0gJHN0clNsaWNlKHN0cmluZywgLTEpO1xuXHRpZiAoZmlyc3QgPT09ICclJyAmJiBsYXN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIGNsb3NpbmcgYCVgJyk7XG5cdH0gZWxzZSBpZiAobGFzdCA9PT0gJyUnICYmIGZpcnN0ICE9PSAnJScpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdpbnZhbGlkIGludHJpbnNpYyBzeW50YXgsIGV4cGVjdGVkIG9wZW5pbmcgYCVgJyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9IFtdO1xuXHQkcmVwbGFjZShzdHJpbmcsIHJlUHJvcE5hbWUsIGZ1bmN0aW9uIChtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG5cdFx0cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcXVvdGUgPyAkcmVwbGFjZShzdWJTdHJpbmcsIHJlRXNjYXBlQ2hhciwgJyQxJykgOiBudW1iZXIgfHwgbWF0Y2g7XG5cdH0pO1xuXHRyZXR1cm4gcmVzdWx0O1xufTtcbi8qIGVuZCBhZGFwdGF0aW9uICovXG5cbnZhciBnZXRCYXNlSW50cmluc2ljID0gZnVuY3Rpb24gZ2V0QmFzZUludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpY05hbWUgPSBuYW1lO1xuXHR2YXIgYWxpYXM7XG5cdGlmIChoYXNPd24oTEVHQUNZX0FMSUFTRVMsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0YWxpYXMgPSBMRUdBQ1lfQUxJQVNFU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpbnRyaW5zaWNOYW1lID0gJyUnICsgYWxpYXNbMF0gKyAnJSc7XG5cdH1cblxuXHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY05hbWUpKSB7XG5cdFx0dmFyIHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNOYW1lXTtcblx0XHRpZiAodmFsdWUgPT09IG5lZWRzRXZhbCkge1xuXHRcdFx0dmFsdWUgPSBkb0V2YWwoaW50cmluc2ljTmFtZSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnICYmICFhbGxvd01pc3NpbmcpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IGlzIG5vdCBhdmFpbGFibGUuIFBsZWFzZSBmaWxlIGFuIGlzc3VlIScpO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRhbGlhczogYWxpYXMsXG5cdFx0XHRuYW1lOiBpbnRyaW5zaWNOYW1lLFxuXHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0fTtcblx0fVxuXG5cdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZG9lcyBub3QgZXhpc3QhJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0aWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbnRyaW5zaWMgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYWxsb3dNaXNzaW5nICE9PSAnYm9vbGVhbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0aWYgKCRleGVjKC9eJT9bXiVdKiU/JC8sIG5hbWUpID09PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignYCVgIG1heSBub3QgYmUgcHJlc2VudCBhbnl3aGVyZSBidXQgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIHRoZSBpbnRyaW5zaWMgbmFtZScpO1xuXHR9XG5cdHZhciBwYXJ0cyA9IHN0cmluZ1RvUGF0aChuYW1lKTtcblx0dmFyIGludHJpbnNpY0Jhc2VOYW1lID0gcGFydHMubGVuZ3RoID4gMCA/IHBhcnRzWzBdIDogJyc7XG5cblx0dmFyIGludHJpbnNpYyA9IGdldEJhc2VJbnRyaW5zaWMoJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJScsIGFsbG93TWlzc2luZyk7XG5cdHZhciBpbnRyaW5zaWNSZWFsTmFtZSA9IGludHJpbnNpYy5uYW1lO1xuXHR2YXIgdmFsdWUgPSBpbnRyaW5zaWMudmFsdWU7XG5cdHZhciBza2lwRnVydGhlckNhY2hpbmcgPSBmYWxzZTtcblxuXHR2YXIgYWxpYXMgPSBpbnRyaW5zaWMuYWxpYXM7XG5cdGlmIChhbGlhcykge1xuXHRcdGludHJpbnNpY0Jhc2VOYW1lID0gYWxpYXNbMF07XG5cdFx0JHNwbGljZUFwcGx5KHBhcnRzLCAkY29uY2F0KFswLCAxXSwgYWxpYXMpKTtcblx0fVxuXG5cdGZvciAodmFyIGkgPSAxLCBpc093biA9IHRydWU7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdHZhciBwYXJ0ID0gcGFydHNbaV07XG5cdFx0dmFyIGZpcnN0ID0gJHN0clNsaWNlKHBhcnQsIDAsIDEpO1xuXHRcdHZhciBsYXN0ID0gJHN0clNsaWNlKHBhcnQsIC0xKTtcblx0XHRpZiAoXG5cdFx0XHQoXG5cdFx0XHRcdChmaXJzdCA9PT0gJ1wiJyB8fCBmaXJzdCA9PT0gXCInXCIgfHwgZmlyc3QgPT09ICdgJylcblx0XHRcdFx0fHwgKGxhc3QgPT09ICdcIicgfHwgbGFzdCA9PT0gXCInXCIgfHwgbGFzdCA9PT0gJ2AnKVxuXHRcdFx0KVxuXHRcdFx0JiYgZmlyc3QgIT09IGxhc3Rcblx0XHQpIHtcblx0XHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ3Byb3BlcnR5IG5hbWVzIHdpdGggcXVvdGVzIG11c3QgaGF2ZSBtYXRjaGluZyBxdW90ZXMnKTtcblx0XHR9XG5cdFx0aWYgKHBhcnQgPT09ICdjb25zdHJ1Y3RvcicgfHwgIWlzT3duKSB7XG5cdFx0XHRza2lwRnVydGhlckNhY2hpbmcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGludHJpbnNpY0Jhc2VOYW1lICs9ICcuJyArIHBhcnQ7XG5cdFx0aW50cmluc2ljUmVhbE5hbWUgPSAnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJztcblxuXHRcdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljUmVhbE5hbWUpKSB7XG5cdFx0XHR2YWx1ZSA9IElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdO1xuXHRcdH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCEocGFydCBpbiB2YWx1ZSkpIHtcblx0XHRcdFx0aWYgKCFhbGxvd01pc3NpbmcpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYmFzZSBpbnRyaW5zaWMgZm9yICcgKyBuYW1lICsgJyBleGlzdHMsIGJ1dCB0aGUgcHJvcGVydHkgaXMgbm90IGF2YWlsYWJsZS4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdm9pZCB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoJGdPUEQgJiYgKGkgKyAxKSA+PSBwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGRlc2MgPSAkZ09QRCh2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdGlzT3duID0gISFkZXNjO1xuXG5cdFx0XHRcdC8vIEJ5IGNvbnZlbnRpb24sIHdoZW4gYSBkYXRhIHByb3BlcnR5IGlzIGNvbnZlcnRlZCB0byBhbiBhY2Nlc3NvclxuXHRcdFx0XHQvLyBwcm9wZXJ0eSB0byBlbXVsYXRlIGEgZGF0YSBwcm9wZXJ0eSB0aGF0IGRvZXMgbm90IHN1ZmZlciBmcm9tXG5cdFx0XHRcdC8vIHRoZSBvdmVycmlkZSBtaXN0YWtlLCB0aGF0IGFjY2Vzc29yJ3MgZ2V0dGVyIGlzIG1hcmtlZCB3aXRoXG5cdFx0XHRcdC8vIGFuIGBvcmlnaW5hbFZhbHVlYCBwcm9wZXJ0eS4gSGVyZSwgd2hlbiB3ZSBkZXRlY3QgdGhpcywgd2Vcblx0XHRcdFx0Ly8gdXBob2xkIHRoZSBpbGx1c2lvbiBieSBwcmV0ZW5kaW5nIHRvIHNlZSB0aGF0IG9yaWdpbmFsIGRhdGFcblx0XHRcdFx0Ly8gcHJvcGVydHksIGkuZS4sIHJldHVybmluZyB0aGUgdmFsdWUgcmF0aGVyIHRoYW4gdGhlIGdldHRlclxuXHRcdFx0XHQvLyBpdHNlbGYuXG5cdFx0XHRcdGlmIChpc093biAmJiAnZ2V0JyBpbiBkZXNjICYmICEoJ29yaWdpbmFsVmFsdWUnIGluIGRlc2MuZ2V0KSkge1xuXHRcdFx0XHRcdHZhbHVlID0gZGVzYy5nZXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aXNPd24gPSBoYXNPd24odmFsdWUsIHBhcnQpO1xuXHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaXNPd24gJiYgIXNraXBGdXJ0aGVyQ2FjaGluZykge1xuXHRcdFx0XHRJTlRSSU5TSUNTW2ludHJpbnNpY1JlYWxOYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5MzM2OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgR2V0SW50cmluc2ljID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MjgpO1xuXG52YXIgJGdPUEQgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJScsIHRydWUpO1xuXG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRChbXSwgJ2xlbmd0aCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZ09QRFxuXHRcdCRnT1BEID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRnT1BEO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3MjM5OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgR2V0SW50cmluc2ljID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MjgpO1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmRlZmluZVByb3BlcnR5JScsIHRydWUpO1xuXG52YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9ycyA9IGZ1bmN0aW9uIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMoKSB7XG5cdGlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0XHR0cnkge1xuXHRcdFx0JGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgdmFsdWU6IDEgfSk7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBkZWZpbmVQcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG5oYXNQcm9wZXJ0eURlc2NyaXB0b3JzLmhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnID0gZnVuY3Rpb24gaGFzQXJyYXlMZW5ndGhEZWZpbmVCdWcoKSB7XG5cdC8vIG5vZGUgdjAuNiBoYXMgYSBidWcgd2hlcmUgYXJyYXkgbGVuZ3RocyBjYW4gYmUgU2V0IGJ1dCBub3QgRGVmaW5lZFxuXHRpZiAoIWhhc1Byb3BlcnR5RGVzY3JpcHRvcnMoKSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRkZWZpbmVQcm9wZXJ0eShbXSwgJ2xlbmd0aCcsIHsgdmFsdWU6IDEgfSkubGVuZ3RoICE9PSAxO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSW4gRmlyZWZveCA0LTIyLCBkZWZpbmluZyBsZW5ndGggb24gYW4gYXJyYXkgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2ODY5OlxuLyoqKi8gKChtb2R1bGUpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHRlc3QgPSB7XG5cdGZvbzoge31cbn07XG5cbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc1Byb3RvKCkge1xuXHRyZXR1cm4geyBfX3Byb3RvX186IHRlc3QgfS5mb28gPT09IHRlc3QuZm9vICYmICEoeyBfX3Byb3RvX186IG51bGwgfSBpbnN0YW5jZW9mICRPYmplY3QpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzU1ODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIG9yaWdTeW1ib2wgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2w7XG52YXIgaGFzU3ltYm9sU2hhbSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkwOCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sKCdmb28nKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sKCdiYXInKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhhc1N5bWJvbFNoYW0oKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDI5MDg6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKiBlc2xpbnQgY29tcGxleGl0eTogWzIsIDE4XSwgbWF4LXN0YXRlbWVudHM6IFsyLCAzM10gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJykgeyByZXR1cm4gdHJ1ZTsgfVxuXG5cdHZhciBvYmogPSB7fTtcblx0dmFyIHN5bSA9IFN5bWJvbCgndGVzdCcpO1xuXHR2YXIgc3ltT2JqID0gT2JqZWN0KHN5bSk7XG5cdGlmICh0eXBlb2Ygc3ltID09PSAnc3RyaW5nJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bU9iaikgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvb2JqZWN0LmFzc2lnbi9pc3N1ZXMvMTdcblx0Ly8gaWYgKHN5bSBpbnN0YW5jZW9mIFN5bWJvbCkgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL1dlYlJlZmxlY3Rpb24vZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzL2lzc3Vlcy80XG5cdC8vIGlmICghKHN5bU9iaiBpbnN0YW5jZW9mIFN5bWJvbCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gaWYgKHR5cGVvZiBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyBpZiAoU3RyaW5nKHN5bSkgIT09IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1WYWwgPSA0Mjtcblx0b2JqW3N5bV0gPSBzeW1WYWw7XG5cdGZvciAoc3ltIGluIG9iaikgeyByZXR1cm4gZmFsc2U7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tdW5yZWFjaGFibGUtbG9vcFxuXHRpZiAodHlwZW9mIE9iamVjdC5rZXlzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iaik7XG5cdGlmIChzeW1zLmxlbmd0aCAhPT0gMSB8fCBzeW1zWzBdICE9PSBzeW0pIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW0pKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIHN5bSk7XG5cdFx0aWYgKGRlc2NyaXB0b3IudmFsdWUgIT09IHN5bVZhbCB8fCBkZXNjcmlwdG9yLmVudW1lcmFibGUgIT09IHRydWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE5MTM6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBoYXNTeW1ib2xzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTA4KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNUb1N0cmluZ1RhZ1NoYW1zKCkge1xuXHRyZXR1cm4gaGFzU3ltYm9scygpICYmICEhU3ltYm9sLnRvU3RyaW5nVGFnO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjU3MTpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxMzgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTYxNTpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbmlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTM4Nzpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGhhc1RvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTEzKSgpO1xudmFyIGNhbGxCb3VuZCA9IF9fd2VicGFja19yZXF1aXJlX18oOTgxOCk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcblxudmFyIGlzU3RhbmRhcmRBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuICR0b1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xufTtcblxudmFyIGlzTGVnYWN5QXJndW1lbnRzID0gZnVuY3Rpb24gaXNBcmd1bWVudHModmFsdWUpIHtcblx0aWYgKGlzU3RhbmRhcmRBcmd1bWVudHModmFsdWUpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIHZhbHVlICE9PSBudWxsICYmXG5cdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0dmFsdWUubGVuZ3RoID49IDAgJiZcblx0XHQkdG9TdHJpbmcodmFsdWUpICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0JHRvU3RyaW5nKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdHJldHVybiBpc1N0YW5kYXJkQXJndW1lbnRzKGFyZ3VtZW50cyk7XG59KCkpO1xuXG5pc1N0YW5kYXJkQXJndW1lbnRzLmlzTGVnYWN5QXJndW1lbnRzID0gaXNMZWdhY3lBcmd1bWVudHM7IC8vIGZvciB0ZXN0c1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMgPyBpc1N0YW5kYXJkQXJndW1lbnRzIDogaXNMZWdhY3lBcmd1bWVudHM7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk2MTc6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciByZWZsZWN0QXBwbHkgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgJiYgUmVmbGVjdCAhPT0gbnVsbCAmJiBSZWZsZWN0LmFwcGx5O1xudmFyIGJhZEFycmF5TGlrZTtcbnZhciBpc0NhbGxhYmxlTWFya2VyO1xuaWYgKHR5cGVvZiByZWZsZWN0QXBwbHkgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuXHR0cnkge1xuXHRcdGJhZEFycmF5TGlrZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2xlbmd0aCcsIHtcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0aHJvdyBpc0NhbGxhYmxlTWFya2VyO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGlzQ2FsbGFibGVNYXJrZXIgPSB7fTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuXHRcdHJlZmxlY3RBcHBseShmdW5jdGlvbiAoKSB7IHRocm93IDQyOyB9LCBudWxsLCBiYWRBcnJheUxpa2UpO1xuXHR9IGNhdGNoIChfKSB7XG5cdFx0aWYgKF8gIT09IGlzQ2FsbGFibGVNYXJrZXIpIHtcblx0XHRcdHJlZmxlY3RBcHBseSA9IG51bGw7XG5cdFx0fVxuXHR9XG59IGVsc2Uge1xuXHRyZWZsZWN0QXBwbHkgPSBudWxsO1xufVxuXG52YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzXFxiLztcbnZhciBpc0VTNkNsYXNzRm4gPSBmdW5jdGlvbiBpc0VTNkNsYXNzRnVuY3Rpb24odmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiBjb25zdHJ1Y3RvclJlZ2V4LnRlc3QoZm5TdHIpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBub3QgYSBmdW5jdGlvblxuXHR9XG59O1xuXG52YXIgdHJ5RnVuY3Rpb25PYmplY3QgPSBmdW5jdGlvbiB0cnlGdW5jdGlvblRvU3RyKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgb2JqZWN0Q2xhc3MgPSAnW29iamVjdCBPYmplY3RdJztcbnZhciBmbkNsYXNzID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbnZhciBnZW5DbGFzcyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG52YXIgZGRhQ2xhc3MgPSAnW29iamVjdCBIVE1MQWxsQ29sbGVjdGlvbl0nOyAvLyBJRSAxMVxudmFyIGRkYUNsYXNzMiA9ICdbb2JqZWN0IEhUTUwgZG9jdW1lbnQuYWxsIGNsYXNzXSc7XG52YXIgZGRhQ2xhc3MzID0gJ1tvYmplY3QgSFRNTENvbGxlY3Rpb25dJzsgLy8gSUUgOS0xMFxudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiAhIVN5bWJvbC50b1N0cmluZ1RhZzsgLy8gYmV0dGVyOiB1c2UgYGhhcy10b3N0cmluZ3RhZ2BcblxudmFyIGlzSUU2OCA9ICEoMCBpbiBbLF0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNwYXJzZS1hcnJheXMsIGNvbW1hLXNwYWNpbmdcblxudmFyIGlzRERBID0gZnVuY3Rpb24gaXNEb2N1bWVudERvdEFsbCgpIHsgcmV0dXJuIGZhbHNlOyB9O1xuaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ29iamVjdCcpIHtcblx0Ly8gRmlyZWZveCAzIGNhbm9uaWNhbGl6ZXMgRERBIHRvIHVuZGVmaW5lZCB3aGVuIGl0J3Mgbm90IGFjY2Vzc2VkIGRpcmVjdGx5XG5cdHZhciBhbGwgPSBkb2N1bWVudC5hbGw7XG5cdGlmICh0b1N0ci5jYWxsKGFsbCkgPT09IHRvU3RyLmNhbGwoZG9jdW1lbnQuYWxsKSkge1xuXHRcdGlzRERBID0gZnVuY3Rpb24gaXNEb2N1bWVudERvdEFsbCh2YWx1ZSkge1xuXHRcdFx0LyogZ2xvYmFscyBkb2N1bWVudDogZmFsc2UgKi9cblx0XHRcdC8vIGluIElFIDYtOCwgdHlwZW9mIGRvY3VtZW50LmFsbCBpcyBcIm9iamVjdFwiIGFuZCBpdCdzIHRydXRoeVxuXHRcdFx0aWYgKChpc0lFNjggfHwgIXZhbHVlKSAmJiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0c3RyID09PSBkZGFDbGFzc1xuXHRcdFx0XHRcdFx0fHwgc3RyID09PSBkZGFDbGFzczJcblx0XHRcdFx0XHRcdHx8IHN0ciA9PT0gZGRhQ2xhc3MzIC8vIG9wZXJhIDEyLjE2XG5cdFx0XHRcdFx0XHR8fCBzdHIgPT09IG9iamVjdENsYXNzIC8vIElFIDYtOFxuXHRcdFx0XHRcdCkgJiYgdmFsdWUoJycpID09IG51bGw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZmxlY3RBcHBseVxuXHQ/IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHtcblx0XHRpZiAoaXNEREEodmFsdWUpKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0aWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0dHJ5IHtcblx0XHRcdHJlZmxlY3RBcHBseSh2YWx1ZSwgbnVsbCwgYmFkQXJyYXlMaWtlKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRpZiAoZSAhPT0gaXNDYWxsYWJsZU1hcmtlcikgeyByZXR1cm4gZmFsc2U7IH1cblx0XHR9XG5cdFx0cmV0dXJuICFpc0VTNkNsYXNzRm4odmFsdWUpICYmIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTtcblx0fVxuXHQ6IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHtcblx0XHRpZiAoaXNEREEodmFsdWUpKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0aWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0aWYgKGhhc1RvU3RyaW5nVGFnKSB7IHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7IH1cblx0XHRpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHR2YXIgc3RyQ2xhc3MgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0XHRpZiAoc3RyQ2xhc3MgIT09IGZuQ2xhc3MgJiYgc3RyQ2xhc3MgIT09IGdlbkNsYXNzICYmICEoL15cXFtvYmplY3QgSFRNTC8pLnRlc3Qoc3RyQ2xhc3MpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7XG5cdH07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDI2MjU6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciBpc0ZuUmVnZXggPSAvXlxccyooPzpmdW5jdGlvbik/XFwqLztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oMTkxMykoKTtcbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBnZXRHZW5lcmF0b3JGdW5jID0gZnVuY3Rpb24gKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dHJ5IHtcblx0XHRyZXR1cm4gRnVuY3Rpb24oJ3JldHVybiBmdW5jdGlvbiooKSB7fScpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0fVxufTtcbnZhciBHZW5lcmF0b3JGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0dlbmVyYXRvckZ1bmN0aW9uKGZuKSB7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKGlzRm5SZWdleC50ZXN0KGZuVG9TdHIuY2FsbChmbikpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZykge1xuXHRcdHZhciBzdHIgPSB0b1N0ci5jYWxsKGZuKTtcblx0XHRyZXR1cm4gc3RyID09PSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xuXHR9XG5cdGlmICghZ2V0UHJvdG8pIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKHR5cGVvZiBHZW5lcmF0b3JGdW5jdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHR2YXIgZ2VuZXJhdG9yRnVuYyA9IGdldEdlbmVyYXRvckZ1bmMoKTtcblx0XHRHZW5lcmF0b3JGdW5jdGlvbiA9IGdlbmVyYXRvckZ1bmMgPyBnZXRQcm90byhnZW5lcmF0b3JGdW5jKSA6IGZhbHNlO1xuXHR9XG5cdHJldHVybiBnZXRQcm90byhmbikgPT09IEdlbmVyYXRvckZ1bmN0aW9uO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODAwNjpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1udW1iZXIuaXNuYW4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzgzODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGNhbGxCaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDk4KTtcbnZhciBkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4NTcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwMDYpO1xudmFyIGdldFBvbHlmaWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTkxKTtcbnZhciBzaGltID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjQxKTtcblxudmFyIHBvbHlmaWxsID0gY2FsbEJpbmQoZ2V0UG9seWZpbGwoKSwgTnVtYmVyKTtcblxuLyogaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLW51bWJlci5pc25hbiAqL1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxNTkxOlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaW1wbGVtZW50YXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwMDYpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRpZiAoTnVtYmVyLmlzTmFOICYmIE51bWJlci5pc05hTihOYU4pICYmICFOdW1iZXIuaXNOYU4oJ2EnKSkge1xuXHRcdHJldHVybiBOdW1iZXIuaXNOYU47XG5cdH1cblx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTY0MTpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGRlZmluZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTg1Nyk7XG52YXIgZ2V0UG9seWZpbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1OTEpO1xuXG4vKiBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtbnVtYmVyLmlzbmFuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbU51bWJlcklzTmFOKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoTnVtYmVyLCB7IGlzTmFOOiBwb2x5ZmlsbCB9LCB7XG5cdFx0aXNOYU46IGZ1bmN0aW9uIHRlc3RJc05hTigpIHtcblx0XHRcdHJldHVybiBOdW1iZXIuaXNOYU4gIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDU5NDM6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB3aGljaFR5cGVkQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3MzApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWx1ZSkge1xuXHRyZXR1cm4gISF3aGljaFR5cGVkQXJyYXkodmFsdWUpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjM3Mjpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBudW1iZXJJc05hTiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpcyhhLCBiKSB7XG5cdGlmIChhID09PSAwICYmIGIgPT09IDApIHtcblx0XHRyZXR1cm4gMSAvIGEgPT09IDEgLyBiO1xuXHR9XG5cdGlmIChhID09PSBiKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKG51bWJlcklzTmFOKGEpICYmIG51bWJlcklzTmFOKGIpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1OTY4OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZGVmaW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODU3KTtcbnZhciBjYWxsQmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oODQ5OCk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjM3Mik7XG52YXIgZ2V0UG9seWZpbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5MzcpO1xudmFyIHNoaW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwODcpO1xuXG52YXIgcG9seWZpbGwgPSBjYWxsQmluZChnZXRQb2x5ZmlsbCgpLCBPYmplY3QpO1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOTM3OlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgaW1wbGVtZW50YXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzNzIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC5pcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC5pcyA6IGltcGxlbWVudGF0aW9uO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTA4Nzpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGdldFBvbHlmaWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTM3KTtcbnZhciBkZWZpbmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4NTcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1PYmplY3RJcygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE9iamVjdCwgeyBpczogcG9seWZpbGwgfSwge1xuXHRcdGlzOiBmdW5jdGlvbiB0ZXN0T2JqZWN0SXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmlzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA4MTYwOlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIga2V5c1NoaW07XG5pZiAoIU9iamVjdC5rZXlzKSB7XG5cdC8vIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG5cdHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXHR2YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXHR2YXIgaXNBcmdzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NjgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGdsb2JhbC1yZXF1aXJlXG5cdHZhciBpc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXHR2YXIgaGFzRG9udEVudW1CdWcgPSAhaXNFbnVtZXJhYmxlLmNhbGwoeyB0b1N0cmluZzogbnVsbCB9LCAndG9TdHJpbmcnKTtcblx0dmFyIGhhc1Byb3RvRW51bUJ1ZyA9IGlzRW51bWVyYWJsZS5jYWxsKGZ1bmN0aW9uICgpIHt9LCAncHJvdG90eXBlJyk7XG5cdHZhciBkb250RW51bXMgPSBbXG5cdFx0J3RvU3RyaW5nJyxcblx0XHQndG9Mb2NhbGVTdHJpbmcnLFxuXHRcdCd2YWx1ZU9mJyxcblx0XHQnaGFzT3duUHJvcGVydHknLFxuXHRcdCdpc1Byb3RvdHlwZU9mJyxcblx0XHQncHJvcGVydHlJc0VudW1lcmFibGUnLFxuXHRcdCdjb25zdHJ1Y3Rvcidcblx0XTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlID0gZnVuY3Rpb24gKG8pIHtcblx0XHR2YXIgY3RvciA9IG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIGN0b3IgJiYgY3Rvci5wcm90b3R5cGUgPT09IG87XG5cdH07XG5cdHZhciBleGNsdWRlZEtleXMgPSB7XG5cdFx0JGFwcGxpY2F0aW9uQ2FjaGU6IHRydWUsXG5cdFx0JGNvbnNvbGU6IHRydWUsXG5cdFx0JGV4dGVybmFsOiB0cnVlLFxuXHRcdCRmcmFtZTogdHJ1ZSxcblx0XHQkZnJhbWVFbGVtZW50OiB0cnVlLFxuXHRcdCRmcmFtZXM6IHRydWUsXG5cdFx0JGlubmVySGVpZ2h0OiB0cnVlLFxuXHRcdCRpbm5lcldpZHRoOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5jaGFuZ2U6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmVycm9yOiB0cnVlLFxuXHRcdCRvdXRlckhlaWdodDogdHJ1ZSxcblx0XHQkb3V0ZXJXaWR0aDogdHJ1ZSxcblx0XHQkcGFnZVhPZmZzZXQ6IHRydWUsXG5cdFx0JHBhZ2VZT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYXJlbnQ6IHRydWUsXG5cdFx0JHNjcm9sbExlZnQ6IHRydWUsXG5cdFx0JHNjcm9sbFRvcDogdHJ1ZSxcblx0XHQkc2Nyb2xsWDogdHJ1ZSxcblx0XHQkc2Nyb2xsWTogdHJ1ZSxcblx0XHQkc2VsZjogdHJ1ZSxcblx0XHQkd2Via2l0SW5kZXhlZERCOiB0cnVlLFxuXHRcdCR3ZWJraXRTdG9yYWdlSW5mbzogdHJ1ZSxcblx0XHQkd2luZG93OiB0cnVlXG5cdH07XG5cdHZhciBoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcgPSAoZnVuY3Rpb24gKCkge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm9yICh2YXIgayBpbiB3aW5kb3cpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICghZXhjbHVkZWRLZXlzWyckJyArIGtdICYmIGhhcy5jYWxsKHdpbmRvdywgaykgJiYgd2luZG93W2tdICE9PSBudWxsICYmIHR5cGVvZiB3aW5kb3dba10gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKHdpbmRvd1trXSk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0oKSk7XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kgPSBmdW5jdGlvbiAobykge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1Zykge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH1cblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0a2V5c1NoaW0gPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuXHRcdHZhciBpc09iamVjdCA9IG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jztcblx0XHR2YXIgaXNGdW5jdGlvbiA9IHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0XHR2YXIgaXNBcmd1bWVudHMgPSBpc0FyZ3Mob2JqZWN0KTtcblx0XHR2YXIgaXNTdHJpbmcgPSBpc09iamVjdCAmJiB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuXHRcdHZhciB0aGVLZXlzID0gW107XG5cblx0XHRpZiAoIWlzT2JqZWN0ICYmICFpc0Z1bmN0aW9uICYmICFpc0FyZ3VtZW50cykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdCcpO1xuXHRcdH1cblxuXHRcdHZhciBza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGdW5jdGlvbjtcblx0XHRpZiAoaXNTdHJpbmcgJiYgb2JqZWN0Lmxlbmd0aCA+IDAgJiYgIWhhcy5jYWxsKG9iamVjdCwgMCkpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChpc0FyZ3VtZW50cyAmJiBvYmplY3QubGVuZ3RoID4gMCkge1xuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBvYmplY3QubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhqKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG5cdFx0XHRcdGlmICghKHNraXBQcm90byAmJiBuYW1lID09PSAncHJvdG90eXBlJykgJiYgaGFzLmNhbGwob2JqZWN0LCBuYW1lKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcobmFtZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGhhc0RvbnRFbnVtQnVnKSB7XG5cdFx0XHR2YXIgc2tpcENvbnN0cnVjdG9yID0gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5KG9iamVjdCk7XG5cblx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgZG9udEVudW1zLmxlbmd0aDsgKytrKSB7XG5cdFx0XHRcdGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bXNba10gPT09ICdjb25zdHJ1Y3RvcicpICYmIGhhcy5jYWxsKG9iamVjdCwgZG9udEVudW1zW2tdKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChkb250RW51bXNba10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGVLZXlzO1xuXHR9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTIyODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGlzQXJncyA9IF9fd2VicGFja19yZXF1aXJlX18oOTY4KTtcblxudmFyIG9yaWdLZXlzID0gT2JqZWN0LmtleXM7XG52YXIga2V5c1NoaW0gPSBvcmlnS2V5cyA/IGZ1bmN0aW9uIGtleXMobykgeyByZXR1cm4gb3JpZ0tleXMobyk7IH0gOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDgxNjApO1xuXG52YXIgb3JpZ2luYWxLZXlzID0gT2JqZWN0LmtleXM7XG5cbmtleXNTaGltLnNoaW0gPSBmdW5jdGlvbiBzaGltT2JqZWN0S2V5cygpIHtcblx0aWYgKE9iamVjdC5rZXlzKSB7XG5cdFx0dmFyIGtleXNXb3Jrc1dpdGhBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gU2FmYXJpIDUuMCBidWdcblx0XHRcdHZhciBhcmdzID0gT2JqZWN0LmtleXMoYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiBhcmdzICYmIGFyZ3MubGVuZ3RoID09PSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdH0oMSwgMikpO1xuXHRcdGlmICgha2V5c1dvcmtzV2l0aEFyZ3VtZW50cykge1xuXHRcdFx0T2JqZWN0LmtleXMgPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuXHRcdFx0XHRpZiAoaXNBcmdzKG9iamVjdCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKHNsaWNlLmNhbGwob2JqZWN0KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhvYmplY3QpO1xuXHRcdFx0fTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0T2JqZWN0LmtleXMgPSBrZXlzU2hpbTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMgfHwga2V5c1NoaW07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5Njg6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0dmFyIGlzQXJncyA9IHN0ciA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdGlmICghaXNBcmdzKSB7XG5cdFx0aXNBcmdzID0gc3RyICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0XHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0XHR0b1N0ci5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGlzQXJncztcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk5MDc6XG4vKioqLyAoKG1vZHVsZSkgPT4ge1xuXG4vLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyMTI1OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEJhc2VTZXJ2aWNlOiAoKSA9PiAoLyogYmluZGluZyAqLyBCYXNlU2VydmljZSlcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHZzY29kZV9sYW5ndWFnZXNlcnZlcl9wcm90b2NvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NTAxKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubih2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3NzApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHZzY29kZV9sYW5ndWFnZXNlcnZlcl90ZXh0ZG9jdW1lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oODc3OCk7XG5mdW5jdGlvbiBfZGVmaW5lX3Byb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5cblxuXG5jbGFzcyBCYXNlU2VydmljZSB7XG4gICAgYWRkRG9jdW1lbnQoZG9jdW1lbnQpIHtcbiAgICAgICAgdGhpcy5kb2N1bWVudHNbZG9jdW1lbnQudXJpXSA9IHZzY29kZV9sYW5ndWFnZXNlcnZlcl90ZXh0ZG9jdW1lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy8qIC5UZXh0RG9jdW1lbnQgKi8gLlYuY3JlYXRlKGRvY3VtZW50LnVyaSwgZG9jdW1lbnQubGFuZ3VhZ2VJZCwgZG9jdW1lbnQudmVyc2lvbiwgZG9jdW1lbnQudGV4dCk7XG4gICAgfVxuICAgIGdldERvY3VtZW50KHVyaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudHNbdXJpXTtcbiAgICB9XG4gICAgcmVtb3ZlRG9jdW1lbnQoZG9jdW1lbnQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuZG9jdW1lbnRzW2RvY3VtZW50LnVyaV07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNbZG9jdW1lbnQudXJpXSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMub3B0aW9uc1tkb2N1bWVudC51cmldO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldERvY3VtZW50VmFsdWUodXJpKSB7XG4gICAgICAgIHZhciBfdGhpc19nZXREb2N1bWVudDtcbiAgICAgICAgcmV0dXJuIChfdGhpc19nZXREb2N1bWVudCA9IHRoaXMuZ2V0RG9jdW1lbnQodXJpKSkgPT09IG51bGwgfHwgX3RoaXNfZ2V0RG9jdW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzX2dldERvY3VtZW50LmdldFRleHQoKTtcbiAgICB9XG4gICAgc2V0VmFsdWUoaWRlbnRpZmllciwgdmFsdWUpIHtcbiAgICAgICAgbGV0IGRvY3VtZW50ID0gdGhpcy5nZXREb2N1bWVudChpZGVudGlmaWVyLnVyaSk7XG4gICAgICAgIGlmIChkb2N1bWVudCkge1xuICAgICAgICAgICAgZG9jdW1lbnQgPSB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdGV4dGRvY3VtZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18vKiAuVGV4dERvY3VtZW50ICovIC5WLmNyZWF0ZShkb2N1bWVudC51cmksIGRvY3VtZW50Lmxhbmd1YWdlSWQsIGRvY3VtZW50LnZlcnNpb24sIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRzW2RvY3VtZW50LnVyaV0gPSBkb2N1bWVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRHbG9iYWxPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxPcHRpb25zID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge307XG4gICAgfVxuICAgIHNldFdvcmtzcGFjZSh3b3Jrc3BhY2VVcmkpIHtcbiAgICAgICAgdGhpcy53b3Jrc3BhY2VVcmkgPSB3b3Jrc3BhY2VVcmk7XG4gICAgfVxuICAgIHNldE9wdGlvbnMoZG9jdW1lbnRVcmksIG9wdGlvbnMsIG1lcmdlID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zW2RvY3VtZW50VXJpXSA9IG1lcmdlID8gKDAsX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18vKiAubWVyZ2VPYmplY3RzICovIC5yTCkob3B0aW9ucywgdGhpcy5vcHRpb25zW2RvY3VtZW50VXJpXSkgOiBvcHRpb25zO1xuICAgIH1cbiAgICBnZXRPcHRpb24oZG9jdW1lbnRVcmksIG9wdGlvbk5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc1tkb2N1bWVudFVyaV0gJiYgdGhpcy5vcHRpb25zW2RvY3VtZW50VXJpXVtvcHRpb25OYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1tkb2N1bWVudFVyaV1bb3B0aW9uTmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nbG9iYWxPcHRpb25zW29wdGlvbk5hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFwcGx5RGVsdGFzKGlkZW50aWZpZXIsIGRlbHRhcykge1xuICAgICAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLmdldERvY3VtZW50KGlkZW50aWZpZXIudXJpKTtcbiAgICAgICAgaWYgKGRvY3VtZW50KSB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdGV4dGRvY3VtZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18vKiAuVGV4dERvY3VtZW50ICovIC5WLnVwZGF0ZShkb2N1bWVudCwgZGVsdGFzLCBpZGVudGlmaWVyLnZlcnNpb24pO1xuICAgIH1cbiAgICBhc3luYyBkb0NvbXBsZXRlKGRvY3VtZW50LCBwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgZG9Ib3Zlcihkb2N1bWVudCwgcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGFzeW5jIGRvUmVzb2x2ZShpdGVtKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBhc3luYyBkb1ZhbGlkYXRpb24oZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBmb3JtYXQoZG9jdW1lbnQsIHJhbmdlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pO1xuICAgIH1cbiAgICBhc3luYyBwcm92aWRlU2lnbmF0dXJlSGVscChkb2N1bWVudCwgcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGFzeW5jIGZpbmREb2N1bWVudEhpZ2hsaWdodHMoZG9jdW1lbnQsIHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnNUb0ZpbHRlckRpYWdub3N0aWNzKCkge1xuICAgICAgICB2YXIgX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9JZ25vcmUsIF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvVHJlYXRBc1dhcm5pbmcsIF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvVHJlYXRBc0luZm8sIF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvSWdub3JlLCBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb1RyZWF0QXNXYXJuaW5nLCBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb1RyZWF0QXNJbmZvO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXJyb3JDb2Rlc1RvSWdub3JlOiAoX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9JZ25vcmUgPSB0aGlzLmdsb2JhbE9wdGlvbnMuZXJyb3JDb2Rlc1RvSWdub3JlKSAhPT0gbnVsbCAmJiBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb0lnbm9yZSAhPT0gdm9pZCAwID8gX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9JZ25vcmUgOiBbXSxcbiAgICAgICAgICAgIGVycm9yQ29kZXNUb1RyZWF0QXNXYXJuaW5nOiAoX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9UcmVhdEFzV2FybmluZyA9IHRoaXMuZ2xvYmFsT3B0aW9ucy5lcnJvckNvZGVzVG9UcmVhdEFzV2FybmluZykgIT09IG51bGwgJiYgX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9UcmVhdEFzV2FybmluZyAhPT0gdm9pZCAwID8gX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9UcmVhdEFzV2FybmluZyA6IFtdLFxuICAgICAgICAgICAgZXJyb3JDb2Rlc1RvVHJlYXRBc0luZm86IChfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb1RyZWF0QXNJbmZvID0gdGhpcy5nbG9iYWxPcHRpb25zLmVycm9yQ29kZXNUb1RyZWF0QXNJbmZvKSAhPT0gbnVsbCAmJiBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb1RyZWF0QXNJbmZvICE9PSB2b2lkIDAgPyBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yQ29kZXNUb1RyZWF0QXNJbmZvIDogW10sXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VzVG9JZ25vcmU6IChfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb0lnbm9yZSA9IHRoaXMuZ2xvYmFsT3B0aW9ucy5lcnJvck1lc3NhZ2VzVG9JZ25vcmUpICE9PSBudWxsICYmIF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvSWdub3JlICE9PSB2b2lkIDAgPyBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb0lnbm9yZSA6IFtdLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlc1RvVHJlYXRBc1dhcm5pbmc6IChfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb1RyZWF0QXNXYXJuaW5nID0gdGhpcy5nbG9iYWxPcHRpb25zLmVycm9yTWVzc2FnZXNUb1RyZWF0QXNXYXJuaW5nKSAhPT0gbnVsbCAmJiBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb1RyZWF0QXNXYXJuaW5nICE9PSB2b2lkIDAgPyBfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb1RyZWF0QXNXYXJuaW5nIDogW10sXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VzVG9UcmVhdEFzSW5mbzogKF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvVHJlYXRBc0luZm8gPSB0aGlzLmdsb2JhbE9wdGlvbnMuZXJyb3JNZXNzYWdlc1RvVHJlYXRBc0luZm8pICE9PSBudWxsICYmIF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvVHJlYXRBc0luZm8gIT09IHZvaWQgMCA/IF90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvVHJlYXRBc0luZm8gOiBbXVxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRTZW1hbnRpY1Rva2Vucyhkb2N1bWVudCwgcmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gICAgZGlzcG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICBjbG9zZUNvbm5lY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgZ2V0Q29kZUFjdGlvbnMoZG9jdW1lbnQsIHJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIGV4ZWN1dGVDb21tYW5kKGNvbW1hbmQsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gICAgc2VuZEFwcGxpZWRSZXN1bHQocmVzdWx0LCBjYWxsYmFja0lkKSB7fVxuICAgIGNvbnN0cnVjdG9yKG1vZGUsIHdvcmtzcGFjZVVyaSl7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJzZXJ2aWNlTmFtZVwiLCB2b2lkIDApO1xuICAgICAgICBfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwibW9kZVwiLCB2b2lkIDApO1xuICAgICAgICBfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwiZG9jdW1lbnRzXCIsIHt9KTtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcIm9wdGlvbnNcIiwge30pO1xuICAgICAgICBfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwiZ2xvYmFsT3B0aW9uc1wiLCB7fSk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJzZXJ2aWNlRGF0YVwiLCB2b2lkIDApO1xuICAgICAgICBfZGVmaW5lX3Byb3BlcnR5KHRoaXMsIFwic2VydmljZUNhcGFiaWxpdGllc1wiLCB7fSk7XG4gICAgICAgIF9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJ3b3Jrc3BhY2VVcmlcIiwgdm9pZCAwKTtcbiAgICAgICAgX2RlZmluZV9wcm9wZXJ0eSh0aGlzLCBcImNsaWVudENhcGFiaWxpdGllc1wiLCB7XG4gICAgICAgICAgICB0ZXh0RG9jdW1lbnQ6IHtcbiAgICAgICAgICAgICAgICBkaWFnbm9zdGljOiB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHJlbGF0ZWREb2N1bWVudFN1cHBvcnQ6IHRydWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHB1Ymxpc2hEaWFnbm9zdGljczoge1xuICAgICAgICAgICAgICAgICAgICByZWxhdGVkSW5mb3JtYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb25TdXBwb3J0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdGFnU3VwcG9ydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTZXQ6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5EaWFnbm9zdGljVGFnLlVubmVjZXNzYXJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZzY29kZV9sYW5ndWFnZXNlcnZlcl9wcm90b2NvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkRpYWdub3N0aWNUYWcuRGVwcmVjYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBkeW5hbWljUmVnaXN0cmF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50Rm9ybWF0OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWFya2Rvd24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3BsYWludGV4dCdcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3luY2hyb25pemF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHdpbGxTYXZlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZGlkU2F2ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHdpbGxTYXZlV2FpdFVudGlsOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZm9ybWF0dGluZzoge1xuICAgICAgICAgICAgICAgICAgICBkeW5hbWljUmVnaXN0cmF0aW9uOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb21wbGV0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGR5bmFtaWNSZWdpc3RyYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRpb25JdGVtOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbmlwcGV0U3VwcG9ydDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1pdENoYXJhY3RlcnNTdXBwb3J0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50YXRpb25Gb3JtYXQ6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWFya2Rvd24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwbGFpbnRleHQnXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVwcmVjYXRlZFN1cHBvcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VsZWN0U3VwcG9ydDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFN1cHBvcnQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzaWduYXR1cmVIZWxwOiB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25hdHVyZUluZm9ybWF0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uRm9ybWF0OiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hcmtkb3duJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGxhaW50ZXh0J1xuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVBhcmFtZXRlclN1cHBvcnQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRIaWdobGlnaHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2VtYW50aWNUb2tlbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgbXVsdGlsaW5lVG9rZW5TdXBwb3J0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxhcHBpbmdUb2tlblN1cHBvcnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB0b2tlblR5cGVzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5Nb2RpZmllcnM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJlbGF0aXZlXCJcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBhdWdtZW50c1N5bnRheFRva2VuczogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29kZUFjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBkeW5hbWljUmVnaXN0cmF0aW9uOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHdvcmtzcGFjZToge1xuICAgICAgICAgICAgICAgIGRpZENoYW5nZUNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXhlY3V0ZUNvbW1hbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZHluYW1pY1JlZ2lzdHJhdGlvbjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXBwbHlFZGl0OiB0cnVlLFxuICAgICAgICAgICAgICAgIHdvcmtzcGFjZUVkaXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZmFpbHVyZUhhbmRsaW5nOiBcImFib3J0XCIsXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbGl6ZXNMaW5lRW5kaW5nczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Q2hhbmdlczogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgICAgICB0aGlzLndvcmtzcGFjZVVyaSA9IHdvcmtzcGFjZVVyaTtcbiAgICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ4NDk6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cbi8qXG4gIHBocC5qcyAwLjEuMCA8aHR0cDovL3BocGpzLmhlcnR6ZW4uY29tLz5cbiAgQ29weXJpZ2h0IChjKSAyMDEzIE5pa2xhcyB2b24gSGVydHplblxuXG4gIFJlbGVhc2VkIHVuZGVyIE1JVCBMaWNlbnNlXG5cbiAgVGhpcyBmaWxlIGNvbnRhaW5zOlxuICAtIFt2YXIgUEhQID0ge0NvbnN0YW50czp7fX07XVxuICAtIHNyYy9tb2R1bGVzL3Rva2VuaXplci9jb25zdGFudHMuanNcbiAgLSBzcmMvcGFyc2VyL2xleGVyLmpzXG4gIC0gc3JjL3BhcnNlci9wYXJzZXIuanNcbiAgLSBzcmMvcGFyc2VyL3l5bi5qc1xuICAtIHNyYy9wYXJzZXIveXluX3N0bXQuanNcbiAgLSBzcmMvcGFyc2VyL3l5bl9leHByLmpzXG4gIC0gc3JjL3BhcnNlci95eW5fc2NhbGFyLmpzXG4qLyB2YXIgUEhQID0ge1xuICAgIENvbnN0YW50czoge31cbn07XG5QSFAuQ29uc3RhbnRzLlRfVEhST1cgPSAzMTc7XG5QSFAuQ29uc3RhbnRzLlRfSU5DTFVERSA9IDI3MjtcblBIUC5Db25zdGFudHMuVF9JTkNMVURFX09OQ0UgPSAyNzM7XG5QSFAuQ29uc3RhbnRzLlRfRVZBTCA9IDI3NDtcblBIUC5Db25zdGFudHMuVF9SRVFVSVJFID0gMjc1O1xuUEhQLkNvbnN0YW50cy5UX1JFUVVJUkVfT05DRSA9IDI3NjtcblBIUC5Db25zdGFudHMuVF9MT0dJQ0FMX09SID0gMjc3O1xuUEhQLkNvbnN0YW50cy5UX0xPR0lDQUxfWE9SID0gMjc4O1xuUEhQLkNvbnN0YW50cy5UX0xPR0lDQUxfQU5EID0gMjc5O1xuUEhQLkNvbnN0YW50cy5UX1BSSU5UID0gMjgwO1xuUEhQLkNvbnN0YW50cy5UX1lJRUxEID0gMjgxO1xuUEhQLkNvbnN0YW50cy5UX0RPVUJMRV9BUlJPVyA9IDM4NjtcblBIUC5Db25zdGFudHMuVF9ZSUVMRF9GUk9NID0gMjgyO1xuUEhQLkNvbnN0YW50cy5UX1BMVVNfRVFVQUwgPSAzNTI7XG5QSFAuQ29uc3RhbnRzLlRfTUlOVVNfRVFVQUwgPSAzNTM7XG5QSFAuQ29uc3RhbnRzLlRfTVVMX0VRVUFMID0gMzU0O1xuUEhQLkNvbnN0YW50cy5UX0RJVl9FUVVBTCA9IDM1NTtcblBIUC5Db25zdGFudHMuVF9DT05DQVRfRVFVQUwgPSAzNTY7XG5QSFAuQ29uc3RhbnRzLlRfTU9EX0VRVUFMID0gMzU3O1xuUEhQLkNvbnN0YW50cy5UX0FORF9FUVVBTCA9IDM1ODtcblBIUC5Db25zdGFudHMuVF9PUl9FUVVBTCA9IDM1OTtcblBIUC5Db25zdGFudHMuVF9YT1JfRVFVQUwgPSAzNjA7XG5QSFAuQ29uc3RhbnRzLlRfU0xfRVFVQUwgPSAzNjE7XG5QSFAuQ29uc3RhbnRzLlRfU1JfRVFVQUwgPSAzNjI7XG5QSFAuQ29uc3RhbnRzLlRfUE9XX0VRVUFMID0gNDAyO1xuUEhQLkNvbnN0YW50cy5UX0NPQUxFU0NFX0VRVUFMID0gMzYzO1xuUEhQLkNvbnN0YW50cy5UX0NPQUxFU0NFID0gNDAwO1xuUEhQLkNvbnN0YW50cy5UX0JPT0xFQU5fT1IgPSAzNjQ7XG5QSFAuQ29uc3RhbnRzLlRfQk9PTEVBTl9BTkQgPSAzNjU7XG5QSFAuQ29uc3RhbnRzLlRfQU1QRVJTQU5EX05PVF9GT0xMT1dFRF9CWV9WQVJfT1JfVkFSQVJHID0gNDA0O1xuUEhQLkNvbnN0YW50cy5UX0FNUEVSU0FORF9GT0xMT1dFRF9CWV9WQVJfT1JfVkFSQVJHID0gNDAzO1xuUEhQLkNvbnN0YW50cy5UX0lTX0VRVUFMID0gMzY2O1xuUEhQLkNvbnN0YW50cy5UX0lTX05PVF9FUVVBTCA9IDM2NztcblBIUC5Db25zdGFudHMuVF9JU19JREVOVElDQUwgPSAzNjg7XG5QSFAuQ29uc3RhbnRzLlRfSVNfTk9UX0lERU5USUNBTCA9IDM2OTtcblBIUC5Db25zdGFudHMuVF9TUEFDRVNISVAgPSAzNzI7XG5QSFAuQ29uc3RhbnRzLlRfSVNfU01BTExFUl9PUl9FUVVBTCA9IDM3MDtcblBIUC5Db25zdGFudHMuVF9JU19HUkVBVEVSX09SX0VRVUFMID0gMzcxO1xuUEhQLkNvbnN0YW50cy5UX1NMID0gMzczO1xuUEhQLkNvbnN0YW50cy5UX1NSID0gMzc0O1xuUEhQLkNvbnN0YW50cy5UX0lOU1RBTkNFT0YgPSAyODM7XG5QSFAuQ29uc3RhbnRzLlRfSU5DID0gMzc1O1xuUEhQLkNvbnN0YW50cy5UX0RFQyA9IDM3NjtcblBIUC5Db25zdGFudHMuVF9JTlRfQ0FTVCA9IDM3NztcblBIUC5Db25zdGFudHMuVF9ET1VCTEVfQ0FTVCA9IDM3ODtcblBIUC5Db25zdGFudHMuVF9TVFJJTkdfQ0FTVCA9IDM3OTtcblBIUC5Db25zdGFudHMuVF9BUlJBWV9DQVNUID0gMzgwO1xuUEhQLkNvbnN0YW50cy5UX09CSkVDVF9DQVNUID0gMzgxO1xuUEhQLkNvbnN0YW50cy5UX0JPT0xfQ0FTVCA9IDM4MjtcblBIUC5Db25zdGFudHMuVF9VTlNFVF9DQVNUID0gMzgzO1xuUEhQLkNvbnN0YW50cy5UX1BPVyA9IDQwMTtcblBIUC5Db25zdGFudHMuVF9ORVcgPSAyODQ7XG5QSFAuQ29uc3RhbnRzLlRfQ0xPTkUgPSAyODU7XG5QSFAuQ29uc3RhbnRzLlRfRVhJVCA9IDI4NjtcblBIUC5Db25zdGFudHMuVF9JRiA9IDI4NztcblBIUC5Db25zdGFudHMuVF9FTFNFSUYgPSAyODg7XG5QSFAuQ29uc3RhbnRzLlRfRUxTRSA9IDI4OTtcblBIUC5Db25zdGFudHMuVF9FTkRJRiA9IDI5MDtcblBIUC5Db25zdGFudHMuVF9MTlVNQkVSID0gMjYwO1xuUEhQLkNvbnN0YW50cy5UX0ROVU1CRVIgPSAyNjE7XG5QSFAuQ29uc3RhbnRzLlRfU1RSSU5HID0gMjYyO1xuUEhQLkNvbnN0YW50cy5UX1NUUklOR19WQVJOQU1FID0gMjcwO1xuUEhQLkNvbnN0YW50cy5UX1ZBUklBQkxFID0gMjY2O1xuUEhQLkNvbnN0YW50cy5UX05VTV9TVFJJTkcgPSAyNzE7XG5QSFAuQ29uc3RhbnRzLlRfSU5MSU5FX0hUTUwgPSAyNjc7XG5QSFAuQ29uc3RhbnRzLlRfRU5DQVBTRURfQU5EX1dISVRFU1BBQ0UgPSAyNjg7XG5QSFAuQ29uc3RhbnRzLlRfQ09OU1RBTlRfRU5DQVBTRURfU1RSSU5HID0gMjY5O1xuUEhQLkNvbnN0YW50cy5UX0VDSE8gPSAyOTE7XG5QSFAuQ29uc3RhbnRzLlRfRE8gPSAyOTI7XG5QSFAuQ29uc3RhbnRzLlRfV0hJTEUgPSAyOTM7XG5QSFAuQ29uc3RhbnRzLlRfRU5EV0hJTEUgPSAyOTQ7XG5QSFAuQ29uc3RhbnRzLlRfRk9SID0gMjk1O1xuUEhQLkNvbnN0YW50cy5UX0VOREZPUiA9IDI5NjtcblBIUC5Db25zdGFudHMuVF9GT1JFQUNIID0gMjk3O1xuUEhQLkNvbnN0YW50cy5UX0VOREZPUkVBQ0ggPSAyOTg7XG5QSFAuQ29uc3RhbnRzLlRfREVDTEFSRSA9IDI5OTtcblBIUC5Db25zdGFudHMuVF9FTkRERUNMQVJFID0gMzAwO1xuUEhQLkNvbnN0YW50cy5UX0FTID0gMzAxO1xuUEhQLkNvbnN0YW50cy5UX1NXSVRDSCA9IDMwMjtcblBIUC5Db25zdGFudHMuVF9NQVRDSCA9IDMwNjtcblBIUC5Db25zdGFudHMuVF9FTkRTV0lUQ0ggPSAzMDM7XG5QSFAuQ29uc3RhbnRzLlRfQ0FTRSA9IDMwNDtcblBIUC5Db25zdGFudHMuVF9ERUZBVUxUID0gMzA1O1xuUEhQLkNvbnN0YW50cy5UX0JSRUFLID0gMzA3O1xuUEhQLkNvbnN0YW50cy5UX0NPTlRJTlVFID0gMzA4O1xuUEhQLkNvbnN0YW50cy5UX0dPVE8gPSAzMDk7XG5QSFAuQ29uc3RhbnRzLlRfRlVOQ1RJT04gPSAzMTA7XG5QSFAuQ29uc3RhbnRzLlRfRk4gPSAzMTE7XG5QSFAuQ29uc3RhbnRzLlRfQ09OU1QgPSAzMTI7XG5QSFAuQ29uc3RhbnRzLlRfUkVUVVJOID0gMzEzO1xuUEhQLkNvbnN0YW50cy5UX1RSWSA9IDMxNDtcblBIUC5Db25zdGFudHMuVF9DQVRDSCA9IDMxNTtcblBIUC5Db25zdGFudHMuVF9GSU5BTExZID0gMzE2O1xuUEhQLkNvbnN0YW50cy5UX1RIUk9XID0gMzE3O1xuUEhQLkNvbnN0YW50cy5UX1VTRSA9IDMxODtcblBIUC5Db25zdGFudHMuVF9JTlNURUFET0YgPSAzMTk7XG5QSFAuQ29uc3RhbnRzLlRfR0xPQkFMID0gMzIwO1xuUEhQLkNvbnN0YW50cy5UX1NUQVRJQyA9IDMyMTtcblBIUC5Db25zdGFudHMuVF9BQlNUUkFDVCA9IDMyMjtcblBIUC5Db25zdGFudHMuVF9GSU5BTCA9IDMyMztcblBIUC5Db25zdGFudHMuVF9QUklWQVRFID0gMzI0O1xuUEhQLkNvbnN0YW50cy5UX1BST1RFQ1RFRCA9IDMyNTtcblBIUC5Db25zdGFudHMuVF9QVUJMSUMgPSAzMjY7XG5QSFAuQ29uc3RhbnRzLlRfUkVBRE9OTFkgPSAzMjc7XG5QSFAuQ29uc3RhbnRzLlRfVkFSID0gMzI4O1xuUEhQLkNvbnN0YW50cy5UX1VOU0VUID0gMzI5O1xuUEhQLkNvbnN0YW50cy5UX0lTU0VUID0gMzMwO1xuUEhQLkNvbnN0YW50cy5UX0VNUFRZID0gMzMxO1xuUEhQLkNvbnN0YW50cy5UX0hBTFRfQ09NUElMRVIgPSAzMzI7XG5QSFAuQ29uc3RhbnRzLlRfQ0xBU1MgPSAzMzM7XG5QSFAuQ29uc3RhbnRzLlRfVFJBSVQgPSAzMzQ7XG5QSFAuQ29uc3RhbnRzLlRfSU5URVJGQUNFID0gMzM1O1xuUEhQLkNvbnN0YW50cy5UX0VOVU0gPSAzMzY7XG5QSFAuQ29uc3RhbnRzLlRfRVhURU5EUyA9IDMzNztcblBIUC5Db25zdGFudHMuVF9JTVBMRU1FTlRTID0gMzM4O1xuUEhQLkNvbnN0YW50cy5UX09CSkVDVF9PUEVSQVRPUiA9IDM4NDtcblBIUC5Db25zdGFudHMuVF9OVUxMU0FGRV9PQkpFQ1RfT1BFUkFUT1IgPSAzODU7XG5QSFAuQ29uc3RhbnRzLlRfRE9VQkxFX0FSUk9XID0gMzg2O1xuUEhQLkNvbnN0YW50cy5UX0xJU1QgPSAzNDA7XG5QSFAuQ29uc3RhbnRzLlRfQVJSQVkgPSAzNDE7XG5QSFAuQ29uc3RhbnRzLlRfQ0FMTEFCTEUgPSAzNDI7XG5QSFAuQ29uc3RhbnRzLlRfQ0xBU1NfQyA9IDM0NjtcblBIUC5Db25zdGFudHMuVF9UUkFJVF9DID0gMzQ3O1xuUEhQLkNvbnN0YW50cy5UX01FVEhPRF9DID0gMzQ4O1xuUEhQLkNvbnN0YW50cy5UX0ZVTkNfQyA9IDM0OTtcblBIUC5Db25zdGFudHMuVF9MSU5FID0gMzQzO1xuUEhQLkNvbnN0YW50cy5UX0ZJTEUgPSAzNDQ7XG5QSFAuQ29uc3RhbnRzLlRfU1RBUlRfSEVSRURPQyA9IDM5MztcblBIUC5Db25zdGFudHMuVF9FTkRfSEVSRURPQyA9IDM5NDtcblBIUC5Db25zdGFudHMuVF9ET0xMQVJfT1BFTl9DVVJMWV9CUkFDRVMgPSAzOTU7XG5QSFAuQ29uc3RhbnRzLlRfQ1VSTFlfT1BFTiA9IDM5NjtcblBIUC5Db25zdGFudHMuVF9QQUFNQVlJTV9ORUtVRE9UQVlJTSA9IDM5NztcblBIUC5Db25zdGFudHMuVF9OQU1FU1BBQ0UgPSAzMzk7XG5QSFAuQ29uc3RhbnRzLlRfTlNfQyA9IDM1MDtcblBIUC5Db25zdGFudHMuVF9ESVIgPSAzNDU7XG5QSFAuQ29uc3RhbnRzLlRfTlNfU0VQQVJBVE9SID0gMzk4O1xuUEhQLkNvbnN0YW50cy5UX0VMTElQU0lTID0gMzk5O1xuUEhQLkNvbnN0YW50cy5UX05BTUVfRlVMTFlfUVVBTElGSUVEID0gMjYzO1xuUEhQLkNvbnN0YW50cy5UX05BTUVfUVVBTElGSUVEID0gMjY1O1xuUEhQLkNvbnN0YW50cy5UX05BTUVfUkVMQVRJVkUgPSAyNjQ7XG5QSFAuQ29uc3RhbnRzLlRfQVRUUklCVVRFID0gMzUxO1xuUEhQLkNvbnN0YW50cy5UX0VOVU0gPSAzMzY7XG5QSFAuQ29uc3RhbnRzLlRfQkFEX0NIQVJBQ1RFUiA9IDQwNTtcblBIUC5Db25zdGFudHMuVF9DT01NRU5UID0gMzg3O1xuUEhQLkNvbnN0YW50cy5UX0RPQ19DT01NRU5UID0gMzg4O1xuUEhQLkNvbnN0YW50cy5UX09QRU5fVEFHID0gMzg5O1xuUEhQLkNvbnN0YW50cy5UX09QRU5fVEFHX1dJVEhfRUNITyA9IDM5MDtcblBIUC5Db25zdGFudHMuVF9DTE9TRV9UQUcgPSAzOTE7XG5QSFAuQ29uc3RhbnRzLlRfV0hJVEVTUEFDRSA9IDM5MjtcblBIUC5MZXhlciA9IGZ1bmN0aW9uKHNyYywgaW5pKSB7XG4gICAgdmFyIGhlcmVkb2MsIGhlcmVkb2NFbmRBbGxvd2VkLCBzdGF0ZVN0YWNrID0gW1xuICAgICAgICAnSU5JVElBTCdcbiAgICBdLCBzdGFja1BvcyA9IDAsIHN3YXBTdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgIHN0YXRlU3RhY2tbc3RhY2tQb3NdID0gc3RhdGU7XG4gICAgfSwgcHVzaFN0YXRlID0gZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgICAgc3RhdGVTdGFja1srK3N0YWNrUG9zXSA9IHN0YXRlO1xuICAgIH0sIHBvcFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC0tc3RhY2tQb3M7XG4gICAgfSwgc2hvcnRPcGVuVGFnID0gaW5pID09PSB1bmRlZmluZWQgfHwgL14ob258dHJ1ZXwxKSQvaS50ZXN0KGluaS5zaG9ydF9vcGVuX3RhZyksIG9wZW5UYWcgPSBzaG9ydE9wZW5UYWcgPyAvXihcXDxcXD9waHAoPzpcXHJcXG58WyBcXHRcXHJcXG5dKXw8XFw/fFxcPHNjcmlwdCBsYW5ndWFnZVxcPSgnfFwiKT9waHAoJ3xcIik/XFw+KS9pIDogL14oXFw8XFw/cGhwKD86XFxyXFxufFsgXFx0XFxyXFxuXSl8XFw8c2NyaXB0IGxhbmd1YWdlXFw9KCd8XCIpP3BocCgnfFwiKT9cXD4pL2ksIGlubGluZUh0bWwgPSBzaG9ydE9wZW5UYWcgPyAvW148XSooPzo8KD8hXFw/fHNjcmlwdCBsYW5ndWFnZVxcPSgnfFwiKT9waHAoJ3xcIik/XFw+KVtePF0qKSovaSA6IC9bXjxdKig/OjwoPyFcXD89fFxcP3BocFsgXFx0XFxyXFxuXXxzY3JpcHQgbGFuZ3VhZ2VcXD0oJ3xcIik/cGhwKCd8XCIpP1xcPilbXjxdKikqL2ksIGxhYmVsUmVnZXhQYXJ0ID0gJ1thLXpBLVpfXFxcXHg3Zi1cXFxcdWZmZmZdW2EtekEtWjAtOV9cXFxceDdmLVxcXFx1ZmZmZl0qJywgc3RyaW5nUmVnZXhQYXJ0ID0gZnVuY3Rpb24ocXVvdGUpIHtcbiAgICAgICAgLy8gTWF0Y2hlcyBub24taW50ZXJwb2xhdGVkIHBvcnRpb24gb2YgaW50ZXJwb2xhdGVkIHN0cmluZ1xuICAgICAgICByZXR1cm4gJ1teJyArIHF1b3RlICsgJ1xcXFxcXFxcJHtdKig/Oig/OlxcXFxcXFxcW1xcXFxzXFxcXFNdfFxcXFwkKD8hXFxcXHt8W2EtekEtWl9cXFxceDdmLVxcXFx1ZmZmZl0pfFxcXFx7KD8hXFxcXCQpKVteJyArIHF1b3RlICsgJ1xcXFxcXFxcJHtdKikqJztcbiAgICB9LCBzaGFyZWRTdHJpbmdUb2tlbnMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfVkFSSUFCTEUsXG4gICAgICAgICAgICByZTogbmV3IFJlZ0V4cCgnXlxcXFwkJyArIGxhYmVsUmVnZXhQYXJ0ICsgJyg/PVxcXFxbKScpLFxuICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcHVzaFN0YXRlKCdWQVJfT0ZGU0VUJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfVkFSSUFCTEUsXG4gICAgICAgICAgICByZTogbmV3IFJlZ0V4cCgnXlxcXFwkJyArIGxhYmVsUmVnZXhQYXJ0ICsgJyg/PS0+JyArIGxhYmVsUmVnZXhQYXJ0ICsgJyknKSxcbiAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHB1c2hTdGF0ZSgnTE9PS0lOR19GT1JfUFJPUEVSVFknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9ET0xMQVJfT1BFTl9DVVJMWV9CUkFDRVMsXG4gICAgICAgICAgICByZTogbmV3IFJlZ0V4cCgnXlxcXFwkXFxcXHsoPz0nICsgbGFiZWxSZWdleFBhcnQgKyAnW1xcXFxbfV0pJyksXG4gICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwdXNoU3RhdGUoJ0xPT0tJTkdfRk9SX1ZBUk5BTUUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9WQVJJQUJMRSxcbiAgICAgICAgICAgIHJlOiBuZXcgUmVnRXhwKCdeXFxcXCQnICsgbGFiZWxSZWdleFBhcnQpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRE9MTEFSX09QRU5fQ1VSTFlfQlJBQ0VTLFxuICAgICAgICAgICAgcmU6IC9eXFwkXFx7LyxcbiAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHB1c2hTdGF0ZSgnSU5fU0NSSVBUSU5HJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ1VSTFlfT1BFTixcbiAgICAgICAgICAgIHJlOiAvXlxceyg/PVxcJCkvLFxuICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcHVzaFN0YXRlKCdJTl9TQ1JJUFRJTkcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF0sIGRhdGEgPSB7XG4gICAgICAgIC8vIE91dHNpZGUgb2YgUEhQXG4gICAgICAgICdJTklUSUFMJzogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfT1BFTl9UQUdfV0lUSF9FQ0hPLFxuICAgICAgICAgICAgICAgIHJlOiAvXjxcXD89L2ksXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3YXBTdGF0ZSgnSU5fU0NSSVBUSU5HJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX09QRU5fVEFHLFxuICAgICAgICAgICAgICAgIHJlOiBvcGVuVGFnLFxuICAgICAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzd2FwU3RhdGUoJ0lOX1NDUklQVElORycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JTkxJTkVfSFRNTCxcbiAgICAgICAgICAgICAgICByZTogaW5saW5lSHRtbFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICAnSU5fU0NSSVBUSU5HJzogW1xuICAgICAgICAgICAgLy8gTWF0Y2ggd2hpdGVzcGFjZSBmaXJzdFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfV0hJVEVTUEFDRSxcbiAgICAgICAgICAgICAgICByZTogL15bIFxcblxcclxcdF0rL1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIEtleXdvcmRzLCBzb3J0ZWQgYWxwaGFiZXRpY2FsbHlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0FCU1RSQUNULFxuICAgICAgICAgICAgICAgIHJlOiAvXmFic3RyYWN0XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9MT0dJQ0FMX0FORCxcbiAgICAgICAgICAgICAgICByZTogL15hbmRcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0FSUkFZLFxuICAgICAgICAgICAgICAgIHJlOiAvXmFycmF5XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9BUyxcbiAgICAgICAgICAgICAgICByZTogL15hc1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQlJFQUssXG4gICAgICAgICAgICAgICAgcmU6IC9eYnJlYWtcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0NBTExBQkxFLFxuICAgICAgICAgICAgICAgIHJlOiAvXmNhbGxhYmxlXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9DQVNFLFxuICAgICAgICAgICAgICAgIHJlOiAvXmNhc2VcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0NBVENILFxuICAgICAgICAgICAgICAgIHJlOiAvXmNhdGNoXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9DTEFTUyxcbiAgICAgICAgICAgICAgICByZTogL15jbGFzc1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ0xPTkUsXG4gICAgICAgICAgICAgICAgcmU6IC9eY2xvbmVcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0NPTlNULFxuICAgICAgICAgICAgICAgIHJlOiAvXmNvbnN0XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9DT05USU5VRSxcbiAgICAgICAgICAgICAgICByZTogL15jb250aW51ZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfREVDTEFSRSxcbiAgICAgICAgICAgICAgICByZTogL15kZWNsYXJlXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9ERUZBVUxULFxuICAgICAgICAgICAgICAgIHJlOiAvXmRlZmF1bHRcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0RPLFxuICAgICAgICAgICAgICAgIHJlOiAvXmRvXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9FQ0hPLFxuICAgICAgICAgICAgICAgIHJlOiAvXmVjaG9cXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VMU0UsXG4gICAgICAgICAgICAgICAgcmU6IC9eZWxzZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRUxTRUlGLFxuICAgICAgICAgICAgICAgIHJlOiAvXmVsc2VpZlxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRU5VTSxcbiAgICAgICAgICAgICAgICByZTogL15lbnVtXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9FTkRERUNMQVJFLFxuICAgICAgICAgICAgICAgIHJlOiAvXmVuZGRlY2xhcmVcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VOREZPUixcbiAgICAgICAgICAgICAgICByZTogL15lbmRmb3JcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VOREZPUkVBQ0gsXG4gICAgICAgICAgICAgICAgcmU6IC9eZW5kZm9yZWFjaFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRU5ESUYsXG4gICAgICAgICAgICAgICAgcmU6IC9eZW5kaWZcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VORFNXSVRDSCxcbiAgICAgICAgICAgICAgICByZTogL15lbmRzd2l0Y2hcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VORFdISUxFLFxuICAgICAgICAgICAgICAgIHJlOiAvXmVuZHdoaWxlXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9FTlVNLFxuICAgICAgICAgICAgICAgIHJlOiAvXmVudW1cXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VNUFRZLFxuICAgICAgICAgICAgICAgIHJlOiAvXmVtcHR5XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9FVkFMLFxuICAgICAgICAgICAgICAgIHJlOiAvXmV2YWxcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VYSVQsXG4gICAgICAgICAgICAgICAgcmU6IC9eKD86ZXhpdHxkaWUpXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9FWFRFTkRTLFxuICAgICAgICAgICAgICAgIHJlOiAvXmV4dGVuZHNcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0ZJTkFMLFxuICAgICAgICAgICAgICAgIHJlOiAvXmZpbmFsXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9GSU5BTExZLFxuICAgICAgICAgICAgICAgIHJlOiAvXmZpbmFsbHlcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0ZOLFxuICAgICAgICAgICAgICAgIHJlOiAvXmZuXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9GT1IsXG4gICAgICAgICAgICAgICAgcmU6IC9eZm9yXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9GT1JFQUNILFxuICAgICAgICAgICAgICAgIHJlOiAvXmZvcmVhY2hcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0ZVTkNUSU9OLFxuICAgICAgICAgICAgICAgIHJlOiAvXmZ1bmN0aW9uXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9HTE9CQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eZ2xvYmFsXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9HT1RPLFxuICAgICAgICAgICAgICAgIHJlOiAvXmdvdG9cXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0lGLFxuICAgICAgICAgICAgICAgIHJlOiAvXmlmXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JTVBMRU1FTlRTLFxuICAgICAgICAgICAgICAgIHJlOiAvXmltcGxlbWVudHNcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0lOQ0xVREUsXG4gICAgICAgICAgICAgICAgcmU6IC9eaW5jbHVkZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfSU5DTFVERV9PTkNFLFxuICAgICAgICAgICAgICAgIHJlOiAvXmluY2x1ZGVfb25jZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfSU5TVEFOQ0VPRixcbiAgICAgICAgICAgICAgICByZTogL15pbnN0YW5jZW9mXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JTlNURUFET0YsXG4gICAgICAgICAgICAgICAgcmU6IC9eaW5zdGVhZG9mXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JTlRFUkZBQ0UsXG4gICAgICAgICAgICAgICAgcmU6IC9eaW50ZXJmYWNlXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JU1NFVCxcbiAgICAgICAgICAgICAgICByZTogL15pc3NldFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTElTVCxcbiAgICAgICAgICAgICAgICByZTogL15saXN0XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9NQVRDSCxcbiAgICAgICAgICAgICAgICByZTogL15tYXRjaFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTkVXLFxuICAgICAgICAgICAgICAgIHJlOiAvXm5ld1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTE9HSUNBTF9PUixcbiAgICAgICAgICAgICAgICByZTogL15vclxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfUFJJTlQsXG4gICAgICAgICAgICAgICAgcmU6IC9ecHJpbnRcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1BSSVZBVEUsXG4gICAgICAgICAgICAgICAgcmU6IC9ecHJpdmF0ZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfUFJPVEVDVEVELFxuICAgICAgICAgICAgICAgIHJlOiAvXnByb3RlY3RlZFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfUFVCTElDLFxuICAgICAgICAgICAgICAgIHJlOiAvXnB1YmxpY1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfUkVBRE9OTFksXG4gICAgICAgICAgICAgICAgcmU6IC9ecmVhZG9ubHlcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1JFUVVJUkUsXG4gICAgICAgICAgICAgICAgcmU6IC9ecmVxdWlyZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfUkVRVUlSRV9PTkNFLFxuICAgICAgICAgICAgICAgIHJlOiAvXnJlcXVpcmVfb25jZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfU1RBVElDLFxuICAgICAgICAgICAgICAgIHJlOiAvXnN0YXRpY1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfU1dJVENILFxuICAgICAgICAgICAgICAgIHJlOiAvXnN3aXRjaFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfVEhST1csXG4gICAgICAgICAgICAgICAgcmU6IC9edGhyb3dcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1RSQUlULFxuICAgICAgICAgICAgICAgIHJlOiAvXnRyYWl0XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9UUlksXG4gICAgICAgICAgICAgICAgcmU6IC9edHJ5XFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9VTlNFVCxcbiAgICAgICAgICAgICAgICByZTogL151bnNldFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfVVNFLFxuICAgICAgICAgICAgICAgIHJlOiAvXnVzZVxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfVkFSLFxuICAgICAgICAgICAgICAgIHJlOiAvXnZhclxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfV0hJTEUsXG4gICAgICAgICAgICAgICAgcmU6IC9ed2hpbGVcXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0xPR0lDQUxfWE9SLFxuICAgICAgICAgICAgICAgIHJlOiAvXnhvclxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfWUlFTERfRlJPTSxcbiAgICAgICAgICAgICAgICByZTogL155aWVsZFxccytmcm9tXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9ZSUVMRCxcbiAgICAgICAgICAgICAgICByZTogL155aWVsZFxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfUkVUVVJOLFxuICAgICAgICAgICAgICAgIHJlOiAvXnJldHVyblxcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTUVUSE9EX0MsXG4gICAgICAgICAgICAgICAgcmU6IC9eX19NRVRIT0RfX1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTElORSxcbiAgICAgICAgICAgICAgICByZTogL15fX0xJTkVfX1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRklMRSxcbiAgICAgICAgICAgICAgICByZTogL15fX0ZJTEVfX1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRlVOQ19DLFxuICAgICAgICAgICAgICAgIHJlOiAvXl9fRlVOQ1RJT05fX1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTlNfQyxcbiAgICAgICAgICAgICAgICByZTogL15fX05BTUVTUEFDRV9fXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9UUkFJVF9DLFxuICAgICAgICAgICAgICAgIHJlOiAvXl9fVFJBSVRfX1xcYi9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRElSLFxuICAgICAgICAgICAgICAgIHJlOiAvXl9fRElSX19cXGIvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0NMQVNTX0MsXG4gICAgICAgICAgICAgICAgcmU6IC9eX19DTEFTU19fXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBPdGhlciB0b2tlbnNcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0FORF9FUVVBTCxcbiAgICAgICAgICAgICAgICByZTogL14mPS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9BUlJBWV9DQVNULFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcKFsgXFx0XSphcnJheVsgXFx0XSpcXCkvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0JPT0xfQ0FTVCxcbiAgICAgICAgICAgICAgICByZTogL15cXChbIFxcdF0qKD86Ym9vbHxib29sZWFuKVsgXFx0XSpcXCkvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0RPVUJMRV9DQVNULFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcKFsgXFx0XSooPzpyZWFsfGZsb2F0fGRvdWJsZSlbIFxcdF0qXFwpL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JTlRfQ0FTVCxcbiAgICAgICAgICAgICAgICByZTogL15cXChbIFxcdF0qKD86aW50fGludGVnZXIpWyBcXHRdKlxcKS9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfT0JKRUNUX0NBU1QsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwoWyBcXHRdKm9iamVjdFsgXFx0XSpcXCkvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1NUUklOR19DQVNULFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcKFsgXFx0XSooPzpiaW5hcnl8c3RyaW5nKVsgXFx0XSpcXCkvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1VOU0VUX0NBU1QsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwoWyBcXHRdKnVuc2V0WyBcXHRdKlxcKS9pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQk9PTEVBTl9BTkQsXG4gICAgICAgICAgICAgICAgcmU6IC9eJiYvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQU1QRVJTQU5EX0ZPTExPV0VEX0JZX1ZBUl9PUl9WQVJBUkcsXG4gICAgICAgICAgICAgICAgcmU6IC9eJig/PVskXSkvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQU1QRVJTQU5EX05PVF9GT0xMT1dFRF9CWV9WQVJfT1JfVkFSQVJHLFxuICAgICAgICAgICAgICAgIHJlOiAvXigmKSg/PVteXFwkfF4mXSkvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQk9PTEVBTl9PUixcbiAgICAgICAgICAgICAgICByZTogL15cXHxcXHwvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ0xPU0VfVEFHLFxuICAgICAgICAgICAgICAgIHJlOiAvXig/OlxcPz58PFxcL3NjcmlwdD4pKFxcclxcbnxcXHJ8XFxuKT8vaSxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhcFN0YXRlKCdJTklUSUFMJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0RPVUJMRV9BUlJPVyxcbiAgICAgICAgICAgICAgICByZTogL149Pi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9QQUFNQVlJTV9ORUtVRE9UQVlJTSxcbiAgICAgICAgICAgICAgICByZTogL146Oi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JTkMsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwrXFwrL1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0RFQyxcbiAgICAgICAgICAgICAgICByZTogL14tLS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9DT05DQVRfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwuPS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9ESVZfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwvPS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9YT1JfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFxePS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9NVUxfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwqPS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9NT0RfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eJT0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfU0xfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9ePDw9L1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1NUQVJUX0hFUkVET0MsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ15bYkJdPzw8PFsgXFxcXHRdKlxcJygnICsgbGFiZWxSZWdleFBhcnQgKyAnKVxcJyg/OlxcXFxyXFxcXG58XFxcXHJ8XFxcXG4pJyksXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIGhlcmVkb2MgPSByZXN1bHRbMV07XG4gICAgICAgICAgICAgICAgICAgIHN3YXBTdGF0ZSgnTk9XRE9DJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1NUQVJUX0hFUkVET0MsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ15bYkJdPzw8PFsgXFxcXHRdKihcIj8pKCcgKyBsYWJlbFJlZ2V4UGFydCArICcpXFxcXDEoPzpcXFxcclxcXFxufFxcXFxyfFxcXFxuKScpLFxuICAgICAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBoZXJlZG9jID0gcmVzdWx0WzJdO1xuICAgICAgICAgICAgICAgICAgICBoZXJlZG9jRW5kQWxsb3dlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHN3YXBTdGF0ZSgnSEVSRURPQycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9TTCxcbiAgICAgICAgICAgICAgICByZTogL148PC9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9TUEFDRVNISVAsXG4gICAgICAgICAgICAgICAgcmU6IC9ePD0+L1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0lTX1NNQUxMRVJfT1JfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9ePD0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfU1JfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9ePj49L1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1NSLFxuICAgICAgICAgICAgICAgIHJlOiAvXj4+L1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0lTX0dSRUFURVJfT1JfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9ePj0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfT1JfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFx8PS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9QTFVTX0VRVUFMLFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcKz0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTUlOVVNfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eLT0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfT0JKRUNUX09QRVJBVE9SLFxuICAgICAgICAgICAgICAgIHJlOiBuZXcgUmVnRXhwKCdeLT4oPz1bIFxcblxcclxcdF0qJyArIGxhYmVsUmVnZXhQYXJ0ICsgJyknKSxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaFN0YXRlKCdMT09LSU5HX0ZPUl9QUk9QRVJUWScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9PQkpFQ1RfT1BFUkFUT1IsXG4gICAgICAgICAgICAgICAgcmU6IC9eLT4vaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VMTElQU0lTLFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcLlxcLlxcLi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9QT1dfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwqXFwqPS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9QT1csXG4gICAgICAgICAgICAgICAgcmU6IC9eXFwqXFwqL1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0NPQUxFU0NFX0VRVUFMLFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcP1xcPz0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ09BTEVTQ0UsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFw/XFw/L1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX05VTExTQUZFX09CSkVDVF9PUEVSQVRPUixcbiAgICAgICAgICAgICAgICByZTogL15cXD8tPi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9OQU1FX0ZVTExZX1FVQUxJRklFRCxcbiAgICAgICAgICAgICAgICByZTogL15cXFxcXFx3Kyg/OlxcXFxcXHcrKSovXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTkFNRV9RVUFMSUZJRUQsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFx3K1xcXFxcXHcrKD86XFxcXFxcdyspKi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9OQU1FX1JFTEFUSVZFLFxuICAgICAgICAgICAgICAgIHJlOiAvXm5hbWVzcGFjZVxcXFxcXHcrKD86XFxcXFxcdyspKi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9OQU1FU1BBQ0UsXG4gICAgICAgICAgICAgICAgcmU6IC9ebmFtZXNwYWNlXFxiL2lcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9BVFRSSUJVVEUsXG4gICAgICAgICAgICAgICAgcmU6IC9eI1xcWyhbXFxTXFxzXSo/KV0vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ09NTUVOVCxcbiAgICAgICAgICAgICAgICByZTogL15cXC9cXCooW1xcU1xcc10qPykoPzpcXCpcXC98JCkvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ09NTUVOVCxcbiAgICAgICAgICAgICAgICByZTogL14oPzpcXC9cXC98IylbXlxcclxcbj9dKig/OlxcPyg/IT4pW15cXHJcXG4/XSopKig/OlxcclxcbnxcXHJ8XFxuKT8vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfSVNfSURFTlRJQ0FMLFxuICAgICAgICAgICAgICAgIHJlOiAvXj09PS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JU19FUVVBTCxcbiAgICAgICAgICAgICAgICByZTogL149PS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JU19OT1RfSURFTlRJQ0FMLFxuICAgICAgICAgICAgICAgIHJlOiAvXiE9PS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9JU19OT1RfRVFVQUwsXG4gICAgICAgICAgICAgICAgcmU6IC9eKCE9fDw+KS9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9ETlVNQkVSLFxuICAgICAgICAgICAgICAgIHJlOiAvXig/OlswLTldK1xcLlswLTldKnxcXC5bMC05XSspKD86W2VFXVsrLV0/WzAtOV0rKT8vXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRE5VTUJFUixcbiAgICAgICAgICAgICAgICByZTogL15bMC05XStbZUVdWystXT9bMC05XSsvXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTE5VTUJFUixcbiAgICAgICAgICAgICAgICByZTogL14oPzoweFswLTlBLUZdK3wwYlswMV0rfFswLTldKykvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1ZBUklBQkxFLFxuICAgICAgICAgICAgICAgIHJlOiBuZXcgUmVnRXhwKCdeXFxcXCQnICsgbGFiZWxSZWdleFBhcnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfQ09OU1RBTlRfRU5DQVBTRURfU1RSSU5HLFxuICAgICAgICAgICAgICAgIHJlOiAvXltiQl0/J1teJ1xcXFxdKig/OlxcXFxbXFxzXFxTXVteJ1xcXFxdKikqJy9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9DT05TVEFOVF9FTkNBUFNFRF9TVFJJTkcsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ15bYkJdP1wiJyArIHN0cmluZ1JlZ2V4UGFydCgnXCInKSArICdcIicpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAtMSxcbiAgICAgICAgICAgICAgICByZTogL15bYkJdP1wiLyxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhcFN0YXRlKCdET1VCTEVfUVVPVEVTJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogLTEsXG4gICAgICAgICAgICAgICAgcmU6IC9eYC8sXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3YXBTdGF0ZSgnQkFDS1RJQ0tTJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX05TX1NFUEFSQVRPUixcbiAgICAgICAgICAgICAgICByZTogL15cXFxcL1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1NUUklORyxcbiAgICAgICAgICAgICAgICByZTogL15bYS16QS1aX1xceDdmLVxcdWZmZmZdW2EtekEtWjAtOV9cXHg3Zi1cXHVmZmZmXSovXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAtMSxcbiAgICAgICAgICAgICAgICByZTogL15cXHsvLFxuICAgICAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwdXNoU3RhdGUoJ0lOX1NDUklQVElORycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IC0xLFxuICAgICAgICAgICAgICAgIHJlOiAvXlxcfS8sXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFja1BvcyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAtMSxcbiAgICAgICAgICAgICAgICByZTogL15bXFxbXFxdOzo/KCkhLiw+PD0rLS8qfCZAXiVcIickfl0vXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgICdET1VCTEVfUVVPVEVTJzogc2hhcmVkU3RyaW5nVG9rZW5zLmNvbmNhdChbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IC0xLFxuICAgICAgICAgICAgICAgIHJlOiAvXlwiLyxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhcFN0YXRlKCdJTl9TQ1JJUFRJTkcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRU5DQVBTRURfQU5EX1dISVRFU1BBQ0UsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ14nICsgc3RyaW5nUmVnZXhQYXJ0KCdcIicpKVxuICAgICAgICAgICAgfVxuICAgICAgICBdKSxcbiAgICAgICAgJ0JBQ0tUSUNLUyc6IHNoYXJlZFN0cmluZ1Rva2Vucy5jb25jYXQoW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAtMSxcbiAgICAgICAgICAgICAgICByZTogL15gLyxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhcFN0YXRlKCdJTl9TQ1JJUFRJTkcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRU5DQVBTRURfQU5EX1dISVRFU1BBQ0UsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ14nICsgc3RyaW5nUmVnZXhQYXJ0KCdgJykpXG4gICAgICAgICAgICB9XG4gICAgICAgIF0pLFxuICAgICAgICAnVkFSX09GRlNFVCc6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogLTEsXG4gICAgICAgICAgICAgICAgcmU6IC9eXFxdLyxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wU3RhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfTlVNX1NUUklORyxcbiAgICAgICAgICAgICAgICByZTogL14oPzoweFswLTlBLUZdK3wwYlswMV0rfFswLTldKykvaVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX1ZBUklBQkxFLFxuICAgICAgICAgICAgICAgIHJlOiBuZXcgUmVnRXhwKCdeXFxcXCQnICsgbGFiZWxSZWdleFBhcnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfU1RSSU5HLFxuICAgICAgICAgICAgICAgIHJlOiBuZXcgUmVnRXhwKCdeJyArIGxhYmVsUmVnZXhQYXJ0KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogLTEsXG4gICAgICAgICAgICAgICAgcmU6IC9eWzs6LC5cXFsoKXxeJistLyo9JSF+JDw+P0B7fVwiYF0vXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgICdMT09LSU5HX0ZPUl9QUk9QRVJUWSc6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX09CSkVDVF9PUEVSQVRPUixcbiAgICAgICAgICAgICAgICByZTogL14tPi9cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9TVFJJTkcsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ14nICsgbGFiZWxSZWdleFBhcnQpLFxuICAgICAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBwb3BTdGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IFBIUC5Db25zdGFudHMuVF9XSElURVNQQUNFLFxuICAgICAgICAgICAgICAgIHJlOiAvXlsgXFxuXFxyXFx0XSsvXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgICdMT09LSU5HX0ZPUl9WQVJOQU1FJzogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfU1RSSU5HX1ZBUk5BTUUsXG4gICAgICAgICAgICAgICAgcmU6IG5ldyBSZWdFeHAoJ14nICsgbGFiZWxSZWdleFBhcnQgKyAnKD89W1xcXFxbfV0pJyksXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3YXBTdGF0ZSgnSU5fU0NSSVBUSU5HJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICAnTk9XRE9DJzogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRU5EX0hFUkVET0MsXG4gICAgICAgICAgICAgICAgbWF0Y2hGdW5jOiBmdW5jdGlvbihzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cCgnXicgKyBoZXJlZG9jICsgJyg/PTs/W1xcXFxyXFxcXG5dKScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3JjLm1hdGNoKHJlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmMuc3Vic3RyKDAsIGhlcmVkb2MubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dhcFN0YXRlKCdJTl9TQ1JJUFRJTkcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBQSFAuQ29uc3RhbnRzLlRfRU5DQVBTRURfQU5EX1dISVRFU1BBQ0UsXG4gICAgICAgICAgICAgICAgbWF0Y2hGdW5jOiBmdW5jdGlvbihzcmMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cCgnW1xcXFxyXFxcXG5dJyArIGhlcmVkb2MgKyAnKD89Oz9bXFxcXHJcXFxcbl0pJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSByZS5leGVjKHNyYyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmQgPSByZXN1bHQgPyByZXN1bHQuaW5kZXggKyAxIDogc3JjLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYy5zdWJzdHJpbmcoMCwgZW5kKVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgJ0hFUkVET0MnOiBzaGFyZWRTdHJpbmdUb2tlbnMuY29uY2F0KFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VORF9IRVJFRE9DLFxuICAgICAgICAgICAgICAgIG1hdGNoRnVuYzogZnVuY3Rpb24oc3JjKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaGVyZWRvY0VuZEFsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciByZSA9IG5ldyBSZWdFeHAoJ14nICsgaGVyZWRvYyArICcoPz07P1tcXFxcclxcXFxuXSknKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNyYy5tYXRjaChyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjLnN1YnN0cigwLCBoZXJlZG9jLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3YXBTdGF0ZSgnSU5fU0NSSVBUSU5HJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogUEhQLkNvbnN0YW50cy5UX0VOQ0FQU0VEX0FORF9XSElURVNQQUNFLFxuICAgICAgICAgICAgICAgIG1hdGNoRnVuYzogZnVuY3Rpb24oc3JjKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmQgPSBzcmMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAvLyBGaW5kIG5leHQgaW50ZXJwb2xhdGlvblxuICAgICAgICAgICAgICAgICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKCdeJyArIHN0cmluZ1JlZ2V4UGFydCgnJykpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcmUuZXhlYyhzcmMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSByZXN1bHRbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgaGVyZWRvYyBlbmRcbiAgICAgICAgICAgICAgICAgICAgcmUgPSBuZXcgUmVnRXhwKCcoW1xcXFxyXFxcXG5dKScgKyBoZXJlZG9jICsgJyg/PTs/W1xcXFxyXFxcXG5dKScpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZS5leGVjKHNyYy5zdWJzdHJpbmcoMCwgZW5kKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IHJlc3VsdC5pbmRleCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZXJlZG9jRW5kQWxsb3dlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZXJlZG9jRW5kQWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmQgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNyYy5zdWJzdHJpbmcoMCwgZW5kKVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSlcbiAgICB9O1xuICAgIHZhciByZXN1bHRzID0gW10sIGxpbmUgPSAxLCBjYW5jZWwgPSB0cnVlO1xuICAgIGlmIChzcmMgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc3JjICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHNyYyA9IHNyYy50b1N0cmluZygpO1xuICAgIH1cbiAgICB3aGlsZShzcmMubGVuZ3RoID4gMCAmJiBjYW5jZWwgPT09IHRydWUpe1xuICAgICAgICB2YXIgc3RhdGUgPSBzdGF0ZVN0YWNrW3N0YWNrUG9zXTtcbiAgICAgICAgdmFyIHRva2VucyA9IGRhdGFbc3RhdGVdO1xuICAgICAgICBjYW5jZWwgPSB0b2tlbnMuc29tZShmdW5jdGlvbih0b2tlbikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRva2VuLm1hdGNoRnVuYyAhPT0gdW5kZWZpbmVkID8gdG9rZW4ubWF0Y2hGdW5jKHNyYykgOiBzcmMubWF0Y2godG9rZW4ucmUpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRbMF0ubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRXJyb3IgaW4gdGhlIGxleGVyIGRlZmluaXRpb24sIHByZXZlbnQgaW5maW5pdGUgbG9vcFxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlbXB0eSBtYXRjaFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLmZ1bmMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbi5mdW5jKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0b2tlbi52YWx1ZSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhcmFjdGVyIHRva2VuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHRbMF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRTdHJpbmcgPSByZXN1bHRbMF07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChbXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUludCh0b2tlbi52YWx1ZSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgbGluZSArPSByZXN1bHRTdHJpbmcuc3BsaXQoJ1xcbicpLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcocmVzdWx0WzBdLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbn07XG4vKlxuXHQgKiBAYXV0aG9yIE5pa2xhcyB2b24gSGVydHplbiA8bmlrbGFzIGF0IGhlcnR6ZW4uY29tPlxuXHQgKiBAY3JlYXRlZCAxNS42LjIwMTJcblx0ICogQHdlYnNpdGUgaHR0cDovL2hlcnR6ZW4uY29tXG5cdCAqLyAvKlxuXHQgKiBUaGUgc2tlbGV0b24gZm9yIHRoaXMgcGFyc2VyIHdhcyB3cml0dGVuIGJ5IE1vcml5b3NoaSBLb2l6dW1pIGFuZCBpcyBiYXNlZCBvblxuXHQgKiB0aGUgd29yayBieSBNYXNhdG8gQml0byBhbmQgaXMgaW4gdGhlIFBVQkxJQyBET01BSU4uXG5cdCAqIFBvcnRlZCB0byBKYXZhU2NyaXB0IGJ5IE5pa2xhcyB2b24gSGVydHplblxuXHQgKi8gUEhQLlBhcnNlciA9IGZ1bmN0aW9uKHByZXByb2Nlc3NlZFRva2VucywgZXZhbHVhdGUpIHtcbiAgICB2YXIgeXliYXNlID0gdGhpcy55eWJhc2UsIHl5ZGVmYXVsdCA9IHRoaXMueXlkZWZhdWx0LCB5eWNoZWNrID0gdGhpcy55eWNoZWNrLCB5eWFjdGlvbiA9IHRoaXMueXlhY3Rpb24sIHl5bGVuID0gdGhpcy55eWxlbiwgeXlnYmFzZSA9IHRoaXMueXlnYmFzZSwgeXlnY2hlY2sgPSB0aGlzLnl5Z2NoZWNrLCB5eXAgPSB0aGlzLnl5cCwgeXlnb3RvID0gdGhpcy55eWdvdG8sIHl5bGhzID0gdGhpcy55eWxocywgdGVybWluYWxzID0gdGhpcy50ZXJtaW5hbHMsIHRyYW5zbGF0ZSA9IHRoaXMudHJhbnNsYXRlLCB5eWdkZWZhdWx0ID0gdGhpcy55eWdkZWZhdWx0O1xuICAgIHRoaXMucG9zID0gLTE7XG4gICAgdGhpcy5saW5lID0gMTtcbiAgICB0aGlzLnRva2VuTWFwID0gdGhpcy5jcmVhdGVUb2tlbk1hcCgpO1xuICAgIHRoaXMuZHJvcFRva2VucyA9IHt9O1xuICAgIHRoaXMuZHJvcFRva2Vuc1tQSFAuQ29uc3RhbnRzLlRfV0hJVEVTUEFDRV0gPSAxO1xuICAgIHRoaXMuZHJvcFRva2Vuc1tQSFAuQ29uc3RhbnRzLlRfT1BFTl9UQUddID0gMTtcbiAgICB2YXIgdG9rZW5zID0gW107XG4gICAgLy8gcHJlLXByb2Nlc3NcbiAgICBwcmVwcm9jZXNzZWRUb2tlbnMuZm9yRWFjaChmdW5jdGlvbih0b2tlbiwgaW5kZXgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gXCJvYmplY3RcIiAmJiB0b2tlblswXSA9PT0gUEhQLkNvbnN0YW50cy5UX09QRU5fVEFHX1dJVEhfRUNITykge1xuICAgICAgICAgICAgdG9rZW5zLnB1c2goW1xuICAgICAgICAgICAgICAgIFBIUC5Db25zdGFudHMuVF9PUEVOX1RBRyxcbiAgICAgICAgICAgICAgICB0b2tlblsxXSxcbiAgICAgICAgICAgICAgICB0b2tlblsyXVxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB0b2tlbnMucHVzaChbXG4gICAgICAgICAgICAgICAgUEhQLkNvbnN0YW50cy5UX0VDSE8sXG4gICAgICAgICAgICAgICAgdG9rZW5bMV0sXG4gICAgICAgICAgICAgICAgdG9rZW5bMl1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy50b2tlbnMgPSB0b2tlbnM7XG4gICAgLy8gV2Ugc3RhcnQgb2ZmIHdpdGggbm8gbG9va2FoZWFkLXRva2VuXG4gICAgdmFyIHRva2VuSWQgPSB0aGlzLlRPS0VOX05PTkU7XG4gICAgLy8gVGhlIGF0dHJpYnV0ZXMgZm9yIGEgbm9kZSBhcmUgdGFrZW4gZnJvbSB0aGUgZmlyc3QgYW5kIGxhc3QgdG9rZW4gb2YgdGhlIG5vZGUuXG4gICAgLy8gRnJvbSB0aGUgZmlyc3QgdG9rZW4gb25seSB0aGUgc3RhcnRBdHRyaWJ1dGVzIGFyZSB0YWtlbiBhbmQgZnJvbSB0aGUgbGFzdCBvbmx5XG4gICAgLy8gdGhlIGVuZEF0dHJpYnV0ZXMuIEJvdGggYXJlIG1lcmdlZCB1c2luZyB0aGUgYXJyYXkgdW5pb24gb3BlcmF0b3IgKCspLlxuICAgIHRoaXMuc3RhcnRBdHRyaWJ1dGVzID0ge1xuICAgICAgICAnc3RhcnRMaW5lJzogMVxuICAgIH07XG4gICAgdGhpcy5lbmRBdHRyaWJ1dGVzID0ge307XG4gICAgLy8gSW4gb3JkZXIgdG8gZmlndXJlIG91dCB0aGUgYXR0cmlidXRlcyBmb3IgdGhlIHN0YXJ0aW5nIHRva2VuLCB3ZSBoYXZlIHRvIGtlZXBcbiAgICAvLyB0aGVtIGluIGEgc3RhY2tcbiAgICB2YXIgYXR0cmlidXRlU3RhY2sgPSBbXG4gICAgICAgIHRoaXMuc3RhcnRBdHRyaWJ1dGVzXG4gICAgXTtcbiAgICAvLyBTdGFydCBvZmYgaW4gdGhlIGluaXRpYWwgc3RhdGUgYW5kIGtlZXAgYSBzdGFjayBvZiBwcmV2aW91cyBzdGF0ZXNcbiAgICB2YXIgc3RhdGUgPSAwO1xuICAgIHZhciBzdGF0ZVN0YWNrID0gW1xuICAgICAgICBzdGF0ZVxuICAgIF07XG4gICAgLy8gQVNUIHN0YWNrXG4gICAgdGhpcy55eWFzdGsgPSBbXTtcbiAgICAvLyBDdXJyZW50IHBvc2l0aW9uIGluIHRoZSBzdGFjayhzKVxuICAgIHRoaXMuc3RhY2tQb3MgPSAwO1xuICAgIHZhciB5eW47XG4gICAgdmFyIG9yaWdUb2tlbklkO1xuICAgIGZvcig7Oyl7XG4gICAgICAgIGlmICh5eWJhc2Vbc3RhdGVdID09PSAwKSB7XG4gICAgICAgICAgICB5eW4gPSB5eWRlZmF1bHRbc3RhdGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRva2VuSWQgPT09IHRoaXMuVE9LRU5fTk9ORSkge1xuICAgICAgICAgICAgICAgIC8vIGZldGNoIHRoZSBuZXh0IHRva2VuIGlkIGZyb20gdGhlIGxleGVyIGFuZCBmZXRjaCBhZGRpdGlvbmFsIGluZm8gYnktcmVmXG4gICAgICAgICAgICAgICAgb3JpZ1Rva2VuSWQgPSB0aGlzLmdldE5leHRUb2tlbigpO1xuICAgICAgICAgICAgICAgIC8vIG1hcCB0aGUgbGV4ZXIgdG9rZW4gaWQgdG8gdGhlIGludGVybmFsbHkgdXNlZCB0b2tlbiBpZCdzXG4gICAgICAgICAgICAgICAgdG9rZW5JZCA9IG9yaWdUb2tlbklkID49IDAgJiYgb3JpZ1Rva2VuSWQgPCB0aGlzLlRPS0VOX01BUF9TSVpFID8gdHJhbnNsYXRlW29yaWdUb2tlbklkXSA6IHRoaXMuVE9LRU5fSU5WQUxJRDtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVTdGFja1t0aGlzLnN0YWNrUG9zXSA9IHRoaXMuc3RhcnRBdHRyaWJ1dGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCgoeXluID0geXliYXNlW3N0YXRlXSArIHRva2VuSWQpID49IDAgJiYgeXluIDwgdGhpcy5ZWUxBU1QgJiYgeXljaGVja1t5eW5dID09PSB0b2tlbklkIHx8IHN0YXRlIDwgdGhpcy5ZWTJUQkxTVEFURSAmJiAoeXluID0geXliYXNlW3N0YXRlICsgdGhpcy5ZWU5MU1RBVEVTXSArIHRva2VuSWQpID49IDAgJiYgeXluIDwgdGhpcy5ZWUxBU1QgJiYgeXljaGVja1t5eW5dID09PSB0b2tlbklkKSAmJiAoeXluID0geXlhY3Rpb25beXluXSkgIT09IHRoaXMuWVlERUZBVUxUKSB7XG4gICAgICAgICAgICAgICAgLypcblx0XHRcdFx0XHQgKiA+PSBZWU5MU1RBVEU6IHNoaWZ0IGFuZCByZWR1Y2Vcblx0XHRcdFx0XHQgKiA+IDA6IHNoaWZ0XG5cdFx0XHRcdFx0ICogPSAwOiBhY2NlcHRcblx0XHRcdFx0XHQgKiA8IDA6IHJlZHVjZVxuXHRcdFx0XHRcdCAqID0gLVlZVU5FWFBFQ1RFRDogZXJyb3Jcblx0XHRcdFx0XHQgKi8gaWYgKHl5biA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLyogc2hpZnQgKi8gKyt0aGlzLnN0YWNrUG9zO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZVN0YWNrW3RoaXMuc3RhY2tQb3NdID0gc3RhdGUgPSB5eW47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueXlhc3RrW3RoaXMuc3RhY2tQb3NdID0gdGhpcy50b2tlblZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVTdGFja1t0aGlzLnN0YWNrUG9zXSA9IHRoaXMuc3RhcnRBdHRyaWJ1dGVzO1xuICAgICAgICAgICAgICAgICAgICB0b2tlbklkID0gdGhpcy5UT0tFTl9OT05FO1xuICAgICAgICAgICAgICAgICAgICBpZiAoeXluIDwgdGhpcy5ZWU5MU1RBVEVTKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgLyogJHl5biA+PSBZWU5MU1RBVEVTIG1lYW5zIHNoaWZ0LWFuZC1yZWR1Y2UgKi8geXluIC09IHRoaXMuWVlOTFNUQVRFUztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB5eW4gPSAteXluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeXluID0geXlkZWZhdWx0W3N0YXRlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IoOzspe1xuICAgICAgICAgICAgLyogcmVkdWNlL2Vycm9yICovIGlmICh5eW4gPT09IDApIHtcbiAgICAgICAgICAgICAgICAvKiBhY2NlcHQgKi8gcmV0dXJuIHRoaXMueXl2YWw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHl5biAhPT0gdGhpcy5ZWVVORVhQRUNURUQpIHtcbiAgICAgICAgICAgICAgICAvKiByZWR1Y2UgKi8gZm9yKHZhciBhdHRyIGluIHRoaXMuZW5kQXR0cmlidXRlcyl7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZVN0YWNrW3RoaXMuc3RhY2tQb3MgLSB5eWxlblt5eW5dXVthdHRyXSA9IHRoaXMuZW5kQXR0cmlidXRlc1thdHRyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gV2UgZG8gbm90IGJ1aWxkIGFuIEFTVCFcbiAgICAgICAgICAgICAgICAvLyB0aGlzWyd5eW4nICsgeXluXShhdHRyaWJ1dGVTdGFja1sgdGhpcy5zdGFja1BvcyAtIHl5bGVuWyB5eW4gXSBdKTtcbiAgICAgICAgICAgICAgICAvKiBHb3RvIC0gc2hpZnQgbm9udGVybWluYWwgKi8gdGhpcy5zdGFja1BvcyAtPSB5eWxlblt5eW5dO1xuICAgICAgICAgICAgICAgIHl5biA9IHl5bGhzW3l5bl07XG4gICAgICAgICAgICAgICAgaWYgKCh5eXAgPSB5eWdiYXNlW3l5bl0gKyBzdGF0ZVN0YWNrW3RoaXMuc3RhY2tQb3NdKSA+PSAwICYmIHl5cCA8IHRoaXMuWVlHTEFTVCAmJiB5eWdjaGVja1t5eXBdID09PSB5eW4pIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB5eWdvdG9beXlwXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHl5Z2RlZmF1bHRbeXluXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKyt0aGlzLnN0YWNrUG9zO1xuICAgICAgICAgICAgICAgIHN0YXRlU3RhY2tbdGhpcy5zdGFja1Bvc10gPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnl5YXN0a1t0aGlzLnN0YWNrUG9zXSA9IHRoaXMueXl2YWw7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlU3RhY2tbdGhpcy5zdGFja1Bvc10gPSB0aGlzLnN0YXJ0QXR0cmlidXRlcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLyogZXJyb3IgKi8gaWYgKGV2YWx1YXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBleHBlY3RlZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5UT0tFTl9NQVBfU0laRTsgKytpKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoeXluID0geXliYXNlW3N0YXRlXSArIGkpID49IDAgJiYgeXluIDwgdGhpcy5ZWUxBU1QgJiYgeXljaGVja1t5eW5dID09IGkgfHwgc3RhdGUgPCB0aGlzLllZMlRCTFNUQVRFICYmICh5eW4gPSB5eWJhc2Vbc3RhdGUgKyB0aGlzLllZTkxTVEFURVNdICsgaSkgJiYgeXluIDwgdGhpcy5ZWUxBU1QgJiYgeXljaGVja1t5eW5dID09IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeXlhY3Rpb25beXluXSAhPSB0aGlzLllZVU5FWFBFQ1RFRCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhwZWN0ZWQubGVuZ3RoID09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFRvbyBtYW55IGV4cGVjdGVkIHRva2VucyAqLyBleHBlY3RlZCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQucHVzaCh0aGlzLnRlcm1pbmFsc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBleHBlY3RlZFN0cmluZyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXhwZWN0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZFN0cmluZyA9ICcsIGV4cGVjdGluZyAnICsgZXhwZWN0ZWQuam9pbignIG9yICcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBQSFAuUGFyc2VFcnJvcignc3ludGF4IGVycm9yLCB1bmV4cGVjdGVkICcgKyB0ZXJtaW5hbHNbdG9rZW5JZF0gKyBleHBlY3RlZFN0cmluZywgdGhpcy5zdGFydEF0dHJpYnV0ZXNbJ3N0YXJ0TGluZSddKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydEF0dHJpYnV0ZXNbJ3N0YXJ0TGluZSddO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZSA8IHRoaXMuWVlOTFNUQVRFUykgYnJlYWs7XG4gICAgICAgICAgICAvKiA+PSBZWU5MU1RBVEVTIG1lYW5zIHNoaWZ0LWFuZC1yZWR1Y2UgKi8geXluID0gc3RhdGUgLSB0aGlzLllZTkxTVEFURVM7XG4gICAgICAgIH1cbiAgICB9XG59O1xuUEhQLlBhcnNlRXJyb3IgPSBmdW5jdGlvbihtc2csIGxpbmUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtc2c7XG4gICAgdGhpcy5saW5lID0gbGluZTtcbn07XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5nZXROZXh0VG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0YXJ0QXR0cmlidXRlcyA9IHt9O1xuICAgIHRoaXMuZW5kQXR0cmlidXRlcyA9IHt9O1xuICAgIHZhciB0b2tlbiwgdG1wO1xuICAgIHdoaWxlKHRoaXMudG9rZW5zWysrdGhpcy5wb3NdICE9PSB1bmRlZmluZWQpe1xuICAgICAgICB0b2tlbiA9IHRoaXMudG9rZW5zW3RoaXMucG9zXTtcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhpcy5zdGFydEF0dHJpYnV0ZXNbJ3N0YXJ0TGluZSddID0gdGhpcy5saW5lO1xuICAgICAgICAgICAgdGhpcy5lbmRBdHRyaWJ1dGVzWydlbmRMaW5lJ10gPSB0aGlzLmxpbmU7XG4gICAgICAgICAgICAvLyBidWcgaW4gdG9rZW5fZ2V0X2FsbFxuICAgICAgICAgICAgaWYgKCdiXCInID09PSB0b2tlbikge1xuICAgICAgICAgICAgICAgIHRoaXMudG9rZW5WYWx1ZSA9ICdiXCInO1xuICAgICAgICAgICAgICAgIHJldHVybiAnXCInLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudG9rZW5WYWx1ZSA9IHRva2VuO1xuICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5saW5lICs9ICh0bXAgPSB0b2tlblsxXS5tYXRjaCgvXFxuL2cpKSA9PT0gbnVsbCA/IDAgOiB0bXAubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKFBIUC5Db25zdGFudHMuVF9DT01NRU5UID09PSB0b2tlblswXSkge1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnN0YXJ0QXR0cmlidXRlc1snY29tbWVudHMnXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydEF0dHJpYnV0ZXNbJ2NvbW1lbnRzJ10gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydEF0dHJpYnV0ZXNbJ2NvbW1lbnRzJ10ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY29tbWVudFwiLFxuICAgICAgICAgICAgICAgICAgICBjb21tZW50OiB0b2tlblsxXSxcbiAgICAgICAgICAgICAgICAgICAgbGluZTogdG9rZW5bMl1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoUEhQLkNvbnN0YW50cy5UX0FUVFJJQlVURSA9PT0gdG9rZW5bMF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuVmFsdWUgPSB0b2tlblsxXTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0QXR0cmlidXRlc1snc3RhcnRMaW5lJ10gPSB0b2tlblsyXTtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZEF0dHJpYnV0ZXNbJ2VuZExpbmUnXSA9IHRoaXMubGluZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoUEhQLkNvbnN0YW50cy5UX0RPQ19DT01NRU5UID09PSB0b2tlblswXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRBdHRyaWJ1dGVzWydjb21tZW50cyddLnB1c2gobmV3IFBIUFBhcnNlcl9Db21tZW50X0RvYyh0b2tlblsxXSwgdG9rZW5bMl0pKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kcm9wVG9rZW5zW3Rva2VuWzBdXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2tlblZhbHVlID0gdG9rZW5bMV07XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydEF0dHJpYnV0ZXNbJ3N0YXJ0TGluZSddID0gdG9rZW5bMl07XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRBdHRyaWJ1dGVzWydlbmRMaW5lJ10gPSB0aGlzLmxpbmU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9rZW5NYXBbdG9rZW5bMF1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuc3RhcnRBdHRyaWJ1dGVzWydzdGFydExpbmUnXSA9IHRoaXMubGluZTtcbiAgICAvLyAwIGlzIHRoZSBFT0YgdG9rZW5cbiAgICByZXR1cm4gMDtcbn07XG5QSFAuUGFyc2VyLnByb3RvdHlwZS50b2tlbk5hbWUgPSBmdW5jdGlvbih0b2tlbikge1xuICAgIHZhciBjb25zdGFudHMgPSBbXG4gICAgICAgIFwiVF9USFJPV1wiLFxuICAgICAgICBcIlRfSU5DTFVERVwiLFxuICAgICAgICBcIlRfSU5DTFVERV9PTkNFXCIsXG4gICAgICAgIFwiVF9FVkFMXCIsXG4gICAgICAgIFwiVF9SRVFVSVJFXCIsXG4gICAgICAgIFwiVF9SRVFVSVJFX09OQ0VcIixcbiAgICAgICAgXCJUX0xPR0lDQUxfT1JcIixcbiAgICAgICAgXCJUX0xPR0lDQUxfWE9SXCIsXG4gICAgICAgIFwiVF9MT0dJQ0FMX0FORFwiLFxuICAgICAgICBcIlRfUFJJTlRcIixcbiAgICAgICAgXCJUX1lJRUxEXCIsXG4gICAgICAgIFwiVF9ET1VCTEVfQVJST1dcIixcbiAgICAgICAgXCJUX1lJRUxEX0ZST01cIixcbiAgICAgICAgXCJUX1BMVVNfRVFVQUxcIixcbiAgICAgICAgXCJUX01JTlVTX0VRVUFMXCIsXG4gICAgICAgIFwiVF9NVUxfRVFVQUxcIixcbiAgICAgICAgXCJUX0RJVl9FUVVBTFwiLFxuICAgICAgICBcIlRfQ09OQ0FUX0VRVUFMXCIsXG4gICAgICAgIFwiVF9NT0RfRVFVQUxcIixcbiAgICAgICAgXCJUX0FORF9FUVVBTFwiLFxuICAgICAgICBcIlRfT1JfRVFVQUxcIixcbiAgICAgICAgXCJUX1hPUl9FUVVBTFwiLFxuICAgICAgICBcIlRfU0xfRVFVQUxcIixcbiAgICAgICAgXCJUX1NSX0VRVUFMXCIsXG4gICAgICAgIFwiVF9QT1dfRVFVQUxcIixcbiAgICAgICAgXCJUX0NPQUxFU0NFX0VRVUFMXCIsXG4gICAgICAgIFwiVF9DT0FMRVNDRVwiLFxuICAgICAgICBcIlRfQk9PTEVBTl9PUlwiLFxuICAgICAgICBcIlRfQk9PTEVBTl9BTkRcIixcbiAgICAgICAgXCJUX0FNUEVSU0FORF9OT1RfRk9MTE9XRURfQllfVkFSX09SX1ZBUkFSR1wiLFxuICAgICAgICBcIlRfQU1QRVJTQU5EX0ZPTExPV0VEX0JZX1ZBUl9PUl9WQVJBUkdcIixcbiAgICAgICAgXCJUX0lTX0VRVUFMXCIsXG4gICAgICAgIFwiVF9JU19OT1RfRVFVQUxcIixcbiAgICAgICAgXCJUX0lTX0lERU5USUNBTFwiLFxuICAgICAgICBcIlRfSVNfTk9UX0lERU5USUNBTFwiLFxuICAgICAgICBcIlRfU1BBQ0VTSElQXCIsXG4gICAgICAgIFwiVF9JU19TTUFMTEVSX09SX0VRVUFMXCIsXG4gICAgICAgIFwiVF9JU19HUkVBVEVSX09SX0VRVUFMXCIsXG4gICAgICAgIFwiVF9TTFwiLFxuICAgICAgICBcIlRfU1JcIixcbiAgICAgICAgXCJUX0lOU1RBTkNFT0ZcIixcbiAgICAgICAgXCJUX0lOQ1wiLFxuICAgICAgICBcIlRfREVDXCIsXG4gICAgICAgIFwiVF9JTlRfQ0FTVFwiLFxuICAgICAgICBcIlRfRE9VQkxFX0NBU1RcIixcbiAgICAgICAgXCJUX1NUUklOR19DQVNUXCIsXG4gICAgICAgIFwiVF9BUlJBWV9DQVNUXCIsXG4gICAgICAgIFwiVF9PQkpFQ1RfQ0FTVFwiLFxuICAgICAgICBcIlRfQk9PTF9DQVNUXCIsXG4gICAgICAgIFwiVF9VTlNFVF9DQVNUXCIsXG4gICAgICAgIFwiVF9QT1dcIixcbiAgICAgICAgXCJUX05FV1wiLFxuICAgICAgICBcIlRfQ0xPTkVcIixcbiAgICAgICAgXCJUX0VYSVRcIixcbiAgICAgICAgXCJUX0lGXCIsXG4gICAgICAgIFwiVF9FTFNFSUZcIixcbiAgICAgICAgXCJUX0VMU0VcIixcbiAgICAgICAgXCJUX0VORElGXCIsXG4gICAgICAgIFwiVF9MTlVNQkVSXCIsXG4gICAgICAgIFwiVF9ETlVNQkVSXCIsXG4gICAgICAgIFwiVF9TVFJJTkdcIixcbiAgICAgICAgXCJUX1NUUklOR19WQVJOQU1FXCIsXG4gICAgICAgIFwiVF9WQVJJQUJMRVwiLFxuICAgICAgICBcIlRfTlVNX1NUUklOR1wiLFxuICAgICAgICBcIlRfSU5MSU5FX0hUTUxcIixcbiAgICAgICAgXCJUX0VOQ0FQU0VEX0FORF9XSElURVNQQUNFXCIsXG4gICAgICAgIFwiVF9DT05TVEFOVF9FTkNBUFNFRF9TVFJJTkdcIixcbiAgICAgICAgXCJUX0VDSE9cIixcbiAgICAgICAgXCJUX0RPXCIsXG4gICAgICAgIFwiVF9XSElMRVwiLFxuICAgICAgICBcIlRfRU5EV0hJTEVcIixcbiAgICAgICAgXCJUX0ZPUlwiLFxuICAgICAgICBcIlRfRU5ERk9SXCIsXG4gICAgICAgIFwiVF9GT1JFQUNIXCIsXG4gICAgICAgIFwiVF9FTkRGT1JFQUNIXCIsXG4gICAgICAgIFwiVF9ERUNMQVJFXCIsXG4gICAgICAgIFwiVF9FTkRERUNMQVJFXCIsXG4gICAgICAgIFwiVF9BU1wiLFxuICAgICAgICBcIlRfU1dJVENIXCIsXG4gICAgICAgIFwiVF9NQVRDSFwiLFxuICAgICAgICBcIlRfRU5EU1dJVENIXCIsXG4gICAgICAgIFwiVF9DQVNFXCIsXG4gICAgICAgIFwiVF9ERUZBVUxUXCIsXG4gICAgICAgIFwiVF9CUkVBS1wiLFxuICAgICAgICBcIlRfQ09OVElOVUVcIixcbiAgICAgICAgXCJUX0dPVE9cIixcbiAgICAgICAgXCJUX0ZVTkNUSU9OXCIsXG4gICAgICAgIFwiVF9GTlwiLFxuICAgICAgICBcIlRfQ09OU1RcIixcbiAgICAgICAgXCJUX1JFVFVSTlwiLFxuICAgICAgICBcIlRfVFJZXCIsXG4gICAgICAgIFwiVF9DQVRDSFwiLFxuICAgICAgICBcIlRfRklOQUxMWVwiLFxuICAgICAgICBcIlRfVEhST1dcIixcbiAgICAgICAgXCJUX1VTRVwiLFxuICAgICAgICBcIlRfSU5TVEVBRE9GXCIsXG4gICAgICAgIFwiVF9HTE9CQUxcIixcbiAgICAgICAgXCJUX1NUQVRJQ1wiLFxuICAgICAgICBcIlRfQUJTVFJBQ1RcIixcbiAgICAgICAgXCJUX0ZJTkFMXCIsXG4gICAgICAgIFwiVF9QUklWQVRFXCIsXG4gICAgICAgIFwiVF9QUk9URUNURURcIixcbiAgICAgICAgXCJUX1BVQkxJQ1wiLFxuICAgICAgICBcIlRfUkVBRE9OTFlcIixcbiAgICAgICAgXCJUX1ZBUlwiLFxuICAgICAgICBcIlRfVU5TRVRcIixcbiAgICAgICAgXCJUX0lTU0VUXCIsXG4gICAgICAgIFwiVF9FTVBUWVwiLFxuICAgICAgICBcIlRfSEFMVF9DT01QSUxFUlwiLFxuICAgICAgICBcIlRfQ0xBU1NcIixcbiAgICAgICAgXCJUX1RSQUlUXCIsXG4gICAgICAgIFwiVF9JTlRFUkZBQ0VcIixcbiAgICAgICAgXCJUX0VOVU1cIixcbiAgICAgICAgXCJUX0VYVEVORFNcIixcbiAgICAgICAgXCJUX0lNUExFTUVOVFNcIixcbiAgICAgICAgXCJUX09CSkVDVF9PUEVSQVRPUlwiLFxuICAgICAgICBcIlRfTlVMTFNBRkVfT0JKRUNUX09QRVJBVE9SXCIsXG4gICAgICAgIFwiVF9ET1VCTEVfQVJST1dcIixcbiAgICAgICAgXCJUX0xJU1RcIixcbiAgICAgICAgXCJUX0FSUkFZXCIsXG4gICAgICAgIFwiVF9DQUxMQUJMRVwiLFxuICAgICAgICBcIlRfQ0xBU1NfQ1wiLFxuICAgICAgICBcIlRfVFJBSVRfQ1wiLFxuICAgICAgICBcIlRfTUVUSE9EX0NcIixcbiAgICAgICAgXCJUX0ZVTkNfQ1wiLFxuICAgICAgICBcIlRfTElORVwiLFxuICAgICAgICBcIlRfRklMRVwiLFxuICAgICAgICBcIlRfU1RBUlRfSEVSRURPQ1wiLFxuICAgICAgICBcIlRfRU5EX0hFUkVET0NcIixcbiAgICAgICAgXCJUX0RPTExBUl9PUEVOX0NVUkxZX0JSQUNFU1wiLFxuICAgICAgICBcIlRfQ1VSTFlfT1BFTlwiLFxuICAgICAgICBcIlRfUEFBTUFZSU1fTkVLVURPVEFZSU1cIixcbiAgICAgICAgXCJUX05BTUVTUEFDRVwiLFxuICAgICAgICBcIlRfTlNfQ1wiLFxuICAgICAgICBcIlRfRElSXCIsXG4gICAgICAgIFwiVF9OU19TRVBBUkFUT1JcIixcbiAgICAgICAgXCJUX0VMTElQU0lTXCIsXG4gICAgICAgIFwiVF9OQU1FX0ZVTExZX1FVQUxJRklFRFwiLFxuICAgICAgICBcIlRfTkFNRV9RVUFMSUZJRURcIixcbiAgICAgICAgXCJUX05BTUVfUkVMQVRJVkVcIixcbiAgICAgICAgXCJUX0FUVFJJQlVURVwiLFxuICAgICAgICBcIlRfRU5VTVwiLFxuICAgICAgICBcIlRfQkFEX0NIQVJBQ1RFUlwiLFxuICAgICAgICBcIlRfQ09NTUVOVFwiLFxuICAgICAgICBcIlRfRE9DX0NPTU1FTlRcIixcbiAgICAgICAgXCJUX09QRU5fVEFHXCIsXG4gICAgICAgIFwiVF9PUEVOX1RBR19XSVRIX0VDSE9cIixcbiAgICAgICAgXCJUX0NMT1NFX1RBR1wiLFxuICAgICAgICBcIlRfV0hJVEVTUEFDRVwiXG4gICAgXTtcbiAgICB2YXIgY3VycmVudCA9IFwiVU5LTk9XTlwiO1xuICAgIGNvbnN0YW50cy5zb21lKGZ1bmN0aW9uKGNvbnN0YW50KSB7XG4gICAgICAgIGlmIChQSFAuQ29uc3RhbnRzW2NvbnN0YW50XSA9PT0gdG9rZW4pIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjb25zdGFudDtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG59O1xuLyoqXG4gKiBDcmVhdGVzIHRoZSB0b2tlbiBtYXAuXG4gKlxuICogVGhlIHRva2VuIG1hcCBtYXBzIHRoZSBQSFAgaW50ZXJuYWwgdG9rZW4gaWRlbnRpZmllcnNcbiAqIHRvIHRoZSBpZGVudGlmaWVycyB1c2VkIGJ5IHRoZSBQSFAuUGFyc2VyLiBBZGRpdGlvbmFsbHkgaXRcbiAqIG1hcHMgVF9PUEVOX1RBR19XSVRIX0VDSE8gdG8gVF9FQ0hPIGFuZCBUX0NMT1NFX1RBRyB0byAnOycuXG4gKlxuICogQHJldHVybiBhcnJheSBUaGUgdG9rZW4gbWFwXG4gKi8gUEhQLlBhcnNlci5wcm90b3R5cGUuY3JlYXRlVG9rZW5NYXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdG9rZW5NYXAgPSB7fSwgbmFtZSwgaTtcbiAgICAvLyAyNTYgaXMgdGhlIG1pbmltdW0gcG9zc2libGUgdG9rZW4gbnVtYmVyLCBhcyBldmVyeXRoaW5nIGJlbG93XG4gICAgLy8gaXQgaXMgYW4gQVNDSUkgdmFsdWVcbiAgICBmb3IoaSA9IDI1NjsgaSA8IDEwMDA7ICsraSl7XG4gICAgICAgIC8vIFRfT1BFTl9UQUdfV0lUSF9FQ0hPIHdpdGggZHJvcHBlZCBUX09QRU5fVEFHIHJlc3VsdHMgaW4gVF9FQ0hPXG4gICAgICAgIGlmIChQSFAuQ29uc3RhbnRzLlRfT1BFTl9UQUdfV0lUSF9FQ0hPID09PSBpKSB7XG4gICAgICAgICAgICB0b2tlbk1hcFtpXSA9IFBIUC5Db25zdGFudHMuVF9FQ0hPO1xuICAgICAgICAvLyBUX0NMT1NFX1RBRyBpcyBlcXVpdmFsZW50IHRvICc7J1xuICAgICAgICB9IGVsc2UgaWYgKFBIUC5Db25zdGFudHMuVF9DTE9TRV9UQUcgPT09IGkpIHtcbiAgICAgICAgICAgIHRva2VuTWFwW2ldID0gNTk7XG4gICAgICAgIC8vIGFuZCB0aGUgb3RoZXJzIGNhbiBiZSBtYXBwZWQgZGlyZWN0bHlcbiAgICAgICAgfSBlbHNlIGlmICgnVU5LTk9XTicgIT09IChuYW1lID0gdGhpcy50b2tlbk5hbWUoaSkpKSB7XG4gICAgICAgICAgICB0b2tlbk1hcFtpXSA9IHRoaXNbbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRva2VuTWFwO1xufTtcbi8qIFRoaXMgaXMgYW4gYXV0b21hdGljYWxseSBHRU5FUkFURUQgZmlsZSwgd2hpY2ggc2hvdWxkIG5vdCBiZSBtYW51YWxseSBlZGl0ZWQuXG5cdCAqIEluc3RlYWQgZWRpdCBvbmUgb2YgdGhlIGZvbGxvd2luZzpcblx0ICogICogdGhlIGdyYW1tYXIgZmlsZSBncmFtbWFyL3plbmRfbGFuZ3VhZ2VfcGFyc2VyLmpzeVxuXHQgKiAgKiB0aGUgcGFyc2VyIHNrZWxldG9uIGdyYW1tYXIva3ltYWNjLmpzLnBhcnNlclxuXHQgKiAgKiB0aGUgcHJlcHJvY2Vzc2luZyBzY3JpcHQgZ3JhbW1hci9yZWJ1aWxkUGFyc2VyLnBocFxuXHQgKlxuXHQgKiBUaGUgc2tlbGV0b24gZm9yIHRoaXMgcGFyc2VyIHdhcyB3cml0dGVuIGJ5IE1vcml5b3NoaSBLb2l6dW1pIGFuZCBpcyBiYXNlZCBvblxuXHQgKiB0aGUgd29yayBieSBNYXNhdG8gQml0byBhbmQgaXMgaW4gdGhlIFBVQkxJQyBET01BSU4uXG5cdCAqIFBvcnRlZCB0byBKYXZhU2NyaXB0IGJ5IE5pa2xhcyB2b24gSGVydHplblxuXHQgKi8gUEhQLlBhcnNlci5wcm90b3R5cGUuVE9LRU5fTk9ORSA9IC0xO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVE9LRU5fSU5WQUxJRCA9IDE3NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRPS0VOX01BUF9TSVpFID0gNDAzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuWVlMQVNUID0gMTE5NjtcblBIUC5QYXJzZXIucHJvdG90eXBlLllZMlRCTFNUQVRFID0gNDIwO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuWVlHTEFTVCA9IDU0NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLllZTkxTVEFURVMgPSA3MTA7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5ZWVVORVhQRUNURUQgPSAzMjc2NztcblBIUC5QYXJzZXIucHJvdG90eXBlLllZREVGQVVMVCA9IC0zMjc2Njtcbi8vIHt7eyBUb2tlbnNcblBIUC5QYXJzZXIucHJvdG90eXBlLllZRVJSVE9LID0gMjU2O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9USFJPVyA9IDI1NztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfSU5DTFVERSA9IDI1ODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfSU5DTFVERV9PTkNFID0gMjU5O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9FVkFMID0gMjYwO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9SRVFVSVJFID0gMjYxO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9SRVFVSVJFX09OQ0UgPSAyNjI7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0xPR0lDQUxfT1IgPSAyNjM7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0xPR0lDQUxfWE9SID0gMjY0O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9MT0dJQ0FMX0FORCA9IDI2NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfUFJJTlQgPSAyNjY7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1lJRUxEID0gMjY3O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9ET1VCTEVfQVJST1cgPSAyNjg7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1lJRUxEX0ZST00gPSAyNjk7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1BMVVNfRVFVQUwgPSAyNzA7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX01JTlVTX0VRVUFMID0gMjcxO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9NVUxfRVFVQUwgPSAyNzI7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0RJVl9FUVVBTCA9IDI3MztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ09OQ0FUX0VRVUFMID0gMjc0O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9NT0RfRVFVQUwgPSAyNzU7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0FORF9FUVVBTCA9IDI3NjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfT1JfRVFVQUwgPSAyNzc7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1hPUl9FUVVBTCA9IDI3ODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfU0xfRVFVQUwgPSAyNzk7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1NSX0VRVUFMID0gMjgwO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9QT1dfRVFVQUwgPSAyODE7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0NPQUxFU0NFX0VRVUFMID0gMjgyO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9DT0FMRVNDRSA9IDI4MztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQk9PTEVBTl9PUiA9IDI4NDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQk9PTEVBTl9BTkQgPSAyODU7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0FNUEVSU0FORF9OT1RfRk9MTE9XRURfQllfVkFSX09SX1ZBUkFSRyA9IDI4NjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQU1QRVJTQU5EX0ZPTExPV0VEX0JZX1ZBUl9PUl9WQVJBUkcgPSAyODc7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0lTX0VRVUFMID0gMjg4O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9JU19OT1RfRVFVQUwgPSAyODk7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0lTX0lERU5USUNBTCA9IDI5MDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfSVNfTk9UX0lERU5USUNBTCA9IDI5MTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfU1BBQ0VTSElQID0gMjkyO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9JU19TTUFMTEVSX09SX0VRVUFMID0gMjkzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9JU19HUkVBVEVSX09SX0VRVUFMID0gMjk0O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9TTCA9IDI5NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfU1IgPSAyOTY7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0lOU1RBTkNFT0YgPSAyOTc7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0lOQyA9IDI5ODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfREVDID0gMjk5O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9JTlRfQ0FTVCA9IDMwMDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRE9VQkxFX0NBU1QgPSAzMDE7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1NUUklOR19DQVNUID0gMzAyO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9BUlJBWV9DQVNUID0gMzAzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9PQkpFQ1RfQ0FTVCA9IDMwNDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQk9PTF9DQVNUID0gMzA1O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9VTlNFVF9DQVNUID0gMzA2O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9QT1cgPSAzMDc7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX05FVyA9IDMwODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ0xPTkUgPSAzMDk7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VYSVQgPSAzMTA7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0lGID0gMzExO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9FTFNFSUYgPSAzMTI7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VMU0UgPSAzMTM7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VORElGID0gMzE0O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9MTlVNQkVSID0gMzE1O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9ETlVNQkVSID0gMzE2O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9TVFJJTkcgPSAzMTc7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1NUUklOR19WQVJOQU1FID0gMzE4O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9WQVJJQUJMRSA9IDMxOTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfTlVNX1NUUklORyA9IDMyMDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfSU5MSU5FX0hUTUwgPSAzMjE7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VOQ0FQU0VEX0FORF9XSElURVNQQUNFID0gMzIyO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9DT05TVEFOVF9FTkNBUFNFRF9TVFJJTkcgPSAzMjM7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VDSE8gPSAzMjQ7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0RPID0gMzI1O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9XSElMRSA9IDMyNjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRU5EV0hJTEUgPSAzMjc7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0ZPUiA9IDMyODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRU5ERk9SID0gMzI5O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9GT1JFQUNIID0gMzMwO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9FTkRGT1JFQUNIID0gMzMxO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9ERUNMQVJFID0gMzMyO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9FTkRERUNMQVJFID0gMzMzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9BUyA9IDMzNDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfU1dJVENIID0gMzM1O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9NQVRDSCA9IDMzNjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRU5EU1dJVENIID0gMzM3O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9DQVNFID0gMzM4O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9ERUZBVUxUID0gMzM5O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9CUkVBSyA9IDM0MDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ09OVElOVUUgPSAzNDE7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0dPVE8gPSAzNDI7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0ZVTkNUSU9OID0gMzQzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9GTiA9IDM0NDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ09OU1QgPSAzNDU7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1JFVFVSTiA9IDM0NjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfVFJZID0gMzQ3O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9DQVRDSCA9IDM0ODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRklOQUxMWSA9IDM0OTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfVVNFID0gMzUwO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9JTlNURUFET0YgPSAzNTE7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0dMT0JBTCA9IDM1MjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfU1RBVElDID0gMzUzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9BQlNUUkFDVCA9IDM1NDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRklOQUwgPSAzNTU7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1BSSVZBVEUgPSAzNTY7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX1BST1RFQ1RFRCA9IDM1NztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfUFVCTElDID0gMzU4O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9SRUFET05MWSA9IDM1OTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfVkFSID0gMzYwO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9VTlNFVCA9IDM2MTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfSVNTRVQgPSAzNjI7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VNUFRZID0gMzYzO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9IQUxUX0NPTVBJTEVSID0gMzY0O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9DTEFTUyA9IDM2NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfVFJBSVQgPSAzNjY7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0lOVEVSRkFDRSA9IDM2NztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRU5VTSA9IDM2ODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRVhURU5EUyA9IDM2OTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfSU1QTEVNRU5UUyA9IDM3MDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfT0JKRUNUX09QRVJBVE9SID0gMzcxO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9OVUxMU0FGRV9PQkpFQ1RfT1BFUkFUT1IgPSAzNzI7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0xJU1QgPSAzNzM7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0FSUkFZID0gMzc0O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9DQUxMQUJMRSA9IDM3NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ0xBU1NfQyA9IDM3NjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfVFJBSVRfQyA9IDM3NztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfTUVUSE9EX0MgPSAzNzg7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0ZVTkNfQyA9IDM3OTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfTElORSA9IDM4MDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRklMRSA9IDM4MTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfU1RBUlRfSEVSRURPQyA9IDM4MjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRU5EX0hFUkVET0MgPSAzODM7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0RPTExBUl9PUEVOX0NVUkxZX0JSQUNFUyA9IDM4NDtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ1VSTFlfT1BFTiA9IDM4NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfUEFBTUFZSU1fTkVLVURPVEFZSU0gPSAzODY7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX05BTUVTUEFDRSA9IDM4NztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfTlNfQyA9IDM4ODtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRElSID0gMzg5O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9OU19TRVBBUkFUT1IgPSAzOTA7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0VMTElQU0lTID0gMzkxO1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9OQU1FX0ZVTExZX1FVQUxJRklFRCA9IDM5MjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfTkFNRV9RVUFMSUZJRUQgPSAzOTM7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX05BTUVfUkVMQVRJVkUgPSAzOTQ7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0FUVFJJQlVURSA9IDM5NTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQkFEX0NIQVJBQ1RFUiA9IDM5NjtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfQ09NTUVOVCA9IDM5NztcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfRE9DX0NPTU1FTlQgPSAzOTg7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX09QRU5fVEFHID0gMzk5O1xuUEhQLlBhcnNlci5wcm90b3R5cGUuVF9PUEVOX1RBR19XSVRIX0VDSE8gPSA0MDA7XG5QSFAuUGFyc2VyLnByb3RvdHlwZS5UX0NMT1NFX1RBRyA9IDQwMTtcblBIUC5QYXJzZXIucHJvdG90eXBlLlRfV0hJVEVTUEFDRSA9IDQwMjtcbi8vIH19fVxuLyogQHZhciBhcnJheSBNYXAgb2YgdG9rZW4gaWRzIHRvIHRoZWlyIHJlc3BlY3RpdmUgbmFtZXMgKi8gUEhQLlBhcnNlci5wcm90b3R5cGUudGVybWluYWxzID0gW1xuICAgIFwiRU9GXCIsXG4gICAgXCJlcnJvclwiLFxuICAgIFwiVF9USFJPV1wiLFxuICAgIFwiVF9JTkNMVURFXCIsXG4gICAgXCJUX0lOQ0xVREVfT05DRVwiLFxuICAgIFwiVF9FVkFMXCIsXG4gICAgXCJUX1JFUVVJUkVcIixcbiAgICBcIlRfUkVRVUlSRV9PTkNFXCIsXG4gICAgXCInLCdcIixcbiAgICBcIlRfTE9HSUNBTF9PUlwiLFxuICAgIFwiVF9MT0dJQ0FMX1hPUlwiLFxuICAgIFwiVF9MT0dJQ0FMX0FORFwiLFxuICAgIFwiVF9QUklOVFwiLFxuICAgIFwiVF9ZSUVMRFwiLFxuICAgIFwiVF9ET1VCTEVfQVJST1dcIixcbiAgICBcIlRfWUlFTERfRlJPTVwiLFxuICAgIFwiJz0nXCIsXG4gICAgXCJUX1BMVVNfRVFVQUxcIixcbiAgICBcIlRfTUlOVVNfRVFVQUxcIixcbiAgICBcIlRfTVVMX0VRVUFMXCIsXG4gICAgXCJUX0RJVl9FUVVBTFwiLFxuICAgIFwiVF9DT05DQVRfRVFVQUxcIixcbiAgICBcIlRfTU9EX0VRVUFMXCIsXG4gICAgXCJUX0FORF9FUVVBTFwiLFxuICAgIFwiVF9PUl9FUVVBTFwiLFxuICAgIFwiVF9YT1JfRVFVQUxcIixcbiAgICBcIlRfU0xfRVFVQUxcIixcbiAgICBcIlRfU1JfRVFVQUxcIixcbiAgICBcIlRfUE9XX0VRVUFMXCIsXG4gICAgXCJUX0NPQUxFU0NFX0VRVUFMXCIsXG4gICAgXCInPydcIixcbiAgICBcIic6J1wiLFxuICAgIFwiVF9DT0FMRVNDRVwiLFxuICAgIFwiVF9CT09MRUFOX09SXCIsXG4gICAgXCJUX0JPT0xFQU5fQU5EXCIsXG4gICAgXCInfCdcIixcbiAgICBcIideJ1wiLFxuICAgIFwiVF9BTVBFUlNBTkRfTk9UX0ZPTExPV0VEX0JZX1ZBUl9PUl9WQVJBUkdcIixcbiAgICBcIlRfQU1QRVJTQU5EX0ZPTExPV0VEX0JZX1ZBUl9PUl9WQVJBUkdcIixcbiAgICBcIlRfSVNfRVFVQUxcIixcbiAgICBcIlRfSVNfTk9UX0VRVUFMXCIsXG4gICAgXCJUX0lTX0lERU5USUNBTFwiLFxuICAgIFwiVF9JU19OT1RfSURFTlRJQ0FMXCIsXG4gICAgXCJUX1NQQUNFU0hJUFwiLFxuICAgIFwiJzwnXCIsXG4gICAgXCJUX0lTX1NNQUxMRVJfT1JfRVFVQUxcIixcbiAgICBcIic+J1wiLFxuICAgIFwiVF9JU19HUkVBVEVSX09SX0VRVUFMXCIsXG4gICAgXCJUX1NMXCIsXG4gICAgXCJUX1NSXCIsXG4gICAgXCInKydcIixcbiAgICBcIictJ1wiLFxuICAgIFwiJy4nXCIsXG4gICAgXCInKidcIixcbiAgICBcIicvJ1wiLFxuICAgIFwiJyUnXCIsXG4gICAgXCInISdcIixcbiAgICBcIlRfSU5TVEFOQ0VPRlwiLFxuICAgIFwiJ34nXCIsXG4gICAgXCJUX0lOQ1wiLFxuICAgIFwiVF9ERUNcIixcbiAgICBcIlRfSU5UX0NBU1RcIixcbiAgICBcIlRfRE9VQkxFX0NBU1RcIixcbiAgICBcIlRfU1RSSU5HX0NBU1RcIixcbiAgICBcIlRfQVJSQVlfQ0FTVFwiLFxuICAgIFwiVF9PQkpFQ1RfQ0FTVFwiLFxuICAgIFwiVF9CT09MX0NBU1RcIixcbiAgICBcIlRfVU5TRVRfQ0FTVFwiLFxuICAgIFwiJ0AnXCIsXG4gICAgXCJUX1BPV1wiLFxuICAgIFwiJ1snXCIsXG4gICAgXCJUX05FV1wiLFxuICAgIFwiVF9DTE9ORVwiLFxuICAgIFwiVF9FWElUXCIsXG4gICAgXCJUX0lGXCIsXG4gICAgXCJUX0VMU0VJRlwiLFxuICAgIFwiVF9FTFNFXCIsXG4gICAgXCJUX0VORElGXCIsXG4gICAgXCJUX0xOVU1CRVJcIixcbiAgICBcIlRfRE5VTUJFUlwiLFxuICAgIFwiVF9TVFJJTkdcIixcbiAgICBcIlRfU1RSSU5HX1ZBUk5BTUVcIixcbiAgICBcIlRfVkFSSUFCTEVcIixcbiAgICBcIlRfTlVNX1NUUklOR1wiLFxuICAgIFwiVF9JTkxJTkVfSFRNTFwiLFxuICAgIFwiVF9FTkNBUFNFRF9BTkRfV0hJVEVTUEFDRVwiLFxuICAgIFwiVF9DT05TVEFOVF9FTkNBUFNFRF9TVFJJTkdcIixcbiAgICBcIlRfRUNIT1wiLFxuICAgIFwiVF9ET1wiLFxuICAgIFwiVF9XSElMRVwiLFxuICAgIFwiVF9FTkRXSElMRVwiLFxuICAgIFwiVF9GT1JcIixcbiAgICBcIlRfRU5ERk9SXCIsXG4gICAgXCJUX0ZPUkVBQ0hcIixcbiAgICBcIlRfRU5ERk9SRUFDSFwiLFxuICAgIFwiVF9ERUNMQVJFXCIsXG4gICAgXCJUX0VORERFQ0xBUkVcIixcbiAgICBcIlRfQVNcIixcbiAgICBcIlRfU1dJVENIXCIsXG4gICAgXCJUX01BVENIXCIsXG4gICAgXCJUX0VORFNXSVRDSFwiLFxuICAgIFwiVF9DQVNFXCIsXG4gICAgXCJUX0RFRkFVTFRcIixcbiAgICBcIlRfQlJFQUtcIixcbiAgICBcIlRfQ09OVElOVUVcIixcbiAgICBcIlRfR09UT1wiLFxuICAgIFwiVF9GVU5DVElPTlwiLFxuICAgIFwiVF9GTlwiLFxuICAgIFwiVF9DT05TVFwiLFxuICAgIFwiVF9SRVRVUk5cIixcbiAgICBcIlRfVFJZXCIsXG4gICAgXCJUX0NBVENIXCIsXG4gICAgXCJUX0ZJTkFMTFlcIixcbiAgICBcIlRfVVNFXCIsXG4gICAgXCJUX0lOU1RFQURPRlwiLFxuICAgIFwiVF9HTE9CQUxcIixcbiAgICBcIlRfU1RBVElDXCIsXG4gICAgXCJUX0FCU1RSQUNUXCIsXG4gICAgXCJUX0ZJTkFMXCIsXG4gICAgXCJUX1BSSVZBVEVcIixcbiAgICBcIlRfUFJPVEVDVEVEXCIsXG4gICAgXCJUX1BVQkxJQ1wiLFxuICAgIFwiVF9SRUFET05MWVwiLFxuICAgIFwiVF9WQVJcIixcbiAgICBcIlRfVU5TRVRcIixcbiAgICBcIlRfSVNTRVRcIixcbiAgICBcIlRfRU1QVFlcIixcbiAgICBcIlRfSEFMVF9DT01QSUxFUlwiLFxuICAgIFwiVF9DTEFTU1wiLFxuICAgIFwiVF9UUkFJVFwiLFxuICAgIFwiVF9JTlRFUkZBQ0VcIixcbiAgICBcIlRfRU5VTVwiLFxuICAgIFwiVF9FWFRFTkRTXCIsXG4gICAgXCJUX0lNUExFTUVOVFNcIixcbiAgICBcIlRfT0JKRUNUX09QRVJBVE9SXCIsXG4gICAgXCJUX05VTExTQUZFX09CSkVDVF9PUEVSQVRPUlwiLFxuICAgIFwiVF9MSVNUXCIsXG4gICAgXCJUX0FSUkFZXCIsXG4gICAgXCJUX0NBTExBQkxFXCIsXG4gICAgXCJUX0NMQVNTX0NcIixcbiAgICBcIlRfVFJBSVRfQ1wiLFxuICAgIFwiVF9NRVRIT0RfQ1wiLFxuICAgIFwiVF9GVU5DX0NcIixcbiAgICBcIlRfTElORVwiLFxuICAgIFwiVF9GSUxFXCIsXG4gICAgXCJUX1NUQVJUX0hFUkVET0NcIixcbiAgICBcIlRfRU5EX0hFUkVET0NcIixcbiAgICBcIlRfRE9MTEFSX09QRU5fQ1VSTFlfQlJBQ0VTXCIsXG4gICAgXCJUX0NVUkxZX09QRU5cIixcbiAgICBcIlRfUEFBTUFZSU1fTkVLVURPVEFZSU1cIixcbiAgICBcIlRfTkFNRVNQQUNFXCIsXG4gICAgXCJUX05TX0NcIixcbiAgICBcIlRfRElSXCIsXG4gICAgXCJUX05TX1NFUEFSQVRPUlwiLFxuICAgIFwiVF9FTExJUFNJU1wiLFxuICAgIFwiVF9OQU1FX0ZVTExZX1FVQUxJRklFRFwiLFxuICAgIFwiVF9OQU1FX1FVQUxJRklFRFwiLFxuICAgIFwiVF9OQU1FX1JFTEFUSVZFXCIsXG4gICAgXCJUX0FUVFJJQlVURVwiLFxuICAgIFwiJzsnXCIsXG4gICAgXCInXSdcIixcbiAgICBcIid7J1wiLFxuICAgIFwiJ30nXCIsXG4gICAgXCInKCdcIixcbiAgICBcIicpJ1wiLFxuICAgIFwiJ2AnXCIsXG4gICAgXCInXFxcIidcIixcbiAgICBcIickJ1wiLFxuICAgIFwiVF9CQURfQ0hBUkFDVEVSXCIsXG4gICAgXCJUX0NPTU1FTlRcIixcbiAgICBcIlRfRE9DX0NPTU1FTlRcIixcbiAgICBcIlRfT1BFTl9UQUdcIixcbiAgICBcIlRfT1BFTl9UQUdfV0lUSF9FQ0hPXCIsXG4gICAgXCJUX0NMT1NFX1RBR1wiLFxuICAgIFwiVF9XSElURVNQQUNFXCIsXG4gICAgXCI/Pz9cIlxuXTtcbi8qIEB2YXIgTWFwIHdoaWNoIHRyYW5zbGF0ZXMgbGV4ZXIgdG9rZW5zIHRvIGludGVybmFsIHRva2VucyAqLyBQSFAuUGFyc2VyLnByb3RvdHlwZS50cmFuc2xhdGUgPSBbXG4gICAgMCxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDU2LFxuICAgIDE2NixcbiAgICAxNzUsXG4gICAgMTY3LFxuICAgIDU1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTYzLFxuICAgIDE2NCxcbiAgICA1MyxcbiAgICA1MCxcbiAgICA4LFxuICAgIDUxLFxuICAgIDUyLFxuICAgIDU0LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAzMSxcbiAgICAxNTksXG4gICAgNDQsXG4gICAgMTYsXG4gICAgNDYsXG4gICAgMzAsXG4gICAgNjgsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICA3MCxcbiAgICAxNzUsXG4gICAgMTYwLFxuICAgIDM2LFxuICAgIDE3NSxcbiAgICAxNjUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNjEsXG4gICAgMzUsXG4gICAgMTYyLFxuICAgIDU4LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDEsXG4gICAgMixcbiAgICAzLFxuICAgIDQsXG4gICAgNSxcbiAgICA2LFxuICAgIDcsXG4gICAgOSxcbiAgICAxMCxcbiAgICAxMSxcbiAgICAxMixcbiAgICAxMyxcbiAgICAxNCxcbiAgICAxNSxcbiAgICAxNyxcbiAgICAxOCxcbiAgICAxOSxcbiAgICAyMCxcbiAgICAyMSxcbiAgICAyMixcbiAgICAyMyxcbiAgICAyNCxcbiAgICAyNSxcbiAgICAyNixcbiAgICAyNyxcbiAgICAyOCxcbiAgICAyOSxcbiAgICAzMixcbiAgICAzMyxcbiAgICAzNCxcbiAgICAzNyxcbiAgICAzOCxcbiAgICAzOSxcbiAgICA0MCxcbiAgICA0MSxcbiAgICA0MixcbiAgICA0MyxcbiAgICA0NSxcbiAgICA0NyxcbiAgICA0OCxcbiAgICA0OSxcbiAgICA1NyxcbiAgICA1OSxcbiAgICA2MCxcbiAgICA2MSxcbiAgICA2MixcbiAgICA2MyxcbiAgICA2NCxcbiAgICA2NSxcbiAgICA2NixcbiAgICA2NyxcbiAgICA2OSxcbiAgICA3MSxcbiAgICA3MixcbiAgICA3MyxcbiAgICA3NCxcbiAgICA3NSxcbiAgICA3NixcbiAgICA3NyxcbiAgICA3OCxcbiAgICA3OSxcbiAgICA4MCxcbiAgICA4MSxcbiAgICA4MixcbiAgICA4MyxcbiAgICA4NCxcbiAgICA4NSxcbiAgICA4NixcbiAgICA4NyxcbiAgICA4OCxcbiAgICA4OSxcbiAgICA5MCxcbiAgICA5MSxcbiAgICA5MixcbiAgICA5MyxcbiAgICA5NCxcbiAgICA5NSxcbiAgICA5NixcbiAgICA5NyxcbiAgICA5OCxcbiAgICA5OSxcbiAgICAxMDAsXG4gICAgMTAxLFxuICAgIDEwMixcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDEwOCxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDExMSxcbiAgICAxMTIsXG4gICAgMTEzLFxuICAgIDExNCxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDExNyxcbiAgICAxMTgsXG4gICAgMTE5LFxuICAgIDEyMCxcbiAgICAxMjEsXG4gICAgMTIyLFxuICAgIDEyMyxcbiAgICAxMjQsXG4gICAgMTI1LFxuICAgIDEyNixcbiAgICAxMjcsXG4gICAgMTI4LFxuICAgIDEyOSxcbiAgICAxMzAsXG4gICAgMTMxLFxuICAgIDEzMixcbiAgICAxMzMsXG4gICAgMTM0LFxuICAgIDEzNSxcbiAgICAxMzYsXG4gICAgMTM3LFxuICAgIDEzOCxcbiAgICAxMzksXG4gICAgMTQwLFxuICAgIDE0MSxcbiAgICAxNDIsXG4gICAgMTQzLFxuICAgIDE0NCxcbiAgICAxNDUsXG4gICAgMTQ2LFxuICAgIDE0NyxcbiAgICAxNDgsXG4gICAgMTQ5LFxuICAgIDE1MCxcbiAgICAxNTEsXG4gICAgMTUyLFxuICAgIDE1MyxcbiAgICAxNTQsXG4gICAgMTU1LFxuICAgIDE1NixcbiAgICAxNTcsXG4gICAgMTU4LFxuICAgIDE2OCxcbiAgICAxNjksXG4gICAgMTcwLFxuICAgIDE3MSxcbiAgICAxNzIsXG4gICAgMTczLFxuICAgIDE3NFxuXTtcblBIUC5QYXJzZXIucHJvdG90eXBlLnl5YWN0aW9uID0gW1xuICAgIDEzMixcbiAgICAxMzMsXG4gICAgMTM0LFxuICAgIDU2OSxcbiAgICAxMzUsXG4gICAgMTM2LFxuICAgIDAsXG4gICAgNzIyLFxuICAgIDcyMyxcbiAgICA3MjQsXG4gICAgMTM3LFxuICAgIDM3LFxuICAgIDgzNCxcbiAgICA5MTEsXG4gICAgODM1LFxuICAgIDQ2OSxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjcsXG4gICAgLTMyNzY3LFxuICAgIC0zMjc2NyxcbiAgICAtMzI3NjcsXG4gICAgMTAxLFxuICAgIDEwMixcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxMDY4LFxuICAgIDEwNjksXG4gICAgMTA3MCxcbiAgICAxMDY3LFxuICAgIDEwNjYsXG4gICAgMTA2NSxcbiAgICAxMDcxLFxuICAgIDcxNixcbiAgICA3MTUsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY3LFxuICAgIC0zMjc2NyxcbiAgICAtMzI3NjcsXG4gICAgLTMyNzY3LFxuICAgIC0zMjc2NyxcbiAgICA1NDUsXG4gICAgNTQ2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgNzI1LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDk5OCxcbiAgICA5OTksXG4gICAgODA2LFxuICAgIDkyMixcbiAgICA0NDcsXG4gICAgNDQ4LFxuICAgIDQ0OSxcbiAgICAzNzAsXG4gICAgMzcxLFxuICAgIDIsXG4gICAgMjY3LFxuICAgIDEzOCxcbiAgICAzOTYsXG4gICAgNzI5LFxuICAgIDczMCxcbiAgICA3MzEsXG4gICAgNzMyLFxuICAgIDQxNCxcbiAgICAtMzI3NjYsXG4gICAgNDIwLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgOTkwLFxuICAgIDczMyxcbiAgICA3MzQsXG4gICAgNzM1LFxuICAgIDczNixcbiAgICA3MzcsXG4gICAgNzM4LFxuICAgIDczOSxcbiAgICA3NDAsXG4gICAgNzQxLFxuICAgIDc0MixcbiAgICA3NDMsXG4gICAgNzYzLFxuICAgIDU3MCxcbiAgICA3NjQsXG4gICAgNzY1LFxuICAgIDc2NixcbiAgICA3NjcsXG4gICAgNzU1LFxuICAgIDc1NixcbiAgICAzMzYsXG4gICAgMzM3LFxuICAgIDc1OCxcbiAgICA3NTksXG4gICAgNzQ0LFxuICAgIDc0NSxcbiAgICA3NDYsXG4gICAgNzQ4LFxuICAgIDc0OSxcbiAgICA3NTAsXG4gICAgMzQ2LFxuICAgIDc5MCxcbiAgICA3OTEsXG4gICAgNzkyLFxuICAgIDc5MyxcbiAgICA3OTQsXG4gICAgNzk1LFxuICAgIDc1MSxcbiAgICA3NTIsXG4gICAgNTcxLFxuICAgIDU3MixcbiAgICA3ODQsXG4gICAgNzc1LFxuICAgIDc3MyxcbiAgICA3NzQsXG4gICAgNzg3LFxuICAgIDc3MCxcbiAgICA3NzEsXG4gICAgMjgzLFxuICAgIDQyMCxcbiAgICA1NzMsXG4gICAgNTc0LFxuICAgIDc2OSxcbiAgICA1NzUsXG4gICAgNTc2LFxuICAgIDU3NyxcbiAgICA1NzgsXG4gICAgNTc5LFxuICAgIDU4MCxcbiAgICA1OTgsXG4gICAgLTU3NSxcbiAgICA0NzAsXG4gICAgMTQsXG4gICAgNzk4LFxuICAgIDc3MixcbiAgICA1ODEsXG4gICAgNTgyLFxuICAgIC01NzUsXG4gICAgMTM5LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDEzMixcbiAgICAxMzMsXG4gICAgMTM0LFxuICAgIDU2OSxcbiAgICAxMzUsXG4gICAgMTM2LFxuICAgIDEwMTcsXG4gICAgNzIyLFxuICAgIDcyMyxcbiAgICA3MjQsXG4gICAgMTM3LFxuICAgIDM3LFxuICAgIDEwNjAsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgMTMwMyxcbiAgICA2OTYsXG4gICAgLTMyNzY2LFxuICAgIDEzMDQsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDEwNjgsXG4gICAgMTA2OSxcbiAgICAxMDcwLFxuICAgIDEwNjcsXG4gICAgMTA2NixcbiAgICAxMDY1LFxuICAgIDEwNzEsXG4gICAgLTMyNzY2LFxuICAgIDcxNixcbiAgICA3MTUsXG4gICAgMzcyLFxuICAgIDM3MSxcbiAgICAxMjU4LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC01NzIsXG4gICAgMTA2LFxuICAgIDEwNyxcbiAgICAxMDgsXG4gICAgNDE0LFxuICAgIDI3MCxcbiAgICA4OTEsXG4gICAgLTU3MixcbiAgICAyNDAsXG4gICAgMTE5MyxcbiAgICAxMTkyLFxuICAgIDExOTQsXG4gICAgNzI1LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDEwNDYsXG4gICAgMTA5LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA5ODYsXG4gICAgOTg1LFxuICAgIDk4NCxcbiAgICA5ODcsXG4gICAgMjY3LFxuICAgIDEzOCxcbiAgICAzOTYsXG4gICAgNzI5LFxuICAgIDczMCxcbiAgICA3MzEsXG4gICAgNzMyLFxuICAgIDEyLFxuICAgIC0zMjc2NixcbiAgICA0MjAsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDk5OCxcbiAgICA5OTksXG4gICAgNzMzLFxuICAgIDczNCxcbiAgICA3MzUsXG4gICAgNzM2LFxuICAgIDczNyxcbiAgICA3MzgsXG4gICAgNzM5LFxuICAgIDc0MCxcbiAgICA3NDEsXG4gICAgNzQyLFxuICAgIDc0MyxcbiAgICA3NjMsXG4gICAgNTcwLFxuICAgIDc2NCxcbiAgICA3NjUsXG4gICAgNzY2LFxuICAgIDc2NyxcbiAgICA3NTUsXG4gICAgNzU2LFxuICAgIDMzNixcbiAgICAzMzcsXG4gICAgNzU4LFxuICAgIDc1OSxcbiAgICA3NDQsXG4gICAgNzQ1LFxuICAgIDc0NixcbiAgICA3NDgsXG4gICAgNzQ5LFxuICAgIDc1MCxcbiAgICAzNDYsXG4gICAgNzkwLFxuICAgIDc5MSxcbiAgICA3OTIsXG4gICAgNzkzLFxuICAgIDc5NCxcbiAgICA3OTUsXG4gICAgNzUxLFxuICAgIDc1MixcbiAgICA1NzEsXG4gICAgNTcyLFxuICAgIDc4NCxcbiAgICA3NzUsXG4gICAgNzczLFxuICAgIDc3NCxcbiAgICA3ODcsXG4gICAgNzcwLFxuICAgIDc3MSxcbiAgICA4ODEsXG4gICAgMzIxLFxuICAgIDU3MyxcbiAgICA1NzQsXG4gICAgNzY5LFxuICAgIDU3NSxcbiAgICA1NzYsXG4gICAgNTc3LFxuICAgIDU3OCxcbiAgICA1NzksXG4gICAgNTgwLFxuICAgIC0zMjc2NixcbiAgICA4MixcbiAgICA4MyxcbiAgICA4NCxcbiAgICAtNTc1LFxuICAgIDc3MixcbiAgICA1ODEsXG4gICAgNTgyLFxuICAgIC01NzUsXG4gICAgMTQ4LFxuICAgIDc0NyxcbiAgICA3MTcsXG4gICAgNzE4LFxuICAgIDcxOSxcbiAgICA3MjAsXG4gICAgNzIxLFxuICAgIDEyNzgsXG4gICAgNzIyLFxuICAgIDcyMyxcbiAgICA3MjQsXG4gICAgNzYwLFxuICAgIDc2MSxcbiAgICAzNixcbiAgICAxMjc3LFxuICAgIDg1LFxuICAgIDg2LFxuICAgIDg3LFxuICAgIDg4LFxuICAgIDg5LFxuICAgIDkwLFxuICAgIDkxLFxuICAgIDkyLFxuICAgIDkzLFxuICAgIDk0LFxuICAgIDk1LFxuICAgIDk2LFxuICAgIDk3LFxuICAgIDk4LFxuICAgIDk5LFxuICAgIDEwMCxcbiAgICAxMDEsXG4gICAgMTAyLFxuICAgIDEwMyxcbiAgICAxMDQsXG4gICAgMTA1LFxuICAgIDEwNixcbiAgICAxMDcsXG4gICAgMTA4LFxuICAgIDk5NixcbiAgICAyNzAsXG4gICAgMTUwLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDQ1NSxcbiAgICA0NTYsXG4gICAgODEsXG4gICAgMzQsXG4gICAgLTI2NCxcbiAgICAtNTcyLFxuICAgIDEwMTYsXG4gICAgMTA5LFxuICAgIDMyMCxcbiAgICAtNTcyLFxuICAgIDg5MyxcbiAgICA3MjUsXG4gICAgNjgyLFxuICAgIDgwMyxcbiAgICAxMjgsXG4gICAgOTk4LFxuICAgIDk5OSxcbiAgICA1OTIsXG4gICAgLTMyNzY2LFxuICAgIDEwNDQsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgODA5LFxuICAgIDE1MSxcbiAgICA3MjYsXG4gICAgNzI3LFxuICAgIDcyOCxcbiAgICA3MjksXG4gICAgNzMwLFxuICAgIDczMSxcbiAgICA3MzIsXG4gICAgLTg4LFxuICAgIDExOTgsXG4gICAgNzk2LFxuICAgIDI3OCxcbiAgICAtNTI2LFxuICAgIDI4MyxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA3MzMsXG4gICAgNzM0LFxuICAgIDczNSxcbiAgICA3MzYsXG4gICAgNzM3LFxuICAgIDczOCxcbiAgICA3MzksXG4gICAgNzQwLFxuICAgIDc0MSxcbiAgICA3NDIsXG4gICAgNzQzLFxuICAgIDc2MyxcbiAgICA3ODYsXG4gICAgNzY0LFxuICAgIDc2NSxcbiAgICA3NjYsXG4gICAgNzY3LFxuICAgIDc1NSxcbiAgICA3NTYsXG4gICAgNzU3LFxuICAgIDc4NSxcbiAgICA3NTgsXG4gICAgNzU5LFxuICAgIDc0NCxcbiAgICA3NDUsXG4gICAgNzQ2LFxuICAgIDc0OCxcbiAgICA3NDksXG4gICAgNzUwLFxuICAgIDc4OSxcbiAgICA3OTAsXG4gICAgNzkxLFxuICAgIDc5MixcbiAgICA3OTMsXG4gICAgNzk0LFxuICAgIDc5NSxcbiAgICA3NTEsXG4gICAgNzUyLFxuICAgIDc1MyxcbiAgICA3NTQsXG4gICAgNzg0LFxuICAgIDc3NSxcbiAgICA3NzMsXG4gICAgNzc0LFxuICAgIDc4NyxcbiAgICA3NzAsXG4gICAgNzcxLFxuICAgIDE0NCxcbiAgICA4MDQsXG4gICAgNzYyLFxuICAgIDc2OCxcbiAgICA3NjksXG4gICAgNzc2LFxuICAgIDc3NyxcbiAgICA3NzksXG4gICAgNzc4LFxuICAgIDc4MCxcbiAgICA3ODEsXG4gICAgLTMxNCxcbiAgICAtNTI2LFxuICAgIC01MjYsXG4gICAgLTE5MyxcbiAgICAtMTkyLFxuICAgIDc3MixcbiAgICA3ODMsXG4gICAgNzgyLFxuICAgIDQ5LFxuICAgIDUwLFxuICAgIDUxLFxuICAgIDUwMCxcbiAgICA1MixcbiAgICA1MyxcbiAgICAyMzksXG4gICAgODA3LFxuICAgIC01MjYsXG4gICAgLTg2LFxuICAgIDU0LFxuICAgIDU1LFxuICAgIC0xMTEsXG4gICAgNTYsXG4gICAgOTk2LFxuICAgIDI1MyxcbiAgICAtMzI3NjYsXG4gICAgLTExMSxcbiAgICA4MDAsXG4gICAgLTExMSxcbiAgICAtNTI2LFxuICAgIDU0MSxcbiAgICAtNTMyLFxuICAgIC0zNTIsXG4gICAgMzAwLFxuICAgIC0zNTIsXG4gICAgMzA0LFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICA5OTgsXG4gICAgOTk5LFxuICAgIDk5OCxcbiAgICA5OTksXG4gICAgMTUzLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDExOTEsXG4gICAgODA3LFxuICAgIDEyNixcbiAgICAzMDYsXG4gICAgMTI5MyxcbiAgICA1NyxcbiAgICA1OCxcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAtMTExLFxuICAgIDU5LFxuICAgIDEyMTgsXG4gICAgNjAsXG4gICAgMjQ2LFxuICAgIDI0NyxcbiAgICA2MSxcbiAgICA2MixcbiAgICA2MyxcbiAgICA2NCxcbiAgICA2NSxcbiAgICA2NixcbiAgICA2NyxcbiAgICA2OCxcbiAgICAtNTI1LFxuICAgIDI3LFxuICAgIDI2OCxcbiAgICA2OSxcbiAgICA0MzYsXG4gICAgNTAxLFxuICAgIC0zMjgsXG4gICAgODA4LFxuICAgIC04NixcbiAgICAxMjI0LFxuICAgIDEyMjUsXG4gICAgNTAyLFxuICAgIDExODksXG4gICAgODA3LFxuICAgIDExOTgsXG4gICAgMTIzMCxcbiAgICAyOTMsXG4gICAgMTIyMixcbiAgICA0MSxcbiAgICAyNCxcbiAgICA1MDMsXG4gICAgNzQsXG4gICAgNTA0LFxuICAgIDk1MyxcbiAgICA1MDUsXG4gICAgMzIwLFxuICAgIDUwNixcbiAgICA4MDIsXG4gICAgMTU0LFxuICAgIDUwNyxcbiAgICA1MDgsXG4gICAgMjc5LFxuICAgIDY4NCxcbiAgICAyODAsXG4gICAgNDMsXG4gICAgNDQsXG4gICAgNDM3LFxuICAgIDM2NyxcbiAgICAzNjYsXG4gICAgODkxLFxuICAgIDQ1LFxuICAgIDUwOSxcbiAgICAzNSxcbiAgICAyNDksXG4gICAgLTE2LFxuICAgIC01NjYsXG4gICAgMzU4LFxuICAgIDMzMixcbiAgICAzMTgsXG4gICAgLTU2NixcbiAgICAxMTk4LFxuICAgIDExOTMsXG4gICAgMTE5MixcbiAgICAxMTk0LFxuICAgIC01MjcsXG4gICAgNTEwLFxuICAgIDUxMSxcbiAgICA1MTIsXG4gICAgMzMzLFxuICAgIC01MjQsXG4gICAgMTI3NCxcbiAgICA0OCxcbiAgICA3MTYsXG4gICAgNzE1LFxuICAgIC01MjUsXG4gICAgLTUyNSxcbiAgICAzMzQsXG4gICAgNTEzLFxuICAgIDUxNCxcbiAgICA4MDcsXG4gICAgMTIxMixcbiAgICAxMjEzLFxuICAgIDEyMTQsXG4gICAgMTIxNSxcbiAgICAxMjA5LFxuICAgIDEyMTAsXG4gICAgMjkyLFxuICAgIDM2MCxcbiAgICAyODQsXG4gICAgLTUyNSxcbiAgICAyODUsXG4gICAgLTMxNCxcbiAgICAxMjE2LFxuICAgIDEyMTEsXG4gICAgLTE5MyxcbiAgICAtMTkyLFxuICAgIDExOTMsXG4gICAgMTE5MixcbiAgICAxMTk0LFxuICAgIDI5MyxcbiAgICA4OTEsXG4gICAgLTUyNSxcbiAgICAzNjQsXG4gICAgLTUzMSxcbiAgICA3MCxcbiAgICA4MDcsXG4gICAgMzE2LFxuICAgIDMxNyxcbiAgICAzMjAsXG4gICAgMzEsXG4gICAgMTEwLFxuICAgIDExMSxcbiAgICAxMTIsXG4gICAgMTEzLFxuICAgIDExNCxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDExNyxcbiAgICAxMTgsXG4gICAgMTE5LFxuICAgIDEyMCxcbiAgICAxMjEsXG4gICAgMTIyLFxuICAgIC0xNTMsXG4gICAgLTE1MyxcbiAgICAtMTUzLFxuICAgIDYzOCxcbiAgICAyNSxcbiAgICAtNTI3LFxuICAgIC01MjcsXG4gICAgNjg3LFxuICAgIDM3OSxcbiAgICA4ODEsXG4gICAgLTUyNCxcbiAgICAtNTI0LFxuICAgIDI5NixcbiAgICAyOTcsXG4gICAgODkxLFxuICAgIC0xNTMsXG4gICAgNDMyLFxuICAgIC0xNTMsXG4gICAgODA3LFxuICAgIC0xNTMsXG4gICAgLTUyNyxcbiAgICAtMTUzLFxuICAgIDcxNixcbiAgICA3MTUsXG4gICAgNDMzLFxuICAgIC01MjQsXG4gICAgNzk4LFxuICAgIDM2MyxcbiAgICAtMTExLFxuICAgIDExMDUsXG4gICAgMTEwNyxcbiAgICAzNjUsXG4gICAgLTUyNyxcbiAgICA0MzQsXG4gICAgODkxLFxuICAgIDE0MCxcbiAgICA0MzUsXG4gICAgLTUyNCxcbiAgICA5NTQsXG4gICAgMTI3LFxuICAgIC01MjQsXG4gICAgMzIwLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICA2ODgsXG4gICAgODEzLFxuICAgIDM4MSxcbiAgICAtNTI5LFxuICAgIDExLFxuICAgIDgzNCxcbiAgICAxNTUsXG4gICAgODM1LFxuICAgIDg2NyxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAtMTExLFxuICAgIDQ3LFxuICAgIDI5MyxcbiAgICAtMzI3NjYsXG4gICAgODgxLFxuICAgIDY1NCxcbiAgICA2NTUsXG4gICAgNzQsXG4gICAgNjg5LFxuICAgIDExOTEsXG4gICAgMTA0NSxcbiAgICAzMjAsXG4gICAgNzA4LFxuICAgIDE0OSxcbiAgICAzOTksXG4gICAgMTU3LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDMyLFxuICAgIC0zMjc2NixcbiAgICAtNzksXG4gICAgLTMyNzY2LFxuICAgIDEyMyxcbiAgICAtMzI3NjYsXG4gICAgNzE2LFxuICAgIDcxNSxcbiAgICAtMzI3NjYsXG4gICAgODkzLFxuICAgIDg5MSxcbiAgICA2ODIsXG4gICAgLTE1MyxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA3MTYsXG4gICAgNzE1LFxuICAgIDg5MSxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDEyNCxcbiAgICA4ODEsXG4gICAgMTI5LFxuICAgIDc0LFxuICAgIC0zMjc2NixcbiAgICA0MTEsXG4gICAgMTMwLFxuICAgIDMyMCxcbiAgICAtNTI0LFxuICAgIC01MjQsXG4gICAgMTQzLFxuICAgIDE0MSxcbiAgICAtNzUsXG4gICAgLTMyNzY2LFxuICAgIDE1OCxcbiAgICAtNTI5LFxuICAgIC01MjksXG4gICAgMzIwLFxuICAgIDI3LFxuICAgIDY5MSxcbiAgICAxNTksXG4gICAgODgxLFxuICAgIDE2MCxcbiAgICAtNTI0LFxuICAgIDE2MSxcbiAgICAyOTQsXG4gICAgMjk1LFxuICAgIDY5OCxcbiAgICAzNjgsXG4gICAgMzY5LFxuICAgIDgwNyxcbiAgICAtNzMsXG4gICAgLTMyNzY2LFxuICAgIC03MixcbiAgICAxMjIyLFxuICAgIC01MjQsXG4gICAgMzczLFxuICAgIDM3NCxcbiAgICAxMTkxLFxuICAgIDg5MyxcbiAgICAtNzEsXG4gICAgNjgyLFxuICAgIC01MjksXG4gICAgNzMsXG4gICAgLTcwLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC02OSxcbiAgICAtMzI3NjYsXG4gICAgLTY4LFxuICAgIC0zMjc2NixcbiAgICAxMjUsXG4gICAgLTMyNzY2LFxuICAgIDYzMCxcbiAgICA2MzEsXG4gICAgLTMyNzY2LFxuICAgIC02NyxcbiAgICAtNjYsXG4gICAgLTQ3LFxuICAgIC01MSxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMTgsXG4gICAgMTQ3LFxuICAgIDI3MSxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDI3NyxcbiAgICA2OTcsXG4gICAgNzAwLFxuICAgIDg4MSxcbiAgICAtMzI3NjYsXG4gICAgNDExLFxuICAgIDg5MCxcbiAgICA4OTMsXG4gICAgMTQ2LFxuICAgIDY4MixcbiAgICAyODIsXG4gICAgODgxLFxuICAgIDkwNyxcbiAgICAtMzI3NjYsXG4gICAgMjgxLFxuICAgIDUxMyxcbiAgICA1MTQsXG4gICAgMjg2LFxuICAgIDEyMTIsXG4gICAgMTIxMyxcbiAgICAxMjE0LFxuICAgIDEyMTUsXG4gICAgMTIwOSxcbiAgICAxMjEwLFxuICAgIDMyNixcbiAgICAxMzEsXG4gICAgMTQ1LFxuICAgIDkzOSxcbiAgICAyODcsXG4gICAgNjgyLFxuICAgIDEyMTYsXG4gICAgMTIxMSxcbiAgICAxMDksXG4gICAgMjcwLFxuICAgIC0zMjc2NixcbiAgICA3OTgsXG4gICAgODA3LFxuICAgIC0zMjc2NixcbiAgICA2NjIsXG4gICAgNjM5LFxuICAgIDExOTEsXG4gICAgNjU3LFxuICAgIDcyLFxuICAgIDY3NSxcbiAgICAxMDc1LFxuICAgIDMxNyxcbiAgICAzMjAsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgMTMwNSxcbiAgICAtMzI3NjYsXG4gICAgMzAxLFxuICAgIC0zMjc2NixcbiAgICA2MjgsXG4gICAgLTMyNzY2LFxuICAgIDQzMSxcbiAgICA1NDMsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA5MjMsXG4gICAgNTU1LFxuICAgIDkyNCxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAxMjI5LFxuICAgIDU0OSxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtNCxcbiAgICA4OTEsXG4gICAgLTQ5MCxcbiAgICAxMTkxLFxuICAgIC0zMjc2NixcbiAgICA0MTEsXG4gICAgNjQ0LFxuICAgIDg5MyxcbiAgICAyOTksXG4gICAgNjgyLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgODkzLFxuICAgIC0zMjc2NixcbiAgICA2ODIsXG4gICAgLTMyNzY2LFxuICAgIDEzLFxuICAgIDEyMzEsXG4gICAgLTMyNzY2LFxuICAgIDQ1MixcbiAgICA0ODAsXG4gICAgNjQ1LFxuICAgIDkwOSxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgNjU4LFxuICAgIC00ODAsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAwLFxuICAgIDExOTEsXG4gICAgMCxcbiAgICAwLFxuICAgIC0zMjc2NixcbiAgICA0MTEsXG4gICAgMCxcbiAgICAyOTgsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgMzA1LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDAsXG4gICAgLTMyNzY2LFxuICAgIDAsXG4gICAgODA2LFxuICAgIC0zMjc2NixcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICA0NzUsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDAsXG4gICAgNyxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDE2LFxuICAgIDExOTEsXG4gICAgNTYxLFxuICAgIDU5NixcbiAgICAtMzI3NjYsXG4gICAgNDExLFxuICAgIDEyMTksXG4gICAgODkxLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDM2MixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA4MTgsXG4gICAgLTMyNzY2LFxuICAgIC0yNjcsXG4gICAgODgxLFxuICAgIC0zMjc2NixcbiAgICAzOSxcbiAgICAyOTMsXG4gICAgMCxcbiAgICAwLFxuICAgIC0zMjc2NixcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDQwLFxuICAgIDcwNSxcbiAgICA3MDYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA4NzIsXG4gICAgOTYzLFxuICAgIDk0MCxcbiAgICA5NDcsXG4gICAgLTMyNzY2LFxuICAgIDQxMSxcbiAgICA5MzcsXG4gICAgOTQ4LFxuICAgIDM2NSxcbiAgICA4NzAsXG4gICAgNDI3LFxuICAgIDg5MSxcbiAgICA5MzUsXG4gICAgLTMyNzY2LFxuICAgIDEwNDksXG4gICAgMjkxLFxuICAgIDEyNDQsXG4gICAgMTA1MixcbiAgICAxMDUzLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAxMDUwLFxuICAgIDEwNTEsXG4gICAgMTA1NyxcbiAgICAtNTYwLFxuICAgIDEyNjIsXG4gICAgMTI5NixcbiAgICA2MzMsXG4gICAgMCxcbiAgICA4MjYsXG4gICAgLTExMSxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAzMyxcbiAgICAzMTUsXG4gICAgLTMyNzY2LFxuICAgIDM2MSxcbiAgICA2ODMsXG4gICAgNjg2LFxuICAgIDY5MCxcbiAgICA2OTIsXG4gICAgMTE5MSxcbiAgICA2OTMsXG4gICAgNjk0LFxuICAgIDY5NSxcbiAgICA2OTksXG4gICAgNjg1LFxuICAgIDMyMCxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA5LFxuICAgIC0zMjc2NixcbiAgICA3MDIsXG4gICAgLTMyNzY2LFxuICAgIDg2OCxcbiAgICAtMzI3NjYsXG4gICAgODgxLFxuICAgIDEzMDAsXG4gICAgLTMyNzY2LFxuICAgIDg5MyxcbiAgICAxMzAyLFxuICAgIDY4MixcbiAgICAtNCxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIC0zMjc2NixcbiAgICA4MjksXG4gICAgODI4LFxuICAgIDgzNyxcbiAgICAtMzI3NjYsXG4gICAgLTMyNzY2LFxuICAgIDkxNixcbiAgICAtMjQyLFxuICAgIC0yNDIsXG4gICAgLTI0MixcbiAgICAtMzI3NjYsXG4gICAgNDExLFxuICAgIDk1NSxcbiAgICAzNjUsXG4gICAgMjcsXG4gICAgODM2LFxuICAgIDEzMDEsXG4gICAgOTE1LFxuICAgIDkxNyxcbiAgICAtMzI3NjYsXG4gICAgOTE0LFxuICAgIDExNzcsXG4gICAgOTAwLFxuICAgIDkxMCxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgODA3LFxuICAgIDg4MSxcbiAgICA4OTgsXG4gICAgOTQ1LFxuICAgIDEyMjIsXG4gICAgOTQ2LFxuICAgIDEyOTksXG4gICAgMTI1NixcbiAgICA4NjcsXG4gICAgLTExMSxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAxMjQ1LFxuICAgIDEyNjMsXG4gICAgMTI2OSxcbiAgICAxMjcyLFxuICAgIC0yNDEsXG4gICAgLTI0MSxcbiAgICAtMjQxLFxuICAgIC01NTgsXG4gICAgLTUzMixcbiAgICAtNTMxLFxuICAgIDM2NSxcbiAgICAtNTMwLFxuICAgIDEsXG4gICAgMjgsXG4gICAgMjksXG4gICAgMzgsXG4gICAgNDIsXG4gICAgNDYsXG4gICAgNzEsXG4gICAgMCxcbiAgICA3NSxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgNzYsXG4gICAgNzcsXG4gICAgNzgsXG4gICAgNzksXG4gICAgODkzLFxuICAgIDgwLFxuICAgIDY4MixcbiAgICAtMjQyLFxuICAgIDg2NyxcbiAgICAtMTExLFxuICAgIC0xMTEsXG4gICAgLTExMSxcbiAgICAtMTExLFxuICAgIDE0MixcbiAgICAxNTIsXG4gICAgMTU2LFxuICAgIDI0NSxcbiAgICAzMjIsXG4gICAgMzQ3LFxuICAgIDUxNCxcbiAgICAzNDgsXG4gICAgMTIxMixcbiAgICAxMjEzLFxuICAgIDEyMTQsXG4gICAgMTIxNSxcbiAgICAxMjA5LFxuICAgIDEyMTAsXG4gICAgMzQ5LFxuICAgIDM1MCxcbiAgICAzNTEsXG4gICAgMzUyLFxuICAgIDM1MyxcbiAgICAzNTQsXG4gICAgMTIxNixcbiAgICAxMjExLFxuICAgIDM1NSxcbiAgICAzNTYsXG4gICAgMzU3LFxuICAgIDM1OSxcbiAgICA0MjgsXG4gICAgODkzLFxuICAgIC0yNjUsXG4gICAgNjgyLFxuICAgIC0yNDEsXG4gICAgLTI2NCxcbiAgICA3MixcbiAgICAwLFxuICAgIDE4LFxuICAgIDMxNyxcbiAgICAzMjAsXG4gICAgMTksXG4gICAgMjAsXG4gICAgMjEsXG4gICAgMjMsXG4gICAgMzk4LFxuICAgIDQ3MSxcbiAgICA0NzIsXG4gICAgNDc5LFxuICAgIDQ4MixcbiAgICA0ODMsXG4gICAgNDg0LFxuICAgIDQ4NSxcbiAgICA0ODksXG4gICAgNDkwLFxuICAgIDQ5MSxcbiAgICA0OTgsXG4gICAgNjY5LFxuICAgIDEyMDIsXG4gICAgMTE0NSxcbiAgICAxMjIwLFxuICAgIDEwMTksXG4gICAgMTAxOCxcbiAgICAxMTgxLFxuICAgIC0yNjksXG4gICAgLTEwMyxcbiAgICAxNyxcbiAgICAyMixcbiAgICAyNixcbiAgICAyOTAsXG4gICAgMzk3LFxuICAgIDU4OSxcbiAgICA1OTMsXG4gICAgNjIwLFxuICAgIDY3NCxcbiAgICAxMTQ5LFxuICAgIDExOTcsXG4gICAgMTE0NixcbiAgICAxMjc1LFxuICAgIDAsXG4gICAgLTQ5NCxcbiAgICAxMTYyLFxuICAgIDAsXG4gICAgMTIyM1xuXTtcblBIUC5QYXJzZXIucHJvdG90eXBlLnl5Y2hlY2sgPSBbXG4gICAgMixcbiAgICAzLFxuICAgIDQsXG4gICAgNSxcbiAgICA2LFxuICAgIDcsXG4gICAgMCxcbiAgICA5LFxuICAgIDEwLFxuICAgIDExLFxuICAgIDEyLFxuICAgIDEzLFxuICAgIDEwNixcbiAgICAxLFxuICAgIDEwOCxcbiAgICAzMSxcbiAgICA5LFxuICAgIDEwLFxuICAgIDExLFxuICAgIDQ0LFxuICAgIDQ1LFxuICAgIDQ2LFxuICAgIDQ3LFxuICAgIDQ4LFxuICAgIDQ5LFxuICAgIDUwLFxuICAgIDUxLFxuICAgIDUyLFxuICAgIDExNixcbiAgICAxMTcsXG4gICAgMTE4LFxuICAgIDExOSxcbiAgICAxMjAsXG4gICAgMTIxLFxuICAgIDEyMixcbiAgICAzNyxcbiAgICAzOCxcbiAgICAzMCxcbiAgICAxMTYsXG4gICAgMzIsXG4gICAgMzMsXG4gICAgMzQsXG4gICAgMzUsXG4gICAgMzYsXG4gICAgMzcsXG4gICAgMzgsXG4gICAgMzksXG4gICAgNDAsXG4gICAgNDEsXG4gICAgNDIsXG4gICAgNDMsXG4gICAgMTE3LFxuICAgIDExOCxcbiAgICA5LFxuICAgIDEwLFxuICAgIDU3LFxuICAgIDksXG4gICAgMTAsXG4gICAgMTEsXG4gICAgMTM3LFxuICAgIDEzOCxcbiAgICAxNTUsXG4gICAgMTI4LFxuICAgIDEyOSxcbiAgICAxMzAsXG4gICAgMTMxLFxuICAgIDEwNixcbiAgICAxMDcsXG4gICAgOCxcbiAgICA3MSxcbiAgICA3MixcbiAgICA3MyxcbiAgICA3NCxcbiAgICA3NSxcbiAgICA3NixcbiAgICA3NyxcbiAgICAxMTYsXG4gICAgMzAsXG4gICAgODAsXG4gICAgMzIsXG4gICAgMzMsXG4gICAgMzQsXG4gICAgMzUsXG4gICAgMzYsXG4gICAgMSxcbiAgICA4NyxcbiAgICA4OCxcbiAgICA4OSxcbiAgICA5MCxcbiAgICA5MSxcbiAgICA5MixcbiAgICA5MyxcbiAgICA5NCxcbiAgICA5NSxcbiAgICA5NixcbiAgICA5NyxcbiAgICA5OCxcbiAgICA5OSxcbiAgICAxMDAsXG4gICAgMTAxLFxuICAgIDEwMixcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDEwOCxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDExMSxcbiAgICAxMTIsXG4gICAgMTEzLFxuICAgIDExNCxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDExNyxcbiAgICAxMTgsXG4gICAgMTE5LFxuICAgIDEyMCxcbiAgICAxMjEsXG4gICAgMTIyLFxuICAgIDEyMyxcbiAgICAxMjQsXG4gICAgMTI1LFxuICAgIDEyNixcbiAgICAxMjcsXG4gICAgMTI4LFxuICAgIDEyOSxcbiAgICAxMzAsXG4gICAgMTMxLFxuICAgIDEzMixcbiAgICAxMzMsXG4gICAgMzAsXG4gICAgODAsXG4gICAgMTM2LFxuICAgIDEzNyxcbiAgICAxMzgsXG4gICAgMTM5LFxuICAgIDE0MCxcbiAgICAxNDEsXG4gICAgMTQyLFxuICAgIDE0MyxcbiAgICAxNDQsXG4gICAgNTEsXG4gICAgMSxcbiAgICAxNjEsXG4gICAgMTAxLFxuICAgIDgwLFxuICAgIDE1MCxcbiAgICAxNTEsXG4gICAgMTUyLFxuICAgIDgsXG4gICAgMTU0LFxuICAgIDksXG4gICAgMTAsXG4gICAgMTEsXG4gICAgMixcbiAgICAzLFxuICAgIDQsXG4gICAgNSxcbiAgICA2LFxuICAgIDcsXG4gICAgMTY0LFxuICAgIDksXG4gICAgMTAsXG4gICAgMTEsXG4gICAgMTIsXG4gICAgMTMsXG4gICAgMTIzLFxuICAgIDksXG4gICAgMTAsXG4gICAgMTEsXG4gICAgODAsXG4gICAgMTYxLFxuICAgIDMwLFxuICAgIDgzLFxuICAgIDMyLFxuICAgIDMzLFxuICAgIDM0LFxuICAgIDM1LFxuICAgIDM2LFxuICAgIDM3LFxuICAgIDM4LFxuICAgIDExNixcbiAgICAxMTcsXG4gICAgMTE4LFxuICAgIDExOSxcbiAgICAxMjAsXG4gICAgMTIxLFxuICAgIDEyMixcbiAgICAzMCxcbiAgICAzNyxcbiAgICAzOCxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDEsXG4gICAgOSxcbiAgICAxMCxcbiAgICAxMSxcbiAgICAxLFxuICAgIDUzLFxuICAgIDU0LFxuICAgIDU1LFxuICAgIDExNixcbiAgICA1NyxcbiAgICAxLFxuICAgIDgsXG4gICAgMTQsXG4gICAgMTU1LFxuICAgIDE1NixcbiAgICAxNTcsXG4gICAgNTcsXG4gICAgOSxcbiAgICAxMCxcbiAgICAxMSxcbiAgICAxNjIsXG4gICAgNjksXG4gICAgMzAsXG4gICAgMTE2LFxuICAgIDMyLFxuICAgIDMzLFxuICAgIDExOSxcbiAgICAxMjAsXG4gICAgMTIxLFxuICAgIDEyMixcbiAgICA3MSxcbiAgICA3MixcbiAgICA3MyxcbiAgICA3NCxcbiAgICA3NSxcbiAgICA3NixcbiAgICA3NyxcbiAgICA4LFxuICAgIDMwLFxuICAgIDgwLFxuICAgIDMyLFxuICAgIDMzLFxuICAgIDM0LFxuICAgIDM1LFxuICAgIDEzNyxcbiAgICAxMzgsXG4gICAgODcsXG4gICAgODgsXG4gICAgODksXG4gICAgOTAsXG4gICAgOTEsXG4gICAgOTIsXG4gICAgOTMsXG4gICAgOTQsXG4gICAgOTUsXG4gICAgOTYsXG4gICAgOTcsXG4gICAgOTgsXG4gICAgOTksXG4gICAgMTAwLFxuICAgIDEwMSxcbiAgICAxMDIsXG4gICAgMTAzLFxuICAgIDEwNCxcbiAgICAxMDUsXG4gICAgMTA2LFxuICAgIDEwNyxcbiAgICAxMDgsXG4gICAgMTA5LFxuICAgIDExMCxcbiAgICAxMTEsXG4gICAgMTEyLFxuICAgIDExMyxcbiAgICAxMTQsXG4gICAgMTE1LFxuICAgIDExNixcbiAgICAxMTcsXG4gICAgMTE4LFxuICAgIDExOSxcbiAgICAxMjAsXG4gICAgMTIxLFxuICAgIDEyMixcbiAgICAxMjMsXG4gICAgMTI0LFxuICAgIDEyNSxcbiAgICAxMjYsXG4gICAgMTI3LFxuICAgIDEyOCxcbiAgICAxMjksXG4gICAgMTMwLFxuICAgIDEzMSxcbiAgICAxMzIsXG4gICAgMTMzLFxuICAgIDg0LFxuICAgIDcwLFxuICAgIDEzNixcbiAgICAxMzcsXG4gICAgMTM4LFxuICAgIDEzOSxcbiAgICAxNDAsXG4gICAgMTQxLFxuICAgIDE0MixcbiAgICAxNDMsXG4gICAgMTQ0LFxuICAgIDksXG4gICAgOSxcbiAgICAxMCxcbiAgICAxMSxcbiAgICAxNjAsXG4gICAgMTUwLFxuICAgIDE1MSxcbiAgICAxNTIsXG4gICAgMTY0LFxuICAgIDE1NCxcbiAgICAyLFxuICAgIDMsXG4gICAgNCxcbiAgICA1LFxuICAgIDYsXG4gICAgNyxcbiAgICAxLFxuICAgIDksXG4gICAgMTAsXG4gICAgMTEsXG4gICAgMTIsXG4gICAgMTMsXG4gICAgMzAsXG4gICAgOCxcbiAgICAzMixcbiAgICAzMyxcbiAgICAzNCxcbiAgICAzNSxcbiAgICAzNixcbiAgICAzNyxcbiAgICAzOCxcbiAgICAzOSxcbiAgICA0MCxcbiAgICA0MSxcbiAgICA0MixcbiAgICA0MyxcbiAgICA0NCxcbiAgICA0NSxcbiAgICA0NixcbiAgICA0NyxcbiAgICA0OCxcbiAgICA0OSxcbiAgICA1MCxcbiAgICA1MSxcbiAgICA1MixcbiAgICA1MyxcbiAgICA1NCxcbiAgICA1NSxcbiAgICAxMTYsXG4gICAgNTcsXG4gICAgMTQsXG4gICAgOSxcbiAgICAxMCxcbiAgICAxMSxcbiAgICAxMzQsXG4gICAgMTM1LFxuICAgIDE2MSxcbiAgICA4LFxuICAgIDE2NCxcbiAgICAxNjAsXG4gICAgMSxcbiAgICA2OSxcbiAgICAxNjcsXG4gICAgMTY0LFxuICAgIDE1OSxcbiAgICA1NyxcbiAgICAxNjEsXG4gICAgODAsXG4gICAgOCxcbiAgICAxMzcsXG4gICAgMTM4LFxuICAgIDEsXG4gICAgMzAsXG4gICAgMSxcbiAgICAzMixcbiAgICAzMyxcbiAgICAzNCxcbiAgICAxLFxuICAgIDE0LFxuICAgIDcxLFxuICAgIDcyLFxuICAgIDczLFxuICAgIDc0LFxuICAgIDc1LFxuICAgIDc2LFxuICAgIDc3LFxuICAgIDMxLFxuICAgIDEsXG4gICAgODAsXG4gICAgMzAsXG4gICAgNzAsXG4gICAgMzAsXG4gICAgOSxcbiAgICAxMCxcbiAgICAxMSxcbiAgICA4NyxcbiAgICA4OCxcbiAgICA4OSxcbiAgICA5MCxcbiAgICA5MSxcbiAgICA5MixcbiAgICA5MyxcbiAgICA5NCxcbiAgICA5NSxcbiAgICA5NixcbiAgICA5NyxcbiAgICA5OCxcbiAgICA5OSxcbiAgICAxMDAsXG4gICAgMTAxLFxuICAgIDEwMixcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDEwOCxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDExMSxcbiAgICAxMTIsXG4gICAgMTEzLFxuICAgIDExNCxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDExNyxcbiAgICAxMTgsXG4gICAgMTE5LFxuICAgIDEyMCxcbiAgICAxMjEsXG4gICAgMTIyLFxuICAgIDEyMyxcbiAgICAxMjQsXG4gICAgMTI1LFxuICAgIDEyNixcbiAgICAxMjcsXG4gICAgMTI4LFxuICAgIDEyOSxcbiAgICAxMzAsXG4gICAgMTMxLFxuICAgIDEzMixcbiAgICAxMzMsXG4gICAgOCxcbiAgICAxNTYsXG4gICAgMTM2LFxuICAgIDEzNyxcbiAgICAxMzgsXG4gICAgMTM5LFxuICAgIDE0MCxcbiAgICAxNDEsXG4gICAgMTQyLFxuICAgIDE0MyxcbiAgICAxNDQsXG4gICAgOCxcbiAgICAxMzQsXG4gICAgMTM1LFxuICAgIDgsXG4gICAgOCxcbiAgICAxNTAsXG4gICAgMTUxLFxuICAgIDE1MixcbiAgICAyLFxuICAgIDMsXG4gICAgNCxcbiAgICA1LFxuICAgIDYsXG4gICAgNyxcbiAgICA5NyxcbiAgICA4MixcbiAgICAxNDksXG4gICAgMzEsXG4gICAgMTIsXG4gICAgMTMsXG4gICAgMTAxLFxuICAgIDE1LFxuICAgIDExNixcbiAgICA4LFxuICAgIDExNixcbiAgICAxMDYsXG4gICAgODAsXG4gICAgMTA4LFxuICAgIDE2MSxcbiAgICA4NSxcbiAgICAxNjMsXG4gICAgMTA2LFxuICAgIDExMyxcbiAgICAxMDgsXG4gICAgOCxcbiAgICAxMTYsXG4gICAgMTE3LFxuICAgIDExOCxcbiAgICAxMTksXG4gICAgMTIwLFxuICAgIDEyMSxcbiAgICAxMjIsXG4gICAgMTIzLFxuICAgIDEzNyxcbiAgICAxMzgsXG4gICAgMTM3LFxuICAgIDEzOCxcbiAgICAxNCxcbiAgICA5LFxuICAgIDEwLFxuICAgIDExLFxuICAgIDgwLFxuICAgIDgyLFxuICAgIDE0LFxuICAgIDgsXG4gICAgODUsXG4gICAgNTAsXG4gICAgNTEsXG4gICAgNTAsXG4gICAgNTEsXG4gICAgNTIsXG4gICAgMTI4LFxuICAgIDU2LFxuICAgIDEsXG4gICAgNTgsXG4gICAgNTksXG4gICAgNjAsXG4gICAgNjEsXG4gICAgNjIsXG4gICAgNjMsXG4gICAgNjQsXG4gICAgNjUsXG4gICAgNjYsXG4gICAgNjcsXG4gICAgNjgsXG4gICAgNzAsXG4gICAgNzAsXG4gICAgNzEsXG4gICAgNzIsXG4gICAgNzMsXG4gICAgNzQsXG4gICAgMTYyLFxuICAgIDE1OSxcbiAgICA5NyxcbiAgICA3OCxcbiAgICA3OSxcbiAgICA4MCxcbiAgICAxMTYsXG4gICAgODIsXG4gICAgMSxcbiAgICAxNDYsXG4gICAgMTU4LFxuICAgIDg2LFxuICAgIDg3LFxuICAgIDg4LFxuICAgIDg5LFxuICAgIDE2MyxcbiAgICA5MSxcbiAgICAzMSxcbiAgICA5MyxcbiAgICAxNjcsXG4gICAgOTUsXG4gICAgMTU2LFxuICAgIDE0LFxuICAgIDk4LFxuICAgIDk5LFxuICAgIDM1LFxuICAgIDE2MSxcbiAgICAzNyxcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDEsXG4gICAgMTA5LFxuICAgIDExMCxcbiAgICAxNDcsXG4gICAgMTQ4LFxuICAgIDMxLFxuICAgIDE2MCxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDgsXG4gICAgMTY0LFxuICAgIDEsXG4gICAgMTU1LFxuICAgIDE1NixcbiAgICAxNTcsXG4gICAgNzAsXG4gICAgMTI0LFxuICAgIDEyNSxcbiAgICAxMjYsXG4gICAgOCxcbiAgICA3MCxcbiAgICAxLFxuICAgIDcwLFxuICAgIDM3LFxuICAgIDM4LFxuICAgIDEzNCxcbiAgICAxMzUsXG4gICAgOCxcbiAgICAxMzYsXG4gICAgMTM3LFxuICAgIDgyLFxuICAgIDEzOSxcbiAgICAxNDAsXG4gICAgMTQxLFxuICAgIDE0MixcbiAgICAxNDMsXG4gICAgMTQ0LFxuICAgIDE0NSxcbiAgICA4LFxuICAgIDM1LFxuICAgIDE0OSxcbiAgICAzNyxcbiAgICAxNjQsXG4gICAgMTUxLFxuICAgIDE1MixcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE1NSxcbiAgICAxNTYsXG4gICAgMTU3LFxuICAgIDE1OCxcbiAgICAxLFxuICAgIDE2MSxcbiAgICA4LFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgODIsXG4gICAgMTY1LFxuICAgIDE2NixcbiAgICAxNjcsXG4gICAgMTYsXG4gICAgMTcsXG4gICAgMTgsXG4gICAgMTksXG4gICAgMjAsXG4gICAgMjEsXG4gICAgMjIsXG4gICAgMjMsXG4gICAgMjQsXG4gICAgMjUsXG4gICAgMjYsXG4gICAgMjcsXG4gICAgMjgsXG4gICAgMjksXG4gICAgNzUsXG4gICAgNzYsXG4gICAgNzcsXG4gICAgNzUsXG4gICAgNzYsXG4gICAgMTM0LFxuICAgIDEzNSxcbiAgICAzMSxcbiAgICA4LFxuICAgIDg0LFxuICAgIDEzNCxcbiAgICAxMzUsXG4gICAgMTM0LFxuICAgIDEzNSxcbiAgICAxLFxuICAgIDkwLFxuICAgIDgsXG4gICAgOTIsXG4gICAgODIsXG4gICAgOTQsXG4gICAgMTQ5LFxuICAgIDk2LFxuICAgIDM3LFxuICAgIDM4LFxuICAgIDgsXG4gICAgMTQ5LFxuICAgIDgwLFxuICAgIDE0OSxcbiAgICAxMjgsXG4gICAgNTksXG4gICAgNjAsXG4gICAgMTA2LFxuICAgIDE2MSxcbiAgICA4LFxuICAgIDEsXG4gICAgMTYxLFxuICAgIDgsXG4gICAgMTYxLFxuICAgIDE1OSxcbiAgICAxNjEsXG4gICAgNzAsXG4gICAgMTY3LFxuICAgIDExNyxcbiAgICAxMTgsXG4gICAgMzEsXG4gICAgOCxcbiAgICAxMDYsXG4gICAgNzAsXG4gICAgMTA4LFxuICAgIDEwNixcbiAgICAxNCxcbiAgICAxMDgsXG4gICAgMTI3LFxuICAgIDEyOCxcbiAgICAxMjksXG4gICAgMTMwLFxuICAgIDEzMSxcbiAgICA3MCxcbiAgICAxNTgsXG4gICAgNzQsXG4gICAgODQsXG4gICAgNzUsXG4gICAgNzYsXG4gICAgMTYzLFxuICAgIDMxLFxuICAgIDgwLFxuICAgIDE1OSxcbiAgICAxNjcsXG4gICAgMTYxLFxuICAgIDEwMSxcbiAgICAxMDIsXG4gICAgMTQsXG4gICAgODcsXG4gICAgODgsXG4gICAgODksXG4gICAgMTQsXG4gICAgOTEsXG4gICAgMzEsXG4gICAgOTMsXG4gICAgMTYsXG4gICAgOTUsXG4gICAgMzcsXG4gICAgMzgsXG4gICAgOTgsXG4gICAgMTU5LFxuICAgIDEsXG4gICAgMTYxLFxuICAgIDE2MixcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAzNyxcbiAgICAzOCxcbiAgICAxLFxuICAgIDEwOSxcbiAgICAxMTAsXG4gICAgMTYsXG4gICAgODQsXG4gICAgMTYsXG4gICAgMTYzLFxuICAgIDExNSxcbiAgICAxMTYsXG4gICAgMTYsXG4gICAgMTY3LFxuICAgIDEzNCxcbiAgICAxMzUsXG4gICAgMTYsXG4gICAgMTYxLFxuICAgIDMxLFxuICAgIDEyNCxcbiAgICAxNixcbiAgICAxMzQsXG4gICAgMTM1LFxuICAgIDE2NyxcbiAgICA3MCxcbiAgICAzMSxcbiAgICAxNixcbiAgICA4NCxcbiAgICAxNixcbiAgICAxNDksXG4gICAgMTYsXG4gICAgMTM0LFxuICAgIDEzNSxcbiAgICAzMSxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDgyLFxuICAgIDMxLFxuICAgIDc0LFxuICAgIDMxLFxuICAgIDg2LFxuICAgIDE2MSxcbiAgICAxMDYsXG4gICAgMTA3LFxuICAgIDgwLFxuICAgIDE1OSxcbiAgICAzMSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDE1NCxcbiAgICAzMSxcbiAgICA4NyxcbiAgICA4OCxcbiAgICA4OSxcbiAgICAzMSxcbiAgICA5MSxcbiAgICAzMSxcbiAgICA5MyxcbiAgICAxNjEsXG4gICAgOTUsXG4gICAgMTExLFxuICAgIDExMixcbiAgICA5OCxcbiAgICAzMSxcbiAgICAzMSxcbiAgICAzMSxcbiAgICAzMSxcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAzMSxcbiAgICAzMSxcbiAgICAzMSxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDMxLFxuICAgIDMxLFxuICAgIDMxLFxuICAgIDg0LFxuICAgIDExNSxcbiAgICAxMTYsXG4gICAgMzEsXG4gICAgMTU5LFxuICAgIDMxLFxuICAgIDE2MSxcbiAgICAzNyxcbiAgICA4NCxcbiAgICAzOCxcbiAgICAxMjQsXG4gICAgMzUsXG4gICAgMTM2LFxuICAgIDEzNyxcbiAgICAzNSxcbiAgICAxMzksXG4gICAgMTQwLFxuICAgIDE0MSxcbiAgICAxNDIsXG4gICAgMTQzLFxuICAgIDE0NCxcbiAgICAzNSxcbiAgICAzMSxcbiAgICA3MCxcbiAgICAxNTksXG4gICAgMzcsXG4gICAgMTYxLFxuICAgIDE1MSxcbiAgICAxNTIsXG4gICAgNjksXG4gICAgNTcsXG4gICAgNzQsXG4gICAgODAsXG4gICAgODIsXG4gICAgODUsXG4gICAgNzcsXG4gICAgOTAsXG4gICAgODAsXG4gICAgOTQsXG4gICAgMTYzLFxuICAgIDkyLFxuICAgIDgyLFxuICAgIDE2NixcbiAgICAxNjcsXG4gICAgODcsXG4gICAgODgsXG4gICAgODksXG4gICAgODMsXG4gICAgOTEsXG4gICAgMTE0LFxuICAgIDkzLFxuICAgIDExMyxcbiAgICA5NSxcbiAgICAxMjgsXG4gICAgODUsXG4gICAgOTgsXG4gICAgMTE2LFxuICAgIDEyOCxcbiAgICAxNTMsXG4gICAgMTI4LFxuICAgIDEwMyxcbiAgICAxMDQsXG4gICAgMTA1LFxuICAgIDE0NixcbiAgICA4OSxcbiAgICA3NCxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDAsXG4gICAgMSxcbiAgICAxNDksXG4gICAgODAsXG4gICAgMTE1LFxuICAgIDExNixcbiAgICA5NixcbiAgICAxNTksXG4gICAgMTMzLFxuICAgIDE2MSxcbiAgICA4NyxcbiAgICA4OCxcbiAgICA4OSxcbiAgICAxMjQsXG4gICAgOTEsXG4gICAgMTU5LFxuICAgIDkzLFxuICAgIDE2MSxcbiAgICA5NSxcbiAgICA5NyxcbiAgICAxNDYsXG4gICAgOTgsXG4gICAgOTcsXG4gICAgOTcsXG4gICAgMTAwLFxuICAgIDE1NCxcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICA3NCxcbiAgICAxMDAsXG4gICAgMTQ5LFxuICAgIDEwOSxcbiAgICAxMTAsXG4gICAgLTEsXG4gICAgODAsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMTE1LFxuICAgIDExNixcbiAgICAtMSxcbiAgICAxMzIsXG4gICAgODcsXG4gICAgODgsXG4gICAgODksXG4gICAgMTMyLFxuICAgIDkxLFxuICAgIDEyNCxcbiAgICA5MyxcbiAgICAtMSxcbiAgICA5NSxcbiAgICAtMSxcbiAgICAxNTUsXG4gICAgOTgsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgLTEsXG4gICAgMTAyLFxuICAgIDEwMyxcbiAgICAxMDQsXG4gICAgMTA1LFxuICAgIDc0LFxuICAgIC0xLFxuICAgIDE0OSxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDE0OSxcbiAgICA4MCxcbiAgICA4MSxcbiAgICAxNTMsXG4gICAgMTE1LFxuICAgIDExNixcbiAgICAxNjAsXG4gICAgMSxcbiAgICA4NyxcbiAgICA4OCxcbiAgICA4OSxcbiAgICAxNDksXG4gICAgOTEsXG4gICAgMTI0LFxuICAgIDkzLFxuICAgIDE2MCxcbiAgICA5NSxcbiAgICAxNjQsXG4gICAgODQsXG4gICAgOTgsXG4gICAgMTU5LFxuICAgIDE1OCxcbiAgICAtMSxcbiAgICAtMSxcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxNTksXG4gICAgMTU5LFxuICAgIDE1OSxcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDE1OSxcbiAgICAxNTksXG4gICAgMTU5LFxuICAgIDE1OSxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDE1OSxcbiAgICAxNTksXG4gICAgMTA2LFxuICAgIDE1OSxcbiAgICAxMDgsXG4gICAgMSxcbiAgICAxNTksXG4gICAgMTI0LFxuICAgIDE1OSxcbiAgICAxMTMsXG4gICAgMTYwLFxuICAgIDE1OSxcbiAgICAxNTksXG4gICAgMTE3LFxuICAgIDExOCxcbiAgICAxNTksXG4gICAgMTU5LFxuICAgIDE1OSxcbiAgICAxNjMsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxNjAsXG4gICAgLTEsXG4gICAgMTI3LFxuICAgIDEyOCxcbiAgICAxMjksXG4gICAgMTMwLFxuICAgIDEzMSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDc0LFxuICAgIDE2MSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDE2MSxcbiAgICAxNjEsXG4gICAgODAsXG4gICAgMTYxLFxuICAgIDE2MSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDE2MSxcbiAgICAxNjcsXG4gICAgODcsXG4gICAgODgsXG4gICAgODksXG4gICAgMTUwLFxuICAgIDkxLFxuICAgIDE2MixcbiAgICA5MyxcbiAgICAxNjIsXG4gICAgOTUsXG4gICAgODQsXG4gICAgMTYyLFxuICAgIDk4LFxuICAgIDE1OSxcbiAgICAxNjIsXG4gICAgMTYxLFxuICAgIDE2MixcbiAgICAxMDMsXG4gICAgMTA0LFxuICAgIDEwNSxcbiAgICAxNjIsXG4gICAgMTYyLFxuICAgIDE2MixcbiAgICAxMDksXG4gICAgMTEwLFxuICAgIDE2MixcbiAgICAxMDAsXG4gICAgMTAxLFxuICAgIDEwMixcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDE2MixcbiAgICAxMDYsXG4gICAgNzAsXG4gICAgMTYyLFxuICAgIDE2MixcbiAgICAxNjIsXG4gICAgMTYyLFxuICAgIDEyNCxcbiAgICAxNjIsXG4gICAgMTYyLFxuICAgIDE2MixcbiAgICAxNjIsXG4gICAgMTE3LFxuICAgIDExOCxcbiAgICA4MixcbiAgICA4NCxcbiAgICAxNjIsXG4gICAgMTYyLFxuICAgIDg2LFxuICAgIDE2MixcbiAgICAxNjIsXG4gICAgMTYyLFxuICAgIDEyNyxcbiAgICAxMjgsXG4gICAgMTI5LFxuICAgIDEzMCxcbiAgICAxMzEsXG4gICAgMTYyLFxuICAgIDE2MixcbiAgICAxNjIsXG4gICAgMTYyLFxuICAgIDEwMCxcbiAgICAxMDEsXG4gICAgMTAyLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDEwNixcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIC0xLFxuICAgIDE2MyxcbiAgICAxMTcsXG4gICAgMTE4LFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNTksXG4gICAgMTYzLFxuICAgIDE2MSxcbiAgICAxNjIsXG4gICAgMTI3LFxuICAgIDEyOCxcbiAgICAxMjksXG4gICAgMTMwLFxuICAgIDEzMSxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxMzcsXG4gICAgMTYzLFxuICAgIDEzOSxcbiAgICAxNDAsXG4gICAgMTQxLFxuICAgIDE0MixcbiAgICAxNDMsXG4gICAgMTQ0LFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE1MSxcbiAgICAxNTIsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNTksXG4gICAgMTY0LFxuICAgIDE2MSxcbiAgICAxNjIsXG4gICAgMTY0LFxuICAgIDE2MyxcbiAgICAtMSxcbiAgICAxNjQsXG4gICAgMTY2LFxuICAgIDE2NyxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNjQsXG4gICAgMTY0LFxuICAgIC0xLFxuICAgIDE2NSxcbiAgICAxNjUsXG4gICAgLTEsXG4gICAgMTY2XG5dO1xuUEhQLlBhcnNlci5wcm90b3R5cGUueXliYXNlID0gW1xuICAgIDAsXG4gICAgLTIsXG4gICAgMTU0LFxuICAgIDU2NSxcbiAgICA4NzYsXG4gICAgOTQ4LFxuICAgIDk4NCxcbiAgICA1MTQsXG4gICAgNTMsXG4gICAgMzk4LFxuICAgIDgzNyxcbiAgICAzMDcsXG4gICAgMzA3LFxuICAgIDY3LFxuICAgIDMwNyxcbiAgICAzMDcsXG4gICAgMzA3LFxuICAgIDY1MyxcbiAgICA3MjQsXG4gICAgNzI0LFxuICAgIDczMixcbiAgICA3MjQsXG4gICAgNjE2LFxuICAgIDY3MyxcbiAgICAyMDQsXG4gICAgMjA0LFxuICAgIDIwNCxcbiAgICA2MjUsXG4gICAgNjI1LFxuICAgIDYyNSxcbiAgICA2MjUsXG4gICAgNjk0LFxuICAgIDY5NCxcbiAgICA4MzEsXG4gICAgODMxLFxuICAgIDg2MyxcbiAgICA3OTksXG4gICAgNzY1LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzYsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICAzNzUsXG4gICAgNTE5LFxuICAgIDM2OSxcbiAgICA3MDEsXG4gICAgMTAxNyxcbiAgICAxMDIzLFxuICAgIDEwMTksXG4gICAgMTAyNCxcbiAgICAxMDE1LFxuICAgIDEwMTQsXG4gICAgMTAxOCxcbiAgICAxMDIwLFxuICAgIDEwMjUsXG4gICAgOTExLFxuICAgIDkxMixcbiAgICA3ODIsXG4gICAgOTE4LFxuICAgIDkxOSxcbiAgICA5MjAsXG4gICAgOTIxLFxuICAgIDEwMjEsXG4gICAgODQxLFxuICAgIDEwMTYsXG4gICAgMTAyMixcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MCxcbiAgICA0OTEsXG4gICAgNDQsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAzODIsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAzODIsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAzODIsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAzODIsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAzODIsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAzODIsXG4gICAgMzgyLFxuICAgIDM4MixcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxODcsXG4gICAgNjg0LFxuICAgIDY4NCxcbiAgICAzNDEsXG4gICAgMjAzLFxuICAgIDYxMCxcbiAgICA0NyxcbiAgICA5ODUsXG4gICAgOTg1LFxuICAgIDk4NSxcbiAgICA5ODUsXG4gICAgOTg1LFxuICAgIDk4NSxcbiAgICA5ODUsXG4gICAgOTg1LFxuICAgIDk4NSxcbiAgICA5ODUsXG4gICAgMTQ0LFxuICAgIDE0NCxcbiAgICA3LFxuICAgIDcsXG4gICAgNyxcbiAgICA3LFxuICAgIDcsXG4gICAgMzcxLFxuICAgIC0yNSxcbiAgICAtMjUsXG4gICAgLTI1LFxuICAgIC0yNSxcbiAgICA1NDAsXG4gICAgMzg1LFxuICAgIDEwMixcbiAgICA1NzYsXG4gICAgMzU4LFxuICAgIDQ1LFxuICAgIDM3NyxcbiAgICA0NjAsXG4gICAgNDYwLFxuICAgIDM2MCxcbiAgICAyMzEsXG4gICAgMjMxLFxuICAgIDIzMSxcbiAgICAyMzEsXG4gICAgMjMxLFxuICAgIDIzMSxcbiAgICAtNzgsXG4gICAgLTc4LFxuICAgIC03OCxcbiAgICAtNzgsXG4gICAgLTc4LFxuICAgIC02NixcbiAgICAzMTksXG4gICAgNDU3LFxuICAgIC05NCxcbiAgICAzOTYsXG4gICAgNDIzLFxuICAgIDU4NixcbiAgICA1ODYsXG4gICAgNTg2LFxuICAgIDU4NixcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNzUwLFxuICAgIDEwMjksXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNTExLFxuICAgIDUxNixcbiAgICA1MTYsXG4gICAgNTE4LFxuICAgIDE0NyxcbiAgICAxNDcsXG4gICAgMTQ3LFxuICAgIDUxNixcbiAgICA1ODMsXG4gICAgNzc3LFxuICAgIDQyMixcbiAgICA1ODMsXG4gICAgNDIyLFxuICAgIDE5NCxcbiAgICA5MixcbiAgICA3NDgsXG4gICAgLTQwLFxuICAgIDg3LFxuICAgIDQxMixcbiAgICA3NDgsXG4gICAgNjE3LFxuICAgIDYyNyxcbiAgICAxOTgsXG4gICAgMTQzLFxuICAgIDc3MyxcbiAgICA2NTgsXG4gICAgNzczLFxuICAgIDEwMTMsXG4gICAgNzU3LFxuICAgIDc2NCxcbiAgICA3MTcsXG4gICAgODM4LFxuICAgIDg2MCxcbiAgICAxMDI2LFxuICAgIDgwMCxcbiAgICA5MDgsXG4gICAgODA2LFxuICAgIDkxMCxcbiAgICAyMTksXG4gICAgNjg2LFxuICAgIDEwMTIsXG4gICAgMTAxMixcbiAgICAxMDEyLFxuICAgIDEwMTIsXG4gICAgMTAxMixcbiAgICAxMDEyLFxuICAgIDEwMTIsXG4gICAgMTAxMixcbiAgICAxMDEyLFxuICAgIDEwMTIsXG4gICAgMTAxMixcbiAgICA4NTUsXG4gICAgNTUyLFxuICAgIDEwMTMsXG4gICAgMjg2LFxuICAgIDg1NSxcbiAgICA4NTUsXG4gICAgODU1LFxuICAgIDU1MixcbiAgICA1NTIsXG4gICAgNTUyLFxuICAgIDU1MixcbiAgICA1NTIsXG4gICAgNTUyLFxuICAgIDU1MixcbiAgICA1NTIsXG4gICAgNTUyLFxuICAgIDU1MixcbiAgICA2NzksXG4gICAgMjg2LFxuICAgIDU2OCxcbiAgICA2MjYsXG4gICAgMjg2LFxuICAgIDc5NCxcbiAgICA1NTIsXG4gICAgMzc1LFxuICAgIDc1OCxcbiAgICAzNzUsXG4gICAgMzc1LFxuICAgIDM3NSxcbiAgICAzNzUsXG4gICAgOTU4LFxuICAgIDM3NSxcbiAgICAzNzUsXG4gICAgMzc1LFxuICAgIDM3NSxcbiAgICAzNzUsXG4gICAgMzc1LFxuICAgIDk3MCxcbiAgICA3NjksXG4gICAgLTE2LFxuICAgIDM3NSxcbiAgICA1MTksXG4gICAgMTIsXG4gICAgMTIsXG4gICAgNTQ3LFxuICAgIDgzLFxuICAgIDEyLFxuICAgIDEyLFxuICAgIDEyLFxuICAgIDEyLFxuICAgIDM3NSxcbiAgICAzNzUsXG4gICAgMzc1LFxuICAgIDY1OCxcbiAgICA3ODEsXG4gICAgNzEzLFxuICAgIDY2NixcbiAgICA3OTIsXG4gICAgNDQ4LFxuICAgIDc4MSxcbiAgICA3ODEsXG4gICAgNzgxLFxuICAgIDQzOCxcbiAgICA0NDQsXG4gICAgMTkzLFxuICAgIDQ0NyxcbiAgICA1NzAsXG4gICAgNTIzLFxuICAgIDU4MCxcbiAgICA3NjAsXG4gICAgNzYwLFxuICAgIDc2NyxcbiAgICA5MjksXG4gICAgOTI5LFxuICAgIDc2MCxcbiAgICA3NTksXG4gICAgNzYwLFxuICAgIDc2NyxcbiAgICA5MzQsXG4gICAgNzYwLFxuICAgIDkyOSxcbiAgICA4MDUsXG4gICAgMzU5LFxuICAgIDY0OCxcbiAgICA1NzcsXG4gICAgNjExLFxuICAgIDY1NixcbiAgICA5MjksXG4gICAgNDc4LFxuICAgIDc2MCxcbiAgICA3NjAsXG4gICAgNzYwLFxuICAgIDc2MCxcbiAgICA2NjUsXG4gICAgNzYwLFxuICAgIDQ2NyxcbiAgICA0MzMsXG4gICAgNzYwLFxuICAgIDc2MCxcbiAgICA3ODUsXG4gICAgNzc0LFxuICAgIDc4OSxcbiAgICA2MCxcbiAgICA5MjksXG4gICAgOTI5LFxuICAgIDkyOSxcbiAgICA3ODksXG4gICAgNTk2LFxuICAgIDc1MSxcbiAgICA3NTEsXG4gICAgNzUxLFxuICAgIDgxMSxcbiAgICA4MTIsXG4gICAgNzQ2LFxuICAgIDc3MSxcbiAgICA1NjcsXG4gICAgNDk4LFxuICAgIDY3NyxcbiAgICAzNDgsXG4gICAgNzc5LFxuICAgIDc3MSxcbiAgICA3NzEsXG4gICAgNzYwLFxuICAgIDY0MCxcbiAgICA3NDYsXG4gICAgNzcxLFxuICAgIDc0NixcbiAgICA3NzEsXG4gICAgNzQ3LFxuICAgIDc3MSxcbiAgICA3NzEsXG4gICAgNzcxLFxuICAgIDc0NixcbiAgICA3NzEsXG4gICAgNzU5LFxuICAgIDU4NSxcbiAgICA3NzEsXG4gICAgNzM0LFxuICAgIDY2OCxcbiAgICAyMjQsXG4gICAgNzcxLFxuICAgIDYsXG4gICAgOTM1LFxuICAgIDkzNyxcbiAgICAzNTQsXG4gICAgOTQwLFxuICAgIDkzMixcbiAgICA5NDEsXG4gICAgOTc5LFxuICAgIDk0MixcbiAgICA5NDMsXG4gICAgODUxLFxuICAgIDk1NixcbiAgICA5MzMsXG4gICAgOTQ1LFxuICAgIDkzMSxcbiAgICA5MzAsXG4gICAgNzgwLFxuICAgIDcwMyxcbiAgICA3MjAsXG4gICAgNzkwLFxuICAgIDcyOSxcbiAgICA5MjgsXG4gICAgNzY4LFxuICAgIDc2OCxcbiAgICA3NjgsXG4gICAgOTI1LFxuICAgIDc2OCxcbiAgICA3NjgsXG4gICAgNzY4LFxuICAgIDc2OCxcbiAgICA3NjgsXG4gICAgNzY4LFxuICAgIDc2OCxcbiAgICA3NjgsXG4gICAgNzAzLFxuICAgIDc4OCxcbiAgICA4MDQsXG4gICAgNzMzLFxuICAgIDc4MyxcbiAgICA5NjAsXG4gICAgNzIyLFxuICAgIDcyNixcbiAgICA3MjUsXG4gICAgODY4LFxuICAgIDEwMjcsXG4gICAgMTAyOCxcbiAgICA3MzcsXG4gICAgNzM5LFxuICAgIDk1OCxcbiAgICAxMDA2LFxuICAgIDk1MyxcbiAgICA4MDMsXG4gICAgNzMwLFxuICAgIDk5MixcbiAgICA5NjcsXG4gICAgODY2LFxuICAgIDg0OCxcbiAgICA5NjgsXG4gICAgOTY5LFxuICAgIDk5MyxcbiAgICAxMDA3LFxuICAgIDEwMDgsXG4gICAgODcxLFxuICAgIDc2MSxcbiAgICA4NzQsXG4gICAgODgwLFxuICAgIDc5NyxcbiAgICA5NzEsXG4gICAgODUyLFxuICAgIDc2OCxcbiAgICA5MzUsXG4gICAgOTQzLFxuICAgIDkzMyxcbiAgICA5NDUsXG4gICAgOTMxLFxuICAgIDkzMCxcbiAgICA3NjMsXG4gICAgNzYyLFxuICAgIDc1MyxcbiAgICA3NTUsXG4gICAgNzQ5LFxuICAgIDc0NSxcbiAgICA3MzYsXG4gICAgNzM4LFxuICAgIDc3MCxcbiAgICAxMDA5LFxuICAgIDkyNCxcbiAgICA4MzUsXG4gICAgODMwLFxuICAgIDk3MCxcbiAgICA5MjYsXG4gICAgNzAzLFxuICAgIDgzOSxcbiAgICA5ODYsXG4gICAgODQ3LFxuICAgIDk5NCxcbiAgICA5OTUsXG4gICAgODUwLFxuICAgIDgwMSxcbiAgICA3NzIsXG4gICAgODQwLFxuICAgIDg4MSxcbiAgICA5NzIsXG4gICAgOTc1LFxuICAgIDk3NixcbiAgICA4NTMsXG4gICAgMTAxMCxcbiAgICA4MTAsXG4gICAgOTg5LFxuICAgIDc5NSxcbiAgICA5OTYsXG4gICAgODAyLFxuICAgIDg4MixcbiAgICA5OTcsXG4gICAgOTk4LFxuICAgIDk5OSxcbiAgICAxMDAwLFxuICAgIDg4NSxcbiAgICA4NTQsXG4gICAgODU2LFxuICAgIDg1NyxcbiAgICA4MTUsXG4gICAgNzU0LFxuICAgIDk4MCxcbiAgICA3ODYsXG4gICAgODkxLFxuICAgIDMzNSxcbiAgICA3ODcsXG4gICAgNzk2LFxuICAgIDk3OCxcbiAgICAzNjMsXG4gICAgOTU3LFxuICAgIDg1OCxcbiAgICA4OTQsXG4gICAgODk1LFxuICAgIDEwMDEsXG4gICAgMTAwMixcbiAgICAxMDAzLFxuICAgIDg5NixcbiAgICA5NTQsXG4gICAgODE2LFxuICAgIDk5MCxcbiAgICA3NTIsXG4gICAgOTkxLFxuICAgIDk4MyxcbiAgICA4MTcsXG4gICAgODE4LFxuICAgIDQ4NSxcbiAgICA3ODQsXG4gICAgNzc4LFxuICAgIDU0MSxcbiAgICA2NzYsXG4gICAgODk3LFxuICAgIDg5OSxcbiAgICA5MDAsXG4gICAgOTU1LFxuICAgIDc3NSxcbiAgICA3NjYsXG4gICAgODIxLFxuICAgIDgyMixcbiAgICAxMDExLFxuICAgIDkwMSxcbiAgICA2OTcsXG4gICAgODI0LFxuICAgIDc0MCxcbiAgICA5MDIsXG4gICAgMTAwNSxcbiAgICA3NDIsXG4gICAgNzQ0LFxuICAgIDc1NixcbiAgICA4NTksXG4gICAgNzkzLFxuICAgIDc0MyxcbiAgICA3OTgsXG4gICAgOTc3LFxuICAgIDc3NixcbiAgICA4MjcsXG4gICAgOTA3LFxuICAgIDgyOSxcbiAgICA4MzIsXG4gICAgODMzLFxuICAgIDEwMDQsXG4gICAgODM2LFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICAzMDcsXG4gICAgMzA3LFxuICAgIDMwNyxcbiAgICAzMDcsXG4gICAgMCxcbiAgICAwLFxuICAgIDMwNyxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgNDU4LFxuICAgIDQ1OCxcbiAgICA0NTgsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAwLFxuICAgIDI5MSxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDI5MSxcbiAgICAyOTEsXG4gICAgMjkxLFxuICAgIDgwNSxcbiAgICAxNDcsXG4gICAgMTQ3LFxuICAgIDE0NyxcbiAgICAxNDcsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICAtODgsXG4gICAgLTg4LFxuICAgIDE0NyxcbiAgICAxNDcsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgNDIzLFxuICAgIDQyMyxcbiAgICA0MjMsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMjg2LFxuICAgIDQyMixcbiAgICAwLFxuICAgIDc1OSxcbiAgICA3NTksXG4gICAgNzU5LFxuICAgIDc1OSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDQyMixcbiAgICA0MjIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDI4NixcbiAgICA0MjIsXG4gICAgMCxcbiAgICAyODYsXG4gICAgMCxcbiAgICA3NTksXG4gICAgNzU5LFxuICAgIDQyMyxcbiAgICA4MDUsXG4gICAgODA1LFxuICAgIDMxNCxcbiAgICA0MjMsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAyODYsXG4gICAgNzU5LFxuICAgIDI4NixcbiAgICA1NTIsXG4gICAgNDIyLFxuICAgIDU1MixcbiAgICA1NTIsXG4gICAgMTIsXG4gICAgMzc1LFxuICAgIDMxNCxcbiAgICA2MDgsXG4gICAgNjA4LFxuICAgIDYwOCxcbiAgICA2MDgsXG4gICAgMCxcbiAgICA2NTgsXG4gICAgODA1LFxuICAgIDgwNSxcbiAgICA4MDUsXG4gICAgODA1LFxuICAgIDgwNSxcbiAgICA4MDUsXG4gICAgODA1LFxuICAgIDgwNSxcbiAgICA4MDUsXG4gICAgODA1LFxuICAgIDgwNSxcbiAgICA3NTksXG4gICAgMCxcbiAgICA4MDUsXG4gICAgMCxcbiAgICA3NTksXG4gICAgNzU5LFxuICAgIDc1OSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICA3NTksXG4gICAgMCxcbiAgICAwLFxuICAgIDkyOSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDc2MCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICA3NjAsXG4gICAgOTM0LFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDc1OSxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgNzY4LFxuICAgIDgwMSxcbiAgICAwLFxuICAgIDgwMSxcbiAgICAwLFxuICAgIDc2OCxcbiAgICA3NjgsXG4gICAgNzY4XG5dO1xuUEhQLlBhcnNlci5wcm90b3R5cGUueXlkZWZhdWx0ID0gW1xuICAgIDMsXG4gICAgMzI3NjcsXG4gICAgMTAzLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDEwMSxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA1NzgsXG4gICAgNTc4LFxuICAgIDU3OCxcbiAgICA1NzgsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMjQ2LFxuICAgIDEwMyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA0NTQsXG4gICAgMzcyLFxuICAgIDM3MixcbiAgICAzNzIsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNTIyLFxuICAgIDUyMixcbiAgICA1MjIsXG4gICAgNTIyLFxuICAgIDUyMixcbiAgICA1MjIsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNDU0LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDEwMSxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzNyxcbiAgICA3LFxuICAgIDgsXG4gICAgMTAsXG4gICAgMTEsXG4gICAgNTAsXG4gICAgMTcsXG4gICAgMzEwLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDEwMyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA1NzEsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNDU4LFxuICAgIDQzNyxcbiAgICA0MzgsXG4gICAgNDQwLFxuICAgIDQ0MSxcbiAgICAzNzEsXG4gICAgNTIzLFxuICAgIDU3NyxcbiAgICAzMTMsXG4gICAgNTc0LFxuICAgIDM3MCxcbiAgICAxNDYsXG4gICAgMzI1LFxuICAgIDMxNSxcbiAgICAyMzQsXG4gICAgMzE2LFxuICAgIDI1MCxcbiAgICA0NTksXG4gICAgMjUxLFxuICAgIDQ2MCxcbiAgICA0NjMsXG4gICAgNDY0LFxuICAgIDIxMSxcbiAgICAyNzksXG4gICAgMzY3LFxuICAgIDE1MCxcbiAgICA0MDEsXG4gICAgNDU1LFxuICAgIDQwMyxcbiAgICA0NTMsXG4gICAgNDU3LFxuICAgIDQwMixcbiAgICAzNzcsXG4gICAgMzgyLFxuICAgIDM4MyxcbiAgICAzODQsXG4gICAgMzg1LFxuICAgIDM4NixcbiAgICAzODcsXG4gICAgMzg4LFxuICAgIDM4OSxcbiAgICAzOTAsXG4gICAgMzkxLFxuICAgIDM5MixcbiAgICAzOTMsXG4gICAgMzk0LFxuICAgIDM3NSxcbiAgICAzNzYsXG4gICAgNDU2LFxuICAgIDQzNCxcbiAgICA0MzMsXG4gICAgNDMyLFxuICAgIDM5OSxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA0MDAsXG4gICAgNDA0LFxuICAgIDM3NCxcbiAgICA0MDcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMTAzLFxuICAgIDMyNzY3LFxuICAgIDQwNSxcbiAgICA0MDYsXG4gICAgNDIzLFxuICAgIDQyNCxcbiAgICA0MjEsXG4gICAgNDIyLFxuICAgIDQyNSxcbiAgICAzMjc2NyxcbiAgICA0MjYsXG4gICAgNDI3LFxuICAgIDQyOCxcbiAgICA0MjksXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzAyLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDM1MSxcbiAgICAzNDksXG4gICAgNDE0LFxuICAgIDQxNSxcbiAgICAzMDIsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNTE2LFxuICAgIDQzMSxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAxMDMsXG4gICAgMzI3NjcsXG4gICAgMTAxLFxuICAgIDUxOCxcbiAgICAzOTYsXG4gICAgMzk4LFxuICAgIDQ4NixcbiAgICA0MDksXG4gICAgNDEwLFxuICAgIDQwOCxcbiAgICAzNzgsXG4gICAgMzI3NjcsXG4gICAgNDkzLFxuICAgIDMyNzY3LFxuICAgIDEwMyxcbiAgICA0OTUsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMTEyLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDUxNyxcbiAgICAzMjc2NyxcbiAgICA1MjQsXG4gICAgNTI0LFxuICAgIDMyNzY3LFxuICAgIDQ3OSxcbiAgICAxMDEsXG4gICAgMTk0LFxuICAgIDMyNzY3LFxuICAgIDE5NCxcbiAgICAxOTQsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNTg1LFxuICAgIDQ3OSxcbiAgICAxMTEsXG4gICAgMTExLFxuICAgIDExMSxcbiAgICAxMTEsXG4gICAgMTExLFxuICAgIDExMSxcbiAgICAxMTEsXG4gICAgMTExLFxuICAgIDExMSxcbiAgICAxMTEsXG4gICAgMTExLFxuICAgIDMyNzY3LFxuICAgIDE5NCxcbiAgICAxMTEsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMTAxLFxuICAgIDE5NCxcbiAgICAxOTQsXG4gICAgMTk0LFxuICAgIDE5NCxcbiAgICAxOTQsXG4gICAgMTk0LFxuICAgIDE5NCxcbiAgICAxOTQsXG4gICAgMTk0LFxuICAgIDE5NCxcbiAgICAxODksXG4gICAgMzI3NjcsXG4gICAgMjYwLFxuICAgIDI2MixcbiAgICAxMDMsXG4gICAgNTM5LFxuICAgIDE5NCxcbiAgICAzMjc2NyxcbiAgICA0OTgsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNDkxLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDQ3OSxcbiAgICA0MTksXG4gICAgMTM5LFxuICAgIDMyNzY3LFxuICAgIDEzOSxcbiAgICA1MjQsXG4gICAgNDExLFxuICAgIDQxMixcbiAgICA0MTMsXG4gICAgNDgxLFxuICAgIDUyNCxcbiAgICA1MjQsXG4gICAgNTI0LFxuICAgIDI5OCxcbiAgICAyODEsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNDk2LFxuICAgIDQ5NixcbiAgICAxMDEsXG4gICAgMTAxLFxuICAgIDEwMSxcbiAgICAxMDEsXG4gICAgNDkxLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDExMixcbiAgICAxMDAsXG4gICAgMTAwLFxuICAgIDEwMCxcbiAgICAxMDAsXG4gICAgMTAwLFxuICAgIDEwNCxcbiAgICAxMDIsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMTAwLFxuICAgIDMyNzY3LFxuICAgIDEwMixcbiAgICAxMDIsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMjE3LFxuICAgIDIwOCxcbiAgICAyMTUsXG4gICAgMTAyLFxuICAgIDMyNzY3LFxuICAgIDU0MyxcbiAgICA1NDQsXG4gICAgMjE1LFxuICAgIDEwMixcbiAgICAyMTksXG4gICAgMjE5LFxuICAgIDIxOSxcbiAgICAyMzksXG4gICAgMjM5LFxuICAgIDQ3MCxcbiAgICAzMDQsXG4gICAgMTAyLFxuICAgIDEwMCxcbiAgICAxMDIsXG4gICAgMTAyLFxuICAgIDE5NixcbiAgICAzMDQsXG4gICAgMzA0LFxuICAgIDMyNzY3LFxuICAgIDEwMixcbiAgICA0NzAsXG4gICAgMzA0LFxuICAgIDQ3MCxcbiAgICAzMDQsXG4gICAgMTk4LFxuICAgIDMwNCxcbiAgICAzMDQsXG4gICAgMzA0LFxuICAgIDQ3MCxcbiAgICAzMDQsXG4gICAgMzI3NjcsXG4gICAgMTAyLFxuICAgIDMwNCxcbiAgICAyMTAsXG4gICAgMTAwLFxuICAgIDEwMCxcbiAgICAzMDQsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNDgxLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDUxMSxcbiAgICAzMjc2NyxcbiAgICA1MjgsXG4gICAgNTQxLFxuICAgIDQxNyxcbiAgICA0MTgsXG4gICAgNDIwLFxuICAgIDUyNixcbiAgICA0NDIsXG4gICAgNDQzLFxuICAgIDQ0NCxcbiAgICA0NDUsXG4gICAgNDQ2LFxuICAgIDQ0NyxcbiAgICA0NDgsXG4gICAgNDUwLFxuICAgIDU3MyxcbiAgICAzMjc2NyxcbiAgICA0ODUsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI0LFxuICAgIDU4MyxcbiAgICAzMjc2NyxcbiAgICA1ODMsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNTg0LFxuICAgIDMyNzY3LFxuICAgIDUyNCxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA0MTYsXG4gICAgOSxcbiAgICA3NixcbiAgICA0MyxcbiAgICA0NCxcbiAgICA1MixcbiAgICA1OCxcbiAgICA1MDIsXG4gICAgNTAzLFxuICAgIDUwNCxcbiAgICA1MDUsXG4gICAgNDk5LFxuICAgIDUwMCxcbiAgICA1MDYsXG4gICAgNTAxLFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDUwNyxcbiAgICA1NDksXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNTI1LFxuICAgIDU3NixcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAxMzksXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgNTExLFxuICAgIDMyNzY3LFxuICAgIDEzNyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA1MjQsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzAwLFxuICAgIDMwMSxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICA1MjQsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMjgzLFxuICAgIDI4NCxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAyNzgsXG4gICAgMzI3NjcsXG4gICAgMzI3NjcsXG4gICAgMzY2LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDMyNzY3LFxuICAgIDM0NSxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAzMjc2NyxcbiAgICAxNTIsXG4gICAgMTUyLFxuICAgIDMsXG4gICAgMyxcbiAgICAzMjcsXG4gICAgMTUyLFxuICAgIDE1MixcbiAgICAxNTIsXG4gICAgMzI3LFxuICAgIDE1MixcbiAgICAzMjcsXG4gICAgMzI3LFxuICAgIDMyNyxcbiAgICAxNTIsXG4gICAgMTUyLFxuICAgIDE1MixcbiAgICAxNTIsXG4gICAgMTUyLFxuICAgIDE1MixcbiAgICAyNzIsXG4gICAgMTg0LFxuICAgIDI1NCxcbiAgICAyNTcsXG4gICAgMjM5LFxuICAgIDIzOSxcbiAgICAxNTIsXG4gICAgMzM3LFxuICAgIDE1MlxuXTtcblBIUC5QYXJzZXIucHJvdG90eXBlLnl5Z290byA9IFtcbiAgICAxOTQsXG4gICAgMTk0LFxuICAgIDY3MCxcbiAgICA0MjIsXG4gICAgNjQzLFxuICAgIDQ2MyxcbiAgICAxMjY0LFxuICAgIDEyNjUsXG4gICAgMTAyMixcbiAgICA0MTYsXG4gICAgMzA4LFxuICAgIDMwOSxcbiAgICAzMjksXG4gICAgNTYzLFxuICAgIDMxNCxcbiAgICA0MjEsXG4gICAgMzMwLFxuICAgIDQyMyxcbiAgICA2MjIsXG4gICAgODAxLFxuICAgIDY3OCxcbiAgICA2MzcsXG4gICAgNTg2LFxuICAgIDY1MSxcbiAgICA2NTIsXG4gICAgNjUzLFxuICAgIDE2NSxcbiAgICAxNjUsXG4gICAgMTY1LFxuICAgIDE2NSxcbiAgICAyMTgsXG4gICAgMTk1LFxuICAgIDE5MSxcbiAgICAxOTEsXG4gICAgMTc1LFxuICAgIDE3NyxcbiAgICAyMTMsXG4gICAgMTkxLFxuICAgIDE5MSxcbiAgICAxOTEsXG4gICAgMTkxLFxuICAgIDE5MSxcbiAgICAxOTIsXG4gICAgMTkyLFxuICAgIDE5MixcbiAgICAxOTIsXG4gICAgMTkyLFxuICAgIDE5MixcbiAgICAxODYsXG4gICAgMTg3LFxuICAgIDE4OCxcbiAgICAxODksXG4gICAgMTkwLFxuICAgIDIxNSxcbiAgICAyMTMsXG4gICAgMjE2LFxuICAgIDUyMSxcbiAgICA1MjIsXG4gICAgNDEyLFxuICAgIDUyMyxcbiAgICA1MjUsXG4gICAgNTI2LFxuICAgIDUyNyxcbiAgICA1MjgsXG4gICAgNTI5LFxuICAgIDUzMCxcbiAgICA1MzEsXG4gICAgNTMyLFxuICAgIDEwOTEsXG4gICAgMTY2LFxuICAgIDE2NyxcbiAgICAxNjgsXG4gICAgMTkzLFxuICAgIDE2OSxcbiAgICAxNzAsXG4gICAgMTcxLFxuICAgIDE2NCxcbiAgICAxNzIsXG4gICAgMTczLFxuICAgIDE3NCxcbiAgICAxNzYsXG4gICAgMjEyLFxuICAgIDIxNCxcbiAgICAyMTcsXG4gICAgMjM1LFxuICAgIDIzOCxcbiAgICAyNDEsXG4gICAgMjQyLFxuICAgIDI0NCxcbiAgICAyNTUsXG4gICAgMjU2LFxuICAgIDI1NyxcbiAgICAyNTgsXG4gICAgMjU5LFxuICAgIDI2MCxcbiAgICAyNjEsXG4gICAgMjYzLFxuICAgIDI2NCxcbiAgICAyNjUsXG4gICAgMjY2LFxuICAgIDI3NCxcbiAgICAyNzUsXG4gICAgMzExLFxuICAgIDMxMixcbiAgICAzMTMsXG4gICAgNDE3LFxuICAgIDQxOCxcbiAgICA0MTksXG4gICAgNTY4LFxuICAgIDIxOSxcbiAgICAyMjAsXG4gICAgMjIxLFxuICAgIDIyMixcbiAgICAyMjMsXG4gICAgMjI0LFxuICAgIDIyNSxcbiAgICAyMjYsXG4gICAgMjI3LFxuICAgIDIyOCxcbiAgICAyMjksXG4gICAgMjMwLFxuICAgIDIzMSxcbiAgICAyMzIsXG4gICAgMjMzLFxuICAgIDE3OCxcbiAgICAyMzQsXG4gICAgMTc5LFxuICAgIDE5NixcbiAgICAxOTcsXG4gICAgMTk4LFxuICAgIDIzNixcbiAgICAxODYsXG4gICAgMTg3LFxuICAgIDE4OCxcbiAgICAxODksXG4gICAgMTkwLFxuICAgIDIxNSxcbiAgICAxMDkxLFxuICAgIDE5OSxcbiAgICAxODAsXG4gICAgMTgxLFxuICAgIDE4MixcbiAgICAyMDAsXG4gICAgMTk2LFxuICAgIDE4MyxcbiAgICAyMzcsXG4gICAgMjAxLFxuICAgIDE5OSxcbiAgICAxNjMsXG4gICAgMjAyLFxuICAgIDIwMyxcbiAgICAxODQsXG4gICAgMjA0LFxuICAgIDIwNSxcbiAgICAyMDYsXG4gICAgMTg1LFxuICAgIDIwNyxcbiAgICAyMDgsXG4gICAgMjA5LFxuICAgIDIxMCxcbiAgICAyMTEsXG4gICAgMzIzLFxuICAgIDMyMyxcbiAgICAzMjMsXG4gICAgMzIzLFxuICAgIDgyNyxcbiAgICA2MDgsXG4gICAgNjA4LFxuICAgIDgyNCxcbiAgICA1NDcsXG4gICAgNTM4LFxuICAgIDM0MixcbiAgICAxMjIxLFxuICAgIDEyMjEsXG4gICAgMTIyMSxcbiAgICAxMjIxLFxuICAgIDEyMjEsXG4gICAgMTIyMSxcbiAgICAxMjIxLFxuICAgIDEyMjEsXG4gICAgMTIyMSxcbiAgICAxMjIxLFxuICAgIDEyMzksXG4gICAgMTIzOSxcbiAgICAyODgsXG4gICAgMjg4LFxuICAgIDI4OCxcbiAgICAyODgsXG4gICAgMTIzOSxcbiAgICAxMjM5LFxuICAgIDEyMzksXG4gICAgMTIzOSxcbiAgICAxMjM5LFxuICAgIDEyMzksXG4gICAgMTIzOSxcbiAgICAxMjM5LFxuICAgIDEyMzksXG4gICAgMTIzOSxcbiAgICAzODgsXG4gICAgNTM4LFxuICAgIDU0NyxcbiAgICA1NTYsXG4gICAgNTU3LFxuICAgIDM5NSxcbiAgICA1NjYsXG4gICAgNTg4LFxuICAgIDYwMixcbiAgICA2MDMsXG4gICAgODMyLFxuICAgIDgyNSxcbiAgICA4ODAsXG4gICAgODc1LFxuICAgIDg3NixcbiAgICA4ODksXG4gICAgMTUsXG4gICAgODMzLFxuICAgIDg3NyxcbiAgICA4MzAsXG4gICAgODc4LFxuICAgIDg3OSxcbiAgICA4MzEsXG4gICAgNzk5LFxuICAgIDI1MSxcbiAgICAyNTEsXG4gICAgODgzLFxuICAgIDkxOSxcbiAgICA5OTIsXG4gICAgMTAwMCxcbiAgICAxMDA0LFxuICAgIDEwMDEsXG4gICAgMTAwNSxcbiAgICAxMjM3LFxuICAgIDEyMzcsXG4gICAgOTM4LFxuICAgIDEwNDMsXG4gICAgMTAzOSxcbiAgICAxMDQwLFxuICAgIDEyMzcsXG4gICAgMTIzNyxcbiAgICAxMjM3LFxuICAgIDEyMzcsXG4gICAgMTIzNyxcbiAgICAxMjM3LFxuICAgIDEyMzcsXG4gICAgMTIzNyxcbiAgICAxMjM3LFxuICAgIDEyMzcsXG4gICAgODU4LFxuICAgIDI0OCxcbiAgICAyNDgsXG4gICAgMjQ4LFxuICAgIDI0OCxcbiAgICAyNTAsXG4gICAgMjUyLFxuICAgIDUzMyxcbiAgICA1MzMsXG4gICAgNTMzLFxuICAgIDUzMyxcbiAgICA0ODcsXG4gICAgNTkwLFxuICAgIDQ4OCxcbiAgICAxMTkwLFxuICAgIDExOTAsXG4gICAgOTk3LFxuICAgIDExOTAsXG4gICAgOTk3LFxuICAgIDQ5NCxcbiAgICAxMjkwLFxuICAgIDEyOTAsXG4gICAgNTYwLFxuICAgIDk5NyxcbiAgICA5OTcsXG4gICAgOTk3LFxuICAgIDk5NyxcbiAgICA5OTcsXG4gICAgOTk3LFxuICAgIDk5NyxcbiAgICA5OTcsXG4gICAgOTk3LFxuICAgIDk5NyxcbiAgICA5OTcsXG4gICAgOTk3LFxuICAgIDEyNjEsXG4gICAgMTI2MSxcbiAgICAxMjkwLFxuICAgIDEyNjEsXG4gICAgMzQwLFxuICAgIDExOTAsXG4gICAgOTMwLFxuICAgIDQwMixcbiAgICA2NzcsXG4gICAgMTI3OSxcbiAgICAxMTkwLFxuICAgIDExOTAsXG4gICAgMTE5MCxcbiAgICAxMTkwLFxuICAgIDk1OSxcbiAgICAzNDUsXG4gICAgMTE5MCxcbiAgICAxMTkwLFxuICAgIDExOTAsXG4gICAgMTI3MSxcbiAgICAxMjcxLFxuICAgIDEyNzEsXG4gICAgMTI3MSxcbiAgICA2MDYsXG4gICAgNjQwLFxuICAgIDM0NSxcbiAgICAzNDUsXG4gICAgMTI3MyxcbiAgICAxMjczLFxuICAgIDEyNzMsXG4gICAgMTI3MyxcbiAgICA4MjAsXG4gICAgODIwLFxuICAgIDgwNSxcbiAgICA4OTYsXG4gICAgODg0LFxuICAgIDg0MCxcbiAgICA4ODUsXG4gICAgODk3LFxuICAgIDM0NSxcbiAgICAzNDUsXG4gICAgNSxcbiAgICAzNDUsXG4gICAgNixcbiAgICAxMzA2LFxuICAgIDM4NCxcbiAgICA1MzUsXG4gICAgNTM1LFxuICAgIDU1OSxcbiAgICA1MzUsXG4gICAgNDE1LFxuICAgIDg1MixcbiAgICA1OTcsXG4gICAgMTI1NyxcbiAgICA4MzksXG4gICAgNTQwLFxuICAgIDUyNCxcbiAgICA1MjQsXG4gICAgMzQ1LFxuICAgIDEyODksXG4gICAgMTI4OSxcbiAgICA2NDIsXG4gICAgNTI0LFxuICAgIDUyNCxcbiAgICA1MjQsXG4gICAgNTI0LFxuICAgIDUyNCxcbiAgICA1MjQsXG4gICAgNTI0LFxuICAgIDUyNCxcbiAgICA1MjQsXG4gICAgNTI0LFxuICAgIDQ0NSxcbiAgICA4MDUsXG4gICAgMTE0MCxcbiAgICA4MDUsXG4gICAgMTI4OSxcbiAgICA5MzIsXG4gICAgOTMyLFxuICAgIDkzMixcbiAgICA5MzIsXG4gICAgMTA2MyxcbiAgICAxMDY0LFxuICAgIDQ0NSxcbiAgICA5MjYsXG4gICAgOTMzLFxuICAgIDM4NixcbiAgICAzOTAsXG4gICAgNTQ4LFxuICAgIDU4NyxcbiAgICA1OTEsXG4gICAgMTAzMCxcbiAgICAxMjkyLFxuICAgIDMzMSxcbiAgICA1NTQsXG4gICAgMTI1OSxcbiAgICAxMjU5LFxuICAgIDEwMzAsXG4gICAgNzA0LFxuICAgIDYyMSxcbiAgICA2MjMsXG4gICAgODIzLFxuICAgIDY0MSxcbiAgICAxMjUwLFxuICAgIDMxOSxcbiAgICAzMDMsXG4gICAgNjYwLFxuICAgIDY2NCxcbiAgICA5NzMsXG4gICAgNjY4LFxuICAgIDY3NixcbiAgICA5NjksXG4gICAgNDI5LFxuICAgIDU1MyxcbiAgICA5NjIsXG4gICAgOTM2LFxuICAgIDkzNixcbiAgICA5MzQsXG4gICAgOTM2LFxuICAgIDcwMyxcbiAgICA2MDEsXG4gICAgNTM3LFxuICAgIDk3MSxcbiAgICA5NjYsXG4gICAgMzQzLFxuICAgIDM0NCxcbiAgICA2NjMsXG4gICAgODE3LFxuICAgIDU5NSxcbiAgICA2MDksXG4gICAgNjEyLFxuICAgIDYxMyxcbiAgICA2MTQsXG4gICAgNjE1LFxuICAgIDYzNCxcbiAgICA2MzUsXG4gICAgNjM2LFxuICAgIDY4MCxcbiAgICA0MzksXG4gICAgMTE4NixcbiAgICA4NDUsXG4gICAgNDU0LFxuICAgIDQ1NCxcbiAgICA0MzksXG4gICAgNDM5LFxuICAgIDEyNjYsXG4gICAgMTI2NyxcbiAgICA4MjAsXG4gICAgOTAxLFxuICAgIDEwNzksXG4gICAgNDU0LFxuICAgIDM5NCxcbiAgICA1MzksXG4gICAgNTUxLFxuICAgIDExODMsXG4gICAgNjA1LFxuICAgIDU0MCxcbiAgICA1MzksXG4gICAgODQyLFxuICAgIDU1MSxcbiAgICA5NzgsXG4gICAgMjcyLFxuICAgIDM4NyxcbiAgICA2MTgsXG4gICAgNjE5LFxuICAgIDk4MSxcbiAgICA1MzYsXG4gICAgNTM2LFxuICAgIDg0NCxcbiAgICA3MDcsXG4gICAgNjQ2LFxuICAgIDk1NyxcbiAgICA1NjcsXG4gICAgNDU3LFxuICAgIDQ1OCxcbiAgICA0NTksXG4gICAgODM4LFxuICAgIDg1MCxcbiAgICAyNTQsXG4gICAgMjU0LFxuICAgIDEyOTcsXG4gICAgMTI5OCxcbiAgICA0MDAsXG4gICAgNDAxLFxuICAgIDk3NixcbiAgICA5NzYsXG4gICAgNDY0LFxuICAgIDY0OSxcbiAgICAxMTgyLFxuICAgIDY1MCxcbiAgICAxMDI4LFxuICAgIDQwNCxcbiAgICA0MDUsXG4gICAgNDA2LFxuICAgIDExODcsXG4gICAgNjYxLFxuICAgIDQyNCxcbiAgICAxMDMyLFxuICAgIDQwNyxcbiAgICA1NjQsXG4gICAgNjAwLFxuICAgIDgxNSxcbiAgICAzMzgsXG4gICAgNDI0LFxuICAgIDg1NCxcbiAgICA4NDgsXG4gICAgODUzLFxuICAgIDg0MSxcbiAgICAxMDI3LFxuICAgIDEwMzEsXG4gICAgMTAwOSxcbiAgICAxMDAyLFxuICAgIDEwMDYsXG4gICAgMTAwMyxcbiAgICAxMDA3LFxuICAgIDExODUsXG4gICAgOTQxLFxuICAgIDExODgsXG4gICAgMTI0NyxcbiAgICAxMjQ4LFxuICAgIDk0MyxcbiAgICAwLFxuICAgIDEwNzQsXG4gICAgNDM5LFxuICAgIDQzOSxcbiAgICA0MzksXG4gICAgNDM5LFxuICAgIDQzOSxcbiAgICA0MzksXG4gICAgNDM5LFxuICAgIDQzOSxcbiAgICA0MzksXG4gICAgNDM5LFxuICAgIDQzOSxcbiAgICAwLFxuICAgIDQ2OCxcbiAgICA0MzksXG4gICAgNTg1LFxuICAgIDEwNTYsXG4gICAgOTMxLFxuICAgIDY4MSxcbiAgICA2NjcsXG4gICAgNjY3LFxuICAgIDAsXG4gICAgNDk1LFxuICAgIDY3MyxcbiAgICAxMDU0LFxuICAgIDExNzEsXG4gICAgOTEyLFxuICAgIDAsXG4gICAgMCxcbiAgICAxMTcyLFxuICAgIDExNzUsXG4gICAgOTEzLFxuICAgIDExNzYsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMTA3MixcbiAgICA4NTdcbl07XG5QSFAuUGFyc2VyLnByb3RvdHlwZS55eWdjaGVjayA9IFtcbiAgICA0MixcbiAgICA0MixcbiAgICA3MixcbiAgICA2NSxcbiAgICA2NSxcbiAgICAxNjYsXG4gICAgMTY2LFxuICAgIDE2NixcbiAgICAxMTksXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNjUsXG4gICAgNyxcbiAgICA5LFxuICAgIDg0LFxuICAgIDEyMixcbiAgICA4NCxcbiAgICA4NCxcbiAgICA4NCxcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICA0MixcbiAgICAyMyxcbiAgICAyMyxcbiAgICAyMyxcbiAgICAyMyxcbiAgICAxNSxcbiAgICAxMDQsXG4gICAgMTA0LFxuICAgIDI2LFxuICAgIDc1LFxuICAgIDc1LFxuICAgIDkzLFxuICAgIDEwNCxcbiAgICAxMDQsXG4gICAgMTA0LFxuICAgIDEwNCxcbiAgICAxMDQsXG4gICAgMTA0LFxuICAgIDEwNCxcbiAgICAxMDQsXG4gICAgMTA0LFxuICAgIDEwNCxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDI0LFxuICAgIDI0LFxuICAgIDI0LFxuICAgIDI0LFxuICAgIDE2MCxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NSxcbiAgICAxNSxcbiAgICAyNyxcbiAgICAxNSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICA3NSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICAxNSxcbiAgICA2LFxuICAgIDUsXG4gICAgNSxcbiAgICAxNSxcbiAgICA4NyxcbiAgICA4NyxcbiAgICA4NyxcbiAgICA4NyxcbiAgICA4NyxcbiAgICA4NyxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDQ5LFxuICAgIDE1LFxuICAgIDE1LFxuICAgIDE1LFxuICAgIDE2MSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDE2MSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDE2MSxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDE2MSxcbiAgICA0NSxcbiAgICA1LFxuICAgIDUsXG4gICAgNSxcbiAgICA1LFxuICAgIDUsXG4gICAgNSxcbiAgICAxMDMsXG4gICAgMTAzLFxuICAgIDEwMyxcbiAgICAxMDMsXG4gICAgMTQ3LFxuICAgIDEwMyxcbiAgICAxNDcsXG4gICAgNzIsXG4gICAgNzIsXG4gICAgNzIsXG4gICAgNzIsXG4gICAgNzIsXG4gICAgMTQ3LFxuICAgIDE3MyxcbiAgICAxNzMsXG4gICAgMTYyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDEyMixcbiAgICAxMjIsXG4gICAgMTczLFxuICAgIDEyMixcbiAgICAxNjksXG4gICAgNzIsXG4gICAgODksXG4gICAgODksXG4gICAgODksXG4gICAgMTcxLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDk5LFxuICAgIDE0LFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDksXG4gICAgOSxcbiAgICA5LFxuICAgIDksXG4gICAgNTUsXG4gICAgNTUsXG4gICAgMTQsXG4gICAgMTQsXG4gICAgMTIyLFxuICAgIDEyMixcbiAgICAxMjIsXG4gICAgMTIyLFxuICAgIDIyLFxuICAgIDIyLFxuICAgIDEyLFxuICAgIDcyLFxuICAgIDY0LFxuICAgIDM1LFxuICAgIDY0LFxuICAgIDcyLFxuICAgIDE0LFxuICAgIDE0LFxuICAgIDQ2LFxuICAgIDE0LFxuICAgIDQ2LFxuICAgIDE0LFxuICAgIDYxLFxuICAgIDE5LFxuICAgIDE5LFxuICAgIDEwMCxcbiAgICAxOSxcbiAgICAxMyxcbiAgICAzNSxcbiAgICAxMyxcbiAgICAxMjIsXG4gICAgMzUsXG4gICAgMTQsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNCxcbiAgICAxNzIsXG4gICAgMTcyLFxuICAgIDYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxOSxcbiAgICAxMixcbiAgICAxNDMsXG4gICAgMTIsXG4gICAgMTcyLFxuICAgIDE5LFxuICAgIDE5LFxuICAgIDE5LFxuICAgIDE5LFxuICAgIDEzNixcbiAgICAxMzYsXG4gICAgMTksXG4gICAgMTksXG4gICAgMTksXG4gICAgNTgsXG4gICAgNTgsXG4gICAgNTgsXG4gICAgNTgsXG4gICAgNTgsXG4gICAgMTIyLFxuICAgIDE3MixcbiAgICAyOSxcbiAgICA0OCxcbiAgICAxMjIsXG4gICAgMTIyLFxuICAgIDEyMixcbiAgICA0OCxcbiAgICA0OCxcbiAgICA0OCxcbiAgICAyNSxcbiAgICA0OCxcbiAgICAxNCxcbiAgICAxNTksXG4gICAgMTU5LFxuICAgIDQ4LFxuICAgIDQ4LFxuICAgIDQ4LFxuICAgIDQ4LFxuICAgIDQ4LFxuICAgIDQ4LFxuICAgIDEwOSxcbiAgICA5LFxuICAgIDI1LFxuICAgIDI1LFxuICAgIDI1LFxuICAgIDI1LFxuICAgIDI1LFxuICAgIDI1LFxuICAgIDksXG4gICAgMjUsXG4gICAgMjUsXG4gICAgMjUsXG4gICAgOTMsXG4gICAgOTMsXG4gICAgMTQsXG4gICAgMTgsXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgNzksXG4gICAgMjMsXG4gICAgMjAsXG4gICAgMzksXG4gICAgMTQxLFxuICAgIDE0MSxcbiAgICAyMyxcbiAgICAyMyxcbiAgICAxNjgsXG4gICAgMTY4LFxuICAgIDIyLFxuICAgIDE3LFxuICAgIDE3LFxuICAgIDE0MSxcbiAgICAyOCxcbiAgICA5LFxuICAgIDksXG4gICAgMTUyLFxuICAgIDE3LFxuICAgIDE0LFxuICAgIDksXG4gICAgMzcsXG4gICAgOSxcbiAgICAxNyxcbiAgICAyNCxcbiAgICA5LFxuICAgIDgzLFxuICAgIDgzLFxuICAgIDEwNixcbiAgICAyNCxcbiAgICAyNCxcbiAgICAxNyxcbiAgICA5NSxcbiAgICAxNyxcbiAgICAxNyxcbiAgICA5LFxuICAgIDksXG4gICAgOSxcbiAgICA5LFxuICAgIDE3LFxuICAgIDksXG4gICAgNSxcbiAgICA1LFxuICAgIDksXG4gICAgOSxcbiAgICA4MCxcbiAgICA4MCxcbiAgICAxMDMsXG4gICAgMTAzLFxuICAgIDE0OSxcbiAgICA4MCxcbiAgICAxNyxcbiAgICA4MCxcbiAgICAxMjEsXG4gICAgODAsXG4gICAgODAsXG4gICAgODAsXG4gICAgMjAsXG4gICAgODAsXG4gICAgMTEzLFxuICAgIDEyNCxcbiAgICA4MCxcbiAgICAyLFxuICAgIDIsXG4gICAgMjAsXG4gICAgODAsXG4gICAgMTEzLFxuICAgIDQxLFxuICAgIDksXG4gICAgMTYsXG4gICAgMTYsXG4gICAgMTYsXG4gICAgMTYsXG4gICAgMTEzLFxuICAgIDExMyxcbiAgICAxMTMsXG4gICAgMTEzLFxuICAgIDExMyxcbiAgICAxNCxcbiAgICAxNixcbiAgICAyMCxcbiAgICAyMCxcbiAgICAyMCxcbiAgICA5MixcbiAgICAtMSxcbiAgICAxMzksXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgMjMsXG4gICAgLTEsXG4gICAgODIsXG4gICAgMjMsXG4gICAgOCxcbiAgICA4LFxuICAgIDE2LFxuICAgIDgsXG4gICAgOCxcbiAgICA4LFxuICAgIC0xLFxuICAgIDgsXG4gICAgOCxcbiAgICA4LFxuICAgIDc4LFxuICAgIDc4LFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDc4LFxuICAgIDc4LFxuICAgIDc4LFxuICAgIDc4LFxuICAgIC0xLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIC0xLFxuICAgIDE2LFxuICAgIDE2XG5dO1xuUEhQLlBhcnNlci5wcm90b3R5cGUueXlnYmFzZSA9IFtcbiAgICAwLFxuICAgIDAsXG4gICAgLTIwMyxcbiAgICAwLFxuICAgIDAsXG4gICAgMjIxLFxuICAgIDIwOCxcbiAgICAxMCxcbiAgICA1MTIsXG4gICAgNyxcbiAgICAwLFxuICAgIDAsXG4gICAgMjQsXG4gICAgMSxcbiAgICA1LFxuICAgIC0xNzQsXG4gICAgNDcsXG4gICAgLTIzLFxuICAgIDEwNSxcbiAgICA2MSxcbiAgICAzOCxcbiAgICAwLFxuICAgIC0xMCxcbiAgICAxNTgsXG4gICAgMTgxLFxuICAgIDM3OSxcbiAgICAxNjQsXG4gICAgMjA1LFxuICAgIDEwMixcbiAgICA4NCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgLTQzLFxuICAgIDAsXG4gICAgMTA3LFxuICAgIDAsXG4gICAgMTA0LFxuICAgIDAsXG4gICAgNTQsXG4gICAgLTEsXG4gICAgMCxcbiAgICAwLFxuICAgIDIzNSxcbiAgICAtMzg0LFxuICAgIDAsXG4gICAgLTMwNyxcbiAgICAyMTAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDI2NixcbiAgICAwLFxuICAgIDAsXG4gICAgMzI0LFxuICAgIDAsXG4gICAgMCxcbiAgICAyODYsXG4gICAgMCxcbiAgICAxMDMsXG4gICAgMjk4LFxuICAgIC0yMzYsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgLTYsXG4gICAgMCxcbiAgICAwLFxuICAgIC0xNjcsXG4gICAgMCxcbiAgICAwLFxuICAgIDEyOSxcbiAgICA2MixcbiAgICAtMTQsXG4gICAgMCxcbiAgICA1MyxcbiAgICAtMjIsXG4gICAgLTY2OSxcbiAgICAwLFxuICAgIDAsXG4gICAgLTUyLFxuICAgIDAsXG4gICAgLTExLFxuICAgIDAsXG4gICAgMCxcbiAgICA2OCxcbiAgICAtMjk5LFxuICAgIDAsXG4gICAgNTIsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMjYyLFxuICAgIDI4OCxcbiAgICAwLFxuICAgIDAsXG4gICAgMjI3LFxuICAgIC03MyxcbiAgICAwLFxuICAgIDg3LFxuICAgIDAsXG4gICAgMCxcbiAgICAxMTgsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMjA5LFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICA2LFxuICAgIDAsXG4gICAgMTA4LFxuICAgIDE1LFxuICAgIDAsXG4gICAgNDYsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDkxLFxuICAgIDAsXG4gICAgMCxcbiAgICA2OSxcbiAgICAwLFxuICAgIDM5MCxcbiAgICAwLFxuICAgIDg2LFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIC0yMjQsXG4gICAgMCxcbiAgICAzNyxcbiAgICAwLFxuICAgIDAsXG4gICAgNzcsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgMCxcbiAgICAwLFxuICAgIDAsXG4gICAgNzAsXG4gICAgLTU3LFxuICAgIC04LFxuICAgIDI0MSxcbiAgICA5OSxcbiAgICAwLFxuICAgIDAsXG4gICAgLTI5MCxcbiAgICAwLFxuICAgIDY1LFxuICAgIDI1NyxcbiAgICAwLFxuICAgIDI2MSxcbiAgICAzOSxcbiAgICAtMzUsXG4gICAgMCxcbiAgICAwXG5dO1xuUEhQLlBhcnNlci5wcm90b3R5cGUueXlnZGVmYXVsdCA9IFtcbiAgICAtMzI3NjgsXG4gICAgNDk5LFxuICAgIDcxMSxcbiAgICA0LFxuICAgIDcxMixcbiAgICA5MDUsXG4gICAgNzg4LFxuICAgIDc5NyxcbiAgICA1ODMsXG4gICAgNTE1LFxuICAgIDY3OSxcbiAgICAzMzksXG4gICAgNjEwLFxuICAgIDQxMyxcbiAgICAxMjU1LFxuICAgIDg4MixcbiAgICAxMDc4LFxuICAgIDU2NSxcbiAgICA4MTYsXG4gICAgMTE5OSxcbiAgICAxMjA3LFxuICAgIDQ0NixcbiAgICA4MTksXG4gICAgMzI0LFxuICAgIDcwMSxcbiAgICA4NjQsXG4gICAgODY1LFxuICAgIDg2NixcbiAgICAzOTEsXG4gICAgMzc2LFxuICAgIDM4MixcbiAgICAzODksXG4gICAgNjMyLFxuICAgIDYxMSxcbiAgICA0ODEsXG4gICAgODUxLFxuICAgIDQ0MixcbiAgICA4NDMsXG4gICAgNDczLFxuICAgIDg0NixcbiAgICA0NDEsXG4gICAgODU1LFxuICAgIDE2MixcbiAgICA0MTAsXG4gICAgNDk3LFxuICAgIDg1OSxcbiAgICAzLFxuICAgIDg2MSxcbiAgICA1NDIsXG4gICAgODkyLFxuICAgIDM3NyxcbiAgICA4NjksXG4gICAgMzc4LFxuICAgIDY1NixcbiAgICA4NzEsXG4gICAgNTUwLFxuICAgIDg3MyxcbiAgICA4NzQsXG4gICAgMzg1LFxuICAgIDM5MixcbiAgICAzOTMsXG4gICAgMTA4MyxcbiAgICA1NTgsXG4gICAgNjA3LFxuICAgIDg4NixcbiAgICAyNDMsXG4gICAgNTUyLFxuICAgIDg4NyxcbiAgICAzNzUsXG4gICAgODg4LFxuICAgIDg5NSxcbiAgICAzODAsXG4gICAgMzgzLFxuICAgIDY2NSxcbiAgICA0NTMsXG4gICAgNDkyLFxuICAgIDQ4NixcbiAgICA0MDMsXG4gICAgMTA1OCxcbiAgICA1OTQsXG4gICAgNjI5LFxuICAgIDQ1MCxcbiAgICA0NjcsXG4gICAgNjE3LFxuICAgIDYxNixcbiAgICA2MDQsXG4gICAgNDY2LFxuICAgIDQyNSxcbiAgICA0MDgsXG4gICAgOTI4LFxuICAgIDQ3NCxcbiAgICA0NTEsXG4gICAgOTQyLFxuICAgIDM0MSxcbiAgICA5NTAsXG4gICAgNzA5LFxuICAgIDEwOTAsXG4gICAgNjI0LFxuICAgIDQ3NixcbiAgICA5NTgsXG4gICAgNjI1LFxuICAgIDk2NSxcbiAgICA5NjgsXG4gICAgNTE2LFxuICAgIDUxNyxcbiAgICA0NjUsXG4gICAgOTgwLFxuICAgIDI2OSxcbiAgICA5ODMsXG4gICAgNDc3LFxuICAgIDEwMTUsXG4gICAgNjQ3LFxuICAgIDY0OCxcbiAgICA5OTUsXG4gICAgNjI2LFxuICAgIDYyNyxcbiAgICAxMDEzLFxuICAgIDQ2MCxcbiAgICA1ODQsXG4gICAgMTAyMSxcbiAgICA0NDMsXG4gICAgMTAyOSxcbiAgICAxMjQzLFxuICAgIDQ0NCxcbiAgICAxMDMzLFxuICAgIDI2MixcbiAgICAxMDM2LFxuICAgIDI3NixcbiAgICA0MDksXG4gICAgNDI2LFxuICAgIDEwNDEsXG4gICAgMTA0MixcbiAgICA4LFxuICAgIDEwNDgsXG4gICAgNjcxLFxuICAgIDY3MixcbiAgICAxMCxcbiAgICAyNzMsXG4gICAgNDk2LFxuICAgIDEwNzMsXG4gICAgNjY2LFxuICAgIDQ0MCxcbiAgICAxMDg5LFxuICAgIDQzMCxcbiAgICAxMTU5LFxuICAgIDExNjEsXG4gICAgNTQ0LFxuICAgIDQ3OCxcbiAgICAxMTc5LFxuICAgIDExNzgsXG4gICAgNjU5LFxuICAgIDQ5MyxcbiAgICAxMTg0LFxuICAgIDEyNDYsXG4gICAgNDM4LFxuICAgIDUxOCxcbiAgICA0NjEsXG4gICAgMzEwLFxuICAgIDUxOSxcbiAgICAzMDIsXG4gICAgMzI3LFxuICAgIDMwNyxcbiAgICA1MzQsXG4gICAgMjg5LFxuICAgIDMyOCxcbiAgICA1MjAsXG4gICAgNDYyLFxuICAgIDEyNTIsXG4gICAgMTI2MCxcbiAgICAzMjUsXG4gICAgMzAsXG4gICAgMTI4MCxcbiAgICAxMjkxLFxuICAgIDMzNSxcbiAgICA1NjIsXG4gICAgNTk5XG5dO1xuUEhQLlBhcnNlci5wcm90b3R5cGUueXlsaHMgPSBbXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDUsXG4gICAgNSxcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNixcbiAgICA2LFxuICAgIDYsXG4gICAgNyxcbiAgICA3LFxuICAgIDcsXG4gICAgNyxcbiAgICA3LFxuICAgIDcsXG4gICAgNyxcbiAgICA3LFxuICAgIDgsXG4gICAgOCxcbiAgICA5LFxuICAgIDEwLFxuICAgIDExLFxuICAgIDExLFxuICAgIDExLFxuICAgIDEyLFxuICAgIDEyLFxuICAgIDEzLFxuICAgIDEzLFxuICAgIDE0LFxuICAgIDE1LFxuICAgIDE1LFxuICAgIDE2LFxuICAgIDE2LFxuICAgIDE3LFxuICAgIDE3LFxuICAgIDE4LFxuICAgIDE4LFxuICAgIDIxLFxuICAgIDIxLFxuICAgIDIyLFxuICAgIDIzLFxuICAgIDIzLFxuICAgIDI0LFxuICAgIDI0LFxuICAgIDQsXG4gICAgNCxcbiAgICA0LFxuICAgIDQsXG4gICAgNCxcbiAgICA0LFxuICAgIDQsXG4gICAgNCxcbiAgICA0LFxuICAgIDQsXG4gICAgNCxcbiAgICAyOSxcbiAgICAyOSxcbiAgICAzMCxcbiAgICAzMCxcbiAgICAzMixcbiAgICAzNCxcbiAgICAzNCxcbiAgICAyOCxcbiAgICAzNixcbiAgICAzNixcbiAgICAzMyxcbiAgICAzOCxcbiAgICAzOCxcbiAgICAzNSxcbiAgICAzNSxcbiAgICAzNyxcbiAgICAzNyxcbiAgICAzOSxcbiAgICAzOSxcbiAgICAzMSxcbiAgICA0MCxcbiAgICA0MCxcbiAgICA0MSxcbiAgICA0MyxcbiAgICA0NCxcbiAgICA0NCxcbiAgICA0NSxcbiAgICA0NixcbiAgICA0NixcbiAgICA0OCxcbiAgICA0NyxcbiAgICA0NyxcbiAgICA0NyxcbiAgICA0NyxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICA0OSxcbiAgICAyNSxcbiAgICAyNSxcbiAgICA2OCxcbiAgICA2OCxcbiAgICA3MSxcbiAgICA3MSxcbiAgICA3MCxcbiAgICA2OSxcbiAgICA2OSxcbiAgICA2MixcbiAgICA3NCxcbiAgICA3NCxcbiAgICA3NSxcbiAgICA3NSxcbiAgICA3NixcbiAgICA3NixcbiAgICA3NyxcbiAgICA3NyxcbiAgICA3OCxcbiAgICA3OCxcbiAgICAyNixcbiAgICAyNixcbiAgICAyNyxcbiAgICAyNyxcbiAgICAyNyxcbiAgICAyNyxcbiAgICA4NixcbiAgICA4NixcbiAgICA4OCxcbiAgICA4OCxcbiAgICA4MSxcbiAgICA4MSxcbiAgICA4MSxcbiAgICA4MixcbiAgICA4MixcbiAgICA4NSxcbiAgICA4NSxcbiAgICA4MyxcbiAgICA4MyxcbiAgICA4OSxcbiAgICA5MCxcbiAgICA5MCxcbiAgICA1NixcbiAgICA1NixcbiAgICA2NCxcbiAgICA2NCxcbiAgICA2NyxcbiAgICA2NyxcbiAgICA2NyxcbiAgICA2NixcbiAgICA5MSxcbiAgICA5MSxcbiAgICA5MixcbiAgICA1NyxcbiAgICA1NyxcbiAgICA1NyxcbiAgICA1NyxcbiAgICA5MyxcbiAgICA5MyxcbiAgICA5NCxcbiAgICA5NCxcbiAgICA5NSxcbiAgICA5NSxcbiAgICA5NixcbiAgICA5NyxcbiAgICA5NyxcbiAgICA5OCxcbiAgICA5OCxcbiAgICA5OSxcbiAgICA5OSxcbiAgICA1NCxcbiAgICA1NCxcbiAgICA1MCxcbiAgICA1MCxcbiAgICAxMDEsXG4gICAgNTIsXG4gICAgNTIsXG4gICAgMTAyLFxuICAgIDUxLFxuICAgIDUxLFxuICAgIDUzLFxuICAgIDUzLFxuICAgIDYzLFxuICAgIDYzLFxuICAgIDYzLFxuICAgIDYzLFxuICAgIDc5LFxuICAgIDc5LFxuICAgIDEwNSxcbiAgICAxMDUsXG4gICAgMTA3LFxuICAgIDEwNyxcbiAgICAxMDgsXG4gICAgMTA4LFxuICAgIDEwOCxcbiAgICAxMDgsXG4gICAgMTA2LFxuICAgIDEwNixcbiAgICAxMDYsXG4gICAgMTEwLFxuICAgIDExMCxcbiAgICAxMTAsXG4gICAgMTEwLFxuICAgIDg3LFxuICAgIDg3LFxuICAgIDExMyxcbiAgICAxMTMsXG4gICAgMTEzLFxuICAgIDExMSxcbiAgICAxMTEsXG4gICAgMTE0LFxuICAgIDExNCxcbiAgICAxMTIsXG4gICAgMTEyLFxuICAgIDExNSxcbiAgICAxMTUsXG4gICAgMTE2LFxuICAgIDExNixcbiAgICAxMTYsXG4gICAgMTE2LFxuICAgIDEwOSxcbiAgICAxMDksXG4gICAgODAsXG4gICAgODAsXG4gICAgODAsXG4gICAgMjAsXG4gICAgMjAsXG4gICAgMjAsXG4gICAgMTE4LFxuICAgIDExNyxcbiAgICAxMTcsXG4gICAgMTE5LFxuICAgIDExOSxcbiAgICAxMTksXG4gICAgMTE5LFxuICAgIDU5LFxuICAgIDEyMCxcbiAgICAxMjAsXG4gICAgMTIxLFxuICAgIDYwLFxuICAgIDEyMyxcbiAgICAxMjMsXG4gICAgMTI0LFxuICAgIDEyNCxcbiAgICAxMjUsXG4gICAgMTI1LFxuICAgIDg0LFxuICAgIDEyNixcbiAgICAxMjYsXG4gICAgMTI2LFxuICAgIDEyNixcbiAgICAxMjYsXG4gICAgMTI2LFxuICAgIDEzMSxcbiAgICAxMzEsXG4gICAgMTMyLFxuICAgIDEzMixcbiAgICAxMzMsXG4gICAgMTMzLFxuICAgIDEzMyxcbiAgICAxMzMsXG4gICAgMTMzLFxuICAgIDEzNCxcbiAgICAxMzUsXG4gICAgMTM1LFxuICAgIDEzMCxcbiAgICAxMzAsXG4gICAgMTI3LFxuICAgIDEyNyxcbiAgICAxMjksXG4gICAgMTI5LFxuICAgIDEzNyxcbiAgICAxMzcsXG4gICAgMTM2LFxuICAgIDEzNixcbiAgICAxMzYsXG4gICAgMTM2LFxuICAgIDEzNixcbiAgICAxMzYsXG4gICAgMTM2LFxuICAgIDEyOCxcbiAgICAxMzgsXG4gICAgMTM4LFxuICAgIDE0MCxcbiAgICAxMzksXG4gICAgMTM5LFxuICAgIDYxLFxuICAgIDEwMCxcbiAgICAxNDEsXG4gICAgMTQxLFxuICAgIDU1LFxuICAgIDU1LFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDQyLFxuICAgIDE0OCxcbiAgICAxNDIsXG4gICAgMTQyLFxuICAgIDE0NyxcbiAgICAxNDcsXG4gICAgMTUwLFxuICAgIDE1MSxcbiAgICAxNTEsXG4gICAgMTUyLFxuICAgIDE1MyxcbiAgICAxNTMsXG4gICAgMTUzLFxuICAgIDE5LFxuICAgIDE5LFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDcyLFxuICAgIDE0MyxcbiAgICAxNDMsXG4gICAgMTQzLFxuICAgIDE0MyxcbiAgICAxNTUsXG4gICAgMTU1LFxuICAgIDE0NCxcbiAgICAxNDQsXG4gICAgMTQ2LFxuICAgIDE0NixcbiAgICAxNDYsXG4gICAgMTQ5LFxuICAgIDE0OSxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxNjAsXG4gICAgMTYwLFxuICAgIDE2MCxcbiAgICAxNjEsXG4gICAgMTYxLFxuICAgIDEwNCxcbiAgICAxNjMsXG4gICAgMTYzLFxuICAgIDE2MyxcbiAgICAxNjMsXG4gICAgMTQ1LFxuICAgIDE0NSxcbiAgICAxNDUsXG4gICAgMTQ1LFxuICAgIDE0NSxcbiAgICAxNDUsXG4gICAgMTQ1LFxuICAgIDE0NSxcbiAgICA1OCxcbiAgICA1OCxcbiAgICAxNTgsXG4gICAgMTU4LFxuICAgIDE1OCxcbiAgICAxNTgsXG4gICAgMTY0LFxuICAgIDE2NCxcbiAgICAxNTQsXG4gICAgMTU0LFxuICAgIDE1NCxcbiAgICAxNjUsXG4gICAgMTY1LFxuICAgIDE2NSxcbiAgICAxNjUsXG4gICAgMTY1LFxuICAgIDE2NSxcbiAgICA3MyxcbiAgICA3MyxcbiAgICA2NSxcbiAgICA2NSxcbiAgICA2NSxcbiAgICA2NSxcbiAgICAxMjIsXG4gICAgMTIyLFxuICAgIDEyMixcbiAgICAxMjIsXG4gICAgMTY4LFxuICAgIDE2NyxcbiAgICAxNTcsXG4gICAgMTU3LFxuICAgIDE1NyxcbiAgICAxNTcsXG4gICAgMTU3LFxuICAgIDE1NyxcbiAgICAxNTcsXG4gICAgMTU2LFxuICAgIDE1NixcbiAgICAxNTYsXG4gICAgMTY2LFxuICAgIDE2NixcbiAgICAxNjYsXG4gICAgMTY2LFxuICAgIDEwMyxcbiAgICAxNjIsXG4gICAgMTcwLFxuICAgIDE3MCxcbiAgICAxNjksXG4gICAgMTY5LFxuICAgIDE3MSxcbiAgICAxNzEsXG4gICAgMTcxLFxuICAgIDE3MSxcbiAgICAxNzEsXG4gICAgMTcxLFxuICAgIDE3MSxcbiAgICAxNzEsXG4gICAgMTU5LFxuICAgIDE1OSxcbiAgICAxNTksXG4gICAgMTU5LFxuICAgIDE3MyxcbiAgICAxNzQsXG4gICAgMTcyLFxuICAgIDE3MixcbiAgICAxNzIsXG4gICAgMTcyLFxuICAgIDE3MixcbiAgICAxNzIsXG4gICAgMTcyLFxuICAgIDE3MixcbiAgICAxNzUsXG4gICAgMTc1LFxuICAgIDE3NSxcbiAgICAxNzVcbl07XG5QSFAuUGFyc2VyLnByb3RvdHlwZS55eWxlbiA9IFtcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgMyxcbiAgICA0LFxuICAgIDEsXG4gICAgMixcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDUsXG4gICAgNCxcbiAgICAzLFxuICAgIDQsXG4gICAgMixcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICA3LFxuICAgIDYsXG4gICAgMixcbiAgICAzLFxuICAgIDEsXG4gICAgMixcbiAgICAzLFxuICAgIDEsXG4gICAgMixcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDIsXG4gICAgMixcbiAgICAzLFxuICAgIDEsXG4gICAgMyxcbiAgICAyLFxuICAgIDMsXG4gICAgMSxcbiAgICAzLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICA3LFxuICAgIDEwLFxuICAgIDUsXG4gICAgNyxcbiAgICA5LFxuICAgIDUsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMSxcbiAgICAyLFxuICAgIDUsXG4gICAgNyxcbiAgICA5LFxuICAgIDYsXG4gICAgNSxcbiAgICA2LFxuICAgIDMsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDgsXG4gICAgMCxcbiAgICA0LFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMCxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICA4LFxuICAgIDksXG4gICAgOCxcbiAgICA3LFxuICAgIDYsXG4gICAgOCxcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMixcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDIsXG4gICAgMCxcbiAgICAyLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgNCxcbiAgICAxLFxuICAgIDQsXG4gICAgMSxcbiAgICAxLFxuICAgIDQsXG4gICAgMixcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDQsXG4gICAgNCxcbiAgICA1LFxuICAgIDAsXG4gICAgMixcbiAgICA0LFxuICAgIDMsXG4gICAgMSxcbiAgICAxLFxuICAgIDcsXG4gICAgMCxcbiAgICAyLFxuICAgIDEsXG4gICAgMyxcbiAgICAzLFxuICAgIDQsXG4gICAgMSxcbiAgICA0LFxuICAgIDAsXG4gICAgMixcbiAgICA1LFxuICAgIDAsXG4gICAgMixcbiAgICA2LFxuICAgIDAsXG4gICAgMixcbiAgICAwLFxuICAgIDMsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDAsXG4gICAgMSxcbiAgICAzLFxuICAgIDAsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDYsXG4gICAgOCxcbiAgICA2LFxuICAgIDEsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAwLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDQsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDIsXG4gICAgMixcbiAgICAzLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMixcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDIsXG4gICAgMCxcbiAgICAxLFxuICAgIDUsXG4gICAgNSxcbiAgICAxMCxcbiAgICAzLFxuICAgIDUsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMCxcbiAgICAyLFxuICAgIDQsXG4gICAgNSxcbiAgICA0LFxuICAgIDQsXG4gICAgNCxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAxLFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDQsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAyLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDIsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDUsXG4gICAgNCxcbiAgICAzLFxuICAgIDQsXG4gICAgNCxcbiAgICAyLFxuICAgIDIsXG4gICAgNCxcbiAgICAyLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDIsXG4gICAgMixcbiAgICAyLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDIsXG4gICAgMSxcbiAgICAyLFxuICAgIDQsXG4gICAgMixcbiAgICAyLFxuICAgIDgsXG4gICAgOSxcbiAgICA4LFxuICAgIDksXG4gICAgOSxcbiAgICAxMCxcbiAgICA5LFxuICAgIDEwLFxuICAgIDgsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgNCxcbiAgICAyLFxuICAgIDEsXG4gICAgMyxcbiAgICAyLFxuICAgIDIsXG4gICAgMixcbiAgICA0LFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDAsXG4gICAgMyxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAwLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgNCxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAyLFxuICAgIDMsXG4gICAgMCxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAxLFxuICAgIDEsXG4gICAgNCxcbiAgICA0LFxuICAgIDEsXG4gICAgNCxcbiAgICA0LFxuICAgIDAsXG4gICAgMSxcbiAgICAxLFxuICAgIDEsXG4gICAgMyxcbiAgICAzLFxuICAgIDEsXG4gICAgNCxcbiAgICAyLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgNCxcbiAgICA0LFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICA0LFxuICAgIDEsXG4gICAgMSxcbiAgICAxLFxuICAgIDMsXG4gICAgMSxcbiAgICAxLFxuICAgIDIsXG4gICAgMSxcbiAgICAzLFxuICAgIDQsXG4gICAgMyxcbiAgICAyLFxuICAgIDAsXG4gICAgMixcbiAgICAyLFxuICAgIDEsXG4gICAgMixcbiAgICAxLFxuICAgIDEsXG4gICAgMSxcbiAgICA0LFxuICAgIDMsXG4gICAgMyxcbiAgICAzLFxuICAgIDMsXG4gICAgNixcbiAgICAzLFxuICAgIDEsXG4gICAgMSxcbiAgICAyLFxuICAgIDFcbl07XG5leHBvcnRzLmogPSBQSFA7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDc3NzA6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgVGs6ICgpID0+ICgvKiBiaW5kaW5nICovIGNoZWNrVmFsdWVBZ2FpbnN0UmVnZXhwQXJyYXkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICByTDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gbWVyZ2VPYmplY3RzKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiB1bnVzZWQgaGFybW9ueSBleHBvcnRzIG5vdEVtcHR5LCBtZXJnZVJhbmdlcywgY29udmVydFRvVXJpICovXG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0cyhvYmoxLCBvYmoyLCBleGNsdWRlVW5kZWZpbmVkID0gZmFsc2UpIHtcbiAgICBpZiAoIW9iajEpIHJldHVybiBvYmoyO1xuICAgIGlmICghb2JqMikgcmV0dXJuIG9iajE7XG4gICAgaWYgKGV4Y2x1ZGVVbmRlZmluZWQpIHtcbiAgICAgICAgb2JqMSA9IGV4Y2x1ZGVVbmRlZmluZWRWYWx1ZXMob2JqMSk7XG4gICAgICAgIG9iajIgPSBleGNsdWRlVW5kZWZpbmVkVmFsdWVzKG9iajIpO1xuICAgIH1cbiAgICBjb25zdCBtZXJnZWRPYmplY3RzID0ge1xuICAgICAgICAuLi5vYmoyLFxuICAgICAgICAuLi5vYmoxXG4gICAgfTsgLy8gR2l2ZSBwcmlvcml0eSB0byBvYmoxIHZhbHVlcyBieSBzcHJlYWRpbmcgb2JqMiBmaXJzdCwgdGhlbiBvYmoxXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMobWVyZ2VkT2JqZWN0cykpe1xuICAgICAgICBpZiAob2JqMVtrZXldICYmIG9iajJba2V5XSkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqMVtrZXldKSkge1xuICAgICAgICAgICAgICAgIG1lcmdlZE9iamVjdHNba2V5XSA9IG9iajFba2V5XS5jb25jYXQob2JqMltrZXldKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmoyW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkT2JqZWN0c1trZXldID0gb2JqMltrZXldLmNvbmNhdChvYmoxW2tleV0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqMVtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqMltrZXldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIG1lcmdlZE9iamVjdHNba2V5XSA9IG1lcmdlT2JqZWN0cyhvYmoxW2tleV0sIG9iajJba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZE9iamVjdHM7XG59XG5mdW5jdGlvbiBleGNsdWRlVW5kZWZpbmVkVmFsdWVzKG9iaikge1xuICAgIGNvbnN0IGZpbHRlcmVkRW50cmllcyA9IE9iamVjdC5lbnRyaWVzKG9iaikuZmlsdGVyKChbXywgdmFsdWVdKT0+dmFsdWUgIT09IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhmaWx0ZXJlZEVudHJpZXMpO1xufVxuZnVuY3Rpb24gbm90RW1wdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbn1cbi8vdGFrZW4gd2l0aCBzbWFsbCBjaGFuZ2VzIGZyb20gYWNlLWNvZGVcbmZ1bmN0aW9uIG1lcmdlUmFuZ2VzKHJhbmdlcykge1xuICAgIHZhciBsaXN0ID0gcmFuZ2VzO1xuICAgIGxpc3QgPSBsaXN0LnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gY29tcGFyZVBvaW50cyhhLnN0YXJ0LCBiLnN0YXJ0KTtcbiAgICB9KTtcbiAgICB2YXIgbmV4dCA9IGxpc3RbMF0sIHJhbmdlO1xuICAgIGZvcih2YXIgaSA9IDE7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgcmFuZ2UgPSBuZXh0O1xuICAgICAgICBuZXh0ID0gbGlzdFtpXTtcbiAgICAgICAgdmFyIGNtcCA9IGNvbXBhcmVQb2ludHMocmFuZ2UuZW5kLCBuZXh0LnN0YXJ0KTtcbiAgICAgICAgaWYgKGNtcCA8IDApIGNvbnRpbnVlO1xuICAgICAgICBpZiAoY21wID09IDAgJiYgIXJhbmdlLmlzRW1wdHkoKSAmJiAhbmV4dC5pc0VtcHR5KCkpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoY29tcGFyZVBvaW50cyhyYW5nZS5lbmQsIG5leHQuZW5kKSA8IDApIHtcbiAgICAgICAgICAgIHJhbmdlLmVuZC5yb3cgPSBuZXh0LmVuZC5yb3c7XG4gICAgICAgICAgICByYW5nZS5lbmQuY29sdW1uID0gbmV4dC5lbmQuY29sdW1uO1xuICAgICAgICB9XG4gICAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgICBuZXh0ID0gcmFuZ2U7XG4gICAgICAgIGktLTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG59XG5mdW5jdGlvbiBjb21wYXJlUG9pbnRzKHAxLCBwMikge1xuICAgIHJldHVybiBwMS5yb3cgLSBwMi5yb3cgfHwgcDEuY29sdW1uIC0gcDIuY29sdW1uO1xufVxuZnVuY3Rpb24gY2hlY2tWYWx1ZUFnYWluc3RSZWdleHBBcnJheSh2YWx1ZSwgcmVnZXhwQXJyYXkpIHtcbiAgICBpZiAoIXJlZ2V4cEFycmF5KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHJlZ2V4cEFycmF5Lmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYgKHJlZ2V4cEFycmF5W2ldLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjb252ZXJ0VG9VcmkoZmlsZVBhdGgpIHtcbiAgICAvL2FscmVhZHkgVVJJXG4gICAgaWYgKGZpbGVQYXRoLnN0YXJ0c1dpdGgoXCJmaWxlOi8vL1wiKSkge1xuICAgICAgICByZXR1cm4gZmlsZVBhdGg7XG4gICAgfVxuICAgIHJldHVybiBVUkkuZmlsZShmaWxlUGF0aCkudG9TdHJpbmcoKTtcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTI3Mjpcbi8qKiovICgobW9kdWxlKSA9PiB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqKi8gfSksXG5cbi8qKiovIDE1MzE6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLy8gQ3VycmVudGx5IGluIHN5bmMgd2l0aCBOb2RlLmpzIGxpYi9pbnRlcm5hbC91dGlsL3R5cGVzLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvY29tbWl0LzExMmNjN2MyNzU1MTI1NGFhMmIxNzA5OGZiNzc0ODY3ZjA1ZWQwZDlcblxuXG5cbnZhciBpc0FyZ3VtZW50c09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNTM4Nyk7XG52YXIgaXNHZW5lcmF0b3JGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjYyNSk7XG52YXIgd2hpY2hUeXBlZEFycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNzMwKTtcbnZhciBpc1R5cGVkQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5NDMpO1xuXG5mdW5jdGlvbiB1bmN1cnJ5VGhpcyhmKSB7XG4gIHJldHVybiBmLmNhbGwuYmluZChmKTtcbn1cblxudmFyIEJpZ0ludFN1cHBvcnRlZCA9IHR5cGVvZiBCaWdJbnQgIT09ICd1bmRlZmluZWQnO1xudmFyIFN5bWJvbFN1cHBvcnRlZCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgT2JqZWN0VG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTtcblxudmFyIG51bWJlclZhbHVlID0gdW5jdXJyeVRoaXMoTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mKTtcbnZhciBzdHJpbmdWYWx1ZSA9IHVuY3VycnlUaGlzKFN0cmluZy5wcm90b3R5cGUudmFsdWVPZik7XG52YXIgYm9vbGVhblZhbHVlID0gdW5jdXJyeVRoaXMoQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZik7XG5cbmlmIChCaWdJbnRTdXBwb3J0ZWQpIHtcbiAgdmFyIGJpZ0ludFZhbHVlID0gdW5jdXJyeVRoaXMoQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mKTtcbn1cblxuaWYgKFN5bWJvbFN1cHBvcnRlZCkge1xuICB2YXIgc3ltYm9sVmFsdWUgPSB1bmN1cnJ5VGhpcyhTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YpO1xufVxuXG5mdW5jdGlvbiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBwcm90b3R5cGVWYWx1ZU9mKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRyeSB7XG4gICAgcHJvdG90eXBlVmFsdWVPZih2YWx1ZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnRzLmlzQXJndW1lbnRzT2JqZWN0ID0gaXNBcmd1bWVudHNPYmplY3Q7XG5leHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBpc0dlbmVyYXRvckZ1bmN0aW9uO1xuZXhwb3J0cy5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG5cbi8vIFRha2VuIGZyb20gaGVyZSBhbmQgbW9kaWZpZWQgZm9yIGJldHRlciBicm93c2VyIHN1cHBvcnRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcC1pcy1wcm9taXNlL2Jsb2IvY2RhMzVhNTEzYmRhMDNmOTc3YWQ1Y2RlM2EwNzlkMjM3ZTgyZDdlZi9pbmRleC5qc1xuZnVuY3Rpb24gaXNQcm9taXNlKGlucHV0KSB7XG5cdHJldHVybiAoXG5cdFx0KFxuXHRcdFx0dHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmXG5cdFx0XHRpbnB1dCBpbnN0YW5jZW9mIFByb21pc2Vcblx0XHQpIHx8XG5cdFx0KFxuXHRcdFx0aW5wdXQgIT09IG51bGwgJiZcblx0XHRcdHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiZcblx0XHRcdHR5cGVvZiBpbnB1dC50aGVuID09PSAnZnVuY3Rpb24nICYmXG5cdFx0XHR0eXBlb2YgaW5wdXQuY2F0Y2ggPT09ICdmdW5jdGlvbidcblx0XHQpXG5cdCk7XG59XG5leHBvcnRzLmlzUHJvbWlzZSA9IGlzUHJvbWlzZTtcblxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KSB7XG4gICAgcmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyh2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIGlzVHlwZWRBcnJheSh2YWx1ZSkgfHxcbiAgICBpc0RhdGFWaWV3KHZhbHVlKVxuICApO1xufVxuZXhwb3J0cy5pc0FycmF5QnVmZmVyVmlldyA9IGlzQXJyYXlCdWZmZXJWaWV3O1xuXG5cbmZ1bmN0aW9uIGlzVWludDhBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ1VpbnQ4QXJyYXknO1xufVxuZXhwb3J0cy5pc1VpbnQ4QXJyYXkgPSBpc1VpbnQ4QXJyYXk7XG5cbmZ1bmN0aW9uIGlzVWludDhDbGFtcGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdVaW50OENsYW1wZWRBcnJheSc7XG59XG5leHBvcnRzLmlzVWludDhDbGFtcGVkQXJyYXkgPSBpc1VpbnQ4Q2xhbXBlZEFycmF5O1xuXG5mdW5jdGlvbiBpc1VpbnQxNkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnVWludDE2QXJyYXknO1xufVxuZXhwb3J0cy5pc1VpbnQxNkFycmF5ID0gaXNVaW50MTZBcnJheTtcblxuZnVuY3Rpb24gaXNVaW50MzJBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ1VpbnQzMkFycmF5Jztcbn1cbmV4cG9ydHMuaXNVaW50MzJBcnJheSA9IGlzVWludDMyQXJyYXk7XG5cbmZ1bmN0aW9uIGlzSW50OEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnSW50OEFycmF5Jztcbn1cbmV4cG9ydHMuaXNJbnQ4QXJyYXkgPSBpc0ludDhBcnJheTtcblxuZnVuY3Rpb24gaXNJbnQxNkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnSW50MTZBcnJheSc7XG59XG5leHBvcnRzLmlzSW50MTZBcnJheSA9IGlzSW50MTZBcnJheTtcblxuZnVuY3Rpb24gaXNJbnQzMkFycmF5KHZhbHVlKSB7XG4gIHJldHVybiB3aGljaFR5cGVkQXJyYXkodmFsdWUpID09PSAnSW50MzJBcnJheSc7XG59XG5leHBvcnRzLmlzSW50MzJBcnJheSA9IGlzSW50MzJBcnJheTtcblxuZnVuY3Rpb24gaXNGbG9hdDMyQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdGbG9hdDMyQXJyYXknO1xufVxuZXhwb3J0cy5pc0Zsb2F0MzJBcnJheSA9IGlzRmxvYXQzMkFycmF5O1xuXG5mdW5jdGlvbiBpc0Zsb2F0NjRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0Zsb2F0NjRBcnJheSc7XG59XG5leHBvcnRzLmlzRmxvYXQ2NEFycmF5ID0gaXNGbG9hdDY0QXJyYXk7XG5cbmZ1bmN0aW9uIGlzQmlnSW50NjRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gd2hpY2hUeXBlZEFycmF5KHZhbHVlKSA9PT0gJ0JpZ0ludDY0QXJyYXknO1xufVxuZXhwb3J0cy5pc0JpZ0ludDY0QXJyYXkgPSBpc0JpZ0ludDY0QXJyYXk7XG5cbmZ1bmN0aW9uIGlzQmlnVWludDY0QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkgPT09ICdCaWdVaW50NjRBcnJheSc7XG59XG5leHBvcnRzLmlzQmlnVWludDY0QXJyYXkgPSBpc0JpZ1VpbnQ2NEFycmF5O1xuXG5mdW5jdGlvbiBpc01hcFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IE1hcF0nO1xufVxuaXNNYXBUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJyAmJlxuICBpc01hcFRvU3RyaW5nKG5ldyBNYXAoKSlcbik7XG5cbmZ1bmN0aW9uIGlzTWFwKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc01hcFRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzTWFwVG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIE1hcDtcbn1cbmV4cG9ydHMuaXNNYXAgPSBpc01hcDtcblxuZnVuY3Rpb24gaXNTZXRUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTZXRdJztcbn1cbmlzU2V0VG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNTZXRUb1N0cmluZyhuZXcgU2V0KCkpXG4pO1xuZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzU2V0VG9TdHJpbmcud29ya2luZ1xuICAgID8gaXNTZXRUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgU2V0O1xufVxuZXhwb3J0cy5pc1NldCA9IGlzU2V0O1xuXG5mdW5jdGlvbiBpc1dlYWtNYXBUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBXZWFrTWFwXSc7XG59XG5pc1dlYWtNYXBUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgV2Vha01hcCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNXZWFrTWFwVG9TdHJpbmcobmV3IFdlYWtNYXAoKSlcbik7XG5mdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc1dlYWtNYXBUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc1dlYWtNYXBUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgV2Vha01hcDtcbn1cbmV4cG9ydHMuaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuXG5mdW5jdGlvbiBpc1dlYWtTZXRUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBXZWFrU2V0XSc7XG59XG5pc1dlYWtTZXRUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgV2Vha1NldCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgaXNXZWFrU2V0VG9TdHJpbmcobmV3IFdlYWtTZXQoKSlcbik7XG5mdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgcmV0dXJuIGlzV2Vha1NldFRvU3RyaW5nKHZhbHVlKTtcbn1cbmV4cG9ydHMuaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJztcbn1cbmlzQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID0gKFxuICB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzQXJyYXlCdWZmZXJUb1N0cmluZyhuZXcgQXJyYXlCdWZmZXIoKSlcbik7XG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc0FycmF5QnVmZmVyVG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xufVxuZXhwb3J0cy5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcblxuZnVuY3Rpb24gaXNEYXRhVmlld1RvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGFWaWV3XSc7XG59XG5pc0RhdGFWaWV3VG9TdHJpbmcud29ya2luZyA9IChcbiAgdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJlxuICB0eXBlb2YgRGF0YVZpZXcgIT09ICd1bmRlZmluZWQnICYmXG4gIGlzRGF0YVZpZXdUb1N0cmluZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpLCAwLCAxKSlcbik7XG5mdW5jdGlvbiBpc0RhdGFWaWV3KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGlzRGF0YVZpZXdUb1N0cmluZy53b3JraW5nXG4gICAgPyBpc0RhdGFWaWV3VG9TdHJpbmcodmFsdWUpXG4gICAgOiB2YWx1ZSBpbnN0YW5jZW9mIERhdGFWaWV3O1xufVxuZXhwb3J0cy5pc0RhdGFWaWV3ID0gaXNEYXRhVmlldztcblxuLy8gU3RvcmUgYSBjb3B5IG9mIFNoYXJlZEFycmF5QnVmZmVyIGluIGNhc2UgaXQncyBkZWxldGVkIGVsc2V3aGVyZVxudmFyIFNoYXJlZEFycmF5QnVmZmVyQ29weSA9IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgPyBTaGFyZWRBcnJheUJ1ZmZlciA6IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTaGFyZWRBcnJheUJ1ZmZlcl0nO1xufVxuZnVuY3Rpb24gaXNTaGFyZWRBcnJheUJ1ZmZlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyQ29weSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZy53b3JraW5nID0gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nKG5ldyBTaGFyZWRBcnJheUJ1ZmZlckNvcHkoKSk7XG4gIH1cblxuICByZXR1cm4gaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nLndvcmtpbmdcbiAgICA/IGlzU2hhcmVkQXJyYXlCdWZmZXJUb1N0cmluZyh2YWx1ZSlcbiAgICA6IHZhbHVlIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXJDb3B5O1xufVxuZXhwb3J0cy5pc1NoYXJlZEFycmF5QnVmZmVyID0gaXNTaGFyZWRBcnJheUJ1ZmZlcjtcblxuZnVuY3Rpb24gaXNBc3luY0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJztcbn1cbmV4cG9ydHMuaXNBc3luY0Z1bmN0aW9uID0gaXNBc3luY0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc01hcEl0ZXJhdG9yKHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IE1hcCBJdGVyYXRvcl0nO1xufVxuZXhwb3J0cy5pc01hcEl0ZXJhdG9yID0gaXNNYXBJdGVyYXRvcjtcblxuZnVuY3Rpb24gaXNTZXRJdGVyYXRvcih2YWx1ZSkge1xuICByZXR1cm4gT2JqZWN0VG9TdHJpbmcodmFsdWUpID09PSAnW29iamVjdCBTZXQgSXRlcmF0b3JdJztcbn1cbmV4cG9ydHMuaXNTZXRJdGVyYXRvciA9IGlzU2V0SXRlcmF0b3I7XG5cbmZ1bmN0aW9uIGlzR2VuZXJhdG9yT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBPYmplY3RUb1N0cmluZyh2YWx1ZSkgPT09ICdbb2JqZWN0IEdlbmVyYXRvcl0nO1xufVxuZXhwb3J0cy5pc0dlbmVyYXRvck9iamVjdCA9IGlzR2VuZXJhdG9yT2JqZWN0O1xuXG5mdW5jdGlvbiBpc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGUodmFsdWUpIHtcbiAgcmV0dXJuIE9iamVjdFRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgV2ViQXNzZW1ibHkuTW9kdWxlXSc7XG59XG5leHBvcnRzLmlzV2ViQXNzZW1ibHlDb21waWxlZE1vZHVsZSA9IGlzV2ViQXNzZW1ibHlDb21waWxlZE1vZHVsZTtcblxuZnVuY3Rpb24gaXNOdW1iZXJPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIG51bWJlclZhbHVlKTtcbn1cbmV4cG9ydHMuaXNOdW1iZXJPYmplY3QgPSBpc051bWJlck9iamVjdDtcblxuZnVuY3Rpb24gaXNTdHJpbmdPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIHN0cmluZ1ZhbHVlKTtcbn1cbmV4cG9ydHMuaXNTdHJpbmdPYmplY3QgPSBpc1N0cmluZ09iamVjdDtcblxuZnVuY3Rpb24gaXNCb29sZWFuT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBjaGVja0JveGVkUHJpbWl0aXZlKHZhbHVlLCBib29sZWFuVmFsdWUpO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW5PYmplY3QgPSBpc0Jvb2xlYW5PYmplY3Q7XG5cbmZ1bmN0aW9uIGlzQmlnSW50T2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBCaWdJbnRTdXBwb3J0ZWQgJiYgY2hlY2tCb3hlZFByaW1pdGl2ZSh2YWx1ZSwgYmlnSW50VmFsdWUpO1xufVxuZXhwb3J0cy5pc0JpZ0ludE9iamVjdCA9IGlzQmlnSW50T2JqZWN0O1xuXG5mdW5jdGlvbiBpc1N5bWJvbE9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gU3ltYm9sU3VwcG9ydGVkICYmIGNoZWNrQm94ZWRQcmltaXRpdmUodmFsdWUsIHN5bWJvbFZhbHVlKTtcbn1cbmV4cG9ydHMuaXNTeW1ib2xPYmplY3QgPSBpc1N5bWJvbE9iamVjdDtcblxuZnVuY3Rpb24gaXNCb3hlZFByaW1pdGl2ZSh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIGlzTnVtYmVyT2JqZWN0KHZhbHVlKSB8fFxuICAgIGlzU3RyaW5nT2JqZWN0KHZhbHVlKSB8fFxuICAgIGlzQm9vbGVhbk9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc0JpZ0ludE9iamVjdCh2YWx1ZSkgfHxcbiAgICBpc1N5bWJvbE9iamVjdCh2YWx1ZSlcbiAgKTtcbn1cbmV4cG9ydHMuaXNCb3hlZFByaW1pdGl2ZSA9IGlzQm94ZWRQcmltaXRpdmU7XG5cbmZ1bmN0aW9uIGlzQW55QXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHxcbiAgICBpc1NoYXJlZEFycmF5QnVmZmVyKHZhbHVlKVxuICApO1xufVxuZXhwb3J0cy5pc0FueUFycmF5QnVmZmVyID0gaXNBbnlBcnJheUJ1ZmZlcjtcblxuWydpc1Byb3h5JywgJ2lzRXh0ZXJuYWwnLCAnaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QnXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbWV0aG9kLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArICcgaXMgbm90IHN1cHBvcnRlZCBpbiB1c2VybGFuZCcpO1xuICAgIH1cbiAgfSk7XG59KTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjgyNzpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuLyogcHJvdmlkZWQgZGVwZW5kZW5jeSAqLyB2YXIgcHJvY2VzcyA9IF9fd2VicGFja19yZXF1aXJlX18oOTkwNyk7XG4vKiBwcm92aWRlZCBkZXBlbmRlbmN5ICovIHZhciBjb25zb2xlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MzY0KTtcbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8XG4gIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIHZhciBkZXNjcmlwdG9ycyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVzY3JpcHRvcnNba2V5c1tpXV0gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfTtcblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgLy8gQWxsb3cgZm9yIGRlcHJlY2F0aW5nIHRoaW5ncyBpbiB0aGUgcHJvY2VzcyBvZiBzdGFydGluZyB1cC5cbiAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgd2FybmVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRlcHJlY2F0ZWQoKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIGlmIChwcm9jZXNzLnRocm93RGVwcmVjYXRpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MudHJhY2VEZXByZWNhdGlvbikge1xuICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIHJldHVybiBkZXByZWNhdGVkO1xufTtcblxuXG52YXIgZGVidWdzID0ge307XG52YXIgZGVidWdFbnZSZWdleCA9IC9eJC87XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0RFQlVHKSB7XG4gIHZhciBkZWJ1Z0VudiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUc7XG4gIGRlYnVnRW52ID0gZGVidWdFbnYucmVwbGFjZSgvW3xcXFxce30oKVtcXF1eJCs/Ll0vZywgJ1xcXFwkJicpXG4gICAgLnJlcGxhY2UoL1xcKi9nLCAnLionKVxuICAgIC5yZXBsYWNlKC8sL2csICckfF4nKVxuICAgIC50b1VwcGVyQ2FzZSgpO1xuICBkZWJ1Z0VudlJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyBkZWJ1Z0VudiArICckJywgJ2knKTtcbn1cbmV4cG9ydHMuZGVidWdsb2cgPSBmdW5jdGlvbihzZXQpIHtcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAoZGVidWdFbnZSZWdleC50ZXN0KHNldCkpIHtcbiAgICAgIHZhciBwaWQgPSBwcm9jZXNzLnBpZDtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtc2cgPSBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbih2YWwsIGlkeCkge1xuICAgIGhhc2hbdmFsXSA9IHRydWU7XG4gIH0pO1xuXG4gIHJldHVybiBoYXNoO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcykge1xuICAvLyBQcm92aWRlIGEgaG9vayBmb3IgdXNlci1zcGVjaWZpZWQgaW5zcGVjdCBmdW5jdGlvbnMuXG4gIC8vIENoZWNrIHRoYXQgdmFsdWUgaXMgYW4gb2JqZWN0IHdpdGggYW4gaW5zcGVjdCBmdW5jdGlvbiBvbiBpdFxuICBpZiAoY3R4LmN1c3RvbUluc3BlY3QgJiZcbiAgICAgIHZhbHVlICYmXG4gICAgICBpc0Z1bmN0aW9uKHZhbHVlLmluc3BlY3QpICYmXG4gICAgICAvLyBGaWx0ZXIgb3V0IHRoZSB1dGlsIG1vZHVsZSwgaXQncyBpbnNwZWN0IGZ1bmN0aW9uIGlzIHNwZWNpYWxcbiAgICAgIHZhbHVlLmluc3BlY3QgIT09IGV4cG9ydHMuaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc2xpY2UoMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gJ1xcbicgKyBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbQ2lyY3VsYXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVW5kZWZpbmVkKG5hbWUpKSB7XG4gICAgaWYgKGFycmF5ICYmIGtleS5tYXRjaCgvXlxcZCskLykpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICAgIG5hbWUgPSBKU09OLnN0cmluZ2lmeSgnJyArIGtleSk7XG4gICAgaWYgKG5hbWUubWF0Y2goL15cIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVwiJC8pKSB7XG4gICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZXhwb3J0cy50eXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUzMSk7XG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5leHBvcnRzLnR5cGVzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuZXhwb3J0cy50eXBlcy5pc0RhdGUgPSBpc0RhdGU7XG5cbmZ1bmN0aW9uIGlzRXJyb3IoZSkge1xuICByZXR1cm4gaXNPYmplY3QoZSkgJiZcbiAgICAgIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcbmV4cG9ydHMudHlwZXMuaXNOYXRpdmVFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyNzIpO1xuXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59XG5cblxuZnVuY3Rpb24gcGFkKG4pIHtcbiAgcmV0dXJuIG4gPCAxMCA/ICcwJyArIG4udG9TdHJpbmcoMTApIDogbi50b1N0cmluZygxMCk7XG59XG5cblxudmFyIG1vbnRocyA9IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLFxuICAgICAgICAgICAgICAnT2N0JywgJ05vdicsICdEZWMnXTtcblxuLy8gMjYgRmViIDE2OjE5OjM0XG5mdW5jdGlvbiB0aW1lc3RhbXAoKSB7XG4gIHZhciBkID0gbmV3IERhdGUoKTtcbiAgdmFyIHRpbWUgPSBbcGFkKGQuZ2V0SG91cnMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldE1pbnV0ZXMoKSksXG4gICAgICAgICAgICAgIHBhZChkLmdldFNlY29uZHMoKSldLmpvaW4oJzonKTtcbiAgcmV0dXJuIFtkLmdldERhdGUoKSwgbW9udGhzW2QuZ2V0TW9udGgoKV0sIHRpbWVdLmpvaW4oJyAnKTtcbn1cblxuXG4vLyBsb2cgaXMganVzdCBhIHRoaW4gd3JhcHBlciB0byBjb25zb2xlLmxvZyB0aGF0IHByZXBlbmRzIGEgdGltZXN0YW1wXG5leHBvcnRzLmxvZyA9IGZ1bmN0aW9uKCkge1xuICBjb25zb2xlLmxvZygnJXMgLSAlcycsIHRpbWVzdGFtcCgpLCBleHBvcnRzLmZvcm1hdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpKTtcbn07XG5cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXIuXG4gKlxuICogVGhlIEZ1bmN0aW9uLnByb3RvdHlwZS5pbmhlcml0cyBmcm9tIGxhbmcuanMgcmV3cml0dGVuIGFzIGEgc3RhbmRhbG9uZVxuICogZnVuY3Rpb24gKG5vdCBvbiBGdW5jdGlvbi5wcm90b3R5cGUpLiBOT1RFOiBJZiB0aGlzIGZpbGUgaXMgdG8gYmUgbG9hZGVkXG4gKiBkdXJpbmcgYm9vdHN0cmFwcGluZyB0aGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJld3JpdHRlbiB1c2luZyBzb21lIG5hdGl2ZVxuICogZnVuY3Rpb25zIGFzIHByb3RvdHlwZSBzZXR1cCB1c2luZyBub3JtYWwgSmF2YVNjcmlwdCBkb2VzIG5vdCB3b3JrIGFzXG4gKiBleHBlY3RlZCBkdXJpbmcgYm9vdHN0cmFwcGluZyAoc2VlIG1pcnJvci5qcyBpbiByMTE0OTAzKS5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHdoaWNoIG5lZWRzIHRvIGluaGVyaXQgdGhlXG4gKiAgICAgcHJvdG90eXBlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDdG9yIENvbnN0cnVjdG9yIGZ1bmN0aW9uIHRvIGluaGVyaXQgcHJvdG90eXBlIGZyb20uXG4gKi9cbmV4cG9ydHMuaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2MTUpO1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWRkKTtcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIG9yaWdpbltrZXlzW2ldXSA9IGFkZFtrZXlzW2ldXTtcbiAgfVxuICByZXR1cm4gb3JpZ2luO1xufTtcblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxudmFyIGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sKCd1dGlsLnByb21pc2lmeS5jdXN0b20nKSA6IHVuZGVmaW5lZDtcblxuZXhwb3J0cy5wcm9taXNpZnkgPSBmdW5jdGlvbiBwcm9taXNpZnkob3JpZ2luYWwpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJvcmlnaW5hbFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO1xuXG4gIGlmIChrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wgJiYgb3JpZ2luYWxba0N1c3RvbVByb21pc2lmaWVkU3ltYm9sXSkge1xuICAgIHZhciBmbiA9IG9yaWdpbmFsW2tDdXN0b21Qcm9taXNpZmllZFN5bWJvbF07XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidXRpbC5wcm9taXNpZnkuY3VzdG9tXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwga0N1c3RvbVByb21pc2lmaWVkU3ltYm9sLCB7XG4gICAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZuKCkge1xuICAgIHZhciBwcm9taXNlUmVzb2x2ZSwgcHJvbWlzZVJlamVjdDtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHByb21pc2VSZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIHByb21pc2VSZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG5cbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG4gICAgYXJncy5wdXNoKGZ1bmN0aW9uIChlcnIsIHZhbHVlKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2VSZXNvbHZlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHByb21pc2VSZWplY3QoZXJyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihmbiwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9yaWdpbmFsKSk7XG5cbiAgaWYgKGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBrQ3VzdG9tUHJvbWlzaWZpZWRTeW1ib2wsIHtcbiAgICB2YWx1ZTogZm4sIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFxuICAgIGZuLFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob3JpZ2luYWwpXG4gICk7XG59XG5cbmV4cG9ydHMucHJvbWlzaWZ5LmN1c3RvbSA9IGtDdXN0b21Qcm9taXNpZmllZFN5bWJvbFxuXG5mdW5jdGlvbiBjYWxsYmFja2lmeU9uUmVqZWN0ZWQocmVhc29uLCBjYikge1xuICAvLyBgIXJlYXNvbmAgZ3VhcmQgaW5zcGlyZWQgYnkgYmx1ZWJpcmQgKFJlZjogaHR0cHM6Ly9nb28uZ2wvdDVJUzZNKS5cbiAgLy8gQmVjYXVzZSBgbnVsbGAgaXMgYSBzcGVjaWFsIGVycm9yIHZhbHVlIGluIGNhbGxiYWNrcyB3aGljaCBtZWFucyBcIm5vIGVycm9yXG4gIC8vIG9jY3VycmVkXCIsIHdlIGVycm9yLXdyYXAgc28gdGhlIGNhbGxiYWNrIGNvbnN1bWVyIGNhbiBkaXN0aW5ndWlzaCBiZXR3ZWVuXG4gIC8vIFwidGhlIHByb21pc2UgcmVqZWN0ZWQgd2l0aCBudWxsXCIgb3IgXCJ0aGUgcHJvbWlzZSBmdWxmaWxsZWQgd2l0aCB1bmRlZmluZWRcIi5cbiAgaWYgKCFyZWFzb24pIHtcbiAgICB2YXIgbmV3UmVhc29uID0gbmV3IEVycm9yKCdQcm9taXNlIHdhcyByZWplY3RlZCB3aXRoIGEgZmFsc3kgdmFsdWUnKTtcbiAgICBuZXdSZWFzb24ucmVhc29uID0gcmVhc29uO1xuICAgIHJlYXNvbiA9IG5ld1JlYXNvbjtcbiAgfVxuICByZXR1cm4gY2IocmVhc29uKTtcbn1cblxuZnVuY3Rpb24gY2FsbGJhY2tpZnkob3JpZ2luYWwpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcIm9yaWdpbmFsXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7XG4gIH1cblxuICAvLyBXZSBETyBOT1QgcmV0dXJuIHRoZSBwcm9taXNlIGFzIGl0IGdpdmVzIHRoZSB1c2VyIGEgZmFsc2Ugc2Vuc2UgdGhhdFxuICAvLyB0aGUgcHJvbWlzZSBpcyBhY3R1YWxseSBzb21laG93IHJlbGF0ZWQgdG8gdGhlIGNhbGxiYWNrJ3MgZXhlY3V0aW9uXG4gIC8vIGFuZCB0aGF0IHRoZSBjYWxsYmFjayB0aHJvd2luZyB3aWxsIHJlamVjdCB0aGUgcHJvbWlzZS5cbiAgZnVuY3Rpb24gY2FsbGJhY2tpZmllZCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbWF5YmVDYiA9IGFyZ3MucG9wKCk7XG4gICAgaWYgKHR5cGVvZiBtYXliZUNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgbGFzdCBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBjYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG1heWJlQ2IuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICB9O1xuICAgIC8vIEluIHRydWUgbm9kZSBzdHlsZSB3ZSBwcm9jZXNzIHRoZSBjYWxsYmFjayBvbiBgbmV4dFRpY2tgIHdpdGggYWxsIHRoZVxuICAgIC8vIGltcGxpY2F0aW9ucyAoc3RhY2ssIGB1bmNhdWdodEV4Y2VwdGlvbmAsIGBhc3luY19ob29rc2ApXG4gICAgb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncylcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJldCkgeyBwcm9jZXNzLm5leHRUaWNrKGNiLmJpbmQobnVsbCwgbnVsbCwgcmV0KSkgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKHJlaikgeyBwcm9jZXNzLm5leHRUaWNrKGNhbGxiYWNraWZ5T25SZWplY3RlZC5iaW5kKG51bGwsIHJlaiwgY2IpKSB9KTtcbiAgfVxuXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihjYWxsYmFja2lmaWVkLCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob3JpZ2luYWwpKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY2FsbGJhY2tpZmllZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvcmlnaW5hbCkpO1xuICByZXR1cm4gY2FsbGJhY2tpZmllZDtcbn1cbmV4cG9ydHMuY2FsbGJhY2tpZnkgPSBjYWxsYmFja2lmeTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTIwODpcbi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oOTExMCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA5MTEwOlxuLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5jcmVhdGVNZXNzYWdlQ29ubmVjdGlvbiA9IGV4cG9ydHMuQnJvd3Nlck1lc3NhZ2VXcml0ZXIgPSBleHBvcnRzLkJyb3dzZXJNZXNzYWdlUmVhZGVyID0gdm9pZCAwO1xuY29uc3QgcmlsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzMTIpO1xuLy8gSW5zdGFsbCB0aGUgYnJvd3NlciBydW50aW1lIGFic3RyYWN0LlxucmlsXzEuZGVmYXVsdC5pbnN0YWxsKCk7XG5jb25zdCBhcGlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzY3Mik7XG5fX2V4cG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXyg3NjcyKSwgZXhwb3J0cyk7XG5jbGFzcyBCcm93c2VyTWVzc2FnZVJlYWRlciBleHRlbmRzIGFwaV8xLkFic3RyYWN0TWVzc2FnZVJlYWRlciB7XG4gICAgY29uc3RydWN0b3IocG9ydCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9vbkRhdGEgPSBuZXcgYXBpXzEuRW1pdHRlcigpO1xuICAgICAgICB0aGlzLl9tZXNzYWdlTGlzdGVuZXIgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX29uRGF0YS5maXJlKGV2ZW50LmRhdGEpO1xuICAgICAgICB9O1xuICAgICAgICBwb3J0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGV2ZW50KSA9PiB0aGlzLmZpcmVFcnJvcihldmVudCkpO1xuICAgICAgICBwb3J0Lm9ubWVzc2FnZSA9IHRoaXMuX21lc3NhZ2VMaXN0ZW5lcjtcbiAgICB9XG4gICAgbGlzdGVuKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vbkRhdGEuZXZlbnQoY2FsbGJhY2spO1xuICAgIH1cbn1cbmV4cG9ydHMuQnJvd3Nlck1lc3NhZ2VSZWFkZXIgPSBCcm93c2VyTWVzc2FnZVJlYWRlcjtcbmNsYXNzIEJyb3dzZXJNZXNzYWdlV3JpdGVyIGV4dGVuZHMgYXBpXzEuQWJzdHJhY3RNZXNzYWdlV3JpdGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3J0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMucG9ydCA9IHBvcnQ7XG4gICAgICAgIHRoaXMuZXJyb3JDb3VudCA9IDA7XG4gICAgICAgIHBvcnQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoZXZlbnQpID0+IHRoaXMuZmlyZUVycm9yKGV2ZW50KSk7XG4gICAgfVxuICAgIHdyaXRlKG1zZykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5wb3J0LnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yLCBtc2cpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVFcnJvcihlcnJvciwgbXNnKSB7XG4gICAgICAgIHRoaXMuZXJyb3JDb3VudCsrO1xuICAgICAgICB0aGlzLmZpcmVFcnJvcihlcnJvciwgbXNnLCB0aGlzLmVycm9yQ291bnQpO1xuICAgIH1cbiAgICBlbmQoKSB7XG4gICAgfVxufVxuZXhwb3J0cy5Ccm93c2VyTWVzc2FnZVdyaXRlciA9IEJyb3dzZXJNZXNzYWdlV3JpdGVyO1xuZnVuY3Rpb24gY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24ocmVhZGVyLCB3cml0ZXIsIGxvZ2dlciwgb3B0aW9ucykge1xuICAgIGlmIChsb2dnZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb2dnZXIgPSBhcGlfMS5OdWxsTG9nZ2VyO1xuICAgIH1cbiAgICBpZiAoYXBpXzEuQ29ubmVjdGlvblN0cmF0ZWd5LmlzKG9wdGlvbnMpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7IGNvbm5lY3Rpb25TdHJhdGVneTogb3B0aW9ucyB9O1xuICAgIH1cbiAgICByZXR1cm4gKDAsIGFwaV8xLmNyZWF0ZU1lc3NhZ2VDb25uZWN0aW9uKShyZWFkZXIsIHdyaXRlciwgbG9nZ2VyLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24gPSBjcmVhdGVNZXNzYWdlQ29ubmVjdGlvbjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzMxMjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBwcm92aWRlZCBkZXBlbmRlbmN5ICovIHZhciBjb25zb2xlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MzY0KTtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5jb25zdCBhcGlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzY3Mik7XG5jbGFzcyBNZXNzYWdlQnVmZmVyIGV4dGVuZHMgYXBpXzEuQWJzdHJhY3RNZXNzYWdlQnVmZmVyIHtcbiAgICBjb25zdHJ1Y3RvcihlbmNvZGluZyA9ICd1dGYtOCcpIHtcbiAgICAgICAgc3VwZXIoZW5jb2RpbmcpO1xuICAgICAgICB0aGlzLmFzY2lpRGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcignYXNjaWknKTtcbiAgICB9XG4gICAgZW1wdHlCdWZmZXIoKSB7XG4gICAgICAgIHJldHVybiBNZXNzYWdlQnVmZmVyLmVtcHR5QnVmZmVyO1xuICAgIH1cbiAgICBmcm9tU3RyaW5nKHZhbHVlLCBfZW5jb2RpbmcpIHtcbiAgICAgICAgcmV0dXJuIChuZXcgVGV4dEVuY29kZXIoKSkuZW5jb2RlKHZhbHVlKTtcbiAgICB9XG4gICAgdG9TdHJpbmcodmFsdWUsIGVuY29kaW5nKSB7XG4gICAgICAgIGlmIChlbmNvZGluZyA9PT0gJ2FzY2lpJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXNjaWlEZWNvZGVyLmRlY29kZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKG5ldyBUZXh0RGVjb2RlcihlbmNvZGluZykpLmRlY29kZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXNOYXRpdmUoYnVmZmVyLCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgwLCBsZW5ndGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFsbG9jTmF0aXZlKGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICB9XG59XG5NZXNzYWdlQnVmZmVyLmVtcHR5QnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG5jbGFzcyBSZWFkYWJsZVN0cmVhbVdyYXBwZXIge1xuICAgIGNvbnN0cnVjdG9yKHNvY2tldCkge1xuICAgICAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcbiAgICAgICAgdGhpcy5fb25EYXRhID0gbmV3IGFwaV8xLkVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5fbWVzc2FnZUxpc3RlbmVyID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBibG9iID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIGJsb2IuYXJyYXlCdWZmZXIoKS50aGVuKChidWZmZXIpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vbkRhdGEuZmlyZShuZXcgVWludDhBcnJheShidWZmZXIpKTtcbiAgICAgICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgICAgICAoMCwgYXBpXzEuUkFMKSgpLmNvbnNvbGUuZXJyb3IoYENvbnZlcnRpbmcgYmxvYiB0byBhcnJheSBidWZmZXIgZmFpbGVkLmApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLl9tZXNzYWdlTGlzdGVuZXIpO1xuICAgIH1cbiAgICBvbkNsb3NlKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gYXBpXzEuRGlzcG9zYWJsZS5jcmVhdGUoKCkgPT4gdGhpcy5zb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xvc2UnLCBsaXN0ZW5lcikpO1xuICAgIH1cbiAgICBvbkVycm9yKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gYXBpXzEuRGlzcG9zYWJsZS5jcmVhdGUoKCkgPT4gdGhpcy5zb2NrZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBsaXN0ZW5lcikpO1xuICAgIH1cbiAgICBvbkVuZChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLnNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdlbmQnLCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiBhcGlfMS5EaXNwb3NhYmxlLmNyZWF0ZSgoKSA9PiB0aGlzLnNvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKCdlbmQnLCBsaXN0ZW5lcikpO1xuICAgIH1cbiAgICBvbkRhdGEobGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29uRGF0YS5ldmVudChsaXN0ZW5lcik7XG4gICAgfVxufVxuY2xhc3MgV3JpdGFibGVTdHJlYW1XcmFwcGVyIHtcbiAgICBjb25zdHJ1Y3Rvcihzb2NrZXQpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gICAgfVxuICAgIG9uQ2xvc2UobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiBhcGlfMS5EaXNwb3NhYmxlLmNyZWF0ZSgoKSA9PiB0aGlzLnNvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbG9zZScsIGxpc3RlbmVyKSk7XG4gICAgfVxuICAgIG9uRXJyb3IobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiBhcGlfMS5EaXNwb3NhYmxlLmNyZWF0ZSgoKSA9PiB0aGlzLnNvY2tldC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGxpc3RlbmVyKSk7XG4gICAgfVxuICAgIG9uRW5kKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2VuZCcsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIGFwaV8xLkRpc3Bvc2FibGUuY3JlYXRlKCgpID0+IHRoaXMuc29ja2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2VuZCcsIGxpc3RlbmVyKSk7XG4gICAgfVxuICAgIHdyaXRlKGRhdGEsIGVuY29kaW5nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIGVuY29kaW5nICE9PSAndXRmLTgnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbiBhIEJyb3dzZXIgZW52aXJvbm1lbnRzIG9ubHkgdXRmLTggdGV4dCBlbmNvZGluZyBpcyBzdXBwb3J0ZWQuIEJ1dCBnb3QgZW5jb2Rpbmc6ICR7ZW5jb2Rpbmd9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5zZW5kKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuc2VuZChkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGVuZCgpIHtcbiAgICAgICAgdGhpcy5zb2NrZXQuY2xvc2UoKTtcbiAgICB9XG59XG5jb25zdCBfdGV4dEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbmNvbnN0IF9yaWwgPSBPYmplY3QuZnJlZXplKHtcbiAgICBtZXNzYWdlQnVmZmVyOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgY3JlYXRlOiAoZW5jb2RpbmcpID0+IG5ldyBNZXNzYWdlQnVmZmVyKGVuY29kaW5nKVxuICAgIH0pLFxuICAgIGFwcGxpY2F0aW9uSnNvbjogT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIGVuY29kZXI6IE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgbmFtZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgZW5jb2RlOiAobXNnLCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2hhcnNldCAhPT0gJ3V0Zi04Jykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluIGEgQnJvd3NlciBlbnZpcm9ubWVudHMgb25seSB1dGYtOCB0ZXh0IGVuY29kaW5nIGlzIHN1cHBvcnRlZC4gQnV0IGdvdCBlbmNvZGluZzogJHtvcHRpb25zLmNoYXJzZXR9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoX3RleHRFbmNvZGVyLmVuY29kZShKU09OLnN0cmluZ2lmeShtc2csIHVuZGVmaW5lZCwgMCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIGRlY29kZXI6IE9iamVjdC5mcmVlemUoe1xuICAgICAgICAgICAgbmFtZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgZGVjb2RlOiAoYnVmZmVyLCBvcHRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCEoYnVmZmVyIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbiBhIEJyb3dzZXIgZW52aXJvbm1lbnRzIG9ubHkgVWludDhBcnJheXMgYXJlIHN1cHBvcnRlZC5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShKU09OLnBhcnNlKG5ldyBUZXh0RGVjb2RlcihvcHRpb25zLmNoYXJzZXQpLmRlY29kZShidWZmZXIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSksXG4gICAgc3RyZWFtOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgYXNSZWFkYWJsZVN0cmVhbTogKHNvY2tldCkgPT4gbmV3IFJlYWRhYmxlU3RyZWFtV3JhcHBlcihzb2NrZXQpLFxuICAgICAgICBhc1dyaXRhYmxlU3RyZWFtOiAoc29ja2V0KSA9PiBuZXcgV3JpdGFibGVTdHJlYW1XcmFwcGVyKHNvY2tldClcbiAgICB9KSxcbiAgICBjb25zb2xlOiBjb25zb2xlLFxuICAgIHRpbWVyOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgbXMsIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZSA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIG1zLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IGNsZWFyVGltZW91dChoYW5kbGUpIH07XG4gICAgICAgIH0sXG4gICAgICAgIHNldEltbWVkaWF0ZShjYWxsYmFjaywgLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlID0gc2V0VGltZW91dChjYWxsYmFjaywgMCwgLi4uYXJncyk7XG4gICAgICAgICAgICByZXR1cm4geyBkaXNwb3NlOiAoKSA9PiBjbGVhclRpbWVvdXQoaGFuZGxlKSB9O1xuICAgICAgICB9LFxuICAgICAgICBzZXRJbnRlcnZhbChjYWxsYmFjaywgbXMsIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZSA9IHNldEludGVydmFsKGNhbGxiYWNrLCBtcywgLi4uYXJncyk7XG4gICAgICAgICAgICByZXR1cm4geyBkaXNwb3NlOiAoKSA9PiBjbGVhckludGVydmFsKGhhbmRsZSkgfTtcbiAgICAgICAgfSxcbiAgICB9KVxufSk7XG5mdW5jdGlvbiBSSUwoKSB7XG4gICAgcmV0dXJuIF9yaWw7XG59XG4oZnVuY3Rpb24gKFJJTCkge1xuICAgIGZ1bmN0aW9uIGluc3RhbGwoKSB7XG4gICAgICAgIGFwaV8xLlJBTC5pbnN0YWxsKF9yaWwpO1xuICAgIH1cbiAgICBSSUwuaW5zdGFsbCA9IGluc3RhbGw7XG59KShSSUwgfHwgKFJJTCA9IHt9KSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IFJJTDtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzY3Mjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL3RoZW5hYmxlLmQudHNcIiAvPlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLlByb2dyZXNzVHlwZSA9IGV4cG9ydHMuUHJvZ3Jlc3NUb2tlbiA9IGV4cG9ydHMuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24gPSBleHBvcnRzLk51bGxMb2dnZXIgPSBleHBvcnRzLkNvbm5lY3Rpb25PcHRpb25zID0gZXhwb3J0cy5Db25uZWN0aW9uU3RyYXRlZ3kgPSBleHBvcnRzLkFic3RyYWN0TWVzc2FnZUJ1ZmZlciA9IGV4cG9ydHMuV3JpdGVhYmxlU3RyZWFtTWVzc2FnZVdyaXRlciA9IGV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlV3JpdGVyID0gZXhwb3J0cy5NZXNzYWdlV3JpdGVyID0gZXhwb3J0cy5SZWFkYWJsZVN0cmVhbU1lc3NhZ2VSZWFkZXIgPSBleHBvcnRzLkFic3RyYWN0TWVzc2FnZVJlYWRlciA9IGV4cG9ydHMuTWVzc2FnZVJlYWRlciA9IGV4cG9ydHMuU2hhcmVkQXJyYXlSZWNlaXZlclN0cmF0ZWd5ID0gZXhwb3J0cy5TaGFyZWRBcnJheVNlbmRlclN0cmF0ZWd5ID0gZXhwb3J0cy5DYW5jZWxsYXRpb25Ub2tlbiA9IGV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UgPSBleHBvcnRzLkVtaXR0ZXIgPSBleHBvcnRzLkV2ZW50ID0gZXhwb3J0cy5EaXNwb3NhYmxlID0gZXhwb3J0cy5MUlVDYWNoZSA9IGV4cG9ydHMuVG91Y2ggPSBleHBvcnRzLkxpbmtlZE1hcCA9IGV4cG9ydHMuUGFyYW1ldGVyU3RydWN0dXJlcyA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTkgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGU4ID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNyA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTYgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGU1ID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNCA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTMgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGUyID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMSA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTAgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGUgPSBleHBvcnRzLkVycm9yQ29kZXMgPSBleHBvcnRzLlJlc3BvbnNlRXJyb3IgPSBleHBvcnRzLlJlcXVlc3RUeXBlOSA9IGV4cG9ydHMuUmVxdWVzdFR5cGU4ID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTcgPSBleHBvcnRzLlJlcXVlc3RUeXBlNiA9IGV4cG9ydHMuUmVxdWVzdFR5cGU1ID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTQgPSBleHBvcnRzLlJlcXVlc3RUeXBlMyA9IGV4cG9ydHMuUmVxdWVzdFR5cGUyID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTEgPSBleHBvcnRzLlJlcXVlc3RUeXBlMCA9IGV4cG9ydHMuUmVxdWVzdFR5cGUgPSBleHBvcnRzLk1lc3NhZ2UgPSBleHBvcnRzLlJBTCA9IHZvaWQgMDtcbmV4cG9ydHMuTWVzc2FnZVN0cmF0ZWd5ID0gZXhwb3J0cy5DYW5jZWxsYXRpb25TdHJhdGVneSA9IGV4cG9ydHMuQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3kgPSBleHBvcnRzLkNhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kgPSBleHBvcnRzLkNvbm5lY3Rpb25FcnJvciA9IGV4cG9ydHMuQ29ubmVjdGlvbkVycm9ycyA9IGV4cG9ydHMuTG9nVHJhY2VOb3RpZmljYXRpb24gPSBleHBvcnRzLlNldFRyYWNlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5UcmFjZUZvcm1hdCA9IGV4cG9ydHMuVHJhY2VWYWx1ZXMgPSBleHBvcnRzLlRyYWNlID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzE2Mik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNZXNzYWdlXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5NZXNzYWdlOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlcXVlc3RUeXBlXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5SZXF1ZXN0VHlwZTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTBcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlMDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTFcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlMTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlMjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTNcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlMzsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlNDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTVcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlNTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTZcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlNjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTdcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlNzsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZThcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlODsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXF1ZXN0VHlwZTlcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLlJlcXVlc3RUeXBlOTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZXNwb25zZUVycm9yXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVycm9yQ29kZXNcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLkVycm9yQ29kZXM7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90aWZpY2F0aW9uVHlwZVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25UeXBlMFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTA7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90aWZpY2F0aW9uVHlwZTFcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLk5vdGlmaWNhdGlvblR5cGUxOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGlmaWNhdGlvblR5cGUyXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlMjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25UeXBlM1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTM7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90aWZpY2F0aW9uVHlwZTRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLk5vdGlmaWNhdGlvblR5cGU0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGlmaWNhdGlvblR5cGU1XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlNTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25UeXBlNlwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTY7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTm90aWZpY2F0aW9uVHlwZTdcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlc18xLk5vdGlmaWNhdGlvblR5cGU3OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGlmaWNhdGlvblR5cGU4XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlODsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RpZmljYXRpb25UeXBlOVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZTk7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGFyYW1ldGVyU3RydWN0dXJlc1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlczsgfSB9KSk7XG5jb25zdCBsaW5rZWRNYXBfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEwOSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMaW5rZWRNYXBcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaW5rZWRNYXBfMS5MaW5rZWRNYXA7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTFJVQ2FjaGVcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsaW5rZWRNYXBfMS5MUlVDYWNoZTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUb3VjaFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpbmtlZE1hcF8xLlRvdWNoOyB9IH0pKTtcbmNvbnN0IGRpc3Bvc2FibGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODg0NCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaXNwb3NhYmxlXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzcG9zYWJsZV8xLkRpc3Bvc2FibGU7IH0gfSkpO1xuY29uc3QgZXZlbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0NzkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXZlbnRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBldmVudHNfMS5FdmVudDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbWl0dGVyXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXZlbnRzXzEuRW1pdHRlcjsgfSB9KSk7XG5jb25zdCBjYW5jZWxsYXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1Nyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDYW5jZWxsYXRpb25Ub2tlblNvdXJjZVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhbmNlbGxhdGlvbl8xLkNhbmNlbGxhdGlvblRva2VuU291cmNlOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhbmNlbGxhdGlvblRva2VuXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FuY2VsbGF0aW9uXzEuQ2FuY2VsbGF0aW9uVG9rZW47IH0gfSkpO1xuY29uc3Qgc2hhcmVkQXJyYXlDYW5jZWxsYXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzQ4OSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTaGFyZWRBcnJheVNlbmRlclN0cmF0ZWd5XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2hhcmVkQXJyYXlDYW5jZWxsYXRpb25fMS5TaGFyZWRBcnJheVNlbmRlclN0cmF0ZWd5OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNoYXJlZEFycmF5UmVjZWl2ZXJTdHJhdGVneVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNoYXJlZEFycmF5Q2FuY2VsbGF0aW9uXzEuU2hhcmVkQXJyYXlSZWNlaXZlclN0cmF0ZWd5OyB9IH0pKTtcbmNvbnN0IG1lc3NhZ2VSZWFkZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNjU2KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1lc3NhZ2VSZWFkZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlUmVhZGVyXzEuTWVzc2FnZVJlYWRlcjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBYnN0cmFjdE1lc3NhZ2VSZWFkZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlUmVhZGVyXzEuQWJzdHJhY3RNZXNzYWdlUmVhZGVyOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlJlYWRhYmxlU3RyZWFtTWVzc2FnZVJlYWRlclwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VSZWFkZXJfMS5SZWFkYWJsZVN0cmVhbU1lc3NhZ2VSZWFkZXI7IH0gfSkpO1xuY29uc3QgbWVzc2FnZVdyaXRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MDM2KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1lc3NhZ2VXcml0ZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlV3JpdGVyXzEuTWVzc2FnZVdyaXRlcjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBYnN0cmFjdE1lc3NhZ2VXcml0ZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlV3JpdGVyXzEuQWJzdHJhY3RNZXNzYWdlV3JpdGVyOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldyaXRlYWJsZVN0cmVhbU1lc3NhZ2VXcml0ZXJcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXNzYWdlV3JpdGVyXzEuV3JpdGVhYmxlU3RyZWFtTWVzc2FnZVdyaXRlcjsgfSB9KSk7XG5jb25zdCBtZXNzYWdlQnVmZmVyXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4MDUpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQWJzdHJhY3RNZXNzYWdlQnVmZmVyXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZUJ1ZmZlcl8xLkFic3RyYWN0TWVzc2FnZUJ1ZmZlcjsgfSB9KSk7XG5jb25zdCBjb25uZWN0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwNTQpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29ubmVjdGlvblN0cmF0ZWd5XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLkNvbm5lY3Rpb25TdHJhdGVneTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb25uZWN0aW9uT3B0aW9uc1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5Db25uZWN0aW9uT3B0aW9uczsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOdWxsTG9nZ2VyXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLk51bGxMb2dnZXI7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb25cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUHJvZ3Jlc3NUb2tlblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5Qcm9ncmVzc1Rva2VuOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlByb2dyZXNzVHlwZVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5Qcm9ncmVzc1R5cGU7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHJhY2VcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuVHJhY2U7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHJhY2VWYWx1ZXNcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuVHJhY2VWYWx1ZXM7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVHJhY2VGb3JtYXRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuVHJhY2VGb3JtYXQ7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2V0VHJhY2VOb3RpZmljYXRpb25cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuU2V0VHJhY2VOb3RpZmljYXRpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTG9nVHJhY2VOb3RpZmljYXRpb25cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuTG9nVHJhY2VOb3RpZmljYXRpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29ubmVjdGlvbkVycm9yc1wiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5Db25uZWN0aW9uRXJyb3JzOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbm5lY3Rpb25FcnJvclwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5Db25uZWN0aW9uRXJyb3I7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5DYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLkNhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhbmNlbGxhdGlvblN0cmF0ZWd5XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdGlvbl8xLkNhbmNlbGxhdGlvblN0cmF0ZWd5OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1lc3NhZ2VTdHJhdGVneVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3Rpb25fMS5NZXNzYWdlU3RyYXRlZ3k7IH0gfSkpO1xuY29uc3QgcmFsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwOTEpO1xuZXhwb3J0cy5SQUwgPSByYWxfMS5kZWZhdWx0O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2OTU3OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UgPSBleHBvcnRzLkNhbmNlbGxhdGlvblRva2VuID0gdm9pZCAwO1xuY29uc3QgcmFsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwOTEpO1xuY29uc3QgSXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2MTgpO1xuY29uc3QgZXZlbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0NzkpO1xudmFyIENhbmNlbGxhdGlvblRva2VuO1xuKGZ1bmN0aW9uIChDYW5jZWxsYXRpb25Ub2tlbikge1xuICAgIENhbmNlbGxhdGlvblRva2VuLk5vbmUgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IGZhbHNlLFxuICAgICAgICBvbkNhbmNlbGxhdGlvblJlcXVlc3RlZDogZXZlbnRzXzEuRXZlbnQuTm9uZVxuICAgIH0pO1xuICAgIENhbmNlbGxhdGlvblRva2VuLkNhbmNlbGxlZCA9IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZDogdHJ1ZSxcbiAgICAgICAgb25DYW5jZWxsYXRpb25SZXF1ZXN0ZWQ6IGV2ZW50c18xLkV2ZW50Lk5vbmVcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiAoY2FuZGlkYXRlID09PSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lXG4gICAgICAgICAgICB8fCBjYW5kaWRhdGUgPT09IENhbmNlbGxhdGlvblRva2VuLkNhbmNlbGxlZFxuICAgICAgICAgICAgfHwgKElzLmJvb2xlYW4oY2FuZGlkYXRlLmlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKSAmJiAhIWNhbmRpZGF0ZS5vbkNhbmNlbGxhdGlvblJlcXVlc3RlZCkpO1xuICAgIH1cbiAgICBDYW5jZWxsYXRpb25Ub2tlbi5pcyA9IGlzO1xufSkoQ2FuY2VsbGF0aW9uVG9rZW4gPSBleHBvcnRzLkNhbmNlbGxhdGlvblRva2VuIHx8IChleHBvcnRzLkNhbmNlbGxhdGlvblRva2VuID0ge30pKTtcbmNvbnN0IHNob3J0Y3V0RXZlbnQgPSBPYmplY3QuZnJlZXplKGZ1bmN0aW9uIChjYWxsYmFjaywgY29udGV4dCkge1xuICAgIGNvbnN0IGhhbmRsZSA9ICgwLCByYWxfMS5kZWZhdWx0KSgpLnRpbWVyLnNldFRpbWVvdXQoY2FsbGJhY2suYmluZChjb250ZXh0KSwgMCk7XG4gICAgcmV0dXJuIHsgZGlzcG9zZSgpIHsgaGFuZGxlLmRpc3Bvc2UoKTsgfSB9O1xufSk7XG5jbGFzcyBNdXRhYmxlVG9rZW4ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIGlmICghdGhpcy5faXNDYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbWl0dGVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5maXJlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGlzQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNDYW5jZWxsZWQ7XG4gICAgfVxuICAgIGdldCBvbkNhbmNlbGxhdGlvblJlcXVlc3RlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzQ2FuY2VsbGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc2hvcnRjdXRFdmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2VtaXR0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9lbWl0dGVyLmV2ZW50O1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fZW1pdHRlcikge1xuICAgICAgICAgICAgdGhpcy5fZW1pdHRlci5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuY2xhc3MgQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2Uge1xuICAgIGdldCB0b2tlbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90b2tlbikge1xuICAgICAgICAgICAgLy8gYmUgbGF6eSBhbmQgY3JlYXRlIHRoZSB0b2tlbiBvbmx5IHdoZW5cbiAgICAgICAgICAgIC8vIGFjdHVhbGx5IG5lZWRlZFxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBuZXcgTXV0YWJsZVRva2VuKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rva2VuO1xuICAgIH1cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIGlmICghdGhpcy5fdG9rZW4pIHtcbiAgICAgICAgICAgIC8vIHNhdmUgYW4gb2JqZWN0IGJ5IHJldHVybmluZyB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgLy8gY2FuY2VsbGVkIHRva2VuIHdoZW4gY2FuY2VsbGF0aW9uIGhhcHBlbnNcbiAgICAgICAgICAgIC8vIGJlZm9yZSBzb21lb25lIGFza3MgZm9yIHRoZSB0b2tlblxuICAgICAgICAgICAgdGhpcy5fdG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbi5DYW5jZWxsZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl90b2tlbi5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3Rva2VuKSB7XG4gICAgICAgICAgICAvLyBlbnN1cmUgdG8gaW5pdGlhbGl6ZSB3aXRoIGFuIGVtcHR5IHRva2VuIGlmIHdlIGhhZCBub25lXG4gICAgICAgICAgICB0aGlzLl90b2tlbiA9IENhbmNlbGxhdGlvblRva2VuLk5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fdG9rZW4gaW5zdGFuY2VvZiBNdXRhYmxlVG9rZW4pIHtcbiAgICAgICAgICAgIC8vIGFjdHVhbGx5IGRpc3Bvc2VcbiAgICAgICAgICAgIHRoaXMuX3Rva2VuLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UgPSBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDA1NDpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5jcmVhdGVNZXNzYWdlQ29ubmVjdGlvbiA9IGV4cG9ydHMuQ29ubmVjdGlvbk9wdGlvbnMgPSBleHBvcnRzLk1lc3NhZ2VTdHJhdGVneSA9IGV4cG9ydHMuQ2FuY2VsbGF0aW9uU3RyYXRlZ3kgPSBleHBvcnRzLkNhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5ID0gZXhwb3J0cy5DYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5ID0gZXhwb3J0cy5SZXF1ZXN0Q2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IGV4cG9ydHMuSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5ID0gZXhwb3J0cy5Db25uZWN0aW9uU3RyYXRlZ3kgPSBleHBvcnRzLkNvbm5lY3Rpb25FcnJvciA9IGV4cG9ydHMuQ29ubmVjdGlvbkVycm9ycyA9IGV4cG9ydHMuTG9nVHJhY2VOb3RpZmljYXRpb24gPSBleHBvcnRzLlNldFRyYWNlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5UcmFjZUZvcm1hdCA9IGV4cG9ydHMuVHJhY2VWYWx1ZXMgPSBleHBvcnRzLlRyYWNlID0gZXhwb3J0cy5OdWxsTG9nZ2VyID0gZXhwb3J0cy5Qcm9ncmVzc1R5cGUgPSBleHBvcnRzLlByb2dyZXNzVG9rZW4gPSB2b2lkIDA7XG5jb25zdCByYWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTA5MSk7XG5jb25zdCBJcyA9IF9fd2VicGFja19yZXF1aXJlX18oNjYxOCk7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MTYyKTtcbmNvbnN0IGxpbmtlZE1hcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTA5KTtcbmNvbnN0IGV2ZW50c18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNDc5KTtcbmNvbnN0IGNhbmNlbGxhdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTU3KTtcbnZhciBDYW5jZWxOb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKENhbmNlbE5vdGlmaWNhdGlvbikge1xuICAgIENhbmNlbE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuTm90aWZpY2F0aW9uVHlwZSgnJC9jYW5jZWxSZXF1ZXN0Jyk7XG59KShDYW5jZWxOb3RpZmljYXRpb24gfHwgKENhbmNlbE5vdGlmaWNhdGlvbiA9IHt9KSk7XG52YXIgUHJvZ3Jlc3NUb2tlbjtcbihmdW5jdGlvbiAoUHJvZ3Jlc3NUb2tlbikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG4gICAgfVxuICAgIFByb2dyZXNzVG9rZW4uaXMgPSBpcztcbn0pKFByb2dyZXNzVG9rZW4gPSBleHBvcnRzLlByb2dyZXNzVG9rZW4gfHwgKGV4cG9ydHMuUHJvZ3Jlc3NUb2tlbiA9IHt9KSk7XG52YXIgUHJvZ3Jlc3NOb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKFByb2dyZXNzTm90aWZpY2F0aW9uKSB7XG4gICAgUHJvZ3Jlc3NOb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLk5vdGlmaWNhdGlvblR5cGUoJyQvcHJvZ3Jlc3MnKTtcbn0pKFByb2dyZXNzTm90aWZpY2F0aW9uIHx8IChQcm9ncmVzc05vdGlmaWNhdGlvbiA9IHt9KSk7XG5jbGFzcyBQcm9ncmVzc1R5cGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvZ3Jlc3NUeXBlID0gUHJvZ3Jlc3NUeXBlO1xudmFyIFN0YXJSZXF1ZXN0SGFuZGxlcjtcbihmdW5jdGlvbiAoU3RhclJlcXVlc3RIYW5kbGVyKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIElzLmZ1bmModmFsdWUpO1xuICAgIH1cbiAgICBTdGFyUmVxdWVzdEhhbmRsZXIuaXMgPSBpcztcbn0pKFN0YXJSZXF1ZXN0SGFuZGxlciB8fCAoU3RhclJlcXVlc3RIYW5kbGVyID0ge30pKTtcbmV4cG9ydHMuTnVsbExvZ2dlciA9IE9iamVjdC5mcmVlemUoe1xuICAgIGVycm9yOiAoKSA9PiB7IH0sXG4gICAgd2FybjogKCkgPT4geyB9LFxuICAgIGluZm86ICgpID0+IHsgfSxcbiAgICBsb2c6ICgpID0+IHsgfVxufSk7XG52YXIgVHJhY2U7XG4oZnVuY3Rpb24gKFRyYWNlKSB7XG4gICAgVHJhY2VbVHJhY2VbXCJPZmZcIl0gPSAwXSA9IFwiT2ZmXCI7XG4gICAgVHJhY2VbVHJhY2VbXCJNZXNzYWdlc1wiXSA9IDFdID0gXCJNZXNzYWdlc1wiO1xuICAgIFRyYWNlW1RyYWNlW1wiQ29tcGFjdFwiXSA9IDJdID0gXCJDb21wYWN0XCI7XG4gICAgVHJhY2VbVHJhY2VbXCJWZXJib3NlXCJdID0gM10gPSBcIlZlcmJvc2VcIjtcbn0pKFRyYWNlID0gZXhwb3J0cy5UcmFjZSB8fCAoZXhwb3J0cy5UcmFjZSA9IHt9KSk7XG52YXIgVHJhY2VWYWx1ZXM7XG4oZnVuY3Rpb24gKFRyYWNlVmFsdWVzKSB7XG4gICAgLyoqXG4gICAgICogVHVybiB0cmFjaW5nIG9mZi5cbiAgICAgKi9cbiAgICBUcmFjZVZhbHVlcy5PZmYgPSAnb2ZmJztcbiAgICAvKipcbiAgICAgKiBUcmFjZSBtZXNzYWdlcyBvbmx5LlxuICAgICAqL1xuICAgIFRyYWNlVmFsdWVzLk1lc3NhZ2VzID0gJ21lc3NhZ2VzJztcbiAgICAvKipcbiAgICAgKiBDb21wYWN0IG1lc3NhZ2UgdHJhY2luZy5cbiAgICAgKi9cbiAgICBUcmFjZVZhbHVlcy5Db21wYWN0ID0gJ2NvbXBhY3QnO1xuICAgIC8qKlxuICAgICAqIFZlcmJvc2UgbWVzc2FnZSB0cmFjaW5nLlxuICAgICAqL1xuICAgIFRyYWNlVmFsdWVzLlZlcmJvc2UgPSAndmVyYm9zZSc7XG59KShUcmFjZVZhbHVlcyA9IGV4cG9ydHMuVHJhY2VWYWx1ZXMgfHwgKGV4cG9ydHMuVHJhY2VWYWx1ZXMgPSB7fSkpO1xuKGZ1bmN0aW9uIChUcmFjZSkge1xuICAgIGZ1bmN0aW9uIGZyb21TdHJpbmcodmFsdWUpIHtcbiAgICAgICAgaWYgKCFJcy5zdHJpbmcodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gVHJhY2UuT2ZmO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnb2ZmJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gVHJhY2UuT2ZmO1xuICAgICAgICAgICAgY2FzZSAnbWVzc2FnZXMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBUcmFjZS5NZXNzYWdlcztcbiAgICAgICAgICAgIGNhc2UgJ2NvbXBhY3QnOlxuICAgICAgICAgICAgICAgIHJldHVybiBUcmFjZS5Db21wYWN0O1xuICAgICAgICAgICAgY2FzZSAndmVyYm9zZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRyYWNlLlZlcmJvc2U7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBUcmFjZS5PZmY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVHJhY2UuZnJvbVN0cmluZyA9IGZyb21TdHJpbmc7XG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSBUcmFjZS5PZmY6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdvZmYnO1xuICAgICAgICAgICAgY2FzZSBUcmFjZS5NZXNzYWdlczpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ21lc3NhZ2VzJztcbiAgICAgICAgICAgIGNhc2UgVHJhY2UuQ29tcGFjdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2NvbXBhY3QnO1xuICAgICAgICAgICAgY2FzZSBUcmFjZS5WZXJib3NlOlxuICAgICAgICAgICAgICAgIHJldHVybiAndmVyYm9zZSc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAnb2ZmJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBUcmFjZS50b1N0cmluZyA9IHRvU3RyaW5nO1xufSkoVHJhY2UgPSBleHBvcnRzLlRyYWNlIHx8IChleHBvcnRzLlRyYWNlID0ge30pKTtcbnZhciBUcmFjZUZvcm1hdDtcbihmdW5jdGlvbiAoVHJhY2VGb3JtYXQpIHtcbiAgICBUcmFjZUZvcm1hdFtcIlRleHRcIl0gPSBcInRleHRcIjtcbiAgICBUcmFjZUZvcm1hdFtcIkpTT05cIl0gPSBcImpzb25cIjtcbn0pKFRyYWNlRm9ybWF0ID0gZXhwb3J0cy5UcmFjZUZvcm1hdCB8fCAoZXhwb3J0cy5UcmFjZUZvcm1hdCA9IHt9KSk7XG4oZnVuY3Rpb24gKFRyYWNlRm9ybWF0KSB7XG4gICAgZnVuY3Rpb24gZnJvbVN0cmluZyh2YWx1ZSkge1xuICAgICAgICBpZiAoIUlzLnN0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBUcmFjZUZvcm1hdC5UZXh0O1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnanNvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBUcmFjZUZvcm1hdC5KU09OO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFRyYWNlRm9ybWF0LlRleHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgVHJhY2VGb3JtYXQuZnJvbVN0cmluZyA9IGZyb21TdHJpbmc7XG59KShUcmFjZUZvcm1hdCA9IGV4cG9ydHMuVHJhY2VGb3JtYXQgfHwgKGV4cG9ydHMuVHJhY2VGb3JtYXQgPSB7fSkpO1xudmFyIFNldFRyYWNlTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChTZXRUcmFjZU5vdGlmaWNhdGlvbikge1xuICAgIFNldFRyYWNlTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlKCckL3NldFRyYWNlJyk7XG59KShTZXRUcmFjZU5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuU2V0VHJhY2VOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuU2V0VHJhY2VOb3RpZmljYXRpb24gPSB7fSkpO1xudmFyIExvZ1RyYWNlTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChMb2dUcmFjZU5vdGlmaWNhdGlvbikge1xuICAgIExvZ1RyYWNlTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Ob3RpZmljYXRpb25UeXBlKCckL2xvZ1RyYWNlJyk7XG59KShMb2dUcmFjZU5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuTG9nVHJhY2VOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuTG9nVHJhY2VOb3RpZmljYXRpb24gPSB7fSkpO1xudmFyIENvbm5lY3Rpb25FcnJvcnM7XG4oZnVuY3Rpb24gKENvbm5lY3Rpb25FcnJvcnMpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY29ubmVjdGlvbiBpcyBjbG9zZWQuXG4gICAgICovXG4gICAgQ29ubmVjdGlvbkVycm9yc1tDb25uZWN0aW9uRXJyb3JzW1wiQ2xvc2VkXCJdID0gMV0gPSBcIkNsb3NlZFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb25uZWN0aW9uIGdvdCBkaXNwb3NlZC5cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uRXJyb3JzW0Nvbm5lY3Rpb25FcnJvcnNbXCJEaXNwb3NlZFwiXSA9IDJdID0gXCJEaXNwb3NlZFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb25uZWN0aW9uIGlzIGFscmVhZHkgaW4gbGlzdGVuaW5nIG1vZGUuXG4gICAgICovXG4gICAgQ29ubmVjdGlvbkVycm9yc1tDb25uZWN0aW9uRXJyb3JzW1wiQWxyZWFkeUxpc3RlbmluZ1wiXSA9IDNdID0gXCJBbHJlYWR5TGlzdGVuaW5nXCI7XG59KShDb25uZWN0aW9uRXJyb3JzID0gZXhwb3J0cy5Db25uZWN0aW9uRXJyb3JzIHx8IChleHBvcnRzLkNvbm5lY3Rpb25FcnJvcnMgPSB7fSkpO1xuY2xhc3MgQ29ubmVjdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBDb25uZWN0aW9uRXJyb3IucHJvdG90eXBlKTtcbiAgICB9XG59XG5leHBvcnRzLkNvbm5lY3Rpb25FcnJvciA9IENvbm5lY3Rpb25FcnJvcjtcbnZhciBDb25uZWN0aW9uU3RyYXRlZ3k7XG4oZnVuY3Rpb24gKENvbm5lY3Rpb25TdHJhdGVneSkge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLmZ1bmMoY2FuZGlkYXRlLmNhbmNlbFVuZGlzcGF0Y2hlZCk7XG4gICAgfVxuICAgIENvbm5lY3Rpb25TdHJhdGVneS5pcyA9IGlzO1xufSkoQ29ubmVjdGlvblN0cmF0ZWd5ID0gZXhwb3J0cy5Db25uZWN0aW9uU3RyYXRlZ3kgfHwgKGV4cG9ydHMuQ29ubmVjdGlvblN0cmF0ZWd5ID0ge30pKTtcbnZhciBJZENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3k7XG4oZnVuY3Rpb24gKElkQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSkge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIChjYW5kaWRhdGUua2luZCA9PT0gdW5kZWZpbmVkIHx8IGNhbmRpZGF0ZS5raW5kID09PSAnaWQnKSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5jcmVhdGVDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSkgJiYgKGNhbmRpZGF0ZS5kaXNwb3NlID09PSB1bmRlZmluZWQgfHwgSXMuZnVuYyhjYW5kaWRhdGUuZGlzcG9zZSkpO1xuICAgIH1cbiAgICBJZENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kuaXMgPSBpcztcbn0pKElkQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IGV4cG9ydHMuSWRDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5IHx8IChleHBvcnRzLklkQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IHt9KSk7XG52YXIgUmVxdWVzdENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3k7XG4oZnVuY3Rpb24gKFJlcXVlc3RDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5KSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgY2FuZGlkYXRlLmtpbmQgPT09ICdyZXF1ZXN0JyAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5jcmVhdGVDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSkgJiYgKGNhbmRpZGF0ZS5kaXNwb3NlID09PSB1bmRlZmluZWQgfHwgSXMuZnVuYyhjYW5kaWRhdGUuZGlzcG9zZSkpO1xuICAgIH1cbiAgICBSZXF1ZXN0Q2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5pcyA9IGlzO1xufSkoUmVxdWVzdENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kgPSBleHBvcnRzLlJlcXVlc3RDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5IHx8IChleHBvcnRzLlJlcXVlc3RDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5ID0ge30pKTtcbnZhciBDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5O1xuKGZ1bmN0aW9uIChDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5KSB7XG4gICAgQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5NZXNzYWdlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIGNyZWF0ZUNhbmNlbGxhdGlvblRva2VuU291cmNlKF8pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2FuY2VsbGF0aW9uXzEuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBJZENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kuaXModmFsdWUpIHx8IFJlcXVlc3RDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5LmlzKHZhbHVlKTtcbiAgICB9XG4gICAgQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5pcyA9IGlzO1xufSkoQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSA9IGV4cG9ydHMuQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSB8fCAoZXhwb3J0cy5DYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5ID0ge30pKTtcbnZhciBDYW5jZWxsYXRpb25TZW5kZXJTdHJhdGVneTtcbihmdW5jdGlvbiAoQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3kpIHtcbiAgICBDYW5jZWxsYXRpb25TZW5kZXJTdHJhdGVneS5NZXNzYWdlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIHNlbmRDYW5jZWxsYXRpb24oY29ubiwgaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25uLnNlbmROb3RpZmljYXRpb24oQ2FuY2VsTm90aWZpY2F0aW9uLnR5cGUsIHsgaWQgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFudXAoXykgeyB9XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgSXMuZnVuYyhjYW5kaWRhdGUuc2VuZENhbmNlbGxhdGlvbikgJiYgSXMuZnVuYyhjYW5kaWRhdGUuY2xlYW51cCk7XG4gICAgfVxuICAgIENhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5LmlzID0gaXM7XG59KShDYW5jZWxsYXRpb25TZW5kZXJTdHJhdGVneSA9IGV4cG9ydHMuQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3kgfHwgKGV4cG9ydHMuQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3kgPSB7fSkpO1xudmFyIENhbmNlbGxhdGlvblN0cmF0ZWd5O1xuKGZ1bmN0aW9uIChDYW5jZWxsYXRpb25TdHJhdGVneSkge1xuICAgIENhbmNlbGxhdGlvblN0cmF0ZWd5Lk1lc3NhZ2UgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgcmVjZWl2ZXI6IENhbmNlbGxhdGlvblJlY2VpdmVyU3RyYXRlZ3kuTWVzc2FnZSxcbiAgICAgICAgc2VuZGVyOiBDYW5jZWxsYXRpb25TZW5kZXJTdHJhdGVneS5NZXNzYWdlXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5pcyhjYW5kaWRhdGUucmVjZWl2ZXIpICYmIENhbmNlbGxhdGlvblNlbmRlclN0cmF0ZWd5LmlzKGNhbmRpZGF0ZS5zZW5kZXIpO1xuICAgIH1cbiAgICBDYW5jZWxsYXRpb25TdHJhdGVneS5pcyA9IGlzO1xufSkoQ2FuY2VsbGF0aW9uU3RyYXRlZ3kgPSBleHBvcnRzLkNhbmNlbGxhdGlvblN0cmF0ZWd5IHx8IChleHBvcnRzLkNhbmNlbGxhdGlvblN0cmF0ZWd5ID0ge30pKTtcbnZhciBNZXNzYWdlU3RyYXRlZ3k7XG4oZnVuY3Rpb24gKE1lc3NhZ2VTdHJhdGVneSkge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLmZ1bmMoY2FuZGlkYXRlLmhhbmRsZU1lc3NhZ2UpO1xuICAgIH1cbiAgICBNZXNzYWdlU3RyYXRlZ3kuaXMgPSBpcztcbn0pKE1lc3NhZ2VTdHJhdGVneSA9IGV4cG9ydHMuTWVzc2FnZVN0cmF0ZWd5IHx8IChleHBvcnRzLk1lc3NhZ2VTdHJhdGVneSA9IHt9KSk7XG52YXIgQ29ubmVjdGlvbk9wdGlvbnM7XG4oZnVuY3Rpb24gKENvbm5lY3Rpb25PcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgKENhbmNlbGxhdGlvblN0cmF0ZWd5LmlzKGNhbmRpZGF0ZS5jYW5jZWxsYXRpb25TdHJhdGVneSkgfHwgQ29ubmVjdGlvblN0cmF0ZWd5LmlzKGNhbmRpZGF0ZS5jb25uZWN0aW9uU3RyYXRlZ3kpIHx8IE1lc3NhZ2VTdHJhdGVneS5pcyhjYW5kaWRhdGUubWVzc2FnZVN0cmF0ZWd5KSk7XG4gICAgfVxuICAgIENvbm5lY3Rpb25PcHRpb25zLmlzID0gaXM7XG59KShDb25uZWN0aW9uT3B0aW9ucyA9IGV4cG9ydHMuQ29ubmVjdGlvbk9wdGlvbnMgfHwgKGV4cG9ydHMuQ29ubmVjdGlvbk9wdGlvbnMgPSB7fSkpO1xudmFyIENvbm5lY3Rpb25TdGF0ZTtcbihmdW5jdGlvbiAoQ29ubmVjdGlvblN0YXRlKSB7XG4gICAgQ29ubmVjdGlvblN0YXRlW0Nvbm5lY3Rpb25TdGF0ZVtcIk5ld1wiXSA9IDFdID0gXCJOZXdcIjtcbiAgICBDb25uZWN0aW9uU3RhdGVbQ29ubmVjdGlvblN0YXRlW1wiTGlzdGVuaW5nXCJdID0gMl0gPSBcIkxpc3RlbmluZ1wiO1xuICAgIENvbm5lY3Rpb25TdGF0ZVtDb25uZWN0aW9uU3RhdGVbXCJDbG9zZWRcIl0gPSAzXSA9IFwiQ2xvc2VkXCI7XG4gICAgQ29ubmVjdGlvblN0YXRlW0Nvbm5lY3Rpb25TdGF0ZVtcIkRpc3Bvc2VkXCJdID0gNF0gPSBcIkRpc3Bvc2VkXCI7XG59KShDb25uZWN0aW9uU3RhdGUgfHwgKENvbm5lY3Rpb25TdGF0ZSA9IHt9KSk7XG5mdW5jdGlvbiBjcmVhdGVNZXNzYWdlQ29ubmVjdGlvbihtZXNzYWdlUmVhZGVyLCBtZXNzYWdlV3JpdGVyLCBfbG9nZ2VyLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbG9nZ2VyID0gX2xvZ2dlciAhPT0gdW5kZWZpbmVkID8gX2xvZ2dlciA6IGV4cG9ydHMuTnVsbExvZ2dlcjtcbiAgICBsZXQgc2VxdWVuY2VOdW1iZXIgPSAwO1xuICAgIGxldCBub3RpZmljYXRpb25TZXF1ZW5jZU51bWJlciA9IDA7XG4gICAgbGV0IHVua25vd25SZXNwb25zZVNlcXVlbmNlTnVtYmVyID0gMDtcbiAgICBjb25zdCB2ZXJzaW9uID0gJzIuMCc7XG4gICAgbGV0IHN0YXJSZXF1ZXN0SGFuZGxlciA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCByZXF1ZXN0SGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IHN0YXJOb3RpZmljYXRpb25IYW5kbGVyID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbkhhbmRsZXJzID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHByb2dyZXNzSGFuZGxlcnMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IHRpbWVyO1xuICAgIGxldCBtZXNzYWdlUXVldWUgPSBuZXcgbGlua2VkTWFwXzEuTGlua2VkTWFwKCk7XG4gICAgbGV0IHJlc3BvbnNlUHJvbWlzZXMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IGtub3duQ2FuY2VsZWRSZXF1ZXN0cyA9IG5ldyBTZXQoKTtcbiAgICBsZXQgcmVxdWVzdFRva2VucyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgdHJhY2UgPSBUcmFjZS5PZmY7XG4gICAgbGV0IHRyYWNlRm9ybWF0ID0gVHJhY2VGb3JtYXQuVGV4dDtcbiAgICBsZXQgdHJhY2VyO1xuICAgIGxldCBzdGF0ZSA9IENvbm5lY3Rpb25TdGF0ZS5OZXc7XG4gICAgY29uc3QgZXJyb3JFbWl0dGVyID0gbmV3IGV2ZW50c18xLkVtaXR0ZXIoKTtcbiAgICBjb25zdCBjbG9zZUVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgIGNvbnN0IHVuaGFuZGxlZE5vdGlmaWNhdGlvbkVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgIGNvbnN0IHVuaGFuZGxlZFByb2dyZXNzRW1pdHRlciA9IG5ldyBldmVudHNfMS5FbWl0dGVyKCk7XG4gICAgY29uc3QgZGlzcG9zZUVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgIGNvbnN0IGNhbmNlbGxhdGlvblN0cmF0ZWd5ID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5jYW5jZWxsYXRpb25TdHJhdGVneSkgPyBvcHRpb25zLmNhbmNlbGxhdGlvblN0cmF0ZWd5IDogQ2FuY2VsbGF0aW9uU3RyYXRlZ3kuTWVzc2FnZTtcbiAgICBmdW5jdGlvbiBjcmVhdGVSZXF1ZXN0UXVldWVLZXkoaWQpIHtcbiAgICAgICAgaWYgKGlkID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHNlbmQgcmVxdWVzdHMgd2l0aCBpZCBudWxsIHNpbmNlIHRoZSByZXNwb25zZSBjYW4ndCBiZSBjb3JyZWxhdGVkLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAncmVxLScgKyBpZC50b1N0cmluZygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVSZXNwb25zZVF1ZXVlS2V5KGlkKSB7XG4gICAgICAgIGlmIChpZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuICdyZXMtdW5rbm93bi0nICsgKCsrdW5rbm93blJlc3BvbnNlU2VxdWVuY2VOdW1iZXIpLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ3Jlcy0nICsgaWQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVOb3RpZmljYXRpb25RdWV1ZUtleSgpIHtcbiAgICAgICAgcmV0dXJuICdub3QtJyArICgrK25vdGlmaWNhdGlvblNlcXVlbmNlTnVtYmVyKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRNZXNzYWdlVG9RdWV1ZShxdWV1ZSwgbWVzc2FnZSkge1xuICAgICAgICBpZiAobWVzc2FnZXNfMS5NZXNzYWdlLmlzUmVxdWVzdChtZXNzYWdlKSkge1xuICAgICAgICAgICAgcXVldWUuc2V0KGNyZWF0ZVJlcXVlc3RRdWV1ZUtleShtZXNzYWdlLmlkKSwgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWVzc2FnZXNfMS5NZXNzYWdlLmlzUmVzcG9uc2UobWVzc2FnZSkpIHtcbiAgICAgICAgICAgIHF1ZXVlLnNldChjcmVhdGVSZXNwb25zZVF1ZXVlS2V5KG1lc3NhZ2UuaWQpLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHF1ZXVlLnNldChjcmVhdGVOb3RpZmljYXRpb25RdWV1ZUtleSgpLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjYW5jZWxVbmRpc3BhdGNoZWQoX21lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNMaXN0ZW5pbmcoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkxpc3RlbmluZztcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNDbG9zZWQoKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkNsb3NlZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNEaXNwb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlID09PSBDb25uZWN0aW9uU3RhdGUuRGlzcG9zZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsb3NlSGFuZGxlcigpIHtcbiAgICAgICAgaWYgKHN0YXRlID09PSBDb25uZWN0aW9uU3RhdGUuTmV3IHx8IHN0YXRlID09PSBDb25uZWN0aW9uU3RhdGUuTGlzdGVuaW5nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IENvbm5lY3Rpb25TdGF0ZS5DbG9zZWQ7XG4gICAgICAgICAgICBjbG9zZUVtaXR0ZXIuZmlyZSh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBjb25uZWN0aW9uIGlzIGRpc3Bvc2VkIGRvbid0IHNlbnQgY2xvc2UgZXZlbnRzLlxuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkRXJyb3JIYW5kbGVyKGVycm9yKSB7XG4gICAgICAgIGVycm9yRW1pdHRlci5maXJlKFtlcnJvciwgdW5kZWZpbmVkLCB1bmRlZmluZWRdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JpdGVFcnJvckhhbmRsZXIoZGF0YSkge1xuICAgICAgICBlcnJvckVtaXR0ZXIuZmlyZShkYXRhKTtcbiAgICB9XG4gICAgbWVzc2FnZVJlYWRlci5vbkNsb3NlKGNsb3NlSGFuZGxlcik7XG4gICAgbWVzc2FnZVJlYWRlci5vbkVycm9yKHJlYWRFcnJvckhhbmRsZXIpO1xuICAgIG1lc3NhZ2VXcml0ZXIub25DbG9zZShjbG9zZUhhbmRsZXIpO1xuICAgIG1lc3NhZ2VXcml0ZXIub25FcnJvcih3cml0ZUVycm9ySGFuZGxlcik7XG4gICAgZnVuY3Rpb24gdHJpZ2dlck1lc3NhZ2VRdWV1ZSgpIHtcbiAgICAgICAgaWYgKHRpbWVyIHx8IG1lc3NhZ2VRdWV1ZS5zaXplID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGltZXIgPSAoMCwgcmFsXzEuZGVmYXVsdCkoKS50aW1lci5zZXRJbW1lZGlhdGUoKCkgPT4ge1xuICAgICAgICAgICAgdGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBwcm9jZXNzTWVzc2FnZVF1ZXVlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2VzXzEuTWVzc2FnZS5pc1JlcXVlc3QobWVzc2FnZSkpIHtcbiAgICAgICAgICAgIGhhbmRsZVJlcXVlc3QobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWVzc2FnZXNfMS5NZXNzYWdlLmlzTm90aWZpY2F0aW9uKG1lc3NhZ2UpKSB7XG4gICAgICAgICAgICBoYW5kbGVOb3RpZmljYXRpb24obWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWVzc2FnZXNfMS5NZXNzYWdlLmlzUmVzcG9uc2UobWVzc2FnZSkpIHtcbiAgICAgICAgICAgIGhhbmRsZVJlc3BvbnNlKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlSW52YWxpZE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvY2Vzc01lc3NhZ2VRdWV1ZSgpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2VRdWV1ZS5zaXplID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IG1lc3NhZ2VRdWV1ZS5zaGlmdCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZVN0cmF0ZWd5ID0gb3B0aW9ucz8ubWVzc2FnZVN0cmF0ZWd5O1xuICAgICAgICAgICAgaWYgKE1lc3NhZ2VTdHJhdGVneS5pcyhtZXNzYWdlU3RyYXRlZ3kpKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZVN0cmF0ZWd5LmhhbmRsZU1lc3NhZ2UobWVzc2FnZSwgaGFuZGxlTWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJpZ2dlck1lc3NhZ2VRdWV1ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNhbGxiYWNrID0gKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdlIGhhdmUgcmVjZWl2ZWQgYSBjYW5jZWxsYXRpb24gbWVzc2FnZS4gQ2hlY2sgaWYgdGhlIG1lc3NhZ2UgaXMgc3RpbGwgaW4gdGhlIHF1ZXVlXG4gICAgICAgICAgICAvLyBhbmQgY2FuY2VsIGl0IGlmIGFsbG93ZWQgdG8gZG8gc28uXG4gICAgICAgICAgICBpZiAobWVzc2FnZXNfMS5NZXNzYWdlLmlzTm90aWZpY2F0aW9uKG1lc3NhZ2UpICYmIG1lc3NhZ2UubWV0aG9kID09PSBDYW5jZWxOb3RpZmljYXRpb24udHlwZS5tZXRob2QpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYW5jZWxJZCA9IG1lc3NhZ2UucGFyYW1zLmlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGNyZWF0ZVJlcXVlc3RRdWV1ZUtleShjYW5jZWxJZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9DYW5jZWwgPSBtZXNzYWdlUXVldWUuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VzXzEuTWVzc2FnZS5pc1JlcXVlc3QodG9DYW5jZWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmF0ZWd5ID0gb3B0aW9ucz8uY29ubmVjdGlvblN0cmF0ZWd5O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IChzdHJhdGVneSAmJiBzdHJhdGVneS5jYW5jZWxVbmRpc3BhdGNoZWQpID8gc3RyYXRlZ3kuY2FuY2VsVW5kaXNwYXRjaGVkKHRvQ2FuY2VsLCBjYW5jZWxVbmRpc3BhdGNoZWQpIDogY2FuY2VsVW5kaXNwYXRjaGVkKHRvQ2FuY2VsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIChyZXNwb25zZS5lcnJvciAhPT0gdW5kZWZpbmVkIHx8IHJlc3BvbnNlLnJlc3VsdCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVF1ZXVlLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFRva2Vucy5kZWxldGUoY2FuY2VsSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuaWQgPSB0b0NhbmNlbC5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNlU2VuZGluZ1Jlc3BvbnNlKHJlc3BvbnNlLCBtZXNzYWdlLm1ldGhvZCwgRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlV3JpdGVyLndyaXRlKHJlc3BvbnNlKS5jYXRjaCgoKSA9PiBsb2dnZXIuZXJyb3IoYFNlbmRpbmcgcmVzcG9uc2UgZm9yIGNhbmNlbGVkIG1lc3NhZ2UgZmFpbGVkLmApKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjYW5jZWxsYXRpb25Ub2tlbiA9IHJlcXVlc3RUb2tlbnMuZ2V0KGNhbmNlbElkKTtcbiAgICAgICAgICAgICAgICAvLyBUaGUgcmVxdWVzdCBpcyBhbHJlYWR5IHJ1bm5pbmcuIENhbmNlbCB0aGUgdG9rZW5cbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsbGF0aW9uVG9rZW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjYW5jZWxsYXRpb25Ub2tlbi5jYW5jZWwoKTtcbiAgICAgICAgICAgICAgICAgICAgdHJhY2VSZWNlaXZlZE5vdGlmaWNhdGlvbihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtZW1iZXIgdGhlIGNhbmNlbCBidXQgc3RpbGwgcXVldWUgdGhlIG1lc3NhZ2UgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gY2xlYW4gdXAgc3RhdGUgaW4gcHJvY2VzcyBtZXNzYWdlLlxuICAgICAgICAgICAgICAgICAgICBrbm93bkNhbmNlbGVkUmVxdWVzdHMuYWRkKGNhbmNlbElkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRNZXNzYWdlVG9RdWV1ZShtZXNzYWdlUXVldWUsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJpZ2dlck1lc3NhZ2VRdWV1ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiBoYW5kbGVSZXF1ZXN0KHJlcXVlc3RNZXNzYWdlKSB7XG4gICAgICAgIGlmIChpc0Rpc3Bvc2VkKCkpIHtcbiAgICAgICAgICAgIC8vIHdlIHJldHVybiBoZXJlIHNpbGVudGx5IHNpbmNlIHdlIGZpcmVkIGFuIGV2ZW50IHdoZW4gdGhlXG4gICAgICAgICAgICAvLyBjb25uZWN0aW9uIGdvdCBkaXNwb3NlZC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZXBseShyZXN1bHRPckVycm9yLCBtZXRob2QsIHN0YXJ0VGltZSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICBqc29ucnBjOiB2ZXJzaW9uLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0TWVzc2FnZS5pZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChyZXN1bHRPckVycm9yIGluc3RhbmNlb2YgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5lcnJvciA9IHJlc3VsdE9yRXJyb3IudG9Kc29uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnJlc3VsdCA9IHJlc3VsdE9yRXJyb3IgPT09IHVuZGVmaW5lZCA/IG51bGwgOiByZXN1bHRPckVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhY2VTZW5kaW5nUmVzcG9uc2UobWVzc2FnZSwgbWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgbWVzc2FnZVdyaXRlci53cml0ZShtZXNzYWdlKS5jYXRjaCgoKSA9PiBsb2dnZXIuZXJyb3IoYFNlbmRpbmcgcmVzcG9uc2UgZmFpbGVkLmApKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZXBseUVycm9yKGVycm9yLCBtZXRob2QsIHN0YXJ0VGltZSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICBqc29ucnBjOiB2ZXJzaW9uLFxuICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0TWVzc2FnZS5pZCxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IudG9Kc29uKClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cmFjZVNlbmRpbmdSZXNwb25zZShtZXNzYWdlLCBtZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICBtZXNzYWdlV3JpdGVyLndyaXRlKG1lc3NhZ2UpLmNhdGNoKCgpID0+IGxvZ2dlci5lcnJvcihgU2VuZGluZyByZXNwb25zZSBmYWlsZWQuYCkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHJlcGx5U3VjY2VzcyhyZXN1bHQsIG1ldGhvZCwgc3RhcnRUaW1lKSB7XG4gICAgICAgICAgICAvLyBUaGUgSlNPTiBSUEMgZGVmaW5lcyB0aGF0IGEgcmVzcG9uc2UgbXVzdCBlaXRoZXIgaGF2ZSBhIHJlc3VsdCBvciBhbiBlcnJvclxuICAgICAgICAgICAgLy8gU28gd2UgY2FuJ3QgdHJlYXQgdW5kZWZpbmVkIGFzIGEgdmFsaWQgcmVzcG9uc2UgcmVzdWx0LlxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAganNvbnJwYzogdmVyc2lvbixcbiAgICAgICAgICAgICAgICBpZDogcmVxdWVzdE1lc3NhZ2UuaWQsXG4gICAgICAgICAgICAgICAgcmVzdWx0OiByZXN1bHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0cmFjZVNlbmRpbmdSZXNwb25zZShtZXNzYWdlLCBtZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICBtZXNzYWdlV3JpdGVyLndyaXRlKG1lc3NhZ2UpLmNhdGNoKCgpID0+IGxvZ2dlci5lcnJvcihgU2VuZGluZyByZXNwb25zZSBmYWlsZWQuYCkpO1xuICAgICAgICB9XG4gICAgICAgIHRyYWNlUmVjZWl2ZWRSZXF1ZXN0KHJlcXVlc3RNZXNzYWdlKTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHJlcXVlc3RIYW5kbGVycy5nZXQocmVxdWVzdE1lc3NhZ2UubWV0aG9kKTtcbiAgICAgICAgbGV0IHR5cGU7XG4gICAgICAgIGxldCByZXF1ZXN0SGFuZGxlcjtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHR5cGUgPSBlbGVtZW50LnR5cGU7XG4gICAgICAgICAgICByZXF1ZXN0SGFuZGxlciA9IGVsZW1lbnQuaGFuZGxlcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAocmVxdWVzdEhhbmRsZXIgfHwgc3RhclJlcXVlc3RIYW5kbGVyKSB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbktleSA9IHJlcXVlc3RNZXNzYWdlLmlkID8/IFN0cmluZyhEYXRlLm5vdygpKTsgLy9cbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbGxhdGlvblNvdXJjZSA9IElkQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneS5pcyhjYW5jZWxsYXRpb25TdHJhdGVneS5yZWNlaXZlcilcbiAgICAgICAgICAgICAgICA/IGNhbmNlbGxhdGlvblN0cmF0ZWd5LnJlY2VpdmVyLmNyZWF0ZUNhbmNlbGxhdGlvblRva2VuU291cmNlKHRva2VuS2V5KVxuICAgICAgICAgICAgICAgIDogY2FuY2VsbGF0aW9uU3RyYXRlZ3kucmVjZWl2ZXIuY3JlYXRlQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UocmVxdWVzdE1lc3NhZ2UpO1xuICAgICAgICAgICAgaWYgKHJlcXVlc3RNZXNzYWdlLmlkICE9PSBudWxsICYmIGtub3duQ2FuY2VsZWRSZXF1ZXN0cy5oYXMocmVxdWVzdE1lc3NhZ2UuaWQpKSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9uU291cmNlLmNhbmNlbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcXVlc3RNZXNzYWdlLmlkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdFRva2Vucy5zZXQodG9rZW5LZXksIGNhbmNlbGxhdGlvblNvdXJjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBoYW5kbGVyUmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0SGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdE1lc3NhZ2UucGFyYW1zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQgJiYgdHlwZS5udW1iZXJPZlBhcmFtcyAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGx5RXJyb3IobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihtZXNzYWdlc18xLkVycm9yQ29kZXMuSW52YWxpZFBhcmFtcywgYFJlcXVlc3QgJHtyZXF1ZXN0TWVzc2FnZS5tZXRob2R9IGRlZmluZXMgJHt0eXBlLm51bWJlck9mUGFyYW1zfSBwYXJhbXMgYnV0IHJlY2VpdmVkIG5vbmUuYCksIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyUmVzdWx0ID0gcmVxdWVzdEhhbmRsZXIoY2FuY2VsbGF0aW9uU291cmNlLnRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlcXVlc3RNZXNzYWdlLnBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQgJiYgdHlwZS5wYXJhbWV0ZXJTdHJ1Y3R1cmVzID09PSBtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYnlOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbHlFcnJvcihuZXcgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKG1lc3NhZ2VzXzEuRXJyb3JDb2Rlcy5JbnZhbGlkUGFyYW1zLCBgUmVxdWVzdCAke3JlcXVlc3RNZXNzYWdlLm1ldGhvZH0gZGVmaW5lcyBwYXJhbWV0ZXJzIGJ5IG5hbWUgYnV0IHJlY2VpdmVkIHBhcmFtZXRlcnMgYnkgcG9zaXRpb25gKSwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXJSZXN1bHQgPSByZXF1ZXN0SGFuZGxlciguLi5yZXF1ZXN0TWVzc2FnZS5wYXJhbXMsIGNhbmNlbGxhdGlvblNvdXJjZS50b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUucGFyYW1ldGVyU3RydWN0dXJlcyA9PT0gbWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBseUVycm9yKG5ldyBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IobWVzc2FnZXNfMS5FcnJvckNvZGVzLkludmFsaWRQYXJhbXMsIGBSZXF1ZXN0ICR7cmVxdWVzdE1lc3NhZ2UubWV0aG9kfSBkZWZpbmVzIHBhcmFtZXRlcnMgYnkgcG9zaXRpb24gYnV0IHJlY2VpdmVkIHBhcmFtZXRlcnMgYnkgbmFtZWApLCByZXF1ZXN0TWVzc2FnZS5tZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlclJlc3VsdCA9IHJlcXVlc3RIYW5kbGVyKHJlcXVlc3RNZXNzYWdlLnBhcmFtcywgY2FuY2VsbGF0aW9uU291cmNlLnRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdGFyUmVxdWVzdEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlclJlc3VsdCA9IHN0YXJSZXF1ZXN0SGFuZGxlcihyZXF1ZXN0TWVzc2FnZS5tZXRob2QsIHJlcXVlc3RNZXNzYWdlLnBhcmFtcywgY2FuY2VsbGF0aW9uU291cmNlLnRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IGhhbmRsZXJSZXN1bHQ7XG4gICAgICAgICAgICAgICAgaWYgKCFoYW5kbGVyUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RUb2tlbnMuZGVsZXRlKHRva2VuS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgcmVwbHlTdWNjZXNzKGhhbmRsZXJSZXN1bHQsIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvbWlzZS50aGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb21pc2UudGhlbigocmVzdWx0T3JFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdFRva2Vucy5kZWxldGUodG9rZW5LZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwbHkocmVzdWx0T3JFcnJvciwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VG9rZW5zLmRlbGV0ZSh0b2tlbktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBseUVycm9yKGVycm9yLCByZXF1ZXN0TWVzc2FnZS5tZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChlcnJvciAmJiBJcy5zdHJpbmcoZXJyb3IubWVzc2FnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBseUVycm9yKG5ldyBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IobWVzc2FnZXNfMS5FcnJvckNvZGVzLkludGVybmFsRXJyb3IsIGBSZXF1ZXN0ICR7cmVxdWVzdE1lc3NhZ2UubWV0aG9kfSBmYWlsZWQgd2l0aCBtZXNzYWdlOiAke2Vycm9yLm1lc3NhZ2V9YCksIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGx5RXJyb3IobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihtZXNzYWdlc18xLkVycm9yQ29kZXMuSW50ZXJuYWxFcnJvciwgYFJlcXVlc3QgJHtyZXF1ZXN0TWVzc2FnZS5tZXRob2R9IGZhaWxlZCB1bmV4cGVjdGVkbHkgd2l0aG91dCBwcm92aWRpbmcgYW55IGRldGFpbHMuYCksIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0VG9rZW5zLmRlbGV0ZSh0b2tlbktleSk7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5KGhhbmRsZXJSZXN1bHQsIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0VG9rZW5zLmRlbGV0ZSh0b2tlbktleSk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5KGVycm9yLCByZXF1ZXN0TWVzc2FnZS5tZXRob2QsIHN0YXJ0VGltZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVycm9yICYmIElzLnN0cmluZyhlcnJvci5tZXNzYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXBseUVycm9yKG5ldyBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IobWVzc2FnZXNfMS5FcnJvckNvZGVzLkludGVybmFsRXJyb3IsIGBSZXF1ZXN0ICR7cmVxdWVzdE1lc3NhZ2UubWV0aG9kfSBmYWlsZWQgd2l0aCBtZXNzYWdlOiAke2Vycm9yLm1lc3NhZ2V9YCksIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcGx5RXJyb3IobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihtZXNzYWdlc18xLkVycm9yQ29kZXMuSW50ZXJuYWxFcnJvciwgYFJlcXVlc3QgJHtyZXF1ZXN0TWVzc2FnZS5tZXRob2R9IGZhaWxlZCB1bmV4cGVjdGVkbHkgd2l0aG91dCBwcm92aWRpbmcgYW55IGRldGFpbHMuYCksIHJlcXVlc3RNZXNzYWdlLm1ldGhvZCwgc3RhcnRUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXBseUVycm9yKG5ldyBtZXNzYWdlc18xLlJlc3BvbnNlRXJyb3IobWVzc2FnZXNfMS5FcnJvckNvZGVzLk1ldGhvZE5vdEZvdW5kLCBgVW5oYW5kbGVkIG1ldGhvZCAke3JlcXVlc3RNZXNzYWdlLm1ldGhvZH1gKSwgcmVxdWVzdE1lc3NhZ2UubWV0aG9kLCBzdGFydFRpbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZVJlc3BvbnNlKHJlc3BvbnNlTWVzc2FnZSkge1xuICAgICAgICBpZiAoaXNEaXNwb3NlZCgpKSB7XG4gICAgICAgICAgICAvLyBTZWUgaGFuZGxlIHJlcXVlc3QuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlTWVzc2FnZS5pZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlTWVzc2FnZS5lcnJvcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgUmVjZWl2ZWQgcmVzcG9uc2UgbWVzc2FnZSB3aXRob3V0IGlkOiBFcnJvciBpczogXFxuJHtKU09OLnN0cmluZ2lmeShyZXNwb25zZU1lc3NhZ2UuZXJyb3IsIHVuZGVmaW5lZCwgNCl9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoYFJlY2VpdmVkIHJlc3BvbnNlIG1lc3NhZ2Ugd2l0aG91dCBpZC4gTm8gZnVydGhlciBlcnJvciBpbmZvcm1hdGlvbiBwcm92aWRlZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHJlc3BvbnNlTWVzc2FnZS5pZDtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlUHJvbWlzZSA9IHJlc3BvbnNlUHJvbWlzZXMuZ2V0KGtleSk7XG4gICAgICAgICAgICB0cmFjZVJlY2VpdmVkUmVzcG9uc2UocmVzcG9uc2VNZXNzYWdlLCByZXNwb25zZVByb21pc2UpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlUHJvbWlzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2VQcm9taXNlcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VNZXNzYWdlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IHJlc3BvbnNlTWVzc2FnZS5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlUHJvbWlzZS5yZWplY3QobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihlcnJvci5jb2RlLCBlcnJvci5tZXNzYWdlLCBlcnJvci5kYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2VNZXNzYWdlLnJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVByb21pc2UucmVzb2x2ZShyZXNwb25zZU1lc3NhZ2UucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2hvdWxkIG5ldmVyIGhhcHBlbi4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgUmVzcG9uc2UgaGFuZGxlciAnJHtyZXNwb25zZVByb21pc2UubWV0aG9kfScgZmFpbGVkIHdpdGggbWVzc2FnZTogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBSZXNwb25zZSBoYW5kbGVyICcke3Jlc3BvbnNlUHJvbWlzZS5tZXRob2R9JyBmYWlsZWQgdW5leHBlY3RlZGx5LmApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZU5vdGlmaWNhdGlvbihtZXNzYWdlKSB7XG4gICAgICAgIGlmIChpc0Rpc3Bvc2VkKCkpIHtcbiAgICAgICAgICAgIC8vIFNlZSBoYW5kbGUgcmVxdWVzdC5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IG5vdGlmaWNhdGlvbkhhbmRsZXI7XG4gICAgICAgIGlmIChtZXNzYWdlLm1ldGhvZCA9PT0gQ2FuY2VsTm90aWZpY2F0aW9uLnR5cGUubWV0aG9kKSB7XG4gICAgICAgICAgICBjb25zdCBjYW5jZWxJZCA9IG1lc3NhZ2UucGFyYW1zLmlkO1xuICAgICAgICAgICAga25vd25DYW5jZWxlZFJlcXVlc3RzLmRlbGV0ZShjYW5jZWxJZCk7XG4gICAgICAgICAgICB0cmFjZVJlY2VpdmVkTm90aWZpY2F0aW9uKG1lc3NhZ2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IG5vdGlmaWNhdGlvbkhhbmRsZXJzLmdldChtZXNzYWdlLm1ldGhvZCk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkhhbmRsZXIgPSBlbGVtZW50LmhhbmRsZXI7XG4gICAgICAgICAgICAgICAgdHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobm90aWZpY2F0aW9uSGFuZGxlciB8fCBzdGFyTm90aWZpY2F0aW9uSGFuZGxlcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0cmFjZVJlY2VpdmVkTm90aWZpY2F0aW9uKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGlmIChub3RpZmljYXRpb25IYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnBhcmFtcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUubnVtYmVyT2ZQYXJhbXMgIT09IDAgJiYgdHlwZS5wYXJhbWV0ZXJTdHJ1Y3R1cmVzICE9PSBtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYnlOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgTm90aWZpY2F0aW9uICR7bWVzc2FnZS5tZXRob2R9IGRlZmluZXMgJHt0eXBlLm51bWJlck9mUGFyYW1zfSBwYXJhbXMgYnV0IHJlY2VpdmVkIG5vbmUuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uSGFuZGxlcigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobWVzc2FnZS5wYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBhcmUgSlNPTi1SUEMgbGlicmFyaWVzIHRoYXQgc2VuZCBwcm9ncmVzcyBtZXNzYWdlIGFzIHBvc2l0aW9uYWwgcGFyYW1zIGFsdGhvdWdoXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzcGVjaWZpZWQgYXMgbmFtZWQuIFNvIGNvbnZlcnQgdGhlbSBpZiB0aGlzIGlzIHRoZSBjYXNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gbWVzc2FnZS5wYXJhbXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5tZXRob2QgPT09IFByb2dyZXNzTm90aWZpY2F0aW9uLnR5cGUubWV0aG9kICYmIHBhcmFtcy5sZW5ndGggPT09IDIgJiYgUHJvZ3Jlc3NUb2tlbi5pcyhwYXJhbXNbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uSGFuZGxlcih7IHRva2VuOiBwYXJhbXNbMF0sIHZhbHVlOiBwYXJhbXNbMV0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlLnBhcmFtZXRlclN0cnVjdHVyZXMgPT09IG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgTm90aWZpY2F0aW9uICR7bWVzc2FnZS5tZXRob2R9IGRlZmluZXMgcGFyYW1ldGVycyBieSBuYW1lIGJ1dCByZWNlaXZlZCBwYXJhbWV0ZXJzIGJ5IHBvc2l0aW9uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUubnVtYmVyT2ZQYXJhbXMgIT09IG1lc3NhZ2UucGFyYW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBOb3RpZmljYXRpb24gJHttZXNzYWdlLm1ldGhvZH0gZGVmaW5lcyAke3R5cGUubnVtYmVyT2ZQYXJhbXN9IHBhcmFtcyBidXQgcmVjZWl2ZWQgJHtwYXJhbXMubGVuZ3RofSBhcmd1bWVudHNgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25IYW5kbGVyKC4uLnBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUucGFyYW1ldGVyU3RydWN0dXJlcyA9PT0gbWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5UG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoYE5vdGlmaWNhdGlvbiAke21lc3NhZ2UubWV0aG9kfSBkZWZpbmVzIHBhcmFtZXRlcnMgYnkgcG9zaXRpb24gYnV0IHJlY2VpdmVkIHBhcmFtZXRlcnMgYnkgbmFtZWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uSGFuZGxlcihtZXNzYWdlLnBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc3Rhck5vdGlmaWNhdGlvbkhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Rhck5vdGlmaWNhdGlvbkhhbmRsZXIobWVzc2FnZS5tZXRob2QsIG1lc3NhZ2UucGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoYE5vdGlmaWNhdGlvbiBoYW5kbGVyICcke21lc3NhZ2UubWV0aG9kfScgZmFpbGVkIHdpdGggbWVzc2FnZTogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBOb3RpZmljYXRpb24gaGFuZGxlciAnJHttZXNzYWdlLm1ldGhvZH0nIGZhaWxlZCB1bmV4cGVjdGVkbHkuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdW5oYW5kbGVkTm90aWZpY2F0aW9uRW1pdHRlci5maXJlKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUludmFsaWRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ1JlY2VpdmVkIGVtcHR5IG1lc3NhZ2UuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbG9nZ2VyLmVycm9yKGBSZWNlaXZlZCBtZXNzYWdlIHdoaWNoIGlzIG5laXRoZXIgYSByZXNwb25zZSBub3IgYSBub3RpZmljYXRpb24gbWVzc2FnZTpcXG4ke0pTT04uc3RyaW5naWZ5KG1lc3NhZ2UsIG51bGwsIDQpfWApO1xuICAgICAgICAvLyBUZXN0IHdoZXRoZXIgd2UgZmluZCBhbiBpZCB0byByZWplY3QgdGhlIHByb21pc2VcbiAgICAgICAgY29uc3QgcmVzcG9uc2VNZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgaWYgKElzLnN0cmluZyhyZXNwb25zZU1lc3NhZ2UuaWQpIHx8IElzLm51bWJlcihyZXNwb25zZU1lc3NhZ2UuaWQpKSB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSByZXNwb25zZU1lc3NhZ2UuaWQ7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZUhhbmRsZXIgPSByZXNwb25zZVByb21pc2VzLmdldChrZXkpO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlSGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlSGFuZGxlci5yZWplY3QobmV3IEVycm9yKCdUaGUgcmVjZWl2ZWQgcmVzcG9uc2UgaGFzIG5laXRoZXIgYSByZXN1bHQgbm9yIGFuIGVycm9yIHByb3BlcnR5LicpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdHJpbmdpZnlUcmFjZShwYXJhbXMpIHtcbiAgICAgICAgaWYgKHBhcmFtcyA9PT0gdW5kZWZpbmVkIHx8IHBhcmFtcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRyYWNlKSB7XG4gICAgICAgICAgICBjYXNlIFRyYWNlLlZlcmJvc2U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHBhcmFtcywgbnVsbCwgNCk7XG4gICAgICAgICAgICBjYXNlIFRyYWNlLkNvbXBhY3Q6XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhY2VTZW5kaW5nUmVxdWVzdChtZXNzYWdlKSB7XG4gICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuT2ZmIHx8ICF0cmFjZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhY2VGb3JtYXQgPT09IFRyYWNlRm9ybWF0LlRleHQpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCh0cmFjZSA9PT0gVHJhY2UuVmVyYm9zZSB8fCB0cmFjZSA9PT0gVHJhY2UuQ29tcGFjdCkgJiYgbWVzc2FnZS5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gYFBhcmFtczogJHtzdHJpbmdpZnlUcmFjZShtZXNzYWdlLnBhcmFtcyl9XFxuXFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNlci5sb2coYFNlbmRpbmcgcmVxdWVzdCAnJHttZXNzYWdlLm1ldGhvZH0gLSAoJHttZXNzYWdlLmlkfSknLmAsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nTFNQTWVzc2FnZSgnc2VuZC1yZXF1ZXN0JywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhY2VTZW5kaW5nTm90aWZpY2F0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHRyYWNlID09PSBUcmFjZS5PZmYgfHwgIXRyYWNlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFjZUZvcm1hdCA9PT0gVHJhY2VGb3JtYXQuVGV4dCkge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLlZlcmJvc2UgfHwgdHJhY2UgPT09IFRyYWNlLkNvbXBhY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGBQYXJhbXM6ICR7c3RyaW5naWZ5VHJhY2UobWVzc2FnZS5wYXJhbXMpfVxcblxcbmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gJ05vIHBhcmFtZXRlcnMgcHJvdmlkZWQuXFxuXFxuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZXIubG9nKGBTZW5kaW5nIG5vdGlmaWNhdGlvbiAnJHttZXNzYWdlLm1ldGhvZH0nLmAsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nTFNQTWVzc2FnZSgnc2VuZC1ub3RpZmljYXRpb24nLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFjZVNlbmRpbmdSZXNwb25zZShtZXNzYWdlLCBtZXRob2QsIHN0YXJ0VGltZSkge1xuICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLk9mZiB8fCAhdHJhY2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYWNlRm9ybWF0ID09PSBUcmFjZUZvcm1hdC5UZXh0KSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuVmVyYm9zZSB8fCB0cmFjZSA9PT0gVHJhY2UuQ29tcGFjdCkge1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmVycm9yICYmIG1lc3NhZ2UuZXJyb3IuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gYEVycm9yIGRhdGE6ICR7c3RyaW5naWZ5VHJhY2UobWVzc2FnZS5lcnJvci5kYXRhKX1cXG5cXG5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gYFJlc3VsdDogJHtzdHJpbmdpZnlUcmFjZShtZXNzYWdlLnJlc3VsdCl9XFxuXFxuYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChtZXNzYWdlLmVycm9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSAnTm8gcmVzdWx0IHJldHVybmVkLlxcblxcbic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZXIubG9nKGBTZW5kaW5nIHJlc3BvbnNlICcke21ldGhvZH0gLSAoJHttZXNzYWdlLmlkfSknLiBQcm9jZXNzaW5nIHJlcXVlc3QgdG9vayAke0RhdGUubm93KCkgLSBzdGFydFRpbWV9bXNgLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ0xTUE1lc3NhZ2UoJ3NlbmQtcmVzcG9uc2UnLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFjZVJlY2VpdmVkUmVxdWVzdChtZXNzYWdlKSB7XG4gICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuT2ZmIHx8ICF0cmFjZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhY2VGb3JtYXQgPT09IFRyYWNlRm9ybWF0LlRleHQpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKCh0cmFjZSA9PT0gVHJhY2UuVmVyYm9zZSB8fCB0cmFjZSA9PT0gVHJhY2UuQ29tcGFjdCkgJiYgbWVzc2FnZS5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gYFBhcmFtczogJHtzdHJpbmdpZnlUcmFjZShtZXNzYWdlLnBhcmFtcyl9XFxuXFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNlci5sb2coYFJlY2VpdmVkIHJlcXVlc3QgJyR7bWVzc2FnZS5tZXRob2R9IC0gKCR7bWVzc2FnZS5pZH0pJy5gLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ0xTUE1lc3NhZ2UoJ3JlY2VpdmUtcmVxdWVzdCcsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYWNlUmVjZWl2ZWROb3RpZmljYXRpb24obWVzc2FnZSkge1xuICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLk9mZiB8fCAhdHJhY2VyIHx8IG1lc3NhZ2UubWV0aG9kID09PSBMb2dUcmFjZU5vdGlmaWNhdGlvbi50eXBlLm1ldGhvZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFjZUZvcm1hdCA9PT0gVHJhY2VGb3JtYXQuVGV4dCkge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLlZlcmJvc2UgfHwgdHJhY2UgPT09IFRyYWNlLkNvbXBhY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5wYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGBQYXJhbXM6ICR7c3RyaW5naWZ5VHJhY2UobWVzc2FnZS5wYXJhbXMpfVxcblxcbmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gJ05vIHBhcmFtZXRlcnMgcHJvdmlkZWQuXFxuXFxuJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFjZXIubG9nKGBSZWNlaXZlZCBub3RpZmljYXRpb24gJyR7bWVzc2FnZS5tZXRob2R9Jy5gLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ0xTUE1lc3NhZ2UoJ3JlY2VpdmUtbm90aWZpY2F0aW9uJywgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhY2VSZWNlaXZlZFJlc3BvbnNlKG1lc3NhZ2UsIHJlc3BvbnNlUHJvbWlzZSkge1xuICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLk9mZiB8fCAhdHJhY2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYWNlRm9ybWF0ID09PSBUcmFjZUZvcm1hdC5UZXh0KSB7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh0cmFjZSA9PT0gVHJhY2UuVmVyYm9zZSB8fCB0cmFjZSA9PT0gVHJhY2UuQ29tcGFjdCkge1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmVycm9yICYmIG1lc3NhZ2UuZXJyb3IuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gYEVycm9yIGRhdGE6ICR7c3RyaW5naWZ5VHJhY2UobWVzc2FnZS5lcnJvci5kYXRhKX1cXG5cXG5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gYFJlc3VsdDogJHtzdHJpbmdpZnlUcmFjZShtZXNzYWdlLnJlc3VsdCl9XFxuXFxuYDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChtZXNzYWdlLmVycm9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSAnTm8gcmVzdWx0IHJldHVybmVkLlxcblxcbic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBtZXNzYWdlLmVycm9yID8gYCBSZXF1ZXN0IGZhaWxlZDogJHttZXNzYWdlLmVycm9yLm1lc3NhZ2V9ICgke21lc3NhZ2UuZXJyb3IuY29kZX0pLmAgOiAnJztcbiAgICAgICAgICAgICAgICB0cmFjZXIubG9nKGBSZWNlaXZlZCByZXNwb25zZSAnJHtyZXNwb25zZVByb21pc2UubWV0aG9kfSAtICgke21lc3NhZ2UuaWR9KScgaW4gJHtEYXRlLm5vdygpIC0gcmVzcG9uc2VQcm9taXNlLnRpbWVyU3RhcnR9bXMuJHtlcnJvcn1gLCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyYWNlci5sb2coYFJlY2VpdmVkIHJlc3BvbnNlICR7bWVzc2FnZS5pZH0gd2l0aG91dCBhY3RpdmUgcmVzcG9uc2UgcHJvbWlzZS5gLCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvZ0xTUE1lc3NhZ2UoJ3JlY2VpdmUtcmVzcG9uc2UnLCBtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBsb2dMU1BNZXNzYWdlKHR5cGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKCF0cmFjZXIgfHwgdHJhY2UgPT09IFRyYWNlLk9mZikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxzcE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICBpc0xTUE1lc3NhZ2U6IHRydWUsXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgICB9O1xuICAgICAgICB0cmFjZXIubG9nKGxzcE1lc3NhZ2UpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0aHJvd0lmQ2xvc2VkT3JEaXNwb3NlZCgpIHtcbiAgICAgICAgaWYgKGlzQ2xvc2VkKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBDb25uZWN0aW9uRXJyb3IoQ29ubmVjdGlvbkVycm9ycy5DbG9zZWQsICdDb25uZWN0aW9uIGlzIGNsb3NlZC4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEaXNwb3NlZCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdGlvbkVycm9yKENvbm5lY3Rpb25FcnJvcnMuRGlzcG9zZWQsICdDb25uZWN0aW9uIGlzIGRpc3Bvc2VkLicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRocm93SWZMaXN0ZW5pbmcoKSB7XG4gICAgICAgIGlmIChpc0xpc3RlbmluZygpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdGlvbkVycm9yKENvbm5lY3Rpb25FcnJvcnMuQWxyZWFkeUxpc3RlbmluZywgJ0Nvbm5lY3Rpb24gaXMgYWxyZWFkeSBsaXN0ZW5pbmcnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0aHJvd0lmTm90TGlzdGVuaW5nKCkge1xuICAgICAgICBpZiAoIWlzTGlzdGVuaW5nKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FsbCBsaXN0ZW4oKSBmaXJzdC4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB1bmRlZmluZWRUb051bGwocGFyYW0pIHtcbiAgICAgICAgaWYgKHBhcmFtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG51bGxUb1VuZGVmaW5lZChwYXJhbSkge1xuICAgICAgICBpZiAocGFyYW0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaXNOYW1lZFBhcmFtKHBhcmFtKSB7XG4gICAgICAgIHJldHVybiBwYXJhbSAhPT0gdW5kZWZpbmVkICYmIHBhcmFtICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHBhcmFtKSAmJiB0eXBlb2YgcGFyYW0gPT09ICdvYmplY3QnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlU2luZ2xlUGFyYW0ocGFyYW1ldGVyU3RydWN0dXJlcywgcGFyYW0pIHtcbiAgICAgICAgc3dpdGNoIChwYXJhbWV0ZXJTdHJ1Y3R1cmVzKSB7XG4gICAgICAgICAgICBjYXNlIG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvOlxuICAgICAgICAgICAgICAgIGlmIChpc05hbWVkUGFyYW0ocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsVG9VbmRlZmluZWQocGFyYW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt1bmRlZmluZWRUb051bGwocGFyYW0pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWU6XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hbWVkUGFyYW0ocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVjZWl2ZWQgcGFyYW1ldGVycyBieSBuYW1lIGJ1dCBwYXJhbSBpcyBub3QgYW4gb2JqZWN0IGxpdGVyYWwuYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsVG9VbmRlZmluZWQocGFyYW0pO1xuICAgICAgICAgICAgY2FzZSBtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYnlQb3NpdGlvbjpcbiAgICAgICAgICAgICAgICByZXR1cm4gW3VuZGVmaW5lZFRvTnVsbChwYXJhbSldO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gcGFyYW1ldGVyIHN0cnVjdHVyZSAke3BhcmFtZXRlclN0cnVjdHVyZXMudG9TdHJpbmcoKX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlTWVzc2FnZVBhcmFtcyh0eXBlLCBwYXJhbXMpIHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgY29uc3QgbnVtYmVyT2ZQYXJhbXMgPSB0eXBlLm51bWJlck9mUGFyYW1zO1xuICAgICAgICBzd2l0Y2ggKG51bWJlck9mUGFyYW1zKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvbXB1dGVTaW5nbGVQYXJhbSh0eXBlLnBhcmFtZXRlclN0cnVjdHVyZXMsIHBhcmFtc1swXSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aCAmJiBpIDwgbnVtYmVyT2ZQYXJhbXM7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh1bmRlZmluZWRUb051bGwocGFyYW1zW2ldKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMubGVuZ3RoIDwgbnVtYmVyT2ZQYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHBhcmFtcy5sZW5ndGg7IGkgPCBudW1iZXJPZlBhcmFtczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjb25zdCBjb25uZWN0aW9uID0ge1xuICAgICAgICBzZW5kTm90aWZpY2F0aW9uOiAodHlwZSwgLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgdGhyb3dJZkNsb3NlZE9yRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIGxldCBtZXRob2Q7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZVBhcmFtcztcbiAgICAgICAgICAgIGlmIChJcy5zdHJpbmcodHlwZSkpIHtcbiAgICAgICAgICAgICAgICBtZXRob2QgPSB0eXBlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0ID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1TdGFydCA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtZXRlclN0cnVjdHVyZXMgPSBtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYXV0bztcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZXNfMS5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmlzKGZpcnN0KSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbVN0YXJ0ID0gMTtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyU3RydWN0dXJlcyA9IGZpcnN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1FbmQgPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJPZlBhcmFtcyA9IHBhcmFtRW5kIC0gcGFyYW1TdGFydDtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG51bWJlck9mUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VQYXJhbXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVBhcmFtcyA9IGNvbXB1dGVTaW5nbGVQYXJhbShwYXJhbWV0ZXJTdHJ1Y3R1cmVzLCBhcmdzW3BhcmFtU3RhcnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlclN0cnVjdHVyZXMgPT09IG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlY2VpdmVkICR7bnVtYmVyT2ZQYXJhbXN9IHBhcmFtZXRlcnMgZm9yICdieSBOYW1lJyBub3RpZmljYXRpb24gcGFyYW1ldGVyIHN0cnVjdHVyZS5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VQYXJhbXMgPSBhcmdzLnNsaWNlKHBhcmFtU3RhcnQsIHBhcmFtRW5kKS5tYXAodmFsdWUgPT4gdW5kZWZpbmVkVG9OdWxsKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBhcmdzO1xuICAgICAgICAgICAgICAgIG1ldGhvZCA9IHR5cGUubWV0aG9kO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VQYXJhbXMgPSBjb21wdXRlTWVzc2FnZVBhcmFtcyh0eXBlLCBwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgbm90aWZpY2F0aW9uTWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICBqc29ucnBjOiB2ZXJzaW9uLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhcmFtczogbWVzc2FnZVBhcmFtc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyYWNlU2VuZGluZ05vdGlmaWNhdGlvbihub3RpZmljYXRpb25NZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlV3JpdGVyLndyaXRlKG5vdGlmaWNhdGlvbk1lc3NhZ2UpLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihgU2VuZGluZyBub3RpZmljYXRpb24gZmFpbGVkLmApO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uTm90aWZpY2F0aW9uOiAodHlwZSwgaGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgdGhyb3dJZkNsb3NlZE9yRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIGxldCBtZXRob2Q7XG4gICAgICAgICAgICBpZiAoSXMuZnVuYyh0eXBlKSkge1xuICAgICAgICAgICAgICAgIHN0YXJOb3RpZmljYXRpb25IYW5kbGVyID0gdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoSXMuc3RyaW5nKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IHR5cGU7XG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWNhdGlvbkhhbmRsZXJzLnNldCh0eXBlLCB7IHR5cGU6IHVuZGVmaW5lZCwgaGFuZGxlciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IHR5cGUubWV0aG9kO1xuICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25IYW5kbGVycy5zZXQodHlwZS5tZXRob2QsIHsgdHlwZSwgaGFuZGxlciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3RpZmljYXRpb25IYW5kbGVycy5kZWxldGUobWV0aG9kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJOb3RpZmljYXRpb25IYW5kbGVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Qcm9ncmVzczogKF90eXBlLCB0b2tlbiwgaGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgaWYgKHByb2dyZXNzSGFuZGxlcnMuaGFzKHRva2VuKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvZ3Jlc3MgaGFuZGxlciBmb3IgdG9rZW4gJHt0b2tlbn0gYWxyZWFkeSByZWdpc3RlcmVkYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9ncmVzc0hhbmRsZXJzLnNldCh0b2tlbiwgaGFuZGxlcik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NIYW5kbGVycy5kZWxldGUodG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHNlbmRQcm9ncmVzczogKF90eXBlLCB0b2tlbiwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgIC8vIFRoaXMgc2hvdWxkIG5vdCBhd2FpdCBidXQgc2ltcGxlIHJldHVybiB0byBlbnN1cmUgdGhhdCB3ZSBkb24ndCBoYXZlIGFub3RoZXJcbiAgICAgICAgICAgIC8vIGFzeW5jIHNjaGVkdWxpbmcuIE90aGVyd2lzZSBvbmUgc2VuZCBjb3VsZCBvdmVydGFrZSBhbm90aGVyIHNlbmQuXG4gICAgICAgICAgICByZXR1cm4gY29ubmVjdGlvbi5zZW5kTm90aWZpY2F0aW9uKFByb2dyZXNzTm90aWZpY2F0aW9uLnR5cGUsIHsgdG9rZW4sIHZhbHVlIH0pO1xuICAgICAgICB9LFxuICAgICAgICBvblVuaGFuZGxlZFByb2dyZXNzOiB1bmhhbmRsZWRQcm9ncmVzc0VtaXR0ZXIuZXZlbnQsXG4gICAgICAgIHNlbmRSZXF1ZXN0OiAodHlwZSwgLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgdGhyb3dJZkNsb3NlZE9yRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIHRocm93SWZOb3RMaXN0ZW5pbmcoKTtcbiAgICAgICAgICAgIGxldCBtZXRob2Q7XG4gICAgICAgICAgICBsZXQgbWVzc2FnZVBhcmFtcztcbiAgICAgICAgICAgIGxldCB0b2tlbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChJcy5zdHJpbmcodHlwZSkpIHtcbiAgICAgICAgICAgICAgICBtZXRob2QgPSB0eXBlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0ID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGxldCBwYXJhbVN0YXJ0ID0gMDtcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1ldGVyU3RydWN0dXJlcyA9IG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlc18xLlBhcmFtZXRlclN0cnVjdHVyZXMuaXMoZmlyc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtU3RhcnQgPSAxO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gZmlyc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBwYXJhbUVuZCA9IGFyZ3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxsYXRpb25fMS5DYW5jZWxsYXRpb25Ub2tlbi5pcyhsYXN0KSkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbUVuZCA9IHBhcmFtRW5kIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBsYXN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJPZlBhcmFtcyA9IHBhcmFtRW5kIC0gcGFyYW1TdGFydDtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG51bWJlck9mUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VQYXJhbXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVBhcmFtcyA9IGNvbXB1dGVTaW5nbGVQYXJhbShwYXJhbWV0ZXJTdHJ1Y3R1cmVzLCBhcmdzW3BhcmFtU3RhcnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtZXRlclN0cnVjdHVyZXMgPT09IG1lc3NhZ2VzXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlY2VpdmVkICR7bnVtYmVyT2ZQYXJhbXN9IHBhcmFtZXRlcnMgZm9yICdieSBOYW1lJyByZXF1ZXN0IHBhcmFtZXRlciBzdHJ1Y3R1cmUuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlUGFyYW1zID0gYXJncy5zbGljZShwYXJhbVN0YXJ0LCBwYXJhbUVuZCkubWFwKHZhbHVlID0+IHVuZGVmaW5lZFRvTnVsbCh2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gYXJncztcbiAgICAgICAgICAgICAgICBtZXRob2QgPSB0eXBlLm1ldGhvZDtcbiAgICAgICAgICAgICAgICBtZXNzYWdlUGFyYW1zID0gY29tcHV0ZU1lc3NhZ2VQYXJhbXModHlwZSwgcGFyYW1zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBudW1iZXJPZlBhcmFtcyA9IHR5cGUubnVtYmVyT2ZQYXJhbXM7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSBjYW5jZWxsYXRpb25fMS5DYW5jZWxsYXRpb25Ub2tlbi5pcyhwYXJhbXNbbnVtYmVyT2ZQYXJhbXNdKSA/IHBhcmFtc1tudW1iZXJPZlBhcmFtc10gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpZCA9IHNlcXVlbmNlTnVtYmVyKys7XG4gICAgICAgICAgICBsZXQgZGlzcG9zYWJsZTtcbiAgICAgICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGUgPSB0b2tlbi5vbkNhbmNlbGxhdGlvblJlcXVlc3RlZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBjYW5jZWxsYXRpb25TdHJhdGVneS5zZW5kZXIuc2VuZENhbmNlbGxhdGlvbihjb25uZWN0aW9uLCBpZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5sb2coYFJlY2VpdmVkIG5vIHByb21pc2UgZnJvbSBjYW5jZWxsYXRpb24gc3RyYXRlZ3kgd2hlbiBjYW5jZWxsaW5nIGlkICR7aWR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmxvZyhgU2VuZGluZyBjYW5jZWxsYXRpb24gbWVzc2FnZXMgZm9yIGlkICR7aWR9IGZhaWxlZGApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RNZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIGpzb25ycGM6IHZlcnNpb24sXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhcmFtczogbWVzc2FnZVBhcmFtc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyYWNlU2VuZGluZ1JlcXVlc3QocmVxdWVzdE1lc3NhZ2UpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYW5jZWxsYXRpb25TdHJhdGVneS5zZW5kZXIuZW5hYmxlQ2FuY2VsbGF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsbGF0aW9uU3RyYXRlZ3kuc2VuZGVyLmVuYWJsZUNhbmNlbGxhdGlvbihyZXF1ZXN0TWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVXaXRoQ2xlYW51cCA9IChyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocik7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbGxhdGlvblN0cmF0ZWd5LnNlbmRlci5jbGVhbnVwKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zYWJsZT8uZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVqZWN0V2l0aENsZWFudXAgPSAocikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZWplY3Qocik7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbGxhdGlvblN0cmF0ZWd5LnNlbmRlci5jbGVhbnVwKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcG9zYWJsZT8uZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2VQcm9taXNlID0geyBtZXRob2Q6IG1ldGhvZCwgdGltZXJTdGFydDogRGF0ZS5ub3coKSwgcmVzb2x2ZTogcmVzb2x2ZVdpdGhDbGVhbnVwLCByZWplY3Q6IHJlamVjdFdpdGhDbGVhbnVwIH07XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbWVzc2FnZVdyaXRlci53cml0ZShyZXF1ZXN0TWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlUHJvbWlzZXMuc2V0KGlkLCByZXNwb25zZVByb21pc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGBTZW5kaW5nIHJlcXVlc3QgZmFpbGVkLmApO1xuICAgICAgICAgICAgICAgICAgICAvLyBXcml0aW5nIHRoZSBtZXNzYWdlIGZhaWxlZC4gU28gd2UgbmVlZCB0byByZWplY3QgdGhlIHByb21pc2UuXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlUHJvbWlzZS5yZWplY3QobmV3IG1lc3NhZ2VzXzEuUmVzcG9uc2VFcnJvcihtZXNzYWdlc18xLkVycm9yQ29kZXMuTWVzc2FnZVdyaXRlRXJyb3IsIGVycm9yLm1lc3NhZ2UgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gcmVhc29uJykpO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25SZXF1ZXN0OiAodHlwZSwgaGFuZGxlcikgPT4ge1xuICAgICAgICAgICAgdGhyb3dJZkNsb3NlZE9yRGlzcG9zZWQoKTtcbiAgICAgICAgICAgIGxldCBtZXRob2QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKFN0YXJSZXF1ZXN0SGFuZGxlci5pcyh0eXBlKSkge1xuICAgICAgICAgICAgICAgIG1ldGhvZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBzdGFyUmVxdWVzdEhhbmRsZXIgPSB0eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoSXMuc3RyaW5nKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IHR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RIYW5kbGVycy5zZXQodHlwZSwgeyBoYW5kbGVyOiBoYW5kbGVyLCB0eXBlOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSB0eXBlLm1ldGhvZDtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEhhbmRsZXJzLnNldCh0eXBlLm1ldGhvZCwgeyB0eXBlLCBoYW5kbGVyIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWV0aG9kID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SGFuZGxlcnMuZGVsZXRlKG1ldGhvZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFyUmVxdWVzdEhhbmRsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBoYXNQZW5kaW5nUmVzcG9uc2U6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZVByb21pc2VzLnNpemUgPiAwO1xuICAgICAgICB9LFxuICAgICAgICB0cmFjZTogYXN5bmMgKF92YWx1ZSwgX3RyYWNlciwgc2VuZE5vdGlmaWNhdGlvbk9yVHJhY2VPcHRpb25zKSA9PiB7XG4gICAgICAgICAgICBsZXQgX3NlbmROb3RpZmljYXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBfdHJhY2VGb3JtYXQgPSBUcmFjZUZvcm1hdC5UZXh0O1xuICAgICAgICAgICAgaWYgKHNlbmROb3RpZmljYXRpb25PclRyYWNlT3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKElzLmJvb2xlYW4oc2VuZE5vdGlmaWNhdGlvbk9yVHJhY2VPcHRpb25zKSkge1xuICAgICAgICAgICAgICAgICAgICBfc2VuZE5vdGlmaWNhdGlvbiA9IHNlbmROb3RpZmljYXRpb25PclRyYWNlT3B0aW9ucztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9zZW5kTm90aWZpY2F0aW9uID0gc2VuZE5vdGlmaWNhdGlvbk9yVHJhY2VPcHRpb25zLnNlbmROb3RpZmljYXRpb24gfHwgZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIF90cmFjZUZvcm1hdCA9IHNlbmROb3RpZmljYXRpb25PclRyYWNlT3B0aW9ucy50cmFjZUZvcm1hdCB8fCBUcmFjZUZvcm1hdC5UZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYWNlID0gX3ZhbHVlO1xuICAgICAgICAgICAgdHJhY2VGb3JtYXQgPSBfdHJhY2VGb3JtYXQ7XG4gICAgICAgICAgICBpZiAodHJhY2UgPT09IFRyYWNlLk9mZikge1xuICAgICAgICAgICAgICAgIHRyYWNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyYWNlciA9IF90cmFjZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX3NlbmROb3RpZmljYXRpb24gJiYgIWlzQ2xvc2VkKCkgJiYgIWlzRGlzcG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uc2VuZE5vdGlmaWNhdGlvbihTZXRUcmFjZU5vdGlmaWNhdGlvbi50eXBlLCB7IHZhbHVlOiBUcmFjZS50b1N0cmluZyhfdmFsdWUpIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkVycm9yOiBlcnJvckVtaXR0ZXIuZXZlbnQsXG4gICAgICAgIG9uQ2xvc2U6IGNsb3NlRW1pdHRlci5ldmVudCxcbiAgICAgICAgb25VbmhhbmRsZWROb3RpZmljYXRpb246IHVuaGFuZGxlZE5vdGlmaWNhdGlvbkVtaXR0ZXIuZXZlbnQsXG4gICAgICAgIG9uRGlzcG9zZTogZGlzcG9zZUVtaXR0ZXIuZXZlbnQsXG4gICAgICAgIGVuZDogKCkgPT4ge1xuICAgICAgICAgICAgbWVzc2FnZVdyaXRlci5lbmQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzRGlzcG9zZWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlID0gQ29ubmVjdGlvblN0YXRlLkRpc3Bvc2VkO1xuICAgICAgICAgICAgZGlzcG9zZUVtaXR0ZXIuZmlyZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgbWVzc2FnZXNfMS5SZXNwb25zZUVycm9yKG1lc3NhZ2VzXzEuRXJyb3JDb2Rlcy5QZW5kaW5nUmVzcG9uc2VSZWplY3RlZCwgJ1BlbmRpbmcgcmVzcG9uc2UgcmVqZWN0ZWQgc2luY2UgY29ubmVjdGlvbiBnb3QgZGlzcG9zZWQnKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcHJvbWlzZSBvZiByZXNwb25zZVByb21pc2VzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzcG9uc2VQcm9taXNlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHJlcXVlc3RUb2tlbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBrbm93bkNhbmNlbGVkUmVxdWVzdHMgPSBuZXcgU2V0KCk7XG4gICAgICAgICAgICBtZXNzYWdlUXVldWUgPSBuZXcgbGlua2VkTWFwXzEuTGlua2VkTWFwKCk7XG4gICAgICAgICAgICAvLyBUZXN0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgaWYgKElzLmZ1bmMobWVzc2FnZVdyaXRlci5kaXNwb3NlKSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VXcml0ZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKElzLmZ1bmMobWVzc2FnZVJlYWRlci5kaXNwb3NlKSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VSZWFkZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsaXN0ZW46ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93SWZDbG9zZWRPckRpc3Bvc2VkKCk7XG4gICAgICAgICAgICB0aHJvd0lmTGlzdGVuaW5nKCk7XG4gICAgICAgICAgICBzdGF0ZSA9IENvbm5lY3Rpb25TdGF0ZS5MaXN0ZW5pbmc7XG4gICAgICAgICAgICBtZXNzYWdlUmVhZGVyLmxpc3RlbihjYWxsYmFjayk7XG4gICAgICAgIH0sXG4gICAgICAgIGluc3BlY3Q6ICgpID0+IHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAoMCwgcmFsXzEuZGVmYXVsdCkoKS5jb25zb2xlLmxvZygnaW5zcGVjdCcpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25uZWN0aW9uLm9uTm90aWZpY2F0aW9uKExvZ1RyYWNlTm90aWZpY2F0aW9uLnR5cGUsIChwYXJhbXMpID0+IHtcbiAgICAgICAgaWYgKHRyYWNlID09PSBUcmFjZS5PZmYgfHwgIXRyYWNlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZlcmJvc2UgPSB0cmFjZSA9PT0gVHJhY2UuVmVyYm9zZSB8fCB0cmFjZSA9PT0gVHJhY2UuQ29tcGFjdDtcbiAgICAgICAgdHJhY2VyLmxvZyhwYXJhbXMubWVzc2FnZSwgdmVyYm9zZSA/IHBhcmFtcy52ZXJib3NlIDogdW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgICBjb25uZWN0aW9uLm9uTm90aWZpY2F0aW9uKFByb2dyZXNzTm90aWZpY2F0aW9uLnR5cGUsIChwYXJhbXMpID0+IHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IHByb2dyZXNzSGFuZGxlcnMuZ2V0KHBhcmFtcy50b2tlbik7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICBoYW5kbGVyKHBhcmFtcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB1bmhhbmRsZWRQcm9ncmVzc0VtaXR0ZXIuZmlyZShwYXJhbXMpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbm5lY3Rpb247XG59XG5leHBvcnRzLmNyZWF0ZU1lc3NhZ2VDb25uZWN0aW9uID0gY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb247XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDg4NDQ6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5EaXNwb3NhYmxlID0gdm9pZCAwO1xudmFyIERpc3Bvc2FibGU7XG4oZnVuY3Rpb24gKERpc3Bvc2FibGUpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUoZnVuYykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcG9zZTogZnVuY1xuICAgICAgICB9O1xuICAgIH1cbiAgICBEaXNwb3NhYmxlLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKERpc3Bvc2FibGUgPSBleHBvcnRzLkRpc3Bvc2FibGUgfHwgKGV4cG9ydHMuRGlzcG9zYWJsZSA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDI0Nzk6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuRW1pdHRlciA9IGV4cG9ydHMuRXZlbnQgPSB2b2lkIDA7XG5jb25zdCByYWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTA5MSk7XG52YXIgRXZlbnQ7XG4oZnVuY3Rpb24gKEV2ZW50KSB7XG4gICAgY29uc3QgX2Rpc3Bvc2FibGUgPSB7IGRpc3Bvc2UoKSB7IH0gfTtcbiAgICBFdmVudC5Ob25lID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX2Rpc3Bvc2FibGU7IH07XG59KShFdmVudCA9IGV4cG9ydHMuRXZlbnQgfHwgKGV4cG9ydHMuRXZlbnQgPSB7fSkpO1xuY2xhc3MgQ2FsbGJhY2tMaXN0IHtcbiAgICBhZGQoY2FsbGJhY2ssIGNvbnRleHQgPSBudWxsLCBidWNrZXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHRoaXMuX2NvbnRleHRzLnB1c2goY29udGV4dCk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGJ1Y2tldCkpIHtcbiAgICAgICAgICAgIGJ1Y2tldC5wdXNoKHsgZGlzcG9zZTogKCkgPT4gdGhpcy5yZW1vdmUoY2FsbGJhY2ssIGNvbnRleHQpIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZShjYWxsYmFjaywgY29udGV4dCA9IG51bGwpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZm91bmRDYWxsYmFja1dpdGhEaWZmZXJlbnRDb250ZXh0ID0gZmFsc2U7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0aGlzLl9jYWxsYmFja3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYWxsYmFja3NbaV0gPT09IGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnRleHRzW2ldID09PSBjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbGxiYWNrICYgY29udGV4dCBtYXRjaCA9PiByZW1vdmUgaXRcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGV4dHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZENhbGxiYWNrV2l0aERpZmZlcmVudENvbnRleHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZm91bmRDYWxsYmFja1dpdGhEaWZmZXJlbnRDb250ZXh0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1doZW4gYWRkaW5nIGEgbGlzdGVuZXIgd2l0aCBhIGNvbnRleHQsIHlvdSBzaG91bGQgcmVtb3ZlIGl0IHdpdGggdGhlIHNhbWUgY29udGV4dCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGludm9rZSguLi5hcmdzKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmV0ID0gW10sIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcy5zbGljZSgwKSwgY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cy5zbGljZSgwKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXQucHVzaChjYWxsYmFja3NbaV0uYXBwbHkoY29udGV4dHNbaV0sIGFyZ3MpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgICAgICAoMCwgcmFsXzEuZGVmYXVsdCkoKS5jb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5fY2FsbGJhY2tzIHx8IHRoaXMuX2NhbGxiYWNrcy5sZW5ndGggPT09IDA7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fY29udGV4dHMgPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuY2xhc3MgRW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoX29wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IF9vcHRpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb3IgdGhlIHB1YmxpYyB0byBhbGxvdyB0byBzdWJzY3JpYmVcbiAgICAgKiB0byBldmVudHMgZnJvbSB0aGlzIEVtaXR0ZXJcbiAgICAgKi9cbiAgICBnZXQgZXZlbnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50ID0gKGxpc3RlbmVyLCB0aGlzQXJncywgZGlzcG9zYWJsZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NhbGxiYWNrcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSBuZXcgQ2FsbGJhY2tMaXN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zICYmIHRoaXMuX29wdGlvbnMub25GaXJzdExpc3RlbmVyQWRkICYmIHRoaXMuX2NhbGxiYWNrcy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5vbkZpcnN0TGlzdGVuZXJBZGQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcy5hZGQobGlzdGVuZXIsIHRoaXNBcmdzKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGlzcG9zYWJsZSBpcyBkaXNwb3NlZCBhZnRlciBlbWl0dGVyIGlzIGRpc3Bvc2VkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcy5yZW1vdmUobGlzdGVuZXIsIHRoaXNBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5kaXNwb3NlID0gRW1pdHRlci5fbm9vcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vcHRpb25zICYmIHRoaXMuX29wdGlvbnMub25MYXN0TGlzdGVuZXJSZW1vdmUgJiYgdGhpcy5fY2FsbGJhY2tzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMub25MYXN0TGlzdGVuZXJSZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRpc3Bvc2FibGVzKSkge1xuICAgICAgICAgICAgICAgICAgICBkaXNwb3NhYmxlcy5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVG8gYmUga2VwdCBwcml2YXRlIHRvIGZpcmUgYW4gZXZlbnQgdG9cbiAgICAgKiBzdWJzY3JpYmVyc1xuICAgICAqL1xuICAgIGZpcmUoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NhbGxiYWNrcykge1xuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzLmludm9rZS5jYWxsKHRoaXMuX2NhbGxiYWNrcywgZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jYWxsYmFja3MpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrcy5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkVtaXR0ZXIgPSBFbWl0dGVyO1xuRW1pdHRlci5fbm9vcCA9IGZ1bmN0aW9uICgpIHsgfTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjYxODpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5zdHJpbmdBcnJheSA9IGV4cG9ydHMuYXJyYXkgPSBleHBvcnRzLmZ1bmMgPSBleHBvcnRzLmVycm9yID0gZXhwb3J0cy5udW1iZXIgPSBleHBvcnRzLnN0cmluZyA9IGV4cG9ydHMuYm9vbGVhbiA9IHZvaWQgMDtcbmZ1bmN0aW9uIGJvb2xlYW4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlO1xufVxuZXhwb3J0cy5ib29sZWFuID0gYm9vbGVhbjtcbmZ1bmN0aW9uIHN0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nO1xufVxuZXhwb3J0cy5zdHJpbmcgPSBzdHJpbmc7XG5mdW5jdGlvbiBudW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcjtcbn1cbmV4cG9ydHMubnVtYmVyID0gbnVtYmVyO1xuZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBFcnJvcjtcbn1cbmV4cG9ydHMuZXJyb3IgPSBlcnJvcjtcbmZ1bmN0aW9uIGZ1bmModmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5mdW5jID0gZnVuYztcbmZ1bmN0aW9uIGFycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuZXhwb3J0cy5hcnJheSA9IGFycmF5O1xuZnVuY3Rpb24gc3RyaW5nQXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gYXJyYXkodmFsdWUpICYmIHZhbHVlLmV2ZXJ5KGVsZW0gPT4gc3RyaW5nKGVsZW0pKTtcbn1cbmV4cG9ydHMuc3RyaW5nQXJyYXkgPSBzdHJpbmdBcnJheTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTEwOTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xudmFyIF9hO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkxSVUNhY2hlID0gZXhwb3J0cy5MaW5rZWRNYXAgPSBleHBvcnRzLlRvdWNoID0gdm9pZCAwO1xudmFyIFRvdWNoO1xuKGZ1bmN0aW9uIChUb3VjaCkge1xuICAgIFRvdWNoLk5vbmUgPSAwO1xuICAgIFRvdWNoLkZpcnN0ID0gMTtcbiAgICBUb3VjaC5Bc09sZCA9IFRvdWNoLkZpcnN0O1xuICAgIFRvdWNoLkxhc3QgPSAyO1xuICAgIFRvdWNoLkFzTmV3ID0gVG91Y2guTGFzdDtcbn0pKFRvdWNoID0gZXhwb3J0cy5Ub3VjaCB8fCAoZXhwb3J0cy5Ub3VjaCA9IHt9KSk7XG5jbGFzcyBMaW5rZWRNYXAge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzW19hXSA9ICdMaW5rZWRNYXAnO1xuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX2hlYWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3RhaWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NpemUgPSAwO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IDA7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9tYXAuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5faGVhZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdGFpbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2l6ZSA9IDA7XG4gICAgICAgIHRoaXMuX3N0YXRlKys7XG4gICAgfVxuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5faGVhZCAmJiAhdGhpcy5fdGFpbDtcbiAgICB9XG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xuICAgIH1cbiAgICBnZXQgZmlyc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oZWFkPy52YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGxhc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90YWlsPy52YWx1ZTtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwLmhhcyhrZXkpO1xuICAgIH1cbiAgICBnZXQoa2V5LCB0b3VjaCA9IFRvdWNoLk5vbmUpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuX21hcC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0b3VjaCAhPT0gVG91Y2guTm9uZSkge1xuICAgICAgICAgICAgdGhpcy50b3VjaChpdGVtLCB0b3VjaCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlLCB0b3VjaCA9IFRvdWNoLk5vbmUpIHtcbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLl9tYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICBpdGVtLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAodG91Y2ggIT09IFRvdWNoLk5vbmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvdWNoKGl0ZW0sIHRvdWNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0gPSB7IGtleSwgdmFsdWUsIG5leHQ6IHVuZGVmaW5lZCwgcHJldmlvdXM6IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgc3dpdGNoICh0b3VjaCkge1xuICAgICAgICAgICAgICAgIGNhc2UgVG91Y2guTm9uZTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJdGVtTGFzdChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUb3VjaC5GaXJzdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJdGVtRmlyc3QoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVG91Y2guTGFzdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJdGVtTGFzdChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRJdGVtTGFzdChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tYXAuc2V0KGtleSwgaXRlbSk7XG4gICAgICAgICAgICB0aGlzLl9zaXplKys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5yZW1vdmUoa2V5KTtcbiAgICB9XG4gICAgcmVtb3ZlKGtleSkge1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5fbWFwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbWFwLmRlbGV0ZShrZXkpO1xuICAgICAgICB0aGlzLnJlbW92ZUl0ZW0oaXRlbSk7XG4gICAgICAgIHRoaXMuX3NpemUtLTtcbiAgICAgICAgcmV0dXJuIGl0ZW0udmFsdWU7XG4gICAgfVxuICAgIHNoaWZ0KCkge1xuICAgICAgICBpZiAoIXRoaXMuX2hlYWQgJiYgIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9oZWFkIHx8ICF0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9oZWFkO1xuICAgICAgICB0aGlzLl9tYXAuZGVsZXRlKGl0ZW0ua2V5KTtcbiAgICAgICAgdGhpcy5yZW1vdmVJdGVtKGl0ZW0pO1xuICAgICAgICB0aGlzLl9zaXplLS07XG4gICAgICAgIHJldHVybiBpdGVtLnZhbHVlO1xuICAgIH1cbiAgICBmb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLl9oZWFkO1xuICAgICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKHRoaXNBcmcpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja2ZuLmJpbmQodGhpc0FyZykoY3VycmVudC52YWx1ZSwgY3VycmVudC5rZXksIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tmbihjdXJyZW50LnZhbHVlLCBjdXJyZW50LmtleSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUgIT09IHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5rZWRNYXAgZ290IG1vZGlmaWVkIGR1cmluZyBpdGVyYXRpb24uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGtleXMoKSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5faGVhZDtcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSB7XG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlICE9PSBzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExpbmtlZE1hcCBnb3QgbW9kaWZpZWQgZHVyaW5nIGl0ZXJhdGlvbi5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geyB2YWx1ZTogY3VycmVudC5rZXksIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfVxuICAgIHZhbHVlcygpIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLl9oZWFkO1xuICAgICAgICBjb25zdCBpdGVyYXRvciA9IHtcbiAgICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUgIT09IHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTGlua2VkTWFwIGdvdCBtb2RpZmllZCBkdXJpbmcgaXRlcmF0aW9uLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IHZhbHVlOiBjdXJyZW50LnZhbHVlLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgIH1cbiAgICBlbnRyaWVzKCkge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuX3N0YXRlO1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgIGNvbnN0IGl0ZXJhdG9yID0ge1xuICAgICAgICAgICAgW1N5bWJvbC5pdGVyYXRvcl06ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBMaW5rZWRNYXAgZ290IG1vZGlmaWVkIGR1cmluZyBpdGVyYXRpb24uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgdmFsdWU6IFtjdXJyZW50LmtleSwgY3VycmVudC52YWx1ZV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfVxuICAgIFsoX2EgPSBTeW1ib2wudG9TdHJpbmdUYWcsIFN5bWJvbC5pdGVyYXRvcildKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzKCk7XG4gICAgfVxuICAgIHRyaW1PbGQobmV3U2l6ZSkge1xuICAgICAgICBpZiAobmV3U2l6ZSA+PSB0aGlzLnNpemUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3U2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5faGVhZDtcbiAgICAgICAgbGV0IGN1cnJlbnRTaXplID0gdGhpcy5zaXplO1xuICAgICAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50U2l6ZSA+IG5ld1NpemUpIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5kZWxldGUoY3VycmVudC5rZXkpO1xuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICAgICAgICAgIGN1cnJlbnRTaXplLS07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faGVhZCA9IGN1cnJlbnQ7XG4gICAgICAgIHRoaXMuX3NpemUgPSBjdXJyZW50U2l6ZTtcbiAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJlbnQucHJldmlvdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUrKztcbiAgICB9XG4gICAgYWRkSXRlbUZpcnN0KGl0ZW0pIHtcbiAgICAgICAgLy8gRmlyc3QgdGltZSBJbnNlcnRcbiAgICAgICAgaWYgKCF0aGlzLl9oZWFkICYmICF0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICB0aGlzLl90YWlsID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5faGVhZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxpc3QnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW0ubmV4dCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICB0aGlzLl9oZWFkLnByZXZpb3VzID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oZWFkID0gaXRlbTtcbiAgICAgICAgdGhpcy5fc3RhdGUrKztcbiAgICB9XG4gICAgYWRkSXRlbUxhc3QoaXRlbSkge1xuICAgICAgICAvLyBGaXJzdCB0aW1lIEluc2VydFxuICAgICAgICBpZiAoIXRoaXMuX2hlYWQgJiYgIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5wcmV2aW91cyA9IHRoaXMuX3RhaWw7XG4gICAgICAgICAgICB0aGlzLl90YWlsLm5leHQgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RhaWwgPSBpdGVtO1xuICAgICAgICB0aGlzLl9zdGF0ZSsrO1xuICAgIH1cbiAgICByZW1vdmVJdGVtKGl0ZW0pIHtcbiAgICAgICAgaWYgKGl0ZW0gPT09IHRoaXMuX2hlYWQgJiYgaXRlbSA9PT0gdGhpcy5fdGFpbCkge1xuICAgICAgICAgICAgdGhpcy5faGVhZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXRlbSA9PT0gdGhpcy5faGVhZCkge1xuICAgICAgICAgICAgLy8gVGhpcyBjYW4gb25seSBoYXBwZW5lZCBpZiBzaXplID09PSAxIHdoaWNoIGlzIGhhbmRsZVxuICAgICAgICAgICAgLy8gYnkgdGhlIGNhc2UgYWJvdmUuXG4gICAgICAgICAgICBpZiAoIWl0ZW0ubmV4dCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsaXN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtLm5leHQucHJldmlvdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gaXRlbS5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGl0ZW0gPT09IHRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgY2FuIG9ubHkgaGFwcGVuZWQgaWYgc2l6ZSA9PT0gMSB3aGljaCBpcyBoYW5kbGVcbiAgICAgICAgICAgIC8vIGJ5IHRoZSBjYXNlIGFib3ZlLlxuICAgICAgICAgICAgaWYgKCFpdGVtLnByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGxpc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW0ucHJldmlvdXMubmV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSBpdGVtLnByZXZpb3VzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbmV4dCA9IGl0ZW0ubmV4dDtcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzID0gaXRlbS5wcmV2aW91cztcbiAgICAgICAgICAgIGlmICghbmV4dCB8fCAhcHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbGlzdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV4dC5wcmV2aW91cyA9IHByZXZpb3VzO1xuICAgICAgICAgICAgcHJldmlvdXMubmV4dCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgaXRlbS5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpdGVtLnByZXZpb3VzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zdGF0ZSsrO1xuICAgIH1cbiAgICB0b3VjaChpdGVtLCB0b3VjaCkge1xuICAgICAgICBpZiAoIXRoaXMuX2hlYWQgfHwgIXRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBsaXN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0b3VjaCAhPT0gVG91Y2guRmlyc3QgJiYgdG91Y2ggIT09IFRvdWNoLkxhc3QpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvdWNoID09PSBUb3VjaC5GaXJzdCkge1xuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IHRoaXMuX2hlYWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gaXRlbS5uZXh0O1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXMgPSBpdGVtLnByZXZpb3VzO1xuICAgICAgICAgICAgLy8gVW5saW5rIHRoZSBpdGVtXG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gdGhpcy5fdGFpbCkge1xuICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzIG11c3QgYmUgZGVmaW5lZCBzaW5jZSBpdGVtIHdhcyBub3QgaGVhZCBidXQgaXMgdGFpbFxuICAgICAgICAgICAgICAgIC8vIFNvIHRoZXJlIGFyZSBtb3JlIHRoYW4gb24gaXRlbSBpbiB0aGUgbWFwXG4gICAgICAgICAgICAgICAgcHJldmlvdXMubmV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aGlzLl90YWlsID0gcHJldmlvdXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBCb3RoIG5leHQgYW5kIHByZXZpb3VzIGFyZSBub3QgdW5kZWZpbmVkIHNpbmNlIGl0ZW0gd2FzIG5laXRoZXIgaGVhZCBub3IgdGFpbC5cbiAgICAgICAgICAgICAgICBuZXh0LnByZXZpb3VzID0gcHJldmlvdXM7XG4gICAgICAgICAgICAgICAgcHJldmlvdXMubmV4dCA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJbnNlcnQgdGhlIG5vZGUgYXQgaGVhZFxuICAgICAgICAgICAgaXRlbS5wcmV2aW91cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGl0ZW0ubmV4dCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICB0aGlzLl9oZWFkLnByZXZpb3VzID0gaXRlbTtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQgPSBpdGVtO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0b3VjaCA9PT0gVG91Y2guTGFzdCkge1xuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IHRoaXMuX3RhaWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gaXRlbS5uZXh0O1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXMgPSBpdGVtLnByZXZpb3VzO1xuICAgICAgICAgICAgLy8gVW5saW5rIHRoZSBpdGVtLlxuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IHRoaXMuX2hlYWQpIHtcbiAgICAgICAgICAgICAgICAvLyBuZXh0IG11c3QgYmUgZGVmaW5lZCBzaW5jZSBpdGVtIHdhcyBub3QgdGFpbCBidXQgaXMgaGVhZFxuICAgICAgICAgICAgICAgIC8vIFNvIHRoZXJlIGFyZSBtb3JlIHRoYW4gb24gaXRlbSBpbiB0aGUgbWFwXG4gICAgICAgICAgICAgICAgbmV4dC5wcmV2aW91cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aGlzLl9oZWFkID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEJvdGggbmV4dCBhbmQgcHJldmlvdXMgYXJlIG5vdCB1bmRlZmluZWQgc2luY2UgaXRlbSB3YXMgbmVpdGhlciBoZWFkIG5vciB0YWlsLlxuICAgICAgICAgICAgICAgIG5leHQucHJldmlvdXMgPSBwcmV2aW91cztcbiAgICAgICAgICAgICAgICBwcmV2aW91cy5uZXh0ID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW0ubmV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGl0ZW0ucHJldmlvdXMgPSB0aGlzLl90YWlsO1xuICAgICAgICAgICAgdGhpcy5fdGFpbC5uZXh0ID0gaXRlbTtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSBpdGVtO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBbXTtcbiAgICAgICAgdGhpcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBmcm9tSlNPTihkYXRhKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkxpbmtlZE1hcCA9IExpbmtlZE1hcDtcbmNsYXNzIExSVUNhY2hlIGV4dGVuZHMgTGlua2VkTWFwIHtcbiAgICBjb25zdHJ1Y3RvcihsaW1pdCwgcmF0aW8gPSAxKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2xpbWl0ID0gbGltaXQ7XG4gICAgICAgIHRoaXMuX3JhdGlvID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgcmF0aW8pLCAxKTtcbiAgICB9XG4gICAgZ2V0IGxpbWl0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGltaXQ7XG4gICAgfVxuICAgIHNldCBsaW1pdChsaW1pdCkge1xuICAgICAgICB0aGlzLl9saW1pdCA9IGxpbWl0O1xuICAgICAgICB0aGlzLmNoZWNrVHJpbSgpO1xuICAgIH1cbiAgICBnZXQgcmF0aW8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXRpbztcbiAgICB9XG4gICAgc2V0IHJhdGlvKHJhdGlvKSB7XG4gICAgICAgIHRoaXMuX3JhdGlvID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgcmF0aW8pLCAxKTtcbiAgICAgICAgdGhpcy5jaGVja1RyaW0oKTtcbiAgICB9XG4gICAgZ2V0KGtleSwgdG91Y2ggPSBUb3VjaC5Bc05ldykge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSwgdG91Y2gpO1xuICAgIH1cbiAgICBwZWVrKGtleSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSwgVG91Y2guTm9uZSk7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHN1cGVyLnNldChrZXksIHZhbHVlLCBUb3VjaC5MYXN0KTtcbiAgICAgICAgdGhpcy5jaGVja1RyaW0oKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNoZWNrVHJpbSgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2l6ZSA+IHRoaXMuX2xpbWl0KSB7XG4gICAgICAgICAgICB0aGlzLnRyaW1PbGQoTWF0aC5yb3VuZCh0aGlzLl9saW1pdCAqIHRoaXMuX3JhdGlvKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkxSVUNhY2hlID0gTFJVQ2FjaGU7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDk4MDU6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5BYnN0cmFjdE1lc3NhZ2VCdWZmZXIgPSB2b2lkIDA7XG5jb25zdCBDUiA9IDEzO1xuY29uc3QgTEYgPSAxMDtcbmNvbnN0IENSTEYgPSAnXFxyXFxuJztcbmNsYXNzIEFic3RyYWN0TWVzc2FnZUJ1ZmZlciB7XG4gICAgY29uc3RydWN0b3IoZW5jb2RpbmcgPSAndXRmLTgnKSB7XG4gICAgICAgIHRoaXMuX2VuY29kaW5nID0gZW5jb2Rpbmc7XG4gICAgICAgIHRoaXMuX2NodW5rcyA9IFtdO1xuICAgICAgICB0aGlzLl90b3RhbExlbmd0aCA9IDA7XG4gICAgfVxuICAgIGdldCBlbmNvZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuY29kaW5nO1xuICAgIH1cbiAgICBhcHBlbmQoY2h1bmspIHtcbiAgICAgICAgY29uc3QgdG9BcHBlbmQgPSB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnID8gdGhpcy5mcm9tU3RyaW5nKGNodW5rLCB0aGlzLl9lbmNvZGluZykgOiBjaHVuaztcbiAgICAgICAgdGhpcy5fY2h1bmtzLnB1c2godG9BcHBlbmQpO1xuICAgICAgICB0aGlzLl90b3RhbExlbmd0aCArPSB0b0FwcGVuZC5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICB0cnlSZWFkSGVhZGVycyhsb3dlckNhc2VLZXlzID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NodW5rcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0YXRlID0gMDtcbiAgICAgICAgbGV0IGNodW5rSW5kZXggPSAwO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IGNodW5rQnl0ZXNSZWFkID0gMDtcbiAgICAgICAgcm93OiB3aGlsZSAoY2h1bmtJbmRleCA8IHRoaXMuX2NodW5rcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5fY2h1bmtzW2NodW5rSW5kZXhdO1xuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIGNvbHVtbjogd2hpbGUgKG9mZnNldCA8IGNodW5rLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY2h1bmtbb2Zmc2V0XTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ1I6XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBMRjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayByb3c7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2h1bmtCeXRlc1JlYWQgKz0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIGNodW5rSW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUgIT09IDQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGJ1ZmZlciBjb250YWlucyB0aGUgdHdvIENSTEYgYXQgdGhlIGVuZC4gU28gd2Ugd2lsbFxuICAgICAgICAvLyBoYXZlIHR3byBlbXB0eSBsaW5lcyBhZnRlciB0aGUgc3BsaXQgYXQgdGhlIGVuZCBhcyB3ZWxsLlxuICAgICAgICBjb25zdCBidWZmZXIgPSB0aGlzLl9yZWFkKGNodW5rQnl0ZXNSZWFkICsgb2Zmc2V0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcCgpO1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gdGhpcy50b1N0cmluZyhidWZmZXIsICdhc2NpaScpLnNwbGl0KENSTEYpO1xuICAgICAgICBpZiAoaGVhZGVycy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVhZGVycy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IGhlYWRlcnNbaV07XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGhlYWRlci5pbmRleE9mKCc6Jyk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXNzYWdlIGhlYWRlciBtdXN0IHNlcGFyYXRlIGtleSBhbmQgdmFsdWUgdXNpbmcgOicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qga2V5ID0gaGVhZGVyLnN1YnN0cigwLCBpbmRleCk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGhlYWRlci5zdWJzdHIoaW5kZXggKyAxKS50cmltKCk7XG4gICAgICAgICAgICByZXN1bHQuc2V0KGxvd2VyQ2FzZUtleXMgPyBrZXkudG9Mb3dlckNhc2UoKSA6IGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHRyeVJlYWRCb2R5KGxlbmd0aCkge1xuICAgICAgICBpZiAodGhpcy5fdG90YWxMZW5ndGggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWQobGVuZ3RoKTtcbiAgICB9XG4gICAgZ2V0IG51bWJlck9mQnl0ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90b3RhbExlbmd0aDtcbiAgICB9XG4gICAgX3JlYWQoYnl0ZUNvdW50KSB7XG4gICAgICAgIGlmIChieXRlQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVtcHR5QnVmZmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ5dGVDb3VudCA+IHRoaXMuX3RvdGFsTGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZWFkIHNvIG1hbnkgYnl0ZXMhYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2NodW5rc1swXS5ieXRlTGVuZ3RoID09PSBieXRlQ291bnQpIHtcbiAgICAgICAgICAgIC8vIHN1cGVyIGZhc3QgcGF0aCwgcHJlY2lzZWx5IGZpcnN0IGNodW5rIG11c3QgYmUgcmV0dXJuZWRcbiAgICAgICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5fY2h1bmtzWzBdO1xuICAgICAgICAgICAgdGhpcy5fY2h1bmtzLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLl90b3RhbExlbmd0aCAtPSBieXRlQ291bnQ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hc05hdGl2ZShjaHVuayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2NodW5rc1swXS5ieXRlTGVuZ3RoID4gYnl0ZUNvdW50KSB7XG4gICAgICAgICAgICAvLyBmYXN0IHBhdGgsIHRoZSByZWFkaW5nIGlzIGVudGlyZWx5IHdpdGhpbiB0aGUgZmlyc3QgY2h1bmtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5fY2h1bmtzWzBdO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5hc05hdGl2ZShjaHVuaywgYnl0ZUNvdW50KTtcbiAgICAgICAgICAgIHRoaXMuX2NodW5rc1swXSA9IGNodW5rLnNsaWNlKGJ5dGVDb3VudCk7XG4gICAgICAgICAgICB0aGlzLl90b3RhbExlbmd0aCAtPSBieXRlQ291bnQ7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYWxsb2NOYXRpdmUoYnl0ZUNvdW50KTtcbiAgICAgICAgbGV0IHJlc3VsdE9mZnNldCA9IDA7XG4gICAgICAgIGxldCBjaHVua0luZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGJ5dGVDb3VudCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5fY2h1bmtzW2NodW5rSW5kZXhdO1xuICAgICAgICAgICAgaWYgKGNodW5rLmJ5dGVMZW5ndGggPiBieXRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGNodW5rIHdpbGwgc3Vydml2ZVxuICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rUGFydCA9IGNodW5rLnNsaWNlKDAsIGJ5dGVDb3VudCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnNldChjaHVua1BhcnQsIHJlc3VsdE9mZnNldCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0T2Zmc2V0ICs9IGJ5dGVDb3VudDtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaHVua3NbY2h1bmtJbmRleF0gPSBjaHVuay5zbGljZShieXRlQ291bnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RvdGFsTGVuZ3RoIC09IGJ5dGVDb3VudDtcbiAgICAgICAgICAgICAgICBieXRlQ291bnQgLT0gYnl0ZUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcyBjaHVuayB3aWxsIGJlIGVudGlyZWx5IHJlYWRcbiAgICAgICAgICAgICAgICByZXN1bHQuc2V0KGNodW5rLCByZXN1bHRPZmZzZXQpO1xuICAgICAgICAgICAgICAgIHJlc3VsdE9mZnNldCArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NodW5rcy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RvdGFsTGVuZ3RoIC09IGNodW5rLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgYnl0ZUNvdW50IC09IGNodW5rLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5leHBvcnRzLkFic3RyYWN0TWVzc2FnZUJ1ZmZlciA9IEFic3RyYWN0TWVzc2FnZUJ1ZmZlcjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjU2OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLlJlYWRhYmxlU3RyZWFtTWVzc2FnZVJlYWRlciA9IGV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlUmVhZGVyID0gZXhwb3J0cy5NZXNzYWdlUmVhZGVyID0gdm9pZCAwO1xuY29uc3QgcmFsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwOTEpO1xuY29uc3QgSXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2MTgpO1xuY29uc3QgZXZlbnRzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0NzkpO1xuY29uc3Qgc2VtYXBob3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxOCk7XG52YXIgTWVzc2FnZVJlYWRlcjtcbihmdW5jdGlvbiAoTWVzc2FnZVJlYWRlcikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5saXN0ZW4pICYmIElzLmZ1bmMoY2FuZGlkYXRlLmRpc3Bvc2UpICYmXG4gICAgICAgICAgICBJcy5mdW5jKGNhbmRpZGF0ZS5vbkVycm9yKSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5vbkNsb3NlKSAmJiBJcy5mdW5jKGNhbmRpZGF0ZS5vblBhcnRpYWxNZXNzYWdlKTtcbiAgICB9XG4gICAgTWVzc2FnZVJlYWRlci5pcyA9IGlzO1xufSkoTWVzc2FnZVJlYWRlciA9IGV4cG9ydHMuTWVzc2FnZVJlYWRlciB8fCAoZXhwb3J0cy5NZXNzYWdlUmVhZGVyID0ge30pKTtcbmNsYXNzIEFic3RyYWN0TWVzc2FnZVJlYWRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXJyb3JFbWl0dGVyID0gbmV3IGV2ZW50c18xLkVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5jbG9zZUVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgICAgICB0aGlzLnBhcnRpYWxNZXNzYWdlRW1pdHRlciA9IG5ldyBldmVudHNfMS5FbWl0dGVyKCk7XG4gICAgfVxuICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgIHRoaXMuZXJyb3JFbWl0dGVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5jbG9zZUVtaXR0ZXIuZGlzcG9zZSgpO1xuICAgIH1cbiAgICBnZXQgb25FcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3JFbWl0dGVyLmV2ZW50O1xuICAgIH1cbiAgICBmaXJlRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5lcnJvckVtaXR0ZXIuZmlyZSh0aGlzLmFzRXJyb3IoZXJyb3IpKTtcbiAgICB9XG4gICAgZ2V0IG9uQ2xvc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb3NlRW1pdHRlci5ldmVudDtcbiAgICB9XG4gICAgZmlyZUNsb3NlKCkge1xuICAgICAgICB0aGlzLmNsb3NlRW1pdHRlci5maXJlKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIGdldCBvblBhcnRpYWxNZXNzYWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJ0aWFsTWVzc2FnZUVtaXR0ZXIuZXZlbnQ7XG4gICAgfVxuICAgIGZpcmVQYXJ0aWFsTWVzc2FnZShpbmZvKSB7XG4gICAgICAgIHRoaXMucGFydGlhbE1lc3NhZ2VFbWl0dGVyLmZpcmUoaW5mbyk7XG4gICAgfVxuICAgIGFzRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoYFJlYWRlciByZWNlaXZlZCBlcnJvci4gUmVhc29uOiAke0lzLnN0cmluZyhlcnJvci5tZXNzYWdlKSA/IGVycm9yLm1lc3NhZ2UgOiAndW5rbm93bid9YCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkFic3RyYWN0TWVzc2FnZVJlYWRlciA9IEFic3RyYWN0TWVzc2FnZVJlYWRlcjtcbnZhciBSZXNvbHZlZE1lc3NhZ2VSZWFkZXJPcHRpb25zO1xuKGZ1bmN0aW9uIChSZXNvbHZlZE1lc3NhZ2VSZWFkZXJPcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gZnJvbU9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBsZXQgY2hhcnNldDtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgbGV0IGNvbnRlbnREZWNvZGVyO1xuICAgICAgICBjb25zdCBjb250ZW50RGVjb2RlcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGxldCBjb250ZW50VHlwZURlY29kZXI7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRUeXBlRGVjb2RlcnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjaGFyc2V0ID0gb3B0aW9ucyA/PyAndXRmLTgnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2hhcnNldCA9IG9wdGlvbnMuY2hhcnNldCA/PyAndXRmLTgnO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29udGVudERlY29kZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnREZWNvZGVyID0gb3B0aW9ucy5jb250ZW50RGVjb2RlcjtcbiAgICAgICAgICAgICAgICBjb250ZW50RGVjb2RlcnMuc2V0KGNvbnRlbnREZWNvZGVyLm5hbWUsIGNvbnRlbnREZWNvZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNvbnRlbnREZWNvZGVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBkZWNvZGVyIG9mIG9wdGlvbnMuY29udGVudERlY29kZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnREZWNvZGVycy5zZXQoZGVjb2Rlci5uYW1lLCBkZWNvZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jb250ZW50VHlwZURlY29kZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlRGVjb2RlciA9IG9wdGlvbnMuY29udGVudFR5cGVEZWNvZGVyO1xuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlRGVjb2RlcnMuc2V0KGNvbnRlbnRUeXBlRGVjb2Rlci5uYW1lLCBjb250ZW50VHlwZURlY29kZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29udGVudFR5cGVEZWNvZGVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBkZWNvZGVyIG9mIG9wdGlvbnMuY29udGVudFR5cGVEZWNvZGVycykge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZURlY29kZXJzLnNldChkZWNvZGVyLm5hbWUsIGRlY29kZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29udGVudFR5cGVEZWNvZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlRGVjb2RlciA9ICgwLCByYWxfMS5kZWZhdWx0KSgpLmFwcGxpY2F0aW9uSnNvbi5kZWNvZGVyO1xuICAgICAgICAgICAgY29udGVudFR5cGVEZWNvZGVycy5zZXQoY29udGVudFR5cGVEZWNvZGVyLm5hbWUsIGNvbnRlbnRUeXBlRGVjb2Rlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgY2hhcnNldCwgY29udGVudERlY29kZXIsIGNvbnRlbnREZWNvZGVycywgY29udGVudFR5cGVEZWNvZGVyLCBjb250ZW50VHlwZURlY29kZXJzIH07XG4gICAgfVxuICAgIFJlc29sdmVkTWVzc2FnZVJlYWRlck9wdGlvbnMuZnJvbU9wdGlvbnMgPSBmcm9tT3B0aW9ucztcbn0pKFJlc29sdmVkTWVzc2FnZVJlYWRlck9wdGlvbnMgfHwgKFJlc29sdmVkTWVzc2FnZVJlYWRlck9wdGlvbnMgPSB7fSkpO1xuY2xhc3MgUmVhZGFibGVTdHJlYW1NZXNzYWdlUmVhZGVyIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlUmVhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihyZWFkYWJsZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJlYWRhYmxlID0gcmVhZGFibGU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IFJlc29sdmVkTWVzc2FnZVJlYWRlck9wdGlvbnMuZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gKDAsIHJhbF8xLmRlZmF1bHQpKCkubWVzc2FnZUJ1ZmZlci5jcmVhdGUodGhpcy5vcHRpb25zLmNoYXJzZXQpO1xuICAgICAgICB0aGlzLl9wYXJ0aWFsTWVzc2FnZVRpbWVvdXQgPSAxMDAwMDtcbiAgICAgICAgdGhpcy5uZXh0TWVzc2FnZUxlbmd0aCA9IC0xO1xuICAgICAgICB0aGlzLm1lc3NhZ2VUb2tlbiA9IDA7XG4gICAgICAgIHRoaXMucmVhZFNlbWFwaG9yZSA9IG5ldyBzZW1hcGhvcmVfMS5TZW1hcGhvcmUoMSk7XG4gICAgfVxuICAgIHNldCBwYXJ0aWFsTWVzc2FnZVRpbWVvdXQodGltZW91dCkge1xuICAgICAgICB0aGlzLl9wYXJ0aWFsTWVzc2FnZVRpbWVvdXQgPSB0aW1lb3V0O1xuICAgIH1cbiAgICBnZXQgcGFydGlhbE1lc3NhZ2VUaW1lb3V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFydGlhbE1lc3NhZ2VUaW1lb3V0O1xuICAgIH1cbiAgICBsaXN0ZW4oY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5uZXh0TWVzc2FnZUxlbmd0aCA9IC0xO1xuICAgICAgICB0aGlzLm1lc3NhZ2VUb2tlbiA9IDA7XG4gICAgICAgIHRoaXMucGFydGlhbE1lc3NhZ2VUaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnJlYWRhYmxlLm9uRGF0YSgoZGF0YSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbkRhdGEoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlYWRhYmxlLm9uRXJyb3IoKGVycm9yKSA9PiB0aGlzLmZpcmVFcnJvcihlcnJvcikpO1xuICAgICAgICB0aGlzLnJlYWRhYmxlLm9uQ2xvc2UoKCkgPT4gdGhpcy5maXJlQ2xvc2UoKSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIG9uRGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuYnVmZmVyLmFwcGVuZChkYXRhKTtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm5leHRNZXNzYWdlTGVuZ3RoID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSB0aGlzLmJ1ZmZlci50cnlSZWFkSGVhZGVycyh0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoIWhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50TGVuZ3RoID0gaGVhZGVycy5nZXQoJ2NvbnRlbnQtbGVuZ3RoJyk7XG4gICAgICAgICAgICAgICAgaWYgKCFjb250ZW50TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZUVycm9yKG5ldyBFcnJvcignSGVhZGVyIG11c3QgcHJvdmlkZSBhIENvbnRlbnQtTGVuZ3RoIHByb3BlcnR5LicpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBwYXJzZUludChjb250ZW50TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4obGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmVFcnJvcihuZXcgRXJyb3IoJ0NvbnRlbnQtTGVuZ3RoIHZhbHVlIG11c3QgYmUgYSBudW1iZXIuJykpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubmV4dE1lc3NhZ2VMZW5ndGggPSBsZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gdGhpcy5idWZmZXIudHJ5UmVhZEJvZHkodGhpcy5uZXh0TWVzc2FnZUxlbmd0aCk7XG4gICAgICAgICAgICBpZiAoYm9keSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLyoqIFdlIGhhdmVuJ3QgcmVjZWl2ZWQgdGhlIGZ1bGwgbWVzc2FnZSB5ZXQuICovXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRQYXJ0aWFsTWVzc2FnZVRpbWVyKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jbGVhclBhcnRpYWxNZXNzYWdlVGltZXIoKTtcbiAgICAgICAgICAgIHRoaXMubmV4dE1lc3NhZ2VMZW5ndGggPSAtMTtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHdlIGNvbnZlcnQgb25lIHJlY2VpdmVkIG1lc3NhZ2UgYWZ0ZXIgdGhlXG4gICAgICAgICAgICAvLyBvdGhlci4gT3RoZXJ3aXNlIGl0IGNvdWxkIGhhcHBlbiB0aGF0IGEgZGVjb2Rpbmcgb2YgYSBzZWNvbmRcbiAgICAgICAgICAgIC8vIHNtYWxsZXIgbWVzc2FnZSBmaW5pc2hlZCBiZWZvcmUgdGhlIGRlY29kaW5nIG9mIGEgZmlyc3QgbGFyZ2VyXG4gICAgICAgICAgICAvLyBtZXNzYWdlIGFuZCB0aGVuIHdlIHdvdWxkIGRlbGl2ZXIgdGhlIHNlY29uZCBtZXNzYWdlIGZpcnN0LlxuICAgICAgICAgICAgdGhpcy5yZWFkU2VtYXBob3JlLmxvY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gdGhpcy5vcHRpb25zLmNvbnRlbnREZWNvZGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyBhd2FpdCB0aGlzLm9wdGlvbnMuY29udGVudERlY29kZXIuZGVjb2RlKGJvZHkpXG4gICAgICAgICAgICAgICAgICAgIDogYm9keTtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYXdhaXQgdGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlRGVjb2Rlci5kZWNvZGUoYnl0ZXMsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFjayhtZXNzYWdlKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsZWFyUGFydGlhbE1lc3NhZ2VUaW1lcigpIHtcbiAgICAgICAgaWYgKHRoaXMucGFydGlhbE1lc3NhZ2VUaW1lcikge1xuICAgICAgICAgICAgdGhpcy5wYXJ0aWFsTWVzc2FnZVRpbWVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMucGFydGlhbE1lc3NhZ2VUaW1lciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRQYXJ0aWFsTWVzc2FnZVRpbWVyKCkge1xuICAgICAgICB0aGlzLmNsZWFyUGFydGlhbE1lc3NhZ2VUaW1lcigpO1xuICAgICAgICBpZiAodGhpcy5fcGFydGlhbE1lc3NhZ2VUaW1lb3V0IDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcnRpYWxNZXNzYWdlVGltZXIgPSAoMCwgcmFsXzEuZGVmYXVsdCkoKS50aW1lci5zZXRUaW1lb3V0KCh0b2tlbiwgdGltZW91dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wYXJ0aWFsTWVzc2FnZVRpbWVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaWYgKHRva2VuID09PSB0aGlzLm1lc3NhZ2VUb2tlbikge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZVBhcnRpYWxNZXNzYWdlKHsgbWVzc2FnZVRva2VuOiB0b2tlbiwgd2FpdGluZ1RpbWU6IHRpbWVvdXQgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRQYXJ0aWFsTWVzc2FnZVRpbWVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMuX3BhcnRpYWxNZXNzYWdlVGltZW91dCwgdGhpcy5tZXNzYWdlVG9rZW4sIHRoaXMuX3BhcnRpYWxNZXNzYWdlVGltZW91dCk7XG4gICAgfVxufVxuZXhwb3J0cy5SZWFkYWJsZVN0cmVhbU1lc3NhZ2VSZWFkZXIgPSBSZWFkYWJsZVN0cmVhbU1lc3NhZ2VSZWFkZXI7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDkwMzY6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuV3JpdGVhYmxlU3RyZWFtTWVzc2FnZVdyaXRlciA9IGV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlV3JpdGVyID0gZXhwb3J0cy5NZXNzYWdlV3JpdGVyID0gdm9pZCAwO1xuY29uc3QgcmFsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwOTEpO1xuY29uc3QgSXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2MTgpO1xuY29uc3Qgc2VtYXBob3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxOCk7XG5jb25zdCBldmVudHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjQ3OSk7XG5jb25zdCBDb250ZW50TGVuZ3RoID0gJ0NvbnRlbnQtTGVuZ3RoOiAnO1xuY29uc3QgQ1JMRiA9ICdcXHJcXG4nO1xudmFyIE1lc3NhZ2VXcml0ZXI7XG4oZnVuY3Rpb24gKE1lc3NhZ2VXcml0ZXIpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgSXMuZnVuYyhjYW5kaWRhdGUuZGlzcG9zZSkgJiYgSXMuZnVuYyhjYW5kaWRhdGUub25DbG9zZSkgJiZcbiAgICAgICAgICAgIElzLmZ1bmMoY2FuZGlkYXRlLm9uRXJyb3IpICYmIElzLmZ1bmMoY2FuZGlkYXRlLndyaXRlKTtcbiAgICB9XG4gICAgTWVzc2FnZVdyaXRlci5pcyA9IGlzO1xufSkoTWVzc2FnZVdyaXRlciA9IGV4cG9ydHMuTWVzc2FnZVdyaXRlciB8fCAoZXhwb3J0cy5NZXNzYWdlV3JpdGVyID0ge30pKTtcbmNsYXNzIEFic3RyYWN0TWVzc2FnZVdyaXRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXJyb3JFbWl0dGVyID0gbmV3IGV2ZW50c18xLkVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5jbG9zZUVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRW1pdHRlcigpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmVycm9yRW1pdHRlci5kaXNwb3NlKCk7XG4gICAgICAgIHRoaXMuY2xvc2VFbWl0dGVyLmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgZ2V0IG9uRXJyb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yRW1pdHRlci5ldmVudDtcbiAgICB9XG4gICAgZmlyZUVycm9yKGVycm9yLCBtZXNzYWdlLCBjb3VudCkge1xuICAgICAgICB0aGlzLmVycm9yRW1pdHRlci5maXJlKFt0aGlzLmFzRXJyb3IoZXJyb3IpLCBtZXNzYWdlLCBjb3VudF0pO1xuICAgIH1cbiAgICBnZXQgb25DbG9zZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2VFbWl0dGVyLmV2ZW50O1xuICAgIH1cbiAgICBmaXJlQ2xvc2UoKSB7XG4gICAgICAgIHRoaXMuY2xvc2VFbWl0dGVyLmZpcmUodW5kZWZpbmVkKTtcbiAgICB9XG4gICAgYXNFcnJvcihlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihgV3JpdGVyIHJlY2VpdmVkIGVycm9yLiBSZWFzb246ICR7SXMuc3RyaW5nKGVycm9yLm1lc3NhZ2UpID8gZXJyb3IubWVzc2FnZSA6ICd1bmtub3duJ31gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlV3JpdGVyID0gQWJzdHJhY3RNZXNzYWdlV3JpdGVyO1xudmFyIFJlc29sdmVkTWVzc2FnZVdyaXRlck9wdGlvbnM7XG4oZnVuY3Rpb24gKFJlc29sdmVkTWVzc2FnZVdyaXRlck9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiBmcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4geyBjaGFyc2V0OiBvcHRpb25zID8/ICd1dGYtOCcsIGNvbnRlbnRUeXBlRW5jb2RlcjogKDAsIHJhbF8xLmRlZmF1bHQpKCkuYXBwbGljYXRpb25Kc29uLmVuY29kZXIgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7IGNoYXJzZXQ6IG9wdGlvbnMuY2hhcnNldCA/PyAndXRmLTgnLCBjb250ZW50RW5jb2Rlcjogb3B0aW9ucy5jb250ZW50RW5jb2RlciwgY29udGVudFR5cGVFbmNvZGVyOiBvcHRpb25zLmNvbnRlbnRUeXBlRW5jb2RlciA/PyAoMCwgcmFsXzEuZGVmYXVsdCkoKS5hcHBsaWNhdGlvbkpzb24uZW5jb2RlciB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIFJlc29sdmVkTWVzc2FnZVdyaXRlck9wdGlvbnMuZnJvbU9wdGlvbnMgPSBmcm9tT3B0aW9ucztcbn0pKFJlc29sdmVkTWVzc2FnZVdyaXRlck9wdGlvbnMgfHwgKFJlc29sdmVkTWVzc2FnZVdyaXRlck9wdGlvbnMgPSB7fSkpO1xuY2xhc3MgV3JpdGVhYmxlU3RyZWFtTWVzc2FnZVdyaXRlciBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVdyaXRlciB7XG4gICAgY29uc3RydWN0b3Iod3JpdGFibGUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy53cml0YWJsZSA9IHdyaXRhYmxlO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBSZXNvbHZlZE1lc3NhZ2VXcml0ZXJPcHRpb25zLmZyb21PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVycm9yQ291bnQgPSAwO1xuICAgICAgICB0aGlzLndyaXRlU2VtYXBob3JlID0gbmV3IHNlbWFwaG9yZV8xLlNlbWFwaG9yZSgxKTtcbiAgICAgICAgdGhpcy53cml0YWJsZS5vbkVycm9yKChlcnJvcikgPT4gdGhpcy5maXJlRXJyb3IoZXJyb3IpKTtcbiAgICAgICAgdGhpcy53cml0YWJsZS5vbkNsb3NlKCgpID0+IHRoaXMuZmlyZUNsb3NlKCkpO1xuICAgIH1cbiAgICBhc3luYyB3cml0ZShtc2cpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVTZW1hcGhvcmUubG9jayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gdGhpcy5vcHRpb25zLmNvbnRlbnRUeXBlRW5jb2Rlci5lbmNvZGUobXNnLCB0aGlzLm9wdGlvbnMpLnRoZW4oKGJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGVudEVuY29kZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNvbnRlbnRFbmNvZGVyLmVuY29kZShidWZmZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkLnRoZW4oKGJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSBbXTtcbiAgICAgICAgICAgICAgICBoZWFkZXJzLnB1c2goQ29udGVudExlbmd0aCwgYnVmZmVyLmJ5dGVMZW5ndGgudG9TdHJpbmcoKSwgQ1JMRik7XG4gICAgICAgICAgICAgICAgaGVhZGVycy5wdXNoKENSTEYpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvV3JpdGUobXNnLCBoZWFkZXJzLCBidWZmZXIpO1xuICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBkb1dyaXRlKG1zZywgaGVhZGVycywgZGF0YSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy53cml0YWJsZS53cml0ZShoZWFkZXJzLmpvaW4oJycpLCAnYXNjaWknKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndyaXRhYmxlLndyaXRlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgbXNnKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlRXJyb3IoZXJyb3IsIG1zZykge1xuICAgICAgICB0aGlzLmVycm9yQ291bnQrKztcbiAgICAgICAgdGhpcy5maXJlRXJyb3IoZXJyb3IsIG1zZywgdGhpcy5lcnJvckNvdW50KTtcbiAgICB9XG4gICAgZW5kKCkge1xuICAgICAgICB0aGlzLndyaXRhYmxlLmVuZCgpO1xuICAgIH1cbn1cbmV4cG9ydHMuV3JpdGVhYmxlU3RyZWFtTWVzc2FnZVdyaXRlciA9IFdyaXRlYWJsZVN0cmVhbU1lc3NhZ2VXcml0ZXI7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDcxNjI6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuTWVzc2FnZSA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTkgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGU4ID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNyA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTYgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGU1ID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNCA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTMgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGUyID0gZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMSA9IGV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTAgPSBleHBvcnRzLk5vdGlmaWNhdGlvblR5cGUgPSBleHBvcnRzLlJlcXVlc3RUeXBlOSA9IGV4cG9ydHMuUmVxdWVzdFR5cGU4ID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTcgPSBleHBvcnRzLlJlcXVlc3RUeXBlNiA9IGV4cG9ydHMuUmVxdWVzdFR5cGU1ID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTQgPSBleHBvcnRzLlJlcXVlc3RUeXBlMyA9IGV4cG9ydHMuUmVxdWVzdFR5cGUyID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTEgPSBleHBvcnRzLlJlcXVlc3RUeXBlID0gZXhwb3J0cy5SZXF1ZXN0VHlwZTAgPSBleHBvcnRzLkFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSA9IGV4cG9ydHMuUGFyYW1ldGVyU3RydWN0dXJlcyA9IGV4cG9ydHMuUmVzcG9uc2VFcnJvciA9IGV4cG9ydHMuRXJyb3JDb2RlcyA9IHZvaWQgMDtcbmNvbnN0IGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NjE4KTtcbi8qKlxuICogUHJlZGVmaW5lZCBlcnJvciBjb2Rlcy5cbiAqL1xudmFyIEVycm9yQ29kZXM7XG4oZnVuY3Rpb24gKEVycm9yQ29kZXMpIHtcbiAgICAvLyBEZWZpbmVkIGJ5IEpTT04gUlBDXG4gICAgRXJyb3JDb2Rlcy5QYXJzZUVycm9yID0gLTMyNzAwO1xuICAgIEVycm9yQ29kZXMuSW52YWxpZFJlcXVlc3QgPSAtMzI2MDA7XG4gICAgRXJyb3JDb2Rlcy5NZXRob2ROb3RGb3VuZCA9IC0zMjYwMTtcbiAgICBFcnJvckNvZGVzLkludmFsaWRQYXJhbXMgPSAtMzI2MDI7XG4gICAgRXJyb3JDb2Rlcy5JbnRlcm5hbEVycm9yID0gLTMyNjAzO1xuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgdGhlIHN0YXJ0IHJhbmdlIG9mIEpTT04gUlBDIHJlc2VydmVkIGVycm9yIGNvZGVzLlxuICAgICAqIEl0IGRvZXNuJ3QgZGVub3RlIGEgcmVhbCBlcnJvciBjb2RlLiBObyBhcHBsaWNhdGlvbiBlcnJvciBjb2RlcyBzaG91bGRcbiAgICAgKiBiZSBkZWZpbmVkIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQgcmFuZ2UuIEZvciBiYWNrd2FyZHNcbiAgICAgKiBjb21wYXRpYmlsaXR5IHRoZSBgU2VydmVyTm90SW5pdGlhbGl6ZWRgIGFuZCB0aGUgYFVua25vd25FcnJvckNvZGVgXG4gICAgICogYXJlIGxlZnQgaW4gdGhlIHJhbmdlLlxuICAgICAqXG4gICAgICogQHNpbmNlIDMuMTYuMFxuICAgICovXG4gICAgRXJyb3JDb2Rlcy5qc29ucnBjUmVzZXJ2ZWRFcnJvclJhbmdlU3RhcnQgPSAtMzIwOTk7XG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZSAganNvbnJwY1Jlc2VydmVkRXJyb3JSYW5nZVN0YXJ0ICovXG4gICAgRXJyb3JDb2Rlcy5zZXJ2ZXJFcnJvclN0YXJ0ID0gLTMyMDk5O1xuICAgIC8qKlxuICAgICAqIEFuIGVycm9yIG9jY3VycmVkIHdoZW4gd3JpdGUgYSBtZXNzYWdlIHRvIHRoZSB0cmFuc3BvcnQgbGF5ZXIuXG4gICAgICovXG4gICAgRXJyb3JDb2Rlcy5NZXNzYWdlV3JpdGVFcnJvciA9IC0zMjA5OTtcbiAgICAvKipcbiAgICAgKiBBbiBlcnJvciBvY2N1cnJlZCB3aGVuIHJlYWRpbmcgYSBtZXNzYWdlIGZyb20gdGhlIHRyYW5zcG9ydCBsYXllci5cbiAgICAgKi9cbiAgICBFcnJvckNvZGVzLk1lc3NhZ2VSZWFkRXJyb3IgPSAtMzIwOTg7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbm5lY3Rpb24gZ290IGRpc3Bvc2VkIG9yIGxvc3QgYW5kIGFsbCBwZW5kaW5nIHJlc3BvbnNlcyBnb3RcbiAgICAgKiByZWplY3RlZC5cbiAgICAgKi9cbiAgICBFcnJvckNvZGVzLlBlbmRpbmdSZXNwb25zZVJlamVjdGVkID0gLTMyMDk3O1xuICAgIC8qKlxuICAgICAqIFRoZSBjb25uZWN0aW9uIGlzIGluYWN0aXZlIGFuZCBhIHVzZSBvZiBpdCBmYWlsZWQuXG4gICAgICovXG4gICAgRXJyb3JDb2Rlcy5Db25uZWN0aW9uSW5hY3RpdmUgPSAtMzIwOTY7XG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSBpbmRpY2F0aW5nIHRoYXQgYSBzZXJ2ZXIgcmVjZWl2ZWQgYSBub3RpZmljYXRpb24gb3JcbiAgICAgKiByZXF1ZXN0IGJlZm9yZSB0aGUgc2VydmVyIGhhcyByZWNlaXZlZCB0aGUgYGluaXRpYWxpemVgIHJlcXVlc3QuXG4gICAgICovXG4gICAgRXJyb3JDb2Rlcy5TZXJ2ZXJOb3RJbml0aWFsaXplZCA9IC0zMjAwMjtcbiAgICBFcnJvckNvZGVzLlVua25vd25FcnJvckNvZGUgPSAtMzIwMDE7XG4gICAgLyoqXG4gICAgICogVGhpcyBpcyB0aGUgZW5kIHJhbmdlIG9mIEpTT04gUlBDIHJlc2VydmVkIGVycm9yIGNvZGVzLlxuICAgICAqIEl0IGRvZXNuJ3QgZGVub3RlIGEgcmVhbCBlcnJvciBjb2RlLlxuICAgICAqXG4gICAgICogQHNpbmNlIDMuMTYuMFxuICAgICovXG4gICAgRXJyb3JDb2Rlcy5qc29ucnBjUmVzZXJ2ZWRFcnJvclJhbmdlRW5kID0gLTMyMDAwO1xuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2UgIGpzb25ycGNSZXNlcnZlZEVycm9yUmFuZ2VFbmQgKi9cbiAgICBFcnJvckNvZGVzLnNlcnZlckVycm9yRW5kID0gLTMyMDAwO1xufSkoRXJyb3JDb2RlcyA9IGV4cG9ydHMuRXJyb3JDb2RlcyB8fCAoZXhwb3J0cy5FcnJvckNvZGVzID0ge30pKTtcbi8qKlxuICogQW4gZXJyb3Igb2JqZWN0IHJldHVybiBpbiBhIHJlc3BvbnNlIGluIGNhc2UgYSByZXF1ZXN0XG4gKiBoYXMgZmFpbGVkLlxuICovXG5jbGFzcyBSZXNwb25zZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNvZGUsIG1lc3NhZ2UsIGRhdGEpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuY29kZSA9IGlzLm51bWJlcihjb2RlKSA/IGNvZGUgOiBFcnJvckNvZGVzLlVua25vd25FcnJvckNvZGU7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBSZXNwb25zZUVycm9yLnByb3RvdHlwZSk7XG4gICAgfVxuICAgIHRvSnNvbigpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5leHBvcnRzLlJlc3BvbnNlRXJyb3IgPSBSZXNwb25zZUVycm9yO1xuY2xhc3MgUGFyYW1ldGVyU3RydWN0dXJlcyB7XG4gICAgY29uc3RydWN0b3Ioa2luZCkge1xuICAgICAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgIH1cbiAgICBzdGF0aWMgaXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBQYXJhbWV0ZXJTdHJ1Y3R1cmVzLmF1dG8gfHwgdmFsdWUgPT09IFBhcmFtZXRlclN0cnVjdHVyZXMuYnlOYW1lIHx8IHZhbHVlID09PSBQYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5UG9zaXRpb247XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5raW5kO1xuICAgIH1cbn1cbmV4cG9ydHMuUGFyYW1ldGVyU3RydWN0dXJlcyA9IFBhcmFtZXRlclN0cnVjdHVyZXM7XG4vKipcbiAqIFRoZSBwYXJhbWV0ZXIgc3RydWN0dXJlIGlzIGF1dG9tYXRpY2FsbHkgaW5mZXJyZWQgb24gdGhlIG51bWJlciBvZiBwYXJhbWV0ZXJzXG4gKiBhbmQgdGhlIHBhcmFtZXRlciB0eXBlIGluIGNhc2Ugb2YgYSBzaW5nbGUgcGFyYW0uXG4gKi9cblBhcmFtZXRlclN0cnVjdHVyZXMuYXV0byA9IG5ldyBQYXJhbWV0ZXJTdHJ1Y3R1cmVzKCdhdXRvJyk7XG4vKipcbiAqIEZvcmNlcyBgYnlQb3NpdGlvbmAgcGFyYW1ldGVyIHN0cnVjdHVyZS4gVGhpcyBpcyB1c2VmdWwgaWYgeW91IGhhdmUgYSBzaW5nbGVcbiAqIHBhcmFtZXRlciB3aGljaCBoYXMgYSBsaXRlcmFsIHR5cGUuXG4gKi9cblBhcmFtZXRlclN0cnVjdHVyZXMuYnlQb3NpdGlvbiA9IG5ldyBQYXJhbWV0ZXJTdHJ1Y3R1cmVzKCdieVBvc2l0aW9uJyk7XG4vKipcbiAqIEZvcmNlcyBgYnlOYW1lYCBwYXJhbWV0ZXIgc3RydWN0dXJlLiBUaGlzIGlzIG9ubHkgdXNlZnVsIHdoZW4gaGF2aW5nIGEgc2luZ2xlXG4gKiBwYXJhbWV0ZXIuIFRoZSBsaWJyYXJ5IHdpbGwgcmVwb3J0IGVycm9ycyBpZiB1c2VkIHdpdGggYSBkaWZmZXJlbnQgbnVtYmVyIG9mXG4gKiBwYXJhbWV0ZXJzLlxuICovXG5QYXJhbWV0ZXJTdHJ1Y3R1cmVzLmJ5TmFtZSA9IG5ldyBQYXJhbWV0ZXJTdHJ1Y3R1cmVzKCdieU5hbWUnKTtcbi8qKlxuICogQW4gYWJzdHJhY3QgaW1wbGVtZW50YXRpb24gb2YgYSBNZXNzYWdlVHlwZS5cbiAqL1xuY2xhc3MgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QsIG51bWJlck9mUGFyYW1zKSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICB0aGlzLm51bWJlck9mUGFyYW1zID0gbnVtYmVyT2ZQYXJhbXM7XG4gICAgfVxuICAgIGdldCBwYXJhbWV0ZXJTdHJ1Y3R1cmVzKCkge1xuICAgICAgICByZXR1cm4gUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvO1xuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlID0gQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlO1xuLyoqXG4gKiBDbGFzc2VzIHRvIHR5cGUgcmVxdWVzdCByZXNwb25zZSBwYWlyc1xuICovXG5jbGFzcyBSZXF1ZXN0VHlwZTAgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDApO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdFR5cGUwID0gUmVxdWVzdFR5cGUwO1xuY2xhc3MgUmVxdWVzdFR5cGUgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCwgX3BhcmFtZXRlclN0cnVjdHVyZXMgPSBQYXJhbWV0ZXJTdHJ1Y3R1cmVzLmF1dG8pIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCAxKTtcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVyU3RydWN0dXJlcyA9IF9wYXJhbWV0ZXJTdHJ1Y3R1cmVzO1xuICAgIH1cbiAgICBnZXQgcGFyYW1ldGVyU3RydWN0dXJlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRlclN0cnVjdHVyZXM7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0VHlwZSA9IFJlcXVlc3RUeXBlO1xuY2xhc3MgUmVxdWVzdFR5cGUxIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QsIF9wYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgMSk7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlclN0cnVjdHVyZXMgPSBfcGFyYW1ldGVyU3RydWN0dXJlcztcbiAgICB9XG4gICAgZ2V0IHBhcmFtZXRlclN0cnVjdHVyZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJhbWV0ZXJTdHJ1Y3R1cmVzO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdFR5cGUxID0gUmVxdWVzdFR5cGUxO1xuY2xhc3MgUmVxdWVzdFR5cGUyIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCAyKTtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVlc3RUeXBlMiA9IFJlcXVlc3RUeXBlMjtcbmNsYXNzIFJlcXVlc3RUeXBlMyBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgMyk7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0VHlwZTMgPSBSZXF1ZXN0VHlwZTM7XG5jbGFzcyBSZXF1ZXN0VHlwZTQgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDQpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdFR5cGU0ID0gUmVxdWVzdFR5cGU0O1xuY2xhc3MgUmVxdWVzdFR5cGU1IGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCA1KTtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVlc3RUeXBlNSA9IFJlcXVlc3RUeXBlNTtcbmNsYXNzIFJlcXVlc3RUeXBlNiBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgNik7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0VHlwZTYgPSBSZXF1ZXN0VHlwZTY7XG5jbGFzcyBSZXF1ZXN0VHlwZTcgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDcpO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVxdWVzdFR5cGU3ID0gUmVxdWVzdFR5cGU3O1xuY2xhc3MgUmVxdWVzdFR5cGU4IGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCA4KTtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVlc3RUeXBlOCA9IFJlcXVlc3RUeXBlODtcbmNsYXNzIFJlcXVlc3RUeXBlOSBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgOSk7XG4gICAgfVxufVxuZXhwb3J0cy5SZXF1ZXN0VHlwZTkgPSBSZXF1ZXN0VHlwZTk7XG5jbGFzcyBOb3RpZmljYXRpb25UeXBlIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QsIF9wYXJhbWV0ZXJTdHJ1Y3R1cmVzID0gUGFyYW1ldGVyU3RydWN0dXJlcy5hdXRvKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgMSk7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlclN0cnVjdHVyZXMgPSBfcGFyYW1ldGVyU3RydWN0dXJlcztcbiAgICB9XG4gICAgZ2V0IHBhcmFtZXRlclN0cnVjdHVyZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJhbWV0ZXJTdHJ1Y3R1cmVzO1xuICAgIH1cbn1cbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZSA9IE5vdGlmaWNhdGlvblR5cGU7XG5jbGFzcyBOb3RpZmljYXRpb25UeXBlMCBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgMCk7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMCA9IE5vdGlmaWNhdGlvblR5cGUwO1xuY2xhc3MgTm90aWZpY2F0aW9uVHlwZTEgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCwgX3BhcmFtZXRlclN0cnVjdHVyZXMgPSBQYXJhbWV0ZXJTdHJ1Y3R1cmVzLmF1dG8pIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCAxKTtcbiAgICAgICAgdGhpcy5fcGFyYW1ldGVyU3RydWN0dXJlcyA9IF9wYXJhbWV0ZXJTdHJ1Y3R1cmVzO1xuICAgIH1cbiAgICBnZXQgcGFyYW1ldGVyU3RydWN0dXJlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmFtZXRlclN0cnVjdHVyZXM7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlMSA9IE5vdGlmaWNhdGlvblR5cGUxO1xuY2xhc3MgTm90aWZpY2F0aW9uVHlwZTIgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDIpO1xuICAgIH1cbn1cbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTIgPSBOb3RpZmljYXRpb25UeXBlMjtcbmNsYXNzIE5vdGlmaWNhdGlvblR5cGUzIGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCAzKTtcbiAgICB9XG59XG5leHBvcnRzLk5vdGlmaWNhdGlvblR5cGUzID0gTm90aWZpY2F0aW9uVHlwZTM7XG5jbGFzcyBOb3RpZmljYXRpb25UeXBlNCBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgNCk7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNCA9IE5vdGlmaWNhdGlvblR5cGU0O1xuY2xhc3MgTm90aWZpY2F0aW9uVHlwZTUgZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDUpO1xuICAgIH1cbn1cbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTUgPSBOb3RpZmljYXRpb25UeXBlNTtcbmNsYXNzIE5vdGlmaWNhdGlvblR5cGU2IGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCA2KTtcbiAgICB9XG59XG5leHBvcnRzLk5vdGlmaWNhdGlvblR5cGU2ID0gTm90aWZpY2F0aW9uVHlwZTY7XG5jbGFzcyBOb3RpZmljYXRpb25UeXBlNyBleHRlbmRzIEFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSB7XG4gICAgY29uc3RydWN0b3IobWV0aG9kKSB7XG4gICAgICAgIHN1cGVyKG1ldGhvZCwgNyk7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpZmljYXRpb25UeXBlNyA9IE5vdGlmaWNhdGlvblR5cGU3O1xuY2xhc3MgTm90aWZpY2F0aW9uVHlwZTggZXh0ZW5kcyBBYnN0cmFjdE1lc3NhZ2VTaWduYXR1cmUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIDgpO1xuICAgIH1cbn1cbmV4cG9ydHMuTm90aWZpY2F0aW9uVHlwZTggPSBOb3RpZmljYXRpb25UeXBlODtcbmNsYXNzIE5vdGlmaWNhdGlvblR5cGU5IGV4dGVuZHMgQWJzdHJhY3RNZXNzYWdlU2lnbmF0dXJlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCA5KTtcbiAgICB9XG59XG5leHBvcnRzLk5vdGlmaWNhdGlvblR5cGU5ID0gTm90aWZpY2F0aW9uVHlwZTk7XG52YXIgTWVzc2FnZTtcbihmdW5jdGlvbiAoTWVzc2FnZSkge1xuICAgIC8qKlxuICAgICAqIFRlc3RzIGlmIHRoZSBnaXZlbiBtZXNzYWdlIGlzIGEgcmVxdWVzdCBtZXNzYWdlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNSZXF1ZXN0KG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gbWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBpcy5zdHJpbmcoY2FuZGlkYXRlLm1ldGhvZCkgJiYgKGlzLnN0cmluZyhjYW5kaWRhdGUuaWQpIHx8IGlzLm51bWJlcihjYW5kaWRhdGUuaWQpKTtcbiAgICB9XG4gICAgTWVzc2FnZS5pc1JlcXVlc3QgPSBpc1JlcXVlc3Q7XG4gICAgLyoqXG4gICAgICogVGVzdHMgaWYgdGhlIGdpdmVuIG1lc3NhZ2UgaXMgYSBub3RpZmljYXRpb24gbWVzc2FnZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTm90aWZpY2F0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gbWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBpcy5zdHJpbmcoY2FuZGlkYXRlLm1ldGhvZCkgJiYgbWVzc2FnZS5pZCA9PT0gdm9pZCAwO1xuICAgIH1cbiAgICBNZXNzYWdlLmlzTm90aWZpY2F0aW9uID0gaXNOb3RpZmljYXRpb247XG4gICAgLyoqXG4gICAgICogVGVzdHMgaWYgdGhlIGdpdmVuIG1lc3NhZ2UgaXMgYSByZXNwb25zZSBtZXNzYWdlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNSZXNwb25zZShtZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IG1lc3NhZ2U7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgKGNhbmRpZGF0ZS5yZXN1bHQgIT09IHZvaWQgMCB8fCAhIWNhbmRpZGF0ZS5lcnJvcikgJiYgKGlzLnN0cmluZyhjYW5kaWRhdGUuaWQpIHx8IGlzLm51bWJlcihjYW5kaWRhdGUuaWQpIHx8IGNhbmRpZGF0ZS5pZCA9PT0gbnVsbCk7XG4gICAgfVxuICAgIE1lc3NhZ2UuaXNSZXNwb25zZSA9IGlzUmVzcG9uc2U7XG59KShNZXNzYWdlID0gZXhwb3J0cy5NZXNzYWdlIHx8IChleHBvcnRzLk1lc3NhZ2UgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1MDkxOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5sZXQgX3JhbDtcbmZ1bmN0aW9uIFJBTCgpIHtcbiAgICBpZiAoX3JhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcnVudGltZSBhYnN0cmFjdGlvbiBsYXllciBpbnN0YWxsZWRgKTtcbiAgICB9XG4gICAgcmV0dXJuIF9yYWw7XG59XG4oZnVuY3Rpb24gKFJBTCkge1xuICAgIGZ1bmN0aW9uIGluc3RhbGwocmFsKSB7XG4gICAgICAgIGlmIChyYWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBydW50aW1lIGFic3RyYWN0aW9uIGxheWVyIHByb3ZpZGVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgX3JhbCA9IHJhbDtcbiAgICB9XG4gICAgUkFMLmluc3RhbGwgPSBpbnN0YWxsO1xufSkoUkFMIHx8IChSQUwgPSB7fSkpO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBSQUw7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQxODpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5TZW1hcGhvcmUgPSB2b2lkIDA7XG5jb25zdCByYWxfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNTA5MSk7XG5jbGFzcyBTZW1hcGhvcmUge1xuICAgIGNvbnN0cnVjdG9yKGNhcGFjaXR5ID0gMSkge1xuICAgICAgICBpZiAoY2FwYWNpdHkgPD0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYXBhY2l0eSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gMDtcbiAgICAgICAgdGhpcy5fd2FpdGluZyA9IFtdO1xuICAgIH1cbiAgICBsb2NrKHRodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl93YWl0aW5nLnB1c2goeyB0aHVuaywgcmVzb2x2ZSwgcmVqZWN0IH0pO1xuICAgICAgICAgICAgdGhpcy5ydW5OZXh0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQgYWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICAgIH1cbiAgICBydW5OZXh0KCkge1xuICAgICAgICBpZiAodGhpcy5fd2FpdGluZy5sZW5ndGggPT09IDAgfHwgdGhpcy5fYWN0aXZlID09PSB0aGlzLl9jYXBhY2l0eSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgICgwLCByYWxfMS5kZWZhdWx0KSgpLnRpbWVyLnNldEltbWVkaWF0ZSgoKSA9PiB0aGlzLmRvUnVuTmV4dCgpKTtcbiAgICB9XG4gICAgZG9SdW5OZXh0KCkge1xuICAgICAgICBpZiAodGhpcy5fd2FpdGluZy5sZW5ndGggPT09IDAgfHwgdGhpcy5fYWN0aXZlID09PSB0aGlzLl9jYXBhY2l0eSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLl93YWl0aW5nLnNoaWZ0KCk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSsrO1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlID4gdGhpcy5fY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVG8gbWFueSB0aHVua3MgYWN0aXZlYCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IG5leHQudGh1bmsoKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZS0tO1xuICAgICAgICAgICAgICAgICAgICBuZXh0LnJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bk5leHQoKTtcbiAgICAgICAgICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZS0tO1xuICAgICAgICAgICAgICAgICAgICBuZXh0LnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJ1bk5leHQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZS0tO1xuICAgICAgICAgICAgICAgIG5leHQucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIHRoaXMucnVuTmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZS0tO1xuICAgICAgICAgICAgbmV4dC5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgIHRoaXMucnVuTmV4dCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5TZW1hcGhvcmUgPSBTZW1hcGhvcmU7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDM0ODk6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuU2hhcmVkQXJyYXlSZWNlaXZlclN0cmF0ZWd5ID0gZXhwb3J0cy5TaGFyZWRBcnJheVNlbmRlclN0cmF0ZWd5ID0gdm9pZCAwO1xuY29uc3QgY2FuY2VsbGF0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5NTcpO1xudmFyIENhbmNlbGxhdGlvblN0YXRlO1xuKGZ1bmN0aW9uIChDYW5jZWxsYXRpb25TdGF0ZSkge1xuICAgIENhbmNlbGxhdGlvblN0YXRlLkNvbnRpbnVlID0gMDtcbiAgICBDYW5jZWxsYXRpb25TdGF0ZS5DYW5jZWxsZWQgPSAxO1xufSkoQ2FuY2VsbGF0aW9uU3RhdGUgfHwgKENhbmNlbGxhdGlvblN0YXRlID0ge30pKTtcbmNsYXNzIFNoYXJlZEFycmF5U2VuZGVyU3RyYXRlZ3kge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGVuYWJsZUNhbmNlbGxhdGlvbihyZXF1ZXN0KSB7XG4gICAgICAgIGlmIChyZXF1ZXN0LmlkID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFNoYXJlZEFycmF5QnVmZmVyKDQpO1xuICAgICAgICBjb25zdCBkYXRhID0gbmV3IEludDMyQXJyYXkoYnVmZmVyLCAwLCAxKTtcbiAgICAgICAgZGF0YVswXSA9IENhbmNlbGxhdGlvblN0YXRlLkNvbnRpbnVlO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMuc2V0KHJlcXVlc3QuaWQsIGJ1ZmZlcik7XG4gICAgICAgIHJlcXVlc3QuJGNhbmNlbGxhdGlvbkRhdGEgPSBidWZmZXI7XG4gICAgfVxuICAgIGFzeW5jIHNlbmRDYW5jZWxsYXRpb24oX2Nvbm4sIGlkKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuYnVmZmVycy5nZXQoaWQpO1xuICAgICAgICBpZiAoYnVmZmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gbmV3IEludDMyQXJyYXkoYnVmZmVyLCAwLCAxKTtcbiAgICAgICAgQXRvbWljcy5zdG9yZShkYXRhLCAwLCBDYW5jZWxsYXRpb25TdGF0ZS5DYW5jZWxsZWQpO1xuICAgIH1cbiAgICBjbGVhbnVwKGlkKSB7XG4gICAgICAgIHRoaXMuYnVmZmVycy5kZWxldGUoaWQpO1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmJ1ZmZlcnMuY2xlYXIoKTtcbiAgICB9XG59XG5leHBvcnRzLlNoYXJlZEFycmF5U2VuZGVyU3RyYXRlZ3kgPSBTaGFyZWRBcnJheVNlbmRlclN0cmF0ZWd5O1xuY2xhc3MgU2hhcmVkQXJyYXlCdWZmZXJDYW5jZWxsYXRpb25Ub2tlbiB7XG4gICAgY29uc3RydWN0b3IoYnVmZmVyKSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IG5ldyBJbnQzMkFycmF5KGJ1ZmZlciwgMCwgMSk7XG4gICAgfVxuICAgIGdldCBpc0NhbmNlbGxhdGlvblJlcXVlc3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIEF0b21pY3MubG9hZCh0aGlzLmRhdGEsIDApID09PSBDYW5jZWxsYXRpb25TdGF0ZS5DYW5jZWxsZWQ7XG4gICAgfVxuICAgIGdldCBvbkNhbmNlbGxhdGlvblJlcXVlc3RlZCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5jZWxsYXRpb24gb3ZlciBTaGFyZWRBcnJheUJ1ZmZlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsbGF0aW9uIGV2ZW50c2ApO1xuICAgIH1cbn1cbmNsYXNzIFNoYXJlZEFycmF5QnVmZmVyQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKGJ1ZmZlcikge1xuICAgICAgICB0aGlzLnRva2VuID0gbmV3IFNoYXJlZEFycmF5QnVmZmVyQ2FuY2VsbGF0aW9uVG9rZW4oYnVmZmVyKTtcbiAgICB9XG4gICAgY2FuY2VsKCkge1xuICAgIH1cbiAgICBkaXNwb3NlKCkge1xuICAgIH1cbn1cbmNsYXNzIFNoYXJlZEFycmF5UmVjZWl2ZXJTdHJhdGVneSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMua2luZCA9ICdyZXF1ZXN0JztcbiAgICB9XG4gICAgY3JlYXRlQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UocmVxdWVzdCkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSByZXF1ZXN0LiRjYW5jZWxsYXRpb25EYXRhO1xuICAgICAgICBpZiAoYnVmZmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgY2FuY2VsbGF0aW9uXzEuQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFNoYXJlZEFycmF5QnVmZmVyQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UoYnVmZmVyKTtcbiAgICB9XG59XG5leHBvcnRzLlNoYXJlZEFycmF5UmVjZWl2ZXJTdHJhdGVneSA9IFNoYXJlZEFycmF5UmVjZWl2ZXJTdHJhdGVneTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTUwMTpcbi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuY3JlYXRlUHJvdG9jb2xDb25uZWN0aW9uID0gdm9pZCAwO1xuY29uc3QgYnJvd3Nlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MjA4KTtcbl9fZXhwb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDkyMDgpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDMxNDcpLCBleHBvcnRzKTtcbmZ1bmN0aW9uIGNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbihyZWFkZXIsIHdyaXRlciwgbG9nZ2VyLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuICgwLCBicm93c2VyXzEuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24pKHJlYWRlciwgd3JpdGVyLCBsb2dnZXIsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5jcmVhdGVQcm90b2NvbENvbm5lY3Rpb24gPSBjcmVhdGVQcm90b2NvbENvbm5lY3Rpb247XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDMxNDc6XG4vKioqLyAoZnVuY3Rpb24oX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkxTUEVycm9yQ29kZXMgPSBleHBvcnRzLmNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbiA9IHZvaWQgMDtcbl9fZXhwb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDkxMTApLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDc3MTcpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihfX3dlYnBhY2tfcmVxdWlyZV9fKDE4MTUpLCBleHBvcnRzKTtcbnZhciBjb25uZWN0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5MSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVQcm90b2NvbENvbm5lY3Rpb25cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25uZWN0aW9uXzEuY3JlYXRlUHJvdG9jb2xDb25uZWN0aW9uOyB9IH0pKTtcbnZhciBMU1BFcnJvckNvZGVzO1xuKGZ1bmN0aW9uIChMU1BFcnJvckNvZGVzKSB7XG4gICAgLyoqXG4gICAgKiBUaGlzIGlzIHRoZSBzdGFydCByYW5nZSBvZiBMU1AgcmVzZXJ2ZWQgZXJyb3IgY29kZXMuXG4gICAgKiBJdCBkb2Vzbid0IGRlbm90ZSBhIHJlYWwgZXJyb3IgY29kZS5cbiAgICAqXG4gICAgKiBAc2luY2UgMy4xNi4wXG4gICAgKi9cbiAgICBMU1BFcnJvckNvZGVzLmxzcFJlc2VydmVkRXJyb3JSYW5nZVN0YXJ0ID0gLTMyODk5O1xuICAgIC8qKlxuICAgICAqIEEgcmVxdWVzdCBmYWlsZWQgYnV0IGl0IHdhcyBzeW50YWN0aWNhbGx5IGNvcnJlY3QsIGUuZyB0aGVcbiAgICAgKiBtZXRob2QgbmFtZSB3YXMga25vd24gYW5kIHRoZSBwYXJhbWV0ZXJzIHdlcmUgdmFsaWQuIFRoZSBlcnJvclxuICAgICAqIG1lc3NhZ2Ugc2hvdWxkIGNvbnRhaW4gaHVtYW4gcmVhZGFibGUgaW5mb3JtYXRpb24gYWJvdXQgd2h5XG4gICAgICogdGhlIHJlcXVlc3QgZmFpbGVkLlxuICAgICAqXG4gICAgICogQHNpbmNlIDMuMTcuMFxuICAgICAqL1xuICAgIExTUEVycm9yQ29kZXMuUmVxdWVzdEZhaWxlZCA9IC0zMjgwMztcbiAgICAvKipcbiAgICAgKiBUaGUgc2VydmVyIGNhbmNlbGxlZCB0aGUgcmVxdWVzdC4gVGhpcyBlcnJvciBjb2RlIHNob3VsZFxuICAgICAqIG9ubHkgYmUgdXNlZCBmb3IgcmVxdWVzdHMgdGhhdCBleHBsaWNpdGx5IHN1cHBvcnQgYmVpbmdcbiAgICAgKiBzZXJ2ZXIgY2FuY2VsbGFibGUuXG4gICAgICpcbiAgICAgKiBAc2luY2UgMy4xNy4wXG4gICAgICovXG4gICAgTFNQRXJyb3JDb2Rlcy5TZXJ2ZXJDYW5jZWxsZWQgPSAtMzI4MDI7XG4gICAgLyoqXG4gICAgICogVGhlIHNlcnZlciBkZXRlY3RlZCB0aGF0IHRoZSBjb250ZW50IG9mIGEgZG9jdW1lbnQgZ290XG4gICAgICogbW9kaWZpZWQgb3V0c2lkZSBub3JtYWwgY29uZGl0aW9ucy4gQSBzZXJ2ZXIgc2hvdWxkXG4gICAgICogTk9UIHNlbmQgdGhpcyBlcnJvciBjb2RlIGlmIGl0IGRldGVjdHMgYSBjb250ZW50IGNoYW5nZVxuICAgICAqIGluIGl0IHVucHJvY2Vzc2VkIG1lc3NhZ2VzLiBUaGUgcmVzdWx0IGV2ZW4gY29tcHV0ZWRcbiAgICAgKiBvbiBhbiBvbGRlciBzdGF0ZSBtaWdodCBzdGlsbCBiZSB1c2VmdWwgZm9yIHRoZSBjbGllbnQuXG4gICAgICpcbiAgICAgKiBJZiBhIGNsaWVudCBkZWNpZGVzIHRoYXQgYSByZXN1bHQgaXMgbm90IG9mIGFueSB1c2UgYW55bW9yZVxuICAgICAqIHRoZSBjbGllbnQgc2hvdWxkIGNhbmNlbCB0aGUgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBMU1BFcnJvckNvZGVzLkNvbnRlbnRNb2RpZmllZCA9IC0zMjgwMTtcbiAgICAvKipcbiAgICAgKiBUaGUgY2xpZW50IGhhcyBjYW5jZWxlZCBhIHJlcXVlc3QgYW5kIGEgc2VydmVyIGFzIGRldGVjdGVkXG4gICAgICogdGhlIGNhbmNlbC5cbiAgICAgKi9cbiAgICBMU1BFcnJvckNvZGVzLlJlcXVlc3RDYW5jZWxsZWQgPSAtMzI4MDA7XG4gICAgLyoqXG4gICAgKiBUaGlzIGlzIHRoZSBlbmQgcmFuZ2Ugb2YgTFNQIHJlc2VydmVkIGVycm9yIGNvZGVzLlxuICAgICogSXQgZG9lc24ndCBkZW5vdGUgYSByZWFsIGVycm9yIGNvZGUuXG4gICAgKlxuICAgICogQHNpbmNlIDMuMTYuMFxuICAgICovXG4gICAgTFNQRXJyb3JDb2Rlcy5sc3BSZXNlcnZlZEVycm9yUmFuZ2VFbmQgPSAtMzI4MDA7XG59KShMU1BFcnJvckNvZGVzID0gZXhwb3J0cy5MU1BFcnJvckNvZGVzIHx8IChleHBvcnRzLkxTUEVycm9yQ29kZXMgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyOTE6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuY3JlYXRlUHJvdG9jb2xDb25uZWN0aW9uID0gdm9pZCAwO1xuY29uc3QgdnNjb2RlX2pzb25ycGNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTExMCk7XG5mdW5jdGlvbiBjcmVhdGVQcm90b2NvbENvbm5lY3Rpb24oaW5wdXQsIG91dHB1dCwgbG9nZ2VyLCBvcHRpb25zKSB7XG4gICAgaWYgKHZzY29kZV9qc29ucnBjXzEuQ29ubmVjdGlvblN0cmF0ZWd5LmlzKG9wdGlvbnMpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7IGNvbm5lY3Rpb25TdHJhdGVneTogb3B0aW9ucyB9O1xuICAgIH1cbiAgICByZXR1cm4gKDAsIHZzY29kZV9qc29ucnBjXzEuY3JlYXRlTWVzc2FnZUNvbm5lY3Rpb24pKGlucHV0LCBvdXRwdXQsIGxvZ2dlciwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbiA9IGNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODQzMTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUgPSBleHBvcnRzLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZTAgPSBleHBvcnRzLlByb3RvY29sUmVxdWVzdFR5cGUgPSBleHBvcnRzLlByb3RvY29sUmVxdWVzdFR5cGUwID0gZXhwb3J0cy5SZWdpc3RyYXRpb25UeXBlID0gZXhwb3J0cy5NZXNzYWdlRGlyZWN0aW9uID0gdm9pZCAwO1xuY29uc3QgdnNjb2RlX2pzb25ycGNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTExMCk7XG52YXIgTWVzc2FnZURpcmVjdGlvbjtcbihmdW5jdGlvbiAoTWVzc2FnZURpcmVjdGlvbikge1xuICAgIE1lc3NhZ2VEaXJlY3Rpb25bXCJjbGllbnRUb1NlcnZlclwiXSA9IFwiY2xpZW50VG9TZXJ2ZXJcIjtcbiAgICBNZXNzYWdlRGlyZWN0aW9uW1wic2VydmVyVG9DbGllbnRcIl0gPSBcInNlcnZlclRvQ2xpZW50XCI7XG4gICAgTWVzc2FnZURpcmVjdGlvbltcImJvdGhcIl0gPSBcImJvdGhcIjtcbn0pKE1lc3NhZ2VEaXJlY3Rpb24gPSBleHBvcnRzLk1lc3NhZ2VEaXJlY3Rpb24gfHwgKGV4cG9ydHMuTWVzc2FnZURpcmVjdGlvbiA9IHt9KSk7XG5jbGFzcyBSZWdpc3RyYXRpb25UeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XG4gICAgfVxufVxuZXhwb3J0cy5SZWdpc3RyYXRpb25UeXBlID0gUmVnaXN0cmF0aW9uVHlwZTtcbmNsYXNzIFByb3RvY29sUmVxdWVzdFR5cGUwIGV4dGVuZHMgdnNjb2RlX2pzb25ycGNfMS5SZXF1ZXN0VHlwZTAge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QpO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvdG9jb2xSZXF1ZXN0VHlwZTAgPSBQcm90b2NvbFJlcXVlc3RUeXBlMDtcbmNsYXNzIFByb3RvY29sUmVxdWVzdFR5cGUgZXh0ZW5kcyB2c2NvZGVfanNvbnJwY18xLlJlcXVlc3RUeXBlIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRob2QpIHtcbiAgICAgICAgc3VwZXIobWV0aG9kLCB2c2NvZGVfanNvbnJwY18xLlBhcmFtZXRlclN0cnVjdHVyZXMuYnlOYW1lKTtcbiAgICB9XG59XG5leHBvcnRzLlByb3RvY29sUmVxdWVzdFR5cGUgPSBQcm90b2NvbFJlcXVlc3RUeXBlO1xuY2xhc3MgUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlMCBleHRlbmRzIHZzY29kZV9qc29ucnBjXzEuTm90aWZpY2F0aW9uVHlwZTAge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QpO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlMCA9IFByb3RvY29sTm90aWZpY2F0aW9uVHlwZTA7XG5jbGFzcyBQcm90b2NvbE5vdGlmaWNhdGlvblR5cGUgZXh0ZW5kcyB2c2NvZGVfanNvbnJwY18xLk5vdGlmaWNhdGlvblR5cGUge1xuICAgIGNvbnN0cnVjdG9yKG1ldGhvZCkge1xuICAgICAgICBzdXBlcihtZXRob2QsIHZzY29kZV9qc29ucnBjXzEuUGFyYW1ldGVyU3RydWN0dXJlcy5ieU5hbWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlID0gUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA3NjAyOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgVHlwZUZveCwgTWljcm9zb2Z0IGFuZCBvdGhlcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuQ2FsbEhpZXJhcmNoeU91dGdvaW5nQ2FsbHNSZXF1ZXN0ID0gZXhwb3J0cy5DYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3QgPSBleHBvcnRzLkNhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzdWx0IGEgYENhbGxIaWVyYXJjaHlJdGVtYCBpbiBhIGRvY3VtZW50IGF0IGEgZ2l2ZW4gcG9zaXRpb24uXG4gKiBDYW4gYmUgdXNlZCBhcyBhbiBpbnB1dCB0byBhbiBpbmNvbWluZyBvciBvdXRnb2luZyBjYWxsIGhpZXJhcmNoeS5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKENhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCkge1xuICAgIENhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3ByZXBhcmVDYWxsSGllcmFyY2h5JztcbiAgICBDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ2FsbEhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgPSBleHBvcnRzLkNhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCB8fCAoZXhwb3J0cy5DYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSB0aGUgaW5jb21pbmcgY2FsbHMgZm9yIGEgZ2l2ZW4gYENhbGxIaWVyYXJjaHlJdGVtYC5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBDYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3Q7XG4oZnVuY3Rpb24gKENhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdCkge1xuICAgIENhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdC5tZXRob2QgPSAnY2FsbEhpZXJhcmNoeS9pbmNvbWluZ0NhbGxzJztcbiAgICBDYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ2FsbEhpZXJhcmNoeUluY29taW5nQ2FsbHNSZXF1ZXN0Lm1ldGhvZCk7XG59KShDYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3QgPSBleHBvcnRzLkNhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdCB8fCAoZXhwb3J0cy5DYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSB0aGUgb3V0Z29pbmcgY2FsbHMgZm9yIGEgZ2l2ZW4gYENhbGxIaWVyYXJjaHlJdGVtYC5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBDYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3Q7XG4oZnVuY3Rpb24gKENhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdCkge1xuICAgIENhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdC5tZXRob2QgPSAnY2FsbEhpZXJhcmNoeS9vdXRnb2luZ0NhbGxzJztcbiAgICBDYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ2FsbEhpZXJhcmNoeU91dGdvaW5nQ2FsbHNSZXF1ZXN0Lm1ldGhvZCk7XG59KShDYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3QgPSBleHBvcnRzLkNhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdCB8fCAoZXhwb3J0cy5DYWxsSGllcmFyY2h5T3V0Z29pbmdDYWxsc1JlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNzQ3OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkNvbG9yUHJlc2VudGF0aW9uUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRDb2xvclJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIGxpc3QgYWxsIGNvbG9yIHN5bWJvbHMgZm91bmQgaW4gYSBnaXZlbiB0ZXh0IGRvY3VtZW50LiBUaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgRG9jdW1lbnRDb2xvclBhcmFtc30gdGhlXG4gKiByZXNwb25zZSBpcyBvZiB0eXBlIHtAbGluayBDb2xvckluZm9ybWF0aW9uIENvbG9ySW5mb3JtYXRpb25bXX0gb3IgYSBUaGVuYWJsZVxuICogdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgRG9jdW1lbnRDb2xvclJlcXVlc3Q7XG4oZnVuY3Rpb24gKERvY3VtZW50Q29sb3JSZXF1ZXN0KSB7XG4gICAgRG9jdW1lbnRDb2xvclJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9kb2N1bWVudENvbG9yJztcbiAgICBEb2N1bWVudENvbG9yUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERvY3VtZW50Q29sb3JSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50Q29sb3JSZXF1ZXN0Lm1ldGhvZCk7XG59KShEb2N1bWVudENvbG9yUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRDb2xvclJlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRDb2xvclJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gbGlzdCBhbGwgcHJlc2VudGF0aW9uIGZvciBhIGNvbG9yLiBUaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgQ29sb3JQcmVzZW50YXRpb25QYXJhbXN9IHRoZVxuICogcmVzcG9uc2UgaXMgb2YgdHlwZSB7QGxpbmsgQ29sb3JJbmZvcm1hdGlvbiBDb2xvckluZm9ybWF0aW9uW119IG9yIGEgVGhlbmFibGVcbiAqIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIENvbG9yUHJlc2VudGF0aW9uUmVxdWVzdDtcbihmdW5jdGlvbiAoQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0KSB7XG4gICAgQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvY29sb3JQcmVzZW50YXRpb24nO1xuICAgIENvbG9yUHJlc2VudGF0aW9uUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIENvbG9yUHJlc2VudGF0aW9uUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShDb2xvclByZXNlbnRhdGlvblJlcXVlc3QubWV0aG9kKTtcbn0pKENvbG9yUHJlc2VudGF0aW9uUmVxdWVzdCA9IGV4cG9ydHMuQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLkNvbG9yUHJlc2VudGF0aW9uUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDc2Mzk6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuQ29uZmlndXJhdGlvblJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8vLS0tLSBHZXQgQ29uZmlndXJhdGlvbiByZXF1ZXN0IC0tLS1cbi8qKlxuICogVGhlICd3b3Jrc3BhY2UvY29uZmlndXJhdGlvbicgcmVxdWVzdCBpcyBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IHRvIGZldGNoIGEgY2VydGFpblxuICogY29uZmlndXJhdGlvbiBzZXR0aW5nLlxuICpcbiAqIFRoaXMgcHVsbCBtb2RlbCByZXBsYWNlcyB0aGUgb2xkIHB1c2ggbW9kZWwgd2VyZSB0aGUgY2xpZW50IHNpZ25hbGVkIGNvbmZpZ3VyYXRpb24gY2hhbmdlIHZpYSBhblxuICogZXZlbnQuIElmIHRoZSBzZXJ2ZXIgc3RpbGwgbmVlZHMgdG8gcmVhY3QgdG8gY29uZmlndXJhdGlvbiBjaGFuZ2VzIChzaW5jZSB0aGUgc2VydmVyIGNhY2hlcyB0aGVcbiAqIHJlc3VsdCBvZiBgd29ya3NwYWNlL2NvbmZpZ3VyYXRpb25gIHJlcXVlc3RzKSB0aGUgc2VydmVyIHNob3VsZCByZWdpc3RlciBmb3IgYW4gZW1wdHkgY29uZmlndXJhdGlvblxuICogY2hhbmdlIGV2ZW50IGFuZCBlbXB0eSB0aGUgY2FjaGUgaWYgc3VjaCBhbiBldmVudCBpcyByZWNlaXZlZC5cbiAqL1xudmFyIENvbmZpZ3VyYXRpb25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChDb25maWd1cmF0aW9uUmVxdWVzdCkge1xuICAgIENvbmZpZ3VyYXRpb25SZXF1ZXN0Lm1ldGhvZCA9ICd3b3Jrc3BhY2UvY29uZmlndXJhdGlvbic7XG4gICAgQ29uZmlndXJhdGlvblJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBDb25maWd1cmF0aW9uUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShDb25maWd1cmF0aW9uUmVxdWVzdC5tZXRob2QpO1xufSkoQ29uZmlndXJhdGlvblJlcXVlc3QgPSBleHBvcnRzLkNvbmZpZ3VyYXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLkNvbmZpZ3VyYXRpb25SZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNTU4MTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5EZWNsYXJhdGlvblJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8vIEB0cy1pZ25vcmU6IHRvIGF2b2lkIGlubGluaW5nIExvY2F0aW9uTGluayBhcyBkeW5hbWljIGltcG9ydFxubGV0IF9fbm9EeW5hbWljSW1wb3J0O1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSB0aGUgdHlwZSBkZWZpbml0aW9uIGxvY2F0aW9ucyBvZiBhIHN5bWJvbCBhdCBhIGdpdmVuIHRleHRcbiAqIGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZiB0eXBlIFtUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtc11cbiAqICgjVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMpIHRoZSByZXNwb25zZSBpcyBvZiB0eXBlIHtAbGluayBEZWNsYXJhdGlvbn1cbiAqIG9yIGEgdHlwZWQgYXJyYXkgb2Yge0BsaW5rIERlY2xhcmF0aW9uTGlua30gb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzXG4gKiB0byBzdWNoLlxuICovXG52YXIgRGVjbGFyYXRpb25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChEZWNsYXJhdGlvblJlcXVlc3QpIHtcbiAgICBEZWNsYXJhdGlvblJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9kZWNsYXJhdGlvbic7XG4gICAgRGVjbGFyYXRpb25SZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGVjbGFyYXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERlY2xhcmF0aW9uUmVxdWVzdC5tZXRob2QpO1xufSkoRGVjbGFyYXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5EZWNsYXJhdGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuRGVjbGFyYXRpb25SZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTQ5NDpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5EaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLldvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudERpYWdub3N0aWNSZXBvcnRLaW5kID0gZXhwb3J0cy5EaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YSA9IHZvaWQgMDtcbmNvbnN0IHZzY29kZV9qc29ucnBjXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxMTApO1xuY29uc3QgSXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2MzMpO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIERpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhO1xuKGZ1bmN0aW9uIChEaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YSkge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLmJvb2xlYW4oY2FuZGlkYXRlLnJldHJpZ2dlclJlcXVlc3QpO1xuICAgIH1cbiAgICBEaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YS5pcyA9IGlzO1xufSkoRGlhZ25vc3RpY1NlcnZlckNhbmNlbGxhdGlvbkRhdGEgPSBleHBvcnRzLkRpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhIHx8IChleHBvcnRzLkRpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhID0ge30pKTtcbi8qKlxuICogVGhlIGRvY3VtZW50IGRpYWdub3N0aWMgcmVwb3J0IGtpbmRzLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIERvY3VtZW50RGlhZ25vc3RpY1JlcG9ydEtpbmQ7XG4oZnVuY3Rpb24gKERvY3VtZW50RGlhZ25vc3RpY1JlcG9ydEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBBIGRpYWdub3N0aWMgcmVwb3J0IHdpdGggYSBmdWxsXG4gICAgICogc2V0IG9mIHByb2JsZW1zLlxuICAgICAqL1xuICAgIERvY3VtZW50RGlhZ25vc3RpY1JlcG9ydEtpbmQuRnVsbCA9ICdmdWxsJztcbiAgICAvKipcbiAgICAgKiBBIHJlcG9ydCBpbmRpY2F0aW5nIHRoYXQgdGhlIGxhc3RcbiAgICAgKiByZXR1cm5lZCByZXBvcnQgaXMgc3RpbGwgYWNjdXJhdGUuXG4gICAgICovXG4gICAgRG9jdW1lbnREaWFnbm9zdGljUmVwb3J0S2luZC5VbmNoYW5nZWQgPSAndW5jaGFuZ2VkJztcbn0pKERvY3VtZW50RGlhZ25vc3RpY1JlcG9ydEtpbmQgPSBleHBvcnRzLkRvY3VtZW50RGlhZ25vc3RpY1JlcG9ydEtpbmQgfHwgKGV4cG9ydHMuRG9jdW1lbnREaWFnbm9zdGljUmVwb3J0S2luZCA9IHt9KSk7XG4vKipcbiAqIFRoZSBkb2N1bWVudCBkaWFnbm9zdGljIHJlcXVlc3QgZGVmaW5pdGlvbi5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0KSB7XG4gICAgRG9jdW1lbnREaWFnbm9zdGljUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2RpYWdub3N0aWMnO1xuICAgIERvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3QubWV0aG9kKTtcbiAgICBEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0LnBhcnRpYWxSZXN1bHQgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5Qcm9ncmVzc1R5cGUoKTtcbn0pKERvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnREaWFnbm9zdGljUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFRoZSB3b3Jrc3BhY2UgZGlhZ25vc3RpYyByZXF1ZXN0IGRlZmluaXRpb24uXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3Q7XG4oZnVuY3Rpb24gKFdvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0KSB7XG4gICAgV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3QubWV0aG9kID0gJ3dvcmtzcGFjZS9kaWFnbm9zdGljJztcbiAgICBXb3Jrc3BhY2VEaWFnbm9zdGljUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFdvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFdvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0Lm1ldGhvZCk7XG4gICAgV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3QucGFydGlhbFJlc3VsdCA9IG5ldyB2c2NvZGVfanNvbnJwY18xLlByb2dyZXNzVHlwZSgpO1xufSkoV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3QgPSBleHBvcnRzLldvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0IHx8IChleHBvcnRzLldvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogVGhlIGRpYWdub3N0aWMgcmVmcmVzaCByZXF1ZXN0IGRlZmluaXRpb24uXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgRGlhZ25vc3RpY1JlZnJlc2hSZXF1ZXN0O1xuKGZ1bmN0aW9uIChEaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QpIHtcbiAgICBEaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QubWV0aG9kID0gYHdvcmtzcGFjZS9kaWFnbm9zdGljL3JlZnJlc2hgO1xuICAgIERpYWdub3N0aWNSZWZyZXNoUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIERpYWdub3N0aWNSZWZyZXNoUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZTAoRGlhZ25vc3RpY1JlZnJlc2hSZXF1ZXN0Lm1ldGhvZCk7XG59KShEaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLkRpYWdub3N0aWNSZWZyZXNoUmVxdWVzdCB8fCAoZXhwb3J0cy5EaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0NzgxOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLldpbGxEZWxldGVGaWxlc1JlcXVlc3QgPSBleHBvcnRzLkRpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV2lsbFJlbmFtZUZpbGVzUmVxdWVzdCA9IGV4cG9ydHMuRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb24gPSBleHBvcnRzLldpbGxDcmVhdGVGaWxlc1JlcXVlc3QgPSBleHBvcnRzLkZpbGVPcGVyYXRpb25QYXR0ZXJuS2luZCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBBIHBhdHRlcm4ga2luZCBkZXNjcmliaW5nIGlmIGEgZ2xvYiBwYXR0ZXJuIG1hdGNoZXMgYSBmaWxlIGEgZm9sZGVyIG9yXG4gKiBib3RoLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIEZpbGVPcGVyYXRpb25QYXR0ZXJuS2luZDtcbihmdW5jdGlvbiAoRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHBhdHRlcm4gbWF0Y2hlcyBhIGZpbGUgb25seS5cbiAgICAgKi9cbiAgICBGaWxlT3BlcmF0aW9uUGF0dGVybktpbmQuZmlsZSA9ICdmaWxlJztcbiAgICAvKipcbiAgICAgKiBUaGUgcGF0dGVybiBtYXRjaGVzIGEgZm9sZGVyIG9ubHkuXG4gICAgICovXG4gICAgRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kLmZvbGRlciA9ICdmb2xkZXInO1xufSkoRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kID0gZXhwb3J0cy5GaWxlT3BlcmF0aW9uUGF0dGVybktpbmQgfHwgKGV4cG9ydHMuRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kID0ge30pKTtcbi8qKlxuICogVGhlIHdpbGwgY3JlYXRlIGZpbGVzIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciBiZWZvcmUgZmlsZXMgYXJlIGFjdHVhbGx5XG4gKiBjcmVhdGVkIGFzIGxvbmcgYXMgdGhlIGNyZWF0aW9uIGlzIHRyaWdnZXJlZCBmcm9tIHdpdGhpbiB0aGUgY2xpZW50LlxuICpcbiAqIFRoZSByZXF1ZXN0IGNhbiByZXR1cm4gYSBgV29ya3NwYWNlRWRpdGAgd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHdvcmtzcGFjZSBiZWZvcmUgdGhlXG4gKiBmaWxlcyBhcmUgY3JlYXRlZC4gSGVuY2UgdGhlIGBXb3Jrc3BhY2VFZGl0YCBjYW4gbm90IG1hbmlwdWxhdGUgdGhlIGNvbnRlbnQgb2YgdGhlIGZpbGVcbiAqIHRvIGJlIGNyZWF0ZWQuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgV2lsbENyZWF0ZUZpbGVzUmVxdWVzdDtcbihmdW5jdGlvbiAoV2lsbENyZWF0ZUZpbGVzUmVxdWVzdCkge1xuICAgIFdpbGxDcmVhdGVGaWxlc1JlcXVlc3QubWV0aG9kID0gJ3dvcmtzcGFjZS93aWxsQ3JlYXRlRmlsZXMnO1xuICAgIFdpbGxDcmVhdGVGaWxlc1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBXaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFdpbGxDcmVhdGVGaWxlc1JlcXVlc3QubWV0aG9kKTtcbn0pKFdpbGxDcmVhdGVGaWxlc1JlcXVlc3QgPSBleHBvcnRzLldpbGxDcmVhdGVGaWxlc1JlcXVlc3QgfHwgKGV4cG9ydHMuV2lsbENyZWF0ZUZpbGVzUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBkaWQgY3JlYXRlIGZpbGVzIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIHdoZW5cbiAqIGZpbGVzIHdlcmUgY3JlYXRlZCBmcm9tIHdpdGhpbiB0aGUgY2xpZW50LlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIERpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChEaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvbikge1xuICAgIERpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uLm1ldGhvZCA9ICd3b3Jrc3BhY2UvZGlkQ3JlYXRlRmlsZXMnO1xuICAgIERpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIHdpbGwgcmVuYW1lIGZpbGVzIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciBiZWZvcmUgZmlsZXMgYXJlIGFjdHVhbGx5XG4gKiByZW5hbWVkIGFzIGxvbmcgYXMgdGhlIHJlbmFtZSBpcyB0cmlnZ2VyZWQgZnJvbSB3aXRoaW4gdGhlIGNsaWVudC5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0KSB7XG4gICAgV2lsbFJlbmFtZUZpbGVzUmVxdWVzdC5tZXRob2QgPSAnd29ya3NwYWNlL3dpbGxSZW5hbWVGaWxlcyc7XG4gICAgV2lsbFJlbmFtZUZpbGVzUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFdpbGxSZW5hbWVGaWxlc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoV2lsbFJlbmFtZUZpbGVzUmVxdWVzdC5tZXRob2QpO1xufSkoV2lsbFJlbmFtZUZpbGVzUmVxdWVzdCA9IGV4cG9ydHMuV2lsbFJlbmFtZUZpbGVzUmVxdWVzdCB8fCAoZXhwb3J0cy5XaWxsUmVuYW1lRmlsZXNSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogVGhlIGRpZCByZW5hbWUgZmlsZXMgbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgd2hlblxuICogZmlsZXMgd2VyZSByZW5hbWVkIGZyb20gd2l0aGluIHRoZSBjbGllbnQuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uKSB7XG4gICAgRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24ubWV0aG9kID0gJ3dvcmtzcGFjZS9kaWRSZW5hbWVGaWxlcyc7XG4gICAgRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShEaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgd2lsbCBkZWxldGUgZmlsZXMgcmVxdWVzdCBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIGJlZm9yZSBmaWxlcyBhcmUgYWN0dWFsbHlcbiAqIGRlbGV0ZWQgYXMgbG9uZyBhcyB0aGUgZGVsZXRpb24gaXMgdHJpZ2dlcmVkIGZyb20gd2l0aGluIHRoZSBjbGllbnQuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uKSB7XG4gICAgRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb24ubWV0aG9kID0gJ3dvcmtzcGFjZS9kaWREZWxldGVGaWxlcyc7XG4gICAgRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShEaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkRGVsZXRlRmlsZXNOb3RpZmljYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgZGlkIGRlbGV0ZSBmaWxlcyBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB3aGVuXG4gKiBmaWxlcyB3ZXJlIGRlbGV0ZWQgZnJvbSB3aXRoaW4gdGhlIGNsaWVudC5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBXaWxsRGVsZXRlRmlsZXNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChXaWxsRGVsZXRlRmlsZXNSZXF1ZXN0KSB7XG4gICAgV2lsbERlbGV0ZUZpbGVzUmVxdWVzdC5tZXRob2QgPSAnd29ya3NwYWNlL3dpbGxEZWxldGVGaWxlcyc7XG4gICAgV2lsbERlbGV0ZUZpbGVzUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFdpbGxEZWxldGVGaWxlc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoV2lsbERlbGV0ZUZpbGVzUmVxdWVzdC5tZXRob2QpO1xufSkoV2lsbERlbGV0ZUZpbGVzUmVxdWVzdCA9IGV4cG9ydHMuV2lsbERlbGV0ZUZpbGVzUmVxdWVzdCB8fCAoZXhwb3J0cy5XaWxsRGVsZXRlRmlsZXNSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTIwMzpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkZvbGRpbmdSYW5nZVJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHByb3ZpZGUgZm9sZGluZyByYW5nZXMgaW4gYSBkb2N1bWVudC4gVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIEZvbGRpbmdSYW5nZVBhcmFtc30sIHRoZVxuICogcmVzcG9uc2UgaXMgb2YgdHlwZSB7QGxpbmsgRm9sZGluZ1JhbmdlTGlzdH0gb3IgYSBUaGVuYWJsZVxuICogdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgRm9sZGluZ1JhbmdlUmVxdWVzdDtcbihmdW5jdGlvbiAoRm9sZGluZ1JhbmdlUmVxdWVzdCkge1xuICAgIEZvbGRpbmdSYW5nZVJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9mb2xkaW5nUmFuZ2UnO1xuICAgIEZvbGRpbmdSYW5nZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBGb2xkaW5nUmFuZ2VSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKEZvbGRpbmdSYW5nZVJlcXVlc3QubWV0aG9kKTtcbn0pKEZvbGRpbmdSYW5nZVJlcXVlc3QgPSBleHBvcnRzLkZvbGRpbmdSYW5nZVJlcXVlc3QgfHwgKGV4cG9ydHMuRm9sZGluZ1JhbmdlUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDcyODc6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuSW1wbGVtZW50YXRpb25SZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vLyBAdHMtaWdub3JlOiB0byBhdm9pZCBpbmxpbmluZyBMb2NhdGlvbkxpbmsgYXMgZHluYW1pYyBpbXBvcnRcbmxldCBfX25vRHluYW1pY0ltcG9ydDtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIGltcGxlbWVudGF0aW9uIGxvY2F0aW9ucyBvZiBhIHN5bWJvbCBhdCBhIGdpdmVuIHRleHRcbiAqIGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZiB0eXBlIFtUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtc11cbiAqICgjVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMpIHRoZSByZXNwb25zZSBpcyBvZiB0eXBlIHtAbGluayBEZWZpbml0aW9ufSBvciBhXG4gKiBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBJbXBsZW1lbnRhdGlvblJlcXVlc3Q7XG4oZnVuY3Rpb24gKEltcGxlbWVudGF0aW9uUmVxdWVzdCkge1xuICAgIEltcGxlbWVudGF0aW9uUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2ltcGxlbWVudGF0aW9uJztcbiAgICBJbXBsZW1lbnRhdGlvblJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBJbXBsZW1lbnRhdGlvblJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoSW1wbGVtZW50YXRpb25SZXF1ZXN0Lm1ldGhvZCk7XG59KShJbXBsZW1lbnRhdGlvblJlcXVlc3QgPSBleHBvcnRzLkltcGxlbWVudGF0aW9uUmVxdWVzdCB8fCAoZXhwb3J0cy5JbXBsZW1lbnRhdGlvblJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5MzgzOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuSW5sYXlIaW50UmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLklubGF5SGludFJlc29sdmVSZXF1ZXN0ID0gZXhwb3J0cy5JbmxheUhpbnRSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBwcm92aWRlIGlubGF5IGhpbnRzIGluIGEgZG9jdW1lbnQuIFRoZSByZXF1ZXN0J3MgcGFyYW1ldGVyIGlzIG9mXG4gKiB0eXBlIHtAbGluayBJbmxheUhpbnRzUGFyYW1zfSwgdGhlIHJlc3BvbnNlIGlzIG9mIHR5cGVcbiAqIHtAbGluayBJbmxheUhpbnQgSW5sYXlIaW50W119IG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIElubGF5SGludFJlcXVlc3Q7XG4oZnVuY3Rpb24gKElubGF5SGludFJlcXVlc3QpIHtcbiAgICBJbmxheUhpbnRSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvaW5sYXlIaW50JztcbiAgICBJbmxheUhpbnRSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgSW5sYXlIaW50UmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShJbmxheUhpbnRSZXF1ZXN0Lm1ldGhvZCk7XG59KShJbmxheUhpbnRSZXF1ZXN0ID0gZXhwb3J0cy5JbmxheUhpbnRSZXF1ZXN0IHx8IChleHBvcnRzLklubGF5SGludFJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSBhZGRpdGlvbmFsIHByb3BlcnRpZXMgZm9yIGFuIGlubGF5IGhpbnQuXG4gKiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZiB0eXBlIHtAbGluayBJbmxheUhpbnR9LCB0aGUgcmVzcG9uc2UgaXNcbiAqIG9mIHR5cGUge0BsaW5rIElubGF5SGludH0gb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKElubGF5SGludFJlc29sdmVSZXF1ZXN0KSB7XG4gICAgSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QubWV0aG9kID0gJ2lubGF5SGludC9yZXNvbHZlJztcbiAgICBJbmxheUhpbnRSZXNvbHZlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIElubGF5SGludFJlc29sdmVSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKElubGF5SGludFJlc29sdmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShJbmxheUhpbnRSZXNvbHZlUmVxdWVzdCA9IGV4cG9ydHMuSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QgfHwgKGV4cG9ydHMuSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxheUhpbnRSZWZyZXNoUmVxdWVzdDtcbihmdW5jdGlvbiAoSW5sYXlIaW50UmVmcmVzaFJlcXVlc3QpIHtcbiAgICBJbmxheUhpbnRSZWZyZXNoUmVxdWVzdC5tZXRob2QgPSBgd29ya3NwYWNlL2lubGF5SGludC9yZWZyZXNoYDtcbiAgICBJbmxheUhpbnRSZWZyZXNoUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIElubGF5SGludFJlZnJlc2hSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlMChJbmxheUhpbnRSZWZyZXNoUmVxdWVzdC5tZXRob2QpO1xufSkoSW5sYXlIaW50UmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLklubGF5SGludFJlZnJlc2hSZXF1ZXN0IHx8IChleHBvcnRzLklubGF5SGludFJlZnJlc2hSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMzQ5MTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiAgQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLklubGluZVZhbHVlUmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLklubGluZVZhbHVlUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcHJvdmlkZSBpbmxpbmUgdmFsdWVzIGluIGEgZG9jdW1lbnQuIFRoZSByZXF1ZXN0J3MgcGFyYW1ldGVyIGlzIG9mXG4gKiB0eXBlIHtAbGluayBJbmxpbmVWYWx1ZVBhcmFtc30sIHRoZSByZXNwb25zZSBpcyBvZiB0eXBlXG4gKiB7QGxpbmsgSW5saW5lVmFsdWUgSW5saW5lVmFsdWVbXX0gb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgSW5saW5lVmFsdWVSZXF1ZXN0O1xuKGZ1bmN0aW9uIChJbmxpbmVWYWx1ZVJlcXVlc3QpIHtcbiAgICBJbmxpbmVWYWx1ZVJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9pbmxpbmVWYWx1ZSc7XG4gICAgSW5saW5lVmFsdWVSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgSW5saW5lVmFsdWVSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKElubGluZVZhbHVlUmVxdWVzdC5tZXRob2QpO1xufSkoSW5saW5lVmFsdWVSZXF1ZXN0ID0gZXhwb3J0cy5JbmxpbmVWYWx1ZVJlcXVlc3QgfHwgKGV4cG9ydHMuSW5saW5lVmFsdWVSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdDtcbihmdW5jdGlvbiAoSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdCkge1xuICAgIElubGluZVZhbHVlUmVmcmVzaFJlcXVlc3QubWV0aG9kID0gYHdvcmtzcGFjZS9pbmxpbmVWYWx1ZS9yZWZyZXNoYDtcbiAgICBJbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZTAoSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdC5tZXRob2QpO1xufSkoSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdCA9IGV4cG9ydHMuSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdCB8fCAoZXhwb3J0cy5JbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTgxNTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5Xb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0ID0gZXhwb3J0cy5Db2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QgPSBleHBvcnRzLkNvZGVBY3Rpb25SZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudFN5bWJvbFJlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdCA9IGV4cG9ydHMuUmVmZXJlbmNlc1JlcXVlc3QgPSBleHBvcnRzLkRlZmluaXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5TaWduYXR1cmVIZWxwUmVxdWVzdCA9IGV4cG9ydHMuU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kID0gZXhwb3J0cy5Ib3ZlclJlcXVlc3QgPSBleHBvcnRzLkNvbXBsZXRpb25SZXNvbHZlUmVxdWVzdCA9IGV4cG9ydHMuQ29tcGxldGlvblJlcXVlc3QgPSBleHBvcnRzLkNvbXBsZXRpb25UcmlnZ2VyS2luZCA9IGV4cG9ydHMuUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uID0gZXhwb3J0cy5XYXRjaEtpbmQgPSBleHBvcnRzLlJlbGF0aXZlUGF0dGVybiA9IGV4cG9ydHMuRmlsZUNoYW5nZVR5cGUgPSBleHBvcnRzLkRpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV2lsbFNhdmVUZXh0RG9jdW1lbnRXYWl0VW50aWxSZXF1ZXN0ID0gZXhwb3J0cy5XaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuVGV4dERvY3VtZW50U2F2ZVJlYXNvbiA9IGV4cG9ydHMuRGlkU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuVGV4dERvY3VtZW50Q29udGVudENoYW5nZUV2ZW50ID0gZXhwb3J0cy5EaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5UZXh0RG9jdW1lbnRTeW5jS2luZCA9IGV4cG9ydHMuVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkxvZ01lc3NhZ2VOb3RpZmljYXRpb24gPSBleHBvcnRzLlNob3dNZXNzYWdlUmVxdWVzdCA9IGV4cG9ydHMuU2hvd01lc3NhZ2VOb3RpZmljYXRpb24gPSBleHBvcnRzLk1lc3NhZ2VUeXBlID0gZXhwb3J0cy5EaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uID0gZXhwb3J0cy5FeGl0Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5TaHV0ZG93blJlcXVlc3QgPSBleHBvcnRzLkluaXRpYWxpemVkTm90aWZpY2F0aW9uID0gZXhwb3J0cy5Jbml0aWFsaXplRXJyb3JDb2RlcyA9IGV4cG9ydHMuSW5pdGlhbGl6ZVJlcXVlc3QgPSBleHBvcnRzLldvcmtEb25lUHJvZ3Jlc3NPcHRpb25zID0gZXhwb3J0cy5UZXh0RG9jdW1lbnRSZWdpc3RyYXRpb25PcHRpb25zID0gZXhwb3J0cy5TdGF0aWNSZWdpc3RyYXRpb25PcHRpb25zID0gZXhwb3J0cy5Qb3NpdGlvbkVuY29kaW5nS2luZCA9IGV4cG9ydHMuRmFpbHVyZUhhbmRsaW5nS2luZCA9IGV4cG9ydHMuUmVzb3VyY2VPcGVyYXRpb25LaW5kID0gZXhwb3J0cy5VbnJlZ2lzdHJhdGlvblJlcXVlc3QgPSBleHBvcnRzLlJlZ2lzdHJhdGlvblJlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50U2VsZWN0b3IgPSBleHBvcnRzLk5vdGVib29rQ2VsbFRleHREb2N1bWVudEZpbHRlciA9IGV4cG9ydHMuTm90ZWJvb2tEb2N1bWVudEZpbHRlciA9IGV4cG9ydHMuVGV4dERvY3VtZW50RmlsdGVyID0gdm9pZCAwO1xuZXhwb3J0cy5UeXBlSGllcmFyY2h5U3VidHlwZXNSZXF1ZXN0ID0gZXhwb3J0cy5UeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgPSBleHBvcnRzLk1vbmlrZXJSZXF1ZXN0ID0gZXhwb3J0cy5Nb25pa2VyS2luZCA9IGV4cG9ydHMuVW5pcXVlbmVzc0xldmVsID0gZXhwb3J0cy5XaWxsRGVsZXRlRmlsZXNSZXF1ZXN0ID0gZXhwb3J0cy5EaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV2lsbFJlbmFtZUZpbGVzUmVxdWVzdCA9IGV4cG9ydHMuRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24gPSBleHBvcnRzLldpbGxDcmVhdGVGaWxlc1JlcXVlc3QgPSBleHBvcnRzLkRpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uID0gZXhwb3J0cy5GaWxlT3BlcmF0aW9uUGF0dGVybktpbmQgPSBleHBvcnRzLkxpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3QgPSBleHBvcnRzLlNob3dEb2N1bWVudFJlcXVlc3QgPSBleHBvcnRzLlNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZSA9IGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdCA9IGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QgPSBleHBvcnRzLlNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0ID0gZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc1JlcXVlc3QgPSBleHBvcnRzLlRva2VuRm9ybWF0ID0gZXhwb3J0cy5DYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgPSBleHBvcnRzLkNhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdCA9IGV4cG9ydHMuQ2FsbEhpZXJhcmNoeUluY29taW5nQ2FsbHNSZXF1ZXN0ID0gZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uID0gZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdCA9IGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzcyA9IGV4cG9ydHMuU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0ID0gZXhwb3J0cy5EZWNsYXJhdGlvblJlcXVlc3QgPSBleHBvcnRzLkZvbGRpbmdSYW5nZVJlcXVlc3QgPSBleHBvcnRzLkNvbG9yUHJlc2VudGF0aW9uUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRDb2xvclJlcXVlc3QgPSBleHBvcnRzLkNvbmZpZ3VyYXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5EaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uID0gZXhwb3J0cy5Xb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdCA9IGV4cG9ydHMuVHlwZURlZmluaXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5JbXBsZW1lbnRhdGlvblJlcXVlc3QgPSBleHBvcnRzLkFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QgPSBleHBvcnRzLkV4ZWN1dGVDb21tYW5kUmVxdWVzdCA9IGV4cG9ydHMuUHJlcGFyZVJlbmFtZVJlcXVlc3QgPSBleHBvcnRzLlJlbmFtZVJlcXVlc3QgPSBleHBvcnRzLlByZXBhcmVTdXBwb3J0RGVmYXVsdEJlaGF2aW9yID0gZXhwb3J0cy5Eb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudFJhbmdlRm9ybWF0dGluZ1JlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudExpbmtSZXF1ZXN0ID0gZXhwb3J0cy5Db2RlTGVuc1JlZnJlc2hSZXF1ZXN0ID0gZXhwb3J0cy5Db2RlTGVuc1Jlc29sdmVSZXF1ZXN0ID0gZXhwb3J0cy5Db2RlTGVuc1JlcXVlc3QgPSBleHBvcnRzLldvcmtzcGFjZVN5bWJvbFJlc29sdmVSZXF1ZXN0ID0gdm9pZCAwO1xuZXhwb3J0cy5EaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5Ob3RlYm9va0NlbGxBcnJheUNoYW5nZSA9IGV4cG9ydHMuRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLk5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZSA9IGV4cG9ydHMuTm90ZWJvb2tEb2N1bWVudCA9IGV4cG9ydHMuTm90ZWJvb2tDZWxsID0gZXhwb3J0cy5FeGVjdXRpb25TdW1tYXJ5ID0gZXhwb3J0cy5Ob3RlYm9va0NlbGxLaW5kID0gZXhwb3J0cy5EaWFnbm9zdGljUmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLldvcmtzcGFjZURpYWdub3N0aWNSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudERpYWdub3N0aWNSZXBvcnRLaW5kID0gZXhwb3J0cy5EaWFnbm9zdGljU2VydmVyQ2FuY2VsbGF0aW9uRGF0YSA9IGV4cG9ydHMuSW5sYXlIaW50UmVmcmVzaFJlcXVlc3QgPSBleHBvcnRzLklubGF5SGludFJlc29sdmVSZXF1ZXN0ID0gZXhwb3J0cy5JbmxheUhpbnRSZXF1ZXN0ID0gZXhwb3J0cy5JbmxpbmVWYWx1ZVJlZnJlc2hSZXF1ZXN0ID0gZXhwb3J0cy5JbmxpbmVWYWx1ZVJlcXVlc3QgPSBleHBvcnRzLlR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuY29uc3QgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3MTcpO1xuY29uc3QgSXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2MzMpO1xuY29uc3QgcHJvdG9jb2xfaW1wbGVtZW50YXRpb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzI4Nyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbXBsZW1lbnRhdGlvblJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9pbXBsZW1lbnRhdGlvbl8xLkltcGxlbWVudGF0aW9uUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF90eXBlRGVmaW5pdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MjY0KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlR5cGVEZWZpbml0aW9uUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX3R5cGVEZWZpbml0aW9uXzEuVHlwZURlZmluaXRpb25SZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX3dvcmtzcGFjZUZvbGRlcl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2ODYwKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfd29ya3NwYWNlRm9sZGVyXzEuV29ya3NwYWNlRm9sZGVyc1JlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX3dvcmtzcGFjZUZvbGRlcl8xLkRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb247IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfY29uZmlndXJhdGlvbl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NjM5KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbmZpZ3VyYXRpb25SZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfY29uZmlndXJhdGlvbl8xLkNvbmZpZ3VyYXRpb25SZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX2NvbG9yUHJvdmlkZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMzc0Nyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEb2N1bWVudENvbG9yUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2NvbG9yUHJvdmlkZXJfMS5Eb2N1bWVudENvbG9yUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb2xvclByZXNlbnRhdGlvblJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9jb2xvclByb3ZpZGVyXzEuQ29sb3JQcmVzZW50YXRpb25SZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX2ZvbGRpbmdSYW5nZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjAzKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZvbGRpbmdSYW5nZVJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9mb2xkaW5nUmFuZ2VfMS5Gb2xkaW5nUmFuZ2VSZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX2RlY2xhcmF0aW9uXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1ODEpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGVjbGFyYXRpb25SZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZGVjbGFyYXRpb25fMS5EZWNsYXJhdGlvblJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfc2VsZWN0aW9uUmFuZ2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMTUzMCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZWxlY3Rpb25SYW5nZVJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9zZWxlY3Rpb25SYW5nZV8xLlNlbGVjdGlvblJhbmdlUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9wcm9ncmVzc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MTY2KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldvcmtEb25lUHJvZ3Jlc3NcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9wcm9ncmVzc18xLldvcmtEb25lUHJvZ3Jlc3M7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9wcm9ncmVzc18xLldvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIldvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb25cIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9wcm9ncmVzc18xLldvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb247IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfY2FsbEhpZXJhcmNoeV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NjAyKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2NhbGxIaWVyYXJjaHlfMS5DYWxsSGllcmFyY2h5SW5jb21pbmdDYWxsc1JlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FsbEhpZXJhcmNoeU91dGdvaW5nQ2FsbHNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfY2FsbEhpZXJhcmNoeV8xLkNhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDYWxsSGllcmFyY2h5UHJlcGFyZVJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9jYWxsSGllcmFyY2h5XzEuQ2FsbEhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX3NlbWFudGljVG9rZW5zXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwNjcpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG9rZW5Gb3JtYXRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9zZW1hbnRpY1Rva2Vuc18xLlRva2VuRm9ybWF0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlbWFudGljVG9rZW5zUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX3NlbWFudGljVG9rZW5zXzEuU2VtYW50aWNUb2tlbnNSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfc2VtYW50aWNUb2tlbnNfMS5TZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX3NlbWFudGljVG9rZW5zXzEuU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX3NlbWFudGljVG9rZW5zXzEuU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGVcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9zZW1hbnRpY1Rva2Vuc18xLlNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZTsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9zaG93RG9jdW1lbnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNDMzMyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTaG93RG9jdW1lbnRSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfc2hvd0RvY3VtZW50XzEuU2hvd0RvY3VtZW50UmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9saW5rZWRFZGl0aW5nUmFuZ2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMjI0OSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbGlua2VkRWRpdGluZ1JhbmdlXzEuTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9maWxlT3BlcmF0aW9uc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzgxKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkZpbGVPcGVyYXRpb25QYXR0ZXJuS2luZFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2ZpbGVPcGVyYXRpb25zXzEuRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpZENyZWF0ZUZpbGVzTm90aWZpY2F0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMS5EaWRDcmVhdGVGaWxlc05vdGlmaWNhdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMS5XaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpZFJlbmFtZUZpbGVzTm90aWZpY2F0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMS5EaWRSZW5hbWVGaWxlc05vdGlmaWNhdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMS5XaWxsUmVuYW1lRmlsZXNSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMS5EaWREZWxldGVGaWxlc05vdGlmaWNhdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJXaWxsRGVsZXRlRmlsZXNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZmlsZU9wZXJhdGlvbnNfMS5XaWxsRGVsZXRlRmlsZXNSZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX21vbmlrZXJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzY4NCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVbmlxdWVuZXNzTGV2ZWxcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9tb25pa2VyXzEuVW5pcXVlbmVzc0xldmVsOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1vbmlrZXJLaW5kXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbW9uaWtlcl8xLk1vbmlrZXJLaW5kOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1vbmlrZXJSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbW9uaWtlcl8xLk1vbmlrZXJSZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX3R5cGVIaWVyYXJjaHlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oNzA2Mik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF90eXBlSGllcmFyY2h5XzEuVHlwZUhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF90eXBlSGllcmFyY2h5XzEuVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUeXBlSGllcmFyY2h5U3VwZXJ0eXBlc1JlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF90eXBlSGllcmFyY2h5XzEuVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0OyB9IH0pKTtcbmNvbnN0IHByb3RvY29sX2lubGluZVZhbHVlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0OTEpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5saW5lVmFsdWVSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfaW5saW5lVmFsdWVfMS5JbmxpbmVWYWx1ZVJlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2lubGluZVZhbHVlXzEuSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9pbmxheUhpbnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOTM4Myk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbmxheUhpbnRSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfaW5sYXlIaW50XzEuSW5sYXlIaW50UmVxdWVzdDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbmxheUhpbnRSZXNvbHZlUmVxdWVzdFwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX2lubGF5SGludF8xLklubGF5SGludFJlc29sdmVSZXF1ZXN0OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIklubGF5SGludFJlZnJlc2hSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfaW5sYXlIaW50XzEuSW5sYXlIaW50UmVmcmVzaFJlcXVlc3Q7IH0gfSkpO1xuY29uc3QgcHJvdG9jb2xfZGlhZ25vc3RpY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDk0KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZGlhZ25vc3RpY18xLkRpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRvY3VtZW50RGlhZ25vc3RpY1JlcG9ydEtpbmRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9kaWFnbm9zdGljXzEuRG9jdW1lbnREaWFnbm9zdGljUmVwb3J0S2luZDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZGlhZ25vc3RpY18xLkRvY3VtZW50RGlhZ25vc3RpY1JlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3RcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9kaWFnbm9zdGljXzEuV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3Q7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlhZ25vc3RpY1JlZnJlc2hSZXF1ZXN0XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfZGlhZ25vc3RpY18xLkRpYWdub3N0aWNSZWZyZXNoUmVxdWVzdDsgfSB9KSk7XG5jb25zdCBwcm90b2NvbF9ub3RlYm9va18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzkyKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGVib29rQ2VsbEtpbmRcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9ub3RlYm9va18xLk5vdGVib29rQ2VsbEtpbmQ7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXhlY3V0aW9uU3VtbWFyeVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuRXhlY3V0aW9uU3VtbWFyeTsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RlYm9va0NlbGxcIiwgKHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwcm90b2NvbF9ub3RlYm9va18xLk5vdGVib29rQ2VsbDsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RlYm9va0RvY3VtZW50XCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbm90ZWJvb2tfMS5Ob3RlYm9va0RvY3VtZW50OyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlOyB9IH0pKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbm90ZWJvb2tfMS5EaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb3RlYm9va0NlbGxBcnJheUNoYW5nZVwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuTm90ZWJvb2tDZWxsQXJyYXlDaGFuZ2U7IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbjsgfSB9KSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvblwiLCAoeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHByb3RvY29sX25vdGVib29rXzEuRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb247IH0gfSkpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGlkQ2xvc2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uXCIsICh7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHJvdG9jb2xfbm90ZWJvb2tfMS5EaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb247IH0gfSkpO1xuLy8gQHRzLWlnbm9yZTogdG8gYXZvaWQgaW5saW5pbmcgTG9jYXRpb25MaW5rIGFzIGR5bmFtaWMgaW1wb3J0XG5sZXQgX19ub0R5bmFtaWNJbXBvcnQ7XG4vKipcbiAqIFRoZSBUZXh0RG9jdW1lbnRGaWx0ZXIgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgVGV4dERvY3VtZW50RmlsdGVyfSBsaXRlcmFscy5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBUZXh0RG9jdW1lbnRGaWx0ZXI7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudEZpbHRlcikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYW5ndWFnZSkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5zY2hlbWUpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUucGF0dGVybik7XG4gICAgfVxuICAgIFRleHREb2N1bWVudEZpbHRlci5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50RmlsdGVyID0gZXhwb3J0cy5UZXh0RG9jdW1lbnRGaWx0ZXIgfHwgKGV4cG9ydHMuVGV4dERvY3VtZW50RmlsdGVyID0ge30pKTtcbi8qKlxuICogVGhlIE5vdGVib29rRG9jdW1lbnRGaWx0ZXIgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgTm90ZWJvb2tEb2N1bWVudEZpbHRlcn0gbGl0ZXJhbHMuXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgTm90ZWJvb2tEb2N1bWVudEZpbHRlcjtcbihmdW5jdGlvbiAoTm90ZWJvb2tEb2N1bWVudEZpbHRlcikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLm5vdGVib29rVHlwZSkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5zY2hlbWUpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUucGF0dGVybikpO1xuICAgIH1cbiAgICBOb3RlYm9va0RvY3VtZW50RmlsdGVyLmlzID0gaXM7XG59KShOb3RlYm9va0RvY3VtZW50RmlsdGVyID0gZXhwb3J0cy5Ob3RlYm9va0RvY3VtZW50RmlsdGVyIHx8IChleHBvcnRzLk5vdGVib29rRG9jdW1lbnRGaWx0ZXIgPSB7fSkpO1xuLyoqXG4gKiBUaGUgTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIE5vdGVib29rQ2VsbFRleHREb2N1bWVudEZpbHRlcn0gbGl0ZXJhbHMuXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyO1xuKGZ1bmN0aW9uIChOb3RlYm9va0NlbGxUZXh0RG9jdW1lbnRGaWx0ZXIpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKVxuICAgICAgICAgICAgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUubm90ZWJvb2spIHx8IE5vdGVib29rRG9jdW1lbnRGaWx0ZXIuaXMoY2FuZGlkYXRlLm5vdGVib29rKSlcbiAgICAgICAgICAgICYmIChjYW5kaWRhdGUubGFuZ3VhZ2UgPT09IHVuZGVmaW5lZCB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlKSk7XG4gICAgfVxuICAgIE5vdGVib29rQ2VsbFRleHREb2N1bWVudEZpbHRlci5pcyA9IGlzO1xufSkoTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyID0gZXhwb3J0cy5Ob3RlYm9va0NlbGxUZXh0RG9jdW1lbnRGaWx0ZXIgfHwgKGV4cG9ydHMuTm90ZWJvb2tDZWxsVGV4dERvY3VtZW50RmlsdGVyID0ge30pKTtcbi8qKlxuICogVGhlIERvY3VtZW50U2VsZWN0b3IgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgRG9jdW1lbnRTZWxlY3Rvcn1zLlxuICovXG52YXIgRG9jdW1lbnRTZWxlY3RvcjtcbihmdW5jdGlvbiAoRG9jdW1lbnRTZWxlY3Rvcikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBlbGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIUlzLnN0cmluZyhlbGVtKSAmJiAhVGV4dERvY3VtZW50RmlsdGVyLmlzKGVsZW0pICYmICFOb3RlYm9va0NlbGxUZXh0RG9jdW1lbnRGaWx0ZXIuaXMoZWxlbSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIERvY3VtZW50U2VsZWN0b3IuaXMgPSBpcztcbn0pKERvY3VtZW50U2VsZWN0b3IgPSBleHBvcnRzLkRvY3VtZW50U2VsZWN0b3IgfHwgKGV4cG9ydHMuRG9jdW1lbnRTZWxlY3RvciA9IHt9KSk7XG4vKipcbiAqIFRoZSBgY2xpZW50L3JlZ2lzdGVyQ2FwYWJpbGl0eWAgcmVxdWVzdCBpcyBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IHRvIHJlZ2lzdGVyIGEgbmV3IGNhcGFiaWxpdHlcbiAqIGhhbmRsZXIgb24gdGhlIGNsaWVudCBzaWRlLlxuICovXG52YXIgUmVnaXN0cmF0aW9uUmVxdWVzdDtcbihmdW5jdGlvbiAoUmVnaXN0cmF0aW9uUmVxdWVzdCkge1xuICAgIFJlZ2lzdHJhdGlvblJlcXVlc3QubWV0aG9kID0gJ2NsaWVudC9yZWdpc3RlckNhcGFiaWxpdHknO1xuICAgIFJlZ2lzdHJhdGlvblJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBSZWdpc3RyYXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFJlZ2lzdHJhdGlvblJlcXVlc3QubWV0aG9kKTtcbn0pKFJlZ2lzdHJhdGlvblJlcXVlc3QgPSBleHBvcnRzLlJlZ2lzdHJhdGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuUmVnaXN0cmF0aW9uUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBgY2xpZW50L3VucmVnaXN0ZXJDYXBhYmlsaXR5YCByZXF1ZXN0IGlzIHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgdG8gdW5yZWdpc3RlciBhIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBjYXBhYmlsaXR5XG4gKiBoYW5kbGVyIG9uIHRoZSBjbGllbnQgc2lkZS5cbiAqL1xudmFyIFVucmVnaXN0cmF0aW9uUmVxdWVzdDtcbihmdW5jdGlvbiAoVW5yZWdpc3RyYXRpb25SZXF1ZXN0KSB7XG4gICAgVW5yZWdpc3RyYXRpb25SZXF1ZXN0Lm1ldGhvZCA9ICdjbGllbnQvdW5yZWdpc3RlckNhcGFiaWxpdHknO1xuICAgIFVucmVnaXN0cmF0aW9uUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIFVucmVnaXN0cmF0aW9uUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShVbnJlZ2lzdHJhdGlvblJlcXVlc3QubWV0aG9kKTtcbn0pKFVucmVnaXN0cmF0aW9uUmVxdWVzdCA9IGV4cG9ydHMuVW5yZWdpc3RyYXRpb25SZXF1ZXN0IHx8IChleHBvcnRzLlVucmVnaXN0cmF0aW9uUmVxdWVzdCA9IHt9KSk7XG52YXIgUmVzb3VyY2VPcGVyYXRpb25LaW5kO1xuKGZ1bmN0aW9uIChSZXNvdXJjZU9wZXJhdGlvbktpbmQpIHtcbiAgICAvKipcbiAgICAgKiBTdXBwb3J0cyBjcmVhdGluZyBuZXcgZmlsZXMgYW5kIGZvbGRlcnMuXG4gICAgICovXG4gICAgUmVzb3VyY2VPcGVyYXRpb25LaW5kLkNyZWF0ZSA9ICdjcmVhdGUnO1xuICAgIC8qKlxuICAgICAqIFN1cHBvcnRzIHJlbmFtaW5nIGV4aXN0aW5nIGZpbGVzIGFuZCBmb2xkZXJzLlxuICAgICAqL1xuICAgIFJlc291cmNlT3BlcmF0aW9uS2luZC5SZW5hbWUgPSAncmVuYW1lJztcbiAgICAvKipcbiAgICAgKiBTdXBwb3J0cyBkZWxldGluZyBleGlzdGluZyBmaWxlcyBhbmQgZm9sZGVycy5cbiAgICAgKi9cbiAgICBSZXNvdXJjZU9wZXJhdGlvbktpbmQuRGVsZXRlID0gJ2RlbGV0ZSc7XG59KShSZXNvdXJjZU9wZXJhdGlvbktpbmQgPSBleHBvcnRzLlJlc291cmNlT3BlcmF0aW9uS2luZCB8fCAoZXhwb3J0cy5SZXNvdXJjZU9wZXJhdGlvbktpbmQgPSB7fSkpO1xudmFyIEZhaWx1cmVIYW5kbGluZ0tpbmQ7XG4oZnVuY3Rpb24gKEZhaWx1cmVIYW5kbGluZ0tpbmQpIHtcbiAgICAvKipcbiAgICAgKiBBcHBseWluZyB0aGUgd29ya3NwYWNlIGNoYW5nZSBpcyBzaW1wbHkgYWJvcnRlZCBpZiBvbmUgb2YgdGhlIGNoYW5nZXMgcHJvdmlkZWRcbiAgICAgKiBmYWlscy4gQWxsIG9wZXJhdGlvbnMgZXhlY3V0ZWQgYmVmb3JlIHRoZSBmYWlsaW5nIG9wZXJhdGlvbiBzdGF5IGV4ZWN1dGVkLlxuICAgICAqL1xuICAgIEZhaWx1cmVIYW5kbGluZ0tpbmQuQWJvcnQgPSAnYWJvcnQnO1xuICAgIC8qKlxuICAgICAqIEFsbCBvcGVyYXRpb25zIGFyZSBleGVjdXRlZCB0cmFuc2FjdGlvbmFsLiBUaGF0IG1lYW5zIHRoZXkgZWl0aGVyIGFsbFxuICAgICAqIHN1Y2NlZWQgb3Igbm8gY2hhbmdlcyBhdCBhbGwgYXJlIGFwcGxpZWQgdG8gdGhlIHdvcmtzcGFjZS5cbiAgICAgKi9cbiAgICBGYWlsdXJlSGFuZGxpbmdLaW5kLlRyYW5zYWN0aW9uYWwgPSAndHJhbnNhY3Rpb25hbCc7XG4gICAgLyoqXG4gICAgICogSWYgdGhlIHdvcmtzcGFjZSBlZGl0IGNvbnRhaW5zIG9ubHkgdGV4dHVhbCBmaWxlIGNoYW5nZXMgdGhleSBhcmUgZXhlY3V0ZWQgdHJhbnNhY3Rpb25hbC5cbiAgICAgKiBJZiByZXNvdXJjZSBjaGFuZ2VzIChjcmVhdGUsIHJlbmFtZSBvciBkZWxldGUgZmlsZSkgYXJlIHBhcnQgb2YgdGhlIGNoYW5nZSB0aGUgZmFpbHVyZVxuICAgICAqIGhhbmRsaW5nIHN0cmF0ZWd5IGlzIGFib3J0LlxuICAgICAqL1xuICAgIEZhaWx1cmVIYW5kbGluZ0tpbmQuVGV4dE9ubHlUcmFuc2FjdGlvbmFsID0gJ3RleHRPbmx5VHJhbnNhY3Rpb25hbCc7XG4gICAgLyoqXG4gICAgICogVGhlIGNsaWVudCB0cmllcyB0byB1bmRvIHRoZSBvcGVyYXRpb25zIGFscmVhZHkgZXhlY3V0ZWQuIEJ1dCB0aGVyZSBpcyBub1xuICAgICAqIGd1YXJhbnRlZSB0aGF0IHRoaXMgaXMgc3VjY2VlZGluZy5cbiAgICAgKi9cbiAgICBGYWlsdXJlSGFuZGxpbmdLaW5kLlVuZG8gPSAndW5kbyc7XG59KShGYWlsdXJlSGFuZGxpbmdLaW5kID0gZXhwb3J0cy5GYWlsdXJlSGFuZGxpbmdLaW5kIHx8IChleHBvcnRzLkZhaWx1cmVIYW5kbGluZ0tpbmQgPSB7fSkpO1xuLyoqXG4gKiBBIHNldCBvZiBwcmVkZWZpbmVkIHBvc2l0aW9uIGVuY29kaW5nIGtpbmRzLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIFBvc2l0aW9uRW5jb2RpbmdLaW5kO1xuKGZ1bmN0aW9uIChQb3NpdGlvbkVuY29kaW5nS2luZCkge1xuICAgIC8qKlxuICAgICAqIENoYXJhY3RlciBvZmZzZXRzIGNvdW50IFVURi04IGNvZGUgdW5pdHMgKGUuZy4gYnl0ZXMpLlxuICAgICAqL1xuICAgIFBvc2l0aW9uRW5jb2RpbmdLaW5kLlVURjggPSAndXRmLTgnO1xuICAgIC8qKlxuICAgICAqIENoYXJhY3RlciBvZmZzZXRzIGNvdW50IFVURi0xNiBjb2RlIHVuaXRzLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB0aGUgZGVmYXVsdCBhbmQgbXVzdCBhbHdheXMgYmUgc3VwcG9ydGVkXG4gICAgICogYnkgc2VydmVyc1xuICAgICAqL1xuICAgIFBvc2l0aW9uRW5jb2RpbmdLaW5kLlVURjE2ID0gJ3V0Zi0xNic7XG4gICAgLyoqXG4gICAgICogQ2hhcmFjdGVyIG9mZnNldHMgY291bnQgVVRGLTMyIGNvZGUgdW5pdHMuXG4gICAgICpcbiAgICAgKiBJbXBsZW1lbnRhdGlvbiBub3RlOiB0aGVzZSBhcmUgdGhlIHNhbWUgYXMgVW5pY29kZSBjb2RlcG9pbnRzLFxuICAgICAqIHNvIHRoaXMgYFBvc2l0aW9uRW5jb2RpbmdLaW5kYCBtYXkgYWxzbyBiZSB1c2VkIGZvciBhblxuICAgICAqIGVuY29kaW5nLWFnbm9zdGljIHJlcHJlc2VudGF0aW9uIG9mIGNoYXJhY3RlciBvZmZzZXRzLlxuICAgICAqL1xuICAgIFBvc2l0aW9uRW5jb2RpbmdLaW5kLlVURjMyID0gJ3V0Zi0zMic7XG59KShQb3NpdGlvbkVuY29kaW5nS2luZCA9IGV4cG9ydHMuUG9zaXRpb25FbmNvZGluZ0tpbmQgfHwgKGV4cG9ydHMuUG9zaXRpb25FbmNvZGluZ0tpbmQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgU3RhdGljUmVnaXN0cmF0aW9uT3B0aW9ucyBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBTdGF0aWNSZWdpc3RyYXRpb25PcHRpb25zfSBsaXRlcmFscy5cbiAqL1xudmFyIFN0YXRpY1JlZ2lzdHJhdGlvbk9wdGlvbnM7XG4oZnVuY3Rpb24gKFN0YXRpY1JlZ2lzdHJhdGlvbk9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiBoYXNJZCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmlkKSAmJiBjYW5kaWRhdGUuaWQubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgU3RhdGljUmVnaXN0cmF0aW9uT3B0aW9ucy5oYXNJZCA9IGhhc0lkO1xufSkoU3RhdGljUmVnaXN0cmF0aW9uT3B0aW9ucyA9IGV4cG9ydHMuU3RhdGljUmVnaXN0cmF0aW9uT3B0aW9ucyB8fCAoZXhwb3J0cy5TdGF0aWNSZWdpc3RyYXRpb25PcHRpb25zID0ge30pKTtcbi8qKlxuICogVGhlIFRleHREb2N1bWVudFJlZ2lzdHJhdGlvbk9wdGlvbnMgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgVGV4dERvY3VtZW50UmVnaXN0cmF0aW9uT3B0aW9uc30gbGl0ZXJhbHMuXG4gKi9cbnZhciBUZXh0RG9jdW1lbnRSZWdpc3RyYXRpb25PcHRpb25zO1xuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnRSZWdpc3RyYXRpb25PcHRpb25zKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgKGNhbmRpZGF0ZS5kb2N1bWVudFNlbGVjdG9yID09PSBudWxsIHx8IERvY3VtZW50U2VsZWN0b3IuaXMoY2FuZGlkYXRlLmRvY3VtZW50U2VsZWN0b3IpKTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50UmVnaXN0cmF0aW9uT3B0aW9ucy5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50UmVnaXN0cmF0aW9uT3B0aW9ucyA9IGV4cG9ydHMuVGV4dERvY3VtZW50UmVnaXN0cmF0aW9uT3B0aW9ucyB8fCAoZXhwb3J0cy5UZXh0RG9jdW1lbnRSZWdpc3RyYXRpb25PcHRpb25zID0ge30pKTtcbi8qKlxuICogVGhlIFdvcmtEb25lUHJvZ3Jlc3NPcHRpb25zIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFdvcmtEb25lUHJvZ3Jlc3NPcHRpb25zfSBsaXRlcmFscy5cbiAqL1xudmFyIFdvcmtEb25lUHJvZ3Jlc3NPcHRpb25zO1xuKGZ1bmN0aW9uIChXb3JrRG9uZVByb2dyZXNzT3B0aW9ucykge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIChjYW5kaWRhdGUud29ya0RvbmVQcm9ncmVzcyA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLndvcmtEb25lUHJvZ3Jlc3MpKTtcbiAgICB9XG4gICAgV29ya0RvbmVQcm9ncmVzc09wdGlvbnMuaXMgPSBpcztcbiAgICBmdW5jdGlvbiBoYXNXb3JrRG9uZVByb2dyZXNzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLmJvb2xlYW4oY2FuZGlkYXRlLndvcmtEb25lUHJvZ3Jlc3MpO1xuICAgIH1cbiAgICBXb3JrRG9uZVByb2dyZXNzT3B0aW9ucy5oYXNXb3JrRG9uZVByb2dyZXNzID0gaGFzV29ya0RvbmVQcm9ncmVzcztcbn0pKFdvcmtEb25lUHJvZ3Jlc3NPcHRpb25zID0gZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzT3B0aW9ucyB8fCAoZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzT3B0aW9ucyA9IHt9KSk7XG4vKipcbiAqIFRoZSBpbml0aWFsaXplIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlci5cbiAqIEl0IGlzIHNlbnQgb25jZSBhcyB0aGUgcmVxdWVzdCBhZnRlciBzdGFydGluZyB1cCB0aGUgc2VydmVyLlxuICogVGhlIHJlcXVlc3RzIHBhcmFtZXRlciBpcyBvZiB0eXBlIHtAbGluayBJbml0aWFsaXplUGFyYW1zfVxuICogdGhlIHJlc3BvbnNlIGlmIG9mIHR5cGUge0BsaW5rIEluaXRpYWxpemVSZXN1bHR9IG9mIGEgVGhlbmFibGUgdGhhdFxuICogcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIEluaXRpYWxpemVSZXF1ZXN0O1xuKGZ1bmN0aW9uIChJbml0aWFsaXplUmVxdWVzdCkge1xuICAgIEluaXRpYWxpemVSZXF1ZXN0Lm1ldGhvZCA9ICdpbml0aWFsaXplJztcbiAgICBJbml0aWFsaXplUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIEluaXRpYWxpemVSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKEluaXRpYWxpemVSZXF1ZXN0Lm1ldGhvZCk7XG59KShJbml0aWFsaXplUmVxdWVzdCA9IGV4cG9ydHMuSW5pdGlhbGl6ZVJlcXVlc3QgfHwgKGV4cG9ydHMuSW5pdGlhbGl6ZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBLbm93biBlcnJvciBjb2RlcyBmb3IgYW4gYEluaXRpYWxpemVFcnJvckNvZGVzYDtcbiAqL1xudmFyIEluaXRpYWxpemVFcnJvckNvZGVzO1xuKGZ1bmN0aW9uIChJbml0aWFsaXplRXJyb3JDb2Rlcykge1xuICAgIC8qKlxuICAgICAqIElmIHRoZSBwcm90b2NvbCB2ZXJzaW9uIHByb3ZpZGVkIGJ5IHRoZSBjbGllbnQgY2FuJ3QgYmUgaGFuZGxlZCBieSB0aGUgc2VydmVyLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWQgVGhpcyBpbml0aWFsaXplIGVycm9yIGdvdCByZXBsYWNlZCBieSBjbGllbnQgY2FwYWJpbGl0aWVzLiBUaGVyZSBpc1xuICAgICAqIG5vIHZlcnNpb24gaGFuZHNoYWtlIGluIHZlcnNpb24gMy4weFxuICAgICAqL1xuICAgIEluaXRpYWxpemVFcnJvckNvZGVzLnVua25vd25Qcm90b2NvbFZlcnNpb24gPSAxO1xufSkoSW5pdGlhbGl6ZUVycm9yQ29kZXMgPSBleHBvcnRzLkluaXRpYWxpemVFcnJvckNvZGVzIHx8IChleHBvcnRzLkluaXRpYWxpemVFcnJvckNvZGVzID0ge30pKTtcbi8qKlxuICogVGhlIGluaXRpYWxpemVkIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGVcbiAqIHNlcnZlciBhZnRlciB0aGUgY2xpZW50IGlzIGZ1bGx5IGluaXRpYWxpemVkIGFuZCB0aGUgc2VydmVyXG4gKiBpcyBhbGxvd2VkIHRvIHNlbmQgcmVxdWVzdHMgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQuXG4gKi9cbnZhciBJbml0aWFsaXplZE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoSW5pdGlhbGl6ZWROb3RpZmljYXRpb24pIHtcbiAgICBJbml0aWFsaXplZE5vdGlmaWNhdGlvbi5tZXRob2QgPSAnaW5pdGlhbGl6ZWQnO1xuICAgIEluaXRpYWxpemVkTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgSW5pdGlhbGl6ZWROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShJbml0aWFsaXplZE5vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoSW5pdGlhbGl6ZWROb3RpZmljYXRpb24gPSBleHBvcnRzLkluaXRpYWxpemVkTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkluaXRpYWxpemVkTm90aWZpY2F0aW9uID0ge30pKTtcbi8vLS0tLSBTaHV0ZG93biBNZXRob2QgLS0tLVxuLyoqXG4gKiBBIHNodXRkb3duIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlci5cbiAqIEl0IGlzIHNlbnQgb25jZSB3aGVuIHRoZSBjbGllbnQgZGVjaWRlcyB0byBzaHV0ZG93biB0aGVcbiAqIHNlcnZlci4gVGhlIG9ubHkgbm90aWZpY2F0aW9uIHRoYXQgaXMgc2VudCBhZnRlciBhIHNodXRkb3duIHJlcXVlc3RcbiAqIGlzIHRoZSBleGl0IGV2ZW50LlxuICovXG52YXIgU2h1dGRvd25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChTaHV0ZG93blJlcXVlc3QpIHtcbiAgICBTaHV0ZG93blJlcXVlc3QubWV0aG9kID0gJ3NodXRkb3duJztcbiAgICBTaHV0ZG93blJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBTaHV0ZG93blJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUwKFNodXRkb3duUmVxdWVzdC5tZXRob2QpO1xufSkoU2h1dGRvd25SZXF1ZXN0ID0gZXhwb3J0cy5TaHV0ZG93blJlcXVlc3QgfHwgKGV4cG9ydHMuU2h1dGRvd25SZXF1ZXN0ID0ge30pKTtcbi8vLS0tLSBFeGl0IE5vdGlmaWNhdGlvbiAtLS0tXG4vKipcbiAqIFRoZSBleGl0IGV2ZW50IGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgdG9cbiAqIGFzayB0aGUgc2VydmVyIHRvIGV4aXQgaXRzIHByb2Nlc3MuXG4gKi9cbnZhciBFeGl0Tm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChFeGl0Tm90aWZpY2F0aW9uKSB7XG4gICAgRXhpdE5vdGlmaWNhdGlvbi5tZXRob2QgPSAnZXhpdCc7XG4gICAgRXhpdE5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIEV4aXROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZTAoRXhpdE5vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoRXhpdE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRXhpdE5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5FeGl0Tm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIGNvbmZpZ3VyYXRpb24gY2hhbmdlIG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyXG4gKiB3aGVuIHRoZSBjbGllbnQncyBjb25maWd1cmF0aW9uIGhhcyBjaGFuZ2VkLiBUaGUgbm90aWZpY2F0aW9uIGNvbnRhaW5zXG4gKiB0aGUgY2hhbmdlZCBjb25maWd1cmF0aW9uIGFzIGRlZmluZWQgYnkgdGhlIGxhbmd1YWdlIGNsaWVudC5cbiAqL1xudmFyIERpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24pIHtcbiAgICBEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uLm1ldGhvZCA9ICd3b3Jrc3BhY2UvZGlkQ2hhbmdlQ29uZmlndXJhdGlvbic7XG4gICAgRGlkQ2hhbmdlQ29uZmlndXJhdGlvbk5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShEaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRDaGFuZ2VDb25maWd1cmF0aW9uTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENoYW5nZUNvbmZpZ3VyYXRpb25Ob3RpZmljYXRpb24gPSB7fSkpO1xuLy8tLS0tIE1lc3NhZ2Ugc2hvdyBhbmQgbG9nIG5vdGlmaWNhdGlvbnMgLS0tLVxuLyoqXG4gKiBUaGUgbWVzc2FnZSB0eXBlXG4gKi9cbnZhciBNZXNzYWdlVHlwZTtcbihmdW5jdGlvbiAoTWVzc2FnZVR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBBbiBlcnJvciBtZXNzYWdlLlxuICAgICAqL1xuICAgIE1lc3NhZ2VUeXBlLkVycm9yID0gMTtcbiAgICAvKipcbiAgICAgKiBBIHdhcm5pbmcgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBNZXNzYWdlVHlwZS5XYXJuaW5nID0gMjtcbiAgICAvKipcbiAgICAgKiBBbiBpbmZvcm1hdGlvbiBtZXNzYWdlLlxuICAgICAqL1xuICAgIE1lc3NhZ2VUeXBlLkluZm8gPSAzO1xuICAgIC8qKlxuICAgICAqIEEgbG9nIG1lc3NhZ2UuXG4gICAgICovXG4gICAgTWVzc2FnZVR5cGUuTG9nID0gNDtcbn0pKE1lc3NhZ2VUeXBlID0gZXhwb3J0cy5NZXNzYWdlVHlwZSB8fCAoZXhwb3J0cy5NZXNzYWdlVHlwZSA9IHt9KSk7XG4vKipcbiAqIFRoZSBzaG93IG1lc3NhZ2Ugbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSBhIHNlcnZlciB0byBhIGNsaWVudCB0byBhc2tcbiAqIHRoZSBjbGllbnQgdG8gZGlzcGxheSBhIHBhcnRpY3VsYXIgbWVzc2FnZSBpbiB0aGUgdXNlciBpbnRlcmZhY2UuXG4gKi9cbnZhciBTaG93TWVzc2FnZU5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoU2hvd01lc3NhZ2VOb3RpZmljYXRpb24pIHtcbiAgICBTaG93TWVzc2FnZU5vdGlmaWNhdGlvbi5tZXRob2QgPSAnd2luZG93L3Nob3dNZXNzYWdlJztcbiAgICBTaG93TWVzc2FnZU5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIFNob3dNZXNzYWdlTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoU2hvd01lc3NhZ2VOb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKFNob3dNZXNzYWdlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5TaG93TWVzc2FnZU5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5TaG93TWVzc2FnZU5vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBzaG93IG1lc3NhZ2UgcmVxdWVzdCBpcyBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IHRvIHNob3cgYSBtZXNzYWdlXG4gKiBhbmQgYSBzZXQgb2Ygb3B0aW9ucyBhY3Rpb25zIHRvIHRoZSB1c2VyLlxuICovXG52YXIgU2hvd01lc3NhZ2VSZXF1ZXN0O1xuKGZ1bmN0aW9uIChTaG93TWVzc2FnZVJlcXVlc3QpIHtcbiAgICBTaG93TWVzc2FnZVJlcXVlc3QubWV0aG9kID0gJ3dpbmRvdy9zaG93TWVzc2FnZVJlcXVlc3QnO1xuICAgIFNob3dNZXNzYWdlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIFNob3dNZXNzYWdlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShTaG93TWVzc2FnZVJlcXVlc3QubWV0aG9kKTtcbn0pKFNob3dNZXNzYWdlUmVxdWVzdCA9IGV4cG9ydHMuU2hvd01lc3NhZ2VSZXF1ZXN0IHx8IChleHBvcnRzLlNob3dNZXNzYWdlUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBsb2cgbWVzc2FnZSBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBhc2tcbiAqIHRoZSBjbGllbnQgdG8gbG9nIGEgcGFydGljdWxhciBtZXNzYWdlLlxuICovXG52YXIgTG9nTWVzc2FnZU5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoTG9nTWVzc2FnZU5vdGlmaWNhdGlvbikge1xuICAgIExvZ01lc3NhZ2VOb3RpZmljYXRpb24ubWV0aG9kID0gJ3dpbmRvdy9sb2dNZXNzYWdlJztcbiAgICBMb2dNZXNzYWdlTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgTG9nTWVzc2FnZU5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKExvZ01lc3NhZ2VOb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKExvZ01lc3NhZ2VOb3RpZmljYXRpb24gPSBleHBvcnRzLkxvZ01lc3NhZ2VOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuTG9nTWVzc2FnZU5vdGlmaWNhdGlvbiA9IHt9KSk7XG4vLy0tLS0gVGVsZW1ldHJ5IG5vdGlmaWNhdGlvblxuLyoqXG4gKiBUaGUgdGVsZW1ldHJ5IGV2ZW50IG5vdGlmaWNhdGlvbiBpcyBzZW50IGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50IHRvIGFza1xuICogdGhlIGNsaWVudCB0byBsb2cgdGVsZW1ldHJ5IGRhdGEuXG4gKi9cbnZhciBUZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb24pIHtcbiAgICBUZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbi5tZXRob2QgPSAndGVsZW1ldHJ5L2V2ZW50JztcbiAgICBUZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIFRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoVGVsZW1ldHJ5RXZlbnROb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKFRlbGVtZXRyeUV2ZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5UZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5UZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIERlZmluZXMgaG93IHRoZSBob3N0IChlZGl0b3IpIHNob3VsZCBzeW5jXG4gKiBkb2N1bWVudCBjaGFuZ2VzIHRvIHRoZSBsYW5ndWFnZSBzZXJ2ZXIuXG4gKi9cbnZhciBUZXh0RG9jdW1lbnRTeW5jS2luZDtcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50U3luY0tpbmQpIHtcbiAgICAvKipcbiAgICAgKiBEb2N1bWVudHMgc2hvdWxkIG5vdCBiZSBzeW5jZWQgYXQgYWxsLlxuICAgICAqL1xuICAgIFRleHREb2N1bWVudFN5bmNLaW5kLk5vbmUgPSAwO1xuICAgIC8qKlxuICAgICAqIERvY3VtZW50cyBhcmUgc3luY2VkIGJ5IGFsd2F5cyBzZW5kaW5nIHRoZSBmdWxsIGNvbnRlbnRcbiAgICAgKiBvZiB0aGUgZG9jdW1lbnQuXG4gICAgICovXG4gICAgVGV4dERvY3VtZW50U3luY0tpbmQuRnVsbCA9IDE7XG4gICAgLyoqXG4gICAgICogRG9jdW1lbnRzIGFyZSBzeW5jZWQgYnkgc2VuZGluZyB0aGUgZnVsbCBjb250ZW50IG9uIG9wZW4uXG4gICAgICogQWZ0ZXIgdGhhdCBvbmx5IGluY3JlbWVudGFsIHVwZGF0ZXMgdG8gdGhlIGRvY3VtZW50IGFyZVxuICAgICAqIHNlbmQuXG4gICAgICovXG4gICAgVGV4dERvY3VtZW50U3luY0tpbmQuSW5jcmVtZW50YWwgPSAyO1xufSkoVGV4dERvY3VtZW50U3luY0tpbmQgPSBleHBvcnRzLlRleHREb2N1bWVudFN5bmNLaW5kIHx8IChleHBvcnRzLlRleHREb2N1bWVudFN5bmNLaW5kID0ge30pKTtcbi8qKlxuICogVGhlIGRvY3VtZW50IG9wZW4gbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgdG8gc2lnbmFsXG4gKiBuZXdseSBvcGVuZWQgdGV4dCBkb2N1bWVudHMuIFRoZSBkb2N1bWVudCdzIHRydXRoIGlzIG5vdyBtYW5hZ2VkIGJ5IHRoZSBjbGllbnRcbiAqIGFuZCB0aGUgc2VydmVyIG11c3Qgbm90IHRyeSB0byByZWFkIHRoZSBkb2N1bWVudCdzIHRydXRoIHVzaW5nIHRoZSBkb2N1bWVudCdzXG4gKiB1cmkuIE9wZW4gaW4gdGhpcyBzZW5zZSBtZWFucyBpdCBpcyBtYW5hZ2VkIGJ5IHRoZSBjbGllbnQuIEl0IGRvZXNuJ3QgbmVjZXNzYXJpbHlcbiAqIG1lYW4gdGhhdCBpdHMgY29udGVudCBpcyBwcmVzZW50ZWQgaW4gYW4gZWRpdG9yLiBBbiBvcGVuIG5vdGlmaWNhdGlvbiBtdXN0IG5vdFxuICogYmUgc2VudCBtb3JlIHRoYW4gb25jZSB3aXRob3V0IGEgY29ycmVzcG9uZGluZyBjbG9zZSBub3RpZmljYXRpb24gc2VuZCBiZWZvcmUuXG4gKiBUaGlzIG1lYW5zIG9wZW4gYW5kIGNsb3NlIG5vdGlmaWNhdGlvbiBtdXN0IGJlIGJhbGFuY2VkIGFuZCB0aGUgbWF4IG9wZW4gY291bnRcbiAqIGlzIG9uZS5cbiAqL1xudmFyIERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24pIHtcbiAgICBEaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZGlkT3Blbic7XG4gICAgRGlkT3BlblRleHREb2N1bWVudE5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCk7XG59KShEaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZE9wZW5UZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSB7fSkpO1xudmFyIFRleHREb2N1bWVudENvbnRlbnRDaGFuZ2VFdmVudDtcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50Q29udGVudENoYW5nZUV2ZW50KSB7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGluZm9ybWF0aW9uIGRlc2NyaWJlcyBhIGRlbHRhIGV2ZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW5jcmVtZW50YWwoZXZlbnQpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZSA9IGV2ZW50O1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICE9PSB1bmRlZmluZWQgJiYgY2FuZGlkYXRlICE9PSBudWxsICYmXG4gICAgICAgICAgICB0eXBlb2YgY2FuZGlkYXRlLnRleHQgPT09ICdzdHJpbmcnICYmIGNhbmRpZGF0ZS5yYW5nZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLnJhbmdlTGVuZ3RoID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGNhbmRpZGF0ZS5yYW5nZUxlbmd0aCA9PT0gJ251bWJlcicpO1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRDb250ZW50Q2hhbmdlRXZlbnQuaXNJbmNyZW1lbnRhbCA9IGlzSW5jcmVtZW50YWw7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGluZm9ybWF0aW9uIGRlc2NyaWJlcyBhIGZ1bGwgcmVwbGFjZW1lbnQgZXZlbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdWxsKGV2ZW50KSB7XG4gICAgICAgIGxldCBjYW5kaWRhdGUgPSBldmVudDtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGNhbmRpZGF0ZS50ZXh0ID09PSAnc3RyaW5nJyAmJiBjYW5kaWRhdGUucmFuZ2UgPT09IHVuZGVmaW5lZCAmJiBjYW5kaWRhdGUucmFuZ2VMZW5ndGggPT09IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50Q29udGVudENoYW5nZUV2ZW50LmlzRnVsbCA9IGlzRnVsbDtcbn0pKFRleHREb2N1bWVudENvbnRlbnRDaGFuZ2VFdmVudCA9IGV4cG9ydHMuVGV4dERvY3VtZW50Q29udGVudENoYW5nZUV2ZW50IHx8IChleHBvcnRzLlRleHREb2N1bWVudENvbnRlbnRDaGFuZ2VFdmVudCA9IHt9KSk7XG4vKipcbiAqIFRoZSBkb2N1bWVudCBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgdG8gc2lnbmFsXG4gKiBjaGFuZ2VzIHRvIGEgdGV4dCBkb2N1bWVudC5cbiAqL1xudmFyIERpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uKSB7XG4gICAgRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZGlkQ2hhbmdlJztcbiAgICBEaWRDaGFuZ2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWRDaGFuZ2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRDaGFuZ2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKERpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRGlkQ2hhbmdlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENoYW5nZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBkb2N1bWVudCBjbG9zZSBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB3aGVuXG4gKiB0aGUgZG9jdW1lbnQgZ290IGNsb3NlZCBpbiB0aGUgY2xpZW50LiBUaGUgZG9jdW1lbnQncyB0cnV0aCBub3cgZXhpc3RzIHdoZXJlXG4gKiB0aGUgZG9jdW1lbnQncyB1cmkgcG9pbnRzIHRvIChlLmcuIGlmIHRoZSBkb2N1bWVudCdzIHVyaSBpcyBhIGZpbGUgdXJpIHRoZVxuICogdHJ1dGggbm93IGV4aXN0cyBvbiBkaXNrKS4gQXMgd2l0aCB0aGUgb3BlbiBub3RpZmljYXRpb24gdGhlIGNsb3NlIG5vdGlmaWNhdGlvblxuICogaXMgYWJvdXQgbWFuYWdpbmcgdGhlIGRvY3VtZW50J3MgY29udGVudC4gUmVjZWl2aW5nIGEgY2xvc2Ugbm90aWZpY2F0aW9uXG4gKiBkb2Vzbid0IG1lYW4gdGhhdCB0aGUgZG9jdW1lbnQgd2FzIG9wZW4gaW4gYW4gZWRpdG9yIGJlZm9yZS4gQSBjbG9zZVxuICogbm90aWZpY2F0aW9uIHJlcXVpcmVzIGEgcHJldmlvdXMgb3BlbiBub3RpZmljYXRpb24gdG8gYmUgc2VudC5cbiAqL1xudmFyIERpZENsb3NlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChEaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbikge1xuICAgIERpZENsb3NlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZGlkQ2xvc2UnO1xuICAgIERpZENsb3NlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRDbG9zZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZENsb3NlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENsb3NlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIGRvY3VtZW50IHNhdmUgbm90aWZpY2F0aW9uIGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgd2hlblxuICogdGhlIGRvY3VtZW50IGdvdCBzYXZlZCBpbiB0aGUgY2xpZW50LlxuICovXG52YXIgRGlkU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbikge1xuICAgIERpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kID0gJ3RleHREb2N1bWVudC9kaWRTYXZlJztcbiAgICBEaWRTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKERpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuRGlkU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIFJlcHJlc2VudHMgcmVhc29ucyB3aHkgYSB0ZXh0IGRvY3VtZW50IGlzIHNhdmVkLlxuICovXG52YXIgVGV4dERvY3VtZW50U2F2ZVJlYXNvbjtcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50U2F2ZVJlYXNvbikge1xuICAgIC8qKlxuICAgICAqIE1hbnVhbGx5IHRyaWdnZXJlZCwgZS5nLiBieSB0aGUgdXNlciBwcmVzc2luZyBzYXZlLCBieSBzdGFydGluZyBkZWJ1Z2dpbmcsXG4gICAgICogb3IgYnkgYW4gQVBJIGNhbGwuXG4gICAgICovXG4gICAgVGV4dERvY3VtZW50U2F2ZVJlYXNvbi5NYW51YWwgPSAxO1xuICAgIC8qKlxuICAgICAqIEF1dG9tYXRpYyBhZnRlciBhIGRlbGF5LlxuICAgICAqL1xuICAgIFRleHREb2N1bWVudFNhdmVSZWFzb24uQWZ0ZXJEZWxheSA9IDI7XG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgZWRpdG9yIGxvc3QgZm9jdXMuXG4gICAgICovXG4gICAgVGV4dERvY3VtZW50U2F2ZVJlYXNvbi5Gb2N1c091dCA9IDM7XG59KShUZXh0RG9jdW1lbnRTYXZlUmVhc29uID0gZXhwb3J0cy5UZXh0RG9jdW1lbnRTYXZlUmVhc29uIHx8IChleHBvcnRzLlRleHREb2N1bWVudFNhdmVSZWFzb24gPSB7fSkpO1xuLyoqXG4gKiBBIGRvY3VtZW50IHdpbGwgc2F2ZSBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciBiZWZvcmVcbiAqIHRoZSBkb2N1bWVudCBpcyBhY3R1YWxseSBzYXZlZC5cbiAqL1xudmFyIFdpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChXaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbikge1xuICAgIFdpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvd2lsbFNhdmUnO1xuICAgIFdpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgV2lsbFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShXaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoV2lsbFNhdmVUZXh0RG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLldpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLldpbGxTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogQSBkb2N1bWVudCB3aWxsIHNhdmUgcmVxdWVzdCBpcyBzZW50IGZyb20gdGhlIGNsaWVudCB0byB0aGUgc2VydmVyIGJlZm9yZVxuICogdGhlIGRvY3VtZW50IGlzIGFjdHVhbGx5IHNhdmVkLiBUaGUgcmVxdWVzdCBjYW4gcmV0dXJuIGFuIGFycmF5IG9mIFRleHRFZGl0c1xuICogd2hpY2ggd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSB0ZXh0IGRvY3VtZW50IGJlZm9yZSBpdCBpcyBzYXZlZC4gUGxlYXNlIG5vdGUgdGhhdFxuICogY2xpZW50cyBtaWdodCBkcm9wIHJlc3VsdHMgaWYgY29tcHV0aW5nIHRoZSB0ZXh0IGVkaXRzIHRvb2sgdG9vIGxvbmcgb3IgaWYgYVxuICogc2VydmVyIGNvbnN0YW50bHkgZmFpbHMgb24gdGhpcyByZXF1ZXN0LiBUaGlzIGlzIGRvbmUgdG8ga2VlcCB0aGUgc2F2ZSBmYXN0IGFuZFxuICogcmVsaWFibGUuXG4gKi9cbnZhciBXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3Q7XG4oZnVuY3Rpb24gKFdpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdCkge1xuICAgIFdpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3dpbGxTYXZlV2FpdFVudGlsJztcbiAgICBXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoV2lsbFNhdmVUZXh0RG9jdW1lbnRXYWl0VW50aWxSZXF1ZXN0Lm1ldGhvZCk7XG59KShXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QgPSBleHBvcnRzLldpbGxTYXZlVGV4dERvY3VtZW50V2FpdFVudGlsUmVxdWVzdCB8fCAoZXhwb3J0cy5XaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBUaGUgd2F0Y2hlZCBmaWxlcyBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB3aGVuXG4gKiB0aGUgY2xpZW50IGRldGVjdHMgY2hhbmdlcyB0byBmaWxlIHdhdGNoZWQgYnkgdGhlIGxhbmd1YWdlIGNsaWVudC5cbiAqL1xudmFyIERpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzTm90aWZpY2F0aW9uKSB7XG4gICAgRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzTm90aWZpY2F0aW9uLm1ldGhvZCA9ICd3b3Jrc3BhY2UvZGlkQ2hhbmdlV2F0Y2hlZEZpbGVzJztcbiAgICBEaWRDaGFuZ2VXYXRjaGVkRmlsZXNOb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWRDaGFuZ2VXYXRjaGVkRmlsZXNOb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRDaGFuZ2VXYXRjaGVkRmlsZXNOb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKERpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzTm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENoYW5nZVdhdGNoZWRGaWxlc05vdGlmaWNhdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBmaWxlIGV2ZW50IHR5cGVcbiAqL1xudmFyIEZpbGVDaGFuZ2VUeXBlO1xuKGZ1bmN0aW9uIChGaWxlQ2hhbmdlVHlwZSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBmaWxlIGdvdCBjcmVhdGVkLlxuICAgICAqL1xuICAgIEZpbGVDaGFuZ2VUeXBlLkNyZWF0ZWQgPSAxO1xuICAgIC8qKlxuICAgICAqIFRoZSBmaWxlIGdvdCBjaGFuZ2VkLlxuICAgICAqL1xuICAgIEZpbGVDaGFuZ2VUeXBlLkNoYW5nZWQgPSAyO1xuICAgIC8qKlxuICAgICAqIFRoZSBmaWxlIGdvdCBkZWxldGVkLlxuICAgICAqL1xuICAgIEZpbGVDaGFuZ2VUeXBlLkRlbGV0ZWQgPSAzO1xufSkoRmlsZUNoYW5nZVR5cGUgPSBleHBvcnRzLkZpbGVDaGFuZ2VUeXBlIHx8IChleHBvcnRzLkZpbGVDaGFuZ2VUeXBlID0ge30pKTtcbnZhciBSZWxhdGl2ZVBhdHRlcm47XG4oZnVuY3Rpb24gKFJlbGF0aXZlUGF0dGVybikge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmICh2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS5VUkkuaXMoY2FuZGlkYXRlLmJhc2VVcmkpIHx8IHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xLldvcmtzcGFjZUZvbGRlci5pcyhjYW5kaWRhdGUuYmFzZVVyaSkpICYmIElzLnN0cmluZyhjYW5kaWRhdGUucGF0dGVybik7XG4gICAgfVxuICAgIFJlbGF0aXZlUGF0dGVybi5pcyA9IGlzO1xufSkoUmVsYXRpdmVQYXR0ZXJuID0gZXhwb3J0cy5SZWxhdGl2ZVBhdHRlcm4gfHwgKGV4cG9ydHMuUmVsYXRpdmVQYXR0ZXJuID0ge30pKTtcbnZhciBXYXRjaEtpbmQ7XG4oZnVuY3Rpb24gKFdhdGNoS2luZCkge1xuICAgIC8qKlxuICAgICAqIEludGVyZXN0ZWQgaW4gY3JlYXRlIGV2ZW50cy5cbiAgICAgKi9cbiAgICBXYXRjaEtpbmQuQ3JlYXRlID0gMTtcbiAgICAvKipcbiAgICAgKiBJbnRlcmVzdGVkIGluIGNoYW5nZSBldmVudHNcbiAgICAgKi9cbiAgICBXYXRjaEtpbmQuQ2hhbmdlID0gMjtcbiAgICAvKipcbiAgICAgKiBJbnRlcmVzdGVkIGluIGRlbGV0ZSBldmVudHNcbiAgICAgKi9cbiAgICBXYXRjaEtpbmQuRGVsZXRlID0gNDtcbn0pKFdhdGNoS2luZCA9IGV4cG9ydHMuV2F0Y2hLaW5kIHx8IChleHBvcnRzLldhdGNoS2luZCA9IHt9KSk7XG4vKipcbiAqIERpYWdub3N0aWNzIG5vdGlmaWNhdGlvbiBhcmUgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBzaWduYWxcbiAqIHJlc3VsdHMgb2YgdmFsaWRhdGlvbiBydW5zLlxuICovXG52YXIgUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChQdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb24pIHtcbiAgICBQdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb24ubWV0aG9kID0gJ3RleHREb2N1bWVudC9wdWJsaXNoRGlhZ25vc3RpY3MnO1xuICAgIFB1Ymxpc2hEaWFnbm9zdGljc05vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIFB1Ymxpc2hEaWFnbm9zdGljc05vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKFB1Ymxpc2hEaWFnbm9zdGljc05vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uID0gZXhwb3J0cy5QdWJsaXNoRGlhZ25vc3RpY3NOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogSG93IGEgY29tcGxldGlvbiB3YXMgdHJpZ2dlcmVkXG4gKi9cbnZhciBDb21wbGV0aW9uVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKENvbXBsZXRpb25UcmlnZ2VyS2luZCkge1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBieSB0eXBpbmcgYW4gaWRlbnRpZmllciAoMjR4NyBjb2RlXG4gICAgICogY29tcGxldGUpLCBtYW51YWwgaW52b2NhdGlvbiAoZS5nIEN0cmwrU3BhY2UpIG9yIHZpYSBBUEkuXG4gICAgICovXG4gICAgQ29tcGxldGlvblRyaWdnZXJLaW5kLkludm9rZWQgPSAxO1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRpb24gd2FzIHRyaWdnZXJlZCBieSBhIHRyaWdnZXIgY2hhcmFjdGVyIHNwZWNpZmllZCBieVxuICAgICAqIHRoZSBgdHJpZ2dlckNoYXJhY3RlcnNgIHByb3BlcnRpZXMgb2YgdGhlIGBDb21wbGV0aW9uUmVnaXN0cmF0aW9uT3B0aW9uc2AuXG4gICAgICovXG4gICAgQ29tcGxldGlvblRyaWdnZXJLaW5kLlRyaWdnZXJDaGFyYWN0ZXIgPSAyO1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRpb24gd2FzIHJlLXRyaWdnZXJlZCBhcyBjdXJyZW50IGNvbXBsZXRpb24gbGlzdCBpcyBpbmNvbXBsZXRlXG4gICAgICovXG4gICAgQ29tcGxldGlvblRyaWdnZXJLaW5kLlRyaWdnZXJGb3JJbmNvbXBsZXRlQ29tcGxldGlvbnMgPSAzO1xufSkoQ29tcGxldGlvblRyaWdnZXJLaW5kID0gZXhwb3J0cy5Db21wbGV0aW9uVHJpZ2dlcktpbmQgfHwgKGV4cG9ydHMuQ29tcGxldGlvblRyaWdnZXJLaW5kID0ge30pKTtcbi8qKlxuICogUmVxdWVzdCB0byByZXF1ZXN0IGNvbXBsZXRpb24gYXQgYSBnaXZlbiB0ZXh0IGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgVGV4dERvY3VtZW50UG9zaXRpb259IHRoZSByZXNwb25zZVxuICogaXMgb2YgdHlwZSB7QGxpbmsgQ29tcGxldGlvbkl0ZW0gQ29tcGxldGlvbkl0ZW1bXX0gb3Ige0BsaW5rIENvbXBsZXRpb25MaXN0fVxuICogb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKlxuICogVGhlIHJlcXVlc3QgY2FuIGRlbGF5IHRoZSBjb21wdXRhdGlvbiBvZiB0aGUge0BsaW5rIENvbXBsZXRpb25JdGVtLmRldGFpbCBgZGV0YWlsYH1cbiAqIGFuZCB7QGxpbmsgQ29tcGxldGlvbkl0ZW0uZG9jdW1lbnRhdGlvbiBgZG9jdW1lbnRhdGlvbmB9IHByb3BlcnRpZXMgdG8gdGhlIGBjb21wbGV0aW9uSXRlbS9yZXNvbHZlYFxuICogcmVxdWVzdC4gSG93ZXZlciwgcHJvcGVydGllcyB0aGF0IGFyZSBuZWVkZWQgZm9yIHRoZSBpbml0aWFsIHNvcnRpbmcgYW5kIGZpbHRlcmluZywgbGlrZSBgc29ydFRleHRgLFxuICogYGZpbHRlclRleHRgLCBgaW5zZXJ0VGV4dGAsIGFuZCBgdGV4dEVkaXRgLCBtdXN0IG5vdCBiZSBjaGFuZ2VkIGR1cmluZyByZXNvbHZlLlxuICovXG52YXIgQ29tcGxldGlvblJlcXVlc3Q7XG4oZnVuY3Rpb24gKENvbXBsZXRpb25SZXF1ZXN0KSB7XG4gICAgQ29tcGxldGlvblJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9jb21wbGV0aW9uJztcbiAgICBDb21wbGV0aW9uUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIENvbXBsZXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKENvbXBsZXRpb25SZXF1ZXN0Lm1ldGhvZCk7XG59KShDb21wbGV0aW9uUmVxdWVzdCA9IGV4cG9ydHMuQ29tcGxldGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuQ29tcGxldGlvblJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBSZXF1ZXN0IHRvIHJlc29sdmUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgYSBnaXZlbiBjb21wbGV0aW9uIGl0ZW0uVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIENvbXBsZXRpb25JdGVtfSB0aGUgcmVzcG9uc2VcbiAqIGlzIG9mIHR5cGUge0BsaW5rIENvbXBsZXRpb25JdGVtfSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIENvbXBsZXRpb25SZXNvbHZlUmVxdWVzdDtcbihmdW5jdGlvbiAoQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0KSB7XG4gICAgQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0Lm1ldGhvZCA9ICdjb21wbGV0aW9uSXRlbS9yZXNvbHZlJztcbiAgICBDb21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDb21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ29tcGxldGlvblJlc29sdmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShDb21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QgPSBleHBvcnRzLkNvbXBsZXRpb25SZXNvbHZlUmVxdWVzdCB8fCAoZXhwb3J0cy5Db21wbGV0aW9uUmVzb2x2ZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBSZXF1ZXN0IHRvIHJlcXVlc3QgaG92ZXIgaW5mb3JtYXRpb24gYXQgYSBnaXZlbiB0ZXh0IGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgVGV4dERvY3VtZW50UG9zaXRpb259IHRoZSByZXNwb25zZSBpcyBvZlxuICogdHlwZSB7QGxpbmsgSG92ZXJ9IG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgSG92ZXJSZXF1ZXN0O1xuKGZ1bmN0aW9uIChIb3ZlclJlcXVlc3QpIHtcbiAgICBIb3ZlclJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9ob3Zlcic7XG4gICAgSG92ZXJSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgSG92ZXJSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKEhvdmVyUmVxdWVzdC5tZXRob2QpO1xufSkoSG92ZXJSZXF1ZXN0ID0gZXhwb3J0cy5Ib3ZlclJlcXVlc3QgfHwgKGV4cG9ydHMuSG92ZXJSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogSG93IGEgc2lnbmF0dXJlIGhlbHAgd2FzIHRyaWdnZXJlZC5cbiAqXG4gKiBAc2luY2UgMy4xNS4wXG4gKi9cbnZhciBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQ7XG4oZnVuY3Rpb24gKFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZCkge1xuICAgIC8qKlxuICAgICAqIFNpZ25hdHVyZSBoZWxwIHdhcyBpbnZva2VkIG1hbnVhbGx5IGJ5IHRoZSB1c2VyIG9yIGJ5IGEgY29tbWFuZC5cbiAgICAgKi9cbiAgICBTaWduYXR1cmVIZWxwVHJpZ2dlcktpbmQuSW52b2tlZCA9IDE7XG4gICAgLyoqXG4gICAgICogU2lnbmF0dXJlIGhlbHAgd2FzIHRyaWdnZXJlZCBieSBhIHRyaWdnZXIgY2hhcmFjdGVyLlxuICAgICAqL1xuICAgIFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZC5UcmlnZ2VyQ2hhcmFjdGVyID0gMjtcbiAgICAvKipcbiAgICAgKiBTaWduYXR1cmUgaGVscCB3YXMgdHJpZ2dlcmVkIGJ5IHRoZSBjdXJzb3IgbW92aW5nIG9yIGJ5IHRoZSBkb2N1bWVudCBjb250ZW50IGNoYW5naW5nLlxuICAgICAqL1xuICAgIFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZC5Db250ZW50Q2hhbmdlID0gMztcbn0pKFNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZCA9IGV4cG9ydHMuU2lnbmF0dXJlSGVscFRyaWdnZXJLaW5kIHx8IChleHBvcnRzLlNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZCA9IHt9KSk7XG52YXIgU2lnbmF0dXJlSGVscFJlcXVlc3Q7XG4oZnVuY3Rpb24gKFNpZ25hdHVyZUhlbHBSZXF1ZXN0KSB7XG4gICAgU2lnbmF0dXJlSGVscFJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9zaWduYXR1cmVIZWxwJztcbiAgICBTaWduYXR1cmVIZWxwUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFNpZ25hdHVyZUhlbHBSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFNpZ25hdHVyZUhlbHBSZXF1ZXN0Lm1ldGhvZCk7XG59KShTaWduYXR1cmVIZWxwUmVxdWVzdCA9IGV4cG9ydHMuU2lnbmF0dXJlSGVscFJlcXVlc3QgfHwgKGV4cG9ydHMuU2lnbmF0dXJlSGVscFJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSB0aGUgZGVmaW5pdGlvbiBsb2NhdGlvbiBvZiBhIHN5bWJvbCBhdCBhIGdpdmVuIHRleHRcbiAqIGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZiB0eXBlIFtUZXh0RG9jdW1lbnRQb3NpdGlvbl1cbiAqICgjVGV4dERvY3VtZW50UG9zaXRpb24pIHRoZSByZXNwb25zZSBpcyBvZiBlaXRoZXIgdHlwZSB7QGxpbmsgRGVmaW5pdGlvbn1cbiAqIG9yIGEgdHlwZWQgYXJyYXkgb2Yge0BsaW5rIERlZmluaXRpb25MaW5rfSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXNcbiAqIHRvIHN1Y2guXG4gKi9cbnZhciBEZWZpbml0aW9uUmVxdWVzdDtcbihmdW5jdGlvbiAoRGVmaW5pdGlvblJlcXVlc3QpIHtcbiAgICBEZWZpbml0aW9uUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L2RlZmluaXRpb24nO1xuICAgIERlZmluaXRpb25SZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGVmaW5pdGlvblJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoRGVmaW5pdGlvblJlcXVlc3QubWV0aG9kKTtcbn0pKERlZmluaXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5EZWZpbml0aW9uUmVxdWVzdCB8fCAoZXhwb3J0cy5EZWZpbml0aW9uUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byByZXNvbHZlIHByb2plY3Qtd2lkZSByZWZlcmVuY2VzIGZvciB0aGUgc3ltYm9sIGRlbm90ZWRcbiAqIGJ5IHRoZSBnaXZlbiB0ZXh0IGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZlxuICogdHlwZSB7QGxpbmsgUmVmZXJlbmNlUGFyYW1zfSB0aGUgcmVzcG9uc2UgaXMgb2YgdHlwZVxuICoge0BsaW5rIExvY2F0aW9uIExvY2F0aW9uW119IG9yIGEgVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgUmVmZXJlbmNlc1JlcXVlc3Q7XG4oZnVuY3Rpb24gKFJlZmVyZW5jZXNSZXF1ZXN0KSB7XG4gICAgUmVmZXJlbmNlc1JlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9yZWZlcmVuY2VzJztcbiAgICBSZWZlcmVuY2VzUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFJlZmVyZW5jZXNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFJlZmVyZW5jZXNSZXF1ZXN0Lm1ldGhvZCk7XG59KShSZWZlcmVuY2VzUmVxdWVzdCA9IGV4cG9ydHMuUmVmZXJlbmNlc1JlcXVlc3QgfHwgKGV4cG9ydHMuUmVmZXJlbmNlc1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBSZXF1ZXN0IHRvIHJlc29sdmUgYSB7QGxpbmsgRG9jdW1lbnRIaWdobGlnaHR9IGZvciBhIGdpdmVuXG4gKiB0ZXh0IGRvY3VtZW50IHBvc2l0aW9uLiBUaGUgcmVxdWVzdCdzIHBhcmFtZXRlciBpcyBvZiB0eXBlIFtUZXh0RG9jdW1lbnRQb3NpdGlvbl1cbiAqICgjVGV4dERvY3VtZW50UG9zaXRpb24pIHRoZSByZXF1ZXN0IHJlc3BvbnNlIGlzIG9mIHR5cGUgW0RvY3VtZW50SGlnaGxpZ2h0W11dXG4gKiAoI0RvY3VtZW50SGlnaGxpZ2h0KSBvciBhIFRoZW5hYmxlIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIERvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdDtcbihmdW5jdGlvbiAoRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0KSB7XG4gICAgRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRIaWdobGlnaHQnO1xuICAgIERvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShEb2N1bWVudEhpZ2hsaWdodFJlcXVlc3QubWV0aG9kKTtcbn0pKERvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRIaWdobGlnaHRSZXF1ZXN0IHx8IChleHBvcnRzLkRvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBsaXN0IGFsbCBzeW1ib2xzIGZvdW5kIGluIGEgZ2l2ZW4gdGV4dCBkb2N1bWVudC4gVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIFRleHREb2N1bWVudElkZW50aWZpZXJ9IHRoZVxuICogcmVzcG9uc2UgaXMgb2YgdHlwZSB7QGxpbmsgU3ltYm9sSW5mb3JtYXRpb24gU3ltYm9sSW5mb3JtYXRpb25bXX0gb3IgYSBUaGVuYWJsZVxuICogdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgRG9jdW1lbnRTeW1ib2xSZXF1ZXN0O1xuKGZ1bmN0aW9uIChEb2N1bWVudFN5bWJvbFJlcXVlc3QpIHtcbiAgICBEb2N1bWVudFN5bWJvbFJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9kb2N1bWVudFN5bWJvbCc7XG4gICAgRG9jdW1lbnRTeW1ib2xSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRG9jdW1lbnRTeW1ib2xSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50U3ltYm9sUmVxdWVzdC5tZXRob2QpO1xufSkoRG9jdW1lbnRTeW1ib2xSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudFN5bWJvbFJlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRTeW1ib2xSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHByb3ZpZGUgY29tbWFuZHMgZm9yIHRoZSBnaXZlbiB0ZXh0IGRvY3VtZW50IGFuZCByYW5nZS5cbiAqL1xudmFyIENvZGVBY3Rpb25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChDb2RlQWN0aW9uUmVxdWVzdCkge1xuICAgIENvZGVBY3Rpb25SZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvY29kZUFjdGlvbic7XG4gICAgQ29kZUFjdGlvblJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDb2RlQWN0aW9uUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShDb2RlQWN0aW9uUmVxdWVzdC5tZXRob2QpO1xufSkoQ29kZUFjdGlvblJlcXVlc3QgPSBleHBvcnRzLkNvZGVBY3Rpb25SZXF1ZXN0IHx8IChleHBvcnRzLkNvZGVBY3Rpb25SZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogUmVxdWVzdCB0byByZXNvbHZlIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gZm9yIGEgZ2l2ZW4gY29kZSBhY3Rpb24uVGhlIHJlcXVlc3Qnc1xuICogcGFyYW1ldGVyIGlzIG9mIHR5cGUge0BsaW5rIENvZGVBY3Rpb259IHRoZSByZXNwb25zZVxuICogaXMgb2YgdHlwZSB7QGxpbmsgQ29kZUFjdGlvbn0gb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBDb2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKENvZGVBY3Rpb25SZXNvbHZlUmVxdWVzdCkge1xuICAgIENvZGVBY3Rpb25SZXNvbHZlUmVxdWVzdC5tZXRob2QgPSAnY29kZUFjdGlvbi9yZXNvbHZlJztcbiAgICBDb2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBDb2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoQ29kZUFjdGlvblJlc29sdmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShDb2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QgPSBleHBvcnRzLkNvZGVBY3Rpb25SZXNvbHZlUmVxdWVzdCB8fCAoZXhwb3J0cy5Db2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gbGlzdCBwcm9qZWN0LXdpZGUgc3ltYm9scyBtYXRjaGluZyB0aGUgcXVlcnkgc3RyaW5nIGdpdmVuXG4gKiBieSB0aGUge0BsaW5rIFdvcmtzcGFjZVN5bWJvbFBhcmFtc30uIFRoZSByZXNwb25zZSBpc1xuICogb2YgdHlwZSB7QGxpbmsgU3ltYm9sSW5mb3JtYXRpb24gU3ltYm9sSW5mb3JtYXRpb25bXX0gb3IgYSBUaGVuYWJsZSB0aGF0XG4gKiByZXNvbHZlcyB0byBzdWNoLlxuICpcbiAqIEBzaW5jZSAzLjE3LjAgLSBzdXBwb3J0IGZvciBXb3Jrc3BhY2VTeW1ib2wgaW4gdGhlIHJldHVybmVkIGRhdGEuIENsaWVudHNcbiAqICBuZWVkIHRvIGFkdmVydGlzZSBzdXBwb3J0IGZvciBXb3Jrc3BhY2VTeW1ib2xzIHZpYSB0aGUgY2xpZW50IGNhcGFiaWxpdHlcbiAqICBgd29ya3NwYWNlLnN5bWJvbC5yZXNvbHZlU3VwcG9ydGAuXG4gKlxuICovXG52YXIgV29ya3NwYWNlU3ltYm9sUmVxdWVzdDtcbihmdW5jdGlvbiAoV29ya3NwYWNlU3ltYm9sUmVxdWVzdCkge1xuICAgIFdvcmtzcGFjZVN5bWJvbFJlcXVlc3QubWV0aG9kID0gJ3dvcmtzcGFjZS9zeW1ib2wnO1xuICAgIFdvcmtzcGFjZVN5bWJvbFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBXb3Jrc3BhY2VTeW1ib2xSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFdvcmtzcGFjZVN5bWJvbFJlcXVlc3QubWV0aG9kKTtcbn0pKFdvcmtzcGFjZVN5bWJvbFJlcXVlc3QgPSBleHBvcnRzLldvcmtzcGFjZVN5bWJvbFJlcXVlc3QgfHwgKGV4cG9ydHMuV29ya3NwYWNlU3ltYm9sUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byByZXNvbHZlIHRoZSByYW5nZSBpbnNpZGUgdGhlIHdvcmtzcGFjZVxuICogc3ltYm9sJ3MgbG9jYXRpb24uXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKFdvcmtzcGFjZVN5bWJvbFJlc29sdmVSZXF1ZXN0KSB7XG4gICAgV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QubWV0aG9kID0gJ3dvcmtzcGFjZVN5bWJvbC9yZXNvbHZlJztcbiAgICBXb3Jrc3BhY2VTeW1ib2xSZXNvbHZlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFdvcmtzcGFjZVN5bWJvbFJlc29sdmVSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFdvcmtzcGFjZVN5bWJvbFJlc29sdmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShXb3Jrc3BhY2VTeW1ib2xSZXNvbHZlUmVxdWVzdCA9IGV4cG9ydHMuV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QgfHwgKGV4cG9ydHMuV29ya3NwYWNlU3ltYm9sUmVzb2x2ZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcHJvdmlkZSBjb2RlIGxlbnMgZm9yIHRoZSBnaXZlbiB0ZXh0IGRvY3VtZW50LlxuICovXG52YXIgQ29kZUxlbnNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChDb2RlTGVuc1JlcXVlc3QpIHtcbiAgICBDb2RlTGVuc1JlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9jb2RlTGVucyc7XG4gICAgQ29kZUxlbnNSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgQ29kZUxlbnNSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKENvZGVMZW5zUmVxdWVzdC5tZXRob2QpO1xufSkoQ29kZUxlbnNSZXF1ZXN0ID0gZXhwb3J0cy5Db2RlTGVuc1JlcXVlc3QgfHwgKGV4cG9ydHMuQ29kZUxlbnNSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgYSBjb21tYW5kIGZvciBhIGdpdmVuIGNvZGUgbGVucy5cbiAqL1xudmFyIENvZGVMZW5zUmVzb2x2ZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKENvZGVMZW5zUmVzb2x2ZVJlcXVlc3QpIHtcbiAgICBDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0Lm1ldGhvZCA9ICdjb2RlTGVucy9yZXNvbHZlJztcbiAgICBDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgQ29kZUxlbnNSZXNvbHZlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShDb2RlTGVuc1Jlc29sdmVSZXF1ZXN0ID0gZXhwb3J0cy5Db2RlTGVuc1Jlc29sdmVSZXF1ZXN0IHx8IChleHBvcnRzLkNvZGVMZW5zUmVzb2x2ZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVmcmVzaCBhbGwgY29kZSBhY3Rpb25zXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgQ29kZUxlbnNSZWZyZXNoUmVxdWVzdDtcbihmdW5jdGlvbiAoQ29kZUxlbnNSZWZyZXNoUmVxdWVzdCkge1xuICAgIENvZGVMZW5zUmVmcmVzaFJlcXVlc3QubWV0aG9kID0gYHdvcmtzcGFjZS9jb2RlTGVucy9yZWZyZXNoYDtcbiAgICBDb2RlTGVuc1JlZnJlc2hSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgQ29kZUxlbnNSZWZyZXNoUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZTAoQ29kZUxlbnNSZWZyZXNoUmVxdWVzdC5tZXRob2QpO1xufSkoQ29kZUxlbnNSZWZyZXNoUmVxdWVzdCA9IGV4cG9ydHMuQ29kZUxlbnNSZWZyZXNoUmVxdWVzdCB8fCAoZXhwb3J0cy5Db2RlTGVuc1JlZnJlc2hSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHByb3ZpZGUgZG9jdW1lbnQgbGlua3NcbiAqL1xudmFyIERvY3VtZW50TGlua1JlcXVlc3Q7XG4oZnVuY3Rpb24gKERvY3VtZW50TGlua1JlcXVlc3QpIHtcbiAgICBEb2N1bWVudExpbmtSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRMaW5rJztcbiAgICBEb2N1bWVudExpbmtSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRG9jdW1lbnRMaW5rUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShEb2N1bWVudExpbmtSZXF1ZXN0Lm1ldGhvZCk7XG59KShEb2N1bWVudExpbmtSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudExpbmtSZXF1ZXN0IHx8IChleHBvcnRzLkRvY3VtZW50TGlua1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBSZXF1ZXN0IHRvIHJlc29sdmUgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgYSBnaXZlbiBkb2N1bWVudCBsaW5rLiBUaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgRG9jdW1lbnRMaW5rfSB0aGUgcmVzcG9uc2VcbiAqIGlzIG9mIHR5cGUge0BsaW5rIERvY3VtZW50TGlua30gb3IgYSBUaGVuYWJsZSB0aGF0IHJlc29sdmVzIHRvIHN1Y2guXG4gKi9cbnZhciBEb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdDtcbihmdW5jdGlvbiAoRG9jdW1lbnRMaW5rUmVzb2x2ZVJlcXVlc3QpIHtcbiAgICBEb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdC5tZXRob2QgPSAnZG9jdW1lbnRMaW5rL3Jlc29sdmUnO1xuICAgIERvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRG9jdW1lbnRMaW5rUmVzb2x2ZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoRG9jdW1lbnRMaW5rUmVzb2x2ZVJlcXVlc3QubWV0aG9kKTtcbn0pKERvY3VtZW50TGlua1Jlc29sdmVSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdCB8fCAoZXhwb3J0cy5Eb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byB0byBmb3JtYXQgYSB3aG9sZSBkb2N1bWVudC5cbiAqL1xudmFyIERvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3Q7XG4oZnVuY3Rpb24gKERvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3QpIHtcbiAgICBEb2N1bWVudEZvcm1hdHRpbmdSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvZm9ybWF0dGluZyc7XG4gICAgRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdC5tZXRob2QpO1xufSkoRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdCA9IGV4cG9ydHMuRG9jdW1lbnRGb3JtYXR0aW5nUmVxdWVzdCB8fCAoZXhwb3J0cy5Eb2N1bWVudEZvcm1hdHRpbmdSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHRvIGZvcm1hdCBhIHJhbmdlIGluIGEgZG9jdW1lbnQuXG4gKi9cbnZhciBEb2N1bWVudFJhbmdlRm9ybWF0dGluZ1JlcXVlc3Q7XG4oZnVuY3Rpb24gKERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdCkge1xuICAgIERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3JhbmdlRm9ybWF0dGluZyc7XG4gICAgRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdC5tZXRob2QpO1xufSkoRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0ID0gZXhwb3J0cy5Eb2N1bWVudFJhbmdlRm9ybWF0dGluZ1JlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIGZvcm1hdCBhIGRvY3VtZW50IG9uIHR5cGUuXG4gKi9cbnZhciBEb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0O1xuKGZ1bmN0aW9uIChEb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0KSB7XG4gICAgRG9jdW1lbnRPblR5cGVGb3JtYXR0aW5nUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L29uVHlwZUZvcm1hdHRpbmcnO1xuICAgIERvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEb2N1bWVudE9uVHlwZUZvcm1hdHRpbmdSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKERvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QubWV0aG9kKTtcbn0pKERvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QgPSBleHBvcnRzLkRvY3VtZW50T25UeXBlRm9ybWF0dGluZ1JlcXVlc3QgfHwgKGV4cG9ydHMuRG9jdW1lbnRPblR5cGVGb3JtYXR0aW5nUmVxdWVzdCA9IHt9KSk7XG4vLy0tLS0gUmVuYW1lIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnZhciBQcmVwYXJlU3VwcG9ydERlZmF1bHRCZWhhdmlvcjtcbihmdW5jdGlvbiAoUHJlcGFyZVN1cHBvcnREZWZhdWx0QmVoYXZpb3IpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY2xpZW50J3MgZGVmYXVsdCBiZWhhdmlvciBpcyB0byBzZWxlY3QgdGhlIGlkZW50aWZpZXJcbiAgICAgKiBhY2NvcmRpbmcgdGhlIHRvIGxhbmd1YWdlJ3Mgc3ludGF4IHJ1bGUuXG4gICAgICovXG4gICAgUHJlcGFyZVN1cHBvcnREZWZhdWx0QmVoYXZpb3IuSWRlbnRpZmllciA9IDE7XG59KShQcmVwYXJlU3VwcG9ydERlZmF1bHRCZWhhdmlvciA9IGV4cG9ydHMuUHJlcGFyZVN1cHBvcnREZWZhdWx0QmVoYXZpb3IgfHwgKGV4cG9ydHMuUHJlcGFyZVN1cHBvcnREZWZhdWx0QmVoYXZpb3IgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVuYW1lIGEgc3ltYm9sLlxuICovXG52YXIgUmVuYW1lUmVxdWVzdDtcbihmdW5jdGlvbiAoUmVuYW1lUmVxdWVzdCkge1xuICAgIFJlbmFtZVJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9yZW5hbWUnO1xuICAgIFJlbmFtZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBSZW5hbWVSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFJlbmFtZVJlcXVlc3QubWV0aG9kKTtcbn0pKFJlbmFtZVJlcXVlc3QgPSBleHBvcnRzLlJlbmFtZVJlcXVlc3QgfHwgKGV4cG9ydHMuUmVuYW1lUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byB0ZXN0IGFuZCBwZXJmb3JtIHRoZSBzZXR1cCBuZWNlc3NhcnkgZm9yIGEgcmVuYW1lLlxuICpcbiAqIEBzaW5jZSAzLjE2IC0gc3VwcG9ydCBmb3IgZGVmYXVsdCBiZWhhdmlvclxuICovXG52YXIgUHJlcGFyZVJlbmFtZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKFByZXBhcmVSZW5hbWVSZXF1ZXN0KSB7XG4gICAgUHJlcGFyZVJlbmFtZVJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9wcmVwYXJlUmVuYW1lJztcbiAgICBQcmVwYXJlUmVuYW1lUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFByZXBhcmVSZW5hbWVSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFByZXBhcmVSZW5hbWVSZXF1ZXN0Lm1ldGhvZCk7XG59KShQcmVwYXJlUmVuYW1lUmVxdWVzdCA9IGV4cG9ydHMuUHJlcGFyZVJlbmFtZVJlcXVlc3QgfHwgKGV4cG9ydHMuUHJlcGFyZVJlbmFtZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3Qgc2VuZCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB0byBleGVjdXRlIGEgY29tbWFuZC4gVGhlIHJlcXVlc3QgbWlnaHQgcmV0dXJuXG4gKiBhIHdvcmtzcGFjZSBlZGl0IHdoaWNoIHRoZSBjbGllbnQgd2lsbCBhcHBseSB0byB0aGUgd29ya3NwYWNlLlxuICovXG52YXIgRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0O1xuKGZ1bmN0aW9uIChFeGVjdXRlQ29tbWFuZFJlcXVlc3QpIHtcbiAgICBFeGVjdXRlQ29tbWFuZFJlcXVlc3QubWV0aG9kID0gJ3dvcmtzcGFjZS9leGVjdXRlQ29tbWFuZCc7XG4gICAgRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKEV4ZWN1dGVDb21tYW5kUmVxdWVzdC5tZXRob2QpO1xufSkoRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0ID0gZXhwb3J0cy5FeGVjdXRlQ29tbWFuZFJlcXVlc3QgfHwgKGV4cG9ydHMuRXhlY3V0ZUNvbW1hbmRSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQSByZXF1ZXN0IHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgdG8gbW9kaWZpZWQgY2VydGFpbiByZXNvdXJjZXMuXG4gKi9cbnZhciBBcHBseVdvcmtzcGFjZUVkaXRSZXF1ZXN0O1xuKGZ1bmN0aW9uIChBcHBseVdvcmtzcGFjZUVkaXRSZXF1ZXN0KSB7XG4gICAgQXBwbHlXb3Jrc3BhY2VFZGl0UmVxdWVzdC5tZXRob2QgPSAnd29ya3NwYWNlL2FwcGx5RWRpdCc7XG4gICAgQXBwbHlXb3Jrc3BhY2VFZGl0UmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLnNlcnZlclRvQ2xpZW50O1xuICAgIEFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoJ3dvcmtzcGFjZS9hcHBseUVkaXQnKTtcbn0pKEFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QgPSBleHBvcnRzLkFwcGx5V29ya3NwYWNlRWRpdFJlcXVlc3QgfHwgKGV4cG9ydHMuQXBwbHlXb3Jrc3BhY2VFZGl0UmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDIyNDk6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5MaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byBwcm92aWRlIHJhbmdlcyB0aGF0IGNhbiBiZSBlZGl0ZWQgdG9nZXRoZXIuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdDtcbihmdW5jdGlvbiAoTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdCkge1xuICAgIExpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9saW5rZWRFZGl0aW5nUmFuZ2UnO1xuICAgIExpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBMaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKExpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3QubWV0aG9kKTtcbn0pKExpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3QgPSBleHBvcnRzLkxpbmtlZEVkaXRpbmdSYW5nZVJlcXVlc3QgfHwgKGV4cG9ydHMuTGlua2VkRWRpdGluZ1JhbmdlUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDc2ODQ6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuTW9uaWtlclJlcXVlc3QgPSBleHBvcnRzLk1vbmlrZXJLaW5kID0gZXhwb3J0cy5VbmlxdWVuZXNzTGV2ZWwgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogTW9uaWtlciB1bmlxdWVuZXNzIGxldmVsIHRvIGRlZmluZSBzY29wZSBvZiB0aGUgbW9uaWtlci5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBVbmlxdWVuZXNzTGV2ZWw7XG4oZnVuY3Rpb24gKFVuaXF1ZW5lc3NMZXZlbCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBtb25pa2VyIGlzIG9ubHkgdW5pcXVlIGluc2lkZSBhIGRvY3VtZW50XG4gICAgICovXG4gICAgVW5pcXVlbmVzc0xldmVsLmRvY3VtZW50ID0gJ2RvY3VtZW50JztcbiAgICAvKipcbiAgICAgKiBUaGUgbW9uaWtlciBpcyB1bmlxdWUgaW5zaWRlIGEgcHJvamVjdCBmb3Igd2hpY2ggYSBkdW1wIGdvdCBjcmVhdGVkXG4gICAgICovXG4gICAgVW5pcXVlbmVzc0xldmVsLnByb2plY3QgPSAncHJvamVjdCc7XG4gICAgLyoqXG4gICAgICogVGhlIG1vbmlrZXIgaXMgdW5pcXVlIGluc2lkZSB0aGUgZ3JvdXAgdG8gd2hpY2ggYSBwcm9qZWN0IGJlbG9uZ3NcbiAgICAgKi9cbiAgICBVbmlxdWVuZXNzTGV2ZWwuZ3JvdXAgPSAnZ3JvdXAnO1xuICAgIC8qKlxuICAgICAqIFRoZSBtb25pa2VyIGlzIHVuaXF1ZSBpbnNpZGUgdGhlIG1vbmlrZXIgc2NoZW1lLlxuICAgICAqL1xuICAgIFVuaXF1ZW5lc3NMZXZlbC5zY2hlbWUgPSAnc2NoZW1lJztcbiAgICAvKipcbiAgICAgKiBUaGUgbW9uaWtlciBpcyBnbG9iYWxseSB1bmlxdWVcbiAgICAgKi9cbiAgICBVbmlxdWVuZXNzTGV2ZWwuZ2xvYmFsID0gJ2dsb2JhbCc7XG59KShVbmlxdWVuZXNzTGV2ZWwgPSBleHBvcnRzLlVuaXF1ZW5lc3NMZXZlbCB8fCAoZXhwb3J0cy5VbmlxdWVuZXNzTGV2ZWwgPSB7fSkpO1xuLyoqXG4gKiBUaGUgbW9uaWtlciBraW5kLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIE1vbmlrZXJLaW5kO1xuKGZ1bmN0aW9uIChNb25pa2VyS2luZCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBtb25pa2VyIHJlcHJlc2VudCBhIHN5bWJvbCB0aGF0IGlzIGltcG9ydGVkIGludG8gYSBwcm9qZWN0XG4gICAgICovXG4gICAgTW9uaWtlcktpbmQuJGltcG9ydCA9ICdpbXBvcnQnO1xuICAgIC8qKlxuICAgICAqIFRoZSBtb25pa2VyIHJlcHJlc2VudHMgYSBzeW1ib2wgdGhhdCBpcyBleHBvcnRlZCBmcm9tIGEgcHJvamVjdFxuICAgICAqL1xuICAgIE1vbmlrZXJLaW5kLiRleHBvcnQgPSAnZXhwb3J0JztcbiAgICAvKipcbiAgICAgKiBUaGUgbW9uaWtlciByZXByZXNlbnRzIGEgc3ltYm9sIHRoYXQgaXMgbG9jYWwgdG8gYSBwcm9qZWN0IChlLmcuIGEgbG9jYWxcbiAgICAgKiB2YXJpYWJsZSBvZiBhIGZ1bmN0aW9uLCBhIGNsYXNzIG5vdCB2aXNpYmxlIG91dHNpZGUgdGhlIHByb2plY3QsIC4uLilcbiAgICAgKi9cbiAgICBNb25pa2VyS2luZC5sb2NhbCA9ICdsb2NhbCc7XG59KShNb25pa2VyS2luZCA9IGV4cG9ydHMuTW9uaWtlcktpbmQgfHwgKGV4cG9ydHMuTW9uaWtlcktpbmQgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gZ2V0IHRoZSBtb25pa2VyIG9mIGEgc3ltYm9sIGF0IGEgZ2l2ZW4gdGV4dCBkb2N1bWVudCBwb3NpdGlvbi5cbiAqIFRoZSByZXF1ZXN0IHBhcmFtZXRlciBpcyBvZiB0eXBlIHtAbGluayBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtc30uXG4gKiBUaGUgcmVzcG9uc2UgaXMgb2YgdHlwZSB7QGxpbmsgTW9uaWtlciBNb25pa2VyW119IG9yIGBudWxsYC5cbiAqL1xudmFyIE1vbmlrZXJSZXF1ZXN0O1xuKGZ1bmN0aW9uIChNb25pa2VyUmVxdWVzdCkge1xuICAgIE1vbmlrZXJSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvbW9uaWtlcic7XG4gICAgTW9uaWtlclJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBNb25pa2VyUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShNb25pa2VyUmVxdWVzdC5tZXRob2QpO1xufSkoTW9uaWtlclJlcXVlc3QgPSBleHBvcnRzLk1vbmlrZXJSZXF1ZXN0IHx8IChleHBvcnRzLk1vbmlrZXJSZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDc5Mjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5EaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5Ob3RlYm9va0NlbGxBcnJheUNoYW5nZSA9IGV4cG9ydHMuRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLk5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZSA9IGV4cG9ydHMuTm90ZWJvb2tEb2N1bWVudCA9IGV4cG9ydHMuTm90ZWJvb2tDZWxsID0gZXhwb3J0cy5FeGVjdXRpb25TdW1tYXJ5ID0gZXhwb3J0cy5Ob3RlYm9va0NlbGxLaW5kID0gdm9pZCAwO1xuY29uc3QgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3MTcpO1xuY29uc3QgSXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2MzMpO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgbm90ZWJvb2sgY2VsbCBraW5kLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIE5vdGVib29rQ2VsbEtpbmQ7XG4oZnVuY3Rpb24gKE5vdGVib29rQ2VsbEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBBIG1hcmt1cC1jZWxsIGlzIGZvcm1hdHRlZCBzb3VyY2UgdGhhdCBpcyB1c2VkIGZvciBkaXNwbGF5LlxuICAgICAqL1xuICAgIE5vdGVib29rQ2VsbEtpbmQuTWFya3VwID0gMTtcbiAgICAvKipcbiAgICAgKiBBIGNvZGUtY2VsbCBpcyBzb3VyY2UgY29kZS5cbiAgICAgKi9cbiAgICBOb3RlYm9va0NlbGxLaW5kLkNvZGUgPSAyO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMSB8fCB2YWx1ZSA9PT0gMjtcbiAgICB9XG4gICAgTm90ZWJvb2tDZWxsS2luZC5pcyA9IGlzO1xufSkoTm90ZWJvb2tDZWxsS2luZCA9IGV4cG9ydHMuTm90ZWJvb2tDZWxsS2luZCB8fCAoZXhwb3J0cy5Ob3RlYm9va0NlbGxLaW5kID0ge30pKTtcbnZhciBFeGVjdXRpb25TdW1tYXJ5O1xuKGZ1bmN0aW9uIChFeGVjdXRpb25TdW1tYXJ5KSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKGV4ZWN1dGlvbk9yZGVyLCBzdWNjZXNzKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgZXhlY3V0aW9uT3JkZXIgfTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MgPT09IHRydWUgfHwgc3VjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJlc3VsdC5zdWNjZXNzID0gc3VjY2VzcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBFeGVjdXRpb25TdW1tYXJ5LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS51aW50ZWdlci5pcyhjYW5kaWRhdGUuZXhlY3V0aW9uT3JkZXIpICYmIChjYW5kaWRhdGUuc3VjY2VzcyA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLnN1Y2Nlc3MpKTtcbiAgICB9XG4gICAgRXhlY3V0aW9uU3VtbWFyeS5pcyA9IGlzO1xuICAgIGZ1bmN0aW9uIGVxdWFscyhvbmUsIG90aGVyKSB7XG4gICAgICAgIGlmIChvbmUgPT09IG90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob25lID09PSBudWxsIHx8IG9uZSA9PT0gdW5kZWZpbmVkIHx8IG90aGVyID09PSBudWxsIHx8IG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb25lLmV4ZWN1dGlvbk9yZGVyID09PSBvdGhlci5leGVjdXRpb25PcmRlciAmJiBvbmUuc3VjY2VzcyA9PT0gb3RoZXIuc3VjY2VzcztcbiAgICB9XG4gICAgRXhlY3V0aW9uU3VtbWFyeS5lcXVhbHMgPSBlcXVhbHM7XG59KShFeGVjdXRpb25TdW1tYXJ5ID0gZXhwb3J0cy5FeGVjdXRpb25TdW1tYXJ5IHx8IChleHBvcnRzLkV4ZWN1dGlvblN1bW1hcnkgPSB7fSkpO1xudmFyIE5vdGVib29rQ2VsbDtcbihmdW5jdGlvbiAoTm90ZWJvb2tDZWxsKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKGtpbmQsIGRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiB7IGtpbmQsIGRvY3VtZW50IH07XG4gICAgfVxuICAgIE5vdGVib29rQ2VsbC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgTm90ZWJvb2tDZWxsS2luZC5pcyhjYW5kaWRhdGUua2luZCkgJiYgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEuRG9jdW1lbnRVcmkuaXMoY2FuZGlkYXRlLmRvY3VtZW50KSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5tZXRhZGF0YSA9PT0gdW5kZWZpbmVkIHx8IElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlLm1ldGFkYXRhKSk7XG4gICAgfVxuICAgIE5vdGVib29rQ2VsbC5pcyA9IGlzO1xuICAgIGZ1bmN0aW9uIGRpZmYob25lLCB0d28pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFNldCgpO1xuICAgICAgICBpZiAob25lLmRvY3VtZW50ICE9PSB0d28uZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hZGQoJ2RvY3VtZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9uZS5raW5kICE9PSB0d28ua2luZCkge1xuICAgICAgICAgICAgcmVzdWx0LmFkZCgna2luZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbmUuZXhlY3V0aW9uU3VtbWFyeSAhPT0gdHdvLmV4ZWN1dGlvblN1bW1hcnkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hZGQoJ2V4ZWN1dGlvblN1bW1hcnknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKG9uZS5tZXRhZGF0YSAhPT0gdW5kZWZpbmVkIHx8IHR3by5tZXRhZGF0YSAhPT0gdW5kZWZpbmVkKSAmJiAhZXF1YWxzTWV0YWRhdGEob25lLm1ldGFkYXRhLCB0d28ubWV0YWRhdGEpKSB7XG4gICAgICAgICAgICByZXN1bHQuYWRkKCdtZXRhZGF0YScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgob25lLmV4ZWN1dGlvblN1bW1hcnkgIT09IHVuZGVmaW5lZCB8fCB0d28uZXhlY3V0aW9uU3VtbWFyeSAhPT0gdW5kZWZpbmVkKSAmJiAhRXhlY3V0aW9uU3VtbWFyeS5lcXVhbHMob25lLmV4ZWN1dGlvblN1bW1hcnksIHR3by5leGVjdXRpb25TdW1tYXJ5KSkge1xuICAgICAgICAgICAgcmVzdWx0LmFkZCgnZXhlY3V0aW9uU3VtbWFyeScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIE5vdGVib29rQ2VsbC5kaWZmID0gZGlmZjtcbiAgICBmdW5jdGlvbiBlcXVhbHNNZXRhZGF0YShvbmUsIG90aGVyKSB7XG4gICAgICAgIGlmIChvbmUgPT09IG90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob25lID09PSBudWxsIHx8IG9uZSA9PT0gdW5kZWZpbmVkIHx8IG90aGVyID09PSBudWxsIHx8IG90aGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9uZSAhPT0gdHlwZW9mIG90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvbmUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb25lQXJyYXkgPSBBcnJheS5pc0FycmF5KG9uZSk7XG4gICAgICAgIGNvbnN0IG90aGVyQXJyYXkgPSBBcnJheS5pc0FycmF5KG90aGVyKTtcbiAgICAgICAgaWYgKG9uZUFycmF5ICE9PSBvdGhlckFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9uZUFycmF5ICYmIG90aGVyQXJyYXkpIHtcbiAgICAgICAgICAgIGlmIChvbmUubGVuZ3RoICE9PSBvdGhlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9uZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghZXF1YWxzTWV0YWRhdGEob25lW2ldLCBvdGhlcltpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoSXMub2JqZWN0TGl0ZXJhbChvbmUpICYmIElzLm9iamVjdExpdGVyYWwob3RoZXIpKSB7XG4gICAgICAgICAgICBjb25zdCBvbmVLZXlzID0gT2JqZWN0LmtleXMob25lKTtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyS2V5cyA9IE9iamVjdC5rZXlzKG90aGVyKTtcbiAgICAgICAgICAgIGlmIChvbmVLZXlzLmxlbmd0aCAhPT0gb3RoZXJLZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9uZUtleXMuc29ydCgpO1xuICAgICAgICAgICAgb3RoZXJLZXlzLnNvcnQoKTtcbiAgICAgICAgICAgIGlmICghZXF1YWxzTWV0YWRhdGEob25lS2V5cywgb3RoZXJLZXlzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb25lS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3AgPSBvbmVLZXlzW2ldO1xuICAgICAgICAgICAgICAgIGlmICghZXF1YWxzTWV0YWRhdGEob25lW3Byb3BdLCBvdGhlcltwcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59KShOb3RlYm9va0NlbGwgPSBleHBvcnRzLk5vdGVib29rQ2VsbCB8fCAoZXhwb3J0cy5Ob3RlYm9va0NlbGwgPSB7fSkpO1xudmFyIE5vdGVib29rRG9jdW1lbnQ7XG4oZnVuY3Rpb24gKE5vdGVib29rRG9jdW1lbnQpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUodXJpLCBub3RlYm9va1R5cGUsIHZlcnNpb24sIGNlbGxzKSB7XG4gICAgICAgIHJldHVybiB7IHVyaSwgbm90ZWJvb2tUeXBlLCB2ZXJzaW9uLCBjZWxscyB9O1xuICAgIH1cbiAgICBOb3RlYm9va0RvY3VtZW50LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEuaW50ZWdlci5pcyhjYW5kaWRhdGUudmVyc2lvbikgJiYgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuY2VsbHMsIE5vdGVib29rQ2VsbC5pcyk7XG4gICAgfVxuICAgIE5vdGVib29rRG9jdW1lbnQuaXMgPSBpcztcbn0pKE5vdGVib29rRG9jdW1lbnQgPSBleHBvcnRzLk5vdGVib29rRG9jdW1lbnQgfHwgKGV4cG9ydHMuTm90ZWJvb2tEb2N1bWVudCA9IHt9KSk7XG52YXIgTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlO1xuKGZ1bmN0aW9uIChOb3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGUpIHtcbiAgICBOb3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGUubWV0aG9kID0gJ25vdGVib29rRG9jdW1lbnQvc3luYyc7XG4gICAgTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5SZWdpc3RyYXRpb25UeXBlKE5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZS5tZXRob2QpO1xufSkoTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlID0gZXhwb3J0cy5Ob3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGUgfHwgKGV4cG9ydHMuTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlID0ge30pKTtcbi8qKlxuICogQSBub3RpZmljYXRpb24gc2VudCB3aGVuIGEgbm90ZWJvb2sgb3BlbnMuXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb247XG4oZnVuY3Rpb24gKERpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uKSB7XG4gICAgRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kID0gJ25vdGVib29rRG9jdW1lbnQvZGlkT3Blbic7XG4gICAgRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCk7XG4gICAgRGlkT3Blbk5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ucmVnaXN0cmF0aW9uTWV0aG9kID0gTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlLm1ldGhvZDtcbn0pKERpZE9wZW5Ob3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5EaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IHt9KSk7XG52YXIgTm90ZWJvb2tDZWxsQXJyYXlDaGFuZ2U7XG4oZnVuY3Rpb24gKE5vdGVib29rQ2VsbEFycmF5Q2hhbmdlKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEudWludGVnZXIuaXMoY2FuZGlkYXRlLnN0YXJ0KSAmJiB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS51aW50ZWdlci5pcyhjYW5kaWRhdGUuZGVsZXRlQ291bnQpICYmIChjYW5kaWRhdGUuY2VsbHMgPT09IHVuZGVmaW5lZCB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5jZWxscywgTm90ZWJvb2tDZWxsLmlzKSk7XG4gICAgfVxuICAgIE5vdGVib29rQ2VsbEFycmF5Q2hhbmdlLmlzID0gaXM7XG4gICAgZnVuY3Rpb24gY3JlYXRlKHN0YXJ0LCBkZWxldGVDb3VudCwgY2VsbHMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0geyBzdGFydCwgZGVsZXRlQ291bnQgfTtcbiAgICAgICAgaWYgKGNlbGxzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jZWxscyA9IGNlbGxzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIE5vdGVib29rQ2VsbEFycmF5Q2hhbmdlLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKE5vdGVib29rQ2VsbEFycmF5Q2hhbmdlID0gZXhwb3J0cy5Ob3RlYm9va0NlbGxBcnJheUNoYW5nZSB8fCAoZXhwb3J0cy5Ob3RlYm9va0NlbGxBcnJheUNoYW5nZSA9IHt9KSk7XG52YXIgRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbikge1xuICAgIERpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kID0gJ25vdGVib29rRG9jdW1lbnQvZGlkQ2hhbmdlJztcbiAgICBEaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgRGlkQ2hhbmdlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKERpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kKTtcbiAgICBEaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLnJlZ2lzdHJhdGlvbk1ldGhvZCA9IE5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZS5tZXRob2Q7XG59KShEaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5EaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENoYW5nZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBBIG5vdGlmaWNhdGlvbiBzZW50IHdoZW4gYSBub3RlYm9vayBkb2N1bWVudCBpcyBzYXZlZC5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBEaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24pIHtcbiAgICBEaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5tZXRob2QgPSAnbm90ZWJvb2tEb2N1bWVudC9kaWRTYXZlJztcbiAgICBEaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIERpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kKTtcbiAgICBEaWRTYXZlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbi5yZWdpc3RyYXRpb25NZXRob2QgPSBOb3RlYm9va0RvY3VtZW50U3luY1JlZ2lzdHJhdGlvblR5cGUubWV0aG9kO1xufSkoRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24gPSBleHBvcnRzLkRpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZFNhdmVOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uID0ge30pKTtcbi8qKlxuICogQSBub3RpZmljYXRpb24gc2VudCB3aGVuIGEgbm90ZWJvb2sgY2xvc2VzLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIERpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbjtcbihmdW5jdGlvbiAoRGlkQ2xvc2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uKSB7XG4gICAgRGlkQ2xvc2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uLm1ldGhvZCA9ICdub3RlYm9va0RvY3VtZW50L2RpZENsb3NlJztcbiAgICBEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24udHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sTm90aWZpY2F0aW9uVHlwZShEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ubWV0aG9kKTtcbiAgICBEaWRDbG9zZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24ucmVnaXN0cmF0aW9uTWV0aG9kID0gTm90ZWJvb2tEb2N1bWVudFN5bmNSZWdpc3RyYXRpb25UeXBlLm1ldGhvZDtcbn0pKERpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRGlkQ2xvc2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uIHx8IChleHBvcnRzLkRpZENsb3NlTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQxNjY6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3QgPSBleHBvcnRzLldvcmtEb25lUHJvZ3Jlc3MgPSB2b2lkIDA7XG5jb25zdCB2c2NvZGVfanNvbnJwY18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MTEwKTtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xudmFyIFdvcmtEb25lUHJvZ3Jlc3M7XG4oZnVuY3Rpb24gKFdvcmtEb25lUHJvZ3Jlc3MpIHtcbiAgICBXb3JrRG9uZVByb2dyZXNzLnR5cGUgPSBuZXcgdnNjb2RlX2pzb25ycGNfMS5Qcm9ncmVzc1R5cGUoKTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IFdvcmtEb25lUHJvZ3Jlc3MudHlwZTtcbiAgICB9XG4gICAgV29ya0RvbmVQcm9ncmVzcy5pcyA9IGlzO1xufSkoV29ya0RvbmVQcm9ncmVzcyA9IGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzcyB8fCAoZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzID0ge30pKTtcbi8qKlxuICogVGhlIGB3aW5kb3cvd29ya0RvbmVQcm9ncmVzcy9jcmVhdGVgIHJlcXVlc3QgaXMgc2VudCBmcm9tIHRoZSBzZXJ2ZXIgdG8gdGhlIGNsaWVudCB0byBpbml0aWF0ZSBwcm9ncmVzc1xuICogcmVwb3J0aW5nIGZyb20gdGhlIHNlcnZlci5cbiAqL1xudmFyIFdvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0O1xuKGZ1bmN0aW9uIChXb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdCkge1xuICAgIFdvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0Lm1ldGhvZCA9ICd3aW5kb3cvd29ya0RvbmVQcm9ncmVzcy9jcmVhdGUnO1xuICAgIFdvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3QubWV0aG9kKTtcbn0pKFdvcmtEb25lUHJvZ3Jlc3NDcmVhdGVSZXF1ZXN0ID0gZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdCB8fCAoZXhwb3J0cy5Xb3JrRG9uZVByb2dyZXNzQ3JlYXRlUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIFRoZSBgd2luZG93L3dvcmtEb25lUHJvZ3Jlc3MvY2FuY2VsYCBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tICB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgdG8gY2FuY2VsIGEgcHJvZ3Jlc3NcbiAqIGluaXRpYXRlZCBvbiB0aGUgc2VydmVyIHNpZGUuXG4gKi9cbnZhciBXb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChXb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uKSB7XG4gICAgV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbi5tZXRob2QgPSAnd2luZG93L3dvcmtEb25lUHJvZ3Jlc3MvY2FuY2VsJztcbiAgICBXb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uLm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbi50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xOb3RpZmljYXRpb25UeXBlKFdvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb24ubWV0aG9kKTtcbn0pKFdvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb24gPSBleHBvcnRzLldvcmtEb25lUHJvZ3Jlc3NDYW5jZWxOb3RpZmljYXRpb24gfHwgKGV4cG9ydHMuV29ya0RvbmVQcm9ncmVzc0NhbmNlbE5vdGlmaWNhdGlvbiA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE1MzA6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5TZWxlY3Rpb25SYW5nZVJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHByb3ZpZGUgc2VsZWN0aW9uIHJhbmdlcyBpbiBhIGRvY3VtZW50LiBUaGUgcmVxdWVzdCdzXG4gKiBwYXJhbWV0ZXIgaXMgb2YgdHlwZSB7QGxpbmsgU2VsZWN0aW9uUmFuZ2VQYXJhbXN9LCB0aGVcbiAqIHJlc3BvbnNlIGlzIG9mIHR5cGUge0BsaW5rIFNlbGVjdGlvblJhbmdlIFNlbGVjdGlvblJhbmdlW119IG9yIGEgVGhlbmFibGVcbiAqIHRoYXQgcmVzb2x2ZXMgdG8gc3VjaC5cbiAqL1xudmFyIFNlbGVjdGlvblJhbmdlUmVxdWVzdDtcbihmdW5jdGlvbiAoU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0KSB7XG4gICAgU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0Lm1ldGhvZCA9ICd0ZXh0RG9jdW1lbnQvc2VsZWN0aW9uUmFuZ2UnO1xuICAgIFNlbGVjdGlvblJhbmdlUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFNlbGVjdGlvblJhbmdlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShTZWxlY3Rpb25SYW5nZVJlcXVlc3QubWV0aG9kKTtcbn0pKFNlbGVjdGlvblJhbmdlUmVxdWVzdCA9IGV4cG9ydHMuU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0IHx8IChleHBvcnRzLlNlbGVjdGlvblJhbmdlUmVxdWVzdCA9IHt9KSk7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDIwNjc6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsICh7IHZhbHVlOiB0cnVlIH0pKTtcbmV4cG9ydHMuU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdCA9IGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QgPSBleHBvcnRzLlNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0ID0gZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc1JlcXVlc3QgPSBleHBvcnRzLlNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZSA9IGV4cG9ydHMuVG9rZW5Gb3JtYXQgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8vLS0tLS0tLSAndGV4dERvY3VtZW50L3NlbWFudGljVG9rZW5zJyAtLS0tLVxudmFyIFRva2VuRm9ybWF0O1xuKGZ1bmN0aW9uIChUb2tlbkZvcm1hdCkge1xuICAgIFRva2VuRm9ybWF0LlJlbGF0aXZlID0gJ3JlbGF0aXZlJztcbn0pKFRva2VuRm9ybWF0ID0gZXhwb3J0cy5Ub2tlbkZvcm1hdCB8fCAoZXhwb3J0cy5Ub2tlbkZvcm1hdCA9IHt9KSk7XG52YXIgU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlO1xuKGZ1bmN0aW9uIChTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUpIHtcbiAgICBTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUubWV0aG9kID0gJ3RleHREb2N1bWVudC9zZW1hbnRpY1Rva2Vucyc7XG4gICAgU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5SZWdpc3RyYXRpb25UeXBlKFNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZS5tZXRob2QpO1xufSkoU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlID0gZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUgfHwgKGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSZWdpc3RyYXRpb25UeXBlID0ge30pKTtcbi8qKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgU2VtYW50aWNUb2tlbnNSZXF1ZXN0O1xuKGZ1bmN0aW9uIChTZW1hbnRpY1Rva2Vuc1JlcXVlc3QpIHtcbiAgICBTZW1hbnRpY1Rva2Vuc1JlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9zZW1hbnRpY1Rva2Vucy9mdWxsJztcbiAgICBTZW1hbnRpY1Rva2Vuc1JlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBTZW1hbnRpY1Rva2Vuc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoU2VtYW50aWNUb2tlbnNSZXF1ZXN0Lm1ldGhvZCk7XG4gICAgU2VtYW50aWNUb2tlbnNSZXF1ZXN0LnJlZ2lzdHJhdGlvbk1ldGhvZCA9IFNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZS5tZXRob2Q7XG59KShTZW1hbnRpY1Rva2Vuc1JlcXVlc3QgPSBleHBvcnRzLlNlbWFudGljVG9rZW5zUmVxdWVzdCB8fCAoZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBTZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdDtcbihmdW5jdGlvbiAoU2VtYW50aWNUb2tlbnNEZWx0YVJlcXVlc3QpIHtcbiAgICBTZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3NlbWFudGljVG9rZW5zL2Z1bGwvZGVsdGEnO1xuICAgIFNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgU2VtYW50aWNUb2tlbnNEZWx0YVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoU2VtYW50aWNUb2tlbnNEZWx0YVJlcXVlc3QubWV0aG9kKTtcbiAgICBTZW1hbnRpY1Rva2Vuc0RlbHRhUmVxdWVzdC5yZWdpc3RyYXRpb25NZXRob2QgPSBTZW1hbnRpY1Rva2Vuc1JlZ2lzdHJhdGlvblR5cGUubWV0aG9kO1xufSkoU2VtYW50aWNUb2tlbnNEZWx0YVJlcXVlc3QgPSBleHBvcnRzLlNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0IHx8IChleHBvcnRzLlNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0ID0ge30pKTtcbi8qKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKFNlbWFudGljVG9rZW5zUmFuZ2VSZXF1ZXN0KSB7XG4gICAgU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC9zZW1hbnRpY1Rva2Vucy9yYW5nZSc7XG4gICAgU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBTZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShTZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdC5tZXRob2QpO1xuICAgIFNlbWFudGljVG9rZW5zUmFuZ2VSZXF1ZXN0LnJlZ2lzdHJhdGlvbk1ldGhvZCA9IFNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZS5tZXRob2Q7XG59KShTZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdCA9IGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QgfHwgKGV4cG9ydHMuU2VtYW50aWNUb2tlbnNSYW5nZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0O1xuKGZ1bmN0aW9uIChTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0KSB7XG4gICAgU2VtYW50aWNUb2tlbnNSZWZyZXNoUmVxdWVzdC5tZXRob2QgPSBgd29ya3NwYWNlL3NlbWFudGljVG9rZW5zL3JlZnJlc2hgO1xuICAgIFNlbWFudGljVG9rZW5zUmVmcmVzaFJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5zZXJ2ZXJUb0NsaWVudDtcbiAgICBTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlMChTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0Lm1ldGhvZCk7XG59KShTZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0ID0gZXhwb3J0cy5TZW1hbnRpY1Rva2Vuc1JlZnJlc2hSZXF1ZXN0IHx8IChleHBvcnRzLlNlbWFudGljVG9rZW5zUmVmcmVzaFJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0MzMzOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLlNob3dEb2N1bWVudFJlcXVlc3QgPSB2b2lkIDA7XG5jb25zdCBtZXNzYWdlc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NDMxKTtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHNob3cgYSBkb2N1bWVudC4gVGhpcyByZXF1ZXN0IG1pZ2h0IG9wZW4gYW5cbiAqIGV4dGVybmFsIHByb2dyYW0gZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSBvZiB0aGUgVVJJIHRvIG9wZW4uXG4gKiBGb3IgZXhhbXBsZSBhIHJlcXVlc3QgdG8gb3BlbiBgaHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vYFxuICogd2lsbCB2ZXJ5IGxpa2VseSBvcGVuIHRoZSBVUkkgaW4gYSBXRUIgYnJvd3Nlci5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4qL1xudmFyIFNob3dEb2N1bWVudFJlcXVlc3Q7XG4oZnVuY3Rpb24gKFNob3dEb2N1bWVudFJlcXVlc3QpIHtcbiAgICBTaG93RG9jdW1lbnRSZXF1ZXN0Lm1ldGhvZCA9ICd3aW5kb3cvc2hvd0RvY3VtZW50JztcbiAgICBTaG93RG9jdW1lbnRSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgU2hvd0RvY3VtZW50UmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShTaG93RG9jdW1lbnRSZXF1ZXN0Lm1ldGhvZCk7XG59KShTaG93RG9jdW1lbnRSZXF1ZXN0ID0gZXhwb3J0cy5TaG93RG9jdW1lbnRSZXF1ZXN0IHx8IChleHBvcnRzLlNob3dEb2N1bWVudFJlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA5MjY0OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLlR5cGVEZWZpbml0aW9uUmVxdWVzdCA9IHZvaWQgMDtcbmNvbnN0IG1lc3NhZ2VzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0MzEpO1xuLy8gQHRzLWlnbm9yZTogdG8gYXZvaWQgaW5saW5pbmcgTG9jYXRpb0xpbmsgYXMgZHluYW1pYyBpbXBvcnRcbmxldCBfX25vRHluYW1pY0ltcG9ydDtcbi8qKlxuICogQSByZXF1ZXN0IHRvIHJlc29sdmUgdGhlIHR5cGUgZGVmaW5pdGlvbiBsb2NhdGlvbnMgb2YgYSBzeW1ib2wgYXQgYSBnaXZlbiB0ZXh0XG4gKiBkb2N1bWVudCBwb3NpdGlvbi4gVGhlIHJlcXVlc3QncyBwYXJhbWV0ZXIgaXMgb2YgdHlwZSBbVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXNdXG4gKiAoI1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKSB0aGUgcmVzcG9uc2UgaXMgb2YgdHlwZSB7QGxpbmsgRGVmaW5pdGlvbn0gb3IgYVxuICogVGhlbmFibGUgdGhhdCByZXNvbHZlcyB0byBzdWNoLlxuICovXG52YXIgVHlwZURlZmluaXRpb25SZXF1ZXN0O1xuKGZ1bmN0aW9uIChUeXBlRGVmaW5pdGlvblJlcXVlc3QpIHtcbiAgICBUeXBlRGVmaW5pdGlvblJlcXVlc3QubWV0aG9kID0gJ3RleHREb2N1bWVudC90eXBlRGVmaW5pdGlvbic7XG4gICAgVHlwZURlZmluaXRpb25SZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgVHlwZURlZmluaXRpb25SZXF1ZXN0LnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbFJlcXVlc3RUeXBlKFR5cGVEZWZpbml0aW9uUmVxdWVzdC5tZXRob2QpO1xufSkoVHlwZURlZmluaXRpb25SZXF1ZXN0ID0gZXhwb3J0cy5UeXBlRGVmaW5pdGlvblJlcXVlc3QgfHwgKGV4cG9ydHMuVHlwZURlZmluaXRpb25SZXF1ZXN0ID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzA2Mjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIFR5cGVGb3gsIE1pY3Jvc29mdCBhbmQgb3RoZXJzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLlR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3QgPSBleHBvcnRzLlR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdCA9IGV4cG9ydHMuVHlwZUhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byByZXN1bHQgYSBgVHlwZUhpZXJhcmNoeUl0ZW1gIGluIGEgZG9jdW1lbnQgYXQgYSBnaXZlbiBwb3NpdGlvbi5cbiAqIENhbiBiZSB1c2VkIGFzIGFuIGlucHV0IHRvIGEgc3VidHlwZXMgb3Igc3VwZXJ0eXBlcyB0eXBlIGhpZXJhcmNoeS5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBUeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3Q7XG4oZnVuY3Rpb24gKFR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCkge1xuICAgIFR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdC5tZXRob2QgPSAndGV4dERvY3VtZW50L3ByZXBhcmVUeXBlSGllcmFyY2h5JztcbiAgICBUeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBUeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUoVHlwZUhpZXJhcmNoeVByZXBhcmVSZXF1ZXN0Lm1ldGhvZCk7XG59KShUeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgPSBleHBvcnRzLlR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCB8fCAoZXhwb3J0cy5UeXBlSGllcmFyY2h5UHJlcGFyZVJlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBBIHJlcXVlc3QgdG8gcmVzb2x2ZSB0aGUgc3VwZXJ0eXBlcyBmb3IgYSBnaXZlbiBgVHlwZUhpZXJhcmNoeUl0ZW1gLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIFR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdDtcbihmdW5jdGlvbiAoVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0KSB7XG4gICAgVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0Lm1ldGhvZCA9ICd0eXBlSGllcmFyY2h5L3N1cGVydHlwZXMnO1xuICAgIFR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdC5tZXNzYWdlRGlyZWN0aW9uID0gbWVzc2FnZXNfMS5NZXNzYWdlRGlyZWN0aW9uLmNsaWVudFRvU2VydmVyO1xuICAgIFR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShUeXBlSGllcmFyY2h5U3VwZXJ0eXBlc1JlcXVlc3QubWV0aG9kKTtcbn0pKFR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdCA9IGV4cG9ydHMuVHlwZUhpZXJhcmNoeVN1cGVydHlwZXNSZXF1ZXN0IHx8IChleHBvcnRzLlR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdCA9IHt9KSk7XG4vKipcbiAqIEEgcmVxdWVzdCB0byByZXNvbHZlIHRoZSBzdWJ0eXBlcyBmb3IgYSBnaXZlbiBgVHlwZUhpZXJhcmNoeUl0ZW1gLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIFR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3Q7XG4oZnVuY3Rpb24gKFR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3QpIHtcbiAgICBUeXBlSGllcmFyY2h5U3VidHlwZXNSZXF1ZXN0Lm1ldGhvZCA9ICd0eXBlSGllcmFyY2h5L3N1YnR5cGVzJztcbiAgICBUeXBlSGllcmFyY2h5U3VidHlwZXNSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uY2xpZW50VG9TZXJ2ZXI7XG4gICAgVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdC50eXBlID0gbmV3IG1lc3NhZ2VzXzEuUHJvdG9jb2xSZXF1ZXN0VHlwZShUeXBlSGllcmFyY2h5U3VidHlwZXNSZXF1ZXN0Lm1ldGhvZCk7XG59KShUeXBlSGllcmFyY2h5U3VidHlwZXNSZXF1ZXN0ID0gZXhwb3J0cy5UeXBlSGllcmFyY2h5U3VidHlwZXNSZXF1ZXN0IHx8IChleHBvcnRzLlR5cGVIaWVyYXJjaHlTdWJ0eXBlc1JlcXVlc3QgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA2ODYwOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCAoeyB2YWx1ZTogdHJ1ZSB9KSk7XG5leHBvcnRzLkRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24gPSBleHBvcnRzLldvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0ID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oODQzMSk7XG4vKipcbiAqIFRoZSBgd29ya3NwYWNlL3dvcmtzcGFjZUZvbGRlcnNgIGlzIHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQgdG8gZmV0Y2ggdGhlIG9wZW4gd29ya3NwYWNlIGZvbGRlcnMuXG4gKi9cbnZhciBXb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdDtcbihmdW5jdGlvbiAoV29ya3NwYWNlRm9sZGVyc1JlcXVlc3QpIHtcbiAgICBXb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdC5tZXRob2QgPSAnd29ya3NwYWNlL3dvcmtzcGFjZUZvbGRlcnMnO1xuICAgIFdvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0Lm1lc3NhZ2VEaXJlY3Rpb24gPSBtZXNzYWdlc18xLk1lc3NhZ2VEaXJlY3Rpb24uc2VydmVyVG9DbGllbnQ7XG4gICAgV29ya3NwYWNlRm9sZGVyc1JlcXVlc3QudHlwZSA9IG5ldyBtZXNzYWdlc18xLlByb3RvY29sUmVxdWVzdFR5cGUwKFdvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0Lm1ldGhvZCk7XG59KShXb3Jrc3BhY2VGb2xkZXJzUmVxdWVzdCA9IGV4cG9ydHMuV29ya3NwYWNlRm9sZGVyc1JlcXVlc3QgfHwgKGV4cG9ydHMuV29ya3NwYWNlRm9sZGVyc1JlcXVlc3QgPSB7fSkpO1xuLyoqXG4gKiBUaGUgYHdvcmtzcGFjZS9kaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzYCBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciB3aGVuIHRoZSB3b3Jrc3BhY2VcbiAqIGZvbGRlciBjb25maWd1cmF0aW9uIGNoYW5nZXMuXG4gKi9cbnZhciBEaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uO1xuKGZ1bmN0aW9uIChEaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uKSB7XG4gICAgRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbi5tZXRob2QgPSAnd29ya3NwYWNlL2RpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnMnO1xuICAgIERpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnNOb3RpZmljYXRpb24ubWVzc2FnZURpcmVjdGlvbiA9IG1lc3NhZ2VzXzEuTWVzc2FnZURpcmVjdGlvbi5jbGllbnRUb1NlcnZlcjtcbiAgICBEaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uLnR5cGUgPSBuZXcgbWVzc2FnZXNfMS5Qcm90b2NvbE5vdGlmaWNhdGlvblR5cGUoRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbi5tZXRob2QpO1xufSkoRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbiA9IGV4cG9ydHMuRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbiB8fCAoZXhwb3J0cy5EaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzTm90aWZpY2F0aW9uID0ge30pKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODYzMzpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpID0+IHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgKHsgdmFsdWU6IHRydWUgfSkpO1xuZXhwb3J0cy5vYmplY3RMaXRlcmFsID0gZXhwb3J0cy50eXBlZEFycmF5ID0gZXhwb3J0cy5zdHJpbmdBcnJheSA9IGV4cG9ydHMuYXJyYXkgPSBleHBvcnRzLmZ1bmMgPSBleHBvcnRzLmVycm9yID0gZXhwb3J0cy5udW1iZXIgPSBleHBvcnRzLnN0cmluZyA9IGV4cG9ydHMuYm9vbGVhbiA9IHZvaWQgMDtcbmZ1bmN0aW9uIGJvb2xlYW4odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlO1xufVxuZXhwb3J0cy5ib29sZWFuID0gYm9vbGVhbjtcbmZ1bmN0aW9uIHN0cmluZyh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nO1xufVxuZXhwb3J0cy5zdHJpbmcgPSBzdHJpbmc7XG5mdW5jdGlvbiBudW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcjtcbn1cbmV4cG9ydHMubnVtYmVyID0gbnVtYmVyO1xuZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBFcnJvcjtcbn1cbmV4cG9ydHMuZXJyb3IgPSBlcnJvcjtcbmZ1bmN0aW9uIGZ1bmModmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5mdW5jID0gZnVuYztcbmZ1bmN0aW9uIGFycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuZXhwb3J0cy5hcnJheSA9IGFycmF5O1xuZnVuY3Rpb24gc3RyaW5nQXJyYXkodmFsdWUpIHtcbiAgICByZXR1cm4gYXJyYXkodmFsdWUpICYmIHZhbHVlLmV2ZXJ5KGVsZW0gPT4gc3RyaW5nKGVsZW0pKTtcbn1cbmV4cG9ydHMuc3RyaW5nQXJyYXkgPSBzdHJpbmdBcnJheTtcbmZ1bmN0aW9uIHR5cGVkQXJyYXkodmFsdWUsIGNoZWNrKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmV2ZXJ5KGNoZWNrKTtcbn1cbmV4cG9ydHMudHlwZWRBcnJheSA9IHR5cGVkQXJyYXk7XG5mdW5jdGlvbiBvYmplY3RMaXRlcmFsKHZhbHVlKSB7XG4gICAgLy8gU3RyaWN0bHkgc3BlYWtpbmcgY2xhc3MgaW5zdGFuY2VzIHBhc3MgdGhpcyBjaGVjayBhcyB3ZWxsLiBTaW5jZSB0aGUgTFNQXG4gICAgLy8gZG9lc24ndCB1c2UgY2xhc3NlcyB3ZSBpZ25vcmUgdGhpcyBmb3Igbm93LiBJZiB3ZSBkbyB3ZSBuZWVkIHRvIGFkZCBzb21ldGhpbmdcbiAgICAvLyBsaWtlIHRoaXM6IGBPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKHgpKSA9PT0gbnVsbGBcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn1cbmV4cG9ydHMub2JqZWN0TGl0ZXJhbCA9IG9iamVjdExpdGVyYWw7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDg3Nzg6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgVjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVGV4dERvY3VtZW50KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbnZhciBfX3NwcmVhZEFycmF5ID0gKHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn07XG52YXIgRnVsbFRleHREb2N1bWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGdWxsVGV4dERvY3VtZW50KHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCkge1xuICAgICAgICB0aGlzLl91cmkgPSB1cmk7XG4gICAgICAgIHRoaXMuX2xhbmd1YWdlSWQgPSBsYW5ndWFnZUlkO1xuICAgICAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5fY29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUsIFwidXJpXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXJpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bGxUZXh0RG9jdW1lbnQucHJvdG90eXBlLCBcImxhbmd1YWdlSWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sYW5ndWFnZUlkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bGxUZXh0RG9jdW1lbnQucHJvdG90eXBlLCBcInZlcnNpb25cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92ZXJzaW9uO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMub2Zmc2V0QXQocmFuZ2Uuc3RhcnQpO1xuICAgICAgICAgICAgdmFyIGVuZCA9IHRoaXMub2Zmc2V0QXQocmFuZ2UuZW5kKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50LnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudDtcbiAgICB9O1xuICAgIEZ1bGxUZXh0RG9jdW1lbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChjaGFuZ2VzLCB2ZXJzaW9uKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgY2hhbmdlc18xID0gY2hhbmdlczsgX2kgPCBjaGFuZ2VzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gY2hhbmdlc18xW19pXTtcbiAgICAgICAgICAgIGlmIChGdWxsVGV4dERvY3VtZW50LmlzSW5jcmVtZW50YWwoY2hhbmdlKSkge1xuICAgICAgICAgICAgICAgIC8vIG1ha2VzIHN1cmUgc3RhcnQgaXMgYmVmb3JlIGVuZFxuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IGdldFdlbGxmb3JtZWRSYW5nZShjaGFuZ2UucmFuZ2UpO1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBjb250ZW50XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gdGhpcy5vZmZzZXRBdChyYW5nZS5zdGFydCk7XG4gICAgICAgICAgICAgICAgdmFyIGVuZE9mZnNldCA9IHRoaXMub2Zmc2V0QXQocmFuZ2UuZW5kKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZW50ID0gdGhpcy5fY29udGVudC5zdWJzdHJpbmcoMCwgc3RhcnRPZmZzZXQpICsgY2hhbmdlLnRleHQgKyB0aGlzLl9jb250ZW50LnN1YnN0cmluZyhlbmRPZmZzZXQsIHRoaXMuX2NvbnRlbnQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIG9mZnNldHNcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRMaW5lID0gTWF0aC5tYXgocmFuZ2Uuc3RhcnQubGluZSwgMCk7XG4gICAgICAgICAgICAgICAgdmFyIGVuZExpbmUgPSBNYXRoLm1heChyYW5nZS5lbmQubGluZSwgMCk7XG4gICAgICAgICAgICAgICAgdmFyIGxpbmVPZmZzZXRzID0gdGhpcy5fbGluZU9mZnNldHM7XG4gICAgICAgICAgICAgICAgdmFyIGFkZGVkTGluZU9mZnNldHMgPSBjb21wdXRlTGluZU9mZnNldHMoY2hhbmdlLnRleHQsIGZhbHNlLCBzdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgaWYgKGVuZExpbmUgLSBzdGFydExpbmUgPT09IGFkZGVkTGluZU9mZnNldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhZGRlZExpbmVPZmZzZXRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lT2Zmc2V0c1tpICsgc3RhcnRMaW5lICsgMV0gPSBhZGRlZExpbmVPZmZzZXRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWRkZWRMaW5lT2Zmc2V0cy5sZW5ndGggPCAxMDAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZU9mZnNldHMuc3BsaWNlLmFwcGx5KGxpbmVPZmZzZXRzLCBfX3NwcmVhZEFycmF5KFtzdGFydExpbmUgKyAxLCBlbmRMaW5lIC0gc3RhcnRMaW5lXSwgYWRkZWRMaW5lT2Zmc2V0cywgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHsgLy8gYXZvaWQgdG9vIG1hbnkgYXJndW1lbnRzIGZvciBzcGxpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gbGluZU9mZnNldHMgPSBsaW5lT2Zmc2V0cy5zbGljZSgwLCBzdGFydExpbmUgKyAxKS5jb25jYXQoYWRkZWRMaW5lT2Zmc2V0cywgbGluZU9mZnNldHMuc2xpY2UoZW5kTGluZSArIDEpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IGNoYW5nZS50ZXh0Lmxlbmd0aCAtIChlbmRPZmZzZXQgLSBzdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgaWYgKGRpZmYgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0TGluZSArIDEgKyBhZGRlZExpbmVPZmZzZXRzLmxlbmd0aCwgbGVuID0gbGluZU9mZnNldHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVPZmZzZXRzW2ldID0gbGluZU9mZnNldHNbaV0gKyBkaWZmO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoRnVsbFRleHREb2N1bWVudC5pc0Z1bGwoY2hhbmdlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRlbnQgPSBjaGFuZ2UudGV4dDtcbiAgICAgICAgICAgICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBjaGFuZ2UgZXZlbnQgcmVjZWl2ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICB9O1xuICAgIEZ1bGxUZXh0RG9jdW1lbnQucHJvdG90eXBlLmdldExpbmVPZmZzZXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fbGluZU9mZnNldHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSBjb21wdXRlTGluZU9mZnNldHModGhpcy5fY29udGVudCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbmVPZmZzZXRzO1xuICAgIH07XG4gICAgRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUucG9zaXRpb25BdCA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcbiAgICAgICAgb2Zmc2V0ID0gTWF0aC5tYXgoTWF0aC5taW4ob2Zmc2V0LCB0aGlzLl9jb250ZW50Lmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XG4gICAgICAgIHZhciBsb3cgPSAwLCBoaWdoID0gbGluZU9mZnNldHMubGVuZ3RoO1xuICAgICAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgbGluZTogMCwgY2hhcmFjdGVyOiBvZmZzZXQgfTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgICAgdmFyIG1pZCA9IE1hdGguZmxvb3IoKGxvdyArIGhpZ2gpIC8gMik7XG4gICAgICAgICAgICBpZiAobGluZU9mZnNldHNbbWlkXSA+IG9mZnNldCkge1xuICAgICAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGxvdyBpcyB0aGUgbGVhc3QgeCBmb3Igd2hpY2ggdGhlIGxpbmUgb2Zmc2V0IGlzIGxhcmdlciB0aGFuIHRoZSBjdXJyZW50IG9mZnNldFxuICAgICAgICAvLyBvciBhcnJheS5sZW5ndGggaWYgbm8gbGluZSBvZmZzZXQgaXMgbGFyZ2VyIHRoYW4gdGhlIGN1cnJlbnQgb2Zmc2V0XG4gICAgICAgIHZhciBsaW5lID0gbG93IC0gMTtcbiAgICAgICAgcmV0dXJuIHsgbGluZTogbGluZSwgY2hhcmFjdGVyOiBvZmZzZXQgLSBsaW5lT2Zmc2V0c1tsaW5lXSB9O1xuICAgIH07XG4gICAgRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUub2Zmc2V0QXQgPSBmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgICAgdmFyIGxpbmVPZmZzZXRzID0gdGhpcy5nZXRMaW5lT2Zmc2V0cygpO1xuICAgICAgICBpZiAocG9zaXRpb24ubGluZSA+PSBsaW5lT2Zmc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwb3NpdGlvbi5saW5lIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpbmVPZmZzZXQgPSBsaW5lT2Zmc2V0c1twb3NpdGlvbi5saW5lXTtcbiAgICAgICAgdmFyIG5leHRMaW5lT2Zmc2V0ID0gKHBvc2l0aW9uLmxpbmUgKyAxIDwgbGluZU9mZnNldHMubGVuZ3RoKSA/IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmUgKyAxXSA6IHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4obGluZU9mZnNldCArIHBvc2l0aW9uLmNoYXJhY3RlciwgbmV4dExpbmVPZmZzZXQpLCBsaW5lT2Zmc2V0KTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZSwgXCJsaW5lQ291bnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldExpbmVPZmZzZXRzKCkubGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgRnVsbFRleHREb2N1bWVudC5pc0luY3JlbWVudGFsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSBldmVudDtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGNhbmRpZGF0ZS50ZXh0ID09PSAnc3RyaW5nJyAmJiBjYW5kaWRhdGUucmFuZ2UgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5yYW5nZUxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBjYW5kaWRhdGUucmFuZ2VMZW5ndGggPT09ICdudW1iZXInKTtcbiAgICB9O1xuICAgIEZ1bGxUZXh0RG9jdW1lbnQuaXNGdWxsID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSBldmVudDtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgdHlwZW9mIGNhbmRpZGF0ZS50ZXh0ID09PSAnc3RyaW5nJyAmJiBjYW5kaWRhdGUucmFuZ2UgPT09IHVuZGVmaW5lZCAmJiBjYW5kaWRhdGUucmFuZ2VMZW5ndGggPT09IHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIHJldHVybiBGdWxsVGV4dERvY3VtZW50O1xufSgpKTtcbnZhciBUZXh0RG9jdW1lbnQ7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdGV4dCBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB1cmkgVGhlIGRvY3VtZW50J3MgdXJpLlxuICAgICAqIEBwYXJhbSBsYW5ndWFnZUlkICBUaGUgZG9jdW1lbnQncyBsYW5ndWFnZSBJZC5cbiAgICAgKiBAcGFyYW0gdmVyc2lvbiBUaGUgZG9jdW1lbnQncyBpbml0aWFsIHZlcnNpb24gbnVtYmVyLlxuICAgICAqIEBwYXJhbSBjb250ZW50IFRoZSBkb2N1bWVudCdzIGNvbnRlbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCkge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bGxUZXh0RG9jdW1lbnQodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGEgVGV4dERvY3VtZW50IGJ5IG1vZGlmeWluZyBpdHMgY29udGVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb2N1bWVudCB0aGUgZG9jdW1lbnQgdG8gdXBkYXRlLiBPbmx5IGRvY3VtZW50cyBjcmVhdGVkIGJ5IFRleHREb2N1bWVudC5jcmVhdGUgYXJlIHZhbGlkIGlucHV0cy5cbiAgICAgKiBAcGFyYW0gY2hhbmdlcyB0aGUgY2hhbmdlcyB0byBhcHBseSB0byB0aGUgZG9jdW1lbnQuXG4gICAgICogQHBhcmFtIHZlcnNpb24gdGhlIGNoYW5nZXMgdmVyc2lvbiBmb3IgdGhlIGRvY3VtZW50LlxuICAgICAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIFRleHREb2N1bWVudC4gTm90ZTogVGhhdCdzIHRoZSBzYW1lIGRvY3VtZW50IGluc3RhbmNlIHBhc3NlZCBpbiBhcyBmaXJzdCBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUoZG9jdW1lbnQsIGNoYW5nZXMsIHZlcnNpb24pIHtcbiAgICAgICAgaWYgKGRvY3VtZW50IGluc3RhbmNlb2YgRnVsbFRleHREb2N1bWVudCkge1xuICAgICAgICAgICAgZG9jdW1lbnQudXBkYXRlKGNoYW5nZXMsIHZlcnNpb24pO1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXh0RG9jdW1lbnQudXBkYXRlOiBkb2N1bWVudCBtdXN0IGJlIGNyZWF0ZWQgYnkgVGV4dERvY3VtZW50LmNyZWF0ZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFRleHREb2N1bWVudC51cGRhdGUgPSB1cGRhdGU7XG4gICAgZnVuY3Rpb24gYXBwbHlFZGl0cyhkb2N1bWVudCwgZWRpdHMpIHtcbiAgICAgICAgdmFyIHRleHQgPSBkb2N1bWVudC5nZXRUZXh0KCk7XG4gICAgICAgIHZhciBzb3J0ZWRFZGl0cyA9IG1lcmdlU29ydChlZGl0cy5tYXAoZ2V0V2VsbGZvcm1lZEVkaXQpLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgdmFyIGRpZmYgPSBhLnJhbmdlLnN0YXJ0LmxpbmUgLSBiLnJhbmdlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhLnJhbmdlLnN0YXJ0LmNoYXJhY3RlciAtIGIucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRpZmY7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbGFzdE1vZGlmaWVkT2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIHNwYW5zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc29ydGVkRWRpdHNfMSA9IHNvcnRlZEVkaXRzOyBfaSA8IHNvcnRlZEVkaXRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgZSA9IHNvcnRlZEVkaXRzXzFbX2ldO1xuICAgICAgICAgICAgdmFyIHN0YXJ0T2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQoZS5yYW5nZS5zdGFydCk7XG4gICAgICAgICAgICBpZiAoc3RhcnRPZmZzZXQgPCBsYXN0TW9kaWZpZWRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ092ZXJsYXBwaW5nIGVkaXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN0YXJ0T2Zmc2V0ID4gbGFzdE1vZGlmaWVkT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgc3BhbnMucHVzaCh0ZXh0LnN1YnN0cmluZyhsYXN0TW9kaWZpZWRPZmZzZXQsIHN0YXJ0T2Zmc2V0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZS5uZXdUZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNwYW5zLnB1c2goZS5uZXdUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RNb2RpZmllZE9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KGUucmFuZ2UuZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBzcGFucy5wdXNoKHRleHQuc3Vic3RyKGxhc3RNb2RpZmllZE9mZnNldCkpO1xuICAgICAgICByZXR1cm4gc3BhbnMuam9pbignJyk7XG4gICAgfVxuICAgIFRleHREb2N1bWVudC5hcHBseUVkaXRzID0gYXBwbHlFZGl0cztcbn0pKFRleHREb2N1bWVudCB8fCAoVGV4dERvY3VtZW50ID0ge30pKTtcbmZ1bmN0aW9uIG1lcmdlU29ydChkYXRhLCBjb21wYXJlKSB7XG4gICAgaWYgKGRhdGEubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgLy8gc29ydGVkXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICB2YXIgcCA9IChkYXRhLmxlbmd0aCAvIDIpIHwgMDtcbiAgICB2YXIgbGVmdCA9IGRhdGEuc2xpY2UoMCwgcCk7XG4gICAgdmFyIHJpZ2h0ID0gZGF0YS5zbGljZShwKTtcbiAgICBtZXJnZVNvcnQobGVmdCwgY29tcGFyZSk7XG4gICAgbWVyZ2VTb3J0KHJpZ2h0LCBjb21wYXJlKTtcbiAgICB2YXIgbGVmdElkeCA9IDA7XG4gICAgdmFyIHJpZ2h0SWR4ID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlZnRJZHggPCBsZWZ0Lmxlbmd0aCAmJiByaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICB2YXIgcmV0ID0gY29tcGFyZShsZWZ0W2xlZnRJZHhdLCByaWdodFtyaWdodElkeF0pO1xuICAgICAgICBpZiAocmV0IDw9IDApIHtcbiAgICAgICAgICAgIC8vIHNtYWxsZXJfZXF1YWwgLT4gdGFrZSBsZWZ0IHRvIHByZXNlcnZlIG9yZGVyXG4gICAgICAgICAgICBkYXRhW2krK10gPSBsZWZ0W2xlZnRJZHgrK107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBncmVhdGVyIC0+IHRha2UgcmlnaHRcbiAgICAgICAgICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGgpIHtcbiAgICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xuICAgIH1cbiAgICB3aGlsZSAocmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcbiAgICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gY29tcHV0ZUxpbmVPZmZzZXRzKHRleHQsIGlzQXRMaW5lU3RhcnQsIHRleHRPZmZzZXQpIHtcbiAgICBpZiAodGV4dE9mZnNldCA9PT0gdm9pZCAwKSB7IHRleHRPZmZzZXQgPSAwOyB9XG4gICAgdmFyIHJlc3VsdCA9IGlzQXRMaW5lU3RhcnQgPyBbdGV4dE9mZnNldF0gOiBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoID0gdGV4dC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoY2ggPT09IDEzIC8qIENoYXJDb2RlLkNhcnJpYWdlUmV0dXJuICovIHx8IGNoID09PSAxMCAvKiBDaGFyQ29kZS5MaW5lRmVlZCAqLykge1xuICAgICAgICAgICAgaWYgKGNoID09PSAxMyAvKiBDaGFyQ29kZS5DYXJyaWFnZVJldHVybiAqLyAmJiBpICsgMSA8IHRleHQubGVuZ3RoICYmIHRleHQuY2hhckNvZGVBdChpICsgMSkgPT09IDEwIC8qIENoYXJDb2RlLkxpbmVGZWVkICovKSB7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LnB1c2godGV4dE9mZnNldCArIGkgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0V2VsbGZvcm1lZFJhbmdlKHJhbmdlKSB7XG4gICAgdmFyIHN0YXJ0ID0gcmFuZ2Uuc3RhcnQ7XG4gICAgdmFyIGVuZCA9IHJhbmdlLmVuZDtcbiAgICBpZiAoc3RhcnQubGluZSA+IGVuZC5saW5lIHx8IChzdGFydC5saW5lID09PSBlbmQubGluZSAmJiBzdGFydC5jaGFyYWN0ZXIgPiBlbmQuY2hhcmFjdGVyKSkge1xuICAgICAgICByZXR1cm4geyBzdGFydDogZW5kLCBlbmQ6IHN0YXJ0IH07XG4gICAgfVxuICAgIHJldHVybiByYW5nZTtcbn1cbmZ1bmN0aW9uIGdldFdlbGxmb3JtZWRFZGl0KHRleHRFZGl0KSB7XG4gICAgdmFyIHJhbmdlID0gZ2V0V2VsbGZvcm1lZFJhbmdlKHRleHRFZGl0LnJhbmdlKTtcbiAgICBpZiAocmFuZ2UgIT09IHRleHRFZGl0LnJhbmdlKSB7XG4gICAgICAgIHJldHVybiB7IG5ld1RleHQ6IHRleHRFZGl0Lm5ld1RleHQsIHJhbmdlOiByYW5nZSB9O1xuICAgIH1cbiAgICByZXR1cm4gdGV4dEVkaXQ7XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDc3MTc6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQW5ub3RhdGVkVGV4dEVkaXQ6ICgpID0+ICgvKiBiaW5kaW5nICovIEFubm90YXRlZFRleHRFZGl0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ2hhbmdlQW5ub3RhdGlvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ2hhbmdlQW5ub3RhdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyOiAoKSA9PiAoLyogYmluZGluZyAqLyBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvZGVBY3Rpb246ICgpID0+ICgvKiBiaW5kaW5nICovIENvZGVBY3Rpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb2RlQWN0aW9uQ29udGV4dDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29kZUFjdGlvbkNvbnRleHQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb2RlQWN0aW9uS2luZDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29kZUFjdGlvbktpbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb2RlQWN0aW9uVHJpZ2dlcktpbmQ6ICgpID0+ICgvKiBiaW5kaW5nICovIENvZGVBY3Rpb25UcmlnZ2VyS2luZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvZGVEZXNjcmlwdGlvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29kZURlc2NyaXB0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29kZUxlbnM6ICgpID0+ICgvKiBiaW5kaW5nICovIENvZGVMZW5zKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29sb3I6ICgpID0+ICgvKiBiaW5kaW5nICovIENvbG9yKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29sb3JJbmZvcm1hdGlvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29sb3JJbmZvcm1hdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvbG9yUHJlc2VudGF0aW9uOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb2xvclByZXNlbnRhdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvbW1hbmQ6ICgpID0+ICgvKiBiaW5kaW5nICovIENvbW1hbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb21wbGV0aW9uSXRlbTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29tcGxldGlvbkl0ZW0pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb21wbGV0aW9uSXRlbUtpbmQ6ICgpID0+ICgvKiBiaW5kaW5nICovIENvbXBsZXRpb25JdGVtS2luZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvbXBsZXRpb25JdGVtTGFiZWxEZXRhaWxzOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlscyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvbXBsZXRpb25JdGVtVGFnOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb21wbGV0aW9uSXRlbVRhZyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvbXBsZXRpb25MaXN0OiAoKSA9PiAoLyogYmluZGluZyAqLyBDb21wbGV0aW9uTGlzdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENyZWF0ZUZpbGU6ICgpID0+ICgvKiBiaW5kaW5nICovIENyZWF0ZUZpbGUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBEZWxldGVGaWxlOiAoKSA9PiAoLyogYmluZGluZyAqLyBEZWxldGVGaWxlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRGlhZ25vc3RpYzogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRGlhZ25vc3RpYyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBEaWFnbm9zdGljU2V2ZXJpdHk6ICgpID0+ICgvKiBiaW5kaW5nICovIERpYWdub3N0aWNTZXZlcml0eSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIERpYWdub3N0aWNUYWc6ICgpID0+ICgvKiBiaW5kaW5nICovIERpYWdub3N0aWNUYWcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBEb2N1bWVudEhpZ2hsaWdodDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRG9jdW1lbnRIaWdobGlnaHQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBEb2N1bWVudEhpZ2hsaWdodEtpbmQ6ICgpID0+ICgvKiBiaW5kaW5nICovIERvY3VtZW50SGlnaGxpZ2h0S2luZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIERvY3VtZW50TGluazogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRG9jdW1lbnRMaW5rKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRG9jdW1lbnRTeW1ib2w6ICgpID0+ICgvKiBiaW5kaW5nICovIERvY3VtZW50U3ltYm9sKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRG9jdW1lbnRVcmk6ICgpID0+ICgvKiBiaW5kaW5nICovIERvY3VtZW50VXJpKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRU9MOiAoKSA9PiAoLyogYmluZGluZyAqLyBFT0wpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBGb2xkaW5nUmFuZ2U6ICgpID0+ICgvKiBiaW5kaW5nICovIEZvbGRpbmdSYW5nZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEZvbGRpbmdSYW5nZUtpbmQ6ICgpID0+ICgvKiBiaW5kaW5nICovIEZvbGRpbmdSYW5nZUtpbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBGb3JtYXR0aW5nT3B0aW9uczogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRm9ybWF0dGluZ09wdGlvbnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBIb3ZlcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSG92ZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxheUhpbnQ6ICgpID0+ICgvKiBiaW5kaW5nICovIElubGF5SGludCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIElubGF5SGludEtpbmQ6ICgpID0+ICgvKiBiaW5kaW5nICovIElubGF5SGludEtpbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxheUhpbnRMYWJlbFBhcnQ6ICgpID0+ICgvKiBiaW5kaW5nICovIElubGF5SGludExhYmVsUGFydCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIElubGluZVZhbHVlQ29udGV4dDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5saW5lVmFsdWVDb250ZXh0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb246ICgpID0+ICgvKiBiaW5kaW5nICovIElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5saW5lVmFsdWVUZXh0OiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmxpbmVWYWx1ZVRleHQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5zZXJ0UmVwbGFjZUVkaXQ6ICgpID0+ICgvKiBiaW5kaW5nICovIEluc2VydFJlcGxhY2VFZGl0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW5zZXJ0VGV4dEZvcm1hdDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5zZXJ0VGV4dEZvcm1hdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEluc2VydFRleHRNb2RlOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbnNlcnRUZXh0TW9kZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIExvY2F0aW9uOiAoKSA9PiAoLyogYmluZGluZyAqLyBMb2NhdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIExvY2F0aW9uTGluazogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTG9jYXRpb25MaW5rKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgTWFya2VkU3RyaW5nOiAoKSA9PiAoLyogYmluZGluZyAqLyBNYXJrZWRTdHJpbmcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBNYXJrdXBDb250ZW50OiAoKSA9PiAoLyogYmluZGluZyAqLyBNYXJrdXBDb250ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgTWFya3VwS2luZDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWFya3VwS2luZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUGFyYW1ldGVySW5mb3JtYXRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIFBhcmFtZXRlckluZm9ybWF0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUG9zaXRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIFBvc2l0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUmFuZ2U6ICgpID0+ICgvKiBiaW5kaW5nICovIFJhbmdlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUmVuYW1lRmlsZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUmVuYW1lRmlsZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFNlbGVjdGlvblJhbmdlOiAoKSA9PiAoLyogYmluZGluZyAqLyBTZWxlY3Rpb25SYW5nZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnM6ICgpID0+ICgvKiBiaW5kaW5nICovIFNlbWFudGljVG9rZW5Nb2RpZmllcnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTZW1hbnRpY1Rva2VuVHlwZXM6ICgpID0+ICgvKiBiaW5kaW5nICovIFNlbWFudGljVG9rZW5UeXBlcyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFNlbWFudGljVG9rZW5zOiAoKSA9PiAoLyogYmluZGluZyAqLyBTZW1hbnRpY1Rva2VucyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFNpZ25hdHVyZUluZm9ybWF0aW9uOiAoKSA9PiAoLyogYmluZGluZyAqLyBTaWduYXR1cmVJbmZvcm1hdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFN5bWJvbEluZm9ybWF0aW9uOiAoKSA9PiAoLyogYmluZGluZyAqLyBTeW1ib2xJbmZvcm1hdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFN5bWJvbEtpbmQ6ICgpID0+ICgvKiBiaW5kaW5nICovIFN5bWJvbEtpbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTeW1ib2xUYWc6ICgpID0+ICgvKiBiaW5kaW5nICovIFN5bWJvbFRhZyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFRleHREb2N1bWVudDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVGV4dERvY3VtZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgVGV4dERvY3VtZW50RWRpdDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVGV4dERvY3VtZW50RWRpdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFRleHREb2N1bWVudElkZW50aWZpZXI6ICgpID0+ICgvKiBiaW5kaW5nICovIFRleHREb2N1bWVudElkZW50aWZpZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBUZXh0RG9jdW1lbnRJdGVtOiAoKSA9PiAoLyogYmluZGluZyAqLyBUZXh0RG9jdW1lbnRJdGVtKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgVGV4dEVkaXQ6ICgpID0+ICgvKiBiaW5kaW5nICovIFRleHRFZGl0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgVVJJOiAoKSA9PiAoLyogYmluZGluZyAqLyBVUkkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyOiAoKSA9PiAoLyogYmluZGluZyAqLyBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgV29ya3NwYWNlQ2hhbmdlOiAoKSA9PiAoLyogYmluZGluZyAqLyBXb3Jrc3BhY2VDaGFuZ2UpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBXb3Jrc3BhY2VFZGl0OiAoKSA9PiAoLyogYmluZGluZyAqLyBXb3Jrc3BhY2VFZGl0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgV29ya3NwYWNlRm9sZGVyOiAoKSA9PiAoLyogYmluZGluZyAqLyBXb3Jrc3BhY2VGb2xkZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBXb3Jrc3BhY2VTeW1ib2w6ICgpID0+ICgvKiBiaW5kaW5nICovIFdvcmtzcGFjZVN5bWJvbCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGludGVnZXI6ICgpID0+ICgvKiBiaW5kaW5nICovIGludGVnZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICB1aW50ZWdlcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gdWludGVnZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxudmFyIERvY3VtZW50VXJpO1xuKGZ1bmN0aW9uIChEb2N1bWVudFVyaSkge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICAgIH1cbiAgICBEb2N1bWVudFVyaS5pcyA9IGlzO1xufSkoRG9jdW1lbnRVcmkgfHwgKERvY3VtZW50VXJpID0ge30pKTtcbnZhciBVUkk7XG4oZnVuY3Rpb24gKFVSSSkge1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICAgIH1cbiAgICBVUkkuaXMgPSBpcztcbn0pKFVSSSB8fCAoVVJJID0ge30pKTtcbnZhciBpbnRlZ2VyO1xuKGZ1bmN0aW9uIChpbnRlZ2VyKSB7XG4gICAgaW50ZWdlci5NSU5fVkFMVUUgPSAtMjE0NzQ4MzY0ODtcbiAgICBpbnRlZ2VyLk1BWF9WQUxVRSA9IDIxNDc0ODM2NDc7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaW50ZWdlci5NSU5fVkFMVUUgPD0gdmFsdWUgJiYgdmFsdWUgPD0gaW50ZWdlci5NQVhfVkFMVUU7XG4gICAgfVxuICAgIGludGVnZXIuaXMgPSBpcztcbn0pKGludGVnZXIgfHwgKGludGVnZXIgPSB7fSkpO1xudmFyIHVpbnRlZ2VyO1xuKGZ1bmN0aW9uICh1aW50ZWdlcikge1xuICAgIHVpbnRlZ2VyLk1JTl9WQUxVRSA9IDA7XG4gICAgdWludGVnZXIuTUFYX1ZBTFVFID0gMjE0NzQ4MzY0NztcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiB1aW50ZWdlci5NSU5fVkFMVUUgPD0gdmFsdWUgJiYgdmFsdWUgPD0gdWludGVnZXIuTUFYX1ZBTFVFO1xuICAgIH1cbiAgICB1aW50ZWdlci5pcyA9IGlzO1xufSkodWludGVnZXIgfHwgKHVpbnRlZ2VyID0ge30pKTtcbi8qKlxuICogVGhlIFBvc2l0aW9uIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFBvc2l0aW9ufSBsaXRlcmFscy5cbiAqL1xudmFyIFBvc2l0aW9uO1xuKGZ1bmN0aW9uIChQb3NpdGlvbikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgUG9zaXRpb24gbGl0ZXJhbCBmcm9tIHRoZSBnaXZlbiBsaW5lIGFuZCBjaGFyYWN0ZXIuXG4gICAgICogQHBhcmFtIGxpbmUgVGhlIHBvc2l0aW9uJ3MgbGluZS5cbiAgICAgKiBAcGFyYW0gY2hhcmFjdGVyIFRoZSBwb3NpdGlvbidzIGNoYXJhY3Rlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUobGluZSwgY2hhcmFjdGVyKSB7XG4gICAgICAgIGlmIChsaW5lID09PSBOdW1iZXIuTUFYX1ZBTFVFKSB7XG4gICAgICAgICAgICBsaW5lID0gdWludGVnZXIuTUFYX1ZBTFVFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIGNoYXJhY3RlciA9IHVpbnRlZ2VyLk1BWF9WQUxVRTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBsaW5lOiBsaW5lLCBjaGFyYWN0ZXI6IGNoYXJhY3RlciB9O1xuICAgIH1cbiAgICBQb3NpdGlvbi5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBQb3NpdGlvbn0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUubGluZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLmNoYXJhY3Rlcik7XG4gICAgfVxuICAgIFBvc2l0aW9uLmlzID0gaXM7XG59KShQb3NpdGlvbiB8fCAoUG9zaXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgUmFuZ2UgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgUmFuZ2V9IGxpdGVyYWxzLlxuICovXG52YXIgUmFuZ2U7XG4oZnVuY3Rpb24gKFJhbmdlKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKG9uZSwgdHdvLCB0aHJlZSwgZm91cikge1xuICAgICAgICBpZiAoSXMudWludGVnZXIob25lKSAmJiBJcy51aW50ZWdlcih0d28pICYmIElzLnVpbnRlZ2VyKHRocmVlKSAmJiBJcy51aW50ZWdlcihmb3VyKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IFBvc2l0aW9uLmNyZWF0ZShvbmUsIHR3byksIGVuZDogUG9zaXRpb24uY3JlYXRlKHRocmVlLCBmb3VyKSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFBvc2l0aW9uLmlzKG9uZSkgJiYgUG9zaXRpb24uaXModHdvKSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IG9uZSwgZW5kOiB0d28gfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlJhbmdlI2NyZWF0ZSBjYWxsZWQgd2l0aCBpbnZhbGlkIGFyZ3VtZW50c1tcIi5jb25jYXQob25lLCBcIiwgXCIpLmNvbmNhdCh0d28sIFwiLCBcIikuY29uY2F0KHRocmVlLCBcIiwgXCIpLmNvbmNhdChmb3VyLCBcIl1cIikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFJhbmdlLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIFJhbmdlfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFBvc2l0aW9uLmlzKGNhbmRpZGF0ZS5zdGFydCkgJiYgUG9zaXRpb24uaXMoY2FuZGlkYXRlLmVuZCk7XG4gICAgfVxuICAgIFJhbmdlLmlzID0gaXM7XG59KShSYW5nZSB8fCAoUmFuZ2UgPSB7fSkpO1xuLyoqXG4gKiBUaGUgTG9jYXRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgTG9jYXRpb259IGxpdGVyYWxzLlxuICovXG52YXIgTG9jYXRpb247XG4oZnVuY3Rpb24gKExvY2F0aW9uKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIExvY2F0aW9uIGxpdGVyYWwuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgbG9jYXRpb24ncyB1cmkuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSBsb2NhdGlvbidzIHJhbmdlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHJhbmdlKSB7XG4gICAgICAgIHJldHVybiB7IHVyaTogdXJpLCByYW5nZTogcmFuZ2UgfTtcbiAgICB9XG4gICAgTG9jYXRpb24uY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgTG9jYXRpb259IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUudXJpKSk7XG4gICAgfVxuICAgIExvY2F0aW9uLmlzID0gaXM7XG59KShMb2NhdGlvbiB8fCAoTG9jYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgTG9jYXRpb25MaW5rIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIExvY2F0aW9uTGlua30gbGl0ZXJhbHMuXG4gKi9cbnZhciBMb2NhdGlvbkxpbms7XG4oZnVuY3Rpb24gKExvY2F0aW9uTGluaykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBMb2NhdGlvbkxpbmsgbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0VXJpIFRoZSBkZWZpbml0aW9uJ3MgdXJpLlxuICAgICAqIEBwYXJhbSB0YXJnZXRSYW5nZSBUaGUgZnVsbCByYW5nZSBvZiB0aGUgZGVmaW5pdGlvbi5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0U2VsZWN0aW9uUmFuZ2UgVGhlIHNwYW4gb2YgdGhlIHN5bWJvbCBkZWZpbml0aW9uIGF0IHRoZSB0YXJnZXQuXG4gICAgICogQHBhcmFtIG9yaWdpblNlbGVjdGlvblJhbmdlIFRoZSBzcGFuIG9mIHRoZSBzeW1ib2wgYmVpbmcgZGVmaW5lZCBpbiB0aGUgb3JpZ2luYXRpbmcgc291cmNlIGZpbGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRhcmdldFVyaSwgdGFyZ2V0UmFuZ2UsIHRhcmdldFNlbGVjdGlvblJhbmdlLCBvcmlnaW5TZWxlY3Rpb25SYW5nZSkge1xuICAgICAgICByZXR1cm4geyB0YXJnZXRVcmk6IHRhcmdldFVyaSwgdGFyZ2V0UmFuZ2U6IHRhcmdldFJhbmdlLCB0YXJnZXRTZWxlY3Rpb25SYW5nZTogdGFyZ2V0U2VsZWN0aW9uUmFuZ2UsIG9yaWdpblNlbGVjdGlvblJhbmdlOiBvcmlnaW5TZWxlY3Rpb25SYW5nZSB9O1xuICAgIH1cbiAgICBMb2NhdGlvbkxpbmsuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgTG9jYXRpb25MaW5rfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS50YXJnZXRSYW5nZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50YXJnZXRVcmkpXG4gICAgICAgICAgICAmJiBSYW5nZS5pcyhjYW5kaWRhdGUudGFyZ2V0U2VsZWN0aW9uUmFuZ2UpXG4gICAgICAgICAgICAmJiAoUmFuZ2UuaXMoY2FuZGlkYXRlLm9yaWdpblNlbGVjdGlvblJhbmdlKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLm9yaWdpblNlbGVjdGlvblJhbmdlKSk7XG4gICAgfVxuICAgIExvY2F0aW9uTGluay5pcyA9IGlzO1xufSkoTG9jYXRpb25MaW5rIHx8IChMb2NhdGlvbkxpbmsgPSB7fSkpO1xuLyoqXG4gKiBUaGUgQ29sb3IgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgQ29sb3J9IGxpdGVyYWxzLlxuICovXG52YXIgQ29sb3I7XG4oZnVuY3Rpb24gKENvbG9yKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvciBsaXRlcmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShyZWQsIGdyZWVuLCBibHVlLCBhbHBoYSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVkOiByZWQsXG4gICAgICAgICAgICBncmVlbjogZ3JlZW4sXG4gICAgICAgICAgICBibHVlOiBibHVlLFxuICAgICAgICAgICAgYWxwaGE6IGFscGhhLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBDb2xvci5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBDb2xvcn0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUucmVkLCAwLCAxKVxuICAgICAgICAgICAgJiYgSXMubnVtYmVyUmFuZ2UoY2FuZGlkYXRlLmdyZWVuLCAwLCAxKVxuICAgICAgICAgICAgJiYgSXMubnVtYmVyUmFuZ2UoY2FuZGlkYXRlLmJsdWUsIDAsIDEpXG4gICAgICAgICAgICAmJiBJcy5udW1iZXJSYW5nZShjYW5kaWRhdGUuYWxwaGEsIDAsIDEpO1xuICAgIH1cbiAgICBDb2xvci5pcyA9IGlzO1xufSkoQ29sb3IgfHwgKENvbG9yID0ge30pKTtcbi8qKlxuICogVGhlIENvbG9ySW5mb3JtYXRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgQ29sb3JJbmZvcm1hdGlvbn0gbGl0ZXJhbHMuXG4gKi9cbnZhciBDb2xvckluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uIChDb2xvckluZm9ybWF0aW9uKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvckluZm9ybWF0aW9uIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBjb2xvcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmFuZ2U6IHJhbmdlLFxuICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBDb2xvckluZm9ybWF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIENvbG9ySW5mb3JtYXRpb259IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiBDb2xvci5pcyhjYW5kaWRhdGUuY29sb3IpO1xuICAgIH1cbiAgICBDb2xvckluZm9ybWF0aW9uLmlzID0gaXM7XG59KShDb2xvckluZm9ybWF0aW9uIHx8IChDb2xvckluZm9ybWF0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIENvbG9yIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIENvbG9yUHJlc2VudGF0aW9ufSBsaXRlcmFscy5cbiAqL1xudmFyIENvbG9yUHJlc2VudGF0aW9uO1xuKGZ1bmN0aW9uIChDb2xvclByZXNlbnRhdGlvbikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3JJbmZvcm1hdGlvbiBsaXRlcmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgdGV4dEVkaXQsIGFkZGl0aW9uYWxUZXh0RWRpdHMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgICAgICAgIHRleHRFZGl0OiB0ZXh0RWRpdCxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxUZXh0RWRpdHM6IGFkZGl0aW9uYWxUZXh0RWRpdHMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIENvbG9yUHJlc2VudGF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIENvbG9ySW5mb3JtYXRpb259IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYWJlbClcbiAgICAgICAgICAgICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLnRleHRFZGl0KSB8fCBUZXh0RWRpdC5pcyhjYW5kaWRhdGUpKVxuICAgICAgICAgICAgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuYWRkaXRpb25hbFRleHRFZGl0cykgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuYWRkaXRpb25hbFRleHRFZGl0cywgVGV4dEVkaXQuaXMpKTtcbiAgICB9XG4gICAgQ29sb3JQcmVzZW50YXRpb24uaXMgPSBpcztcbn0pKENvbG9yUHJlc2VudGF0aW9uIHx8IChDb2xvclByZXNlbnRhdGlvbiA9IHt9KSk7XG4vKipcbiAqIEEgc2V0IG9mIHByZWRlZmluZWQgcmFuZ2Uga2luZHMuXG4gKi9cbnZhciBGb2xkaW5nUmFuZ2VLaW5kO1xuKGZ1bmN0aW9uIChGb2xkaW5nUmFuZ2VLaW5kKSB7XG4gICAgLyoqXG4gICAgICogRm9sZGluZyByYW5nZSBmb3IgYSBjb21tZW50XG4gICAgICovXG4gICAgRm9sZGluZ1JhbmdlS2luZC5Db21tZW50ID0gJ2NvbW1lbnQnO1xuICAgIC8qKlxuICAgICAqIEZvbGRpbmcgcmFuZ2UgZm9yIGFuIGltcG9ydCBvciBpbmNsdWRlXG4gICAgICovXG4gICAgRm9sZGluZ1JhbmdlS2luZC5JbXBvcnRzID0gJ2ltcG9ydHMnO1xuICAgIC8qKlxuICAgICAqIEZvbGRpbmcgcmFuZ2UgZm9yIGEgcmVnaW9uIChlLmcuIGAjcmVnaW9uYClcbiAgICAgKi9cbiAgICBGb2xkaW5nUmFuZ2VLaW5kLlJlZ2lvbiA9ICdyZWdpb24nO1xufSkoRm9sZGluZ1JhbmdlS2luZCB8fCAoRm9sZGluZ1JhbmdlS2luZCA9IHt9KSk7XG4vKipcbiAqIFRoZSBmb2xkaW5nIHJhbmdlIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIEZvbGRpbmdSYW5nZX0gbGl0ZXJhbHMuXG4gKi9cbnZhciBGb2xkaW5nUmFuZ2U7XG4oZnVuY3Rpb24gKEZvbGRpbmdSYW5nZSkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgRm9sZGluZ1JhbmdlIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHN0YXJ0TGluZSwgZW5kTGluZSwgc3RhcnRDaGFyYWN0ZXIsIGVuZENoYXJhY3Rlciwga2luZCwgY29sbGFwc2VkVGV4dCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgc3RhcnRMaW5lOiBzdGFydExpbmUsXG4gICAgICAgICAgICBlbmRMaW5lOiBlbmRMaW5lXG4gICAgICAgIH07XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHN0YXJ0Q2hhcmFjdGVyKSkge1xuICAgICAgICAgICAgcmVzdWx0LnN0YXJ0Q2hhcmFjdGVyID0gc3RhcnRDaGFyYWN0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKElzLmRlZmluZWQoZW5kQ2hhcmFjdGVyKSkge1xuICAgICAgICAgICAgcmVzdWx0LmVuZENoYXJhY3RlciA9IGVuZENoYXJhY3RlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoSXMuZGVmaW5lZChraW5kKSkge1xuICAgICAgICAgICAgcmVzdWx0LmtpbmQgPSBraW5kO1xuICAgICAgICB9XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKGNvbGxhcHNlZFRleHQpKSB7XG4gICAgICAgICAgICByZXN1bHQuY29sbGFwc2VkVGV4dCA9IGNvbGxhcHNlZFRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgRm9sZGluZ1JhbmdlLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIEZvbGRpbmdSYW5nZX0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUuc3RhcnRMaW5lKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUuc3RhcnRMaW5lKVxuICAgICAgICAgICAgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUuc3RhcnRDaGFyYWN0ZXIpIHx8IElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5zdGFydENoYXJhY3RlcikpXG4gICAgICAgICAgICAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5lbmRDaGFyYWN0ZXIpIHx8IElzLnVpbnRlZ2VyKGNhbmRpZGF0ZS5lbmRDaGFyYWN0ZXIpKVxuICAgICAgICAgICAgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUua2luZCkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5raW5kKSk7XG4gICAgfVxuICAgIEZvbGRpbmdSYW5nZS5pcyA9IGlzO1xufSkoRm9sZGluZ1JhbmdlIHx8IChGb2xkaW5nUmFuZ2UgPSB7fSkpO1xuLyoqXG4gKiBUaGUgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9ufSBsaXRlcmFscy5cbiAqL1xudmFyIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb247XG4oZnVuY3Rpb24gKERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24gbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUobG9jYXRpb24sIG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcbiAgICAgICAgfTtcbiAgICB9XG4gICAgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbi5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9ufSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIExvY2F0aW9uLmlzKGNhbmRpZGF0ZS5sb2NhdGlvbikgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5tZXNzYWdlKTtcbiAgICB9XG4gICAgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbi5pcyA9IGlzO1xufSkoRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiB8fCAoRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBkaWFnbm9zdGljJ3Mgc2V2ZXJpdHkuXG4gKi9cbnZhciBEaWFnbm9zdGljU2V2ZXJpdHk7XG4oZnVuY3Rpb24gKERpYWdub3N0aWNTZXZlcml0eSkge1xuICAgIC8qKlxuICAgICAqIFJlcG9ydHMgYW4gZXJyb3IuXG4gICAgICovXG4gICAgRGlhZ25vc3RpY1NldmVyaXR5LkVycm9yID0gMTtcbiAgICAvKipcbiAgICAgKiBSZXBvcnRzIGEgd2FybmluZy5cbiAgICAgKi9cbiAgICBEaWFnbm9zdGljU2V2ZXJpdHkuV2FybmluZyA9IDI7XG4gICAgLyoqXG4gICAgICogUmVwb3J0cyBhbiBpbmZvcm1hdGlvbi5cbiAgICAgKi9cbiAgICBEaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb24gPSAzO1xuICAgIC8qKlxuICAgICAqIFJlcG9ydHMgYSBoaW50LlxuICAgICAqL1xuICAgIERpYWdub3N0aWNTZXZlcml0eS5IaW50ID0gNDtcbn0pKERpYWdub3N0aWNTZXZlcml0eSB8fCAoRGlhZ25vc3RpY1NldmVyaXR5ID0ge30pKTtcbi8qKlxuICogVGhlIGRpYWdub3N0aWMgdGFncy5cbiAqXG4gKiBAc2luY2UgMy4xNS4wXG4gKi9cbnZhciBEaWFnbm9zdGljVGFnO1xuKGZ1bmN0aW9uIChEaWFnbm9zdGljVGFnKSB7XG4gICAgLyoqXG4gICAgICogVW51c2VkIG9yIHVubmVjZXNzYXJ5IGNvZGUuXG4gICAgICpcbiAgICAgKiBDbGllbnRzIGFyZSBhbGxvd2VkIHRvIHJlbmRlciBkaWFnbm9zdGljcyB3aXRoIHRoaXMgdGFnIGZhZGVkIG91dCBpbnN0ZWFkIG9mIGhhdmluZ1xuICAgICAqIGFuIGVycm9yIHNxdWlnZ2xlLlxuICAgICAqL1xuICAgIERpYWdub3N0aWNUYWcuVW5uZWNlc3NhcnkgPSAxO1xuICAgIC8qKlxuICAgICAqIERlcHJlY2F0ZWQgb3Igb2Jzb2xldGUgY29kZS5cbiAgICAgKlxuICAgICAqIENsaWVudHMgYXJlIGFsbG93ZWQgdG8gcmVuZGVyZWQgZGlhZ25vc3RpY3Mgd2l0aCB0aGlzIHRhZyBzdHJpa2UgdGhyb3VnaC5cbiAgICAgKi9cbiAgICBEaWFnbm9zdGljVGFnLkRlcHJlY2F0ZWQgPSAyO1xufSkoRGlhZ25vc3RpY1RhZyB8fCAoRGlhZ25vc3RpY1RhZyA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb2RlRGVzY3JpcHRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0byBkZWFsIHdpdGggZGVzY3JpcHRpb25zIGZvciBkaWFnbm9zdGljIGNvZGVzLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIENvZGVEZXNjcmlwdGlvbjtcbihmdW5jdGlvbiAoQ29kZURlc2NyaXB0aW9uKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUuaHJlZik7XG4gICAgfVxuICAgIENvZGVEZXNjcmlwdGlvbi5pcyA9IGlzO1xufSkoQ29kZURlc2NyaXB0aW9uIHx8IChDb2RlRGVzY3JpcHRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgRGlhZ25vc3RpYyBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBEaWFnbm9zdGljfSBsaXRlcmFscy5cbiAqL1xudmFyIERpYWdub3N0aWM7XG4oZnVuY3Rpb24gKERpYWdub3N0aWMpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IERpYWdub3N0aWMgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIG1lc3NhZ2UsIHNldmVyaXR5LCBjb2RlLCBzb3VyY2UsIHJlbGF0ZWRJbmZvcm1hdGlvbikge1xuICAgICAgICB2YXIgcmVzdWx0ID0geyByYW5nZTogcmFuZ2UsIG1lc3NhZ2U6IG1lc3NhZ2UgfTtcbiAgICAgICAgaWYgKElzLmRlZmluZWQoc2V2ZXJpdHkpKSB7XG4gICAgICAgICAgICByZXN1bHQuc2V2ZXJpdHkgPSBzZXZlcml0eTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoSXMuZGVmaW5lZChjb2RlKSkge1xuICAgICAgICAgICAgcmVzdWx0LmNvZGUgPSBjb2RlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKElzLmRlZmluZWQocmVsYXRlZEluZm9ybWF0aW9uKSkge1xuICAgICAgICAgICAgcmVzdWx0LnJlbGF0ZWRJbmZvcm1hdGlvbiA9IHJlbGF0ZWRJbmZvcm1hdGlvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBEaWFnbm9zdGljLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIERpYWdub3N0aWN9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKVxuICAgICAgICAgICAgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKVxuICAgICAgICAgICAgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5tZXNzYWdlKVxuICAgICAgICAgICAgJiYgKElzLm51bWJlcihjYW5kaWRhdGUuc2V2ZXJpdHkpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUuc2V2ZXJpdHkpKVxuICAgICAgICAgICAgJiYgKElzLmludGVnZXIoY2FuZGlkYXRlLmNvZGUpIHx8IElzLnN0cmluZyhjYW5kaWRhdGUuY29kZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5jb2RlKSlcbiAgICAgICAgICAgICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmNvZGVEZXNjcmlwdGlvbikgfHwgKElzLnN0cmluZygoX2EgPSBjYW5kaWRhdGUuY29kZURlc2NyaXB0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaHJlZikpKVxuICAgICAgICAgICAgJiYgKElzLnN0cmluZyhjYW5kaWRhdGUuc291cmNlKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnNvdXJjZSkpXG4gICAgICAgICAgICAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5yZWxhdGVkSW5mb3JtYXRpb24pIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLnJlbGF0ZWRJbmZvcm1hdGlvbiwgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbi5pcykpO1xuICAgIH1cbiAgICBEaWFnbm9zdGljLmlzID0gaXM7XG59KShEaWFnbm9zdGljIHx8IChEaWFnbm9zdGljID0ge30pKTtcbi8qKlxuICogVGhlIENvbW1hbmQgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgQ29tbWFuZH0gbGl0ZXJhbHMuXG4gKi9cbnZhciBDb21tYW5kO1xuKGZ1bmN0aW9uIChDb21tYW5kKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb21tYW5kIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRpdGxlLCBjb21tYW5kKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSB7IHRpdGxlOiB0aXRsZSwgY29tbWFuZDogY29tbWFuZCB9O1xuICAgICAgICBpZiAoSXMuZGVmaW5lZChhcmdzKSAmJiBhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5hcmd1bWVudHMgPSBhcmdzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIENvbW1hbmQuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgQ29tbWFuZH0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRpdGxlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmNvbW1hbmQpO1xuICAgIH1cbiAgICBDb21tYW5kLmlzID0gaXM7XG59KShDb21tYW5kIHx8IChDb21tYW5kID0ge30pKTtcbi8qKlxuICogVGhlIFRleHRFZGl0IG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb24gdG8gY3JlYXRlIHJlcGxhY2UsXG4gKiBpbnNlcnQgYW5kIGRlbGV0ZSBlZGl0cyBtb3JlIGVhc2lseS5cbiAqL1xudmFyIFRleHRFZGl0O1xuKGZ1bmN0aW9uIChUZXh0RWRpdCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSByZXBsYWNlIHRleHQgZWRpdC5cbiAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIG9mIHRleHQgdG8gYmUgcmVwbGFjZWQuXG4gICAgICogQHBhcmFtIG5ld1RleHQgVGhlIG5ldyB0ZXh0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UocmFuZ2UsIG5ld1RleHQpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IHJhbmdlLCBuZXdUZXh0OiBuZXdUZXh0IH07XG4gICAgfVxuICAgIFRleHRFZGl0LnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zZXJ0IHRleHQgZWRpdC5cbiAgICAgKiBAcGFyYW0gcG9zaXRpb24gVGhlIHBvc2l0aW9uIHRvIGluc2VydCB0aGUgdGV4dCBhdC5cbiAgICAgKiBAcGFyYW0gbmV3VGV4dCBUaGUgdGV4dCB0byBiZSBpbnNlcnRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnQocG9zaXRpb24sIG5ld1RleHQpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IHsgc3RhcnQ6IHBvc2l0aW9uLCBlbmQ6IHBvc2l0aW9uIH0sIG5ld1RleHQ6IG5ld1RleHQgfTtcbiAgICB9XG4gICAgVGV4dEVkaXQuaW5zZXJ0ID0gaW5zZXJ0O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWxldGUgdGV4dCBlZGl0LlxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2Ugb2YgdGV4dCB0byBiZSBkZWxldGVkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlbChyYW5nZSkge1xuICAgICAgICByZXR1cm4geyByYW5nZTogcmFuZ2UsIG5ld1RleHQ6ICcnIH07XG4gICAgfVxuICAgIFRleHRFZGl0LmRlbCA9IGRlbDtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSlcbiAgICAgICAgICAgICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VGV4dClcbiAgICAgICAgICAgICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSk7XG4gICAgfVxuICAgIFRleHRFZGl0LmlzID0gaXM7XG59KShUZXh0RWRpdCB8fCAoVGV4dEVkaXQgPSB7fSkpO1xudmFyIENoYW5nZUFubm90YXRpb247XG4oZnVuY3Rpb24gKENoYW5nZUFubm90YXRpb24pIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIG5lZWRzQ29uZmlybWF0aW9uLCBkZXNjcmlwdGlvbikge1xuICAgICAgICB2YXIgcmVzdWx0ID0geyBsYWJlbDogbGFiZWwgfTtcbiAgICAgICAgaWYgKG5lZWRzQ29uZmlybWF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5uZWVkc0NvbmZpcm1hdGlvbiA9IG5lZWRzQ29uZmlybWF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHQuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBDaGFuZ2VBbm5vdGF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYWJlbCkgJiZcbiAgICAgICAgICAgIChJcy5ib29sZWFuKGNhbmRpZGF0ZS5uZWVkc0NvbmZpcm1hdGlvbikgfHwgY2FuZGlkYXRlLm5lZWRzQ29uZmlybWF0aW9uID09PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5kZXNjcmlwdGlvbikgfHwgY2FuZGlkYXRlLmRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQpO1xuICAgIH1cbiAgICBDaGFuZ2VBbm5vdGF0aW9uLmlzID0gaXM7XG59KShDaGFuZ2VBbm5vdGF0aW9uIHx8IChDaGFuZ2VBbm5vdGF0aW9uID0ge30pKTtcbnZhciBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllcjtcbihmdW5jdGlvbiAoQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5zdHJpbmcoY2FuZGlkYXRlKTtcbiAgICB9XG4gICAgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMgPSBpcztcbn0pKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyIHx8IChDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllciA9IHt9KSk7XG52YXIgQW5ub3RhdGVkVGV4dEVkaXQ7XG4oZnVuY3Rpb24gKEFubm90YXRlZFRleHRFZGl0KSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhbm5vdGF0ZWQgcmVwbGFjZSB0ZXh0IGVkaXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIG9mIHRleHQgdG8gYmUgcmVwbGFjZWQuXG4gICAgICogQHBhcmFtIG5ld1RleHQgVGhlIG5ldyB0ZXh0LlxuICAgICAqIEBwYXJhbSBhbm5vdGF0aW9uIFRoZSBhbm5vdGF0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UocmFuZ2UsIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IHJhbmdlLCBuZXdUZXh0OiBuZXdUZXh0LCBhbm5vdGF0aW9uSWQ6IGFubm90YXRpb24gfTtcbiAgICB9XG4gICAgQW5ub3RhdGVkVGV4dEVkaXQucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhbm5vdGF0ZWQgaW5zZXJ0IHRleHQgZWRpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiBUaGUgcG9zaXRpb24gdG8gaW5zZXJ0IHRoZSB0ZXh0IGF0LlxuICAgICAqIEBwYXJhbSBuZXdUZXh0IFRoZSB0ZXh0IHRvIGJlIGluc2VydGVkLlxuICAgICAqIEBwYXJhbSBhbm5vdGF0aW9uIFRoZSBhbm5vdGF0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydChwb3NpdGlvbiwgbmV3VGV4dCwgYW5ub3RhdGlvbikge1xuICAgICAgICByZXR1cm4geyByYW5nZTogeyBzdGFydDogcG9zaXRpb24sIGVuZDogcG9zaXRpb24gfSwgbmV3VGV4dDogbmV3VGV4dCwgYW5ub3RhdGlvbklkOiBhbm5vdGF0aW9uIH07XG4gICAgfVxuICAgIEFubm90YXRlZFRleHRFZGl0Lmluc2VydCA9IGluc2VydDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFubm90YXRlZCBkZWxldGUgdGV4dCBlZGl0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSBvZiB0ZXh0IHRvIGJlIGRlbGV0ZWQuXG4gICAgICogQHBhcmFtIGFubm90YXRpb24gVGhlIGFubm90YXRpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVsKHJhbmdlLCBhbm5vdGF0aW9uKSB7XG4gICAgICAgIHJldHVybiB7IHJhbmdlOiByYW5nZSwgbmV3VGV4dDogJycsIGFubm90YXRpb25JZDogYW5ub3RhdGlvbiB9O1xuICAgIH1cbiAgICBBbm5vdGF0ZWRUZXh0RWRpdC5kZWwgPSBkZWw7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gVGV4dEVkaXQuaXMoY2FuZGlkYXRlKSAmJiAoQ2hhbmdlQW5ub3RhdGlvbi5pcyhjYW5kaWRhdGUuYW5ub3RhdGlvbklkKSB8fCBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhjYW5kaWRhdGUuYW5ub3RhdGlvbklkKSk7XG4gICAgfVxuICAgIEFubm90YXRlZFRleHRFZGl0LmlzID0gaXM7XG59KShBbm5vdGF0ZWRUZXh0RWRpdCB8fCAoQW5ub3RhdGVkVGV4dEVkaXQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgVGV4dERvY3VtZW50RWRpdCBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9uIHRvIGNyZWF0ZVxuICogYW4gZWRpdCB0aGF0IG1hbmlwdWxhdGVzIGEgdGV4dCBkb2N1bWVudC5cbiAqL1xudmFyIFRleHREb2N1bWVudEVkaXQ7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudEVkaXQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGBUZXh0RG9jdW1lbnRFZGl0YFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh0ZXh0RG9jdW1lbnQsIGVkaXRzKSB7XG4gICAgICAgIHJldHVybiB7IHRleHREb2N1bWVudDogdGV4dERvY3VtZW50LCBlZGl0czogZWRpdHMgfTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50RWRpdC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpXG4gICAgICAgICAgICAmJiBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIuaXMoY2FuZGlkYXRlLnRleHREb2N1bWVudClcbiAgICAgICAgICAgICYmIEFycmF5LmlzQXJyYXkoY2FuZGlkYXRlLmVkaXRzKTtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50RWRpdC5pcyA9IGlzO1xufSkoVGV4dERvY3VtZW50RWRpdCB8fCAoVGV4dERvY3VtZW50RWRpdCA9IHt9KSk7XG52YXIgQ3JlYXRlRmlsZTtcbihmdW5jdGlvbiAoQ3JlYXRlRmlsZSkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIG9wdGlvbnMsIGFubm90YXRpb24pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIGtpbmQ6ICdjcmVhdGUnLFxuICAgICAgICAgICAgdXJpOiB1cmlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiAob3B0aW9ucy5vdmVyd3JpdGUgIT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLmlnbm9yZUlmRXhpc3RzICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFubm90YXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmFubm90YXRpb25JZCA9IGFubm90YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgQ3JlYXRlRmlsZS5jcmVhdGUgPSBjcmVhdGU7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIGNhbmRpZGF0ZS5raW5kID09PSAnY3JlYXRlJyAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKGNhbmRpZGF0ZS5vcHRpb25zID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICgoY2FuZGlkYXRlLm9wdGlvbnMub3ZlcndyaXRlID09PSB1bmRlZmluZWQgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMgPT09IHVuZGVmaW5lZCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmRXhpc3RzKSkpKSAmJiAoY2FuZGlkYXRlLmFubm90YXRpb25JZCA9PT0gdW5kZWZpbmVkIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGNhbmRpZGF0ZS5hbm5vdGF0aW9uSWQpKTtcbiAgICB9XG4gICAgQ3JlYXRlRmlsZS5pcyA9IGlzO1xufSkoQ3JlYXRlRmlsZSB8fCAoQ3JlYXRlRmlsZSA9IHt9KSk7XG52YXIgUmVuYW1lRmlsZTtcbihmdW5jdGlvbiAoUmVuYW1lRmlsZSkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShvbGRVcmksIG5ld1VyaSwgb3B0aW9ucywgYW5ub3RhdGlvbikge1xuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAga2luZDogJ3JlbmFtZScsXG4gICAgICAgICAgICBvbGRVcmk6IG9sZFVyaSxcbiAgICAgICAgICAgIG5ld1VyaTogbmV3VXJpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQgJiYgKG9wdGlvbnMub3ZlcndyaXRlICE9PSB1bmRlZmluZWQgfHwgb3B0aW9ucy5pZ25vcmVJZkV4aXN0cyAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgcmVzdWx0Lm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbm5vdGF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5hbm5vdGF0aW9uSWQgPSBhbm5vdGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFJlbmFtZUZpbGUuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBjYW5kaWRhdGUua2luZCA9PT0gJ3JlbmFtZScgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5vbGRVcmkpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VXJpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgKChjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUgPT09IHVuZGVmaW5lZCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLm92ZXJ3cml0ZSkpICYmIChjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZkV4aXN0cyA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMpKSkpICYmIChjYW5kaWRhdGUuYW5ub3RhdGlvbklkID09PSB1bmRlZmluZWQgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkpO1xuICAgIH1cbiAgICBSZW5hbWVGaWxlLmlzID0gaXM7XG59KShSZW5hbWVGaWxlIHx8IChSZW5hbWVGaWxlID0ge30pKTtcbnZhciBEZWxldGVGaWxlO1xuKGZ1bmN0aW9uIChEZWxldGVGaWxlKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgb3B0aW9ucywgYW5ub3RhdGlvbikge1xuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAga2luZDogJ2RlbGV0ZScsXG4gICAgICAgICAgICB1cmk6IHVyaVxuICAgICAgICB9O1xuICAgICAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmIChvcHRpb25zLnJlY3Vyc2l2ZSAhPT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMgIT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5ub3RhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHQuYW5ub3RhdGlvbklkID0gYW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBEZWxldGVGaWxlLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgY2FuZGlkYXRlLmtpbmQgPT09ICdkZWxldGUnICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgKChjYW5kaWRhdGUub3B0aW9ucy5yZWN1cnNpdmUgPT09IHVuZGVmaW5lZCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLnJlY3Vyc2l2ZSkpICYmIChjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZk5vdEV4aXN0cyA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMpKSkpICYmIChjYW5kaWRhdGUuYW5ub3RhdGlvbklkID09PSB1bmRlZmluZWQgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoY2FuZGlkYXRlLmFubm90YXRpb25JZCkpO1xuICAgIH1cbiAgICBEZWxldGVGaWxlLmlzID0gaXM7XG59KShEZWxldGVGaWxlIHx8IChEZWxldGVGaWxlID0ge30pKTtcbnZhciBXb3Jrc3BhY2VFZGl0O1xuKGZ1bmN0aW9uIChXb3Jrc3BhY2VFZGl0KSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmNoYW5nZXMgIT09IHVuZGVmaW5lZCB8fCBjYW5kaWRhdGUuZG9jdW1lbnRDaGFuZ2VzICE9PSB1bmRlZmluZWQpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmRvY3VtZW50Q2hhbmdlcyA9PT0gdW5kZWZpbmVkIHx8IGNhbmRpZGF0ZS5kb2N1bWVudENoYW5nZXMuZXZlcnkoZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgICAgICAgICAgICAgIGlmIChJcy5zdHJpbmcoY2hhbmdlLmtpbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDcmVhdGVGaWxlLmlzKGNoYW5nZSkgfHwgUmVuYW1lRmlsZS5pcyhjaGFuZ2UpIHx8IERlbGV0ZUZpbGUuaXMoY2hhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBUZXh0RG9jdW1lbnRFZGl0LmlzKGNoYW5nZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgIH1cbiAgICBXb3Jrc3BhY2VFZGl0LmlzID0gaXM7XG59KShXb3Jrc3BhY2VFZGl0IHx8IChXb3Jrc3BhY2VFZGl0ID0ge30pKTtcbnZhciBUZXh0RWRpdENoYW5nZUltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGV4dEVkaXRDaGFuZ2VJbXBsKGVkaXRzLCBjaGFuZ2VBbm5vdGF0aW9ucykge1xuICAgICAgICB0aGlzLmVkaXRzID0gZWRpdHM7XG4gICAgICAgIHRoaXMuY2hhbmdlQW5ub3RhdGlvbnMgPSBjaGFuZ2VBbm5vdGF0aW9ucztcbiAgICB9XG4gICAgVGV4dEVkaXRDaGFuZ2VJbXBsLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbiAocG9zaXRpb24sIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICAgICAgdmFyIGVkaXQ7XG4gICAgICAgIHZhciBpZDtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZWRpdCA9IFRleHRFZGl0Lmluc2VydChwb3NpdGlvbiwgbmV3VGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoYW5ub3RhdGlvbikpIHtcbiAgICAgICAgICAgIGlkID0gYW5ub3RhdGlvbjtcbiAgICAgICAgICAgIGVkaXQgPSBBbm5vdGF0ZWRUZXh0RWRpdC5pbnNlcnQocG9zaXRpb24sIG5ld1RleHQsIGFubm90YXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyh0aGlzLmNoYW5nZUFubm90YXRpb25zKTtcbiAgICAgICAgICAgIGlkID0gdGhpcy5jaGFuZ2VBbm5vdGF0aW9ucy5tYW5hZ2UoYW5ub3RhdGlvbik7XG4gICAgICAgICAgICBlZGl0ID0gQW5ub3RhdGVkVGV4dEVkaXQuaW5zZXJ0KHBvc2l0aW9uLCBuZXdUZXh0LCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKGVkaXQpO1xuICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0RWRpdENoYW5nZUltcGwucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiAocmFuZ2UsIG5ld1RleHQsIGFubm90YXRpb24pIHtcbiAgICAgICAgdmFyIGVkaXQ7XG4gICAgICAgIHZhciBpZDtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZWRpdCA9IFRleHRFZGl0LnJlcGxhY2UocmFuZ2UsIG5ld1RleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKGFubm90YXRpb24pKSB7XG4gICAgICAgICAgICBpZCA9IGFubm90YXRpb247XG4gICAgICAgICAgICBlZGl0ID0gQW5ub3RhdGVkVGV4dEVkaXQucmVwbGFjZShyYW5nZSwgbmV3VGV4dCwgYW5ub3RhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFzc2VydENoYW5nZUFubm90YXRpb25zKHRoaXMuY2hhbmdlQW5ub3RhdGlvbnMpO1xuICAgICAgICAgICAgaWQgPSB0aGlzLmNoYW5nZUFubm90YXRpb25zLm1hbmFnZShhbm5vdGF0aW9uKTtcbiAgICAgICAgICAgIGVkaXQgPSBBbm5vdGF0ZWRUZXh0RWRpdC5yZXBsYWNlKHJhbmdlLCBuZXdUZXh0LCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKGVkaXQpO1xuICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXh0RWRpdENoYW5nZUltcGwucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChyYW5nZSwgYW5ub3RhdGlvbikge1xuICAgICAgICB2YXIgZWRpdDtcbiAgICAgICAgdmFyIGlkO1xuICAgICAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBlZGl0ID0gVGV4dEVkaXQuZGVsKHJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhhbm5vdGF0aW9uKSkge1xuICAgICAgICAgICAgaWQgPSBhbm5vdGF0aW9uO1xuICAgICAgICAgICAgZWRpdCA9IEFubm90YXRlZFRleHRFZGl0LmRlbChyYW5nZSwgYW5ub3RhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFzc2VydENoYW5nZUFubm90YXRpb25zKHRoaXMuY2hhbmdlQW5ub3RhdGlvbnMpO1xuICAgICAgICAgICAgaWQgPSB0aGlzLmNoYW5nZUFubm90YXRpb25zLm1hbmFnZShhbm5vdGF0aW9uKTtcbiAgICAgICAgICAgIGVkaXQgPSBBbm5vdGF0ZWRUZXh0RWRpdC5kZWwocmFuZ2UsIGlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVkaXRzLnB1c2goZWRpdCk7XG4gICAgICAgIGlmIChpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRleHRFZGl0Q2hhbmdlSW1wbC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGVkaXQpIHtcbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKGVkaXQpO1xuICAgIH07XG4gICAgVGV4dEVkaXRDaGFuZ2VJbXBsLnByb3RvdHlwZS5hbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRzO1xuICAgIH07XG4gICAgVGV4dEVkaXRDaGFuZ2VJbXBsLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lZGl0cy5zcGxpY2UoMCwgdGhpcy5lZGl0cy5sZW5ndGgpO1xuICAgIH07XG4gICAgVGV4dEVkaXRDaGFuZ2VJbXBsLnByb3RvdHlwZS5hc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGV4dCBlZGl0IGNoYW5nZSBpcyBub3QgY29uZmlndXJlZCB0byBtYW5hZ2UgY2hhbmdlIGFubm90YXRpb25zLlwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRleHRFZGl0Q2hhbmdlSW1wbDtcbn0oKSk7XG4vKipcbiAqIEEgaGVscGVyIGNsYXNzXG4gKi9cbnZhciBDaGFuZ2VBbm5vdGF0aW9ucyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDaGFuZ2VBbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykge1xuICAgICAgICB0aGlzLl9hbm5vdGF0aW9ucyA9IGFubm90YXRpb25zID09PSB1bmRlZmluZWQgPyBPYmplY3QuY3JlYXRlKG51bGwpIDogYW5ub3RhdGlvbnM7XG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xuICAgICAgICB0aGlzLl9zaXplID0gMDtcbiAgICB9XG4gICAgQ2hhbmdlQW5ub3RhdGlvbnMucHJvdG90eXBlLmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Fubm90YXRpb25zO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENoYW5nZUFubm90YXRpb25zLnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIENoYW5nZUFubm90YXRpb25zLnByb3RvdHlwZS5tYW5hZ2UgPSBmdW5jdGlvbiAoaWRPckFubm90YXRpb24sIGFubm90YXRpb24pIHtcbiAgICAgICAgdmFyIGlkO1xuICAgICAgICBpZiAoQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoaWRPckFubm90YXRpb24pKSB7XG4gICAgICAgICAgICBpZCA9IGlkT3JBbm5vdGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWQgPSB0aGlzLm5leHRJZCgpO1xuICAgICAgICAgICAgYW5ub3RhdGlvbiA9IGlkT3JBbm5vdGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9hbm5vdGF0aW9uc1tpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWQgXCIuY29uY2F0KGlkLCBcIiBpcyBhbHJlYWR5IGluIHVzZS5cIikpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbm5vdGF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIGFubm90YXRpb24gcHJvdmlkZWQgZm9yIGlkIFwiLmNvbmNhdChpZCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Fubm90YXRpb25zW2lkXSA9IGFubm90YXRpb247XG4gICAgICAgIHRoaXMuX3NpemUrKztcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH07XG4gICAgQ2hhbmdlQW5ub3RhdGlvbnMucHJvdG90eXBlLm5leHRJZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY291bnRlcisrO1xuICAgICAgICByZXR1cm4gdGhpcy5fY291bnRlci50b1N0cmluZygpO1xuICAgIH07XG4gICAgcmV0dXJuIENoYW5nZUFubm90YXRpb25zO1xufSgpKTtcbi8qKlxuICogQSB3b3Jrc3BhY2UgY2hhbmdlIGhlbHBzIGNvbnN0cnVjdGluZyBjaGFuZ2VzIHRvIGEgd29ya3NwYWNlLlxuICovXG52YXIgV29ya3NwYWNlQ2hhbmdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdvcmtzcGFjZUNoYW5nZSh3b3Jrc3BhY2VFZGl0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3RleHRFZGl0Q2hhbmdlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGlmICh3b3Jrc3BhY2VFZGl0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQgPSB3b3Jrc3BhY2VFZGl0O1xuICAgICAgICAgICAgaWYgKHdvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMgPSBuZXcgQ2hhbmdlQW5ub3RhdGlvbnMod29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyk7XG4gICAgICAgICAgICAgICAgd29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyA9IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLmFsbCgpO1xuICAgICAgICAgICAgICAgIHdvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLmZvckVhY2goZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoVGV4dERvY3VtZW50RWRpdC5pcyhjaGFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dEVkaXRDaGFuZ2UgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKGNoYW5nZS5lZGl0cywgX3RoaXMuX2NoYW5nZUFubm90YXRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90ZXh0RWRpdENoYW5nZXNbY2hhbmdlLnRleHREb2N1bWVudC51cmldID0gdGV4dEVkaXRDaGFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHdvcmtzcGFjZUVkaXQuY2hhbmdlcykge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHdvcmtzcGFjZUVkaXQuY2hhbmdlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0RWRpdENoYW5nZSA9IG5ldyBUZXh0RWRpdENoYW5nZUltcGwod29ya3NwYWNlRWRpdC5jaGFuZ2VzW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdGV4dEVkaXRDaGFuZ2VzW2tleV0gPSB0ZXh0RWRpdENoYW5nZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQgPSB7fTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV29ya3NwYWNlQ2hhbmdlLnByb3RvdHlwZSwgXCJlZGl0XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIHVuZGVybHlpbmcge0BsaW5rIFdvcmtzcGFjZUVkaXR9IGxpdGVyYWxcbiAgICAgICAgICogdXNlIHRvIGJlIHJldHVybmVkIGZyb20gYSB3b3Jrc3BhY2UgZWRpdCBvcGVyYXRpb24gbGlrZSByZW5hbWUuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdERvY3VtZW50Q2hhbmdlcygpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NoYW5nZUFubm90YXRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZUFubm90YXRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VBbm5vdGF0aW9ucyA9IHRoaXMuX2NoYW5nZUFubm90YXRpb25zLmFsbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93b3Jrc3BhY2VFZGl0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgV29ya3NwYWNlQ2hhbmdlLnByb3RvdHlwZS5nZXRUZXh0RWRpdENoYW5nZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyhrZXkpKSB7XG4gICAgICAgICAgICB0aGlzLmluaXREb2N1bWVudENoYW5nZXMoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXb3Jrc3BhY2UgZWRpdCBpcyBub3QgY29uZmlndXJlZCBmb3IgZG9jdW1lbnQgY2hhbmdlcy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB0ZXh0RG9jdW1lbnQgPSB7IHVyaToga2V5LnVyaSwgdmVyc2lvbjoga2V5LnZlcnNpb24gfTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl90ZXh0RWRpdENoYW5nZXNbdGV4dERvY3VtZW50LnVyaV07XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHZhciBlZGl0cyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0RG9jdW1lbnRFZGl0ID0ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0RG9jdW1lbnQ6IHRleHREb2N1bWVudCxcbiAgICAgICAgICAgICAgICAgICAgZWRpdHM6IGVkaXRzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcy5wdXNoKHRleHREb2N1bWVudEVkaXQpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBUZXh0RWRpdENoYW5nZUltcGwoZWRpdHMsIHRoaXMuX2NoYW5nZUFubm90YXRpb25zKTtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0RWRpdENoYW5nZXNbdGV4dERvY3VtZW50LnVyaV0gPSByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbml0Q2hhbmdlcygpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3dvcmtzcGFjZUVkaXQuY2hhbmdlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXb3Jrc3BhY2UgZWRpdCBpcyBub3QgY29uZmlndXJlZCBmb3Igbm9ybWFsIHRleHQgZWRpdCBjaGFuZ2VzLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3RleHRFZGl0Q2hhbmdlc1trZXldO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWRpdHMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZXNba2V5XSA9IGVkaXRzO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBUZXh0RWRpdENoYW5nZUltcGwoZWRpdHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3RleHRFZGl0Q2hhbmdlc1trZXldID0gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgV29ya3NwYWNlQ2hhbmdlLnByb3RvdHlwZS5pbml0RG9jdW1lbnRDaGFuZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMgPT09IHVuZGVmaW5lZCAmJiB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMgPSBuZXcgQ2hhbmdlQW5ub3RhdGlvbnMoKTtcbiAgICAgICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzID0gW107XG4gICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZUFubm90YXRpb25zID0gdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMuYWxsKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdvcmtzcGFjZUNoYW5nZS5wcm90b3R5cGUuaW5pdENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcyA9PT0gdW5kZWZpbmVkICYmIHRoaXMuX3dvcmtzcGFjZUVkaXQuY2hhbmdlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBXb3Jrc3BhY2VDaGFuZ2UucHJvdG90eXBlLmNyZWF0ZUZpbGUgPSBmdW5jdGlvbiAodXJpLCBvcHRpb25zT3JBbm5vdGF0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaW5pdERvY3VtZW50Q2hhbmdlcygpO1xuICAgICAgICBpZiAodGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXb3Jrc3BhY2UgZWRpdCBpcyBub3QgY29uZmlndXJlZCBmb3IgZG9jdW1lbnQgY2hhbmdlcy4nKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYW5ub3RhdGlvbjtcbiAgICAgICAgaWYgKENoYW5nZUFubm90YXRpb24uaXMob3B0aW9uc09yQW5ub3RhdGlvbikgfHwgQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMob3B0aW9uc09yQW5ub3RhdGlvbikpIHtcbiAgICAgICAgICAgIGFubm90YXRpb24gPSBvcHRpb25zT3JBbm5vdGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnNPckFubm90YXRpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9wZXJhdGlvbjtcbiAgICAgICAgdmFyIGlkO1xuICAgICAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcGVyYXRpb24gPSBDcmVhdGVGaWxlLmNyZWF0ZSh1cmksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWQgPSBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhhbm5vdGF0aW9uKSA/IGFubm90YXRpb24gOiB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucy5tYW5hZ2UoYW5ub3RhdGlvbik7XG4gICAgICAgICAgICBvcGVyYXRpb24gPSBDcmVhdGVGaWxlLmNyZWF0ZSh1cmksIG9wdGlvbnMsIGlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcy5wdXNoKG9wZXJhdGlvbik7XG4gICAgICAgIGlmIChpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFdvcmtzcGFjZUNoYW5nZS5wcm90b3R5cGUucmVuYW1lRmlsZSA9IGZ1bmN0aW9uIChvbGRVcmksIG5ld1VyaSwgb3B0aW9uc09yQW5ub3RhdGlvbiwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXREb2N1bWVudENoYW5nZXMoKTtcbiAgICAgICAgaWYgKHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIGRvY3VtZW50IGNoYW5nZXMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFubm90YXRpb247XG4gICAgICAgIGlmIChDaGFuZ2VBbm5vdGF0aW9uLmlzKG9wdGlvbnNPckFubm90YXRpb24pIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKG9wdGlvbnNPckFubm90YXRpb24pKSB7XG4gICAgICAgICAgICBhbm5vdGF0aW9uID0gb3B0aW9uc09yQW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zT3JBbm5vdGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcGVyYXRpb247XG4gICAgICAgIHZhciBpZDtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3BlcmF0aW9uID0gUmVuYW1lRmlsZS5jcmVhdGUob2xkVXJpLCBuZXdVcmksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWQgPSBDaGFuZ2VBbm5vdGF0aW9uSWRlbnRpZmllci5pcyhhbm5vdGF0aW9uKSA/IGFubm90YXRpb24gOiB0aGlzLl9jaGFuZ2VBbm5vdGF0aW9ucy5tYW5hZ2UoYW5ub3RhdGlvbik7XG4gICAgICAgICAgICBvcGVyYXRpb24gPSBSZW5hbWVGaWxlLmNyZWF0ZShvbGRVcmksIG5ld1VyaSwgb3B0aW9ucywgaWQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLnB1c2gob3BlcmF0aW9uKTtcbiAgICAgICAgaWYgKGlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgV29ya3NwYWNlQ2hhbmdlLnByb3RvdHlwZS5kZWxldGVGaWxlID0gZnVuY3Rpb24gKHVyaSwgb3B0aW9uc09yQW5ub3RhdGlvbiwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmluaXREb2N1bWVudENoYW5nZXMoKTtcbiAgICAgICAgaWYgKHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIGRvY3VtZW50IGNoYW5nZXMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFubm90YXRpb247XG4gICAgICAgIGlmIChDaGFuZ2VBbm5vdGF0aW9uLmlzKG9wdGlvbnNPckFubm90YXRpb24pIHx8IENoYW5nZUFubm90YXRpb25JZGVudGlmaWVyLmlzKG9wdGlvbnNPckFubm90YXRpb24pKSB7XG4gICAgICAgICAgICBhbm5vdGF0aW9uID0gb3B0aW9uc09yQW5ub3RhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBvcHRpb25zT3JBbm5vdGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcGVyYXRpb247XG4gICAgICAgIHZhciBpZDtcbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgb3BlcmF0aW9uID0gRGVsZXRlRmlsZS5jcmVhdGUodXJpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlkID0gQ2hhbmdlQW5ub3RhdGlvbklkZW50aWZpZXIuaXMoYW5ub3RhdGlvbikgPyBhbm5vdGF0aW9uIDogdGhpcy5fY2hhbmdlQW5ub3RhdGlvbnMubWFuYWdlKGFubm90YXRpb24pO1xuICAgICAgICAgICAgb3BlcmF0aW9uID0gRGVsZXRlRmlsZS5jcmVhdGUodXJpLCBvcHRpb25zLCBpZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMucHVzaChvcGVyYXRpb24pO1xuICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gV29ya3NwYWNlQ2hhbmdlO1xufSgpKTtcblxuLyoqXG4gKiBUaGUgVGV4dERvY3VtZW50SWRlbnRpZmllciBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBUZXh0RG9jdW1lbnRJZGVudGlmaWVyfSBsaXRlcmFscy5cbiAqL1xudmFyIFRleHREb2N1bWVudElkZW50aWZpZXI7XG4oZnVuY3Rpb24gKFRleHREb2N1bWVudElkZW50aWZpZXIpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFRleHREb2N1bWVudElkZW50aWZpZXIgbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUodXJpKSB7XG4gICAgICAgIHJldHVybiB7IHVyaTogdXJpIH07XG4gICAgfVxuICAgIFRleHREb2N1bWVudElkZW50aWZpZXIuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgVGV4dERvY3VtZW50SWRlbnRpZmllcn0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSk7XG4gICAgfVxuICAgIFRleHREb2N1bWVudElkZW50aWZpZXIuaXMgPSBpcztcbn0pKFRleHREb2N1bWVudElkZW50aWZpZXIgfHwgKFRleHREb2N1bWVudElkZW50aWZpZXIgPSB7fSkpO1xuLyoqXG4gKiBUaGUgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyfSBsaXRlcmFscy5cbiAqL1xudmFyIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXI7XG4oZnVuY3Rpb24gKFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKiBAcGFyYW0gdmVyc2lvbiBUaGUgZG9jdW1lbnQncyB2ZXJzaW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHsgdXJpOiB1cmksIHZlcnNpb246IHZlcnNpb24gfTtcbiAgICB9XG4gICAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiBJcy5pbnRlZ2VyKGNhbmRpZGF0ZS52ZXJzaW9uKTtcbiAgICB9XG4gICAgVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyA9IGlzO1xufSkoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciB8fCAoVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG4vKipcbiAqIFRoZSBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyfSBsaXRlcmFscy5cbiAqL1xudmFyIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjtcbihmdW5jdGlvbiAoT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgbGl0ZXJhbC5cbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cbiAgICAgKiBAcGFyYW0gdmVyc2lvbiBUaGUgZG9jdW1lbnQncyB2ZXJzaW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHsgdXJpOiB1cmksIHZlcnNpb246IHZlcnNpb24gfTtcbiAgICB9XG4gICAgT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcn0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKGNhbmRpZGF0ZS52ZXJzaW9uID09PSBudWxsIHx8IElzLmludGVnZXIoY2FuZGlkYXRlLnZlcnNpb24pKTtcbiAgICB9XG4gICAgT3B0aW9uYWxWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmlzID0gaXM7XG59KShPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgfHwgKE9wdGlvbmFsVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHt9KSk7XG4vKipcbiAqIFRoZSBUZXh0RG9jdW1lbnRJdGVtIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFRleHREb2N1bWVudEl0ZW19IGxpdGVyYWxzLlxuICovXG52YXIgVGV4dERvY3VtZW50SXRlbTtcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50SXRlbSkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVGV4dERvY3VtZW50SXRlbSBsaXRlcmFsLlxuICAgICAqIEBwYXJhbSB1cmkgVGhlIGRvY3VtZW50J3MgdXJpLlxuICAgICAqIEBwYXJhbSBsYW5ndWFnZUlkIFRoZSBkb2N1bWVudCdzIGxhbmd1YWdlIGlkZW50aWZpZXIuXG4gICAgICogQHBhcmFtIHZlcnNpb24gVGhlIGRvY3VtZW50J3MgdmVyc2lvbiBudW1iZXIuXG4gICAgICogQHBhcmFtIHRleHQgVGhlIGRvY3VtZW50J3MgdGV4dC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCB0ZXh0KSB7XG4gICAgICAgIHJldHVybiB7IHVyaTogdXJpLCBsYW5ndWFnZUlkOiBsYW5ndWFnZUlkLCB2ZXJzaW9uOiB2ZXJzaW9uLCB0ZXh0OiB0ZXh0IH07XG4gICAgfVxuICAgIFRleHREb2N1bWVudEl0ZW0uY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgVGV4dERvY3VtZW50SXRlbX0gaW50ZXJmYWNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYW5ndWFnZUlkKSAmJiBJcy5pbnRlZ2VyKGNhbmRpZGF0ZS52ZXJzaW9uKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRleHQpO1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnRJdGVtLmlzID0gaXM7XG59KShUZXh0RG9jdW1lbnRJdGVtIHx8IChUZXh0RG9jdW1lbnRJdGVtID0ge30pKTtcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBjb250ZW50IHR5cGUgdGhhdCBhIGNsaWVudCBzdXBwb3J0cyBpbiB2YXJpb3VzXG4gKiByZXN1bHQgbGl0ZXJhbHMgbGlrZSBgSG92ZXJgLCBgUGFyYW1ldGVySW5mb2Agb3IgYENvbXBsZXRpb25JdGVtYC5cbiAqXG4gKiBQbGVhc2Ugbm90ZSB0aGF0IGBNYXJrdXBLaW5kc2AgbXVzdCBub3Qgc3RhcnQgd2l0aCBhIGAkYC4gVGhpcyBraW5kc1xuICogYXJlIHJlc2VydmVkIGZvciBpbnRlcm5hbCB1c2FnZS5cbiAqL1xudmFyIE1hcmt1cEtpbmQ7XG4oZnVuY3Rpb24gKE1hcmt1cEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBQbGFpbiB0ZXh0IGlzIHN1cHBvcnRlZCBhcyBhIGNvbnRlbnQgZm9ybWF0XG4gICAgICovXG4gICAgTWFya3VwS2luZC5QbGFpblRleHQgPSAncGxhaW50ZXh0JztcbiAgICAvKipcbiAgICAgKiBNYXJrZG93biBpcyBzdXBwb3J0ZWQgYXMgYSBjb250ZW50IGZvcm1hdFxuICAgICAqL1xuICAgIE1hcmt1cEtpbmQuTWFya2Rvd24gPSAnbWFya2Rvd24nO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIHZhbHVlIG9mIHRoZSB7QGxpbmsgTWFya3VwS2luZH0gdHlwZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgPT09IE1hcmt1cEtpbmQuUGxhaW5UZXh0IHx8IGNhbmRpZGF0ZSA9PT0gTWFya3VwS2luZC5NYXJrZG93bjtcbiAgICB9XG4gICAgTWFya3VwS2luZC5pcyA9IGlzO1xufSkoTWFya3VwS2luZCB8fCAoTWFya3VwS2luZCA9IHt9KSk7XG52YXIgTWFya3VwQ29udGVudDtcbihmdW5jdGlvbiAoTWFya3VwQ29udGVudCkge1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSBjb25mb3JtcyB0byB0aGUge0BsaW5rIE1hcmt1cENvbnRlbnR9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKHZhbHVlKSAmJiBNYXJrdXBLaW5kLmlzKGNhbmRpZGF0ZS5raW5kKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnZhbHVlKTtcbiAgICB9XG4gICAgTWFya3VwQ29udGVudC5pcyA9IGlzO1xufSkoTWFya3VwQ29udGVudCB8fCAoTWFya3VwQ29udGVudCA9IHt9KSk7XG4vKipcbiAqIFRoZSBraW5kIG9mIGEgY29tcGxldGlvbiBlbnRyeS5cbiAqL1xudmFyIENvbXBsZXRpb25JdGVtS2luZDtcbihmdW5jdGlvbiAoQ29tcGxldGlvbkl0ZW1LaW5kKSB7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlRleHQgPSAxO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5NZXRob2QgPSAyO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbiA9IDM7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0cnVjdG9yID0gNDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRmllbGQgPSA1O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZSA9IDY7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkNsYXNzID0gNztcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlID0gODtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlID0gOTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHkgPSAxMDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuVW5pdCA9IDExO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5WYWx1ZSA9IDEyO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5FbnVtID0gMTM7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQgPSAxNDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuU25pcHBldCA9IDE1O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Db2xvciA9IDE2O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5GaWxlID0gMTc7XG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlJlZmVyZW5jZSA9IDE4O1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Gb2xkZXIgPSAxOTtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRW51bU1lbWJlciA9IDIwO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5Db25zdGFudCA9IDIxO1xuICAgIENvbXBsZXRpb25JdGVtS2luZC5TdHJ1Y3QgPSAyMjtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRXZlbnQgPSAyMztcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuT3BlcmF0b3IgPSAyNDtcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuVHlwZVBhcmFtZXRlciA9IDI1O1xufSkoQ29tcGxldGlvbkl0ZW1LaW5kIHx8IChDb21wbGV0aW9uSXRlbUtpbmQgPSB7fSkpO1xuLyoqXG4gKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGluc2VydCB0ZXh0IGluIGEgY29tcGxldGlvbiBpdGVtIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhc1xuICogcGxhaW4gdGV4dCBvciBhIHNuaXBwZXQuXG4gKi9cbnZhciBJbnNlcnRUZXh0Rm9ybWF0O1xuKGZ1bmN0aW9uIChJbnNlcnRUZXh0Rm9ybWF0KSB7XG4gICAgLyoqXG4gICAgICogVGhlIHByaW1hcnkgdGV4dCB0byBiZSBpbnNlcnRlZCBpcyB0cmVhdGVkIGFzIGEgcGxhaW4gc3RyaW5nLlxuICAgICAqL1xuICAgIEluc2VydFRleHRGb3JtYXQuUGxhaW5UZXh0ID0gMTtcbiAgICAvKipcbiAgICAgKiBUaGUgcHJpbWFyeSB0ZXh0IHRvIGJlIGluc2VydGVkIGlzIHRyZWF0ZWQgYXMgYSBzbmlwcGV0LlxuICAgICAqXG4gICAgICogQSBzbmlwcGV0IGNhbiBkZWZpbmUgdGFiIHN0b3BzIGFuZCBwbGFjZWhvbGRlcnMgd2l0aCBgJDFgLCBgJDJgXG4gICAgICogYW5kIGAkezM6Zm9vfWAuIGAkMGAgZGVmaW5lcyB0aGUgZmluYWwgdGFiIHN0b3AsIGl0IGRlZmF1bHRzIHRvXG4gICAgICogdGhlIGVuZCBvZiB0aGUgc25pcHBldC4gUGxhY2Vob2xkZXJzIHdpdGggZXF1YWwgaWRlbnRpZmllcnMgYXJlIGxpbmtlZCxcbiAgICAgKiB0aGF0IGlzIHR5cGluZyBpbiBvbmUgd2lsbCB1cGRhdGUgb3RoZXJzIHRvby5cbiAgICAgKlxuICAgICAqIFNlZSBhbHNvOiBodHRwczovL21pY3Jvc29mdC5naXRodWIuaW8vbGFuZ3VhZ2Utc2VydmVyLXByb3RvY29sL3NwZWNpZmljYXRpb25zL3NwZWNpZmljYXRpb24tY3VycmVudC8jc25pcHBldF9zeW50YXhcbiAgICAgKi9cbiAgICBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQgPSAyO1xufSkoSW5zZXJ0VGV4dEZvcm1hdCB8fCAoSW5zZXJ0VGV4dEZvcm1hdCA9IHt9KSk7XG4vKipcbiAqIENvbXBsZXRpb24gaXRlbSB0YWdzIGFyZSBleHRyYSBhbm5vdGF0aW9ucyB0aGF0IHR3ZWFrIHRoZSByZW5kZXJpbmcgb2YgYSBjb21wbGV0aW9uXG4gKiBpdGVtLlxuICpcbiAqIEBzaW5jZSAzLjE1LjBcbiAqL1xudmFyIENvbXBsZXRpb25JdGVtVGFnO1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uSXRlbVRhZykge1xuICAgIC8qKlxuICAgICAqIFJlbmRlciBhIGNvbXBsZXRpb24gYXMgb2Jzb2xldGUsIHVzdWFsbHkgdXNpbmcgYSBzdHJpa2Utb3V0LlxuICAgICAqL1xuICAgIENvbXBsZXRpb25JdGVtVGFnLkRlcHJlY2F0ZWQgPSAxO1xufSkoQ29tcGxldGlvbkl0ZW1UYWcgfHwgKENvbXBsZXRpb25JdGVtVGFnID0ge30pKTtcbi8qKlxuICogVGhlIEluc2VydFJlcGxhY2VFZGl0IG5hbWVzcGFjZSBwcm92aWRlcyBmdW5jdGlvbnMgdG8gZGVhbCB3aXRoIGluc2VydCAvIHJlcGxhY2UgZWRpdHMuXG4gKlxuICogQHNpbmNlIDMuMTYuMFxuICovXG52YXIgSW5zZXJ0UmVwbGFjZUVkaXQ7XG4oZnVuY3Rpb24gKEluc2VydFJlcGxhY2VFZGl0KSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnNlcnQgLyByZXBsYWNlIGVkaXRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUobmV3VGV4dCwgaW5zZXJ0LCByZXBsYWNlKSB7XG4gICAgICAgIHJldHVybiB7IG5ld1RleHQ6IG5ld1RleHQsIGluc2VydDogaW5zZXJ0LCByZXBsYWNlOiByZXBsYWNlIH07XG4gICAgfVxuICAgIEluc2VydFJlcGxhY2VFZGl0LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIEluc2VydFJlcGxhY2VFZGl0fSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIElzLnN0cmluZyhjYW5kaWRhdGUubmV3VGV4dCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLmluc2VydCkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJlcGxhY2UpO1xuICAgIH1cbiAgICBJbnNlcnRSZXBsYWNlRWRpdC5pcyA9IGlzO1xufSkoSW5zZXJ0UmVwbGFjZUVkaXQgfHwgKEluc2VydFJlcGxhY2VFZGl0ID0ge30pKTtcbi8qKlxuICogSG93IHdoaXRlc3BhY2UgYW5kIGluZGVudGF0aW9uIGlzIGhhbmRsZWQgZHVyaW5nIGNvbXBsZXRpb25cbiAqIGl0ZW0gaW5zZXJ0aW9uLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIEluc2VydFRleHRNb2RlO1xuKGZ1bmN0aW9uIChJbnNlcnRUZXh0TW9kZSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBpbnNlcnRpb24gb3IgcmVwbGFjZSBzdHJpbmdzIGlzIHRha2VuIGFzIGl0IGlzLiBJZiB0aGVcbiAgICAgKiB2YWx1ZSBpcyBtdWx0aSBsaW5lIHRoZSBsaW5lcyBiZWxvdyB0aGUgY3Vyc29yIHdpbGwgYmVcbiAgICAgKiBpbnNlcnRlZCB1c2luZyB0aGUgaW5kZW50YXRpb24gZGVmaW5lZCBpbiB0aGUgc3RyaW5nIHZhbHVlLlxuICAgICAqIFRoZSBjbGllbnQgd2lsbCBub3QgYXBwbHkgYW55IGtpbmQgb2YgYWRqdXN0bWVudHMgdG8gdGhlXG4gICAgICogc3RyaW5nLlxuICAgICAqL1xuICAgIEluc2VydFRleHRNb2RlLmFzSXMgPSAxO1xuICAgIC8qKlxuICAgICAqIFRoZSBlZGl0b3IgYWRqdXN0cyBsZWFkaW5nIHdoaXRlc3BhY2Ugb2YgbmV3IGxpbmVzIHNvIHRoYXRcbiAgICAgKiB0aGV5IG1hdGNoIHRoZSBpbmRlbnRhdGlvbiB1cCB0byB0aGUgY3Vyc29yIG9mIHRoZSBsaW5lIGZvclxuICAgICAqIHdoaWNoIHRoZSBpdGVtIGlzIGFjY2VwdGVkLlxuICAgICAqXG4gICAgICogQ29uc2lkZXIgYSBsaW5lIGxpa2UgdGhpczogPDJ0YWJzPjxjdXJzb3I+PDN0YWJzPmZvby4gQWNjZXB0aW5nIGFcbiAgICAgKiBtdWx0aSBsaW5lIGNvbXBsZXRpb24gaXRlbSBpcyBpbmRlbnRlZCB1c2luZyAyIHRhYnMgYW5kIGFsbFxuICAgICAqIGZvbGxvd2luZyBsaW5lcyBpbnNlcnRlZCB3aWxsIGJlIGluZGVudGVkIHVzaW5nIDIgdGFicyBhcyB3ZWxsLlxuICAgICAqL1xuICAgIEluc2VydFRleHRNb2RlLmFkanVzdEluZGVudGF0aW9uID0gMjtcbn0pKEluc2VydFRleHRNb2RlIHx8IChJbnNlcnRUZXh0TW9kZSA9IHt9KSk7XG52YXIgQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHM7XG4oZnVuY3Rpb24gKENvbXBsZXRpb25JdGVtTGFiZWxEZXRhaWxzKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIChJcy5zdHJpbmcoY2FuZGlkYXRlLmRldGFpbCkgfHwgY2FuZGlkYXRlLmRldGFpbCA9PT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgKElzLnN0cmluZyhjYW5kaWRhdGUuZGVzY3JpcHRpb24pIHx8IGNhbmRpZGF0ZS5kZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHMuaXMgPSBpcztcbn0pKENvbXBsZXRpb25JdGVtTGFiZWxEZXRhaWxzIHx8IChDb21wbGV0aW9uSXRlbUxhYmVsRGV0YWlscyA9IHt9KSk7XG4vKipcbiAqIFRoZSBDb21wbGV0aW9uSXRlbSBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aFxuICogY29tcGxldGlvbiBpdGVtcy5cbiAqL1xudmFyIENvbXBsZXRpb25JdGVtO1xuKGZ1bmN0aW9uIChDb21wbGV0aW9uSXRlbSkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNvbXBsZXRpb24gaXRlbSBhbmQgc2VlZCBpdCB3aXRoIGEgbGFiZWwuXG4gICAgICogQHBhcmFtIGxhYmVsIFRoZSBjb21wbGV0aW9uIGl0ZW0ncyBsYWJlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCkge1xuICAgICAgICByZXR1cm4geyBsYWJlbDogbGFiZWwgfTtcbiAgICB9XG4gICAgQ29tcGxldGlvbkl0ZW0uY3JlYXRlID0gY3JlYXRlO1xufSkoQ29tcGxldGlvbkl0ZW0gfHwgKENvbXBsZXRpb25JdGVtID0ge30pKTtcbi8qKlxuICogVGhlIENvbXBsZXRpb25MaXN0IG5hbWVzcGFjZSBwcm92aWRlcyBmdW5jdGlvbnMgdG8gZGVhbCB3aXRoXG4gKiBjb21wbGV0aW9uIGxpc3RzLlxuICovXG52YXIgQ29tcGxldGlvbkxpc3Q7XG4oZnVuY3Rpb24gKENvbXBsZXRpb25MaXN0KSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjb21wbGV0aW9uIGxpc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaXRlbXMgVGhlIGNvbXBsZXRpb24gaXRlbXMuXG4gICAgICogQHBhcmFtIGlzSW5jb21wbGV0ZSBUaGUgbGlzdCBpcyBub3QgY29tcGxldGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGl0ZW1zLCBpc0luY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIHsgaXRlbXM6IGl0ZW1zID8gaXRlbXMgOiBbXSwgaXNJbmNvbXBsZXRlOiAhIWlzSW5jb21wbGV0ZSB9O1xuICAgIH1cbiAgICBDb21wbGV0aW9uTGlzdC5jcmVhdGUgPSBjcmVhdGU7XG59KShDb21wbGV0aW9uTGlzdCB8fCAoQ29tcGxldGlvbkxpc3QgPSB7fSkpO1xudmFyIE1hcmtlZFN0cmluZztcbihmdW5jdGlvbiAoTWFya2VkU3RyaW5nKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcmtlZCBzdHJpbmcgZnJvbSBwbGFpbiB0ZXh0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBsYWluVGV4dCBUaGUgcGxhaW4gdGV4dC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmcm9tUGxhaW5UZXh0KHBsYWluVGV4dCkge1xuICAgICAgICByZXR1cm4gcGxhaW5UZXh0LnJlcGxhY2UoL1tcXFxcYCpfe31bXFxdKCkjK1xcLS4hXS9nLCAnXFxcXCQmJyk7IC8vIGVzY2FwZSBtYXJrZG93biBzeW50YXggdG9rZW5zOiBodHRwOi8vZGFyaW5nZmlyZWJhbGwubmV0L3Byb2plY3RzL21hcmtkb3duL3N5bnRheCNiYWNrc2xhc2hcbiAgICB9XG4gICAgTWFya2VkU3RyaW5nLmZyb21QbGFpblRleHQgPSBmcm9tUGxhaW5UZXh0O1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSBjb25mb3JtcyB0byB0aGUge0BsaW5rIE1hcmtlZFN0cmluZ30gdHlwZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5zdHJpbmcoY2FuZGlkYXRlKSB8fCAoSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudmFsdWUpKTtcbiAgICB9XG4gICAgTWFya2VkU3RyaW5nLmlzID0gaXM7XG59KShNYXJrZWRTdHJpbmcgfHwgKE1hcmtlZFN0cmluZyA9IHt9KSk7XG52YXIgSG92ZXI7XG4oZnVuY3Rpb24gKEhvdmVyKSB7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgSG92ZXJ9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiAhIWNhbmRpZGF0ZSAmJiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgKE1hcmt1cENvbnRlbnQuaXMoY2FuZGlkYXRlLmNvbnRlbnRzKSB8fFxuICAgICAgICAgICAgTWFya2VkU3RyaW5nLmlzKGNhbmRpZGF0ZS5jb250ZW50cykgfHxcbiAgICAgICAgICAgIElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmNvbnRlbnRzLCBNYXJrZWRTdHJpbmcuaXMpKSAmJiAodmFsdWUucmFuZ2UgPT09IHVuZGVmaW5lZCB8fCBSYW5nZS5pcyh2YWx1ZS5yYW5nZSkpO1xuICAgIH1cbiAgICBIb3Zlci5pcyA9IGlzO1xufSkoSG92ZXIgfHwgKEhvdmVyID0ge30pKTtcbi8qKlxuICogVGhlIFBhcmFtZXRlckluZm9ybWF0aW9uIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIFBhcmFtZXRlckluZm9ybWF0aW9ufSBsaXRlcmFscy5cbiAqL1xudmFyIFBhcmFtZXRlckluZm9ybWF0aW9uO1xuKGZ1bmN0aW9uIChQYXJhbWV0ZXJJbmZvcm1hdGlvbikge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcGFyYW1ldGVyIGluZm9ybWF0aW9uIGxpdGVyYWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGFiZWwgQSBsYWJlbCBzdHJpbmcuXG4gICAgICogQHBhcmFtIGRvY3VtZW50YXRpb24gQSBkb2Mgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShsYWJlbCwgZG9jdW1lbnRhdGlvbikge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnRhdGlvbiA/IHsgbGFiZWw6IGxhYmVsLCBkb2N1bWVudGF0aW9uOiBkb2N1bWVudGF0aW9uIH0gOiB7IGxhYmVsOiBsYWJlbCB9O1xuICAgIH1cbiAgICBQYXJhbWV0ZXJJbmZvcm1hdGlvbi5jcmVhdGUgPSBjcmVhdGU7XG59KShQYXJhbWV0ZXJJbmZvcm1hdGlvbiB8fCAoUGFyYW1ldGVySW5mb3JtYXRpb24gPSB7fSkpO1xuLyoqXG4gKiBUaGUgU2lnbmF0dXJlSW5mb3JtYXRpb24gbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgU2lnbmF0dXJlSW5mb3JtYXRpb259IGxpdGVyYWxzLlxuICovXG52YXIgU2lnbmF0dXJlSW5mb3JtYXRpb247XG4oZnVuY3Rpb24gKFNpZ25hdHVyZUluZm9ybWF0aW9uKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKGxhYmVsLCBkb2N1bWVudGF0aW9uKSB7XG4gICAgICAgIHZhciBwYXJhbWV0ZXJzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBwYXJhbWV0ZXJzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSB7IGxhYmVsOiBsYWJlbCB9O1xuICAgICAgICBpZiAoSXMuZGVmaW5lZChkb2N1bWVudGF0aW9uKSkge1xuICAgICAgICAgICAgcmVzdWx0LmRvY3VtZW50YXRpb24gPSBkb2N1bWVudGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHBhcmFtZXRlcnMpKSB7XG4gICAgICAgICAgICByZXN1bHQucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucGFyYW1ldGVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIFNpZ25hdHVyZUluZm9ybWF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcbn0pKFNpZ25hdHVyZUluZm9ybWF0aW9uIHx8IChTaWduYXR1cmVJbmZvcm1hdGlvbiA9IHt9KSk7XG4vKipcbiAqIEEgZG9jdW1lbnQgaGlnaGxpZ2h0IGtpbmQuXG4gKi9cbnZhciBEb2N1bWVudEhpZ2hsaWdodEtpbmQ7XG4oZnVuY3Rpb24gKERvY3VtZW50SGlnaGxpZ2h0S2luZCkge1xuICAgIC8qKlxuICAgICAqIEEgdGV4dHVhbCBvY2N1cnJlbmNlLlxuICAgICAqL1xuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZC5UZXh0ID0gMTtcbiAgICAvKipcbiAgICAgKiBSZWFkLWFjY2VzcyBvZiBhIHN5bWJvbCwgbGlrZSByZWFkaW5nIGEgdmFyaWFibGUuXG4gICAgICovXG4gICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kLlJlYWQgPSAyO1xuICAgIC8qKlxuICAgICAqIFdyaXRlLWFjY2VzcyBvZiBhIHN5bWJvbCwgbGlrZSB3cml0aW5nIHRvIGEgdmFyaWFibGUuXG4gICAgICovXG4gICAgRG9jdW1lbnRIaWdobGlnaHRLaW5kLldyaXRlID0gMztcbn0pKERvY3VtZW50SGlnaGxpZ2h0S2luZCB8fCAoRG9jdW1lbnRIaWdobGlnaHRLaW5kID0ge30pKTtcbi8qKlxuICogRG9jdW1lbnRIaWdobGlnaHQgbmFtZXNwYWNlIHRvIHByb3ZpZGUgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcbiAqIHtAbGluayBEb2N1bWVudEhpZ2hsaWdodH0gbGl0ZXJhbHMuXG4gKi9cbnZhciBEb2N1bWVudEhpZ2hsaWdodDtcbihmdW5jdGlvbiAoRG9jdW1lbnRIaWdobGlnaHQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBEb2N1bWVudEhpZ2hsaWdodCBvYmplY3QuXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0aGUgaGlnaGxpZ2h0IGFwcGxpZXMgdG8uXG4gICAgICogQHBhcmFtIGtpbmQgVGhlIGhpZ2hsaWdodCBraW5kXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCBraW5kKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7IHJhbmdlOiByYW5nZSB9O1xuICAgICAgICBpZiAoSXMubnVtYmVyKGtpbmQpKSB7XG4gICAgICAgICAgICByZXN1bHQua2luZCA9IGtpbmQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgRG9jdW1lbnRIaWdobGlnaHQuY3JlYXRlID0gY3JlYXRlO1xufSkoRG9jdW1lbnRIaWdobGlnaHQgfHwgKERvY3VtZW50SGlnaGxpZ2h0ID0ge30pKTtcbi8qKlxuICogQSBzeW1ib2wga2luZC5cbiAqL1xudmFyIFN5bWJvbEtpbmQ7XG4oZnVuY3Rpb24gKFN5bWJvbEtpbmQpIHtcbiAgICBTeW1ib2xLaW5kLkZpbGUgPSAxO1xuICAgIFN5bWJvbEtpbmQuTW9kdWxlID0gMjtcbiAgICBTeW1ib2xLaW5kLk5hbWVzcGFjZSA9IDM7XG4gICAgU3ltYm9sS2luZC5QYWNrYWdlID0gNDtcbiAgICBTeW1ib2xLaW5kLkNsYXNzID0gNTtcbiAgICBTeW1ib2xLaW5kLk1ldGhvZCA9IDY7XG4gICAgU3ltYm9sS2luZC5Qcm9wZXJ0eSA9IDc7XG4gICAgU3ltYm9sS2luZC5GaWVsZCA9IDg7XG4gICAgU3ltYm9sS2luZC5Db25zdHJ1Y3RvciA9IDk7XG4gICAgU3ltYm9sS2luZC5FbnVtID0gMTA7XG4gICAgU3ltYm9sS2luZC5JbnRlcmZhY2UgPSAxMTtcbiAgICBTeW1ib2xLaW5kLkZ1bmN0aW9uID0gMTI7XG4gICAgU3ltYm9sS2luZC5WYXJpYWJsZSA9IDEzO1xuICAgIFN5bWJvbEtpbmQuQ29uc3RhbnQgPSAxNDtcbiAgICBTeW1ib2xLaW5kLlN0cmluZyA9IDE1O1xuICAgIFN5bWJvbEtpbmQuTnVtYmVyID0gMTY7XG4gICAgU3ltYm9sS2luZC5Cb29sZWFuID0gMTc7XG4gICAgU3ltYm9sS2luZC5BcnJheSA9IDE4O1xuICAgIFN5bWJvbEtpbmQuT2JqZWN0ID0gMTk7XG4gICAgU3ltYm9sS2luZC5LZXkgPSAyMDtcbiAgICBTeW1ib2xLaW5kLk51bGwgPSAyMTtcbiAgICBTeW1ib2xLaW5kLkVudW1NZW1iZXIgPSAyMjtcbiAgICBTeW1ib2xLaW5kLlN0cnVjdCA9IDIzO1xuICAgIFN5bWJvbEtpbmQuRXZlbnQgPSAyNDtcbiAgICBTeW1ib2xLaW5kLk9wZXJhdG9yID0gMjU7XG4gICAgU3ltYm9sS2luZC5UeXBlUGFyYW1ldGVyID0gMjY7XG59KShTeW1ib2xLaW5kIHx8IChTeW1ib2xLaW5kID0ge30pKTtcbi8qKlxuICogU3ltYm9sIHRhZ3MgYXJlIGV4dHJhIGFubm90YXRpb25zIHRoYXQgdHdlYWsgdGhlIHJlbmRlcmluZyBvZiBhIHN5bWJvbC5cbiAqXG4gKiBAc2luY2UgMy4xNlxuICovXG52YXIgU3ltYm9sVGFnO1xuKGZ1bmN0aW9uIChTeW1ib2xUYWcpIHtcbiAgICAvKipcbiAgICAgKiBSZW5kZXIgYSBzeW1ib2wgYXMgb2Jzb2xldGUsIHVzdWFsbHkgdXNpbmcgYSBzdHJpa2Utb3V0LlxuICAgICAqL1xuICAgIFN5bWJvbFRhZy5EZXByZWNhdGVkID0gMTtcbn0pKFN5bWJvbFRhZyB8fCAoU3ltYm9sVGFnID0ge30pKTtcbnZhciBTeW1ib2xJbmZvcm1hdGlvbjtcbihmdW5jdGlvbiAoU3ltYm9sSW5mb3JtYXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHN5bWJvbCBpbmZvcm1hdGlvbiBsaXRlcmFsLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0ga2luZCBUaGUga2luZCBvZiB0aGUgc3ltYm9sLlxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2Ugb2YgdGhlIGxvY2F0aW9uIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgcmVzb3VyY2Ugb2YgdGhlIGxvY2F0aW9uIG9mIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0gY29udGFpbmVyTmFtZSBUaGUgbmFtZSBvZiB0aGUgc3ltYm9sIGNvbnRhaW5pbmcgdGhlIHN5bWJvbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUobmFtZSwga2luZCwgcmFuZ2UsIHVyaSwgY29udGFpbmVyTmFtZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgICAgICBsb2NhdGlvbjogeyB1cmk6IHVyaSwgcmFuZ2U6IHJhbmdlIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGNvbnRhaW5lck5hbWUpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb250YWluZXJOYW1lID0gY29udGFpbmVyTmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBTeW1ib2xJbmZvcm1hdGlvbi5jcmVhdGUgPSBjcmVhdGU7XG59KShTeW1ib2xJbmZvcm1hdGlvbiB8fCAoU3ltYm9sSW5mb3JtYXRpb24gPSB7fSkpO1xudmFyIFdvcmtzcGFjZVN5bWJvbDtcbihmdW5jdGlvbiAoV29ya3NwYWNlU3ltYm9sKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHdvcmtzcGFjZSBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc3ltYm9sLlxuICAgICAqIEBwYXJhbSBraW5kIFRoZSBraW5kIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgcmVzb3VyY2Ugb2YgdGhlIGxvY2F0aW9uIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIHJhbmdlIEFuIG9wdGlvbnMgcmFuZ2Ugb2YgdGhlIGxvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIEEgV29ya3NwYWNlU3ltYm9sLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBraW5kLCB1cmksIHJhbmdlKSB7XG4gICAgICAgIHJldHVybiByYW5nZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IHsgbmFtZTogbmFtZSwga2luZDoga2luZCwgbG9jYXRpb246IHsgdXJpOiB1cmksIHJhbmdlOiByYW5nZSB9IH1cbiAgICAgICAgICAgIDogeyBuYW1lOiBuYW1lLCBraW5kOiBraW5kLCBsb2NhdGlvbjogeyB1cmk6IHVyaSB9IH07XG4gICAgfVxuICAgIFdvcmtzcGFjZVN5bWJvbC5jcmVhdGUgPSBjcmVhdGU7XG59KShXb3Jrc3BhY2VTeW1ib2wgfHwgKFdvcmtzcGFjZVN5bWJvbCA9IHt9KSk7XG52YXIgRG9jdW1lbnRTeW1ib2w7XG4oZnVuY3Rpb24gKERvY3VtZW50U3ltYm9sKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBzeW1ib2wgaW5mb3JtYXRpb24gbGl0ZXJhbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIGRldGFpbCBUaGUgZGV0YWlsIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIGtpbmQgVGhlIGtpbmQgb2YgdGhlIHN5bWJvbC5cbiAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIG9mIHRoZSBzeW1ib2wuXG4gICAgICogQHBhcmFtIHNlbGVjdGlvblJhbmdlIFRoZSBzZWxlY3Rpb25SYW5nZSBvZiB0aGUgc3ltYm9sLlxuICAgICAqIEBwYXJhbSBjaGlsZHJlbiBDaGlsZHJlbiBvZiB0aGUgc3ltYm9sLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShuYW1lLCBkZXRhaWwsIGtpbmQsIHJhbmdlLCBzZWxlY3Rpb25SYW5nZSwgY2hpbGRyZW4pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBkZXRhaWw6IGRldGFpbCxcbiAgICAgICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgICAgICByYW5nZTogcmFuZ2UsXG4gICAgICAgICAgICBzZWxlY3Rpb25SYW5nZTogc2VsZWN0aW9uUmFuZ2VcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGNoaWxkcmVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIERvY3VtZW50U3ltYm9sLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUge0BsaW5rIERvY3VtZW50U3ltYm9sfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmXG4gICAgICAgICAgICBJcy5zdHJpbmcoY2FuZGlkYXRlLm5hbWUpICYmIElzLm51bWJlcihjYW5kaWRhdGUua2luZCkgJiZcbiAgICAgICAgICAgIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnNlbGVjdGlvblJhbmdlKSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5kZXRhaWwgPT09IHVuZGVmaW5lZCB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmRldGFpbCkpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmRlcHJlY2F0ZWQgPT09IHVuZGVmaW5lZCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5kZXByZWNhdGVkKSkgJiZcbiAgICAgICAgICAgIChjYW5kaWRhdGUuY2hpbGRyZW4gPT09IHVuZGVmaW5lZCB8fCBBcnJheS5pc0FycmF5KGNhbmRpZGF0ZS5jaGlsZHJlbikpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLnRhZ3MgPT09IHVuZGVmaW5lZCB8fCBBcnJheS5pc0FycmF5KGNhbmRpZGF0ZS50YWdzKSk7XG4gICAgfVxuICAgIERvY3VtZW50U3ltYm9sLmlzID0gaXM7XG59KShEb2N1bWVudFN5bWJvbCB8fCAoRG9jdW1lbnRTeW1ib2wgPSB7fSkpO1xuLyoqXG4gKiBBIHNldCBvZiBwcmVkZWZpbmVkIGNvZGUgYWN0aW9uIGtpbmRzXG4gKi9cbnZhciBDb2RlQWN0aW9uS2luZDtcbihmdW5jdGlvbiAoQ29kZUFjdGlvbktpbmQpIHtcbiAgICAvKipcbiAgICAgKiBFbXB0eSBraW5kLlxuICAgICAqL1xuICAgIENvZGVBY3Rpb25LaW5kLkVtcHR5ID0gJyc7XG4gICAgLyoqXG4gICAgICogQmFzZSBraW5kIGZvciBxdWlja2ZpeCBhY3Rpb25zOiAncXVpY2tmaXgnXG4gICAgICovXG4gICAgQ29kZUFjdGlvbktpbmQuUXVpY2tGaXggPSAncXVpY2tmaXgnO1xuICAgIC8qKlxuICAgICAqIEJhc2Uga2luZCBmb3IgcmVmYWN0b3JpbmcgYWN0aW9uczogJ3JlZmFjdG9yJ1xuICAgICAqL1xuICAgIENvZGVBY3Rpb25LaW5kLlJlZmFjdG9yID0gJ3JlZmFjdG9yJztcbiAgICAvKipcbiAgICAgKiBCYXNlIGtpbmQgZm9yIHJlZmFjdG9yaW5nIGV4dHJhY3Rpb24gYWN0aW9uczogJ3JlZmFjdG9yLmV4dHJhY3QnXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIGV4dHJhY3QgYWN0aW9uczpcbiAgICAgKlxuICAgICAqIC0gRXh0cmFjdCBtZXRob2RcbiAgICAgKiAtIEV4dHJhY3QgZnVuY3Rpb25cbiAgICAgKiAtIEV4dHJhY3QgdmFyaWFibGVcbiAgICAgKiAtIEV4dHJhY3QgaW50ZXJmYWNlIGZyb20gY2xhc3NcbiAgICAgKiAtIC4uLlxuICAgICAqL1xuICAgIENvZGVBY3Rpb25LaW5kLlJlZmFjdG9yRXh0cmFjdCA9ICdyZWZhY3Rvci5leHRyYWN0JztcbiAgICAvKipcbiAgICAgKiBCYXNlIGtpbmQgZm9yIHJlZmFjdG9yaW5nIGlubGluZSBhY3Rpb25zOiAncmVmYWN0b3IuaW5saW5lJ1xuICAgICAqXG4gICAgICogRXhhbXBsZSBpbmxpbmUgYWN0aW9uczpcbiAgICAgKlxuICAgICAqIC0gSW5saW5lIGZ1bmN0aW9uXG4gICAgICogLSBJbmxpbmUgdmFyaWFibGVcbiAgICAgKiAtIElubGluZSBjb25zdGFudFxuICAgICAqIC0gLi4uXG4gICAgICovXG4gICAgQ29kZUFjdGlvbktpbmQuUmVmYWN0b3JJbmxpbmUgPSAncmVmYWN0b3IuaW5saW5lJztcbiAgICAvKipcbiAgICAgKiBCYXNlIGtpbmQgZm9yIHJlZmFjdG9yaW5nIHJld3JpdGUgYWN0aW9uczogJ3JlZmFjdG9yLnJld3JpdGUnXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIHJld3JpdGUgYWN0aW9uczpcbiAgICAgKlxuICAgICAqIC0gQ29udmVydCBKYXZhU2NyaXB0IGZ1bmN0aW9uIHRvIGNsYXNzXG4gICAgICogLSBBZGQgb3IgcmVtb3ZlIHBhcmFtZXRlclxuICAgICAqIC0gRW5jYXBzdWxhdGUgZmllbGRcbiAgICAgKiAtIE1ha2UgbWV0aG9kIHN0YXRpY1xuICAgICAqIC0gTW92ZSBtZXRob2QgdG8gYmFzZSBjbGFzc1xuICAgICAqIC0gLi4uXG4gICAgICovXG4gICAgQ29kZUFjdGlvbktpbmQuUmVmYWN0b3JSZXdyaXRlID0gJ3JlZmFjdG9yLnJld3JpdGUnO1xuICAgIC8qKlxuICAgICAqIEJhc2Uga2luZCBmb3Igc291cmNlIGFjdGlvbnM6IGBzb3VyY2VgXG4gICAgICpcbiAgICAgKiBTb3VyY2UgY29kZSBhY3Rpb25zIGFwcGx5IHRvIHRoZSBlbnRpcmUgZmlsZS5cbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uS2luZC5Tb3VyY2UgPSAnc291cmNlJztcbiAgICAvKipcbiAgICAgKiBCYXNlIGtpbmQgZm9yIGFuIG9yZ2FuaXplIGltcG9ydHMgc291cmNlIGFjdGlvbjogYHNvdXJjZS5vcmdhbml6ZUltcG9ydHNgXG4gICAgICovXG4gICAgQ29kZUFjdGlvbktpbmQuU291cmNlT3JnYW5pemVJbXBvcnRzID0gJ3NvdXJjZS5vcmdhbml6ZUltcG9ydHMnO1xuICAgIC8qKlxuICAgICAqIEJhc2Uga2luZCBmb3IgYXV0by1maXggc291cmNlIGFjdGlvbnM6IGBzb3VyY2UuZml4QWxsYC5cbiAgICAgKlxuICAgICAqIEZpeCBhbGwgYWN0aW9ucyBhdXRvbWF0aWNhbGx5IGZpeCBlcnJvcnMgdGhhdCBoYXZlIGEgY2xlYXIgZml4IHRoYXQgZG8gbm90IHJlcXVpcmUgdXNlciBpbnB1dC5cbiAgICAgKiBUaGV5IHNob3VsZCBub3Qgc3VwcHJlc3MgZXJyb3JzIG9yIHBlcmZvcm0gdW5zYWZlIGZpeGVzIHN1Y2ggYXMgZ2VuZXJhdGluZyBuZXcgdHlwZXMgb3IgY2xhc3Nlcy5cbiAgICAgKlxuICAgICAqIEBzaW5jZSAzLjE1LjBcbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uS2luZC5Tb3VyY2VGaXhBbGwgPSAnc291cmNlLmZpeEFsbCc7XG59KShDb2RlQWN0aW9uS2luZCB8fCAoQ29kZUFjdGlvbktpbmQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgcmVhc29uIHdoeSBjb2RlIGFjdGlvbnMgd2VyZSByZXF1ZXN0ZWQuXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgQ29kZUFjdGlvblRyaWdnZXJLaW5kO1xuKGZ1bmN0aW9uIChDb2RlQWN0aW9uVHJpZ2dlcktpbmQpIHtcbiAgICAvKipcbiAgICAgKiBDb2RlIGFjdGlvbnMgd2VyZSBleHBsaWNpdGx5IHJlcXVlc3RlZCBieSB0aGUgdXNlciBvciBieSBhbiBleHRlbnNpb24uXG4gICAgICovXG4gICAgQ29kZUFjdGlvblRyaWdnZXJLaW5kLkludm9rZWQgPSAxO1xuICAgIC8qKlxuICAgICAqIENvZGUgYWN0aW9ucyB3ZXJlIHJlcXVlc3RlZCBhdXRvbWF0aWNhbGx5LlxuICAgICAqXG4gICAgICogVGhpcyB0eXBpY2FsbHkgaGFwcGVucyB3aGVuIGN1cnJlbnQgc2VsZWN0aW9uIGluIGEgZmlsZSBjaGFuZ2VzLCBidXQgY2FuXG4gICAgICogYWxzbyBiZSB0cmlnZ2VyZWQgd2hlbiBmaWxlIGNvbnRlbnQgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBDb2RlQWN0aW9uVHJpZ2dlcktpbmQuQXV0b21hdGljID0gMjtcbn0pKENvZGVBY3Rpb25UcmlnZ2VyS2luZCB8fCAoQ29kZUFjdGlvblRyaWdnZXJLaW5kID0ge30pKTtcbi8qKlxuICogVGhlIENvZGVBY3Rpb25Db250ZXh0IG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIENvZGVBY3Rpb25Db250ZXh0fSBsaXRlcmFscy5cbiAqL1xudmFyIENvZGVBY3Rpb25Db250ZXh0O1xuKGZ1bmN0aW9uIChDb2RlQWN0aW9uQ29udGV4dCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29kZUFjdGlvbkNvbnRleHQgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUoZGlhZ25vc3RpY3MsIG9ubHksIHRyaWdnZXJLaW5kKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7IGRpYWdub3N0aWNzOiBkaWFnbm9zdGljcyB9O1xuICAgICAgICBpZiAob25seSAhPT0gdW5kZWZpbmVkICYmIG9ubHkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlc3VsdC5vbmx5ID0gb25seTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJpZ2dlcktpbmQgIT09IHVuZGVmaW5lZCAmJiB0cmlnZ2VyS2luZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVzdWx0LnRyaWdnZXJLaW5kID0gdHJpZ2dlcktpbmQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgQ29kZUFjdGlvbkNvbnRleHQuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgQ29kZUFjdGlvbkNvbnRleHR9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuZGlhZ25vc3RpY3MsIERpYWdub3N0aWMuaXMpXG4gICAgICAgICAgICAmJiAoY2FuZGlkYXRlLm9ubHkgPT09IHVuZGVmaW5lZCB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5vbmx5LCBJcy5zdHJpbmcpKVxuICAgICAgICAgICAgJiYgKGNhbmRpZGF0ZS50cmlnZ2VyS2luZCA9PT0gdW5kZWZpbmVkIHx8IGNhbmRpZGF0ZS50cmlnZ2VyS2luZCA9PT0gQ29kZUFjdGlvblRyaWdnZXJLaW5kLkludm9rZWQgfHwgY2FuZGlkYXRlLnRyaWdnZXJLaW5kID09PSBDb2RlQWN0aW9uVHJpZ2dlcktpbmQuQXV0b21hdGljKTtcbiAgICB9XG4gICAgQ29kZUFjdGlvbkNvbnRleHQuaXMgPSBpcztcbn0pKENvZGVBY3Rpb25Db250ZXh0IHx8IChDb2RlQWN0aW9uQ29udGV4dCA9IHt9KSk7XG52YXIgQ29kZUFjdGlvbjtcbihmdW5jdGlvbiAoQ29kZUFjdGlvbikge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh0aXRsZSwga2luZE9yQ29tbWFuZE9yRWRpdCwga2luZCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0geyB0aXRsZTogdGl0bGUgfTtcbiAgICAgICAgdmFyIGNoZWNrS2luZCA9IHRydWU7XG4gICAgICAgIGlmICh0eXBlb2Yga2luZE9yQ29tbWFuZE9yRWRpdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNoZWNrS2luZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmVzdWx0LmtpbmQgPSBraW5kT3JDb21tYW5kT3JFZGl0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKENvbW1hbmQuaXMoa2luZE9yQ29tbWFuZE9yRWRpdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb21tYW5kID0ga2luZE9yQ29tbWFuZE9yRWRpdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5lZGl0ID0ga2luZE9yQ29tbWFuZE9yRWRpdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hlY2tLaW5kICYmIGtpbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzdWx0LmtpbmQgPSBraW5kO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIENvZGVBY3Rpb24uY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRpdGxlKSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5kaWFnbm9zdGljcyA9PT0gdW5kZWZpbmVkIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmRpYWdub3N0aWNzLCBEaWFnbm9zdGljLmlzKSkgJiZcbiAgICAgICAgICAgIChjYW5kaWRhdGUua2luZCA9PT0gdW5kZWZpbmVkIHx8IElzLnN0cmluZyhjYW5kaWRhdGUua2luZCkpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmVkaXQgIT09IHVuZGVmaW5lZCB8fCBjYW5kaWRhdGUuY29tbWFuZCAhPT0gdW5kZWZpbmVkKSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5jb21tYW5kID09PSB1bmRlZmluZWQgfHwgQ29tbWFuZC5pcyhjYW5kaWRhdGUuY29tbWFuZCkpICYmXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmlzUHJlZmVycmVkID09PSB1bmRlZmluZWQgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUuaXNQcmVmZXJyZWQpKSAmJlxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5lZGl0ID09PSB1bmRlZmluZWQgfHwgV29ya3NwYWNlRWRpdC5pcyhjYW5kaWRhdGUuZWRpdCkpO1xuICAgIH1cbiAgICBDb2RlQWN0aW9uLmlzID0gaXM7XG59KShDb2RlQWN0aW9uIHx8IChDb2RlQWN0aW9uID0ge30pKTtcbi8qKlxuICogVGhlIENvZGVMZW5zIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIENvZGVMZW5zfSBsaXRlcmFscy5cbiAqL1xudmFyIENvZGVMZW5zO1xuKGZ1bmN0aW9uIChDb2RlTGVucykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29kZUxlbnMgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGRhdGEpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHsgcmFuZ2U6IHJhbmdlIH07XG4gICAgICAgIGlmIChJcy5kZWZpbmVkKGRhdGEpKSB7XG4gICAgICAgICAgICByZXN1bHQuZGF0YSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgQ29kZUxlbnMuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgQ29kZUxlbnN9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5jb21tYW5kKSB8fCBDb21tYW5kLmlzKGNhbmRpZGF0ZS5jb21tYW5kKSk7XG4gICAgfVxuICAgIENvZGVMZW5zLmlzID0gaXM7XG59KShDb2RlTGVucyB8fCAoQ29kZUxlbnMgPSB7fSkpO1xuLyoqXG4gKiBUaGUgRm9ybWF0dGluZ09wdGlvbnMgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgRm9ybWF0dGluZ09wdGlvbnN9IGxpdGVyYWxzLlxuICovXG52YXIgRm9ybWF0dGluZ09wdGlvbnM7XG4oZnVuY3Rpb24gKEZvcm1hdHRpbmdPcHRpb25zKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBGb3JtYXR0aW5nT3B0aW9ucyBsaXRlcmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh0YWJTaXplLCBpbnNlcnRTcGFjZXMpIHtcbiAgICAgICAgcmV0dXJuIHsgdGFiU2l6ZTogdGFiU2l6ZSwgaW5zZXJ0U3BhY2VzOiBpbnNlcnRTcGFjZXMgfTtcbiAgICB9XG4gICAgRm9ybWF0dGluZ09wdGlvbnMuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgRm9ybWF0dGluZ09wdGlvbnN9IGludGVyZmFjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMudWludGVnZXIoY2FuZGlkYXRlLnRhYlNpemUpICYmIElzLmJvb2xlYW4oY2FuZGlkYXRlLmluc2VydFNwYWNlcyk7XG4gICAgfVxuICAgIEZvcm1hdHRpbmdPcHRpb25zLmlzID0gaXM7XG59KShGb3JtYXR0aW5nT3B0aW9ucyB8fCAoRm9ybWF0dGluZ09wdGlvbnMgPSB7fSkpO1xuLyoqXG4gKiBUaGUgRG9jdW1lbnRMaW5rIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxuICoge0BsaW5rIERvY3VtZW50TGlua30gbGl0ZXJhbHMuXG4gKi9cbnZhciBEb2N1bWVudExpbms7XG4oZnVuY3Rpb24gKERvY3VtZW50TGluaykge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgRG9jdW1lbnRMaW5rIGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCB0YXJnZXQsIGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IHJhbmdlLCB0YXJnZXQ6IHRhcmdldCwgZGF0YTogZGF0YSB9O1xuICAgIH1cbiAgICBEb2N1bWVudExpbmsuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgRG9jdW1lbnRMaW5rfSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUudGFyZ2V0KSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnRhcmdldCkpO1xuICAgIH1cbiAgICBEb2N1bWVudExpbmsuaXMgPSBpcztcbn0pKERvY3VtZW50TGluayB8fCAoRG9jdW1lbnRMaW5rID0ge30pKTtcbi8qKlxuICogVGhlIFNlbGVjdGlvblJhbmdlIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb24gdG8gd29yayB3aXRoXG4gKiBTZWxlY3Rpb25SYW5nZSBsaXRlcmFscy5cbiAqL1xudmFyIFNlbGVjdGlvblJhbmdlO1xuKGZ1bmN0aW9uIChTZWxlY3Rpb25SYW5nZSkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgU2VsZWN0aW9uUmFuZ2VcbiAgICAgKiBAcGFyYW0gcmFuZ2UgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSBwYXJlbnQgYW4gb3B0aW9uYWwgcGFyZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgcGFyZW50KSB7XG4gICAgICAgIHJldHVybiB7IHJhbmdlOiByYW5nZSwgcGFyZW50OiBwYXJlbnQgfTtcbiAgICB9XG4gICAgU2VsZWN0aW9uUmFuZ2UuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIChjYW5kaWRhdGUucGFyZW50ID09PSB1bmRlZmluZWQgfHwgU2VsZWN0aW9uUmFuZ2UuaXMoY2FuZGlkYXRlLnBhcmVudCkpO1xuICAgIH1cbiAgICBTZWxlY3Rpb25SYW5nZS5pcyA9IGlzO1xufSkoU2VsZWN0aW9uUmFuZ2UgfHwgKFNlbGVjdGlvblJhbmdlID0ge30pKTtcbi8qKlxuICogQSBzZXQgb2YgcHJlZGVmaW5lZCB0b2tlbiB0eXBlcy4gVGhpcyBzZXQgaXMgbm90IGZpeGVkXG4gKiBhbiBjbGllbnRzIGNhbiBzcGVjaWZ5IGFkZGl0aW9uYWwgdG9rZW4gdHlwZXMgdmlhIHRoZVxuICogY29ycmVzcG9uZGluZyBjbGllbnQgY2FwYWJpbGl0aWVzLlxuICpcbiAqIEBzaW5jZSAzLjE2LjBcbiAqL1xudmFyIFNlbWFudGljVG9rZW5UeXBlcztcbihmdW5jdGlvbiAoU2VtYW50aWNUb2tlblR5cGVzKSB7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wibmFtZXNwYWNlXCJdID0gXCJuYW1lc3BhY2VcIjtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgZ2VuZXJpYyB0eXBlLiBBY3RzIGFzIGEgZmFsbGJhY2sgZm9yIHR5cGVzIHdoaWNoIGNhbid0IGJlIG1hcHBlZCB0b1xuICAgICAqIGEgc3BlY2lmaWMgdHlwZSBsaWtlIGNsYXNzIG9yIGVudW0uXG4gICAgICovXG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1widHlwZVwiXSA9IFwidHlwZVwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImNsYXNzXCJdID0gXCJjbGFzc1wiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImVudW1cIl0gPSBcImVudW1cIjtcbiAgICBTZW1hbnRpY1Rva2VuVHlwZXNbXCJpbnRlcmZhY2VcIl0gPSBcImludGVyZmFjZVwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcInN0cnVjdFwiXSA9IFwic3RydWN0XCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1widHlwZVBhcmFtZXRlclwiXSA9IFwidHlwZVBhcmFtZXRlclwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcInBhcmFtZXRlclwiXSA9IFwicGFyYW1ldGVyXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1widmFyaWFibGVcIl0gPSBcInZhcmlhYmxlXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wicHJvcGVydHlcIl0gPSBcInByb3BlcnR5XCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wiZW51bU1lbWJlclwiXSA9IFwiZW51bU1lbWJlclwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImV2ZW50XCJdID0gXCJldmVudFwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImZ1bmN0aW9uXCJdID0gXCJmdW5jdGlvblwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcIm1ldGhvZFwiXSA9IFwibWV0aG9kXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wibWFjcm9cIl0gPSBcIm1hY3JvXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wia2V5d29yZFwiXSA9IFwia2V5d29yZFwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcIm1vZGlmaWVyXCJdID0gXCJtb2RpZmllclwiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcImNvbW1lbnRcIl0gPSBcImNvbW1lbnRcIjtcbiAgICBTZW1hbnRpY1Rva2VuVHlwZXNbXCJzdHJpbmdcIl0gPSBcInN0cmluZ1wiO1xuICAgIFNlbWFudGljVG9rZW5UeXBlc1tcIm51bWJlclwiXSA9IFwibnVtYmVyXCI7XG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wicmVnZXhwXCJdID0gXCJyZWdleHBcIjtcbiAgICBTZW1hbnRpY1Rva2VuVHlwZXNbXCJvcGVyYXRvclwiXSA9IFwib3BlcmF0b3JcIjtcbiAgICAvKipcbiAgICAgKiBAc2luY2UgMy4xNy4wXG4gICAgICovXG4gICAgU2VtYW50aWNUb2tlblR5cGVzW1wiZGVjb3JhdG9yXCJdID0gXCJkZWNvcmF0b3JcIjtcbn0pKFNlbWFudGljVG9rZW5UeXBlcyB8fCAoU2VtYW50aWNUb2tlblR5cGVzID0ge30pKTtcbi8qKlxuICogQSBzZXQgb2YgcHJlZGVmaW5lZCB0b2tlbiBtb2RpZmllcnMuIFRoaXMgc2V0IGlzIG5vdCBmaXhlZFxuICogYW4gY2xpZW50cyBjYW4gc3BlY2lmeSBhZGRpdGlvbmFsIHRva2VuIHR5cGVzIHZpYSB0aGVcbiAqIGNvcnJlc3BvbmRpbmcgY2xpZW50IGNhcGFiaWxpdGllcy5cbiAqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzO1xuKGZ1bmN0aW9uIChTZW1hbnRpY1Rva2VuTW9kaWZpZXJzKSB7XG4gICAgU2VtYW50aWNUb2tlbk1vZGlmaWVyc1tcImRlY2xhcmF0aW9uXCJdID0gXCJkZWNsYXJhdGlvblwiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJkZWZpbml0aW9uXCJdID0gXCJkZWZpbml0aW9uXCI7XG4gICAgU2VtYW50aWNUb2tlbk1vZGlmaWVyc1tcInJlYWRvbmx5XCJdID0gXCJyZWFkb25seVwiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJzdGF0aWNcIl0gPSBcInN0YXRpY1wiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJkZXByZWNhdGVkXCJdID0gXCJkZXByZWNhdGVkXCI7XG4gICAgU2VtYW50aWNUb2tlbk1vZGlmaWVyc1tcImFic3RyYWN0XCJdID0gXCJhYnN0cmFjdFwiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJhc3luY1wiXSA9IFwiYXN5bmNcIjtcbiAgICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzW1wibW9kaWZpY2F0aW9uXCJdID0gXCJtb2RpZmljYXRpb25cIjtcbiAgICBTZW1hbnRpY1Rva2VuTW9kaWZpZXJzW1wiZG9jdW1lbnRhdGlvblwiXSA9IFwiZG9jdW1lbnRhdGlvblwiO1xuICAgIFNlbWFudGljVG9rZW5Nb2RpZmllcnNbXCJkZWZhdWx0TGlicmFyeVwiXSA9IFwiZGVmYXVsdExpYnJhcnlcIjtcbn0pKFNlbWFudGljVG9rZW5Nb2RpZmllcnMgfHwgKFNlbWFudGljVG9rZW5Nb2RpZmllcnMgPSB7fSkpO1xuLyoqXG4gKiBAc2luY2UgMy4xNi4wXG4gKi9cbnZhciBTZW1hbnRpY1Rva2VucztcbihmdW5jdGlvbiAoU2VtYW50aWNUb2tlbnMpIHtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgKGNhbmRpZGF0ZS5yZXN1bHRJZCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBjYW5kaWRhdGUucmVzdWx0SWQgPT09ICdzdHJpbmcnKSAmJlxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShjYW5kaWRhdGUuZGF0YSkgJiYgKGNhbmRpZGF0ZS5kYXRhLmxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgY2FuZGlkYXRlLmRhdGFbMF0gPT09ICdudW1iZXInKTtcbiAgICB9XG4gICAgU2VtYW50aWNUb2tlbnMuaXMgPSBpcztcbn0pKFNlbWFudGljVG9rZW5zIHx8IChTZW1hbnRpY1Rva2VucyA9IHt9KSk7XG4vKipcbiAqIFRoZSBJbmxpbmVWYWx1ZVRleHQgbmFtZXNwYWNlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0byBkZWFsIHdpdGggSW5saW5lVmFsdWVUZXh0cy5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxpbmVWYWx1ZVRleHQ7XG4oZnVuY3Rpb24gKElubGluZVZhbHVlVGV4dCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgSW5saW5lVmFsdWVUZXh0IGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCB0ZXh0KSB7XG4gICAgICAgIHJldHVybiB7IHJhbmdlOiByYW5nZSwgdGV4dDogdGV4dCB9O1xuICAgIH1cbiAgICBJbmxpbmVWYWx1ZVRleHQuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudGV4dCk7XG4gICAgfVxuICAgIElubGluZVZhbHVlVGV4dC5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVUZXh0IHx8IChJbmxpbmVWYWx1ZVRleHQgPSB7fSkpO1xuLyoqXG4gKiBUaGUgSW5saW5lVmFsdWVWYXJpYWJsZUxvb2t1cCBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aCBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3Vwcy5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwO1xuKGZ1bmN0aW9uIChJbmxpbmVWYWx1ZVZhcmlhYmxlTG9va3VwKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBJbmxpbmVWYWx1ZVRleHQgbGl0ZXJhbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIHZhcmlhYmxlTmFtZSwgY2FzZVNlbnNpdGl2ZUxvb2t1cCkge1xuICAgICAgICByZXR1cm4geyByYW5nZTogcmFuZ2UsIHZhcmlhYmxlTmFtZTogdmFyaWFibGVOYW1lLCBjYXNlU2Vuc2l0aXZlTG9va3VwOiBjYXNlU2Vuc2l0aXZlTG9va3VwIH07XG4gICAgfVxuICAgIElubGluZVZhbHVlVmFyaWFibGVMb29rdXAuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIElzLmJvb2xlYW4oY2FuZGlkYXRlLmNhc2VTZW5zaXRpdmVMb29rdXApXG4gICAgICAgICAgICAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS52YXJpYWJsZU5hbWUpIHx8IGNhbmRpZGF0ZS52YXJpYWJsZU5hbWUgPT09IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIElubGluZVZhbHVlVmFyaWFibGVMb29rdXAuaXMgPSBpcztcbn0pKElubGluZVZhbHVlVmFyaWFibGVMb29rdXAgfHwgKElubGluZVZhbHVlVmFyaWFibGVMb29rdXAgPSB7fSkpO1xuLyoqXG4gKiBUaGUgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24gbmFtZXNwYWNlIHByb3ZpZGVzIGZ1bmN0aW9ucyB0byBkZWFsIHdpdGggSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24uXG4gKlxuICogQHNpbmNlIDMuMTcuMFxuICovXG52YXIgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb247XG4oZnVuY3Rpb24gKElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbiBsaXRlcmFsLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgZXhwcmVzc2lvbikge1xuICAgICAgICByZXR1cm4geyByYW5nZTogcmFuZ2UsIGV4cHJlc3Npb246IGV4cHJlc3Npb24gfTtcbiAgICB9XG4gICAgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24uY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAhPT0gdW5kZWZpbmVkICYmIGNhbmRpZGF0ZSAhPT0gbnVsbCAmJiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpXG4gICAgICAgICAgICAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5leHByZXNzaW9uKSB8fCBjYW5kaWRhdGUuZXhwcmVzc2lvbiA9PT0gdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgSW5saW5lVmFsdWVFdmFsdWF0YWJsZUV4cHJlc3Npb24uaXMgPSBpcztcbn0pKElubGluZVZhbHVlRXZhbHVhdGFibGVFeHByZXNzaW9uIHx8IChJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbiA9IHt9KSk7XG4vKipcbiAqIFRoZSBJbmxpbmVWYWx1ZUNvbnRleHQgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXG4gKiB7QGxpbmsgSW5saW5lVmFsdWVDb250ZXh0fSBsaXRlcmFscy5cbiAqXG4gKiBAc2luY2UgMy4xNy4wXG4gKi9cbnZhciBJbmxpbmVWYWx1ZUNvbnRleHQ7XG4oZnVuY3Rpb24gKElubGluZVZhbHVlQ29udGV4dCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgSW5saW5lVmFsdWVDb250ZXh0IGxpdGVyYWwuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKGZyYW1lSWQsIHN0b3BwZWRMb2NhdGlvbikge1xuICAgICAgICByZXR1cm4geyBmcmFtZUlkOiBmcmFtZUlkLCBzdG9wcGVkTG9jYXRpb246IHN0b3BwZWRMb2NhdGlvbiB9O1xuICAgIH1cbiAgICBJbmxpbmVWYWx1ZUNvbnRleHQuY3JlYXRlID0gY3JlYXRlO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSB7QGxpbmsgSW5saW5lVmFsdWVDb250ZXh0fSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKHZhbHVlLnN0b3BwZWRMb2NhdGlvbik7XG4gICAgfVxuICAgIElubGluZVZhbHVlQ29udGV4dC5pcyA9IGlzO1xufSkoSW5saW5lVmFsdWVDb250ZXh0IHx8IChJbmxpbmVWYWx1ZUNvbnRleHQgPSB7fSkpO1xuLyoqXG4gKiBJbmxheSBoaW50IGtpbmRzLlxuICpcbiAqIEBzaW5jZSAzLjE3LjBcbiAqL1xudmFyIElubGF5SGludEtpbmQ7XG4oZnVuY3Rpb24gKElubGF5SGludEtpbmQpIHtcbiAgICAvKipcbiAgICAgKiBBbiBpbmxheSBoaW50IHRoYXQgZm9yIGEgdHlwZSBhbm5vdGF0aW9uLlxuICAgICAqL1xuICAgIElubGF5SGludEtpbmQuVHlwZSA9IDE7XG4gICAgLyoqXG4gICAgICogQW4gaW5sYXkgaGludCB0aGF0IGlzIGZvciBhIHBhcmFtZXRlci5cbiAgICAgKi9cbiAgICBJbmxheUhpbnRLaW5kLlBhcmFtZXRlciA9IDI7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAxIHx8IHZhbHVlID09PSAyO1xuICAgIH1cbiAgICBJbmxheUhpbnRLaW5kLmlzID0gaXM7XG59KShJbmxheUhpbnRLaW5kIHx8IChJbmxheUhpbnRLaW5kID0ge30pKTtcbnZhciBJbmxheUhpbnRMYWJlbFBhcnQ7XG4oZnVuY3Rpb24gKElubGF5SGludExhYmVsUGFydCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogdmFsdWUgfTtcbiAgICB9XG4gICAgSW5sYXlIaW50TGFiZWxQYXJ0LmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSlcbiAgICAgICAgICAgICYmIChjYW5kaWRhdGUudG9vbHRpcCA9PT0gdW5kZWZpbmVkIHx8IElzLnN0cmluZyhjYW5kaWRhdGUudG9vbHRpcCkgfHwgTWFya3VwQ29udGVudC5pcyhjYW5kaWRhdGUudG9vbHRpcCkpXG4gICAgICAgICAgICAmJiAoY2FuZGlkYXRlLmxvY2F0aW9uID09PSB1bmRlZmluZWQgfHwgTG9jYXRpb24uaXMoY2FuZGlkYXRlLmxvY2F0aW9uKSlcbiAgICAgICAgICAgICYmIChjYW5kaWRhdGUuY29tbWFuZCA9PT0gdW5kZWZpbmVkIHx8IENvbW1hbmQuaXMoY2FuZGlkYXRlLmNvbW1hbmQpKTtcbiAgICB9XG4gICAgSW5sYXlIaW50TGFiZWxQYXJ0LmlzID0gaXM7XG59KShJbmxheUhpbnRMYWJlbFBhcnQgfHwgKElubGF5SGludExhYmVsUGFydCA9IHt9KSk7XG52YXIgSW5sYXlIaW50O1xuKGZ1bmN0aW9uIChJbmxheUhpbnQpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUocG9zaXRpb24sIGxhYmVsLCBraW5kKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB7IHBvc2l0aW9uOiBwb3NpdGlvbiwgbGFiZWw6IGxhYmVsIH07XG4gICAgICAgIGlmIChraW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5raW5kID0ga2luZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBJbmxheUhpbnQuY3JlYXRlID0gY3JlYXRlO1xuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBQb3NpdGlvbi5pcyhjYW5kaWRhdGUucG9zaXRpb24pXG4gICAgICAgICAgICAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYWJlbCkgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUubGFiZWwsIElubGF5SGludExhYmVsUGFydC5pcykpXG4gICAgICAgICAgICAmJiAoY2FuZGlkYXRlLmtpbmQgPT09IHVuZGVmaW5lZCB8fCBJbmxheUhpbnRLaW5kLmlzKGNhbmRpZGF0ZS5raW5kKSlcbiAgICAgICAgICAgICYmIChjYW5kaWRhdGUudGV4dEVkaXRzID09PSB1bmRlZmluZWQpIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLnRleHRFZGl0cywgVGV4dEVkaXQuaXMpXG4gICAgICAgICAgICAmJiAoY2FuZGlkYXRlLnRvb2x0aXAgPT09IHVuZGVmaW5lZCB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnRvb2x0aXApIHx8IE1hcmt1cENvbnRlbnQuaXMoY2FuZGlkYXRlLnRvb2x0aXApKVxuICAgICAgICAgICAgJiYgKGNhbmRpZGF0ZS5wYWRkaW5nTGVmdCA9PT0gdW5kZWZpbmVkIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLnBhZGRpbmdMZWZ0KSlcbiAgICAgICAgICAgICYmIChjYW5kaWRhdGUucGFkZGluZ1JpZ2h0ID09PSB1bmRlZmluZWQgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUucGFkZGluZ1JpZ2h0KSk7XG4gICAgfVxuICAgIElubGF5SGludC5pcyA9IGlzO1xufSkoSW5sYXlIaW50IHx8IChJbmxheUhpbnQgPSB7fSkpO1xudmFyIFdvcmtzcGFjZUZvbGRlcjtcbihmdW5jdGlvbiAoV29ya3NwYWNlRm9sZGVyKSB7XG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIFVSSS5pcyhjYW5kaWRhdGUudXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm5hbWUpO1xuICAgIH1cbiAgICBXb3Jrc3BhY2VGb2xkZXIuaXMgPSBpcztcbn0pKFdvcmtzcGFjZUZvbGRlciB8fCAoV29ya3NwYWNlRm9sZGVyID0ge30pKTtcbnZhciBFT0wgPSBbJ1xcbicsICdcXHJcXG4nLCAnXFxyJ107XG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSB0aGUgdGV4dCBkb2N1bWVudCBmcm9tIHRoZSBuZXcgdnNjb2RlLWxhbmd1YWdlc2VydmVyLXRleHRkb2N1bWVudCBwYWNrYWdlLlxuICovXG52YXIgVGV4dERvY3VtZW50O1xuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnQpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IElUZXh0RG9jdW1lbnQgbGl0ZXJhbCBmcm9tIHRoZSBnaXZlbiB1cmkgYW5kIGNvbnRlbnQuXG4gICAgICogQHBhcmFtIHVyaSBUaGUgZG9jdW1lbnQncyB1cmkuXG4gICAgICogQHBhcmFtIGxhbmd1YWdlSWQgVGhlIGRvY3VtZW50J3MgbGFuZ3VhZ2UgSWQuXG4gICAgICogQHBhcmFtIHZlcnNpb24gVGhlIGRvY3VtZW50J3MgdmVyc2lvbi5cbiAgICAgKiBAcGFyYW0gY29udGVudCBUaGUgZG9jdW1lbnQncyBjb250ZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGdWxsVGV4dERvY3VtZW50KHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCk7XG4gICAgfVxuICAgIFRleHREb2N1bWVudC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIHtAbGluayBJVGV4dERvY3VtZW50fSBpbnRlcmZhY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5sYW5ndWFnZUlkKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlSWQpKSAmJiBJcy51aW50ZWdlcihjYW5kaWRhdGUubGluZUNvdW50KVxuICAgICAgICAgICAgJiYgSXMuZnVuYyhjYW5kaWRhdGUuZ2V0VGV4dCkgJiYgSXMuZnVuYyhjYW5kaWRhdGUucG9zaXRpb25BdCkgJiYgSXMuZnVuYyhjYW5kaWRhdGUub2Zmc2V0QXQpID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cbiAgICBUZXh0RG9jdW1lbnQuaXMgPSBpcztcbiAgICBmdW5jdGlvbiBhcHBseUVkaXRzKGRvY3VtZW50LCBlZGl0cykge1xuICAgICAgICB2YXIgdGV4dCA9IGRvY3VtZW50LmdldFRleHQoKTtcbiAgICAgICAgdmFyIHNvcnRlZEVkaXRzID0gbWVyZ2VTb3J0KGVkaXRzLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgdmFyIGRpZmYgPSBhLnJhbmdlLnN0YXJ0LmxpbmUgLSBiLnJhbmdlLnN0YXJ0LmxpbmU7XG4gICAgICAgICAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhLnJhbmdlLnN0YXJ0LmNoYXJhY3RlciAtIGIucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRpZmY7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbGFzdE1vZGlmaWVkT2Zmc2V0ID0gdGV4dC5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSBzb3J0ZWRFZGl0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIGUgPSBzb3J0ZWRFZGl0c1tpXTtcbiAgICAgICAgICAgIHZhciBzdGFydE9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KGUucmFuZ2Uuc3RhcnQpO1xuICAgICAgICAgICAgdmFyIGVuZE9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KGUucmFuZ2UuZW5kKTtcbiAgICAgICAgICAgIGlmIChlbmRPZmZzZXQgPD0gbGFzdE1vZGlmaWVkT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIHN0YXJ0T2Zmc2V0KSArIGUubmV3VGV4dCArIHRleHQuc3Vic3RyaW5nKGVuZE9mZnNldCwgdGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPdmVybGFwcGluZyBlZGl0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0TW9kaWZpZWRPZmZzZXQgPSBzdGFydE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgVGV4dERvY3VtZW50LmFwcGx5RWRpdHMgPSBhcHBseUVkaXRzO1xuICAgIGZ1bmN0aW9uIG1lcmdlU29ydChkYXRhLCBjb21wYXJlKSB7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAvLyBzb3J0ZWRcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwID0gKGRhdGEubGVuZ3RoIC8gMikgfCAwO1xuICAgICAgICB2YXIgbGVmdCA9IGRhdGEuc2xpY2UoMCwgcCk7XG4gICAgICAgIHZhciByaWdodCA9IGRhdGEuc2xpY2UocCk7XG4gICAgICAgIG1lcmdlU29ydChsZWZ0LCBjb21wYXJlKTtcbiAgICAgICAgbWVyZ2VTb3J0KHJpZ2h0LCBjb21wYXJlKTtcbiAgICAgICAgdmFyIGxlZnRJZHggPSAwO1xuICAgICAgICB2YXIgcmlnaHRJZHggPSAwO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGggJiYgcmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciByZXQgPSBjb21wYXJlKGxlZnRbbGVmdElkeF0sIHJpZ2h0W3JpZ2h0SWR4XSk7XG4gICAgICAgICAgICBpZiAocmV0IDw9IDApIHtcbiAgICAgICAgICAgICAgICAvLyBzbWFsbGVyX2VxdWFsIC0+IHRha2UgbGVmdCB0byBwcmVzZXJ2ZSBvcmRlclxuICAgICAgICAgICAgICAgIGRhdGFbaSsrXSA9IGxlZnRbbGVmdElkeCsrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGdyZWF0ZXIgLT4gdGFrZSByaWdodFxuICAgICAgICAgICAgICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRhdGFbaSsrXSA9IGxlZnRbbGVmdElkeCsrXTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAocmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbn0pKFRleHREb2N1bWVudCB8fCAoVGV4dERvY3VtZW50ID0ge30pKTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSB0ZXh0IGRvY3VtZW50IGZyb20gdGhlIG5ldyB2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItdGV4dGRvY3VtZW50IHBhY2thZ2UuXG4gKi9cbnZhciBGdWxsVGV4dERvY3VtZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZ1bGxUZXh0RG9jdW1lbnQodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KSB7XG4gICAgICAgIHRoaXMuX3VyaSA9IHVyaTtcbiAgICAgICAgdGhpcy5fbGFuZ3VhZ2VJZCA9IGxhbmd1YWdlSWQ7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICB0aGlzLl9jb250ZW50ID0gY29udGVudDtcbiAgICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZSwgXCJ1cmlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91cmk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUsIFwibGFuZ3VhZ2VJZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xhbmd1YWdlSWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUsIFwidmVyc2lvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZlcnNpb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZS5nZXRUZXh0ID0gZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5vZmZzZXRBdChyYW5nZS5zdGFydCk7XG4gICAgICAgICAgICB2YXIgZW5kID0gdGhpcy5vZmZzZXRBdChyYW5nZS5lbmQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xuICAgIH07XG4gICAgRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGV2ZW50LCB2ZXJzaW9uKSB7XG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSBldmVudC50ZXh0O1xuICAgICAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZS5nZXRMaW5lT2Zmc2V0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpbmVPZmZzZXRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBsaW5lT2Zmc2V0cyA9IFtdO1xuICAgICAgICAgICAgdmFyIHRleHQgPSB0aGlzLl9jb250ZW50O1xuICAgICAgICAgICAgdmFyIGlzTGluZVN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChpc0xpbmVTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBsaW5lT2Zmc2V0cy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICBpc0xpbmVTdGFydCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgY2ggPSB0ZXh0LmNoYXJBdChpKTtcbiAgICAgICAgICAgICAgICBpc0xpbmVTdGFydCA9IChjaCA9PT0gJ1xccicgfHwgY2ggPT09ICdcXG4nKTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXHInICYmIGkgKyAxIDwgdGV4dC5sZW5ndGggJiYgdGV4dC5jaGFyQXQoaSArIDEpID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzTGluZVN0YXJ0ICYmIHRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGxpbmVPZmZzZXRzLnB1c2godGV4dC5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbGluZU9mZnNldHMgPSBsaW5lT2Zmc2V0cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbGluZU9mZnNldHM7XG4gICAgfTtcbiAgICBGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZS5wb3NpdGlvbkF0ID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICAgICAgICBvZmZzZXQgPSBNYXRoLm1heChNYXRoLm1pbihvZmZzZXQsIHRoaXMuX2NvbnRlbnQubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBsaW5lT2Zmc2V0cyA9IHRoaXMuZ2V0TGluZU9mZnNldHMoKTtcbiAgICAgICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBsaW5lT2Zmc2V0cy5sZW5ndGg7XG4gICAgICAgIGlmIChoaWdoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gUG9zaXRpb24uY3JlYXRlKDAsIG9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgICAgICAgaWYgKGxpbmVPZmZzZXRzW21pZF0gPiBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBsb3cgaXMgdGhlIGxlYXN0IHggZm9yIHdoaWNoIHRoZSBsaW5lIG9mZnNldCBpcyBsYXJnZXIgdGhhbiB0aGUgY3VycmVudCBvZmZzZXRcbiAgICAgICAgLy8gb3IgYXJyYXkubGVuZ3RoIGlmIG5vIGxpbmUgb2Zmc2V0IGlzIGxhcmdlciB0aGFuIHRoZSBjdXJyZW50IG9mZnNldFxuICAgICAgICB2YXIgbGluZSA9IGxvdyAtIDE7XG4gICAgICAgIHJldHVybiBQb3NpdGlvbi5jcmVhdGUobGluZSwgb2Zmc2V0IC0gbGluZU9mZnNldHNbbGluZV0pO1xuICAgIH07XG4gICAgRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUub2Zmc2V0QXQgPSBmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgICAgdmFyIGxpbmVPZmZzZXRzID0gdGhpcy5nZXRMaW5lT2Zmc2V0cygpO1xuICAgICAgICBpZiAocG9zaXRpb24ubGluZSA+PSBsaW5lT2Zmc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50Lmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwb3NpdGlvbi5saW5lIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpbmVPZmZzZXQgPSBsaW5lT2Zmc2V0c1twb3NpdGlvbi5saW5lXTtcbiAgICAgICAgdmFyIG5leHRMaW5lT2Zmc2V0ID0gKHBvc2l0aW9uLmxpbmUgKyAxIDwgbGluZU9mZnNldHMubGVuZ3RoKSA/IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmUgKyAxXSA6IHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4obGluZU9mZnNldCArIHBvc2l0aW9uLmNoYXJhY3RlciwgbmV4dExpbmVPZmZzZXQpLCBsaW5lT2Zmc2V0KTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZSwgXCJsaW5lQ291bnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldExpbmVPZmZzZXRzKCkubGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEZ1bGxUZXh0RG9jdW1lbnQ7XG59KCkpO1xudmFyIElzO1xuKGZ1bmN0aW9uIChJcykge1xuICAgIHZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG4gICAgZnVuY3Rpb24gZGVmaW5lZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJztcbiAgICB9XG4gICAgSXMuZGVmaW5lZCA9IGRlZmluZWQ7XG4gICAgZnVuY3Rpb24gdW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xuICAgIH1cbiAgICBJcy51bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgZnVuY3Rpb24gYm9vbGVhbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlO1xuICAgIH1cbiAgICBJcy5ib29sZWFuID0gYm9vbGVhbjtcbiAgICBmdW5jdGlvbiBzdHJpbmcodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBTdHJpbmddJztcbiAgICB9XG4gICAgSXMuc3RyaW5nID0gc3RyaW5nO1xuICAgIGZ1bmN0aW9uIG51bWJlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE51bWJlcl0nO1xuICAgIH1cbiAgICBJcy5udW1iZXIgPSBudW1iZXI7XG4gICAgZnVuY3Rpb24gbnVtYmVyUmFuZ2UodmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScgJiYgbWluIDw9IHZhbHVlICYmIHZhbHVlIDw9IG1heDtcbiAgICB9XG4gICAgSXMubnVtYmVyUmFuZ2UgPSBudW1iZXJSYW5nZTtcbiAgICBmdW5jdGlvbiBpbnRlZ2VyKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScgJiYgLTIxNDc0ODM2NDggPD0gdmFsdWUgJiYgdmFsdWUgPD0gMjE0NzQ4MzY0NztcbiAgICB9XG4gICAgSXMuaW50ZWdlciA9IGludGVnZXI7XG4gICAgZnVuY3Rpb24gdWludGVnZXIodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBOdW1iZXJdJyAmJiAwIDw9IHZhbHVlICYmIHZhbHVlIDw9IDIxNDc0ODM2NDc7XG4gICAgfVxuICAgIElzLnVpbnRlZ2VyID0gdWludGVnZXI7XG4gICAgZnVuY3Rpb24gZnVuYyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gICAgfVxuICAgIElzLmZ1bmMgPSBmdW5jO1xuICAgIGZ1bmN0aW9uIG9iamVjdExpdGVyYWwodmFsdWUpIHtcbiAgICAgICAgLy8gU3RyaWN0bHkgc3BlYWtpbmcgY2xhc3MgaW5zdGFuY2VzIHBhc3MgdGhpcyBjaGVjayBhcyB3ZWxsLiBTaW5jZSB0aGUgTFNQXG4gICAgICAgIC8vIGRvZXNuJ3QgdXNlIGNsYXNzZXMgd2UgaWdub3JlIHRoaXMgZm9yIG5vdy4gSWYgd2UgZG8gd2UgbmVlZCB0byBhZGQgc29tZXRoaW5nXG4gICAgICAgIC8vIGxpa2UgdGhpczogYE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoeCkpID09PSBudWxsYFxuICAgICAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JztcbiAgICB9XG4gICAgSXMub2JqZWN0TGl0ZXJhbCA9IG9iamVjdExpdGVyYWw7XG4gICAgZnVuY3Rpb24gdHlwZWRBcnJheSh2YWx1ZSwgY2hlY2spIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmV2ZXJ5KGNoZWNrKTtcbiAgICB9XG4gICAgSXMudHlwZWRBcnJheSA9IHR5cGVkQXJyYXk7XG59KShJcyB8fCAoSXMgPSB7fSkpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyNzMwOlxuLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgZm9yRWFjaCA9IF9fd2VicGFja19yZXF1aXJlX18oNzA1KTtcbnZhciBhdmFpbGFibGVUeXBlZEFycmF5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDgzNCk7XG52YXIgY2FsbEJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0OTgpO1xudmFyIGNhbGxCb3VuZCA9IF9fd2VicGFja19yZXF1aXJlX18oOTgxOCk7XG52YXIgZ09QRCA9IF9fd2VicGFja19yZXF1aXJlX18oOTMzNik7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcbnZhciBoYXNUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oMTkxMykoKTtcblxudmFyIGcgPSB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfcmVxdWlyZV9fLmcgOiBnbG9iYWxUaGlzO1xudmFyIHR5cGVkQXJyYXlzID0gYXZhaWxhYmxlVHlwZWRBcnJheXMoKTtcblxudmFyICRzbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mOyAvLyByZXF1aXJlKCdnZXRwcm90b3R5cGVvZicpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQm91bmQoJ0FycmF5LnByb3RvdHlwZS5pbmRleE9mJywgdHJ1ZSkgfHwgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcblx0XHRcdHJldHVybiBpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gLTE7XG59O1xudmFyIGNhY2hlID0geyBfX3Byb3RvX186IG51bGwgfTtcbmlmIChoYXNUb1N0cmluZ1RhZyAmJiBnT1BEICYmIGdldFByb3RvdHlwZU9mKSB7XG5cdGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdFx0dmFyIGFyciA9IG5ldyBnW3R5cGVkQXJyYXldKCk7XG5cdFx0aWYgKFN5bWJvbC50b1N0cmluZ1RhZyBpbiBhcnIpIHtcblx0XHRcdHZhciBwcm90byA9IGdldFByb3RvdHlwZU9mKGFycik7XG5cdFx0XHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHRpZiAoIWRlc2NyaXB0b3IpIHtcblx0XHRcdFx0dmFyIHN1cGVyUHJvdG8gPSBnZXRQcm90b3R5cGVPZihwcm90byk7XG5cdFx0XHRcdGRlc2NyaXB0b3IgPSBnT1BEKHN1cGVyUHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHR9XG5cdFx0XHRjYWNoZVsnJCcgKyB0eXBlZEFycmF5XSA9IGNhbGxCaW5kKGRlc2NyaXB0b3IuZ2V0KTtcblx0XHR9XG5cdH0pO1xufSBlbHNlIHtcblx0Zm9yRWFjaCh0eXBlZEFycmF5cywgZnVuY3Rpb24gKHR5cGVkQXJyYXkpIHtcblx0XHR2YXIgYXJyID0gbmV3IGdbdHlwZWRBcnJheV0oKTtcblx0XHRjYWNoZVsnJCcgKyB0eXBlZEFycmF5XSA9IGNhbGxCaW5kKGFyci5zbGljZSk7XG5cdH0pO1xufVxuXG52YXIgdHJ5VHlwZWRBcnJheXMgPSBmdW5jdGlvbiB0cnlBbGxUeXBlZEFycmF5cyh2YWx1ZSkge1xuXHR2YXIgZm91bmQgPSBmYWxzZTtcblx0Zm9yRWFjaChjYWNoZSwgZnVuY3Rpb24gKGdldHRlciwgdHlwZWRBcnJheSkge1xuXHRcdGlmICghZm91bmQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICgnJCcgKyBnZXR0ZXIodmFsdWUpID09PSB0eXBlZEFycmF5KSB7XG5cdFx0XHRcdFx0Zm91bmQgPSAkc2xpY2UodHlwZWRBcnJheSwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGZvdW5kO1xufTtcblxudmFyIHRyeVNsaWNlcyA9IGZ1bmN0aW9uIHRyeUFsbFNsaWNlcyh2YWx1ZSkge1xuXHR2YXIgZm91bmQgPSBmYWxzZTtcblx0Zm9yRWFjaChjYWNoZSwgZnVuY3Rpb24gKGdldHRlciwgbmFtZSkge1xuXHRcdGlmICghZm91bmQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGdldHRlcih2YWx1ZSk7XG5cdFx0XHRcdGZvdW5kID0gJHNsaWNlKG5hbWUsIDEpO1xuXHRcdFx0fSBjYXRjaCAoZSkgeyAvKiovIH1cblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gZm91bmQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHR2YXIgdGFnID0gJHNsaWNlKCR0b1N0cmluZyh2YWx1ZSksIDgsIC0xKTtcblx0XHRpZiAoJGluZGV4T2YodHlwZWRBcnJheXMsIHRhZykgPiAtMSkge1xuXHRcdFx0cmV0dXJuIHRhZztcblx0XHR9XG5cdFx0aWYgKHRhZyAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0Ly8gbm9kZSA8IDAuNiBoaXRzIGhlcmUgb24gcmVhbCBUeXBlZCBBcnJheXNcblx0XHRyZXR1cm4gdHJ5U2xpY2VzKHZhbHVlKTtcblx0fVxuXHRpZiAoIWdPUEQpIHsgcmV0dXJuIG51bGw7IH0gLy8gdW5rbm93biBlbmdpbmVcblx0cmV0dXJuIHRyeVR5cGVkQXJyYXlzKHZhbHVlKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ4MzQ6XG4vKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBwb3NzaWJsZU5hbWVzID0gW1xuXHQnQmlnSW50NjRBcnJheScsXG5cdCdCaWdVaW50NjRBcnJheScsXG5cdCdGbG9hdDMyQXJyYXknLFxuXHQnRmxvYXQ2NEFycmF5Jyxcblx0J0ludDE2QXJyYXknLFxuXHQnSW50MzJBcnJheScsXG5cdCdJbnQ4QXJyYXknLFxuXHQnVWludDE2QXJyYXknLFxuXHQnVWludDMyQXJyYXknLFxuXHQnVWludDhBcnJheScsXG5cdCdVaW50OENsYW1wZWRBcnJheSdcbl07XG5cbnZhciBnID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX3JlcXVpcmVfXy5nIDogZ2xvYmFsVGhpcztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhdmFpbGFibGVUeXBlZEFycmF5cygpIHtcblx0dmFyIG91dCA9IFtdO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHBvc3NpYmxlTmFtZXMubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAodHlwZW9mIGdbcG9zc2libGVOYW1lc1tpXV0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdG91dFtvdXQubGVuZ3RoXSA9IHBvc3NpYmxlTmFtZXNbaV07XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvdXQ7XG59O1xuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIFx0fSk7XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0ICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG4vKioqKioqLyBcdFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG4vKioqKioqLyBcdFx0XHRcdCgpID0+IChtb2R1bGUpO1xuLyoqKioqKi8gXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovIFx0KCgpID0+IHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcbi8qKioqKiovIFx0XHRcdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcbi8qKioqKiovIFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdFx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG4vKioqKioqLyBcdFx0XHR0cnkge1xuLyoqKioqKi8gXHRcdFx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbi8qKioqKiovIFx0XHRcdH0gY2F0Y2ggKGUpIHtcbi8qKioqKiovIFx0XHRcdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH0pKCk7XG4vKioqKioqLyBcdH0pKCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKVxuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuLyoqKioqKi8gXHRcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IHt9O1xuLy8gVGhpcyBlbnRyeSBuZWVkIHRvIGJlIHdyYXBwZWQgaW4gYW4gSUlGRSBiZWNhdXNlIGl0IG5lZWQgdG8gYmUgaW4gc3RyaWN0IG1vZGUuXG4oKCkgPT4ge1xuXCJ1c2Ugc3RyaWN0XCI7XG4vLyBFU00gQ09NUEFUIEZMQUdcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcblxuLy8gRVhQT1JUU1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbiAgUGhwU2VydmljZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUGhwU2VydmljZSlcbn0pO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL3NlcnZpY2VzL2Jhc2Utc2VydmljZS50c1xudmFyIGJhc2Vfc2VydmljZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjEyNSk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL3NlcnZpY2VzL3BocC9saWIvcGhwLmpzXG52YXIgcGhwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0ODQ5KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi4vLi4vbm9kZV9tb2R1bGVzL3ZzY29kZS1sYW5ndWFnZXNlcnZlci1wcm90b2NvbC9saWIvYnJvd3Nlci9tYWluLmpzXG52YXIgbWFpbiA9IF9fd2VicGFja19yZXF1aXJlX18oNTUwMSk7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL3V0aWxzLnRzXG52YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3NzApO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2FjZS9yYW5nZS1zaW5nbGV0b24udHNcbmZ1bmN0aW9uIF9kZWZpbmVfcHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbn1cbmNsYXNzIEFjZVJhbmdlIHtcbiAgICBzdGF0aWMgZ2V0Q29uc3RydWN0b3IoZWRpdG9yKSB7XG4gICAgICAgIGlmICghQWNlUmFuZ2UuX2luc3RhbmNlICYmIGVkaXRvcikge1xuICAgICAgICAgICAgQWNlUmFuZ2UuX2luc3RhbmNlID0gZWRpdG9yLmdldFNlbGVjdGlvblJhbmdlKCkuY29uc3RydWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEFjZVJhbmdlLl9pbnN0YW5jZTtcbiAgICB9XG59XG5fZGVmaW5lX3Byb3BlcnR5KEFjZVJhbmdlLCBcIl9pbnN0YW5jZVwiLCB2b2lkIDApO1xuXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvdHlwZS1jb252ZXJ0ZXJzL2NvbW1vbi1jb252ZXJ0ZXJzLnRzXG5cblxuXG52YXIgY29tbW9uX2NvbnZlcnRlcnNfQ29tbW9uQ29udmVydGVyO1xuKGZ1bmN0aW9uKENvbW1vbkNvbnZlcnRlcikge1xuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVJhbmdlcyhjb21wbGV0aW9ucykge1xuICAgICAgICByZXR1cm4gY29tcGxldGlvbnMgJiYgY29tcGxldGlvbnMubWFwKChlbCk9PntcbiAgICAgICAgICAgIGlmIChlbFtcInJhbmdlXCJdKSB7XG4gICAgICAgICAgICAgICAgZWxbXCJyYW5nZVwiXSA9IHRvUmFuZ2UoZWxbXCJyYW5nZVwiXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBDb21tb25Db252ZXJ0ZXIubm9ybWFsaXplUmFuZ2VzID0gbm9ybWFsaXplUmFuZ2VzO1xuICAgIGZ1bmN0aW9uIGNsZWFuSHRtbChodG1sKSB7XG4gICAgICAgIHJldHVybiBodG1sLnJlcGxhY2UoLzxhXFxzLywgXCI8YSB0YXJnZXQ9J19ibGFuaycgXCIpO1xuICAgIH1cbiAgICBDb21tb25Db252ZXJ0ZXIuY2xlYW5IdG1sID0gY2xlYW5IdG1sO1xuICAgIGZ1bmN0aW9uIHRvUmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgaWYgKCFyYW5nZSB8fCAhcmFuZ2Uuc3RhcnQgfHwgIXJhbmdlLmVuZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBSYW5nZSA9IEFjZVJhbmdlLmdldENvbnN0cnVjdG9yKCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIFJhbmdlLmZyb21Qb2ludHMocmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZCk7XG4gICAgfVxuICAgIENvbW1vbkNvbnZlcnRlci50b1JhbmdlID0gdG9SYW5nZTtcbiAgICBmdW5jdGlvbiBjb252ZXJ0S2luZChraW5kKSB7XG4gICAgICAgIHN3aXRjaChraW5kKXtcbiAgICAgICAgICAgIGNhc2UgXCJwcmltaXRpdmVUeXBlXCI6XG4gICAgICAgICAgICBjYXNlIFwia2V5d29yZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBtYWluLkNvbXBsZXRpb25JdGVtS2luZC5LZXl3b3JkO1xuICAgICAgICAgICAgY2FzZSBcInZhcmlhYmxlXCI6XG4gICAgICAgICAgICBjYXNlIFwibG9jYWxWYXJpYWJsZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBtYWluLkNvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZTtcbiAgICAgICAgICAgIGNhc2UgXCJtZW1iZXJWYXJpYWJsZVwiOlxuICAgICAgICAgICAgY2FzZSBcIm1lbWJlckdldEFjY2Vzc29yXCI6XG4gICAgICAgICAgICBjYXNlIFwibWVtYmVyU2V0QWNjZXNzb3JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFpbi5Db21wbGV0aW9uSXRlbUtpbmQuRmllbGQ7XG4gICAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgIGNhc2UgXCJtZW1iZXJGdW5jdGlvblwiOlxuICAgICAgICAgICAgY2FzZSBcImNvbnN0cnVjdFNpZ25hdHVyZVwiOlxuICAgICAgICAgICAgY2FzZSBcImNhbGxTaWduYXR1cmVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJpbmRleFNpZ25hdHVyZVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBtYWluLkNvbXBsZXRpb25JdGVtS2luZC5GdW5jdGlvbjtcbiAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1haW4uQ29tcGxldGlvbkl0ZW1LaW5kLkVudW07XG4gICAgICAgICAgICBjYXNlIFwibW9kdWxlXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1haW4uQ29tcGxldGlvbkl0ZW1LaW5kLk1vZHVsZTtcbiAgICAgICAgICAgIGNhc2UgXCJjbGFzc1wiOlxuICAgICAgICAgICAgICAgIHJldHVybiBtYWluLkNvbXBsZXRpb25JdGVtS2luZC5DbGFzcztcbiAgICAgICAgICAgIGNhc2UgXCJpbnRlcmZhY2VcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFpbi5Db21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlO1xuICAgICAgICAgICAgY2FzZSBcIndhcm5pbmdcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFpbi5Db21wbGV0aW9uSXRlbUtpbmQuRmlsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFpbi5Db21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHk7XG4gICAgfVxuICAgIENvbW1vbkNvbnZlcnRlci5jb252ZXJ0S2luZCA9IGNvbnZlcnRLaW5kO1xuICAgIGZ1bmN0aW9uIGV4Y2x1ZGVCeUVycm9yTWVzc2FnZShkaWFnbm9zdGljcywgZXJyb3JNZXNzYWdlc1RvSWdub3JlLCBmaWVsZE5hbWUgPSBcIm1lc3NhZ2VcIikge1xuICAgICAgICBpZiAoIWVycm9yTWVzc2FnZXNUb0lnbm9yZSkgcmV0dXJuIGRpYWdub3N0aWNzO1xuICAgICAgICByZXR1cm4gZGlhZ25vc3RpY3MuZmlsdGVyKChlbCk9PiEoMCx1dGlscy8qIGNoZWNrVmFsdWVBZ2FpbnN0UmVnZXhwQXJyYXkgKi8uVGspKGVsW2ZpZWxkTmFtZV0sIGVycm9yTWVzc2FnZXNUb0lnbm9yZSkpO1xuICAgIH1cbiAgICBDb21tb25Db252ZXJ0ZXIuZXhjbHVkZUJ5RXJyb3JNZXNzYWdlID0gZXhjbHVkZUJ5RXJyb3JNZXNzYWdlO1xufSkoY29tbW9uX2NvbnZlcnRlcnNfQ29tbW9uQ29udmVydGVyIHx8IChjb21tb25fY29udmVydGVyc19Db21tb25Db252ZXJ0ZXIgPSB7fSkpO1xuXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvdHlwZS1jb252ZXJ0ZXJzL2xzcC9sc3AtY29udmVydGVycy50c1xuXG5cblxuXG5mdW5jdGlvbiBmcm9tUmFuZ2UocmFuZ2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgbGluZTogcmFuZ2Uuc3RhcnQucm93LFxuICAgICAgICAgICAgY2hhcmFjdGVyOiByYW5nZS5zdGFydC5jb2x1bW5cbiAgICAgICAgfSxcbiAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICBsaW5lOiByYW5nZS5lbmQucm93LFxuICAgICAgICAgICAgY2hhcmFjdGVyOiByYW5nZS5lbmQuY29sdW1uXG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gcmFuZ2VGcm9tUG9zaXRpb25zKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgIGVuZDogZW5kXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvUmFuZ2UocmFuZ2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgcm93OiByYW5nZS5zdGFydC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiByYW5nZS5zdGFydC5jaGFyYWN0ZXJcbiAgICAgICAgfSxcbiAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICByb3c6IHJhbmdlLmVuZC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiByYW5nZS5lbmQuY2hhcmFjdGVyXG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gZnJvbVBvaW50KHBvaW50KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGluZTogcG9pbnQucm93LFxuICAgICAgICBjaGFyYWN0ZXI6IHBvaW50LmNvbHVtblxuICAgIH07XG59XG5mdW5jdGlvbiB0b1BvaW50KHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcm93OiBwb3NpdGlvbi5saW5lLFxuICAgICAgICBjb2x1bW46IHBvc2l0aW9uLmNoYXJhY3RlclxuICAgIH07XG59XG5mdW5jdGlvbiB0b0Fubm90YXRpb25zKGRpYWdub3N0aWNzKSB7XG4gICAgdmFyIF9kaWFnbm9zdGljcztcbiAgICByZXR1cm4gKF9kaWFnbm9zdGljcyA9IGRpYWdub3N0aWNzKSA9PT0gbnVsbCB8fCBfZGlhZ25vc3RpY3MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kaWFnbm9zdGljcy5tYXAoKGVsKT0+e1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcm93OiBlbC5yYW5nZS5zdGFydC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiBlbC5yYW5nZS5zdGFydC5jaGFyYWN0ZXIsXG4gICAgICAgICAgICB0ZXh0OiBlbC5tZXNzYWdlLFxuICAgICAgICAgICAgdHlwZTogZWwuc2V2ZXJpdHkgPT09IDEgPyBcImVycm9yXCIgOiBlbC5zZXZlcml0eSA9PT0gMiA/IFwid2FybmluZ1wiIDogXCJpbmZvXCIsXG4gICAgICAgICAgICBjb2RlOiBlbC5jb2RlXG4gICAgICAgIH07XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmcm9tQW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMpIHtcbiAgICB2YXIgX2Fubm90YXRpb25zO1xuICAgIHJldHVybiAoX2Fubm90YXRpb25zID0gYW5ub3RhdGlvbnMpID09PSBudWxsIHx8IF9hbm5vdGF0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Fubm90YXRpb25zLm1hcCgoZWwpPT57XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByYW5nZToge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IGVsLnJvdyxcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBlbC5jb2x1bW5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVuZDoge1xuICAgICAgICAgICAgICAgICAgICBsaW5lOiBlbC5yb3csXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogZWwuY29sdW1uXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVsLnRleHQsXG4gICAgICAgICAgICBzZXZlcml0eTogZWwudHlwZSA9PT0gXCJlcnJvclwiID8gMSA6IGVsLnR5cGUgPT09IFwid2FybmluZ1wiID8gMiA6IDMsXG4gICAgICAgICAgICBjb2RlOiBlbFtcImNvZGVcIl1cbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRvQ29tcGxldGlvbihpdGVtKSB7XG4gICAgdmFyIF9pdGVtX3RleHRFZGl0LCBfaXRlbV9jb21tYW5kO1xuICAgIGxldCBpdGVtS2luZCA9IGl0ZW0ua2luZDtcbiAgICBsZXQga2luZCA9IGl0ZW1LaW5kID8gT2JqZWN0LmtleXMoQ29tcGxldGlvbkl0ZW1LaW5kKVtPYmplY3QudmFsdWVzKENvbXBsZXRpb25JdGVtS2luZCkuaW5kZXhPZihpdGVtS2luZCldIDogdW5kZWZpbmVkO1xuICAgIHZhciBfaXRlbV90ZXh0RWRpdF9uZXdUZXh0LCBfcmVmO1xuICAgIGxldCB0ZXh0ID0gKF9yZWYgPSAoX2l0ZW1fdGV4dEVkaXRfbmV3VGV4dCA9IChfaXRlbV90ZXh0RWRpdCA9IGl0ZW0udGV4dEVkaXQpID09PSBudWxsIHx8IF9pdGVtX3RleHRFZGl0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaXRlbV90ZXh0RWRpdC5uZXdUZXh0KSAhPT0gbnVsbCAmJiBfaXRlbV90ZXh0RWRpdF9uZXdUZXh0ICE9PSB2b2lkIDAgPyBfaXRlbV90ZXh0RWRpdF9uZXdUZXh0IDogaXRlbS5pbnNlcnRUZXh0KSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogaXRlbS5sYWJlbDtcbiAgICAvLyBmaWx0ZXJpbmcgd291bGQgaGFwcGVuIG9uIGFjZSBlZGl0b3Igc2lkZVxuICAgIC8vIFRPRE86IGlmIGZpbHRlcmluZyBhbmQgc29ydGluZyBhcmUgb24gc2VydmVyIHNpZGUsIHdlIHNob3VsZCBkaXNhYmxlIEZpbHRlcmVkTGlzdCBpbiBhY2UgY29tcGxldGVyXG4gICAgdGV4dCA9IGl0ZW0uZmlsdGVyVGV4dCAmJiAhdGV4dC5zdGFydHNXaXRoKGl0ZW0uZmlsdGVyVGV4dCkgPyBpdGVtLmZpbHRlclRleHQgKyB0ZXh0IDogdGV4dDtcbiAgICBsZXQgY29tbWFuZCA9ICgoX2l0ZW1fY29tbWFuZCA9IGl0ZW0uY29tbWFuZCkgPT09IG51bGwgfHwgX2l0ZW1fY29tbWFuZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2l0ZW1fY29tbWFuZC5jb21tYW5kKSA9PSBcImVkaXRvci5hY3Rpb24udHJpZ2dlclN1Z2dlc3RcIiA/IFwic3RhcnRBdXRvY29tcGxldGVcIiA6IHVuZGVmaW5lZDtcbiAgICBsZXQgcmFuZ2UgPSBpdGVtLnRleHRFZGl0ID8gZ2V0VGV4dEVkaXRSYW5nZShpdGVtLnRleHRFZGl0LCBpdGVtLmZpbHRlclRleHQpIDogdW5kZWZpbmVkO1xuICAgIGxldCBjb21wbGV0aW9uID0ge1xuICAgICAgICBtZXRhOiBraW5kLFxuICAgICAgICBjYXB0aW9uOiBpdGVtLmxhYmVsLFxuICAgICAgICBzY29yZTogdW5kZWZpbmVkXG4gICAgfTtcbiAgICBjb21wbGV0aW9uW1wiY29tbWFuZFwiXSA9IGNvbW1hbmQ7XG4gICAgY29tcGxldGlvbltcInJhbmdlXCJdID0gcmFuZ2U7XG4gICAgY29tcGxldGlvbltcIml0ZW1cIl0gPSBpdGVtO1xuICAgIGlmIChpdGVtLmluc2VydFRleHRGb3JtYXQgPT0gSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0KSB7XG4gICAgICAgIGNvbXBsZXRpb25bXCJzbmlwcGV0XCJdID0gdGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0aW9uW1widmFsdWVcIl0gPSB0ZXh0ICE9PSBudWxsICYmIHRleHQgIT09IHZvaWQgMCA/IHRleHQgOiBcIlwiO1xuICAgIH1cbiAgICBjb21wbGV0aW9uW1wiZG9jdW1lbnRhdGlvblwiXSA9IGl0ZW0uZG9jdW1lbnRhdGlvbjsgLy9UT0RPOiB0aGlzIGlzIHdvcmthcm91bmQgZm9yIHNlcnZpY2VzIHdpdGggaW5zdGFudCBjb21wbGV0aW9uXG4gICAgY29tcGxldGlvbltcInBvc2l0aW9uXCJdID0gaXRlbVtcInBvc2l0aW9uXCJdO1xuICAgIGNvbXBsZXRpb25bXCJzZXJ2aWNlXCJdID0gaXRlbVtcInNlcnZpY2VcIl07IC8vVE9ETzogc2luY2Ugd2UgaGF2ZSBtdWx0aXBsZSBzZXJ2ZXJzLCB3ZSBuZWVkIHRvIGRldGVybWluZSB3aGljaFxuICAgIC8vIHNlcnZlciB0byB1c2UgZm9yIHJlc29sdmluZ1xuICAgIHJldHVybiBjb21wbGV0aW9uO1xufVxuZnVuY3Rpb24gdG9Db21wbGV0aW9ucyhjb21wbGV0aW9ucykge1xuICAgIGlmIChjb21wbGV0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBjb21iaW5lZENvbXBsZXRpb25zID0gY29tcGxldGlvbnMubWFwKChlbCk9PntcbiAgICAgICAgICAgIGlmICghZWwuY29tcGxldGlvbnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYWxsQ29tcGxldGlvbnM7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbC5jb21wbGV0aW9ucykpIHtcbiAgICAgICAgICAgICAgICBhbGxDb21wbGV0aW9ucyA9IGVsLmNvbXBsZXRpb25zO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbGxDb21wbGV0aW9ucyA9IGVsLmNvbXBsZXRpb25zLml0ZW1zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFsbENvbXBsZXRpb25zLm1hcCgoaXRlbSk9PntcbiAgICAgICAgICAgICAgICBpdGVtW1wic2VydmljZVwiXSA9IGVsLnNlcnZpY2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkuZmxhdCgpO1xuICAgICAgICByZXR1cm4gY29tYmluZWRDb21wbGV0aW9ucy5tYXAoKGl0ZW0pPT50b0NvbXBsZXRpb24oaXRlbSkpO1xuICAgIH1cbiAgICByZXR1cm4gW107XG59XG5mdW5jdGlvbiB0b1Jlc29sdmVkQ29tcGxldGlvbihjb21wbGV0aW9uLCBpdGVtKSB7XG4gICAgY29tcGxldGlvbltcImRvY01hcmtkb3duXCJdID0gZnJvbU1hcmt1cENvbnRlbnQoaXRlbS5kb2N1bWVudGF0aW9uKTtcbiAgICByZXR1cm4gY29tcGxldGlvbjtcbn1cbmZ1bmN0aW9uIHRvQ29tcGxldGlvbkl0ZW0oY29tcGxldGlvbikge1xuICAgIGxldCBjb21tYW5kO1xuICAgIGlmIChjb21wbGV0aW9uW1wiY29tbWFuZFwiXSkge1xuICAgICAgICBjb21tYW5kID0ge1xuICAgICAgICAgICAgdGl0bGU6IFwidHJpZ2dlclN1Z2dlc3RcIixcbiAgICAgICAgICAgIGNvbW1hbmQ6IGNvbXBsZXRpb25bXCJjb21tYW5kXCJdXG4gICAgICAgIH07XG4gICAgfVxuICAgIHZhciBfY29tcGxldGlvbl9jYXB0aW9uO1xuICAgIGxldCBjb21wbGV0aW9uSXRlbSA9IHtcbiAgICAgICAgbGFiZWw6IChfY29tcGxldGlvbl9jYXB0aW9uID0gY29tcGxldGlvbi5jYXB0aW9uKSAhPT0gbnVsbCAmJiBfY29tcGxldGlvbl9jYXB0aW9uICE9PSB2b2lkIDAgPyBfY29tcGxldGlvbl9jYXB0aW9uIDogXCJcIixcbiAgICAgICAga2luZDogQ29tbW9uQ29udmVydGVyLmNvbnZlcnRLaW5kKGNvbXBsZXRpb24ubWV0YSksXG4gICAgICAgIGNvbW1hbmQ6IGNvbW1hbmQsXG4gICAgICAgIGluc2VydFRleHRGb3JtYXQ6IGNvbXBsZXRpb25bXCJzbmlwcGV0XCJdID8gSW5zZXJ0VGV4dEZvcm1hdC5TbmlwcGV0IDogSW5zZXJ0VGV4dEZvcm1hdC5QbGFpblRleHQsXG4gICAgICAgIGRvY3VtZW50YXRpb246IGNvbXBsZXRpb25bXCJkb2N1bWVudGF0aW9uXCJdXG4gICAgfTtcbiAgICBpZiAoY29tcGxldGlvbltcInJhbmdlXCJdKSB7XG4gICAgICAgIHZhciBfY29tcGxldGlvbl9zbmlwcGV0O1xuICAgICAgICBjb21wbGV0aW9uSXRlbS50ZXh0RWRpdCA9IHtcbiAgICAgICAgICAgIHJhbmdlOiBmcm9tUmFuZ2UoY29tcGxldGlvbltcInJhbmdlXCJdKSxcbiAgICAgICAgICAgIG5ld1RleHQ6IChfY29tcGxldGlvbl9zbmlwcGV0ID0gY29tcGxldGlvbltcInNuaXBwZXRcIl0pICE9PSBudWxsICYmIF9jb21wbGV0aW9uX3NuaXBwZXQgIT09IHZvaWQgMCA/IF9jb21wbGV0aW9uX3NuaXBwZXQgOiBjb21wbGV0aW9uW1widmFsdWVcIl1cbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX2NvbXBsZXRpb25fc25pcHBldDE7XG4gICAgICAgIGNvbXBsZXRpb25JdGVtLmluc2VydFRleHQgPSAoX2NvbXBsZXRpb25fc25pcHBldDEgPSBjb21wbGV0aW9uW1wic25pcHBldFwiXSkgIT09IG51bGwgJiYgX2NvbXBsZXRpb25fc25pcHBldDEgIT09IHZvaWQgMCA/IF9jb21wbGV0aW9uX3NuaXBwZXQxIDogY29tcGxldGlvbltcInZhbHVlXCJdO1xuICAgIH1cbiAgICBjb21wbGV0aW9uSXRlbVtcImZpbGVOYW1lXCJdID0gY29tcGxldGlvbltcImZpbGVOYW1lXCJdO1xuICAgIGNvbXBsZXRpb25JdGVtW1wicG9zaXRpb25cIl0gPSBjb21wbGV0aW9uW1wicG9zaXRpb25cIl07XG4gICAgY29tcGxldGlvbkl0ZW1bXCJpdGVtXCJdID0gY29tcGxldGlvbltcIml0ZW1cIl07XG4gICAgY29tcGxldGlvbkl0ZW1bXCJzZXJ2aWNlXCJdID0gY29tcGxldGlvbltcInNlcnZpY2VcIl07IC8vVE9ETzpcbiAgICByZXR1cm4gY29tcGxldGlvbkl0ZW07XG59XG5mdW5jdGlvbiBnZXRUZXh0RWRpdFJhbmdlKHRleHRFZGl0LCBmaWx0ZXJUZXh0KSB7XG4gICAgY29uc3QgZmlsdGVyTGVuZ3RoID0gZmlsdGVyVGV4dCA/IGZpbHRlclRleHQubGVuZ3RoIDogMDtcbiAgICBpZiAoXCJpbnNlcnRcIiBpbiB0ZXh0RWRpdCAmJiBcInJlcGxhY2VcIiBpbiB0ZXh0RWRpdCkge1xuICAgICAgICBsZXQgbWVyZ2VkUmFuZ2VzID0gbWVyZ2VSYW5nZXMoW1xuICAgICAgICAgICAgdG9SYW5nZSh0ZXh0RWRpdC5pbnNlcnQpLFxuICAgICAgICAgICAgdG9SYW5nZSh0ZXh0RWRpdC5yZXBsYWNlKVxuICAgICAgICBdKTtcbiAgICAgICAgcmV0dXJuIG1lcmdlZFJhbmdlc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0RWRpdC5yYW5nZS5zdGFydC5jaGFyYWN0ZXIgLT0gZmlsdGVyTGVuZ3RoO1xuICAgICAgICByZXR1cm4gdG9SYW5nZSh0ZXh0RWRpdC5yYW5nZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gdG9Ub29sdGlwKGhvdmVyKSB7XG4gICAgdmFyIF9ob3Zlcl9maW5kO1xuICAgIGlmICghaG92ZXIpIHJldHVybjtcbiAgICBsZXQgY29udGVudCA9IGhvdmVyLm1hcCgoZWwpPT57XG4gICAgICAgIGlmICghZWwgfHwgIWVsLmNvbnRlbnRzKSByZXR1cm47XG4gICAgICAgIGlmIChNYXJrdXBDb250ZW50LmlzKGVsLmNvbnRlbnRzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21NYXJrdXBDb250ZW50KGVsLmNvbnRlbnRzKTtcbiAgICAgICAgfSBlbHNlIGlmIChNYXJrZWRTdHJpbmcuaXMoZWwuY29udGVudHMpKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVsLmNvbnRlbnRzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsLmNvbnRlbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwiYGBgXCIgKyBlbC5jb250ZW50cy52YWx1ZSArIFwiYGBgXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgY29udGVudHMgPSBlbC5jb250ZW50cy5tYXAoKGVsKT0+e1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZWwgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcXGBcXGBcXGAke2VsLnZhbHVlfVxcYFxcYFxcYGA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRzLmpvaW4oXCJcXG5cXG5cIik7XG4gICAgICAgIH1cbiAgICB9KS5maWx0ZXIobm90RW1wdHkpO1xuICAgIGlmIChjb250ZW50Lmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIC8vVE9ETzogaXQgY291bGQgYmUgbWVyZ2VkIHdpdGhpbiBhbGwgcmFuZ2VzIGluIGZ1dHVyZVxuICAgIGxldCBsc3BSYW5nZSA9IChfaG92ZXJfZmluZCA9IGhvdmVyLmZpbmQoKGVsKT0+e1xuICAgICAgICB2YXIgX2VsO1xuICAgICAgICByZXR1cm4gKF9lbCA9IGVsKSA9PT0gbnVsbCB8fCBfZWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lbC5yYW5nZTtcbiAgICB9KSkgPT09IG51bGwgfHwgX2hvdmVyX2ZpbmQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ob3Zlcl9maW5kLnJhbmdlO1xuICAgIGxldCByYW5nZTtcbiAgICBpZiAobHNwUmFuZ2UpIHJhbmdlID0gdG9SYW5nZShsc3BSYW5nZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDoge1xuICAgICAgICAgICAgdHlwZTogXCJtYXJrZG93blwiLFxuICAgICAgICAgICAgdGV4dDogY29udGVudC5qb2luKFwiXFxuXFxuXCIpXG4gICAgICAgIH0sXG4gICAgICAgIHJhbmdlOiByYW5nZVxuICAgIH07XG59XG5mdW5jdGlvbiBmcm9tU2lnbmF0dXJlSGVscChzaWduYXR1cmVIZWxwKSB7XG4gICAgaWYgKCFzaWduYXR1cmVIZWxwKSByZXR1cm47XG4gICAgbGV0IGNvbnRlbnQgPSBzaWduYXR1cmVIZWxwLm1hcCgoZWwpPT57XG4gICAgICAgIHZhciBfZWwsIF9lbDE7XG4gICAgICAgIGlmICghZWwpIHJldHVybjtcbiAgICAgICAgbGV0IHNpZ25hdHVyZUluZGV4ID0gKChfZWwgPSBlbCkgPT09IG51bGwgfHwgX2VsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZWwuYWN0aXZlU2lnbmF0dXJlKSB8fCAwO1xuICAgICAgICBsZXQgYWN0aXZlU2lnbmF0dXJlID0gZWwuc2lnbmF0dXJlc1tzaWduYXR1cmVJbmRleF07XG4gICAgICAgIGlmICghYWN0aXZlU2lnbmF0dXJlKSByZXR1cm47XG4gICAgICAgIGxldCBhY3RpdmVQYXJhbSA9IChfZWwxID0gZWwpID09PSBudWxsIHx8IF9lbDEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lbDEuYWN0aXZlUGFyYW1ldGVyO1xuICAgICAgICBsZXQgY29udGVudHMgPSBhY3RpdmVTaWduYXR1cmUubGFiZWw7XG4gICAgICAgIGlmIChhY3RpdmVQYXJhbSAhPSB1bmRlZmluZWQgJiYgYWN0aXZlU2lnbmF0dXJlLnBhcmFtZXRlcnMgJiYgYWN0aXZlU2lnbmF0dXJlLnBhcmFtZXRlcnNbYWN0aXZlUGFyYW1dKSB7XG4gICAgICAgICAgICBsZXQgcGFyYW0gPSBhY3RpdmVTaWduYXR1cmUucGFyYW1ldGVyc1thY3RpdmVQYXJhbV0ubGFiZWw7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBjb250ZW50cyA9IGNvbnRlbnRzLnJlcGxhY2UocGFyYW0sIGAqKiR7cGFyYW19KipgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aXZlU2lnbmF0dXJlLmRvY3VtZW50YXRpb24pIHtcbiAgICAgICAgICAgIGlmIChNYXJrdXBDb250ZW50LmlzKGFjdGl2ZVNpZ25hdHVyZS5kb2N1bWVudGF0aW9uKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50cyArIFwiXFxuXFxuXCIgKyBmcm9tTWFya3VwQ29udGVudChhY3RpdmVTaWduYXR1cmUuZG9jdW1lbnRhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRlbnRzICs9IFwiXFxuXFxuXCIgKyBhY3RpdmVTaWduYXR1cmUuZG9jdW1lbnRhdGlvbjtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udGVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGVudHM7XG4gICAgICAgIH1cbiAgICB9KS5maWx0ZXIobm90RW1wdHkpO1xuICAgIGlmIChjb250ZW50Lmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgIHR5cGU6IFwibWFya2Rvd25cIixcbiAgICAgICAgICAgIHRleHQ6IGNvbnRlbnQuam9pbihcIlxcblxcblwiKVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZyb21NYXJrdXBDb250ZW50KGNvbnRlbnQpIHtcbiAgICBpZiAoIWNvbnRlbnQpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQudmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gZnJvbUFjZURlbHRhKGRlbHRhLCBlb2wpIHtcbiAgICBjb25zdCB0ZXh0ID0gZGVsdGEubGluZXMubGVuZ3RoID4gMSA/IGRlbHRhLmxpbmVzLmpvaW4oZW9sKSA6IGRlbHRhLmxpbmVzWzBdO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJhbmdlOiBkZWx0YS5hY3Rpb24gPT09IFwiaW5zZXJ0XCIgPyByYW5nZUZyb21Qb3NpdGlvbnMoZnJvbVBvaW50KGRlbHRhLnN0YXJ0KSwgZnJvbVBvaW50KGRlbHRhLnN0YXJ0KSkgOiByYW5nZUZyb21Qb3NpdGlvbnMoZnJvbVBvaW50KGRlbHRhLnN0YXJ0KSwgZnJvbVBvaW50KGRlbHRhLmVuZCkpLFxuICAgICAgICB0ZXh0OiBkZWx0YS5hY3Rpb24gPT09IFwiaW5zZXJ0XCIgPyB0ZXh0IDogXCJcIlxuICAgIH07XG59XG5mdW5jdGlvbiBmaWx0ZXJEaWFnbm9zdGljcyhkaWFnbm9zdGljcywgZmlsdGVyRXJyb3JzKSB7XG4gICAgcmV0dXJuIGNvbW1vbl9jb252ZXJ0ZXJzX0NvbW1vbkNvbnZlcnRlci5leGNsdWRlQnlFcnJvck1lc3NhZ2UoZGlhZ25vc3RpY3MsIGZpbHRlckVycm9ycy5lcnJvck1lc3NhZ2VzVG9JZ25vcmUpLm1hcCgoZWwpPT57XG4gICAgICAgIGlmICgoMCx1dGlscy8qIGNoZWNrVmFsdWVBZ2FpbnN0UmVnZXhwQXJyYXkgKi8uVGspKGVsLm1lc3NhZ2UsIGZpbHRlckVycm9ycy5lcnJvck1lc3NhZ2VzVG9UcmVhdEFzV2FybmluZykpIHtcbiAgICAgICAgICAgIGVsLnNldmVyaXR5ID0gbWFpbi5EaWFnbm9zdGljU2V2ZXJpdHkuV2FybmluZztcbiAgICAgICAgfSBlbHNlIGlmICgoMCx1dGlscy8qIGNoZWNrVmFsdWVBZ2FpbnN0UmVnZXhwQXJyYXkgKi8uVGspKGVsLm1lc3NhZ2UsIGZpbHRlckVycm9ycy5lcnJvck1lc3NhZ2VzVG9UcmVhdEFzSW5mbykpIHtcbiAgICAgICAgICAgIGVsLnNldmVyaXR5ID0gbWFpbi5EaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZnJvbURvY3VtZW50SGlnaGxpZ2h0cyhkb2N1bWVudEhpZ2hsaWdodHMpIHtcbiAgICByZXR1cm4gZG9jdW1lbnRIaWdobGlnaHRzLm1hcChmdW5jdGlvbihlbCkge1xuICAgICAgICBsZXQgY2xhc3NOYW1lID0gZWwua2luZCA9PSAyID8gXCJsYW5ndWFnZV9oaWdobGlnaHRfcmVhZFwiIDogZWwua2luZCA9PSAzID8gXCJsYW5ndWFnZV9oaWdobGlnaHRfd3JpdGVcIiA6IFwibGFuZ3VhZ2VfaGlnaGxpZ2h0X3RleHRcIjtcbiAgICAgICAgcmV0dXJuIHRvTWFya2VyR3JvdXBJdGVtKENvbW1vbkNvbnZlcnRlci50b1JhbmdlKHRvUmFuZ2UoZWwucmFuZ2UpKSwgY2xhc3NOYW1lKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRvTWFya2VyR3JvdXBJdGVtKHJhbmdlLCBjbGFzc05hbWUsIHRvb2x0aXBUZXh0KSB7XG4gICAgbGV0IG1hcmtlckdyb3VwSXRlbSA9IHtcbiAgICAgICAgcmFuZ2U6IHJhbmdlLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgIH07XG4gICAgaWYgKHRvb2x0aXBUZXh0KSB7XG4gICAgICAgIG1hcmtlckdyb3VwSXRlbVtcInRvb2x0aXBUZXh0XCJdID0gdG9vbHRpcFRleHQ7XG4gICAgfVxuICAgIHJldHVybiBtYXJrZXJHcm91cEl0ZW07XG59XG5cbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zZXJ2aWNlcy9waHAvcGhwLXNlcnZpY2UudHNcbmZ1bmN0aW9uIHBocF9zZXJ2aWNlX2RlZmluZV9wcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuXG5cblxuY2xhc3MgUGhwU2VydmljZSBleHRlbmRzIGJhc2Vfc2VydmljZS5CYXNlU2VydmljZSB7XG4gICAgYXN5bmMgZG9WYWxpZGF0aW9uKGRvY3VtZW50KSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0RG9jdW1lbnRWYWx1ZShkb2N1bWVudC51cmkpO1xuICAgICAgICBpZiAoIXZhbHVlKSByZXR1cm4gW107XG4gICAgICAgIGlmICh0aGlzLmdldE9wdGlvbihkb2N1bWVudC51cmksIFwiaW5saW5lXCIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IFwiPD9cIiArIHZhbHVlICsgXCI/PlwiO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0b2tlbnMgPSBwaHAvKiBQSFAgKi8uai5MZXhlcih2YWx1ZSwge1xuICAgICAgICAgICAgc2hvcnRfb3Blbl90YWc6IDFcbiAgICAgICAgfSk7XG4gICAgICAgIGxldCBlcnJvcnMgPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5ldyBwaHAvKiBQSFAgKi8uai5QYXJzZXIodG9rZW5zKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goe1xuICAgICAgICAgICAgICAgIHJhbmdlOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiBlLmxpbmUgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiAwXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVuZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogZS5saW5lIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBlLm1lc3NhZ2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBlLm1lc3NhZ2Uuc3Vic3RyaW5nKDEpLFxuICAgICAgICAgICAgICAgIHNldmVyaXR5OiAxXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyRGlhZ25vc3RpY3MoZXJyb3JzLCB0aGlzLm9wdGlvbnNUb0ZpbHRlckRpYWdub3N0aWNzKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IobW9kZSl7XG4gICAgICAgIHN1cGVyKG1vZGUpO1xuICAgICAgICBwaHBfc2VydmljZV9kZWZpbmVfcHJvcGVydHkodGhpcywgXCIkc2VydmljZVwiLCB2b2lkIDApO1xuICAgICAgICBwaHBfc2VydmljZV9kZWZpbmVfcHJvcGVydHkodGhpcywgXCJzZXJ2aWNlQ2FwYWJpbGl0aWVzXCIsIHtcbiAgICAgICAgICAgIGRpYWdub3N0aWNQcm92aWRlcjoge1xuICAgICAgICAgICAgICAgIGludGVyRmlsZURlcGVuZGVuY2llczogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3b3Jrc3BhY2VEaWFnbm9zdGljczogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbn0pKCk7XG5cbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19leHBvcnRzX187XG4vKioqKioqLyB9KSgpXG47XG59KTsiXSwibmFtZXMiOlsid2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJhIiwiaSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicHJvY2VzcyIsImNvbnNvbGUiLCJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcmVxdWlyZSIsIl9yZXF1aXJlJGNvZGVzIiwiY29kZXMiLCJFUlJfQU1CSUdVT1VTX0FSR1VNRU5UIiwiRVJSX0lOVkFMSURfQVJHX1RZUEUiLCJFUlJfSU5WQUxJRF9BUkdfVkFMVUUiLCJFUlJfSU5WQUxJRF9SRVRVUk5fVkFMVUUiLCJFUlJfTUlTU0lOR19BUkdTIiwiQXNzZXJ0aW9uRXJyb3IiLCJfcmVxdWlyZTIiLCJpbnNwZWN0IiwiX3JlcXVpcmUkdHlwZXMiLCJ0eXBlcyIsImlzUHJvbWlzZSIsImlzUmVnRXhwIiwib2JqZWN0QXNzaWduIiwiT2JqZWN0IiwiYXNzaWduIiwib2JqZWN0SXMiLCJpcyIsImVycm9yQ2FjaGUiLCJNYXAiLCJpc0RlZXBFcXVhbCIsImlzRGVlcFN0cmljdEVxdWFsIiwicGFyc2VFeHByZXNzaW9uQXQiLCJmaW5kTm9kZUFyb3VuZCIsImRlY29kZXIiLCJsYXp5TG9hZENvbXBhcmlzb24iLCJjb21wYXJpc29uIiwiZXNjYXBlU2VxdWVuY2VzUmVnRXhwIiwibWV0YSIsImVzY2FwZUZuIiwic3RyIiwiY2hhckNvZGVBdCIsIndhcm5lZCIsImFzc2VydCIsIm9rIiwiTk9fRVhDRVBUSU9OX1NFTlRJTkVMIiwiaW5uZXJGYWlsIiwibWVzc2FnZSIsIkVycm9yIiwiZmFpbCIsImFjdHVhbCIsImV4cGVjdGVkIiwib3BlcmF0b3IiLCJzdGFja1N0YXJ0Rm4iLCJhcmdzTGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiaW50ZXJuYWxNZXNzYWdlIiwidW5kZWZpbmVkIiwid2FybiIsImVtaXRXYXJuaW5nIiwiYmluZCIsImVyckFyZ3MiLCJlcnIiLCJnZW5lcmF0ZWRNZXNzYWdlIiwiaW5uZXJPayIsImZuIiwiYXJnTGVuIiwidmFsdWUiLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImFwcGx5IiwiY29uY2F0IiwiZXF1YWwiLCJub3RFcXVhbCIsImRlZXBFcXVhbCIsIm5vdERlZXBFcXVhbCIsImRlZXBTdHJpY3RFcXVhbCIsIm5vdERlZXBTdHJpY3RFcXVhbCIsInN0cmljdEVxdWFsIiwibm90U3RyaWN0RXF1YWwiLCJDb21wYXJpc29uIiwia2V5cyIsIl90aGlzIiwiZm9yRWFjaCIsImtleSIsInRlc3QiLCJjb21wYXJlRXhjZXB0aW9uS2V5IiwiYiIsIm5hbWUiLCJleHBlY3RlZEV4Y2VwdGlvbiIsIm1zZyIsInB1c2giLCJpc1Byb3RvdHlwZU9mIiwiY2FsbCIsImdldEFjdHVhbCIsImUiLCJjaGVja0lzUHJvbWlzZSIsInRoZW4iLCJjYXRjaCIsIndhaXRGb3JBY3R1YWwiLCJwcm9taXNlRm4iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlc3VsdFByb21pc2UiLCJleHBlY3RzRXJyb3IiLCJlcnJvciIsImRldGFpbHMiLCJmblR5cGUiLCJleHBlY3RzTm9FcnJvciIsInRocm93cyIsIl9sZW4yIiwiX2tleTIiLCJyZWplY3RzIiwiX2xlbjMiLCJfa2V5MyIsInJlc3VsdCIsImRvZXNOb3RUaHJvdyIsIl9sZW40IiwiX2tleTQiLCJkb2VzTm90UmVqZWN0IiwiX2xlbjUiLCJfa2V5NSIsImlmRXJyb3IiLCJuZXdFcnIiLCJvcmlnU3RhY2siLCJzdGFjayIsInRtcDIiLCJzcGxpdCIsInNoaWZ0IiwidG1wMSIsInBvcyIsImluZGV4T2YiLCJzbGljZSIsImpvaW4iLCJzdHJpY3QiLCJfbGVuNiIsIl9rZXk2IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsInNvdXJjZSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiX2RlZmluZVByb3BlcnR5IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX3NldFByb3RvdHlwZU9mIiwiX3dyYXBOYXRpdmVTdXBlciIsIkNsYXNzIiwiX2NhY2hlIiwiX2lzTmF0aXZlRnVuY3Rpb24iLCJoYXMiLCJnZXQiLCJzZXQiLCJXcmFwcGVyIiwiX2NvbnN0cnVjdCIsIl9nZXRQcm90b3R5cGVPZiIsImlzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJEYXRlIiwidG9TdHJpbmciLCJQYXJlbnQiLCJGdW5jdGlvbiIsIm8iLCJwIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJnZXRQcm90b3R5cGVPZiIsImVuZHNXaXRoIiwic2VhcmNoIiwidGhpc19sZW4iLCJzdWJzdHJpbmciLCJyZXBlYXQiLCJjb3VudCIsIk1hdGgiLCJmbG9vciIsIm1heENvdW50IiwibG9nIiwiYmx1ZSIsImdyZWVuIiwicmVkIiwid2hpdGUiLCJrUmVhZGFibGVPcGVyYXRvciIsInN0cmljdEVxdWFsT2JqZWN0Iiwibm90U3RyaWN0RXF1YWxPYmplY3QiLCJub3RJZGVudGljYWwiLCJrTWF4U2hvcnRMZW5ndGgiLCJjb3B5RXJyb3IiLCJpbnNwZWN0VmFsdWUiLCJ2YWwiLCJjb21wYWN0IiwiY3VzdG9tSW5zcGVjdCIsImRlcHRoIiwibWF4QXJyYXlMZW5ndGgiLCJJbmZpbml0eSIsInNob3dIaWRkZW4iLCJicmVha0xlbmd0aCIsInNob3dQcm94eSIsInNvcnRlZCIsImdldHRlcnMiLCJjcmVhdGVFcnJEaWZmIiwib3RoZXIiLCJyZXMiLCJsYXN0UG9zIiwiZW5kIiwic2tpcHBlZCIsImFjdHVhbEluc3BlY3RlZCIsImFjdHVhbExpbmVzIiwiZXhwZWN0ZWRMaW5lcyIsImluZGljYXRvciIsImlucHV0TGVuZ3RoIiwibWF4TGVuZ3RoIiwic3RkZXJyIiwiaXNUVFkiLCJjb2x1bW5zIiwicG9wIiwibWF4TGluZXMiLCJtYXgiLCJfYWN0dWFsTGluZXMiLCJwcmludGVkTGluZXMiLCJza2lwcGVkTXNnIiwiY3VyIiwiZXhwZWN0ZWRMaW5lIiwiYWN0dWFsTGluZSIsImRpdmVyZ2luZ0xpbmVzIiwiX0Vycm9yIiwib3B0aW9ucyIsImxpbWl0Iiwic3RhY2tUcmFjZUxpbWl0IiwiU3RyaW5nIiwiZ2V0Q29sb3JEZXB0aCIsImJhc2UiLCJfcmVzIiwia25vd25PcGVyYXRvcnMiLCJjb2RlIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJjdXN0b20iLCJyZWN1cnNlVGltZXMiLCJjdHgiLCJ1dGlsIiwiY3JlYXRlRXJyb3JUeXBlIiwiQmFzZSIsImdldE1lc3NhZ2UiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJOb2RlRXJyb3IiLCJfQmFzZSIsIm9uZU9mIiwidGhpbmciLCJpc0FycmF5IiwibGVuIiwibWFwIiwic3RhcnRzV2l0aCIsInN1YnN0ciIsImluY2x1ZGVzIiwic3RhcnQiLCJkZXRlcm1pbmVyIiwicmVwbGFjZSIsInR5cGUiLCJyZWFzb24iLCJpbnNwZWN0ZWQiLCJSYW5nZUVycm9yIiwiaW5wdXQiLCJfc2xpY2VkVG9BcnJheSIsImFyciIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9ub25JdGVyYWJsZVJlc3QiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX2kiLCJfcyIsIm5leHQiLCJkb25lIiwicmVnZXhGbGFnc1N1cHBvcnRlZCIsImZsYWdzIiwiYXJyYXlGcm9tU2V0IiwiYXJyYXkiLCJhcnJheUZyb21NYXAiLCJvYmplY3RHZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJudW1iZXJJc05hTiIsIk51bWJlciIsImlzTmFOIiwidW5jdXJyeVRoaXMiLCJmIiwiaGFzT3duUHJvcGVydHkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm9iamVjdFRvU3RyaW5nIiwiaXNBbnlBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXJWaWV3IiwiaXNEYXRlIiwiaXNNYXAiLCJpc1NldCIsImlzTmF0aXZlRXJyb3IiLCJpc0JveGVkUHJpbWl0aXZlIiwiaXNOdW1iZXJPYmplY3QiLCJpc1N0cmluZ09iamVjdCIsImlzQm9vbGVhbk9iamVjdCIsImlzQmlnSW50T2JqZWN0IiwiaXNTeW1ib2xPYmplY3QiLCJpc0Zsb2F0MzJBcnJheSIsImlzRmxvYXQ2NEFycmF5IiwiaXNOb25JbmRleCIsInBvdyIsImdldE93bk5vbkluZGV4UHJvcGVydGllcyIsImNvbXBhcmUiLCJ4IiwieSIsIm1pbiIsIk9OTFlfRU5VTUVSQUJMRSIsImtTdHJpY3QiLCJrTG9vc2UiLCJrTm9JdGVyYXRvciIsImtJc0FycmF5Iiwia0lzU2V0Iiwia0lzTWFwIiwiYXJlU2ltaWxhclJlZ0V4cHMiLCJSZWdFeHAiLCJhcmVTaW1pbGFyRmxvYXRBcnJheXMiLCJieXRlTGVuZ3RoIiwib2Zmc2V0IiwiYXJlU2ltaWxhclR5cGVkQXJyYXlzIiwiVWludDhBcnJheSIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJhcmVFcXVhbEFycmF5QnVmZmVycyIsImJ1ZjEiLCJidWYyIiwiaXNFcXVhbEJveGVkUHJpbWl0aXZlIiwidmFsMSIsInZhbDIiLCJ2YWx1ZU9mIiwiQm9vbGVhbiIsIkJpZ0ludCIsImlubmVyRGVlcEVxdWFsIiwibWVtb3MiLCJ2YWwxVGFnIiwidmFsMlRhZyIsImtleXMxIiwia2V5czIiLCJrZXlDaGVjayIsImdldFRpbWUiLCJfa2V5cyIsIl9rZXlzMiIsInNpemUiLCJnZXRFbnVtZXJhYmxlcyIsImsiLCJpdGVyYXRpb25UeXBlIiwiYUtleXMiLCJiS2V5cyIsInN5bWJvbEtleXNBIiwic3ltYm9sS2V5c0IiLCJfc3ltYm9sS2V5c0IiLCJwb3NpdGlvbiIsInZhbDJNZW1vQSIsInZhbDJNZW1vQiIsImFyZUVxIiwib2JqRXF1aXYiLCJkZWxldGUiLCJzZXRIYXNFcXVhbEVsZW1lbnQiLCJtZW1vIiwic2V0VmFsdWVzIiwiZmluZExvb3NlTWF0Y2hpbmdQcmltaXRpdmVzIiwicHJpbSIsInNldE1pZ2h0SGF2ZUxvb3NlUHJpbSIsImFsdFZhbHVlIiwibWFwTWlnaHRIYXZlTG9vc2VQcmltIiwiaXRlbSIsImN1ckIiLCJzZXRFcXVpdiIsImFWYWx1ZXMiLCJTZXQiLCJhZGQiLCJiVmFsdWVzIiwiX3ZhbCIsIm1hcEhhc0VxdWFsRW50cnkiLCJrZXkxIiwiaXRlbTEiLCJrZXkyIiwibWFwRXF1aXYiLCJhRW50cmllcyIsIl9hRW50cmllcyRpIiwiaXRlbTIiLCJiRW50cmllcyIsIl9pMiIsIl9iRW50cmllcyRfaSIsImtleXNBIiwiR2V0SW50cmluc2ljIiwiY2FsbEJpbmQiLCIkaW5kZXhPZiIsImNhbGxCb3VuZEludHJpbnNpYyIsImFsbG93TWlzc2luZyIsImludHJpbnNpYyIsIiRhcHBseSIsIiRjYWxsIiwiJHJlZmxlY3RBcHBseSIsIiRnT1BEIiwiJGRlZmluZVByb3BlcnR5IiwiJG1heCIsIm9yaWdpbmFsRnVuY3Rpb24iLCJmdW5jIiwiZGVzYyIsImFwcGx5QmluZCIsIm5vdyIsInRpbWVzIiwiZyIsIndpbmRvdyIsImZ1bmN0aW9ucyIsImluZm8iLCJ0aW1lIiwidGltZUVuZCIsInRyYWNlIiwiZGlyIiwiY29uc29sZUFzc2VydCIsInR1cGxlIiwibGFiZWwiLCJkdXJhdGlvbiIsImZvcm1hdCIsIm9iamVjdCIsImV4cHJlc3Npb24iLCJoYXNTeW1ib2xzIiwidG9TdHIiLCJvcmlnRGVmaW5lUHJvcGVydHkiLCJpc0Z1bmN0aW9uIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9ycyIsInN1cHBvcnRzRGVzY3JpcHRvcnMiLCJwcmVkaWNhdGUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJlZGljYXRlcyIsImZpcnN0U291cmNlIiwidG8iLCJuZXh0U291cmNlIiwia2V5c0FycmF5IiwibmV4dEluZGV4IiwibmV4dEtleSIsInBvbHlmaWxsIiwiaXNDYWxsYWJsZSIsImZvckVhY2hBcnJheSIsInJlY2VpdmVyIiwiZm9yRWFjaFN0cmluZyIsInN0cmluZyIsImNoYXJBdCIsImZvckVhY2hPYmplY3QiLCJsaXN0IiwidGhpc0FyZyIsIkVSUk9SX01FU1NBR0UiLCJmdW5jVHlwZSIsInRoYXQiLCJib3VuZCIsImJpbmRlciIsImJvdW5kTGVuZ3RoIiwiYm91bmRBcmdzIiwiRW1wdHkiLCJpbXBsZW1lbnRhdGlvbiIsIiRTeW50YXhFcnJvciIsIlN5bnRheEVycm9yIiwiJEZ1bmN0aW9uIiwiJFR5cGVFcnJvciIsImdldEV2YWxsZWRDb25zdHJ1Y3RvciIsImV4cHJlc3Npb25TeW50YXgiLCJ0aHJvd1R5cGVFcnJvciIsIlRocm93VHlwZUVycm9yIiwiY2FsbGVlIiwiY2FsbGVlVGhyb3dzIiwiZ09QRHRocm93cyIsImhhc1Byb3RvIiwiZ2V0UHJvdG8iLCJuZWVkc0V2YWwiLCJUeXBlZEFycmF5IiwiSU5UUklOU0lDUyIsIkFnZ3JlZ2F0ZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJBdG9taWNzIiwiQmlnSW50NjRBcnJheSIsIkJpZ1VpbnQ2NEFycmF5IiwiRGF0YVZpZXciLCJkZWNvZGVVUkkiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVVUkkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJldmFsIiwiRXZhbEVycm9yIiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiRmluYWxpemF0aW9uUmVnaXN0cnkiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsImlzRmluaXRlIiwiSlNPTiIsInBhcnNlRmxvYXQiLCJwYXJzZUludCIsIlNoYXJlZEFycmF5QnVmZmVyIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiVVJJRXJyb3IiLCJXZWFrTWFwIiwiV2Vha1JlZiIsIldlYWtTZXQiLCJlcnJvclByb3RvIiwiZG9FdmFsIiwiZ2VuIiwiTEVHQUNZX0FMSUFTRVMiLCJoYXNPd24iLCIkY29uY2F0IiwiJHNwbGljZUFwcGx5Iiwic3BsaWNlIiwiJHJlcGxhY2UiLCIkc3RyU2xpY2UiLCIkZXhlYyIsImV4ZWMiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwic3RyaW5nVG9QYXRoIiwiZmlyc3QiLCJsYXN0IiwibWF0Y2giLCJudW1iZXIiLCJxdW90ZSIsInN1YlN0cmluZyIsImdldEJhc2VJbnRyaW5zaWMiLCJpbnRyaW5zaWNOYW1lIiwiYWxpYXMiLCJwYXJ0cyIsImludHJpbnNpY0Jhc2VOYW1lIiwiaW50cmluc2ljUmVhbE5hbWUiLCJza2lwRnVydGhlckNhY2hpbmciLCJpc093biIsInBhcnQiLCJoYXNBcnJheUxlbmd0aERlZmluZUJ1ZyIsImZvbyIsIiRPYmplY3QiLCJvcmlnU3ltYm9sIiwiaGFzU3ltYm9sU2hhbSIsImhhc05hdGl2ZVN5bWJvbHMiLCJzeW1PYmoiLCJzeW1WYWwiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic3ltcyIsImhhc1RvU3RyaW5nVGFnU2hhbXMiLCJ0b1N0cmluZ1RhZyIsImluaGVyaXRzIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsIlRlbXBDdG9yIiwiaGFzVG9TdHJpbmdUYWciLCJjYWxsQm91bmQiLCIkdG9TdHJpbmciLCJpc1N0YW5kYXJkQXJndW1lbnRzIiwiaXNBcmd1bWVudHMiLCJpc0xlZ2FjeUFyZ3VtZW50cyIsInN1cHBvcnRzU3RhbmRhcmRBcmd1bWVudHMiLCJmblRvU3RyIiwicmVmbGVjdEFwcGx5IiwiYmFkQXJyYXlMaWtlIiwiaXNDYWxsYWJsZU1hcmtlciIsIl8iLCJjb25zdHJ1Y3RvclJlZ2V4IiwiaXNFUzZDbGFzc0ZuIiwiaXNFUzZDbGFzc0Z1bmN0aW9uIiwiZm5TdHIiLCJ0cnlGdW5jdGlvbk9iamVjdCIsInRyeUZ1bmN0aW9uVG9TdHIiLCJvYmplY3RDbGFzcyIsImZuQ2xhc3MiLCJnZW5DbGFzcyIsImRkYUNsYXNzIiwiZGRhQ2xhc3MyIiwiZGRhQ2xhc3MzIiwiaXNJRTY4IiwiaXNEREEiLCJpc0RvY3VtZW50RG90QWxsIiwiZG9jdW1lbnQiLCJhbGwiLCJzdHJDbGFzcyIsImlzRm5SZWdleCIsImdldEdlbmVyYXRvckZ1bmMiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5lcmF0b3JGdW5jIiwiZ2V0UG9seWZpbGwiLCJzaGltIiwiTmFOIiwic2hpbU51bWJlcklzTmFOIiwidGVzdElzTmFOIiwid2hpY2hUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5Iiwic2hpbU9iamVjdElzIiwidGVzdE9iamVjdElzIiwia2V5c1NoaW0iLCJpc0FyZ3MiLCJpc0VudW1lcmFibGUiLCJoYXNEb250RW51bUJ1ZyIsImhhc1Byb3RvRW51bUJ1ZyIsImRvbnRFbnVtcyIsImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlIiwiZXhjbHVkZWRLZXlzIiwiJGFwcGxpY2F0aW9uQ2FjaGUiLCIkY29uc29sZSIsIiRleHRlcm5hbCIsIiRmcmFtZSIsIiRmcmFtZUVsZW1lbnQiLCIkZnJhbWVzIiwiJGlubmVySGVpZ2h0IiwiJGlubmVyV2lkdGgiLCIkb25tb3pmdWxsc2NyZWVuY2hhbmdlIiwiJG9ubW96ZnVsbHNjcmVlbmVycm9yIiwiJG91dGVySGVpZ2h0IiwiJG91dGVyV2lkdGgiLCIkcGFnZVhPZmZzZXQiLCIkcGFnZVlPZmZzZXQiLCIkcGFyZW50IiwiJHNjcm9sbExlZnQiLCIkc2Nyb2xsVG9wIiwiJHNjcm9sbFgiLCIkc2Nyb2xsWSIsIiRzZWxmIiwiJHdlYmtpdEluZGV4ZWREQiIsIiR3ZWJraXRTdG9yYWdlSW5mbyIsIiR3aW5kb3ciLCJoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWciLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kiLCJpc09iamVjdCIsImlzU3RyaW5nIiwidGhlS2V5cyIsInNraXBQcm90byIsImoiLCJza2lwQ29uc3RydWN0b3IiLCJvcmlnS2V5cyIsIm9yaWdpbmFsS2V5cyIsInNoaW1PYmplY3RLZXlzIiwia2V5c1dvcmtzV2l0aEFyZ3VtZW50cyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiZnVuIiwicnVuQ2xlYXJUaW1lb3V0IiwibWFya2VyIiwicXVldWUiLCJkcmFpbmluZyIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsIm5leHRUaWNrIiwiSXRlbSIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJub29wIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJfX3VudXNlZF93ZWJwYWNrX21vZHVsZSIsIl9fd2VicGFja19leHBvcnRzX18iLCJkIiwiQmFzZVNlcnZpY2UiLCJ2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfcHJvdG9jb2xfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsInZzY29kZV9sYW5ndWFnZXNlcnZlcl9wcm90b2NvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJuIiwiX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJ2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdGV4dGRvY3VtZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfZGVmaW5lX3Byb3BlcnR5IiwiYWRkRG9jdW1lbnQiLCJkb2N1bWVudHMiLCJ1cmkiLCJWIiwibGFuZ3VhZ2VJZCIsInRleHQiLCJnZXREb2N1bWVudCIsInJlbW92ZURvY3VtZW50IiwiZ2V0RG9jdW1lbnRWYWx1ZSIsIl90aGlzX2dldERvY3VtZW50IiwiZ2V0VGV4dCIsInNldFZhbHVlIiwiaWRlbnRpZmllciIsInNldEdsb2JhbE9wdGlvbnMiLCJnbG9iYWxPcHRpb25zIiwic2V0V29ya3NwYWNlIiwid29ya3NwYWNlVXJpIiwic2V0T3B0aW9ucyIsImRvY3VtZW50VXJpIiwibWVyZ2UiLCJyTCIsImdldE9wdGlvbiIsIm9wdGlvbk5hbWUiLCJhcHBseURlbHRhcyIsImRlbHRhcyIsInVwZGF0ZSIsImRvQ29tcGxldGUiLCJkb0hvdmVyIiwiZG9SZXNvbHZlIiwiZG9WYWxpZGF0aW9uIiwicmFuZ2UiLCJwcm92aWRlU2lnbmF0dXJlSGVscCIsImZpbmREb2N1bWVudEhpZ2hsaWdodHMiLCJvcHRpb25zVG9GaWx0ZXJEaWFnbm9zdGljcyIsIl90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvSWdub3JlIiwiX3RoaXNfZ2xvYmFsT3B0aW9uc19lcnJvckNvZGVzVG9UcmVhdEFzV2FybmluZyIsIl90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JDb2Rlc1RvVHJlYXRBc0luZm8iLCJfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb0lnbm9yZSIsIl90aGlzX2dsb2JhbE9wdGlvbnNfZXJyb3JNZXNzYWdlc1RvVHJlYXRBc1dhcm5pbmciLCJfdGhpc19nbG9iYWxPcHRpb25zX2Vycm9yTWVzc2FnZXNUb1RyZWF0QXNJbmZvIiwiZXJyb3JDb2Rlc1RvSWdub3JlIiwiZXJyb3JDb2Rlc1RvVHJlYXRBc1dhcm5pbmciLCJlcnJvckNvZGVzVG9UcmVhdEFzSW5mbyIsImVycm9yTWVzc2FnZXNUb0lnbm9yZSIsImVycm9yTWVzc2FnZXNUb1RyZWF0QXNXYXJuaW5nIiwiZXJyb3JNZXNzYWdlc1RvVHJlYXRBc0luZm8iLCJnZXRTZW1hbnRpY1Rva2VucyIsImRpc3Bvc2UiLCJjbG9zZUNvbm5lY3Rpb24iLCJnZXRDb2RlQWN0aW9ucyIsImNvbnRleHQiLCJleGVjdXRlQ29tbWFuZCIsImNvbW1hbmQiLCJzZW5kQXBwbGllZFJlc3VsdCIsImNhbGxiYWNrSWQiLCJtb2RlIiwidGV4dERvY3VtZW50IiwiZGlhZ25vc3RpYyIsImR5bmFtaWNSZWdpc3RyYXRpb24iLCJyZWxhdGVkRG9jdW1lbnRTdXBwb3J0IiwicHVibGlzaERpYWdub3N0aWNzIiwicmVsYXRlZEluZm9ybWF0aW9uIiwidmVyc2lvblN1cHBvcnQiLCJ0YWdTdXBwb3J0IiwidmFsdWVTZXQiLCJEaWFnbm9zdGljVGFnIiwiVW5uZWNlc3NhcnkiLCJEZXByZWNhdGVkIiwiaG92ZXIiLCJjb250ZW50Rm9ybWF0Iiwic3luY2hyb25pemF0aW9uIiwid2lsbFNhdmUiLCJkaWRTYXZlIiwid2lsbFNhdmVXYWl0VW50aWwiLCJmb3JtYXR0aW5nIiwiY29tcGxldGlvbiIsImNvbXBsZXRpb25JdGVtIiwic25pcHBldFN1cHBvcnQiLCJjb21taXRDaGFyYWN0ZXJzU3VwcG9ydCIsImRvY3VtZW50YXRpb25Gb3JtYXQiLCJkZXByZWNhdGVkU3VwcG9ydCIsInByZXNlbGVjdFN1cHBvcnQiLCJjb250ZXh0U3VwcG9ydCIsInNpZ25hdHVyZUhlbHAiLCJzaWduYXR1cmVJbmZvcm1hdGlvbiIsImFjdGl2ZVBhcmFtZXRlclN1cHBvcnQiLCJkb2N1bWVudEhpZ2hsaWdodCIsInNlbWFudGljVG9rZW5zIiwibXVsdGlsaW5lVG9rZW5TdXBwb3J0Iiwib3ZlcmxhcHBpbmdUb2tlblN1cHBvcnQiLCJ0b2tlblR5cGVzIiwidG9rZW5Nb2RpZmllcnMiLCJmb3JtYXRzIiwicmVxdWVzdHMiLCJmdWxsIiwiZGVsdGEiLCJhdWdtZW50c1N5bnRheFRva2VucyIsImNvZGVBY3Rpb24iLCJ3b3Jrc3BhY2UiLCJkaWRDaGFuZ2VDb25maWd1cmF0aW9uIiwiYXBwbHlFZGl0Iiwid29ya3NwYWNlRWRpdCIsImZhaWx1cmVIYW5kbGluZyIsIm5vcm1hbGl6ZXNMaW5lRW5kaW5ncyIsImRvY3VtZW50Q2hhbmdlcyIsIlBIUCIsIkNvbnN0YW50cyIsIlRfVEhST1ciLCJUX0lOQ0xVREUiLCJUX0lOQ0xVREVfT05DRSIsIlRfRVZBTCIsIlRfUkVRVUlSRSIsIlRfUkVRVUlSRV9PTkNFIiwiVF9MT0dJQ0FMX09SIiwiVF9MT0dJQ0FMX1hPUiIsIlRfTE9HSUNBTF9BTkQiLCJUX1BSSU5UIiwiVF9ZSUVMRCIsIlRfRE9VQkxFX0FSUk9XIiwiVF9ZSUVMRF9GUk9NIiwiVF9QTFVTX0VRVUFMIiwiVF9NSU5VU19FUVVBTCIsIlRfTVVMX0VRVUFMIiwiVF9ESVZfRVFVQUwiLCJUX0NPTkNBVF9FUVVBTCIsIlRfTU9EX0VRVUFMIiwiVF9BTkRfRVFVQUwiLCJUX09SX0VRVUFMIiwiVF9YT1JfRVFVQUwiLCJUX1NMX0VRVUFMIiwiVF9TUl9FUVVBTCIsIlRfUE9XX0VRVUFMIiwiVF9DT0FMRVNDRV9FUVVBTCIsIlRfQ09BTEVTQ0UiLCJUX0JPT0xFQU5fT1IiLCJUX0JPT0xFQU5fQU5EIiwiVF9BTVBFUlNBTkRfTk9UX0ZPTExPV0VEX0JZX1ZBUl9PUl9WQVJBUkciLCJUX0FNUEVSU0FORF9GT0xMT1dFRF9CWV9WQVJfT1JfVkFSQVJHIiwiVF9JU19FUVVBTCIsIlRfSVNfTk9UX0VRVUFMIiwiVF9JU19JREVOVElDQUwiLCJUX0lTX05PVF9JREVOVElDQUwiLCJUX1NQQUNFU0hJUCIsIlRfSVNfU01BTExFUl9PUl9FUVVBTCIsIlRfSVNfR1JFQVRFUl9PUl9FUVVBTCIsIlRfU0wiLCJUX1NSIiwiVF9JTlNUQU5DRU9GIiwiVF9JTkMiLCJUX0RFQyIsIlRfSU5UX0NBU1QiLCJUX0RPVUJMRV9DQVNUIiwiVF9TVFJJTkdfQ0FTVCIsIlRfQVJSQVlfQ0FTVCIsIlRfT0JKRUNUX0NBU1QiLCJUX0JPT0xfQ0FTVCIsIlRfVU5TRVRfQ0FTVCIsIlRfUE9XIiwiVF9ORVciLCJUX0NMT05FIiwiVF9FWElUIiwiVF9JRiIsIlRfRUxTRUlGIiwiVF9FTFNFIiwiVF9FTkRJRiIsIlRfTE5VTUJFUiIsIlRfRE5VTUJFUiIsIlRfU1RSSU5HIiwiVF9TVFJJTkdfVkFSTkFNRSIsIlRfVkFSSUFCTEUiLCJUX05VTV9TVFJJTkciLCJUX0lOTElORV9IVE1MIiwiVF9FTkNBUFNFRF9BTkRfV0hJVEVTUEFDRSIsIlRfQ09OU1RBTlRfRU5DQVBTRURfU1RSSU5HIiwiVF9FQ0hPIiwiVF9ETyIsIlRfV0hJTEUiLCJUX0VORFdISUxFIiwiVF9GT1IiLCJUX0VOREZPUiIsIlRfRk9SRUFDSCIsIlRfRU5ERk9SRUFDSCIsIlRfREVDTEFSRSIsIlRfRU5EREVDTEFSRSIsIlRfQVMiLCJUX1NXSVRDSCIsIlRfTUFUQ0giLCJUX0VORFNXSVRDSCIsIlRfQ0FTRSIsIlRfREVGQVVMVCIsIlRfQlJFQUsiLCJUX0NPTlRJTlVFIiwiVF9HT1RPIiwiVF9GVU5DVElPTiIsIlRfRk4iLCJUX0NPTlNUIiwiVF9SRVRVUk4iLCJUX1RSWSIsIlRfQ0FUQ0giLCJUX0ZJTkFMTFkiLCJUX1VTRSIsIlRfSU5TVEVBRE9GIiwiVF9HTE9CQUwiLCJUX1NUQVRJQyIsIlRfQUJTVFJBQ1QiLCJUX0ZJTkFMIiwiVF9QUklWQVRFIiwiVF9QUk9URUNURUQiLCJUX1BVQkxJQyIsIlRfUkVBRE9OTFkiLCJUX1ZBUiIsIlRfVU5TRVQiLCJUX0lTU0VUIiwiVF9FTVBUWSIsIlRfSEFMVF9DT01QSUxFUiIsIlRfQ0xBU1MiLCJUX1RSQUlUIiwiVF9JTlRFUkZBQ0UiLCJUX0VOVU0iLCJUX0VYVEVORFMiLCJUX0lNUExFTUVOVFMiLCJUX09CSkVDVF9PUEVSQVRPUiIsIlRfTlVMTFNBRkVfT0JKRUNUX09QRVJBVE9SIiwiVF9MSVNUIiwiVF9BUlJBWSIsIlRfQ0FMTEFCTEUiLCJUX0NMQVNTX0MiLCJUX1RSQUlUX0MiLCJUX01FVEhPRF9DIiwiVF9GVU5DX0MiLCJUX0xJTkUiLCJUX0ZJTEUiLCJUX1NUQVJUX0hFUkVET0MiLCJUX0VORF9IRVJFRE9DIiwiVF9ET0xMQVJfT1BFTl9DVVJMWV9CUkFDRVMiLCJUX0NVUkxZX09QRU4iLCJUX1BBQU1BWUlNX05FS1VET1RBWUlNIiwiVF9OQU1FU1BBQ0UiLCJUX05TX0MiLCJUX0RJUiIsIlRfTlNfU0VQQVJBVE9SIiwiVF9FTExJUFNJUyIsIlRfTkFNRV9GVUxMWV9RVUFMSUZJRUQiLCJUX05BTUVfUVVBTElGSUVEIiwiVF9OQU1FX1JFTEFUSVZFIiwiVF9BVFRSSUJVVEUiLCJUX0JBRF9DSEFSQUNURVIiLCJUX0NPTU1FTlQiLCJUX0RPQ19DT01NRU5UIiwiVF9PUEVOX1RBRyIsIlRfT1BFTl9UQUdfV0lUSF9FQ0hPIiwiVF9DTE9TRV9UQUciLCJUX1dISVRFU1BBQ0UiLCJMZXhlciIsInNyYyIsImluaSIsImhlcmVkb2MiLCJoZXJlZG9jRW5kQWxsb3dlZCIsInN0YXRlU3RhY2siLCJzdGFja1BvcyIsInN3YXBTdGF0ZSIsInN0YXRlIiwicHVzaFN0YXRlIiwicG9wU3RhdGUiLCJzaG9ydE9wZW5UYWciLCJzaG9ydF9vcGVuX3RhZyIsIm9wZW5UYWciLCJpbmxpbmVIdG1sIiwibGFiZWxSZWdleFBhcnQiLCJzdHJpbmdSZWdleFBhcnQiLCJzaGFyZWRTdHJpbmdUb2tlbnMiLCJyZSIsImRhdGEiLCJtYXRjaEZ1bmMiLCJpbmRleCIsInJlc3VsdHMiLCJsaW5lIiwiY2FuY2VsIiwidG9rZW5zIiwic29tZSIsInRva2VuIiwicmVzdWx0U3RyaW5nIiwiUGFyc2VyIiwicHJlcHJvY2Vzc2VkVG9rZW5zIiwiZXZhbHVhdGUiLCJ5eWJhc2UiLCJ5eWRlZmF1bHQiLCJ5eWNoZWNrIiwieXlhY3Rpb24iLCJ5eWxlbiIsInl5Z2Jhc2UiLCJ5eWdjaGVjayIsInl5cCIsInl5Z290byIsInl5bGhzIiwidGVybWluYWxzIiwidHJhbnNsYXRlIiwieXlnZGVmYXVsdCIsInRva2VuTWFwIiwiY3JlYXRlVG9rZW5NYXAiLCJkcm9wVG9rZW5zIiwidG9rZW5JZCIsIlRPS0VOX05PTkUiLCJzdGFydEF0dHJpYnV0ZXMiLCJlbmRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlU3RhY2siLCJ5eWFzdGsiLCJ5eW4iLCJvcmlnVG9rZW5JZCIsImdldE5leHRUb2tlbiIsIlRPS0VOX01BUF9TSVpFIiwiVE9LRU5fSU5WQUxJRCIsIllZTEFTVCIsIllZMlRCTFNUQVRFIiwiWVlOTFNUQVRFUyIsIllZREVGQVVMVCIsInRva2VuVmFsdWUiLCJ5eXZhbCIsIllZVU5FWFBFQ1RFRCIsImF0dHIiLCJZWUdMQVNUIiwiZXhwZWN0ZWRTdHJpbmciLCJQYXJzZUVycm9yIiwidG1wIiwiY29tbWVudCIsIlBIUFBhcnNlcl9Db21tZW50X0RvYyIsInRva2VuTmFtZSIsImNvbnN0YW50cyIsImN1cnJlbnQiLCJjb25zdGFudCIsIllZRVJSVE9LIiwiVGsiLCJjaGVja1ZhbHVlQWdhaW5zdFJlZ2V4cEFycmF5IiwibWVyZ2VPYmplY3RzIiwib2JqMSIsIm9iajIiLCJleGNsdWRlVW5kZWZpbmVkIiwiZXhjbHVkZVVuZGVmaW5lZFZhbHVlcyIsIm1lcmdlZE9iamVjdHMiLCJmaWx0ZXJlZEVudHJpZXMiLCJlbnRyaWVzIiwiZnJvbUVudHJpZXMiLCJub3RFbXB0eSIsIm1lcmdlUmFuZ2VzIiwicmFuZ2VzIiwic29ydCIsImNvbXBhcmVQb2ludHMiLCJjbXAiLCJpc0VtcHR5Iiwicm93IiwiY29sdW1uIiwicDEiLCJwMiIsInJlZ2V4cEFycmF5IiwiY29udmVydFRvVXJpIiwiZmlsZVBhdGgiLCJVUkkiLCJmaWxlIiwiaXNCdWZmZXIiLCJhcmciLCJjb3B5IiwiZmlsbCIsInJlYWRVSW50OCIsImlzQXJndW1lbnRzT2JqZWN0IiwiQmlnSW50U3VwcG9ydGVkIiwiU3ltYm9sU3VwcG9ydGVkIiwiT2JqZWN0VG9TdHJpbmciLCJudW1iZXJWYWx1ZSIsInN0cmluZ1ZhbHVlIiwiYm9vbGVhblZhbHVlIiwiYmlnSW50VmFsdWUiLCJzeW1ib2xWYWx1ZSIsImNoZWNrQm94ZWRQcmltaXRpdmUiLCJwcm90b3R5cGVWYWx1ZU9mIiwiaXNWaWV3IiwiaXNEYXRhVmlldyIsImlzVWludDhBcnJheSIsImlzVWludDhDbGFtcGVkQXJyYXkiLCJpc1VpbnQxNkFycmF5IiwiaXNVaW50MzJBcnJheSIsImlzSW50OEFycmF5IiwiaXNJbnQxNkFycmF5IiwiaXNJbnQzMkFycmF5IiwiaXNCaWdJbnQ2NEFycmF5IiwiaXNCaWdVaW50NjRBcnJheSIsImlzTWFwVG9TdHJpbmciLCJ3b3JraW5nIiwiaXNTZXRUb1N0cmluZyIsImlzV2Vha01hcFRvU3RyaW5nIiwiaXNXZWFrTWFwIiwiaXNXZWFrU2V0VG9TdHJpbmciLCJpc1dlYWtTZXQiLCJpc0FycmF5QnVmZmVyVG9TdHJpbmciLCJpc0FycmF5QnVmZmVyIiwiaXNEYXRhVmlld1RvU3RyaW5nIiwiU2hhcmVkQXJyYXlCdWZmZXJDb3B5IiwiaXNTaGFyZWRBcnJheUJ1ZmZlclRvU3RyaW5nIiwiaXNTaGFyZWRBcnJheUJ1ZmZlciIsImlzQXN5bmNGdW5jdGlvbiIsImlzTWFwSXRlcmF0b3IiLCJpc1NldEl0ZXJhdG9yIiwiaXNHZW5lcmF0b3JPYmplY3QiLCJpc1dlYkFzc2VtYmx5Q29tcGlsZWRNb2R1bGUiLCJtZXRob2QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVzY3JpcHRvcnMiLCJmb3JtYXRSZWdFeHAiLCJvYmplY3RzIiwic3RyaW5naWZ5IiwiaXNOdWxsIiwiZGVwcmVjYXRlIiwibm9EZXByZWNhdGlvbiIsImRlcHJlY2F0ZWQiLCJ0aHJvd0RlcHJlY2F0aW9uIiwidHJhY2VEZXByZWNhdGlvbiIsImRlYnVncyIsImRlYnVnRW52UmVnZXgiLCJOT0RFX0RFQlVHIiwiZGVidWdFbnYiLCJ0b1VwcGVyQ2FzZSIsImRlYnVnbG9nIiwicGlkIiwib3B0cyIsInNlZW4iLCJzdHlsaXplIiwic3R5bGl6ZU5vQ29sb3IiLCJjb2xvcnMiLCJpc0Jvb2xlYW4iLCJfZXh0ZW5kIiwiaXNVbmRlZmluZWQiLCJzdHlsaXplV2l0aENvbG9yIiwiZm9ybWF0VmFsdWUiLCJzdHlsZXMiLCJzdHlsZVR5cGUiLCJzdHlsZSIsImFycmF5VG9IYXNoIiwiaGFzaCIsImlkeCIsInJldCIsInByaW1pdGl2ZSIsImZvcm1hdFByaW1pdGl2ZSIsInZpc2libGVLZXlzIiwiaXNFcnJvciIsImZvcm1hdEVycm9yIiwiYnJhY2VzIiwidG9VVENTdHJpbmciLCJvdXRwdXQiLCJmb3JtYXRBcnJheSIsImZvcm1hdFByb3BlcnR5IiwicmVkdWNlVG9TaW5nbGVTdHJpbmciLCJzaW1wbGUiLCJpc051bWJlciIsImwiLCJudW1MaW5lc0VzdCIsInJlZHVjZSIsInByZXYiLCJhciIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNTeW1ib2wiLCJpc1ByaW1pdGl2ZSIsInBhZCIsIm1vbnRocyIsInRpbWVzdGFtcCIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXREYXRlIiwiZ2V0TW9udGgiLCJvcmlnaW4iLCJwcm9wIiwia0N1c3RvbVByb21pc2lmaWVkU3ltYm9sIiwicHJvbWlzaWZ5Iiwib3JpZ2luYWwiLCJwcm9taXNlUmVzb2x2ZSIsInByb21pc2VSZWplY3QiLCJwcm9taXNlIiwicmVqZWN0IiwiY2FsbGJhY2tpZnlPblJlamVjdGVkIiwiY2IiLCJuZXdSZWFzb24iLCJjYWxsYmFja2lmeSIsImNhbGxiYWNraWZpZWQiLCJtYXliZUNiIiwicmVqIiwiX19jcmVhdGVCaW5kaW5nIiwibSIsImsyIiwiX19lc01vZHVsZSIsIl9fZXhwb3J0U3RhciIsImNyZWF0ZU1lc3NhZ2VDb25uZWN0aW9uIiwiQnJvd3Nlck1lc3NhZ2VXcml0ZXIiLCJCcm93c2VyTWVzc2FnZVJlYWRlciIsInJpbF8xIiwiZGVmYXVsdCIsImluc3RhbGwiLCJhcGlfMSIsIkFic3RyYWN0TWVzc2FnZVJlYWRlciIsImxpc3RlbiIsImNhbGxiYWNrIiwiX29uRGF0YSIsImV2ZW50IiwicG9ydCIsIkVtaXR0ZXIiLCJfbWVzc2FnZUxpc3RlbmVyIiwiZmlyZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmaXJlRXJyb3IiLCJvbm1lc3NhZ2UiLCJBYnN0cmFjdE1lc3NhZ2VXcml0ZXIiLCJ3cml0ZSIsInBvc3RNZXNzYWdlIiwiaGFuZGxlRXJyb3IiLCJlcnJvckNvdW50IiwicmVhZGVyIiwid3JpdGVyIiwibG9nZ2VyIiwiTnVsbExvZ2dlciIsIkNvbm5lY3Rpb25TdHJhdGVneSIsImNvbm5lY3Rpb25TdHJhdGVneSIsIk1lc3NhZ2VCdWZmZXIiLCJBYnN0cmFjdE1lc3NhZ2VCdWZmZXIiLCJlbXB0eUJ1ZmZlciIsImZyb21TdHJpbmciLCJfZW5jb2RpbmciLCJUZXh0RW5jb2RlciIsImVuY29kZSIsImVuY29kaW5nIiwiYXNjaWlEZWNvZGVyIiwiZGVjb2RlIiwiVGV4dERlY29kZXIiLCJhc05hdGl2ZSIsImFsbG9jTmF0aXZlIiwiUmVhZGFibGVTdHJlYW1XcmFwcGVyIiwib25DbG9zZSIsImxpc3RlbmVyIiwic29ja2V0IiwiRGlzcG9zYWJsZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbkVycm9yIiwib25FbmQiLCJvbkRhdGEiLCJibG9iIiwiYXJyYXlCdWZmZXIiLCJSQUwiLCJXcml0YWJsZVN0cmVhbVdyYXBwZXIiLCJzZW5kIiwiY2xvc2UiLCJfdGV4dEVuY29kZXIiLCJfcmlsIiwiZnJlZXplIiwibWVzc2FnZUJ1ZmZlciIsImFwcGxpY2F0aW9uSnNvbiIsImVuY29kZXIiLCJjaGFyc2V0IiwicGFyc2UiLCJzdHJlYW0iLCJhc1JlYWRhYmxlU3RyZWFtIiwiYXNXcml0YWJsZVN0cmVhbSIsInRpbWVyIiwibXMiLCJoYW5kbGUiLCJzZXRJbW1lZGlhdGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJSSUwiLCJQcm9ncmVzc1R5cGUiLCJQcm9ncmVzc1Rva2VuIiwiQ29ubmVjdGlvbk9wdGlvbnMiLCJXcml0ZWFibGVTdHJlYW1NZXNzYWdlV3JpdGVyIiwiTWVzc2FnZVdyaXRlciIsIlJlYWRhYmxlU3RyZWFtTWVzc2FnZVJlYWRlciIsIk1lc3NhZ2VSZWFkZXIiLCJTaGFyZWRBcnJheVJlY2VpdmVyU3RyYXRlZ3kiLCJTaGFyZWRBcnJheVNlbmRlclN0cmF0ZWd5IiwiQ2FuY2VsbGF0aW9uVG9rZW4iLCJDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSIsIkV2ZW50IiwiTFJVQ2FjaGUiLCJUb3VjaCIsIkxpbmtlZE1hcCIsIlBhcmFtZXRlclN0cnVjdHVyZXMiLCJOb3RpZmljYXRpb25UeXBlOSIsIk5vdGlmaWNhdGlvblR5cGU4IiwiTm90aWZpY2F0aW9uVHlwZTciLCJOb3RpZmljYXRpb25UeXBlNiIsIk5vdGlmaWNhdGlvblR5cGU1IiwiTm90aWZpY2F0aW9uVHlwZTQiLCJOb3RpZmljYXRpb25UeXBlMyIsIk5vdGlmaWNhdGlvblR5cGUyIiwiTm90aWZpY2F0aW9uVHlwZTEiLCJOb3RpZmljYXRpb25UeXBlMCIsIk5vdGlmaWNhdGlvblR5cGUiLCJFcnJvckNvZGVzIiwiUmVzcG9uc2VFcnJvciIsIlJlcXVlc3RUeXBlOSIsIlJlcXVlc3RUeXBlOCIsIlJlcXVlc3RUeXBlNyIsIlJlcXVlc3RUeXBlNiIsIlJlcXVlc3RUeXBlNSIsIlJlcXVlc3RUeXBlNCIsIlJlcXVlc3RUeXBlMyIsIlJlcXVlc3RUeXBlMiIsIlJlcXVlc3RUeXBlMSIsIlJlcXVlc3RUeXBlMCIsIlJlcXVlc3RUeXBlIiwiTWVzc2FnZSIsIk1lc3NhZ2VTdHJhdGVneSIsIkNhbmNlbGxhdGlvblN0cmF0ZWd5IiwiQ2FuY2VsbGF0aW9uU2VuZGVyU3RyYXRlZ3kiLCJDYW5jZWxsYXRpb25SZWNlaXZlclN0cmF0ZWd5IiwiQ29ubmVjdGlvbkVycm9yIiwiQ29ubmVjdGlvbkVycm9ycyIsIkxvZ1RyYWNlTm90aWZpY2F0aW9uIiwiU2V0VHJhY2VOb3RpZmljYXRpb24iLCJUcmFjZUZvcm1hdCIsIlRyYWNlVmFsdWVzIiwiVHJhY2UiLCJtZXNzYWdlc18xIiwibGlua2VkTWFwXzEiLCJkaXNwb3NhYmxlXzEiLCJldmVudHNfMSIsImNhbmNlbGxhdGlvbl8xIiwic2hhcmVkQXJyYXlDYW5jZWxsYXRpb25fMSIsIm1lc3NhZ2VSZWFkZXJfMSIsIm1lc3NhZ2VXcml0ZXJfMSIsIm1lc3NhZ2VCdWZmZXJfMSIsImNvbm5lY3Rpb25fMSIsInJhbF8xIiwiSXMiLCJOb25lIiwiaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJvbkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsIkNhbmNlbGxlZCIsImNhbmRpZGF0ZSIsImJvb2xlYW4iLCJzaG9ydGN1dEV2ZW50IiwiTXV0YWJsZVRva2VuIiwiX2lzQ2FuY2VsbGVkIiwiX2VtaXR0ZXIiLCJfdG9rZW4iLCJSZXF1ZXN0Q2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSIsIklkQ2FuY2VsbGF0aW9uUmVjZWl2ZXJTdHJhdGVneSIsIkNhbmNlbE5vdGlmaWNhdGlvbiIsIlByb2dyZXNzTm90aWZpY2F0aW9uIiwiU3RhclJlcXVlc3RIYW5kbGVyIiwiT2ZmIiwiTWVzc2FnZXMiLCJDb21wYWN0IiwiVmVyYm9zZSIsInRvTG93ZXJDYXNlIiwiVGV4dCIsImNhbmNlbFVuZGlzcGF0Y2hlZCIsImtpbmQiLCJjcmVhdGVDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSIsInNlbmRDYW5jZWxsYXRpb24iLCJjb25uIiwiaWQiLCJzZW5kTm90aWZpY2F0aW9uIiwiY2xlYW51cCIsInNlbmRlciIsImhhbmRsZU1lc3NhZ2UiLCJjYW5jZWxsYXRpb25TdHJhdGVneSIsIm1lc3NhZ2VTdHJhdGVneSIsIkNvbm5lY3Rpb25TdGF0ZSIsIm1lc3NhZ2VSZWFkZXIiLCJtZXNzYWdlV3JpdGVyIiwiX2xvZ2dlciIsInNlcXVlbmNlTnVtYmVyIiwibm90aWZpY2F0aW9uU2VxdWVuY2VOdW1iZXIiLCJ1bmtub3duUmVzcG9uc2VTZXF1ZW5jZU51bWJlciIsInN0YXJSZXF1ZXN0SGFuZGxlciIsInJlcXVlc3RIYW5kbGVycyIsInN0YXJOb3RpZmljYXRpb25IYW5kbGVyIiwibm90aWZpY2F0aW9uSGFuZGxlcnMiLCJwcm9ncmVzc0hhbmRsZXJzIiwibWVzc2FnZVF1ZXVlIiwicmVzcG9uc2VQcm9taXNlcyIsImtub3duQ2FuY2VsZWRSZXF1ZXN0cyIsInJlcXVlc3RUb2tlbnMiLCJ0cmFjZUZvcm1hdCIsInRyYWNlciIsIk5ldyIsImVycm9yRW1pdHRlciIsImNsb3NlRW1pdHRlciIsInVuaGFuZGxlZE5vdGlmaWNhdGlvbkVtaXR0ZXIiLCJ1bmhhbmRsZWRQcm9ncmVzc0VtaXR0ZXIiLCJkaXNwb3NlRW1pdHRlciIsImNyZWF0ZVJlcXVlc3RRdWV1ZUtleSIsImNyZWF0ZVJlc3BvbnNlUXVldWVLZXkiLCJjcmVhdGVOb3RpZmljYXRpb25RdWV1ZUtleSIsImFkZE1lc3NhZ2VUb1F1ZXVlIiwiaXNSZXF1ZXN0IiwiaXNSZXNwb25zZSIsIl9tZXNzYWdlIiwiaXNMaXN0ZW5pbmciLCJMaXN0ZW5pbmciLCJpc0Nsb3NlZCIsIkNsb3NlZCIsImlzRGlzcG9zZWQiLCJEaXNwb3NlZCIsImNsb3NlSGFuZGxlciIsInJlYWRFcnJvckhhbmRsZXIiLCJ3cml0ZUVycm9ySGFuZGxlciIsInRyaWdnZXJNZXNzYWdlUXVldWUiLCJwcm9jZXNzTWVzc2FnZVF1ZXVlIiwiaGFuZGxlUmVxdWVzdCIsImlzTm90aWZpY2F0aW9uIiwiaGFuZGxlTm90aWZpY2F0aW9uIiwiaGFuZGxlUmVzcG9uc2UiLCJoYW5kbGVJbnZhbGlkTWVzc2FnZSIsImNhbmNlbElkIiwicGFyYW1zIiwidG9DYW5jZWwiLCJzdHJhdGVneSIsInJlc3BvbnNlIiwidHJhY2VTZW5kaW5nUmVzcG9uc2UiLCJjYW5jZWxsYXRpb25Ub2tlbiIsInRyYWNlUmVjZWl2ZWROb3RpZmljYXRpb24iLCJyZXF1ZXN0TWVzc2FnZSIsInJlcGx5IiwicmVzdWx0T3JFcnJvciIsInN0YXJ0VGltZSIsImpzb25ycGMiLCJ0b0pzb24iLCJyZXBseUVycm9yIiwicmVwbHlTdWNjZXNzIiwidHJhY2VSZWNlaXZlZFJlcXVlc3QiLCJlbGVtZW50IiwicmVxdWVzdEhhbmRsZXIiLCJoYW5kbGVyIiwidG9rZW5LZXkiLCJjYW5jZWxsYXRpb25Tb3VyY2UiLCJoYW5kbGVyUmVzdWx0IiwibnVtYmVyT2ZQYXJhbXMiLCJJbnZhbGlkUGFyYW1zIiwicGFyYW1ldGVyU3RydWN0dXJlcyIsImJ5TmFtZSIsImJ5UG9zaXRpb24iLCJJbnRlcm5hbEVycm9yIiwiTWV0aG9kTm90Rm91bmQiLCJyZXNwb25zZU1lc3NhZ2UiLCJyZXNwb25zZVByb21pc2UiLCJ0cmFjZVJlY2VpdmVkUmVzcG9uc2UiLCJub3RpZmljYXRpb25IYW5kbGVyIiwicmVzcG9uc2VIYW5kbGVyIiwic3RyaW5naWZ5VHJhY2UiLCJ0cmFjZVNlbmRpbmdSZXF1ZXN0IiwibG9nTFNQTWVzc2FnZSIsInRyYWNlU2VuZGluZ05vdGlmaWNhdGlvbiIsInRpbWVyU3RhcnQiLCJsc3BNZXNzYWdlIiwiaXNMU1BNZXNzYWdlIiwidGhyb3dJZkNsb3NlZE9yRGlzcG9zZWQiLCJ0aHJvd0lmTGlzdGVuaW5nIiwiQWxyZWFkeUxpc3RlbmluZyIsInRocm93SWZOb3RMaXN0ZW5pbmciLCJ1bmRlZmluZWRUb051bGwiLCJwYXJhbSIsIm51bGxUb1VuZGVmaW5lZCIsImlzTmFtZWRQYXJhbSIsImNvbXB1dGVTaW5nbGVQYXJhbSIsImF1dG8iLCJjb21wdXRlTWVzc2FnZVBhcmFtcyIsImNvbm5lY3Rpb24iLCJtZXNzYWdlUGFyYW1zIiwicGFyYW1TdGFydCIsInBhcmFtRW5kIiwibm90aWZpY2F0aW9uTWVzc2FnZSIsIm9uTm90aWZpY2F0aW9uIiwib25Qcm9ncmVzcyIsIl90eXBlIiwic2VuZFByb2dyZXNzIiwib25VbmhhbmRsZWRQcm9ncmVzcyIsInNlbmRSZXF1ZXN0IiwiZGlzcG9zYWJsZSIsImVuYWJsZUNhbmNlbGxhdGlvbiIsInJlc29sdmVXaXRoQ2xlYW51cCIsInIiLCJyZWplY3RXaXRoQ2xlYW51cCIsIk1lc3NhZ2VXcml0ZUVycm9yIiwib25SZXF1ZXN0IiwiaGFzUGVuZGluZ1Jlc3BvbnNlIiwiX3ZhbHVlIiwiX3RyYWNlciIsInNlbmROb3RpZmljYXRpb25PclRyYWNlT3B0aW9ucyIsIl9zZW5kTm90aWZpY2F0aW9uIiwiX3RyYWNlRm9ybWF0Iiwib25VbmhhbmRsZWROb3RpZmljYXRpb24iLCJvbkRpc3Bvc2UiLCJQZW5kaW5nUmVzcG9uc2VSZWplY3RlZCIsInZhbHVlcyIsInZlcmJvc2UiLCJfZGlzcG9zYWJsZSIsIkNhbGxiYWNrTGlzdCIsImJ1Y2tldCIsIl9jYWxsYmFja3MiLCJfY29udGV4dHMiLCJyZW1vdmUiLCJmb3VuZENhbGxiYWNrV2l0aERpZmZlcmVudENvbnRleHQiLCJpbnZva2UiLCJjYWxsYmFja3MiLCJjb250ZXh0cyIsIl9ldmVudCIsInRoaXNBcmdzIiwiZGlzcG9zYWJsZXMiLCJfb3B0aW9ucyIsIm9uRmlyc3RMaXN0ZW5lckFkZCIsIl9ub29wIiwib25MYXN0TGlzdGVuZXJSZW1vdmUiLCJzdHJpbmdBcnJheSIsImV2ZXJ5IiwiZWxlbSIsIl9hIiwiRmlyc3QiLCJBc09sZCIsIkxhc3QiLCJBc05ldyIsImNsZWFyIiwiX21hcCIsIl9oZWFkIiwiX3RhaWwiLCJfc2l6ZSIsIl9zdGF0ZSIsInRvdWNoIiwicHJldmlvdXMiLCJhZGRJdGVtTGFzdCIsImFkZEl0ZW1GaXJzdCIsInJlbW92ZUl0ZW0iLCJjYWxsYmFja2ZuIiwidHJpbU9sZCIsIm5ld1NpemUiLCJjdXJyZW50U2l6ZSIsInRvSlNPTiIsImZyb21KU09OIiwiX2xpbWl0IiwiY2hlY2tUcmltIiwicmF0aW8iLCJfcmF0aW8iLCJwZWVrIiwicm91bmQiLCJDUiIsIkxGIiwiQ1JMRiIsImFwcGVuZCIsImNodW5rIiwidG9BcHBlbmQiLCJfY2h1bmtzIiwiX3RvdGFsTGVuZ3RoIiwidHJ5UmVhZEhlYWRlcnMiLCJsb3dlckNhc2VLZXlzIiwiY2h1bmtJbmRleCIsImNodW5rQnl0ZXNSZWFkIiwiX3JlYWQiLCJoZWFkZXJzIiwiaGVhZGVyIiwidHJpbSIsInRyeVJlYWRCb2R5IiwibnVtYmVyT2ZCeXRlcyIsImJ5dGVDb3VudCIsInJlc3VsdE9mZnNldCIsImNodW5rUGFydCIsInNlbWFwaG9yZV8xIiwib25QYXJ0aWFsTWVzc2FnZSIsImFzRXJyb3IiLCJmaXJlQ2xvc2UiLCJwYXJ0aWFsTWVzc2FnZUVtaXR0ZXIiLCJmaXJlUGFydGlhbE1lc3NhZ2UiLCJSZXNvbHZlZE1lc3NhZ2VSZWFkZXJPcHRpb25zIiwiZnJvbU9wdGlvbnMiLCJjb250ZW50RGVjb2RlciIsImNvbnRlbnREZWNvZGVycyIsImNvbnRlbnRUeXBlRGVjb2RlciIsImNvbnRlbnRUeXBlRGVjb2RlcnMiLCJwYXJ0aWFsTWVzc2FnZVRpbWVvdXQiLCJfcGFydGlhbE1lc3NhZ2VUaW1lb3V0IiwibmV4dE1lc3NhZ2VMZW5ndGgiLCJtZXNzYWdlVG9rZW4iLCJwYXJ0aWFsTWVzc2FnZVRpbWVyIiwicmVhZGFibGUiLCJjb250ZW50TGVuZ3RoIiwiYm9keSIsInNldFBhcnRpYWxNZXNzYWdlVGltZXIiLCJjbGVhclBhcnRpYWxNZXNzYWdlVGltZXIiLCJyZWFkU2VtYXBob3JlIiwibG9jayIsImJ5dGVzIiwid2FpdGluZ1RpbWUiLCJTZW1hcGhvcmUiLCJDb250ZW50TGVuZ3RoIiwiUmVzb2x2ZWRNZXNzYWdlV3JpdGVyT3B0aW9ucyIsImNvbnRlbnRUeXBlRW5jb2RlciIsImNvbnRlbnRFbmNvZGVyIiwid3JpdGVTZW1hcGhvcmUiLCJwYXlsb2FkIiwiZG9Xcml0ZSIsIkFic3RyYWN0TWVzc2FnZVNpZ25hdHVyZSIsIkludmFsaWRSZXF1ZXN0IiwianNvbnJwY1Jlc2VydmVkRXJyb3JSYW5nZVN0YXJ0Iiwic2VydmVyRXJyb3JTdGFydCIsIk1lc3NhZ2VSZWFkRXJyb3IiLCJDb25uZWN0aW9uSW5hY3RpdmUiLCJTZXJ2ZXJOb3RJbml0aWFsaXplZCIsIlVua25vd25FcnJvckNvZGUiLCJqc29ucnBjUmVzZXJ2ZWRFcnJvclJhbmdlRW5kIiwic2VydmVyRXJyb3JFbmQiLCJfcGFyYW1ldGVyU3RydWN0dXJlcyIsIl9yYWwiLCJyYWwiLCJ0aHVuayIsIl93YWl0aW5nIiwicnVuTmV4dCIsImFjdGl2ZSIsIl9hY3RpdmUiLCJfY2FwYWNpdHkiLCJkb1J1bk5leHQiLCJjYXBhY2l0eSIsIkNhbmNlbGxhdGlvblN0YXRlIiwiQ29udGludWUiLCJyZXF1ZXN0IiwiYnVmZmVycyIsIiRjYW5jZWxsYXRpb25EYXRhIiwiX2Nvbm4iLCJzdG9yZSIsIlNoYXJlZEFycmF5QnVmZmVyQ2FuY2VsbGF0aW9uVG9rZW4iLCJsb2FkIiwiU2hhcmVkQXJyYXlCdWZmZXJDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSIsImNyZWF0ZVByb3RvY29sQ29ubmVjdGlvbiIsImJyb3dzZXJfMSIsIkxTUEVycm9yQ29kZXMiLCJsc3BSZXNlcnZlZEVycm9yUmFuZ2VTdGFydCIsIlJlcXVlc3RGYWlsZWQiLCJTZXJ2ZXJDYW5jZWxsZWQiLCJDb250ZW50TW9kaWZpZWQiLCJSZXF1ZXN0Q2FuY2VsbGVkIiwibHNwUmVzZXJ2ZWRFcnJvclJhbmdlRW5kIiwidnNjb2RlX2pzb25ycGNfMSIsIlByb3RvY29sTm90aWZpY2F0aW9uVHlwZSIsIlByb3RvY29sTm90aWZpY2F0aW9uVHlwZTAiLCJQcm90b2NvbFJlcXVlc3RUeXBlIiwiUHJvdG9jb2xSZXF1ZXN0VHlwZTAiLCJSZWdpc3RyYXRpb25UeXBlIiwiTWVzc2FnZURpcmVjdGlvbiIsIkNhbGxIaWVyYXJjaHlPdXRnb2luZ0NhbGxzUmVxdWVzdCIsIkNhbGxIaWVyYXJjaHlJbmNvbWluZ0NhbGxzUmVxdWVzdCIsIkNhbGxIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCIsIm1lc3NhZ2VEaXJlY3Rpb24iLCJjbGllbnRUb1NlcnZlciIsIkNvbG9yUHJlc2VudGF0aW9uUmVxdWVzdCIsIkRvY3VtZW50Q29sb3JSZXF1ZXN0IiwiQ29uZmlndXJhdGlvblJlcXVlc3QiLCJzZXJ2ZXJUb0NsaWVudCIsIkRlY2xhcmF0aW9uUmVxdWVzdCIsIl9fbm9EeW5hbWljSW1wb3J0IiwiRGlhZ25vc3RpY1JlZnJlc2hSZXF1ZXN0IiwiV29ya3NwYWNlRGlhZ25vc3RpY1JlcXVlc3QiLCJEb2N1bWVudERpYWdub3N0aWNSZXF1ZXN0IiwiRG9jdW1lbnREaWFnbm9zdGljUmVwb3J0S2luZCIsIkRpYWdub3N0aWNTZXJ2ZXJDYW5jZWxsYXRpb25EYXRhIiwicmV0cmlnZ2VyUmVxdWVzdCIsIkZ1bGwiLCJVbmNoYW5nZWQiLCJwYXJ0aWFsUmVzdWx0IiwiV2lsbERlbGV0ZUZpbGVzUmVxdWVzdCIsIkRpZERlbGV0ZUZpbGVzTm90aWZpY2F0aW9uIiwiRGlkUmVuYW1lRmlsZXNOb3RpZmljYXRpb24iLCJXaWxsUmVuYW1lRmlsZXNSZXF1ZXN0IiwiRGlkQ3JlYXRlRmlsZXNOb3RpZmljYXRpb24iLCJXaWxsQ3JlYXRlRmlsZXNSZXF1ZXN0IiwiRmlsZU9wZXJhdGlvblBhdHRlcm5LaW5kIiwiZm9sZGVyIiwiRm9sZGluZ1JhbmdlUmVxdWVzdCIsIkltcGxlbWVudGF0aW9uUmVxdWVzdCIsIklubGF5SGludFJlZnJlc2hSZXF1ZXN0IiwiSW5sYXlIaW50UmVzb2x2ZVJlcXVlc3QiLCJJbmxheUhpbnRSZXF1ZXN0IiwiSW5saW5lVmFsdWVSZWZyZXNoUmVxdWVzdCIsIklubGluZVZhbHVlUmVxdWVzdCIsIldvcmtzcGFjZVN5bWJvbFJlcXVlc3QiLCJDb2RlQWN0aW9uUmVzb2x2ZVJlcXVlc3QiLCJDb2RlQWN0aW9uUmVxdWVzdCIsIkRvY3VtZW50U3ltYm9sUmVxdWVzdCIsIkRvY3VtZW50SGlnaGxpZ2h0UmVxdWVzdCIsIlJlZmVyZW5jZXNSZXF1ZXN0IiwiRGVmaW5pdGlvblJlcXVlc3QiLCJTaWduYXR1cmVIZWxwUmVxdWVzdCIsIlNpZ25hdHVyZUhlbHBUcmlnZ2VyS2luZCIsIkhvdmVyUmVxdWVzdCIsIkNvbXBsZXRpb25SZXNvbHZlUmVxdWVzdCIsIkNvbXBsZXRpb25SZXF1ZXN0IiwiQ29tcGxldGlvblRyaWdnZXJLaW5kIiwiUHVibGlzaERpYWdub3N0aWNzTm90aWZpY2F0aW9uIiwiV2F0Y2hLaW5kIiwiUmVsYXRpdmVQYXR0ZXJuIiwiRmlsZUNoYW5nZVR5cGUiLCJEaWRDaGFuZ2VXYXRjaGVkRmlsZXNOb3RpZmljYXRpb24iLCJXaWxsU2F2ZVRleHREb2N1bWVudFdhaXRVbnRpbFJlcXVlc3QiLCJXaWxsU2F2ZVRleHREb2N1bWVudE5vdGlmaWNhdGlvbiIsIlRleHREb2N1bWVudFNhdmVSZWFzb24iLCJEaWRTYXZlVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uIiwiRGlkQ2xvc2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24iLCJEaWRDaGFuZ2VUZXh0RG9jdW1lbnROb3RpZmljYXRpb24iLCJUZXh0RG9jdW1lbnRDb250ZW50Q2hhbmdlRXZlbnQiLCJEaWRPcGVuVGV4dERvY3VtZW50Tm90aWZpY2F0aW9uIiwiVGV4dERvY3VtZW50U3luY0tpbmQiLCJUZWxlbWV0cnlFdmVudE5vdGlmaWNhdGlvbiIsIkxvZ01lc3NhZ2VOb3RpZmljYXRpb24iLCJTaG93TWVzc2FnZVJlcXVlc3QiLCJTaG93TWVzc2FnZU5vdGlmaWNhdGlvbiIsIk1lc3NhZ2VUeXBlIiwiRGlkQ2hhbmdlQ29uZmlndXJhdGlvbk5vdGlmaWNhdGlvbiIsIkV4aXROb3RpZmljYXRpb24iLCJTaHV0ZG93blJlcXVlc3QiLCJJbml0aWFsaXplZE5vdGlmaWNhdGlvbiIsIkluaXRpYWxpemVFcnJvckNvZGVzIiwiSW5pdGlhbGl6ZVJlcXVlc3QiLCJXb3JrRG9uZVByb2dyZXNzT3B0aW9ucyIsIlRleHREb2N1bWVudFJlZ2lzdHJhdGlvbk9wdGlvbnMiLCJTdGF0aWNSZWdpc3RyYXRpb25PcHRpb25zIiwiUG9zaXRpb25FbmNvZGluZ0tpbmQiLCJGYWlsdXJlSGFuZGxpbmdLaW5kIiwiUmVzb3VyY2VPcGVyYXRpb25LaW5kIiwiVW5yZWdpc3RyYXRpb25SZXF1ZXN0IiwiUmVnaXN0cmF0aW9uUmVxdWVzdCIsIkRvY3VtZW50U2VsZWN0b3IiLCJOb3RlYm9va0NlbGxUZXh0RG9jdW1lbnRGaWx0ZXIiLCJOb3RlYm9va0RvY3VtZW50RmlsdGVyIiwiVGV4dERvY3VtZW50RmlsdGVyIiwiVHlwZUhpZXJhcmNoeVN1YnR5cGVzUmVxdWVzdCIsIlR5cGVIaWVyYXJjaHlQcmVwYXJlUmVxdWVzdCIsIk1vbmlrZXJSZXF1ZXN0IiwiTW9uaWtlcktpbmQiLCJVbmlxdWVuZXNzTGV2ZWwiLCJMaW5rZWRFZGl0aW5nUmFuZ2VSZXF1ZXN0IiwiU2hvd0RvY3VtZW50UmVxdWVzdCIsIlNlbWFudGljVG9rZW5zUmVnaXN0cmF0aW9uVHlwZSIsIlNlbWFudGljVG9rZW5zUmVmcmVzaFJlcXVlc3QiLCJTZW1hbnRpY1Rva2Vuc1JhbmdlUmVxdWVzdCIsIlNlbWFudGljVG9rZW5zRGVsdGFSZXF1ZXN0IiwiU2VtYW50aWNUb2tlbnNSZXF1ZXN0IiwiVG9rZW5Gb3JtYXQiLCJXb3JrRG9uZVByb2dyZXNzQ2FuY2VsTm90aWZpY2F0aW9uIiwiV29ya0RvbmVQcm9ncmVzc0NyZWF0ZVJlcXVlc3QiLCJXb3JrRG9uZVByb2dyZXNzIiwiU2VsZWN0aW9uUmFuZ2VSZXF1ZXN0IiwiRGlkQ2hhbmdlV29ya3NwYWNlRm9sZGVyc05vdGlmaWNhdGlvbiIsIldvcmtzcGFjZUZvbGRlcnNSZXF1ZXN0IiwiVHlwZURlZmluaXRpb25SZXF1ZXN0IiwiQXBwbHlXb3Jrc3BhY2VFZGl0UmVxdWVzdCIsIkV4ZWN1dGVDb21tYW5kUmVxdWVzdCIsIlByZXBhcmVSZW5hbWVSZXF1ZXN0IiwiUmVuYW1lUmVxdWVzdCIsIlByZXBhcmVTdXBwb3J0RGVmYXVsdEJlaGF2aW9yIiwiRG9jdW1lbnRPblR5cGVGb3JtYXR0aW5nUmVxdWVzdCIsIkRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUmVxdWVzdCIsIkRvY3VtZW50Rm9ybWF0dGluZ1JlcXVlc3QiLCJEb2N1bWVudExpbmtSZXNvbHZlUmVxdWVzdCIsIkRvY3VtZW50TGlua1JlcXVlc3QiLCJDb2RlTGVuc1JlZnJlc2hSZXF1ZXN0IiwiQ29kZUxlbnNSZXNvbHZlUmVxdWVzdCIsIkNvZGVMZW5zUmVxdWVzdCIsIldvcmtzcGFjZVN5bWJvbFJlc29sdmVSZXF1ZXN0IiwiRGlkQ2xvc2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uIiwiRGlkU2F2ZU5vdGVib29rRG9jdW1lbnROb3RpZmljYXRpb24iLCJEaWRDaGFuZ2VOb3RlYm9va0RvY3VtZW50Tm90aWZpY2F0aW9uIiwiTm90ZWJvb2tDZWxsQXJyYXlDaGFuZ2UiLCJEaWRPcGVuTm90ZWJvb2tEb2N1bWVudE5vdGlmaWNhdGlvbiIsIk5vdGVib29rRG9jdW1lbnRTeW5jUmVnaXN0cmF0aW9uVHlwZSIsIk5vdGVib29rRG9jdW1lbnQiLCJOb3RlYm9va0NlbGwiLCJFeGVjdXRpb25TdW1tYXJ5IiwiTm90ZWJvb2tDZWxsS2luZCIsIlR5cGVIaWVyYXJjaHlTdXBlcnR5cGVzUmVxdWVzdCIsInZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xIiwicHJvdG9jb2xfaW1wbGVtZW50YXRpb25fMSIsInByb3RvY29sX3R5cGVEZWZpbml0aW9uXzEiLCJwcm90b2NvbF93b3Jrc3BhY2VGb2xkZXJfMSIsInByb3RvY29sX2NvbmZpZ3VyYXRpb25fMSIsInByb3RvY29sX2NvbG9yUHJvdmlkZXJfMSIsInByb3RvY29sX2ZvbGRpbmdSYW5nZV8xIiwicHJvdG9jb2xfZGVjbGFyYXRpb25fMSIsInByb3RvY29sX3NlbGVjdGlvblJhbmdlXzEiLCJwcm90b2NvbF9wcm9ncmVzc18xIiwicHJvdG9jb2xfY2FsbEhpZXJhcmNoeV8xIiwicHJvdG9jb2xfc2VtYW50aWNUb2tlbnNfMSIsInByb3RvY29sX3Nob3dEb2N1bWVudF8xIiwicHJvdG9jb2xfbGlua2VkRWRpdGluZ1JhbmdlXzEiLCJwcm90b2NvbF9maWxlT3BlcmF0aW9uc18xIiwicHJvdG9jb2xfbW9uaWtlcl8xIiwicHJvdG9jb2xfdHlwZUhpZXJhcmNoeV8xIiwicHJvdG9jb2xfaW5saW5lVmFsdWVfMSIsInByb3RvY29sX2lubGF5SGludF8xIiwicHJvdG9jb2xfZGlhZ25vc3RpY18xIiwicHJvdG9jb2xfbm90ZWJvb2tfMSIsImxhbmd1YWdlIiwic2NoZW1lIiwicGF0dGVybiIsIm9iamVjdExpdGVyYWwiLCJub3RlYm9va1R5cGUiLCJub3RlYm9vayIsIkNyZWF0ZSIsIlJlbmFtZSIsIkRlbGV0ZSIsIkFib3J0IiwiVHJhbnNhY3Rpb25hbCIsIlRleHRPbmx5VHJhbnNhY3Rpb25hbCIsIlVuZG8iLCJVVEY4IiwiVVRGMTYiLCJVVEYzMiIsImhhc0lkIiwiZG9jdW1lbnRTZWxlY3RvciIsIndvcmtEb25lUHJvZ3Jlc3MiLCJoYXNXb3JrRG9uZVByb2dyZXNzIiwidW5rbm93blByb3RvY29sVmVyc2lvbiIsIldhcm5pbmciLCJJbmZvIiwiTG9nIiwiSW5jcmVtZW50YWwiLCJpc0luY3JlbWVudGFsIiwicmFuZ2VMZW5ndGgiLCJpc0Z1bGwiLCJNYW51YWwiLCJBZnRlckRlbGF5IiwiRm9jdXNPdXQiLCJDcmVhdGVkIiwiQ2hhbmdlZCIsIkRlbGV0ZWQiLCJiYXNlVXJpIiwiV29ya3NwYWNlRm9sZGVyIiwiQ2hhbmdlIiwiSW52b2tlZCIsIlRyaWdnZXJDaGFyYWN0ZXIiLCJUcmlnZ2VyRm9ySW5jb21wbGV0ZUNvbXBsZXRpb25zIiwiQ29udGVudENoYW5nZSIsIklkZW50aWZpZXIiLCJwcm9qZWN0IiwiZ3JvdXAiLCJnbG9iYWwiLCIkaW1wb3J0IiwiJGV4cG9ydCIsImxvY2FsIiwiTWFya3VwIiwiQ29kZSIsImV4ZWN1dGlvbk9yZGVyIiwic3VjY2VzcyIsInVpbnRlZ2VyIiwiZXF1YWxzIiwib25lIiwiRG9jdW1lbnRVcmkiLCJtZXRhZGF0YSIsImRpZmYiLCJ0d28iLCJleGVjdXRpb25TdW1tYXJ5IiwiZXF1YWxzTWV0YWRhdGEiLCJvbmVBcnJheSIsIm90aGVyQXJyYXkiLCJvbmVLZXlzIiwib3RoZXJLZXlzIiwiY2VsbHMiLCJpbnRlZ2VyIiwidHlwZWRBcnJheSIsInJlZ2lzdHJhdGlvbk1ldGhvZCIsImRlbGV0ZUNvdW50IiwiUmVsYXRpdmUiLCJjaGVjayIsIlRleHREb2N1bWVudCIsIl9fc3ByZWFkQXJyYXkiLCJmcm9tIiwicGFjayIsIkZ1bGxUZXh0RG9jdW1lbnQiLCJjb250ZW50IiwiX3VyaSIsIl9sYW5ndWFnZUlkIiwiX3ZlcnNpb24iLCJfY29udGVudCIsIl9saW5lT2Zmc2V0cyIsIm9mZnNldEF0IiwiY2hhbmdlcyIsImNoYW5nZXNfMSIsImNoYW5nZSIsImdldFdlbGxmb3JtZWRSYW5nZSIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0Iiwic3RhcnRMaW5lIiwiZW5kTGluZSIsImxpbmVPZmZzZXRzIiwiYWRkZWRMaW5lT2Zmc2V0cyIsImNvbXB1dGVMaW5lT2Zmc2V0cyIsImdldExpbmVPZmZzZXRzIiwicG9zaXRpb25BdCIsImxvdyIsImhpZ2giLCJjaGFyYWN0ZXIiLCJtaWQiLCJsaW5lT2Zmc2V0IiwibmV4dExpbmVPZmZzZXQiLCJhcHBseUVkaXRzIiwiZWRpdHMiLCJzb3J0ZWRFZGl0cyIsIm1lcmdlU29ydCIsImdldFdlbGxmb3JtZWRFZGl0IiwibGFzdE1vZGlmaWVkT2Zmc2V0Iiwic3BhbnMiLCJzb3J0ZWRFZGl0c18xIiwibmV3VGV4dCIsImxlZnQiLCJyaWdodCIsImxlZnRJZHgiLCJyaWdodElkeCIsImlzQXRMaW5lU3RhcnQiLCJ0ZXh0T2Zmc2V0IiwiY2giLCJ0ZXh0RWRpdCIsIkFubm90YXRlZFRleHRFZGl0IiwiQ2hhbmdlQW5ub3RhdGlvbiIsIkNoYW5nZUFubm90YXRpb25JZGVudGlmaWVyIiwiQ29kZUFjdGlvbiIsIkNvZGVBY3Rpb25Db250ZXh0IiwiQ29kZUFjdGlvbktpbmQiLCJDb2RlQWN0aW9uVHJpZ2dlcktpbmQiLCJDb2RlRGVzY3JpcHRpb24iLCJDb2RlTGVucyIsIkNvbG9yIiwiQ29sb3JJbmZvcm1hdGlvbiIsIkNvbG9yUHJlc2VudGF0aW9uIiwiQ29tbWFuZCIsIkNvbXBsZXRpb25JdGVtIiwiQ29tcGxldGlvbkl0ZW1LaW5kIiwiQ29tcGxldGlvbkl0ZW1MYWJlbERldGFpbHMiLCJDb21wbGV0aW9uSXRlbVRhZyIsIkNvbXBsZXRpb25MaXN0IiwiQ3JlYXRlRmlsZSIsIkRlbGV0ZUZpbGUiLCJEaWFnbm9zdGljIiwiRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiIsIkRpYWdub3N0aWNTZXZlcml0eSIsIkRvY3VtZW50SGlnaGxpZ2h0IiwiRG9jdW1lbnRIaWdobGlnaHRLaW5kIiwiRG9jdW1lbnRMaW5rIiwiRG9jdW1lbnRTeW1ib2wiLCJFT0wiLCJGb2xkaW5nUmFuZ2UiLCJGb2xkaW5nUmFuZ2VLaW5kIiwiRm9ybWF0dGluZ09wdGlvbnMiLCJIb3ZlciIsIklubGF5SGludCIsIklubGF5SGludEtpbmQiLCJJbmxheUhpbnRMYWJlbFBhcnQiLCJJbmxpbmVWYWx1ZUNvbnRleHQiLCJJbmxpbmVWYWx1ZUV2YWx1YXRhYmxlRXhwcmVzc2lvbiIsIklubGluZVZhbHVlVGV4dCIsIklubGluZVZhbHVlVmFyaWFibGVMb29rdXAiLCJJbnNlcnRSZXBsYWNlRWRpdCIsIkluc2VydFRleHRGb3JtYXQiLCJJbnNlcnRUZXh0TW9kZSIsIkxvY2F0aW9uIiwiTG9jYXRpb25MaW5rIiwiTWFya2VkU3RyaW5nIiwiTWFya3VwQ29udGVudCIsIk1hcmt1cEtpbmQiLCJPcHRpb25hbFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIiLCJQYXJhbWV0ZXJJbmZvcm1hdGlvbiIsIlBvc2l0aW9uIiwiUmFuZ2UiLCJSZW5hbWVGaWxlIiwiU2VsZWN0aW9uUmFuZ2UiLCJTZW1hbnRpY1Rva2VuTW9kaWZpZXJzIiwiU2VtYW50aWNUb2tlblR5cGVzIiwiU2VtYW50aWNUb2tlbnMiLCJTaWduYXR1cmVJbmZvcm1hdGlvbiIsIlN5bWJvbEluZm9ybWF0aW9uIiwiU3ltYm9sS2luZCIsIlN5bWJvbFRhZyIsIlRleHREb2N1bWVudEVkaXQiLCJUZXh0RG9jdW1lbnRJZGVudGlmaWVyIiwiVGV4dERvY3VtZW50SXRlbSIsIlRleHRFZGl0IiwiVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciIsIldvcmtzcGFjZUNoYW5nZSIsIldvcmtzcGFjZUVkaXQiLCJXb3Jrc3BhY2VTeW1ib2wiLCJNSU5fVkFMVUUiLCJNQVhfVkFMVUUiLCJ0aHJlZSIsImZvdXIiLCJ0YXJnZXRVcmkiLCJ0YXJnZXRSYW5nZSIsInRhcmdldFNlbGVjdGlvblJhbmdlIiwib3JpZ2luU2VsZWN0aW9uUmFuZ2UiLCJhbHBoYSIsIm51bWJlclJhbmdlIiwiY29sb3IiLCJhZGRpdGlvbmFsVGV4dEVkaXRzIiwiQ29tbWVudCIsIkltcG9ydHMiLCJSZWdpb24iLCJzdGFydENoYXJhY3RlciIsImVuZENoYXJhY3RlciIsImNvbGxhcHNlZFRleHQiLCJkZWZpbmVkIiwibG9jYXRpb24iLCJJbmZvcm1hdGlvbiIsIkhpbnQiLCJocmVmIiwic2V2ZXJpdHkiLCJjb2RlRGVzY3JpcHRpb24iLCJpbnNlcnQiLCJkZWwiLCJuZWVkc0NvbmZpcm1hdGlvbiIsImRlc2NyaXB0aW9uIiwiYW5ub3RhdGlvbiIsImFubm90YXRpb25JZCIsIm92ZXJ3cml0ZSIsImlnbm9yZUlmRXhpc3RzIiwib2xkVXJpIiwibmV3VXJpIiwicmVjdXJzaXZlIiwiaWdub3JlSWZOb3RFeGlzdHMiLCJUZXh0RWRpdENoYW5nZUltcGwiLCJjaGFuZ2VBbm5vdGF0aW9ucyIsImVkaXQiLCJhc3NlcnRDaGFuZ2VBbm5vdGF0aW9ucyIsIm1hbmFnZSIsIkNoYW5nZUFubm90YXRpb25zIiwiYW5ub3RhdGlvbnMiLCJfYW5ub3RhdGlvbnMiLCJfY291bnRlciIsImlkT3JBbm5vdGF0aW9uIiwibmV4dElkIiwiX3RleHRFZGl0Q2hhbmdlcyIsIl93b3Jrc3BhY2VFZGl0IiwiX2NoYW5nZUFubm90YXRpb25zIiwidGV4dEVkaXRDaGFuZ2UiLCJpbml0RG9jdW1lbnRDaGFuZ2VzIiwiZ2V0VGV4dEVkaXRDaGFuZ2UiLCJ0ZXh0RG9jdW1lbnRFZGl0IiwiaW5pdENoYW5nZXMiLCJjcmVhdGVGaWxlIiwib3B0aW9uc09yQW5ub3RhdGlvbiIsIm9wZXJhdGlvbiIsInJlbmFtZUZpbGUiLCJkZWxldGVGaWxlIiwiUGxhaW5UZXh0IiwiTWFya2Rvd24iLCJNZXRob2QiLCJGaWVsZCIsIlZhcmlhYmxlIiwiSW50ZXJmYWNlIiwiTW9kdWxlIiwiUHJvcGVydHkiLCJVbml0IiwiVmFsdWUiLCJFbnVtIiwiS2V5d29yZCIsIlNuaXBwZXQiLCJGaWxlIiwiUmVmZXJlbmNlIiwiRm9sZGVyIiwiRW51bU1lbWJlciIsIkNvbnN0YW50IiwiU3RydWN0IiwiT3BlcmF0b3IiLCJUeXBlUGFyYW1ldGVyIiwiYXNJcyIsImFkanVzdEluZGVudGF0aW9uIiwiZGV0YWlsIiwiaXRlbXMiLCJpc0luY29tcGxldGUiLCJmcm9tUGxhaW5UZXh0IiwicGxhaW5UZXh0IiwiY29udGVudHMiLCJkb2N1bWVudGF0aW9uIiwicGFyYW1ldGVycyIsIlJlYWQiLCJXcml0ZSIsIk5hbWVzcGFjZSIsIlBhY2thZ2UiLCJLZXkiLCJOdWxsIiwiY29udGFpbmVyTmFtZSIsInNlbGVjdGlvblJhbmdlIiwiY2hpbGRyZW4iLCJ0YWdzIiwiUXVpY2tGaXgiLCJSZWZhY3RvciIsIlJlZmFjdG9yRXh0cmFjdCIsIlJlZmFjdG9ySW5saW5lIiwiUmVmYWN0b3JSZXdyaXRlIiwiU291cmNlIiwiU291cmNlT3JnYW5pemVJbXBvcnRzIiwiU291cmNlRml4QWxsIiwiQXV0b21hdGljIiwiZGlhZ25vc3RpY3MiLCJvbmx5IiwidHJpZ2dlcktpbmQiLCJraW5kT3JDb21tYW5kT3JFZGl0IiwiY2hlY2tLaW5kIiwiaXNQcmVmZXJyZWQiLCJ0YWJTaXplIiwiaW5zZXJ0U3BhY2VzIiwicGFyZW50IiwicmVzdWx0SWQiLCJ2YXJpYWJsZU5hbWUiLCJjYXNlU2Vuc2l0aXZlTG9va3VwIiwiZnJhbWVJZCIsInN0b3BwZWRMb2NhdGlvbiIsIlR5cGUiLCJQYXJhbWV0ZXIiLCJ0b29sdGlwIiwidGV4dEVkaXRzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJsaW5lQ291bnQiLCJpc0xpbmVTdGFydCIsImF2YWlsYWJsZVR5cGVkQXJyYXlzIiwiZ09QRCIsImdsb2JhbFRoaXMiLCJ0eXBlZEFycmF5cyIsIiRzbGljZSIsImNhY2hlIiwicHJvdG8iLCJzdXBlclByb3RvIiwidHJ5VHlwZWRBcnJheXMiLCJ0cnlBbGxUeXBlZEFycmF5cyIsImZvdW5kIiwiZ2V0dGVyIiwidHJ5U2xpY2VzIiwidHJ5QWxsU2xpY2VzIiwidGFnIiwicG9zc2libGVOYW1lcyIsIm91dCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiZGVmaW5pdGlvbiIsIlBocFNlcnZpY2UiLCJiYXNlX3NlcnZpY2UiLCJwaHAiLCJtYWluIiwidXRpbHMiLCJBY2VSYW5nZSIsImdldENvbnN0cnVjdG9yIiwiZWRpdG9yIiwiX2luc3RhbmNlIiwiZ2V0U2VsZWN0aW9uUmFuZ2UiLCJjb21tb25fY29udmVydGVyc19Db21tb25Db252ZXJ0ZXIiLCJDb21tb25Db252ZXJ0ZXIiLCJub3JtYWxpemVSYW5nZXMiLCJjb21wbGV0aW9ucyIsImVsIiwidG9SYW5nZSIsImNsZWFuSHRtbCIsImh0bWwiLCJmcm9tUG9pbnRzIiwiY29udmVydEtpbmQiLCJleGNsdWRlQnlFcnJvck1lc3NhZ2UiLCJmaWVsZE5hbWUiLCJmcm9tUmFuZ2UiLCJyYW5nZUZyb21Qb3NpdGlvbnMiLCJmcm9tUG9pbnQiLCJwb2ludCIsInRvUG9pbnQiLCJ0b0Fubm90YXRpb25zIiwiX2RpYWdub3N0aWNzIiwiZnJvbUFubm90YXRpb25zIiwidG9Db21wbGV0aW9uIiwiX2l0ZW1fdGV4dEVkaXQiLCJfaXRlbV9jb21tYW5kIiwiaXRlbUtpbmQiLCJfaXRlbV90ZXh0RWRpdF9uZXdUZXh0IiwiX3JlZiIsImluc2VydFRleHQiLCJmaWx0ZXJUZXh0IiwiZ2V0VGV4dEVkaXRSYW5nZSIsImNhcHRpb24iLCJzY29yZSIsImluc2VydFRleHRGb3JtYXQiLCJ0b0NvbXBsZXRpb25zIiwiY29tYmluZWRDb21wbGV0aW9ucyIsImFsbENvbXBsZXRpb25zIiwic2VydmljZSIsImZsYXQiLCJ0b1Jlc29sdmVkQ29tcGxldGlvbiIsImZyb21NYXJrdXBDb250ZW50IiwidG9Db21wbGV0aW9uSXRlbSIsIl9jb21wbGV0aW9uX2NhcHRpb24iLCJfY29tcGxldGlvbl9zbmlwcGV0IiwiX2NvbXBsZXRpb25fc25pcHBldDEiLCJmaWx0ZXJMZW5ndGgiLCJtZXJnZWRSYW5nZXMiLCJ0b1Rvb2x0aXAiLCJfaG92ZXJfZmluZCIsImxzcFJhbmdlIiwiZmluZCIsIl9lbCIsImZyb21TaWduYXR1cmVIZWxwIiwiX2VsMSIsInNpZ25hdHVyZUluZGV4IiwiYWN0aXZlU2lnbmF0dXJlIiwic2lnbmF0dXJlcyIsImFjdGl2ZVBhcmFtIiwiYWN0aXZlUGFyYW1ldGVyIiwiZnJvbUFjZURlbHRhIiwiZW9sIiwibGluZXMiLCJhY3Rpb24iLCJmaWx0ZXJEaWFnbm9zdGljcyIsImZpbHRlckVycm9ycyIsImZyb21Eb2N1bWVudEhpZ2hsaWdodHMiLCJkb2N1bWVudEhpZ2hsaWdodHMiLCJjbGFzc05hbWUiLCJ0b01hcmtlckdyb3VwSXRlbSIsInRvb2x0aXBUZXh0IiwibWFya2VyR3JvdXBJdGVtIiwicGhwX3NlcnZpY2VfZGVmaW5lX3Byb3BlcnR5IiwiZXJyb3JzIiwiZGlhZ25vc3RpY1Byb3ZpZGVyIiwiaW50ZXJGaWxlRGVwZW5kZW5jaWVzIiwid29ya3NwYWNlRGlhZ25vc3RpY3MiXSwic291cmNlUm9vdCI6IiJ9