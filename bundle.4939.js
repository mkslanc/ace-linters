"use strict";
(self["webpackChunkace_linters_root"] = self["webpackChunkace_linters_root"] || []).push([[4939],{

/***/ 14939:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var oop = __webpack_require__(2645);
var HtmlMode = (__webpack_require__(32234).Mode);
var SmartyHighlightRules = (__webpack_require__(37056)/* .SmartyHighlightRules */ .i);

var Mode = function() {
    HtmlMode.call(this);
    this.HighlightRules = SmartyHighlightRules;
};

oop.inherits(Mode, HtmlMode);

(function() {
    
    this.$id = "ace/mode/smarty";
}).call(Mode.prototype);

exports.Mode = Mode;


/***/ }),

/***/ 37056:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* This file was autogenerated from https://raw.github.com/amitsnyderman/sublime-smarty/master/Syntaxes/Smarty.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/



var oop = __webpack_require__(2645);
var HtmlHighlightRules = (__webpack_require__(10413).HtmlHighlightRules);

var SmartyHighlightRules = function() {
    HtmlHighlightRules.call(this);
    var smartyRules = { start: 
       [ { include: '#comments' },
         { include: '#blocks' } ],
      '#blocks': 
       [ { token: 'punctuation.section.embedded.begin.smarty',
           regex: '\\{%?',
           push: 
            [ { token: 'punctuation.section.embedded.end.smarty',
                regex: '%?\\}',
                next: 'pop' },
              { include: '#strings' },
              { include: '#variables' },
              { include: '#lang' },
              { defaultToken: 'source.smarty' } ] } ],
      '#comments': 
       [ { token: 
            [ 'punctuation.definition.comment.smarty',
              'comment.block.smarty' ],
           regex: '(\\{%?)(\\*)',
           push: 
            [ { token: 'comment.block.smarty', regex: '\\*%?\\}', next: 'pop' },
              { defaultToken: 'comment.block.smarty' } ] } ],
      '#lang': 
       [ { token: 'keyword.operator.smarty',
           regex: '(?:!=|!|<=|>=|<|>|===|==|%|&&|\\|\\|)|\\b(?:and|or|eq|neq|ne|gte|gt|ge|lte|lt|le|not|mod)\\b' },
         { token: 'constant.language.smarty',
           regex: '\\b(?:TRUE|FALSE|true|false)\\b' },
         { token: 'keyword.control.smarty',
           regex: '\\b(?:if|else|elseif|foreach|foreachelse|section|switch|case|break|default)\\b' },
         { token: 'variable.parameter.smarty', regex: '\\b[a-zA-Z]+=' },
         { token: 'support.function.built-in.smarty',
           regex: '\\b(?:capture|config_load|counter|cycle|debug|eval|fetch|include_php|include|insert|literal|math|strip|rdelim|ldelim|assign|constant|block|html_[a-z_]*)\\b' },
         { token: 'support.function.variable-modifier.smarty',
           regex: '\\|(?:capitalize|cat|count_characters|count_paragraphs|count_sentences|count_words|date_format|default|escape|indent|lower|nl2br|regex_replace|replace|spacify|string_format|strip_tags|strip|truncate|upper|wordwrap)' } ],
      '#strings': 
       [ { token: 'punctuation.definition.string.begin.smarty',
           regex: '\'',
           push: 
            [ { token: 'punctuation.definition.string.end.smarty',
                regex: '\'',
                next: 'pop' },
              { token: 'constant.character.escape.smarty', regex: '\\\\.' },
              { defaultToken: 'string.quoted.single.smarty' } ] },
         { token: 'punctuation.definition.string.begin.smarty',
           regex: '"',
           push: 
            [ { token: 'punctuation.definition.string.end.smarty',
                regex: '"',
                next: 'pop' },
              { token: 'constant.character.escape.smarty', regex: '\\\\.' },
              { defaultToken: 'string.quoted.double.smarty' } ] } ],
      '#variables': 
       [ { token: 
            [ 'punctuation.definition.variable.smarty',
              'variable.other.global.smarty' ],
           regex: '\\b(\\$)(Smarty\\.)' },
         { token: 
            [ 'punctuation.definition.variable.smarty',
              'variable.other.smarty' ],
           regex: '(\\$)([a-zA-Z_][a-zA-Z0-9_]*)\\b' },
         { token: [ 'keyword.operator.smarty', 'variable.other.property.smarty' ],
           regex: '(->)([a-zA-Z_][a-zA-Z0-9_]*)\\b' },
         { token: 
            [ 'keyword.operator.smarty',
              'meta.function-call.object.smarty',
              'punctuation.definition.variable.smarty',
              'variable.other.smarty',
              'punctuation.definition.variable.smarty' ],
           regex: '(->)([a-zA-Z_][a-zA-Z0-9_]*)(\\()(.*?)(\\))' } ] };
    
    var smartyStart = smartyRules.start;
    
    for (var rule in this.$rules) {
        this.$rules[rule].unshift.apply(this.$rules[rule], smartyStart);
    }
    
    Object.keys(smartyRules).forEach(function(x) {
        if (!this.$rules[x])
            this.$rules[x] = smartyRules[x];
    }, this);
    
    this.normalizeRules();
};

SmartyHighlightRules.metaData = { fileTypes: [ 'tpl' ],
      foldingStartMarker: '\\{%?',
      foldingStopMarker: '%?\\}',
      name: 'Smarty',
      scopeName: 'text.html.smarty' };


oop.inherits(SmartyHighlightRules, HtmlHighlightRules);

exports.i = SmartyHighlightRules;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLjQ5MzkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWE7O0FBRWIsVUFBVSxtQkFBTyxDQUFDLElBQVk7QUFDOUIsZUFBZSxpQ0FBc0I7QUFDckMsMkJBQTJCLDBEQUF3RDs7QUFFbkY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxZQUFZOzs7Ozs7OztBQ2xCWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViLFVBQVUsbUJBQU8sQ0FBQyxJQUFZO0FBQzlCLHlCQUF5QiwrQ0FBb0Q7O0FBRTdFO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIsV0FBVyxzQkFBc0I7QUFDakMsV0FBVyxxQkFBcUI7QUFDaEM7QUFDQSxXQUFXO0FBQ1gsc0JBQXNCO0FBQ3RCO0FBQ0EsZ0JBQWdCO0FBQ2hCLDZCQUE2QjtBQUM3Qiw2QkFBNkI7QUFDN0IsZ0JBQWdCLHFCQUFxQjtBQUNyQyxnQkFBZ0IsdUJBQXVCO0FBQ3ZDLGdCQUFnQixrQkFBa0I7QUFDbEMsZ0JBQWdCLGdDQUFnQyxJQUFJO0FBQ3BEO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSxnQkFBZ0IsK0NBQStDLGdCQUFnQjtBQUMvRSxnQkFBZ0IsdUNBQXVDLElBQUk7QUFDM0Q7QUFDQSxXQUFXO0FBQ1gsa0hBQWtIO0FBQ2xILFdBQVc7QUFDWCxxREFBcUQ7QUFDckQsV0FBVztBQUNYLG9HQUFvRztBQUNwRyxXQUFXLDREQUE0RDtBQUN2RSxXQUFXO0FBQ1gsaUxBQWlMO0FBQ2pMLFdBQVc7QUFDWCw2T0FBNk87QUFDN087QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLDZCQUE2QjtBQUM3QixnQkFBZ0IsMkRBQTJEO0FBQzNFLGdCQUFnQiw4Q0FBOEMsR0FBRztBQUNqRSxXQUFXO0FBQ1g7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLDZCQUE2QjtBQUM3QixnQkFBZ0IsMkRBQTJEO0FBQzNFLGdCQUFnQiw4Q0FBOEMsSUFBSTtBQUNsRTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLFdBQVc7QUFDWDtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3RELFdBQVc7QUFDWCxxREFBcUQ7QUFDckQsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0U7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLGtDQUFrQztBQUNsQyw4QkFBOEI7QUFDOUIsK0JBQStCO0FBQy9CO0FBQ0E7OztBQUdBOztBQUVBLFNBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWNlLWxpbnRlcnMtcm9vdC8uL25vZGVfbW9kdWxlcy9hY2UtY29kZS9zcmMvbW9kZS9zbWFydHkuanMiLCJ3ZWJwYWNrOi8vYWNlLWxpbnRlcnMtcm9vdC8uL25vZGVfbW9kdWxlcy9hY2UtY29kZS9zcmMvbW9kZS9zbWFydHlfaGlnaGxpZ2h0X3J1bGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgb29wID0gcmVxdWlyZShcIi4uL2xpYi9vb3BcIik7XG52YXIgSHRtbE1vZGUgPSByZXF1aXJlKFwiLi9odG1sXCIpLk1vZGU7XG52YXIgU21hcnR5SGlnaGxpZ2h0UnVsZXMgPSByZXF1aXJlKFwiLi9zbWFydHlfaGlnaGxpZ2h0X3J1bGVzXCIpLlNtYXJ0eUhpZ2hsaWdodFJ1bGVzO1xuXG52YXIgTW9kZSA9IGZ1bmN0aW9uKCkge1xuICAgIEh0bWxNb2RlLmNhbGwodGhpcyk7XG4gICAgdGhpcy5IaWdobGlnaHRSdWxlcyA9IFNtYXJ0eUhpZ2hsaWdodFJ1bGVzO1xufTtcblxub29wLmluaGVyaXRzKE1vZGUsIEh0bWxNb2RlKTtcblxuKGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIHRoaXMuJGlkID0gXCJhY2UvbW9kZS9zbWFydHlcIjtcbn0pLmNhbGwoTW9kZS5wcm90b3R5cGUpO1xuXG5leHBvcnRzLk1vZGUgPSBNb2RlO1xuIiwiLyogVGhpcyBmaWxlIHdhcyBhdXRvZ2VuZXJhdGVkIGZyb20gaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9hbWl0c255ZGVybWFuL3N1YmxpbWUtc21hcnR5L21hc3Rlci9TeW50YXhlcy9TbWFydHkudG1MYW5ndWFnZSAodXVpZDogKSAqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIElUIE1JR0hUIE5PVCBCRSBQRVJGRUNUIC4uLkJ1dCBpdCdzIGEgZ29vZCBzdGFydCBmcm9tIGFuIGV4aXN0aW5nICoudG1sYW5ndWFnZSBmaWxlLiAqXG4gKiBmaWxlVHlwZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgb29wID0gcmVxdWlyZShcIi4uL2xpYi9vb3BcIik7XG52YXIgSHRtbEhpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZShcIi4vaHRtbF9oaWdobGlnaHRfcnVsZXNcIikuSHRtbEhpZ2hsaWdodFJ1bGVzO1xuXG52YXIgU21hcnR5SGlnaGxpZ2h0UnVsZXMgPSBmdW5jdGlvbigpIHtcbiAgICBIdG1sSGlnaGxpZ2h0UnVsZXMuY2FsbCh0aGlzKTtcbiAgICB2YXIgc21hcnR5UnVsZXMgPSB7IHN0YXJ0OiBcbiAgICAgICBbIHsgaW5jbHVkZTogJyNjb21tZW50cycgfSxcbiAgICAgICAgIHsgaW5jbHVkZTogJyNibG9ja3MnIH0gXSxcbiAgICAgICcjYmxvY2tzJzogXG4gICAgICAgWyB7IHRva2VuOiAncHVuY3R1YXRpb24uc2VjdGlvbi5lbWJlZGRlZC5iZWdpbi5zbWFydHknLFxuICAgICAgICAgICByZWdleDogJ1xcXFx7JT8nLFxuICAgICAgICAgICBwdXNoOiBcbiAgICAgICAgICAgIFsgeyB0b2tlbjogJ3B1bmN0dWF0aW9uLnNlY3Rpb24uZW1iZWRkZWQuZW5kLnNtYXJ0eScsXG4gICAgICAgICAgICAgICAgcmVnZXg6ICclP1xcXFx9JyxcbiAgICAgICAgICAgICAgICBuZXh0OiAncG9wJyB9LFxuICAgICAgICAgICAgICB7IGluY2x1ZGU6ICcjc3RyaW5ncycgfSxcbiAgICAgICAgICAgICAgeyBpbmNsdWRlOiAnI3ZhcmlhYmxlcycgfSxcbiAgICAgICAgICAgICAgeyBpbmNsdWRlOiAnI2xhbmcnIH0sXG4gICAgICAgICAgICAgIHsgZGVmYXVsdFRva2VuOiAnc291cmNlLnNtYXJ0eScgfSBdIH0gXSxcbiAgICAgICcjY29tbWVudHMnOiBcbiAgICAgICBbIHsgdG9rZW46IFxuICAgICAgICAgICAgWyAncHVuY3R1YXRpb24uZGVmaW5pdGlvbi5jb21tZW50LnNtYXJ0eScsXG4gICAgICAgICAgICAgICdjb21tZW50LmJsb2NrLnNtYXJ0eScgXSxcbiAgICAgICAgICAgcmVnZXg6ICcoXFxcXHslPykoXFxcXCopJyxcbiAgICAgICAgICAgcHVzaDogXG4gICAgICAgICAgICBbIHsgdG9rZW46ICdjb21tZW50LmJsb2NrLnNtYXJ0eScsIHJlZ2V4OiAnXFxcXColP1xcXFx9JywgbmV4dDogJ3BvcCcgfSxcbiAgICAgICAgICAgICAgeyBkZWZhdWx0VG9rZW46ICdjb21tZW50LmJsb2NrLnNtYXJ0eScgfSBdIH0gXSxcbiAgICAgICcjbGFuZyc6IFxuICAgICAgIFsgeyB0b2tlbjogJ2tleXdvcmQub3BlcmF0b3Iuc21hcnR5JyxcbiAgICAgICAgICAgcmVnZXg6ICcoPzohPXwhfDw9fD49fDx8Pnw9PT18PT18JXwmJnxcXFxcfFxcXFx8KXxcXFxcYig/OmFuZHxvcnxlcXxuZXF8bmV8Z3RlfGd0fGdlfGx0ZXxsdHxsZXxub3R8bW9kKVxcXFxiJyB9LFxuICAgICAgICAgeyB0b2tlbjogJ2NvbnN0YW50Lmxhbmd1YWdlLnNtYXJ0eScsXG4gICAgICAgICAgIHJlZ2V4OiAnXFxcXGIoPzpUUlVFfEZBTFNFfHRydWV8ZmFsc2UpXFxcXGInIH0sXG4gICAgICAgICB7IHRva2VuOiAna2V5d29yZC5jb250cm9sLnNtYXJ0eScsXG4gICAgICAgICAgIHJlZ2V4OiAnXFxcXGIoPzppZnxlbHNlfGVsc2VpZnxmb3JlYWNofGZvcmVhY2hlbHNlfHNlY3Rpb258c3dpdGNofGNhc2V8YnJlYWt8ZGVmYXVsdClcXFxcYicgfSxcbiAgICAgICAgIHsgdG9rZW46ICd2YXJpYWJsZS5wYXJhbWV0ZXIuc21hcnR5JywgcmVnZXg6ICdcXFxcYlthLXpBLVpdKz0nIH0sXG4gICAgICAgICB7IHRva2VuOiAnc3VwcG9ydC5mdW5jdGlvbi5idWlsdC1pbi5zbWFydHknLFxuICAgICAgICAgICByZWdleDogJ1xcXFxiKD86Y2FwdHVyZXxjb25maWdfbG9hZHxjb3VudGVyfGN5Y2xlfGRlYnVnfGV2YWx8ZmV0Y2h8aW5jbHVkZV9waHB8aW5jbHVkZXxpbnNlcnR8bGl0ZXJhbHxtYXRofHN0cmlwfHJkZWxpbXxsZGVsaW18YXNzaWdufGNvbnN0YW50fGJsb2NrfGh0bWxfW2Etel9dKilcXFxcYicgfSxcbiAgICAgICAgIHsgdG9rZW46ICdzdXBwb3J0LmZ1bmN0aW9uLnZhcmlhYmxlLW1vZGlmaWVyLnNtYXJ0eScsXG4gICAgICAgICAgIHJlZ2V4OiAnXFxcXHwoPzpjYXBpdGFsaXplfGNhdHxjb3VudF9jaGFyYWN0ZXJzfGNvdW50X3BhcmFncmFwaHN8Y291bnRfc2VudGVuY2VzfGNvdW50X3dvcmRzfGRhdGVfZm9ybWF0fGRlZmF1bHR8ZXNjYXBlfGluZGVudHxsb3dlcnxubDJicnxyZWdleF9yZXBsYWNlfHJlcGxhY2V8c3BhY2lmeXxzdHJpbmdfZm9ybWF0fHN0cmlwX3RhZ3N8c3RyaXB8dHJ1bmNhdGV8dXBwZXJ8d29yZHdyYXApJyB9IF0sXG4gICAgICAnI3N0cmluZ3MnOiBcbiAgICAgICBbIHsgdG9rZW46ICdwdW5jdHVhdGlvbi5kZWZpbml0aW9uLnN0cmluZy5iZWdpbi5zbWFydHknLFxuICAgICAgICAgICByZWdleDogJ1xcJycsXG4gICAgICAgICAgIHB1c2g6IFxuICAgICAgICAgICAgWyB7IHRva2VuOiAncHVuY3R1YXRpb24uZGVmaW5pdGlvbi5zdHJpbmcuZW5kLnNtYXJ0eScsXG4gICAgICAgICAgICAgICAgcmVnZXg6ICdcXCcnLFxuICAgICAgICAgICAgICAgIG5leHQ6ICdwb3AnIH0sXG4gICAgICAgICAgICAgIHsgdG9rZW46ICdjb25zdGFudC5jaGFyYWN0ZXIuZXNjYXBlLnNtYXJ0eScsIHJlZ2V4OiAnXFxcXFxcXFwuJyB9LFxuICAgICAgICAgICAgICB7IGRlZmF1bHRUb2tlbjogJ3N0cmluZy5xdW90ZWQuc2luZ2xlLnNtYXJ0eScgfSBdIH0sXG4gICAgICAgICB7IHRva2VuOiAncHVuY3R1YXRpb24uZGVmaW5pdGlvbi5zdHJpbmcuYmVnaW4uc21hcnR5JyxcbiAgICAgICAgICAgcmVnZXg6ICdcIicsXG4gICAgICAgICAgIHB1c2g6IFxuICAgICAgICAgICAgWyB7IHRva2VuOiAncHVuY3R1YXRpb24uZGVmaW5pdGlvbi5zdHJpbmcuZW5kLnNtYXJ0eScsXG4gICAgICAgICAgICAgICAgcmVnZXg6ICdcIicsXG4gICAgICAgICAgICAgICAgbmV4dDogJ3BvcCcgfSxcbiAgICAgICAgICAgICAgeyB0b2tlbjogJ2NvbnN0YW50LmNoYXJhY3Rlci5lc2NhcGUuc21hcnR5JywgcmVnZXg6ICdcXFxcXFxcXC4nIH0sXG4gICAgICAgICAgICAgIHsgZGVmYXVsdFRva2VuOiAnc3RyaW5nLnF1b3RlZC5kb3VibGUuc21hcnR5JyB9IF0gfSBdLFxuICAgICAgJyN2YXJpYWJsZXMnOiBcbiAgICAgICBbIHsgdG9rZW46IFxuICAgICAgICAgICAgWyAncHVuY3R1YXRpb24uZGVmaW5pdGlvbi52YXJpYWJsZS5zbWFydHknLFxuICAgICAgICAgICAgICAndmFyaWFibGUub3RoZXIuZ2xvYmFsLnNtYXJ0eScgXSxcbiAgICAgICAgICAgcmVnZXg6ICdcXFxcYihcXFxcJCkoU21hcnR5XFxcXC4pJyB9LFxuICAgICAgICAgeyB0b2tlbjogXG4gICAgICAgICAgICBbICdwdW5jdHVhdGlvbi5kZWZpbml0aW9uLnZhcmlhYmxlLnNtYXJ0eScsXG4gICAgICAgICAgICAgICd2YXJpYWJsZS5vdGhlci5zbWFydHknIF0sXG4gICAgICAgICAgIHJlZ2V4OiAnKFxcXFwkKShbYS16QS1aX11bYS16QS1aMC05X10qKVxcXFxiJyB9LFxuICAgICAgICAgeyB0b2tlbjogWyAna2V5d29yZC5vcGVyYXRvci5zbWFydHknLCAndmFyaWFibGUub3RoZXIucHJvcGVydHkuc21hcnR5JyBdLFxuICAgICAgICAgICByZWdleDogJygtPikoW2EtekEtWl9dW2EtekEtWjAtOV9dKilcXFxcYicgfSxcbiAgICAgICAgIHsgdG9rZW46IFxuICAgICAgICAgICAgWyAna2V5d29yZC5vcGVyYXRvci5zbWFydHknLFxuICAgICAgICAgICAgICAnbWV0YS5mdW5jdGlvbi1jYWxsLm9iamVjdC5zbWFydHknLFxuICAgICAgICAgICAgICAncHVuY3R1YXRpb24uZGVmaW5pdGlvbi52YXJpYWJsZS5zbWFydHknLFxuICAgICAgICAgICAgICAndmFyaWFibGUub3RoZXIuc21hcnR5JyxcbiAgICAgICAgICAgICAgJ3B1bmN0dWF0aW9uLmRlZmluaXRpb24udmFyaWFibGUuc21hcnR5JyBdLFxuICAgICAgICAgICByZWdleDogJygtPikoW2EtekEtWl9dW2EtekEtWjAtOV9dKikoXFxcXCgpKC4qPykoXFxcXCkpJyB9IF0gfTtcbiAgICBcbiAgICB2YXIgc21hcnR5U3RhcnQgPSBzbWFydHlSdWxlcy5zdGFydDtcbiAgICBcbiAgICBmb3IgKHZhciBydWxlIGluIHRoaXMuJHJ1bGVzKSB7XG4gICAgICAgIHRoaXMuJHJ1bGVzW3J1bGVdLnVuc2hpZnQuYXBwbHkodGhpcy4kcnVsZXNbcnVsZV0sIHNtYXJ0eVN0YXJ0KTtcbiAgICB9XG4gICAgXG4gICAgT2JqZWN0LmtleXMoc21hcnR5UnVsZXMpLmZvckVhY2goZnVuY3Rpb24oeCkge1xuICAgICAgICBpZiAoIXRoaXMuJHJ1bGVzW3hdKVxuICAgICAgICAgICAgdGhpcy4kcnVsZXNbeF0gPSBzbWFydHlSdWxlc1t4XTtcbiAgICB9LCB0aGlzKTtcbiAgICBcbiAgICB0aGlzLm5vcm1hbGl6ZVJ1bGVzKCk7XG59O1xuXG5TbWFydHlIaWdobGlnaHRSdWxlcy5tZXRhRGF0YSA9IHsgZmlsZVR5cGVzOiBbICd0cGwnIF0sXG4gICAgICBmb2xkaW5nU3RhcnRNYXJrZXI6ICdcXFxceyU/JyxcbiAgICAgIGZvbGRpbmdTdG9wTWFya2VyOiAnJT9cXFxcfScsXG4gICAgICBuYW1lOiAnU21hcnR5JyxcbiAgICAgIHNjb3BlTmFtZTogJ3RleHQuaHRtbC5zbWFydHknIH07XG5cblxub29wLmluaGVyaXRzKFNtYXJ0eUhpZ2hsaWdodFJ1bGVzLCBIdG1sSGlnaGxpZ2h0UnVsZXMpO1xuXG5leHBvcnRzLlNtYXJ0eUhpZ2hsaWdodFJ1bGVzID0gU21hcnR5SGlnaGxpZ2h0UnVsZXM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=