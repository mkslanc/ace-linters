(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 6093:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(9907);
/* provided dependency */ var console = __webpack_require__(4364);
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(1342),
    _require$codes = _require.codes,
    ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
    ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;

var AssertionError = __webpack_require__(9801);

var _require2 = __webpack_require__(6827),
    inspect = _require2.inspect;

var _require$types = (__webpack_require__(6827).types),
    isPromise = _require$types.isPromise,
    isRegExp = _require$types.isRegExp;

var objectAssign = Object.assign ? Object.assign : (__webpack_require__(3046).assign);
var objectIs = Object.is ? Object.is : __webpack_require__(5968);
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;

function lazyLoadComparison() {
  var comparison = __webpack_require__(5656);

  isDeepEqual = comparison.isDeepEqual;
  isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex


var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = (/* unused pure expression or super */ null && (["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", '\\b', '', '', "\\u000b", '\\f', '', "\\u000e", "\\u000f", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001a", "\\u001b", "\\u001c", "\\u001d", "\\u001e", "\\u001f"]));

var escapeFn = function escapeFn(str) {
  return meta[str.charCodeAt(0)];
};

var warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function innerFail(obj) {
  if (obj.message instanceof Error) throw obj.message;
  throw new AssertionError(obj);
}

function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;

  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (warned === false) {
      warned = true;
      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
    }

    if (argsLen === 2) operator = '!=';
  }

  if (message instanceof Error) throw message;
  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };

  if (message !== undefined) {
    errArgs.message = message;
  }

  var err = new AssertionError(errArgs);

  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }

  throw err;
}

assert.fail = fail; // The AssertionError is defined in internal/error.

assert.AssertionError = AssertionError;

function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;

    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message instanceof Error) {
      throw message;
    }

    var err = new AssertionError({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.


function ok() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  innerOk.apply(void 0, [ok, args.length].concat(args));
}

assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.

/* eslint-disable no-restricted-properties */

assert.equal = function equal(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.


assert.notEqual = function notEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
}; // The equivalence assertion tests a deep equality relation.


assert.deepEqual = function deepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
}; // The non-equivalence assertion tests for any deep inequality.


assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};
/* eslint-enable */


assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (!objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};

var Comparison = function Comparison(obj, keys, actual) {
  var _this = this;

  _classCallCheck(this, Comparison);

  keys.forEach(function (key) {
    if (key in obj) {
      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
        _this[key] = actual[key];
      } else {
        _this[key] = obj[key];
      }
    }
  });
};

function compareExceptionKey(actual, expected, key, message, keys, fn) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      // Create placeholder objects to create a nice output.
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);
      var err = new AssertionError({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.actual = actual;
      err.expected = expected;
      err.operator = fn.name;
      throw err;
    }

    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: fn.name,
      stackStartFn: fn
    });
  }
}

function expectedException(actual, expected, msg, fn) {
  if (typeof expected !== 'function') {
    if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.

    if (arguments.length === 2) {
      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
    } // Handle primitives properly.


    if (_typeof(actual) !== 'object' || actual === null) {
      var err = new AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.operator = fn.name;
      throw err;
    }

    var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
    // as well.

    if (expected instanceof Error) {
      keys.push('name', 'message');
    } else if (keys.length === 0) {
      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
    }

    if (isDeepEqual === undefined) lazyLoadComparison();
    keys.forEach(function (key) {
      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
        return;
      }

      compareExceptionKey(actual, expected, key, msg, keys, fn);
    });
    return true;
  } // Guard instanceof against arrow functions as they don't have a prototype.


  if (expected.prototype !== undefined && actual instanceof expected) {
    return true;
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function getActual(fn) {
  if (typeof fn !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
  }

  try {
    fn();
  } catch (e) {
    return e;
  }

  return NO_EXCEPTION_SENTINEL;
}

function checkIsPromise(obj) {
  // Accept native ES6 promises and promises that are implemented in a similar
  // way. Do not accept thenables that use a function as `obj` and that have no
  // `catch` handler.
  // TODO: thenables are checked up until they have the correct methods,
  // but according to documentation, the `then` method should receive
  // the `fulfill` and `reject` arguments as well or it may be never resolved.
  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}

function waitForActual(promiseFn) {
  return Promise.resolve().then(function () {
    var resultPromise;

    if (typeof promiseFn === 'function') {
      // Return a rejected promise if `promiseFn` throws synchronously.
      resultPromise = promiseFn(); // Fail in case no promise is returned.

      if (!checkIsPromise(resultPromise)) {
        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
      }
    } else if (checkIsPromise(promiseFn)) {
      resultPromise = promiseFn;
    } else {
      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
    }

    return Promise.resolve().then(function () {
      return resultPromise;
    }).then(function () {
      return NO_EXCEPTION_SENTINEL;
    }).catch(function (e) {
      return e;
    });
  });
}

function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
    }

    if (_typeof(actual) === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
      }
    } else if (actual === error) {
      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
    }

    message = error;
    error = undefined;
  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
  }

  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';

    if (error && error.name) {
      details += " (".concat(error.name, ")");
    }

    details += message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: "Missing expected ".concat(fnType).concat(details),
      stackStartFn: stackStartFn
    });
  }

  if (error && !expectedException(actual, error, message, stackStartFn)) {
    throw actual;
  }
}

function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL) return;

  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }

  if (!error || expectedException(actual, error)) {
    var details = message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
      stackStartFn: stackStartFn
    });
  }

  throw actual;
}

assert.throws = function throws(promiseFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
};

assert.rejects = function rejects(promiseFn) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return waitForActual(promiseFn).then(function (result) {
    return expectsError.apply(void 0, [rejects, result].concat(args));
  });
};

assert.doesNotThrow = function doesNotThrow(fn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
};

assert.doesNotReject = function doesNotReject(fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }

  return waitForActual(fn).then(function (result) {
    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
  });
};

assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';

    if (_typeof(err) === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) {
        message += err.constructor.name;
      } else {
        message += err.message;
      }
    } else {
      message += inspect(err);
    }

    var newErr = new AssertionError({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    }); // Make sure we actually have a stack trace!

    var origStack = err.stack;

    if (typeof origStack === 'string') {
      // This will remove any duplicated frames from the error frames taken
      // from within `ifError` and add the original error frames to the newly
      // created ones.
      var tmp2 = origStack.split('\n');
      tmp2.shift(); // Filter all frames existing in err.stack.

      var tmp1 = newErr.stack.split('\n');

      for (var i = 0; i < tmp2.length; i++) {
        // Find the first occurrence of the frame.
        var pos = tmp1.indexOf(tmp2[i]);

        if (pos !== -1) {
          // Only keep new frames.
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }

      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
    }

    throw newErr;
  }
}; // Expose a strict only variant of assert


function strict() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  innerOk.apply(void 0, [strict, args.length].concat(args));
}

assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

/***/ }),

/***/ 9801:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(9907);
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c


function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = __webpack_require__(6827),
    inspect = _require.inspect;

var _require2 = __webpack_require__(1342),
    ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat


function repeat(str, count) {
  count = Math.floor(count);
  if (str.length == 0 || count == 0) return '';
  var maxCount = str.length * count;
  count = Math.floor(Math.log(count) / Math.log(2));

  while (count) {
    str += str;
    count--;
  }

  str += str.substring(0, maxCount - str.length);
  return str;
}

var blue = '';
var green = '';
var red = '';
var white = '';
var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
}; // Comparing short primitives should just show === / !== instead of using the
// diff.

var kMaxShortLength = 10;

function copyError(source) {
  var keys = Object.keys(source);
  var target = Object.create(Object.getPrototypeOf(source));
  keys.forEach(function (key) {
    target[key] = source[key];
  });
  Object.defineProperty(target, 'message', {
    value: source.message
  });
  return target;
}

function inspectValue(val) {
  // The util.inspect default values could be changed. This makes sure the
  // error messages contain the necessary information nevertheless.
  return inspect(val, {
    compact: false,
    customInspect: false,
    depth: 1000,
    maxArrayLength: Infinity,
    // Assert compares only enumerable properties (with a few exceptions).
    showHidden: false,
    // Having a long line as error is better than wrapping the line for
    // comparison for now.
    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
    // have meta information about the inspected properties (i.e., know where
    // in what line the property starts and ends).
    breakLength: Infinity,
    // Assert does not detect proxies currently.
    showProxy: false,
    sorted: true,
    // Inspect getters as we also check them when comparing entries.
    getters: true
  });
}

function createErrDiff(actual, expected, operator) {
  var other = '';
  var res = '';
  var lastPos = 0;
  var end = '';
  var skipped = false;
  var actualInspected = inspectValue(actual);
  var actualLines = actualInspected.split('\n');
  var expectedLines = inspectValue(expected).split('\n');
  var i = 0;
  var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
  // for the `strictEqual` operator.

  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
    operator = 'strictEqualObject';
  } // If "actual" and "expected" fit on a single line and they are not strictly
  // equal, check further special handling.


  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
    var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
    // kMaxShortLength and if neither is an object and at least one of them is
    // not `zero`, use the strict equal comparison to visualize the output.

    if (inputLength <= kMaxShortLength) {
      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
        // -0 === +0
        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
      }
    } else if (operator !== 'strictEqualObject') {
      // If the stderr is a tty and the input length is lower than the current
      // columns per line, add a mismatch indicator below the output. If it is
      // not a tty, use a default value of 80 characters.
      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;

      if (inputLength < maxLength) {
        while (actualLines[0][i] === expectedLines[0][i]) {
          i++;
        } // Ignore the first characters.


        if (i > 2) {
          // Add position indicator for the first mismatch in case it is a
          // single line and the input length is less than the column length.
          indicator = "\n  ".concat(repeat(' ', i), "^");
          i = 0;
        }
      }
    }
  } // Remove all ending lines that match (this optimizes the output for
  // readability by reducing the number of total changed lines).


  var a = actualLines[actualLines.length - 1];
  var b = expectedLines[expectedLines.length - 1];

  while (a === b) {
    if (i++ < 2) {
      end = "\n  ".concat(a).concat(end);
    } else {
      other = a;
    }

    actualLines.pop();
    expectedLines.pop();
    if (actualLines.length === 0 || expectedLines.length === 0) break;
    a = actualLines[actualLines.length - 1];
    b = expectedLines[expectedLines.length - 1];
  }

  var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })

  if (maxLines === 0) {
    // We have to get the result again. The lines were all removed before.
    var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
    // TODO: Accept env to always show the full error.


    if (_actualLines.length > 30) {
      _actualLines[26] = "".concat(blue, "...").concat(white);

      while (_actualLines.length > 27) {
        _actualLines.pop();
      }
    }

    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
  }

  if (i > 3) {
    end = "\n".concat(blue, "...").concat(white).concat(end);
    skipped = true;
  }

  if (other !== '') {
    end = "\n  ".concat(other).concat(end);
    other = '';
  }

  var printedLines = 0;
  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");

  for (i = 0; i < maxLines; i++) {
    // Only extra expected lines exist
    var cur = i - lastPos;

    if (actualLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(expectedLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(expectedLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the expected line to the cache.

      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
      printedLines++; // Only extra actual lines exist
    } else if (expectedLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(actualLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(actualLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the actual line to the result.

      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
      printedLines++; // Lines diverge
    } else {
      var expectedLine = expectedLines[i];
      var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
      // a trailing comma. In that case it is actually identical and we should
      // mark it as such.

      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
      // add a comma at the end of the actual line. Otherwise the output could
      // look weird as in:
      //
      //   [
      //     1         // No comma at the end!
      // +   2
      //   ]
      //

      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
        divergingLines = false;
        actualLine += ',';
      }

      if (divergingLines) {
        // If the last diverging line is more than one line above and the
        // current line is at least line three, add some of the former lines and
        // also add dots to indicate skipped entries.
        if (cur > 1 && i > 2) {
          if (cur > 4) {
            res += "\n".concat(blue, "...").concat(white);
            skipped = true;
          } else if (cur > 3) {
            res += "\n  ".concat(actualLines[i - 2]);
            printedLines++;
          }

          res += "\n  ".concat(actualLines[i - 1]);
          printedLines++;
        } // Mark the current line as the last diverging one.


        lastPos = i; // Add the actual line to the result and cache the expected diverging
        // line so consecutive diverging lines show up as +++--- and not +-+-+-.

        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
        printedLines += 2; // Lines are identical
      } else {
        // Add all cached information to the result before adding other things
        // and reset the cache.
        res += other;
        other = ''; // If the last diverging line is exactly one line above or if it is the
        // very first line, add the line to the result.

        if (cur === 1 || i === 0) {
          res += "\n  ".concat(actualLine);
          printedLines++;
        }
      }
    } // Inspected object to big (Show ~20 rows max)


    if (printedLines > 20 && i < maxLines - 2) {
      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
  }

  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}

var AssertionError =
/*#__PURE__*/
function (_Error) {
  _inherits(AssertionError, _Error);

  function AssertionError(options) {
    var _this;

    _classCallCheck(this, AssertionError);

    if (_typeof(options) !== 'object' || options === null) {
      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
    }

    var message = options.message,
        operator = options.operator,
        stackStartFn = options.stackStartFn;
    var actual = options.actual,
        expected = options.expected;
    var limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;

    if (message != null) {
      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
    } else {
      if (process.stderr && process.stderr.isTTY) {
        // Reset on each call to make sure we handle dynamically set environment
        // variables correct.
        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
          blue = "\x1B[34m";
          green = "\x1B[32m";
          white = "\x1B[39m";
          red = "\x1B[31m";
        } else {
          blue = '';
          green = '';
          white = '';
          red = '';
        }
      } // Prevent the error stack from being visible by duplicating the error
      // in a very close way to the original in case both sides are actually
      // instances of Error.


      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
        actual = copyError(actual);
        expected = copyError(expected);
      }

      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
        // In case the objects are equal but the operator requires unequal, show
        // the first object and say A equals B
        var base = kReadableOperator[operator];
        var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.

        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
          base = kReadableOperator.notStrictEqualObject;
        } // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.


        if (res.length > 30) {
          res[26] = "".concat(blue, "...").concat(white);

          while (res.length > 27) {
            res.pop();
          }
        } // Only print a single input.


        if (res.length === 1) {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
        } else {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
        }
      } else {
        var _res = inspectValue(actual);

        var other = '';
        var knownOperators = kReadableOperator[operator];

        if (operator === 'notDeepEqual' || operator === 'notEqual') {
          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);

          if (_res.length > 1024) {
            _res = "".concat(_res.slice(0, 1021), "...");
          }
        } else {
          other = "".concat(inspectValue(expected));

          if (_res.length > 512) {
            _res = "".concat(_res.slice(0, 509), "...");
          }

          if (other.length > 512) {
            other = "".concat(other.slice(0, 509), "...");
          }

          if (operator === 'deepEqual' || operator === 'equal') {
            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
          } else {
            other = " ".concat(operator, " ").concat(other);
          }
        }

        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
      }
    }

    Error.stackTraceLimit = limit;
    _this.generatedMessage = !message;
    Object.defineProperty(_assertThisInitialized(_this), 'name', {
      value: 'AssertionError [ERR_ASSERTION]',
      enumerable: false,
      writable: true,
      configurable: true
    });
    _this.code = 'ERR_ASSERTION';
    _this.actual = actual;
    _this.expected = expected;
    _this.operator = operator;

    if (Error.captureStackTrace) {
      // eslint-disable-next-line no-restricted-syntax
      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
    } // Create error message including the error code in the name.


    _this.stack; // Reset the name.

    _this.name = 'AssertionError';
    return _possibleConstructorReturn(_this);
  }

  _createClass(AssertionError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: inspect.custom,
    value: function value(recurseTimes, ctx) {
      // This limits the `actual` and `expected` property default inspection to
      // the minimum depth. Otherwise those values would be too verbose compared
      // to the actual error message which contains a combined view of these two
      // input values.
      return inspect(this, _objectSpread({}, ctx, {
        customInspect: false,
        depth: 0
      }));
    }
  }]);

  return AssertionError;
}(_wrapNativeSuper(Error));

module.exports = AssertionError;

/***/ }),

/***/ 1342:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f

/* eslint node-core/documented-errors: "error" */

/* eslint node-core/alphabetize-errors: "error" */

/* eslint node-core/prefer-util-format-errors: "error" */
 // The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var codes = {}; // Lazy loaded

var assert;
var util;

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inherits(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      var _this;

      _classCallCheck(this, NodeError);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
      _this.code = code;
      return _this;
    }

    return NodeError;
  }(Base);

  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  if (assert === undefined) assert = __webpack_require__(6093);
  assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'

  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } // TODO(BridgeAR): Improve the output by showing `null` and similar.


  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
  if (util === undefined) util = __webpack_require__(6827);
  var inspected = util.inspect(value);

  if (inspected.length > 128) {
    inspected = "".concat(inspected.slice(0, 128), "...");
  }

  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
  var type;

  if (value && value.constructor && value.constructor.name) {
    type = "instance of ".concat(value.constructor.name);
  } else {
    type = "type ".concat(_typeof(value));
  }

  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);
createErrorType('ERR_MISSING_ARGS', function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (assert === undefined) assert = __webpack_require__(6093);
  assert(args.length > 0, 'At least one arg needs to be specified');
  var msg = 'The ';
  var len = args.length;
  args = args.map(function (a) {
    return "\"".concat(a, "\"");
  });

  switch (len) {
    case 1:
      msg += "".concat(args[0], " argument");
      break;

    case 2:
      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
      break;

    default:
      msg += args.slice(0, len - 1).join(', ');
      msg += ", and ".concat(args[len - 1], " arguments");
      break;
  }

  return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

/***/ }),

/***/ 5656:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var regexFlagsSupported = /a/g.flags !== undefined;

var arrayFromSet = function arrayFromSet(set) {
  var array = [];
  set.forEach(function (value) {
    return array.push(value);
  });
  return array;
};

var arrayFromMap = function arrayFromMap(map) {
  var array = [];
  map.forEach(function (value, key) {
    return array.push([key, value]);
  });
  return array;
};

var objectIs = Object.is ? Object.is : __webpack_require__(5968);
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
  return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__(7838);

function uncurryThis(f) {
  return f.call.bind(f);
}

var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);

var _require$types = (__webpack_require__(6827).types),
    isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
    isArrayBufferView = _require$types.isArrayBufferView,
    isDate = _require$types.isDate,
    isMap = _require$types.isMap,
    isRegExp = _require$types.isRegExp,
    isSet = _require$types.isSet,
    isNativeError = _require$types.isNativeError,
    isBoxedPrimitive = _require$types.isBoxedPrimitive,
    isNumberObject = _require$types.isNumberObject,
    isStringObject = _require$types.isStringObject,
    isBooleanObject = _require$types.isBooleanObject,
    isBigIntObject = _require$types.isBigIntObject,
    isSymbolObject = _require$types.isSymbolObject,
    isFloat32Array = _require$types.isFloat32Array,
    isFloat64Array = _require$types.isFloat64Array;

function isNonIndex(key) {
  if (key.length === 0 || key.length > 10) return true;

  for (var i = 0; i < key.length; i++) {
    var code = key.charCodeAt(i);
    if (code < 48 || code > 57) return true;
  } // The maximum size for an array is 2 ** 32 -1.


  return key.length === 10 && key >= Math.pow(2, 32);
}

function getOwnNonIndexProperties(value) {
  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */


function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}

var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3; // Check if they have the same source and flags

function areSimilarRegExps(a, b) {
  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}

function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset]) {
      return false;
    }
  }

  return true;
}

function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}

function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}

function isEqualBoxedPrimitive(val1, val2) {
  if (isNumberObject(val1)) {
    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
  }

  if (isStringObject(val1)) {
    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
  }

  if (isBooleanObject(val1)) {
    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
  }

  if (isBigIntObject(val1)) {
    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
  }

  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
} // Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.


function innerDeepEqual(val1, val2, strict, memos) {
  // All identical values are equivalent, as determined by ===.
  if (val1 === val2) {
    if (val1 !== 0) return true;
    return strict ? objectIs(val1, val2) : true;
  } // Check more closely if val1 and val2 are equal.


  if (strict) {
    if (_typeof(val1) !== 'object') {
      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
    }

    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
      return false;
    }

    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
      return false;
    }
  } else {
    if (val1 === null || _typeof(val1) !== 'object') {
      if (val2 === null || _typeof(val2) !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }

      return false;
    }

    if (val2 === null || _typeof(val2) !== 'object') {
      return false;
    }
  }

  var val1Tag = objectToString(val1);
  var val2Tag = objectToString(val2);

  if (val1Tag !== val2Tag) {
    return false;
  }

  if (Array.isArray(val1)) {
    // Check for sparse arrays and general fast path
    if (val1.length !== val2.length) {
      return false;
    }

    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (keys1.length !== keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
  // wan't to early return out of the rest of the checks. However we can check
  // if the second value is one of these values and the first isn't.


  if (val1Tag === '[object Object]') {
    // return keyCheck(val1, val2, strict, memos, kNoIterator);
    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
      return false;
    }
  }

  if (isDate(val1)) {
    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
      return false;
    }
  } else if (isRegExp(val1)) {
    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
      return false;
    }
  } else if (isNativeError(val1) || val1 instanceof Error) {
    // Do not compare the stack as it might differ even though the error itself
    // is otherwise identical.
    if (val1.message !== val2.message || val1.name !== val2.name) {
      return false;
    }
  } else if (isArrayBufferView(val1)) {
    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2)) {
        return false;
      }
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    } // Buffer.compare returns true, so val1.length === val2.length. If they both
    // only contain numeric keys, we don't need to exam further than checking
    // the symbols.


    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);

    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (_keys.length !== _keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
  } else if (isSet(val1)) {
    if (!isSet(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (isMap(val1)) {
    if (!isMap(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2)) {
      return false;
    }
  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }

  return keyCheck(val1, val2, strict, memos, kNoIterator);
}

function getEnumerables(val, keys) {
  return keys.filter(function (k) {
    return propertyIsEnumerable(val, k);
  });
}

function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  // For all remaining Object pairs, including Array, objects and Maps,
  // equivalence is determined by having:
  // a) The same number of owned enumerable properties
  // b) The same set of keys/indexes (although not necessarily the same order)
  // c) Equivalent values for every corresponding key/index
  // d) For Sets and Maps, equal contents
  // Note: this accounts for both named and indexed properties on Arrays.
  if (arguments.length === 5) {
    aKeys = Object.keys(val1);
    var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.

    if (aKeys.length !== bKeys.length) {
      return false;
    }
  } // Cheap key test


  var i = 0;

  for (; i < aKeys.length; i++) {
    if (!hasOwnProperty(val2, aKeys[i])) {
      return false;
    }
  }

  if (strict && arguments.length === 5) {
    var symbolKeysA = objectGetOwnPropertySymbols(val1);

    if (symbolKeysA.length !== 0) {
      var count = 0;

      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];

        if (propertyIsEnumerable(val1, key)) {
          if (!propertyIsEnumerable(val2, key)) {
            return false;
          }

          aKeys.push(key);
          count++;
        } else if (propertyIsEnumerable(val2, key)) {
          return false;
        }
      }

      var symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      var _symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
        return false;
      }
    }
  }

  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
    return true;
  } // Use memos to handle cycles.


  if (memos === undefined) {
    memos = {
      val1: new Map(),
      val2: new Map(),
      position: 0
    };
  } else {
    // We prevent up to two map.has(x) calls by directly retrieving the value
    // and checking for undefined. The map can only contain numbers, so it is
    // safe to check for undefined only.
    var val2MemoA = memos.val1.get(val1);

    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);

      if (val2MemoB !== undefined) {
        return val2MemoA === val2MemoB;
      }
    }

    memos.position++;
  }

  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);
  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
  memos.val1.delete(val1);
  memos.val2.delete(val2);
  return areEq;
}

function setHasEqualElement(set, val1, strict, memo) {
  // Go looking.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var val2 = setValues[i];

    if (innerDeepEqual(val1, val2, strict, memo)) {
      // Remove the matching element to make sure we do not check that again.
      set.delete(val2);
      return true;
    }
  }

  return false;
} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').


function findLooseMatchingPrimitives(prim) {
  switch (_typeof(prim)) {
    case 'undefined':
      return null;

    case 'object':
      // Only pass in null as object!
      return undefined;

    case 'symbol':
      return false;

    case 'string':
      prim = +prim;
    // Loose equal entries exist only if the string is possible to convert to
    // a regular number and not NaN.
    // Fall through

    case 'number':
      if (numberIsNaN(prim)) {
        return false;
      }

  }

  return true;
}

function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) return altValue;
  return b.has(altValue) && !a.has(altValue);
}

function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);

  if (altValue != null) {
    return altValue;
  }

  var curB = b.get(altValue);

  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }

  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}

function setEquiv(a, b, strict, memo) {
  // This is a lazily initiated Set of entries which have to be compared
  // pairwise.
  var set = null;
  var aValues = arrayFromSet(a);

  for (var i = 0; i < aValues.length; i++) {
    var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
    // heavy sets but it is a minor slow down for primitives. As they are fast
    // to check this improves the worst case scenario instead.

    if (_typeof(val) === 'object' && val !== null) {
      if (set === null) {
        set = new Set();
      } // If the specified value doesn't exist in the second set its an not null
      // object (or non strict only: a not matching primitive) we'll need to go
      // hunting for something thats deep-(strict-)equal to it. To make this
      // O(n log n) complexity we have to copy these values in a new set first.


      set.add(val);
    } else if (!b.has(val)) {
      if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.

      if (!setMightHaveLoosePrim(a, b, val)) {
        return false;
      }

      if (set === null) {
        set = new Set();
      }

      set.add(val);
    }
  }

  if (set !== null) {
    var bValues = arrayFromSet(b);

    for (var _i = 0; _i < bValues.length; _i++) {
      var _val = bValues[_i]; // We have to check if a primitive value is already
      // matching and only if it's not, go hunting for it.

      if (_typeof(_val) === 'object' && _val !== null) {
        if (!setHasEqualElement(set, _val, strict, memo)) return false;
      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  // To be able to handle cases like:
  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
  // ... we need to consider *all* matching keys, not just the first we find.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var key2 = setValues[i];

    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set.delete(key2);
      return true;
    }
  }

  return false;
}

function mapEquiv(a, b, strict, memo) {
  var set = null;
  var aEntries = arrayFromMap(a);

  for (var i = 0; i < aEntries.length; i++) {
    var _aEntries$i = _slicedToArray(aEntries[i], 2),
        key = _aEntries$i[0],
        item1 = _aEntries$i[1];

    if (_typeof(key) === 'object' && key !== null) {
      if (set === null) {
        set = new Set();
      }

      set.add(key);
    } else {
      // By directly retrieving the value we prevent another b.has(key) check in
      // almost all possible cases.
      var item2 = b.get(key);

      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
        // keys.

        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;

        if (set === null) {
          set = new Set();
        }

        set.add(key);
      }
    }
  }

  if (set !== null) {
    var bEntries = arrayFromMap(b);

    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
          key = _bEntries$_i[0],
          item = _bEntries$_i[1];

      if (_typeof(key) === 'object' && key !== null) {
        if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
      } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function objEquiv(a, b, strict, keys, memos, iterationType) {
  // Sets and maps don't have their entries accessible via normal object
  // properties.
  var i = 0;

  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (hasOwnProperty(a, i)) {
        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (hasOwnProperty(b, i)) {
        return false;
      } else {
        // Array is sparse.
        var keysA = Object.keys(a);

        for (; i < keysA.length; i++) {
          var key = keysA[i];

          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }

        if (keysA.length !== Object.keys(b).length) {
          return false;
        }

        return true;
      }
    }
  } // The pair must have equivalent values for every corresponding key.
  // Possibly expensive deep test:


  for (i = 0; i < keys.length; i++) {
    var _key = keys[i];

    if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
      return false;
    }
  }

  return true;
}

function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}

function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}

module.exports = {
  isDeepEqual: isDeepEqual,
  isDeepStrictEqual: isDeepStrictEqual
};

/***/ }),

/***/ 7991:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ 1048:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
var __webpack_unused_export__;
/* provided dependency */ var console = __webpack_require__(4364);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



const base64 = __webpack_require__(7991)
const ieee754 = __webpack_require__(9318)
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.hp = Buffer
__webpack_unused_export__ = SlowBuffer
exports.IS = 50

const K_MAX_LENGTH = 0x7fffffff
__webpack_unused_export__ = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.IS
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}


/***/ }),

/***/ 9818:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(528);

var callBind = __webpack_require__(8498);

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ 8498:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(9138);
var GetIntrinsic = __webpack_require__(528);
var setFunctionLength = __webpack_require__(6108);

var $TypeError = __webpack_require__(3468);
var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $defineProperty = __webpack_require__(4940);
var $max = GetIntrinsic('%Math.max%');

module.exports = function callBind(originalFunction) {
	if (typeof originalFunction !== 'function') {
		throw new $TypeError('a function is required');
	}
	var func = $reflectApply(bind, $call, arguments);
	return setFunctionLength(
		func,
		1 + $max(0, originalFunction.length - (arguments.length - 1)),
		true
	);
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ 4364:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*global window, global*/
var util = __webpack_require__(6827)
var assert = __webpack_require__(6093)
function now() { return new Date().getTime() }

var slice = Array.prototype.slice
var console
var times = {}

if (typeof __webpack_require__.g !== "undefined" && __webpack_require__.g.console) {
    console = __webpack_require__.g.console
} else if (typeof window !== "undefined" && window.console) {
    console = window.console
} else {
    console = {}
}

var functions = [
    [log, "log"],
    [info, "info"],
    [warn, "warn"],
    [error, "error"],
    [time, "time"],
    [timeEnd, "timeEnd"],
    [trace, "trace"],
    [dir, "dir"],
    [consoleAssert, "assert"]
]

for (var i = 0; i < functions.length; i++) {
    var tuple = functions[i]
    var f = tuple[0]
    var name = tuple[1]

    if (!console[name]) {
        console[name] = f
    }
}

module.exports = console

function log() {}

function info() {
    console.log.apply(console, arguments)
}

function warn() {
    console.log.apply(console, arguments)
}

function error() {
    console.warn.apply(console, arguments)
}

function time(label) {
    times[label] = now()
}

function timeEnd(label) {
    var time = times[label]
    if (!time) {
        throw new Error("No such label: " + label)
    }

    delete times[label]
    var duration = now() - time
    console.log(label + ": " + duration + "ms")
}

function trace() {
    var err = new Error()
    err.name = "Trace"
    err.message = util.format.apply(null, arguments)
    console.error(err.stack)
}

function dir(object) {
    console.log(util.inspect(object) + "\n")
}

function consoleAssert(expression) {
    if (!expression) {
        var arr = slice.call(arguments, 1)
        assert.ok(false, util.format.apply(null, arr))
    }
}


/***/ }),

/***/ 686:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $defineProperty = __webpack_require__(4940);

var $SyntaxError = __webpack_require__(5731);
var $TypeError = __webpack_require__(3468);

var gopd = __webpack_require__(9336);

/** @type {import('.')} */
module.exports = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError('`loose`, if provided, must be a boolean');
	}

	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;

	/* @type {false | TypedPropertyDescriptor<unknown>} */
	var desc = !!gopd && gopd(obj, property);

	if ($defineProperty) {
		$defineProperty(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
		obj[property] = value; // eslint-disable-line no-param-reassign
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};


/***/ }),

/***/ 1857:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keys = __webpack_require__(9228);
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = __webpack_require__(686);

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var supportsDescriptors = __webpack_require__(7239)();

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}

	if (supportsDescriptors) {
		defineDataProperty(object, name, value, true);
	} else {
		defineDataProperty(object, name, value);
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),

/***/ 4940:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(528);

/** @type {import('.')} */
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true) || false;
if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = false;
	}
}

module.exports = $defineProperty;


/***/ }),

/***/ 6729:
/***/ ((module) => {

"use strict";


/** @type {import('./eval')} */
module.exports = EvalError;


/***/ }),

/***/ 9838:
/***/ ((module) => {

"use strict";


/** @type {import('.')} */
module.exports = Error;


/***/ }),

/***/ 1155:
/***/ ((module) => {

"use strict";


/** @type {import('./range')} */
module.exports = RangeError;


/***/ }),

/***/ 4943:
/***/ ((module) => {

"use strict";


/** @type {import('./ref')} */
module.exports = ReferenceError;


/***/ }),

/***/ 5731:
/***/ ((module) => {

"use strict";


/** @type {import('./syntax')} */
module.exports = SyntaxError;


/***/ }),

/***/ 3468:
/***/ ((module) => {

"use strict";


/** @type {import('./type')} */
module.exports = TypeError;


/***/ }),

/***/ 2140:
/***/ ((module) => {

"use strict";


/** @type {import('./uri')} */
module.exports = URIError;


/***/ }),

/***/ 3046:
/***/ ((module) => {

"use strict";
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */



function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];
    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));
    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }
  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

module.exports = {
  assign: assign,
  polyfill: polyfill
};


/***/ }),

/***/ 705:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isCallable = __webpack_require__(9617);

var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};

var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};

var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};

var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }

    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }

    if (toStr.call(list) === '[object Array]') {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};

module.exports = forEach;


/***/ }),

/***/ 8794:
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';

var concatty = function concatty(a, b) {
    var arr = [];

    for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
    }
    for (var j = 0; j < b.length; j += 1) {
        arr[j + a.length] = b[j];
    }

    return arr;
};

var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
    }
    return arr;
};

var joiny = function (arr, joiner) {
    var str = '';
    for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                concatty(args, arguments)
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(
            that,
            concatty(args, arguments)
        );

    };

    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = '$' + i;
    }

    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ 9138:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(8794);

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ 528:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $Error = __webpack_require__(9838);
var $EvalError = __webpack_require__(6729);
var $RangeError = __webpack_require__(1155);
var $ReferenceError = __webpack_require__(4943);
var $SyntaxError = __webpack_require__(5731);
var $TypeError = __webpack_require__(3468);
var $URIError = __webpack_require__(2140);

var $Function = Function;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(3558)();
var hasProto = __webpack_require__(6869)();

var getProto = Object.getPrototypeOf || (
	hasProto
		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
		: null
);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	__proto__: null,
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': $Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': $EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': $RangeError,
	'%ReferenceError%': $ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': $URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	__proto__: null,
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(9138);
var hasOwn = __webpack_require__(8554);
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ 9336:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(528);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ 7239:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var $defineProperty = __webpack_require__(4940);

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	return !!$defineProperty;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!$defineProperty) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;


/***/ }),

/***/ 6869:
/***/ ((module) => {

"use strict";


var test = {
	foo: {}
};

var $Object = Object;

module.exports = function hasProto() {
	return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
};


/***/ }),

/***/ 3558:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(2908);

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ 2908:
/***/ ((module) => {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ 1913:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = __webpack_require__(2908);

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};


/***/ }),

/***/ 8554:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = __webpack_require__(9138);

/** @type {import('.')} */
module.exports = bind.call(call, $hasOwn);


/***/ }),

/***/ 9318:
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ 5615:
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ 5387:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasToStringTag = __webpack_require__(1913)();
var callBound = __webpack_require__(9818);

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;


/***/ }),

/***/ 9617:
/***/ ((module) => {

"use strict";


var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};


/***/ }),

/***/ 2625:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = __webpack_require__(1913)();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};


/***/ }),

/***/ 8006:
/***/ ((module) => {

"use strict";


/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function isNaN(value) {
	return value !== value;
};


/***/ }),

/***/ 7838:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__(8498);
var define = __webpack_require__(1857);

var implementation = __webpack_require__(8006);
var getPolyfill = __webpack_require__(1591);
var shim = __webpack_require__(1641);

var polyfill = callBind(getPolyfill(), Number);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ 1591:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(8006);

module.exports = function getPolyfill() {
	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
		return Number.isNaN;
	}
	return implementation;
};


/***/ }),

/***/ 1641:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(1857);
var getPolyfill = __webpack_require__(1591);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function shimNumberIsNaN() {
	var polyfill = getPolyfill();
	define(Number, { isNaN: polyfill }, {
		isNaN: function testIsNaN() {
			return Number.isNaN !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ 5943:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var whichTypedArray = __webpack_require__(2730);

module.exports = function isTypedArray(value) {
	return !!whichTypedArray(value);
};


/***/ }),

/***/ 2372:
/***/ ((module) => {

"use strict";


var numberIsNaN = function (value) {
	return value !== value;
};

module.exports = function is(a, b) {
	if (a === 0 && b === 0) {
		return 1 / a === 1 / b;
	}
	if (a === b) {
		return true;
	}
	if (numberIsNaN(a) && numberIsNaN(b)) {
		return true;
	}
	return false;
};



/***/ }),

/***/ 5968:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(1857);
var callBind = __webpack_require__(8498);

var implementation = __webpack_require__(2372);
var getPolyfill = __webpack_require__(1937);
var shim = __webpack_require__(5087);

var polyfill = callBind(getPolyfill(), Object);

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ 1937:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(2372);

module.exports = function getPolyfill() {
	return typeof Object.is === 'function' ? Object.is : implementation;
};


/***/ }),

/***/ 5087:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getPolyfill = __webpack_require__(1937);
var define = __webpack_require__(1857);

module.exports = function shimObjectIs() {
	var polyfill = getPolyfill();
	define(Object, { is: polyfill }, {
		is: function testObjectIs() {
			return Object.is !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ 8160:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(968); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


/***/ }),

/***/ 9228:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__(968);

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(8160);

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),

/***/ 968:
/***/ ((module) => {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),

/***/ 9907:
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ 6108:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(528);
var define = __webpack_require__(686);
var hasDescriptors = __webpack_require__(7239)();
var gOPD = __webpack_require__(9336);

var $TypeError = __webpack_require__(3468);
var $floor = GetIntrinsic('%Math.floor%');

/** @type {import('.')} */
module.exports = function setFunctionLength(fn, length) {
	if (typeof fn !== 'function') {
		throw new $TypeError('`fn` is not a function');
	}
	if (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {
		throw new $TypeError('`length` must be a positive 32-bit integer');
	}

	var loose = arguments.length > 2 && !!arguments[2];

	var functionLengthIsConfigurable = true;
	var functionLengthIsWritable = true;
	if ('length' in fn && gOPD) {
		var desc = gOPD(fn, 'length');
		if (desc && !desc.configurable) {
			functionLengthIsConfigurable = false;
		}
		if (desc && !desc.writable) {
			functionLengthIsWritable = false;
		}
	}

	if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
		if (hasDescriptors) {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);
		} else {
			define(/** @type {Parameters<define>[0]} */ (fn), 'length', length);
		}
	}
	return fn;
};


/***/ }),

/***/ 2125:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseService: () => (/* binding */ BaseService)
/* harmony export */ });
/* harmony import */ var vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5501);
/* harmony import */ var vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7770);
/* harmony import */ var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8041);
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}



class BaseService {
    addDocument(document) {
        this.documents[document.uri] = vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__/* .TextDocument */ .V.create(document.uri, document.languageId, document.version, document.text);
    }
    getDocument(uri) {
        return this.documents[uri];
    }
    removeDocument(document) {
        delete this.documents[document.uri];
        if (this.options[document.uri]) {
            delete this.options[document.uri];
        }
    }
    renameDocument(document, newDocumentUri) {
        const previousDocument = this.getDocument(document.uri);
        this.addDocument({
            uri: newDocumentUri,
            version: previousDocument.version,
            languageId: previousDocument.languageId,
            text: previousDocument.getText()
        });
        this.options[newDocumentUri] = this.options[document.uri];
        this.removeDocument(document);
    }
    getDocumentValue(uri) {
        var _this_getDocument;
        return (_this_getDocument = this.getDocument(uri)) === null || _this_getDocument === void 0 ? void 0 : _this_getDocument.getText();
    }
    setValue(identifier, value) {
        let document = this.getDocument(identifier.uri);
        if (document) {
            document = vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__/* .TextDocument */ .V.create(document.uri, document.languageId, document.version, value);
            this.documents[document.uri] = document;
        }
    }
    setGlobalOptions(options) {
        this.globalOptions = options !== null && options !== void 0 ? options : {};
    }
    setWorkspace(workspaceUri) {
        this.workspaceUri = workspaceUri;
    }
    setOptions(documentUri, options, merge = false) {
        this.options[documentUri] = merge ? (0,_utils__WEBPACK_IMPORTED_MODULE_2__/* .mergeObjects */ .rL)(options, this.options[documentUri]) : options;
    }
    getOption(documentUri, optionName) {
        if (this.options[documentUri] && this.options[documentUri][optionName]) {
            return this.options[documentUri][optionName];
        } else {
            return this.globalOptions[optionName];
        }
    }
    applyDeltas(identifier, deltas) {
        let document = this.getDocument(identifier.uri);
        if (document) vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__/* .TextDocument */ .V.update(document, deltas, identifier.version);
    }
    async doComplete(document, position) {
        return null;
    }
    async doInlineComplete(document, position) {
        return null;
    }
    async doHover(document, position) {
        return null;
    }
    async doResolve(item) {
        return null;
    }
    async doValidation(document) {
        return [];
    }
    format(document, range, options) {
        return Promise.resolve([]);
    }
    async provideSignatureHelp(document, position) {
        return null;
    }
    async findDocumentHighlights(document, position) {
        return [];
    }
    get optionsToFilterDiagnostics() {
        var _this_globalOptions_errorCodesToIgnore, _this_globalOptions_errorCodesToTreatAsWarning, _this_globalOptions_errorCodesToTreatAsInfo, _this_globalOptions_errorMessagesToIgnore, _this_globalOptions_errorMessagesToTreatAsWarning, _this_globalOptions_errorMessagesToTreatAsInfo;
        return {
            errorCodesToIgnore: (_this_globalOptions_errorCodesToIgnore = this.globalOptions.errorCodesToIgnore) !== null && _this_globalOptions_errorCodesToIgnore !== void 0 ? _this_globalOptions_errorCodesToIgnore : [],
            errorCodesToTreatAsWarning: (_this_globalOptions_errorCodesToTreatAsWarning = this.globalOptions.errorCodesToTreatAsWarning) !== null && _this_globalOptions_errorCodesToTreatAsWarning !== void 0 ? _this_globalOptions_errorCodesToTreatAsWarning : [],
            errorCodesToTreatAsInfo: (_this_globalOptions_errorCodesToTreatAsInfo = this.globalOptions.errorCodesToTreatAsInfo) !== null && _this_globalOptions_errorCodesToTreatAsInfo !== void 0 ? _this_globalOptions_errorCodesToTreatAsInfo : [],
            errorMessagesToIgnore: (_this_globalOptions_errorMessagesToIgnore = this.globalOptions.errorMessagesToIgnore) !== null && _this_globalOptions_errorMessagesToIgnore !== void 0 ? _this_globalOptions_errorMessagesToIgnore : [],
            errorMessagesToTreatAsWarning: (_this_globalOptions_errorMessagesToTreatAsWarning = this.globalOptions.errorMessagesToTreatAsWarning) !== null && _this_globalOptions_errorMessagesToTreatAsWarning !== void 0 ? _this_globalOptions_errorMessagesToTreatAsWarning : [],
            errorMessagesToTreatAsInfo: (_this_globalOptions_errorMessagesToTreatAsInfo = this.globalOptions.errorMessagesToTreatAsInfo) !== null && _this_globalOptions_errorMessagesToTreatAsInfo !== void 0 ? _this_globalOptions_errorMessagesToTreatAsInfo : []
        };
    }
    getSemanticTokens(document, range) {
        return Promise.resolve(null);
    }
    dispose() {
        return Promise.resolve();
    }
    closeConnection() {
        return Promise.resolve();
    }
    getCodeActions(document, range, context) {
        return Promise.resolve(null);
    }
    executeCommand(command, args) {
        return Promise.resolve(null);
    }
    sendAppliedResult(result, callbackId) {}
    sendRequest(name, args) {
        return Promise.resolve(null);
    }
    sendResponse(callbackId, args) {
        return;
    }
    constructor(mode, workspaceUri){
        _define_property(this, "serviceName", void 0);
        _define_property(this, "mode", void 0);
        _define_property(this, "documents", {});
        _define_property(this, "options", {});
        _define_property(this, "globalOptions", {});
        _define_property(this, "serviceData", void 0);
        _define_property(this, "serviceCapabilities", {});
        _define_property(this, "workspaceUri", void 0);
        _define_property(this, "clientCapabilities", {
            textDocument: {
                diagnostic: {
                    dynamicRegistration: true,
                    relatedDocumentSupport: true
                },
                publishDiagnostics: {
                    relatedInformation: true,
                    versionSupport: false,
                    tagSupport: {
                        valueSet: [
                            vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0__.DiagnosticTag.Unnecessary,
                            vscode_languageserver_protocol__WEBPACK_IMPORTED_MODULE_0__.DiagnosticTag.Deprecated
                        ]
                    }
                },
                hover: {
                    dynamicRegistration: true,
                    contentFormat: [
                        'markdown',
                        'plaintext'
                    ]
                },
                synchronization: {
                    dynamicRegistration: true,
                    willSave: false,
                    didSave: false,
                    willSaveWaitUntil: false
                },
                formatting: {
                    dynamicRegistration: true
                },
                completion: {
                    dynamicRegistration: true,
                    completionItem: {
                        snippetSupport: true,
                        commitCharactersSupport: false,
                        documentationFormat: [
                            'markdown',
                            'plaintext'
                        ],
                        deprecatedSupport: false,
                        preselectSupport: false
                    },
                    contextSupport: false
                },
                signatureHelp: {
                    signatureInformation: {
                        documentationFormat: [
                            'markdown',
                            'plaintext'
                        ],
                        activeParameterSupport: true
                    }
                },
                documentHighlight: {
                    dynamicRegistration: true
                },
                semanticTokens: {
                    multilineTokenSupport: false,
                    overlappingTokenSupport: false,
                    tokenTypes: [],
                    tokenModifiers: [],
                    formats: [
                        "relative"
                    ],
                    requests: {
                        full: {
                            delta: false
                        },
                        range: true
                    },
                    augmentsSyntaxTokens: true
                },
                codeAction: {
                    dynamicRegistration: true
                },
                inlineCompletion: {
                    dynamicRegistration: true
                }
            },
            window: {
                showDocument: {
                    support: true
                }
            },
            workspace: {
                didChangeConfiguration: {
                    dynamicRegistration: true
                },
                executeCommand: {
                    dynamicRegistration: true
                },
                applyEdit: true,
                workspaceEdit: {
                    failureHandling: "abort",
                    normalizesLineEndings: false,
                    documentChanges: false
                }
            }
        });
        this.mode = mode;
        this.workspaceUri = workspaceUri;
        this.serviceName = "BaseService";
        this.serviceData = {
            className: "BaseService",
            modes: "",
            module: ()=>{}
        };
    }
}


/***/ }),

/***/ 7770:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tk: () => (/* binding */ checkValueAgainstRegexpArray),
/* harmony export */   rL: () => (/* binding */ mergeObjects)
/* harmony export */ });
/* unused harmony exports notEmpty, isEmptyRange, mergeRanges, convertToUri */
function mergeObjects(obj1, obj2, excludeUndefined = false) {
    if (!obj1) return obj2;
    if (!obj2) return obj1;
    if (excludeUndefined) {
        obj1 = excludeUndefinedValues(obj1);
        obj2 = excludeUndefinedValues(obj2);
    }
    const mergedObjects = {
        ...obj2,
        ...obj1
    }; // Give priority to obj1 values by spreading obj2 first, then obj1
    for (const key of Object.keys(mergedObjects)){
        if (obj1[key] && obj2[key]) {
            if (Array.isArray(obj1[key])) {
                mergedObjects[key] = obj1[key].concat(obj2[key]);
            } else if (Array.isArray(obj2[key])) {
                mergedObjects[key] = obj2[key].concat(obj1[key]);
            } else if (typeof obj1[key] === 'object' && typeof obj2[key] === 'object') {
                mergedObjects[key] = mergeObjects(obj1[key], obj2[key]);
            }
        }
    }
    return mergedObjects;
}
function excludeUndefinedValues(obj) {
    const filteredEntries = Object.entries(obj).filter(([_, value])=>value !== undefined);
    return Object.fromEntries(filteredEntries);
}
function notEmpty(value) {
    return value !== null && value !== undefined;
}
function isEmptyRange(range) {
    return range.start.row === range.end.row && range.start.column === range.end.column;
}
//taken with small changes from ace-code
function mergeRanges(ranges) {
    var list = ranges;
    list = list.sort(function(a, b) {
        return comparePoints(a.start, b.start);
    });
    var next = list[0], range;
    for(var i = 1; i < list.length; i++){
        range = next;
        next = list[i];
        var cmp = comparePoints(range.end, next.start);
        if (cmp < 0) continue;
        if (cmp == 0 && !isEmptyRange(range) && !isEmptyRange(next)) continue;
        if (comparePoints(range.end, next.end) < 0) {
            range.end.row = next.end.row;
            range.end.column = next.end.column;
        }
        list.splice(i, 1);
        next = range;
        i--;
    }
    return list;
}
function comparePoints(p1, p2) {
    return p1.row - p2.row || p1.column - p2.column;
}
function checkValueAgainstRegexpArray(value, regexpArray) {
    if (!regexpArray) {
        return false;
    }
    for(let i = 0; i < regexpArray.length; i++){
        if (regexpArray[i].test(value)) {
            return true;
        }
    }
    return false;
}

/**
 * Converts a given file path to a URI format. If the given file path is already a URI,
 * it normalizes and optionally resolves the path against a workspace URI.
 *
 * @param filePath - The file path to convert to a URI. Can be an absolute path or an existing file URI.
 * @param [joinWorkspaceURI] - Optional flag to determine if the converted URI should be joined with given URI
 * @param [workspaceUri] - The base workspace URI to resolve against if `joinWorkspaceURI` is true. Required if resolution is needed.
 * @return {string} - The resulting URI
 */ function convertToUri(filePath, joinWorkspaceURI = false, workspaceUri) {
    const isFullUri = filePath.startsWith('file://');
    const normalizedPath = filePath.replace(/\\/g, "/");
    let uri;
    if (isFullUri) {
        uri = URI.parse(normalizedPath);
    } else {
        uri = URI.file(normalizedPath);
    }
    if (joinWorkspaceURI && workspaceUri) {
        if (!workspaceUri.startsWith('file://')) {
            throw new Error('workspaceUri must be a file:// URI');
        }
        const workspaceUriParsed = URI.parse(workspaceUri);
        uri = Utils.joinPath(workspaceUriParsed, uri.path);
    }
    return uri.toString();
}


/***/ }),

/***/ 5272:
/***/ ((module) => {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ 1531:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



var isArgumentsObject = __webpack_require__(5387);
var isGeneratorFunction = __webpack_require__(2625);
var whichTypedArray = __webpack_require__(2730);
var isTypedArray = __webpack_require__(5943);

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});


/***/ }),

/***/ 6827:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(9907);
/* provided dependency */ var console = __webpack_require__(4364);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').slice(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.slice(1, -1);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = __webpack_require__(1531);

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(5272);

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(5615);

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;


/***/ }),

/***/ 9208:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(9110);

/***/ }),

/***/ 9110:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.BrowserMessageWriter = exports.BrowserMessageReader = void 0;
const ril_1 = __webpack_require__(3312);
// Install the browser runtime abstract.
ril_1.default.install();
const api_1 = __webpack_require__(7672);
__exportStar(__webpack_require__(7672), exports);
class BrowserMessageReader extends api_1.AbstractMessageReader {
    constructor(port) {
        super();
        this._onData = new api_1.Emitter();
        this._messageListener = (event) => {
            this._onData.fire(event.data);
        };
        port.addEventListener('error', (event) => this.fireError(event));
        port.onmessage = this._messageListener;
    }
    listen(callback) {
        return this._onData.event(callback);
    }
}
exports.BrowserMessageReader = BrowserMessageReader;
class BrowserMessageWriter extends api_1.AbstractMessageWriter {
    constructor(port) {
        super();
        this.port = port;
        this.errorCount = 0;
        port.addEventListener('error', (event) => this.fireError(event));
    }
    write(msg) {
        try {
            this.port.postMessage(msg);
            return Promise.resolve();
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
    }
}
exports.BrowserMessageWriter = BrowserMessageWriter;
function createMessageConnection(reader, writer, logger, options) {
    if (logger === undefined) {
        logger = api_1.NullLogger;
    }
    if (api_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, api_1.createMessageConnection)(reader, writer, logger, options);
}
exports.createMessageConnection = createMessageConnection;


/***/ }),

/***/ 3312:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(4364);

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_1 = __webpack_require__(7672);
class MessageBuffer extends api_1.AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        super(encoding);
        this.asciiDecoder = new TextDecoder('ascii');
    }
    emptyBuffer() {
        return MessageBuffer.emptyBuffer;
    }
    fromString(value, _encoding) {
        return (new TextEncoder()).encode(value);
    }
    toString(value, encoding) {
        if (encoding === 'ascii') {
            return this.asciiDecoder.decode(value);
        }
        else {
            return (new TextDecoder(encoding)).decode(value);
        }
    }
    asNative(buffer, length) {
        if (length === undefined) {
            return buffer;
        }
        else {
            return buffer.slice(0, length);
        }
    }
    allocNative(length) {
        return new Uint8Array(length);
    }
}
MessageBuffer.emptyBuffer = new Uint8Array(0);
class ReadableStreamWrapper {
    constructor(socket) {
        this.socket = socket;
        this._onData = new api_1.Emitter();
        this._messageListener = (event) => {
            const blob = event.data;
            blob.arrayBuffer().then((buffer) => {
                this._onData.fire(new Uint8Array(buffer));
            }, () => {
                (0, api_1.RAL)().console.error(`Converting blob to array buffer failed.`);
            });
        };
        this.socket.addEventListener('message', this._messageListener);
    }
    onClose(listener) {
        this.socket.addEventListener('close', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));
    }
    onError(listener) {
        this.socket.addEventListener('error', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));
    }
    onEnd(listener) {
        this.socket.addEventListener('end', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));
    }
    onData(listener) {
        return this._onData.event(listener);
    }
}
class WritableStreamWrapper {
    constructor(socket) {
        this.socket = socket;
    }
    onClose(listener) {
        this.socket.addEventListener('close', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('close', listener));
    }
    onError(listener) {
        this.socket.addEventListener('error', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('error', listener));
    }
    onEnd(listener) {
        this.socket.addEventListener('end', listener);
        return api_1.Disposable.create(() => this.socket.removeEventListener('end', listener));
    }
    write(data, encoding) {
        if (typeof data === 'string') {
            if (encoding !== undefined && encoding !== 'utf-8') {
                throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);
            }
            this.socket.send(data);
        }
        else {
            this.socket.send(data);
        }
        return Promise.resolve();
    }
    end() {
        this.socket.close();
    }
}
const _textEncoder = new TextEncoder();
const _ril = Object.freeze({
    messageBuffer: Object.freeze({
        create: (encoding) => new MessageBuffer(encoding)
    }),
    applicationJson: Object.freeze({
        encoder: Object.freeze({
            name: 'application/json',
            encode: (msg, options) => {
                if (options.charset !== 'utf-8') {
                    throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);
                }
                return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, undefined, 0)));
            }
        }),
        decoder: Object.freeze({
            name: 'application/json',
            decode: (buffer, options) => {
                if (!(buffer instanceof Uint8Array)) {
                    throw new Error(`In a Browser environments only Uint8Arrays are supported.`);
                }
                return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
            }
        })
    }),
    stream: Object.freeze({
        asReadableStream: (socket) => new ReadableStreamWrapper(socket),
        asWritableStream: (socket) => new WritableStreamWrapper(socket)
    }),
    console: console,
    timer: Object.freeze({
        setTimeout(callback, ms, ...args) {
            const handle = setTimeout(callback, ms, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setImmediate(callback, ...args) {
            const handle = setTimeout(callback, 0, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setInterval(callback, ms, ...args) {
            const handle = setInterval(callback, ms, ...args);
            return { dispose: () => clearInterval(handle) };
        },
    })
});
function RIL() {
    return _ril;
}
(function (RIL) {
    function install() {
        api_1.RAL.install(_ril);
    }
    RIL.install = install;
})(RIL || (RIL = {}));
exports["default"] = RIL;


/***/ }),

/***/ 7672:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="../../typings/thenable.d.ts" />
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgressType = exports.ProgressToken = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.AbstractMessageBuffer = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.LRUCache = exports.Touch = exports.LinkedMap = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.Message = exports.RAL = void 0;
exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = void 0;
const messages_1 = __webpack_require__(7162);
Object.defineProperty(exports, "Message", ({ enumerable: true, get: function () { return messages_1.Message; } }));
Object.defineProperty(exports, "RequestType", ({ enumerable: true, get: function () { return messages_1.RequestType; } }));
Object.defineProperty(exports, "RequestType0", ({ enumerable: true, get: function () { return messages_1.RequestType0; } }));
Object.defineProperty(exports, "RequestType1", ({ enumerable: true, get: function () { return messages_1.RequestType1; } }));
Object.defineProperty(exports, "RequestType2", ({ enumerable: true, get: function () { return messages_1.RequestType2; } }));
Object.defineProperty(exports, "RequestType3", ({ enumerable: true, get: function () { return messages_1.RequestType3; } }));
Object.defineProperty(exports, "RequestType4", ({ enumerable: true, get: function () { return messages_1.RequestType4; } }));
Object.defineProperty(exports, "RequestType5", ({ enumerable: true, get: function () { return messages_1.RequestType5; } }));
Object.defineProperty(exports, "RequestType6", ({ enumerable: true, get: function () { return messages_1.RequestType6; } }));
Object.defineProperty(exports, "RequestType7", ({ enumerable: true, get: function () { return messages_1.RequestType7; } }));
Object.defineProperty(exports, "RequestType8", ({ enumerable: true, get: function () { return messages_1.RequestType8; } }));
Object.defineProperty(exports, "RequestType9", ({ enumerable: true, get: function () { return messages_1.RequestType9; } }));
Object.defineProperty(exports, "ResponseError", ({ enumerable: true, get: function () { return messages_1.ResponseError; } }));
Object.defineProperty(exports, "ErrorCodes", ({ enumerable: true, get: function () { return messages_1.ErrorCodes; } }));
Object.defineProperty(exports, "NotificationType", ({ enumerable: true, get: function () { return messages_1.NotificationType; } }));
Object.defineProperty(exports, "NotificationType0", ({ enumerable: true, get: function () { return messages_1.NotificationType0; } }));
Object.defineProperty(exports, "NotificationType1", ({ enumerable: true, get: function () { return messages_1.NotificationType1; } }));
Object.defineProperty(exports, "NotificationType2", ({ enumerable: true, get: function () { return messages_1.NotificationType2; } }));
Object.defineProperty(exports, "NotificationType3", ({ enumerable: true, get: function () { return messages_1.NotificationType3; } }));
Object.defineProperty(exports, "NotificationType4", ({ enumerable: true, get: function () { return messages_1.NotificationType4; } }));
Object.defineProperty(exports, "NotificationType5", ({ enumerable: true, get: function () { return messages_1.NotificationType5; } }));
Object.defineProperty(exports, "NotificationType6", ({ enumerable: true, get: function () { return messages_1.NotificationType6; } }));
Object.defineProperty(exports, "NotificationType7", ({ enumerable: true, get: function () { return messages_1.NotificationType7; } }));
Object.defineProperty(exports, "NotificationType8", ({ enumerable: true, get: function () { return messages_1.NotificationType8; } }));
Object.defineProperty(exports, "NotificationType9", ({ enumerable: true, get: function () { return messages_1.NotificationType9; } }));
Object.defineProperty(exports, "ParameterStructures", ({ enumerable: true, get: function () { return messages_1.ParameterStructures; } }));
const linkedMap_1 = __webpack_require__(1109);
Object.defineProperty(exports, "LinkedMap", ({ enumerable: true, get: function () { return linkedMap_1.LinkedMap; } }));
Object.defineProperty(exports, "LRUCache", ({ enumerable: true, get: function () { return linkedMap_1.LRUCache; } }));
Object.defineProperty(exports, "Touch", ({ enumerable: true, get: function () { return linkedMap_1.Touch; } }));
const disposable_1 = __webpack_require__(8844);
Object.defineProperty(exports, "Disposable", ({ enumerable: true, get: function () { return disposable_1.Disposable; } }));
const events_1 = __webpack_require__(2479);
Object.defineProperty(exports, "Event", ({ enumerable: true, get: function () { return events_1.Event; } }));
Object.defineProperty(exports, "Emitter", ({ enumerable: true, get: function () { return events_1.Emitter; } }));
const cancellation_1 = __webpack_require__(6957);
Object.defineProperty(exports, "CancellationTokenSource", ({ enumerable: true, get: function () { return cancellation_1.CancellationTokenSource; } }));
Object.defineProperty(exports, "CancellationToken", ({ enumerable: true, get: function () { return cancellation_1.CancellationToken; } }));
const sharedArrayCancellation_1 = __webpack_require__(3489);
Object.defineProperty(exports, "SharedArraySenderStrategy", ({ enumerable: true, get: function () { return sharedArrayCancellation_1.SharedArraySenderStrategy; } }));
Object.defineProperty(exports, "SharedArrayReceiverStrategy", ({ enumerable: true, get: function () { return sharedArrayCancellation_1.SharedArrayReceiverStrategy; } }));
const messageReader_1 = __webpack_require__(656);
Object.defineProperty(exports, "MessageReader", ({ enumerable: true, get: function () { return messageReader_1.MessageReader; } }));
Object.defineProperty(exports, "AbstractMessageReader", ({ enumerable: true, get: function () { return messageReader_1.AbstractMessageReader; } }));
Object.defineProperty(exports, "ReadableStreamMessageReader", ({ enumerable: true, get: function () { return messageReader_1.ReadableStreamMessageReader; } }));
const messageWriter_1 = __webpack_require__(9036);
Object.defineProperty(exports, "MessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.MessageWriter; } }));
Object.defineProperty(exports, "AbstractMessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.AbstractMessageWriter; } }));
Object.defineProperty(exports, "WriteableStreamMessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.WriteableStreamMessageWriter; } }));
const messageBuffer_1 = __webpack_require__(9805);
Object.defineProperty(exports, "AbstractMessageBuffer", ({ enumerable: true, get: function () { return messageBuffer_1.AbstractMessageBuffer; } }));
const connection_1 = __webpack_require__(4054);
Object.defineProperty(exports, "ConnectionStrategy", ({ enumerable: true, get: function () { return connection_1.ConnectionStrategy; } }));
Object.defineProperty(exports, "ConnectionOptions", ({ enumerable: true, get: function () { return connection_1.ConnectionOptions; } }));
Object.defineProperty(exports, "NullLogger", ({ enumerable: true, get: function () { return connection_1.NullLogger; } }));
Object.defineProperty(exports, "createMessageConnection", ({ enumerable: true, get: function () { return connection_1.createMessageConnection; } }));
Object.defineProperty(exports, "ProgressToken", ({ enumerable: true, get: function () { return connection_1.ProgressToken; } }));
Object.defineProperty(exports, "ProgressType", ({ enumerable: true, get: function () { return connection_1.ProgressType; } }));
Object.defineProperty(exports, "Trace", ({ enumerable: true, get: function () { return connection_1.Trace; } }));
Object.defineProperty(exports, "TraceValues", ({ enumerable: true, get: function () { return connection_1.TraceValues; } }));
Object.defineProperty(exports, "TraceFormat", ({ enumerable: true, get: function () { return connection_1.TraceFormat; } }));
Object.defineProperty(exports, "SetTraceNotification", ({ enumerable: true, get: function () { return connection_1.SetTraceNotification; } }));
Object.defineProperty(exports, "LogTraceNotification", ({ enumerable: true, get: function () { return connection_1.LogTraceNotification; } }));
Object.defineProperty(exports, "ConnectionErrors", ({ enumerable: true, get: function () { return connection_1.ConnectionErrors; } }));
Object.defineProperty(exports, "ConnectionError", ({ enumerable: true, get: function () { return connection_1.ConnectionError; } }));
Object.defineProperty(exports, "CancellationReceiverStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationReceiverStrategy; } }));
Object.defineProperty(exports, "CancellationSenderStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationSenderStrategy; } }));
Object.defineProperty(exports, "CancellationStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationStrategy; } }));
Object.defineProperty(exports, "MessageStrategy", ({ enumerable: true, get: function () { return connection_1.MessageStrategy; } }));
const ral_1 = __webpack_require__(5091);
exports.RAL = ral_1.default;


/***/ }),

/***/ 6957:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CancellationTokenSource = exports.CancellationToken = void 0;
const ral_1 = __webpack_require__(5091);
const Is = __webpack_require__(6618);
const events_1 = __webpack_require__(2479);
var CancellationToken;
(function (CancellationToken) {
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
    });
    function is(value) {
        const candidate = value;
        return candidate && (candidate === CancellationToken.None
            || candidate === CancellationToken.Cancelled
            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));
    }
    CancellationToken.is = is;
})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));
const shortcutEvent = Object.freeze(function (callback, context) {
    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
    return { dispose() { handle.dispose(); } };
});
class MutableToken {
    constructor() {
        this._isCancelled = false;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this.dispose();
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new events_1.Emitter();
        }
        return this._emitter.event;
    }
    dispose() {
        if (this._emitter) {
            this._emitter.dispose();
            this._emitter = undefined;
        }
    }
}
class CancellationTokenSource {
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        }
        else {
            this._token.cancel();
        }
    }
    dispose() {
        if (!this._token) {
            // ensure to initialize with an empty token if we had none
            this._token = CancellationToken.None;
        }
        else if (this._token instanceof MutableToken) {
            // actually dispose
            this._token.dispose();
        }
    }
}
exports.CancellationTokenSource = CancellationTokenSource;


/***/ }),

/***/ 4054:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.ConnectionOptions = exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.RequestCancellationReceiverStrategy = exports.IdCancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = exports.NullLogger = exports.ProgressType = exports.ProgressToken = void 0;
const ral_1 = __webpack_require__(5091);
const Is = __webpack_require__(6618);
const messages_1 = __webpack_require__(7162);
const linkedMap_1 = __webpack_require__(1109);
const events_1 = __webpack_require__(2479);
const cancellation_1 = __webpack_require__(6957);
var CancelNotification;
(function (CancelNotification) {
    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
})(CancelNotification || (CancelNotification = {}));
var ProgressToken;
(function (ProgressToken) {
    function is(value) {
        return typeof value === 'string' || typeof value === 'number';
    }
    ProgressToken.is = is;
})(ProgressToken || (exports.ProgressToken = ProgressToken = {}));
var ProgressNotification;
(function (ProgressNotification) {
    ProgressNotification.type = new messages_1.NotificationType('$/progress');
})(ProgressNotification || (ProgressNotification = {}));
class ProgressType {
    constructor() {
    }
}
exports.ProgressType = ProgressType;
var StarRequestHandler;
(function (StarRequestHandler) {
    function is(value) {
        return Is.func(value);
    }
    StarRequestHandler.is = is;
})(StarRequestHandler || (StarRequestHandler = {}));
exports.NullLogger = Object.freeze({
    error: () => { },
    warn: () => { },
    info: () => { },
    log: () => { }
});
var Trace;
(function (Trace) {
    Trace[Trace["Off"] = 0] = "Off";
    Trace[Trace["Messages"] = 1] = "Messages";
    Trace[Trace["Compact"] = 2] = "Compact";
    Trace[Trace["Verbose"] = 3] = "Verbose";
})(Trace || (exports.Trace = Trace = {}));
var TraceValues;
(function (TraceValues) {
    /**
     * Turn tracing off.
     */
    TraceValues.Off = 'off';
    /**
     * Trace messages only.
     */
    TraceValues.Messages = 'messages';
    /**
     * Compact message tracing.
     */
    TraceValues.Compact = 'compact';
    /**
     * Verbose message tracing.
     */
    TraceValues.Verbose = 'verbose';
})(TraceValues || (exports.TraceValues = TraceValues = {}));
(function (Trace) {
    function fromString(value) {
        if (!Is.string(value)) {
            return Trace.Off;
        }
        value = value.toLowerCase();
        switch (value) {
            case 'off':
                return Trace.Off;
            case 'messages':
                return Trace.Messages;
            case 'compact':
                return Trace.Compact;
            case 'verbose':
                return Trace.Verbose;
            default:
                return Trace.Off;
        }
    }
    Trace.fromString = fromString;
    function toString(value) {
        switch (value) {
            case Trace.Off:
                return 'off';
            case Trace.Messages:
                return 'messages';
            case Trace.Compact:
                return 'compact';
            case Trace.Verbose:
                return 'verbose';
            default:
                return 'off';
        }
    }
    Trace.toString = toString;
})(Trace || (exports.Trace = Trace = {}));
var TraceFormat;
(function (TraceFormat) {
    TraceFormat["Text"] = "text";
    TraceFormat["JSON"] = "json";
})(TraceFormat || (exports.TraceFormat = TraceFormat = {}));
(function (TraceFormat) {
    function fromString(value) {
        if (!Is.string(value)) {
            return TraceFormat.Text;
        }
        value = value.toLowerCase();
        if (value === 'json') {
            return TraceFormat.JSON;
        }
        else {
            return TraceFormat.Text;
        }
    }
    TraceFormat.fromString = fromString;
})(TraceFormat || (exports.TraceFormat = TraceFormat = {}));
var SetTraceNotification;
(function (SetTraceNotification) {
    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');
})(SetTraceNotification || (exports.SetTraceNotification = SetTraceNotification = {}));
var LogTraceNotification;
(function (LogTraceNotification) {
    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');
})(LogTraceNotification || (exports.LogTraceNotification = LogTraceNotification = {}));
var ConnectionErrors;
(function (ConnectionErrors) {
    /**
     * The connection is closed.
     */
    ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
    /**
     * The connection got disposed.
     */
    ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
    /**
     * The connection is already in listening mode.
     */
    ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
})(ConnectionErrors || (exports.ConnectionErrors = ConnectionErrors = {}));
class ConnectionError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        Object.setPrototypeOf(this, ConnectionError.prototype);
    }
}
exports.ConnectionError = ConnectionError;
var ConnectionStrategy;
(function (ConnectionStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.cancelUndispatched);
    }
    ConnectionStrategy.is = is;
})(ConnectionStrategy || (exports.ConnectionStrategy = ConnectionStrategy = {}));
var IdCancellationReceiverStrategy;
(function (IdCancellationReceiverStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && (candidate.kind === undefined || candidate.kind === 'id') && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
    }
    IdCancellationReceiverStrategy.is = is;
})(IdCancellationReceiverStrategy || (exports.IdCancellationReceiverStrategy = IdCancellationReceiverStrategy = {}));
var RequestCancellationReceiverStrategy;
(function (RequestCancellationReceiverStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && candidate.kind === 'request' && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
    }
    RequestCancellationReceiverStrategy.is = is;
})(RequestCancellationReceiverStrategy || (exports.RequestCancellationReceiverStrategy = RequestCancellationReceiverStrategy = {}));
var CancellationReceiverStrategy;
(function (CancellationReceiverStrategy) {
    CancellationReceiverStrategy.Message = Object.freeze({
        createCancellationTokenSource(_) {
            return new cancellation_1.CancellationTokenSource();
        }
    });
    function is(value) {
        return IdCancellationReceiverStrategy.is(value) || RequestCancellationReceiverStrategy.is(value);
    }
    CancellationReceiverStrategy.is = is;
})(CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = CancellationReceiverStrategy = {}));
var CancellationSenderStrategy;
(function (CancellationSenderStrategy) {
    CancellationSenderStrategy.Message = Object.freeze({
        sendCancellation(conn, id) {
            return conn.sendNotification(CancelNotification.type, { id });
        },
        cleanup(_) { }
    });
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);
    }
    CancellationSenderStrategy.is = is;
})(CancellationSenderStrategy || (exports.CancellationSenderStrategy = CancellationSenderStrategy = {}));
var CancellationStrategy;
(function (CancellationStrategy) {
    CancellationStrategy.Message = Object.freeze({
        receiver: CancellationReceiverStrategy.Message,
        sender: CancellationSenderStrategy.Message
    });
    function is(value) {
        const candidate = value;
        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
    }
    CancellationStrategy.is = is;
})(CancellationStrategy || (exports.CancellationStrategy = CancellationStrategy = {}));
var MessageStrategy;
(function (MessageStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.handleMessage);
    }
    MessageStrategy.is = is;
})(MessageStrategy || (exports.MessageStrategy = MessageStrategy = {}));
var ConnectionOptions;
(function (ConnectionOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy) || MessageStrategy.is(candidate.messageStrategy));
    }
    ConnectionOptions.is = is;
})(ConnectionOptions || (exports.ConnectionOptions = ConnectionOptions = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["New"] = 1] = "New";
    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
})(ConnectionState || (ConnectionState = {}));
function createMessageConnection(messageReader, messageWriter, _logger, options) {
    const logger = _logger !== undefined ? _logger : exports.NullLogger;
    let sequenceNumber = 0;
    let notificationSequenceNumber = 0;
    let unknownResponseSequenceNumber = 0;
    const version = '2.0';
    let starRequestHandler = undefined;
    const requestHandlers = new Map();
    let starNotificationHandler = undefined;
    const notificationHandlers = new Map();
    const progressHandlers = new Map();
    let timer;
    let messageQueue = new linkedMap_1.LinkedMap();
    let responsePromises = new Map();
    let knownCanceledRequests = new Set();
    let requestTokens = new Map();
    let trace = Trace.Off;
    let traceFormat = TraceFormat.Text;
    let tracer;
    let state = ConnectionState.New;
    const errorEmitter = new events_1.Emitter();
    const closeEmitter = new events_1.Emitter();
    const unhandledNotificationEmitter = new events_1.Emitter();
    const unhandledProgressEmitter = new events_1.Emitter();
    const disposeEmitter = new events_1.Emitter();
    const cancellationStrategy = (options && options.cancellationStrategy) ? options.cancellationStrategy : CancellationStrategy.Message;
    function createRequestQueueKey(id) {
        if (id === null) {
            throw new Error(`Can't send requests with id null since the response can't be correlated.`);
        }
        return 'req-' + id.toString();
    }
    function createResponseQueueKey(id) {
        if (id === null) {
            return 'res-unknown-' + (++unknownResponseSequenceNumber).toString();
        }
        else {
            return 'res-' + id.toString();
        }
    }
    function createNotificationQueueKey() {
        return 'not-' + (++notificationSequenceNumber).toString();
    }
    function addMessageToQueue(queue, message) {
        if (messages_1.Message.isRequest(message)) {
            queue.set(createRequestQueueKey(message.id), message);
        }
        else if (messages_1.Message.isResponse(message)) {
            queue.set(createResponseQueueKey(message.id), message);
        }
        else {
            queue.set(createNotificationQueueKey(), message);
        }
    }
    function cancelUndispatched(_message) {
        return undefined;
    }
    function isListening() {
        return state === ConnectionState.Listening;
    }
    function isClosed() {
        return state === ConnectionState.Closed;
    }
    function isDisposed() {
        return state === ConnectionState.Disposed;
    }
    function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
            state = ConnectionState.Closed;
            closeEmitter.fire(undefined);
        }
        // If the connection is disposed don't sent close events.
    }
    function readErrorHandler(error) {
        errorEmitter.fire([error, undefined, undefined]);
    }
    function writeErrorHandler(data) {
        errorEmitter.fire(data);
    }
    messageReader.onClose(closeHandler);
    messageReader.onError(readErrorHandler);
    messageWriter.onClose(closeHandler);
    messageWriter.onError(writeErrorHandler);
    function triggerMessageQueue() {
        if (timer || messageQueue.size === 0) {
            return;
        }
        timer = (0, ral_1.default)().timer.setImmediate(() => {
            timer = undefined;
            processMessageQueue();
        });
    }
    function handleMessage(message) {
        if (messages_1.Message.isRequest(message)) {
            handleRequest(message);
        }
        else if (messages_1.Message.isNotification(message)) {
            handleNotification(message);
        }
        else if (messages_1.Message.isResponse(message)) {
            handleResponse(message);
        }
        else {
            handleInvalidMessage(message);
        }
    }
    function processMessageQueue() {
        if (messageQueue.size === 0) {
            return;
        }
        const message = messageQueue.shift();
        try {
            const messageStrategy = options?.messageStrategy;
            if (MessageStrategy.is(messageStrategy)) {
                messageStrategy.handleMessage(message, handleMessage);
            }
            else {
                handleMessage(message);
            }
        }
        finally {
            triggerMessageQueue();
        }
    }
    const callback = (message) => {
        try {
            // We have received a cancellation message. Check if the message is still in the queue
            // and cancel it if allowed to do so.
            if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
                const cancelId = message.params.id;
                const key = createRequestQueueKey(cancelId);
                const toCancel = messageQueue.get(key);
                if (messages_1.Message.isRequest(toCancel)) {
                    const strategy = options?.connectionStrategy;
                    const response = (strategy && strategy.cancelUndispatched) ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                    if (response && (response.error !== undefined || response.result !== undefined)) {
                        messageQueue.delete(key);
                        requestTokens.delete(cancelId);
                        response.id = toCancel.id;
                        traceSendingResponse(response, message.method, Date.now());
                        messageWriter.write(response).catch(() => logger.error(`Sending response for canceled message failed.`));
                        return;
                    }
                }
                const cancellationToken = requestTokens.get(cancelId);
                // The request is already running. Cancel the token
                if (cancellationToken !== undefined) {
                    cancellationToken.cancel();
                    traceReceivedNotification(message);
                    return;
                }
                else {
                    // Remember the cancel but still queue the message to
                    // clean up state in process message.
                    knownCanceledRequests.add(cancelId);
                }
            }
            addMessageToQueue(messageQueue, message);
        }
        finally {
            triggerMessageQueue();
        }
    };
    function handleRequest(requestMessage) {
        if (isDisposed()) {
            // we return here silently since we fired an event when the
            // connection got disposed.
            return;
        }
        function reply(resultOrError, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id
            };
            if (resultOrError instanceof messages_1.ResponseError) {
                message.error = resultOrError.toJson();
            }
            else {
                message.result = resultOrError === undefined ? null : resultOrError;
            }
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replyError(error, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                error: error.toJson()
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replySuccess(result, method, startTime) {
            // The JSON RPC defines that a response must either have a result or an error
            // So we can't treat undefined as a valid response result.
            if (result === undefined) {
                result = null;
            }
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                result: result
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        traceReceivedRequest(requestMessage);
        const element = requestHandlers.get(requestMessage.method);
        let type;
        let requestHandler;
        if (element) {
            type = element.type;
            requestHandler = element.handler;
        }
        const startTime = Date.now();
        if (requestHandler || starRequestHandler) {
            const tokenKey = requestMessage.id ?? String(Date.now()); //
            const cancellationSource = IdCancellationReceiverStrategy.is(cancellationStrategy.receiver)
                ? cancellationStrategy.receiver.createCancellationTokenSource(tokenKey)
                : cancellationStrategy.receiver.createCancellationTokenSource(requestMessage);
            if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
                cancellationSource.cancel();
            }
            if (requestMessage.id !== null) {
                requestTokens.set(tokenKey, cancellationSource);
            }
            try {
                let handlerResult;
                if (requestHandler) {
                    if (requestMessage.params === undefined) {
                        if (type !== undefined && type.numberOfParams !== 0) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(cancellationSource.token);
                    }
                    else if (Array.isArray(requestMessage.params)) {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                    }
                }
                else if (starRequestHandler) {
                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                }
                const promise = handlerResult;
                if (!handlerResult) {
                    requestTokens.delete(tokenKey);
                    replySuccess(handlerResult, requestMessage.method, startTime);
                }
                else if (promise.then) {
                    promise.then((resultOrError) => {
                        requestTokens.delete(tokenKey);
                        reply(resultOrError, requestMessage.method, startTime);
                    }, error => {
                        requestTokens.delete(tokenKey);
                        if (error instanceof messages_1.ResponseError) {
                            replyError(error, requestMessage.method, startTime);
                        }
                        else if (error && Is.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                        }
                        else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                        }
                    });
                }
                else {
                    requestTokens.delete(tokenKey);
                    reply(handlerResult, requestMessage.method, startTime);
                }
            }
            catch (error) {
                requestTokens.delete(tokenKey);
                if (error instanceof messages_1.ResponseError) {
                    reply(error, requestMessage.method, startTime);
                }
                else if (error && Is.string(error.message)) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                }
                else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                }
            }
        }
        else {
            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
        }
    }
    function handleResponse(responseMessage) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        if (responseMessage.id === null) {
            if (responseMessage.error) {
                logger.error(`Received response message without id: Error is: \n${JSON.stringify(responseMessage.error, undefined, 4)}`);
            }
            else {
                logger.error(`Received response message without id. No further error information provided.`);
            }
        }
        else {
            const key = responseMessage.id;
            const responsePromise = responsePromises.get(key);
            traceReceivedResponse(responseMessage, responsePromise);
            if (responsePromise !== undefined) {
                responsePromises.delete(key);
                try {
                    if (responseMessage.error) {
                        const error = responseMessage.error;
                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                    }
                    else if (responseMessage.result !== undefined) {
                        responsePromise.resolve(responseMessage.result);
                    }
                    else {
                        throw new Error('Should never happen.');
                    }
                }
                catch (error) {
                    if (error.message) {
                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                    }
                    else {
                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                    }
                }
            }
        }
    }
    function handleNotification(message) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        let type = undefined;
        let notificationHandler;
        if (message.method === CancelNotification.type.method) {
            const cancelId = message.params.id;
            knownCanceledRequests.delete(cancelId);
            traceReceivedNotification(message);
            return;
        }
        else {
            const element = notificationHandlers.get(message.method);
            if (element) {
                notificationHandler = element.handler;
                type = element.type;
            }
        }
        if (notificationHandler || starNotificationHandler) {
            try {
                traceReceivedNotification(message);
                if (notificationHandler) {
                    if (message.params === undefined) {
                        if (type !== undefined) {
                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                            }
                        }
                        notificationHandler();
                    }
                    else if (Array.isArray(message.params)) {
                        // There are JSON-RPC libraries that send progress message as positional params although
                        // specified as named. So convert them if this is the case.
                        const params = message.params;
                        if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                            notificationHandler({ token: params[0], value: params[1] });
                        }
                        else {
                            if (type !== undefined) {
                                if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                    logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                                }
                                if (type.numberOfParams !== message.params.length) {
                                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                                }
                            }
                            notificationHandler(...params);
                        }
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                        }
                        notificationHandler(message.params);
                    }
                }
                else if (starNotificationHandler) {
                    starNotificationHandler(message.method, message.params);
                }
            }
            catch (error) {
                if (error.message) {
                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                }
                else {
                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                }
            }
        }
        else {
            unhandledNotificationEmitter.fire(message);
        }
    }
    function handleInvalidMessage(message) {
        if (!message) {
            logger.error('Received empty message.');
            return;
        }
        logger.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(message, null, 4)}`);
        // Test whether we find an id to reject the promise
        const responseMessage = message;
        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
            const key = responseMessage.id;
            const responseHandler = responsePromises.get(key);
            if (responseHandler) {
                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
            }
        }
    }
    function stringifyTrace(params) {
        if (params === undefined || params === null) {
            return undefined;
        }
        switch (trace) {
            case Trace.Verbose:
                return JSON.stringify(params, null, 4);
            case Trace.Compact:
                return JSON.stringify(params);
            default:
                return undefined;
        }
    }
    function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                data = `Params: ${stringifyTrace(message.params)}\n\n`;
            }
            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('send-request', message);
        }
    }
    function traceSendingNotification(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.params) {
                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Sending notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('send-notification', message);
        }
    }
    function traceSendingResponse(message, method, startTime) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.error && message.error.data) {
                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
        }
        else {
            logLSPMessage('send-response', message);
        }
    }
    function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                data = `Params: ${stringifyTrace(message.params)}\n\n`;
            }
            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('receive-request', message);
        }
    }
    function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.params) {
                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Received notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('receive-notification', message);
        }
    }
    function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.error && message.error.data) {
                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            if (responsePromise) {
                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';
                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
            }
            else {
                tracer.log(`Received response ${message.id} without active response promise.`, data);
            }
        }
        else {
            logLSPMessage('receive-response', message);
        }
    }
    function logLSPMessage(type, message) {
        if (!tracer || trace === Trace.Off) {
            return;
        }
        const lspMessage = {
            isLSPMessage: true,
            type,
            message,
            timestamp: Date.now()
        };
        tracer.log(lspMessage);
    }
    function throwIfClosedOrDisposed() {
        if (isClosed()) {
            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
        }
        if (isDisposed()) {
            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
        }
    }
    function throwIfListening() {
        if (isListening()) {
            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
        }
    }
    function throwIfNotListening() {
        if (!isListening()) {
            throw new Error('Call listen() first.');
        }
    }
    function undefinedToNull(param) {
        if (param === undefined) {
            return null;
        }
        else {
            return param;
        }
    }
    function nullToUndefined(param) {
        if (param === null) {
            return undefined;
        }
        else {
            return param;
        }
    }
    function isNamedParam(param) {
        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';
    }
    function computeSingleParam(parameterStructures, param) {
        switch (parameterStructures) {
            case messages_1.ParameterStructures.auto:
                if (isNamedParam(param)) {
                    return nullToUndefined(param);
                }
                else {
                    return [undefinedToNull(param)];
                }
            case messages_1.ParameterStructures.byName:
                if (!isNamedParam(param)) {
                    throw new Error(`Received parameters by name but param is not an object literal.`);
                }
                return nullToUndefined(param);
            case messages_1.ParameterStructures.byPosition:
                return [undefinedToNull(param)];
            default:
                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
        }
    }
    function computeMessageParams(type, params) {
        let result;
        const numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
            case 0:
                result = undefined;
                break;
            case 1:
                result = computeSingleParam(type.parameterStructures, params[0]);
                break;
            default:
                result = [];
                for (let i = 0; i < params.length && i < numberOfParams; i++) {
                    result.push(undefinedToNull(params[i]));
                }
                if (params.length < numberOfParams) {
                    for (let i = params.length; i < numberOfParams; i++) {
                        result.push(null);
                    }
                }
                break;
        }
        return result;
    }
    const connection = {
        sendNotification: (type, ...args) => {
            throwIfClosedOrDisposed();
            let method;
            let messageParams;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
            }
            const notificationMessage = {
                jsonrpc: version,
                method: method,
                params: messageParams
            };
            traceSendingNotification(notificationMessage);
            return messageWriter.write(notificationMessage).catch((error) => {
                logger.error(`Sending notification failed.`);
                throw error;
            });
        },
        onNotification: (type, handler) => {
            throwIfClosedOrDisposed();
            let method;
            if (Is.func(type)) {
                starNotificationHandler = type;
            }
            else if (handler) {
                if (Is.string(type)) {
                    method = type;
                    notificationHandlers.set(type, { type: undefined, handler });
                }
                else {
                    method = type.method;
                    notificationHandlers.set(type.method, { type, handler });
                }
            }
            return {
                dispose: () => {
                    if (method !== undefined) {
                        notificationHandlers.delete(method);
                    }
                    else {
                        starNotificationHandler = undefined;
                    }
                }
            };
        },
        onProgress: (_type, token, handler) => {
            if (progressHandlers.has(token)) {
                throw new Error(`Progress handler for token ${token} already registered`);
            }
            progressHandlers.set(token, handler);
            return {
                dispose: () => {
                    progressHandlers.delete(token);
                }
            };
        },
        sendProgress: (_type, token, value) => {
            // This should not await but simple return to ensure that we don't have another
            // async scheduling. Otherwise one send could overtake another send.
            return connection.sendNotification(ProgressNotification.type, { token, value });
        },
        onUnhandledProgress: unhandledProgressEmitter.event,
        sendRequest: (type, ...args) => {
            throwIfClosedOrDisposed();
            throwIfNotListening();
            let method;
            let messageParams;
            let token = undefined;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                const last = args[args.length - 1];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                if (cancellation_1.CancellationToken.is(last)) {
                    paramEnd = paramEnd - 1;
                    token = last;
                }
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
                const numberOfParams = type.numberOfParams;
                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
            }
            const id = sequenceNumber++;
            let disposable;
            if (token) {
                disposable = token.onCancellationRequested(() => {
                    const p = cancellationStrategy.sender.sendCancellation(connection, id);
                    if (p === undefined) {
                        logger.log(`Received no promise from cancellation strategy when cancelling id ${id}`);
                        return Promise.resolve();
                    }
                    else {
                        return p.catch(() => {
                            logger.log(`Sending cancellation messages for id ${id} failed`);
                        });
                    }
                });
            }
            const requestMessage = {
                jsonrpc: version,
                id: id,
                method: method,
                params: messageParams
            };
            traceSendingRequest(requestMessage);
            if (typeof cancellationStrategy.sender.enableCancellation === 'function') {
                cancellationStrategy.sender.enableCancellation(requestMessage);
            }
            return new Promise(async (resolve, reject) => {
                const resolveWithCleanup = (r) => {
                    resolve(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable?.dispose();
                };
                const rejectWithCleanup = (r) => {
                    reject(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable?.dispose();
                };
                const responsePromise = { method: method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };
                try {
                    await messageWriter.write(requestMessage);
                    responsePromises.set(id, responsePromise);
                }
                catch (error) {
                    logger.error(`Sending request failed.`);
                    // Writing the message failed. So we need to reject the promise.
                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, error.message ? error.message : 'Unknown reason'));
                    throw error;
                }
            });
        },
        onRequest: (type, handler) => {
            throwIfClosedOrDisposed();
            let method = null;
            if (StarRequestHandler.is(type)) {
                method = undefined;
                starRequestHandler = type;
            }
            else if (Is.string(type)) {
                method = null;
                if (handler !== undefined) {
                    method = type;
                    requestHandlers.set(type, { handler: handler, type: undefined });
                }
            }
            else {
                if (handler !== undefined) {
                    method = type.method;
                    requestHandlers.set(type.method, { type, handler });
                }
            }
            return {
                dispose: () => {
                    if (method === null) {
                        return;
                    }
                    if (method !== undefined) {
                        requestHandlers.delete(method);
                    }
                    else {
                        starRequestHandler = undefined;
                    }
                }
            };
        },
        hasPendingResponse: () => {
            return responsePromises.size > 0;
        },
        trace: async (_value, _tracer, sendNotificationOrTraceOptions) => {
            let _sendNotification = false;
            let _traceFormat = TraceFormat.Text;
            if (sendNotificationOrTraceOptions !== undefined) {
                if (Is.boolean(sendNotificationOrTraceOptions)) {
                    _sendNotification = sendNotificationOrTraceOptions;
                }
                else {
                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                }
            }
            trace = _value;
            traceFormat = _traceFormat;
            if (trace === Trace.Off) {
                tracer = undefined;
            }
            else {
                tracer = _tracer;
            }
            if (_sendNotification && !isClosed() && !isDisposed()) {
                await connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
            }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        end: () => {
            messageWriter.end();
        },
        dispose: () => {
            if (isDisposed()) {
                return;
            }
            state = ConnectionState.Disposed;
            disposeEmitter.fire(undefined);
            const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, 'Pending response rejected since connection got disposed');
            for (const promise of responsePromises.values()) {
                promise.reject(error);
            }
            responsePromises = new Map();
            requestTokens = new Map();
            knownCanceledRequests = new Set();
            messageQueue = new linkedMap_1.LinkedMap();
            // Test for backwards compatibility
            if (Is.func(messageWriter.dispose)) {
                messageWriter.dispose();
            }
            if (Is.func(messageReader.dispose)) {
                messageReader.dispose();
            }
        },
        listen: () => {
            throwIfClosedOrDisposed();
            throwIfListening();
            state = ConnectionState.Listening;
            messageReader.listen(callback);
        },
        inspect: () => {
            // eslint-disable-next-line no-console
            (0, ral_1.default)().console.log('inspect');
        }
    };
    connection.onNotification(LogTraceNotification.type, (params) => {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        const verbose = trace === Trace.Verbose || trace === Trace.Compact;
        tracer.log(params.message, verbose ? params.verbose : undefined);
    });
    connection.onNotification(ProgressNotification.type, (params) => {
        const handler = progressHandlers.get(params.token);
        if (handler) {
            handler(params.value);
        }
        else {
            unhandledProgressEmitter.fire(params);
        }
    });
    return connection;
}
exports.createMessageConnection = createMessageConnection;


/***/ }),

/***/ 8844:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Disposable = void 0;
var Disposable;
(function (Disposable) {
    function create(func) {
        return {
            dispose: func
        };
    }
    Disposable.create = create;
})(Disposable || (exports.Disposable = Disposable = {}));


/***/ }),

/***/ 2479:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Emitter = exports.Event = void 0;
const ral_1 = __webpack_require__(5091);
var Event;
(function (Event) {
    const _disposable = { dispose() { } };
    Event.None = function () { return _disposable; };
})(Event || (exports.Event = Event = {}));
class CallbackList {
    add(callback, context = null, bucket) {
        if (!this._callbacks) {
            this._callbacks = [];
            this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
            bucket.push({ dispose: () => this.remove(callback, context) });
        }
    }
    remove(callback, context = null) {
        if (!this._callbacks) {
            return;
        }
        let foundCallbackWithDifferentContext = false;
        for (let i = 0, len = this._callbacks.length; i < len; i++) {
            if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                    // callback & context match => remove it
                    this._callbacks.splice(i, 1);
                    this._contexts.splice(i, 1);
                    return;
                }
                else {
                    foundCallbackWithDifferentContext = true;
                }
            }
        }
        if (foundCallbackWithDifferentContext) {
            throw new Error('When adding a listener with a context, you should remove it with the same context');
        }
    }
    invoke(...args) {
        if (!this._callbacks) {
            return [];
        }
        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
        for (let i = 0, len = callbacks.length; i < len; i++) {
            try {
                ret.push(callbacks[i].apply(contexts[i], args));
            }
            catch (e) {
                // eslint-disable-next-line no-console
                (0, ral_1.default)().console.error(e);
            }
        }
        return ret;
    }
    isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
    }
    dispose() {
        this._callbacks = undefined;
        this._contexts = undefined;
    }
}
class Emitter {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
        if (!this._event) {
            this._event = (listener, thisArgs, disposables) => {
                if (!this._callbacks) {
                    this._callbacks = new CallbackList();
                }
                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                    this._options.onFirstListenerAdd(this);
                }
                this._callbacks.add(listener, thisArgs);
                const result = {
                    dispose: () => {
                        if (!this._callbacks) {
                            // disposable is disposed after emitter is disposed.
                            return;
                        }
                        this._callbacks.remove(listener, thisArgs);
                        result.dispose = Emitter._noop;
                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                            this._options.onLastListenerRemove(this);
                        }
                    }
                };
                if (Array.isArray(disposables)) {
                    disposables.push(result);
                }
                return result;
            };
        }
        return this._event;
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
        if (this._callbacks) {
            this._callbacks.invoke.call(this._callbacks, event);
        }
    }
    dispose() {
        if (this._callbacks) {
            this._callbacks.dispose();
            this._callbacks = undefined;
        }
    }
}
exports.Emitter = Emitter;
Emitter._noop = function () { };


/***/ }),

/***/ 6618:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;


/***/ }),

/***/ 1109:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LRUCache = exports.LinkedMap = exports.Touch = void 0;
var Touch;
(function (Touch) {
    Touch.None = 0;
    Touch.First = 1;
    Touch.AsOld = Touch.First;
    Touch.Last = 2;
    Touch.AsNew = Touch.Last;
})(Touch || (exports.Touch = Touch = {}));
class LinkedMap {
    constructor() {
        this[_a] = 'LinkedMap';
        this._map = new Map();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state = 0;
    }
    clear() {
        this._map.clear();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state++;
    }
    isEmpty() {
        return !this._head && !this._tail;
    }
    get size() {
        return this._size;
    }
    get first() {
        return this._head?.value;
    }
    get last() {
        return this._tail?.value;
    }
    has(key) {
        return this._map.has(key);
    }
    get(key, touch = Touch.None) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        if (touch !== Touch.None) {
            this.touch(item, touch);
        }
        return item.value;
    }
    set(key, value, touch = Touch.None) {
        let item = this._map.get(key);
        if (item) {
            item.value = value;
            if (touch !== Touch.None) {
                this.touch(item, touch);
            }
        }
        else {
            item = { key, value, next: undefined, previous: undefined };
            switch (touch) {
                case Touch.None:
                    this.addItemLast(item);
                    break;
                case Touch.First:
                    this.addItemFirst(item);
                    break;
                case Touch.Last:
                    this.addItemLast(item);
                    break;
                default:
                    this.addItemLast(item);
                    break;
            }
            this._map.set(key, item);
            this._size++;
        }
        return this;
    }
    delete(key) {
        return !!this.remove(key);
    }
    remove(key) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    shift() {
        if (!this._head && !this._tail) {
            return undefined;
        }
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    forEach(callbackfn, thisArg) {
        const state = this._state;
        let current = this._head;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            }
            else {
                callbackfn(current.value, current.key, this);
            }
            if (this._state !== state) {
                throw new Error(`LinkedMap got modified during iteration.`);
            }
            current = current.next;
        }
    }
    keys() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.key, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    values() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.value, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    entries() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: [current.key, current.value], done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    [(_a = Symbol.toStringTag, Symbol.iterator)]() {
        return this.entries();
    }
    trimOld(newSize) {
        if (newSize >= this.size) {
            return;
        }
        if (newSize === 0) {
            this.clear();
            return;
        }
        let current = this._head;
        let currentSize = this.size;
        while (current && currentSize > newSize) {
            this._map.delete(current.key);
            current = current.next;
            currentSize--;
        }
        this._head = current;
        this._size = currentSize;
        if (current) {
            current.previous = undefined;
        }
        this._state++;
    }
    addItemFirst(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._tail = item;
        }
        else if (!this._head) {
            throw new Error('Invalid list');
        }
        else {
            item.next = this._head;
            this._head.previous = item;
        }
        this._head = item;
        this._state++;
    }
    addItemLast(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._head = item;
        }
        else if (!this._tail) {
            throw new Error('Invalid list');
        }
        else {
            item.previous = this._tail;
            this._tail.next = item;
        }
        this._tail = item;
        this._state++;
    }
    removeItem(item) {
        if (item === this._head && item === this._tail) {
            this._head = undefined;
            this._tail = undefined;
        }
        else if (item === this._head) {
            // This can only happened if size === 1 which is handle
            // by the case above.
            if (!item.next) {
                throw new Error('Invalid list');
            }
            item.next.previous = undefined;
            this._head = item.next;
        }
        else if (item === this._tail) {
            // This can only happened if size === 1 which is handle
            // by the case above.
            if (!item.previous) {
                throw new Error('Invalid list');
            }
            item.previous.next = undefined;
            this._tail = item.previous;
        }
        else {
            const next = item.next;
            const previous = item.previous;
            if (!next || !previous) {
                throw new Error('Invalid list');
            }
            next.previous = previous;
            previous.next = next;
        }
        item.next = undefined;
        item.previous = undefined;
        this._state++;
    }
    touch(item, touch) {
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        if ((touch !== Touch.First && touch !== Touch.Last)) {
            return;
        }
        if (touch === Touch.First) {
            if (item === this._head) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item
            if (item === this._tail) {
                // previous must be defined since item was not head but is tail
                // So there are more than on item in the map
                previous.next = undefined;
                this._tail = previous;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            // Insert the node at head
            item.previous = undefined;
            item.next = this._head;
            this._head.previous = item;
            this._head = item;
            this._state++;
        }
        else if (touch === Touch.Last) {
            if (item === this._tail) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item.
            if (item === this._head) {
                // next must be defined since item was not tail but is head
                // So there are more than on item in the map
                next.previous = undefined;
                this._head = next;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            item.next = undefined;
            item.previous = this._tail;
            this._tail.next = item;
            this._tail = item;
            this._state++;
        }
    }
    toJSON() {
        const data = [];
        this.forEach((value, key) => {
            data.push([key, value]);
        });
        return data;
    }
    fromJSON(data) {
        this.clear();
        for (const [key, value] of data) {
            this.set(key, value);
        }
    }
}
exports.LinkedMap = LinkedMap;
class LRUCache extends LinkedMap {
    constructor(limit, ratio = 1) {
        super();
        this._limit = limit;
        this._ratio = Math.min(Math.max(0, ratio), 1);
    }
    get limit() {
        return this._limit;
    }
    set limit(limit) {
        this._limit = limit;
        this.checkTrim();
    }
    get ratio() {
        return this._ratio;
    }
    set ratio(ratio) {
        this._ratio = Math.min(Math.max(0, ratio), 1);
        this.checkTrim();
    }
    get(key, touch = Touch.AsNew) {
        return super.get(key, touch);
    }
    peek(key) {
        return super.get(key, Touch.None);
    }
    set(key, value) {
        super.set(key, value, Touch.Last);
        this.checkTrim();
        return this;
    }
    checkTrim() {
        if (this.size > this._limit) {
            this.trimOld(Math.round(this._limit * this._ratio));
        }
    }
}
exports.LRUCache = LRUCache;


/***/ }),

/***/ 9805:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractMessageBuffer = void 0;
const CR = 13;
const LF = 10;
const CRLF = '\r\n';
class AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        this._encoding = encoding;
        this._chunks = [];
        this._totalLength = 0;
    }
    get encoding() {
        return this._encoding;
    }
    append(chunk) {
        const toAppend = typeof chunk === 'string' ? this.fromString(chunk, this._encoding) : chunk;
        this._chunks.push(toAppend);
        this._totalLength += toAppend.byteLength;
    }
    tryReadHeaders(lowerCaseKeys = false) {
        if (this._chunks.length === 0) {
            return undefined;
        }
        let state = 0;
        let chunkIndex = 0;
        let offset = 0;
        let chunkBytesRead = 0;
        row: while (chunkIndex < this._chunks.length) {
            const chunk = this._chunks[chunkIndex];
            offset = 0;
            column: while (offset < chunk.length) {
                const value = chunk[offset];
                switch (value) {
                    case CR:
                        switch (state) {
                            case 0:
                                state = 1;
                                break;
                            case 2:
                                state = 3;
                                break;
                            default:
                                state = 0;
                        }
                        break;
                    case LF:
                        switch (state) {
                            case 1:
                                state = 2;
                                break;
                            case 3:
                                state = 4;
                                offset++;
                                break row;
                            default:
                                state = 0;
                        }
                        break;
                    default:
                        state = 0;
                }
                offset++;
            }
            chunkBytesRead += chunk.byteLength;
            chunkIndex++;
        }
        if (state !== 4) {
            return undefined;
        }
        // The buffer contains the two CRLF at the end. So we will
        // have two empty lines after the split at the end as well.
        const buffer = this._read(chunkBytesRead + offset);
        const result = new Map();
        const headers = this.toString(buffer, 'ascii').split(CRLF);
        if (headers.length < 2) {
            return result;
        }
        for (let i = 0; i < headers.length - 2; i++) {
            const header = headers[i];
            const index = header.indexOf(':');
            if (index === -1) {
                throw new Error(`Message header must separate key and value using ':'\n${header}`);
            }
            const key = header.substr(0, index);
            const value = header.substr(index + 1).trim();
            result.set(lowerCaseKeys ? key.toLowerCase() : key, value);
        }
        return result;
    }
    tryReadBody(length) {
        if (this._totalLength < length) {
            return undefined;
        }
        return this._read(length);
    }
    get numberOfBytes() {
        return this._totalLength;
    }
    _read(byteCount) {
        if (byteCount === 0) {
            return this.emptyBuffer();
        }
        if (byteCount > this._totalLength) {
            throw new Error(`Cannot read so many bytes!`);
        }
        if (this._chunks[0].byteLength === byteCount) {
            // super fast path, precisely first chunk must be returned
            const chunk = this._chunks[0];
            this._chunks.shift();
            this._totalLength -= byteCount;
            return this.asNative(chunk);
        }
        if (this._chunks[0].byteLength > byteCount) {
            // fast path, the reading is entirely within the first chunk
            const chunk = this._chunks[0];
            const result = this.asNative(chunk, byteCount);
            this._chunks[0] = chunk.slice(byteCount);
            this._totalLength -= byteCount;
            return result;
        }
        const result = this.allocNative(byteCount);
        let resultOffset = 0;
        let chunkIndex = 0;
        while (byteCount > 0) {
            const chunk = this._chunks[chunkIndex];
            if (chunk.byteLength > byteCount) {
                // this chunk will survive
                const chunkPart = chunk.slice(0, byteCount);
                result.set(chunkPart, resultOffset);
                resultOffset += byteCount;
                this._chunks[chunkIndex] = chunk.slice(byteCount);
                this._totalLength -= byteCount;
                byteCount -= byteCount;
            }
            else {
                // this chunk will be entirely read
                result.set(chunk, resultOffset);
                resultOffset += chunk.byteLength;
                this._chunks.shift();
                this._totalLength -= chunk.byteLength;
                byteCount -= chunk.byteLength;
            }
        }
        return result;
    }
}
exports.AbstractMessageBuffer = AbstractMessageBuffer;


/***/ }),

/***/ 656:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;
const ral_1 = __webpack_require__(5091);
const Is = __webpack_require__(6618);
const events_1 = __webpack_require__(2479);
const semaphore_1 = __webpack_require__(418);
var MessageReader;
(function (MessageReader) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) &&
            Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
    }
    MessageReader.is = is;
})(MessageReader || (exports.MessageReader = MessageReader = {}));
class AbstractMessageReader {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error) {
        this.errorEmitter.fire(this.asError(error));
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    get onPartialMessage() {
        return this.partialMessageEmitter.event;
    }
    firePartialMessage(info) {
        this.partialMessageEmitter.fire(info);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageReader = AbstractMessageReader;
var ResolvedMessageReaderOptions;
(function (ResolvedMessageReaderOptions) {
    function fromOptions(options) {
        let charset;
        let result;
        let contentDecoder;
        const contentDecoders = new Map();
        let contentTypeDecoder;
        const contentTypeDecoders = new Map();
        if (options === undefined || typeof options === 'string') {
            charset = options ?? 'utf-8';
        }
        else {
            charset = options.charset ?? 'utf-8';
            if (options.contentDecoder !== undefined) {
                contentDecoder = options.contentDecoder;
                contentDecoders.set(contentDecoder.name, contentDecoder);
            }
            if (options.contentDecoders !== undefined) {
                for (const decoder of options.contentDecoders) {
                    contentDecoders.set(decoder.name, decoder);
                }
            }
            if (options.contentTypeDecoder !== undefined) {
                contentTypeDecoder = options.contentTypeDecoder;
                contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
            }
            if (options.contentTypeDecoders !== undefined) {
                for (const decoder of options.contentTypeDecoders) {
                    contentTypeDecoders.set(decoder.name, decoder);
                }
            }
        }
        if (contentTypeDecoder === undefined) {
            contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
        }
        return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };
    }
    ResolvedMessageReaderOptions.fromOptions = fromOptions;
})(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
class ReadableStreamMessageReader extends AbstractMessageReader {
    constructor(readable, options) {
        super();
        this.readable = readable;
        this.options = ResolvedMessageReaderOptions.fromOptions(options);
        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
        this._partialMessageTimeout = 10000;
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.readSemaphore = new semaphore_1.Semaphore(1);
    }
    set partialMessageTimeout(timeout) {
        this._partialMessageTimeout = timeout;
    }
    get partialMessageTimeout() {
        return this._partialMessageTimeout;
    }
    listen(callback) {
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = undefined;
        this.callback = callback;
        const result = this.readable.onData((data) => {
            this.onData(data);
        });
        this.readable.onError((error) => this.fireError(error));
        this.readable.onClose(() => this.fireClose());
        return result;
    }
    onData(data) {
        try {
            this.buffer.append(data);
            while (true) {
                if (this.nextMessageLength === -1) {
                    const headers = this.buffer.tryReadHeaders(true);
                    if (!headers) {
                        return;
                    }
                    const contentLength = headers.get('content-length');
                    if (!contentLength) {
                        this.fireError(new Error(`Header must provide a Content-Length property.\n${JSON.stringify(Object.fromEntries(headers))}`));
                        return;
                    }
                    const length = parseInt(contentLength);
                    if (isNaN(length)) {
                        this.fireError(new Error(`Content-Length value must be a number. Got ${contentLength}`));
                        return;
                    }
                    this.nextMessageLength = length;
                }
                const body = this.buffer.tryReadBody(this.nextMessageLength);
                if (body === undefined) {
                    /** We haven't received the full message yet. */
                    this.setPartialMessageTimer();
                    return;
                }
                this.clearPartialMessageTimer();
                this.nextMessageLength = -1;
                // Make sure that we convert one received message after the
                // other. Otherwise it could happen that a decoding of a second
                // smaller message finished before the decoding of a first larger
                // message and then we would deliver the second message first.
                this.readSemaphore.lock(async () => {
                    const bytes = this.options.contentDecoder !== undefined
                        ? await this.options.contentDecoder.decode(body)
                        : body;
                    const message = await this.options.contentTypeDecoder.decode(bytes, this.options);
                    this.callback(message);
                }).catch((error) => {
                    this.fireError(error);
                });
            }
        }
        catch (error) {
            this.fireError(error);
        }
    }
    clearPartialMessageTimer() {
        if (this.partialMessageTimer) {
            this.partialMessageTimer.dispose();
            this.partialMessageTimer = undefined;
        }
    }
    setPartialMessageTimer() {
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
            return;
        }
        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout) => {
            this.partialMessageTimer = undefined;
            if (token === this.messageToken) {
                this.firePartialMessage({ messageToken: token, waitingTime: timeout });
                this.setPartialMessageTimer();
            }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
    }
}
exports.ReadableStreamMessageReader = ReadableStreamMessageReader;


/***/ }),

/***/ 9036:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;
const ral_1 = __webpack_require__(5091);
const Is = __webpack_require__(6618);
const semaphore_1 = __webpack_require__(418);
const events_1 = __webpack_require__(2479);
const ContentLength = 'Content-Length: ';
const CRLF = '\r\n';
var MessageWriter;
(function (MessageWriter) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) &&
            Is.func(candidate.onError) && Is.func(candidate.write);
    }
    MessageWriter.is = is;
})(MessageWriter || (exports.MessageWriter = MessageWriter = {}));
class AbstractMessageWriter {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Writer received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageWriter = AbstractMessageWriter;
var ResolvedMessageWriterOptions;
(function (ResolvedMessageWriterOptions) {
    function fromOptions(options) {
        if (options === undefined || typeof options === 'string') {
            return { charset: options ?? 'utf-8', contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder };
        }
        else {
            return { charset: options.charset ?? 'utf-8', contentEncoder: options.contentEncoder, contentTypeEncoder: options.contentTypeEncoder ?? (0, ral_1.default)().applicationJson.encoder };
        }
    }
    ResolvedMessageWriterOptions.fromOptions = fromOptions;
})(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
class WriteableStreamMessageWriter extends AbstractMessageWriter {
    constructor(writable, options) {
        super();
        this.writable = writable;
        this.options = ResolvedMessageWriterOptions.fromOptions(options);
        this.errorCount = 0;
        this.writeSemaphore = new semaphore_1.Semaphore(1);
        this.writable.onError((error) => this.fireError(error));
        this.writable.onClose(() => this.fireClose());
    }
    async write(msg) {
        return this.writeSemaphore.lock(async () => {
            const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer) => {
                if (this.options.contentEncoder !== undefined) {
                    return this.options.contentEncoder.encode(buffer);
                }
                else {
                    return buffer;
                }
            });
            return payload.then((buffer) => {
                const headers = [];
                headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                headers.push(CRLF);
                return this.doWrite(msg, headers, buffer);
            }, (error) => {
                this.fireError(error);
                throw error;
            });
        });
    }
    async doWrite(msg, headers, data) {
        try {
            await this.writable.write(headers.join(''), 'ascii');
            return this.writable.write(data);
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
        this.writable.end();
    }
}
exports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;


/***/ }),

/***/ 7162:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Message = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
const is = __webpack_require__(6618);
/**
 * Predefined error codes.
 */
var ErrorCodes;
(function (ErrorCodes) {
    // Defined by JSON RPC
    ErrorCodes.ParseError = -32700;
    ErrorCodes.InvalidRequest = -32600;
    ErrorCodes.MethodNotFound = -32601;
    ErrorCodes.InvalidParams = -32602;
    ErrorCodes.InternalError = -32603;
    /**
     * This is the start range of JSON RPC reserved error codes.
     * It doesn't denote a real error code. No application error codes should
     * be defined between the start and end range. For backwards
     * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
     * are left in the range.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeStart = -32099;
    /** @deprecated use  jsonrpcReservedErrorRangeStart */
    ErrorCodes.serverErrorStart = -32099;
    /**
     * An error occurred when write a message to the transport layer.
     */
    ErrorCodes.MessageWriteError = -32099;
    /**
     * An error occurred when reading a message from the transport layer.
     */
    ErrorCodes.MessageReadError = -32098;
    /**
     * The connection got disposed or lost and all pending responses got
     * rejected.
     */
    ErrorCodes.PendingResponseRejected = -32097;
    /**
     * The connection is inactive and a use of it failed.
     */
    ErrorCodes.ConnectionInactive = -32096;
    /**
     * Error code indicating that a server received a notification or
     * request before the server has received the `initialize` request.
     */
    ErrorCodes.ServerNotInitialized = -32002;
    ErrorCodes.UnknownErrorCode = -32001;
    /**
     * This is the end range of JSON RPC reserved error codes.
     * It doesn't denote a real error code.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeEnd = -32000;
    /** @deprecated use  jsonrpcReservedErrorRangeEnd */
    ErrorCodes.serverErrorEnd = -32000;
})(ErrorCodes || (exports.ErrorCodes = ErrorCodes = {}));
/**
 * An error object return in a response in case a request
 * has failed.
 */
class ResponseError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, ResponseError.prototype);
    }
    toJson() {
        const result = {
            code: this.code,
            message: this.message
        };
        if (this.data !== undefined) {
            result.data = this.data;
        }
        return result;
    }
}
exports.ResponseError = ResponseError;
class ParameterStructures {
    constructor(kind) {
        this.kind = kind;
    }
    static is(value) {
        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
    }
    toString() {
        return this.kind;
    }
}
exports.ParameterStructures = ParameterStructures;
/**
 * The parameter structure is automatically inferred on the number of parameters
 * and the parameter type in case of a single param.
 */
ParameterStructures.auto = new ParameterStructures('auto');
/**
 * Forces `byPosition` parameter structure. This is useful if you have a single
 * parameter which has a literal type.
 */
ParameterStructures.byPosition = new ParameterStructures('byPosition');
/**
 * Forces `byName` parameter structure. This is only useful when having a single
 * parameter. The library will report errors if used with a different number of
 * parameters.
 */
ParameterStructures.byName = new ParameterStructures('byName');
/**
 * An abstract implementation of a MessageType.
 */
class AbstractMessageSignature {
    constructor(method, numberOfParams) {
        this.method = method;
        this.numberOfParams = numberOfParams;
    }
    get parameterStructures() {
        return ParameterStructures.auto;
    }
}
exports.AbstractMessageSignature = AbstractMessageSignature;
/**
 * Classes to type request response pairs
 */
class RequestType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.RequestType0 = RequestType0;
class RequestType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType = RequestType;
class RequestType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType1 = RequestType1;
class RequestType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.RequestType2 = RequestType2;
class RequestType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.RequestType3 = RequestType3;
class RequestType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.RequestType4 = RequestType4;
class RequestType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.RequestType5 = RequestType5;
class RequestType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.RequestType6 = RequestType6;
class RequestType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.RequestType7 = RequestType7;
class RequestType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.RequestType8 = RequestType8;
class RequestType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.RequestType9 = RequestType9;
class NotificationType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType = NotificationType;
class NotificationType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.NotificationType0 = NotificationType0;
class NotificationType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType1 = NotificationType1;
class NotificationType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.NotificationType2 = NotificationType2;
class NotificationType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.NotificationType3 = NotificationType3;
class NotificationType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.NotificationType4 = NotificationType4;
class NotificationType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.NotificationType5 = NotificationType5;
class NotificationType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.NotificationType6 = NotificationType6;
class NotificationType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.NotificationType7 = NotificationType7;
class NotificationType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.NotificationType8 = NotificationType8;
class NotificationType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.NotificationType9 = NotificationType9;
var Message;
(function (Message) {
    /**
     * Tests if the given message is a request message
     */
    function isRequest(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
    }
    Message.isRequest = isRequest;
    /**
     * Tests if the given message is a notification message
     */
    function isNotification(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && message.id === void 0;
    }
    Message.isNotification = isNotification;
    /**
     * Tests if the given message is a response message
     */
    function isResponse(message) {
        const candidate = message;
        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
    }
    Message.isResponse = isResponse;
})(Message || (exports.Message = Message = {}));


/***/ }),

/***/ 5091:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
let _ral;
function RAL() {
    if (_ral === undefined) {
        throw new Error(`No runtime abstraction layer installed`);
    }
    return _ral;
}
(function (RAL) {
    function install(ral) {
        if (ral === undefined) {
            throw new Error(`No runtime abstraction layer provided`);
        }
        _ral = ral;
    }
    RAL.install = install;
})(RAL || (RAL = {}));
exports["default"] = RAL;


/***/ }),

/***/ 418:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Semaphore = void 0;
const ral_1 = __webpack_require__(5091);
class Semaphore {
    constructor(capacity = 1) {
        if (capacity <= 0) {
            throw new Error('Capacity must be greater than 0');
        }
        this._capacity = capacity;
        this._active = 0;
        this._waiting = [];
    }
    lock(thunk) {
        return new Promise((resolve, reject) => {
            this._waiting.push({ thunk, resolve, reject });
            this.runNext();
        });
    }
    get active() {
        return this._active;
    }
    runNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        (0, ral_1.default)().timer.setImmediate(() => this.doRunNext());
    }
    doRunNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        const next = this._waiting.shift();
        this._active++;
        if (this._active > this._capacity) {
            throw new Error(`To many thunks active`);
        }
        try {
            const result = next.thunk();
            if (result instanceof Promise) {
                result.then((value) => {
                    this._active--;
                    next.resolve(value);
                    this.runNext();
                }, (err) => {
                    this._active--;
                    next.reject(err);
                    this.runNext();
                });
            }
            else {
                this._active--;
                next.resolve(result);
                this.runNext();
            }
        }
        catch (err) {
            this._active--;
            next.reject(err);
            this.runNext();
        }
    }
}
exports.Semaphore = Semaphore;


/***/ }),

/***/ 3489:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = void 0;
const cancellation_1 = __webpack_require__(6957);
var CancellationState;
(function (CancellationState) {
    CancellationState.Continue = 0;
    CancellationState.Cancelled = 1;
})(CancellationState || (CancellationState = {}));
class SharedArraySenderStrategy {
    constructor() {
        this.buffers = new Map();
    }
    enableCancellation(request) {
        if (request.id === null) {
            return;
        }
        const buffer = new SharedArrayBuffer(4);
        const data = new Int32Array(buffer, 0, 1);
        data[0] = CancellationState.Continue;
        this.buffers.set(request.id, buffer);
        request.$cancellationData = buffer;
    }
    async sendCancellation(_conn, id) {
        const buffer = this.buffers.get(id);
        if (buffer === undefined) {
            return;
        }
        const data = new Int32Array(buffer, 0, 1);
        Atomics.store(data, 0, CancellationState.Cancelled);
    }
    cleanup(id) {
        this.buffers.delete(id);
    }
    dispose() {
        this.buffers.clear();
    }
}
exports.SharedArraySenderStrategy = SharedArraySenderStrategy;
class SharedArrayBufferCancellationToken {
    constructor(buffer) {
        this.data = new Int32Array(buffer, 0, 1);
    }
    get isCancellationRequested() {
        return Atomics.load(this.data, 0) === CancellationState.Cancelled;
    }
    get onCancellationRequested() {
        throw new Error(`Cancellation over SharedArrayBuffer doesn't support cancellation events`);
    }
}
class SharedArrayBufferCancellationTokenSource {
    constructor(buffer) {
        this.token = new SharedArrayBufferCancellationToken(buffer);
    }
    cancel() {
    }
    dispose() {
    }
}
class SharedArrayReceiverStrategy {
    constructor() {
        this.kind = 'request';
    }
    createCancellationTokenSource(request) {
        const buffer = request.$cancellationData;
        if (buffer === undefined) {
            return new cancellation_1.CancellationTokenSource();
        }
        return new SharedArrayBufferCancellationTokenSource(buffer);
    }
}
exports.SharedArrayReceiverStrategy = SharedArrayReceiverStrategy;


/***/ }),

/***/ 5501:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const browser_1 = __webpack_require__(9208);
__exportStar(__webpack_require__(9208), exports);
__exportStar(__webpack_require__(3147), exports);
function createProtocolConnection(reader, writer, logger, options) {
    return (0, browser_1.createMessageConnection)(reader, writer, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;


/***/ }),

/***/ 3147:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LSPErrorCodes = exports.createProtocolConnection = void 0;
__exportStar(__webpack_require__(9110), exports);
__exportStar(__webpack_require__(2852), exports);
__exportStar(__webpack_require__(8431), exports);
__exportStar(__webpack_require__(1815), exports);
var connection_1 = __webpack_require__(291);
Object.defineProperty(exports, "createProtocolConnection", ({ enumerable: true, get: function () { return connection_1.createProtocolConnection; } }));
var LSPErrorCodes;
(function (LSPErrorCodes) {
    /**
    * This is the start range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeStart = -32899;
    /**
     * A request failed but it was syntactically correct, e.g the
     * method name was known and the parameters were valid. The error
     * message should contain human readable information about why
     * the request failed.
     *
     * @since 3.17.0
     */
    LSPErrorCodes.RequestFailed = -32803;
    /**
     * The server cancelled the request. This error code should
     * only be used for requests that explicitly support being
     * server cancellable.
     *
     * @since 3.17.0
     */
    LSPErrorCodes.ServerCancelled = -32802;
    /**
     * The server detected that the content of a document got
     * modified outside normal conditions. A server should
     * NOT send this error code if it detects a content change
     * in it unprocessed messages. The result even computed
     * on an older state might still be useful for the client.
     *
     * If a client decides that a result is not of any use anymore
     * the client should cancel the request.
     */
    LSPErrorCodes.ContentModified = -32801;
    /**
     * The client has canceled a request and a server as detected
     * the cancel.
     */
    LSPErrorCodes.RequestCancelled = -32800;
    /**
    * This is the end range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeEnd = -32800;
})(LSPErrorCodes || (exports.LSPErrorCodes = LSPErrorCodes = {}));


/***/ }),

/***/ 291:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(9110);
function createProtocolConnection(input, output, logger, options) {
    if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;


/***/ }),

/***/ 8431:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = exports.MessageDirection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(9110);
var MessageDirection;
(function (MessageDirection) {
    MessageDirection["clientToServer"] = "clientToServer";
    MessageDirection["serverToClient"] = "serverToClient";
    MessageDirection["both"] = "both";
})(MessageDirection || (exports.MessageDirection = MessageDirection = {}));
class RegistrationType {
    constructor(method) {
        this.method = method;
    }
}
exports.RegistrationType = RegistrationType;
class ProtocolRequestType0 extends vscode_jsonrpc_1.RequestType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolRequestType0 = ProtocolRequestType0;
class ProtocolRequestType extends vscode_jsonrpc_1.RequestType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolRequestType = ProtocolRequestType;
class ProtocolNotificationType0 extends vscode_jsonrpc_1.NotificationType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolNotificationType0 = ProtocolNotificationType0;
class ProtocolNotificationType extends vscode_jsonrpc_1.NotificationType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolNotificationType = ProtocolNotificationType;


/***/ }),

/***/ 7602:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to result a `CallHierarchyItem` in a document at a given position.
 * Can be used as an input to an incoming or outgoing call hierarchy.
 *
 * @since 3.16.0
 */
var CallHierarchyPrepareRequest;
(function (CallHierarchyPrepareRequest) {
    CallHierarchyPrepareRequest.method = 'textDocument/prepareCallHierarchy';
    CallHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest.method);
})(CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = CallHierarchyPrepareRequest = {}));
/**
 * A request to resolve the incoming calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyIncomingCallsRequest;
(function (CallHierarchyIncomingCallsRequest) {
    CallHierarchyIncomingCallsRequest.method = 'callHierarchy/incomingCalls';
    CallHierarchyIncomingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyIncomingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest.method);
})(CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = CallHierarchyIncomingCallsRequest = {}));
/**
 * A request to resolve the outgoing calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyOutgoingCallsRequest;
(function (CallHierarchyOutgoingCallsRequest) {
    CallHierarchyOutgoingCallsRequest.method = 'callHierarchy/outgoingCalls';
    CallHierarchyOutgoingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyOutgoingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest.method);
})(CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = CallHierarchyOutgoingCallsRequest = {}));


/***/ }),

/***/ 3747:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to list all color symbols found in a given text document. The request's
 * parameter is of type {@link DocumentColorParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */
var DocumentColorRequest;
(function (DocumentColorRequest) {
    DocumentColorRequest.method = 'textDocument/documentColor';
    DocumentColorRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentColorRequest.type = new messages_1.ProtocolRequestType(DocumentColorRequest.method);
})(DocumentColorRequest || (exports.DocumentColorRequest = DocumentColorRequest = {}));
/**
 * A request to list all presentation for a color. The request's
 * parameter is of type {@link ColorPresentationParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */
var ColorPresentationRequest;
(function (ColorPresentationRequest) {
    ColorPresentationRequest.method = 'textDocument/colorPresentation';
    ColorPresentationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ColorPresentationRequest.type = new messages_1.ProtocolRequestType(ColorPresentationRequest.method);
})(ColorPresentationRequest || (exports.ColorPresentationRequest = ColorPresentationRequest = {}));


/***/ }),

/***/ 7639:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigurationRequest = void 0;
const messages_1 = __webpack_require__(8431);
//---- Get Configuration request ----
/**
 * The 'workspace/configuration' request is sent from the server to the client to fetch a certain
 * configuration setting.
 *
 * This pull model replaces the old push model were the client signaled configuration change via an
 * event. If the server still needs to react to configuration changes (since the server caches the
 * result of `workspace/configuration` requests) the server should register for an empty configuration
 * change event and empty the cache if such an event is received.
 */
var ConfigurationRequest;
(function (ConfigurationRequest) {
    ConfigurationRequest.method = 'workspace/configuration';
    ConfigurationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ConfigurationRequest.type = new messages_1.ProtocolRequestType(ConfigurationRequest.method);
})(ConfigurationRequest || (exports.ConfigurationRequest = ConfigurationRequest = {}));


/***/ }),

/***/ 5581:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeclarationRequest = void 0;
const messages_1 = __webpack_require__(8431);
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPositionParams}
 * the response is of type {@link Declaration} or a typed array of {@link DeclarationLink}
 * or a Thenable that resolves to such.
 */
var DeclarationRequest;
(function (DeclarationRequest) {
    DeclarationRequest.method = 'textDocument/declaration';
    DeclarationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DeclarationRequest.type = new messages_1.ProtocolRequestType(DeclarationRequest.method);
})(DeclarationRequest || (exports.DeclarationRequest = DeclarationRequest = {}));


/***/ }),

/***/ 1494:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = void 0;
const vscode_jsonrpc_1 = __webpack_require__(9110);
const Is = __webpack_require__(8633);
const messages_1 = __webpack_require__(8431);
/**
 * @since 3.17.0
 */
var DiagnosticServerCancellationData;
(function (DiagnosticServerCancellationData) {
    function is(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.retriggerRequest);
    }
    DiagnosticServerCancellationData.is = is;
})(DiagnosticServerCancellationData || (exports.DiagnosticServerCancellationData = DiagnosticServerCancellationData = {}));
/**
 * The document diagnostic report kinds.
 *
 * @since 3.17.0
 */
var DocumentDiagnosticReportKind;
(function (DocumentDiagnosticReportKind) {
    /**
     * A diagnostic report with a full
     * set of problems.
     */
    DocumentDiagnosticReportKind.Full = 'full';
    /**
     * A report indicating that the last
     * returned report is still accurate.
     */
    DocumentDiagnosticReportKind.Unchanged = 'unchanged';
})(DocumentDiagnosticReportKind || (exports.DocumentDiagnosticReportKind = DocumentDiagnosticReportKind = {}));
/**
 * The document diagnostic request definition.
 *
 * @since 3.17.0
 */
var DocumentDiagnosticRequest;
(function (DocumentDiagnosticRequest) {
    DocumentDiagnosticRequest.method = 'textDocument/diagnostic';
    DocumentDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentDiagnosticRequest.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest.method);
    DocumentDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
})(DocumentDiagnosticRequest || (exports.DocumentDiagnosticRequest = DocumentDiagnosticRequest = {}));
/**
 * The workspace diagnostic request definition.
 *
 * @since 3.17.0
 */
var WorkspaceDiagnosticRequest;
(function (WorkspaceDiagnosticRequest) {
    WorkspaceDiagnosticRequest.method = 'workspace/diagnostic';
    WorkspaceDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceDiagnosticRequest.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest.method);
    WorkspaceDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
})(WorkspaceDiagnosticRequest || (exports.WorkspaceDiagnosticRequest = WorkspaceDiagnosticRequest = {}));
/**
 * The diagnostic refresh request definition.
 *
 * @since 3.17.0
 */
var DiagnosticRefreshRequest;
(function (DiagnosticRefreshRequest) {
    DiagnosticRefreshRequest.method = `workspace/diagnostic/refresh`;
    DiagnosticRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);
})(DiagnosticRefreshRequest || (exports.DiagnosticRefreshRequest = DiagnosticRefreshRequest = {}));


/***/ }),

/***/ 4781:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A pattern kind describing if a glob pattern matches a file a folder or
 * both.
 *
 * @since 3.16.0
 */
var FileOperationPatternKind;
(function (FileOperationPatternKind) {
    /**
     * The pattern matches a file only.
     */
    FileOperationPatternKind.file = 'file';
    /**
     * The pattern matches a folder only.
     */
    FileOperationPatternKind.folder = 'folder';
})(FileOperationPatternKind || (exports.FileOperationPatternKind = FileOperationPatternKind = {}));
/**
 * The will create files request is sent from the client to the server before files are actually
 * created as long as the creation is triggered from within the client.
 *
 * The request can return a `WorkspaceEdit` which will be applied to workspace before the
 * files are created. Hence the `WorkspaceEdit` can not manipulate the content of the file
 * to be created.
 *
 * @since 3.16.0
 */
var WillCreateFilesRequest;
(function (WillCreateFilesRequest) {
    WillCreateFilesRequest.method = 'workspace/willCreateFiles';
    WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);
})(WillCreateFilesRequest || (exports.WillCreateFilesRequest = WillCreateFilesRequest = {}));
/**
 * The did create files notification is sent from the client to the server when
 * files were created from within the client.
 *
 * @since 3.16.0
 */
var DidCreateFilesNotification;
(function (DidCreateFilesNotification) {
    DidCreateFilesNotification.method = 'workspace/didCreateFiles';
    DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);
})(DidCreateFilesNotification || (exports.DidCreateFilesNotification = DidCreateFilesNotification = {}));
/**
 * The will rename files request is sent from the client to the server before files are actually
 * renamed as long as the rename is triggered from within the client.
 *
 * @since 3.16.0
 */
var WillRenameFilesRequest;
(function (WillRenameFilesRequest) {
    WillRenameFilesRequest.method = 'workspace/willRenameFiles';
    WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);
})(WillRenameFilesRequest || (exports.WillRenameFilesRequest = WillRenameFilesRequest = {}));
/**
 * The did rename files notification is sent from the client to the server when
 * files were renamed from within the client.
 *
 * @since 3.16.0
 */
var DidRenameFilesNotification;
(function (DidRenameFilesNotification) {
    DidRenameFilesNotification.method = 'workspace/didRenameFiles';
    DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);
})(DidRenameFilesNotification || (exports.DidRenameFilesNotification = DidRenameFilesNotification = {}));
/**
 * The will delete files request is sent from the client to the server before files are actually
 * deleted as long as the deletion is triggered from within the client.
 *
 * @since 3.16.0
 */
var DidDeleteFilesNotification;
(function (DidDeleteFilesNotification) {
    DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';
    DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);
})(DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = DidDeleteFilesNotification = {}));
/**
 * The did delete files notification is sent from the client to the server when
 * files were deleted from within the client.
 *
 * @since 3.16.0
 */
var WillDeleteFilesRequest;
(function (WillDeleteFilesRequest) {
    WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';
    WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);
})(WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = WillDeleteFilesRequest = {}));


/***/ }),

/***/ 1203:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FoldingRangeRefreshRequest = exports.FoldingRangeRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to provide folding ranges in a document. The request's
 * parameter is of type {@link FoldingRangeParams}, the
 * response is of type {@link FoldingRangeList} or a Thenable
 * that resolves to such.
 */
var FoldingRangeRequest;
(function (FoldingRangeRequest) {
    FoldingRangeRequest.method = 'textDocument/foldingRange';
    FoldingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    FoldingRangeRequest.type = new messages_1.ProtocolRequestType(FoldingRangeRequest.method);
})(FoldingRangeRequest || (exports.FoldingRangeRequest = FoldingRangeRequest = {}));
/**
 * @since 3.18.0
 * @proposed
 */
var FoldingRangeRefreshRequest;
(function (FoldingRangeRefreshRequest) {
    FoldingRangeRefreshRequest.method = `workspace/foldingRange/refresh`;
    FoldingRangeRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    FoldingRangeRefreshRequest.type = new messages_1.ProtocolRequestType0(FoldingRangeRefreshRequest.method);
})(FoldingRangeRefreshRequest || (exports.FoldingRangeRefreshRequest = FoldingRangeRefreshRequest = {}));


/***/ }),

/***/ 7287:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImplementationRequest = void 0;
const messages_1 = __webpack_require__(8431);
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the implementation locations of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPositionParams}
 * the response is of type {@link Definition} or a Thenable that resolves to such.
 */
var ImplementationRequest;
(function (ImplementationRequest) {
    ImplementationRequest.method = 'textDocument/implementation';
    ImplementationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ImplementationRequest.type = new messages_1.ProtocolRequestType(ImplementationRequest.method);
})(ImplementationRequest || (exports.ImplementationRequest = ImplementationRequest = {}));


/***/ }),

/***/ 9383:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to provide inlay hints in a document. The request's parameter is of
 * type {@link InlayHintsParams}, the response is of type
 * {@link InlayHint InlayHint[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlayHintRequest;
(function (InlayHintRequest) {
    InlayHintRequest.method = 'textDocument/inlayHint';
    InlayHintRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintRequest.type = new messages_1.ProtocolRequestType(InlayHintRequest.method);
})(InlayHintRequest || (exports.InlayHintRequest = InlayHintRequest = {}));
/**
 * A request to resolve additional properties for an inlay hint.
 * The request's parameter is of type {@link InlayHint}, the response is
 * of type {@link InlayHint} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlayHintResolveRequest;
(function (InlayHintResolveRequest) {
    InlayHintResolveRequest.method = 'inlayHint/resolve';
    InlayHintResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintResolveRequest.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest.method);
})(InlayHintResolveRequest || (exports.InlayHintResolveRequest = InlayHintResolveRequest = {}));
/**
 * @since 3.17.0
 */
var InlayHintRefreshRequest;
(function (InlayHintRefreshRequest) {
    InlayHintRefreshRequest.method = `workspace/inlayHint/refresh`;
    InlayHintRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    InlayHintRefreshRequest.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest.method);
})(InlayHintRefreshRequest || (exports.InlayHintRefreshRequest = InlayHintRefreshRequest = {}));


/***/ }),

/***/ 2322:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineCompletionRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to provide inline completions in a document. The request's parameter is of
 * type {@link InlineCompletionParams}, the response is of type
 * {@link InlineCompletion InlineCompletion[]} or a Thenable that resolves to such.
 *
 * @since 3.18.0
 * @proposed
 */
var InlineCompletionRequest;
(function (InlineCompletionRequest) {
    InlineCompletionRequest.method = 'textDocument/inlineCompletion';
    InlineCompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlineCompletionRequest.type = new messages_1.ProtocolRequestType(InlineCompletionRequest.method);
})(InlineCompletionRequest || (exports.InlineCompletionRequest = InlineCompletionRequest = {}));


/***/ }),

/***/ 3491:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineValueRefreshRequest = exports.InlineValueRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to provide inline values in a document. The request's parameter is of
 * type {@link InlineValueParams}, the response is of type
 * {@link InlineValue InlineValue[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlineValueRequest;
(function (InlineValueRequest) {
    InlineValueRequest.method = 'textDocument/inlineValue';
    InlineValueRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlineValueRequest.type = new messages_1.ProtocolRequestType(InlineValueRequest.method);
})(InlineValueRequest || (exports.InlineValueRequest = InlineValueRequest = {}));
/**
 * @since 3.17.0
 */
var InlineValueRefreshRequest;
(function (InlineValueRefreshRequest) {
    InlineValueRefreshRequest.method = `workspace/inlineValue/refresh`;
    InlineValueRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    InlineValueRefreshRequest.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest.method);
})(InlineValueRefreshRequest || (exports.InlineValueRefreshRequest = InlineValueRefreshRequest = {}));


/***/ }),

/***/ 1815:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.RelativePattern = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeErrorCodes = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.PositionEncodingKind = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.NotebookCellTextDocumentFilter = exports.NotebookDocumentFilter = exports.TextDocumentFilter = void 0;
exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRefreshRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangesFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolResolveRequest = void 0;
exports.InlineCompletionRequest = exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = exports.InlineValueRefreshRequest = exports.InlineValueRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchySubtypesRequest = exports.TypeHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(8431);
const vscode_languageserver_types_1 = __webpack_require__(2852);
const Is = __webpack_require__(8633);
const protocol_implementation_1 = __webpack_require__(7287);
Object.defineProperty(exports, "ImplementationRequest", ({ enumerable: true, get: function () { return protocol_implementation_1.ImplementationRequest; } }));
const protocol_typeDefinition_1 = __webpack_require__(9264);
Object.defineProperty(exports, "TypeDefinitionRequest", ({ enumerable: true, get: function () { return protocol_typeDefinition_1.TypeDefinitionRequest; } }));
const protocol_workspaceFolder_1 = __webpack_require__(6860);
Object.defineProperty(exports, "WorkspaceFoldersRequest", ({ enumerable: true, get: function () { return protocol_workspaceFolder_1.WorkspaceFoldersRequest; } }));
Object.defineProperty(exports, "DidChangeWorkspaceFoldersNotification", ({ enumerable: true, get: function () { return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification; } }));
const protocol_configuration_1 = __webpack_require__(7639);
Object.defineProperty(exports, "ConfigurationRequest", ({ enumerable: true, get: function () { return protocol_configuration_1.ConfigurationRequest; } }));
const protocol_colorProvider_1 = __webpack_require__(3747);
Object.defineProperty(exports, "DocumentColorRequest", ({ enumerable: true, get: function () { return protocol_colorProvider_1.DocumentColorRequest; } }));
Object.defineProperty(exports, "ColorPresentationRequest", ({ enumerable: true, get: function () { return protocol_colorProvider_1.ColorPresentationRequest; } }));
const protocol_foldingRange_1 = __webpack_require__(1203);
Object.defineProperty(exports, "FoldingRangeRequest", ({ enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRequest; } }));
Object.defineProperty(exports, "FoldingRangeRefreshRequest", ({ enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRefreshRequest; } }));
const protocol_declaration_1 = __webpack_require__(5581);
Object.defineProperty(exports, "DeclarationRequest", ({ enumerable: true, get: function () { return protocol_declaration_1.DeclarationRequest; } }));
const protocol_selectionRange_1 = __webpack_require__(1530);
Object.defineProperty(exports, "SelectionRangeRequest", ({ enumerable: true, get: function () { return protocol_selectionRange_1.SelectionRangeRequest; } }));
const protocol_progress_1 = __webpack_require__(4166);
Object.defineProperty(exports, "WorkDoneProgress", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgress; } }));
Object.defineProperty(exports, "WorkDoneProgressCreateRequest", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCreateRequest; } }));
Object.defineProperty(exports, "WorkDoneProgressCancelNotification", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCancelNotification; } }));
const protocol_callHierarchy_1 = __webpack_require__(7602);
Object.defineProperty(exports, "CallHierarchyIncomingCallsRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest; } }));
Object.defineProperty(exports, "CallHierarchyOutgoingCallsRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest; } }));
Object.defineProperty(exports, "CallHierarchyPrepareRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyPrepareRequest; } }));
const protocol_semanticTokens_1 = __webpack_require__(2067);
Object.defineProperty(exports, "TokenFormat", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.TokenFormat; } }));
Object.defineProperty(exports, "SemanticTokensRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRequest; } }));
Object.defineProperty(exports, "SemanticTokensDeltaRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensDeltaRequest; } }));
Object.defineProperty(exports, "SemanticTokensRangeRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRangeRequest; } }));
Object.defineProperty(exports, "SemanticTokensRefreshRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRefreshRequest; } }));
Object.defineProperty(exports, "SemanticTokensRegistrationType", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRegistrationType; } }));
const protocol_showDocument_1 = __webpack_require__(4333);
Object.defineProperty(exports, "ShowDocumentRequest", ({ enumerable: true, get: function () { return protocol_showDocument_1.ShowDocumentRequest; } }));
const protocol_linkedEditingRange_1 = __webpack_require__(2249);
Object.defineProperty(exports, "LinkedEditingRangeRequest", ({ enumerable: true, get: function () { return protocol_linkedEditingRange_1.LinkedEditingRangeRequest; } }));
const protocol_fileOperations_1 = __webpack_require__(4781);
Object.defineProperty(exports, "FileOperationPatternKind", ({ enumerable: true, get: function () { return protocol_fileOperations_1.FileOperationPatternKind; } }));
Object.defineProperty(exports, "DidCreateFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidCreateFilesNotification; } }));
Object.defineProperty(exports, "WillCreateFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillCreateFilesRequest; } }));
Object.defineProperty(exports, "DidRenameFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidRenameFilesNotification; } }));
Object.defineProperty(exports, "WillRenameFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillRenameFilesRequest; } }));
Object.defineProperty(exports, "DidDeleteFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidDeleteFilesNotification; } }));
Object.defineProperty(exports, "WillDeleteFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillDeleteFilesRequest; } }));
const protocol_moniker_1 = __webpack_require__(7684);
Object.defineProperty(exports, "UniquenessLevel", ({ enumerable: true, get: function () { return protocol_moniker_1.UniquenessLevel; } }));
Object.defineProperty(exports, "MonikerKind", ({ enumerable: true, get: function () { return protocol_moniker_1.MonikerKind; } }));
Object.defineProperty(exports, "MonikerRequest", ({ enumerable: true, get: function () { return protocol_moniker_1.MonikerRequest; } }));
const protocol_typeHierarchy_1 = __webpack_require__(7062);
Object.defineProperty(exports, "TypeHierarchyPrepareRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest; } }));
Object.defineProperty(exports, "TypeHierarchySubtypesRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest; } }));
Object.defineProperty(exports, "TypeHierarchySupertypesRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest; } }));
const protocol_inlineValue_1 = __webpack_require__(3491);
Object.defineProperty(exports, "InlineValueRequest", ({ enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRequest; } }));
Object.defineProperty(exports, "InlineValueRefreshRequest", ({ enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRefreshRequest; } }));
const protocol_inlayHint_1 = __webpack_require__(9383);
Object.defineProperty(exports, "InlayHintRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRequest; } }));
Object.defineProperty(exports, "InlayHintResolveRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintResolveRequest; } }));
Object.defineProperty(exports, "InlayHintRefreshRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRefreshRequest; } }));
const protocol_diagnostic_1 = __webpack_require__(1494);
Object.defineProperty(exports, "DiagnosticServerCancellationData", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticServerCancellationData; } }));
Object.defineProperty(exports, "DocumentDiagnosticReportKind", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticReportKind; } }));
Object.defineProperty(exports, "DocumentDiagnosticRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticRequest; } }));
Object.defineProperty(exports, "WorkspaceDiagnosticRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.WorkspaceDiagnosticRequest; } }));
Object.defineProperty(exports, "DiagnosticRefreshRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticRefreshRequest; } }));
const protocol_notebook_1 = __webpack_require__(4792);
Object.defineProperty(exports, "NotebookCellKind", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCellKind; } }));
Object.defineProperty(exports, "ExecutionSummary", ({ enumerable: true, get: function () { return protocol_notebook_1.ExecutionSummary; } }));
Object.defineProperty(exports, "NotebookCell", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCell; } }));
Object.defineProperty(exports, "NotebookDocument", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookDocument; } }));
Object.defineProperty(exports, "NotebookDocumentSyncRegistrationType", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookDocumentSyncRegistrationType; } }));
Object.defineProperty(exports, "DidOpenNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidOpenNotebookDocumentNotification; } }));
Object.defineProperty(exports, "NotebookCellArrayChange", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCellArrayChange; } }));
Object.defineProperty(exports, "DidChangeNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidChangeNotebookDocumentNotification; } }));
Object.defineProperty(exports, "DidSaveNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidSaveNotebookDocumentNotification; } }));
Object.defineProperty(exports, "DidCloseNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidCloseNotebookDocumentNotification; } }));
const protocol_inlineCompletion_1 = __webpack_require__(2322);
Object.defineProperty(exports, "InlineCompletionRequest", ({ enumerable: true, get: function () { return protocol_inlineCompletion_1.InlineCompletionRequest; } }));
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * The TextDocumentFilter namespace provides helper functions to work with
 * {@link TextDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var TextDocumentFilter;
(function (TextDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.string(candidate) || (Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
    }
    TextDocumentFilter.is = is;
})(TextDocumentFilter || (exports.TextDocumentFilter = TextDocumentFilter = {}));
/**
 * The NotebookDocumentFilter namespace provides helper functions to work with
 * {@link NotebookDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var NotebookDocumentFilter;
(function (NotebookDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
    }
    NotebookDocumentFilter.is = is;
})(NotebookDocumentFilter || (exports.NotebookDocumentFilter = NotebookDocumentFilter = {}));
/**
 * The NotebookCellTextDocumentFilter namespace provides helper functions to work with
 * {@link NotebookCellTextDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var NotebookCellTextDocumentFilter;
(function (NotebookCellTextDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate)
            && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook))
            && (candidate.language === undefined || Is.string(candidate.language));
    }
    NotebookCellTextDocumentFilter.is = is;
})(NotebookCellTextDocumentFilter || (exports.NotebookCellTextDocumentFilter = NotebookCellTextDocumentFilter = {}));
/**
 * The DocumentSelector namespace provides helper functions to work with
 * {@link DocumentSelector}s.
 */
var DocumentSelector;
(function (DocumentSelector) {
    function is(value) {
        if (!Array.isArray(value)) {
            return false;
        }
        for (let elem of value) {
            if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
                return false;
            }
        }
        return true;
    }
    DocumentSelector.is = is;
})(DocumentSelector || (exports.DocumentSelector = DocumentSelector = {}));
/**
 * The `client/registerCapability` request is sent from the server to the client to register a new capability
 * handler on the client side.
 */
var RegistrationRequest;
(function (RegistrationRequest) {
    RegistrationRequest.method = 'client/registerCapability';
    RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);
})(RegistrationRequest || (exports.RegistrationRequest = RegistrationRequest = {}));
/**
 * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
 * handler on the client side.
 */
var UnregistrationRequest;
(function (UnregistrationRequest) {
    UnregistrationRequest.method = 'client/unregisterCapability';
    UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);
})(UnregistrationRequest || (exports.UnregistrationRequest = UnregistrationRequest = {}));
var ResourceOperationKind;
(function (ResourceOperationKind) {
    /**
     * Supports creating new files and folders.
     */
    ResourceOperationKind.Create = 'create';
    /**
     * Supports renaming existing files and folders.
     */
    ResourceOperationKind.Rename = 'rename';
    /**
     * Supports deleting existing files and folders.
     */
    ResourceOperationKind.Delete = 'delete';
})(ResourceOperationKind || (exports.ResourceOperationKind = ResourceOperationKind = {}));
var FailureHandlingKind;
(function (FailureHandlingKind) {
    /**
     * Applying the workspace change is simply aborted if one of the changes provided
     * fails. All operations executed before the failing operation stay executed.
     */
    FailureHandlingKind.Abort = 'abort';
    /**
     * All operations are executed transactional. That means they either all
     * succeed or no changes at all are applied to the workspace.
     */
    FailureHandlingKind.Transactional = 'transactional';
    /**
     * If the workspace edit contains only textual file changes they are executed transactional.
     * If resource changes (create, rename or delete file) are part of the change the failure
     * handling strategy is abort.
     */
    FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';
    /**
     * The client tries to undo the operations already executed. But there is no
     * guarantee that this is succeeding.
     */
    FailureHandlingKind.Undo = 'undo';
})(FailureHandlingKind || (exports.FailureHandlingKind = FailureHandlingKind = {}));
/**
 * A set of predefined position encoding kinds.
 *
 * @since 3.17.0
 */
var PositionEncodingKind;
(function (PositionEncodingKind) {
    /**
     * Character offsets count UTF-8 code units (e.g. bytes).
     */
    PositionEncodingKind.UTF8 = 'utf-8';
    /**
     * Character offsets count UTF-16 code units.
     *
     * This is the default and must always be supported
     * by servers
     */
    PositionEncodingKind.UTF16 = 'utf-16';
    /**
     * Character offsets count UTF-32 code units.
     *
     * Implementation note: these are the same as Unicode codepoints,
     * so this `PositionEncodingKind` may also be used for an
     * encoding-agnostic representation of character offsets.
     */
    PositionEncodingKind.UTF32 = 'utf-32';
})(PositionEncodingKind || (exports.PositionEncodingKind = PositionEncodingKind = {}));
/**
 * The StaticRegistrationOptions namespace provides helper functions to work with
 * {@link StaticRegistrationOptions} literals.
 */
var StaticRegistrationOptions;
(function (StaticRegistrationOptions) {
    function hasId(value) {
        const candidate = value;
        return candidate && Is.string(candidate.id) && candidate.id.length > 0;
    }
    StaticRegistrationOptions.hasId = hasId;
})(StaticRegistrationOptions || (exports.StaticRegistrationOptions = StaticRegistrationOptions = {}));
/**
 * The TextDocumentRegistrationOptions namespace provides helper functions to work with
 * {@link TextDocumentRegistrationOptions} literals.
 */
var TextDocumentRegistrationOptions;
(function (TextDocumentRegistrationOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
    }
    TextDocumentRegistrationOptions.is = is;
})(TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = TextDocumentRegistrationOptions = {}));
/**
 * The WorkDoneProgressOptions namespace provides helper functions to work with
 * {@link WorkDoneProgressOptions} literals.
 */
var WorkDoneProgressOptions;
(function (WorkDoneProgressOptions) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));
    }
    WorkDoneProgressOptions.is = is;
    function hasWorkDoneProgress(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.workDoneProgress);
    }
    WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;
})(WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = WorkDoneProgressOptions = {}));
/**
 * The initialize request is sent from the client to the server.
 * It is sent once as the request after starting up the server.
 * The requests parameter is of type {@link InitializeParams}
 * the response if of type {@link InitializeResult} of a Thenable that
 * resolves to such.
 */
var InitializeRequest;
(function (InitializeRequest) {
    InitializeRequest.method = 'initialize';
    InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);
})(InitializeRequest || (exports.InitializeRequest = InitializeRequest = {}));
/**
 * Known error codes for an `InitializeErrorCodes`;
 */
var InitializeErrorCodes;
(function (InitializeErrorCodes) {
    /**
     * If the protocol version provided by the client can't be handled by the server.
     *
     * @deprecated This initialize error got replaced by client capabilities. There is
     * no version handshake in version 3.0x
     */
    InitializeErrorCodes.unknownProtocolVersion = 1;
})(InitializeErrorCodes || (exports.InitializeErrorCodes = InitializeErrorCodes = {}));
/**
 * The initialized notification is sent from the client to the
 * server after the client is fully initialized and the server
 * is allowed to send requests from the server to the client.
 */
var InitializedNotification;
(function (InitializedNotification) {
    InitializedNotification.method = 'initialized';
    InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);
})(InitializedNotification || (exports.InitializedNotification = InitializedNotification = {}));
//---- Shutdown Method ----
/**
 * A shutdown request is sent from the client to the server.
 * It is sent once when the client decides to shutdown the
 * server. The only notification that is sent after a shutdown request
 * is the exit event.
 */
var ShutdownRequest;
(function (ShutdownRequest) {
    ShutdownRequest.method = 'shutdown';
    ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);
})(ShutdownRequest || (exports.ShutdownRequest = ShutdownRequest = {}));
//---- Exit Notification ----
/**
 * The exit event is sent from the client to the server to
 * ask the server to exit its process.
 */
var ExitNotification;
(function (ExitNotification) {
    ExitNotification.method = 'exit';
    ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);
})(ExitNotification || (exports.ExitNotification = ExitNotification = {}));
/**
 * The configuration change notification is sent from the client to the server
 * when the client's configuration has changed. The notification contains
 * the changed configuration as defined by the language client.
 */
var DidChangeConfigurationNotification;
(function (DidChangeConfigurationNotification) {
    DidChangeConfigurationNotification.method = 'workspace/didChangeConfiguration';
    DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);
})(DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = DidChangeConfigurationNotification = {}));
//---- Message show and log notifications ----
/**
 * The message type
 */
var MessageType;
(function (MessageType) {
    /**
     * An error message.
     */
    MessageType.Error = 1;
    /**
     * A warning message.
     */
    MessageType.Warning = 2;
    /**
     * An information message.
     */
    MessageType.Info = 3;
    /**
     * A log message.
     */
    MessageType.Log = 4;
    /**
     * A debug message.
     *
     * @since 3.18.0
     */
    MessageType.Debug = 5;
})(MessageType || (exports.MessageType = MessageType = {}));
/**
 * The show message notification is sent from a server to a client to ask
 * the client to display a particular message in the user interface.
 */
var ShowMessageNotification;
(function (ShowMessageNotification) {
    ShowMessageNotification.method = 'window/showMessage';
    ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);
})(ShowMessageNotification || (exports.ShowMessageNotification = ShowMessageNotification = {}));
/**
 * The show message request is sent from the server to the client to show a message
 * and a set of options actions to the user.
 */
var ShowMessageRequest;
(function (ShowMessageRequest) {
    ShowMessageRequest.method = 'window/showMessageRequest';
    ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);
})(ShowMessageRequest || (exports.ShowMessageRequest = ShowMessageRequest = {}));
/**
 * The log message notification is sent from the server to the client to ask
 * the client to log a particular message.
 */
var LogMessageNotification;
(function (LogMessageNotification) {
    LogMessageNotification.method = 'window/logMessage';
    LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);
})(LogMessageNotification || (exports.LogMessageNotification = LogMessageNotification = {}));
//---- Telemetry notification
/**
 * The telemetry event notification is sent from the server to the client to ask
 * the client to log telemetry data.
 */
var TelemetryEventNotification;
(function (TelemetryEventNotification) {
    TelemetryEventNotification.method = 'telemetry/event';
    TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);
})(TelemetryEventNotification || (exports.TelemetryEventNotification = TelemetryEventNotification = {}));
/**
 * Defines how the host (editor) should sync
 * document changes to the language server.
 */
var TextDocumentSyncKind;
(function (TextDocumentSyncKind) {
    /**
     * Documents should not be synced at all.
     */
    TextDocumentSyncKind.None = 0;
    /**
     * Documents are synced by always sending the full content
     * of the document.
     */
    TextDocumentSyncKind.Full = 1;
    /**
     * Documents are synced by sending the full content on open.
     * After that only incremental updates to the document are
     * send.
     */
    TextDocumentSyncKind.Incremental = 2;
})(TextDocumentSyncKind || (exports.TextDocumentSyncKind = TextDocumentSyncKind = {}));
/**
 * The document open notification is sent from the client to the server to signal
 * newly opened text documents. The document's truth is now managed by the client
 * and the server must not try to read the document's truth using the document's
 * uri. Open in this sense means it is managed by the client. It doesn't necessarily
 * mean that its content is presented in an editor. An open notification must not
 * be sent more than once without a corresponding close notification send before.
 * This means open and close notification must be balanced and the max open count
 * is one.
 */
var DidOpenTextDocumentNotification;
(function (DidOpenTextDocumentNotification) {
    DidOpenTextDocumentNotification.method = 'textDocument/didOpen';
    DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);
})(DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = DidOpenTextDocumentNotification = {}));
var TextDocumentContentChangeEvent;
(function (TextDocumentContentChangeEvent) {
    /**
     * Checks whether the information describes a delta event.
     */
    function isIncremental(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    }
    TextDocumentContentChangeEvent.isIncremental = isIncremental;
    /**
     * Checks whether the information describes a full replacement event.
     */
    function isFull(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    }
    TextDocumentContentChangeEvent.isFull = isFull;
})(TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = TextDocumentContentChangeEvent = {}));
/**
 * The document change notification is sent from the client to the server to signal
 * changes to a text document.
 */
var DidChangeTextDocumentNotification;
(function (DidChangeTextDocumentNotification) {
    DidChangeTextDocumentNotification.method = 'textDocument/didChange';
    DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);
})(DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = DidChangeTextDocumentNotification = {}));
/**
 * The document close notification is sent from the client to the server when
 * the document got closed in the client. The document's truth now exists where
 * the document's uri points to (e.g. if the document's uri is a file uri the
 * truth now exists on disk). As with the open notification the close notification
 * is about managing the document's content. Receiving a close notification
 * doesn't mean that the document was open in an editor before. A close
 * notification requires a previous open notification to be sent.
 */
var DidCloseTextDocumentNotification;
(function (DidCloseTextDocumentNotification) {
    DidCloseTextDocumentNotification.method = 'textDocument/didClose';
    DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);
})(DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = DidCloseTextDocumentNotification = {}));
/**
 * The document save notification is sent from the client to the server when
 * the document got saved in the client.
 */
var DidSaveTextDocumentNotification;
(function (DidSaveTextDocumentNotification) {
    DidSaveTextDocumentNotification.method = 'textDocument/didSave';
    DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);
})(DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = DidSaveTextDocumentNotification = {}));
/**
 * Represents reasons why a text document is saved.
 */
var TextDocumentSaveReason;
(function (TextDocumentSaveReason) {
    /**
     * Manually triggered, e.g. by the user pressing save, by starting debugging,
     * or by an API call.
     */
    TextDocumentSaveReason.Manual = 1;
    /**
     * Automatic after a delay.
     */
    TextDocumentSaveReason.AfterDelay = 2;
    /**
     * When the editor lost focus.
     */
    TextDocumentSaveReason.FocusOut = 3;
})(TextDocumentSaveReason || (exports.TextDocumentSaveReason = TextDocumentSaveReason = {}));
/**
 * A document will save notification is sent from the client to the server before
 * the document is actually saved.
 */
var WillSaveTextDocumentNotification;
(function (WillSaveTextDocumentNotification) {
    WillSaveTextDocumentNotification.method = 'textDocument/willSave';
    WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);
})(WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = WillSaveTextDocumentNotification = {}));
/**
 * A document will save request is sent from the client to the server before
 * the document is actually saved. The request can return an array of TextEdits
 * which will be applied to the text document before it is saved. Please note that
 * clients might drop results if computing the text edits took too long or if a
 * server constantly fails on this request. This is done to keep the save fast and
 * reliable.
 */
var WillSaveTextDocumentWaitUntilRequest;
(function (WillSaveTextDocumentWaitUntilRequest) {
    WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';
    WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);
})(WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = WillSaveTextDocumentWaitUntilRequest = {}));
/**
 * The watched files notification is sent from the client to the server when
 * the client detects changes to file watched by the language client.
 */
var DidChangeWatchedFilesNotification;
(function (DidChangeWatchedFilesNotification) {
    DidChangeWatchedFilesNotification.method = 'workspace/didChangeWatchedFiles';
    DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);
})(DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = DidChangeWatchedFilesNotification = {}));
/**
 * The file event type
 */
var FileChangeType;
(function (FileChangeType) {
    /**
     * The file got created.
     */
    FileChangeType.Created = 1;
    /**
     * The file got changed.
     */
    FileChangeType.Changed = 2;
    /**
     * The file got deleted.
     */
    FileChangeType.Deleted = 3;
})(FileChangeType || (exports.FileChangeType = FileChangeType = {}));
var RelativePattern;
(function (RelativePattern) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);
    }
    RelativePattern.is = is;
})(RelativePattern || (exports.RelativePattern = RelativePattern = {}));
var WatchKind;
(function (WatchKind) {
    /**
     * Interested in create events.
     */
    WatchKind.Create = 1;
    /**
     * Interested in change events
     */
    WatchKind.Change = 2;
    /**
     * Interested in delete events
     */
    WatchKind.Delete = 4;
})(WatchKind || (exports.WatchKind = WatchKind = {}));
/**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */
var PublishDiagnosticsNotification;
(function (PublishDiagnosticsNotification) {
    PublishDiagnosticsNotification.method = 'textDocument/publishDiagnostics';
    PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);
})(PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = PublishDiagnosticsNotification = {}));
/**
 * How a completion was triggered
 */
var CompletionTriggerKind;
(function (CompletionTriggerKind) {
    /**
     * Completion was triggered by typing an identifier (24x7 code
     * complete), manual invocation (e.g Ctrl+Space) or via API.
     */
    CompletionTriggerKind.Invoked = 1;
    /**
     * Completion was triggered by a trigger character specified by
     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
     */
    CompletionTriggerKind.TriggerCharacter = 2;
    /**
     * Completion was re-triggered as current completion list is incomplete
     */
    CompletionTriggerKind.TriggerForIncompleteCompletions = 3;
})(CompletionTriggerKind || (exports.CompletionTriggerKind = CompletionTriggerKind = {}));
/**
 * Request to request completion at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response
 * is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}
 * or a Thenable that resolves to such.
 *
 * The request can delay the computation of the {@link CompletionItem.detail `detail`}
 * and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`
 * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
 * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
 */
var CompletionRequest;
(function (CompletionRequest) {
    CompletionRequest.method = 'textDocument/completion';
    CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);
})(CompletionRequest || (exports.CompletionRequest = CompletionRequest = {}));
/**
 * Request to resolve additional information for a given completion item.The request's
 * parameter is of type {@link CompletionItem} the response
 * is of type {@link CompletionItem} or a Thenable that resolves to such.
 */
var CompletionResolveRequest;
(function (CompletionResolveRequest) {
    CompletionResolveRequest.method = 'completionItem/resolve';
    CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);
})(CompletionResolveRequest || (exports.CompletionResolveRequest = CompletionResolveRequest = {}));
/**
 * Request to request hover information at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response is of
 * type {@link Hover} or a Thenable that resolves to such.
 */
var HoverRequest;
(function (HoverRequest) {
    HoverRequest.method = 'textDocument/hover';
    HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);
})(HoverRequest || (exports.HoverRequest = HoverRequest = {}));
/**
 * How a signature help was triggered.
 *
 * @since 3.15.0
 */
var SignatureHelpTriggerKind;
(function (SignatureHelpTriggerKind) {
    /**
     * Signature help was invoked manually by the user or by a command.
     */
    SignatureHelpTriggerKind.Invoked = 1;
    /**
     * Signature help was triggered by a trigger character.
     */
    SignatureHelpTriggerKind.TriggerCharacter = 2;
    /**
     * Signature help was triggered by the cursor moving or by the document content changing.
     */
    SignatureHelpTriggerKind.ContentChange = 3;
})(SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = SignatureHelpTriggerKind = {}));
var SignatureHelpRequest;
(function (SignatureHelpRequest) {
    SignatureHelpRequest.method = 'textDocument/signatureHelp';
    SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);
})(SignatureHelpRequest || (exports.SignatureHelpRequest = SignatureHelpRequest = {}));
/**
 * A request to resolve the definition location of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPosition}
 * the response is of either type {@link Definition} or a typed array of
 * {@link DefinitionLink} or a Thenable that resolves to such.
 */
var DefinitionRequest;
(function (DefinitionRequest) {
    DefinitionRequest.method = 'textDocument/definition';
    DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);
})(DefinitionRequest || (exports.DefinitionRequest = DefinitionRequest = {}));
/**
 * A request to resolve project-wide references for the symbol denoted
 * by the given text document position. The request's parameter is of
 * type {@link ReferenceParams} the response is of type
 * {@link Location Location[]} or a Thenable that resolves to such.
 */
var ReferencesRequest;
(function (ReferencesRequest) {
    ReferencesRequest.method = 'textDocument/references';
    ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);
})(ReferencesRequest || (exports.ReferencesRequest = ReferencesRequest = {}));
/**
 * Request to resolve a {@link DocumentHighlight} for a given
 * text document position. The request's parameter is of type {@link TextDocumentPosition}
 * the request response is an array of type {@link DocumentHighlight}
 * or a Thenable that resolves to such.
 */
var DocumentHighlightRequest;
(function (DocumentHighlightRequest) {
    DocumentHighlightRequest.method = 'textDocument/documentHighlight';
    DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);
})(DocumentHighlightRequest || (exports.DocumentHighlightRequest = DocumentHighlightRequest = {}));
/**
 * A request to list all symbols found in a given text document. The request's
 * parameter is of type {@link TextDocumentIdentifier} the
 * response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable
 * that resolves to such.
 */
var DocumentSymbolRequest;
(function (DocumentSymbolRequest) {
    DocumentSymbolRequest.method = 'textDocument/documentSymbol';
    DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);
})(DocumentSymbolRequest || (exports.DocumentSymbolRequest = DocumentSymbolRequest = {}));
/**
 * A request to provide commands for the given text document and range.
 */
var CodeActionRequest;
(function (CodeActionRequest) {
    CodeActionRequest.method = 'textDocument/codeAction';
    CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);
})(CodeActionRequest || (exports.CodeActionRequest = CodeActionRequest = {}));
/**
 * Request to resolve additional information for a given code action.The request's
 * parameter is of type {@link CodeAction} the response
 * is of type {@link CodeAction} or a Thenable that resolves to such.
 */
var CodeActionResolveRequest;
(function (CodeActionResolveRequest) {
    CodeActionResolveRequest.method = 'codeAction/resolve';
    CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);
})(CodeActionResolveRequest || (exports.CodeActionResolveRequest = CodeActionResolveRequest = {}));
/**
 * A request to list project-wide symbols matching the query string given
 * by the {@link WorkspaceSymbolParams}. The response is
 * of type {@link SymbolInformation SymbolInformation[]} or a Thenable that
 * resolves to such.
 *
 * @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients
 *  need to advertise support for WorkspaceSymbols via the client capability
 *  `workspace.symbol.resolveSupport`.
 *
 */
var WorkspaceSymbolRequest;
(function (WorkspaceSymbolRequest) {
    WorkspaceSymbolRequest.method = 'workspace/symbol';
    WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);
})(WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = WorkspaceSymbolRequest = {}));
/**
 * A request to resolve the range inside the workspace
 * symbol's location.
 *
 * @since 3.17.0
 */
var WorkspaceSymbolResolveRequest;
(function (WorkspaceSymbolResolveRequest) {
    WorkspaceSymbolResolveRequest.method = 'workspaceSymbol/resolve';
    WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);
})(WorkspaceSymbolResolveRequest || (exports.WorkspaceSymbolResolveRequest = WorkspaceSymbolResolveRequest = {}));
/**
 * A request to provide code lens for the given text document.
 */
var CodeLensRequest;
(function (CodeLensRequest) {
    CodeLensRequest.method = 'textDocument/codeLens';
    CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);
})(CodeLensRequest || (exports.CodeLensRequest = CodeLensRequest = {}));
/**
 * A request to resolve a command for a given code lens.
 */
var CodeLensResolveRequest;
(function (CodeLensResolveRequest) {
    CodeLensResolveRequest.method = 'codeLens/resolve';
    CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);
})(CodeLensResolveRequest || (exports.CodeLensResolveRequest = CodeLensResolveRequest = {}));
/**
 * A request to refresh all code actions
 *
 * @since 3.16.0
 */
var CodeLensRefreshRequest;
(function (CodeLensRefreshRequest) {
    CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;
    CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);
})(CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = CodeLensRefreshRequest = {}));
/**
 * A request to provide document links
 */
var DocumentLinkRequest;
(function (DocumentLinkRequest) {
    DocumentLinkRequest.method = 'textDocument/documentLink';
    DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);
})(DocumentLinkRequest || (exports.DocumentLinkRequest = DocumentLinkRequest = {}));
/**
 * Request to resolve additional information for a given document link. The request's
 * parameter is of type {@link DocumentLink} the response
 * is of type {@link DocumentLink} or a Thenable that resolves to such.
 */
var DocumentLinkResolveRequest;
(function (DocumentLinkResolveRequest) {
    DocumentLinkResolveRequest.method = 'documentLink/resolve';
    DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);
})(DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = DocumentLinkResolveRequest = {}));
/**
 * A request to format a whole document.
 */
var DocumentFormattingRequest;
(function (DocumentFormattingRequest) {
    DocumentFormattingRequest.method = 'textDocument/formatting';
    DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);
})(DocumentFormattingRequest || (exports.DocumentFormattingRequest = DocumentFormattingRequest = {}));
/**
 * A request to format a range in a document.
 */
var DocumentRangeFormattingRequest;
(function (DocumentRangeFormattingRequest) {
    DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';
    DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);
})(DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = DocumentRangeFormattingRequest = {}));
/**
 * A request to format ranges in a document.
 *
 * @since 3.18.0
 * @proposed
 */
var DocumentRangesFormattingRequest;
(function (DocumentRangesFormattingRequest) {
    DocumentRangesFormattingRequest.method = 'textDocument/rangesFormatting';
    DocumentRangesFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentRangesFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangesFormattingRequest.method);
})(DocumentRangesFormattingRequest || (exports.DocumentRangesFormattingRequest = DocumentRangesFormattingRequest = {}));
/**
 * A request to format a document on type.
 */
var DocumentOnTypeFormattingRequest;
(function (DocumentOnTypeFormattingRequest) {
    DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';
    DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);
})(DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = DocumentOnTypeFormattingRequest = {}));
//---- Rename ----------------------------------------------
var PrepareSupportDefaultBehavior;
(function (PrepareSupportDefaultBehavior) {
    /**
     * The client's default behavior is to select the identifier
     * according the to language's syntax rule.
     */
    PrepareSupportDefaultBehavior.Identifier = 1;
})(PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = PrepareSupportDefaultBehavior = {}));
/**
 * A request to rename a symbol.
 */
var RenameRequest;
(function (RenameRequest) {
    RenameRequest.method = 'textDocument/rename';
    RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);
})(RenameRequest || (exports.RenameRequest = RenameRequest = {}));
/**
 * A request to test and perform the setup necessary for a rename.
 *
 * @since 3.16 - support for default behavior
 */
var PrepareRenameRequest;
(function (PrepareRenameRequest) {
    PrepareRenameRequest.method = 'textDocument/prepareRename';
    PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);
})(PrepareRenameRequest || (exports.PrepareRenameRequest = PrepareRenameRequest = {}));
/**
 * A request send from the client to the server to execute a command. The request might return
 * a workspace edit which the client will apply to the workspace.
 */
var ExecuteCommandRequest;
(function (ExecuteCommandRequest) {
    ExecuteCommandRequest.method = 'workspace/executeCommand';
    ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);
})(ExecuteCommandRequest || (exports.ExecuteCommandRequest = ExecuteCommandRequest = {}));
/**
 * A request sent from the server to the client to modified certain resources.
 */
var ApplyWorkspaceEditRequest;
(function (ApplyWorkspaceEditRequest) {
    ApplyWorkspaceEditRequest.method = 'workspace/applyEdit';
    ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');
})(ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = ApplyWorkspaceEditRequest = {}));


/***/ }),

/***/ 2249:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinkedEditingRangeRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to provide ranges that can be edited together.
 *
 * @since 3.16.0
 */
var LinkedEditingRangeRequest;
(function (LinkedEditingRangeRequest) {
    LinkedEditingRangeRequest.method = 'textDocument/linkedEditingRange';
    LinkedEditingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    LinkedEditingRangeRequest.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest.method);
})(LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = LinkedEditingRangeRequest = {}));


/***/ }),

/***/ 7684:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * Moniker uniqueness level to define scope of the moniker.
 *
 * @since 3.16.0
 */
var UniquenessLevel;
(function (UniquenessLevel) {
    /**
     * The moniker is only unique inside a document
     */
    UniquenessLevel.document = 'document';
    /**
     * The moniker is unique inside a project for which a dump got created
     */
    UniquenessLevel.project = 'project';
    /**
     * The moniker is unique inside the group to which a project belongs
     */
    UniquenessLevel.group = 'group';
    /**
     * The moniker is unique inside the moniker scheme.
     */
    UniquenessLevel.scheme = 'scheme';
    /**
     * The moniker is globally unique
     */
    UniquenessLevel.global = 'global';
})(UniquenessLevel || (exports.UniquenessLevel = UniquenessLevel = {}));
/**
 * The moniker kind.
 *
 * @since 3.16.0
 */
var MonikerKind;
(function (MonikerKind) {
    /**
     * The moniker represent a symbol that is imported into a project
     */
    MonikerKind.$import = 'import';
    /**
     * The moniker represents a symbol that is exported from a project
     */
    MonikerKind.$export = 'export';
    /**
     * The moniker represents a symbol that is local to a project (e.g. a local
     * variable of a function, a class not visible outside the project, ...)
     */
    MonikerKind.local = 'local';
})(MonikerKind || (exports.MonikerKind = MonikerKind = {}));
/**
 * A request to get the moniker of a symbol at a given text document position.
 * The request parameter is of type {@link TextDocumentPositionParams}.
 * The response is of type {@link Moniker Moniker[]} or `null`.
 */
var MonikerRequest;
(function (MonikerRequest) {
    MonikerRequest.method = 'textDocument/moniker';
    MonikerRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    MonikerRequest.type = new messages_1.ProtocolRequestType(MonikerRequest.method);
})(MonikerRequest || (exports.MonikerRequest = MonikerRequest = {}));


/***/ }),

/***/ 4792:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = void 0;
const vscode_languageserver_types_1 = __webpack_require__(2852);
const Is = __webpack_require__(8633);
const messages_1 = __webpack_require__(8431);
/**
 * A notebook cell kind.
 *
 * @since 3.17.0
 */
var NotebookCellKind;
(function (NotebookCellKind) {
    /**
     * A markup-cell is formatted source that is used for display.
     */
    NotebookCellKind.Markup = 1;
    /**
     * A code-cell is source code.
     */
    NotebookCellKind.Code = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    NotebookCellKind.is = is;
})(NotebookCellKind || (exports.NotebookCellKind = NotebookCellKind = {}));
var ExecutionSummary;
(function (ExecutionSummary) {
    function create(executionOrder, success) {
        const result = { executionOrder };
        if (success === true || success === false) {
            result.success = success;
        }
        return result;
    }
    ExecutionSummary.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === undefined || Is.boolean(candidate.success));
    }
    ExecutionSummary.is = is;
    function equals(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        return one.executionOrder === other.executionOrder && one.success === other.success;
    }
    ExecutionSummary.equals = equals;
})(ExecutionSummary || (exports.ExecutionSummary = ExecutionSummary = {}));
var NotebookCell;
(function (NotebookCell) {
    function create(kind, document) {
        return { kind, document };
    }
    NotebookCell.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) &&
            (candidate.metadata === undefined || Is.objectLiteral(candidate.metadata));
    }
    NotebookCell.is = is;
    function diff(one, two) {
        const result = new Set();
        if (one.document !== two.document) {
            result.add('document');
        }
        if (one.kind !== two.kind) {
            result.add('kind');
        }
        if (one.executionSummary !== two.executionSummary) {
            result.add('executionSummary');
        }
        if ((one.metadata !== undefined || two.metadata !== undefined) && !equalsMetadata(one.metadata, two.metadata)) {
            result.add('metadata');
        }
        if ((one.executionSummary !== undefined || two.executionSummary !== undefined) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
            result.add('executionSummary');
        }
        return result;
    }
    NotebookCell.diff = diff;
    function equalsMetadata(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        if (typeof one !== typeof other) {
            return false;
        }
        if (typeof one !== 'object') {
            return false;
        }
        const oneArray = Array.isArray(one);
        const otherArray = Array.isArray(other);
        if (oneArray !== otherArray) {
            return false;
        }
        if (oneArray && otherArray) {
            if (one.length !== other.length) {
                return false;
            }
            for (let i = 0; i < one.length; i++) {
                if (!equalsMetadata(one[i], other[i])) {
                    return false;
                }
            }
        }
        if (Is.objectLiteral(one) && Is.objectLiteral(other)) {
            const oneKeys = Object.keys(one);
            const otherKeys = Object.keys(other);
            if (oneKeys.length !== otherKeys.length) {
                return false;
            }
            oneKeys.sort();
            otherKeys.sort();
            if (!equalsMetadata(oneKeys, otherKeys)) {
                return false;
            }
            for (let i = 0; i < oneKeys.length; i++) {
                const prop = oneKeys[i];
                if (!equalsMetadata(one[prop], other[prop])) {
                    return false;
                }
            }
        }
        return true;
    }
})(NotebookCell || (exports.NotebookCell = NotebookCell = {}));
var NotebookDocument;
(function (NotebookDocument) {
    function create(uri, notebookType, version, cells) {
        return { uri, notebookType, version, cells };
    }
    NotebookDocument.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);
    }
    NotebookDocument.is = is;
})(NotebookDocument || (exports.NotebookDocument = NotebookDocument = {}));
var NotebookDocumentSyncRegistrationType;
(function (NotebookDocumentSyncRegistrationType) {
    NotebookDocumentSyncRegistrationType.method = 'notebookDocument/sync';
    NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer;
    NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);
})(NotebookDocumentSyncRegistrationType || (exports.NotebookDocumentSyncRegistrationType = NotebookDocumentSyncRegistrationType = {}));
/**
 * A notification sent when a notebook opens.
 *
 * @since 3.17.0
 */
var DidOpenNotebookDocumentNotification;
(function (DidOpenNotebookDocumentNotification) {
    DidOpenNotebookDocumentNotification.method = 'notebookDocument/didOpen';
    DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);
    DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidOpenNotebookDocumentNotification || (exports.DidOpenNotebookDocumentNotification = DidOpenNotebookDocumentNotification = {}));
var NotebookCellArrayChange;
(function (NotebookCellArrayChange) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === undefined || Is.typedArray(candidate.cells, NotebookCell.is));
    }
    NotebookCellArrayChange.is = is;
    function create(start, deleteCount, cells) {
        const result = { start, deleteCount };
        if (cells !== undefined) {
            result.cells = cells;
        }
        return result;
    }
    NotebookCellArrayChange.create = create;
})(NotebookCellArrayChange || (exports.NotebookCellArrayChange = NotebookCellArrayChange = {}));
var DidChangeNotebookDocumentNotification;
(function (DidChangeNotebookDocumentNotification) {
    DidChangeNotebookDocumentNotification.method = 'notebookDocument/didChange';
    DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);
    DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidChangeNotebookDocumentNotification || (exports.DidChangeNotebookDocumentNotification = DidChangeNotebookDocumentNotification = {}));
/**
 * A notification sent when a notebook document is saved.
 *
 * @since 3.17.0
 */
var DidSaveNotebookDocumentNotification;
(function (DidSaveNotebookDocumentNotification) {
    DidSaveNotebookDocumentNotification.method = 'notebookDocument/didSave';
    DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);
    DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidSaveNotebookDocumentNotification || (exports.DidSaveNotebookDocumentNotification = DidSaveNotebookDocumentNotification = {}));
/**
 * A notification sent when a notebook closes.
 *
 * @since 3.17.0
 */
var DidCloseNotebookDocumentNotification;
(function (DidCloseNotebookDocumentNotification) {
    DidCloseNotebookDocumentNotification.method = 'notebookDocument/didClose';
    DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);
    DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidCloseNotebookDocumentNotification || (exports.DidCloseNotebookDocumentNotification = DidCloseNotebookDocumentNotification = {}));


/***/ }),

/***/ 4166:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;
const vscode_jsonrpc_1 = __webpack_require__(9110);
const messages_1 = __webpack_require__(8431);
var WorkDoneProgress;
(function (WorkDoneProgress) {
    WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();
    function is(value) {
        return value === WorkDoneProgress.type;
    }
    WorkDoneProgress.is = is;
})(WorkDoneProgress || (exports.WorkDoneProgress = WorkDoneProgress = {}));
/**
 * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress
 * reporting from the server.
 */
var WorkDoneProgressCreateRequest;
(function (WorkDoneProgressCreateRequest) {
    WorkDoneProgressCreateRequest.method = 'window/workDoneProgress/create';
    WorkDoneProgressCreateRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest.method);
})(WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = WorkDoneProgressCreateRequest = {}));
/**
 * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress
 * initiated on the server side.
 */
var WorkDoneProgressCancelNotification;
(function (WorkDoneProgressCancelNotification) {
    WorkDoneProgressCancelNotification.method = 'window/workDoneProgress/cancel';
    WorkDoneProgressCancelNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification.method);
})(WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = WorkDoneProgressCancelNotification = {}));


/***/ }),

/***/ 1530:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectionRangeRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to provide selection ranges in a document. The request's
 * parameter is of type {@link SelectionRangeParams}, the
 * response is of type {@link SelectionRange SelectionRange[]} or a Thenable
 * that resolves to such.
 */
var SelectionRangeRequest;
(function (SelectionRangeRequest) {
    SelectionRangeRequest.method = 'textDocument/selectionRange';
    SelectionRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SelectionRangeRequest.type = new messages_1.ProtocolRequestType(SelectionRangeRequest.method);
})(SelectionRangeRequest || (exports.SelectionRangeRequest = SelectionRangeRequest = {}));


/***/ }),

/***/ 2067:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = void 0;
const messages_1 = __webpack_require__(8431);
//------- 'textDocument/semanticTokens' -----
var TokenFormat;
(function (TokenFormat) {
    TokenFormat.Relative = 'relative';
})(TokenFormat || (exports.TokenFormat = TokenFormat = {}));
var SemanticTokensRegistrationType;
(function (SemanticTokensRegistrationType) {
    SemanticTokensRegistrationType.method = 'textDocument/semanticTokens';
    SemanticTokensRegistrationType.type = new messages_1.RegistrationType(SemanticTokensRegistrationType.method);
})(SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = SemanticTokensRegistrationType = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRequest;
(function (SemanticTokensRequest) {
    SemanticTokensRequest.method = 'textDocument/semanticTokens/full';
    SemanticTokensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRequest.method);
    SemanticTokensRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensRequest || (exports.SemanticTokensRequest = SemanticTokensRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensDeltaRequest;
(function (SemanticTokensDeltaRequest) {
    SemanticTokensDeltaRequest.method = 'textDocument/semanticTokens/full/delta';
    SemanticTokensDeltaRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensDeltaRequest.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest.method);
    SemanticTokensDeltaRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = SemanticTokensDeltaRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRangeRequest;
(function (SemanticTokensRangeRequest) {
    SemanticTokensRangeRequest.method = 'textDocument/semanticTokens/range';
    SemanticTokensRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRangeRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest.method);
    SemanticTokensRangeRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = SemanticTokensRangeRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRefreshRequest;
(function (SemanticTokensRefreshRequest) {
    SemanticTokensRefreshRequest.method = `workspace/semanticTokens/refresh`;
    SemanticTokensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    SemanticTokensRefreshRequest.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest.method);
})(SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = SemanticTokensRefreshRequest = {}));


/***/ }),

/***/ 4333:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShowDocumentRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to show a document. This request might open an
 * external program depending on the value of the URI to open.
 * For example a request to open `https://code.visualstudio.com/`
 * will very likely open the URI in a WEB browser.
 *
 * @since 3.16.0
*/
var ShowDocumentRequest;
(function (ShowDocumentRequest) {
    ShowDocumentRequest.method = 'window/showDocument';
    ShowDocumentRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowDocumentRequest.type = new messages_1.ProtocolRequestType(ShowDocumentRequest.method);
})(ShowDocumentRequest || (exports.ShowDocumentRequest = ShowDocumentRequest = {}));


/***/ }),

/***/ 9264:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeDefinitionRequest = void 0;
const messages_1 = __webpack_require__(8431);
// @ts-ignore: to avoid inlining LocatioLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPositionParams}
 * the response is of type {@link Definition} or a Thenable that resolves to such.
 */
var TypeDefinitionRequest;
(function (TypeDefinitionRequest) {
    TypeDefinitionRequest.method = 'textDocument/typeDefinition';
    TypeDefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeDefinitionRequest.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest.method);
})(TypeDefinitionRequest || (exports.TypeDefinitionRequest = TypeDefinitionRequest = {}));


/***/ }),

/***/ 7062:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeHierarchySubtypesRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * A request to result a `TypeHierarchyItem` in a document at a given position.
 * Can be used as an input to a subtypes or supertypes type hierarchy.
 *
 * @since 3.17.0
 */
var TypeHierarchyPrepareRequest;
(function (TypeHierarchyPrepareRequest) {
    TypeHierarchyPrepareRequest.method = 'textDocument/prepareTypeHierarchy';
    TypeHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest.method);
})(TypeHierarchyPrepareRequest || (exports.TypeHierarchyPrepareRequest = TypeHierarchyPrepareRequest = {}));
/**
 * A request to resolve the supertypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */
var TypeHierarchySupertypesRequest;
(function (TypeHierarchySupertypesRequest) {
    TypeHierarchySupertypesRequest.method = 'typeHierarchy/supertypes';
    TypeHierarchySupertypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchySupertypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest.method);
})(TypeHierarchySupertypesRequest || (exports.TypeHierarchySupertypesRequest = TypeHierarchySupertypesRequest = {}));
/**
 * A request to resolve the subtypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */
var TypeHierarchySubtypesRequest;
(function (TypeHierarchySubtypesRequest) {
    TypeHierarchySubtypesRequest.method = 'typeHierarchy/subtypes';
    TypeHierarchySubtypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchySubtypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest.method);
})(TypeHierarchySubtypesRequest || (exports.TypeHierarchySubtypesRequest = TypeHierarchySubtypesRequest = {}));


/***/ }),

/***/ 6860:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;
const messages_1 = __webpack_require__(8431);
/**
 * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
 */
var WorkspaceFoldersRequest;
(function (WorkspaceFoldersRequest) {
    WorkspaceFoldersRequest.method = 'workspace/workspaceFolders';
    WorkspaceFoldersRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    WorkspaceFoldersRequest.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest.method);
})(WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = WorkspaceFoldersRequest = {}));
/**
 * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
 * folder configuration changes.
 */
var DidChangeWorkspaceFoldersNotification;
(function (DidChangeWorkspaceFoldersNotification) {
    DidChangeWorkspaceFoldersNotification.method = 'workspace/didChangeWorkspaceFolders';
    DidChangeWorkspaceFoldersNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeWorkspaceFoldersNotification.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification.method);
})(DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = DidChangeWorkspaceFoldersNotification = {}));


/***/ }),

/***/ 8633:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.objectLiteral = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function objectLiteral(value) {
    // Strictly speaking class instances pass this check as well. Since the LSP
    // doesn't use classes we ignore this for now. If we do we need to add something
    // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
    return value !== null && typeof value === 'object';
}
exports.objectLiteral = objectLiteral;


/***/ }),

/***/ 2730:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__(705);
var availableTypedArrays = __webpack_require__(4834);
var callBind = __webpack_require__(8498);
var callBound = __webpack_require__(9818);
var gOPD = __webpack_require__(9336);

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(1913)();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var cache = { __proto__: null };
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			cache['$' + typedArray] = callBind(descriptor.get);
		}
	});
} else {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		cache['$' + typedArray] = callBind(arr.slice);
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var found = false;
	forEach(cache, function (getter, typedArray) {
		if (!found) {
			try {
				if ('$' + getter(value) === typedArray) {
					found = $slice(typedArray, 1);
				}
			} catch (e) { /**/ }
		}
	});
	return found;
};

var trySlices = function tryAllSlices(value) {
	var found = false;
	forEach(cache, function (getter, name) {
		if (!found) {
			try {
				getter(value);
				found = $slice(name, 1);
			} catch (e) { /**/ }
		}
	});
	return found;
};

module.exports = function whichTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag) {
		var tag = $slice($toString(value), 8, -1);
		if ($indexOf(typedArrays, tag) > -1) {
			return tag;
		}
		if (tag !== 'Object') {
			return false;
		}
		// node < 0.6 hits here on real Typed Arrays
		return trySlices(value);
	}
	if (!gOPD) { return null; } // unknown engine
	return tryTypedArrays(value);
};


/***/ }),

/***/ 4834:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};


/***/ }),

/***/ 8041:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   V: () => (/* binding */ TextDocument)
/* harmony export */ });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

class FullTextDocument {
    constructor(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    get uri() {
        return this._uri;
    }
    get languageId() {
        return this._languageId;
    }
    get version() {
        return this._version;
    }
    getText(range) {
        if (range) {
            const start = this.offsetAt(range.start);
            const end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    }
    update(changes, version) {
        for (const change of changes) {
            if (FullTextDocument.isIncremental(change)) {
                // makes sure start is before end
                const range = getWellformedRange(change.range);
                // update content
                const startOffset = this.offsetAt(range.start);
                const endOffset = this.offsetAt(range.end);
                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
                // update the offsets
                const startLine = Math.max(range.start.line, 0);
                const endLine = Math.max(range.end.line, 0);
                let lineOffsets = this._lineOffsets;
                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
                if (endLine - startLine === addedLineOffsets.length) {
                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {
                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                    }
                }
                else {
                    if (addedLineOffsets.length < 10000) {
                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);
                    }
                    else { // avoid too many arguments for splice
                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                    }
                }
                const diff = change.text.length - (endOffset - startOffset);
                if (diff !== 0) {
                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {
                        lineOffsets[i] = lineOffsets[i] + diff;
                    }
                }
            }
            else if (FullTextDocument.isFull(change)) {
                this._content = change.text;
                this._lineOffsets = undefined;
            }
            else {
                throw new Error('Unknown change event received');
            }
        }
        this._version = version;
    }
    getLineOffsets() {
        if (this._lineOffsets === undefined) {
            this._lineOffsets = computeLineOffsets(this._content, true);
        }
        return this._lineOffsets;
    }
    positionAt(offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        const lineOffsets = this.getLineOffsets();
        let low = 0, high = lineOffsets.length;
        if (high === 0) {
            return { line: 0, character: offset };
        }
        while (low < high) {
            const mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        const line = low - 1;
        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);
        return { line, character: offset - lineOffsets[line] };
    }
    offsetAt(position) {
        const lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        const lineOffset = lineOffsets[position.line];
        if (position.character <= 0) {
            return lineOffset;
        }
        const nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        const offset = Math.min(lineOffset + position.character, nextLineOffset);
        return this.ensureBeforeEOL(offset, lineOffset);
    }
    ensureBeforeEOL(offset, lineOffset) {
        while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {
            offset--;
        }
        return offset;
    }
    get lineCount() {
        return this.getLineOffsets().length;
    }
    static isIncremental(event) {
        const candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    }
    static isFull(event) {
        const candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    }
}
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new text document.
     *
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param version The document's initial version number.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Updates a TextDocument by modifying its content.
     *
     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.
     * @param changes the changes to apply to the document.
     * @param version the changes version for the document.
     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.
     *
     */
    function update(document, changes, version) {
        if (document instanceof FullTextDocument) {
            document.update(changes, version);
            return document;
        }
        else {
            throw new Error('TextDocument.update: document must be created by TextDocument.create');
        }
    }
    TextDocument.update = update;
    function applyEdits(document, edits) {
        const text = document.getText();
        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {
            const diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        let lastModifiedOffset = 0;
        const spans = [];
        for (const e of sortedEdits) {
            const startOffset = document.offsetAt(e.range.start);
            if (startOffset < lastModifiedOffset) {
                throw new Error('Overlapping edit');
            }
            else if (startOffset > lastModifiedOffset) {
                spans.push(text.substring(lastModifiedOffset, startOffset));
            }
            if (e.newText.length) {
                spans.push(e.newText);
            }
            lastModifiedOffset = document.offsetAt(e.range.end);
        }
        spans.push(text.substr(lastModifiedOffset));
        return spans.join('');
    }
    TextDocument.applyEdits = applyEdits;
})(TextDocument || (TextDocument = {}));
function mergeSort(data, compare) {
    if (data.length <= 1) {
        // sorted
        return data;
    }
    const p = (data.length / 2) | 0;
    const left = data.slice(0, p);
    const right = data.slice(p);
    mergeSort(left, compare);
    mergeSort(right, compare);
    let leftIdx = 0;
    let rightIdx = 0;
    let i = 0;
    while (leftIdx < left.length && rightIdx < right.length) {
        const ret = compare(left[leftIdx], right[rightIdx]);
        if (ret <= 0) {
            // smaller_equal -> take left to preserve order
            data[i++] = left[leftIdx++];
        }
        else {
            // greater -> take right
            data[i++] = right[rightIdx++];
        }
    }
    while (leftIdx < left.length) {
        data[i++] = left[leftIdx++];
    }
    while (rightIdx < right.length) {
        data[i++] = right[rightIdx++];
    }
    return data;
}
function computeLineOffsets(text, isAtLineStart, textOffset = 0) {
    const result = isAtLineStart ? [textOffset] : [];
    for (let i = 0; i < text.length; i++) {
        const ch = text.charCodeAt(i);
        if (isEOL(ch)) {
            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {
                i++;
            }
            result.push(textOffset + i + 1);
        }
    }
    return result;
}
function isEOL(char) {
    return char === 13 /* CharCode.CarriageReturn */ || char === 10 /* CharCode.LineFeed */;
}
function getWellformedRange(range) {
    const start = range.start;
    const end = range.end;
    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {
        return { start: end, end: start };
    }
    return range;
}
function getWellformedEdit(textEdit) {
    const range = getWellformedRange(textEdit.range);
    if (range !== textEdit.range) {
        return { newText: textEdit.newText, range };
    }
    return textEdit;
}


/***/ }),

/***/ 2852:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AnnotatedTextEdit: () => (/* binding */ AnnotatedTextEdit),
/* harmony export */   ChangeAnnotation: () => (/* binding */ ChangeAnnotation),
/* harmony export */   ChangeAnnotationIdentifier: () => (/* binding */ ChangeAnnotationIdentifier),
/* harmony export */   CodeAction: () => (/* binding */ CodeAction),
/* harmony export */   CodeActionContext: () => (/* binding */ CodeActionContext),
/* harmony export */   CodeActionKind: () => (/* binding */ CodeActionKind),
/* harmony export */   CodeActionTriggerKind: () => (/* binding */ CodeActionTriggerKind),
/* harmony export */   CodeDescription: () => (/* binding */ CodeDescription),
/* harmony export */   CodeLens: () => (/* binding */ CodeLens),
/* harmony export */   Color: () => (/* binding */ Color),
/* harmony export */   ColorInformation: () => (/* binding */ ColorInformation),
/* harmony export */   ColorPresentation: () => (/* binding */ ColorPresentation),
/* harmony export */   Command: () => (/* binding */ Command),
/* harmony export */   CompletionItem: () => (/* binding */ CompletionItem),
/* harmony export */   CompletionItemKind: () => (/* binding */ CompletionItemKind),
/* harmony export */   CompletionItemLabelDetails: () => (/* binding */ CompletionItemLabelDetails),
/* harmony export */   CompletionItemTag: () => (/* binding */ CompletionItemTag),
/* harmony export */   CompletionList: () => (/* binding */ CompletionList),
/* harmony export */   CreateFile: () => (/* binding */ CreateFile),
/* harmony export */   DeleteFile: () => (/* binding */ DeleteFile),
/* harmony export */   Diagnostic: () => (/* binding */ Diagnostic),
/* harmony export */   DiagnosticRelatedInformation: () => (/* binding */ DiagnosticRelatedInformation),
/* harmony export */   DiagnosticSeverity: () => (/* binding */ DiagnosticSeverity),
/* harmony export */   DiagnosticTag: () => (/* binding */ DiagnosticTag),
/* harmony export */   DocumentHighlight: () => (/* binding */ DocumentHighlight),
/* harmony export */   DocumentHighlightKind: () => (/* binding */ DocumentHighlightKind),
/* harmony export */   DocumentLink: () => (/* binding */ DocumentLink),
/* harmony export */   DocumentSymbol: () => (/* binding */ DocumentSymbol),
/* harmony export */   DocumentUri: () => (/* binding */ DocumentUri),
/* harmony export */   EOL: () => (/* binding */ EOL),
/* harmony export */   FoldingRange: () => (/* binding */ FoldingRange),
/* harmony export */   FoldingRangeKind: () => (/* binding */ FoldingRangeKind),
/* harmony export */   FormattingOptions: () => (/* binding */ FormattingOptions),
/* harmony export */   Hover: () => (/* binding */ Hover),
/* harmony export */   InlayHint: () => (/* binding */ InlayHint),
/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),
/* harmony export */   InlayHintLabelPart: () => (/* binding */ InlayHintLabelPart),
/* harmony export */   InlineCompletionContext: () => (/* binding */ InlineCompletionContext),
/* harmony export */   InlineCompletionItem: () => (/* binding */ InlineCompletionItem),
/* harmony export */   InlineCompletionList: () => (/* binding */ InlineCompletionList),
/* harmony export */   InlineCompletionTriggerKind: () => (/* binding */ InlineCompletionTriggerKind),
/* harmony export */   InlineValueContext: () => (/* binding */ InlineValueContext),
/* harmony export */   InlineValueEvaluatableExpression: () => (/* binding */ InlineValueEvaluatableExpression),
/* harmony export */   InlineValueText: () => (/* binding */ InlineValueText),
/* harmony export */   InlineValueVariableLookup: () => (/* binding */ InlineValueVariableLookup),
/* harmony export */   InsertReplaceEdit: () => (/* binding */ InsertReplaceEdit),
/* harmony export */   InsertTextFormat: () => (/* binding */ InsertTextFormat),
/* harmony export */   InsertTextMode: () => (/* binding */ InsertTextMode),
/* harmony export */   Location: () => (/* binding */ Location),
/* harmony export */   LocationLink: () => (/* binding */ LocationLink),
/* harmony export */   MarkedString: () => (/* binding */ MarkedString),
/* harmony export */   MarkupContent: () => (/* binding */ MarkupContent),
/* harmony export */   MarkupKind: () => (/* binding */ MarkupKind),
/* harmony export */   OptionalVersionedTextDocumentIdentifier: () => (/* binding */ OptionalVersionedTextDocumentIdentifier),
/* harmony export */   ParameterInformation: () => (/* binding */ ParameterInformation),
/* harmony export */   Position: () => (/* binding */ Position),
/* harmony export */   Range: () => (/* binding */ Range),
/* harmony export */   RenameFile: () => (/* binding */ RenameFile),
/* harmony export */   SelectedCompletionInfo: () => (/* binding */ SelectedCompletionInfo),
/* harmony export */   SelectionRange: () => (/* binding */ SelectionRange),
/* harmony export */   SemanticTokenModifiers: () => (/* binding */ SemanticTokenModifiers),
/* harmony export */   SemanticTokenTypes: () => (/* binding */ SemanticTokenTypes),
/* harmony export */   SemanticTokens: () => (/* binding */ SemanticTokens),
/* harmony export */   SignatureInformation: () => (/* binding */ SignatureInformation),
/* harmony export */   StringValue: () => (/* binding */ StringValue),
/* harmony export */   SymbolInformation: () => (/* binding */ SymbolInformation),
/* harmony export */   SymbolKind: () => (/* binding */ SymbolKind),
/* harmony export */   SymbolTag: () => (/* binding */ SymbolTag),
/* harmony export */   TextDocument: () => (/* binding */ TextDocument),
/* harmony export */   TextDocumentEdit: () => (/* binding */ TextDocumentEdit),
/* harmony export */   TextDocumentIdentifier: () => (/* binding */ TextDocumentIdentifier),
/* harmony export */   TextDocumentItem: () => (/* binding */ TextDocumentItem),
/* harmony export */   TextEdit: () => (/* binding */ TextEdit),
/* harmony export */   URI: () => (/* binding */ URI),
/* harmony export */   VersionedTextDocumentIdentifier: () => (/* binding */ VersionedTextDocumentIdentifier),
/* harmony export */   WorkspaceChange: () => (/* binding */ WorkspaceChange),
/* harmony export */   WorkspaceEdit: () => (/* binding */ WorkspaceEdit),
/* harmony export */   WorkspaceFolder: () => (/* binding */ WorkspaceFolder),
/* harmony export */   WorkspaceSymbol: () => (/* binding */ WorkspaceSymbol),
/* harmony export */   integer: () => (/* binding */ integer),
/* harmony export */   uinteger: () => (/* binding */ uinteger)
/* harmony export */ });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

var DocumentUri;
(function (DocumentUri) {
    function is(value) {
        return typeof value === 'string';
    }
    DocumentUri.is = is;
})(DocumentUri || (DocumentUri = {}));
var URI;
(function (URI) {
    function is(value) {
        return typeof value === 'string';
    }
    URI.is = is;
})(URI || (URI = {}));
var integer;
(function (integer) {
    integer.MIN_VALUE = -2147483648;
    integer.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;
    }
    integer.is = is;
})(integer || (integer = {}));
var uinteger;
(function (uinteger) {
    uinteger.MIN_VALUE = 0;
    uinteger.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;
    }
    uinteger.is = is;
})(uinteger || (uinteger = {}));
/**
 * The Position namespace provides helper functions to work with
 * {@link Position} literals.
 */
var Position;
(function (Position) {
    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */
    function create(line, character) {
        if (line === Number.MAX_VALUE) {
            line = uinteger.MAX_VALUE;
        }
        if (character === Number.MAX_VALUE) {
            character = uinteger.MAX_VALUE;
        }
        return { line, character };
    }
    Position.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Position} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
    }
    Position.is = is;
})(Position || (Position = {}));
/**
 * The Range namespace provides helper functions to work with
 * {@link Range} literals.
 */
var Range;
(function (Range) {
    function create(one, two, three, four) {
        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
            return { start: Position.create(one, two), end: Position.create(three, four) };
        }
        else if (Position.is(one) && Position.is(two)) {
            return { start: one, end: two };
        }
        else {
            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);
        }
    }
    Range.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Range} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
    }
    Range.is = is;
})(Range || (Range = {}));
/**
 * The Location namespace provides helper functions to work with
 * {@link Location} literals.
 */
var Location;
(function (Location) {
    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */
    function create(uri, range) {
        return { uri, range };
    }
    Location.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Location} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location.is = is;
})(Location || (Location = {}));
/**
 * The LocationLink namespace provides helper functions to work with
 * {@link LocationLink} literals.
 */
var LocationLink;
(function (LocationLink) {
    /**
     * Creates a LocationLink literal.
     * @param targetUri The definition's uri.
     * @param targetRange The full range of the definition.
     * @param targetSelectionRange The span of the symbol definition at the target.
     * @param originSelectionRange The span of the symbol being defined in the originating source file.
     */
    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };
    }
    LocationLink.create = create;
    /**
     * Checks whether the given literal conforms to the {@link LocationLink} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)
            && Range.is(candidate.targetSelectionRange)
            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
    }
    LocationLink.is = is;
})(LocationLink || (LocationLink = {}));
/**
 * The Color namespace provides helper functions to work with
 * {@link Color} literals.
 */
var Color;
(function (Color) {
    /**
     * Creates a new Color literal.
     */
    function create(red, green, blue, alpha) {
        return {
            red,
            green,
            blue,
            alpha,
        };
    }
    Color.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Color} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)
            && Is.numberRange(candidate.green, 0, 1)
            && Is.numberRange(candidate.blue, 0, 1)
            && Is.numberRange(candidate.alpha, 0, 1);
    }
    Color.is = is;
})(Color || (Color = {}));
/**
 * The ColorInformation namespace provides helper functions to work with
 * {@link ColorInformation} literals.
 */
var ColorInformation;
(function (ColorInformation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(range, color) {
        return {
            range,
            color,
        };
    }
    ColorInformation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
    }
    ColorInformation.is = is;
})(ColorInformation || (ColorInformation = {}));
/**
 * The Color namespace provides helper functions to work with
 * {@link ColorPresentation} literals.
 */
var ColorPresentation;
(function (ColorPresentation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(label, textEdit, additionalTextEdits) {
        return {
            label,
            textEdit,
            additionalTextEdits,
        };
    }
    ColorPresentation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label)
            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))
            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
    }
    ColorPresentation.is = is;
})(ColorPresentation || (ColorPresentation = {}));
/**
 * A set of predefined range kinds.
 */
var FoldingRangeKind;
(function (FoldingRangeKind) {
    /**
     * Folding range for a comment
     */
    FoldingRangeKind.Comment = 'comment';
    /**
     * Folding range for an import or include
     */
    FoldingRangeKind.Imports = 'imports';
    /**
     * Folding range for a region (e.g. `#region`)
     */
    FoldingRangeKind.Region = 'region';
})(FoldingRangeKind || (FoldingRangeKind = {}));
/**
 * The folding range namespace provides helper functions to work with
 * {@link FoldingRange} literals.
 */
var FoldingRange;
(function (FoldingRange) {
    /**
     * Creates a new FoldingRange literal.
     */
    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
        const result = {
            startLine,
            endLine
        };
        if (Is.defined(startCharacter)) {
            result.startCharacter = startCharacter;
        }
        if (Is.defined(endCharacter)) {
            result.endCharacter = endCharacter;
        }
        if (Is.defined(kind)) {
            result.kind = kind;
        }
        if (Is.defined(collapsedText)) {
            result.collapsedText = collapsedText;
        }
        return result;
    }
    FoldingRange.create = create;
    /**
     * Checks whether the given literal conforms to the {@link FoldingRange} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)
            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))
            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))
            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
    }
    FoldingRange.is = is;
})(FoldingRange || (FoldingRange = {}));
/**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * {@link DiagnosticRelatedInformation} literals.
 */
var DiagnosticRelatedInformation;
(function (DiagnosticRelatedInformation) {
    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */
    function create(location, message) {
        return {
            location,
            message
        };
    }
    DiagnosticRelatedInformation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation.is = is;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
/**
 * The diagnostic's severity.
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    /**
     * Reports an error.
     */
    DiagnosticSeverity.Error = 1;
    /**
     * Reports a warning.
     */
    DiagnosticSeverity.Warning = 2;
    /**
     * Reports an information.
     */
    DiagnosticSeverity.Information = 3;
    /**
     * Reports a hint.
     */
    DiagnosticSeverity.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
/**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */
var DiagnosticTag;
(function (DiagnosticTag) {
    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out instead of having
     * an error squiggle.
     */
    DiagnosticTag.Unnecessary = 1;
    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */
    DiagnosticTag.Deprecated = 2;
})(DiagnosticTag || (DiagnosticTag = {}));
/**
 * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
 *
 * @since 3.16.0
 */
var CodeDescription;
(function (CodeDescription) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.href);
    }
    CodeDescription.is = is;
})(CodeDescription || (CodeDescription = {}));
/**
 * The Diagnostic namespace provides helper functions to work with
 * {@link Diagnostic} literals.
 */
var Diagnostic;
(function (Diagnostic) {
    /**
     * Creates a new Diagnostic literal.
     */
    function create(range, message, severity, code, source, relatedInformation) {
        let result = { range, message };
        if (Is.defined(severity)) {
            result.severity = severity;
        }
        if (Is.defined(code)) {
            result.code = code;
        }
        if (Is.defined(source)) {
            result.source = source;
        }
        if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
        }
        return result;
    }
    Diagnostic.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Diagnostic} interface.
     */
    function is(value) {
        var _a;
        let candidate = value;
        return Is.defined(candidate)
            && Range.is(candidate.range)
            && Is.string(candidate.message)
            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))
            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))
            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))
            && (Is.string(candidate.source) || Is.undefined(candidate.source))
            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic.is = is;
})(Diagnostic || (Diagnostic = {}));
/**
 * The Command namespace provides helper functions to work with
 * {@link Command} literals.
 */
var Command;
(function (Command) {
    /**
     * Creates a new Command literal.
     */
    function create(title, command, ...args) {
        let result = { title, command };
        if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
        }
        return result;
    }
    Command.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Command} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
    }
    Command.is = is;
})(Command || (Command = {}));
/**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */
var TextEdit;
(function (TextEdit) {
    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */
    function replace(range, newText) {
        return { range, newText };
    }
    TextEdit.replace = replace;
    /**
     * Creates an insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */
    function insert(position, newText) {
        return { range: { start: position, end: position }, newText };
    }
    TextEdit.insert = insert;
    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */
    function del(range) {
        return { range, newText: '' };
    }
    TextEdit.del = del;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate)
            && Is.string(candidate.newText)
            && Range.is(candidate.range);
    }
    TextEdit.is = is;
})(TextEdit || (TextEdit = {}));
var ChangeAnnotation;
(function (ChangeAnnotation) {
    function create(label, needsConfirmation, description) {
        const result = { label };
        if (needsConfirmation !== undefined) {
            result.needsConfirmation = needsConfirmation;
        }
        if (description !== undefined) {
            result.description = description;
        }
        return result;
    }
    ChangeAnnotation.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&
            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    ChangeAnnotation.is = is;
})(ChangeAnnotation || (ChangeAnnotation = {}));
var ChangeAnnotationIdentifier;
(function (ChangeAnnotationIdentifier) {
    function is(value) {
        const candidate = value;
        return Is.string(candidate);
    }
    ChangeAnnotationIdentifier.is = is;
})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
var AnnotatedTextEdit;
(function (AnnotatedTextEdit) {
    /**
     * Creates an annotated replace text edit.
     *
     * @param range The range of text to be replaced.
     * @param newText The new text.
     * @param annotation The annotation.
     */
    function replace(range, newText, annotation) {
        return { range, newText, annotationId: annotation };
    }
    AnnotatedTextEdit.replace = replace;
    /**
     * Creates an annotated insert text edit.
     *
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     * @param annotation The annotation.
     */
    function insert(position, newText, annotation) {
        return { range: { start: position, end: position }, newText, annotationId: annotation };
    }
    AnnotatedTextEdit.insert = insert;
    /**
     * Creates an annotated delete text edit.
     *
     * @param range The range of text to be deleted.
     * @param annotation The annotation.
     */
    function del(range, annotation) {
        return { range, newText: '', annotationId: annotation };
    }
    AnnotatedTextEdit.del = del;
    function is(value) {
        const candidate = value;
        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    AnnotatedTextEdit.is = is;
})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
/**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */
var TextDocumentEdit;
(function (TextDocumentEdit) {
    /**
     * Creates a new `TextDocumentEdit`
     */
    function create(textDocument, edits) {
        return { textDocument, edits };
    }
    TextDocumentEdit.create = create;
    function is(value) {
        let candidate = value;
        return Is.defined(candidate)
            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)
            && Array.isArray(candidate.edits);
    }
    TextDocumentEdit.is = is;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var CreateFile;
(function (CreateFile) {
    function create(uri, options, annotation) {
        let result = {
            kind: 'create',
            uri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    CreateFile.create = create;
    function is(value) {
        let candidate = value;
        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    CreateFile.is = is;
})(CreateFile || (CreateFile = {}));
var RenameFile;
(function (RenameFile) {
    function create(oldUri, newUri, options, annotation) {
        let result = {
            kind: 'rename',
            oldUri,
            newUri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    RenameFile.create = create;
    function is(value) {
        let candidate = value;
        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    RenameFile.is = is;
})(RenameFile || (RenameFile = {}));
var DeleteFile;
(function (DeleteFile) {
    function create(uri, options, annotation) {
        let result = {
            kind: 'delete',
            uri
        };
        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    DeleteFile.create = create;
    function is(value) {
        let candidate = value;
        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    DeleteFile.is = is;
})(DeleteFile || (DeleteFile = {}));
var WorkspaceEdit;
(function (WorkspaceEdit) {
    function is(value) {
        let candidate = value;
        return candidate &&
            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&
            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {
                if (Is.string(change.kind)) {
                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                }
                else {
                    return TextDocumentEdit.is(change);
                }
            }));
    }
    WorkspaceEdit.is = is;
})(WorkspaceEdit || (WorkspaceEdit = {}));
class TextEditChangeImpl {
    constructor(edits, changeAnnotations) {
        this.edits = edits;
        this.changeAnnotations = changeAnnotations;
    }
    insert(position, newText, annotation) {
        let edit;
        let id;
        if (annotation === undefined) {
            edit = TextEdit.insert(position, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.insert(position, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.insert(position, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    }
    replace(range, newText, annotation) {
        let edit;
        let id;
        if (annotation === undefined) {
            edit = TextEdit.replace(range, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.replace(range, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.replace(range, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    }
    delete(range, annotation) {
        let edit;
        let id;
        if (annotation === undefined) {
            edit = TextEdit.del(range);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.del(range, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.del(range, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    }
    add(edit) {
        this.edits.push(edit);
    }
    all() {
        return this.edits;
    }
    clear() {
        this.edits.splice(0, this.edits.length);
    }
    assertChangeAnnotations(value) {
        if (value === undefined) {
            throw new Error(`Text edit change is not configured to manage change annotations.`);
        }
    }
}
/**
 * A helper class
 */
class ChangeAnnotations {
    constructor(annotations) {
        this._annotations = annotations === undefined ? Object.create(null) : annotations;
        this._counter = 0;
        this._size = 0;
    }
    all() {
        return this._annotations;
    }
    get size() {
        return this._size;
    }
    manage(idOrAnnotation, annotation) {
        let id;
        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
            id = idOrAnnotation;
        }
        else {
            id = this.nextId();
            annotation = idOrAnnotation;
        }
        if (this._annotations[id] !== undefined) {
            throw new Error(`Id ${id} is already in use.`);
        }
        if (annotation === undefined) {
            throw new Error(`No annotation provided for id ${id}`);
        }
        this._annotations[id] = annotation;
        this._size++;
        return id;
    }
    nextId() {
        this._counter++;
        return this._counter.toString();
    }
}
/**
 * A workspace change helps constructing changes to a workspace.
 */
class WorkspaceChange {
    constructor(workspaceEdit) {
        this._textEditChanges = Object.create(null);
        if (workspaceEdit !== undefined) {
            this._workspaceEdit = workspaceEdit;
            if (workspaceEdit.documentChanges) {
                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                workspaceEdit.documentChanges.forEach((change) => {
                    if (TextDocumentEdit.is(change)) {
                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);
                        this._textEditChanges[change.textDocument.uri] = textEditChange;
                    }
                });
            }
            else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach((key) => {
                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                    this._textEditChanges[key] = textEditChange;
                });
            }
        }
        else {
            this._workspaceEdit = {};
        }
    }
    /**
     * Returns the underlying {@link WorkspaceEdit} literal
     * use to be returned from a workspace edit operation like rename.
     */
    get edit() {
        this.initDocumentChanges();
        if (this._changeAnnotations !== undefined) {
            if (this._changeAnnotations.size === 0) {
                this._workspaceEdit.changeAnnotations = undefined;
            }
            else {
                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
            }
        }
        return this._workspaceEdit;
    }
    getTextEditChange(key) {
        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === undefined) {
                throw new Error('Workspace edit is not configured for document changes.');
            }
            const textDocument = { uri: key.uri, version: key.version };
            let result = this._textEditChanges[textDocument.uri];
            if (!result) {
                const edits = [];
                const textDocumentEdit = {
                    textDocument,
                    edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                this._textEditChanges[textDocument.uri] = result;
            }
            return result;
        }
        else {
            this.initChanges();
            if (this._workspaceEdit.changes === undefined) {
                throw new Error('Workspace edit is not configured for normal text edit changes.');
            }
            let result = this._textEditChanges[key];
            if (!result) {
                let edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
            }
            return result;
        }
    }
    initDocumentChanges() {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._changeAnnotations = new ChangeAnnotations();
            this._workspaceEdit.documentChanges = [];
            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
        }
    }
    initChanges() {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._workspaceEdit.changes = Object.create(null);
        }
    }
    createFile(uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        let annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        let operation;
        let id;
        if (annotation === undefined) {
            operation = CreateFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = CreateFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    }
    renameFile(oldUri, newUri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        let annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        let operation;
        let id;
        if (annotation === undefined) {
            operation = RenameFile.create(oldUri, newUri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = RenameFile.create(oldUri, newUri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    }
    deleteFile(uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        let annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        let operation;
        let id;
        if (annotation === undefined) {
            operation = DeleteFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = DeleteFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    }
}
/**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * {@link TextDocumentIdentifier} literals.
 */
var TextDocumentIdentifier;
(function (TextDocumentIdentifier) {
    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */
    function create(uri) {
        return { uri };
    }
    TextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier.is = is;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
/**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link VersionedTextDocumentIdentifier} literals.
 */
var VersionedTextDocumentIdentifier;
(function (VersionedTextDocumentIdentifier) {
    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri, version };
    }
    VersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
    }
    VersionedTextDocumentIdentifier.is = is;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
/**
 * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link OptionalVersionedTextDocumentIdentifier} literals.
 */
var OptionalVersionedTextDocumentIdentifier;
(function (OptionalVersionedTextDocumentIdentifier) {
    /**
     * Creates a new OptionalVersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri, version };
    }
    OptionalVersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
    }
    OptionalVersionedTextDocumentIdentifier.is = is;
})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
/**
 * The TextDocumentItem namespace provides helper functions to work with
 * {@link TextDocumentItem} literals.
 */
var TextDocumentItem;
(function (TextDocumentItem) {
    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */
    function create(uri, languageId, version, text) {
        return { uri, languageId, version, text };
    }
    TextDocumentItem.create = create;
    /**
     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem.is = is;
})(TextDocumentItem || (TextDocumentItem = {}));
/**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */
var MarkupKind;
(function (MarkupKind) {
    /**
     * Plain text is supported as a content format
     */
    MarkupKind.PlainText = 'plaintext';
    /**
     * Markdown is supported as a content format
     */
    MarkupKind.Markdown = 'markdown';
    /**
     * Checks whether the given value is a value of the {@link MarkupKind} type.
     */
    function is(value) {
        const candidate = value;
        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
    }
    MarkupKind.is = is;
})(MarkupKind || (MarkupKind = {}));
var MarkupContent;
(function (MarkupContent) {
    /**
     * Checks whether the given value conforms to the {@link MarkupContent} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
    }
    MarkupContent.is = is;
})(MarkupContent || (MarkupContent = {}));
/**
 * The kind of a completion entry.
 */
var CompletionItemKind;
(function (CompletionItemKind) {
    CompletionItemKind.Text = 1;
    CompletionItemKind.Method = 2;
    CompletionItemKind.Function = 3;
    CompletionItemKind.Constructor = 4;
    CompletionItemKind.Field = 5;
    CompletionItemKind.Variable = 6;
    CompletionItemKind.Class = 7;
    CompletionItemKind.Interface = 8;
    CompletionItemKind.Module = 9;
    CompletionItemKind.Property = 10;
    CompletionItemKind.Unit = 11;
    CompletionItemKind.Value = 12;
    CompletionItemKind.Enum = 13;
    CompletionItemKind.Keyword = 14;
    CompletionItemKind.Snippet = 15;
    CompletionItemKind.Color = 16;
    CompletionItemKind.File = 17;
    CompletionItemKind.Reference = 18;
    CompletionItemKind.Folder = 19;
    CompletionItemKind.EnumMember = 20;
    CompletionItemKind.Constant = 21;
    CompletionItemKind.Struct = 22;
    CompletionItemKind.Event = 23;
    CompletionItemKind.Operator = 24;
    CompletionItemKind.TypeParameter = 25;
})(CompletionItemKind || (CompletionItemKind = {}));
/**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */
var InsertTextFormat;
(function (InsertTextFormat) {
    /**
     * The primary text to be inserted is treated as a plain string.
     */
    InsertTextFormat.PlainText = 1;
    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
     */
    InsertTextFormat.Snippet = 2;
})(InsertTextFormat || (InsertTextFormat = {}));
/**
 * Completion item tags are extra annotations that tweak the rendering of a completion
 * item.
 *
 * @since 3.15.0
 */
var CompletionItemTag;
(function (CompletionItemTag) {
    /**
     * Render a completion as obsolete, usually using a strike-out.
     */
    CompletionItemTag.Deprecated = 1;
})(CompletionItemTag || (CompletionItemTag = {}));
/**
 * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
 *
 * @since 3.16.0
 */
var InsertReplaceEdit;
(function (InsertReplaceEdit) {
    /**
     * Creates a new insert / replace edit
     */
    function create(newText, insert, replace) {
        return { newText, insert, replace };
    }
    InsertReplaceEdit.create = create;
    /**
     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.
     */
    function is(value) {
        const candidate = value;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
    }
    InsertReplaceEdit.is = is;
})(InsertReplaceEdit || (InsertReplaceEdit = {}));
/**
 * How whitespace and indentation is handled during completion
 * item insertion.
 *
 * @since 3.16.0
 */
var InsertTextMode;
(function (InsertTextMode) {
    /**
     * The insertion or replace strings is taken as it is. If the
     * value is multi line the lines below the cursor will be
     * inserted using the indentation defined in the string value.
     * The client will not apply any kind of adjustments to the
     * string.
     */
    InsertTextMode.asIs = 1;
    /**
     * The editor adjusts leading whitespace of new lines so that
     * they match the indentation up to the cursor of the line for
     * which the item is accepted.
     *
     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
     * multi line completion item is indented using 2 tabs and all
     * following lines inserted will be indented using 2 tabs as well.
     */
    InsertTextMode.adjustIndentation = 2;
})(InsertTextMode || (InsertTextMode = {}));
var CompletionItemLabelDetails;
(function (CompletionItemLabelDetails) {
    function is(value) {
        const candidate = value;
        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    CompletionItemLabelDetails.is = is;
})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
/**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */
var CompletionItem;
(function (CompletionItem) {
    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */
    function create(label) {
        return { label };
    }
    CompletionItem.create = create;
})(CompletionItem || (CompletionItem = {}));
/**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */
var CompletionList;
(function (CompletionList) {
    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */
    function create(items, isIncomplete) {
        return { items: items ? items : [], isIncomplete: !!isIncomplete };
    }
    CompletionList.create = create;
})(CompletionList || (CompletionList = {}));
var MarkedString;
(function (MarkedString) {
    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */
    function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    }
    MarkedString.fromPlainText = fromPlainText;
    /**
     * Checks whether the given value conforms to the {@link MarkedString} type.
     */
    function is(value) {
        const candidate = value;
        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));
    }
    MarkedString.is = is;
})(MarkedString || (MarkedString = {}));
var Hover;
(function (Hover) {
    /**
     * Checks whether the given value conforms to the {@link Hover} interface.
     */
    function is(value) {
        let candidate = value;
        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||
            MarkedString.is(candidate.contents) ||
            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));
    }
    Hover.is = is;
})(Hover || (Hover = {}));
/**
 * The ParameterInformation namespace provides helper functions to work with
 * {@link ParameterInformation} literals.
 */
var ParameterInformation;
(function (ParameterInformation) {
    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */
    function create(label, documentation) {
        return documentation ? { label, documentation } : { label };
    }
    ParameterInformation.create = create;
})(ParameterInformation || (ParameterInformation = {}));
/**
 * The SignatureInformation namespace provides helper functions to work with
 * {@link SignatureInformation} literals.
 */
var SignatureInformation;
(function (SignatureInformation) {
    function create(label, documentation, ...parameters) {
        let result = { label };
        if (Is.defined(documentation)) {
            result.documentation = documentation;
        }
        if (Is.defined(parameters)) {
            result.parameters = parameters;
        }
        else {
            result.parameters = [];
        }
        return result;
    }
    SignatureInformation.create = create;
})(SignatureInformation || (SignatureInformation = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind.Text = 1;
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind.Read = 2;
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
/**
 * DocumentHighlight namespace to provide helper functions to work with
 * {@link DocumentHighlight} literals.
 */
var DocumentHighlight;
(function (DocumentHighlight) {
    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     * @param kind The highlight kind
     */
    function create(range, kind) {
        let result = { range };
        if (Is.number(kind)) {
            result.kind = kind;
        }
        return result;
    }
    DocumentHighlight.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind.File = 1;
    SymbolKind.Module = 2;
    SymbolKind.Namespace = 3;
    SymbolKind.Package = 4;
    SymbolKind.Class = 5;
    SymbolKind.Method = 6;
    SymbolKind.Property = 7;
    SymbolKind.Field = 8;
    SymbolKind.Constructor = 9;
    SymbolKind.Enum = 10;
    SymbolKind.Interface = 11;
    SymbolKind.Function = 12;
    SymbolKind.Variable = 13;
    SymbolKind.Constant = 14;
    SymbolKind.String = 15;
    SymbolKind.Number = 16;
    SymbolKind.Boolean = 17;
    SymbolKind.Array = 18;
    SymbolKind.Object = 19;
    SymbolKind.Key = 20;
    SymbolKind.Null = 21;
    SymbolKind.EnumMember = 22;
    SymbolKind.Struct = 23;
    SymbolKind.Event = 24;
    SymbolKind.Operator = 25;
    SymbolKind.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
/**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 *
 * @since 3.16
 */
var SymbolTag;
(function (SymbolTag) {
    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */
    SymbolTag.Deprecated = 1;
})(SymbolTag || (SymbolTag = {}));
var SymbolInformation;
(function (SymbolInformation) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol.
     * @param containerName The name of the symbol containing the symbol.
     */
    function create(name, kind, range, uri, containerName) {
        let result = {
            name,
            kind,
            location: { uri, range }
        };
        if (containerName) {
            result.containerName = containerName;
        }
        return result;
    }
    SymbolInformation.create = create;
})(SymbolInformation || (SymbolInformation = {}));
var WorkspaceSymbol;
(function (WorkspaceSymbol) {
    /**
     * Create a new workspace symbol.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param uri The resource of the location of the symbol.
     * @param range An options range of the location.
     * @returns A WorkspaceSymbol.
     */
    function create(name, kind, uri, range) {
        return range !== undefined
            ? { name, kind, location: { uri, range } }
            : { name, kind, location: { uri } };
    }
    WorkspaceSymbol.create = create;
})(WorkspaceSymbol || (WorkspaceSymbol = {}));
var DocumentSymbol;
(function (DocumentSymbol) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param detail The detail of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the symbol.
     * @param selectionRange The selectionRange of the symbol.
     * @param children Children of the symbol.
     */
    function create(name, detail, kind, range, selectionRange, children) {
        let result = {
            name,
            detail,
            kind,
            range,
            selectionRange
        };
        if (children !== undefined) {
            result.children = children;
        }
        return result;
    }
    DocumentSymbol.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.
     */
    function is(value) {
        let candidate = value;
        return candidate &&
            Is.string(candidate.name) && Is.number(candidate.kind) &&
            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&
            (candidate.detail === undefined || Is.string(candidate.detail)) &&
            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&
            (candidate.children === undefined || Array.isArray(candidate.children)) &&
            (candidate.tags === undefined || Array.isArray(candidate.tags));
    }
    DocumentSymbol.is = is;
})(DocumentSymbol || (DocumentSymbol = {}));
/**
 * A set of predefined code action kinds
 */
var CodeActionKind;
(function (CodeActionKind) {
    /**
     * Empty kind.
     */
    CodeActionKind.Empty = '';
    /**
     * Base kind for quickfix actions: 'quickfix'
     */
    CodeActionKind.QuickFix = 'quickfix';
    /**
     * Base kind for refactoring actions: 'refactor'
     */
    CodeActionKind.Refactor = 'refactor';
    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */
    CodeActionKind.RefactorExtract = 'refactor.extract';
    /**
     * Base kind for refactoring inline actions: 'refactor.inline'
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */
    CodeActionKind.RefactorInline = 'refactor.inline';
    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */
    CodeActionKind.RefactorRewrite = 'refactor.rewrite';
    /**
     * Base kind for source actions: `source`
     *
     * Source code actions apply to the entire file.
     */
    CodeActionKind.Source = 'source';
    /**
     * Base kind for an organize imports source action: `source.organizeImports`
     */
    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
    /**
     * Base kind for auto-fix source actions: `source.fixAll`.
     *
     * Fix all actions automatically fix errors that have a clear fix that do not require user input.
     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
     *
     * @since 3.15.0
     */
    CodeActionKind.SourceFixAll = 'source.fixAll';
})(CodeActionKind || (CodeActionKind = {}));
/**
 * The reason why code actions were requested.
 *
 * @since 3.17.0
 */
var CodeActionTriggerKind;
(function (CodeActionTriggerKind) {
    /**
     * Code actions were explicitly requested by the user or by an extension.
     */
    CodeActionTriggerKind.Invoked = 1;
    /**
     * Code actions were requested automatically.
     *
     * This typically happens when current selection in a file changes, but can
     * also be triggered when file content changes.
     */
    CodeActionTriggerKind.Automatic = 2;
})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
/**
 * The CodeActionContext namespace provides helper functions to work with
 * {@link CodeActionContext} literals.
 */
var CodeActionContext;
(function (CodeActionContext) {
    /**
     * Creates a new CodeActionContext literal.
     */
    function create(diagnostics, only, triggerKind) {
        let result = { diagnostics };
        if (only !== undefined && only !== null) {
            result.only = only;
        }
        if (triggerKind !== undefined && triggerKind !== null) {
            result.triggerKind = triggerKind;
        }
        return result;
    }
    CodeActionContext.create = create;
    /**
     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)
            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))
            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
    }
    CodeActionContext.is = is;
})(CodeActionContext || (CodeActionContext = {}));
var CodeAction;
(function (CodeAction) {
    function create(title, kindOrCommandOrEdit, kind) {
        let result = { title };
        let checkKind = true;
        if (typeof kindOrCommandOrEdit === 'string') {
            checkKind = false;
            result.kind = kindOrCommandOrEdit;
        }
        else if (Command.is(kindOrCommandOrEdit)) {
            result.command = kindOrCommandOrEdit;
        }
        else {
            result.edit = kindOrCommandOrEdit;
        }
        if (checkKind && kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    CodeAction.create = create;
    function is(value) {
        let candidate = value;
        return candidate && Is.string(candidate.title) &&
            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&
            (candidate.kind === undefined || Is.string(candidate.kind)) &&
            (candidate.edit !== undefined || candidate.command !== undefined) &&
            (candidate.command === undefined || Command.is(candidate.command)) &&
            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&
            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));
    }
    CodeAction.is = is;
})(CodeAction || (CodeAction = {}));
/**
 * The CodeLens namespace provides helper functions to work with
 * {@link CodeLens} literals.
 */
var CodeLens;
(function (CodeLens) {
    /**
     * Creates a new CodeLens literal.
     */
    function create(range, data) {
        let result = { range };
        if (Is.defined(data)) {
            result.data = data;
        }
        return result;
    }
    CodeLens.create = create;
    /**
     * Checks whether the given literal conforms to the {@link CodeLens} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
    }
    CodeLens.is = is;
})(CodeLens || (CodeLens = {}));
/**
 * The FormattingOptions namespace provides helper functions to work with
 * {@link FormattingOptions} literals.
 */
var FormattingOptions;
(function (FormattingOptions) {
    /**
     * Creates a new FormattingOptions literal.
     */
    function create(tabSize, insertSpaces) {
        return { tabSize, insertSpaces };
    }
    FormattingOptions.create = create;
    /**
     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions.is = is;
})(FormattingOptions || (FormattingOptions = {}));
/**
 * The DocumentLink namespace provides helper functions to work with
 * {@link DocumentLink} literals.
 */
var DocumentLink;
(function (DocumentLink) {
    /**
     * Creates a new DocumentLink literal.
     */
    function create(range, target, data) {
        return { range, target, data };
    }
    DocumentLink.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DocumentLink} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink.is = is;
})(DocumentLink || (DocumentLink = {}));
/**
 * The SelectionRange namespace provides helper function to work with
 * SelectionRange literals.
 */
var SelectionRange;
(function (SelectionRange) {
    /**
     * Creates a new SelectionRange
     * @param range the range.
     * @param parent an optional parent.
     */
    function create(range, parent) {
        return { range, parent };
    }
    SelectionRange.create = create;
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
    }
    SelectionRange.is = is;
})(SelectionRange || (SelectionRange = {}));
/**
 * A set of predefined token types. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenTypes;
(function (SemanticTokenTypes) {
    SemanticTokenTypes["namespace"] = "namespace";
    /**
     * Represents a generic type. Acts as a fallback for types which can't be mapped to
     * a specific type like class or enum.
     */
    SemanticTokenTypes["type"] = "type";
    SemanticTokenTypes["class"] = "class";
    SemanticTokenTypes["enum"] = "enum";
    SemanticTokenTypes["interface"] = "interface";
    SemanticTokenTypes["struct"] = "struct";
    SemanticTokenTypes["typeParameter"] = "typeParameter";
    SemanticTokenTypes["parameter"] = "parameter";
    SemanticTokenTypes["variable"] = "variable";
    SemanticTokenTypes["property"] = "property";
    SemanticTokenTypes["enumMember"] = "enumMember";
    SemanticTokenTypes["event"] = "event";
    SemanticTokenTypes["function"] = "function";
    SemanticTokenTypes["method"] = "method";
    SemanticTokenTypes["macro"] = "macro";
    SemanticTokenTypes["keyword"] = "keyword";
    SemanticTokenTypes["modifier"] = "modifier";
    SemanticTokenTypes["comment"] = "comment";
    SemanticTokenTypes["string"] = "string";
    SemanticTokenTypes["number"] = "number";
    SemanticTokenTypes["regexp"] = "regexp";
    SemanticTokenTypes["operator"] = "operator";
    /**
     * @since 3.17.0
     */
    SemanticTokenTypes["decorator"] = "decorator";
})(SemanticTokenTypes || (SemanticTokenTypes = {}));
/**
 * A set of predefined token modifiers. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenModifiers;
(function (SemanticTokenModifiers) {
    SemanticTokenModifiers["declaration"] = "declaration";
    SemanticTokenModifiers["definition"] = "definition";
    SemanticTokenModifiers["readonly"] = "readonly";
    SemanticTokenModifiers["static"] = "static";
    SemanticTokenModifiers["deprecated"] = "deprecated";
    SemanticTokenModifiers["abstract"] = "abstract";
    SemanticTokenModifiers["async"] = "async";
    SemanticTokenModifiers["modification"] = "modification";
    SemanticTokenModifiers["documentation"] = "documentation";
    SemanticTokenModifiers["defaultLibrary"] = "defaultLibrary";
})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
/**
 * @since 3.16.0
 */
var SemanticTokens;
(function (SemanticTokens) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&
            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');
    }
    SemanticTokens.is = is;
})(SemanticTokens || (SemanticTokens = {}));
/**
 * The InlineValueText namespace provides functions to deal with InlineValueTexts.
 *
 * @since 3.17.0
 */
var InlineValueText;
(function (InlineValueText) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, text) {
        return { range, text };
    }
    InlineValueText.create = create;
    function is(value) {
        const candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
    }
    InlineValueText.is = is;
})(InlineValueText || (InlineValueText = {}));
/**
 * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.
 *
 * @since 3.17.0
 */
var InlineValueVariableLookup;
(function (InlineValueVariableLookup) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, variableName, caseSensitiveLookup) {
        return { range, variableName, caseSensitiveLookup };
    }
    InlineValueVariableLookup.create = create;
    function is(value) {
        const candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)
            && (Is.string(candidate.variableName) || candidate.variableName === undefined);
    }
    InlineValueVariableLookup.is = is;
})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
/**
 * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.
 *
 * @since 3.17.0
 */
var InlineValueEvaluatableExpression;
(function (InlineValueEvaluatableExpression) {
    /**
     * Creates a new InlineValueEvaluatableExpression literal.
     */
    function create(range, expression) {
        return { range, expression };
    }
    InlineValueEvaluatableExpression.create = create;
    function is(value) {
        const candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range)
            && (Is.string(candidate.expression) || candidate.expression === undefined);
    }
    InlineValueEvaluatableExpression.is = is;
})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
/**
 * The InlineValueContext namespace provides helper functions to work with
 * {@link InlineValueContext} literals.
 *
 * @since 3.17.0
 */
var InlineValueContext;
(function (InlineValueContext) {
    /**
     * Creates a new InlineValueContext literal.
     */
    function create(frameId, stoppedLocation) {
        return { frameId, stoppedLocation };
    }
    InlineValueContext.create = create;
    /**
     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.defined(candidate) && Range.is(value.stoppedLocation);
    }
    InlineValueContext.is = is;
})(InlineValueContext || (InlineValueContext = {}));
/**
 * Inlay hint kinds.
 *
 * @since 3.17.0
 */
var InlayHintKind;
(function (InlayHintKind) {
    /**
     * An inlay hint that for a type annotation.
     */
    InlayHintKind.Type = 1;
    /**
     * An inlay hint that is for a parameter.
     */
    InlayHintKind.Parameter = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    InlayHintKind.is = is;
})(InlayHintKind || (InlayHintKind = {}));
var InlayHintLabelPart;
(function (InlayHintLabelPart) {
    function create(value) {
        return { value };
    }
    InlayHintLabelPart.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.location === undefined || Location.is(candidate.location))
            && (candidate.command === undefined || Command.is(candidate.command));
    }
    InlayHintLabelPart.is = is;
})(InlayHintLabelPart || (InlayHintLabelPart = {}));
var InlayHint;
(function (InlayHint) {
    function create(position, label, kind) {
        const result = { position, label };
        if (kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    InlayHint.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.position)
            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))
            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))
            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))
            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));
    }
    InlayHint.is = is;
})(InlayHint || (InlayHint = {}));
var StringValue;
(function (StringValue) {
    function createSnippet(value) {
        return { kind: 'snippet', value };
    }
    StringValue.createSnippet = createSnippet;
})(StringValue || (StringValue = {}));
var InlineCompletionItem;
(function (InlineCompletionItem) {
    function create(insertText, filterText, range, command) {
        return { insertText, filterText, range, command };
    }
    InlineCompletionItem.create = create;
})(InlineCompletionItem || (InlineCompletionItem = {}));
var InlineCompletionList;
(function (InlineCompletionList) {
    function create(items) {
        return { items };
    }
    InlineCompletionList.create = create;
})(InlineCompletionList || (InlineCompletionList = {}));
/**
 * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.
 *
 * @since 3.18.0
 * @proposed
 */
var InlineCompletionTriggerKind;
(function (InlineCompletionTriggerKind) {
    /**
     * Completion was triggered explicitly by a user gesture.
     */
    InlineCompletionTriggerKind.Invoked = 0;
    /**
     * Completion was triggered automatically while editing.
     */
    InlineCompletionTriggerKind.Automatic = 1;
})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));
var SelectedCompletionInfo;
(function (SelectedCompletionInfo) {
    function create(range, text) {
        return { range, text };
    }
    SelectedCompletionInfo.create = create;
})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));
var InlineCompletionContext;
(function (InlineCompletionContext) {
    function create(triggerKind, selectedCompletionInfo) {
        return { triggerKind, selectedCompletionInfo };
    }
    InlineCompletionContext.create = create;
})(InlineCompletionContext || (InlineCompletionContext = {}));
var WorkspaceFolder;
(function (WorkspaceFolder) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);
    }
    WorkspaceFolder.is = is;
})(WorkspaceFolder || (WorkspaceFolder = {}));
const EOL = ['\n', '\r\n', '\r'];
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId The document's language Id.
     * @param version The document's version.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ITextDocument} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)
            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument.is = is;
    function applyEdits(document, edits) {
        let text = document.getText();
        let sortedEdits = mergeSort(edits, (a, b) => {
            let diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        let lastModifiedOffset = text.length;
        for (let i = sortedEdits.length - 1; i >= 0; i--) {
            let e = sortedEdits[i];
            let startOffset = document.offsetAt(e.range.start);
            let endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            }
            else {
                throw new Error('Overlapping edit');
            }
            lastModifiedOffset = startOffset;
        }
        return text;
    }
    TextDocument.applyEdits = applyEdits;
    function mergeSort(data, compare) {
        if (data.length <= 1) {
            // sorted
            return data;
        }
        const p = (data.length / 2) | 0;
        const left = data.slice(0, p);
        const right = data.slice(p);
        mergeSort(left, compare);
        mergeSort(right, compare);
        let leftIdx = 0;
        let rightIdx = 0;
        let i = 0;
        while (leftIdx < left.length && rightIdx < right.length) {
            let ret = compare(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
                // smaller_equal -> take left to preserve order
                data[i++] = left[leftIdx++];
            }
            else {
                // greater -> take right
                data[i++] = right[rightIdx++];
            }
        }
        while (leftIdx < left.length) {
            data[i++] = left[leftIdx++];
        }
        while (rightIdx < right.length) {
            data[i++] = right[rightIdx++];
        }
        return data;
    }
})(TextDocument || (TextDocument = {}));
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
class FullTextDocument {
    constructor(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    get uri() {
        return this._uri;
    }
    get languageId() {
        return this._languageId;
    }
    get version() {
        return this._version;
    }
    getText(range) {
        if (range) {
            let start = this.offsetAt(range.start);
            let end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    }
    update(event, version) {
        this._content = event.text;
        this._version = version;
        this._lineOffsets = undefined;
    }
    getLineOffsets() {
        if (this._lineOffsets === undefined) {
            let lineOffsets = [];
            let text = this._content;
            let isLineStart = true;
            for (let i = 0; i < text.length; i++) {
                if (isLineStart) {
                    lineOffsets.push(i);
                    isLineStart = false;
                }
                let ch = text.charAt(i);
                isLineStart = (ch === '\r' || ch === '\n');
                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                    i++;
                }
            }
            if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
            }
            this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
    }
    positionAt(offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        let lineOffsets = this.getLineOffsets();
        let low = 0, high = lineOffsets.length;
        if (high === 0) {
            return Position.create(0, offset);
        }
        while (low < high) {
            let mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        let line = low - 1;
        return Position.create(line, offset - lineOffsets[line]);
    }
    offsetAt(position) {
        let lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        let lineOffset = lineOffsets[position.line];
        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    }
    get lineCount() {
        return this.getLineOffsets().length;
    }
}
var Is;
(function (Is) {
    const toString = Object.prototype.toString;
    function defined(value) {
        return typeof value !== 'undefined';
    }
    Is.defined = defined;
    function undefined(value) {
        return typeof value === 'undefined';
    }
    Is.undefined = undefined;
    function boolean(value) {
        return value === true || value === false;
    }
    Is.boolean = boolean;
    function string(value) {
        return toString.call(value) === '[object String]';
    }
    Is.string = string;
    function number(value) {
        return toString.call(value) === '[object Number]';
    }
    Is.number = number;
    function numberRange(value, min, max) {
        return toString.call(value) === '[object Number]' && min <= value && value <= max;
    }
    Is.numberRange = numberRange;
    function integer(value) {
        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;
    }
    Is.integer = integer;
    function uinteger(value) {
        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;
    }
    Is.uinteger = uinteger;
    function func(value) {
        return toString.call(value) === '[object Function]';
    }
    Is.func = func;
    function objectLiteral(value) {
        // Strictly speaking class instances pass this check as well. Since the LSP
        // doesn't use classes we ignore this for now. If we do we need to add something
        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
        return value !== null && typeof value === 'object';
    }
    Is.objectLiteral = objectLiteral;
    function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
    }
    Is.typedArray = typedArray;
})(Is || (Is = {}));


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  YamlService: () => (/* binding */ YamlService)
});

// EXTERNAL MODULE: ./src/services/base-service.ts
var base_service = __webpack_require__(2125);
;// CONCATENATED MODULE: ./src/services/yaml/lib/index.js
/* provided dependency */ var process = __webpack_require__(9907);
/* provided dependency */ var console = __webpack_require__(4364);
/* provided dependency */ var Buffer = __webpack_require__(1048)["hp"];
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value1)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: value1
    }) : obj[key] = value1;
var __esm = (fn, res)=>function __init() {
        return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
    };
var __commonJS = (cb, mod)=>function __require() {
        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {
            exports: {}
        }).exports, mod), mod.exports;
    };
var __export = (target, all)=>{
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod));
var __toCommonJS = (mod)=>__copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
var __publicField = (obj, key, value1)=>{
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value1);
    return value1;
};
// ../../node_modules/vscode-languageserver-types/lib/esm/main.js
var main_exports = {};
__export(main_exports, {
    AnnotatedTextEdit: ()=>AnnotatedTextEdit,
    ChangeAnnotation: ()=>ChangeAnnotation,
    ChangeAnnotationIdentifier: ()=>ChangeAnnotationIdentifier,
    CodeAction: ()=>CodeAction,
    CodeActionContext: ()=>CodeActionContext,
    CodeActionKind: ()=>CodeActionKind,
    CodeActionTriggerKind: ()=>CodeActionTriggerKind,
    CodeDescription: ()=>CodeDescription,
    CodeLens: ()=>CodeLens,
    Color: ()=>Color,
    ColorInformation: ()=>ColorInformation,
    ColorPresentation: ()=>ColorPresentation,
    Command: ()=>Command,
    CompletionItem: ()=>CompletionItem,
    CompletionItemKind: ()=>lib_CompletionItemKind,
    CompletionItemLabelDetails: ()=>CompletionItemLabelDetails,
    CompletionItemTag: ()=>CompletionItemTag,
    CompletionList: ()=>CompletionList,
    CreateFile: ()=>CreateFile,
    DeleteFile: ()=>DeleteFile,
    Diagnostic: ()=>Diagnostic,
    DiagnosticRelatedInformation: ()=>DiagnosticRelatedInformation,
    DiagnosticSeverity: ()=>DiagnosticSeverity,
    DiagnosticTag: ()=>DiagnosticTag,
    DocumentHighlight: ()=>DocumentHighlight,
    DocumentHighlightKind: ()=>DocumentHighlightKind,
    DocumentLink: ()=>DocumentLink,
    DocumentSymbol: ()=>DocumentSymbol,
    DocumentUri: ()=>DocumentUri,
    EOL: ()=>EOL,
    FoldingRange: ()=>FoldingRange,
    FoldingRangeKind: ()=>FoldingRangeKind,
    FormattingOptions: ()=>FormattingOptions,
    Hover: ()=>Hover,
    InlayHint: ()=>InlayHint,
    InlayHintKind: ()=>InlayHintKind,
    InlayHintLabelPart: ()=>InlayHintLabelPart,
    InlineCompletionContext: ()=>InlineCompletionContext,
    InlineCompletionItem: ()=>InlineCompletionItem,
    InlineCompletionList: ()=>InlineCompletionList,
    InlineCompletionTriggerKind: ()=>InlineCompletionTriggerKind,
    InlineValueContext: ()=>InlineValueContext,
    InlineValueEvaluatableExpression: ()=>InlineValueEvaluatableExpression,
    InlineValueText: ()=>InlineValueText,
    InlineValueVariableLookup: ()=>InlineValueVariableLookup,
    InsertReplaceEdit: ()=>InsertReplaceEdit,
    InsertTextFormat: ()=>lib_InsertTextFormat,
    InsertTextMode: ()=>InsertTextMode,
    Location: ()=>Location,
    LocationLink: ()=>LocationLink,
    MarkedString: ()=>lib_MarkedString,
    MarkupContent: ()=>lib_MarkupContent,
    MarkupKind: ()=>MarkupKind,
    OptionalVersionedTextDocumentIdentifier: ()=>OptionalVersionedTextDocumentIdentifier,
    ParameterInformation: ()=>ParameterInformation,
    Position: ()=>Position,
    Range: ()=>Range,
    RenameFile: ()=>RenameFile,
    SelectedCompletionInfo: ()=>SelectedCompletionInfo,
    SelectionRange: ()=>SelectionRange,
    SemanticTokenModifiers: ()=>SemanticTokenModifiers,
    SemanticTokenTypes: ()=>SemanticTokenTypes,
    SemanticTokens: ()=>SemanticTokens,
    SignatureInformation: ()=>SignatureInformation,
    StringValue: ()=>StringValue,
    SymbolInformation: ()=>SymbolInformation,
    SymbolKind: ()=>SymbolKind,
    SymbolTag: ()=>SymbolTag,
    TextDocument: ()=>TextDocument,
    TextDocumentEdit: ()=>TextDocumentEdit,
    TextDocumentIdentifier: ()=>TextDocumentIdentifier,
    TextDocumentItem: ()=>TextDocumentItem,
    TextEdit: ()=>TextEdit,
    URI: ()=>URI2,
    VersionedTextDocumentIdentifier: ()=>VersionedTextDocumentIdentifier,
    WorkspaceChange: ()=>WorkspaceChange,
    WorkspaceEdit: ()=>WorkspaceEdit,
    WorkspaceFolder: ()=>WorkspaceFolder,
    WorkspaceSymbol: ()=>WorkspaceSymbol,
    integer: ()=>integer,
    uinteger: ()=>uinteger
});
var DocumentUri, URI2, integer, uinteger, Position, Range, Location, LocationLink, Color, ColorInformation, ColorPresentation, FoldingRangeKind, FoldingRange, DiagnosticRelatedInformation, DiagnosticSeverity, DiagnosticTag, CodeDescription, Diagnostic, Command, TextEdit, ChangeAnnotation, ChangeAnnotationIdentifier, AnnotatedTextEdit, TextDocumentEdit, CreateFile, RenameFile, DeleteFile, WorkspaceEdit, TextEditChangeImpl, ChangeAnnotations, WorkspaceChange, TextDocumentIdentifier, VersionedTextDocumentIdentifier, OptionalVersionedTextDocumentIdentifier, TextDocumentItem, MarkupKind, lib_MarkupContent, lib_CompletionItemKind, lib_InsertTextFormat, CompletionItemTag, InsertReplaceEdit, InsertTextMode, CompletionItemLabelDetails, CompletionItem, CompletionList, lib_MarkedString, Hover, ParameterInformation, SignatureInformation, DocumentHighlightKind, DocumentHighlight, SymbolKind, SymbolTag, SymbolInformation, WorkspaceSymbol, DocumentSymbol, CodeActionKind, CodeActionTriggerKind, CodeActionContext, CodeAction, CodeLens, FormattingOptions, DocumentLink, SelectionRange, SemanticTokenTypes, SemanticTokenModifiers, SemanticTokens, InlineValueText, InlineValueVariableLookup, InlineValueEvaluatableExpression, InlineValueContext, InlayHintKind, InlayHintLabelPart, InlayHint, StringValue, InlineCompletionItem, InlineCompletionList, InlineCompletionTriggerKind, SelectedCompletionInfo, InlineCompletionContext, WorkspaceFolder, EOL, TextDocument, FullTextDocument, Is;
var init_main = __esm({
    "../../node_modules/vscode-languageserver-types/lib/esm/main.js" () {
        "use strict";
        (function(DocumentUri2) {
            function is(value1) {
                return typeof value1 === "string";
            }
            DocumentUri2.is = is;
        })(DocumentUri || (DocumentUri = {}));
        (function(URI3) {
            function is(value1) {
                return typeof value1 === "string";
            }
            URI3.is = is;
        })(URI2 || (URI2 = {}));
        (function(integer2) {
            integer2.MIN_VALUE = -2147483648;
            integer2.MAX_VALUE = 2147483647;
            function is(value1) {
                return typeof value1 === "number" && integer2.MIN_VALUE <= value1 && value1 <= integer2.MAX_VALUE;
            }
            integer2.is = is;
        })(integer || (integer = {}));
        (function(uinteger2) {
            uinteger2.MIN_VALUE = 0;
            uinteger2.MAX_VALUE = 2147483647;
            function is(value1) {
                return typeof value1 === "number" && uinteger2.MIN_VALUE <= value1 && value1 <= uinteger2.MAX_VALUE;
            }
            uinteger2.is = is;
        })(uinteger || (uinteger = {}));
        (function(Position2) {
            function create(line, character) {
                if (line === Number.MAX_VALUE) {
                    line = uinteger.MAX_VALUE;
                }
                if (character === Number.MAX_VALUE) {
                    character = uinteger.MAX_VALUE;
                }
                return {
                    line,
                    character
                };
            }
            Position2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
            }
            Position2.is = is;
        })(Position || (Position = {}));
        (function(Range2) {
            function create(one, two, three, four) {
                if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
                    return {
                        start: Position.create(one, two),
                        end: Position.create(three, four)
                    };
                } else if (Position.is(one) && Position.is(two)) {
                    return {
                        start: one,
                        end: two
                    };
                } else {
                    throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);
                }
            }
            Range2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
            }
            Range2.is = is;
        })(Range || (Range = {}));
        (function(Location2) {
            function create(uri, range) {
                return {
                    uri,
                    range
                };
            }
            Location2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
            }
            Location2.is = is;
        })(Location || (Location = {}));
        (function(LocationLink2) {
            function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
                return {
                    targetUri,
                    targetRange,
                    targetSelectionRange,
                    originSelectionRange
                };
            }
            LocationLink2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range.is(candidate.targetSelectionRange) && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
            }
            LocationLink2.is = is;
        })(LocationLink || (LocationLink = {}));
        (function(Color2) {
            function create(red, green, blue, alpha) {
                return {
                    red,
                    green,
                    blue,
                    alpha
                };
            }
            Color2.create = create;
            function is(value1) {
                const candidate = value1;
                return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);
            }
            Color2.is = is;
        })(Color || (Color = {}));
        (function(ColorInformation2) {
            function create(range, color) {
                return {
                    range,
                    color
                };
            }
            ColorInformation2.create = create;
            function is(value1) {
                const candidate = value1;
                return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
            }
            ColorInformation2.is = is;
        })(ColorInformation || (ColorInformation = {}));
        (function(ColorPresentation2) {
            function create(label, textEdit, additionalTextEdits) {
                return {
                    label,
                    textEdit,
                    additionalTextEdits
                };
            }
            ColorPresentation2.create = create;
            function is(value1) {
                const candidate = value1;
                return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
            }
            ColorPresentation2.is = is;
        })(ColorPresentation || (ColorPresentation = {}));
        (function(FoldingRangeKind2) {
            FoldingRangeKind2.Comment = "comment";
            FoldingRangeKind2.Imports = "imports";
            FoldingRangeKind2.Region = "region";
        })(FoldingRangeKind || (FoldingRangeKind = {}));
        (function(FoldingRange2) {
            function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
                const result = {
                    startLine,
                    endLine
                };
                if (Is.defined(startCharacter)) {
                    result.startCharacter = startCharacter;
                }
                if (Is.defined(endCharacter)) {
                    result.endCharacter = endCharacter;
                }
                if (Is.defined(kind)) {
                    result.kind = kind;
                }
                if (Is.defined(collapsedText)) {
                    result.collapsedText = collapsedText;
                }
                return result;
            }
            FoldingRange2.create = create;
            function is(value1) {
                const candidate = value1;
                return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
            }
            FoldingRange2.is = is;
        })(FoldingRange || (FoldingRange = {}));
        (function(DiagnosticRelatedInformation2) {
            function create(location, message) {
                return {
                    location,
                    message
                };
            }
            DiagnosticRelatedInformation2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
            }
            DiagnosticRelatedInformation2.is = is;
        })(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
        (function(DiagnosticSeverity2) {
            DiagnosticSeverity2.Error = 1;
            DiagnosticSeverity2.Warning = 2;
            DiagnosticSeverity2.Information = 3;
            DiagnosticSeverity2.Hint = 4;
        })(DiagnosticSeverity || (DiagnosticSeverity = {}));
        (function(DiagnosticTag2) {
            DiagnosticTag2.Unnecessary = 1;
            DiagnosticTag2.Deprecated = 2;
        })(DiagnosticTag || (DiagnosticTag = {}));
        (function(CodeDescription2) {
            function is(value1) {
                const candidate = value1;
                return Is.objectLiteral(candidate) && Is.string(candidate.href);
            }
            CodeDescription2.is = is;
        })(CodeDescription || (CodeDescription = {}));
        (function(Diagnostic2) {
            function create(range, message, severity, code, source, relatedInformation) {
                let result = {
                    range,
                    message
                };
                if (Is.defined(severity)) {
                    result.severity = severity;
                }
                if (Is.defined(code)) {
                    result.code = code;
                }
                if (Is.defined(source)) {
                    result.source = source;
                }
                if (Is.defined(relatedInformation)) {
                    result.relatedInformation = relatedInformation;
                }
                return result;
            }
            Diagnostic2.create = create;
            function is(value1) {
                var _a;
                let candidate = value1;
                return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
            }
            Diagnostic2.is = is;
        })(Diagnostic || (Diagnostic = {}));
        (function(Command2) {
            function create(title, command, ...args) {
                let result = {
                    title,
                    command
                };
                if (Is.defined(args) && args.length > 0) {
                    result.arguments = args;
                }
                return result;
            }
            Command2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
            }
            Command2.is = is;
        })(Command || (Command = {}));
        (function(TextEdit2) {
            function replace(range, newText) {
                return {
                    range,
                    newText
                };
            }
            TextEdit2.replace = replace;
            function insert(position, newText) {
                return {
                    range: {
                        start: position,
                        end: position
                    },
                    newText
                };
            }
            TextEdit2.insert = insert;
            function del(range) {
                return {
                    range,
                    newText: ""
                };
            }
            TextEdit2.del = del;
            function is(value1) {
                const candidate = value1;
                return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range.is(candidate.range);
            }
            TextEdit2.is = is;
        })(TextEdit || (TextEdit = {}));
        (function(ChangeAnnotation2) {
            function create(label, needsConfirmation, description) {
                const result = {
                    label
                };
                if (needsConfirmation !== void 0) {
                    result.needsConfirmation = needsConfirmation;
                }
                if (description !== void 0) {
                    result.description = description;
                }
                return result;
            }
            ChangeAnnotation2.create = create;
            function is(value1) {
                const candidate = value1;
                return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
            }
            ChangeAnnotation2.is = is;
        })(ChangeAnnotation || (ChangeAnnotation = {}));
        (function(ChangeAnnotationIdentifier2) {
            function is(value1) {
                const candidate = value1;
                return Is.string(candidate);
            }
            ChangeAnnotationIdentifier2.is = is;
        })(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
        (function(AnnotatedTextEdit2) {
            function replace(range, newText, annotation) {
                return {
                    range,
                    newText,
                    annotationId: annotation
                };
            }
            AnnotatedTextEdit2.replace = replace;
            function insert(position, newText, annotation) {
                return {
                    range: {
                        start: position,
                        end: position
                    },
                    newText,
                    annotationId: annotation
                };
            }
            AnnotatedTextEdit2.insert = insert;
            function del(range, annotation) {
                return {
                    range,
                    newText: "",
                    annotationId: annotation
                };
            }
            AnnotatedTextEdit2.del = del;
            function is(value1) {
                const candidate = value1;
                return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
            }
            AnnotatedTextEdit2.is = is;
        })(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
        (function(TextDocumentEdit2) {
            function create(textDocument, edits) {
                return {
                    textDocument,
                    edits
                };
            }
            TextDocumentEdit2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
            }
            TextDocumentEdit2.is = is;
        })(TextDocumentEdit || (TextDocumentEdit = {}));
        (function(CreateFile2) {
            function create(uri, options, annotation) {
                let result = {
                    kind: "create",
                    uri
                };
                if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
                    result.options = options;
                }
                if (annotation !== void 0) {
                    result.annotationId = annotation;
                }
                return result;
            }
            CreateFile2.create = create;
            function is(value1) {
                let candidate = value1;
                return candidate && candidate.kind === "create" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
            }
            CreateFile2.is = is;
        })(CreateFile || (CreateFile = {}));
        (function(RenameFile2) {
            function create(oldUri, newUri, options, annotation) {
                let result = {
                    kind: "rename",
                    oldUri,
                    newUri
                };
                if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
                    result.options = options;
                }
                if (annotation !== void 0) {
                    result.annotationId = annotation;
                }
                return result;
            }
            RenameFile2.create = create;
            function is(value1) {
                let candidate = value1;
                return candidate && candidate.kind === "rename" && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
            }
            RenameFile2.is = is;
        })(RenameFile || (RenameFile = {}));
        (function(DeleteFile2) {
            function create(uri, options, annotation) {
                let result = {
                    kind: "delete",
                    uri
                };
                if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {
                    result.options = options;
                }
                if (annotation !== void 0) {
                    result.annotationId = annotation;
                }
                return result;
            }
            DeleteFile2.create = create;
            function is(value1) {
                let candidate = value1;
                return candidate && candidate.kind === "delete" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
            }
            DeleteFile2.is = is;
        })(DeleteFile || (DeleteFile = {}));
        (function(WorkspaceEdit2) {
            function is(value1) {
                let candidate = value1;
                return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every((change)=>{
                    if (Is.string(change.kind)) {
                        return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                    } else {
                        return TextDocumentEdit.is(change);
                    }
                }));
            }
            WorkspaceEdit2.is = is;
        })(WorkspaceEdit || (WorkspaceEdit = {}));
        TextEditChangeImpl = class {
            insert(position, newText, annotation) {
                let edit;
                let id;
                if (annotation === void 0) {
                    edit = TextEdit.insert(position, newText);
                } else if (ChangeAnnotationIdentifier.is(annotation)) {
                    id = annotation;
                    edit = AnnotatedTextEdit.insert(position, newText, annotation);
                } else {
                    this.assertChangeAnnotations(this.changeAnnotations);
                    id = this.changeAnnotations.manage(annotation);
                    edit = AnnotatedTextEdit.insert(position, newText, id);
                }
                this.edits.push(edit);
                if (id !== void 0) {
                    return id;
                }
            }
            replace(range, newText, annotation) {
                let edit;
                let id;
                if (annotation === void 0) {
                    edit = TextEdit.replace(range, newText);
                } else if (ChangeAnnotationIdentifier.is(annotation)) {
                    id = annotation;
                    edit = AnnotatedTextEdit.replace(range, newText, annotation);
                } else {
                    this.assertChangeAnnotations(this.changeAnnotations);
                    id = this.changeAnnotations.manage(annotation);
                    edit = AnnotatedTextEdit.replace(range, newText, id);
                }
                this.edits.push(edit);
                if (id !== void 0) {
                    return id;
                }
            }
            delete(range, annotation) {
                let edit;
                let id;
                if (annotation === void 0) {
                    edit = TextEdit.del(range);
                } else if (ChangeAnnotationIdentifier.is(annotation)) {
                    id = annotation;
                    edit = AnnotatedTextEdit.del(range, annotation);
                } else {
                    this.assertChangeAnnotations(this.changeAnnotations);
                    id = this.changeAnnotations.manage(annotation);
                    edit = AnnotatedTextEdit.del(range, id);
                }
                this.edits.push(edit);
                if (id !== void 0) {
                    return id;
                }
            }
            add(edit) {
                this.edits.push(edit);
            }
            all() {
                return this.edits;
            }
            clear() {
                this.edits.splice(0, this.edits.length);
            }
            assertChangeAnnotations(value1) {
                if (value1 === void 0) {
                    throw new Error(`Text edit change is not configured to manage change annotations.`);
                }
            }
            constructor(edits, changeAnnotations){
                this.edits = edits;
                this.changeAnnotations = changeAnnotations;
            }
        };
        ChangeAnnotations = class {
            all() {
                return this._annotations;
            }
            get size() {
                return this._size;
            }
            manage(idOrAnnotation, annotation) {
                let id;
                if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
                    id = idOrAnnotation;
                } else {
                    id = this.nextId();
                    annotation = idOrAnnotation;
                }
                if (this._annotations[id] !== void 0) {
                    throw new Error(`Id ${id} is already in use.`);
                }
                if (annotation === void 0) {
                    throw new Error(`No annotation provided for id ${id}`);
                }
                this._annotations[id] = annotation;
                this._size++;
                return id;
            }
            nextId() {
                this._counter++;
                return this._counter.toString();
            }
            constructor(annotations){
                this._annotations = annotations === void 0 ? /* @__PURE__ */ Object.create(null) : annotations;
                this._counter = 0;
                this._size = 0;
            }
        };
        WorkspaceChange = class {
            /**
       * Returns the underlying {@link WorkspaceEdit} literal
       * use to be returned from a workspace edit operation like rename.
       */ get edit() {
                this.initDocumentChanges();
                if (this._changeAnnotations !== void 0) {
                    if (this._changeAnnotations.size === 0) {
                        this._workspaceEdit.changeAnnotations = void 0;
                    } else {
                        this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                    }
                }
                return this._workspaceEdit;
            }
            getTextEditChange(key) {
                if (OptionalVersionedTextDocumentIdentifier.is(key)) {
                    this.initDocumentChanges();
                    if (this._workspaceEdit.documentChanges === void 0) {
                        throw new Error("Workspace edit is not configured for document changes.");
                    }
                    const textDocument = {
                        uri: key.uri,
                        version: key.version
                    };
                    let result = this._textEditChanges[textDocument.uri];
                    if (!result) {
                        const edits = [];
                        const textDocumentEdit = {
                            textDocument,
                            edits
                        };
                        this._workspaceEdit.documentChanges.push(textDocumentEdit);
                        result = new TextEditChangeImpl(edits, this._changeAnnotations);
                        this._textEditChanges[textDocument.uri] = result;
                    }
                    return result;
                } else {
                    this.initChanges();
                    if (this._workspaceEdit.changes === void 0) {
                        throw new Error("Workspace edit is not configured for normal text edit changes.");
                    }
                    let result = this._textEditChanges[key];
                    if (!result) {
                        let edits = [];
                        this._workspaceEdit.changes[key] = edits;
                        result = new TextEditChangeImpl(edits);
                        this._textEditChanges[key] = result;
                    }
                    return result;
                }
            }
            initDocumentChanges() {
                if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
                    this._changeAnnotations = new ChangeAnnotations();
                    this._workspaceEdit.documentChanges = [];
                    this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                }
            }
            initChanges() {
                if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
                    this._workspaceEdit.changes = /* @__PURE__ */ Object.create(null);
                }
            }
            createFile(uri, optionsOrAnnotation, options) {
                this.initDocumentChanges();
                if (this._workspaceEdit.documentChanges === void 0) {
                    throw new Error("Workspace edit is not configured for document changes.");
                }
                let annotation;
                if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                    annotation = optionsOrAnnotation;
                } else {
                    options = optionsOrAnnotation;
                }
                let operation;
                let id;
                if (annotation === void 0) {
                    operation = CreateFile.create(uri, options);
                } else {
                    id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                    operation = CreateFile.create(uri, options, id);
                }
                this._workspaceEdit.documentChanges.push(operation);
                if (id !== void 0) {
                    return id;
                }
            }
            renameFile(oldUri, newUri, optionsOrAnnotation, options) {
                this.initDocumentChanges();
                if (this._workspaceEdit.documentChanges === void 0) {
                    throw new Error("Workspace edit is not configured for document changes.");
                }
                let annotation;
                if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                    annotation = optionsOrAnnotation;
                } else {
                    options = optionsOrAnnotation;
                }
                let operation;
                let id;
                if (annotation === void 0) {
                    operation = RenameFile.create(oldUri, newUri, options);
                } else {
                    id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                    operation = RenameFile.create(oldUri, newUri, options, id);
                }
                this._workspaceEdit.documentChanges.push(operation);
                if (id !== void 0) {
                    return id;
                }
            }
            deleteFile(uri, optionsOrAnnotation, options) {
                this.initDocumentChanges();
                if (this._workspaceEdit.documentChanges === void 0) {
                    throw new Error("Workspace edit is not configured for document changes.");
                }
                let annotation;
                if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                    annotation = optionsOrAnnotation;
                } else {
                    options = optionsOrAnnotation;
                }
                let operation;
                let id;
                if (annotation === void 0) {
                    operation = DeleteFile.create(uri, options);
                } else {
                    id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                    operation = DeleteFile.create(uri, options, id);
                }
                this._workspaceEdit.documentChanges.push(operation);
                if (id !== void 0) {
                    return id;
                }
            }
            constructor(workspaceEdit){
                this._textEditChanges = /* @__PURE__ */ Object.create(null);
                if (workspaceEdit !== void 0) {
                    this._workspaceEdit = workspaceEdit;
                    if (workspaceEdit.documentChanges) {
                        this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                        workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                        workspaceEdit.documentChanges.forEach((change)=>{
                            if (TextDocumentEdit.is(change)) {
                                const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);
                                this._textEditChanges[change.textDocument.uri] = textEditChange;
                            }
                        });
                    } else if (workspaceEdit.changes) {
                        Object.keys(workspaceEdit.changes).forEach((key)=>{
                            const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                            this._textEditChanges[key] = textEditChange;
                        });
                    }
                } else {
                    this._workspaceEdit = {};
                }
            }
        };
        (function(TextDocumentIdentifier2) {
            function create(uri) {
                return {
                    uri
                };
            }
            TextDocumentIdentifier2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.defined(candidate) && Is.string(candidate.uri);
            }
            TextDocumentIdentifier2.is = is;
        })(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
        (function(VersionedTextDocumentIdentifier2) {
            function create(uri, version) {
                return {
                    uri,
                    version
                };
            }
            VersionedTextDocumentIdentifier2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
            }
            VersionedTextDocumentIdentifier2.is = is;
        })(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
        (function(OptionalVersionedTextDocumentIdentifier2) {
            function create(uri, version) {
                return {
                    uri,
                    version
                };
            }
            OptionalVersionedTextDocumentIdentifier2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
            }
            OptionalVersionedTextDocumentIdentifier2.is = is;
        })(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
        (function(TextDocumentItem2) {
            function create(uri, languageId, version, text) {
                return {
                    uri,
                    languageId,
                    version,
                    text
                };
            }
            TextDocumentItem2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
            }
            TextDocumentItem2.is = is;
        })(TextDocumentItem || (TextDocumentItem = {}));
        (function(MarkupKind2) {
            MarkupKind2.PlainText = "plaintext";
            MarkupKind2.Markdown = "markdown";
            function is(value1) {
                const candidate = value1;
                return candidate === MarkupKind2.PlainText || candidate === MarkupKind2.Markdown;
            }
            MarkupKind2.is = is;
        })(MarkupKind || (MarkupKind = {}));
        (function(MarkupContent2) {
            function is(value1) {
                const candidate = value1;
                return Is.objectLiteral(value1) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
            }
            MarkupContent2.is = is;
        })(lib_MarkupContent || (lib_MarkupContent = {}));
        (function(CompletionItemKind2) {
            CompletionItemKind2.Text = 1;
            CompletionItemKind2.Method = 2;
            CompletionItemKind2.Function = 3;
            CompletionItemKind2.Constructor = 4;
            CompletionItemKind2.Field = 5;
            CompletionItemKind2.Variable = 6;
            CompletionItemKind2.Class = 7;
            CompletionItemKind2.Interface = 8;
            CompletionItemKind2.Module = 9;
            CompletionItemKind2.Property = 10;
            CompletionItemKind2.Unit = 11;
            CompletionItemKind2.Value = 12;
            CompletionItemKind2.Enum = 13;
            CompletionItemKind2.Keyword = 14;
            CompletionItemKind2.Snippet = 15;
            CompletionItemKind2.Color = 16;
            CompletionItemKind2.File = 17;
            CompletionItemKind2.Reference = 18;
            CompletionItemKind2.Folder = 19;
            CompletionItemKind2.EnumMember = 20;
            CompletionItemKind2.Constant = 21;
            CompletionItemKind2.Struct = 22;
            CompletionItemKind2.Event = 23;
            CompletionItemKind2.Operator = 24;
            CompletionItemKind2.TypeParameter = 25;
        })(lib_CompletionItemKind || (lib_CompletionItemKind = {}));
        (function(InsertTextFormat2) {
            InsertTextFormat2.PlainText = 1;
            InsertTextFormat2.Snippet = 2;
        })(lib_InsertTextFormat || (lib_InsertTextFormat = {}));
        (function(CompletionItemTag2) {
            CompletionItemTag2.Deprecated = 1;
        })(CompletionItemTag || (CompletionItemTag = {}));
        (function(InsertReplaceEdit2) {
            function create(newText, insert, replace) {
                return {
                    newText,
                    insert,
                    replace
                };
            }
            InsertReplaceEdit2.create = create;
            function is(value1) {
                const candidate = value1;
                return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
            }
            InsertReplaceEdit2.is = is;
        })(InsertReplaceEdit || (InsertReplaceEdit = {}));
        (function(InsertTextMode2) {
            InsertTextMode2.asIs = 1;
            InsertTextMode2.adjustIndentation = 2;
        })(InsertTextMode || (InsertTextMode = {}));
        (function(CompletionItemLabelDetails2) {
            function is(value1) {
                const candidate = value1;
                return candidate && (Is.string(candidate.detail) || candidate.detail === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
            }
            CompletionItemLabelDetails2.is = is;
        })(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
        (function(CompletionItem2) {
            function create(label) {
                return {
                    label
                };
            }
            CompletionItem2.create = create;
        })(CompletionItem || (CompletionItem = {}));
        (function(CompletionList2) {
            function create(items, isIncomplete) {
                return {
                    items: items ? items : [],
                    isIncomplete: !!isIncomplete
                };
            }
            CompletionList2.create = create;
        })(CompletionList || (CompletionList = {}));
        (function(MarkedString2) {
            function fromPlainText(plainText) {
                return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
            }
            MarkedString2.fromPlainText = fromPlainText;
            function is(value1) {
                const candidate = value1;
                return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);
            }
            MarkedString2.is = is;
        })(lib_MarkedString || (lib_MarkedString = {}));
        (function(Hover2) {
            function is(value1) {
                let candidate = value1;
                return !!candidate && Is.objectLiteral(candidate) && (lib_MarkupContent.is(candidate.contents) || lib_MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, lib_MarkedString.is)) && (value1.range === void 0 || Range.is(value1.range));
            }
            Hover2.is = is;
        })(Hover || (Hover = {}));
        (function(ParameterInformation2) {
            function create(label, documentation) {
                return documentation ? {
                    label,
                    documentation
                } : {
                    label
                };
            }
            ParameterInformation2.create = create;
        })(ParameterInformation || (ParameterInformation = {}));
        (function(SignatureInformation2) {
            function create(label, documentation, ...parameters) {
                let result = {
                    label
                };
                if (Is.defined(documentation)) {
                    result.documentation = documentation;
                }
                if (Is.defined(parameters)) {
                    result.parameters = parameters;
                } else {
                    result.parameters = [];
                }
                return result;
            }
            SignatureInformation2.create = create;
        })(SignatureInformation || (SignatureInformation = {}));
        (function(DocumentHighlightKind2) {
            DocumentHighlightKind2.Text = 1;
            DocumentHighlightKind2.Read = 2;
            DocumentHighlightKind2.Write = 3;
        })(DocumentHighlightKind || (DocumentHighlightKind = {}));
        (function(DocumentHighlight2) {
            function create(range, kind) {
                let result = {
                    range
                };
                if (Is.number(kind)) {
                    result.kind = kind;
                }
                return result;
            }
            DocumentHighlight2.create = create;
        })(DocumentHighlight || (DocumentHighlight = {}));
        (function(SymbolKind2) {
            SymbolKind2.File = 1;
            SymbolKind2.Module = 2;
            SymbolKind2.Namespace = 3;
            SymbolKind2.Package = 4;
            SymbolKind2.Class = 5;
            SymbolKind2.Method = 6;
            SymbolKind2.Property = 7;
            SymbolKind2.Field = 8;
            SymbolKind2.Constructor = 9;
            SymbolKind2.Enum = 10;
            SymbolKind2.Interface = 11;
            SymbolKind2.Function = 12;
            SymbolKind2.Variable = 13;
            SymbolKind2.Constant = 14;
            SymbolKind2.String = 15;
            SymbolKind2.Number = 16;
            SymbolKind2.Boolean = 17;
            SymbolKind2.Array = 18;
            SymbolKind2.Object = 19;
            SymbolKind2.Key = 20;
            SymbolKind2.Null = 21;
            SymbolKind2.EnumMember = 22;
            SymbolKind2.Struct = 23;
            SymbolKind2.Event = 24;
            SymbolKind2.Operator = 25;
            SymbolKind2.TypeParameter = 26;
        })(SymbolKind || (SymbolKind = {}));
        (function(SymbolTag2) {
            SymbolTag2.Deprecated = 1;
        })(SymbolTag || (SymbolTag = {}));
        (function(SymbolInformation2) {
            function create(name, kind, range, uri, containerName) {
                let result = {
                    name,
                    kind,
                    location: {
                        uri,
                        range
                    }
                };
                if (containerName) {
                    result.containerName = containerName;
                }
                return result;
            }
            SymbolInformation2.create = create;
        })(SymbolInformation || (SymbolInformation = {}));
        (function(WorkspaceSymbol2) {
            function create(name, kind, uri, range) {
                return range !== void 0 ? {
                    name,
                    kind,
                    location: {
                        uri,
                        range
                    }
                } : {
                    name,
                    kind,
                    location: {
                        uri
                    }
                };
            }
            WorkspaceSymbol2.create = create;
        })(WorkspaceSymbol || (WorkspaceSymbol = {}));
        (function(DocumentSymbol2) {
            function create(name, detail, kind, range, selectionRange, children) {
                let result = {
                    name,
                    detail,
                    kind,
                    range,
                    selectionRange
                };
                if (children !== void 0) {
                    result.children = children;
                }
                return result;
            }
            DocumentSymbol2.create = create;
            function is(value1) {
                let candidate = value1;
                return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range.is(candidate.range) && Range.is(candidate.selectionRange) && (candidate.detail === void 0 || Is.string(candidate.detail)) && (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));
            }
            DocumentSymbol2.is = is;
        })(DocumentSymbol || (DocumentSymbol = {}));
        (function(CodeActionKind2) {
            CodeActionKind2.Empty = "";
            CodeActionKind2.QuickFix = "quickfix";
            CodeActionKind2.Refactor = "refactor";
            CodeActionKind2.RefactorExtract = "refactor.extract";
            CodeActionKind2.RefactorInline = "refactor.inline";
            CodeActionKind2.RefactorRewrite = "refactor.rewrite";
            CodeActionKind2.Source = "source";
            CodeActionKind2.SourceOrganizeImports = "source.organizeImports";
            CodeActionKind2.SourceFixAll = "source.fixAll";
        })(CodeActionKind || (CodeActionKind = {}));
        (function(CodeActionTriggerKind2) {
            CodeActionTriggerKind2.Invoked = 1;
            CodeActionTriggerKind2.Automatic = 2;
        })(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
        (function(CodeActionContext2) {
            function create(diagnostics, only, triggerKind) {
                let result = {
                    diagnostics
                };
                if (only !== void 0 && only !== null) {
                    result.only = only;
                }
                if (triggerKind !== void 0 && triggerKind !== null) {
                    result.triggerKind = triggerKind;
                }
                return result;
            }
            CodeActionContext2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === void 0 || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
            }
            CodeActionContext2.is = is;
        })(CodeActionContext || (CodeActionContext = {}));
        (function(CodeAction2) {
            function create(title, kindOrCommandOrEdit, kind) {
                let result = {
                    title
                };
                let checkKind = true;
                if (typeof kindOrCommandOrEdit === "string") {
                    checkKind = false;
                    result.kind = kindOrCommandOrEdit;
                } else if (Command.is(kindOrCommandOrEdit)) {
                    result.command = kindOrCommandOrEdit;
                } else {
                    result.edit = kindOrCommandOrEdit;
                }
                if (checkKind && kind !== void 0) {
                    result.kind = kind;
                }
                return result;
            }
            CodeAction2.create = create;
            function is(value1) {
                let candidate = value1;
                return candidate && Is.string(candidate.title) && (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) && (candidate.kind === void 0 || Is.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command.is(candidate.command)) && (candidate.isPreferred === void 0 || Is.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));
            }
            CodeAction2.is = is;
        })(CodeAction || (CodeAction = {}));
        (function(CodeLens2) {
            function create(range, data) {
                let result = {
                    range
                };
                if (Is.defined(data)) {
                    result.data = data;
                }
                return result;
            }
            CodeLens2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
            }
            CodeLens2.is = is;
        })(CodeLens || (CodeLens = {}));
        (function(FormattingOptions2) {
            function create(tabSize, insertSpaces) {
                return {
                    tabSize,
                    insertSpaces
                };
            }
            FormattingOptions2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
            }
            FormattingOptions2.is = is;
        })(FormattingOptions || (FormattingOptions = {}));
        (function(DocumentLink2) {
            function create(range, target, data) {
                return {
                    range,
                    target,
                    data
                };
            }
            DocumentLink2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
            }
            DocumentLink2.is = is;
        })(DocumentLink || (DocumentLink = {}));
        (function(SelectionRange2) {
            function create(range, parent) {
                return {
                    range,
                    parent
                };
            }
            SelectionRange2.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === void 0 || SelectionRange2.is(candidate.parent));
            }
            SelectionRange2.is = is;
        })(SelectionRange || (SelectionRange = {}));
        (function(SemanticTokenTypes2) {
            SemanticTokenTypes2["namespace"] = "namespace";
            SemanticTokenTypes2["type"] = "type";
            SemanticTokenTypes2["class"] = "class";
            SemanticTokenTypes2["enum"] = "enum";
            SemanticTokenTypes2["interface"] = "interface";
            SemanticTokenTypes2["struct"] = "struct";
            SemanticTokenTypes2["typeParameter"] = "typeParameter";
            SemanticTokenTypes2["parameter"] = "parameter";
            SemanticTokenTypes2["variable"] = "variable";
            SemanticTokenTypes2["property"] = "property";
            SemanticTokenTypes2["enumMember"] = "enumMember";
            SemanticTokenTypes2["event"] = "event";
            SemanticTokenTypes2["function"] = "function";
            SemanticTokenTypes2["method"] = "method";
            SemanticTokenTypes2["macro"] = "macro";
            SemanticTokenTypes2["keyword"] = "keyword";
            SemanticTokenTypes2["modifier"] = "modifier";
            SemanticTokenTypes2["comment"] = "comment";
            SemanticTokenTypes2["string"] = "string";
            SemanticTokenTypes2["number"] = "number";
            SemanticTokenTypes2["regexp"] = "regexp";
            SemanticTokenTypes2["operator"] = "operator";
            SemanticTokenTypes2["decorator"] = "decorator";
        })(SemanticTokenTypes || (SemanticTokenTypes = {}));
        (function(SemanticTokenModifiers2) {
            SemanticTokenModifiers2["declaration"] = "declaration";
            SemanticTokenModifiers2["definition"] = "definition";
            SemanticTokenModifiers2["readonly"] = "readonly";
            SemanticTokenModifiers2["static"] = "static";
            SemanticTokenModifiers2["deprecated"] = "deprecated";
            SemanticTokenModifiers2["abstract"] = "abstract";
            SemanticTokenModifiers2["async"] = "async";
            SemanticTokenModifiers2["modification"] = "modification";
            SemanticTokenModifiers2["documentation"] = "documentation";
            SemanticTokenModifiers2["defaultLibrary"] = "defaultLibrary";
        })(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
        (function(SemanticTokens2) {
            function is(value1) {
                const candidate = value1;
                return Is.objectLiteral(candidate) && (candidate.resultId === void 0 || typeof candidate.resultId === "string") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === "number");
            }
            SemanticTokens2.is = is;
        })(SemanticTokens || (SemanticTokens = {}));
        (function(InlineValueText2) {
            function create(range, text) {
                return {
                    range,
                    text
                };
            }
            InlineValueText2.create = create;
            function is(value1) {
                const candidate = value1;
                return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
            }
            InlineValueText2.is = is;
        })(InlineValueText || (InlineValueText = {}));
        (function(InlineValueVariableLookup2) {
            function create(range, variableName, caseSensitiveLookup) {
                return {
                    range,
                    variableName,
                    caseSensitiveLookup
                };
            }
            InlineValueVariableLookup2.create = create;
            function is(value1) {
                const candidate = value1;
                return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === void 0);
            }
            InlineValueVariableLookup2.is = is;
        })(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
        (function(InlineValueEvaluatableExpression2) {
            function create(range, expression) {
                return {
                    range,
                    expression
                };
            }
            InlineValueEvaluatableExpression2.create = create;
            function is(value1) {
                const candidate = value1;
                return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === void 0);
            }
            InlineValueEvaluatableExpression2.is = is;
        })(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
        (function(InlineValueContext2) {
            function create(frameId, stoppedLocation) {
                return {
                    frameId,
                    stoppedLocation
                };
            }
            InlineValueContext2.create = create;
            function is(value1) {
                const candidate = value1;
                return Is.defined(candidate) && Range.is(value1.stoppedLocation);
            }
            InlineValueContext2.is = is;
        })(InlineValueContext || (InlineValueContext = {}));
        (function(InlayHintKind2) {
            InlayHintKind2.Type = 1;
            InlayHintKind2.Parameter = 2;
            function is(value1) {
                return value1 === 1 || value1 === 2;
            }
            InlayHintKind2.is = is;
        })(InlayHintKind || (InlayHintKind = {}));
        (function(InlayHintLabelPart2) {
            function create(value1) {
                return {
                    value: value1
                };
            }
            InlayHintLabelPart2.create = create;
            function is(value1) {
                const candidate = value1;
                return Is.objectLiteral(candidate) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || lib_MarkupContent.is(candidate.tooltip)) && (candidate.location === void 0 || Location.is(candidate.location)) && (candidate.command === void 0 || Command.is(candidate.command));
            }
            InlayHintLabelPart2.is = is;
        })(InlayHintLabelPart || (InlayHintLabelPart = {}));
        (function(InlayHint2) {
            function create(position, label, kind) {
                const result = {
                    position,
                    label
                };
                if (kind !== void 0) {
                    result.kind = kind;
                }
                return result;
            }
            InlayHint2.create = create;
            function is(value1) {
                const candidate = value1;
                return Is.objectLiteral(candidate) && Position.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === void 0 || InlayHintKind.is(candidate.kind)) && candidate.textEdits === void 0 || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || lib_MarkupContent.is(candidate.tooltip)) && (candidate.paddingLeft === void 0 || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === void 0 || Is.boolean(candidate.paddingRight));
            }
            InlayHint2.is = is;
        })(InlayHint || (InlayHint = {}));
        (function(StringValue2) {
            function createSnippet(value1) {
                return {
                    kind: "snippet",
                    value: value1
                };
            }
            StringValue2.createSnippet = createSnippet;
        })(StringValue || (StringValue = {}));
        (function(InlineCompletionItem2) {
            function create(insertText, filterText, range, command) {
                return {
                    insertText,
                    filterText,
                    range,
                    command
                };
            }
            InlineCompletionItem2.create = create;
        })(InlineCompletionItem || (InlineCompletionItem = {}));
        (function(InlineCompletionList2) {
            function create(items) {
                return {
                    items
                };
            }
            InlineCompletionList2.create = create;
        })(InlineCompletionList || (InlineCompletionList = {}));
        (function(InlineCompletionTriggerKind2) {
            InlineCompletionTriggerKind2.Invoked = 0;
            InlineCompletionTriggerKind2.Automatic = 1;
        })(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));
        (function(SelectedCompletionInfo2) {
            function create(range, text) {
                return {
                    range,
                    text
                };
            }
            SelectedCompletionInfo2.create = create;
        })(SelectedCompletionInfo || (SelectedCompletionInfo = {}));
        (function(InlineCompletionContext2) {
            function create(triggerKind, selectedCompletionInfo) {
                return {
                    triggerKind,
                    selectedCompletionInfo
                };
            }
            InlineCompletionContext2.create = create;
        })(InlineCompletionContext || (InlineCompletionContext = {}));
        (function(WorkspaceFolder2) {
            function is(value1) {
                const candidate = value1;
                return Is.objectLiteral(candidate) && URI2.is(candidate.uri) && Is.string(candidate.name);
            }
            WorkspaceFolder2.is = is;
        })(WorkspaceFolder || (WorkspaceFolder = {}));
        EOL = [
            "\n",
            "\r\n",
            "\r"
        ];
        (function(TextDocument3) {
            function create(uri, languageId, version, content) {
                return new FullTextDocument(uri, languageId, version, content);
            }
            TextDocument3.create = create;
            function is(value1) {
                let candidate = value1;
                return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
            }
            TextDocument3.is = is;
            function applyEdits(document, edits) {
                let text = document.getText();
                let sortedEdits = mergeSort2(edits, (a2, b)=>{
                    let diff = a2.range.start.line - b.range.start.line;
                    if (diff === 0) {
                        return a2.range.start.character - b.range.start.character;
                    }
                    return diff;
                });
                let lastModifiedOffset = text.length;
                for(let i = sortedEdits.length - 1; i >= 0; i--){
                    let e = sortedEdits[i];
                    let startOffset = document.offsetAt(e.range.start);
                    let endOffset = document.offsetAt(e.range.end);
                    if (endOffset <= lastModifiedOffset) {
                        text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
                    } else {
                        throw new Error("Overlapping edit");
                    }
                    lastModifiedOffset = startOffset;
                }
                return text;
            }
            TextDocument3.applyEdits = applyEdits;
            function mergeSort2(data, compare2) {
                if (data.length <= 1) {
                    return data;
                }
                const p = data.length / 2 | 0;
                const left = data.slice(0, p);
                const right = data.slice(p);
                mergeSort2(left, compare2);
                mergeSort2(right, compare2);
                let leftIdx = 0;
                let rightIdx = 0;
                let i = 0;
                while(leftIdx < left.length && rightIdx < right.length){
                    let ret = compare2(left[leftIdx], right[rightIdx]);
                    if (ret <= 0) {
                        data[i++] = left[leftIdx++];
                    } else {
                        data[i++] = right[rightIdx++];
                    }
                }
                while(leftIdx < left.length){
                    data[i++] = left[leftIdx++];
                }
                while(rightIdx < right.length){
                    data[i++] = right[rightIdx++];
                }
                return data;
            }
        })(TextDocument || (TextDocument = {}));
        FullTextDocument = class {
            get uri() {
                return this._uri;
            }
            get languageId() {
                return this._languageId;
            }
            get version() {
                return this._version;
            }
            getText(range) {
                if (range) {
                    let start = this.offsetAt(range.start);
                    let end = this.offsetAt(range.end);
                    return this._content.substring(start, end);
                }
                return this._content;
            }
            update(event, version) {
                this._content = event.text;
                this._version = version;
                this._lineOffsets = void 0;
            }
            getLineOffsets() {
                if (this._lineOffsets === void 0) {
                    let lineOffsets = [];
                    let text = this._content;
                    let isLineStart = true;
                    for(let i = 0; i < text.length; i++){
                        if (isLineStart) {
                            lineOffsets.push(i);
                            isLineStart = false;
                        }
                        let ch = text.charAt(i);
                        isLineStart = ch === "\r" || ch === "\n";
                        if (ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === "\n") {
                            i++;
                        }
                    }
                    if (isLineStart && text.length > 0) {
                        lineOffsets.push(text.length);
                    }
                    this._lineOffsets = lineOffsets;
                }
                return this._lineOffsets;
            }
            positionAt(offset) {
                offset = Math.max(Math.min(offset, this._content.length), 0);
                let lineOffsets = this.getLineOffsets();
                let low = 0, high = lineOffsets.length;
                if (high === 0) {
                    return Position.create(0, offset);
                }
                while(low < high){
                    let mid = Math.floor((low + high) / 2);
                    if (lineOffsets[mid] > offset) {
                        high = mid;
                    } else {
                        low = mid + 1;
                    }
                }
                let line = low - 1;
                return Position.create(line, offset - lineOffsets[line]);
            }
            offsetAt(position) {
                let lineOffsets = this.getLineOffsets();
                if (position.line >= lineOffsets.length) {
                    return this._content.length;
                } else if (position.line < 0) {
                    return 0;
                }
                let lineOffset = lineOffsets[position.line];
                let nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
                return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
            }
            get lineCount() {
                return this.getLineOffsets().length;
            }
            constructor(uri, languageId, version, content){
                this._uri = uri;
                this._languageId = languageId;
                this._version = version;
                this._content = content;
                this._lineOffsets = void 0;
            }
        };
        (function(Is2) {
            const toString = Object.prototype.toString;
            function defined(value1) {
                return typeof value1 !== "undefined";
            }
            Is2.defined = defined;
            function undefined2(value1) {
                return typeof value1 === "undefined";
            }
            Is2.undefined = undefined2;
            function boolean(value1) {
                return value1 === true || value1 === false;
            }
            Is2.boolean = boolean;
            function string2(value1) {
                return toString.call(value1) === "[object String]";
            }
            Is2.string = string2;
            function number(value1) {
                return toString.call(value1) === "[object Number]";
            }
            Is2.number = number;
            function numberRange(value1, min, max) {
                return toString.call(value1) === "[object Number]" && min <= value1 && value1 <= max;
            }
            Is2.numberRange = numberRange;
            function integer2(value1) {
                return toString.call(value1) === "[object Number]" && -2147483648 <= value1 && value1 <= 2147483647;
            }
            Is2.integer = integer2;
            function uinteger2(value1) {
                return toString.call(value1) === "[object Number]" && 0 <= value1 && value1 <= 2147483647;
            }
            Is2.uinteger = uinteger2;
            function func(value1) {
                return toString.call(value1) === "[object Function]";
            }
            Is2.func = func;
            function objectLiteral(value1) {
                return value1 !== null && typeof value1 === "object";
            }
            Is2.objectLiteral = objectLiteral;
            function typedArray(value1, check) {
                return Array.isArray(value1) && value1.every(check);
            }
            Is2.typedArray = typedArray;
        })(Is || (Is = {}));
    }
});
// ../../node_modules/path-browserify/index.js
var require_path_browserify = __commonJS({
    "../../node_modules/path-browserify/index.js" (exports, module) {
        "use strict";
        function assertPath(path5) {
            if (typeof path5 !== "string") {
                throw new TypeError("Path must be a string. Received " + JSON.stringify(path5));
            }
        }
        function normalizeStringPosix(path5, allowAboveRoot) {
            var res = "";
            var lastSegmentLength = 0;
            var lastSlash = -1;
            var dots = 0;
            var code;
            for(var i = 0; i <= path5.length; ++i){
                if (i < path5.length) code = path5.charCodeAt(i);
                else if (code === 47) break;
                else code = 47;
                if (code === 47) {
                    if (lastSlash === i - 1 || dots === 1) {} else if (lastSlash !== i - 1 && dots === 2) {
                        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
                            if (res.length > 2) {
                                var lastSlashIndex = res.lastIndexOf("/");
                                if (lastSlashIndex !== res.length - 1) {
                                    if (lastSlashIndex === -1) {
                                        res = "";
                                        lastSegmentLength = 0;
                                    } else {
                                        res = res.slice(0, lastSlashIndex);
                                        lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                                    }
                                    lastSlash = i;
                                    dots = 0;
                                    continue;
                                }
                            } else if (res.length === 2 || res.length === 1) {
                                res = "";
                                lastSegmentLength = 0;
                                lastSlash = i;
                                dots = 0;
                                continue;
                            }
                        }
                        if (allowAboveRoot) {
                            if (res.length > 0) res += "/..";
                            else res = "..";
                            lastSegmentLength = 2;
                        }
                    } else {
                        if (res.length > 0) res += "/" + path5.slice(lastSlash + 1, i);
                        else res = path5.slice(lastSlash + 1, i);
                        lastSegmentLength = i - lastSlash - 1;
                    }
                    lastSlash = i;
                    dots = 0;
                } else if (code === 46 && dots !== -1) {
                    ++dots;
                } else {
                    dots = -1;
                }
            }
            return res;
        }
        function _format(sep, pathObject) {
            var dir = pathObject.dir || pathObject.root;
            var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
            if (!dir) {
                return base;
            }
            if (dir === pathObject.root) {
                return dir + base;
            }
            return dir + sep + base;
        }
        var posix = {
            // path.resolve([from ...], to)
            resolve: function resolve2() {
                var resolvedPath = "";
                var resolvedAbsolute = false;
                var cwd;
                for(var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--){
                    var path5;
                    if (i >= 0) path5 = arguments[i];
                    else {
                        if (cwd === void 0) cwd = process.cwd();
                        path5 = cwd;
                    }
                    assertPath(path5);
                    if (path5.length === 0) {
                        continue;
                    }
                    resolvedPath = path5 + "/" + resolvedPath;
                    resolvedAbsolute = path5.charCodeAt(0) === 47;
                }
                resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
                if (resolvedAbsolute) {
                    if (resolvedPath.length > 0) return "/" + resolvedPath;
                    else return "/";
                } else if (resolvedPath.length > 0) {
                    return resolvedPath;
                } else {
                    return ".";
                }
            },
            normalize: function normalize(path5) {
                assertPath(path5);
                if (path5.length === 0) return ".";
                var isAbsolute2 = path5.charCodeAt(0) === 47;
                var trailingSeparator = path5.charCodeAt(path5.length - 1) === 47;
                path5 = normalizeStringPosix(path5, !isAbsolute2);
                if (path5.length === 0 && !isAbsolute2) path5 = ".";
                if (path5.length > 0 && trailingSeparator) path5 += "/";
                if (isAbsolute2) return "/" + path5;
                return path5;
            },
            isAbsolute: function isAbsolute2(path5) {
                assertPath(path5);
                return path5.length > 0 && path5.charCodeAt(0) === 47;
            },
            join: function join() {
                if (arguments.length === 0) return ".";
                var joined;
                for(var i = 0; i < arguments.length; ++i){
                    var arg = arguments[i];
                    assertPath(arg);
                    if (arg.length > 0) {
                        if (joined === void 0) joined = arg;
                        else joined += "/" + arg;
                    }
                }
                if (joined === void 0) return ".";
                return posix.normalize(joined);
            },
            relative: function relative(from, to) {
                assertPath(from);
                assertPath(to);
                if (from === to) return "";
                from = posix.resolve(from);
                to = posix.resolve(to);
                if (from === to) return "";
                var fromStart = 1;
                for(; fromStart < from.length; ++fromStart){
                    if (from.charCodeAt(fromStart) !== 47) break;
                }
                var fromEnd = from.length;
                var fromLen = fromEnd - fromStart;
                var toStart = 1;
                for(; toStart < to.length; ++toStart){
                    if (to.charCodeAt(toStart) !== 47) break;
                }
                var toEnd = to.length;
                var toLen = toEnd - toStart;
                var length = fromLen < toLen ? fromLen : toLen;
                var lastCommonSep = -1;
                var i = 0;
                for(; i <= length; ++i){
                    if (i === length) {
                        if (toLen > length) {
                            if (to.charCodeAt(toStart + i) === 47) {
                                return to.slice(toStart + i + 1);
                            } else if (i === 0) {
                                return to.slice(toStart + i);
                            }
                        } else if (fromLen > length) {
                            if (from.charCodeAt(fromStart + i) === 47) {
                                lastCommonSep = i;
                            } else if (i === 0) {
                                lastCommonSep = 0;
                            }
                        }
                        break;
                    }
                    var fromCode = from.charCodeAt(fromStart + i);
                    var toCode = to.charCodeAt(toStart + i);
                    if (fromCode !== toCode) break;
                    else if (fromCode === 47) lastCommonSep = i;
                }
                var out = "";
                for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i){
                    if (i === fromEnd || from.charCodeAt(i) === 47) {
                        if (out.length === 0) out += "..";
                        else out += "/..";
                    }
                }
                if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
                else {
                    toStart += lastCommonSep;
                    if (to.charCodeAt(toStart) === 47) ++toStart;
                    return to.slice(toStart);
                }
            },
            _makeLong: function _makeLong(path5) {
                return path5;
            },
            dirname: function dirname(path5) {
                assertPath(path5);
                if (path5.length === 0) return ".";
                var code = path5.charCodeAt(0);
                var hasRoot = code === 47;
                var end = -1;
                var matchedSlash = true;
                for(var i = path5.length - 1; i >= 1; --i){
                    code = path5.charCodeAt(i);
                    if (code === 47) {
                        if (!matchedSlash) {
                            end = i;
                            break;
                        }
                    } else {
                        matchedSlash = false;
                    }
                }
                if (end === -1) return hasRoot ? "/" : ".";
                if (hasRoot && end === 1) return "//";
                return path5.slice(0, end);
            },
            basename: function basename4(path5, ext) {
                if (ext !== void 0 && typeof ext !== "string") throw new TypeError('"ext" argument must be a string');
                assertPath(path5);
                var start = 0;
                var end = -1;
                var matchedSlash = true;
                var i;
                if (ext !== void 0 && ext.length > 0 && ext.length <= path5.length) {
                    if (ext.length === path5.length && ext === path5) return "";
                    var extIdx = ext.length - 1;
                    var firstNonSlashEnd = -1;
                    for(i = path5.length - 1; i >= 0; --i){
                        var code = path5.charCodeAt(i);
                        if (code === 47) {
                            if (!matchedSlash) {
                                start = i + 1;
                                break;
                            }
                        } else {
                            if (firstNonSlashEnd === -1) {
                                matchedSlash = false;
                                firstNonSlashEnd = i + 1;
                            }
                            if (extIdx >= 0) {
                                if (code === ext.charCodeAt(extIdx)) {
                                    if (--extIdx === -1) {
                                        end = i;
                                    }
                                } else {
                                    extIdx = -1;
                                    end = firstNonSlashEnd;
                                }
                            }
                        }
                    }
                    if (start === end) end = firstNonSlashEnd;
                    else if (end === -1) end = path5.length;
                    return path5.slice(start, end);
                } else {
                    for(i = path5.length - 1; i >= 0; --i){
                        if (path5.charCodeAt(i) === 47) {
                            if (!matchedSlash) {
                                start = i + 1;
                                break;
                            }
                        } else if (end === -1) {
                            matchedSlash = false;
                            end = i + 1;
                        }
                    }
                    if (end === -1) return "";
                    return path5.slice(start, end);
                }
            },
            extname: function extname2(path5) {
                assertPath(path5);
                var startDot = -1;
                var startPart = 0;
                var end = -1;
                var matchedSlash = true;
                var preDotState = 0;
                for(var i = path5.length - 1; i >= 0; --i){
                    var code = path5.charCodeAt(i);
                    if (code === 47) {
                        if (!matchedSlash) {
                            startPart = i + 1;
                            break;
                        }
                        continue;
                    }
                    if (end === -1) {
                        matchedSlash = false;
                        end = i + 1;
                    }
                    if (code === 46) {
                        if (startDot === -1) startDot = i;
                        else if (preDotState !== 1) preDotState = 1;
                    } else if (startDot !== -1) {
                        preDotState = -1;
                    }
                }
                if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
                preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
                preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                    return "";
                }
                return path5.slice(startDot, end);
            },
            format: function format5(pathObject) {
                if (pathObject === null || typeof pathObject !== "object") {
                    throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
                }
                return _format("/", pathObject);
            },
            parse: function parse7(path5) {
                assertPath(path5);
                var ret = {
                    root: "",
                    dir: "",
                    base: "",
                    ext: "",
                    name: ""
                };
                if (path5.length === 0) return ret;
                var code = path5.charCodeAt(0);
                var isAbsolute2 = code === 47;
                var start;
                if (isAbsolute2) {
                    ret.root = "/";
                    start = 1;
                } else {
                    start = 0;
                }
                var startDot = -1;
                var startPart = 0;
                var end = -1;
                var matchedSlash = true;
                var i = path5.length - 1;
                var preDotState = 0;
                for(; i >= start; --i){
                    code = path5.charCodeAt(i);
                    if (code === 47) {
                        if (!matchedSlash) {
                            startPart = i + 1;
                            break;
                        }
                        continue;
                    }
                    if (end === -1) {
                        matchedSlash = false;
                        end = i + 1;
                    }
                    if (code === 46) {
                        if (startDot === -1) startDot = i;
                        else if (preDotState !== 1) preDotState = 1;
                    } else if (startDot !== -1) {
                        preDotState = -1;
                    }
                }
                if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
                preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
                preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                    if (end !== -1) {
                        if (startPart === 0 && isAbsolute2) ret.base = ret.name = path5.slice(1, end);
                        else ret.base = ret.name = path5.slice(startPart, end);
                    }
                } else {
                    if (startPart === 0 && isAbsolute2) {
                        ret.name = path5.slice(1, startDot);
                        ret.base = path5.slice(1, end);
                    } else {
                        ret.name = path5.slice(startPart, startDot);
                        ret.base = path5.slice(startPart, end);
                    }
                    ret.ext = path5.slice(startDot, end);
                }
                if (startPart > 0) ret.dir = path5.slice(0, startPart - 1);
                else if (isAbsolute2) ret.dir = "/";
                return ret;
            },
            sep: "/",
            delimiter: ":",
            win32: null,
            posix: null
        };
        posix.posix = posix;
        module.exports = posix;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/codegen/code.js
var require_code = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/codegen/code.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
        var _CodeOrName = class {
        };
        exports._CodeOrName = _CodeOrName;
        exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
        var Name = class extends _CodeOrName {
            toString() {
                return this.str;
            }
            emptyStr() {
                return false;
            }
            get names() {
                return {
                    [this.str]: 1
                };
            }
            constructor(s){
                super();
                if (!exports.IDENTIFIER.test(s)) throw new Error("CodeGen: name must be a valid identifier");
                this.str = s;
            }
        };
        exports.Name = Name;
        var _Code = class extends _CodeOrName {
            toString() {
                return this.str;
            }
            emptyStr() {
                if (this._items.length > 1) return false;
                const item = this._items[0];
                return item === "" || item === '""';
            }
            get str() {
                var _a;
                return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s, c)=>`${s}${c}`, "");
            }
            get names() {
                var _a;
                return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c)=>{
                    if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1;
                    return names;
                }, {});
            }
            constructor(code){
                super();
                this._items = typeof code === "string" ? [
                    code
                ] : code;
            }
        };
        exports._Code = _Code;
        exports.nil = new _Code("");
        function _2(strs, ...args) {
            const code = [
                strs[0]
            ];
            let i = 0;
            while(i < args.length){
                addCodeArg(code, args[i]);
                code.push(strs[++i]);
            }
            return new _Code(code);
        }
        exports._ = _2;
        var plus = new _Code("+");
        function str(strs, ...args) {
            const expr = [
                safeStringify(strs[0])
            ];
            let i = 0;
            while(i < args.length){
                expr.push(plus);
                addCodeArg(expr, args[i]);
                expr.push(plus, safeStringify(strs[++i]));
            }
            optimize(expr);
            return new _Code(expr);
        }
        exports.str = str;
        function addCodeArg(code, arg) {
            if (arg instanceof _Code) code.push(...arg._items);
            else if (arg instanceof Name) code.push(arg);
            else code.push(interpolate(arg));
        }
        exports.addCodeArg = addCodeArg;
        function optimize(expr) {
            let i = 1;
            while(i < expr.length - 1){
                if (expr[i] === plus) {
                    const res = mergeExprItems(expr[i - 1], expr[i + 1]);
                    if (res !== void 0) {
                        expr.splice(i - 1, 3, res);
                        continue;
                    }
                    expr[i++] = "+";
                }
                i++;
            }
        }
        function mergeExprItems(a2, b) {
            if (b === '""') return a2;
            if (a2 === '""') return b;
            if (typeof a2 == "string") {
                if (b instanceof Name || a2[a2.length - 1] !== '"') return;
                if (typeof b != "string") return `${a2.slice(0, -1)}${b}"`;
                if (b[0] === '"') return a2.slice(0, -1) + b.slice(1);
                return;
            }
            if (typeof b == "string" && b[0] === '"' && !(a2 instanceof Name)) return `"${a2}${b.slice(1)}`;
            return;
        }
        function strConcat(c1, c2) {
            return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;
        }
        exports.strConcat = strConcat;
        function interpolate(x) {
            return typeof x == "number" || typeof x == "boolean" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(",") : x);
        }
        function stringify4(x) {
            return new _Code(safeStringify(x));
        }
        exports.stringify = stringify4;
        function safeStringify(x) {
            return JSON.stringify(x).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
        }
        exports.safeStringify = safeStringify;
        function getProperty(key) {
            return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _2`[${key}]`;
        }
        exports.getProperty = getProperty;
        function getEsmExportName(key) {
            if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
                return new _Code(`${key}`);
            }
            throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
        }
        exports.getEsmExportName = getEsmExportName;
        function regexpCode(rx) {
            return new _Code(rx.toString());
        }
        exports.regexpCode = regexpCode;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/codegen/scope.js
var require_scope = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/codegen/scope.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
        var code_1 = require_code();
        var ValueError = class extends Error {
            constructor(name){
                super(`CodeGen: "code" for ${name} not defined`);
                this.value = name.value;
            }
        };
        var UsedValueState;
        (function(UsedValueState2) {
            UsedValueState2[UsedValueState2["Started"] = 0] = "Started";
            UsedValueState2[UsedValueState2["Completed"] = 1] = "Completed";
        })(UsedValueState || (exports.UsedValueState = UsedValueState = {}));
        exports.varKinds = {
            const: new code_1.Name("const"),
            let: new code_1.Name("let"),
            var: new code_1.Name("var")
        };
        var Scope = class {
            toName(nameOrPrefix) {
                return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
            }
            name(prefix) {
                return new code_1.Name(this._newName(prefix));
            }
            _newName(prefix) {
                const ng = this._names[prefix] || this._nameGroup(prefix);
                return `${prefix}${ng.index++}`;
            }
            _nameGroup(prefix) {
                var _a, _b;
                if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {
                    throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
                }
                return this._names[prefix] = {
                    prefix,
                    index: 0
                };
            }
            constructor({ prefixes, parent } = {}){
                this._names = {};
                this._prefixes = prefixes;
                this._parent = parent;
            }
        };
        exports.Scope = Scope;
        var ValueScopeName = class extends code_1.Name {
            setValue(value1, { property, itemIndex }) {
                this.value = value1;
                this.scopePath = (0, code_1._)`.${new code_1.Name(property)}[${itemIndex}]`;
            }
            constructor(prefix, nameStr){
                super(nameStr);
                this.prefix = prefix;
            }
        };
        exports.ValueScopeName = ValueScopeName;
        var line = (0, code_1._)`\n`;
        var ValueScope = class extends Scope {
            get() {
                return this._scope;
            }
            name(prefix) {
                return new ValueScopeName(prefix, this._newName(prefix));
            }
            value(nameOrPrefix, value1) {
                var _a;
                if (value1.ref === void 0) throw new Error("CodeGen: ref must be passed in value");
                const name = this.toName(nameOrPrefix);
                const { prefix } = name;
                const valueKey = (_a = value1.key) !== null && _a !== void 0 ? _a : value1.ref;
                let vs = this._values[prefix];
                if (vs) {
                    const _name = vs.get(valueKey);
                    if (_name) return _name;
                } else {
                    vs = this._values[prefix] = /* @__PURE__ */ new Map();
                }
                vs.set(valueKey, name);
                const s = this._scope[prefix] || (this._scope[prefix] = []);
                const itemIndex = s.length;
                s[itemIndex] = value1.ref;
                name.setValue(value1, {
                    property: prefix,
                    itemIndex
                });
                return name;
            }
            getValue(prefix, keyOrRef) {
                const vs = this._values[prefix];
                if (!vs) return;
                return vs.get(keyOrRef);
            }
            scopeRefs(scopeName, values = this._values) {
                return this._reduceValues(values, (name)=>{
                    if (name.scopePath === void 0) throw new Error(`CodeGen: name "${name}" has no value`);
                    return (0, code_1._)`${scopeName}${name.scopePath}`;
                });
            }
            scopeCode(values = this._values, usedValues, getCode) {
                return this._reduceValues(values, (name)=>{
                    if (name.value === void 0) throw new Error(`CodeGen: name "${name}" has no value`);
                    return name.value.code;
                }, usedValues, getCode);
            }
            _reduceValues(values, valueCode, usedValues = {}, getCode) {
                let code = code_1.nil;
                for(const prefix in values){
                    const vs = values[prefix];
                    if (!vs) continue;
                    const nameSet = usedValues[prefix] = usedValues[prefix] || /* @__PURE__ */ new Map();
                    vs.forEach((name)=>{
                        if (nameSet.has(name)) return;
                        nameSet.set(name, UsedValueState.Started);
                        let c = valueCode(name);
                        if (c) {
                            const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
                            code = (0, code_1._)`${code}${def} ${name} = ${c};${this.opts._n}`;
                        } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {
                            code = (0, code_1._)`${code}${c}${this.opts._n}`;
                        } else {
                            throw new ValueError(name);
                        }
                        nameSet.set(name, UsedValueState.Completed);
                    });
                }
                return code;
            }
            constructor(opts){
                super(opts);
                this._values = {};
                this._scope = opts.scope;
                this.opts = {
                    ...opts,
                    _n: opts.lines ? line : code_1.nil
                };
            }
        };
        exports.ValueScope = ValueScope;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/codegen/index.js
var require_codegen = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/codegen/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
        var code_1 = require_code();
        var scope_1 = require_scope();
        var code_2 = require_code();
        Object.defineProperty(exports, "_", {
            enumerable: true,
            get: function() {
                return code_2._;
            }
        });
        Object.defineProperty(exports, "str", {
            enumerable: true,
            get: function() {
                return code_2.str;
            }
        });
        Object.defineProperty(exports, "strConcat", {
            enumerable: true,
            get: function() {
                return code_2.strConcat;
            }
        });
        Object.defineProperty(exports, "nil", {
            enumerable: true,
            get: function() {
                return code_2.nil;
            }
        });
        Object.defineProperty(exports, "getProperty", {
            enumerable: true,
            get: function() {
                return code_2.getProperty;
            }
        });
        Object.defineProperty(exports, "stringify", {
            enumerable: true,
            get: function() {
                return code_2.stringify;
            }
        });
        Object.defineProperty(exports, "regexpCode", {
            enumerable: true,
            get: function() {
                return code_2.regexpCode;
            }
        });
        Object.defineProperty(exports, "Name", {
            enumerable: true,
            get: function() {
                return code_2.Name;
            }
        });
        var scope_2 = require_scope();
        Object.defineProperty(exports, "Scope", {
            enumerable: true,
            get: function() {
                return scope_2.Scope;
            }
        });
        Object.defineProperty(exports, "ValueScope", {
            enumerable: true,
            get: function() {
                return scope_2.ValueScope;
            }
        });
        Object.defineProperty(exports, "ValueScopeName", {
            enumerable: true,
            get: function() {
                return scope_2.ValueScopeName;
            }
        });
        Object.defineProperty(exports, "varKinds", {
            enumerable: true,
            get: function() {
                return scope_2.varKinds;
            }
        });
        exports.operators = {
            GT: new code_1._Code(">"),
            GTE: new code_1._Code(">="),
            LT: new code_1._Code("<"),
            LTE: new code_1._Code("<="),
            EQ: new code_1._Code("==="),
            NEQ: new code_1._Code("!=="),
            NOT: new code_1._Code("!"),
            OR: new code_1._Code("||"),
            AND: new code_1._Code("&&"),
            ADD: new code_1._Code("+")
        };
        var Node = class {
            optimizeNodes() {
                return this;
            }
            optimizeNames(_names, _constants) {
                return this;
            }
        };
        var Def = class extends Node {
            render({ es5, _n }) {
                const varKind = es5 ? scope_1.varKinds.var : this.varKind;
                const rhs = this.rhs === void 0 ? "" : ` = ${this.rhs}`;
                return `${varKind} ${this.name}${rhs};` + _n;
            }
            optimizeNames(names, constants) {
                if (!names[this.name.str]) return;
                if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);
                return this;
            }
            get names() {
                return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
            }
            constructor(varKind, name, rhs){
                super();
                this.varKind = varKind;
                this.name = name;
                this.rhs = rhs;
            }
        };
        var Assign = class extends Node {
            render({ _n }) {
                return `${this.lhs} = ${this.rhs};` + _n;
            }
            optimizeNames(names, constants) {
                if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;
                this.rhs = optimizeExpr(this.rhs, names, constants);
                return this;
            }
            get names() {
                const names = this.lhs instanceof code_1.Name ? {} : {
                    ...this.lhs.names
                };
                return addExprNames(names, this.rhs);
            }
            constructor(lhs, rhs, sideEffects){
                super();
                this.lhs = lhs;
                this.rhs = rhs;
                this.sideEffects = sideEffects;
            }
        };
        var AssignOp = class extends Assign {
            render({ _n }) {
                return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
            }
            constructor(lhs, op, rhs, sideEffects){
                super(lhs, rhs, sideEffects);
                this.op = op;
            }
        };
        var Label = class extends Node {
            render({ _n }) {
                return `${this.label}:` + _n;
            }
            constructor(label){
                super();
                this.label = label;
                this.names = {};
            }
        };
        var Break = class extends Node {
            render({ _n }) {
                const label = this.label ? ` ${this.label}` : "";
                return `break${label};` + _n;
            }
            constructor(label){
                super();
                this.label = label;
                this.names = {};
            }
        };
        var Throw = class extends Node {
            render({ _n }) {
                return `throw ${this.error};` + _n;
            }
            get names() {
                return this.error.names;
            }
            constructor(error){
                super();
                this.error = error;
            }
        };
        var AnyCode = class extends Node {
            render({ _n }) {
                return `${this.code};` + _n;
            }
            optimizeNodes() {
                return `${this.code}` ? this : void 0;
            }
            optimizeNames(names, constants) {
                this.code = optimizeExpr(this.code, names, constants);
                return this;
            }
            get names() {
                return this.code instanceof code_1._CodeOrName ? this.code.names : {};
            }
            constructor(code){
                super();
                this.code = code;
            }
        };
        var ParentNode = class extends Node {
            render(opts) {
                return this.nodes.reduce((code, n)=>code + n.render(opts), "");
            }
            optimizeNodes() {
                const { nodes } = this;
                let i = nodes.length;
                while(i--){
                    const n = nodes[i].optimizeNodes();
                    if (Array.isArray(n)) nodes.splice(i, 1, ...n);
                    else if (n) nodes[i] = n;
                    else nodes.splice(i, 1);
                }
                return nodes.length > 0 ? this : void 0;
            }
            optimizeNames(names, constants) {
                const { nodes } = this;
                let i = nodes.length;
                while(i--){
                    const n = nodes[i];
                    if (n.optimizeNames(names, constants)) continue;
                    subtractNames(names, n.names);
                    nodes.splice(i, 1);
                }
                return nodes.length > 0 ? this : void 0;
            }
            get names() {
                return this.nodes.reduce((names, n)=>addNames(names, n.names), {});
            }
            constructor(nodes = []){
                super();
                this.nodes = nodes;
            }
        };
        var BlockNode = class extends ParentNode {
            render(opts) {
                return "{" + opts._n + super.render(opts) + "}" + opts._n;
            }
        };
        var Root = class extends ParentNode {
        };
        var Else = class extends BlockNode {
        };
        Else.kind = "else";
        var If = class _If extends BlockNode {
            render(opts) {
                let code = `if(${this.condition})` + super.render(opts);
                if (this.else) code += "else " + this.else.render(opts);
                return code;
            }
            optimizeNodes() {
                super.optimizeNodes();
                const cond = this.condition;
                if (cond === true) return this.nodes;
                let e = this.else;
                if (e) {
                    const ns = e.optimizeNodes();
                    e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
                }
                if (e) {
                    if (cond === false) return e instanceof _If ? e : e.nodes;
                    if (this.nodes.length) return this;
                    return new _If(not(cond), e instanceof _If ? [
                        e
                    ] : e.nodes);
                }
                if (cond === false || !this.nodes.length) return void 0;
                return this;
            }
            optimizeNames(names, constants) {
                var _a;
                this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
                if (!(super.optimizeNames(names, constants) || this.else)) return;
                this.condition = optimizeExpr(this.condition, names, constants);
                return this;
            }
            get names() {
                const names = super.names;
                addExprNames(names, this.condition);
                if (this.else) addNames(names, this.else.names);
                return names;
            }
            constructor(condition, nodes){
                super(nodes);
                this.condition = condition;
            }
        };
        If.kind = "if";
        var For = class extends BlockNode {
        };
        For.kind = "for";
        var ForLoop = class extends For {
            render(opts) {
                return `for(${this.iteration})` + super.render(opts);
            }
            optimizeNames(names, constants) {
                if (!super.optimizeNames(names, constants)) return;
                this.iteration = optimizeExpr(this.iteration, names, constants);
                return this;
            }
            get names() {
                return addNames(super.names, this.iteration.names);
            }
            constructor(iteration){
                super();
                this.iteration = iteration;
            }
        };
        var ForRange = class extends For {
            render(opts) {
                const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
                const { name, from, to } = this;
                return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
            }
            get names() {
                const names = addExprNames(super.names, this.from);
                return addExprNames(names, this.to);
            }
            constructor(varKind, name, from, to){
                super();
                this.varKind = varKind;
                this.name = name;
                this.from = from;
                this.to = to;
            }
        };
        var ForIter = class extends For {
            render(opts) {
                return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
            }
            optimizeNames(names, constants) {
                if (!super.optimizeNames(names, constants)) return;
                this.iterable = optimizeExpr(this.iterable, names, constants);
                return this;
            }
            get names() {
                return addNames(super.names, this.iterable.names);
            }
            constructor(loop, varKind, name, iterable){
                super();
                this.loop = loop;
                this.varKind = varKind;
                this.name = name;
                this.iterable = iterable;
            }
        };
        var Func = class extends BlockNode {
            render(opts) {
                const _async = this.async ? "async " : "";
                return `${_async}function ${this.name}(${this.args})` + super.render(opts);
            }
            constructor(name, args, async){
                super();
                this.name = name;
                this.args = args;
                this.async = async;
            }
        };
        Func.kind = "func";
        var Return = class extends ParentNode {
            render(opts) {
                return "return " + super.render(opts);
            }
        };
        Return.kind = "return";
        var Try = class extends BlockNode {
            render(opts) {
                let code = "try" + super.render(opts);
                if (this.catch) code += this.catch.render(opts);
                if (this.finally) code += this.finally.render(opts);
                return code;
            }
            optimizeNodes() {
                var _a, _b;
                super.optimizeNodes();
                (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
                (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
                return this;
            }
            optimizeNames(names, constants) {
                var _a, _b;
                super.optimizeNames(names, constants);
                (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
                (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
                return this;
            }
            get names() {
                const names = super.names;
                if (this.catch) addNames(names, this.catch.names);
                if (this.finally) addNames(names, this.finally.names);
                return names;
            }
        };
        var Catch = class extends BlockNode {
            render(opts) {
                return `catch(${this.error})` + super.render(opts);
            }
            constructor(error){
                super();
                this.error = error;
            }
        };
        Catch.kind = "catch";
        var Finally = class extends BlockNode {
            render(opts) {
                return "finally" + super.render(opts);
            }
        };
        Finally.kind = "finally";
        var CodeGen = class {
            toString() {
                return this._root.render(this.opts);
            }
            // returns unique name in the internal scope
            name(prefix) {
                return this._scope.name(prefix);
            }
            // reserves unique name in the external scope
            scopeName(prefix) {
                return this._extScope.name(prefix);
            }
            // reserves unique name in the external scope and assigns value to it
            scopeValue(prefixOrName, value1) {
                const name = this._extScope.value(prefixOrName, value1);
                const vs = this._values[name.prefix] || (this._values[name.prefix] = /* @__PURE__ */ new Set());
                vs.add(name);
                return name;
            }
            getScopeValue(prefix, keyOrRef) {
                return this._extScope.getValue(prefix, keyOrRef);
            }
            // return code that assigns values in the external scope to the names that are used internally
            // (same names that were returned by gen.scopeName or gen.scopeValue)
            scopeRefs(scopeName) {
                return this._extScope.scopeRefs(scopeName, this._values);
            }
            scopeCode() {
                return this._extScope.scopeCode(this._values);
            }
            _def(varKind, nameOrPrefix, rhs, constant) {
                const name = this._scope.toName(nameOrPrefix);
                if (rhs !== void 0 && constant) this._constants[name.str] = rhs;
                this._leafNode(new Def(varKind, name, rhs));
                return name;
            }
            // `const` declaration (`var` in es5 mode)
            const(nameOrPrefix, rhs, _constant) {
                return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
            }
            // `let` declaration with optional assignment (`var` in es5 mode)
            let(nameOrPrefix, rhs, _constant) {
                return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
            }
            // `var` declaration with optional assignment
            var(nameOrPrefix, rhs, _constant) {
                return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
            }
            // assignment code
            assign(lhs, rhs, sideEffects) {
                return this._leafNode(new Assign(lhs, rhs, sideEffects));
            }
            // `+=` code
            add(lhs, rhs) {
                return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
            }
            // appends passed SafeExpr to code or executes Block
            code(c) {
                if (typeof c == "function") c();
                else if (c !== code_1.nil) this._leafNode(new AnyCode(c));
                return this;
            }
            // returns code for object literal for the passed argument list of key-value pairs
            object(...keyValues) {
                const code = [
                    "{"
                ];
                for (const [key, value1] of keyValues){
                    if (code.length > 1) code.push(",");
                    code.push(key);
                    if (key !== value1 || this.opts.es5) {
                        code.push(":");
                        (0, code_1.addCodeArg)(code, value1);
                    }
                }
                code.push("}");
                return new code_1._Code(code);
            }
            // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
            if(condition, thenBody, elseBody) {
                this._blockNode(new If(condition));
                if (thenBody && elseBody) {
                    this.code(thenBody).else().code(elseBody).endIf();
                } else if (thenBody) {
                    this.code(thenBody).endIf();
                } else if (elseBody) {
                    throw new Error('CodeGen: "else" body without "then" body');
                }
                return this;
            }
            // `else if` clause - invalid without `if` or after `else` clauses
            elseIf(condition) {
                return this._elseNode(new If(condition));
            }
            // `else` clause - only valid after `if` or `else if` clauses
            else() {
                return this._elseNode(new Else());
            }
            // end `if` statement (needed if gen.if was used only with condition)
            endIf() {
                return this._endBlockNode(If, Else);
            }
            _for(node, forBody) {
                this._blockNode(node);
                if (forBody) this.code(forBody).endFor();
                return this;
            }
            // a generic `for` clause (or statement if `forBody` is passed)
            for(iteration, forBody) {
                return this._for(new ForLoop(iteration), forBody);
            }
            // `for` statement for a range of values
            forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
                const name = this._scope.toName(nameOrPrefix);
                return this._for(new ForRange(varKind, name, from, to), ()=>forBody(name));
            }
            // `for-of` statement (in es5 mode replace with a normal for loop)
            forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
                const name = this._scope.toName(nameOrPrefix);
                if (this.opts.es5) {
                    const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
                    return this.forRange("_i", 0, (0, code_1._)`${arr}.length`, (i)=>{
                        this.var(name, (0, code_1._)`${arr}[${i}]`);
                        forBody(name);
                    });
                }
                return this._for(new ForIter("of", varKind, name, iterable), ()=>forBody(name));
            }
            // `for-in` statement.
            // With option `ownProperties` replaced with a `for-of` loop for object keys
            forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
                if (this.opts.ownProperties) {
                    return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);
                }
                const name = this._scope.toName(nameOrPrefix);
                return this._for(new ForIter("in", varKind, name, obj), ()=>forBody(name));
            }
            // end `for` loop
            endFor() {
                return this._endBlockNode(For);
            }
            // `label` statement
            label(label) {
                return this._leafNode(new Label(label));
            }
            // `break` statement
            break(label) {
                return this._leafNode(new Break(label));
            }
            // `return` statement
            return(value1) {
                const node = new Return();
                this._blockNode(node);
                this.code(value1);
                if (node.nodes.length !== 1) throw new Error('CodeGen: "return" should have one node');
                return this._endBlockNode(Return);
            }
            // `try` statement
            try(tryBody, catchCode, finallyCode) {
                if (!catchCode && !finallyCode) throw new Error('CodeGen: "try" without "catch" and "finally"');
                const node = new Try();
                this._blockNode(node);
                this.code(tryBody);
                if (catchCode) {
                    const error = this.name("e");
                    this._currNode = node.catch = new Catch(error);
                    catchCode(error);
                }
                if (finallyCode) {
                    this._currNode = node.finally = new Finally();
                    this.code(finallyCode);
                }
                return this._endBlockNode(Catch, Finally);
            }
            // `throw` statement
            throw(error) {
                return this._leafNode(new Throw(error));
            }
            // start self-balancing block
            block(body, nodeCount) {
                this._blockStarts.push(this._nodes.length);
                if (body) this.code(body).endBlock(nodeCount);
                return this;
            }
            // end the current self-balancing block
            endBlock(nodeCount) {
                const len = this._blockStarts.pop();
                if (len === void 0) throw new Error("CodeGen: not in self-balancing block");
                const toClose = this._nodes.length - len;
                if (toClose < 0 || nodeCount !== void 0 && toClose !== nodeCount) {
                    throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
                }
                this._nodes.length = len;
                return this;
            }
            // `function` heading (or definition if funcBody is passed)
            func(name, args = code_1.nil, async, funcBody) {
                this._blockNode(new Func(name, args, async));
                if (funcBody) this.code(funcBody).endFunc();
                return this;
            }
            // end function definition
            endFunc() {
                return this._endBlockNode(Func);
            }
            optimize(n = 1) {
                while(n-- > 0){
                    this._root.optimizeNodes();
                    this._root.optimizeNames(this._root.names, this._constants);
                }
            }
            _leafNode(node) {
                this._currNode.nodes.push(node);
                return this;
            }
            _blockNode(node) {
                this._currNode.nodes.push(node);
                this._nodes.push(node);
            }
            _endBlockNode(N1, N2) {
                const n = this._currNode;
                if (n instanceof N1 || N2 && n instanceof N2) {
                    this._nodes.pop();
                    return this;
                }
                throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
            }
            _elseNode(node) {
                const n = this._currNode;
                if (!(n instanceof If)) {
                    throw new Error('CodeGen: "else" without "if"');
                }
                this._currNode = n.else = node;
                return this;
            }
            get _root() {
                return this._nodes[0];
            }
            get _currNode() {
                const ns = this._nodes;
                return ns[ns.length - 1];
            }
            set _currNode(node) {
                const ns = this._nodes;
                ns[ns.length - 1] = node;
            }
            constructor(extScope, opts = {}){
                this._values = {};
                this._blockStarts = [];
                this._constants = {};
                this.opts = {
                    ...opts,
                    _n: opts.lines ? "\n" : ""
                };
                this._extScope = extScope;
                this._scope = new scope_1.Scope({
                    parent: extScope
                });
                this._nodes = [
                    new Root()
                ];
            }
        };
        exports.CodeGen = CodeGen;
        function addNames(names, from) {
            for(const n in from)names[n] = (names[n] || 0) + (from[n] || 0);
            return names;
        }
        function addExprNames(names, from) {
            return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
        }
        function optimizeExpr(expr, names, constants) {
            if (expr instanceof code_1.Name) return replaceName(expr);
            if (!canOptimize(expr)) return expr;
            return new code_1._Code(expr._items.reduce((items, c)=>{
                if (c instanceof code_1.Name) c = replaceName(c);
                if (c instanceof code_1._Code) items.push(...c._items);
                else items.push(c);
                return items;
            }, []));
            function replaceName(n) {
                const c = constants[n.str];
                if (c === void 0 || names[n.str] !== 1) return n;
                delete names[n.str];
                return c;
            }
            function canOptimize(e) {
                return e instanceof code_1._Code && e._items.some((c)=>c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== void 0);
            }
        }
        function subtractNames(names, from) {
            for(const n in from)names[n] = (names[n] || 0) - (from[n] || 0);
        }
        function not(x) {
            return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._)`!${par(x)}`;
        }
        exports.not = not;
        var andCode = mappend(exports.operators.AND);
        function and(...args) {
            return args.reduce(andCode);
        }
        exports.and = and;
        var orCode = mappend(exports.operators.OR);
        function or(...args) {
            return args.reduce(orCode);
        }
        exports.or = or;
        function mappend(op) {
            return (x, y)=>x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)`${par(x)} ${op} ${par(y)}`;
        }
        function par(x) {
            return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;
        }
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/util.js
var require_util = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/util.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
        var codegen_1 = require_codegen();
        var code_1 = require_code();
        function toHash(arr) {
            const hash = {};
            for (const item of arr)hash[item] = true;
            return hash;
        }
        exports.toHash = toHash;
        function alwaysValidSchema(it, schema4) {
            if (typeof schema4 == "boolean") return schema4;
            if (Object.keys(schema4).length === 0) return true;
            checkUnknownRules(it, schema4);
            return !schemaHasRules(schema4, it.self.RULES.all);
        }
        exports.alwaysValidSchema = alwaysValidSchema;
        function checkUnknownRules(it, schema4 = it.schema) {
            const { opts, self: self2 } = it;
            if (!opts.strictSchema) return;
            if (typeof schema4 === "boolean") return;
            const rules = self2.RULES.keywords;
            for(const key in schema4){
                if (!rules[key]) checkStrictMode(it, `unknown keyword: "${key}"`);
            }
        }
        exports.checkUnknownRules = checkUnknownRules;
        function schemaHasRules(schema4, rules) {
            if (typeof schema4 == "boolean") return !schema4;
            for(const key in schema4)if (rules[key]) return true;
            return false;
        }
        exports.schemaHasRules = schemaHasRules;
        function schemaHasRulesButRef(schema4, RULES) {
            if (typeof schema4 == "boolean") return !schema4;
            for(const key in schema4)if (key !== "$ref" && RULES.all[key]) return true;
            return false;
        }
        exports.schemaHasRulesButRef = schemaHasRulesButRef;
        function schemaRefOrVal({ topSchemaRef, schemaPath }, schema4, keyword, $data) {
            if (!$data) {
                if (typeof schema4 == "number" || typeof schema4 == "boolean") return schema4;
                if (typeof schema4 == "string") return (0, codegen_1._)`${schema4}`;
            }
            return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
        }
        exports.schemaRefOrVal = schemaRefOrVal;
        function unescapeFragment(str) {
            return unescapeJsonPointer(decodeURIComponent(str));
        }
        exports.unescapeFragment = unescapeFragment;
        function escapeFragment(str) {
            return encodeURIComponent(escapeJsonPointer(str));
        }
        exports.escapeFragment = escapeFragment;
        function escapeJsonPointer(str) {
            if (typeof str == "number") return `${str}`;
            return str.replace(/~/g, "~0").replace(/\//g, "~1");
        }
        exports.escapeJsonPointer = escapeJsonPointer;
        function unescapeJsonPointer(str) {
            return str.replace(/~1/g, "/").replace(/~0/g, "~");
        }
        exports.unescapeJsonPointer = unescapeJsonPointer;
        function eachItem(xs, f2) {
            if (Array.isArray(xs)) {
                for (const x of xs)f2(x);
            } else {
                f2(xs);
            }
        }
        exports.eachItem = eachItem;
        function makeMergeEvaluated({ mergeNames, mergeToName, mergeValues, resultToName }) {
            return (gen, from, to, toName)=>{
                const res = to === void 0 ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);
                return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
            };
        }
        exports.mergeEvaluated = {
            props: makeMergeEvaluated({
                mergeNames: (gen, from, to)=>gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, ()=>{
                        gen.if((0, codegen_1._)`${from} === true`, ()=>gen.assign(to, true), ()=>gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from})`));
                    }),
                mergeToName: (gen, from, to)=>gen.if((0, codegen_1._)`${to} !== true`, ()=>{
                        if (from === true) {
                            gen.assign(to, true);
                        } else {
                            gen.assign(to, (0, codegen_1._)`${to} || {}`);
                            setEvaluated(gen, to, from);
                        }
                    }),
                mergeValues: (from, to)=>from === true ? true : {
                        ...from,
                        ...to
                    },
                resultToName: evaluatedPropsToName
            }),
            items: makeMergeEvaluated({
                mergeNames: (gen, from, to)=>gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, ()=>gen.assign(to, (0, codegen_1._)`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
                mergeToName: (gen, from, to)=>gen.if((0, codegen_1._)`${to} !== true`, ()=>gen.assign(to, from === true ? true : (0, codegen_1._)`${to} > ${from} ? ${to} : ${from}`)),
                mergeValues: (from, to)=>from === true ? true : Math.max(from, to),
                resultToName: (gen, items)=>gen.var("items", items)
            })
        };
        function evaluatedPropsToName(gen, ps) {
            if (ps === true) return gen.var("props", true);
            const props = gen.var("props", (0, codegen_1._)`{}`);
            if (ps !== void 0) setEvaluated(gen, props, ps);
            return props;
        }
        exports.evaluatedPropsToName = evaluatedPropsToName;
        function setEvaluated(gen, props, ps) {
            Object.keys(ps).forEach((p)=>gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`, true));
        }
        exports.setEvaluated = setEvaluated;
        var snippets = {};
        function useFunc(gen, f2) {
            return gen.scopeValue("func", {
                ref: f2,
                code: snippets[f2.code] || (snippets[f2.code] = new code_1._Code(f2.code))
            });
        }
        exports.useFunc = useFunc;
        var Type;
        (function(Type2) {
            Type2[Type2["Num"] = 0] = "Num";
            Type2[Type2["Str"] = 1] = "Str";
        })(Type || (exports.Type = Type = {}));
        function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
            if (dataProp instanceof codegen_1.Name) {
                const isNumber3 = dataPropType === Type.Num;
                return jsPropertySyntax ? isNumber3 ? (0, codegen_1._)`"[" + ${dataProp} + "]"` : (0, codegen_1._)`"['" + ${dataProp} + "']"` : isNumber3 ? (0, codegen_1._)`"/" + ${dataProp}` : (0, codegen_1._)`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`;
            }
            return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
        }
        exports.getErrorPath = getErrorPath;
        function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
            if (!mode) return;
            msg = `strict mode: ${msg}`;
            if (mode === true) throw new Error(msg);
            it.self.logger.warn(msg);
        }
        exports.checkStrictMode = checkStrictMode;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/names.js
var require_names = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/names.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var names = {
            // validation function arguments
            data: new codegen_1.Name("data"),
            // data passed to validation function
            // args passed from referencing schema
            valCxt: new codegen_1.Name("valCxt"),
            // validation/data context - should not be used directly, it is destructured to the names below
            instancePath: new codegen_1.Name("instancePath"),
            parentData: new codegen_1.Name("parentData"),
            parentDataProperty: new codegen_1.Name("parentDataProperty"),
            rootData: new codegen_1.Name("rootData"),
            // root data - same as the data passed to the first/top validation function
            dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
            // used to support recursiveRef and dynamicRef
            // function scoped variables
            vErrors: new codegen_1.Name("vErrors"),
            // null or array of validation errors
            errors: new codegen_1.Name("errors"),
            // counter of validation errors
            this: new codegen_1.Name("this"),
            // "globals"
            self: new codegen_1.Name("self"),
            scope: new codegen_1.Name("scope"),
            // JTD serialize/parse name for JSON string and position
            json: new codegen_1.Name("json"),
            jsonPos: new codegen_1.Name("jsonPos"),
            jsonLen: new codegen_1.Name("jsonLen"),
            jsonPart: new codegen_1.Name("jsonPart")
        };
        exports.default = names;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/errors.js
var require_errors = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/errors.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var names_1 = require_names();
        exports.keywordError = {
            message: ({ keyword })=>(0, codegen_1.str)`must pass "${keyword}" keyword validation`
        };
        exports.keyword$DataError = {
            message: ({ keyword, schemaType })=>schemaType ? (0, codegen_1.str)`"${keyword}" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`"${keyword}" keyword is invalid ($data)`
        };
        function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
            const { it } = cxt;
            const { gen, compositeRule, allErrors } = it;
            const errObj = errorObjectCode(cxt, error, errorPaths);
            if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {
                addError(gen, errObj);
            } else {
                returnErrors(it, (0, codegen_1._)`[${errObj}]`);
            }
        }
        exports.reportError = reportError;
        function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
            const { it } = cxt;
            const { gen, compositeRule, allErrors } = it;
            const errObj = errorObjectCode(cxt, error, errorPaths);
            addError(gen, errObj);
            if (!(compositeRule || allErrors)) {
                returnErrors(it, names_1.default.vErrors);
            }
        }
        exports.reportExtraError = reportExtraError;
        function resetErrorsCount(gen, errsCount) {
            gen.assign(names_1.default.errors, errsCount);
            gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, ()=>gen.if(errsCount, ()=>gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), ()=>gen.assign(names_1.default.vErrors, null)));
        }
        exports.resetErrorsCount = resetErrorsCount;
        function extendErrors({ gen, keyword, schemaValue, data, errsCount, it }) {
            if (errsCount === void 0) throw new Error("ajv implementation error");
            const err = gen.name("err");
            gen.forRange("i", errsCount, names_1.default.errors, (i)=>{
                gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i}]`);
                gen.if((0, codegen_1._)`${err}.instancePath === undefined`, ()=>gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
                gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);
                if (it.opts.verbose) {
                    gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);
                    gen.assign((0, codegen_1._)`${err}.data`, data);
                }
            });
        }
        exports.extendErrors = extendErrors;
        function addError(gen, errObj) {
            const err = gen.const("err", errObj);
            gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, ()=>gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);
            gen.code((0, codegen_1._)`${names_1.default.errors}++`);
        }
        function returnErrors(it, errs) {
            const { gen, validateName, schemaEnv } = it;
            if (schemaEnv.$async) {
                gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);
            } else {
                gen.assign((0, codegen_1._)`${validateName}.errors`, errs);
                gen.return(false);
            }
        }
        var E = {
            keyword: new codegen_1.Name("keyword"),
            schemaPath: new codegen_1.Name("schemaPath"),
            // also used in JTD errors
            params: new codegen_1.Name("params"),
            propertyName: new codegen_1.Name("propertyName"),
            message: new codegen_1.Name("message"),
            schema: new codegen_1.Name("schema"),
            parentSchema: new codegen_1.Name("parentSchema")
        };
        function errorObjectCode(cxt, error, errorPaths) {
            const { createErrors } = cxt.it;
            if (createErrors === false) return (0, codegen_1._)`{}`;
            return errorObject(cxt, error, errorPaths);
        }
        function errorObject(cxt, error, errorPaths = {}) {
            const { gen, it } = cxt;
            const keyValues = [
                errorInstancePath(it, errorPaths),
                errorSchemaPath(cxt, errorPaths)
            ];
            extraErrorProps(cxt, error, keyValues);
            return gen.object(...keyValues);
        }
        function errorInstancePath({ errorPath }, { instancePath }) {
            const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;
            return [
                names_1.default.instancePath,
                (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)
            ];
        }
        function errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {
            let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;
            if (schemaPath) {
                schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
            }
            return [
                E.schemaPath,
                schPath
            ];
        }
        function extraErrorProps(cxt, { params, message }, keyValues) {
            const { keyword, data, schemaValue, it } = cxt;
            const { opts, propertyName, topSchemaRef, schemaPath } = it;
            keyValues.push([
                E.keyword,
                keyword
            ], [
                E.params,
                typeof params == "function" ? params(cxt) : params || (0, codegen_1._)`{}`
            ]);
            if (opts.messages) {
                keyValues.push([
                    E.message,
                    typeof message == "function" ? message(cxt) : message
                ]);
            }
            if (opts.verbose) {
                keyValues.push([
                    E.schema,
                    schemaValue
                ], [
                    E.parentSchema,
                    (0, codegen_1._)`${topSchemaRef}${schemaPath}`
                ], [
                    names_1.default.data,
                    data
                ]);
            }
            if (propertyName) keyValues.push([
                E.propertyName,
                propertyName
            ]);
        }
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/boolSchema.js
var require_boolSchema = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/boolSchema.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;
        var errors_1 = require_errors();
        var codegen_1 = require_codegen();
        var names_1 = require_names();
        var boolError = {
            message: "boolean schema is false"
        };
        function topBoolOrEmptySchema(it) {
            const { gen, schema: schema4, validateName } = it;
            if (schema4 === false) {
                falseSchemaError(it, false);
            } else if (typeof schema4 == "object" && schema4.$async === true) {
                gen.return(names_1.default.data);
            } else {
                gen.assign((0, codegen_1._)`${validateName}.errors`, null);
                gen.return(true);
            }
        }
        exports.topBoolOrEmptySchema = topBoolOrEmptySchema;
        function boolOrEmptySchema(it, valid) {
            const { gen, schema: schema4 } = it;
            if (schema4 === false) {
                gen.var(valid, false);
                falseSchemaError(it);
            } else {
                gen.var(valid, true);
            }
        }
        exports.boolOrEmptySchema = boolOrEmptySchema;
        function falseSchemaError(it, overrideAllErrors) {
            const { gen, data } = it;
            const cxt = {
                gen,
                keyword: "false schema",
                data,
                schema: false,
                schemaCode: false,
                schemaValue: false,
                params: {},
                it
            };
            (0, errors_1.reportError)(cxt, boolError, void 0, overrideAllErrors);
        }
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/rules.js
var require_rules = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/rules.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getRules = exports.isJSONType = void 0;
        var _jsonTypes = [
            "string",
            "number",
            "integer",
            "boolean",
            "null",
            "object",
            "array"
        ];
        var jsonTypes = new Set(_jsonTypes);
        function isJSONType(x) {
            return typeof x == "string" && jsonTypes.has(x);
        }
        exports.isJSONType = isJSONType;
        function getRules() {
            const groups = {
                number: {
                    type: "number",
                    rules: []
                },
                string: {
                    type: "string",
                    rules: []
                },
                array: {
                    type: "array",
                    rules: []
                },
                object: {
                    type: "object",
                    rules: []
                }
            };
            return {
                types: {
                    ...groups,
                    integer: true,
                    boolean: true,
                    null: true
                },
                rules: [
                    {
                        rules: []
                    },
                    groups.number,
                    groups.string,
                    groups.array,
                    groups.object
                ],
                post: {
                    rules: []
                },
                all: {},
                keywords: {}
            };
        }
        exports.getRules = getRules;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/applicability.js
var require_applicability = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/applicability.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.shouldUseRule = exports.shouldUseGroup = exports.schemaHasRulesForType = void 0;
        function schemaHasRulesForType({ schema: schema4, self: self2 }, type) {
            const group = self2.RULES.types[type];
            return group && group !== true && shouldUseGroup(schema4, group);
        }
        exports.schemaHasRulesForType = schemaHasRulesForType;
        function shouldUseGroup(schema4, group) {
            return group.rules.some((rule)=>shouldUseRule(schema4, rule));
        }
        exports.shouldUseGroup = shouldUseGroup;
        function shouldUseRule(schema4, rule) {
            var _a;
            return schema4[rule.keyword] !== void 0 || ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some((kwd)=>schema4[kwd] !== void 0));
        }
        exports.shouldUseRule = shouldUseRule;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/dataType.js
var require_dataType = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/dataType.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
        var rules_1 = require_rules();
        var applicability_1 = require_applicability();
        var errors_1 = require_errors();
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var DataType;
        (function(DataType2) {
            DataType2[DataType2["Correct"] = 0] = "Correct";
            DataType2[DataType2["Wrong"] = 1] = "Wrong";
        })(DataType || (exports.DataType = DataType = {}));
        function getSchemaTypes(schema4) {
            const types = getJSONTypes(schema4.type);
            const hasNull = types.includes("null");
            if (hasNull) {
                if (schema4.nullable === false) throw new Error("type: null contradicts nullable: false");
            } else {
                if (!types.length && schema4.nullable !== void 0) {
                    throw new Error('"nullable" cannot be used without "type"');
                }
                if (schema4.nullable === true) types.push("null");
            }
            return types;
        }
        exports.getSchemaTypes = getSchemaTypes;
        function getJSONTypes(ts) {
            const types = Array.isArray(ts) ? ts : ts ? [
                ts
            ] : [];
            if (types.every(rules_1.isJSONType)) return types;
            throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
        }
        exports.getJSONTypes = getJSONTypes;
        function coerceAndCheckDataType(it, types) {
            const { gen, data, opts } = it;
            const coerceTo = coerceToTypes(types, opts.coerceTypes);
            const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
            if (checkTypes) {
                const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
                gen.if(wrongType, ()=>{
                    if (coerceTo.length) coerceData(it, types, coerceTo);
                    else reportTypeError(it);
                });
            }
            return checkTypes;
        }
        exports.coerceAndCheckDataType = coerceAndCheckDataType;
        var COERCIBLE = /* @__PURE__ */ new Set([
            "string",
            "number",
            "integer",
            "boolean",
            "null"
        ]);
        function coerceToTypes(types, coerceTypes) {
            return coerceTypes ? types.filter((t1)=>COERCIBLE.has(t1) || coerceTypes === "array" && t1 === "array") : [];
        }
        function coerceData(it, types, coerceTo) {
            const { gen, data, opts } = it;
            const dataType = gen.let("dataType", (0, codegen_1._)`typeof ${data}`);
            const coerced = gen.let("coerced", (0, codegen_1._)`undefined`);
            if (opts.coerceTypes === "array") {
                gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, ()=>gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), ()=>gen.assign(coerced, data)));
            }
            gen.if((0, codegen_1._)`${coerced} !== undefined`);
            for (const t1 of coerceTo){
                if (COERCIBLE.has(t1) || t1 === "array" && opts.coerceTypes === "array") {
                    coerceSpecificType(t1);
                }
            }
            gen.else();
            reportTypeError(it);
            gen.endIf();
            gen.if((0, codegen_1._)`${coerced} !== undefined`, ()=>{
                gen.assign(data, coerced);
                assignParentData(it, coerced);
            });
            function coerceSpecificType(t1) {
                switch(t1){
                    case "string":
                        gen.elseIf((0, codegen_1._)`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced, (0, codegen_1._)`"" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`""`);
                        return;
                    case "number":
                        gen.elseIf((0, codegen_1._)`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);
                        return;
                    case "integer":
                        gen.elseIf((0, codegen_1._)`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);
                        return;
                    case "boolean":
                        gen.elseIf((0, codegen_1._)`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === "true" || ${data} === 1`).assign(coerced, true);
                        return;
                    case "null":
                        gen.elseIf((0, codegen_1._)`${data} === "" || ${data} === 0 || ${data} === false`);
                        gen.assign(coerced, null);
                        return;
                    case "array":
                        gen.elseIf((0, codegen_1._)`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);
                }
            }
        }
        function assignParentData({ gen, parentData, parentDataProperty }, expr) {
            gen.if((0, codegen_1._)`${parentData} !== undefined`, ()=>gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));
        }
        function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
            const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
            let cond;
            switch(dataType){
                case "null":
                    return (0, codegen_1._)`${data} ${EQ} null`;
                case "array":
                    cond = (0, codegen_1._)`Array.isArray(${data})`;
                    break;
                case "object":
                    cond = (0, codegen_1._)`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
                    break;
                case "integer":
                    cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);
                    break;
                case "number":
                    cond = numCond();
                    break;
                default:
                    return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;
            }
            return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
            function numCond(_cond = codegen_1.nil) {
                return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);
            }
        }
        exports.checkDataType = checkDataType;
        function checkDataTypes(dataTypes, data, strictNums, correct) {
            if (dataTypes.length === 1) {
                return checkDataType(dataTypes[0], data, strictNums, correct);
            }
            let cond;
            const types = (0, util_1.toHash)(dataTypes);
            if (types.array && types.object) {
                const notObj = (0, codegen_1._)`typeof ${data} != "object"`;
                cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;
                delete types.null;
                delete types.array;
                delete types.object;
            } else {
                cond = codegen_1.nil;
            }
            if (types.number) delete types.integer;
            for(const t1 in types)cond = (0, codegen_1.and)(cond, checkDataType(t1, data, strictNums, correct));
            return cond;
        }
        exports.checkDataTypes = checkDataTypes;
        var typeError = {
            message: ({ schema: schema4 })=>`must be ${schema4}`,
            params: ({ schema: schema4, schemaValue })=>typeof schema4 == "string" ? (0, codegen_1._)`{type: ${schema4}}` : (0, codegen_1._)`{type: ${schemaValue}}`
        };
        function reportTypeError(it) {
            const cxt = getTypeErrorContext(it);
            (0, errors_1.reportError)(cxt, typeError);
        }
        exports.reportTypeError = reportTypeError;
        function getTypeErrorContext(it) {
            const { gen, data, schema: schema4 } = it;
            const schemaCode = (0, util_1.schemaRefOrVal)(it, schema4, "type");
            return {
                gen,
                keyword: "type",
                data,
                schema: schema4.type,
                schemaCode,
                schemaValue: schemaCode,
                parentSchema: schema4,
                params: {},
                it
            };
        }
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/defaults.js
var require_defaults = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/defaults.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.assignDefaults = void 0;
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        function assignDefaults(it, ty) {
            const { properties, items } = it.schema;
            if (ty === "object" && properties) {
                for(const key in properties){
                    assignDefault(it, key, properties[key].default);
                }
            } else if (ty === "array" && Array.isArray(items)) {
                items.forEach((sch, i)=>assignDefault(it, i, sch.default));
            }
        }
        exports.assignDefaults = assignDefaults;
        function assignDefault(it, prop, defaultValue) {
            const { gen, compositeRule, data, opts } = it;
            if (defaultValue === void 0) return;
            const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;
            if (compositeRule) {
                (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
                return;
            }
            let condition = (0, codegen_1._)`${childData} === undefined`;
            if (opts.useDefaults === "empty") {
                condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === ""`;
            }
            gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
        }
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/code.js
var require_code2 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/code.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var names_1 = require_names();
        var util_2 = require_util();
        function checkReportMissingProp(cxt, prop) {
            const { gen, data, it } = cxt;
            gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), ()=>{
                cxt.setParams({
                    missingProperty: (0, codegen_1._)`${prop}`
                }, true);
                cxt.error();
            });
        }
        exports.checkReportMissingProp = checkReportMissingProp;
        function checkMissingProp({ gen, data, it: { opts } }, properties, missing) {
            return (0, codegen_1.or)(...properties.map((prop)=>(0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)`${missing} = ${prop}`)));
        }
        exports.checkMissingProp = checkMissingProp;
        function reportMissingProp(cxt, missing) {
            cxt.setParams({
                missingProperty: missing
            }, true);
            cxt.error();
        }
        exports.reportMissingProp = reportMissingProp;
        function hasPropFunc(gen) {
            return gen.scopeValue("func", {
                // eslint-disable-next-line @typescript-eslint/unbound-method
                ref: Object.prototype.hasOwnProperty,
                code: (0, codegen_1._)`Object.prototype.hasOwnProperty`
            });
        }
        exports.hasPropFunc = hasPropFunc;
        function isOwnProperty(gen, data, property) {
            return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property})`;
        }
        exports.isOwnProperty = isOwnProperty;
        function propertyInData(gen, data, property, ownProperties) {
            const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
            return ownProperties ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property)}` : cond;
        }
        exports.propertyInData = propertyInData;
        function noPropertyInData(gen, data, property, ownProperties) {
            const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} === undefined`;
            return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
        }
        exports.noPropertyInData = noPropertyInData;
        function allSchemaProperties(schemaMap) {
            return schemaMap ? Object.keys(schemaMap).filter((p)=>p !== "__proto__") : [];
        }
        exports.allSchemaProperties = allSchemaProperties;
        function schemaProperties(it, schemaMap) {
            return allSchemaProperties(schemaMap).filter((p)=>!(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
        }
        exports.schemaProperties = schemaProperties;
        function callValidateCode({ schemaCode, data, it: { gen, topSchemaRef, schemaPath, errorPath }, it }, func, context, passSchema) {
            const dataAndSchema = passSchema ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
            const valCxt = [
                [
                    names_1.default.instancePath,
                    (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)
                ],
                [
                    names_1.default.parentData,
                    it.parentData
                ],
                [
                    names_1.default.parentDataProperty,
                    it.parentDataProperty
                ],
                [
                    names_1.default.rootData,
                    names_1.default.rootData
                ]
            ];
            if (it.opts.dynamicRef) valCxt.push([
                names_1.default.dynamicAnchors,
                names_1.default.dynamicAnchors
            ]);
            const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;
            return context !== codegen_1.nil ? (0, codegen_1._)`${func}.call(${context}, ${args})` : (0, codegen_1._)`${func}(${args})`;
        }
        exports.callValidateCode = callValidateCode;
        var newRegExp = (0, codegen_1._)`new RegExp`;
        function usePattern({ gen, it: { opts } }, pattern) {
            const u = opts.unicodeRegExp ? "u" : "";
            const { regExp } = opts.code;
            const rx = regExp(pattern, u);
            return gen.scopeValue("pattern", {
                key: rx.toString(),
                ref: rx,
                code: (0, codegen_1._)`${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`
            });
        }
        exports.usePattern = usePattern;
        function validateArray(cxt) {
            const { gen, data, keyword, it } = cxt;
            const valid = gen.name("valid");
            if (it.allErrors) {
                const validArr = gen.let("valid", true);
                validateItems(()=>gen.assign(validArr, false));
                return validArr;
            }
            gen.var(valid, true);
            validateItems(()=>gen.break());
            return valid;
            function validateItems(notValid) {
                const len = gen.const("len", (0, codegen_1._)`${data}.length`);
                gen.forRange("i", 0, len, (i)=>{
                    cxt.subschema({
                        keyword,
                        dataProp: i,
                        dataPropType: util_1.Type.Num
                    }, valid);
                    gen.if((0, codegen_1.not)(valid), notValid);
                });
            }
        }
        exports.validateArray = validateArray;
        function validateUnion(cxt) {
            const { gen, schema: schema4, keyword, it } = cxt;
            if (!Array.isArray(schema4)) throw new Error("ajv implementation error");
            const alwaysValid = schema4.some((sch)=>(0, util_1.alwaysValidSchema)(it, sch));
            if (alwaysValid && !it.opts.unevaluated) return;
            const valid = gen.let("valid", false);
            const schValid = gen.name("_valid");
            gen.block(()=>schema4.forEach((_sch, i)=>{
                    const schCxt = cxt.subschema({
                        keyword,
                        schemaProp: i,
                        compositeRule: true
                    }, schValid);
                    gen.assign(valid, (0, codegen_1._)`${valid} || ${schValid}`);
                    const merged = cxt.mergeValidEvaluated(schCxt, schValid);
                    if (!merged) gen.if((0, codegen_1.not)(valid));
                }));
            cxt.result(valid, ()=>cxt.reset(), ()=>cxt.error(true));
        }
        exports.validateUnion = validateUnion;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/keyword.js
var require_keyword = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/keyword.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = void 0;
        var codegen_1 = require_codegen();
        var names_1 = require_names();
        var code_1 = require_code2();
        var errors_1 = require_errors();
        function macroKeywordCode(cxt, def) {
            const { gen, keyword, schema: schema4, parentSchema, it } = cxt;
            const macroSchema = def.macro.call(it.self, schema4, parentSchema, it);
            const schemaRef = useKeyword(gen, keyword, macroSchema);
            if (it.opts.validateSchema !== false) it.self.validateSchema(macroSchema, true);
            const valid = gen.name("valid");
            cxt.subschema({
                schema: macroSchema,
                schemaPath: codegen_1.nil,
                errSchemaPath: `${it.errSchemaPath}/${keyword}`,
                topSchemaRef: schemaRef,
                compositeRule: true
            }, valid);
            cxt.pass(valid, ()=>cxt.error(true));
        }
        exports.macroKeywordCode = macroKeywordCode;
        function funcKeywordCode(cxt, def) {
            var _a;
            const { gen, keyword, schema: schema4, parentSchema, $data, it } = cxt;
            checkAsyncKeyword(it, def);
            const validate3 = !$data && def.compile ? def.compile.call(it.self, schema4, parentSchema, it) : def.validate;
            const validateRef = useKeyword(gen, keyword, validate3);
            const valid = gen.let("valid");
            cxt.block$data(valid, validateKeyword);
            cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
            function validateKeyword() {
                if (def.errors === false) {
                    assignValid();
                    if (def.modifying) modifyData(cxt);
                    reportErrs(()=>cxt.error());
                } else {
                    const ruleErrs = def.async ? validateAsync() : validateSync();
                    if (def.modifying) modifyData(cxt);
                    reportErrs(()=>addErrs(cxt, ruleErrs));
                }
            }
            function validateAsync() {
                const ruleErrs = gen.let("ruleErrs", null);
                gen.try(()=>assignValid((0, codegen_1._)`await `), (e)=>gen.assign(valid, false).if((0, codegen_1._)`${e} instanceof ${it.ValidationError}`, ()=>gen.assign(ruleErrs, (0, codegen_1._)`${e}.errors`), ()=>gen.throw(e)));
                return ruleErrs;
            }
            function validateSync() {
                const validateErrs = (0, codegen_1._)`${validateRef}.errors`;
                gen.assign(validateErrs, null);
                assignValid(codegen_1.nil);
                return validateErrs;
            }
            function assignValid(_await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil) {
                const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
                const passSchema = !("compile" in def && !$data || def.schema === false);
                gen.assign(valid, (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
            }
            function reportErrs(errors) {
                var _a2;
                gen.if((0, codegen_1.not)((_a2 = def.valid) !== null && _a2 !== void 0 ? _a2 : valid), errors);
            }
        }
        exports.funcKeywordCode = funcKeywordCode;
        function modifyData(cxt) {
            const { gen, data, it } = cxt;
            gen.if(it.parentData, ()=>gen.assign(data, (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`));
        }
        function addErrs(cxt, errs) {
            const { gen } = cxt;
            gen.if((0, codegen_1._)`Array.isArray(${errs})`, ()=>{
                gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
                (0, errors_1.extendErrors)(cxt);
            }, ()=>cxt.error());
        }
        function checkAsyncKeyword({ schemaEnv }, def) {
            if (def.async && !schemaEnv.$async) throw new Error("async keyword in sync schema");
        }
        function useKeyword(gen, keyword, result) {
            if (result === void 0) throw new Error(`keyword "${keyword}" failed to compile`);
            return gen.scopeValue("keyword", typeof result == "function" ? {
                ref: result
            } : {
                ref: result,
                code: (0, codegen_1.stringify)(result)
            });
        }
        function validSchemaType(schema4, schemaType, allowUndefined = false) {
            return !schemaType.length || schemaType.some((st)=>st === "array" ? Array.isArray(schema4) : st === "object" ? schema4 && typeof schema4 == "object" && !Array.isArray(schema4) : typeof schema4 == st || allowUndefined && typeof schema4 == "undefined");
        }
        exports.validSchemaType = validSchemaType;
        function validateKeywordUsage({ schema: schema4, opts, self: self2, errSchemaPath }, def, keyword) {
            if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
                throw new Error("ajv implementation error");
            }
            const deps = def.dependencies;
            if (deps === null || deps === void 0 ? void 0 : deps.some((kwd)=>!Object.prototype.hasOwnProperty.call(schema4, kwd))) {
                throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
            }
            if (def.validateSchema) {
                const valid = def.validateSchema(schema4[keyword]);
                if (!valid) {
                    const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` + self2.errorsText(def.validateSchema.errors);
                    if (opts.validateSchema === "log") self2.logger.error(msg);
                    else throw new Error(msg);
                }
            }
        }
        exports.validateKeywordUsage = validateKeywordUsage;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/subschema.js
var require_subschema = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/subschema.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        function getSubschema(it, { keyword, schemaProp, schema: schema4, schemaPath, errSchemaPath, topSchemaRef }) {
            if (keyword !== void 0 && schema4 !== void 0) {
                throw new Error('both "keyword" and "schema" passed, only one allowed');
            }
            if (keyword !== void 0) {
                const sch = it.schema[keyword];
                return schemaProp === void 0 ? {
                    schema: sch,
                    schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
                    errSchemaPath: `${it.errSchemaPath}/${keyword}`
                } : {
                    schema: sch[schemaProp],
                    schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
                    errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`
                };
            }
            if (schema4 !== void 0) {
                if (schemaPath === void 0 || errSchemaPath === void 0 || topSchemaRef === void 0) {
                    throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
                }
                return {
                    schema: schema4,
                    schemaPath,
                    topSchemaRef,
                    errSchemaPath
                };
            }
            throw new Error('either "keyword" or "schema" must be passed');
        }
        exports.getSubschema = getSubschema;
        function extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {
            if (data !== void 0 && dataProp !== void 0) {
                throw new Error('both "data" and "dataProp" passed, only one allowed');
            }
            const { gen } = it;
            if (dataProp !== void 0) {
                const { errorPath, dataPathArr, opts } = it;
                const nextData = gen.let("data", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
                dataContextProps(nextData);
                subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
                subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;
                subschema.dataPathArr = [
                    ...dataPathArr,
                    subschema.parentDataProperty
                ];
            }
            if (data !== void 0) {
                const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true);
                dataContextProps(nextData);
                if (propertyName !== void 0) subschema.propertyName = propertyName;
            }
            if (dataTypes) subschema.dataTypes = dataTypes;
            function dataContextProps(_nextData) {
                subschema.data = _nextData;
                subschema.dataLevel = it.dataLevel + 1;
                subschema.dataTypes = [];
                it.definedProperties = /* @__PURE__ */ new Set();
                subschema.parentData = it.data;
                subschema.dataNames = [
                    ...it.dataNames,
                    _nextData
                ];
            }
        }
        exports.extendSubschemaData = extendSubschemaData;
        function extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {
            if (compositeRule !== void 0) subschema.compositeRule = compositeRule;
            if (createErrors !== void 0) subschema.createErrors = createErrors;
            if (allErrors !== void 0) subschema.allErrors = allErrors;
            subschema.jtdDiscriminator = jtdDiscriminator;
            subschema.jtdMetadata = jtdMetadata;
        }
        exports.extendSubschemaMode = extendSubschemaMode;
    }
});
// ../../node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
    "../../node_modules/fast-deep-equal/index.js" (exports, module) {
        "use strict";
        module.exports = function equal(a2, b) {
            if (a2 === b) return true;
            if (a2 && b && typeof a2 == "object" && typeof b == "object") {
                if (a2.constructor !== b.constructor) return false;
                var length, i, keys;
                if (Array.isArray(a2)) {
                    length = a2.length;
                    if (length != b.length) return false;
                    for(i = length; i-- !== 0;)if (!equal(a2[i], b[i])) return false;
                    return true;
                }
                if (a2.constructor === RegExp) return a2.source === b.source && a2.flags === b.flags;
                if (a2.valueOf !== Object.prototype.valueOf) return a2.valueOf() === b.valueOf();
                if (a2.toString !== Object.prototype.toString) return a2.toString() === b.toString();
                keys = Object.keys(a2);
                length = keys.length;
                if (length !== Object.keys(b).length) return false;
                for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
                for(i = length; i-- !== 0;){
                    var key = keys[i];
                    if (!equal(a2[key], b[key])) return false;
                }
                return true;
            }
            return a2 !== a2 && b !== b;
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/json-schema-traverse/index.js
var require_json_schema_traverse = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/json-schema-traverse/index.js" (exports, module) {
        "use strict";
        var traverse = module.exports = function(schema4, opts, cb) {
            if (typeof opts == "function") {
                cb = opts;
                opts = {};
            }
            cb = opts.cb || cb;
            var pre = typeof cb == "function" ? cb : cb.pre || function() {};
            var post = cb.post || function() {};
            _traverse(opts, pre, post, schema4, "", schema4);
        };
        traverse.keywords = {
            additionalItems: true,
            items: true,
            contains: true,
            additionalProperties: true,
            propertyNames: true,
            not: true,
            if: true,
            then: true,
            else: true
        };
        traverse.arrayKeywords = {
            items: true,
            allOf: true,
            anyOf: true,
            oneOf: true
        };
        traverse.propsKeywords = {
            $defs: true,
            definitions: true,
            properties: true,
            patternProperties: true,
            dependencies: true
        };
        traverse.skipKeywords = {
            default: true,
            enum: true,
            const: true,
            required: true,
            maximum: true,
            minimum: true,
            exclusiveMaximum: true,
            exclusiveMinimum: true,
            multipleOf: true,
            maxLength: true,
            minLength: true,
            pattern: true,
            format: true,
            maxItems: true,
            minItems: true,
            uniqueItems: true,
            maxProperties: true,
            minProperties: true
        };
        function _traverse(opts, pre, post, schema4, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
            if (schema4 && typeof schema4 == "object" && !Array.isArray(schema4)) {
                pre(schema4, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
                for(var key in schema4){
                    var sch = schema4[key];
                    if (Array.isArray(sch)) {
                        if (key in traverse.arrayKeywords) {
                            for(var i = 0; i < sch.length; i++)_traverse(opts, pre, post, sch[i], jsonPtr + "/" + key + "/" + i, rootSchema, jsonPtr, key, schema4, i);
                        }
                    } else if (key in traverse.propsKeywords) {
                        if (sch && typeof sch == "object") {
                            for(var prop in sch)_traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema4, prop);
                        }
                    } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
                        _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema4);
                    }
                }
                post(schema4, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
            }
        }
        function escapeJsonPtr(str) {
            return str.replace(/~/g, "~0").replace(/\//g, "~1");
        }
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/resolve.js
var require_resolve = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/resolve.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getSchemaRefs = exports.resolveUrl = exports.normalizeId = exports._getFullPath = exports.getFullPath = exports.inlineRef = void 0;
        var util_1 = require_util();
        var equal = require_fast_deep_equal();
        var traverse = require_json_schema_traverse();
        var SIMPLE_INLINED = /* @__PURE__ */ new Set([
            "type",
            "format",
            "pattern",
            "maxLength",
            "minLength",
            "maxProperties",
            "minProperties",
            "maxItems",
            "minItems",
            "maximum",
            "minimum",
            "uniqueItems",
            "multipleOf",
            "required",
            "enum",
            "const"
        ]);
        function inlineRef(schema4, limit = true) {
            if (typeof schema4 == "boolean") return true;
            if (limit === true) return !hasRef(schema4);
            if (!limit) return false;
            return countKeys(schema4) <= limit;
        }
        exports.inlineRef = inlineRef;
        var REF_KEYWORDS = /* @__PURE__ */ new Set([
            "$ref",
            "$recursiveRef",
            "$recursiveAnchor",
            "$dynamicRef",
            "$dynamicAnchor"
        ]);
        function hasRef(schema4) {
            for(const key in schema4){
                if (REF_KEYWORDS.has(key)) return true;
                const sch = schema4[key];
                if (Array.isArray(sch) && sch.some(hasRef)) return true;
                if (typeof sch == "object" && hasRef(sch)) return true;
            }
            return false;
        }
        function countKeys(schema4) {
            let count = 0;
            for(const key in schema4){
                if (key === "$ref") return Infinity;
                count++;
                if (SIMPLE_INLINED.has(key)) continue;
                if (typeof schema4[key] == "object") {
                    (0, util_1.eachItem)(schema4[key], (sch)=>count += countKeys(sch));
                }
                if (count === Infinity) return Infinity;
            }
            return count;
        }
        function getFullPath(resolver, id = "", normalize) {
            if (normalize !== false) id = normalizeId2(id);
            const p = resolver.parse(id);
            return _getFullPath(resolver, p);
        }
        exports.getFullPath = getFullPath;
        function _getFullPath(resolver, p) {
            const serialized = resolver.serialize(p);
            return serialized.split("#")[0] + "#";
        }
        exports._getFullPath = _getFullPath;
        var TRAILING_SLASH_HASH = /#\/?$/;
        function normalizeId2(id) {
            return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
        }
        exports.normalizeId = normalizeId2;
        function resolveUrl(resolver, baseId, id) {
            id = normalizeId2(id);
            return resolver.resolve(baseId, id);
        }
        exports.resolveUrl = resolveUrl;
        var ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
        function getSchemaRefs(schema4, baseId) {
            if (typeof schema4 == "boolean") return {};
            const { schemaId, uriResolver } = this.opts;
            const schId = normalizeId2(schema4[schemaId] || baseId);
            const baseIds = {
                "": schId
            };
            const pathPrefix = getFullPath(uriResolver, schId, false);
            const localRefs = {};
            const schemaRefs = /* @__PURE__ */ new Set();
            traverse(schema4, {
                allKeys: true
            }, (sch, jsonPtr, _2, parentJsonPtr)=>{
                if (parentJsonPtr === void 0) return;
                const fullPath = pathPrefix + jsonPtr;
                let innerBaseId = baseIds[parentJsonPtr];
                if (typeof sch[schemaId] == "string") innerBaseId = addRef.call(this, sch[schemaId]);
                addAnchor.call(this, sch.$anchor);
                addAnchor.call(this, sch.$dynamicAnchor);
                baseIds[jsonPtr] = innerBaseId;
                function addRef(ref) {
                    const _resolve = this.opts.uriResolver.resolve;
                    ref = normalizeId2(innerBaseId ? _resolve(innerBaseId, ref) : ref);
                    if (schemaRefs.has(ref)) throw ambiguos(ref);
                    schemaRefs.add(ref);
                    let schOrRef = this.refs[ref];
                    if (typeof schOrRef == "string") schOrRef = this.refs[schOrRef];
                    if (typeof schOrRef == "object") {
                        checkAmbiguosRef(sch, schOrRef.schema, ref);
                    } else if (ref !== normalizeId2(fullPath)) {
                        if (ref[0] === "#") {
                            checkAmbiguosRef(sch, localRefs[ref], ref);
                            localRefs[ref] = sch;
                        } else {
                            this.refs[ref] = fullPath;
                        }
                    }
                    return ref;
                }
                function addAnchor(anchor) {
                    if (typeof anchor == "string") {
                        if (!ANCHOR.test(anchor)) throw new Error(`invalid anchor "${anchor}"`);
                        addRef.call(this, `#${anchor}`);
                    }
                }
            });
            return localRefs;
            function checkAmbiguosRef(sch1, sch2, ref) {
                if (sch2 !== void 0 && !equal(sch1, sch2)) throw ambiguos(ref);
            }
            function ambiguos(ref) {
                return new Error(`reference "${ref}" resolves to more than one schema`);
            }
        }
        exports.getSchemaRefs = getSchemaRefs;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/index.js
var require_validate = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/validate/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getData = exports.KeywordCxt = exports.validateFunctionCode = void 0;
        var boolSchema_1 = require_boolSchema();
        var dataType_1 = require_dataType();
        var applicability_1 = require_applicability();
        var dataType_2 = require_dataType();
        var defaults_1 = require_defaults();
        var keyword_1 = require_keyword();
        var subschema_1 = require_subschema();
        var codegen_1 = require_codegen();
        var names_1 = require_names();
        var resolve_1 = require_resolve();
        var util_1 = require_util();
        var errors_1 = require_errors();
        function validateFunctionCode(it) {
            if (isSchemaObj(it)) {
                checkKeywords(it);
                if (schemaCxtHasRules(it)) {
                    topSchemaObjCode(it);
                    return;
                }
            }
            validateFunction(it, ()=>(0, boolSchema_1.topBoolOrEmptySchema)(it));
        }
        exports.validateFunctionCode = validateFunctionCode;
        function validateFunction({ gen, validateName, schema: schema4, schemaEnv, opts }, body) {
            if (opts.code.es5) {
                gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, ()=>{
                    gen.code((0, codegen_1._)`"use strict"; ${funcSourceUrl(schema4, opts)}`);
                    destructureValCxtES5(gen, opts);
                    gen.code(body);
                });
            } else {
                gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, ()=>gen.code(funcSourceUrl(schema4, opts)).code(body));
            }
        }
        function destructureValCxt(opts) {
            return (0, codegen_1._)`{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
        }
        function destructureValCxtES5(gen, opts) {
            gen.if(names_1.default.valCxt, ()=>{
                gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);
                gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);
                gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
                gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);
                if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
            }, ()=>{
                gen.var(names_1.default.instancePath, (0, codegen_1._)`""`);
                gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);
                gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);
                gen.var(names_1.default.rootData, names_1.default.data);
                if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);
            });
        }
        function topSchemaObjCode(it) {
            const { schema: schema4, opts, gen } = it;
            validateFunction(it, ()=>{
                if (opts.$comment && schema4.$comment) commentKeyword(it);
                checkNoDefault(it);
                gen.let(names_1.default.vErrors, null);
                gen.let(names_1.default.errors, 0);
                if (opts.unevaluated) resetEvaluated(it);
                typeAndKeywords(it);
                returnResults(it);
            });
            return;
        }
        function resetEvaluated(it) {
            const { gen, validateName } = it;
            it.evaluated = gen.const("evaluated", (0, codegen_1._)`${validateName}.evaluated`);
            gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, ()=>gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));
            gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, ()=>gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));
        }
        function funcSourceUrl(schema4, opts) {
            const schId = typeof schema4 == "object" && schema4[opts.schemaId];
            return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;
        }
        function subschemaCode(it, valid) {
            if (isSchemaObj(it)) {
                checkKeywords(it);
                if (schemaCxtHasRules(it)) {
                    subSchemaObjCode(it, valid);
                    return;
                }
            }
            (0, boolSchema_1.boolOrEmptySchema)(it, valid);
        }
        function schemaCxtHasRules({ schema: schema4, self: self2 }) {
            if (typeof schema4 == "boolean") return !schema4;
            for(const key in schema4)if (self2.RULES.all[key]) return true;
            return false;
        }
        function isSchemaObj(it) {
            return typeof it.schema != "boolean";
        }
        function subSchemaObjCode(it, valid) {
            const { schema: schema4, gen, opts } = it;
            if (opts.$comment && schema4.$comment) commentKeyword(it);
            updateContext(it);
            checkAsyncSchema(it);
            const errsCount = gen.const("_errs", names_1.default.errors);
            typeAndKeywords(it, errsCount);
            gen.var(valid, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
        }
        function checkKeywords(it) {
            (0, util_1.checkUnknownRules)(it);
            checkRefsAndKeywords(it);
        }
        function typeAndKeywords(it, errsCount) {
            if (it.opts.jtd) return schemaKeywords(it, [], false, errsCount);
            const types = (0, dataType_1.getSchemaTypes)(it.schema);
            const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
            schemaKeywords(it, types, !checkedTypes, errsCount);
        }
        function checkRefsAndKeywords(it) {
            const { schema: schema4, errSchemaPath, opts, self: self2 } = it;
            if (schema4.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema4, self2.RULES)) {
                self2.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
            }
        }
        function checkNoDefault(it) {
            const { schema: schema4, opts } = it;
            if (schema4.default !== void 0 && opts.useDefaults && opts.strictSchema) {
                (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
            }
        }
        function updateContext(it) {
            const schId = it.schema[it.opts.schemaId];
            if (schId) it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
        }
        function checkAsyncSchema(it) {
            if (it.schema.$async && !it.schemaEnv.$async) throw new Error("async schema in sync schema");
        }
        function commentKeyword({ gen, schemaEnv, schema: schema4, errSchemaPath, opts }) {
            const msg = schema4.$comment;
            if (opts.$comment === true) {
                gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);
            } else if (typeof opts.$comment == "function") {
                const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;
                const rootName = gen.scopeValue("root", {
                    ref: schemaEnv.root
                });
                gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
            }
        }
        function returnResults(it) {
            const { gen, schemaEnv, validateName, ValidationError, opts } = it;
            if (schemaEnv.$async) {
                gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, ()=>gen.return(names_1.default.data), ()=>gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));
            } else {
                gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);
                if (opts.unevaluated) assignEvaluated(it);
                gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);
            }
        }
        function assignEvaluated({ gen, evaluated, props, items }) {
            if (props instanceof codegen_1.Name) gen.assign((0, codegen_1._)`${evaluated}.props`, props);
            if (items instanceof codegen_1.Name) gen.assign((0, codegen_1._)`${evaluated}.items`, items);
        }
        function schemaKeywords(it, types, typeErrors, errsCount) {
            const { gen, schema: schema4, data, allErrors, opts, self: self2 } = it;
            const { RULES } = self2;
            if (schema4.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema4, RULES))) {
                gen.block(()=>keywordCode(it, "$ref", RULES.all.$ref.definition));
                return;
            }
            if (!opts.jtd) checkStrictTypes(it, types);
            gen.block(()=>{
                for (const group of RULES.rules)groupKeywords(group);
                groupKeywords(RULES.post);
            });
            function groupKeywords(group) {
                if (!(0, applicability_1.shouldUseGroup)(schema4, group)) return;
                if (group.type) {
                    gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
                    iterateKeywords(it, group);
                    if (types.length === 1 && types[0] === group.type && typeErrors) {
                        gen.else();
                        (0, dataType_2.reportTypeError)(it);
                    }
                    gen.endIf();
                } else {
                    iterateKeywords(it, group);
                }
                if (!allErrors) gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);
            }
        }
        function iterateKeywords(it, group) {
            const { gen, schema: schema4, opts: { useDefaults } } = it;
            if (useDefaults) (0, defaults_1.assignDefaults)(it, group.type);
            gen.block(()=>{
                for (const rule of group.rules){
                    if ((0, applicability_1.shouldUseRule)(schema4, rule)) {
                        keywordCode(it, rule.keyword, rule.definition, group.type);
                    }
                }
            });
        }
        function checkStrictTypes(it, types) {
            if (it.schemaEnv.meta || !it.opts.strictTypes) return;
            checkContextTypes(it, types);
            if (!it.opts.allowUnionTypes) checkMultipleTypes(it, types);
            checkKeywordTypes(it, it.dataTypes);
        }
        function checkContextTypes(it, types) {
            if (!types.length) return;
            if (!it.dataTypes.length) {
                it.dataTypes = types;
                return;
            }
            types.forEach((t1)=>{
                if (!includesType(it.dataTypes, t1)) {
                    strictTypesError(it, `type "${t1}" not allowed by context "${it.dataTypes.join(",")}"`);
                }
            });
            narrowSchemaTypes(it, types);
        }
        function checkMultipleTypes(it, ts) {
            if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
                strictTypesError(it, "use allowUnionTypes to allow union type keyword");
            }
        }
        function checkKeywordTypes(it, ts) {
            const rules = it.self.RULES.all;
            for(const keyword in rules){
                const rule = rules[keyword];
                if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
                    const { type } = rule.definition;
                    if (type.length && !type.some((t1)=>hasApplicableType(ts, t1))) {
                        strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
                    }
                }
            }
        }
        function hasApplicableType(schTs, kwdT) {
            return schTs.includes(kwdT) || kwdT === "number" && schTs.includes("integer");
        }
        function includesType(ts, t1) {
            return ts.includes(t1) || t1 === "integer" && ts.includes("number");
        }
        function narrowSchemaTypes(it, withTypes) {
            const ts = [];
            for (const t1 of it.dataTypes){
                if (includesType(withTypes, t1)) ts.push(t1);
                else if (withTypes.includes("integer") && t1 === "number") ts.push("integer");
            }
            it.dataTypes = ts;
        }
        function strictTypesError(it, msg) {
            const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
            msg += ` at "${schemaPath}" (strictTypes)`;
            (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
        }
        var KeywordCxt = class {
            result(condition, successAction, failAction) {
                this.failResult((0, codegen_1.not)(condition), successAction, failAction);
            }
            failResult(condition, successAction, failAction) {
                this.gen.if(condition);
                if (failAction) failAction();
                else this.error();
                if (successAction) {
                    this.gen.else();
                    successAction();
                    if (this.allErrors) this.gen.endIf();
                } else {
                    if (this.allErrors) this.gen.endIf();
                    else this.gen.else();
                }
            }
            pass(condition, failAction) {
                this.failResult((0, codegen_1.not)(condition), void 0, failAction);
            }
            fail(condition) {
                if (condition === void 0) {
                    this.error();
                    if (!this.allErrors) this.gen.if(false);
                    return;
                }
                this.gen.if(condition);
                this.error();
                if (this.allErrors) this.gen.endIf();
                else this.gen.else();
            }
            fail$data(condition) {
                if (!this.$data) return this.fail(condition);
                const { schemaCode } = this;
                this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
            }
            error(append, errorParams, errorPaths) {
                if (errorParams) {
                    this.setParams(errorParams);
                    this._error(append, errorPaths);
                    this.setParams({});
                    return;
                }
                this._error(append, errorPaths);
            }
            _error(append, errorPaths) {
                ;
                (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
            }
            $dataError() {
                (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
            }
            reset() {
                if (this.errsCount === void 0) throw new Error('add "trackErrors" to keyword definition');
                (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
            }
            ok(cond) {
                if (!this.allErrors) this.gen.if(cond);
            }
            setParams(obj, assign) {
                if (assign) Object.assign(this.params, obj);
                else this.params = obj;
            }
            block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
                this.gen.block(()=>{
                    this.check$data(valid, $dataValid);
                    codeBlock();
                });
            }
            check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
                if (!this.$data) return;
                const { gen, schemaCode, schemaType, def } = this;
                gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));
                if (valid !== codegen_1.nil) gen.assign(valid, true);
                if (schemaType.length || def.validateSchema) {
                    gen.elseIf(this.invalid$data());
                    this.$dataError();
                    if (valid !== codegen_1.nil) gen.assign(valid, false);
                }
                gen.else();
            }
            invalid$data() {
                const { gen, schemaCode, schemaType, def, it } = this;
                return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
                function wrong$DataType() {
                    if (schemaType.length) {
                        if (!(schemaCode instanceof codegen_1.Name)) throw new Error("ajv implementation error");
                        const st = Array.isArray(schemaType) ? schemaType : [
                            schemaType
                        ];
                        return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
                    }
                    return codegen_1.nil;
                }
                function invalid$DataSchema() {
                    if (def.validateSchema) {
                        const validateSchemaRef = gen.scopeValue("validate$data", {
                            ref: def.validateSchema
                        });
                        return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;
                    }
                    return codegen_1.nil;
                }
            }
            subschema(appl, valid) {
                const subschema = (0, subschema_1.getSubschema)(this.it, appl);
                (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
                (0, subschema_1.extendSubschemaMode)(subschema, appl);
                const nextContext = {
                    ...this.it,
                    ...subschema,
                    items: void 0,
                    props: void 0
                };
                subschemaCode(nextContext, valid);
                return nextContext;
            }
            mergeEvaluated(schemaCxt, toName) {
                const { it, gen } = this;
                if (!it.opts.unevaluated) return;
                if (it.props !== true && schemaCxt.props !== void 0) {
                    it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
                }
                if (it.items !== true && schemaCxt.items !== void 0) {
                    it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
                }
            }
            mergeValidEvaluated(schemaCxt, valid) {
                const { it, gen } = this;
                if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
                    gen.if(valid, ()=>this.mergeEvaluated(schemaCxt, codegen_1.Name));
                    return true;
                }
            }
            constructor(it, def, keyword){
                (0, keyword_1.validateKeywordUsage)(it, def, keyword);
                this.gen = it.gen;
                this.allErrors = it.allErrors;
                this.keyword = keyword;
                this.data = it.data;
                this.schema = it.schema[keyword];
                this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
                this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
                this.schemaType = def.schemaType;
                this.parentSchema = it.schema;
                this.params = {};
                this.it = it;
                this.def = def;
                if (this.$data) {
                    this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
                } else {
                    this.schemaCode = this.schemaValue;
                    if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
                        throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
                    }
                }
                if ("code" in def ? def.trackErrors : def.errors !== false) {
                    this.errsCount = it.gen.const("_errs", names_1.default.errors);
                }
            }
        };
        exports.KeywordCxt = KeywordCxt;
        function keywordCode(it, keyword, def, ruleType) {
            const cxt = new KeywordCxt(it, def, keyword);
            if ("code" in def) {
                def.code(cxt, ruleType);
            } else if (cxt.$data && def.validate) {
                (0, keyword_1.funcKeywordCode)(cxt, def);
            } else if ("macro" in def) {
                (0, keyword_1.macroKeywordCode)(cxt, def);
            } else if (def.compile || def.validate) {
                (0, keyword_1.funcKeywordCode)(cxt, def);
            }
        }
        var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
        var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
        function getData($data, { dataLevel, dataNames, dataPathArr }) {
            let jsonPointer;
            let data;
            if ($data === "") return names_1.default.rootData;
            if ($data[0] === "/") {
                if (!JSON_POINTER.test($data)) throw new Error(`Invalid JSON-pointer: ${$data}`);
                jsonPointer = $data;
                data = names_1.default.rootData;
            } else {
                const matches = RELATIVE_JSON_POINTER.exec($data);
                if (!matches) throw new Error(`Invalid JSON-pointer: ${$data}`);
                const up = +matches[1];
                jsonPointer = matches[2];
                if (jsonPointer === "#") {
                    if (up >= dataLevel) throw new Error(errorMsg("property/index", up));
                    return dataPathArr[dataLevel - up];
                }
                if (up > dataLevel) throw new Error(errorMsg("data", up));
                data = dataNames[dataLevel - up];
                if (!jsonPointer) return data;
            }
            let expr = data;
            const segments = jsonPointer.split("/");
            for (const segment of segments){
                if (segment) {
                    data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
                    expr = (0, codegen_1._)`${expr} && ${data}`;
                }
            }
            return expr;
            function errorMsg(pointerType, up) {
                return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
            }
        }
        exports.getData = getData;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/runtime/validation_error.js
var require_validation_error = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/runtime/validation_error.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ValidationError = class extends Error {
            constructor(errors){
                super("validation failed");
                this.errors = errors;
                this.ajv = this.validation = true;
            }
        };
        exports.default = ValidationError;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/ref_error.js
var require_ref_error = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/ref_error.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var resolve_1 = require_resolve();
        var MissingRefError = class extends Error {
            constructor(resolver, baseId, ref, msg){
                super(msg || `can't resolve reference ${ref} from id ${baseId}`);
                this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
                this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
            }
        };
        exports.default = MissingRefError;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/index.js
var require_compile = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/compile/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.resolveSchema = exports.getCompilingSchema = exports.resolveRef = exports.compileSchema = exports.SchemaEnv = void 0;
        var codegen_1 = require_codegen();
        var validation_error_1 = require_validation_error();
        var names_1 = require_names();
        var resolve_1 = require_resolve();
        var util_1 = require_util();
        var validate_1 = require_validate();
        var SchemaEnv = class {
            constructor(env){
                var _a;
                this.refs = {};
                this.dynamicAnchors = {};
                let schema4;
                if (typeof env.schema == "object") schema4 = env.schema;
                this.schema = env.schema;
                this.schemaId = env.schemaId;
                this.root = env.root || this;
                this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema4 === null || schema4 === void 0 ? void 0 : schema4[env.schemaId || "$id"]);
                this.schemaPath = env.schemaPath;
                this.localRefs = env.localRefs;
                this.meta = env.meta;
                this.$async = schema4 === null || schema4 === void 0 ? void 0 : schema4.$async;
                this.refs = {};
            }
        };
        exports.SchemaEnv = SchemaEnv;
        function compileSchema(sch) {
            const _sch = getCompilingSchema.call(this, sch);
            if (_sch) return _sch;
            const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId);
            const { es5, lines } = this.opts.code;
            const { ownProperties } = this.opts;
            const gen = new codegen_1.CodeGen(this.scope, {
                es5,
                lines,
                ownProperties
            });
            let _ValidationError;
            if (sch.$async) {
                _ValidationError = gen.scopeValue("Error", {
                    ref: validation_error_1.default,
                    code: (0, codegen_1._)`require("ajv/dist/runtime/validation_error").default`
                });
            }
            const validateName = gen.scopeName("validate");
            sch.validateName = validateName;
            const schemaCxt = {
                gen,
                allErrors: this.opts.allErrors,
                data: names_1.default.data,
                parentData: names_1.default.parentData,
                parentDataProperty: names_1.default.parentDataProperty,
                dataNames: [
                    names_1.default.data
                ],
                dataPathArr: [
                    codegen_1.nil
                ],
                // TODO can its length be used as dataLevel if nil is removed?
                dataLevel: 0,
                dataTypes: [],
                definedProperties: /* @__PURE__ */ new Set(),
                topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true ? {
                    ref: sch.schema,
                    code: (0, codegen_1.stringify)(sch.schema)
                } : {
                    ref: sch.schema
                }),
                validateName,
                ValidationError: _ValidationError,
                schema: sch.schema,
                schemaEnv: sch,
                rootId,
                baseId: sch.baseId || rootId,
                schemaPath: codegen_1.nil,
                errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
                errorPath: (0, codegen_1._)`""`,
                opts: this.opts,
                self: this
            };
            let sourceCode;
            try {
                this._compilations.add(sch);
                (0, validate_1.validateFunctionCode)(schemaCxt);
                gen.optimize(this.opts.code.optimize);
                const validateCode = gen.toString();
                sourceCode = `${gen.scopeRefs(names_1.default.scope)}return ${validateCode}`;
                if (this.opts.code.process) sourceCode = this.opts.code.process(sourceCode, sch);
                const makeValidate = new Function(`${names_1.default.self}`, `${names_1.default.scope}`, sourceCode);
                const validate3 = makeValidate(this, this.scope.get());
                this.scope.value(validateName, {
                    ref: validate3
                });
                validate3.errors = null;
                validate3.schema = sch.schema;
                validate3.schemaEnv = sch;
                if (sch.$async) validate3.$async = true;
                if (this.opts.code.source === true) {
                    validate3.source = {
                        validateName,
                        validateCode,
                        scopeValues: gen._values
                    };
                }
                if (this.opts.unevaluated) {
                    const { props, items } = schemaCxt;
                    validate3.evaluated = {
                        props: props instanceof codegen_1.Name ? void 0 : props,
                        items: items instanceof codegen_1.Name ? void 0 : items,
                        dynamicProps: props instanceof codegen_1.Name,
                        dynamicItems: items instanceof codegen_1.Name
                    };
                    if (validate3.source) validate3.source.evaluated = (0, codegen_1.stringify)(validate3.evaluated);
                }
                sch.validate = validate3;
                return sch;
            } catch (e) {
                delete sch.validate;
                delete sch.validateName;
                if (sourceCode) this.logger.error("Error compiling schema, function code:", sourceCode);
                throw e;
            } finally{
                this._compilations.delete(sch);
            }
        }
        exports.compileSchema = compileSchema;
        function resolveRef(root, baseId, ref) {
            var _a;
            ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
            const schOrFunc = root.refs[ref];
            if (schOrFunc) return schOrFunc;
            let _sch = resolve2.call(this, root, ref);
            if (_sch === void 0) {
                const schema4 = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref];
                const { schemaId } = this.opts;
                if (schema4) _sch = new SchemaEnv({
                    schema: schema4,
                    schemaId,
                    root,
                    baseId
                });
            }
            if (_sch === void 0) return;
            return root.refs[ref] = inlineOrCompile.call(this, _sch);
        }
        exports.resolveRef = resolveRef;
        function inlineOrCompile(sch) {
            if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs)) return sch.schema;
            return sch.validate ? sch : compileSchema.call(this, sch);
        }
        function getCompilingSchema(schEnv) {
            for (const sch of this._compilations){
                if (sameSchemaEnv(sch, schEnv)) return sch;
            }
        }
        exports.getCompilingSchema = getCompilingSchema;
        function sameSchemaEnv(s1, s2) {
            return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
        }
        function resolve2(root, ref) {
            let sch;
            while(typeof (sch = this.refs[ref]) == "string")ref = sch;
            return sch || this.schemas[ref] || resolveSchema.call(this, root, ref);
        }
        function resolveSchema(root, ref) {
            const p = this.opts.uriResolver.parse(ref);
            const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
            let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, void 0);
            if (Object.keys(root.schema).length > 0 && refPath === baseId) {
                return getJsonPointer.call(this, p, root);
            }
            const id = (0, resolve_1.normalizeId)(refPath);
            const schOrRef = this.refs[id] || this.schemas[id];
            if (typeof schOrRef == "string") {
                const sch = resolveSchema.call(this, root, schOrRef);
                if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object") return;
                return getJsonPointer.call(this, p, sch);
            }
            if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object") return;
            if (!schOrRef.validate) compileSchema.call(this, schOrRef);
            if (id === (0, resolve_1.normalizeId)(ref)) {
                const { schema: schema4 } = schOrRef;
                const { schemaId } = this.opts;
                const schId = schema4[schemaId];
                if (schId) baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
                return new SchemaEnv({
                    schema: schema4,
                    schemaId,
                    root,
                    baseId
                });
            }
            return getJsonPointer.call(this, p, schOrRef);
        }
        exports.resolveSchema = resolveSchema;
        var PREVENT_SCOPE_CHANGE = /* @__PURE__ */ new Set([
            "properties",
            "patternProperties",
            "enum",
            "dependencies",
            "definitions"
        ]);
        function getJsonPointer(parsedRef, { baseId, schema: schema4, root }) {
            var _a;
            if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/") return;
            for (const part of parsedRef.fragment.slice(1).split("/")){
                if (typeof schema4 === "boolean") return;
                const partSchema = schema4[(0, util_1.unescapeFragment)(part)];
                if (partSchema === void 0) return;
                schema4 = partSchema;
                const schId = typeof schema4 === "object" && schema4[this.opts.schemaId];
                if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
                    baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
                }
            }
            let env;
            if (typeof schema4 != "boolean" && schema4.$ref && !(0, util_1.schemaHasRulesButRef)(schema4, this.RULES)) {
                const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema4.$ref);
                env = resolveSchema.call(this, root, $ref);
            }
            const { schemaId } = this.opts;
            env = env || new SchemaEnv({
                schema: schema4,
                schemaId,
                root,
                baseId
            });
            if (env.schema !== env.root.schema) return env;
            return void 0;
        }
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/data.json
var require_data = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/data.json" (exports, module) {
        module.exports = {
            $id: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
            description: "Meta-schema for $data reference (JSON AnySchema extension proposal)",
            type: "object",
            required: [
                "$data"
            ],
            properties: {
                $data: {
                    type: "string",
                    anyOf: [
                        {
                            format: "relative-json-pointer"
                        },
                        {
                            format: "json-pointer"
                        }
                    ]
                }
            },
            additionalProperties: false
        };
    }
});
// ../../node_modules/fast-uri/lib/scopedChars.js
var require_scopedChars = __commonJS({
    "../../node_modules/fast-uri/lib/scopedChars.js" (exports, module) {
        "use strict";
        var HEX = {
            0: 0,
            1: 1,
            2: 2,
            3: 3,
            4: 4,
            5: 5,
            6: 6,
            7: 7,
            8: 8,
            9: 9,
            a: 10,
            A: 10,
            b: 11,
            B: 11,
            c: 12,
            C: 12,
            d: 13,
            D: 13,
            e: 14,
            E: 14,
            f: 15,
            F: 15
        };
        module.exports = {
            HEX
        };
    }
});
// ../../node_modules/fast-uri/lib/utils.js
var require_utils = __commonJS({
    "../../node_modules/fast-uri/lib/utils.js" (exports, module) {
        "use strict";
        var { HEX } = require_scopedChars();
        var IPV4_REG = /^(?:(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)$/u;
        function normalizeIPv4(host) {
            if (findToken(host, ".") < 3) {
                return {
                    host,
                    isIPV4: false
                };
            }
            const matches = host.match(IPV4_REG) || [];
            const [address] = matches;
            if (address) {
                return {
                    host: stripLeadingZeros(address, "."),
                    isIPV4: true
                };
            } else {
                return {
                    host,
                    isIPV4: false
                };
            }
        }
        function stringArrayToHexStripped(input, keepZero = false) {
            let acc = "";
            let strip = true;
            for (const c of input){
                if (HEX[c] === void 0) return void 0;
                if (c !== "0" && strip === true) strip = false;
                if (!strip) acc += c;
            }
            if (keepZero && acc.length === 0) acc = "0";
            return acc;
        }
        function getIPV6(input) {
            let tokenCount = 0;
            const output = {
                error: false,
                address: "",
                zone: ""
            };
            const address = [];
            const buffer = [];
            let isZone = false;
            let endipv6Encountered = false;
            let endIpv6 = false;
            function consume() {
                if (buffer.length) {
                    if (isZone === false) {
                        const hex = stringArrayToHexStripped(buffer);
                        if (hex !== void 0) {
                            address.push(hex);
                        } else {
                            output.error = true;
                            return false;
                        }
                    }
                    buffer.length = 0;
                }
                return true;
            }
            for(let i = 0; i < input.length; i++){
                const cursor = input[i];
                if (cursor === "[" || cursor === "]") {
                    continue;
                }
                if (cursor === ":") {
                    if (endipv6Encountered === true) {
                        endIpv6 = true;
                    }
                    if (!consume()) {
                        break;
                    }
                    tokenCount++;
                    address.push(":");
                    if (tokenCount > 7) {
                        output.error = true;
                        break;
                    }
                    if (i - 1 >= 0 && input[i - 1] === ":") {
                        endipv6Encountered = true;
                    }
                    continue;
                } else if (cursor === "%") {
                    if (!consume()) {
                        break;
                    }
                    isZone = true;
                } else {
                    buffer.push(cursor);
                    continue;
                }
            }
            if (buffer.length) {
                if (isZone) {
                    output.zone = buffer.join("");
                } else if (endIpv6) {
                    address.push(buffer.join(""));
                } else {
                    address.push(stringArrayToHexStripped(buffer));
                }
            }
            output.address = address.join("");
            return output;
        }
        function normalizeIPv6(host) {
            if (findToken(host, ":") < 2) {
                return {
                    host,
                    isIPV6: false
                };
            }
            const ipv6 = getIPV6(host);
            if (!ipv6.error) {
                let newHost = ipv6.address;
                let escapedHost = ipv6.address;
                if (ipv6.zone) {
                    newHost += "%" + ipv6.zone;
                    escapedHost += "%25" + ipv6.zone;
                }
                return {
                    host: newHost,
                    escapedHost,
                    isIPV6: true
                };
            } else {
                return {
                    host,
                    isIPV6: false
                };
            }
        }
        function stripLeadingZeros(str, token) {
            let out = "";
            let skip = true;
            const l = str.length;
            for(let i = 0; i < l; i++){
                const c = str[i];
                if (c === "0" && skip) {
                    if (i + 1 <= l && str[i + 1] === token || i + 1 === l) {
                        out += c;
                        skip = false;
                    }
                } else {
                    if (c === token) {
                        skip = true;
                    } else {
                        skip = false;
                    }
                    out += c;
                }
            }
            return out;
        }
        function findToken(str, token) {
            let ind = 0;
            for(let i = 0; i < str.length; i++){
                if (str[i] === token) ind++;
            }
            return ind;
        }
        var RDS1 = /^\.\.?\//u;
        var RDS2 = /^\/\.(?:\/|$)/u;
        var RDS3 = /^\/\.\.(?:\/|$)/u;
        var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/u;
        function removeDotSegments(input) {
            const output = [];
            while(input.length){
                if (input.match(RDS1)) {
                    input = input.replace(RDS1, "");
                } else if (input.match(RDS2)) {
                    input = input.replace(RDS2, "/");
                } else if (input.match(RDS3)) {
                    input = input.replace(RDS3, "/");
                    output.pop();
                } else if (input === "." || input === "..") {
                    input = "";
                } else {
                    const im = input.match(RDS5);
                    if (im) {
                        const s = im[0];
                        input = input.slice(s.length);
                        output.push(s);
                    } else {
                        throw new Error("Unexpected dot segment condition");
                    }
                }
            }
            return output.join("");
        }
        function normalizeComponentEncoding(components, esc) {
            const func = esc !== true ? escape : unescape;
            if (components.scheme !== void 0) {
                components.scheme = func(components.scheme);
            }
            if (components.userinfo !== void 0) {
                components.userinfo = func(components.userinfo);
            }
            if (components.host !== void 0) {
                components.host = func(components.host);
            }
            if (components.path !== void 0) {
                components.path = func(components.path);
            }
            if (components.query !== void 0) {
                components.query = func(components.query);
            }
            if (components.fragment !== void 0) {
                components.fragment = func(components.fragment);
            }
            return components;
        }
        function recomposeAuthority(components) {
            const uriTokens = [];
            if (components.userinfo !== void 0) {
                uriTokens.push(components.userinfo);
                uriTokens.push("@");
            }
            if (components.host !== void 0) {
                let host = unescape(components.host);
                const ipV4res = normalizeIPv4(host);
                if (ipV4res.isIPV4) {
                    host = ipV4res.host;
                } else {
                    const ipV6res = normalizeIPv6(ipV4res.host);
                    if (ipV6res.isIPV6 === true) {
                        host = `[${ipV6res.escapedHost}]`;
                    } else {
                        host = components.host;
                    }
                }
                uriTokens.push(host);
            }
            if (typeof components.port === "number" || typeof components.port === "string") {
                uriTokens.push(":");
                uriTokens.push(String(components.port));
            }
            return uriTokens.length ? uriTokens.join("") : void 0;
        }
        module.exports = {
            recomposeAuthority,
            normalizeComponentEncoding,
            removeDotSegments,
            normalizeIPv4,
            normalizeIPv6,
            stringArrayToHexStripped
        };
    }
});
// ../../node_modules/fast-uri/lib/schemes.js
var require_schemes = __commonJS({
    "../../node_modules/fast-uri/lib/schemes.js" (exports, module) {
        "use strict";
        var UUID_REG = /^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}$/iu;
        var URN_REG = /([\da-z][\d\-a-z]{0,31}):((?:[\w!$'()*+,\-.:;=@]|%[\da-f]{2})+)/iu;
        function isSecure(wsComponents) {
            return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
        }
        function httpParse(components) {
            if (!components.host) {
                components.error = components.error || "HTTP URIs must have a host.";
            }
            return components;
        }
        function httpSerialize(components) {
            const secure = String(components.scheme).toLowerCase() === "https";
            if (components.port === (secure ? 443 : 80) || components.port === "") {
                components.port = void 0;
            }
            if (!components.path) {
                components.path = "/";
            }
            return components;
        }
        function wsParse(wsComponents) {
            wsComponents.secure = isSecure(wsComponents);
            wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
            wsComponents.path = void 0;
            wsComponents.query = void 0;
            return wsComponents;
        }
        function wsSerialize(wsComponents) {
            if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
                wsComponents.port = void 0;
            }
            if (typeof wsComponents.secure === "boolean") {
                wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
                wsComponents.secure = void 0;
            }
            if (wsComponents.resourceName) {
                const [path5, query] = wsComponents.resourceName.split("?");
                wsComponents.path = path5 && path5 !== "/" ? path5 : void 0;
                wsComponents.query = query;
                wsComponents.resourceName = void 0;
            }
            wsComponents.fragment = void 0;
            return wsComponents;
        }
        function urnParse(urnComponents, options) {
            if (!urnComponents.path) {
                urnComponents.error = "URN can not be parsed";
                return urnComponents;
            }
            const matches = urnComponents.path.match(URN_REG);
            if (matches) {
                const scheme = options.scheme || urnComponents.scheme || "urn";
                urnComponents.nid = matches[1].toLowerCase();
                urnComponents.nss = matches[2];
                const urnScheme = `${scheme}:${options.nid || urnComponents.nid}`;
                const schemeHandler = SCHEMES[urnScheme];
                urnComponents.path = void 0;
                if (schemeHandler) {
                    urnComponents = schemeHandler.parse(urnComponents, options);
                }
            } else {
                urnComponents.error = urnComponents.error || "URN can not be parsed.";
            }
            return urnComponents;
        }
        function urnSerialize(urnComponents, options) {
            const scheme = options.scheme || urnComponents.scheme || "urn";
            const nid = urnComponents.nid.toLowerCase();
            const urnScheme = `${scheme}:${options.nid || nid}`;
            const schemeHandler = SCHEMES[urnScheme];
            if (schemeHandler) {
                urnComponents = schemeHandler.serialize(urnComponents, options);
            }
            const uriComponents = urnComponents;
            const nss = urnComponents.nss;
            uriComponents.path = `${nid || options.nid}:${nss}`;
            options.skipEscape = true;
            return uriComponents;
        }
        function urnuuidParse(urnComponents, options) {
            const uuidComponents = urnComponents;
            uuidComponents.uuid = uuidComponents.nss;
            uuidComponents.nss = void 0;
            if (!options.tolerant && (!uuidComponents.uuid || !UUID_REG.test(uuidComponents.uuid))) {
                uuidComponents.error = uuidComponents.error || "UUID is not valid.";
            }
            return uuidComponents;
        }
        function urnuuidSerialize(uuidComponents) {
            const urnComponents = uuidComponents;
            urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
            return urnComponents;
        }
        var http = {
            scheme: "http",
            domainHost: true,
            parse: httpParse,
            serialize: httpSerialize
        };
        var https = {
            scheme: "https",
            domainHost: http.domainHost,
            parse: httpParse,
            serialize: httpSerialize
        };
        var ws = {
            scheme: "ws",
            domainHost: true,
            parse: wsParse,
            serialize: wsSerialize
        };
        var wss = {
            scheme: "wss",
            domainHost: ws.domainHost,
            parse: ws.parse,
            serialize: ws.serialize
        };
        var urn = {
            scheme: "urn",
            parse: urnParse,
            serialize: urnSerialize,
            skipNormalize: true
        };
        var urnuuid = {
            scheme: "urn:uuid",
            parse: urnuuidParse,
            serialize: urnuuidSerialize,
            skipNormalize: true
        };
        var SCHEMES = {
            http,
            https,
            ws,
            wss,
            urn,
            "urn:uuid": urnuuid
        };
        module.exports = SCHEMES;
    }
});
// ../../node_modules/fast-uri/index.js
var require_fast_uri = __commonJS({
    "../../node_modules/fast-uri/index.js" (exports, module) {
        "use strict";
        var { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = require_utils();
        var SCHEMES = require_schemes();
        function normalize(uri, options) {
            if (typeof uri === "string") {
                uri = serialize(parse7(uri, options), options);
            } else if (typeof uri === "object") {
                uri = parse7(serialize(uri, options), options);
            }
            return uri;
        }
        function resolve2(baseURI, relativeURI, options) {
            const schemelessOptions = Object.assign({
                scheme: "null"
            }, options);
            const resolved = resolveComponents(parse7(baseURI, schemelessOptions), parse7(relativeURI, schemelessOptions), schemelessOptions, true);
            return serialize(resolved, {
                ...schemelessOptions,
                skipEscape: true
            });
        }
        function resolveComponents(base, relative, options, skipNormalization) {
            const target = {};
            if (!skipNormalization) {
                base = parse7(serialize(base, options), options);
                relative = parse7(serialize(relative, options), options);
            }
            options = options || {};
            if (!options.tolerant && relative.scheme) {
                target.scheme = relative.scheme;
                target.userinfo = relative.userinfo;
                target.host = relative.host;
                target.port = relative.port;
                target.path = removeDotSegments(relative.path || "");
                target.query = relative.query;
            } else {
                if (relative.userinfo !== void 0 || relative.host !== void 0 || relative.port !== void 0) {
                    target.userinfo = relative.userinfo;
                    target.host = relative.host;
                    target.port = relative.port;
                    target.path = removeDotSegments(relative.path || "");
                    target.query = relative.query;
                } else {
                    if (!relative.path) {
                        target.path = base.path;
                        if (relative.query !== void 0) {
                            target.query = relative.query;
                        } else {
                            target.query = base.query;
                        }
                    } else {
                        if (relative.path.charAt(0) === "/") {
                            target.path = removeDotSegments(relative.path);
                        } else {
                            if ((base.userinfo !== void 0 || base.host !== void 0 || base.port !== void 0) && !base.path) {
                                target.path = "/" + relative.path;
                            } else if (!base.path) {
                                target.path = relative.path;
                            } else {
                                target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
                            }
                            target.path = removeDotSegments(target.path);
                        }
                        target.query = relative.query;
                    }
                    target.userinfo = base.userinfo;
                    target.host = base.host;
                    target.port = base.port;
                }
                target.scheme = base.scheme;
            }
            target.fragment = relative.fragment;
            return target;
        }
        function equal(uriA, uriB, options) {
            if (typeof uriA === "string") {
                uriA = unescape(uriA);
                uriA = serialize(normalizeComponentEncoding(parse7(uriA, options), true), {
                    ...options,
                    skipEscape: true
                });
            } else if (typeof uriA === "object") {
                uriA = serialize(normalizeComponentEncoding(uriA, true), {
                    ...options,
                    skipEscape: true
                });
            }
            if (typeof uriB === "string") {
                uriB = unescape(uriB);
                uriB = serialize(normalizeComponentEncoding(parse7(uriB, options), true), {
                    ...options,
                    skipEscape: true
                });
            } else if (typeof uriB === "object") {
                uriB = serialize(normalizeComponentEncoding(uriB, true), {
                    ...options,
                    skipEscape: true
                });
            }
            return uriA.toLowerCase() === uriB.toLowerCase();
        }
        function serialize(cmpts, opts) {
            const components = {
                host: cmpts.host,
                scheme: cmpts.scheme,
                userinfo: cmpts.userinfo,
                port: cmpts.port,
                path: cmpts.path,
                query: cmpts.query,
                nid: cmpts.nid,
                nss: cmpts.nss,
                uuid: cmpts.uuid,
                fragment: cmpts.fragment,
                reference: cmpts.reference,
                resourceName: cmpts.resourceName,
                secure: cmpts.secure,
                error: ""
            };
            const options = Object.assign({}, opts);
            const uriTokens = [];
            const schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
            if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
            if (components.path !== void 0) {
                if (!options.skipEscape) {
                    components.path = escape(components.path);
                    if (components.scheme !== void 0) {
                        components.path = components.path.split("%3A").join(":");
                    }
                } else {
                    components.path = unescape(components.path);
                }
            }
            if (options.reference !== "suffix" && components.scheme) {
                uriTokens.push(components.scheme, ":");
            }
            const authority = recomposeAuthority(components);
            if (authority !== void 0) {
                if (options.reference !== "suffix") {
                    uriTokens.push("//");
                }
                uriTokens.push(authority);
                if (components.path && components.path.charAt(0) !== "/") {
                    uriTokens.push("/");
                }
            }
            if (components.path !== void 0) {
                let s = components.path;
                if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
                    s = removeDotSegments(s);
                }
                if (authority === void 0) {
                    s = s.replace(/^\/\//u, "/%2F");
                }
                uriTokens.push(s);
            }
            if (components.query !== void 0) {
                uriTokens.push("?", components.query);
            }
            if (components.fragment !== void 0) {
                uriTokens.push("#", components.fragment);
            }
            return uriTokens.join("");
        }
        var hexLookUp = Array.from({
            length: 127
        }, (_v, k)=>/[^!"$&'()*+,\-.;=_`a-z{}~]/u.test(String.fromCharCode(k)));
        function nonSimpleDomain(value1) {
            let code = 0;
            for(let i = 0, len = value1.length; i < len; ++i){
                code = value1.charCodeAt(i);
                if (code > 126 || hexLookUp[code]) {
                    return true;
                }
            }
            return false;
        }
        var URI_PARSE = /^(?:([^#/:?]+):)?(?:\/\/((?:([^#/?@]*)@)?(\[[^#/?\]]+\]|[^#/:?]*)(?::(\d*))?))?([^#?]*)(?:\?([^#]*))?(?:#((?:.|[\n\r])*))?/u;
        function parse7(uri, opts) {
            const options = Object.assign({}, opts);
            const parsed = {
                scheme: void 0,
                userinfo: void 0,
                host: "",
                port: void 0,
                path: "",
                query: void 0,
                fragment: void 0
            };
            const gotEncoding = uri.indexOf("%") !== -1;
            let isIP = false;
            if (options.reference === "suffix") uri = (options.scheme ? options.scheme + ":" : "") + "//" + uri;
            const matches = uri.match(URI_PARSE);
            if (matches) {
                parsed.scheme = matches[1];
                parsed.userinfo = matches[3];
                parsed.host = matches[4];
                parsed.port = parseInt(matches[5], 10);
                parsed.path = matches[6] || "";
                parsed.query = matches[7];
                parsed.fragment = matches[8];
                if (isNaN(parsed.port)) {
                    parsed.port = matches[5];
                }
                if (parsed.host) {
                    const ipv4result = normalizeIPv4(parsed.host);
                    if (ipv4result.isIPV4 === false) {
                        const ipv6result = normalizeIPv6(ipv4result.host);
                        parsed.host = ipv6result.host.toLowerCase();
                        isIP = ipv6result.isIPV6;
                    } else {
                        parsed.host = ipv4result.host;
                        isIP = true;
                    }
                }
                if (parsed.scheme === void 0 && parsed.userinfo === void 0 && parsed.host === void 0 && parsed.port === void 0 && parsed.query === void 0 && !parsed.path) {
                    parsed.reference = "same-document";
                } else if (parsed.scheme === void 0) {
                    parsed.reference = "relative";
                } else if (parsed.fragment === void 0) {
                    parsed.reference = "absolute";
                } else {
                    parsed.reference = "uri";
                }
                if (options.reference && options.reference !== "suffix" && options.reference !== parsed.reference) {
                    parsed.error = parsed.error || "URI is not a " + options.reference + " reference.";
                }
                const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || "").toLowerCase()];
                if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
                    if (parsed.host && (options.domainHost || schemeHandler && schemeHandler.domainHost) && isIP === false && nonSimpleDomain(parsed.host)) {
                        try {
                            parsed.host = URL.domainToASCII(parsed.host.toLowerCase());
                        } catch (e) {
                            parsed.error = parsed.error || "Host's domain name can not be converted to ASCII: " + e;
                        }
                    }
                }
                if (!schemeHandler || schemeHandler && !schemeHandler.skipNormalize) {
                    if (gotEncoding && parsed.scheme !== void 0) {
                        parsed.scheme = unescape(parsed.scheme);
                    }
                    if (gotEncoding && parsed.host !== void 0) {
                        parsed.host = unescape(parsed.host);
                    }
                    if (parsed.path) {
                        parsed.path = escape(unescape(parsed.path));
                    }
                    if (parsed.fragment) {
                        parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment));
                    }
                }
                if (schemeHandler && schemeHandler.parse) {
                    schemeHandler.parse(parsed, options);
                }
            } else {
                parsed.error = parsed.error || "URI can not be parsed.";
            }
            return parsed;
        }
        var fastUri = {
            SCHEMES,
            normalize,
            resolve: resolve2,
            resolveComponents,
            equal,
            serialize,
            parse: parse7
        };
        module.exports = fastUri;
        module.exports.default = fastUri;
        module.exports.fastUri = fastUri;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/runtime/uri.js
var require_uri = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/runtime/uri.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var uri = require_fast_uri();
        uri.code = 'require("ajv/dist/runtime/uri").default';
        exports.default = uri;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/core.js
var require_core = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/core.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
        var validate_1 = require_validate();
        Object.defineProperty(exports, "KeywordCxt", {
            enumerable: true,
            get: function() {
                return validate_1.KeywordCxt;
            }
        });
        var codegen_1 = require_codegen();
        Object.defineProperty(exports, "_", {
            enumerable: true,
            get: function() {
                return codegen_1._;
            }
        });
        Object.defineProperty(exports, "str", {
            enumerable: true,
            get: function() {
                return codegen_1.str;
            }
        });
        Object.defineProperty(exports, "stringify", {
            enumerable: true,
            get: function() {
                return codegen_1.stringify;
            }
        });
        Object.defineProperty(exports, "nil", {
            enumerable: true,
            get: function() {
                return codegen_1.nil;
            }
        });
        Object.defineProperty(exports, "Name", {
            enumerable: true,
            get: function() {
                return codegen_1.Name;
            }
        });
        Object.defineProperty(exports, "CodeGen", {
            enumerable: true,
            get: function() {
                return codegen_1.CodeGen;
            }
        });
        var validation_error_1 = require_validation_error();
        var ref_error_1 = require_ref_error();
        var rules_1 = require_rules();
        var compile_1 = require_compile();
        var codegen_2 = require_codegen();
        var resolve_1 = require_resolve();
        var dataType_1 = require_dataType();
        var util_1 = require_util();
        var $dataRefSchema = require_data();
        var uri_1 = require_uri();
        var defaultRegExp = (str, flags)=>new RegExp(str, flags);
        defaultRegExp.code = "new RegExp";
        var META_IGNORE_OPTIONS = [
            "removeAdditional",
            "useDefaults",
            "coerceTypes"
        ];
        var EXT_SCOPE_NAMES = /* @__PURE__ */ new Set([
            "validate",
            "serialize",
            "parse",
            "wrapper",
            "root",
            "schema",
            "keyword",
            "pattern",
            "formats",
            "validate$data",
            "func",
            "obj",
            "Error"
        ]);
        var removedOptions = {
            errorDataPath: "",
            format: "`validateFormats: false` can be used instead.",
            nullable: '"nullable" keyword is supported by default.',
            jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
            extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
            missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
            processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
            sourceCode: "Use option `code: {source: true}`",
            strictDefaults: "It is default now, see option `strict`.",
            strictKeywords: "It is default now, see option `strict`.",
            uniqueItems: '"uniqueItems" keyword is always validated.',
            unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
            cache: "Map is used as cache, schema object as key.",
            serialize: "Map is used as cache, schema object as key.",
            ajvErrors: "It is default now."
        };
        var deprecatedOptions = {
            ignoreKeywordsWithRef: "",
            jsPropertySyntax: "",
            unicode: '"minLength"/"maxLength" account for unicode characters by default.'
        };
        var MAX_EXPRESSION = 200;
        function requiredOptions(o) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
            const s = o.strict;
            const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
            const optimize = _optz === true || _optz === void 0 ? 1 : _optz || 0;
            const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
            const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
            return {
                strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
                strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
                strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
                strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
                strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
                code: o.code ? {
                    ...o.code,
                    optimize,
                    regExp
                } : {
                    optimize,
                    regExp
                },
                loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
                loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
                meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
                messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
                inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
                schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
                addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
                validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
                validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
                unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
                int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
                uriResolver
            };
        }
        var Ajv2 = class {
            _addVocabularies() {
                this.addKeyword("$async");
            }
            _addDefaultMetaSchema() {
                const { $data, meta, schemaId } = this.opts;
                let _dataRefSchema = $dataRefSchema;
                if (schemaId === "id") {
                    _dataRefSchema = {
                        ...$dataRefSchema
                    };
                    _dataRefSchema.id = _dataRefSchema.$id;
                    delete _dataRefSchema.$id;
                }
                if (meta && $data) this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
            }
            defaultMeta() {
                const { meta, schemaId } = this.opts;
                return this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : void 0;
            }
            validate(schemaKeyRef, data) {
                let v;
                if (typeof schemaKeyRef == "string") {
                    v = this.getSchema(schemaKeyRef);
                    if (!v) throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
                } else {
                    v = this.compile(schemaKeyRef);
                }
                const valid = v(data);
                if (!("$async" in v)) this.errors = v.errors;
                return valid;
            }
            compile(schema4, _meta) {
                const sch = this._addSchema(schema4, _meta);
                return sch.validate || this._compileSchemaEnv(sch);
            }
            compileAsync(schema4, meta) {
                if (typeof this.opts.loadSchema != "function") {
                    throw new Error("options.loadSchema should be a function");
                }
                const { loadSchema } = this.opts;
                return runCompileAsync.call(this, schema4, meta);
                async function runCompileAsync(_schema, _meta) {
                    await loadMetaSchema.call(this, _schema.$schema);
                    const sch = this._addSchema(_schema, _meta);
                    return sch.validate || _compileAsync.call(this, sch);
                }
                async function loadMetaSchema($ref) {
                    if ($ref && !this.getSchema($ref)) {
                        await runCompileAsync.call(this, {
                            $ref
                        }, true);
                    }
                }
                async function _compileAsync(sch) {
                    try {
                        return this._compileSchemaEnv(sch);
                    } catch (e) {
                        if (!(e instanceof ref_error_1.default)) throw e;
                        checkLoaded.call(this, e);
                        await loadMissingSchema.call(this, e.missingSchema);
                        return _compileAsync.call(this, sch);
                    }
                }
                function checkLoaded({ missingSchema: ref, missingRef }) {
                    if (this.refs[ref]) {
                        throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
                    }
                }
                async function loadMissingSchema(ref) {
                    const _schema = await _loadSchema.call(this, ref);
                    if (!this.refs[ref]) await loadMetaSchema.call(this, _schema.$schema);
                    if (!this.refs[ref]) this.addSchema(_schema, ref, meta);
                }
                async function _loadSchema(ref) {
                    const p = this._loading[ref];
                    if (p) return p;
                    try {
                        return await (this._loading[ref] = loadSchema(ref));
                    } finally{
                        delete this._loading[ref];
                    }
                }
            }
            // Adds schema to the instance
            addSchema(schema4, key, _meta, _validateSchema = this.opts.validateSchema) {
                if (Array.isArray(schema4)) {
                    for (const sch of schema4)this.addSchema(sch, void 0, _meta, _validateSchema);
                    return this;
                }
                let id;
                if (typeof schema4 === "object") {
                    const { schemaId } = this.opts;
                    id = schema4[schemaId];
                    if (id !== void 0 && typeof id != "string") {
                        throw new Error(`schema ${schemaId} must be string`);
                    }
                }
                key = (0, resolve_1.normalizeId)(key || id);
                this._checkUnique(key);
                this.schemas[key] = this._addSchema(schema4, _meta, key, _validateSchema, true);
                return this;
            }
            // Add schema that will be used to validate other schemas
            // options in META_IGNORE_OPTIONS are alway set to false
            addMetaSchema(schema4, key, _validateSchema = this.opts.validateSchema) {
                this.addSchema(schema4, key, true, _validateSchema);
                return this;
            }
            //  Validate schema against its meta-schema
            validateSchema(schema4, throwOrLogError) {
                if (typeof schema4 == "boolean") return true;
                let $schema;
                $schema = schema4.$schema;
                if ($schema !== void 0 && typeof $schema != "string") {
                    throw new Error("$schema must be a string");
                }
                $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
                if (!$schema) {
                    this.logger.warn("meta-schema not available");
                    this.errors = null;
                    return true;
                }
                const valid = this.validate($schema, schema4);
                if (!valid && throwOrLogError) {
                    const message = "schema is invalid: " + this.errorsText();
                    if (this.opts.validateSchema === "log") this.logger.error(message);
                    else throw new Error(message);
                }
                return valid;
            }
            // Get compiled schema by `key` or `ref`.
            // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
            getSchema(keyRef) {
                let sch;
                while(typeof (sch = getSchEnv.call(this, keyRef)) == "string")keyRef = sch;
                if (sch === void 0) {
                    const { schemaId } = this.opts;
                    const root = new compile_1.SchemaEnv({
                        schema: {},
                        schemaId
                    });
                    sch = compile_1.resolveSchema.call(this, root, keyRef);
                    if (!sch) return;
                    this.refs[keyRef] = sch;
                }
                return sch.validate || this._compileSchemaEnv(sch);
            }
            // Remove cached schema(s).
            // If no parameter is passed all schemas but meta-schemas are removed.
            // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
            // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
            removeSchema(schemaKeyRef) {
                if (schemaKeyRef instanceof RegExp) {
                    this._removeAllSchemas(this.schemas, schemaKeyRef);
                    this._removeAllSchemas(this.refs, schemaKeyRef);
                    return this;
                }
                switch(typeof schemaKeyRef){
                    case "undefined":
                        this._removeAllSchemas(this.schemas);
                        this._removeAllSchemas(this.refs);
                        this._cache.clear();
                        return this;
                    case "string":
                        {
                            const sch = getSchEnv.call(this, schemaKeyRef);
                            if (typeof sch == "object") this._cache.delete(sch.schema);
                            delete this.schemas[schemaKeyRef];
                            delete this.refs[schemaKeyRef];
                            return this;
                        }
                    case "object":
                        {
                            const cacheKey = schemaKeyRef;
                            this._cache.delete(cacheKey);
                            let id = schemaKeyRef[this.opts.schemaId];
                            if (id) {
                                id = (0, resolve_1.normalizeId)(id);
                                delete this.schemas[id];
                                delete this.refs[id];
                            }
                            return this;
                        }
                    default:
                        throw new Error("ajv.removeSchema: invalid parameter");
                }
            }
            // add "vocabulary" - a collection of keywords
            addVocabulary(definitions) {
                for (const def of definitions)this.addKeyword(def);
                return this;
            }
            addKeyword(kwdOrDef, def) {
                let keyword;
                if (typeof kwdOrDef == "string") {
                    keyword = kwdOrDef;
                    if (typeof def == "object") {
                        this.logger.warn("these parameters are deprecated, see docs for addKeyword");
                        def.keyword = keyword;
                    }
                } else if (typeof kwdOrDef == "object" && def === void 0) {
                    def = kwdOrDef;
                    keyword = def.keyword;
                    if (Array.isArray(keyword) && !keyword.length) {
                        throw new Error("addKeywords: keyword must be string or non-empty array");
                    }
                } else {
                    throw new Error("invalid addKeywords parameters");
                }
                checkKeyword.call(this, keyword, def);
                if (!def) {
                    (0, util_1.eachItem)(keyword, (kwd)=>addRule.call(this, kwd));
                    return this;
                }
                keywordMetaschema.call(this, def);
                const definition = {
                    ...def,
                    type: (0, dataType_1.getJSONTypes)(def.type),
                    schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)
                };
                (0, util_1.eachItem)(keyword, definition.type.length === 0 ? (k)=>addRule.call(this, k, definition) : (k)=>definition.type.forEach((t1)=>addRule.call(this, k, definition, t1)));
                return this;
            }
            getKeyword(keyword) {
                const rule = this.RULES.all[keyword];
                return typeof rule == "object" ? rule.definition : !!rule;
            }
            // Remove keyword
            removeKeyword(keyword) {
                const { RULES } = this;
                delete RULES.keywords[keyword];
                delete RULES.all[keyword];
                for (const group of RULES.rules){
                    const i = group.rules.findIndex((rule)=>rule.keyword === keyword);
                    if (i >= 0) group.rules.splice(i, 1);
                }
                return this;
            }
            // Add format
            addFormat(name, format5) {
                if (typeof format5 == "string") format5 = new RegExp(format5);
                this.formats[name] = format5;
                return this;
            }
            errorsText(errors = this.errors, { separator = ", ", dataVar = "data" } = {}) {
                if (!errors || errors.length === 0) return "No errors";
                return errors.map((e)=>`${dataVar}${e.instancePath} ${e.message}`).reduce((text, msg)=>text + separator + msg);
            }
            $dataMetaSchema(metaSchema, keywordsJsonPointers) {
                const rules = this.RULES.all;
                metaSchema = JSON.parse(JSON.stringify(metaSchema));
                for (const jsonPointer of keywordsJsonPointers){
                    const segments = jsonPointer.split("/").slice(1);
                    let keywords = metaSchema;
                    for (const seg of segments)keywords = keywords[seg];
                    for(const key in rules){
                        const rule = rules[key];
                        if (typeof rule != "object") continue;
                        const { $data } = rule.definition;
                        const schema4 = keywords[key];
                        if ($data && schema4) keywords[key] = schemaOrData(schema4);
                    }
                }
                return metaSchema;
            }
            _removeAllSchemas(schemas2, regex) {
                for(const keyRef in schemas2){
                    const sch = schemas2[keyRef];
                    if (!regex || regex.test(keyRef)) {
                        if (typeof sch == "string") {
                            delete schemas2[keyRef];
                        } else if (sch && !sch.meta) {
                            this._cache.delete(sch.schema);
                            delete schemas2[keyRef];
                        }
                    }
                }
            }
            _addSchema(schema4, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
                let id;
                const { schemaId } = this.opts;
                if (typeof schema4 == "object") {
                    id = schema4[schemaId];
                } else {
                    if (this.opts.jtd) throw new Error("schema must be object");
                    else if (typeof schema4 != "boolean") throw new Error("schema must be object or boolean");
                }
                let sch = this._cache.get(schema4);
                if (sch !== void 0) return sch;
                baseId = (0, resolve_1.normalizeId)(id || baseId);
                const localRefs = resolve_1.getSchemaRefs.call(this, schema4, baseId);
                sch = new compile_1.SchemaEnv({
                    schema: schema4,
                    schemaId,
                    meta,
                    baseId,
                    localRefs
                });
                this._cache.set(sch.schema, sch);
                if (addSchema && !baseId.startsWith("#")) {
                    if (baseId) this._checkUnique(baseId);
                    this.refs[baseId] = sch;
                }
                if (validateSchema) this.validateSchema(schema4, true);
                return sch;
            }
            _checkUnique(id) {
                if (this.schemas[id] || this.refs[id]) {
                    throw new Error(`schema with key or id "${id}" already exists`);
                }
            }
            _compileSchemaEnv(sch) {
                if (sch.meta) this._compileMetaSchema(sch);
                else compile_1.compileSchema.call(this, sch);
                if (!sch.validate) throw new Error("ajv implementation error");
                return sch.validate;
            }
            _compileMetaSchema(sch) {
                const currentOpts = this.opts;
                this.opts = this._metaOpts;
                try {
                    compile_1.compileSchema.call(this, sch);
                } finally{
                    this.opts = currentOpts;
                }
            }
            constructor(opts = {}){
                this.schemas = {};
                this.refs = {};
                this.formats = {};
                this._compilations = /* @__PURE__ */ new Set();
                this._loading = {};
                this._cache = /* @__PURE__ */ new Map();
                opts = this.opts = {
                    ...opts,
                    ...requiredOptions(opts)
                };
                const { es5, lines } = this.opts.code;
                this.scope = new codegen_2.ValueScope({
                    scope: {},
                    prefixes: EXT_SCOPE_NAMES,
                    es5,
                    lines
                });
                this.logger = getLogger(opts.logger);
                const formatOpt = opts.validateFormats;
                opts.validateFormats = false;
                this.RULES = (0, rules_1.getRules)();
                checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
                checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
                this._metaOpts = getMetaSchemaOptions.call(this);
                if (opts.formats) addInitialFormats.call(this);
                this._addVocabularies();
                this._addDefaultMetaSchema();
                if (opts.keywords) addInitialKeywords.call(this, opts.keywords);
                if (typeof opts.meta == "object") this.addMetaSchema(opts.meta);
                addInitialSchemas.call(this);
                opts.validateFormats = formatOpt;
            }
        };
        Ajv2.ValidationError = validation_error_1.default;
        Ajv2.MissingRefError = ref_error_1.default;
        exports.default = Ajv2;
        function checkOptions(checkOpts, options, msg, log = "error") {
            for(const key in checkOpts){
                const opt = key;
                if (opt in options) this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
            }
        }
        function getSchEnv(keyRef) {
            keyRef = (0, resolve_1.normalizeId)(keyRef);
            return this.schemas[keyRef] || this.refs[keyRef];
        }
        function addInitialSchemas() {
            const optsSchemas = this.opts.schemas;
            if (!optsSchemas) return;
            if (Array.isArray(optsSchemas)) this.addSchema(optsSchemas);
            else for(const key in optsSchemas)this.addSchema(optsSchemas[key], key);
        }
        function addInitialFormats() {
            for(const name in this.opts.formats){
                const format5 = this.opts.formats[name];
                if (format5) this.addFormat(name, format5);
            }
        }
        function addInitialKeywords(defs) {
            if (Array.isArray(defs)) {
                this.addVocabulary(defs);
                return;
            }
            this.logger.warn("keywords option as map is deprecated, pass array");
            for(const keyword in defs){
                const def = defs[keyword];
                if (!def.keyword) def.keyword = keyword;
                this.addKeyword(def);
            }
        }
        function getMetaSchemaOptions() {
            const metaOpts = {
                ...this.opts
            };
            for (const opt of META_IGNORE_OPTIONS)delete metaOpts[opt];
            return metaOpts;
        }
        var noLogs = {
            log () {},
            warn () {},
            error () {}
        };
        function getLogger(logger) {
            if (logger === false) return noLogs;
            if (logger === void 0) return console;
            if (logger.log && logger.warn && logger.error) return logger;
            throw new Error("logger must implement log, warn and error methods");
        }
        var KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
        function checkKeyword(keyword, def) {
            const { RULES } = this;
            (0, util_1.eachItem)(keyword, (kwd)=>{
                if (RULES.keywords[kwd]) throw new Error(`Keyword ${kwd} is already defined`);
                if (!KEYWORD_NAME.test(kwd)) throw new Error(`Keyword ${kwd} has invalid name`);
            });
            if (!def) return;
            if (def.$data && !("code" in def || "validate" in def)) {
                throw new Error('$data keyword must have "code" or "validate" function');
            }
        }
        function addRule(keyword, definition, dataType) {
            var _a;
            const post = definition === null || definition === void 0 ? void 0 : definition.post;
            if (dataType && post) throw new Error('keyword with "post" flag cannot have "type"');
            const { RULES } = this;
            let ruleGroup = post ? RULES.post : RULES.rules.find(({ type: t1 })=>t1 === dataType);
            if (!ruleGroup) {
                ruleGroup = {
                    type: dataType,
                    rules: []
                };
                RULES.rules.push(ruleGroup);
            }
            RULES.keywords[keyword] = true;
            if (!definition) return;
            const rule = {
                keyword,
                definition: {
                    ...definition,
                    type: (0, dataType_1.getJSONTypes)(definition.type),
                    schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)
                }
            };
            if (definition.before) addBeforeRule.call(this, ruleGroup, rule, definition.before);
            else ruleGroup.rules.push(rule);
            RULES.all[keyword] = rule;
            (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach((kwd)=>this.addKeyword(kwd));
        }
        function addBeforeRule(ruleGroup, rule, before) {
            const i = ruleGroup.rules.findIndex((_rule)=>_rule.keyword === before);
            if (i >= 0) {
                ruleGroup.rules.splice(i, 0, rule);
            } else {
                ruleGroup.rules.push(rule);
                this.logger.warn(`rule ${before} is not defined`);
            }
        }
        function keywordMetaschema(def) {
            let { metaSchema } = def;
            if (metaSchema === void 0) return;
            if (def.$data && this.opts.$data) metaSchema = schemaOrData(metaSchema);
            def.validateSchema = this.compile(metaSchema, true);
        }
        var $dataRef = {
            $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
        };
        function schemaOrData(schema4) {
            return {
                anyOf: [
                    schema4,
                    $dataRef
                ]
            };
        }
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/core/id.js
var require_id = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/core/id.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var def = {
            keyword: "id",
            code () {
                throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/core/ref.js
var require_ref = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/core/ref.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.callRef = exports.getValidate = void 0;
        var ref_error_1 = require_ref_error();
        var code_1 = require_code2();
        var codegen_1 = require_codegen();
        var names_1 = require_names();
        var compile_1 = require_compile();
        var util_1 = require_util();
        var def = {
            keyword: "$ref",
            schemaType: "string",
            code (cxt) {
                const { gen, schema: $ref, it } = cxt;
                const { baseId, schemaEnv: env, validateName, opts, self: self2 } = it;
                const { root } = env;
                if (($ref === "#" || $ref === "#/") && baseId === root.baseId) return callRootRef();
                const schOrEnv = compile_1.resolveRef.call(self2, root, baseId, $ref);
                if (schOrEnv === void 0) throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
                if (schOrEnv instanceof compile_1.SchemaEnv) return callValidate(schOrEnv);
                return inlineRefSchema(schOrEnv);
                function callRootRef() {
                    if (env === root) return callRef(cxt, validateName, env, env.$async);
                    const rootName = gen.scopeValue("root", {
                        ref: root
                    });
                    return callRef(cxt, (0, codegen_1._)`${rootName}.validate`, root, root.$async);
                }
                function callValidate(sch) {
                    const v = getValidate(cxt, sch);
                    callRef(cxt, v, sch, sch.$async);
                }
                function inlineRefSchema(sch) {
                    const schName = gen.scopeValue("schema", opts.code.source === true ? {
                        ref: sch,
                        code: (0, codegen_1.stringify)(sch)
                    } : {
                        ref: sch
                    });
                    const valid = gen.name("valid");
                    const schCxt = cxt.subschema({
                        schema: sch,
                        dataTypes: [],
                        schemaPath: codegen_1.nil,
                        topSchemaRef: schName,
                        errSchemaPath: $ref
                    }, valid);
                    cxt.mergeEvaluated(schCxt);
                    cxt.ok(valid);
                }
            }
        };
        function getValidate(cxt, sch) {
            const { gen } = cxt;
            return sch.validate ? gen.scopeValue("validate", {
                ref: sch.validate
            }) : (0, codegen_1._)`${gen.scopeValue("wrapper", {
                ref: sch
            })}.validate`;
        }
        exports.getValidate = getValidate;
        function callRef(cxt, v, sch, $async) {
            const { gen, it } = cxt;
            const { allErrors, schemaEnv: env, opts } = it;
            const passCxt = opts.passContext ? names_1.default.this : codegen_1.nil;
            if ($async) callAsyncRef();
            else callSyncRef();
            function callAsyncRef() {
                if (!env.$async) throw new Error("async schema referenced by sync schema");
                const valid = gen.let("valid");
                gen.try(()=>{
                    gen.code((0, codegen_1._)`await ${(0, code_1.callValidateCode)(cxt, v, passCxt)}`);
                    addEvaluatedFrom(v);
                    if (!allErrors) gen.assign(valid, true);
                }, (e)=>{
                    gen.if((0, codegen_1._)`!(${e} instanceof ${it.ValidationError})`, ()=>gen.throw(e));
                    addErrorsFrom(e);
                    if (!allErrors) gen.assign(valid, false);
                });
                cxt.ok(valid);
            }
            function callSyncRef() {
                cxt.result((0, code_1.callValidateCode)(cxt, v, passCxt), ()=>addEvaluatedFrom(v), ()=>addErrorsFrom(v));
            }
            function addErrorsFrom(source) {
                const errs = (0, codegen_1._)`${source}.errors`;
                gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`);
                gen.assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
            }
            function addEvaluatedFrom(source) {
                var _a;
                if (!it.opts.unevaluated) return;
                const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
                if (it.props !== true) {
                    if (schEvaluated && !schEvaluated.dynamicProps) {
                        if (schEvaluated.props !== void 0) {
                            it.props = util_1.mergeEvaluated.props(gen, schEvaluated.props, it.props);
                        }
                    } else {
                        const props = gen.var("props", (0, codegen_1._)`${source}.evaluated.props`);
                        it.props = util_1.mergeEvaluated.props(gen, props, it.props, codegen_1.Name);
                    }
                }
                if (it.items !== true) {
                    if (schEvaluated && !schEvaluated.dynamicItems) {
                        if (schEvaluated.items !== void 0) {
                            it.items = util_1.mergeEvaluated.items(gen, schEvaluated.items, it.items);
                        }
                    } else {
                        const items = gen.var("items", (0, codegen_1._)`${source}.evaluated.items`);
                        it.items = util_1.mergeEvaluated.items(gen, items, it.items, codegen_1.Name);
                    }
                }
            }
        }
        exports.callRef = callRef;
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/core/index.js
var require_core2 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/core/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var id_1 = require_id();
        var ref_1 = require_ref();
        var core = [
            "$schema",
            "$id",
            "$defs",
            "$vocabulary",
            {
                keyword: "$comment"
            },
            "definitions",
            id_1.default,
            ref_1.default
        ];
        exports.default = core;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/limitNumber.js
var require_limitNumber = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/limitNumber.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var ops = codegen_1.operators;
        var KWDs = {
            maximum: {
                okStr: "<=",
                ok: ops.LTE,
                fail: ops.GT
            },
            minimum: {
                okStr: ">=",
                ok: ops.GTE,
                fail: ops.LT
            },
            exclusiveMaximum: {
                okStr: "<",
                ok: ops.LT,
                fail: ops.GTE
            },
            exclusiveMinimum: {
                okStr: ">",
                ok: ops.GT,
                fail: ops.LTE
            }
        };
        var error = {
            message: ({ keyword, schemaCode })=>(0, codegen_1.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,
            params: ({ keyword, schemaCode })=>(0, codegen_1._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
        };
        var def = {
            keyword: Object.keys(KWDs),
            type: "number",
            schemaType: "number",
            $data: true,
            error,
            code (cxt) {
                const { keyword, data, schemaCode } = cxt;
                cxt.fail$data((0, codegen_1._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/multipleOf.js
var require_multipleOf = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/multipleOf.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var error = {
            message: ({ schemaCode })=>(0, codegen_1.str)`must be multiple of ${schemaCode}`,
            params: ({ schemaCode })=>(0, codegen_1._)`{multipleOf: ${schemaCode}}`
        };
        var def = {
            keyword: "multipleOf",
            type: "number",
            schemaType: "number",
            $data: true,
            error,
            code (cxt) {
                const { gen, data, schemaCode, it } = cxt;
                const prec = it.opts.multipleOfPrecision;
                const res = gen.let("res");
                const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;
                cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/runtime/ucs2length.js
var require_ucs2length = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/runtime/ucs2length.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function ucs2length(str) {
            const len = str.length;
            let length = 0;
            let pos = 0;
            let value1;
            while(pos < len){
                length++;
                value1 = str.charCodeAt(pos++);
                if (value1 >= 55296 && value1 <= 56319 && pos < len) {
                    value1 = str.charCodeAt(pos);
                    if ((value1 & 64512) === 56320) pos++;
                }
            }
            return length;
        }
        exports.default = ucs2length;
        ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/limitLength.js
var require_limitLength = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/limitLength.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var ucs2length_1 = require_ucs2length();
        var error = {
            message ({ keyword, schemaCode }) {
                const comp = keyword === "maxLength" ? "more" : "fewer";
                return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;
            },
            params: ({ schemaCode })=>(0, codegen_1._)`{limit: ${schemaCode}}`
        };
        var def = {
            keyword: [
                "maxLength",
                "minLength"
            ],
            type: "string",
            schemaType: "number",
            $data: true,
            error,
            code (cxt) {
                const { keyword, data, schemaCode, it } = cxt;
                const op = keyword === "maxLength" ? codegen_1.operators.GT : codegen_1.operators.LT;
                const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
                cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/pattern.js
var require_pattern = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/pattern.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var code_1 = require_code2();
        var codegen_1 = require_codegen();
        var error = {
            message: ({ schemaCode })=>(0, codegen_1.str)`must match pattern "${schemaCode}"`,
            params: ({ schemaCode })=>(0, codegen_1._)`{pattern: ${schemaCode}}`
        };
        var def = {
            keyword: "pattern",
            type: "string",
            schemaType: "string",
            $data: true,
            error,
            code (cxt) {
                const { data, $data, schema: schema4, schemaCode, it } = cxt;
                const u = it.opts.unicodeRegExp ? "u" : "";
                const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema4);
                cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/limitProperties.js
var require_limitProperties = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/limitProperties.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var error = {
            message ({ keyword, schemaCode }) {
                const comp = keyword === "maxProperties" ? "more" : "fewer";
                return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} properties`;
            },
            params: ({ schemaCode })=>(0, codegen_1._)`{limit: ${schemaCode}}`
        };
        var def = {
            keyword: [
                "maxProperties",
                "minProperties"
            ],
            type: "object",
            schemaType: "number",
            $data: true,
            error,
            code (cxt) {
                const { keyword, data, schemaCode } = cxt;
                const op = keyword === "maxProperties" ? codegen_1.operators.GT : codegen_1.operators.LT;
                cxt.fail$data((0, codegen_1._)`Object.keys(${data}).length ${op} ${schemaCode}`);
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/required.js
var require_required = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/required.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var code_1 = require_code2();
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var error = {
            message: ({ params: { missingProperty } })=>(0, codegen_1.str)`must have required property '${missingProperty}'`,
            params: ({ params: { missingProperty } })=>(0, codegen_1._)`{missingProperty: ${missingProperty}}`
        };
        var def = {
            keyword: "required",
            type: "object",
            schemaType: "array",
            $data: true,
            error,
            code (cxt) {
                const { gen, schema: schema4, schemaCode, data, $data, it } = cxt;
                const { opts } = it;
                if (!$data && schema4.length === 0) return;
                const useLoop = schema4.length >= opts.loopRequired;
                if (it.allErrors) allErrorsMode();
                else exitOnErrorMode();
                if (opts.strictRequired) {
                    const props = cxt.parentSchema.properties;
                    const { definedProperties } = cxt.it;
                    for (const requiredKey of schema4){
                        if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === void 0 && !definedProperties.has(requiredKey)) {
                            const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
                            const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
                            (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);
                        }
                    }
                }
                function allErrorsMode() {
                    if (useLoop || $data) {
                        cxt.block$data(codegen_1.nil, loopAllRequired);
                    } else {
                        for (const prop of schema4){
                            (0, code_1.checkReportMissingProp)(cxt, prop);
                        }
                    }
                }
                function exitOnErrorMode() {
                    const missing = gen.let("missing");
                    if (useLoop || $data) {
                        const valid = gen.let("valid", true);
                        cxt.block$data(valid, ()=>loopUntilMissing(missing, valid));
                        cxt.ok(valid);
                    } else {
                        gen.if((0, code_1.checkMissingProp)(cxt, schema4, missing));
                        (0, code_1.reportMissingProp)(cxt, missing);
                        gen.else();
                    }
                }
                function loopAllRequired() {
                    gen.forOf("prop", schemaCode, (prop)=>{
                        cxt.setParams({
                            missingProperty: prop
                        });
                        gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), ()=>cxt.error());
                    });
                }
                function loopUntilMissing(missing, valid) {
                    cxt.setParams({
                        missingProperty: missing
                    });
                    gen.forOf(missing, schemaCode, ()=>{
                        gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));
                        gen.if((0, codegen_1.not)(valid), ()=>{
                            cxt.error();
                            gen.break();
                        });
                    }, codegen_1.nil);
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/limitItems.js
var require_limitItems = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/limitItems.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var error = {
            message ({ keyword, schemaCode }) {
                const comp = keyword === "maxItems" ? "more" : "fewer";
                return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} items`;
            },
            params: ({ schemaCode })=>(0, codegen_1._)`{limit: ${schemaCode}}`
        };
        var def = {
            keyword: [
                "maxItems",
                "minItems"
            ],
            type: "array",
            schemaType: "number",
            $data: true,
            error,
            code (cxt) {
                const { keyword, data, schemaCode } = cxt;
                const op = keyword === "maxItems" ? codegen_1.operators.GT : codegen_1.operators.LT;
                cxt.fail$data((0, codegen_1._)`${data}.length ${op} ${schemaCode}`);
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/runtime/equal.js
var require_equal = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/runtime/equal.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var equal = require_fast_deep_equal();
        equal.code = 'require("ajv/dist/runtime/equal").default';
        exports.default = equal;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js
var require_uniqueItems = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var dataType_1 = require_dataType();
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var equal_1 = require_equal();
        var error = {
            message: ({ params: { i, j } })=>(0, codegen_1.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
            params: ({ params: { i, j } })=>(0, codegen_1._)`{i: ${i}, j: ${j}}`
        };
        var def = {
            keyword: "uniqueItems",
            type: "array",
            schemaType: "boolean",
            $data: true,
            error,
            code (cxt) {
                const { gen, data, $data, schema: schema4, parentSchema, schemaCode, it } = cxt;
                if (!$data && !schema4) return;
                const valid = gen.let("valid");
                const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
                cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);
                cxt.ok(valid);
                function validateUniqueItems() {
                    const i = gen.let("i", (0, codegen_1._)`${data}.length`);
                    const j = gen.let("j");
                    cxt.setParams({
                        i,
                        j
                    });
                    gen.assign(valid, true);
                    gen.if((0, codegen_1._)`${i} > 1`, ()=>(canOptimize() ? loopN : loopN2)(i, j));
                }
                function canOptimize() {
                    return itemTypes.length > 0 && !itemTypes.some((t1)=>t1 === "object" || t1 === "array");
                }
                function loopN(i, j) {
                    const item = gen.name("item");
                    const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
                    const indices = gen.const("indices", (0, codegen_1._)`{}`);
                    gen.for((0, codegen_1._)`;${i}--;`, ()=>{
                        gen.let(item, (0, codegen_1._)`${data}[${i}]`);
                        gen.if(wrongType, (0, codegen_1._)`continue`);
                        if (itemTypes.length > 1) gen.if((0, codegen_1._)`typeof ${item} == "string"`, (0, codegen_1._)`${item} += "_"`);
                        gen.if((0, codegen_1._)`typeof ${indices}[${item}] == "number"`, ()=>{
                            gen.assign(j, (0, codegen_1._)`${indices}[${item}]`);
                            cxt.error();
                            gen.assign(valid, false).break();
                        }).code((0, codegen_1._)`${indices}[${item}] = ${i}`);
                    });
                }
                function loopN2(i, j) {
                    const eql = (0, util_1.useFunc)(gen, equal_1.default);
                    const outer = gen.name("outer");
                    gen.label(outer).for((0, codegen_1._)`;${i}--;`, ()=>gen.for((0, codegen_1._)`${j} = ${i}; ${j}--;`, ()=>gen.if((0, codegen_1._)`${eql}(${data}[${i}], ${data}[${j}])`, ()=>{
                                cxt.error();
                                gen.assign(valid, false).break(outer);
                            })));
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/const.js
var require_const = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/const.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var equal_1 = require_equal();
        var error = {
            message: "must be equal to constant",
            params: ({ schemaCode })=>(0, codegen_1._)`{allowedValue: ${schemaCode}}`
        };
        var def = {
            keyword: "const",
            $data: true,
            error,
            code (cxt) {
                const { gen, data, $data, schemaCode, schema: schema4 } = cxt;
                if ($data || schema4 && typeof schema4 == "object") {
                    cxt.fail$data((0, codegen_1._)`!${(0, util_1.useFunc)(gen, equal_1.default)}(${data}, ${schemaCode})`);
                } else {
                    cxt.fail((0, codegen_1._)`${schema4} !== ${data}`);
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/enum.js
var require_enum = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/enum.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var equal_1 = require_equal();
        var error = {
            message: "must be equal to one of the allowed values",
            params: ({ schemaCode })=>(0, codegen_1._)`{allowedValues: ${schemaCode}}`
        };
        var def = {
            keyword: "enum",
            schemaType: "array",
            $data: true,
            error,
            code (cxt) {
                const { gen, data, $data, schema: schema4, schemaCode, it } = cxt;
                if (!$data && schema4.length === 0) throw new Error("enum must have non-empty array");
                const useLoop = schema4.length >= it.opts.loopEnum;
                let eql;
                const getEql = ()=>eql !== null && eql !== void 0 ? eql : eql = (0, util_1.useFunc)(gen, equal_1.default);
                let valid;
                if (useLoop || $data) {
                    valid = gen.let("valid");
                    cxt.block$data(valid, loopEnum);
                } else {
                    if (!Array.isArray(schema4)) throw new Error("ajv implementation error");
                    const vSchema = gen.const("vSchema", schemaCode);
                    valid = (0, codegen_1.or)(...schema4.map((_x, i)=>equalCode(vSchema, i)));
                }
                cxt.pass(valid);
                function loopEnum() {
                    gen.assign(valid, false);
                    gen.forOf("v", schemaCode, (v)=>gen.if((0, codegen_1._)`${getEql()}(${data}, ${v})`, ()=>gen.assign(valid, true).break()));
                }
                function equalCode(vSchema, i) {
                    const sch = schema4[i];
                    return typeof sch === "object" && sch !== null ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i}])` : (0, codegen_1._)`${data} === ${sch}`;
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/index.js
var require_validation = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var limitNumber_1 = require_limitNumber();
        var multipleOf_1 = require_multipleOf();
        var limitLength_1 = require_limitLength();
        var pattern_1 = require_pattern();
        var limitProperties_1 = require_limitProperties();
        var required_1 = require_required();
        var limitItems_1 = require_limitItems();
        var uniqueItems_1 = require_uniqueItems();
        var const_1 = require_const();
        var enum_1 = require_enum();
        var validation = [
            // number
            limitNumber_1.default,
            multipleOf_1.default,
            // string
            limitLength_1.default,
            pattern_1.default,
            // object
            limitProperties_1.default,
            required_1.default,
            // array
            limitItems_1.default,
            uniqueItems_1.default,
            // any
            {
                keyword: "type",
                schemaType: [
                    "string",
                    "array"
                ]
            },
            {
                keyword: "nullable",
                schemaType: "boolean"
            },
            const_1.default,
            enum_1.default
        ];
        exports.default = validation;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js
var require_additionalItems = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/additionalItems.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.validateAdditionalItems = void 0;
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var error = {
            message: ({ params: { len } })=>(0, codegen_1.str)`must NOT have more than ${len} items`,
            params: ({ params: { len } })=>(0, codegen_1._)`{limit: ${len}}`
        };
        var def = {
            keyword: "additionalItems",
            type: "array",
            schemaType: [
                "boolean",
                "object"
            ],
            before: "uniqueItems",
            error,
            code (cxt) {
                const { parentSchema, it } = cxt;
                const { items } = parentSchema;
                if (!Array.isArray(items)) {
                    (0, util_1.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
                    return;
                }
                validateAdditionalItems(cxt, items);
            }
        };
        function validateAdditionalItems(cxt, items) {
            const { gen, schema: schema4, data, keyword, it } = cxt;
            it.items = true;
            const len = gen.const("len", (0, codegen_1._)`${data}.length`);
            if (schema4 === false) {
                cxt.setParams({
                    len: items.length
                });
                cxt.pass((0, codegen_1._)`${len} <= ${items.length}`);
            } else if (typeof schema4 == "object" && !(0, util_1.alwaysValidSchema)(it, schema4)) {
                const valid = gen.var("valid", (0, codegen_1._)`${len} <= ${items.length}`);
                gen.if((0, codegen_1.not)(valid), ()=>validateItems(valid));
                cxt.ok(valid);
            }
            function validateItems(valid) {
                gen.forRange("i", items.length, len, (i)=>{
                    cxt.subschema({
                        keyword,
                        dataProp: i,
                        dataPropType: util_1.Type.Num
                    }, valid);
                    if (!it.allErrors) gen.if((0, codegen_1.not)(valid), ()=>gen.break());
                });
            }
        }
        exports.validateAdditionalItems = validateAdditionalItems;
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/items.js
var require_items = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/items.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.validateTuple = void 0;
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var code_1 = require_code2();
        var def = {
            keyword: "items",
            type: "array",
            schemaType: [
                "object",
                "array",
                "boolean"
            ],
            before: "uniqueItems",
            code (cxt) {
                const { schema: schema4, it } = cxt;
                if (Array.isArray(schema4)) return validateTuple(cxt, "additionalItems", schema4);
                it.items = true;
                if ((0, util_1.alwaysValidSchema)(it, schema4)) return;
                cxt.ok((0, code_1.validateArray)(cxt));
            }
        };
        function validateTuple(cxt, extraItems, schArr = cxt.schema) {
            const { gen, parentSchema, data, keyword, it } = cxt;
            checkStrictTuple(parentSchema);
            if (it.opts.unevaluated && schArr.length && it.items !== true) {
                it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);
            }
            const valid = gen.name("valid");
            const len = gen.const("len", (0, codegen_1._)`${data}.length`);
            schArr.forEach((sch, i)=>{
                if ((0, util_1.alwaysValidSchema)(it, sch)) return;
                gen.if((0, codegen_1._)`${len} > ${i}`, ()=>cxt.subschema({
                        keyword,
                        schemaProp: i,
                        dataProp: i
                    }, valid));
                cxt.ok(valid);
            });
            function checkStrictTuple(sch) {
                const { opts, errSchemaPath } = it;
                const l = schArr.length;
                const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
                if (opts.strictTuples && !fullTuple) {
                    const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
                    (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);
                }
            }
        }
        exports.validateTuple = validateTuple;
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js
var require_prefixItems = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/prefixItems.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var items_1 = require_items();
        var def = {
            keyword: "prefixItems",
            type: "array",
            schemaType: [
                "array"
            ],
            before: "uniqueItems",
            code: (cxt)=>(0, items_1.validateTuple)(cxt, "items")
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/items2020.js
var require_items2020 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/items2020.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var code_1 = require_code2();
        var additionalItems_1 = require_additionalItems();
        var error = {
            message: ({ params: { len } })=>(0, codegen_1.str)`must NOT have more than ${len} items`,
            params: ({ params: { len } })=>(0, codegen_1._)`{limit: ${len}}`
        };
        var def = {
            keyword: "items",
            type: "array",
            schemaType: [
                "object",
                "boolean"
            ],
            before: "uniqueItems",
            error,
            code (cxt) {
                const { schema: schema4, parentSchema, it } = cxt;
                const { prefixItems } = parentSchema;
                it.items = true;
                if ((0, util_1.alwaysValidSchema)(it, schema4)) return;
                if (prefixItems) (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);
                else cxt.ok((0, code_1.validateArray)(cxt));
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/contains.js
var require_contains = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/contains.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var error = {
            message: ({ params: { min, max } })=>max === void 0 ? (0, codegen_1.str)`must contain at least ${min} valid item(s)` : (0, codegen_1.str)`must contain at least ${min} and no more than ${max} valid item(s)`,
            params: ({ params: { min, max } })=>max === void 0 ? (0, codegen_1._)`{minContains: ${min}}` : (0, codegen_1._)`{minContains: ${min}, maxContains: ${max}}`
        };
        var def = {
            keyword: "contains",
            type: "array",
            schemaType: [
                "object",
                "boolean"
            ],
            before: "uniqueItems",
            trackErrors: true,
            error,
            code (cxt) {
                const { gen, schema: schema4, parentSchema, data, it } = cxt;
                let min;
                let max;
                const { minContains, maxContains } = parentSchema;
                if (it.opts.next) {
                    min = minContains === void 0 ? 1 : minContains;
                    max = maxContains;
                } else {
                    min = 1;
                }
                const len = gen.const("len", (0, codegen_1._)`${data}.length`);
                cxt.setParams({
                    min,
                    max
                });
                if (max === void 0 && min === 0) {
                    (0, util_1.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
                    return;
                }
                if (max !== void 0 && min > max) {
                    (0, util_1.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
                    cxt.fail();
                    return;
                }
                if ((0, util_1.alwaysValidSchema)(it, schema4)) {
                    let cond = (0, codegen_1._)`${len} >= ${min}`;
                    if (max !== void 0) cond = (0, codegen_1._)`${cond} && ${len} <= ${max}`;
                    cxt.pass(cond);
                    return;
                }
                it.items = true;
                const valid = gen.name("valid");
                if (max === void 0 && min === 1) {
                    validateItems(valid, ()=>gen.if(valid, ()=>gen.break()));
                } else if (min === 0) {
                    gen.let(valid, true);
                    if (max !== void 0) gen.if((0, codegen_1._)`${data}.length > 0`, validateItemsWithCount);
                } else {
                    gen.let(valid, false);
                    validateItemsWithCount();
                }
                cxt.result(valid, ()=>cxt.reset());
                function validateItemsWithCount() {
                    const schValid = gen.name("_valid");
                    const count = gen.let("count", 0);
                    validateItems(schValid, ()=>gen.if(schValid, ()=>checkLimits(count)));
                }
                function validateItems(_valid, block) {
                    gen.forRange("i", 0, len, (i)=>{
                        cxt.subschema({
                            keyword: "contains",
                            dataProp: i,
                            dataPropType: util_1.Type.Num,
                            compositeRule: true
                        }, _valid);
                        block();
                    });
                }
                function checkLimits(count) {
                    gen.code((0, codegen_1._)`${count}++`);
                    if (max === void 0) {
                        gen.if((0, codegen_1._)`${count} >= ${min}`, ()=>gen.assign(valid, true).break());
                    } else {
                        gen.if((0, codegen_1._)`${count} > ${max}`, ()=>gen.assign(valid, false).break());
                        if (min === 1) gen.assign(valid, true);
                        else gen.if((0, codegen_1._)`${count} >= ${min}`, ()=>gen.assign(valid, true));
                    }
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/dependencies.js
var require_dependencies = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/dependencies.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var code_1 = require_code2();
        exports.error = {
            message: ({ params: { property, depsCount, deps } })=>{
                const property_ies = depsCount === 1 ? "property" : "properties";
                return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;
            },
            params: ({ params: { property, depsCount, deps, missingProperty } })=>(0, codegen_1._)`{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}`
        };
        var def = {
            keyword: "dependencies",
            type: "object",
            schemaType: "object",
            error: exports.error,
            code (cxt) {
                const [propDeps, schDeps] = splitDependencies(cxt);
                validatePropertyDeps(cxt, propDeps);
                validateSchemaDeps(cxt, schDeps);
            }
        };
        function splitDependencies({ schema: schema4 }) {
            const propertyDeps = {};
            const schemaDeps = {};
            for(const key in schema4){
                if (key === "__proto__") continue;
                const deps = Array.isArray(schema4[key]) ? propertyDeps : schemaDeps;
                deps[key] = schema4[key];
            }
            return [
                propertyDeps,
                schemaDeps
            ];
        }
        function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
            const { gen, data, it } = cxt;
            if (Object.keys(propertyDeps).length === 0) return;
            const missing = gen.let("missing");
            for(const prop in propertyDeps){
                const deps = propertyDeps[prop];
                if (deps.length === 0) continue;
                const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
                cxt.setParams({
                    property: prop,
                    depsCount: deps.length,
                    deps: deps.join(", ")
                });
                if (it.allErrors) {
                    gen.if(hasProperty, ()=>{
                        for (const depProp of deps){
                            (0, code_1.checkReportMissingProp)(cxt, depProp);
                        }
                    });
                } else {
                    gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
                    (0, code_1.reportMissingProp)(cxt, missing);
                    gen.else();
                }
            }
        }
        exports.validatePropertyDeps = validatePropertyDeps;
        function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
            const { gen, data, keyword, it } = cxt;
            const valid = gen.name("valid");
            for(const prop in schemaDeps){
                if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop])) continue;
                gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), ()=>{
                    const schCxt = cxt.subschema({
                        keyword,
                        schemaProp: prop
                    }, valid);
                    cxt.mergeValidEvaluated(schCxt, valid);
                }, ()=>gen.var(valid, true));
                cxt.ok(valid);
            }
        }
        exports.validateSchemaDeps = validateSchemaDeps;
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js
var require_propertyNames = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/propertyNames.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var error = {
            message: "property name must be valid",
            params: ({ params })=>(0, codegen_1._)`{propertyName: ${params.propertyName}}`
        };
        var def = {
            keyword: "propertyNames",
            type: "object",
            schemaType: [
                "object",
                "boolean"
            ],
            error,
            code (cxt) {
                const { gen, schema: schema4, data, it } = cxt;
                if ((0, util_1.alwaysValidSchema)(it, schema4)) return;
                const valid = gen.name("valid");
                gen.forIn("key", data, (key)=>{
                    cxt.setParams({
                        propertyName: key
                    });
                    cxt.subschema({
                        keyword: "propertyNames",
                        data: key,
                        dataTypes: [
                            "string"
                        ],
                        propertyName: key,
                        compositeRule: true
                    }, valid);
                    gen.if((0, codegen_1.not)(valid), ()=>{
                        cxt.error(true);
                        if (!it.allErrors) gen.break();
                    });
                });
                cxt.ok(valid);
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js
var require_additionalProperties = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/additionalProperties.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var code_1 = require_code2();
        var codegen_1 = require_codegen();
        var names_1 = require_names();
        var util_1 = require_util();
        var error = {
            message: "must NOT have additional properties",
            params: ({ params })=>(0, codegen_1._)`{additionalProperty: ${params.additionalProperty}}`
        };
        var def = {
            keyword: "additionalProperties",
            type: [
                "object"
            ],
            schemaType: [
                "boolean",
                "object"
            ],
            allowUndefined: true,
            trackErrors: true,
            error,
            code (cxt) {
                const { gen, schema: schema4, parentSchema, data, errsCount, it } = cxt;
                if (!errsCount) throw new Error("ajv implementation error");
                const { allErrors, opts } = it;
                it.props = true;
                if (opts.removeAdditional !== "all" && (0, util_1.alwaysValidSchema)(it, schema4)) return;
                const props = (0, code_1.allSchemaProperties)(parentSchema.properties);
                const patProps = (0, code_1.allSchemaProperties)(parentSchema.patternProperties);
                checkAdditionalProperties();
                cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
                function checkAdditionalProperties() {
                    gen.forIn("key", data, (key)=>{
                        if (!props.length && !patProps.length) additionalPropertyCode(key);
                        else gen.if(isAdditional(key), ()=>additionalPropertyCode(key));
                    });
                }
                function isAdditional(key) {
                    let definedProp;
                    if (props.length > 8) {
                        const propsSchema = (0, util_1.schemaRefOrVal)(it, parentSchema.properties, "properties");
                        definedProp = (0, code_1.isOwnProperty)(gen, propsSchema, key);
                    } else if (props.length) {
                        definedProp = (0, codegen_1.or)(...props.map((p)=>(0, codegen_1._)`${key} === ${p}`));
                    } else {
                        definedProp = codegen_1.nil;
                    }
                    if (patProps.length) {
                        definedProp = (0, codegen_1.or)(definedProp, ...patProps.map((p)=>(0, codegen_1._)`${(0, code_1.usePattern)(cxt, p)}.test(${key})`));
                    }
                    return (0, codegen_1.not)(definedProp);
                }
                function deleteAdditional(key) {
                    gen.code((0, codegen_1._)`delete ${data}[${key}]`);
                }
                function additionalPropertyCode(key) {
                    if (opts.removeAdditional === "all" || opts.removeAdditional && schema4 === false) {
                        deleteAdditional(key);
                        return;
                    }
                    if (schema4 === false) {
                        cxt.setParams({
                            additionalProperty: key
                        });
                        cxt.error();
                        if (!allErrors) gen.break();
                        return;
                    }
                    if (typeof schema4 == "object" && !(0, util_1.alwaysValidSchema)(it, schema4)) {
                        const valid = gen.name("valid");
                        if (opts.removeAdditional === "failing") {
                            applyAdditionalSchema(key, valid, false);
                            gen.if((0, codegen_1.not)(valid), ()=>{
                                cxt.reset();
                                deleteAdditional(key);
                            });
                        } else {
                            applyAdditionalSchema(key, valid);
                            if (!allErrors) gen.if((0, codegen_1.not)(valid), ()=>gen.break());
                        }
                    }
                }
                function applyAdditionalSchema(key, valid, errors) {
                    const subschema = {
                        keyword: "additionalProperties",
                        dataProp: key,
                        dataPropType: util_1.Type.Str
                    };
                    if (errors === false) {
                        Object.assign(subschema, {
                            compositeRule: true,
                            createErrors: false,
                            allErrors: false
                        });
                    }
                    cxt.subschema(subschema, valid);
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/properties.js
var require_properties = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/properties.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var validate_1 = require_validate();
        var code_1 = require_code2();
        var util_1 = require_util();
        var additionalProperties_1 = require_additionalProperties();
        var def = {
            keyword: "properties",
            type: "object",
            schemaType: "object",
            code (cxt) {
                const { gen, schema: schema4, parentSchema, data, it } = cxt;
                if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === void 0) {
                    additionalProperties_1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1.default, "additionalProperties"));
                }
                const allProps = (0, code_1.allSchemaProperties)(schema4);
                for (const prop of allProps){
                    it.definedProperties.add(prop);
                }
                if (it.opts.unevaluated && allProps.length && it.props !== true) {
                    it.props = util_1.mergeEvaluated.props(gen, (0, util_1.toHash)(allProps), it.props);
                }
                const properties = allProps.filter((p)=>!(0, util_1.alwaysValidSchema)(it, schema4[p]));
                if (properties.length === 0) return;
                const valid = gen.name("valid");
                for (const prop of properties){
                    if (hasDefault(prop)) {
                        applyPropertySchema(prop);
                    } else {
                        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties));
                        applyPropertySchema(prop);
                        if (!it.allErrors) gen.else().var(valid, true);
                        gen.endIf();
                    }
                    cxt.it.definedProperties.add(prop);
                    cxt.ok(valid);
                }
                function hasDefault(prop) {
                    return it.opts.useDefaults && !it.compositeRule && schema4[prop].default !== void 0;
                }
                function applyPropertySchema(prop) {
                    cxt.subschema({
                        keyword: "properties",
                        schemaProp: prop,
                        dataProp: prop
                    }, valid);
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js
var require_patternProperties = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/patternProperties.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var code_1 = require_code2();
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var util_2 = require_util();
        var def = {
            keyword: "patternProperties",
            type: "object",
            schemaType: "object",
            code (cxt) {
                const { gen, schema: schema4, data, parentSchema, it } = cxt;
                const { opts } = it;
                const patterns = (0, code_1.allSchemaProperties)(schema4);
                const alwaysValidPatterns = patterns.filter((p)=>(0, util_1.alwaysValidSchema)(it, schema4[p]));
                if (patterns.length === 0 || alwaysValidPatterns.length === patterns.length && (!it.opts.unevaluated || it.props === true)) {
                    return;
                }
                const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
                const valid = gen.name("valid");
                if (it.props !== true && !(it.props instanceof codegen_1.Name)) {
                    it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
                }
                const { props } = it;
                validatePatternProperties();
                function validatePatternProperties() {
                    for (const pat of patterns){
                        if (checkProperties) checkMatchingProperties(pat);
                        if (it.allErrors) {
                            validateProperties(pat);
                        } else {
                            gen.var(valid, true);
                            validateProperties(pat);
                            gen.if(valid);
                        }
                    }
                }
                function checkMatchingProperties(pat) {
                    for(const prop in checkProperties){
                        if (new RegExp(pat).test(prop)) {
                            (0, util_1.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
                        }
                    }
                }
                function validateProperties(pat) {
                    gen.forIn("key", data, (key)=>{
                        gen.if((0, codegen_1._)`${(0, code_1.usePattern)(cxt, pat)}.test(${key})`, ()=>{
                            const alwaysValid = alwaysValidPatterns.includes(pat);
                            if (!alwaysValid) {
                                cxt.subschema({
                                    keyword: "patternProperties",
                                    schemaProp: pat,
                                    dataProp: key,
                                    dataPropType: util_2.Type.Str
                                }, valid);
                            }
                            if (it.opts.unevaluated && props !== true) {
                                gen.assign((0, codegen_1._)`${props}[${key}]`, true);
                            } else if (!alwaysValid && !it.allErrors) {
                                gen.if((0, codegen_1.not)(valid), ()=>gen.break());
                            }
                        });
                    });
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/not.js
var require_not = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/not.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var util_1 = require_util();
        var def = {
            keyword: "not",
            schemaType: [
                "object",
                "boolean"
            ],
            trackErrors: true,
            code (cxt) {
                const { gen, schema: schema4, it } = cxt;
                if ((0, util_1.alwaysValidSchema)(it, schema4)) {
                    cxt.fail();
                    return;
                }
                const valid = gen.name("valid");
                cxt.subschema({
                    keyword: "not",
                    compositeRule: true,
                    createErrors: false,
                    allErrors: false
                }, valid);
                cxt.failResult(valid, ()=>cxt.reset(), ()=>cxt.error());
            },
            error: {
                message: "must NOT be valid"
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/anyOf.js
var require_anyOf = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/anyOf.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var code_1 = require_code2();
        var def = {
            keyword: "anyOf",
            schemaType: "array",
            trackErrors: true,
            code: code_1.validateUnion,
            error: {
                message: "must match a schema in anyOf"
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/oneOf.js
var require_oneOf = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/oneOf.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var error = {
            message: "must match exactly one schema in oneOf",
            params: ({ params })=>(0, codegen_1._)`{passingSchemas: ${params.passing}}`
        };
        var def = {
            keyword: "oneOf",
            schemaType: "array",
            trackErrors: true,
            error,
            code (cxt) {
                const { gen, schema: schema4, parentSchema, it } = cxt;
                if (!Array.isArray(schema4)) throw new Error("ajv implementation error");
                if (it.opts.discriminator && parentSchema.discriminator) return;
                const schArr = schema4;
                const valid = gen.let("valid", false);
                const passing = gen.let("passing", null);
                const schValid = gen.name("_valid");
                cxt.setParams({
                    passing
                });
                gen.block(validateOneOf);
                cxt.result(valid, ()=>cxt.reset(), ()=>cxt.error(true));
                function validateOneOf() {
                    schArr.forEach((sch, i)=>{
                        let schCxt;
                        if ((0, util_1.alwaysValidSchema)(it, sch)) {
                            gen.var(schValid, true);
                        } else {
                            schCxt = cxt.subschema({
                                keyword: "oneOf",
                                schemaProp: i,
                                compositeRule: true
                            }, schValid);
                        }
                        if (i > 0) {
                            gen.if((0, codegen_1._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1._)`[${passing}, ${i}]`).else();
                        }
                        gen.if(schValid, ()=>{
                            gen.assign(valid, true);
                            gen.assign(passing, i);
                            if (schCxt) cxt.mergeEvaluated(schCxt, codegen_1.Name);
                        });
                    });
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/allOf.js
var require_allOf = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/allOf.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var util_1 = require_util();
        var def = {
            keyword: "allOf",
            schemaType: "array",
            code (cxt) {
                const { gen, schema: schema4, it } = cxt;
                if (!Array.isArray(schema4)) throw new Error("ajv implementation error");
                const valid = gen.name("valid");
                schema4.forEach((sch, i)=>{
                    if ((0, util_1.alwaysValidSchema)(it, sch)) return;
                    const schCxt = cxt.subschema({
                        keyword: "allOf",
                        schemaProp: i
                    }, valid);
                    cxt.ok(valid);
                    cxt.mergeEvaluated(schCxt);
                });
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/if.js
var require_if = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/if.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var error = {
            message: ({ params })=>(0, codegen_1.str)`must match "${params.ifClause}" schema`,
            params: ({ params })=>(0, codegen_1._)`{failingKeyword: ${params.ifClause}}`
        };
        var def = {
            keyword: "if",
            schemaType: [
                "object",
                "boolean"
            ],
            trackErrors: true,
            error,
            code (cxt) {
                const { gen, parentSchema, it } = cxt;
                if (parentSchema.then === void 0 && parentSchema.else === void 0) {
                    (0, util_1.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
                }
                const hasThen = hasSchema(it, "then");
                const hasElse = hasSchema(it, "else");
                if (!hasThen && !hasElse) return;
                const valid = gen.let("valid", true);
                const schValid = gen.name("_valid");
                validateIf();
                cxt.reset();
                if (hasThen && hasElse) {
                    const ifClause = gen.let("ifClause");
                    cxt.setParams({
                        ifClause
                    });
                    gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
                } else if (hasThen) {
                    gen.if(schValid, validateClause("then"));
                } else {
                    gen.if((0, codegen_1.not)(schValid), validateClause("else"));
                }
                cxt.pass(valid, ()=>cxt.error(true));
                function validateIf() {
                    const schCxt = cxt.subschema({
                        keyword: "if",
                        compositeRule: true,
                        createErrors: false,
                        allErrors: false
                    }, schValid);
                    cxt.mergeEvaluated(schCxt);
                }
                function validateClause(keyword, ifClause) {
                    return ()=>{
                        const schCxt = cxt.subschema({
                            keyword
                        }, schValid);
                        gen.assign(valid, schValid);
                        cxt.mergeValidEvaluated(schCxt, valid);
                        if (ifClause) gen.assign(ifClause, (0, codegen_1._)`${keyword}`);
                        else cxt.setParams({
                            ifClause: keyword
                        });
                    };
                }
            }
        };
        function hasSchema(it, keyword) {
            const schema4 = it.schema[keyword];
            return schema4 !== void 0 && !(0, util_1.alwaysValidSchema)(it, schema4);
        }
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/thenElse.js
var require_thenElse = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/thenElse.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var util_1 = require_util();
        var def = {
            keyword: [
                "then",
                "else"
            ],
            schemaType: [
                "object",
                "boolean"
            ],
            code ({ keyword, parentSchema, it }) {
                if (parentSchema.if === void 0) (0, util_1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/index.js
var require_applicator = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var additionalItems_1 = require_additionalItems();
        var prefixItems_1 = require_prefixItems();
        var items_1 = require_items();
        var items2020_1 = require_items2020();
        var contains_1 = require_contains();
        var dependencies_1 = require_dependencies();
        var propertyNames_1 = require_propertyNames();
        var additionalProperties_1 = require_additionalProperties();
        var properties_1 = require_properties();
        var patternProperties_1 = require_patternProperties();
        var not_1 = require_not();
        var anyOf_1 = require_anyOf();
        var oneOf_1 = require_oneOf();
        var allOf_1 = require_allOf();
        var if_1 = require_if();
        var thenElse_1 = require_thenElse();
        function getApplicator(draft2020 = false) {
            const applicator = [
                // any
                not_1.default,
                anyOf_1.default,
                oneOf_1.default,
                allOf_1.default,
                if_1.default,
                thenElse_1.default,
                // object
                propertyNames_1.default,
                additionalProperties_1.default,
                dependencies_1.default,
                properties_1.default,
                patternProperties_1.default
            ];
            if (draft2020) applicator.push(prefixItems_1.default, items2020_1.default);
            else applicator.push(additionalItems_1.default, items_1.default);
            applicator.push(contains_1.default);
            return applicator;
        }
        exports.default = getApplicator;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/format/format.js
var require_format = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/format/format.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var error = {
            message: ({ schemaCode })=>(0, codegen_1.str)`must match format "${schemaCode}"`,
            params: ({ schemaCode })=>(0, codegen_1._)`{format: ${schemaCode}}`
        };
        var def = {
            keyword: "format",
            type: [
                "number",
                "string"
            ],
            schemaType: "string",
            $data: true,
            error,
            code (cxt, ruleType) {
                const { gen, data, $data, schema: schema4, schemaCode, it } = cxt;
                const { opts, errSchemaPath, schemaEnv, self: self2 } = it;
                if (!opts.validateFormats) return;
                if ($data) validate$DataFormat();
                else validateFormat();
                function validate$DataFormat() {
                    const fmts = gen.scopeValue("formats", {
                        ref: self2.formats,
                        code: opts.code.formats
                    });
                    const fDef = gen.const("fDef", (0, codegen_1._)`${fmts}[${schemaCode}]`);
                    const fType = gen.let("fType");
                    const format5 = gen.let("format");
                    gen.if((0, codegen_1._)`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, ()=>gen.assign(fType, (0, codegen_1._)`${fDef}.type || "string"`).assign(format5, (0, codegen_1._)`${fDef}.validate`), ()=>gen.assign(fType, (0, codegen_1._)`"string"`).assign(format5, fDef));
                    cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));
                    function unknownFmt() {
                        if (opts.strictSchema === false) return codegen_1.nil;
                        return (0, codegen_1._)`${schemaCode} && !${format5}`;
                    }
                    function invalidFmt() {
                        const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format5}(${data}) : ${format5}(${data}))` : (0, codegen_1._)`${format5}(${data})`;
                        const validData = (0, codegen_1._)`(typeof ${format5} == "function" ? ${callFormat} : ${format5}.test(${data}))`;
                        return (0, codegen_1._)`${format5} && ${format5} !== true && ${fType} === ${ruleType} && !${validData}`;
                    }
                }
                function validateFormat() {
                    const formatDef = self2.formats[schema4];
                    if (!formatDef) {
                        unknownFormat();
                        return;
                    }
                    if (formatDef === true) return;
                    const [fmtType, format5, fmtRef] = getFormat(formatDef);
                    if (fmtType === ruleType) cxt.pass(validCondition());
                    function unknownFormat() {
                        if (opts.strictSchema === false) {
                            self2.logger.warn(unknownMsg());
                            return;
                        }
                        throw new Error(unknownMsg());
                        function unknownMsg() {
                            return `unknown format "${schema4}" ignored in schema at path "${errSchemaPath}"`;
                        }
                    }
                    function getFormat(fmtDef) {
                        const code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema4)}` : void 0;
                        const fmt = gen.scopeValue("formats", {
                            key: schema4,
                            ref: fmtDef,
                            code
                        });
                        if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
                            return [
                                fmtDef.type || "string",
                                fmtDef.validate,
                                (0, codegen_1._)`${fmt}.validate`
                            ];
                        }
                        return [
                            "string",
                            fmtDef,
                            fmt
                        ];
                    }
                    function validCondition() {
                        if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
                            if (!schemaEnv.$async) throw new Error("async format in sync schema");
                            return (0, codegen_1._)`await ${fmtRef}(${data})`;
                        }
                        return typeof format5 == "function" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;
                    }
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/format/index.js
var require_format2 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/format/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var format_1 = require_format();
        var format5 = [
            format_1.default
        ];
        exports.default = format5;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/metadata.js
var require_metadata = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/metadata.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.contentVocabulary = exports.metadataVocabulary = void 0;
        exports.metadataVocabulary = [
            "title",
            "description",
            "default",
            "deprecated",
            "readOnly",
            "writeOnly",
            "examples"
        ];
        exports.contentVocabulary = [
            "contentMediaType",
            "contentEncoding",
            "contentSchema"
        ];
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/draft7.js
var require_draft7 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/draft7.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var core_1 = require_core2();
        var validation_1 = require_validation();
        var applicator_1 = require_applicator();
        var format_1 = require_format2();
        var metadata_1 = require_metadata();
        var draft7Vocabularies = [
            core_1.default,
            validation_1.default,
            (0, applicator_1.default)(),
            format_1.default,
            metadata_1.metadataVocabulary,
            metadata_1.contentVocabulary
        ];
        exports.default = draft7Vocabularies;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/discriminator/types.js
var require_types = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/discriminator/types.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DiscrError = void 0;
        var DiscrError;
        (function(DiscrError2) {
            DiscrError2["Tag"] = "tag";
            DiscrError2["Mapping"] = "mapping";
        })(DiscrError || (exports.DiscrError = DiscrError = {}));
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/discriminator/index.js
var require_discriminator = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/discriminator/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var types_1 = require_types();
        var compile_1 = require_compile();
        var ref_error_1 = require_ref_error();
        var util_1 = require_util();
        var error = {
            message: ({ params: { discrError, tagName } })=>discrError === types_1.DiscrError.Tag ? `tag "${tagName}" must be string` : `value of tag "${tagName}" must be in oneOf`,
            params: ({ params: { discrError, tag, tagName } })=>(0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`
        };
        var def = {
            keyword: "discriminator",
            type: "object",
            schemaType: "object",
            error,
            code (cxt) {
                const { gen, data, schema: schema4, parentSchema, it } = cxt;
                const { oneOf } = parentSchema;
                if (!it.opts.discriminator) {
                    throw new Error("discriminator: requires discriminator option");
                }
                const tagName = schema4.propertyName;
                if (typeof tagName != "string") throw new Error("discriminator: requires propertyName");
                if (schema4.mapping) throw new Error("discriminator: mapping is not supported");
                if (!oneOf) throw new Error("discriminator: requires oneOf keyword");
                const valid = gen.let("valid", false);
                const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);
                gen.if((0, codegen_1._)`typeof ${tag} == "string"`, ()=>validateMapping(), ()=>cxt.error(false, {
                        discrError: types_1.DiscrError.Tag,
                        tag,
                        tagName
                    }));
                cxt.ok(valid);
                function validateMapping() {
                    const mapping = getMapping();
                    gen.if(false);
                    for(const tagValue in mapping){
                        gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
                        gen.assign(valid, applyTagSchema(mapping[tagValue]));
                    }
                    gen.else();
                    cxt.error(false, {
                        discrError: types_1.DiscrError.Mapping,
                        tag,
                        tagName
                    });
                    gen.endIf();
                }
                function applyTagSchema(schemaProp) {
                    const _valid = gen.name("valid");
                    const schCxt = cxt.subschema({
                        keyword: "oneOf",
                        schemaProp
                    }, _valid);
                    cxt.mergeEvaluated(schCxt, codegen_1.Name);
                    return _valid;
                }
                function getMapping() {
                    var _a;
                    const oneOfMapping = {};
                    const topRequired = hasRequired(parentSchema);
                    let tagRequired = true;
                    for(let i = 0; i < oneOf.length; i++){
                        let sch = oneOf[i];
                        if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
                            const ref = sch.$ref;
                            sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, ref);
                            if (sch instanceof compile_1.SchemaEnv) sch = sch.schema;
                            if (sch === void 0) throw new ref_error_1.default(it.opts.uriResolver, it.baseId, ref);
                        }
                        const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
                        if (typeof propSch != "object") {
                            throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
                        }
                        tagRequired = tagRequired && (topRequired || hasRequired(sch));
                        addMappings(propSch, i);
                    }
                    if (!tagRequired) throw new Error(`discriminator: "${tagName}" must be required`);
                    return oneOfMapping;
                    function hasRequired({ required }) {
                        return Array.isArray(required) && required.includes(tagName);
                    }
                    function addMappings(sch, i) {
                        if (sch.const) {
                            addMapping(sch.const, i);
                        } else if (sch.enum) {
                            for (const tagValue of sch.enum){
                                addMapping(tagValue, i);
                            }
                        } else {
                            throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
                        }
                    }
                    function addMapping(tagValue, i) {
                        if (typeof tagValue != "string" || tagValue in oneOfMapping) {
                            throw new Error(`discriminator: "${tagName}" values must be unique strings`);
                        }
                        oneOfMapping[tagValue] = i;
                    }
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-draft-07.json
var require_json_schema_draft_07 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-draft-07.json" (exports, module) {
        module.exports = {
            $schema: "http://json-schema.org/draft-07/schema#",
            $id: "http://json-schema.org/draft-07/schema#",
            title: "Core schema meta-schema",
            definitions: {
                schemaArray: {
                    type: "array",
                    minItems: 1,
                    items: {
                        $ref: "#"
                    }
                },
                nonNegativeInteger: {
                    type: "integer",
                    minimum: 0
                },
                nonNegativeIntegerDefault0: {
                    allOf: [
                        {
                            $ref: "#/definitions/nonNegativeInteger"
                        },
                        {
                            default: 0
                        }
                    ]
                },
                simpleTypes: {
                    enum: [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                    ]
                },
                stringArray: {
                    type: "array",
                    items: {
                        type: "string"
                    },
                    uniqueItems: true,
                    default: []
                }
            },
            type: [
                "object",
                "boolean"
            ],
            properties: {
                $id: {
                    type: "string",
                    format: "uri-reference"
                },
                $schema: {
                    type: "string",
                    format: "uri"
                },
                $ref: {
                    type: "string",
                    format: "uri-reference"
                },
                $comment: {
                    type: "string"
                },
                title: {
                    type: "string"
                },
                description: {
                    type: "string"
                },
                default: true,
                readOnly: {
                    type: "boolean",
                    default: false
                },
                examples: {
                    type: "array",
                    items: true
                },
                multipleOf: {
                    type: "number",
                    exclusiveMinimum: 0
                },
                maximum: {
                    type: "number"
                },
                exclusiveMaximum: {
                    type: "number"
                },
                minimum: {
                    type: "number"
                },
                exclusiveMinimum: {
                    type: "number"
                },
                maxLength: {
                    $ref: "#/definitions/nonNegativeInteger"
                },
                minLength: {
                    $ref: "#/definitions/nonNegativeIntegerDefault0"
                },
                pattern: {
                    type: "string",
                    format: "regex"
                },
                additionalItems: {
                    $ref: "#"
                },
                items: {
                    anyOf: [
                        {
                            $ref: "#"
                        },
                        {
                            $ref: "#/definitions/schemaArray"
                        }
                    ],
                    default: true
                },
                maxItems: {
                    $ref: "#/definitions/nonNegativeInteger"
                },
                minItems: {
                    $ref: "#/definitions/nonNegativeIntegerDefault0"
                },
                uniqueItems: {
                    type: "boolean",
                    default: false
                },
                contains: {
                    $ref: "#"
                },
                maxProperties: {
                    $ref: "#/definitions/nonNegativeInteger"
                },
                minProperties: {
                    $ref: "#/definitions/nonNegativeIntegerDefault0"
                },
                required: {
                    $ref: "#/definitions/stringArray"
                },
                additionalProperties: {
                    $ref: "#"
                },
                definitions: {
                    type: "object",
                    additionalProperties: {
                        $ref: "#"
                    },
                    default: {}
                },
                properties: {
                    type: "object",
                    additionalProperties: {
                        $ref: "#"
                    },
                    default: {}
                },
                patternProperties: {
                    type: "object",
                    additionalProperties: {
                        $ref: "#"
                    },
                    propertyNames: {
                        format: "regex"
                    },
                    default: {}
                },
                dependencies: {
                    type: "object",
                    additionalProperties: {
                        anyOf: [
                            {
                                $ref: "#"
                            },
                            {
                                $ref: "#/definitions/stringArray"
                            }
                        ]
                    }
                },
                propertyNames: {
                    $ref: "#"
                },
                const: true,
                enum: {
                    type: "array",
                    items: true,
                    minItems: 1,
                    uniqueItems: true
                },
                type: {
                    anyOf: [
                        {
                            $ref: "#/definitions/simpleTypes"
                        },
                        {
                            type: "array",
                            items: {
                                $ref: "#/definitions/simpleTypes"
                            },
                            minItems: 1,
                            uniqueItems: true
                        }
                    ]
                },
                format: {
                    type: "string"
                },
                contentMediaType: {
                    type: "string"
                },
                contentEncoding: {
                    type: "string"
                },
                if: {
                    $ref: "#"
                },
                then: {
                    $ref: "#"
                },
                else: {
                    $ref: "#"
                },
                allOf: {
                    $ref: "#/definitions/schemaArray"
                },
                anyOf: {
                    $ref: "#/definitions/schemaArray"
                },
                oneOf: {
                    $ref: "#/definitions/schemaArray"
                },
                not: {
                    $ref: "#"
                }
            },
            default: true
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/ajv.js
var require_ajv = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/ajv.js" (exports, module) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = exports.Ajv = void 0;
        var core_1 = require_core();
        var draft7_1 = require_draft7();
        var discriminator_1 = require_discriminator();
        var draft7MetaSchema = require_json_schema_draft_07();
        var META_SUPPORT_DATA = [
            "/properties"
        ];
        var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
        var Ajv2 = class extends core_1.default {
            _addVocabularies() {
                super._addVocabularies();
                draft7_1.default.forEach((v)=>this.addVocabulary(v));
                if (this.opts.discriminator) this.addKeyword(discriminator_1.default);
            }
            _addDefaultMetaSchema() {
                super._addDefaultMetaSchema();
                if (!this.opts.meta) return;
                const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;
                this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
                this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
            }
            defaultMeta() {
                return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0);
            }
        };
        exports.Ajv = Ajv2;
        module.exports = exports = Ajv2;
        module.exports.Ajv = Ajv2;
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = Ajv2;
        var validate_1 = require_validate();
        Object.defineProperty(exports, "KeywordCxt", {
            enumerable: true,
            get: function() {
                return validate_1.KeywordCxt;
            }
        });
        var codegen_1 = require_codegen();
        Object.defineProperty(exports, "_", {
            enumerable: true,
            get: function() {
                return codegen_1._;
            }
        });
        Object.defineProperty(exports, "str", {
            enumerable: true,
            get: function() {
                return codegen_1.str;
            }
        });
        Object.defineProperty(exports, "stringify", {
            enumerable: true,
            get: function() {
                return codegen_1.stringify;
            }
        });
        Object.defineProperty(exports, "nil", {
            enumerable: true,
            get: function() {
                return codegen_1.nil;
            }
        });
        Object.defineProperty(exports, "Name", {
            enumerable: true,
            get: function() {
                return codegen_1.Name;
            }
        });
        Object.defineProperty(exports, "CodeGen", {
            enumerable: true,
            get: function() {
                return codegen_1.CodeGen;
            }
        });
        var validation_error_1 = require_validation_error();
        Object.defineProperty(exports, "ValidationError", {
            enumerable: true,
            get: function() {
                return validation_error_1.default;
            }
        });
        var ref_error_1 = require_ref_error();
        Object.defineProperty(exports, "MissingRefError", {
            enumerable: true,
            get: function() {
                return ref_error_1.default;
            }
        });
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/dynamic/dynamicAnchor.js
var require_dynamicAnchor = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/dynamic/dynamicAnchor.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.dynamicAnchor = void 0;
        var codegen_1 = require_codegen();
        var names_1 = require_names();
        var compile_1 = require_compile();
        var ref_1 = require_ref();
        var def = {
            keyword: "$dynamicAnchor",
            schemaType: "string",
            code: (cxt)=>dynamicAnchor(cxt, cxt.schema)
        };
        function dynamicAnchor(cxt, anchor) {
            const { gen, it } = cxt;
            it.schemaEnv.root.dynamicAnchors[anchor] = true;
            const v = (0, codegen_1._)`${names_1.default.dynamicAnchors}${(0, codegen_1.getProperty)(anchor)}`;
            const validate3 = it.errSchemaPath === "#" ? it.validateName : _getValidate(cxt);
            gen.if((0, codegen_1._)`!${v}`, ()=>gen.assign(v, validate3));
        }
        exports.dynamicAnchor = dynamicAnchor;
        function _getValidate(cxt) {
            const { schemaEnv, schema: schema4, self: self2 } = cxt.it;
            const { root, baseId, localRefs, meta } = schemaEnv.root;
            const { schemaId } = self2.opts;
            const sch = new compile_1.SchemaEnv({
                schema: schema4,
                schemaId,
                root,
                baseId,
                localRefs,
                meta
            });
            compile_1.compileSchema.call(self2, sch);
            return (0, ref_1.getValidate)(cxt, sch);
        }
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/dynamic/dynamicRef.js
var require_dynamicRef = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/dynamic/dynamicRef.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.dynamicRef = void 0;
        var codegen_1 = require_codegen();
        var names_1 = require_names();
        var ref_1 = require_ref();
        var def = {
            keyword: "$dynamicRef",
            schemaType: "string",
            code: (cxt)=>dynamicRef(cxt, cxt.schema)
        };
        function dynamicRef(cxt, ref) {
            const { gen, keyword, it } = cxt;
            if (ref[0] !== "#") throw new Error(`"${keyword}" only supports hash fragment reference`);
            const anchor = ref.slice(1);
            if (it.allErrors) {
                _dynamicRef();
            } else {
                const valid = gen.let("valid", false);
                _dynamicRef(valid);
                cxt.ok(valid);
            }
            function _dynamicRef(valid) {
                if (it.schemaEnv.root.dynamicAnchors[anchor]) {
                    const v = gen.let("_v", (0, codegen_1._)`${names_1.default.dynamicAnchors}${(0, codegen_1.getProperty)(anchor)}`);
                    gen.if(v, _callRef(v, valid), _callRef(it.validateName, valid));
                } else {
                    _callRef(it.validateName, valid)();
                }
            }
            function _callRef(validate3, valid) {
                return valid ? ()=>gen.block(()=>{
                        (0, ref_1.callRef)(cxt, validate3);
                        gen.let(valid, true);
                    }) : ()=>(0, ref_1.callRef)(cxt, validate3);
            }
        }
        exports.dynamicRef = dynamicRef;
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/dynamic/recursiveAnchor.js
var require_recursiveAnchor = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/dynamic/recursiveAnchor.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var dynamicAnchor_1 = require_dynamicAnchor();
        var util_1 = require_util();
        var def = {
            keyword: "$recursiveAnchor",
            schemaType: "boolean",
            code (cxt) {
                if (cxt.schema) (0, dynamicAnchor_1.dynamicAnchor)(cxt, "");
                else (0, util_1.checkStrictMode)(cxt.it, "$recursiveAnchor: false is ignored");
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/dynamic/recursiveRef.js
var require_recursiveRef = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/dynamic/recursiveRef.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var dynamicRef_1 = require_dynamicRef();
        var def = {
            keyword: "$recursiveRef",
            schemaType: "string",
            code: (cxt)=>(0, dynamicRef_1.dynamicRef)(cxt, cxt.schema)
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/dynamic/index.js
var require_dynamic = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/dynamic/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var dynamicAnchor_1 = require_dynamicAnchor();
        var dynamicRef_1 = require_dynamicRef();
        var recursiveAnchor_1 = require_recursiveAnchor();
        var recursiveRef_1 = require_recursiveRef();
        var dynamic = [
            dynamicAnchor_1.default,
            dynamicRef_1.default,
            recursiveAnchor_1.default,
            recursiveRef_1.default
        ];
        exports.default = dynamic;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/dependentRequired.js
var require_dependentRequired = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/dependentRequired.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var dependencies_1 = require_dependencies();
        var def = {
            keyword: "dependentRequired",
            type: "object",
            schemaType: "object",
            error: dependencies_1.error,
            code: (cxt)=>(0, dependencies_1.validatePropertyDeps)(cxt)
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/dependentSchemas.js
var require_dependentSchemas = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/applicator/dependentSchemas.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var dependencies_1 = require_dependencies();
        var def = {
            keyword: "dependentSchemas",
            type: "object",
            schemaType: "object",
            code: (cxt)=>(0, dependencies_1.validateSchemaDeps)(cxt)
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/limitContains.js
var require_limitContains = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/validation/limitContains.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var util_1 = require_util();
        var def = {
            keyword: [
                "maxContains",
                "minContains"
            ],
            type: "array",
            schemaType: "number",
            code ({ keyword, parentSchema, it }) {
                if (parentSchema.contains === void 0) {
                    (0, util_1.checkStrictMode)(it, `"${keyword}" without "contains" is ignored`);
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/next.js
var require_next = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/next.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var dependentRequired_1 = require_dependentRequired();
        var dependentSchemas_1 = require_dependentSchemas();
        var limitContains_1 = require_limitContains();
        var next = [
            dependentRequired_1.default,
            dependentSchemas_1.default,
            limitContains_1.default
        ];
        exports.default = next;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/unevaluated/unevaluatedProperties.js
var require_unevaluatedProperties = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/unevaluated/unevaluatedProperties.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var names_1 = require_names();
        var error = {
            message: "must NOT have unevaluated properties",
            params: ({ params })=>(0, codegen_1._)`{unevaluatedProperty: ${params.unevaluatedProperty}}`
        };
        var def = {
            keyword: "unevaluatedProperties",
            type: "object",
            schemaType: [
                "boolean",
                "object"
            ],
            trackErrors: true,
            error,
            code (cxt) {
                const { gen, schema: schema4, data, errsCount, it } = cxt;
                if (!errsCount) throw new Error("ajv implementation error");
                const { allErrors, props } = it;
                if (props instanceof codegen_1.Name) {
                    gen.if((0, codegen_1._)`${props} !== true`, ()=>gen.forIn("key", data, (key)=>gen.if(unevaluatedDynamic(props, key), ()=>unevaluatedPropCode(key))));
                } else if (props !== true) {
                    gen.forIn("key", data, (key)=>props === void 0 ? unevaluatedPropCode(key) : gen.if(unevaluatedStatic(props, key), ()=>unevaluatedPropCode(key)));
                }
                it.props = true;
                cxt.ok((0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
                function unevaluatedPropCode(key) {
                    if (schema4 === false) {
                        cxt.setParams({
                            unevaluatedProperty: key
                        });
                        cxt.error();
                        if (!allErrors) gen.break();
                        return;
                    }
                    if (!(0, util_1.alwaysValidSchema)(it, schema4)) {
                        const valid = gen.name("valid");
                        cxt.subschema({
                            keyword: "unevaluatedProperties",
                            dataProp: key,
                            dataPropType: util_1.Type.Str
                        }, valid);
                        if (!allErrors) gen.if((0, codegen_1.not)(valid), ()=>gen.break());
                    }
                }
                function unevaluatedDynamic(evaluatedProps, key) {
                    return (0, codegen_1._)`!${evaluatedProps} || !${evaluatedProps}[${key}]`;
                }
                function unevaluatedStatic(evaluatedProps, key) {
                    const ps = [];
                    for(const p in evaluatedProps){
                        if (evaluatedProps[p] === true) ps.push((0, codegen_1._)`${key} !== ${p}`);
                    }
                    return (0, codegen_1.and)(...ps);
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/unevaluated/unevaluatedItems.js
var require_unevaluatedItems = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/unevaluated/unevaluatedItems.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var codegen_1 = require_codegen();
        var util_1 = require_util();
        var error = {
            message: ({ params: { len } })=>(0, codegen_1.str)`must NOT have more than ${len} items`,
            params: ({ params: { len } })=>(0, codegen_1._)`{limit: ${len}}`
        };
        var def = {
            keyword: "unevaluatedItems",
            type: "array",
            schemaType: [
                "boolean",
                "object"
            ],
            error,
            code (cxt) {
                const { gen, schema: schema4, data, it } = cxt;
                const items = it.items || 0;
                if (items === true) return;
                const len = gen.const("len", (0, codegen_1._)`${data}.length`);
                if (schema4 === false) {
                    cxt.setParams({
                        len: items
                    });
                    cxt.fail((0, codegen_1._)`${len} > ${items}`);
                } else if (typeof schema4 == "object" && !(0, util_1.alwaysValidSchema)(it, schema4)) {
                    const valid = gen.var("valid", (0, codegen_1._)`${len} <= ${items}`);
                    gen.if((0, codegen_1.not)(valid), ()=>validateItems(valid, items));
                    cxt.ok(valid);
                }
                it.items = true;
                function validateItems(valid, from) {
                    gen.forRange("i", from, len, (i)=>{
                        cxt.subschema({
                            keyword: "unevaluatedItems",
                            dataProp: i,
                            dataPropType: util_1.Type.Num
                        }, valid);
                        if (!it.allErrors) gen.if((0, codegen_1.not)(valid), ()=>gen.break());
                    });
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/unevaluated/index.js
var require_unevaluated = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/unevaluated/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var unevaluatedProperties_1 = require_unevaluatedProperties();
        var unevaluatedItems_1 = require_unevaluatedItems();
        var unevaluated = [
            unevaluatedProperties_1.default,
            unevaluatedItems_1.default
        ];
        exports.default = unevaluated;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/schema.json
var require_schema = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/schema.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2019-09/schema",
            $id: "https://json-schema.org/draft/2019-09/schema",
            $vocabulary: {
                "https://json-schema.org/draft/2019-09/vocab/core": true,
                "https://json-schema.org/draft/2019-09/vocab/applicator": true,
                "https://json-schema.org/draft/2019-09/vocab/validation": true,
                "https://json-schema.org/draft/2019-09/vocab/meta-data": true,
                "https://json-schema.org/draft/2019-09/vocab/format": false,
                "https://json-schema.org/draft/2019-09/vocab/content": true
            },
            $recursiveAnchor: true,
            title: "Core and Validation specifications meta-schema",
            allOf: [
                {
                    $ref: "meta/core"
                },
                {
                    $ref: "meta/applicator"
                },
                {
                    $ref: "meta/validation"
                },
                {
                    $ref: "meta/meta-data"
                },
                {
                    $ref: "meta/format"
                },
                {
                    $ref: "meta/content"
                }
            ],
            type: [
                "object",
                "boolean"
            ],
            properties: {
                definitions: {
                    $comment: "While no longer an official keyword as it is replaced by $defs, this keyword is retained in the meta-schema to prevent incompatible extensions as it remains in common use.",
                    type: "object",
                    additionalProperties: {
                        $recursiveRef: "#"
                    },
                    default: {}
                },
                dependencies: {
                    $comment: '"dependencies" is no longer a keyword, but schema authors should avoid redefining it to facilitate a smooth transition to "dependentSchemas" and "dependentRequired"',
                    type: "object",
                    additionalProperties: {
                        anyOf: [
                            {
                                $recursiveRef: "#"
                            },
                            {
                                $ref: "meta/validation#/$defs/stringArray"
                            }
                        ]
                    }
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/meta/applicator.json
var require_applicator2 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/meta/applicator.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2019-09/schema",
            $id: "https://json-schema.org/draft/2019-09/meta/applicator",
            $vocabulary: {
                "https://json-schema.org/draft/2019-09/vocab/applicator": true
            },
            $recursiveAnchor: true,
            title: "Applicator vocabulary meta-schema",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                additionalItems: {
                    $recursiveRef: "#"
                },
                unevaluatedItems: {
                    $recursiveRef: "#"
                },
                items: {
                    anyOf: [
                        {
                            $recursiveRef: "#"
                        },
                        {
                            $ref: "#/$defs/schemaArray"
                        }
                    ]
                },
                contains: {
                    $recursiveRef: "#"
                },
                additionalProperties: {
                    $recursiveRef: "#"
                },
                unevaluatedProperties: {
                    $recursiveRef: "#"
                },
                properties: {
                    type: "object",
                    additionalProperties: {
                        $recursiveRef: "#"
                    },
                    default: {}
                },
                patternProperties: {
                    type: "object",
                    additionalProperties: {
                        $recursiveRef: "#"
                    },
                    propertyNames: {
                        format: "regex"
                    },
                    default: {}
                },
                dependentSchemas: {
                    type: "object",
                    additionalProperties: {
                        $recursiveRef: "#"
                    }
                },
                propertyNames: {
                    $recursiveRef: "#"
                },
                if: {
                    $recursiveRef: "#"
                },
                then: {
                    $recursiveRef: "#"
                },
                else: {
                    $recursiveRef: "#"
                },
                allOf: {
                    $ref: "#/$defs/schemaArray"
                },
                anyOf: {
                    $ref: "#/$defs/schemaArray"
                },
                oneOf: {
                    $ref: "#/$defs/schemaArray"
                },
                not: {
                    $recursiveRef: "#"
                }
            },
            $defs: {
                schemaArray: {
                    type: "array",
                    minItems: 1,
                    items: {
                        $recursiveRef: "#"
                    }
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/meta/content.json
var require_content = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/meta/content.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2019-09/schema",
            $id: "https://json-schema.org/draft/2019-09/meta/content",
            $vocabulary: {
                "https://json-schema.org/draft/2019-09/vocab/content": true
            },
            $recursiveAnchor: true,
            title: "Content vocabulary meta-schema",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                contentMediaType: {
                    type: "string"
                },
                contentEncoding: {
                    type: "string"
                },
                contentSchema: {
                    $recursiveRef: "#"
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/meta/core.json
var require_core3 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/meta/core.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2019-09/schema",
            $id: "https://json-schema.org/draft/2019-09/meta/core",
            $vocabulary: {
                "https://json-schema.org/draft/2019-09/vocab/core": true
            },
            $recursiveAnchor: true,
            title: "Core vocabulary meta-schema",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                $id: {
                    type: "string",
                    format: "uri-reference",
                    $comment: "Non-empty fragments not allowed.",
                    pattern: "^[^#]*#?$"
                },
                $schema: {
                    type: "string",
                    format: "uri"
                },
                $anchor: {
                    type: "string",
                    pattern: "^[A-Za-z][-A-Za-z0-9.:_]*$"
                },
                $ref: {
                    type: "string",
                    format: "uri-reference"
                },
                $recursiveRef: {
                    type: "string",
                    format: "uri-reference"
                },
                $recursiveAnchor: {
                    type: "boolean",
                    default: false
                },
                $vocabulary: {
                    type: "object",
                    propertyNames: {
                        type: "string",
                        format: "uri"
                    },
                    additionalProperties: {
                        type: "boolean"
                    }
                },
                $comment: {
                    type: "string"
                },
                $defs: {
                    type: "object",
                    additionalProperties: {
                        $recursiveRef: "#"
                    },
                    default: {}
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/meta/format.json
var require_format3 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/meta/format.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2019-09/schema",
            $id: "https://json-schema.org/draft/2019-09/meta/format",
            $vocabulary: {
                "https://json-schema.org/draft/2019-09/vocab/format": true
            },
            $recursiveAnchor: true,
            title: "Format vocabulary meta-schema",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                format: {
                    type: "string"
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/meta/meta-data.json
var require_meta_data = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/meta/meta-data.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2019-09/schema",
            $id: "https://json-schema.org/draft/2019-09/meta/meta-data",
            $vocabulary: {
                "https://json-schema.org/draft/2019-09/vocab/meta-data": true
            },
            $recursiveAnchor: true,
            title: "Meta-data vocabulary meta-schema",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                title: {
                    type: "string"
                },
                description: {
                    type: "string"
                },
                default: true,
                deprecated: {
                    type: "boolean",
                    default: false
                },
                readOnly: {
                    type: "boolean",
                    default: false
                },
                writeOnly: {
                    type: "boolean",
                    default: false
                },
                examples: {
                    type: "array",
                    items: true
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/meta/validation.json
var require_validation2 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/meta/validation.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2019-09/schema",
            $id: "https://json-schema.org/draft/2019-09/meta/validation",
            $vocabulary: {
                "https://json-schema.org/draft/2019-09/vocab/validation": true
            },
            $recursiveAnchor: true,
            title: "Validation vocabulary meta-schema",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                multipleOf: {
                    type: "number",
                    exclusiveMinimum: 0
                },
                maximum: {
                    type: "number"
                },
                exclusiveMaximum: {
                    type: "number"
                },
                minimum: {
                    type: "number"
                },
                exclusiveMinimum: {
                    type: "number"
                },
                maxLength: {
                    $ref: "#/$defs/nonNegativeInteger"
                },
                minLength: {
                    $ref: "#/$defs/nonNegativeIntegerDefault0"
                },
                pattern: {
                    type: "string",
                    format: "regex"
                },
                maxItems: {
                    $ref: "#/$defs/nonNegativeInteger"
                },
                minItems: {
                    $ref: "#/$defs/nonNegativeIntegerDefault0"
                },
                uniqueItems: {
                    type: "boolean",
                    default: false
                },
                maxContains: {
                    $ref: "#/$defs/nonNegativeInteger"
                },
                minContains: {
                    $ref: "#/$defs/nonNegativeInteger",
                    default: 1
                },
                maxProperties: {
                    $ref: "#/$defs/nonNegativeInteger"
                },
                minProperties: {
                    $ref: "#/$defs/nonNegativeIntegerDefault0"
                },
                required: {
                    $ref: "#/$defs/stringArray"
                },
                dependentRequired: {
                    type: "object",
                    additionalProperties: {
                        $ref: "#/$defs/stringArray"
                    }
                },
                const: true,
                enum: {
                    type: "array",
                    items: true
                },
                type: {
                    anyOf: [
                        {
                            $ref: "#/$defs/simpleTypes"
                        },
                        {
                            type: "array",
                            items: {
                                $ref: "#/$defs/simpleTypes"
                            },
                            minItems: 1,
                            uniqueItems: true
                        }
                    ]
                }
            },
            $defs: {
                nonNegativeInteger: {
                    type: "integer",
                    minimum: 0
                },
                nonNegativeIntegerDefault0: {
                    $ref: "#/$defs/nonNegativeInteger",
                    default: 0
                },
                simpleTypes: {
                    enum: [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                    ]
                },
                stringArray: {
                    type: "array",
                    items: {
                        type: "string"
                    },
                    uniqueItems: true,
                    default: []
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/index.js
var require_json_schema_2019_09 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2019-09/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var metaSchema = require_schema();
        var applicator = require_applicator2();
        var content = require_content();
        var core = require_core3();
        var format5 = require_format3();
        var metadata = require_meta_data();
        var validation = require_validation2();
        var META_SUPPORT_DATA = [
            "/properties"
        ];
        function addMetaSchema2019($data) {
            ;
            [
                metaSchema,
                applicator,
                content,
                core,
                with$data(this, format5),
                metadata,
                with$data(this, validation)
            ].forEach((sch)=>this.addMetaSchema(sch, void 0, false));
            return this;
            function with$data(ajv2, sch) {
                return $data ? ajv2.$dataMetaSchema(sch, META_SUPPORT_DATA) : sch;
            }
        }
        exports.default = addMetaSchema2019;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/2019.js
var require__ = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/2019.js" (exports, module) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = exports.Ajv2019 = void 0;
        var core_1 = require_core();
        var draft7_1 = require_draft7();
        var dynamic_1 = require_dynamic();
        var next_1 = require_next();
        var unevaluated_1 = require_unevaluated();
        var discriminator_1 = require_discriminator();
        var json_schema_2019_09_1 = require_json_schema_2019_09();
        var META_SCHEMA_ID = "https://json-schema.org/draft/2019-09/schema";
        var Ajv20192 = class extends core_1.default {
            _addVocabularies() {
                super._addVocabularies();
                this.addVocabulary(dynamic_1.default);
                draft7_1.default.forEach((v)=>this.addVocabulary(v));
                this.addVocabulary(next_1.default);
                this.addVocabulary(unevaluated_1.default);
                if (this.opts.discriminator) this.addKeyword(discriminator_1.default);
            }
            _addDefaultMetaSchema() {
                super._addDefaultMetaSchema();
                const { $data, meta } = this.opts;
                if (!meta) return;
                json_schema_2019_09_1.default.call(this, $data);
                this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
            }
            defaultMeta() {
                return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0);
            }
            constructor(opts = {}){
                super({
                    ...opts,
                    dynamicRef: true,
                    next: true,
                    unevaluated: true
                });
            }
        };
        exports.Ajv2019 = Ajv20192;
        module.exports = exports = Ajv20192;
        module.exports.Ajv2019 = Ajv20192;
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = Ajv20192;
        var validate_1 = require_validate();
        Object.defineProperty(exports, "KeywordCxt", {
            enumerable: true,
            get: function() {
                return validate_1.KeywordCxt;
            }
        });
        var codegen_1 = require_codegen();
        Object.defineProperty(exports, "_", {
            enumerable: true,
            get: function() {
                return codegen_1._;
            }
        });
        Object.defineProperty(exports, "str", {
            enumerable: true,
            get: function() {
                return codegen_1.str;
            }
        });
        Object.defineProperty(exports, "stringify", {
            enumerable: true,
            get: function() {
                return codegen_1.stringify;
            }
        });
        Object.defineProperty(exports, "nil", {
            enumerable: true,
            get: function() {
                return codegen_1.nil;
            }
        });
        Object.defineProperty(exports, "Name", {
            enumerable: true,
            get: function() {
                return codegen_1.Name;
            }
        });
        Object.defineProperty(exports, "CodeGen", {
            enumerable: true,
            get: function() {
                return codegen_1.CodeGen;
            }
        });
        var validation_error_1 = require_validation_error();
        Object.defineProperty(exports, "ValidationError", {
            enumerable: true,
            get: function() {
                return validation_error_1.default;
            }
        });
        var ref_error_1 = require_ref_error();
        Object.defineProperty(exports, "MissingRefError", {
            enumerable: true,
            get: function() {
                return ref_error_1.default;
            }
        });
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/draft2020.js
var require_draft2020 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/vocabularies/draft2020.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var core_1 = require_core2();
        var validation_1 = require_validation();
        var applicator_1 = require_applicator();
        var dynamic_1 = require_dynamic();
        var next_1 = require_next();
        var unevaluated_1 = require_unevaluated();
        var format_1 = require_format2();
        var metadata_1 = require_metadata();
        var draft2020Vocabularies = [
            dynamic_1.default,
            core_1.default,
            validation_1.default,
            (0, applicator_1.default)(true),
            format_1.default,
            metadata_1.metadataVocabulary,
            metadata_1.contentVocabulary,
            next_1.default,
            unevaluated_1.default
        ];
        exports.default = draft2020Vocabularies;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/schema.json
var require_schema2 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/schema.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2020-12/schema",
            $id: "https://json-schema.org/draft/2020-12/schema",
            $vocabulary: {
                "https://json-schema.org/draft/2020-12/vocab/core": true,
                "https://json-schema.org/draft/2020-12/vocab/applicator": true,
                "https://json-schema.org/draft/2020-12/vocab/unevaluated": true,
                "https://json-schema.org/draft/2020-12/vocab/validation": true,
                "https://json-schema.org/draft/2020-12/vocab/meta-data": true,
                "https://json-schema.org/draft/2020-12/vocab/format-annotation": true,
                "https://json-schema.org/draft/2020-12/vocab/content": true
            },
            $dynamicAnchor: "meta",
            title: "Core and Validation specifications meta-schema",
            allOf: [
                {
                    $ref: "meta/core"
                },
                {
                    $ref: "meta/applicator"
                },
                {
                    $ref: "meta/unevaluated"
                },
                {
                    $ref: "meta/validation"
                },
                {
                    $ref: "meta/meta-data"
                },
                {
                    $ref: "meta/format-annotation"
                },
                {
                    $ref: "meta/content"
                }
            ],
            type: [
                "object",
                "boolean"
            ],
            $comment: "This meta-schema also defines keywords that have appeared in previous drafts in order to prevent incompatible extensions as they remain in common use.",
            properties: {
                definitions: {
                    $comment: '"definitions" has been replaced by "$defs".',
                    type: "object",
                    additionalProperties: {
                        $dynamicRef: "#meta"
                    },
                    deprecated: true,
                    default: {}
                },
                dependencies: {
                    $comment: '"dependencies" has been split and replaced by "dependentSchemas" and "dependentRequired" in order to serve their differing semantics.',
                    type: "object",
                    additionalProperties: {
                        anyOf: [
                            {
                                $dynamicRef: "#meta"
                            },
                            {
                                $ref: "meta/validation#/$defs/stringArray"
                            }
                        ]
                    },
                    deprecated: true,
                    default: {}
                },
                $recursiveAnchor: {
                    $comment: '"$recursiveAnchor" has been replaced by "$dynamicAnchor".',
                    $ref: "meta/core#/$defs/anchorString",
                    deprecated: true
                },
                $recursiveRef: {
                    $comment: '"$recursiveRef" has been replaced by "$dynamicRef".',
                    $ref: "meta/core#/$defs/uriReferenceString",
                    deprecated: true
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/applicator.json
var require_applicator3 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/applicator.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2020-12/schema",
            $id: "https://json-schema.org/draft/2020-12/meta/applicator",
            $vocabulary: {
                "https://json-schema.org/draft/2020-12/vocab/applicator": true
            },
            $dynamicAnchor: "meta",
            title: "Applicator vocabulary meta-schema",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                prefixItems: {
                    $ref: "#/$defs/schemaArray"
                },
                items: {
                    $dynamicRef: "#meta"
                },
                contains: {
                    $dynamicRef: "#meta"
                },
                additionalProperties: {
                    $dynamicRef: "#meta"
                },
                properties: {
                    type: "object",
                    additionalProperties: {
                        $dynamicRef: "#meta"
                    },
                    default: {}
                },
                patternProperties: {
                    type: "object",
                    additionalProperties: {
                        $dynamicRef: "#meta"
                    },
                    propertyNames: {
                        format: "regex"
                    },
                    default: {}
                },
                dependentSchemas: {
                    type: "object",
                    additionalProperties: {
                        $dynamicRef: "#meta"
                    },
                    default: {}
                },
                propertyNames: {
                    $dynamicRef: "#meta"
                },
                if: {
                    $dynamicRef: "#meta"
                },
                then: {
                    $dynamicRef: "#meta"
                },
                else: {
                    $dynamicRef: "#meta"
                },
                allOf: {
                    $ref: "#/$defs/schemaArray"
                },
                anyOf: {
                    $ref: "#/$defs/schemaArray"
                },
                oneOf: {
                    $ref: "#/$defs/schemaArray"
                },
                not: {
                    $dynamicRef: "#meta"
                }
            },
            $defs: {
                schemaArray: {
                    type: "array",
                    minItems: 1,
                    items: {
                        $dynamicRef: "#meta"
                    }
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/unevaluated.json
var require_unevaluated2 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/unevaluated.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2020-12/schema",
            $id: "https://json-schema.org/draft/2020-12/meta/unevaluated",
            $vocabulary: {
                "https://json-schema.org/draft/2020-12/vocab/unevaluated": true
            },
            $dynamicAnchor: "meta",
            title: "Unevaluated applicator vocabulary meta-schema",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                unevaluatedItems: {
                    $dynamicRef: "#meta"
                },
                unevaluatedProperties: {
                    $dynamicRef: "#meta"
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/content.json
var require_content2 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/content.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2020-12/schema",
            $id: "https://json-schema.org/draft/2020-12/meta/content",
            $vocabulary: {
                "https://json-schema.org/draft/2020-12/vocab/content": true
            },
            $dynamicAnchor: "meta",
            title: "Content vocabulary meta-schema",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                contentEncoding: {
                    type: "string"
                },
                contentMediaType: {
                    type: "string"
                },
                contentSchema: {
                    $dynamicRef: "#meta"
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/core.json
var require_core4 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/core.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2020-12/schema",
            $id: "https://json-schema.org/draft/2020-12/meta/core",
            $vocabulary: {
                "https://json-schema.org/draft/2020-12/vocab/core": true
            },
            $dynamicAnchor: "meta",
            title: "Core vocabulary meta-schema",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                $id: {
                    $ref: "#/$defs/uriReferenceString",
                    $comment: "Non-empty fragments not allowed.",
                    pattern: "^[^#]*#?$"
                },
                $schema: {
                    $ref: "#/$defs/uriString"
                },
                $ref: {
                    $ref: "#/$defs/uriReferenceString"
                },
                $anchor: {
                    $ref: "#/$defs/anchorString"
                },
                $dynamicRef: {
                    $ref: "#/$defs/uriReferenceString"
                },
                $dynamicAnchor: {
                    $ref: "#/$defs/anchorString"
                },
                $vocabulary: {
                    type: "object",
                    propertyNames: {
                        $ref: "#/$defs/uriString"
                    },
                    additionalProperties: {
                        type: "boolean"
                    }
                },
                $comment: {
                    type: "string"
                },
                $defs: {
                    type: "object",
                    additionalProperties: {
                        $dynamicRef: "#meta"
                    }
                }
            },
            $defs: {
                anchorString: {
                    type: "string",
                    pattern: "^[A-Za-z_][-A-Za-z0-9._]*$"
                },
                uriString: {
                    type: "string",
                    format: "uri"
                },
                uriReferenceString: {
                    type: "string",
                    format: "uri-reference"
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/format-annotation.json
var require_format_annotation = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/format-annotation.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2020-12/schema",
            $id: "https://json-schema.org/draft/2020-12/meta/format-annotation",
            $vocabulary: {
                "https://json-schema.org/draft/2020-12/vocab/format-annotation": true
            },
            $dynamicAnchor: "meta",
            title: "Format vocabulary meta-schema for annotation results",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                format: {
                    type: "string"
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/meta-data.json
var require_meta_data2 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/meta-data.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2020-12/schema",
            $id: "https://json-schema.org/draft/2020-12/meta/meta-data",
            $vocabulary: {
                "https://json-schema.org/draft/2020-12/vocab/meta-data": true
            },
            $dynamicAnchor: "meta",
            title: "Meta-data vocabulary meta-schema",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                title: {
                    type: "string"
                },
                description: {
                    type: "string"
                },
                default: true,
                deprecated: {
                    type: "boolean",
                    default: false
                },
                readOnly: {
                    type: "boolean",
                    default: false
                },
                writeOnly: {
                    type: "boolean",
                    default: false
                },
                examples: {
                    type: "array",
                    items: true
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/validation.json
var require_validation3 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/meta/validation.json" (exports, module) {
        module.exports = {
            $schema: "https://json-schema.org/draft/2020-12/schema",
            $id: "https://json-schema.org/draft/2020-12/meta/validation",
            $vocabulary: {
                "https://json-schema.org/draft/2020-12/vocab/validation": true
            },
            $dynamicAnchor: "meta",
            title: "Validation vocabulary meta-schema",
            type: [
                "object",
                "boolean"
            ],
            properties: {
                type: {
                    anyOf: [
                        {
                            $ref: "#/$defs/simpleTypes"
                        },
                        {
                            type: "array",
                            items: {
                                $ref: "#/$defs/simpleTypes"
                            },
                            minItems: 1,
                            uniqueItems: true
                        }
                    ]
                },
                const: true,
                enum: {
                    type: "array",
                    items: true
                },
                multipleOf: {
                    type: "number",
                    exclusiveMinimum: 0
                },
                maximum: {
                    type: "number"
                },
                exclusiveMaximum: {
                    type: "number"
                },
                minimum: {
                    type: "number"
                },
                exclusiveMinimum: {
                    type: "number"
                },
                maxLength: {
                    $ref: "#/$defs/nonNegativeInteger"
                },
                minLength: {
                    $ref: "#/$defs/nonNegativeIntegerDefault0"
                },
                pattern: {
                    type: "string",
                    format: "regex"
                },
                maxItems: {
                    $ref: "#/$defs/nonNegativeInteger"
                },
                minItems: {
                    $ref: "#/$defs/nonNegativeIntegerDefault0"
                },
                uniqueItems: {
                    type: "boolean",
                    default: false
                },
                maxContains: {
                    $ref: "#/$defs/nonNegativeInteger"
                },
                minContains: {
                    $ref: "#/$defs/nonNegativeInteger",
                    default: 1
                },
                maxProperties: {
                    $ref: "#/$defs/nonNegativeInteger"
                },
                minProperties: {
                    $ref: "#/$defs/nonNegativeIntegerDefault0"
                },
                required: {
                    $ref: "#/$defs/stringArray"
                },
                dependentRequired: {
                    type: "object",
                    additionalProperties: {
                        $ref: "#/$defs/stringArray"
                    }
                }
            },
            $defs: {
                nonNegativeInteger: {
                    type: "integer",
                    minimum: 0
                },
                nonNegativeIntegerDefault0: {
                    $ref: "#/$defs/nonNegativeInteger",
                    default: 0
                },
                simpleTypes: {
                    enum: [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                    ]
                },
                stringArray: {
                    type: "array",
                    items: {
                        type: "string"
                    },
                    uniqueItems: true,
                    default: []
                }
            }
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/index.js
var require_json_schema_2020_12 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/refs/json-schema-2020-12/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var metaSchema = require_schema2();
        var applicator = require_applicator3();
        var unevaluated = require_unevaluated2();
        var content = require_content2();
        var core = require_core4();
        var format5 = require_format_annotation();
        var metadata = require_meta_data2();
        var validation = require_validation3();
        var META_SUPPORT_DATA = [
            "/properties"
        ];
        function addMetaSchema2020($data) {
            ;
            [
                metaSchema,
                applicator,
                unevaluated,
                content,
                core,
                with$data(this, format5),
                metadata,
                with$data(this, validation)
            ].forEach((sch)=>this.addMetaSchema(sch, void 0, false));
            return this;
            function with$data(ajv2, sch) {
                return $data ? ajv2.$dataMetaSchema(sch, META_SUPPORT_DATA) : sch;
            }
        }
        exports.default = addMetaSchema2020;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv/dist/2020.js
var require__2 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv/dist/2020.js" (exports, module) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = exports.Ajv2020 = void 0;
        var core_1 = require_core();
        var draft2020_1 = require_draft2020();
        var discriminator_1 = require_discriminator();
        var json_schema_2020_12_1 = require_json_schema_2020_12();
        var META_SCHEMA_ID = "https://json-schema.org/draft/2020-12/schema";
        var Ajv20202 = class extends core_1.default {
            _addVocabularies() {
                super._addVocabularies();
                draft2020_1.default.forEach((v)=>this.addVocabulary(v));
                if (this.opts.discriminator) this.addKeyword(discriminator_1.default);
            }
            _addDefaultMetaSchema() {
                super._addDefaultMetaSchema();
                const { $data, meta } = this.opts;
                if (!meta) return;
                json_schema_2020_12_1.default.call(this, $data);
                this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
            }
            defaultMeta() {
                return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0);
            }
            constructor(opts = {}){
                super({
                    ...opts,
                    dynamicRef: true,
                    next: true,
                    unevaluated: true
                });
            }
        };
        exports.Ajv2020 = Ajv20202;
        module.exports = exports = Ajv20202;
        module.exports.Ajv2020 = Ajv20202;
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = Ajv20202;
        var validate_1 = require_validate();
        Object.defineProperty(exports, "KeywordCxt", {
            enumerable: true,
            get: function() {
                return validate_1.KeywordCxt;
            }
        });
        var codegen_1 = require_codegen();
        Object.defineProperty(exports, "_", {
            enumerable: true,
            get: function() {
                return codegen_1._;
            }
        });
        Object.defineProperty(exports, "str", {
            enumerable: true,
            get: function() {
                return codegen_1.str;
            }
        });
        Object.defineProperty(exports, "stringify", {
            enumerable: true,
            get: function() {
                return codegen_1.stringify;
            }
        });
        Object.defineProperty(exports, "nil", {
            enumerable: true,
            get: function() {
                return codegen_1.nil;
            }
        });
        Object.defineProperty(exports, "Name", {
            enumerable: true,
            get: function() {
                return codegen_1.Name;
            }
        });
        Object.defineProperty(exports, "CodeGen", {
            enumerable: true,
            get: function() {
                return codegen_1.CodeGen;
            }
        });
        var validation_error_1 = require_validation_error();
        Object.defineProperty(exports, "ValidationError", {
            enumerable: true,
            get: function() {
                return validation_error_1.default;
            }
        });
        var ref_error_1 = require_ref_error();
        Object.defineProperty(exports, "MissingRefError", {
            enumerable: true,
            get: function() {
                return ref_error_1.default;
            }
        });
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/vocabulary/core.js
var require_core5 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/vocabulary/core.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var ref_1 = require_ref();
        var core = [
            "$schema",
            "id",
            "$defs",
            {
                keyword: "$comment"
            },
            "definitions",
            ref_1.default
        ];
        exports.default = core;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/vocabulary/validation/limitNumber.js
var require_limitNumber2 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/vocabulary/validation/limitNumber.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var core_1 = require_core();
        var codegen_1 = require_codegen();
        var ops = codegen_1.operators;
        var KWDs = {
            maximum: {
                exclusive: "exclusiveMaximum",
                ops: [
                    {
                        okStr: "<=",
                        ok: ops.LTE,
                        fail: ops.GT
                    },
                    {
                        okStr: "<",
                        ok: ops.LT,
                        fail: ops.GTE
                    }
                ]
            },
            minimum: {
                exclusive: "exclusiveMinimum",
                ops: [
                    {
                        okStr: ">=",
                        ok: ops.GTE,
                        fail: ops.LT
                    },
                    {
                        okStr: ">",
                        ok: ops.GT,
                        fail: ops.LTE
                    }
                ]
            }
        };
        var error = {
            message: (cxt)=>core_1.str`must be ${kwdOp(cxt).okStr} ${cxt.schemaCode}`,
            params: (cxt)=>core_1._`{comparison: ${kwdOp(cxt).okStr}, limit: ${cxt.schemaCode}}`
        };
        var def = {
            keyword: Object.keys(KWDs),
            type: "number",
            schemaType: "number",
            $data: true,
            error,
            code (cxt) {
                const { data, schemaCode } = cxt;
                cxt.fail$data(core_1._`${data} ${kwdOp(cxt).fail} ${schemaCode} || isNaN(${data})`);
            }
        };
        function kwdOp(cxt) {
            var _a;
            const keyword = cxt.keyword;
            const opsIdx = ((_a = cxt.parentSchema) === null || _a === void 0 ? void 0 : _a[KWDs[keyword].exclusive]) ? 1 : 0;
            return KWDs[keyword].ops[opsIdx];
        }
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/vocabulary/validation/limitNumberExclusive.js
var require_limitNumberExclusive = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/vocabulary/validation/limitNumberExclusive.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var KWDs = {
            exclusiveMaximum: "maximum",
            exclusiveMinimum: "minimum"
        };
        var def = {
            keyword: Object.keys(KWDs),
            type: "number",
            schemaType: "boolean",
            code ({ keyword, parentSchema }) {
                const limitKwd = KWDs[keyword];
                if (parentSchema[limitKwd] === void 0) {
                    throw new Error(`${keyword} can only be used with ${limitKwd}`);
                }
            }
        };
        exports.default = def;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/vocabulary/validation/index.js
var require_validation4 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/vocabulary/validation/index.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var limitNumber_1 = require_limitNumber2();
        var limitNumberExclusive_1 = require_limitNumberExclusive();
        var multipleOf_1 = require_multipleOf();
        var limitLength_1 = require_limitLength();
        var pattern_1 = require_pattern();
        var limitProperties_1 = require_limitProperties();
        var required_1 = require_required();
        var limitItems_1 = require_limitItems();
        var uniqueItems_1 = require_uniqueItems();
        var const_1 = require_const();
        var enum_1 = require_enum();
        var validation = [
            // number
            limitNumber_1.default,
            limitNumberExclusive_1.default,
            multipleOf_1.default,
            // string
            limitLength_1.default,
            pattern_1.default,
            // object
            limitProperties_1.default,
            required_1.default,
            // array
            limitItems_1.default,
            uniqueItems_1.default,
            // any
            {
                keyword: "type",
                schemaType: [
                    "string",
                    "array"
                ]
            },
            {
                keyword: "nullable",
                schemaType: "boolean"
            },
            const_1.default,
            enum_1.default
        ];
        exports.default = validation;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/vocabulary/draft4.js
var require_draft4 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/vocabulary/draft4.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var core_1 = require_core5();
        var validation_1 = require_validation4();
        var applicator_1 = require_applicator();
        var format_1 = require_format2();
        var metadataVocabulary = [
            "title",
            "description",
            "default"
        ];
        var draft4Vocabularies = [
            core_1.default,
            validation_1.default,
            applicator_1.default(),
            format_1.default,
            metadataVocabulary
        ];
        exports.default = draft4Vocabularies;
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/refs/json-schema-draft-04.json
var require_json_schema_draft_04 = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/refs/json-schema-draft-04.json" (exports, module) {
        module.exports = {
            id: "http://json-schema.org/draft-04/schema#",
            $schema: "http://json-schema.org/draft-04/schema#",
            description: "Core schema meta-schema",
            definitions: {
                schemaArray: {
                    type: "array",
                    minItems: 1,
                    items: {
                        $ref: "#"
                    }
                },
                positiveInteger: {
                    type: "integer",
                    minimum: 0
                },
                positiveIntegerDefault0: {
                    allOf: [
                        {
                            $ref: "#/definitions/positiveInteger"
                        },
                        {
                            default: 0
                        }
                    ]
                },
                simpleTypes: {
                    enum: [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                    ]
                },
                stringArray: {
                    type: "array",
                    items: {
                        type: "string"
                    },
                    minItems: 1,
                    uniqueItems: true
                }
            },
            type: "object",
            properties: {
                id: {
                    type: "string",
                    format: "uri"
                },
                $schema: {
                    type: "string",
                    format: "uri"
                },
                title: {
                    type: "string"
                },
                description: {
                    type: "string"
                },
                default: {},
                multipleOf: {
                    type: "number",
                    minimum: 0,
                    exclusiveMinimum: true
                },
                maximum: {
                    type: "number"
                },
                exclusiveMaximum: {
                    type: "boolean",
                    default: false
                },
                minimum: {
                    type: "number"
                },
                exclusiveMinimum: {
                    type: "boolean",
                    default: false
                },
                maxLength: {
                    $ref: "#/definitions/positiveInteger"
                },
                minLength: {
                    $ref: "#/definitions/positiveIntegerDefault0"
                },
                pattern: {
                    type: "string",
                    format: "regex"
                },
                additionalItems: {
                    anyOf: [
                        {
                            type: "boolean"
                        },
                        {
                            $ref: "#"
                        }
                    ],
                    default: {}
                },
                items: {
                    anyOf: [
                        {
                            $ref: "#"
                        },
                        {
                            $ref: "#/definitions/schemaArray"
                        }
                    ],
                    default: {}
                },
                maxItems: {
                    $ref: "#/definitions/positiveInteger"
                },
                minItems: {
                    $ref: "#/definitions/positiveIntegerDefault0"
                },
                uniqueItems: {
                    type: "boolean",
                    default: false
                },
                maxProperties: {
                    $ref: "#/definitions/positiveInteger"
                },
                minProperties: {
                    $ref: "#/definitions/positiveIntegerDefault0"
                },
                required: {
                    $ref: "#/definitions/stringArray"
                },
                additionalProperties: {
                    anyOf: [
                        {
                            type: "boolean"
                        },
                        {
                            $ref: "#"
                        }
                    ],
                    default: {}
                },
                definitions: {
                    type: "object",
                    additionalProperties: {
                        $ref: "#"
                    },
                    default: {}
                },
                properties: {
                    type: "object",
                    additionalProperties: {
                        $ref: "#"
                    },
                    default: {}
                },
                patternProperties: {
                    type: "object",
                    additionalProperties: {
                        $ref: "#"
                    },
                    default: {}
                },
                dependencies: {
                    type: "object",
                    additionalProperties: {
                        anyOf: [
                            {
                                $ref: "#"
                            },
                            {
                                $ref: "#/definitions/stringArray"
                            }
                        ]
                    }
                },
                enum: {
                    type: "array",
                    minItems: 1,
                    uniqueItems: true
                },
                type: {
                    anyOf: [
                        {
                            $ref: "#/definitions/simpleTypes"
                        },
                        {
                            type: "array",
                            items: {
                                $ref: "#/definitions/simpleTypes"
                            },
                            minItems: 1,
                            uniqueItems: true
                        }
                    ]
                },
                allOf: {
                    $ref: "#/definitions/schemaArray"
                },
                anyOf: {
                    $ref: "#/definitions/schemaArray"
                },
                oneOf: {
                    $ref: "#/definitions/schemaArray"
                },
                not: {
                    $ref: "#"
                }
            },
            dependencies: {
                exclusiveMaximum: [
                    "maximum"
                ],
                exclusiveMinimum: [
                    "minimum"
                ]
            },
            default: {}
        };
    }
});
// ../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/index.js
var require_dist = __commonJS({
    "../../node_modules/yaml-language-server/node_modules/ajv-draft-04/dist/index.js" (exports, module) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
        var core_1 = require_core();
        var draft4_1 = require_draft4();
        var discriminator_1 = require_discriminator();
        var draft4MetaSchema = require_json_schema_draft_04();
        var META_SUPPORT_DATA = [
            "/properties"
        ];
        var META_SCHEMA_ID = "http://json-schema.org/draft-04/schema";
        var Ajv2 = class extends core_1.default {
            _addVocabularies() {
                super._addVocabularies();
                draft4_1.default.forEach((v)=>this.addVocabulary(v));
                if (this.opts.discriminator) this.addKeyword(discriminator_1.default);
            }
            _addDefaultMetaSchema() {
                super._addDefaultMetaSchema();
                if (!this.opts.meta) return;
                const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft4MetaSchema, META_SUPPORT_DATA) : draft4MetaSchema;
                this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
                this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
            }
            defaultMeta() {
                return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : void 0);
            }
            constructor(opts = {}){
                super({
                    ...opts,
                    schemaId: "id"
                });
            }
        };
        module.exports = exports = Ajv2;
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = Ajv2;
        var core_2 = require_core();
        Object.defineProperty(exports, "KeywordCxt", {
            enumerable: true,
            get: function() {
                return core_2.KeywordCxt;
            }
        });
        var core_3 = require_core();
        Object.defineProperty(exports, "_", {
            enumerable: true,
            get: function() {
                return core_3._;
            }
        });
        Object.defineProperty(exports, "str", {
            enumerable: true,
            get: function() {
                return core_3.str;
            }
        });
        Object.defineProperty(exports, "stringify", {
            enumerable: true,
            get: function() {
                return core_3.stringify;
            }
        });
        Object.defineProperty(exports, "nil", {
            enumerable: true,
            get: function() {
                return core_3.nil;
            }
        });
        Object.defineProperty(exports, "Name", {
            enumerable: true,
            get: function() {
                return core_3.Name;
            }
        });
        Object.defineProperty(exports, "CodeGen", {
            enumerable: true,
            get: function() {
                return core_3.CodeGen;
            }
        });
    }
});
// ../../node_modules/prettier/standalone.js
var require_standalone = __commonJS({
    "../../node_modules/prettier/standalone.js" (exports, module) {
        (function(t1) {
            function e() {
                var o = t1();
                return o.default || o;
            }
            if (typeof exports == "object" && typeof module == "object") module.exports = e();
            else if (typeof define == "function" && __webpack_require__.amdO) define(e);
            else {
                var f2 = typeof globalThis < "u" ? globalThis : typeof __webpack_require__.g < "u" ? __webpack_require__.g : typeof self < "u" ? self : this || {};
                f2.prettier = e();
            }
        })(function() {
            "use strict";
            var Au = Object.create;
            var Me = Object.defineProperty;
            var vu = Object.getOwnPropertyDescriptor;
            var Bu = Object.getOwnPropertyNames;
            var wu = Object.getPrototypeOf, _u = Object.prototype.hasOwnProperty;
            var fr = (e)=>{
                throw TypeError(e);
            };
            var dr = (e, t1)=>()=>(t1 || e((t1 = {
                        exports: {}
                    }).exports, t1), t1.exports), vt = (e, t1)=>{
                for(var r in t1)Me(e, r, {
                    get: t1[r],
                    enumerable: true
                });
            }, pr = (e, t1, r, n)=>{
                if (t1 && typeof t1 == "object" || typeof t1 == "function") for (let u of Bu(t1))!_u.call(e, u) && u !== r && Me(e, u, {
                    get: ()=>t1[u],
                    enumerable: !(n = vu(t1, u)) || n.enumerable
                });
                return e;
            };
            var Ve = (e, t1, r)=>(r = e != null ? Au(wu(e)) : {}, pr(t1 || !e || !e.__esModule ? Me(r, "default", {
                    value: e,
                    enumerable: true
                }) : r, e)), xu = (e)=>pr(Me({}, "__esModule", {
                    value: true
                }), e);
            var bu = (e, t1, r)=>t1.has(e) || fr("Cannot " + r);
            var Fr = (e, t1, r)=>t1.has(e) ? fr("Cannot add the same private member more than once") : t1 instanceof WeakSet ? t1.add(e) : t1.set(e, r);
            var pe = (e, t1, r)=>(bu(e, t1, "access private method"), r);
            var st = dr((la, mn)=>{
                "use strict";
                var Fn = new Proxy(String, {
                    get: ()=>Fn
                });
                mn.exports = Fn;
            });
            var $n = dr((ur)=>{
                "use strict";
                Object.defineProperty(ur, "__esModule", {
                    value: true
                });
                function wi() {
                    return new Proxy({}, {
                        get: ()=>(e)=>e
                    });
                }
                var Wn = /\r\n|[\n\r\u2028\u2029]/;
                function _i(e, t1, r) {
                    let n = Object.assign({
                        column: 0,
                        line: -1
                    }, e.start), u = Object.assign({}, n, e.end), { linesAbove: i = 2, linesBelow: o = 3 } = r || {}, s = n.line, a2 = n.column, D = u.line, l = u.column, p = Math.max(s - (i + 1), 0), f2 = Math.min(t1.length, D + o);
                    s === -1 && (p = 0), D === -1 && (f2 = t1.length);
                    let d = D - s, c = {};
                    if (d) for(let F = 0; F <= d; F++){
                        let m = F + s;
                        if (!a2) c[m] = true;
                        else if (F === 0) {
                            let h = t1[m - 1].length;
                            c[m] = [
                                a2,
                                h - a2 + 1
                            ];
                        } else if (F === d) c[m] = [
                            0,
                            l
                        ];
                        else {
                            let h = t1[m - F].length;
                            c[m] = [
                                0,
                                h
                            ];
                        }
                    }
                    else a2 === l ? a2 ? c[s] = [
                        a2,
                        0
                    ] : c[s] = true : c[s] = [
                        a2,
                        l - a2
                    ];
                    return {
                        start: p,
                        end: f2,
                        markerLines: c
                    };
                }
                function xi(e, t1, r = {}) {
                    let u = wi(false), i = e.split(Wn), { start: o, end: s, markerLines: a2 } = _i(t1, i, r), D = t1.start && typeof t1.start.column == "number", l = String(s).length, f2 = e.split(Wn, s).slice(o, s).map((d, c)=>{
                        let F = o + 1 + c, h = ` ${` ${F}`.slice(-l)} |`, C = a2[F], v = !a2[F + 1];
                        if (C) {
                            let E = "";
                            if (Array.isArray(C)) {
                                let g = d.slice(0, Math.max(C[0] - 1, 0)).replace(/[^\t]/g, " "), j = C[1] || 1;
                                E = [
                                    `
 `,
                                    u.gutter(h.replace(/\d/g, " ")),
                                    " ",
                                    g,
                                    u.marker("^").repeat(j)
                                ].join(""), v && r.message && (E += " " + u.message(r.message));
                            }
                            return [
                                u.marker(">"),
                                u.gutter(h),
                                d.length > 0 ? ` ${d}` : "",
                                E
                            ].join("");
                        } else return ` ${u.gutter(h)}${d.length > 0 ? ` ${d}` : ""}`;
                    }).join(`
`);
                    return r.message && !D && (f2 = `${" ".repeat(l + 1)}${r.message}
${f2}`), f2;
                }
                ur.codeFrameColumns = xi;
            });
            var co = {};
            vt(co, {
                __debug: ()=>lo,
                check: ()=>ao,
                doc: ()=>Dr,
                format: ()=>yu,
                formatWithCursor: ()=>gu,
                getSupportInfo: ()=>Do,
                util: ()=>cr,
                version: ()=>cu
            });
            var Nu = (e, t1, r, n)=>{
                if (!(e && t1 == null)) return t1.replaceAll ? t1.replaceAll(r, n) : r.global ? t1.replace(r, n) : t1.split(r).join(n);
            }, ne = Nu;
            function U() {}
            U.prototype = {
                diff: function(t1, r) {
                    var n, u = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, i = u.callback;
                    typeof u == "function" && (i = u, u = {});
                    var o = this;
                    function s(E) {
                        return E = o.postProcess(E, u), i ? (setTimeout(function() {
                            i(E);
                        }, 0), true) : E;
                    }
                    t1 = this.castInput(t1, u), r = this.castInput(r, u), t1 = this.removeEmpty(this.tokenize(t1, u)), r = this.removeEmpty(this.tokenize(r, u));
                    var a2 = r.length, D = t1.length, l = 1, p = a2 + D;
                    u.maxEditLength != null && (p = Math.min(p, u.maxEditLength));
                    var f2 = (n = u.timeout) !== null && n !== void 0 ? n : 1 / 0, d = Date.now() + f2, c = [
                        {
                            oldPos: -1,
                            lastComponent: void 0
                        }
                    ], F = this.extractCommon(c[0], r, t1, 0, u);
                    if (c[0].oldPos + 1 >= D && F + 1 >= a2) return s(mr(o, c[0].lastComponent, r, t1, o.useLongestToken));
                    var m = -1 / 0, h = 1 / 0;
                    function C() {
                        for(var E = Math.max(m, -l); E <= Math.min(h, l); E += 2){
                            var g = void 0, j = c[E - 1], b = c[E + 1];
                            j && (c[E - 1] = void 0);
                            var X = false;
                            if (b) {
                                var ae = b.oldPos - E;
                                X = b && 0 <= ae && ae < a2;
                            }
                            var $e = j && j.oldPos + 1 < D;
                            if (!X && !$e) {
                                c[E] = void 0;
                                continue;
                            }
                            if (!$e || X && j.oldPos < b.oldPos ? g = o.addToPath(b, true, false, 0, u) : g = o.addToPath(j, false, true, 1, u), F = o.extractCommon(g, r, t1, E, u), g.oldPos + 1 >= D && F + 1 >= a2) return s(mr(o, g.lastComponent, r, t1, o.useLongestToken));
                            c[E] = g, g.oldPos + 1 >= D && (h = Math.min(h, E - 1)), F + 1 >= a2 && (m = Math.max(m, E + 1));
                        }
                        l++;
                    }
                    if (i) (function E() {
                        setTimeout(function() {
                            if (l > p || Date.now() > d) return i();
                            C() || E();
                        }, 0);
                    })();
                    else for(; l <= p && Date.now() <= d;){
                        var v = C();
                        if (v) return v;
                    }
                },
                addToPath: function(t1, r, n, u, i) {
                    var o = t1.lastComponent;
                    return o && !i.oneChangePerToken && o.added === r && o.removed === n ? {
                        oldPos: t1.oldPos + u,
                        lastComponent: {
                            count: o.count + 1,
                            added: r,
                            removed: n,
                            previousComponent: o.previousComponent
                        }
                    } : {
                        oldPos: t1.oldPos + u,
                        lastComponent: {
                            count: 1,
                            added: r,
                            removed: n,
                            previousComponent: o
                        }
                    };
                },
                extractCommon: function(t1, r, n, u, i) {
                    for(var o = r.length, s = n.length, a2 = t1.oldPos, D = a2 - u, l = 0; D + 1 < o && a2 + 1 < s && this.equals(n[a2 + 1], r[D + 1], i);)D++, a2++, l++, i.oneChangePerToken && (t1.lastComponent = {
                        count: 1,
                        previousComponent: t1.lastComponent,
                        added: false,
                        removed: false
                    });
                    return l && !i.oneChangePerToken && (t1.lastComponent = {
                        count: l,
                        previousComponent: t1.lastComponent,
                        added: false,
                        removed: false
                    }), t1.oldPos = a2, D;
                },
                equals: function(t1, r, n) {
                    return n.comparator ? n.comparator(t1, r) : t1 === r || n.ignoreCase && t1.toLowerCase() === r.toLowerCase();
                },
                removeEmpty: function(t1) {
                    for(var r = [], n = 0; n < t1.length; n++)t1[n] && r.push(t1[n]);
                    return r;
                },
                castInput: function(t1) {
                    return t1;
                },
                tokenize: function(t1) {
                    return Array.from(t1);
                },
                join: function(t1) {
                    return t1.join("");
                },
                postProcess: function(t1) {
                    return t1;
                }
            };
            function mr(e, t1, r, n, u) {
                for(var i = [], o; t1;)i.push(t1), o = t1.previousComponent, delete t1.previousComponent, t1 = o;
                i.reverse();
                for(var s = 0, a2 = i.length, D = 0, l = 0; s < a2; s++){
                    var p = i[s];
                    if (p.removed) p.value = e.join(n.slice(l, l + p.count)), l += p.count;
                    else {
                        if (!p.added && u) {
                            var f2 = r.slice(D, D + p.count);
                            f2 = f2.map(function(d, c) {
                                var F = n[l + c];
                                return F.length > d.length ? F : d;
                            }), p.value = e.join(f2);
                        } else p.value = e.join(r.slice(D, D + p.count));
                        D += p.count, p.added || (l += p.count);
                    }
                }
                return i;
            }
            var ho = new U();
            function hr(e, t1) {
                var r;
                for(r = 0; r < e.length && r < t1.length; r++)if (e[r] != t1[r]) return e.slice(0, r);
                return e.slice(0, r);
            }
            function Er(e, t1) {
                var r;
                if (!e || !t1 || e[e.length - 1] != t1[t1.length - 1]) return "";
                for(r = 0; r < e.length && r < t1.length; r++)if (e[e.length - (r + 1)] != t1[t1.length - (r + 1)]) return e.slice(-r);
                return e.slice(-r);
            }
            function Bt(e, t1, r) {
                if (e.slice(0, t1.length) != t1) throw Error("string ".concat(JSON.stringify(e), " doesn't start with prefix ").concat(JSON.stringify(t1), "; this is a bug"));
                return r + e.slice(t1.length);
            }
            function wt(e, t1, r) {
                if (!t1) return e + r;
                if (e.slice(-t1.length) != t1) throw Error("string ".concat(JSON.stringify(e), " doesn't end with suffix ").concat(JSON.stringify(t1), "; this is a bug"));
                return e.slice(0, -t1.length) + r;
            }
            function _e(e, t1) {
                return Bt(e, t1, "");
            }
            function Ue(e, t1) {
                return wt(e, t1, "");
            }
            function Cr(e, t1) {
                return t1.slice(0, Ou(e, t1));
            }
            function Ou(e, t1) {
                var r = 0;
                e.length > t1.length && (r = e.length - t1.length);
                var n = t1.length;
                e.length < t1.length && (n = e.length);
                var u = Array(n), i = 0;
                u[0] = 0;
                for(var o = 1; o < n; o++){
                    for(t1[o] == t1[i] ? u[o] = u[i] : u[o] = i; i > 0 && t1[o] != t1[i];)i = u[i];
                    t1[o] == t1[i] && i++;
                }
                i = 0;
                for(var s = r; s < e.length; s++){
                    for(; i > 0 && e[s] != t1[i];)i = u[i];
                    e[s] == t1[i] && i++;
                }
                return i;
            }
            var ze = "a-zA-Z0-9_\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}", Su = new RegExp("[".concat(ze, "]+|\\s+|[^").concat(ze, "]"), "ug"), Ke = new U();
            Ke.equals = function(e, t1, r) {
                return r.ignoreCase && (e = e.toLowerCase(), t1 = t1.toLowerCase()), e.trim() === t1.trim();
            };
            Ke.tokenize = function(e) {
                var t1 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r;
                if (t1.intlSegmenter) {
                    if (t1.intlSegmenter.resolvedOptions().granularity != "word") throw new Error('The segmenter passed must have a granularity of "word"');
                    r = Array.from(t1.intlSegmenter.segment(e), function(i) {
                        return i.segment;
                    });
                } else r = e.match(Su) || [];
                var n = [], u = null;
                return r.forEach(function(i) {
                    /\s/.test(i) ? u == null ? n.push(i) : n.push(n.pop() + i) : /\s/.test(u) ? n[n.length - 1] == u ? n.push(n.pop() + i) : n.push(u + i) : n.push(i), u = i;
                }), n;
            };
            Ke.join = function(e) {
                return e.map(function(t1, r) {
                    return r == 0 ? t1 : t1.replace(/^\s+/, "");
                }).join("");
            };
            Ke.postProcess = function(e, t1) {
                if (!e || t1.oneChangePerToken) return e;
                var r = null, n = null, u = null;
                return e.forEach(function(i) {
                    i.added ? n = i : i.removed ? u = i : ((n || u) && gr(r, u, n, i), r = i, n = null, u = null);
                }), (n || u) && gr(r, u, n, null), e;
            };
            function gr(e, t1, r, n) {
                if (t1 && r) {
                    var u = t1.value.match(/^\s*/)[0], i = t1.value.match(/\s*$/)[0], o = r.value.match(/^\s*/)[0], s = r.value.match(/\s*$/)[0];
                    if (e) {
                        var a2 = hr(u, o);
                        e.value = wt(e.value, o, a2), t1.value = _e(t1.value, a2), r.value = _e(r.value, a2);
                    }
                    if (n) {
                        var D = Er(i, s);
                        n.value = Bt(n.value, s, D), t1.value = Ue(t1.value, D), r.value = Ue(r.value, D);
                    }
                } else if (r) e && (r.value = r.value.replace(/^\s*/, "")), n && (n.value = n.value.replace(/^\s*/, ""));
                else if (e && n) {
                    var l = n.value.match(/^\s*/)[0], p = t1.value.match(/^\s*/)[0], f2 = t1.value.match(/\s*$/)[0], d = hr(l, p);
                    t1.value = _e(t1.value, d);
                    var c = Er(_e(l, d), f2);
                    t1.value = Ue(t1.value, c), n.value = Bt(n.value, l, c), e.value = wt(e.value, l, l.slice(0, l.length - c.length));
                } else if (n) {
                    var F = n.value.match(/^\s*/)[0], m = t1.value.match(/\s*$/)[0], h = Cr(m, F);
                    t1.value = Ue(t1.value, h);
                } else if (e) {
                    var C = e.value.match(/\s*$/)[0], v = t1.value.match(/^\s*/)[0], E = Cr(C, v);
                    t1.value = _e(t1.value, E);
                }
            }
            var Tu = new U();
            Tu.tokenize = function(e) {
                var t1 = new RegExp("(\\r?\\n)|[".concat(ze, "]+|[^\\S\\n\\r]+|[^").concat(ze, "]"), "ug");
                return e.match(t1) || [];
            };
            var bt = new U();
            bt.tokenize = function(e, t1) {
                t1.stripTrailingCr && (e = e.replace(/\r\n/g, `
`));
                var r = [], n = e.split(/(\n|\r\n)/);
                n[n.length - 1] || n.pop();
                for(var u = 0; u < n.length; u++){
                    var i = n[u];
                    u % 2 && !t1.newlineIsToken ? r[r.length - 1] += i : r.push(i);
                }
                return r;
            };
            bt.equals = function(e, t1, r) {
                return r.ignoreWhitespace ? ((!r.newlineIsToken || !e.includes(`
`)) && (e = e.trim()), (!r.newlineIsToken || !t1.includes(`
`)) && (t1 = t1.trim())) : r.ignoreNewlineAtEof && !r.newlineIsToken && (e.endsWith(`
`) && (e = e.slice(0, -1)), t1.endsWith(`
`) && (t1 = t1.slice(0, -1))), U.prototype.equals.call(this, e, t1, r);
            };
            var ku = new U();
            ku.tokenize = function(e) {
                return e.split(/(\S.+?[.!?])(?=\s+|$)/);
            };
            var Lu = new U();
            Lu.tokenize = function(e) {
                return e.split(/([{}:;,]|\s+)/);
            };
            function _t(e) {
                "@babel/helpers - typeof";
                return _t = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t1) {
                    return typeof t1;
                } : function(t1) {
                    return t1 && typeof Symbol == "function" && t1.constructor === Symbol && t1 !== Symbol.prototype ? "symbol" : typeof t1;
                }, _t(e);
            }
            var xe = new U();
            xe.useLongestToken = true;
            xe.tokenize = bt.tokenize;
            xe.castInput = function(e, t1) {
                var r = t1.undefinedReplacement, n = t1.stringifyReplacer, u = n === void 0 ? function(i, o) {
                    return typeof o > "u" ? r : o;
                } : n;
                return typeof e == "string" ? e : JSON.stringify(xt(e, null, null, u), u, "  ");
            };
            xe.equals = function(e, t1, r) {
                return U.prototype.equals.call(xe, e.replace(/,([\r\n])/g, "$1"), t1.replace(/,([\r\n])/g, "$1"), r);
            };
            function xt(e, t1, r, n, u) {
                t1 = t1 || [], r = r || [], n && (e = n(u, e));
                var i;
                for(i = 0; i < t1.length; i += 1)if (t1[i] === e) return r[i];
                var o;
                if (Object.prototype.toString.call(e) === "[object Array]") {
                    for(t1.push(e), o = new Array(e.length), r.push(o), i = 0; i < e.length; i += 1)o[i] = xt(e[i], t1, r, n, u);
                    return t1.pop(), r.pop(), o;
                }
                if (e && e.toJSON && (e = e.toJSON()), _t(e) === "object" && e !== null) {
                    t1.push(e), o = {}, r.push(o);
                    var s = [], a2;
                    for(a2 in e)Object.prototype.hasOwnProperty.call(e, a2) && s.push(a2);
                    for(s.sort(), i = 0; i < s.length; i += 1)a2 = s[i], o[a2] = xt(e[a2], t1, r, n, a2);
                    t1.pop(), r.pop();
                } else o = e;
                return o;
            }
            var Ge = new U();
            Ge.tokenize = function(e) {
                return e.slice();
            };
            Ge.join = Ge.removeEmpty = function(e) {
                return e;
            };
            function yr(e, t1, r) {
                return Ge.diff(e, t1, r);
            }
            function Ar(e) {
                let t1 = e.indexOf("\r");
                return t1 !== -1 ? e.charAt(t1 + 1) === `
` ? "crlf" : "cr" : "lf";
            }
            function be(e) {
                switch(e){
                    case "cr":
                        return "\r";
                    case "crlf":
                        return `\r
`;
                    default:
                        return `
`;
                }
            }
            function Nt(e, t1) {
                let r;
                switch(t1){
                    case `
`:
                        r = /\n/gu;
                        break;
                    case "\r":
                        r = /\r/gu;
                        break;
                    case `\r
`:
                        r = /\r\n/gu;
                        break;
                    default:
                        throw new Error(`Unexpected "eol" ${JSON.stringify(t1)}.`);
                }
                let n = e.match(r);
                return n ? n.length : 0;
            }
            function vr(e) {
                return ne(false, e, /\r\n?/gu, `
`);
            }
            var $ = "string", H = "array", z = "cursor", T = "indent", k = "align", L = "trim", B = "group", N = "fill", w = "if-break", P = "indent-if-break", I = "line-suffix", R = "line-suffix-boundary", y = "line", O = "label", _2 = "break-parent", Je = /* @__PURE__ */ new Set([
                z,
                T,
                k,
                L,
                B,
                N,
                w,
                P,
                I,
                R,
                y,
                O,
                _2
            ]);
            var Pu = (e, t1, r)=>{
                if (!(e && t1 == null)) return Array.isArray(t1) || typeof t1 == "string" ? t1[r < 0 ? t1.length + r : r] : t1.at(r);
            }, A2 = Pu;
            function Iu(e) {
                if (typeof e == "string") return $;
                if (Array.isArray(e)) return H;
                if (!e) return;
                let { type: t1 } = e;
                if (Je.has(t1)) return t1;
            }
            var M = Iu;
            var Ru = (e)=>new Intl.ListFormat("en-US", {
                    type: "disjunction"
                }).format(e);
            function Yu(e) {
                let t1 = e === null ? "null" : typeof e;
                if (t1 !== "string" && t1 !== "object") return `Unexpected doc '${t1}', 
Expected it to be 'string' or 'object'.`;
                if (M(e)) throw new Error("doc is valid.");
                let r = Object.prototype.toString.call(e);
                if (r !== "[object Object]") return `Unexpected doc '${r}'.`;
                let n = Ru([
                    ...Je
                ].map((u)=>`'${u}'`));
                return `Unexpected doc.type '${e.type}'.
Expected it to be ${n}.`;
            }
            var Ot = class extends Error {
                constructor(t1){
                    super(Yu(t1));
                    __publicField(this, "name", "InvalidDocError");
                    this.doc = t1;
                }
            }, Q = Ot;
            var Br = {};
            function ju(e, t1, r, n) {
                let u = [
                    e
                ];
                for(; u.length > 0;){
                    let i = u.pop();
                    if (i === Br) {
                        r(u.pop());
                        continue;
                    }
                    r && u.push(i, Br);
                    let o = M(i);
                    if (!o) throw new Q(i);
                    if ((t1 == null ? void 0 : t1(i)) !== false) switch(o){
                        case H:
                        case N:
                            {
                                let s = o === H ? i : i.parts;
                                for(let a2 = s.length, D = a2 - 1; D >= 0; --D)u.push(s[D]);
                                break;
                            }
                        case w:
                            u.push(i.flatContents, i.breakContents);
                            break;
                        case B:
                            if (n && i.expandedStates) for(let s = i.expandedStates.length, a2 = s - 1; a2 >= 0; --a2)u.push(i.expandedStates[a2]);
                            else u.push(i.contents);
                            break;
                        case k:
                        case T:
                        case P:
                        case O:
                        case I:
                            u.push(i.contents);
                            break;
                        case $:
                        case z:
                        case L:
                        case R:
                        case y:
                        case _2:
                            break;
                        default:
                            throw new Q(i);
                    }
                }
            }
            var Fe = ju;
            function Oe(e, t1) {
                if (typeof e == "string") return t1(e);
                let r = /* @__PURE__ */ new Map();
                return n(e);
                function n(i) {
                    if (r.has(i)) return r.get(i);
                    let o = u(i);
                    return r.set(i, o), o;
                }
                function u(i) {
                    switch(M(i)){
                        case H:
                            return t1(i.map(n));
                        case N:
                            return t1({
                                ...i,
                                parts: i.parts.map(n)
                            });
                        case w:
                            return t1({
                                ...i,
                                breakContents: n(i.breakContents),
                                flatContents: n(i.flatContents)
                            });
                        case B:
                            {
                                let { expandedStates: o, contents: s } = i;
                                return o ? (o = o.map(n), s = o[0]) : s = n(s), t1({
                                    ...i,
                                    contents: s,
                                    expandedStates: o
                                });
                            }
                        case k:
                        case T:
                        case P:
                        case O:
                        case I:
                            return t1({
                                ...i,
                                contents: n(i.contents)
                            });
                        case $:
                        case z:
                        case L:
                        case R:
                        case y:
                        case _2:
                            return t1(i);
                        default:
                            throw new Q(i);
                    }
                }
            }
            function qe(e, t1, r) {
                let n = r, u = false;
                function i(o) {
                    if (u) return false;
                    let s = t1(o);
                    s !== void 0 && (u = true, n = s);
                }
                return Fe(e, i), n;
            }
            function Hu(e) {
                if (e.type === B && e.break || e.type === y && e.hard || e.type === _2) return true;
            }
            function xr(e) {
                return qe(e, Hu, false);
            }
            function wr(e) {
                if (e.length > 0) {
                    let t1 = A2(false, e, -1);
                    !t1.expandedStates && !t1.break && (t1.break = "propagated");
                }
                return null;
            }
            function br(e) {
                let t1 = /* @__PURE__ */ new Set(), r = [];
                function n(i) {
                    if (i.type === _2 && wr(r), i.type === B) {
                        if (r.push(i), t1.has(i)) return false;
                        t1.add(i);
                    }
                }
                function u(i) {
                    i.type === B && r.pop().break && wr(r);
                }
                Fe(e, n, u, true);
            }
            function Wu(e) {
                return e.type === y && !e.hard ? e.soft ? "" : " " : e.type === w ? e.flatContents : e;
            }
            function Nr(e) {
                return Oe(e, Wu);
            }
            function _r(e) {
                for(e = [
                    ...e
                ]; e.length >= 2 && A2(false, e, -2).type === y && A2(false, e, -1).type === _2;)e.length -= 2;
                if (e.length > 0) {
                    let t1 = Ne(A2(false, e, -1));
                    e[e.length - 1] = t1;
                }
                return e;
            }
            function Ne(e) {
                switch(M(e)){
                    case T:
                    case P:
                    case B:
                    case I:
                    case O:
                        {
                            let t1 = Ne(e.contents);
                            return {
                                ...e,
                                contents: t1
                            };
                        }
                    case w:
                        return {
                            ...e,
                            breakContents: Ne(e.breakContents),
                            flatContents: Ne(e.flatContents)
                        };
                    case N:
                        return {
                            ...e,
                            parts: _r(e.parts)
                        };
                    case H:
                        return _r(e);
                    case $:
                        return e.replace(/[\n\r]*$/u, "");
                    case k:
                    case z:
                    case L:
                    case R:
                    case y:
                    case _2:
                        break;
                    default:
                        throw new Q(e);
                }
                return e;
            }
            function Xe(e) {
                return Ne(Mu(e));
            }
            function $u(e) {
                switch(M(e)){
                    case N:
                        if (e.parts.every((t1)=>t1 === "")) return "";
                        break;
                    case B:
                        if (!e.contents && !e.id && !e.break && !e.expandedStates) return "";
                        if (e.contents.type === B && e.contents.id === e.id && e.contents.break === e.break && e.contents.expandedStates === e.expandedStates) return e.contents;
                        break;
                    case k:
                    case T:
                    case P:
                    case I:
                        if (!e.contents) return "";
                        break;
                    case w:
                        if (!e.flatContents && !e.breakContents) return "";
                        break;
                    case H:
                        {
                            let t1 = [];
                            for (let r of e){
                                if (!r) continue;
                                let [n, ...u] = Array.isArray(r) ? r : [
                                    r
                                ];
                                typeof n == "string" && typeof A2(false, t1, -1) == "string" ? t1[t1.length - 1] += n : t1.push(n), t1.push(...u);
                            }
                            return t1.length === 0 ? "" : t1.length === 1 ? t1[0] : t1;
                        }
                    case $:
                    case z:
                    case L:
                    case R:
                    case y:
                    case O:
                    case _2:
                        break;
                    default:
                        throw new Q(e);
                }
                return e;
            }
            function Mu(e) {
                return Oe(e, (t1)=>$u(t1));
            }
            function Or(e, t1 = Qe) {
                return Oe(e, (r)=>typeof r == "string" ? Se(t1, r.split(`
`)) : r);
            }
            function Vu(e) {
                if (e.type === y) return true;
            }
            function Sr(e) {
                return qe(e, Vu, false);
            }
            function me(e, t1) {
                return e.type === O ? {
                    ...e,
                    contents: t1(e.contents)
                } : t1(e);
            }
            var St = ()=>{}, G = St, Tt = St, Tr = St;
            function le(e) {
                return G(e), {
                    type: T,
                    contents: e
                };
            }
            function De(e, t1) {
                return G(t1), {
                    type: k,
                    contents: t1,
                    n: e
                };
            }
            function kt(e, t1 = {}) {
                return G(e), Tt(t1.expandedStates, true), {
                    type: B,
                    id: t1.id,
                    contents: e,
                    break: !!t1.shouldBreak,
                    expandedStates: t1.expandedStates
                };
            }
            function kr(e) {
                return De(Number.NEGATIVE_INFINITY, e);
            }
            function Lr(e) {
                return De({
                    type: "root"
                }, e);
            }
            function Pr(e) {
                return De(-1, e);
            }
            function Ir(e, t1) {
                return kt(e[0], {
                    ...t1,
                    expandedStates: e
                });
            }
            function Rr(e) {
                return Tr(e), {
                    type: N,
                    parts: e
                };
            }
            function Yr(e, t1 = "", r = {}) {
                return G(e), t1 !== "" && G(t1), {
                    type: w,
                    breakContents: e,
                    flatContents: t1,
                    groupId: r.groupId
                };
            }
            function jr(e, t1) {
                return G(e), {
                    type: P,
                    contents: e,
                    groupId: t1.groupId,
                    negate: t1.negate
                };
            }
            function Te(e) {
                return G(e), {
                    type: I,
                    contents: e
                };
            }
            var Hr = {
                type: R
            }, he = {
                type: _2
            }, Wr = {
                type: L
            }, ke = {
                type: y,
                hard: true
            }, Lt = {
                type: y,
                hard: true,
                literal: true
            }, Ze = {
                type: y
            }, $r = {
                type: y,
                soft: true
            }, K = [
                ke,
                he
            ], Qe = [
                Lt,
                he
            ], Z = {
                type: z
            };
            function Se(e, t1) {
                G(e), Tt(t1);
                let r = [];
                for(let n = 0; n < t1.length; n++)n !== 0 && r.push(e), r.push(t1[n]);
                return r;
            }
            function et(e, t1, r) {
                G(e);
                let n = e;
                if (t1 > 0) {
                    for(let u = 0; u < Math.floor(t1 / r); ++u)n = le(n);
                    n = De(t1 % r, n), n = De(Number.NEGATIVE_INFINITY, n);
                }
                return n;
            }
            function Mr(e, t1) {
                return G(t1), e ? {
                    type: O,
                    label: e,
                    contents: t1
                } : t1;
            }
            function ee(e) {
                var t1;
                if (!e) return "";
                if (Array.isArray(e)) {
                    let r = [];
                    for (let n of e)if (Array.isArray(n)) r.push(...ee(n));
                    else {
                        let u = ee(n);
                        u !== "" && r.push(u);
                    }
                    return r;
                }
                return e.type === w ? {
                    ...e,
                    breakContents: ee(e.breakContents),
                    flatContents: ee(e.flatContents)
                } : e.type === B ? {
                    ...e,
                    contents: ee(e.contents),
                    expandedStates: (t1 = e.expandedStates) == null ? void 0 : t1.map(ee)
                } : e.type === N ? {
                    type: "fill",
                    parts: e.parts.map(ee)
                } : e.contents ? {
                    ...e,
                    contents: ee(e.contents)
                } : e;
            }
            function Vr(e) {
                let t1 = /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ new Set();
                return n(ee(e));
                function n(i, o, s) {
                    var a2, D;
                    if (typeof i == "string") return JSON.stringify(i);
                    if (Array.isArray(i)) {
                        let l = i.map(n).filter(Boolean);
                        return l.length === 1 ? l[0] : `[${l.join(", ")}]`;
                    }
                    if (i.type === y) {
                        let l = ((a2 = s == null ? void 0 : s[o + 1]) == null ? void 0 : a2.type) === _2;
                        return i.literal ? l ? "literalline" : "literallineWithoutBreakParent" : i.hard ? l ? "hardline" : "hardlineWithoutBreakParent" : i.soft ? "softline" : "line";
                    }
                    if (i.type === _2) return ((D = s == null ? void 0 : s[o - 1]) == null ? void 0 : D.type) === y && s[o - 1].hard ? void 0 : "breakParent";
                    if (i.type === L) return "trim";
                    if (i.type === T) return "indent(" + n(i.contents) + ")";
                    if (i.type === k) return i.n === Number.NEGATIVE_INFINITY ? "dedentToRoot(" + n(i.contents) + ")" : i.n < 0 ? "dedent(" + n(i.contents) + ")" : i.n.type === "root" ? "markAsRoot(" + n(i.contents) + ")" : "align(" + JSON.stringify(i.n) + ", " + n(i.contents) + ")";
                    if (i.type === w) return "ifBreak(" + n(i.breakContents) + (i.flatContents ? ", " + n(i.flatContents) : "") + (i.groupId ? (i.flatContents ? "" : ', ""') + `, { groupId: ${u(i.groupId)} }` : "") + ")";
                    if (i.type === P) {
                        let l = [];
                        i.negate && l.push("negate: true"), i.groupId && l.push(`groupId: ${u(i.groupId)}`);
                        let p = l.length > 0 ? `, { ${l.join(", ")} }` : "";
                        return `indentIfBreak(${n(i.contents)}${p})`;
                    }
                    if (i.type === B) {
                        let l = [];
                        i.break && i.break !== "propagated" && l.push("shouldBreak: true"), i.id && l.push(`id: ${u(i.id)}`);
                        let p = l.length > 0 ? `, { ${l.join(", ")} }` : "";
                        return i.expandedStates ? `conditionalGroup([${i.expandedStates.map((f2)=>n(f2)).join(",")}]${p})` : `group(${n(i.contents)}${p})`;
                    }
                    if (i.type === N) return `fill([${i.parts.map((l)=>n(l)).join(", ")}])`;
                    if (i.type === I) return "lineSuffix(" + n(i.contents) + ")";
                    if (i.type === R) return "lineSuffixBoundary";
                    if (i.type === O) return `label(${JSON.stringify(i.label)}, ${n(i.contents)})`;
                    throw new Error("Unknown doc type " + i.type);
                }
                function u(i) {
                    if (typeof i != "symbol") return JSON.stringify(String(i));
                    if (i in t1) return t1[i];
                    let o = i.description || "symbol";
                    for(let s = 0;; s++){
                        let a2 = o + (s > 0 ? ` #${s}` : "");
                        if (!r.has(a2)) return r.add(a2), t1[i] = `Symbol.for(${JSON.stringify(a2)})`;
                    }
                }
            }
            var Ur = ()=>/[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uD83C[\uDFFB-\uDFFF]|\uFE0F)?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE89\uDE8F-\uDEC2\uDEC6\uDECE-\uDEDC\uDEDF-\uDEE9]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g;
            function zr(e) {
                return e === 12288 || e >= 65281 && e <= 65376 || e >= 65504 && e <= 65510;
            }
            function Gr(e) {
                return e >= 4352 && e <= 4447 || e === 8986 || e === 8987 || e === 9001 || e === 9002 || e >= 9193 && e <= 9196 || e === 9200 || e === 9203 || e === 9725 || e === 9726 || e === 9748 || e === 9749 || e >= 9776 && e <= 9783 || e >= 9800 && e <= 9811 || e === 9855 || e >= 9866 && e <= 9871 || e === 9875 || e === 9889 || e === 9898 || e === 9899 || e === 9917 || e === 9918 || e === 9924 || e === 9925 || e === 9934 || e === 9940 || e === 9962 || e === 9970 || e === 9971 || e === 9973 || e === 9978 || e === 9981 || e === 9989 || e === 9994 || e === 9995 || e === 10024 || e === 10060 || e === 10062 || e >= 10067 && e <= 10069 || e === 10071 || e >= 10133 && e <= 10135 || e === 10160 || e === 10175 || e === 11035 || e === 11036 || e === 11088 || e === 11093 || e >= 11904 && e <= 11929 || e >= 11931 && e <= 12019 || e >= 12032 && e <= 12245 || e >= 12272 && e <= 12287 || e >= 12289 && e <= 12350 || e >= 12353 && e <= 12438 || e >= 12441 && e <= 12543 || e >= 12549 && e <= 12591 || e >= 12593 && e <= 12686 || e >= 12688 && e <= 12773 || e >= 12783 && e <= 12830 || e >= 12832 && e <= 12871 || e >= 12880 && e <= 42124 || e >= 42128 && e <= 42182 || e >= 43360 && e <= 43388 || e >= 44032 && e <= 55203 || e >= 63744 && e <= 64255 || e >= 65040 && e <= 65049 || e >= 65072 && e <= 65106 || e >= 65108 && e <= 65126 || e >= 65128 && e <= 65131 || e >= 94176 && e <= 94180 || e === 94192 || e === 94193 || e >= 94208 && e <= 100343 || e >= 100352 && e <= 101589 || e >= 101631 && e <= 101640 || e >= 110576 && e <= 110579 || e >= 110581 && e <= 110587 || e === 110589 || e === 110590 || e >= 110592 && e <= 110882 || e === 110898 || e >= 110928 && e <= 110930 || e === 110933 || e >= 110948 && e <= 110951 || e >= 110960 && e <= 111355 || e >= 119552 && e <= 119638 || e >= 119648 && e <= 119670 || e === 126980 || e === 127183 || e === 127374 || e >= 127377 && e <= 127386 || e >= 127488 && e <= 127490 || e >= 127504 && e <= 127547 || e >= 127552 && e <= 127560 || e === 127568 || e === 127569 || e >= 127584 && e <= 127589 || e >= 127744 && e <= 127776 || e >= 127789 && e <= 127797 || e >= 127799 && e <= 127868 || e >= 127870 && e <= 127891 || e >= 127904 && e <= 127946 || e >= 127951 && e <= 127955 || e >= 127968 && e <= 127984 || e === 127988 || e >= 127992 && e <= 128062 || e === 128064 || e >= 128066 && e <= 128252 || e >= 128255 && e <= 128317 || e >= 128331 && e <= 128334 || e >= 128336 && e <= 128359 || e === 128378 || e === 128405 || e === 128406 || e === 128420 || e >= 128507 && e <= 128591 || e >= 128640 && e <= 128709 || e === 128716 || e >= 128720 && e <= 128722 || e >= 128725 && e <= 128727 || e >= 128732 && e <= 128735 || e === 128747 || e === 128748 || e >= 128756 && e <= 128764 || e >= 128992 && e <= 129003 || e === 129008 || e >= 129292 && e <= 129338 || e >= 129340 && e <= 129349 || e >= 129351 && e <= 129535 || e >= 129648 && e <= 129660 || e >= 129664 && e <= 129673 || e >= 129679 && e <= 129734 || e >= 129742 && e <= 129756 || e >= 129759 && e <= 129769 || e >= 129776 && e <= 129784 || e >= 131072 && e <= 196605 || e >= 196608 && e <= 262141;
            }
            var Kr = (e)=>!(zr(e) || Gr(e));
            var Uu = /[^\x20-\x7F]/u;
            function zu(e) {
                if (!e) return 0;
                if (!Uu.test(e)) return e.length;
                e = e.replace(Ur(), "  ");
                let t1 = 0;
                for (let r of e){
                    let n = r.codePointAt(0);
                    n <= 31 || n >= 127 && n <= 159 || n >= 768 && n <= 879 || (t1 += Kr(n) ? 1 : 2);
                }
                return t1;
            }
            var Le = zu;
            var Y = Symbol("MODE_BREAK"), J = Symbol("MODE_FLAT"), Ee = Symbol("cursor"), Pt = Symbol("DOC_FILL_PRINTED_LENGTH");
            function Jr() {
                return {
                    value: "",
                    length: 0,
                    queue: []
                };
            }
            function Gu(e, t1) {
                return It(e, {
                    type: "indent"
                }, t1);
            }
            function Ku(e, t1, r) {
                return t1 === Number.NEGATIVE_INFINITY ? e.root || Jr() : t1 < 0 ? It(e, {
                    type: "dedent"
                }, r) : t1 ? t1.type === "root" ? {
                    ...e,
                    root: e
                } : It(e, {
                    type: typeof t1 == "string" ? "stringAlign" : "numberAlign",
                    n: t1
                }, r) : e;
            }
            function It(e, t1, r) {
                let n = t1.type === "dedent" ? e.queue.slice(0, -1) : [
                    ...e.queue,
                    t1
                ], u = "", i = 0, o = 0, s = 0;
                for (let c of n)switch(c.type){
                    case "indent":
                        l(), r.useTabs ? a2(1) : D(r.tabWidth);
                        break;
                    case "stringAlign":
                        l(), u += c.n, i += c.n.length;
                        break;
                    case "numberAlign":
                        o += 1, s += c.n;
                        break;
                    default:
                        throw new Error(`Unexpected type '${c.type}'`);
                }
                return f2(), {
                    ...e,
                    value: u,
                    length: i,
                    queue: n
                };
                function a2(c) {
                    u += "	".repeat(c), i += r.tabWidth * c;
                }
                function D(c) {
                    u += " ".repeat(c), i += c;
                }
                function l() {
                    r.useTabs ? p() : f2();
                }
                function p() {
                    o > 0 && a2(o), d();
                }
                function f2() {
                    s > 0 && D(s), d();
                }
                function d() {
                    o = 0, s = 0;
                }
            }
            function Rt(e) {
                let t1 = 0, r = 0, n = e.length;
                e: for(; n--;){
                    let u = e[n];
                    if (u === Ee) {
                        r++;
                        continue;
                    }
                    for(let i = u.length - 1; i >= 0; i--){
                        let o = u[i];
                        if (o === " " || o === "	") t1++;
                        else {
                            e[n] = u.slice(0, i + 1);
                            break e;
                        }
                    }
                }
                if (t1 > 0 || r > 0) for(e.length = n + 1; r-- > 0;)e.push(Ee);
                return t1;
            }
            function tt(e, t1, r, n, u, i) {
                var _a;
                if (r === Number.POSITIVE_INFINITY) return true;
                let o = t1.length, s = [
                    e
                ], a2 = [];
                for(; r >= 0;){
                    if (s.length === 0) {
                        if (o === 0) return true;
                        s.push(t1[--o]);
                        continue;
                    }
                    let { mode: D, doc: l } = s.pop(), p = M(l);
                    switch(p){
                        case $:
                            a2.push(l), r -= Le(l);
                            break;
                        case H:
                        case N:
                            {
                                let f2 = p === H ? l : l.parts, d = (_a = l[Pt]) != null ? _a : 0;
                                for(let c = f2.length - 1; c >= d; c--)s.push({
                                    mode: D,
                                    doc: f2[c]
                                });
                                break;
                            }
                        case T:
                        case k:
                        case P:
                        case O:
                            s.push({
                                mode: D,
                                doc: l.contents
                            });
                            break;
                        case L:
                            r += Rt(a2);
                            break;
                        case B:
                            {
                                if (i && l.break) return false;
                                let f2 = l.break ? Y : D, d = l.expandedStates && f2 === Y ? A2(false, l.expandedStates, -1) : l.contents;
                                s.push({
                                    mode: f2,
                                    doc: d
                                });
                                break;
                            }
                        case w:
                            {
                                let d = (l.groupId ? u[l.groupId] || J : D) === Y ? l.breakContents : l.flatContents;
                                d && s.push({
                                    mode: D,
                                    doc: d
                                });
                                break;
                            }
                        case y:
                            if (D === Y || l.hard) return true;
                            l.soft || (a2.push(" "), r--);
                            break;
                        case I:
                            n = true;
                            break;
                        case R:
                            if (n) return false;
                            break;
                    }
                }
                return false;
            }
            function Ce(e, t1) {
                var _a;
                let r = {}, n = t1.printWidth, u = be(t1.endOfLine), i = 0, o = [
                    {
                        ind: Jr(),
                        mode: Y,
                        doc: e
                    }
                ], s = [], a2 = false, D = [], l = 0;
                for(br(e); o.length > 0;){
                    let { ind: f2, mode: d, doc: c } = o.pop();
                    switch(M(c)){
                        case $:
                            {
                                let F = u !== `
` ? ne(false, c, `
`, u) : c;
                                s.push(F), o.length > 0 && (i += Le(F));
                                break;
                            }
                        case H:
                            for(let F = c.length - 1; F >= 0; F--)o.push({
                                ind: f2,
                                mode: d,
                                doc: c[F]
                            });
                            break;
                        case z:
                            if (l >= 2) throw new Error("There are too many 'cursor' in doc.");
                            s.push(Ee), l++;
                            break;
                        case T:
                            o.push({
                                ind: Gu(f2, t1),
                                mode: d,
                                doc: c.contents
                            });
                            break;
                        case k:
                            o.push({
                                ind: Ku(f2, c.n, t1),
                                mode: d,
                                doc: c.contents
                            });
                            break;
                        case L:
                            i -= Rt(s);
                            break;
                        case B:
                            switch(d){
                                case J:
                                    if (!a2) {
                                        o.push({
                                            ind: f2,
                                            mode: c.break ? Y : J,
                                            doc: c.contents
                                        });
                                        break;
                                    }
                                case Y:
                                    {
                                        a2 = false;
                                        let F = {
                                            ind: f2,
                                            mode: J,
                                            doc: c.contents
                                        }, m = n - i, h = D.length > 0;
                                        if (!c.break && tt(F, o, m, h, r)) o.push(F);
                                        else if (c.expandedStates) {
                                            let C = A2(false, c.expandedStates, -1);
                                            if (c.break) {
                                                o.push({
                                                    ind: f2,
                                                    mode: Y,
                                                    doc: C
                                                });
                                                break;
                                            } else for(let v = 1; v < c.expandedStates.length + 1; v++)if (v >= c.expandedStates.length) {
                                                o.push({
                                                    ind: f2,
                                                    mode: Y,
                                                    doc: C
                                                });
                                                break;
                                            } else {
                                                let E = c.expandedStates[v], g = {
                                                    ind: f2,
                                                    mode: J,
                                                    doc: E
                                                };
                                                if (tt(g, o, m, h, r)) {
                                                    o.push(g);
                                                    break;
                                                }
                                            }
                                        } else o.push({
                                            ind: f2,
                                            mode: Y,
                                            doc: c.contents
                                        });
                                        break;
                                    }
                            }
                            c.id && (r[c.id] = A2(false, o, -1).mode);
                            break;
                        case N:
                            {
                                let F = n - i, m = (_a = c[Pt]) != null ? _a : 0, { parts: h } = c, C = h.length - m;
                                if (C === 0) break;
                                let v = h[m + 0], E = h[m + 1], g = {
                                    ind: f2,
                                    mode: J,
                                    doc: v
                                }, j = {
                                    ind: f2,
                                    mode: Y,
                                    doc: v
                                }, b = tt(g, [], F, D.length > 0, r, true);
                                if (C === 1) {
                                    b ? o.push(g) : o.push(j);
                                    break;
                                }
                                let X = {
                                    ind: f2,
                                    mode: J,
                                    doc: E
                                }, ae = {
                                    ind: f2,
                                    mode: Y,
                                    doc: E
                                };
                                if (C === 2) {
                                    b ? o.push(X, g) : o.push(ae, j);
                                    break;
                                }
                                let $e = h[m + 2], At = {
                                    ind: f2,
                                    mode: d,
                                    doc: {
                                        ...c,
                                        [Pt]: m + 2
                                    }
                                };
                                tt({
                                    ind: f2,
                                    mode: J,
                                    doc: [
                                        v,
                                        E,
                                        $e
                                    ]
                                }, [], F, D.length > 0, r, true) ? o.push(At, X, g) : b ? o.push(At, ae, g) : o.push(At, ae, j);
                                break;
                            }
                        case w:
                        case P:
                            {
                                let F = c.groupId ? r[c.groupId] : d;
                                if (F === Y) {
                                    let m = c.type === w ? c.breakContents : c.negate ? c.contents : le(c.contents);
                                    m && o.push({
                                        ind: f2,
                                        mode: d,
                                        doc: m
                                    });
                                }
                                if (F === J) {
                                    let m = c.type === w ? c.flatContents : c.negate ? le(c.contents) : c.contents;
                                    m && o.push({
                                        ind: f2,
                                        mode: d,
                                        doc: m
                                    });
                                }
                                break;
                            }
                        case I:
                            D.push({
                                ind: f2,
                                mode: d,
                                doc: c.contents
                            });
                            break;
                        case R:
                            D.length > 0 && o.push({
                                ind: f2,
                                mode: d,
                                doc: ke
                            });
                            break;
                        case y:
                            switch(d){
                                case J:
                                    if (c.hard) a2 = true;
                                    else {
                                        c.soft || (s.push(" "), i += 1);
                                        break;
                                    }
                                case Y:
                                    if (D.length > 0) {
                                        o.push({
                                            ind: f2,
                                            mode: d,
                                            doc: c
                                        }, ...D.reverse()), D.length = 0;
                                        break;
                                    }
                                    c.literal ? f2.root ? (s.push(u, f2.root.value), i = f2.root.length) : (s.push(u), i = 0) : (i -= Rt(s), s.push(u + f2.value), i = f2.length);
                                    break;
                            }
                            break;
                        case O:
                            o.push({
                                ind: f2,
                                mode: d,
                                doc: c.contents
                            });
                            break;
                        case _2:
                            break;
                        default:
                            throw new Q(c);
                    }
                    o.length === 0 && D.length > 0 && (o.push(...D.reverse()), D.length = 0);
                }
                let p = s.indexOf(Ee);
                if (p !== -1) {
                    let f2 = s.indexOf(Ee, p + 1);
                    if (f2 === -1) return {
                        formatted: s.filter((m)=>m !== Ee).join("")
                    };
                    let d = s.slice(0, p).join(""), c = s.slice(p + 1, f2).join(""), F = s.slice(f2 + 1).join("");
                    return {
                        formatted: d + c + F,
                        cursorNodeStart: d.length,
                        cursorNodeText: c
                    };
                }
                return {
                    formatted: s.join("")
                };
            }
            function Ju(e, t1, r = 0) {
                let n = 0;
                for(let u = r; u < e.length; ++u)e[u] === "	" ? n = n + t1 - n % t1 : n++;
                return n;
            }
            var ge = Ju;
            var te, jt, rt, Yt = class {
                get key() {
                    var _a;
                    let { stack: t1, siblings: r } = this;
                    return (_a = A2(false, t1, r === null ? -2 : -4)) != null ? _a : null;
                }
                get index() {
                    return this.siblings === null ? null : A2(false, this.stack, -2);
                }
                get node() {
                    return A2(false, this.stack, -1);
                }
                get parent() {
                    return this.getNode(1);
                }
                get grandparent() {
                    return this.getNode(2);
                }
                get isInArray() {
                    return this.siblings !== null;
                }
                get siblings() {
                    let { stack: t1 } = this, r = A2(false, t1, -3);
                    return Array.isArray(r) ? r : null;
                }
                get next() {
                    let { siblings: t1 } = this;
                    return t1 === null ? null : t1[this.index + 1];
                }
                get previous() {
                    let { siblings: t1 } = this;
                    return t1 === null ? null : t1[this.index - 1];
                }
                get isFirst() {
                    return this.index === 0;
                }
                get isLast() {
                    let { siblings: t1, index: r } = this;
                    return t1 !== null && r === t1.length - 1;
                }
                get isRoot() {
                    return this.stack.length === 1;
                }
                get root() {
                    return this.stack[0];
                }
                get ancestors() {
                    return [
                        ...pe(this, te, rt).call(this)
                    ];
                }
                getName() {
                    let { stack: t1 } = this, { length: r } = t1;
                    return r > 1 ? A2(false, t1, -2) : null;
                }
                getValue() {
                    return A2(false, this.stack, -1);
                }
                getNode(t1 = 0) {
                    let r = pe(this, te, jt).call(this, t1);
                    return r === -1 ? null : this.stack[r];
                }
                getParentNode(t1 = 0) {
                    return this.getNode(t1 + 1);
                }
                call(t1, ...r) {
                    let { stack: n } = this, { length: u } = n, i = A2(false, n, -1);
                    for (let o of r)i = i[o], n.push(o, i);
                    try {
                        return t1(this);
                    } finally{
                        n.length = u;
                    }
                }
                callParent(t1, r = 0) {
                    let n = pe(this, te, jt).call(this, r + 1), u = this.stack.splice(n + 1);
                    try {
                        return t1(this);
                    } finally{
                        this.stack.push(...u);
                    }
                }
                each(t1, ...r) {
                    let { stack: n } = this, { length: u } = n, i = A2(false, n, -1);
                    for (let o of r)i = i[o], n.push(o, i);
                    try {
                        for(let o = 0; o < i.length; ++o)n.push(o, i[o]), t1(this, o, i), n.length -= 2;
                    } finally{
                        n.length = u;
                    }
                }
                map(t1, ...r) {
                    let n = [];
                    return this.each((u, i, o)=>{
                        n[i] = t1(u, i, o);
                    }, ...r), n;
                }
                match(...t1) {
                    let r = this.stack.length - 1, n = null, u = this.stack[r--];
                    for (let i of t1){
                        if (u === void 0) return false;
                        let o = null;
                        if (typeof n == "number" && (o = n, n = this.stack[r--], u = this.stack[r--]), i && !i(u, n, o)) return false;
                        n = this.stack[r--], u = this.stack[r--];
                    }
                    return true;
                }
                findAncestor(t1) {
                    for (let r of pe(this, te, rt).call(this))if (t1(r)) return r;
                }
                hasAncestor(t1) {
                    for (let r of pe(this, te, rt).call(this))if (t1(r)) return true;
                    return false;
                }
                constructor(t1){
                    Fr(this, te);
                    this.stack = [
                        t1
                    ];
                }
            };
            te = /* @__PURE__ */ new WeakSet(), jt = function(t1) {
                let { stack: r } = this;
                for(let n = r.length - 1; n >= 0; n -= 2)if (!Array.isArray(r[n]) && --t1 < 0) return n;
                return -1;
            }, rt = function*() {
                let { stack: t1 } = this;
                for(let r = t1.length - 3; r >= 0; r -= 2){
                    let n = t1[r];
                    Array.isArray(n) || (yield n);
                }
            };
            var qr = Yt;
            var Xr = new Proxy(()=>{}, {
                get: ()=>Xr
            }), Pe = Xr;
            function qu(e) {
                return e !== null && typeof e == "object";
            }
            var Qr = qu;
            function* ye(e, t1) {
                let { getVisitorKeys: r, filter: n = ()=>true } = t1, u = (i)=>Qr(i) && n(i);
                for (let i of r(e)){
                    let o = e[i];
                    if (Array.isArray(o)) for (let s of o)u(s) && (yield s);
                    else u(o) && (yield o);
                }
            }
            function* Zr(e, t1) {
                let r = [
                    e
                ];
                for(let n = 0; n < r.length; n++){
                    let u = r[n];
                    for (let i of ye(u, t1))yield i, r.push(i);
                }
            }
            function en(e, t1) {
                return ye(e, t1).next().done;
            }
            function Ae(e) {
                return (t1, r, n)=>{
                    let u = !!(n != null && n.backwards);
                    if (r === false) return false;
                    let { length: i } = t1, o = r;
                    for(; o >= 0 && o < i;){
                        let s = t1.charAt(o);
                        if (e instanceof RegExp) {
                            if (!e.test(s)) return o;
                        } else if (!e.includes(s)) return o;
                        u ? o-- : o++;
                    }
                    return o === -1 || o === i ? o : false;
                };
            }
            var tn = Ae(/\s/u), S = Ae(" 	"), nt = Ae(",; 	"), ut = Ae(/[^\n\r]/u);
            function Xu(e, t1, r) {
                let n = !!(r != null && r.backwards);
                if (t1 === false) return false;
                let u = e.charAt(t1);
                if (n) {
                    if (e.charAt(t1 - 1) === "\r" && u === `
`) return t1 - 2;
                    if (u === `
` || u === "\r" || u === "\u2028" || u === "\u2029") return t1 - 1;
                } else {
                    if (u === "\r" && e.charAt(t1 + 1) === `
`) return t1 + 2;
                    if (u === `
` || u === "\r" || u === "\u2028" || u === "\u2029") return t1 + 1;
                }
                return t1;
            }
            var W = Xu;
            function Qu(e, t1, r = {}) {
                let n = S(e, r.backwards ? t1 - 1 : t1, r), u = W(e, n, r);
                return n !== u;
            }
            var V = Qu;
            function Zu(e) {
                return Array.isArray(e) && e.length > 0;
            }
            var Ht = Zu;
            var rn = /* @__PURE__ */ new Set([
                "tokens",
                "comments",
                "parent",
                "enclosingNode",
                "precedingNode",
                "followingNode"
            ]), ei = (e)=>Object.keys(e).filter((t1)=>!rn.has(t1));
            function ti(e) {
                return e ? (t1)=>e(t1, rn) : ei;
            }
            var q = ti;
            function ri(e) {
                let t1 = e.type || e.kind || "(unknown type)", r = String(e.name || e.id && (typeof e.id == "object" ? e.id.name : e.id) || e.key && (typeof e.key == "object" ? e.key.name : e.key) || e.value && (typeof e.value == "object" ? "" : String(e.value)) || e.operator || "");
                return r.length > 20 && (r = r.slice(0, 19) + "\u2026"), t1 + (r ? " " + r : "");
            }
            function Wt(e, t1) {
                var _a;
                ((_a = e.comments) != null ? _a : e.comments = []).push(t1), t1.printed = false, t1.nodeDescription = ri(e);
            }
            function ue(e, t1) {
                t1.leading = true, t1.trailing = false, Wt(e, t1);
            }
            function re(e, t1, r) {
                t1.leading = false, t1.trailing = false, r && (t1.marker = r), Wt(e, t1);
            }
            function ie(e, t1) {
                t1.leading = false, t1.trailing = true, Wt(e, t1);
            }
            var $t = /* @__PURE__ */ new WeakMap();
            function it(e, t1) {
                var _a;
                if ($t.has(e)) return $t.get(e);
                let { printer: { getCommentChildNodes: r, canAttachComment: n, getVisitorKeys: u }, locStart: i, locEnd: o } = t1;
                if (!n) return [];
                let s = ((_a = r == null ? void 0 : r(e, t1)) != null ? _a : [
                    ...ye(e, {
                        getVisitorKeys: q(u)
                    })
                ]).flatMap((a2)=>n(a2) ? [
                        a2
                    ] : it(a2, t1));
                return s.sort((a2, D)=>i(a2) - i(D) || o(a2) - o(D)), $t.set(e, s), s;
            }
            function un(e, t1, r, n) {
                let { locStart: u, locEnd: i } = r, o = u(t1), s = i(t1), a2 = it(e, r), D, l, p = 0, f2 = a2.length;
                for(; p < f2;){
                    let d = p + f2 >> 1, c = a2[d], F = u(c), m = i(c);
                    if (F <= o && s <= m) return un(c, t1, r, c);
                    if (m <= o) {
                        D = c, p = d + 1;
                        continue;
                    }
                    if (s <= F) {
                        l = c, f2 = d;
                        continue;
                    }
                    throw new Error("Comment location overlaps with node location");
                }
                if ((n == null ? void 0 : n.type) === "TemplateLiteral") {
                    let { quasis: d } = n, c = Vt(d, t1, r);
                    D && Vt(d, D, r) !== c && (D = null), l && Vt(d, l, r) !== c && (l = null);
                }
                return {
                    enclosingNode: n,
                    precedingNode: D,
                    followingNode: l
                };
            }
            var Mt = ()=>false;
            function on(e, t1) {
                let { comments: r } = e;
                if (delete e.comments, !Ht(r) || !t1.printer.canAttachComment) return;
                let n = [], { locStart: u, locEnd: i, printer: { experimentalFeatures: { avoidAstMutation: o = false } = {}, handleComments: s = {} }, originalText: a2 } = t1, { ownLine: D = Mt, endOfLine: l = Mt, remaining: p = Mt } = s, f2 = r.map((d, c)=>({
                        ...un(e, d, t1),
                        comment: d,
                        text: a2,
                        options: t1,
                        ast: e,
                        isLastComment: r.length - 1 === c
                    }));
                for (let [d, c] of f2.entries()){
                    let { comment: F, precedingNode: m, enclosingNode: h, followingNode: C, text: v, options: E, ast: g, isLastComment: j } = c;
                    if (E.parser === "json" || E.parser === "json5" || E.parser === "jsonc" || E.parser === "__js_expression" || E.parser === "__ts_expression" || E.parser === "__vue_expression" || E.parser === "__vue_ts_expression") {
                        if (u(F) - u(g) <= 0) {
                            ue(g, F);
                            continue;
                        }
                        if (i(F) - i(g) >= 0) {
                            ie(g, F);
                            continue;
                        }
                    }
                    let b;
                    if (o ? b = [
                        c
                    ] : (F.enclosingNode = h, F.precedingNode = m, F.followingNode = C, b = [
                        F,
                        v,
                        E,
                        g,
                        j
                    ]), ni(v, E, f2, d)) F.placement = "ownLine", D(...b) || (C ? ue(C, F) : m ? ie(m, F) : h ? re(h, F) : re(g, F));
                    else if (ui(v, E, f2, d)) F.placement = "endOfLine", l(...b) || (m ? ie(m, F) : C ? ue(C, F) : h ? re(h, F) : re(g, F));
                    else if (F.placement = "remaining", !p(...b)) if (m && C) {
                        let X = n.length;
                        X > 0 && n[X - 1].followingNode !== C && nn(n, E), n.push(c);
                    } else m ? ie(m, F) : C ? ue(C, F) : h ? re(h, F) : re(g, F);
                }
                if (nn(n, t1), !o) for (let d of r)delete d.precedingNode, delete d.enclosingNode, delete d.followingNode;
            }
            var sn = (e)=>!/[\S\n\u2028\u2029]/u.test(e);
            function ni(e, t1, r, n) {
                let { comment: u, precedingNode: i } = r[n], { locStart: o, locEnd: s } = t1, a2 = o(u);
                if (i) for(let D = n - 1; D >= 0; D--){
                    let { comment: l, precedingNode: p } = r[D];
                    if (p !== i || !sn(e.slice(s(l), a2))) break;
                    a2 = o(l);
                }
                return V(e, a2, {
                    backwards: true
                });
            }
            function ui(e, t1, r, n) {
                let { comment: u, followingNode: i } = r[n], { locStart: o, locEnd: s } = t1, a2 = s(u);
                if (i) for(let D = n + 1; D < r.length; D++){
                    let { comment: l, followingNode: p } = r[D];
                    if (p !== i || !sn(e.slice(a2, o(l)))) break;
                    a2 = s(l);
                }
                return V(e, a2);
            }
            function nn(e, t1) {
                var _a;
                var s, a2;
                let r = e.length;
                if (r === 0) return;
                let { precedingNode: n, followingNode: u } = e[0], i = t1.locStart(u), o;
                for(o = r; o > 0; --o){
                    let { comment: D, precedingNode: l, followingNode: p } = e[o - 1];
                    Pe.strictEqual(l, n), Pe.strictEqual(p, u);
                    let f2 = t1.originalText.slice(t1.locEnd(D), i);
                    if ((_a = (a2 = (s = t1.printer).isGap) == null ? void 0 : a2.call(s, f2, t1)) != null ? _a : /^[\s(]*$/u.test(f2)) i = t1.locStart(D);
                    else break;
                }
                for (let [D, { comment: l }] of e.entries())D < o ? ie(n, l) : ue(u, l);
                for (let D of [
                    n,
                    u
                ])D.comments && D.comments.length > 1 && D.comments.sort((l, p)=>t1.locStart(l) - t1.locStart(p));
                e.length = 0;
            }
            function Vt(e, t1, r) {
                let n = r.locStart(t1) - 1;
                for(let u = 1; u < e.length; ++u)if (n < r.locStart(e[u])) return u - 1;
                return 0;
            }
            function ii(e, t1) {
                let r = t1 - 1;
                r = S(e, r, {
                    backwards: true
                }), r = W(e, r, {
                    backwards: true
                }), r = S(e, r, {
                    backwards: true
                });
                let n = W(e, r, {
                    backwards: true
                });
                return r !== n;
            }
            var Ie = ii;
            function an(e, t1) {
                let r = e.node;
                return r.printed = true, t1.printer.printComment(e, t1);
            }
            function oi(e, t1) {
                var l;
                let r = e.node, n = [
                    an(e, t1)
                ], { printer: u, originalText: i, locStart: o, locEnd: s } = t1;
                if ((l = u.isBlockComment) == null ? void 0 : l.call(u, r)) {
                    let p = V(i, s(r)) ? V(i, o(r), {
                        backwards: true
                    }) ? K : Ze : " ";
                    n.push(p);
                } else n.push(K);
                let D = W(i, S(i, s(r)));
                return D !== false && V(i, D) && n.push(K), n;
            }
            function si(e, t1, r) {
                var D;
                let n = e.node, u = an(e, t1), { printer: i, originalText: o, locStart: s } = t1, a2 = (D = i.isBlockComment) == null ? void 0 : D.call(i, n);
                if (r != null && r.hasLineSuffix && !(r != null && r.isBlock) || V(o, s(n), {
                    backwards: true
                })) {
                    let l = Ie(o, s(n));
                    return {
                        doc: Te([
                            K,
                            l ? K : "",
                            u
                        ]),
                        isBlock: a2,
                        hasLineSuffix: true
                    };
                }
                return !a2 || r != null && r.hasLineSuffix ? {
                    doc: [
                        Te([
                            " ",
                            u
                        ]),
                        he
                    ],
                    isBlock: a2,
                    hasLineSuffix: true
                } : {
                    doc: [
                        " ",
                        u
                    ],
                    isBlock: a2,
                    hasLineSuffix: false
                };
            }
            function ai(e, t1) {
                let r = e.node;
                if (!r) return {};
                let n = t1[Symbol.for("printedComments")];
                if ((r.comments || []).filter((a2)=>!n.has(a2)).length === 0) return {
                    leading: "",
                    trailing: ""
                };
                let i = [], o = [], s;
                return e.each(()=>{
                    let a2 = e.node;
                    if (n != null && n.has(a2)) return;
                    let { leading: D, trailing: l } = a2;
                    D ? i.push(oi(e, t1)) : l && (s = si(e, t1, s), o.push(s.doc));
                }, "comments"), {
                    leading: i,
                    trailing: o
                };
            }
            function Dn(e, t1, r) {
                let { leading: n, trailing: u } = ai(e, r);
                return !n && !u ? t1 : me(t1, (i)=>[
                        n,
                        i,
                        u
                    ]);
            }
            function ln(e) {
                let { [Symbol.for("comments")]: t1, [Symbol.for("printedComments")]: r } = e;
                for (let n of t1){
                    if (!n.printed && !r.has(n)) throw new Error('Comment "' + n.value.trim() + '" was not printed. Please report this error!');
                    delete n.printed;
                }
            }
            function Di(e) {
                return ()=>{};
            }
            var cn = Di;
            var Re = class extends Error {
                constructor(){
                    super(...arguments);
                    __publicField(this, "name", "ConfigError");
                }
            }, Ye = class extends Error {
                constructor(){
                    super(...arguments);
                    __publicField(this, "name", "UndefinedParserError");
                }
            };
            var fn = {
                cursorOffset: {
                    category: "Special",
                    type: "int",
                    default: -1,
                    range: {
                        start: -1,
                        end: 1 / 0,
                        step: 1
                    },
                    description: "Print (to stderr) where a cursor at the given position would move to after formatting.",
                    cliCategory: "Editor"
                },
                endOfLine: {
                    category: "Global",
                    type: "choice",
                    default: "lf",
                    description: "Which end of line characters to apply.",
                    choices: [
                        {
                            value: "lf",
                            description: "Line Feed only (\\n), common on Linux and macOS as well as inside git repos"
                        },
                        {
                            value: "crlf",
                            description: "Carriage Return + Line Feed characters (\\r\\n), common on Windows"
                        },
                        {
                            value: "cr",
                            description: "Carriage Return character only (\\r), used very rarely"
                        },
                        {
                            value: "auto",
                            description: `Maintain existing
(mixed values within one file are normalised by looking at what's used after the first line)`
                        }
                    ]
                },
                filepath: {
                    category: "Special",
                    type: "path",
                    description: "Specify the input filepath. This will be used to do parser inference.",
                    cliName: "stdin-filepath",
                    cliCategory: "Other",
                    cliDescription: "Path to the file to pretend that stdin comes from."
                },
                insertPragma: {
                    category: "Special",
                    type: "boolean",
                    default: false,
                    description: "Insert @format pragma into file's first docblock comment.",
                    cliCategory: "Other"
                },
                parser: {
                    category: "Global",
                    type: "choice",
                    default: void 0,
                    description: "Which parser to use.",
                    exception: (e)=>typeof e == "string" || typeof e == "function",
                    choices: [
                        {
                            value: "flow",
                            description: "Flow"
                        },
                        {
                            value: "babel",
                            description: "JavaScript"
                        },
                        {
                            value: "babel-flow",
                            description: "Flow"
                        },
                        {
                            value: "babel-ts",
                            description: "TypeScript"
                        },
                        {
                            value: "typescript",
                            description: "TypeScript"
                        },
                        {
                            value: "acorn",
                            description: "JavaScript"
                        },
                        {
                            value: "espree",
                            description: "JavaScript"
                        },
                        {
                            value: "meriyah",
                            description: "JavaScript"
                        },
                        {
                            value: "css",
                            description: "CSS"
                        },
                        {
                            value: "less",
                            description: "Less"
                        },
                        {
                            value: "scss",
                            description: "SCSS"
                        },
                        {
                            value: "json",
                            description: "JSON"
                        },
                        {
                            value: "json5",
                            description: "JSON5"
                        },
                        {
                            value: "jsonc",
                            description: "JSON with Comments"
                        },
                        {
                            value: "json-stringify",
                            description: "JSON.stringify"
                        },
                        {
                            value: "graphql",
                            description: "GraphQL"
                        },
                        {
                            value: "markdown",
                            description: "Markdown"
                        },
                        {
                            value: "mdx",
                            description: "MDX"
                        },
                        {
                            value: "vue",
                            description: "Vue"
                        },
                        {
                            value: "yaml",
                            description: "YAML"
                        },
                        {
                            value: "glimmer",
                            description: "Ember / Handlebars"
                        },
                        {
                            value: "html",
                            description: "HTML"
                        },
                        {
                            value: "angular",
                            description: "Angular"
                        },
                        {
                            value: "lwc",
                            description: "Lightning Web Components"
                        }
                    ]
                },
                plugins: {
                    type: "path",
                    array: true,
                    default: [
                        {
                            value: []
                        }
                    ],
                    category: "Global",
                    description: "Add a plugin. Multiple plugins can be passed as separate `--plugin`s.",
                    exception: (e)=>typeof e == "string" || typeof e == "object",
                    cliName: "plugin",
                    cliCategory: "Config"
                },
                printWidth: {
                    category: "Global",
                    type: "int",
                    default: 80,
                    description: "The line length where Prettier will try wrap.",
                    range: {
                        start: 0,
                        end: 1 / 0,
                        step: 1
                    }
                },
                rangeEnd: {
                    category: "Special",
                    type: "int",
                    default: 1 / 0,
                    range: {
                        start: 0,
                        end: 1 / 0,
                        step: 1
                    },
                    description: `Format code ending at a given character offset (exclusive).
The range will extend forwards to the end of the selected statement.`,
                    cliCategory: "Editor"
                },
                rangeStart: {
                    category: "Special",
                    type: "int",
                    default: 0,
                    range: {
                        start: 0,
                        end: 1 / 0,
                        step: 1
                    },
                    description: `Format code starting at a given character offset.
The range will extend backwards to the start of the first line containing the selected statement.`,
                    cliCategory: "Editor"
                },
                requirePragma: {
                    category: "Special",
                    type: "boolean",
                    default: false,
                    description: `Require either '@prettier' or '@format' to be present in the file's first docblock comment
in order for it to be formatted.`,
                    cliCategory: "Other"
                },
                tabWidth: {
                    type: "int",
                    category: "Global",
                    default: 2,
                    description: "Number of spaces per indentation level.",
                    range: {
                        start: 0,
                        end: 1 / 0,
                        step: 1
                    }
                },
                useTabs: {
                    category: "Global",
                    type: "boolean",
                    default: false,
                    description: "Indent with tabs instead of spaces."
                },
                embeddedLanguageFormatting: {
                    category: "Global",
                    type: "choice",
                    default: "auto",
                    description: "Control how Prettier formats quoted code embedded in the file.",
                    choices: [
                        {
                            value: "auto",
                            description: "Format embedded code if Prettier can automatically identify it."
                        },
                        {
                            value: "off",
                            description: "Never automatically format embedded code."
                        }
                    ]
                }
            };
            function ot({ plugins: e = [], showDeprecated: t1 = false } = {}) {
                let r = e.flatMap((u)=>{
                    var _a;
                    return (_a = u.languages) != null ? _a : [];
                }), n = [];
                for (let u of ci(Object.assign({}, ...e.map(({ options: i })=>i), fn)))!t1 && u.deprecated || (Array.isArray(u.choices) && (t1 || (u.choices = u.choices.filter((i)=>!i.deprecated)), u.name === "parser" && (u.choices = [
                    ...u.choices,
                    ...li(u.choices, r, e)
                ])), u.pluginDefaults = Object.fromEntries(e.filter((i)=>{
                    var o;
                    return ((o = i.defaultOptions) == null ? void 0 : o[u.name]) !== void 0;
                }).map((i)=>[
                        i.name,
                        i.defaultOptions[u.name]
                    ])), n.push(u));
                return {
                    languages: r,
                    options: n
                };
            }
            function* li(e, t1, r) {
                let n = new Set(e.map((u)=>u.value));
                for (let u of t1)if (u.parsers) {
                    for (let i of u.parsers)if (!n.has(i)) {
                        n.add(i);
                        let o = r.find((a2)=>a2.parsers && Object.prototype.hasOwnProperty.call(a2.parsers, i)), s = u.name;
                        o != null && o.name && (s += ` (plugin: ${o.name})`), yield {
                            value: i,
                            description: s
                        };
                    }
                }
            }
            function ci(e) {
                let t1 = [];
                for (let [r, n] of Object.entries(e)){
                    let u = {
                        name: r,
                        ...n
                    };
                    Array.isArray(u.default) && (u.default = A2(false, u.default, -1).value), t1.push(u);
                }
                return t1;
            }
            var fi = (e)=>String(e).split(/[/\\]/u).pop();
            function dn(e, t1) {
                var _a;
                if (!t1) return;
                let r = fi(t1).toLowerCase();
                return (_a = e.find(({ filenames: n })=>n == null ? void 0 : n.some((u)=>u.toLowerCase() === r))) != null ? _a : e.find(({ extensions: n })=>n == null ? void 0 : n.some((u)=>r.endsWith(u)));
            }
            function di(e, t1) {
                var _a, _b;
                if (t1) return (_b = (_a = e.find(({ name: r })=>r.toLowerCase() === t1)) != null ? _a : e.find(({ aliases: r })=>r == null ? void 0 : r.includes(t1))) != null ? _b : e.find(({ extensions: r })=>r == null ? void 0 : r.includes(`.${t1}`));
            }
            function pi(e, t1) {
                var _a, _b, _c;
                let r = e.plugins.flatMap((u)=>{
                    var _a2;
                    return (_a2 = u.languages) != null ? _a2 : [];
                }), n = (_c = (_b = (_a = di(r, t1.language)) != null ? _a : dn(r, t1.physicalFile)) != null ? _b : dn(r, t1.file)) != null ? _c : (t1.physicalFile, void 0);
                return n == null ? void 0 : n.parsers[0];
            }
            var pn = pi;
            var oe = {
                key: (e)=>/^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(e) ? e : JSON.stringify(e),
                value (e) {
                    if (e === null || typeof e != "object") return JSON.stringify(e);
                    if (Array.isArray(e)) return `[${e.map((r)=>oe.value(r)).join(", ")}]`;
                    let t1 = Object.keys(e);
                    return t1.length === 0 ? "{}" : `{ ${t1.map((r)=>`${oe.key(r)}: ${oe.value(e[r])}`).join(", ")} }`;
                },
                pair: ({ key: e, value: t1 })=>oe.value({
                        [e]: t1
                    })
            };
            var Ut = Ve(st(), 1), hn = (e, t1, { descriptor: r })=>{
                let n = [
                    `${Ut.default.yellow(typeof e == "string" ? r.key(e) : r.pair(e))} is deprecated`
                ];
                return t1 && n.push(`we now treat it as ${Ut.default.blue(typeof t1 == "string" ? r.key(t1) : r.pair(t1))}`), n.join("; ") + ".";
            };
            var ce = Ve(st(), 1);
            var at = Symbol.for("vnopts.VALUE_NOT_EXIST"), ve = Symbol.for("vnopts.VALUE_UNCHANGED");
            var En = " ".repeat(2), gn = (e, t1, r)=>{
                let { text: n, list: u } = r.normalizeExpectedResult(r.schemas[e].expected(r)), i = [];
                return n && i.push(Cn(e, t1, n, r.descriptor)), u && i.push([
                    Cn(e, t1, u.title, r.descriptor)
                ].concat(u.values.map((o)=>yn(o, r.loggerPrintWidth))).join(`
`)), An(i, r.loggerPrintWidth);
            };
            function Cn(e, t1, r, n) {
                return [
                    `Invalid ${ce.default.red(n.key(e))} value.`,
                    `Expected ${ce.default.blue(r)},`,
                    `but received ${t1 === at ? ce.default.gray("nothing") : ce.default.red(n.value(t1))}.`
                ].join(" ");
            }
            function yn({ text: e, list: t1 }, r) {
                let n = [];
                return e && n.push(`- ${ce.default.blue(e)}`), t1 && n.push([
                    `- ${ce.default.blue(t1.title)}:`
                ].concat(t1.values.map((u)=>yn(u, r - En.length).replace(/^|\n/g, `$&${En}`))).join(`
`)), An(n, r);
            }
            function An(e, t1) {
                if (e.length === 1) return e[0];
                let [r, n] = e, [u, i] = e.map((o)=>o.split(`
`, 1)[0].length);
                return u > t1 && u > i ? n : r;
            }
            var Kt = Ve(st(), 1);
            var zt = [], vn = [];
            function Gt(e, t1) {
                if (e === t1) return 0;
                let r = e;
                e.length > t1.length && (e = t1, t1 = r);
                let n = e.length, u = t1.length;
                for(; n > 0 && e.charCodeAt(~-n) === t1.charCodeAt(~-u);)n--, u--;
                let i = 0;
                for(; i < n && e.charCodeAt(i) === t1.charCodeAt(i);)i++;
                if (n -= i, u -= i, n === 0) return u;
                let o, s, a2, D, l = 0, p = 0;
                for(; l < n;)vn[l] = e.charCodeAt(i + l), zt[l] = ++l;
                for(; p < u;)for(o = t1.charCodeAt(i + p), a2 = p++, s = p, l = 0; l < n; l++)D = o === vn[l] ? a2 : a2 + 1, a2 = zt[l], s = zt[l] = a2 > s ? D > s ? s + 1 : D : D > a2 ? a2 + 1 : D;
                return s;
            }
            var Dt = (e, t1, { descriptor: r, logger: n, schemas: u })=>{
                let i = [
                    `Ignored unknown option ${Kt.default.yellow(r.pair({
                        key: e,
                        value: t1
                    }))}.`
                ], o = Object.keys(u).sort().find((s)=>Gt(e, s) < 3);
                o && i.push(`Did you mean ${Kt.default.blue(r.key(o))}?`), n.warn(i.join(" "));
            };
            var Fi = [
                "default",
                "expected",
                "validate",
                "deprecated",
                "forward",
                "redirect",
                "overlap",
                "preprocess",
                "postprocess"
            ];
            function mi(e, t1) {
                let r = new e(t1), n = Object.create(r);
                for (let u of Fi)u in t1 && (n[u] = hi(t1[u], r, x.prototype[u].length));
                return n;
            }
            var x = class {
                static create(t1) {
                    return mi(this, t1);
                }
                default(t1) {}
                expected(t1) {
                    return "nothing";
                }
                validate(t1, r) {
                    return false;
                }
                deprecated(t1, r) {
                    return false;
                }
                forward(t1, r) {}
                redirect(t1, r) {}
                overlap(t1, r, n) {
                    return t1;
                }
                preprocess(t1, r) {
                    return t1;
                }
                postprocess(t1, r) {
                    return ve;
                }
                constructor(t1){
                    this.name = t1.name;
                }
            };
            function hi(e, t1, r) {
                return typeof e == "function" ? (...n)=>e(...n.slice(0, r - 1), t1, ...n.slice(r - 1)) : ()=>e;
            }
            var lt = class extends x {
                expected(t1) {
                    return t1.schemas[this._sourceName].expected(t1);
                }
                validate(t1, r) {
                    return r.schemas[this._sourceName].validate(t1, r);
                }
                redirect(t1, r) {
                    return this._sourceName;
                }
                constructor(t1){
                    super(t1), this._sourceName = t1.sourceName;
                }
            };
            var ct = class extends x {
                expected() {
                    return "anything";
                }
                validate() {
                    return true;
                }
            };
            var ft = class extends x {
                expected(t1) {
                    let { text: r, list: n } = t1.normalizeExpectedResult(this._valueSchema.expected(t1));
                    return {
                        text: r && `an array of ${r}`,
                        list: n && {
                            title: "an array of the following values",
                            values: [
                                {
                                    list: n
                                }
                            ]
                        }
                    };
                }
                validate(t1, r) {
                    if (!Array.isArray(t1)) return false;
                    let n = [];
                    for (let u of t1){
                        let i = r.normalizeValidateResult(this._valueSchema.validate(u, r), u);
                        i !== true && n.push(i.value);
                    }
                    return n.length === 0 ? true : {
                        value: n
                    };
                }
                deprecated(t1, r) {
                    let n = [];
                    for (let u of t1){
                        let i = r.normalizeDeprecatedResult(this._valueSchema.deprecated(u, r), u);
                        i !== false && n.push(...i.map(({ value: o })=>({
                                value: [
                                    o
                                ]
                            })));
                    }
                    return n;
                }
                forward(t1, r) {
                    let n = [];
                    for (let u of t1){
                        let i = r.normalizeForwardResult(this._valueSchema.forward(u, r), u);
                        n.push(...i.map(Bn));
                    }
                    return n;
                }
                redirect(t1, r) {
                    let n = [], u = [];
                    for (let i of t1){
                        let o = r.normalizeRedirectResult(this._valueSchema.redirect(i, r), i);
                        "remain" in o && n.push(o.remain), u.push(...o.redirect.map(Bn));
                    }
                    return n.length === 0 ? {
                        redirect: u
                    } : {
                        redirect: u,
                        remain: n
                    };
                }
                overlap(t1, r) {
                    return t1.concat(r);
                }
                constructor({ valueSchema: t1, name: r = t1.name, ...n }){
                    super({
                        ...n,
                        name: r
                    }), this._valueSchema = t1;
                }
            };
            function Bn({ from: e, to: t1 }) {
                return {
                    from: [
                        e
                    ],
                    to: t1
                };
            }
            var dt = class extends x {
                expected() {
                    return "true or false";
                }
                validate(t1) {
                    return typeof t1 == "boolean";
                }
            };
            function _n(e, t1) {
                let r = /* @__PURE__ */ Object.create(null);
                for (let n of e){
                    let u = n[t1];
                    if (r[u]) throw new Error(`Duplicate ${t1} ${JSON.stringify(u)}`);
                    r[u] = n;
                }
                return r;
            }
            function xn(e, t1) {
                let r = /* @__PURE__ */ new Map();
                for (let n of e){
                    let u = n[t1];
                    if (r.has(u)) throw new Error(`Duplicate ${t1} ${JSON.stringify(u)}`);
                    r.set(u, n);
                }
                return r;
            }
            function bn() {
                let e = /* @__PURE__ */ Object.create(null);
                return (t1)=>{
                    let r = JSON.stringify(t1);
                    return e[r] ? true : (e[r] = true, false);
                };
            }
            function Nn(e, t1) {
                let r = [], n = [];
                for (let u of e)t1(u) ? r.push(u) : n.push(u);
                return [
                    r,
                    n
                ];
            }
            function On(e) {
                return e === Math.floor(e);
            }
            function Sn(e, t1) {
                if (e === t1) return 0;
                let r = typeof e, n = typeof t1, u = [
                    "undefined",
                    "object",
                    "boolean",
                    "number",
                    "string"
                ];
                return r !== n ? u.indexOf(r) - u.indexOf(n) : r !== "string" ? Number(e) - Number(t1) : e.localeCompare(t1);
            }
            function Tn(e) {
                return (...t1)=>{
                    let r = e(...t1);
                    return typeof r == "string" ? new Error(r) : r;
                };
            }
            function Jt(e) {
                return e === void 0 ? {} : e;
            }
            function qt(e) {
                if (typeof e == "string") return {
                    text: e
                };
                let { text: t1, list: r } = e;
                return Ei((t1 || r) !== void 0, "Unexpected `expected` result, there should be at least one field."), r ? {
                    text: t1,
                    list: {
                        title: r.title,
                        values: r.values.map(qt)
                    }
                } : {
                    text: t1
                };
            }
            function Xt(e, t1) {
                return e === true ? true : e === false ? {
                    value: t1
                } : e;
            }
            function Qt(e, t1, r = false) {
                return e === false ? false : e === true ? r ? true : [
                    {
                        value: t1
                    }
                ] : "value" in e ? [
                    e
                ] : e.length === 0 ? false : e;
            }
            function wn(e, t1) {
                return typeof e == "string" || "key" in e ? {
                    from: t1,
                    to: e
                } : "from" in e ? {
                    from: e.from,
                    to: e.to
                } : {
                    from: t1,
                    to: e.to
                };
            }
            function pt(e, t1) {
                return e === void 0 ? [] : Array.isArray(e) ? e.map((r)=>wn(r, t1)) : [
                    wn(e, t1)
                ];
            }
            function Zt(e, t1) {
                let r = pt(typeof e == "object" && "redirect" in e ? e.redirect : e, t1);
                return r.length === 0 ? {
                    remain: t1,
                    redirect: r
                } : typeof e == "object" && "remain" in e ? {
                    remain: e.remain,
                    redirect: r
                } : {
                    redirect: r
                };
            }
            function Ei(e, t1) {
                if (!e) throw new Error(t1);
            }
            var Ft = class extends x {
                expected({ descriptor: t1 }) {
                    let r = Array.from(this._choices.keys()).map((o)=>this._choices.get(o)).filter(({ hidden: o })=>!o).map((o)=>o.value).sort(Sn).map(t1.value), n = r.slice(0, -2), u = r.slice(-2);
                    return {
                        text: n.concat(u.join(" or ")).join(", "),
                        list: {
                            title: "one of the following values",
                            values: r
                        }
                    };
                }
                validate(t1) {
                    return this._choices.has(t1);
                }
                deprecated(t1) {
                    let r = this._choices.get(t1);
                    return r && r.deprecated ? {
                        value: t1
                    } : false;
                }
                forward(t1) {
                    let r = this._choices.get(t1);
                    return r ? r.forward : void 0;
                }
                redirect(t1) {
                    let r = this._choices.get(t1);
                    return r ? r.redirect : void 0;
                }
                constructor(t1){
                    super(t1), this._choices = xn(t1.choices.map((r)=>r && typeof r == "object" ? r : {
                            value: r
                        }), "value");
                }
            };
            var mt = class extends x {
                expected() {
                    return "a number";
                }
                validate(t1, r) {
                    return typeof t1 == "number";
                }
            };
            var ht = class extends mt {
                expected() {
                    return "an integer";
                }
                validate(t1, r) {
                    return r.normalizeValidateResult(super.validate(t1, r), t1) === true && On(t1);
                }
            };
            var je = class extends x {
                expected() {
                    return "a string";
                }
                validate(t1) {
                    return typeof t1 == "string";
                }
            };
            var kn = oe, Ln = Dt, Pn = gn, In = hn;
            var Et = class {
                cleanHistory() {
                    this._hasDeprecationWarned = bn();
                }
                normalize(t1) {
                    let r = {}, u = [
                        this._preprocess(t1, this._utils)
                    ], i = ()=>{
                        for(; u.length !== 0;){
                            let o = u.shift(), s = this._applyNormalization(o, r);
                            u.push(...s);
                        }
                    };
                    i();
                    for (let o of Object.keys(this._utils.schemas)){
                        let s = this._utils.schemas[o];
                        if (!(o in r)) {
                            let a2 = Jt(s.default(this._utils));
                            "value" in a2 && u.push({
                                [o]: a2.value
                            });
                        }
                    }
                    i();
                    for (let o of Object.keys(this._utils.schemas)){
                        if (!(o in r)) continue;
                        let s = this._utils.schemas[o], a2 = r[o], D = s.postprocess(a2, this._utils);
                        D !== ve && (this._applyValidation(D, o, s), r[o] = D);
                    }
                    return this._applyPostprocess(r), this._applyRequiredCheck(r), r;
                }
                _applyNormalization(t1, r) {
                    let n = [], { knownKeys: u, unknownKeys: i } = this._partitionOptionKeys(t1);
                    for (let o of u){
                        let s = this._utils.schemas[o], a2 = s.preprocess(t1[o], this._utils);
                        this._applyValidation(a2, o, s);
                        let D = ({ from: d, to: c })=>{
                            n.push(typeof c == "string" ? {
                                [c]: d
                            } : {
                                [c.key]: c.value
                            });
                        }, l = ({ value: d, redirectTo: c })=>{
                            let F = Qt(s.deprecated(d, this._utils), a2, true);
                            if (F !== false) if (F === true) this._hasDeprecationWarned(o) || this._utils.logger.warn(this._deprecatedHandler(o, c, this._utils));
                            else for (let { value: m } of F){
                                let h = {
                                    key: o,
                                    value: m
                                };
                                if (!this._hasDeprecationWarned(h)) {
                                    let C = typeof c == "string" ? {
                                        key: c,
                                        value: m
                                    } : c;
                                    this._utils.logger.warn(this._deprecatedHandler(h, C, this._utils));
                                }
                            }
                        };
                        pt(s.forward(a2, this._utils), a2).forEach(D);
                        let f2 = Zt(s.redirect(a2, this._utils), a2);
                        if (f2.redirect.forEach(D), "remain" in f2) {
                            let d = f2.remain;
                            r[o] = o in r ? s.overlap(r[o], d, this._utils) : d, l({
                                value: d
                            });
                        }
                        for (let { from: d, to: c } of f2.redirect)l({
                            value: d,
                            redirectTo: c
                        });
                    }
                    for (let o of i){
                        let s = t1[o];
                        this._applyUnknownHandler(o, s, r, (a2, D)=>{
                            n.push({
                                [a2]: D
                            });
                        });
                    }
                    return n;
                }
                _applyRequiredCheck(t1) {
                    for (let r of Object.keys(this._utils.schemas))if (this._identifyMissing(r, t1) && this._identifyRequired(r)) throw this._invalidHandler(r, at, this._utils);
                }
                _partitionOptionKeys(t1) {
                    let [r, n] = Nn(Object.keys(t1).filter((u)=>!this._identifyMissing(u, t1)), (u)=>u in this._utils.schemas);
                    return {
                        knownKeys: r,
                        unknownKeys: n
                    };
                }
                _applyValidation(t1, r, n) {
                    let u = Xt(n.validate(t1, this._utils), t1);
                    if (u !== true) throw this._invalidHandler(r, u.value, this._utils);
                }
                _applyUnknownHandler(t1, r, n, u) {
                    let i = this._unknownHandler(t1, r, this._utils);
                    if (i) for (let o of Object.keys(i)){
                        if (this._identifyMissing(o, i)) continue;
                        let s = i[o];
                        o in this._utils.schemas ? u(o, s) : n[o] = s;
                    }
                }
                _applyPostprocess(t1) {
                    let r = this._postprocess(t1, this._utils);
                    if (r !== ve) {
                        if (r.delete) for (let n of r.delete)delete t1[n];
                        if (r.override) {
                            let { knownKeys: n, unknownKeys: u } = this._partitionOptionKeys(r.override);
                            for (let i of n){
                                let o = r.override[i];
                                this._applyValidation(o, i, this._utils.schemas[i]), t1[i] = o;
                            }
                            for (let i of u){
                                let o = r.override[i];
                                this._applyUnknownHandler(i, o, t1, (s, a2)=>{
                                    let D = this._utils.schemas[s];
                                    this._applyValidation(a2, s, D), t1[s] = a2;
                                });
                            }
                        }
                    }
                }
                constructor(t1, r){
                    let { logger: n = console, loggerPrintWidth: u = 80, descriptor: i = kn, unknown: o = Ln, invalid: s = Pn, deprecated: a2 = In, missing: D = ()=>false, required: l = ()=>false, preprocess: p = (d)=>d, postprocess: f2 = ()=>ve } = r || {};
                    this._utils = {
                        descriptor: i,
                        logger: n || {
                            warn: ()=>{}
                        },
                        loggerPrintWidth: u,
                        schemas: _n(t1, "name"),
                        normalizeDefaultResult: Jt,
                        normalizeExpectedResult: qt,
                        normalizeDeprecatedResult: Qt,
                        normalizeForwardResult: pt,
                        normalizeRedirectResult: Zt,
                        normalizeValidateResult: Xt
                    }, this._unknownHandler = o, this._invalidHandler = Tn(s), this._deprecatedHandler = a2, this._identifyMissing = (d, c)=>!(d in c) || D(d, c), this._identifyRequired = l, this._preprocess = p, this._postprocess = f2, this.cleanHistory();
                }
            };
            var er;
            function gi(e, t1, { logger: r = false, isCLI: n = false, passThrough: u = false, FlagSchema: i, descriptor: o } = {}) {
                if (n) {
                    if (!i) throw new Error("'FlagSchema' option is required.");
                    if (!o) throw new Error("'descriptor' option is required.");
                } else o = oe;
                let s = u ? Array.isArray(u) ? (f2, d)=>u.includes(f2) ? {
                        [f2]: d
                    } : void 0 : (f2, d)=>({
                        [f2]: d
                    }) : (f2, d, c)=>{
                    let { _: F, ...m } = c.schemas;
                    return Dt(f2, d, {
                        ...c,
                        schemas: m
                    });
                }, a2 = yi(t1, {
                    isCLI: n,
                    FlagSchema: i
                }), D = new Et(a2, {
                    logger: r,
                    unknown: s,
                    descriptor: o
                }), l = r !== false;
                l && er && (D._hasDeprecationWarned = er);
                let p = D.normalize(e);
                return l && (er = D._hasDeprecationWarned), p;
            }
            function yi(e, { isCLI: t1, FlagSchema: r }) {
                let n = [];
                t1 && n.push(ct.create({
                    name: "_"
                }));
                for (let u of e)n.push(Ai(u, {
                    isCLI: t1,
                    optionInfos: e,
                    FlagSchema: r
                })), u.alias && t1 && n.push(lt.create({
                    name: u.alias,
                    sourceName: u.name
                }));
                return n;
            }
            function Ai(e, { isCLI: t1, optionInfos: r, FlagSchema: n }) {
                let { name: u } = e, i = {
                    name: u
                }, o, s = {};
                switch(e.type){
                    case "int":
                        o = ht, t1 && (i.preprocess = Number);
                        break;
                    case "string":
                        o = je;
                        break;
                    case "choice":
                        o = Ft, i.choices = e.choices.map((a2)=>a2 != null && a2.redirect ? {
                                ...a2,
                                redirect: {
                                    to: {
                                        key: e.name,
                                        value: a2.redirect
                                    }
                                }
                            } : a2);
                        break;
                    case "boolean":
                        o = dt;
                        break;
                    case "flag":
                        o = n, i.flags = r.flatMap((a2)=>[
                                a2.alias,
                                a2.description && a2.name,
                                a2.oppositeDescription && `no-${a2.name}`
                            ].filter(Boolean));
                        break;
                    case "path":
                        o = je;
                        break;
                    default:
                        throw new Error(`Unexpected type ${e.type}`);
                }
                if (e.exception ? i.validate = (a2, D, l)=>e.exception(a2) || D.validate(a2, l) : i.validate = (a2, D, l)=>a2 === void 0 || D.validate(a2, l), e.redirect && (s.redirect = (a2)=>a2 ? {
                        to: typeof e.redirect == "string" ? e.redirect : {
                            key: e.redirect.option,
                            value: e.redirect.value
                        }
                    } : void 0), e.deprecated && (s.deprecated = true), t1 && !e.array) {
                    let a2 = i.preprocess || ((D)=>D);
                    i.preprocess = (D, l, p)=>l.preprocess(a2(Array.isArray(D) ? A2(false, D, -1) : D), p);
                }
                return e.array ? ft.create({
                    ...t1 ? {
                        preprocess: (a2)=>Array.isArray(a2) ? a2 : [
                                a2
                            ]
                    } : {},
                    ...s,
                    valueSchema: o.create(i)
                }) : o.create({
                    ...i,
                    ...s
                });
            }
            var Rn = gi;
            var vi = (e, t1, r)=>{
                if (!(e && t1 == null)) {
                    if (t1.findLast) return t1.findLast(r);
                    for(let n = t1.length - 1; n >= 0; n--){
                        let u = t1[n];
                        if (r(u, n, t1)) return u;
                    }
                }
            }, tr = vi;
            function rr(e, t1) {
                if (!t1) throw new Error("parserName is required.");
                let r = tr(false, e, (u)=>u.parsers && Object.prototype.hasOwnProperty.call(u.parsers, t1));
                if (r) return r;
                let n = `Couldn't resolve parser "${t1}".`;
                throw n += " Plugins must be explicitly added to the standalone bundle.", new Re(n);
            }
            function Yn(e, t1) {
                if (!t1) throw new Error("astFormat is required.");
                let r = tr(false, e, (u)=>u.printers && Object.prototype.hasOwnProperty.call(u.printers, t1));
                if (r) return r;
                let n = `Couldn't find plugin for AST format "${t1}".`;
                throw n += " Plugins must be explicitly added to the standalone bundle.", new Re(n);
            }
            function Ct({ plugins: e, parser: t1 }) {
                let r = rr(e, t1);
                return nr(r, t1);
            }
            function nr(e, t1) {
                let r = e.parsers[t1];
                return typeof r == "function" ? r() : r;
            }
            function jn(e, t1) {
                let r = e.printers[t1];
                return typeof r == "function" ? r() : r;
            }
            var Hn = {
                astFormat: "estree",
                printer: {},
                originalText: void 0,
                locStart: null,
                locEnd: null
            };
            async function Bi(e, t1 = {}) {
                var p;
                let r = {
                    ...e
                };
                if (!r.parser) if (r.filepath) {
                    if (r.parser = pn(r, {
                        physicalFile: r.filepath
                    }), !r.parser) throw new Ye(`No parser could be inferred for file "${r.filepath}".`);
                } else throw new Ye("No parser and no file path given, couldn't infer a parser.");
                let n = ot({
                    plugins: e.plugins,
                    showDeprecated: true
                }).options, u = {
                    ...Hn,
                    ...Object.fromEntries(n.filter((f2)=>f2.default !== void 0).map((f2)=>[
                            f2.name,
                            f2.default
                        ]))
                }, i = rr(r.plugins, r.parser), o = await nr(i, r.parser);
                r.astFormat = o.astFormat, r.locEnd = o.locEnd, r.locStart = o.locStart;
                let s = (p = i.printers) != null && p[o.astFormat] ? i : Yn(r.plugins, o.astFormat), a2 = await jn(s, o.astFormat);
                r.printer = a2;
                let D = s.defaultOptions ? Object.fromEntries(Object.entries(s.defaultOptions).filter(([, f2])=>f2 !== void 0)) : {}, l = {
                    ...u,
                    ...D
                };
                for (let [f2, d] of Object.entries(l))(r[f2] === null || r[f2] === void 0) && (r[f2] = d);
                return r.parser === "json" && (r.trailingComma = "none"), Rn(r, n, {
                    passThrough: Object.keys(Hn),
                    ...t1
                });
            }
            var se = Bi;
            var Mn = Ve($n(), 1);
            async function bi(e, t1) {
                let r = await Ct(t1), n = r.preprocess ? r.preprocess(e, t1) : e;
                t1.originalText = n;
                let u;
                try {
                    u = await r.parse(n, t1, t1);
                } catch (i) {
                    Ni(i, e);
                }
                return {
                    text: n,
                    ast: u
                };
            }
            function Ni(e, t1) {
                let { loc: r } = e;
                if (r) {
                    let n = (0, Mn.codeFrameColumns)(t1, r, {
                        highlightCode: true
                    });
                    throw e.message += `
` + n, e.codeFrame = n, e;
                }
                throw e;
            }
            var fe = bi;
            async function Vn(e, t1, r, n, u) {
                var _a;
                let { embeddedLanguageFormatting: i, printer: { embed: o, hasPrettierIgnore: s = ()=>false, getVisitorKeys: a2 } } = r;
                if (!o || i !== "auto") return;
                if (o.length > 2) throw new Error("printer.embed has too many parameters. The API changed in Prettier v3. Please update your plugin. See https://prettier.io/docs/en/plugins.html#optional-embed");
                let D = q((_a = o.getVisitorKeys) != null ? _a : a2), l = [];
                d();
                let p = e.stack;
                for (let { print: c, node: F, pathStack: m } of l)try {
                    e.stack = m;
                    let h = await c(f2, t1, e, r);
                    h && u.set(F, h);
                } catch (h) {
                    if (globalThis.PRETTIER_DEBUG) throw h;
                }
                e.stack = p;
                function f2(c, F) {
                    return Oi(c, F, r, n);
                }
                function d() {
                    let { node: c } = e;
                    if (c === null || typeof c != "object" || s(e)) return;
                    for (let m of D(c))Array.isArray(c[m]) ? e.each(d, m) : e.call(d, m);
                    let F = o(e, r);
                    if (F) {
                        if (typeof F == "function") {
                            l.push({
                                print: F,
                                node: c,
                                pathStack: [
                                    ...e.stack
                                ]
                            });
                            return;
                        }
                        u.set(c, F);
                    }
                }
            }
            async function Oi(e, t1, r, n) {
                let u = await se({
                    ...r,
                    ...t1,
                    parentParser: r.parser,
                    originalText: e
                }, {
                    passThrough: true
                }), { ast: i } = await fe(e, u), o = await n(i, u);
                return Xe(o);
            }
            function Si(e, t1) {
                let { originalText: r, [Symbol.for("comments")]: n, locStart: u, locEnd: i, [Symbol.for("printedComments")]: o } = t1, { node: s } = e, a2 = u(s), D = i(s);
                for (let l of n)u(l) >= a2 && i(l) <= D && o.add(l);
                return r.slice(a2, D);
            }
            var Un = Si;
            async function He(e, t1) {
                ({ ast: e } = await ir(e, t1));
                let r = /* @__PURE__ */ new Map(), n = new qr(e), u = cn(t1), i = /* @__PURE__ */ new Map();
                await Vn(n, s, t1, He, i);
                let o = await zn(n, t1, s, void 0, i);
                if (ln(t1), t1.nodeAfterCursor && !t1.nodeBeforeCursor) return [
                    Z,
                    o
                ];
                if (t1.nodeBeforeCursor && !t1.nodeAfterCursor) return [
                    o,
                    Z
                ];
                return o;
                function s(D, l) {
                    return D === void 0 || D === n ? a2(l) : Array.isArray(D) ? n.call(()=>a2(l), ...D) : n.call(()=>a2(l), D);
                }
                function a2(D) {
                    u(n);
                    let l = n.node;
                    if (l == null) return "";
                    let p = l && typeof l == "object" && D === void 0;
                    if (p && r.has(l)) return r.get(l);
                    let f2 = zn(n, t1, s, D, i);
                    return p && r.set(l, f2), f2;
                }
            }
            function zn(e, t1, r, n, u) {
                var a2;
                let { node: i } = e, { printer: o } = t1, s;
                switch((a2 = o.hasPrettierIgnore) != null && a2.call(o, e) ? s = Un(e, t1) : u.has(i) ? s = u.get(i) : s = o.print(e, t1, r, n), i){
                    case t1.cursorNode:
                        s = me(s, (D)=>[
                                Z,
                                D,
                                Z
                            ]);
                        break;
                    case t1.nodeBeforeCursor:
                        s = me(s, (D)=>[
                                D,
                                Z
                            ]);
                        break;
                    case t1.nodeAfterCursor:
                        s = me(s, (D)=>[
                                Z,
                                D
                            ]);
                        break;
                }
                return o.printComment && (!o.willPrintOwnComments || !o.willPrintOwnComments(e, t1)) && (s = Dn(e, s, t1)), s;
            }
            async function ir(e, t1) {
                var _a, _b;
                let r = (_a = e.comments) != null ? _a : [];
                t1[Symbol.for("comments")] = r, t1[Symbol.for("tokens")] = (_b = e.tokens) != null ? _b : [], t1[Symbol.for("printedComments")] = /* @__PURE__ */ new Set(), on(e, t1);
                let { printer: { preprocess: n } } = t1;
                return e = n ? await n(e, t1) : e, {
                    ast: e,
                    comments: r
                };
            }
            function Ti(e, t1) {
                let { cursorOffset: r, locStart: n, locEnd: u } = t1, i = q(t1.printer.getVisitorKeys), o = (d)=>n(d) <= r && u(d) >= r, s = e, a2 = [
                    e
                ];
                for (let d of Zr(e, {
                    getVisitorKeys: i,
                    filter: o
                }))a2.push(d), s = d;
                if (en(s, {
                    getVisitorKeys: i
                })) return {
                    cursorNode: s
                };
                let D, l, p = -1, f2 = Number.POSITIVE_INFINITY;
                for(; a2.length > 0 && (D === void 0 || l === void 0);){
                    s = a2.pop();
                    let d = D !== void 0, c = l !== void 0;
                    for (let F of ye(s, {
                        getVisitorKeys: i
                    })){
                        if (!d) {
                            let m = u(F);
                            m <= r && m > p && (D = F, p = m);
                        }
                        if (!c) {
                            let m = n(F);
                            m >= r && m < f2 && (l = F, f2 = m);
                        }
                    }
                }
                return {
                    nodeBeforeCursor: D,
                    nodeAfterCursor: l
                };
            }
            var Gn = Ti;
            function ki(e, t1) {
                var _a;
                let { printer: { massageAstNode: r, getVisitorKeys: n } } = t1;
                if (!r) return e;
                let u = q(n), i = (_a = r.ignoredProperties) != null ? _a : /* @__PURE__ */ new Set();
                return o(e);
                function o(s, a2) {
                    if (!(s !== null && typeof s == "object")) return s;
                    if (Array.isArray(s)) return s.map((f2)=>o(f2, a2)).filter(Boolean);
                    let D = {}, l = new Set(u(s));
                    for(let f2 in s)!Object.prototype.hasOwnProperty.call(s, f2) || i.has(f2) || (l.has(f2) ? D[f2] = o(s[f2], s) : D[f2] = s[f2]);
                    let p = r(s, D, a2);
                    if (p !== null) return p != null ? p : D;
                }
            }
            var Kn = ki;
            var Li = (e, t1, r)=>{
                if (!(e && t1 == null)) {
                    if (t1.findLastIndex) return t1.findLastIndex(r);
                    for(let n = t1.length - 1; n >= 0; n--){
                        let u = t1[n];
                        if (r(u, n, t1)) return n;
                    }
                    return -1;
                }
            }, Jn = Li;
            var Pi = ({ parser: e })=>e === "json" || e === "json5" || e === "jsonc" || e === "json-stringify";
            function Ii(e, t1) {
                let r = [
                    e.node,
                    ...e.parentNodes
                ], n = /* @__PURE__ */ new Set([
                    t1.node,
                    ...t1.parentNodes
                ]);
                return r.find((u)=>Qn.has(u.type) && n.has(u));
            }
            function qn(e) {
                let t1 = Jn(false, e, (r)=>r.type !== "Program" && r.type !== "File");
                return t1 === -1 ? e : e.slice(0, t1 + 1);
            }
            function Ri(e, t1, { locStart: r, locEnd: n }) {
                let u = e.node, i = t1.node;
                if (u === i) return {
                    startNode: u,
                    endNode: i
                };
                let o = r(e.node);
                for (let a2 of qn(t1.parentNodes))if (r(a2) >= o) i = a2;
                else break;
                let s = n(t1.node);
                for (let a2 of qn(e.parentNodes)){
                    if (n(a2) <= s) u = a2;
                    else break;
                    if (u === i) break;
                }
                return {
                    startNode: u,
                    endNode: i
                };
            }
            function or(e, t1, r, n, u = [], i) {
                let { locStart: o, locEnd: s } = r, a2 = o(e), D = s(e);
                if (!(t1 > D || t1 < a2 || i === "rangeEnd" && t1 === a2 || i === "rangeStart" && t1 === D)) {
                    for (let l of it(e, r)){
                        let p = or(l, t1, r, n, [
                            e,
                            ...u
                        ], i);
                        if (p) return p;
                    }
                    if (!n || n(e, u[0])) return {
                        node: e,
                        parentNodes: u
                    };
                }
            }
            function Yi(e, t1) {
                return t1 !== "DeclareExportDeclaration" && e !== "TypeParameterDeclaration" && (e === "Directive" || e === "TypeAlias" || e === "TSExportAssignment" || e.startsWith("Declare") || e.startsWith("TSDeclare") || e.endsWith("Statement") || e.endsWith("Declaration"));
            }
            var Qn = /* @__PURE__ */ new Set([
                "JsonRoot",
                "ObjectExpression",
                "ArrayExpression",
                "StringLiteral",
                "NumericLiteral",
                "BooleanLiteral",
                "NullLiteral",
                "UnaryExpression",
                "TemplateLiteral"
            ]), ji = /* @__PURE__ */ new Set([
                "OperationDefinition",
                "FragmentDefinition",
                "VariableDefinition",
                "TypeExtensionDefinition",
                "ObjectTypeDefinition",
                "FieldDefinition",
                "DirectiveDefinition",
                "EnumTypeDefinition",
                "EnumValueDefinition",
                "InputValueDefinition",
                "InputObjectTypeDefinition",
                "SchemaDefinition",
                "OperationTypeDefinition",
                "InterfaceTypeDefinition",
                "UnionTypeDefinition",
                "ScalarTypeDefinition"
            ]);
            function Xn(e, t1, r) {
                if (!t1) return false;
                switch(e.parser){
                    case "flow":
                    case "babel":
                    case "babel-flow":
                    case "babel-ts":
                    case "typescript":
                    case "acorn":
                    case "espree":
                    case "meriyah":
                    case "__babel_estree":
                        return Yi(t1.type, r == null ? void 0 : r.type);
                    case "json":
                    case "json5":
                    case "jsonc":
                    case "json-stringify":
                        return Qn.has(t1.type);
                    case "graphql":
                        return ji.has(t1.kind);
                    case "vue":
                        return t1.tag !== "root";
                }
                return false;
            }
            function Zn(e, t1, r) {
                let { rangeStart: n, rangeEnd: u, locStart: i, locEnd: o } = t1;
                Pe.ok(u > n);
                let s = e.slice(n, u).search(/\S/u), a2 = s === -1;
                if (!a2) for(n += s; u > n && !/\S/u.test(e[u - 1]); --u);
                let D = or(r, n, t1, (d, c)=>Xn(t1, d, c), [], "rangeStart"), l = a2 ? D : or(r, u, t1, (d)=>Xn(t1, d), [], "rangeEnd");
                if (!D || !l) return {
                    rangeStart: 0,
                    rangeEnd: 0
                };
                let p, f2;
                if (Pi(t1)) {
                    let d = Ii(D, l);
                    p = d, f2 = d;
                } else ({ startNode: p, endNode: f2 } = Ri(D, l, t1));
                return {
                    rangeStart: Math.min(i(p), i(f2)),
                    rangeEnd: Math.max(o(p), o(f2))
                };
            }
            var nu = "\uFEFF", eu = Symbol("cursor");
            async function uu(e, t1, r = 0) {
                if (!e || e.trim().length === 0) return {
                    formatted: "",
                    cursorOffset: -1,
                    comments: []
                };
                let { ast: n, text: u } = await fe(e, t1);
                t1.cursorOffset >= 0 && (t1 = {
                    ...t1,
                    ...Gn(n, t1)
                });
                let i = await He(n, t1, r);
                r > 0 && (i = et([
                    K,
                    i
                ], r, t1.tabWidth));
                let o = Ce(i, t1);
                if (r > 0) {
                    let a2 = o.formatted.trim();
                    o.cursorNodeStart !== void 0 && (o.cursorNodeStart -= o.formatted.indexOf(a2), o.cursorNodeStart < 0 && (o.cursorNodeStart = 0, o.cursorNodeText = o.cursorNodeText.trimStart()), o.cursorNodeStart + o.cursorNodeText.length > a2.length && (o.cursorNodeText = o.cursorNodeText.trimEnd())), o.formatted = a2 + be(t1.endOfLine);
                }
                let s = t1[Symbol.for("comments")];
                if (t1.cursorOffset >= 0) {
                    let a2, D, l, p;
                    if ((t1.cursorNode || t1.nodeBeforeCursor || t1.nodeAfterCursor) && o.cursorNodeText) if (l = o.cursorNodeStart, p = o.cursorNodeText, t1.cursorNode) a2 = t1.locStart(t1.cursorNode), D = u.slice(a2, t1.locEnd(t1.cursorNode));
                    else {
                        if (!t1.nodeBeforeCursor && !t1.nodeAfterCursor) throw new Error("Cursor location must contain at least one of cursorNode, nodeBeforeCursor, nodeAfterCursor");
                        a2 = t1.nodeBeforeCursor ? t1.locEnd(t1.nodeBeforeCursor) : 0;
                        let h = t1.nodeAfterCursor ? t1.locStart(t1.nodeAfterCursor) : u.length;
                        D = u.slice(a2, h);
                    }
                    else a2 = 0, D = u, l = 0, p = o.formatted;
                    let f2 = t1.cursorOffset - a2;
                    if (D === p) return {
                        formatted: o.formatted,
                        cursorOffset: l + f2,
                        comments: s
                    };
                    let d = D.split("");
                    d.splice(f2, 0, eu);
                    let c = p.split(""), F = yr(d, c), m = l;
                    for (let h of F)if (h.removed) {
                        if (h.value.includes(eu)) break;
                    } else m += h.count;
                    return {
                        formatted: o.formatted,
                        cursorOffset: m,
                        comments: s
                    };
                }
                return {
                    formatted: o.formatted,
                    cursorOffset: -1,
                    comments: s
                };
            }
            async function Hi(e, t1) {
                let { ast: r, text: n } = await fe(e, t1), { rangeStart: u, rangeEnd: i } = Zn(n, t1, r), o = n.slice(u, i), s = Math.min(u, n.lastIndexOf(`
`, u) + 1), a2 = n.slice(s, u).match(/^\s*/u)[0], D = ge(a2, t1.tabWidth), l = await uu(o, {
                    ...t1,
                    rangeStart: 0,
                    rangeEnd: Number.POSITIVE_INFINITY,
                    cursorOffset: t1.cursorOffset > u && t1.cursorOffset <= i ? t1.cursorOffset - u : -1,
                    endOfLine: "lf"
                }, D), p = l.formatted.trimEnd(), { cursorOffset: f2 } = t1;
                f2 > i ? f2 += p.length - o.length : l.cursorOffset >= 0 && (f2 = l.cursorOffset + u);
                let d = n.slice(0, u) + p + n.slice(i);
                if (t1.endOfLine !== "lf") {
                    let c = be(t1.endOfLine);
                    f2 >= 0 && c === `\r
` && (f2 += Nt(d.slice(0, f2), `
`)), d = ne(false, d, `
`, c);
                }
                return {
                    formatted: d,
                    cursorOffset: f2,
                    comments: l.comments
                };
            }
            function sr(e, t1, r) {
                return typeof t1 != "number" || Number.isNaN(t1) || t1 < 0 || t1 > e.length ? r : t1;
            }
            function tu(e, t1) {
                let { cursorOffset: r, rangeStart: n, rangeEnd: u } = t1;
                return r = sr(e, r, -1), n = sr(e, n, 0), u = sr(e, u, e.length), {
                    ...t1,
                    cursorOffset: r,
                    rangeStart: n,
                    rangeEnd: u
                };
            }
            function iu(e, t1) {
                let { cursorOffset: r, rangeStart: n, rangeEnd: u, endOfLine: i } = tu(e, t1), o = e.charAt(0) === nu;
                if (o && (e = e.slice(1), r--, n--, u--), i === "auto" && (i = Ar(e)), e.includes("\r")) {
                    let s = (a2)=>Nt(e.slice(0, Math.max(a2, 0)), `\r
`);
                    r -= s(r), n -= s(n), u -= s(u), e = vr(e);
                }
                return {
                    hasBOM: o,
                    text: e,
                    options: tu(e, {
                        ...t1,
                        cursorOffset: r,
                        rangeStart: n,
                        rangeEnd: u,
                        endOfLine: i
                    })
                };
            }
            async function ru(e, t1) {
                let r = await Ct(t1);
                return !r.hasPragma || r.hasPragma(e);
            }
            async function ar(e, t1) {
                let { hasBOM: r, text: n, options: u } = iu(e, await se(t1));
                if (u.rangeStart >= u.rangeEnd && n !== "" || u.requirePragma && !await ru(n, u)) return {
                    formatted: e,
                    cursorOffset: t1.cursorOffset,
                    comments: []
                };
                let i;
                return u.rangeStart > 0 || u.rangeEnd < n.length ? i = await Hi(n, u) : (!u.requirePragma && u.insertPragma && u.printer.insertPragma && !await ru(n, u) && (n = u.printer.insertPragma(n)), i = await uu(n, u)), r && (i.formatted = nu + i.formatted, i.cursorOffset >= 0 && i.cursorOffset++), i;
            }
            async function ou(e, t1, r) {
                let { text: n, options: u } = iu(e, await se(t1)), i = await fe(n, u);
                return r && (r.preprocessForPrint && (i.ast = await ir(i.ast, u)), r.massage && (i.ast = Kn(i.ast, u))), i;
            }
            async function su(e, t1) {
                t1 = await se(t1);
                let r = await He(e, t1);
                return Ce(r, t1);
            }
            async function au(e, t1) {
                let r = Vr(e), { formatted: n } = await ar(r, {
                    ...t1,
                    parser: "__js_expression"
                });
                return n;
            }
            async function Du(e, t1) {
                t1 = await se(t1);
                let { ast: r } = await fe(e, t1);
                return He(r, t1);
            }
            async function lu(e, t1) {
                return Ce(e, await se(t1));
            }
            var Dr = {};
            vt(Dr, {
                builders: ()=>$i,
                printer: ()=>Mi,
                utils: ()=>Vi
            });
            var $i = {
                join: Se,
                line: Ze,
                softline: $r,
                hardline: K,
                literalline: Qe,
                group: kt,
                conditionalGroup: Ir,
                fill: Rr,
                lineSuffix: Te,
                lineSuffixBoundary: Hr,
                cursor: Z,
                breakParent: he,
                ifBreak: Yr,
                trim: Wr,
                indent: le,
                indentIfBreak: jr,
                align: De,
                addAlignmentToDoc: et,
                markAsRoot: Lr,
                dedentToRoot: kr,
                dedent: Pr,
                hardlineWithoutBreakParent: ke,
                literallineWithoutBreakParent: Lt,
                label: Mr,
                concat: (e)=>e
            }, Mi = {
                printDocToString: Ce
            }, Vi = {
                willBreak: xr,
                traverseDoc: Fe,
                findInDoc: qe,
                mapDoc: Oe,
                removeLines: Nr,
                stripTrailingHardline: Xe,
                replaceEndOfLine: Or,
                canBreak: Sr
            };
            var cu = "3.5.1";
            var cr = {};
            vt(cr, {
                addDanglingComment: ()=>re,
                addLeadingComment: ()=>ue,
                addTrailingComment: ()=>ie,
                getAlignmentSize: ()=>ge,
                getIndentSize: ()=>fu,
                getMaxContinuousCount: ()=>du,
                getNextNonSpaceNonCommentCharacter: ()=>pu,
                getNextNonSpaceNonCommentCharacterIndex: ()=>no,
                getPreferredQuote: ()=>mu,
                getStringWidth: ()=>Le,
                hasNewline: ()=>V,
                hasNewlineInRange: ()=>hu,
                hasSpaces: ()=>Eu,
                isNextLineEmpty: ()=>so,
                isNextLineEmptyAfterIndex: ()=>gt,
                isPreviousLineEmpty: ()=>io,
                makeString: ()=>Cu,
                skip: ()=>Ae,
                skipEverythingButNewLine: ()=>ut,
                skipInlineComment: ()=>Be,
                skipNewline: ()=>W,
                skipSpaces: ()=>S,
                skipToLineEnd: ()=>nt,
                skipTrailingComment: ()=>we,
                skipWhitespace: ()=>tn
            });
            function Ui(e, t1) {
                if (t1 === false) return false;
                if (e.charAt(t1) === "/" && e.charAt(t1 + 1) === "*") {
                    for(let r = t1 + 2; r < e.length; ++r)if (e.charAt(r) === "*" && e.charAt(r + 1) === "/") return r + 2;
                }
                return t1;
            }
            var Be = Ui;
            function zi(e, t1) {
                return t1 === false ? false : e.charAt(t1) === "/" && e.charAt(t1 + 1) === "/" ? ut(e, t1) : t1;
            }
            var we = zi;
            function Gi(e, t1) {
                let r = null, n = t1;
                for(; n !== r;)r = n, n = S(e, n), n = Be(e, n), n = we(e, n), n = W(e, n);
                return n;
            }
            var We = Gi;
            function Ki(e, t1) {
                let r = null, n = t1;
                for(; n !== r;)r = n, n = nt(e, n), n = Be(e, n), n = S(e, n);
                return n = we(e, n), n = W(e, n), n !== false && V(e, n);
            }
            var gt = Ki;
            function Ji(e, t1) {
                let r = e.lastIndexOf(`
`);
                return r === -1 ? 0 : ge(e.slice(r + 1).match(/^[\t ]*/u)[0], t1);
            }
            var fu = Ji;
            function lr(e) {
                if (typeof e != "string") throw new TypeError("Expected a string");
                return e.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
            }
            function qi(e, t1) {
                let r = e.match(new RegExp(`(${lr(t1)})+`, "gu"));
                return r === null ? 0 : r.reduce((n, u)=>Math.max(n, u.length / t1.length), 0);
            }
            var du = qi;
            function Xi(e, t1) {
                let r = We(e, t1);
                return r === false ? "" : e.charAt(r);
            }
            var pu = Xi;
            var yt = "'", Fu = '"';
            function Qi(e, t1) {
                let r = t1 === true || t1 === yt ? yt : Fu, n = r === yt ? Fu : yt, u = 0, i = 0;
                for (let o of e)o === r ? u++ : o === n && i++;
                return u > i ? n : r;
            }
            var mu = Qi;
            function Zi(e, t1, r) {
                for(let n = t1; n < r; ++n)if (e.charAt(n) === `
`) return true;
                return false;
            }
            var hu = Zi;
            function eo(e, t1, r = {}) {
                return S(e, r.backwards ? t1 - 1 : t1, r) !== t1;
            }
            var Eu = eo;
            function to(e, t1, r) {
                let n = t1 === '"' ? "'" : '"', i = ne(false, e, RegExp("\\\\(.)|([\"'])", "gsu"), (o, s, a2)=>s === n ? s : a2 === t1 ? "\\" + a2 : a2 || (r && /^[^\n\r"'0-7\\bfnrt-vx\u2028\u2029]$/u.test(s) ? s : "\\" + s));
                return t1 + i + t1;
            }
            var Cu = to;
            function ro(e, t1, r) {
                return We(e, r(t1));
            }
            function no(e, t1) {
                return arguments.length === 2 || typeof t1 == "number" ? We(e, t1) : ro(...arguments);
            }
            function uo(e, t1, r) {
                return Ie(e, r(t1));
            }
            function io(e, t1) {
                return arguments.length === 2 || typeof t1 == "number" ? Ie(e, t1) : uo(...arguments);
            }
            function oo(e, t1, r) {
                return gt(e, r(t1));
            }
            function so(e, t1) {
                return arguments.length === 2 || typeof t1 == "number" ? gt(e, t1) : oo(...arguments);
            }
            function de(e, t1 = 1) {
                return async (...r)=>{
                    var _a, _b;
                    let n = (_a = r[t1]) != null ? _a : {}, u = (_b = n.plugins) != null ? _b : [];
                    return r[t1] = {
                        ...n,
                        plugins: Array.isArray(u) ? u : Object.values(u)
                    }, e(...r);
                };
            }
            var gu = de(ar);
            async function yu(e, t1) {
                let { formatted: r } = await gu(e, {
                    ...t1,
                    cursorOffset: -1
                });
                return r;
            }
            async function ao(e, t1) {
                return await yu(e, t1) === e;
            }
            var Do = de(ot, 0), lo = {
                parse: de(ou),
                formatAST: de(su),
                formatDoc: de(au),
                printToDoc: de(Du),
                printDocToString: de(lu)
            };
            return xu(co);
        });
    }
});
// ../../node_modules/prettier/plugins/yaml.js
var require_yaml = __commonJS({
    "../../node_modules/prettier/plugins/yaml.js" (exports, module) {
        (function(f2) {
            function e() {
                var i = f2();
                return i.default || i;
            }
            if (typeof exports == "object" && typeof module == "object") module.exports = e();
            else if (typeof define == "function" && __webpack_require__.amdO) define(e);
            else {
                var t1 = typeof globalThis < "u" ? globalThis : typeof __webpack_require__.g < "u" ? __webpack_require__.g : typeof self < "u" ? self : this || {};
                t1.prettierPlugins = t1.prettierPlugins || {}, t1.prettierPlugins.yaml = e();
            }
        })(function() {
            "use strict";
            var Ti = Object.create;
            var yt = Object.defineProperty;
            var Ci = Object.getOwnPropertyDescriptor;
            var Mi = Object.getOwnPropertyNames;
            var ki = Object.getPrototypeOf, vi = Object.prototype.hasOwnProperty;
            var te = (t1, e)=>()=>(e || t1((e = {
                        exports: {}
                    }).exports, e), e.exports), nr = (t1, e)=>{
                for(var n in e)yt(t1, n, {
                    get: e[n],
                    enumerable: true
                });
            }, rr = (t1, e, n, r)=>{
                if (e && typeof e == "object" || typeof e == "function") for (let s of Mi(e))!vi.call(t1, s) && s !== n && yt(t1, s, {
                    get: ()=>e[s],
                    enumerable: !(r = Ci(e, s)) || r.enumerable
                });
                return t1;
            };
            var sr = (t1, e, n)=>(n = t1 != null ? Ti(ki(t1)) : {}, rr(e || !t1 || !t1.__esModule ? yt(n, "default", {
                    value: t1,
                    enumerable: true
                }) : n, t1)), Ii = (t1)=>rr(yt({}, "__esModule", {
                    value: true
                }), t1);
            var le = te((U)=>{
                "use strict";
                var re = {
                    ANCHOR: "&",
                    COMMENT: "#",
                    TAG: "!",
                    DIRECTIVES_END: "-",
                    DOCUMENT_END: "."
                }, lt = {
                    ALIAS: "ALIAS",
                    BLANK_LINE: "BLANK_LINE",
                    BLOCK_FOLDED: "BLOCK_FOLDED",
                    BLOCK_LITERAL: "BLOCK_LITERAL",
                    COMMENT: "COMMENT",
                    DIRECTIVE: "DIRECTIVE",
                    DOCUMENT: "DOCUMENT",
                    FLOW_MAP: "FLOW_MAP",
                    FLOW_SEQ: "FLOW_SEQ",
                    MAP: "MAP",
                    MAP_KEY: "MAP_KEY",
                    MAP_VALUE: "MAP_VALUE",
                    PLAIN: "PLAIN",
                    QUOTE_DOUBLE: "QUOTE_DOUBLE",
                    QUOTE_SINGLE: "QUOTE_SINGLE",
                    SEQ: "SEQ",
                    SEQ_ITEM: "SEQ_ITEM"
                }, Ao = "tag:yaml.org,2002:", To = {
                    MAP: "tag:yaml.org,2002:map",
                    SEQ: "tag:yaml.org,2002:seq",
                    STR: "tag:yaml.org,2002:str"
                };
                function Ps(t1) {
                    let e = [
                        0
                    ], n = t1.indexOf(`
`);
                    for(; n !== -1;)n += 1, e.push(n), n = t1.indexOf(`
`, n);
                    return e;
                }
                function _s(t1) {
                    let e, n;
                    return typeof t1 == "string" ? (e = Ps(t1), n = t1) : (Array.isArray(t1) && (t1 = t1[0]), t1 && t1.context && (t1.lineStarts || (t1.lineStarts = Ps(t1.context.src)), e = t1.lineStarts, n = t1.context.src)), {
                        lineStarts: e,
                        src: n
                    };
                }
                function Tn(t1, e) {
                    if (typeof t1 != "number" || t1 < 0) return null;
                    let { lineStarts: n, src: r } = _s(e);
                    if (!n || !r || t1 > r.length) return null;
                    for(let i = 0; i < n.length; ++i){
                        let o = n[i];
                        if (t1 < o) return {
                            line: i,
                            col: t1 - n[i - 1] + 1
                        };
                        if (t1 === o) return {
                            line: i + 1,
                            col: 1
                        };
                    }
                    let s = n.length;
                    return {
                        line: s,
                        col: t1 - n[s - 1] + 1
                    };
                }
                function Co(t1, e) {
                    let { lineStarts: n, src: r } = _s(e);
                    if (!n || !(t1 >= 1) || t1 > n.length) return null;
                    let s = n[t1 - 1], i = n[t1];
                    for(; i && i > s && r[i - 1] === `
`;)--i;
                    return r.slice(s, i);
                }
                function Mo({ start: t1, end: e }, n, r = 80) {
                    let s = Co(t1.line, n);
                    if (!s) return null;
                    let { col: i } = t1;
                    if (s.length > r) if (i <= r - 10) s = s.substr(0, r - 1) + "\u2026";
                    else {
                        let f2 = Math.round(r / 2);
                        s.length > i + f2 && (s = s.substr(0, i + f2 - 1) + "\u2026"), i -= s.length - r, s = "\u2026" + s.substr(1 - r);
                    }
                    let o = 1, a2 = "";
                    e && (e.line === t1.line && i + (e.col - t1.col) <= r + 1 ? o = e.col - t1.col : (o = Math.min(s.length + 1, r) - i, a2 = "\u2026"));
                    let c = i > 1 ? " ".repeat(i - 1) : "", l = "^".repeat(o);
                    return `${s}
${c}${l}${a2}`;
                }
                var Be = class t1 {
                    static copy(e) {
                        return new t1(e.start, e.end);
                    }
                    isEmpty() {
                        return typeof this.start != "number" || !this.end || this.end <= this.start;
                    }
                    setOrigRange(e, n) {
                        let { start: r, end: s } = this;
                        if (e.length === 0 || s <= e[0]) return this.origStart = r, this.origEnd = s, n;
                        let i = n;
                        for(; i < e.length && !(e[i] > r);)++i;
                        this.origStart = r + i;
                        let o = i;
                        for(; i < e.length && !(e[i] >= s);)++i;
                        return this.origEnd = s + i, o;
                    }
                    constructor(e, n){
                        this.start = e, this.end = n || e;
                    }
                }, se = class t1 {
                    static addStringTerminator(e, n, r) {
                        if (r[r.length - 1] === `
`) return r;
                        let s = t1.endOfWhiteSpace(e, n);
                        return s >= e.length || e[s] === `
` ? r + `
` : r;
                    }
                    static atDocumentBoundary(e, n, r) {
                        let s = e[n];
                        if (!s) return true;
                        let i = e[n - 1];
                        if (i && i !== `
`) return false;
                        if (r) {
                            if (s !== r) return false;
                        } else if (s !== re.DIRECTIVES_END && s !== re.DOCUMENT_END) return false;
                        let o = e[n + 1], a2 = e[n + 2];
                        if (o !== s || a2 !== s) return false;
                        let c = e[n + 3];
                        return !c || c === `
` || c === "	" || c === " ";
                    }
                    static endOfIdentifier(e, n) {
                        let r = e[n], s = r === "<", i = s ? [
                            `
`,
                            "	",
                            " ",
                            ">"
                        ] : [
                            `
`,
                            "	",
                            " ",
                            "[",
                            "]",
                            "{",
                            "}",
                            ","
                        ];
                        for(; r && i.indexOf(r) === -1;)r = e[n += 1];
                        return s && r === ">" && (n += 1), n;
                    }
                    static endOfIndent(e, n) {
                        let r = e[n];
                        for(; r === " ";)r = e[n += 1];
                        return n;
                    }
                    static endOfLine(e, n) {
                        let r = e[n];
                        for(; r && r !== `
`;)r = e[n += 1];
                        return n;
                    }
                    static endOfWhiteSpace(e, n) {
                        let r = e[n];
                        for(; r === "	" || r === " ";)r = e[n += 1];
                        return n;
                    }
                    static startOfLine(e, n) {
                        let r = e[n - 1];
                        if (r === `
`) return n;
                        for(; r && r !== `
`;)r = e[n -= 1];
                        return n + 1;
                    }
                    static endOfBlockIndent(e, n, r) {
                        let s = t1.endOfIndent(e, r);
                        if (s > r + n) return s;
                        {
                            let i = t1.endOfWhiteSpace(e, s), o = e[i];
                            if (!o || o === `
`) return i;
                        }
                        return null;
                    }
                    static atBlank(e, n, r) {
                        let s = e[n];
                        return s === `
` || s === "	" || s === " " || r && !s;
                    }
                    static nextNodeIsIndented(e, n, r) {
                        return !e || n < 0 ? false : n > 0 ? true : r && e === "-";
                    }
                    static normalizeOffset(e, n) {
                        let r = e[n];
                        return r ? r !== `
` && e[n - 1] === `
` ? n - 1 : t1.endOfWhiteSpace(e, n) : n;
                    }
                    static foldNewline(e, n, r) {
                        let s = 0, i = false, o = "", a2 = e[n + 1];
                        for(; a2 === " " || a2 === "	" || a2 === `
`;){
                            switch(a2){
                                case `
`:
                                    s = 0, n += 1, o += `
`;
                                    break;
                                case "	":
                                    s <= r && (i = true), n = t1.endOfWhiteSpace(e, n + 2) - 1;
                                    break;
                                case " ":
                                    s += 1, n += 1;
                                    break;
                            }
                            a2 = e[n + 1];
                        }
                        return o || (o = " "), a2 && s <= r && (i = true), {
                            fold: o,
                            offset: n,
                            error: i
                        };
                    }
                    getPropValue(e, n, r) {
                        if (!this.context) return null;
                        let { src: s } = this.context, i = this.props[e];
                        return i && s[i.start] === n ? s.slice(i.start + (r ? 1 : 0), i.end) : null;
                    }
                    get anchor() {
                        for(let e = 0; e < this.props.length; ++e){
                            let n = this.getPropValue(e, re.ANCHOR, true);
                            if (n != null) return n;
                        }
                        return null;
                    }
                    get comment() {
                        let e = [];
                        for(let n = 0; n < this.props.length; ++n){
                            let r = this.getPropValue(n, re.COMMENT, true);
                            r != null && e.push(r);
                        }
                        return e.length > 0 ? e.join(`
`) : null;
                    }
                    commentHasRequiredWhitespace(e) {
                        let { src: n } = this.context;
                        if (this.header && e === this.header.end || !this.valueRange) return false;
                        let { end: r } = this.valueRange;
                        return e !== r || t1.atBlank(n, r - 1);
                    }
                    get hasComment() {
                        if (this.context) {
                            let { src: e } = this.context;
                            for(let n = 0; n < this.props.length; ++n)if (e[this.props[n].start] === re.COMMENT) return true;
                        }
                        return false;
                    }
                    get hasProps() {
                        if (this.context) {
                            let { src: e } = this.context;
                            for(let n = 0; n < this.props.length; ++n)if (e[this.props[n].start] !== re.COMMENT) return true;
                        }
                        return false;
                    }
                    get includesTrailingLines() {
                        return false;
                    }
                    get jsonLike() {
                        return [
                            lt.FLOW_MAP,
                            lt.FLOW_SEQ,
                            lt.QUOTE_DOUBLE,
                            lt.QUOTE_SINGLE
                        ].indexOf(this.type) !== -1;
                    }
                    get rangeAsLinePos() {
                        if (!this.range || !this.context) return;
                        let e = Tn(this.range.start, this.context.root);
                        if (!e) return;
                        let n = Tn(this.range.end, this.context.root);
                        return {
                            start: e,
                            end: n
                        };
                    }
                    get rawValue() {
                        if (!this.valueRange || !this.context) return null;
                        let { start: e, end: n } = this.valueRange;
                        return this.context.src.slice(e, n);
                    }
                    get tag() {
                        for(let e = 0; e < this.props.length; ++e){
                            let n = this.getPropValue(e, re.TAG, false);
                            if (n != null) {
                                if (n[1] === "<") return {
                                    verbatim: n.slice(2, -1)
                                };
                                {
                                    let [r, s, i] = n.match(/^(.*!)([^!]*)$/);
                                    return {
                                        handle: s,
                                        suffix: i
                                    };
                                }
                            }
                        }
                        return null;
                    }
                    get valueRangeContainsNewline() {
                        if (!this.valueRange || !this.context) return false;
                        let { start: e, end: n } = this.valueRange, { src: r } = this.context;
                        for(let s = e; s < n; ++s)if (r[s] === `
`) return true;
                        return false;
                    }
                    parseComment(e) {
                        let { src: n } = this.context;
                        if (n[e] === re.COMMENT) {
                            let r = t1.endOfLine(n, e + 1), s = new Be(e, r);
                            return this.props.push(s), r;
                        }
                        return e;
                    }
                    setOrigRanges(e, n) {
                        return this.range && (n = this.range.setOrigRange(e, n)), this.valueRange && this.valueRange.setOrigRange(e, n), this.props.forEach((r)=>r.setOrigRange(e, n)), n;
                    }
                    toString() {
                        let { context: { src: e }, range: n, value: r } = this;
                        if (r != null) return r;
                        let s = e.slice(n.start, n.end);
                        return t1.addStringTerminator(e, n.end, s);
                    }
                    constructor(e, n, r){
                        Object.defineProperty(this, "context", {
                            value: r || null,
                            writable: true
                        }), this.error = null, this.range = null, this.valueRange = null, this.props = n || [], this.type = e, this.value = null;
                    }
                }, ye = class extends Error {
                    makePretty() {
                        if (!this.source) return;
                        this.nodeType = this.source.type;
                        let e = this.source.context && this.source.context.root;
                        if (typeof this.offset == "number") {
                            this.range = new Be(this.offset, this.offset + 1);
                            let n = e && Tn(this.offset, e);
                            if (n) {
                                let r = {
                                    line: n.line,
                                    col: n.col + 1
                                };
                                this.linePos = {
                                    start: n,
                                    end: r
                                };
                            }
                            delete this.offset;
                        } else this.range = this.source.range, this.linePos = this.source.rangeAsLinePos;
                        if (this.linePos) {
                            let { line: n, col: r } = this.linePos.start;
                            this.message += ` at line ${n}, column ${r}`;
                            let s = e && Mo(this.linePos, e);
                            s && (this.message += `:

${s}
`);
                        }
                        delete this.source;
                    }
                    constructor(e, n, r){
                        if (!r || !(n instanceof se)) throw new Error(`Invalid arguments for new ${e}`);
                        super(), this.name = e, this.message = r, this.source = n;
                    }
                }, Cn = class extends ye {
                    constructor(e, n){
                        super("YAMLReferenceError", e, n);
                    }
                }, ft = class extends ye {
                    constructor(e, n){
                        super("YAMLSemanticError", e, n);
                    }
                }, Mn = class extends ye {
                    constructor(e, n){
                        super("YAMLSyntaxError", e, n);
                    }
                }, kn = class extends ye {
                    constructor(e, n){
                        super("YAMLWarning", e, n);
                    }
                };
                function ko(t1, e, n) {
                    return e in t1 ? Object.defineProperty(t1, e, {
                        value: n,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    }) : t1[e] = n, t1;
                }
                var vn = class t1 extends se {
                    static endOfLine(e, n, r) {
                        let s = e[n], i = n;
                        for(; s && s !== `
` && !(r && (s === "[" || s === "]" || s === "{" || s === "}" || s === ","));){
                            let o = e[i + 1];
                            if (s === ":" && (!o || o === `
` || o === "	" || o === " " || r && o === ",") || (s === " " || s === "	") && o === "#") break;
                            i += 1, s = o;
                        }
                        return i;
                    }
                    get strValue() {
                        if (!this.valueRange || !this.context) return null;
                        let { start: e, end: n } = this.valueRange, { src: r } = this.context, s = r[n - 1];
                        for(; e < n && (s === `
` || s === "	" || s === " ");)s = r[--n - 1];
                        let i = "";
                        for(let a2 = e; a2 < n; ++a2){
                            let c = r[a2];
                            if (c === `
`) {
                                let { fold: l, offset: f2 } = se.foldNewline(r, a2, -1);
                                i += l, a2 = f2;
                            } else if (c === " " || c === "	") {
                                let l = a2, f2 = r[a2 + 1];
                                for(; a2 < n && (f2 === " " || f2 === "	");)a2 += 1, f2 = r[a2 + 1];
                                f2 !== `
` && (i += a2 > l ? r.slice(l, a2 + 1) : c);
                            } else i += c;
                        }
                        let o = r[e];
                        switch(o){
                            case "	":
                                {
                                    let a2 = "Plain value cannot start with a tab character";
                                    return {
                                        errors: [
                                            new ft(this, a2)
                                        ],
                                        str: i
                                    };
                                }
                            case "@":
                            case "`":
                                {
                                    let a2 = `Plain value cannot start with reserved character ${o}`;
                                    return {
                                        errors: [
                                            new ft(this, a2)
                                        ],
                                        str: i
                                    };
                                }
                            default:
                                return i;
                        }
                    }
                    parseBlockValue(e) {
                        let { indent: n, inFlow: r, src: s } = this.context, i = e, o = e;
                        for(let a2 = s[i]; a2 === `
` && !se.atDocumentBoundary(s, i + 1); a2 = s[i]){
                            let c = se.endOfBlockIndent(s, n, i + 1);
                            if (c === null || s[c] === "#") break;
                            s[c] === `
` ? i = c : (o = t1.endOfLine(s, c, r), i = o);
                        }
                        return this.valueRange.isEmpty() && (this.valueRange.start = e), this.valueRange.end = o, o;
                    }
                    parse(e, n) {
                        this.context = e;
                        let { inFlow: r, src: s } = e, i = n, o = s[i];
                        return o && o !== "#" && o !== `
` && (i = t1.endOfLine(s, n, r)), this.valueRange = new Be(n, i), i = se.endOfWhiteSpace(s, i), i = this.parseComment(i), (!this.hasComment || this.valueRange.isEmpty()) && (i = this.parseBlockValue(i)), i;
                    }
                };
                U.Char = re;
                U.Node = se;
                U.PlainValue = vn;
                U.Range = Be;
                U.Type = lt;
                U.YAMLError = ye;
                U.YAMLReferenceError = Cn;
                U.YAMLSemanticError = ft;
                U.YAMLSyntaxError = Mn;
                U.YAMLWarning = kn;
                U._defineProperty = ko;
                U.defaultTagPrefix = Ao;
                U.defaultTags = To;
            });
            var Rs = te((xs)=>{
                "use strict";
                var u = le(), Se = class extends u.Node {
                    get includesTrailingLines() {
                        return true;
                    }
                    parse(e, n) {
                        return this.context = e, this.range = new u.Range(n, n + 1), n + 1;
                    }
                    constructor(){
                        super(u.Type.BLANK_LINE);
                    }
                }, ut = class extends u.Node {
                    get includesTrailingLines() {
                        return !!this.node && this.node.includesTrailingLines;
                    }
                    parse(e, n) {
                        this.context = e;
                        let { parseNode: r, src: s } = e, { atLineStart: i, lineStart: o } = e;
                        !i && this.type === u.Type.SEQ_ITEM && (this.error = new u.YAMLSemanticError(this, "Sequence items must not have preceding content on the same line"));
                        let a2 = i ? n - o : e.indent, c = u.Node.endOfWhiteSpace(s, n + 1), l = s[c], f2 = l === "#", m = [], d = null;
                        for(; l === `
` || l === "#";){
                            if (l === "#") {
                                let h = u.Node.endOfLine(s, c + 1);
                                m.push(new u.Range(c, h)), c = h;
                            } else {
                                i = true, o = c + 1;
                                let h = u.Node.endOfWhiteSpace(s, o);
                                s[h] === `
` && m.length === 0 && (d = new Se(), o = d.parse({
                                    src: s
                                }, o)), c = u.Node.endOfIndent(s, o);
                            }
                            l = s[c];
                        }
                        if (u.Node.nextNodeIsIndented(l, c - (o + a2), this.type !== u.Type.SEQ_ITEM) ? this.node = r({
                            atLineStart: i,
                            inCollection: false,
                            indent: a2,
                            lineStart: o,
                            parent: this
                        }, c) : l && o > n + 1 && (c = o - 1), this.node) {
                            if (d) {
                                let h = e.parent.items || e.parent.contents;
                                h && h.push(d);
                            }
                            m.length && Array.prototype.push.apply(this.props, m), c = this.node.range.end;
                        } else if (f2) {
                            let h = m[0];
                            this.props.push(h), c = h.end;
                        } else c = u.Node.endOfLine(s, n + 1);
                        let y = this.node ? this.node.valueRange.end : c;
                        return this.valueRange = new u.Range(n, y), c;
                    }
                    setOrigRanges(e, n) {
                        return n = super.setOrigRanges(e, n), this.node ? this.node.setOrigRanges(e, n) : n;
                    }
                    toString() {
                        let { context: { src: e }, node: n, range: r, value: s } = this;
                        if (s != null) return s;
                        let i = n ? e.slice(r.start, n.range.start) + String(n) : e.slice(r.start, r.end);
                        return u.Node.addStringTerminator(e, r.end, i);
                    }
                    constructor(e, n){
                        super(e, n), this.node = null;
                    }
                }, Ee = class extends u.Node {
                    parse(e, n) {
                        this.context = e;
                        let r = this.parseComment(n);
                        return this.range = new u.Range(n, r), r;
                    }
                    constructor(){
                        super(u.Type.COMMENT);
                    }
                };
                function In(t1) {
                    let e = t1;
                    for(; e instanceof ut;)e = e.node;
                    if (!(e instanceof Bt)) return null;
                    let n = e.items.length, r = -1;
                    for(let o = n - 1; o >= 0; --o){
                        let a2 = e.items[o];
                        if (a2.type === u.Type.COMMENT) {
                            let { indent: c, lineStart: l } = a2.context;
                            if (c > 0 && a2.range.start >= l + c) break;
                            r = o;
                        } else if (a2.type === u.Type.BLANK_LINE) r = o;
                        else break;
                    }
                    if (r === -1) return null;
                    let s = e.items.splice(r, n - r), i = s[0].range.start;
                    for(; e.range.end = i, e.valueRange && e.valueRange.end > i && (e.valueRange.end = i), e !== t1;)e = e.context.parent;
                    return s;
                }
                var Bt = class t1 extends u.Node {
                    static nextContentHasIndent(e, n, r) {
                        let s = u.Node.endOfLine(e, n) + 1;
                        n = u.Node.endOfWhiteSpace(e, s);
                        let i = e[n];
                        return i ? n >= s + r ? true : i !== "#" && i !== `
` ? false : t1.nextContentHasIndent(e, n, r) : false;
                    }
                    get includesTrailingLines() {
                        return this.items.length > 0;
                    }
                    parse(e, n) {
                        this.context = e;
                        let { parseNode: r, src: s } = e, i = u.Node.startOfLine(s, n), o = this.items[0];
                        o.context.parent = this, this.valueRange = u.Range.copy(o.valueRange);
                        let a2 = o.range.start - o.context.lineStart, c = n;
                        c = u.Node.normalizeOffset(s, c);
                        let l = s[c], f2 = u.Node.endOfWhiteSpace(s, i) === c, m = false;
                        for(; l;){
                            for(; l === `
` || l === "#";){
                                if (f2 && l === `
` && !m) {
                                    let h = new Se();
                                    if (c = h.parse({
                                        src: s
                                    }, c), this.valueRange.end = c, c >= s.length) {
                                        l = null;
                                        break;
                                    }
                                    this.items.push(h), c -= 1;
                                } else if (l === "#") {
                                    if (c < i + a2 && !t1.nextContentHasIndent(s, c, a2)) return c;
                                    let h = new Ee();
                                    if (c = h.parse({
                                        indent: a2,
                                        lineStart: i,
                                        src: s
                                    }, c), this.items.push(h), this.valueRange.end = c, c >= s.length) {
                                        l = null;
                                        break;
                                    }
                                }
                                if (i = c + 1, c = u.Node.endOfIndent(s, i), u.Node.atBlank(s, c)) {
                                    let h = u.Node.endOfWhiteSpace(s, c), g = s[h];
                                    (!g || g === `
` || g === "#") && (c = h);
                                }
                                l = s[c], f2 = true;
                            }
                            if (!l) break;
                            if (c !== i + a2 && (f2 || l !== ":")) {
                                if (c < i + a2) {
                                    i > n && (c = i);
                                    break;
                                } else if (!this.error) {
                                    let h = "All collection items must start at the same column";
                                    this.error = new u.YAMLSyntaxError(this, h);
                                }
                            }
                            if (o.type === u.Type.SEQ_ITEM) {
                                if (l !== "-") {
                                    i > n && (c = i);
                                    break;
                                }
                            } else if (l === "-" && !this.error) {
                                let h = s[c + 1];
                                if (!h || h === `
` || h === "	" || h === " ") {
                                    let g = "A collection cannot be both a mapping and a sequence";
                                    this.error = new u.YAMLSyntaxError(this, g);
                                }
                            }
                            let d = r({
                                atLineStart: f2,
                                inCollection: true,
                                indent: a2,
                                lineStart: i,
                                parent: this
                            }, c);
                            if (!d) return c;
                            if (this.items.push(d), this.valueRange.end = d.valueRange.end, c = u.Node.normalizeOffset(s, d.range.end), l = s[c], f2 = false, m = d.includesTrailingLines, l) {
                                let h = c - 1, g = s[h];
                                for(; g === " " || g === "	";)g = s[--h];
                                g === `
` && (i = h + 1, f2 = true);
                            }
                            let y = In(d);
                            y && Array.prototype.push.apply(this.items, y);
                        }
                        return c;
                    }
                    setOrigRanges(e, n) {
                        return n = super.setOrigRanges(e, n), this.items.forEach((r)=>{
                            n = r.setOrigRanges(e, n);
                        }), n;
                    }
                    toString() {
                        let { context: { src: e }, items: n, range: r, value: s } = this;
                        if (s != null) return s;
                        let i = e.slice(r.start, n[0].range.start) + String(n[0]);
                        for(let o = 1; o < n.length; ++o){
                            let a2 = n[o], { atLineStart: c, indent: l } = a2.context;
                            if (c) for(let f2 = 0; f2 < l; ++f2)i += " ";
                            i += String(a2);
                        }
                        return u.Node.addStringTerminator(e, r.end, i);
                    }
                    constructor(e){
                        super(e.type === u.Type.SEQ_ITEM ? u.Type.SEQ : u.Type.MAP);
                        for(let r = e.props.length - 1; r >= 0; --r)if (e.props[r].start < e.context.lineStart) {
                            this.props = e.props.slice(0, r + 1), e.props = e.props.slice(r + 1);
                            let s = e.props[0] || e.valueRange;
                            e.range.start = s.start;
                            break;
                        }
                        this.items = [
                            e
                        ];
                        let n = In(e);
                        n && Array.prototype.push.apply(this.items, n);
                    }
                }, Pn = class extends u.Node {
                    get parameters() {
                        let e = this.rawValue;
                        return e ? e.trim().split(/[ \t]+/) : [];
                    }
                    parseName(e) {
                        let { src: n } = this.context, r = e, s = n[r];
                        for(; s && s !== `
` && s !== "	" && s !== " ";)s = n[r += 1];
                        return this.name = n.slice(e, r), r;
                    }
                    parseParameters(e) {
                        let { src: n } = this.context, r = e, s = n[r];
                        for(; s && s !== `
` && s !== "#";)s = n[r += 1];
                        return this.valueRange = new u.Range(e, r), r;
                    }
                    parse(e, n) {
                        this.context = e;
                        let r = this.parseName(n + 1);
                        return r = this.parseParameters(r), r = this.parseComment(r), this.range = new u.Range(n, r), r;
                    }
                    constructor(){
                        super(u.Type.DIRECTIVE), this.name = null;
                    }
                }, _n = class t1 extends u.Node {
                    static startCommentOrEndBlankLine(e, n) {
                        let r = u.Node.endOfWhiteSpace(e, n), s = e[r];
                        return s === "#" || s === `
` ? r : n;
                    }
                    parseDirectives(e) {
                        let { src: n } = this.context;
                        this.directives = [];
                        let r = true, s = false, i = e;
                        for(; !u.Node.atDocumentBoundary(n, i, u.Char.DIRECTIVES_END);)switch(i = t1.startCommentOrEndBlankLine(n, i), n[i]){
                            case `
`:
                                if (r) {
                                    let o = new Se();
                                    i = o.parse({
                                        src: n
                                    }, i), i < n.length && this.directives.push(o);
                                } else i += 1, r = true;
                                break;
                            case "#":
                                {
                                    let o = new Ee();
                                    i = o.parse({
                                        src: n
                                    }, i), this.directives.push(o), r = false;
                                }
                                break;
                            case "%":
                                {
                                    let o = new Pn();
                                    i = o.parse({
                                        parent: this,
                                        src: n
                                    }, i), this.directives.push(o), s = true, r = false;
                                }
                                break;
                            default:
                                return s ? this.error = new u.YAMLSemanticError(this, "Missing directives-end indicator line") : this.directives.length > 0 && (this.contents = this.directives, this.directives = []), i;
                        }
                        return n[i] ? (this.directivesEndMarker = new u.Range(i, i + 3), i + 3) : (s ? this.error = new u.YAMLSemanticError(this, "Missing directives-end indicator line") : this.directives.length > 0 && (this.contents = this.directives, this.directives = []), i);
                    }
                    parseContents(e) {
                        let { parseNode: n, src: r } = this.context;
                        this.contents || (this.contents = []);
                        let s = e;
                        for(; r[s - 1] === "-";)s -= 1;
                        let i = u.Node.endOfWhiteSpace(r, e), o = s === e;
                        for(this.valueRange = new u.Range(i); !u.Node.atDocumentBoundary(r, i, u.Char.DOCUMENT_END);){
                            switch(r[i]){
                                case `
`:
                                    if (o) {
                                        let a2 = new Se();
                                        i = a2.parse({
                                            src: r
                                        }, i), i < r.length && this.contents.push(a2);
                                    } else i += 1, o = true;
                                    s = i;
                                    break;
                                case "#":
                                    {
                                        let a2 = new Ee();
                                        i = a2.parse({
                                            src: r
                                        }, i), this.contents.push(a2), o = false;
                                    }
                                    break;
                                default:
                                    {
                                        let a2 = u.Node.endOfIndent(r, i), l = n({
                                            atLineStart: o,
                                            indent: -1,
                                            inFlow: false,
                                            inCollection: false,
                                            lineStart: s,
                                            parent: this
                                        }, a2);
                                        if (!l) return this.valueRange.end = a2;
                                        this.contents.push(l), i = l.range.end, o = false;
                                        let f2 = In(l);
                                        f2 && Array.prototype.push.apply(this.contents, f2);
                                    }
                            }
                            i = t1.startCommentOrEndBlankLine(r, i);
                        }
                        if (this.valueRange.end = i, r[i] && (this.documentEndMarker = new u.Range(i, i + 3), i += 3, r[i])) {
                            if (i = u.Node.endOfWhiteSpace(r, i), r[i] === "#") {
                                let a2 = new Ee();
                                i = a2.parse({
                                    src: r
                                }, i), this.contents.push(a2);
                            }
                            switch(r[i]){
                                case `
`:
                                    i += 1;
                                    break;
                                case void 0:
                                    break;
                                default:
                                    this.error = new u.YAMLSyntaxError(this, "Document end marker line cannot have a non-comment suffix");
                            }
                        }
                        return i;
                    }
                    parse(e, n) {
                        e.root = this, this.context = e;
                        let { src: r } = e, s = r.charCodeAt(n) === 65279 ? n + 1 : n;
                        return s = this.parseDirectives(s), s = this.parseContents(s), s;
                    }
                    setOrigRanges(e, n) {
                        return n = super.setOrigRanges(e, n), this.directives.forEach((r)=>{
                            n = r.setOrigRanges(e, n);
                        }), this.directivesEndMarker && (n = this.directivesEndMarker.setOrigRange(e, n)), this.contents.forEach((r)=>{
                            n = r.setOrigRanges(e, n);
                        }), this.documentEndMarker && (n = this.documentEndMarker.setOrigRange(e, n)), n;
                    }
                    toString() {
                        let { contents: e, directives: n, value: r } = this;
                        if (r != null) return r;
                        let s = n.join("");
                        return e.length > 0 && ((n.length > 0 || e[0].type === u.Type.COMMENT) && (s += `---
`), s += e.join("")), s[s.length - 1] !== `
` && (s += `
`), s;
                    }
                    constructor(){
                        super(u.Type.DOCUMENT), this.directives = null, this.contents = null, this.directivesEndMarker = null, this.documentEndMarker = null;
                    }
                }, xn = class extends u.Node {
                    parse(e, n) {
                        this.context = e;
                        let { src: r } = e, s = u.Node.endOfIdentifier(r, n + 1);
                        return this.valueRange = new u.Range(n + 1, s), s = u.Node.endOfWhiteSpace(r, s), s = this.parseComment(s), s;
                    }
                }, fe = {
                    CLIP: "CLIP",
                    KEEP: "KEEP",
                    STRIP: "STRIP"
                }, Rn = class extends u.Node {
                    get includesTrailingLines() {
                        return this.chomping === fe.KEEP;
                    }
                    get strValue() {
                        if (!this.valueRange || !this.context) return null;
                        let { start: e, end: n } = this.valueRange, { indent: r, src: s } = this.context;
                        if (this.valueRange.isEmpty()) return "";
                        let i = null, o = s[n - 1];
                        for(; o === `
` || o === "	" || o === " ";){
                            if (n -= 1, n <= e) {
                                if (this.chomping === fe.KEEP) break;
                                return "";
                            }
                            o === `
` && (i = n), o = s[n - 1];
                        }
                        let a2 = n + 1;
                        i && (this.chomping === fe.KEEP ? (a2 = i, n = this.valueRange.end) : n = i);
                        let c = r + this.blockIndent, l = this.type === u.Type.BLOCK_FOLDED, f2 = true, m = "", d = "", y = false;
                        for(let h = e; h < n; ++h){
                            for(let w = 0; w < c && s[h] === " "; ++w)h += 1;
                            let g = s[h];
                            if (g === `
`) d === `
` ? m += `
` : d = `
`;
                            else {
                                let w = u.Node.endOfLine(s, h), C = s.slice(h, w);
                                h = w, l && (g === " " || g === "	") && h < a2 ? (d === " " ? d = `
` : !y && !f2 && d === `
` && (d = `

`), m += d + C, d = w < n && s[w] || "", y = true) : (m += d + C, d = l && h < a2 ? " " : `
`, y = false), f2 && C !== "" && (f2 = false);
                            }
                        }
                        return this.chomping === fe.STRIP ? m : m + `
`;
                    }
                    parseBlockHeader(e) {
                        let { src: n } = this.context, r = e + 1, s = "";
                        for(;;){
                            let i = n[r];
                            switch(i){
                                case "-":
                                    this.chomping = fe.STRIP;
                                    break;
                                case "+":
                                    this.chomping = fe.KEEP;
                                    break;
                                case "0":
                                case "1":
                                case "2":
                                case "3":
                                case "4":
                                case "5":
                                case "6":
                                case "7":
                                case "8":
                                case "9":
                                    s += i;
                                    break;
                                default:
                                    return this.blockIndent = Number(s) || null, this.header = new u.Range(e, r), r;
                            }
                            r += 1;
                        }
                    }
                    parseBlockValue(e) {
                        let { indent: n, src: r } = this.context, s = !!this.blockIndent, i = e, o = e, a2 = 1;
                        for(let c = r[i]; c === `
` && (i += 1, !u.Node.atDocumentBoundary(r, i)); c = r[i]){
                            let l = u.Node.endOfBlockIndent(r, n, i);
                            if (l === null) break;
                            let f2 = r[l], m = l - (i + n);
                            if (this.blockIndent) {
                                if (f2 && f2 !== `
` && m < this.blockIndent) {
                                    if (r[l] === "#") break;
                                    if (!this.error) {
                                        let y = `Block scalars must not be less indented than their ${s ? "explicit indentation indicator" : "first line"}`;
                                        this.error = new u.YAMLSemanticError(this, y);
                                    }
                                }
                            } else if (r[l] !== `
`) {
                                if (m < a2) {
                                    let d = "Block scalars with more-indented leading empty lines must use an explicit indentation indicator";
                                    this.error = new u.YAMLSemanticError(this, d);
                                }
                                this.blockIndent = m;
                            } else m > a2 && (a2 = m);
                            r[l] === `
` ? i = l : i = o = u.Node.endOfLine(r, l);
                        }
                        return this.chomping !== fe.KEEP && (i = r[o] ? o + 1 : o), this.valueRange = new u.Range(e + 1, i), i;
                    }
                    parse(e, n) {
                        this.context = e;
                        let { src: r } = e, s = this.parseBlockHeader(n);
                        return s = u.Node.endOfWhiteSpace(r, s), s = this.parseComment(s), s = this.parseBlockValue(s), s;
                    }
                    setOrigRanges(e, n) {
                        return n = super.setOrigRanges(e, n), this.header ? this.header.setOrigRange(e, n) : n;
                    }
                    constructor(e, n){
                        super(e, n), this.blockIndent = null, this.chomping = fe.CLIP, this.header = null;
                    }
                }, Dn = class extends u.Node {
                    prevNodeIsJsonLike(e = this.items.length) {
                        let n = this.items[e - 1];
                        return !!n && (n.jsonLike || n.type === u.Type.COMMENT && this.prevNodeIsJsonLike(e - 1));
                    }
                    parse(e, n) {
                        this.context = e;
                        let { parseNode: r, src: s } = e, { indent: i, lineStart: o } = e, a2 = s[n];
                        this.items = [
                            {
                                char: a2,
                                offset: n
                            }
                        ];
                        let c = u.Node.endOfWhiteSpace(s, n + 1);
                        for(a2 = s[c]; a2 && a2 !== "]" && a2 !== "}";){
                            switch(a2){
                                case `
`:
                                    {
                                        o = c + 1;
                                        let l = u.Node.endOfWhiteSpace(s, o);
                                        if (s[l] === `
`) {
                                            let f2 = new Se();
                                            o = f2.parse({
                                                src: s
                                            }, o), this.items.push(f2);
                                        }
                                        if (c = u.Node.endOfIndent(s, o), c <= o + i && (a2 = s[c], c < o + i || a2 !== "]" && a2 !== "}")) {
                                            let f2 = "Insufficient indentation in flow collection";
                                            this.error = new u.YAMLSemanticError(this, f2);
                                        }
                                    }
                                    break;
                                case ",":
                                    this.items.push({
                                        char: a2,
                                        offset: c
                                    }), c += 1;
                                    break;
                                case "#":
                                    {
                                        let l = new Ee();
                                        c = l.parse({
                                            src: s
                                        }, c), this.items.push(l);
                                    }
                                    break;
                                case "?":
                                case ":":
                                    {
                                        let l = s[c + 1];
                                        if (l === `
` || l === "	" || l === " " || l === "," || a2 === ":" && this.prevNodeIsJsonLike()) {
                                            this.items.push({
                                                char: a2,
                                                offset: c
                                            }), c += 1;
                                            break;
                                        }
                                    }
                                default:
                                    {
                                        let l = r({
                                            atLineStart: false,
                                            inCollection: false,
                                            inFlow: true,
                                            indent: -1,
                                            lineStart: o,
                                            parent: this
                                        }, c);
                                        if (!l) return this.valueRange = new u.Range(n, c), c;
                                        this.items.push(l), c = u.Node.normalizeOffset(s, l.range.end);
                                    }
                            }
                            c = u.Node.endOfWhiteSpace(s, c), a2 = s[c];
                        }
                        return this.valueRange = new u.Range(n, c + 1), a2 && (this.items.push({
                            char: a2,
                            offset: c
                        }), c = u.Node.endOfWhiteSpace(s, c + 1), c = this.parseComment(c)), c;
                    }
                    setOrigRanges(e, n) {
                        return n = super.setOrigRanges(e, n), this.items.forEach((r)=>{
                            if (r instanceof u.Node) n = r.setOrigRanges(e, n);
                            else if (e.length === 0) r.origOffset = r.offset;
                            else {
                                let s = n;
                                for(; s < e.length && !(e[s] > r.offset);)++s;
                                r.origOffset = r.offset + s, n = s;
                            }
                        }), n;
                    }
                    toString() {
                        let { context: { src: e }, items: n, range: r, value: s } = this;
                        if (s != null) return s;
                        let i = n.filter((c)=>c instanceof u.Node), o = "", a2 = r.start;
                        return i.forEach((c)=>{
                            let l = e.slice(a2, c.range.start);
                            a2 = c.range.end, o += l + String(c), o[o.length - 1] === `
` && e[a2 - 1] !== `
` && e[a2] === `
` && (a2 += 1);
                        }), o += e.slice(a2, r.end), u.Node.addStringTerminator(e, r.end, o);
                    }
                    constructor(e, n){
                        super(e, n), this.items = null;
                    }
                }, Yn = class t1 extends u.Node {
                    static endOfQuote(e, n) {
                        let r = e[n];
                        for(; r && r !== '"';)n += r === "\\" ? 2 : 1, r = e[n];
                        return n + 1;
                    }
                    get strValue() {
                        if (!this.valueRange || !this.context) return null;
                        let e = [], { start: n, end: r } = this.valueRange, { indent: s, src: i } = this.context;
                        i[r - 1] !== '"' && e.push(new u.YAMLSyntaxError(this, 'Missing closing "quote'));
                        let o = "";
                        for(let a2 = n + 1; a2 < r - 1; ++a2){
                            let c = i[a2];
                            if (c === `
`) {
                                u.Node.atDocumentBoundary(i, a2 + 1) && e.push(new u.YAMLSemanticError(this, "Document boundary indicators are not allowed within string values"));
                                let { fold: l, offset: f2, error: m } = u.Node.foldNewline(i, a2, s);
                                o += l, a2 = f2, m && e.push(new u.YAMLSemanticError(this, "Multi-line double-quoted string needs to be sufficiently indented"));
                            } else if (c === "\\") switch(a2 += 1, i[a2]){
                                case "0":
                                    o += "\0";
                                    break;
                                case "a":
                                    o += "\x07";
                                    break;
                                case "b":
                                    o += "\b";
                                    break;
                                case "e":
                                    o += "\x1B";
                                    break;
                                case "f":
                                    o += "\f";
                                    break;
                                case "n":
                                    o += `
`;
                                    break;
                                case "r":
                                    o += "\r";
                                    break;
                                case "t":
                                    o += "	";
                                    break;
                                case "v":
                                    o += "\v";
                                    break;
                                case "N":
                                    o += "\x85";
                                    break;
                                case "_":
                                    o += "\xA0";
                                    break;
                                case "L":
                                    o += "\u2028";
                                    break;
                                case "P":
                                    o += "\u2029";
                                    break;
                                case " ":
                                    o += " ";
                                    break;
                                case '"':
                                    o += '"';
                                    break;
                                case "/":
                                    o += "/";
                                    break;
                                case "\\":
                                    o += "\\";
                                    break;
                                case "	":
                                    o += "	";
                                    break;
                                case "x":
                                    o += this.parseCharCode(a2 + 1, 2, e), a2 += 2;
                                    break;
                                case "u":
                                    o += this.parseCharCode(a2 + 1, 4, e), a2 += 4;
                                    break;
                                case "U":
                                    o += this.parseCharCode(a2 + 1, 8, e), a2 += 8;
                                    break;
                                case `
`:
                                    for(; i[a2 + 1] === " " || i[a2 + 1] === "	";)a2 += 1;
                                    break;
                                default:
                                    e.push(new u.YAMLSyntaxError(this, `Invalid escape sequence ${i.substr(a2 - 1, 2)}`)), o += "\\" + i[a2];
                            }
                            else if (c === " " || c === "	") {
                                let l = a2, f2 = i[a2 + 1];
                                for(; f2 === " " || f2 === "	";)a2 += 1, f2 = i[a2 + 1];
                                f2 !== `
` && (o += a2 > l ? i.slice(l, a2 + 1) : c);
                            } else o += c;
                        }
                        return e.length > 0 ? {
                            errors: e,
                            str: o
                        } : o;
                    }
                    parseCharCode(e, n, r) {
                        let { src: s } = this.context, i = s.substr(e, n), a2 = i.length === n && /^[0-9a-fA-F]+$/.test(i) ? parseInt(i, 16) : NaN;
                        return isNaN(a2) ? (r.push(new u.YAMLSyntaxError(this, `Invalid escape sequence ${s.substr(e - 2, n + 2)}`)), s.substr(e - 2, n + 2)) : String.fromCodePoint(a2);
                    }
                    parse(e, n) {
                        this.context = e;
                        let { src: r } = e, s = t1.endOfQuote(r, n + 1);
                        return this.valueRange = new u.Range(n, s), s = u.Node.endOfWhiteSpace(r, s), s = this.parseComment(s), s;
                    }
                }, $n = class t1 extends u.Node {
                    static endOfQuote(e, n) {
                        let r = e[n];
                        for(; r;)if (r === "'") {
                            if (e[n + 1] !== "'") break;
                            r = e[n += 2];
                        } else r = e[n += 1];
                        return n + 1;
                    }
                    get strValue() {
                        if (!this.valueRange || !this.context) return null;
                        let e = [], { start: n, end: r } = this.valueRange, { indent: s, src: i } = this.context;
                        i[r - 1] !== "'" && e.push(new u.YAMLSyntaxError(this, "Missing closing 'quote"));
                        let o = "";
                        for(let a2 = n + 1; a2 < r - 1; ++a2){
                            let c = i[a2];
                            if (c === `
`) {
                                u.Node.atDocumentBoundary(i, a2 + 1) && e.push(new u.YAMLSemanticError(this, "Document boundary indicators are not allowed within string values"));
                                let { fold: l, offset: f2, error: m } = u.Node.foldNewline(i, a2, s);
                                o += l, a2 = f2, m && e.push(new u.YAMLSemanticError(this, "Multi-line single-quoted string needs to be sufficiently indented"));
                            } else if (c === "'") o += c, a2 += 1, i[a2] !== "'" && e.push(new u.YAMLSyntaxError(this, "Unescaped single quote? This should not happen."));
                            else if (c === " " || c === "	") {
                                let l = a2, f2 = i[a2 + 1];
                                for(; f2 === " " || f2 === "	";)a2 += 1, f2 = i[a2 + 1];
                                f2 !== `
` && (o += a2 > l ? i.slice(l, a2 + 1) : c);
                            } else o += c;
                        }
                        return e.length > 0 ? {
                            errors: e,
                            str: o
                        } : o;
                    }
                    parse(e, n) {
                        this.context = e;
                        let { src: r } = e, s = t1.endOfQuote(r, n + 1);
                        return this.valueRange = new u.Range(n, s), s = u.Node.endOfWhiteSpace(r, s), s = this.parseComment(s), s;
                    }
                };
                function vo(t1, e) {
                    switch(t1){
                        case u.Type.ALIAS:
                            return new xn(t1, e);
                        case u.Type.BLOCK_FOLDED:
                        case u.Type.BLOCK_LITERAL:
                            return new Rn(t1, e);
                        case u.Type.FLOW_MAP:
                        case u.Type.FLOW_SEQ:
                            return new Dn(t1, e);
                        case u.Type.MAP_KEY:
                        case u.Type.MAP_VALUE:
                        case u.Type.SEQ_ITEM:
                            return new ut(t1, e);
                        case u.Type.COMMENT:
                        case u.Type.PLAIN:
                            return new u.PlainValue(t1, e);
                        case u.Type.QUOTE_DOUBLE:
                            return new Yn(t1, e);
                        case u.Type.QUOTE_SINGLE:
                            return new $n(t1, e);
                        default:
                            return null;
                    }
                }
                var Bn = class t1 {
                    static parseType(e, n, r) {
                        switch(e[n]){
                            case "*":
                                return u.Type.ALIAS;
                            case ">":
                                return u.Type.BLOCK_FOLDED;
                            case "|":
                                return u.Type.BLOCK_LITERAL;
                            case "{":
                                return u.Type.FLOW_MAP;
                            case "[":
                                return u.Type.FLOW_SEQ;
                            case "?":
                                return !r && u.Node.atBlank(e, n + 1, true) ? u.Type.MAP_KEY : u.Type.PLAIN;
                            case ":":
                                return !r && u.Node.atBlank(e, n + 1, true) ? u.Type.MAP_VALUE : u.Type.PLAIN;
                            case "-":
                                return !r && u.Node.atBlank(e, n + 1, true) ? u.Type.SEQ_ITEM : u.Type.PLAIN;
                            case '"':
                                return u.Type.QUOTE_DOUBLE;
                            case "'":
                                return u.Type.QUOTE_SINGLE;
                            default:
                                return u.Type.PLAIN;
                        }
                    }
                    nodeStartsCollection(e) {
                        let { inCollection: n, inFlow: r, src: s } = this;
                        if (n || r) return false;
                        if (e instanceof ut) return true;
                        let i = e.range.end;
                        return s[i] === `
` || s[i - 1] === `
` ? false : (i = u.Node.endOfWhiteSpace(s, i), s[i] === ":");
                    }
                    parseProps(e) {
                        let { inFlow: n, parent: r, src: s } = this, i = [], o = false;
                        e = this.atLineStart ? u.Node.endOfIndent(s, e) : u.Node.endOfWhiteSpace(s, e);
                        let a2 = s[e];
                        for(; a2 === u.Char.ANCHOR || a2 === u.Char.COMMENT || a2 === u.Char.TAG || a2 === `
`;){
                            if (a2 === `
`) {
                                let l = e, f2;
                                do f2 = l + 1, l = u.Node.endOfIndent(s, f2);
                                while (s[l] === `
`)
                                let m = l - (f2 + this.indent), d = r.type === u.Type.SEQ_ITEM && r.context.atLineStart;
                                if (s[l] !== "#" && !u.Node.nextNodeIsIndented(s[l], m, !d)) break;
                                this.atLineStart = true, this.lineStart = f2, o = false, e = l;
                            } else if (a2 === u.Char.COMMENT) {
                                let l = u.Node.endOfLine(s, e + 1);
                                i.push(new u.Range(e, l)), e = l;
                            } else {
                                let l = u.Node.endOfIdentifier(s, e + 1);
                                a2 === u.Char.TAG && s[l] === "," && /^[a-zA-Z0-9-]+\.[a-zA-Z0-9-]+,\d\d\d\d(-\d\d){0,2}\/\S/.test(s.slice(e + 1, l + 13)) && (l = u.Node.endOfIdentifier(s, l + 5)), i.push(new u.Range(e, l)), o = true, e = u.Node.endOfWhiteSpace(s, l);
                            }
                            a2 = s[e];
                        }
                        o && a2 === ":" && u.Node.atBlank(s, e + 1, true) && (e -= 1);
                        let c = t1.parseType(s, e, n);
                        return {
                            props: i,
                            type: c,
                            valueStart: e
                        };
                    }
                    constructor(e = {}, { atLineStart: n, inCollection: r, inFlow: s, indent: i, lineStart: o, parent: a2 } = {}){
                        u._defineProperty(this, "parseNode", (c, l)=>{
                            if (u.Node.atDocumentBoundary(this.src, l)) return null;
                            let f2 = new t1(this, c), { props: m, type: d, valueStart: y } = f2.parseProps(l), h = vo(d, m), g = h.parse(f2, y);
                            if (h.range = new u.Range(l, g), g <= l && (h.error = new Error("Node#parse consumed no characters"), h.error.parseEnd = g, h.error.source = h, h.range.end = l + 1), f2.nodeStartsCollection(h)) {
                                !h.error && !f2.atLineStart && f2.parent.type === u.Type.DOCUMENT && (h.error = new u.YAMLSyntaxError(h, "Block collection must not have preceding content here (e.g. directives-end indicator)"));
                                let w = new Bt(h);
                                return g = w.parse(new t1(f2), g), w.range = new u.Range(l, g), w;
                            }
                            return h;
                        }), this.atLineStart = n != null ? n : e.atLineStart || false, this.inCollection = r != null ? r : e.inCollection || false, this.inFlow = s != null ? s : e.inFlow || false, this.indent = i != null ? i : e.indent, this.lineStart = o != null ? o : e.lineStart, this.parent = a2 != null ? a2 : e.parent || {}, this.root = e.root, this.src = e.src;
                    }
                };
                function Io(t1) {
                    let e = [];
                    t1.indexOf("\r") !== -1 && (t1 = t1.replace(/\r\n?/g, (s, i)=>(s.length > 1 && e.push(i), `
`)));
                    let n = [], r = 0;
                    do {
                        let s = new _n(), i = new Bn({
                            src: t1
                        });
                        r = s.parse(i, r), n.push(s);
                    }while (r < t1.length)
                    return n.setOrigRanges = ()=>{
                        if (e.length === 0) return false;
                        for(let i = 1; i < e.length; ++i)e[i] -= i;
                        let s = 0;
                        for(let i = 0; i < n.length; ++i)s = n[i].setOrigRanges(e, s);
                        return e.splice(0, e.length), true;
                    }, n.toString = ()=>n.join(`...
`), n;
                }
                xs.parse = Io;
            });
            var qe = te((k)=>{
                "use strict";
                var p = le();
                function Po(t1, e, n) {
                    return n ? `#${n.replace(/[\s\S]^/gm, `$&${e}#`)}
${e}${t1}` : t1;
                }
                function Fe(t1, e, n) {
                    return n ? n.indexOf(`
`) === -1 ? `${t1} #${n}` : `${t1}
` + n.replace(/^/gm, `${e || ""}#`) : t1;
                }
                var W = class {
                };
                function ue(t1, e, n) {
                    if (Array.isArray(t1)) return t1.map((r, s)=>ue(r, String(s), n));
                    if (t1 && typeof t1.toJSON == "function") {
                        let r = n && n.anchors && n.anchors.get(t1);
                        r && (n.onCreate = (i)=>{
                            r.res = i, delete n.onCreate;
                        });
                        let s = t1.toJSON(e, n);
                        return r && n.onCreate && n.onCreate(s), s;
                    }
                    return (!n || !n.keep) && typeof t1 == "bigint" ? Number(t1) : t1;
                }
                var P = class extends W {
                    toJSON(e, n) {
                        return n && n.keep ? this.value : ue(this.value, e, n);
                    }
                    toString() {
                        return String(this.value);
                    }
                    constructor(e){
                        super(), this.value = e;
                    }
                };
                function Ds(t1, e, n) {
                    let r = n;
                    for(let s = e.length - 1; s >= 0; --s){
                        let i = e[s];
                        if (Number.isInteger(i) && i >= 0) {
                            let o = [];
                            o[i] = r, r = o;
                        } else {
                            let o = {};
                            Object.defineProperty(o, i, {
                                value: r,
                                writable: true,
                                enumerable: true,
                                configurable: true
                            }), r = o;
                        }
                    }
                    return t1.createNode(r, false);
                }
                var Bs = (t1)=>t1 == null || typeof t1 == "object" && t1[Symbol.iterator]().next().done, j = class t1 extends W {
                    addIn(e, n) {
                        if (Bs(e)) this.add(n);
                        else {
                            let [r, ...s] = e, i = this.get(r, true);
                            if (i instanceof t1) i.addIn(s, n);
                            else if (i === void 0 && this.schema) this.set(r, Ds(this.schema, s, n));
                            else throw new Error(`Expected YAML collection at ${r}. Remaining path: ${s}`);
                        }
                    }
                    deleteIn([e, ...n]) {
                        if (n.length === 0) return this.delete(e);
                        let r = this.get(e, true);
                        if (r instanceof t1) return r.deleteIn(n);
                        throw new Error(`Expected YAML collection at ${e}. Remaining path: ${n}`);
                    }
                    getIn([e, ...n], r) {
                        let s = this.get(e, true);
                        return n.length === 0 ? !r && s instanceof P ? s.value : s : s instanceof t1 ? s.getIn(n, r) : void 0;
                    }
                    hasAllNullValues() {
                        return this.items.every((e)=>{
                            if (!e || e.type !== "PAIR") return false;
                            let n = e.value;
                            return n == null || n instanceof P && n.value == null && !n.commentBefore && !n.comment && !n.tag;
                        });
                    }
                    hasIn([e, ...n]) {
                        if (n.length === 0) return this.has(e);
                        let r = this.get(e, true);
                        return r instanceof t1 ? r.hasIn(n) : false;
                    }
                    setIn([e, ...n], r) {
                        if (n.length === 0) this.set(e, r);
                        else {
                            let s = this.get(e, true);
                            if (s instanceof t1) s.setIn(n, r);
                            else if (s === void 0 && this.schema) this.set(e, Ds(this.schema, n, r));
                            else throw new Error(`Expected YAML collection at ${e}. Remaining path: ${n}`);
                        }
                    }
                    toJSON() {
                        return null;
                    }
                    toString(e, { blockItem: n, flowChars: r, isMap: s, itemIndent: i }, o, a2) {
                        let { indent: c, indentStep: l, stringify: f2 } = e, m = this.type === p.Type.FLOW_MAP || this.type === p.Type.FLOW_SEQ || e.inFlow;
                        m && (i += l);
                        let d = s && this.hasAllNullValues();
                        e = Object.assign({}, e, {
                            allNullValues: d,
                            indent: i,
                            inFlow: m,
                            type: null
                        });
                        let y = false, h = false, g = this.items.reduce((C, L, M)=>{
                            let A2;
                            L && (!y && L.spaceBefore && C.push({
                                type: "comment",
                                str: ""
                            }), L.commentBefore && L.commentBefore.match(/^.*$/gm).forEach((Ai)=>{
                                C.push({
                                    type: "comment",
                                    str: `#${Ai}`
                                });
                            }), L.comment && (A2 = L.comment), m && (!y && L.spaceBefore || L.commentBefore || L.comment || L.key && (L.key.commentBefore || L.key.comment) || L.value && (L.value.commentBefore || L.value.comment)) && (h = true)), y = false;
                            let _2 = f2(L, e, ()=>A2 = null, ()=>y = true);
                            return m && !h && _2.includes(`
`) && (h = true), m && M < this.items.length - 1 && (_2 += ","), _2 = Fe(_2, i, A2), y && (A2 || m) && (y = false), C.push({
                                type: "item",
                                str: _2
                            }), C;
                        }, []), w;
                        if (g.length === 0) w = r.start + r.end;
                        else if (m) {
                            let { start: C, end: L } = r, M = g.map((A2)=>A2.str);
                            if (h || M.reduce((A2, _2)=>A2 + _2.length + 2, 2) > t1.maxFlowStringSingleLineLength) {
                                w = C;
                                for (let A2 of M)w += A2 ? `
${l}${c}${A2}` : `
`;
                                w += `
${c}${L}`;
                            } else w = `${C} ${M.join(" ")} ${L}`;
                        } else {
                            let C = g.map(n);
                            w = C.shift();
                            for (let L of C)w += L ? `
${c}${L}` : `
`;
                        }
                        return this.comment ? (w += `
` + this.comment.replace(/^/gm, `${c}#`), o && o()) : y && a2 && a2(), w;
                    }
                    constructor(e){
                        super(), p._defineProperty(this, "items", []), this.schema = e;
                    }
                };
                p._defineProperty(j, "maxFlowStringSingleLineLength", 60);
                function Ft(t1) {
                    let e = t1 instanceof P ? t1.value : t1;
                    return e && typeof e == "string" && (e = Number(e)), Number.isInteger(e) && e >= 0 ? e : null;
                }
                var pe = class extends j {
                    add(e) {
                        this.items.push(e);
                    }
                    delete(e) {
                        let n = Ft(e);
                        return typeof n != "number" ? false : this.items.splice(n, 1).length > 0;
                    }
                    get(e, n) {
                        let r = Ft(e);
                        if (typeof r != "number") return;
                        let s = this.items[r];
                        return !n && s instanceof P ? s.value : s;
                    }
                    has(e) {
                        let n = Ft(e);
                        return typeof n == "number" && n < this.items.length;
                    }
                    set(e, n) {
                        let r = Ft(e);
                        if (typeof r != "number") throw new Error(`Expected a valid index, not ${e}.`);
                        this.items[r] = n;
                    }
                    toJSON(e, n) {
                        let r = [];
                        n && n.onCreate && n.onCreate(r);
                        let s = 0;
                        for (let i of this.items)r.push(ue(i, String(s++), n));
                        return r;
                    }
                    toString(e, n, r) {
                        return e ? super.toString(e, {
                            blockItem: (s)=>s.type === "comment" ? s.str : `- ${s.str}`,
                            flowChars: {
                                start: "[",
                                end: "]"
                            },
                            isMap: false,
                            itemIndent: (e.indent || "") + "  "
                        }, n, r) : JSON.stringify(this);
                    }
                }, _o = (t1, e, n)=>e === null ? "" : typeof e != "object" ? String(e) : t1 instanceof W && n && n.doc ? t1.toString({
                        anchors: /* @__PURE__ */ Object.create(null),
                        doc: n.doc,
                        indent: "",
                        indentStep: n.indentStep,
                        inFlow: true,
                        inStringifyKey: true,
                        stringify: n.stringify
                    }) : JSON.stringify(e), T = class t1 extends W {
                    get commentBefore() {
                        return this.key instanceof W ? this.key.commentBefore : void 0;
                    }
                    set commentBefore(e) {
                        if (this.key == null && (this.key = new P(null)), this.key instanceof W) this.key.commentBefore = e;
                        else {
                            let n = "Pair.commentBefore is an alias for Pair.key.commentBefore. To set it, the key must be a Node.";
                            throw new Error(n);
                        }
                    }
                    addToJSMap(e, n) {
                        let r = ue(this.key, "", e);
                        if (n instanceof Map) {
                            let s = ue(this.value, r, e);
                            n.set(r, s);
                        } else if (n instanceof Set) n.add(r);
                        else {
                            let s = _o(this.key, r, e), i = ue(this.value, s, e);
                            s in n ? Object.defineProperty(n, s, {
                                value: i,
                                writable: true,
                                enumerable: true,
                                configurable: true
                            }) : n[s] = i;
                        }
                        return n;
                    }
                    toJSON(e, n) {
                        let r = n && n.mapAsMap ? /* @__PURE__ */ new Map() : {};
                        return this.addToJSMap(n, r);
                    }
                    toString(e, n, r) {
                        if (!e || !e.doc) return JSON.stringify(this);
                        let { indent: s, indentSeq: i, simpleKeys: o } = e.doc.options, { key: a2, value: c } = this, l = a2 instanceof W && a2.comment;
                        if (o) {
                            if (l) throw new Error("With simple keys, key nodes cannot have comments");
                            if (a2 instanceof j) {
                                let _2 = "With simple keys, collection cannot be used as a key value";
                                throw new Error(_2);
                            }
                        }
                        let f2 = !o && (!a2 || l || (a2 instanceof W ? a2 instanceof j || a2.type === p.Type.BLOCK_FOLDED || a2.type === p.Type.BLOCK_LITERAL : typeof a2 == "object")), { doc: m, indent: d, indentStep: y, stringify: h } = e;
                        e = Object.assign({}, e, {
                            implicitKey: !f2,
                            indent: d + y
                        });
                        let g = false, w = h(a2, e, ()=>l = null, ()=>g = true);
                        if (w = Fe(w, e.indent, l), !f2 && w.length > 1024) {
                            if (o) throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
                            f2 = true;
                        }
                        if (e.allNullValues && !o) return this.comment ? (w = Fe(w, e.indent, this.comment), n && n()) : g && !l && r && r(), e.inFlow && !f2 ? w : `? ${w}`;
                        w = f2 ? `? ${w}
${d}:` : `${w}:`, this.comment && (w = Fe(w, e.indent, this.comment), n && n());
                        let C = "", L = null;
                        if (c instanceof W) {
                            if (c.spaceBefore && (C = `
`), c.commentBefore) {
                                let _2 = c.commentBefore.replace(/^/gm, `${e.indent}#`);
                                C += `
${_2}`;
                            }
                            L = c.comment;
                        } else c && typeof c == "object" && (c = m.schema.createNode(c, true));
                        e.implicitKey = false, !f2 && !this.comment && c instanceof P && (e.indentAtStart = w.length + 1), g = false, !i && s >= 2 && !e.inFlow && !f2 && c instanceof pe && c.type !== p.Type.FLOW_SEQ && !c.tag && !m.anchors.getName(c) && (e.indent = e.indent.substr(2));
                        let M = h(c, e, ()=>L = null, ()=>g = true), A2 = " ";
                        return C || this.comment ? A2 = `${C}
${e.indent}` : !f2 && c instanceof j ? (!(M[0] === "[" || M[0] === "{") || M.includes(`
`)) && (A2 = `
${e.indent}`) : M[0] === `
` && (A2 = ""), g && !L && r && r(), Fe(w + A2 + M, e.indent, L);
                    }
                    constructor(e, n = null){
                        super(), this.key = e, this.value = n, this.type = t1.Type.PAIR;
                    }
                };
                p._defineProperty(T, "Type", {
                    PAIR: "PAIR",
                    MERGE_PAIR: "MERGE_PAIR"
                });
                var qt = (t1, e)=>{
                    if (t1 instanceof be) {
                        let n = e.get(t1.source);
                        return n.count * n.aliasCount;
                    } else if (t1 instanceof j) {
                        let n = 0;
                        for (let r of t1.items){
                            let s = qt(r, e);
                            s > n && (n = s);
                        }
                        return n;
                    } else if (t1 instanceof T) {
                        let n = qt(t1.key, e), r = qt(t1.value, e);
                        return Math.max(n, r);
                    }
                    return 1;
                }, be = class t1 extends W {
                    static stringify({ range: e, source: n }, { anchors: r, doc: s, implicitKey: i, inStringifyKey: o }) {
                        let a2 = Object.keys(r).find((l)=>r[l] === n);
                        if (!a2 && o && (a2 = s.anchors.getName(n) || s.anchors.newName()), a2) return `*${a2}${i ? " " : ""}`;
                        let c = s.anchors.getName(n) ? "Alias node must be after source node" : "Source node not found for alias node";
                        throw new Error(`${c} [${e}]`);
                    }
                    set tag(e) {
                        throw new Error("Alias nodes cannot have tags");
                    }
                    toJSON(e, n) {
                        if (!n) return ue(this.source, e, n);
                        let { anchors: r, maxAliasCount: s } = n, i = r.get(this.source);
                        if (!i || i.res === void 0) {
                            let o = "This should not happen: Alias anchor was not resolved?";
                            throw this.cstNode ? new p.YAMLReferenceError(this.cstNode, o) : new ReferenceError(o);
                        }
                        if (s >= 0 && (i.count += 1, i.aliasCount === 0 && (i.aliasCount = qt(this.source, r)), i.count * i.aliasCount > s)) {
                            let o = "Excessive alias count indicates a resource exhaustion attack";
                            throw this.cstNode ? new p.YAMLReferenceError(this.cstNode, o) : new ReferenceError(o);
                        }
                        return i.res;
                    }
                    toString(e) {
                        return t1.stringify(this, e);
                    }
                    constructor(e){
                        super(), this.source = e, this.type = p.Type.ALIAS;
                    }
                };
                p._defineProperty(be, "default", true);
                function pt(t1, e) {
                    let n = e instanceof P ? e.value : e;
                    for (let r of t1)if (r instanceof T && (r.key === e || r.key === n || r.key && r.key.value === n)) return r;
                }
                var mt = class extends j {
                    add(e, n) {
                        e ? e instanceof T || (e = new T(e.key || e, e.value)) : e = new T(e);
                        let r = pt(this.items, e.key), s = this.schema && this.schema.sortMapEntries;
                        if (r) if (n) r.value = e.value;
                        else throw new Error(`Key ${e.key} already set`);
                        else if (s) {
                            let i = this.items.findIndex((o)=>s(e, o) < 0);
                            i === -1 ? this.items.push(e) : this.items.splice(i, 0, e);
                        } else this.items.push(e);
                    }
                    delete(e) {
                        let n = pt(this.items, e);
                        return n ? this.items.splice(this.items.indexOf(n), 1).length > 0 : false;
                    }
                    get(e, n) {
                        let r = pt(this.items, e), s = r && r.value;
                        return !n && s instanceof P ? s.value : s;
                    }
                    has(e) {
                        return !!pt(this.items, e);
                    }
                    set(e, n) {
                        this.add(new T(e, n), true);
                    }
                    toJSON(e, n, r) {
                        let s = r ? new r() : n && n.mapAsMap ? /* @__PURE__ */ new Map() : {};
                        n && n.onCreate && n.onCreate(s);
                        for (let i of this.items)i.addToJSMap(n, s);
                        return s;
                    }
                    toString(e, n, r) {
                        if (!e) return JSON.stringify(this);
                        for (let s of this.items)if (!(s instanceof T)) throw new Error(`Map items must all be pairs; found ${JSON.stringify(s)} instead`);
                        return super.toString(e, {
                            blockItem: (s)=>s.str,
                            flowChars: {
                                start: "{",
                                end: "}"
                            },
                            isMap: true,
                            itemIndent: e.indent || ""
                        }, n, r);
                    }
                }, Fs = "<<", Vt = class extends T {
                    addToJSMap(e, n) {
                        for (let { source: r } of this.value.items){
                            if (!(r instanceof mt)) throw new Error("Merge sources must be maps");
                            let s = r.toJSON(null, e, Map);
                            for (let [i, o] of s)n instanceof Map ? n.has(i) || n.set(i, o) : n instanceof Set ? n.add(i) : Object.prototype.hasOwnProperty.call(n, i) || Object.defineProperty(n, i, {
                                value: o,
                                writable: true,
                                enumerable: true,
                                configurable: true
                            });
                        }
                        return n;
                    }
                    toString(e, n) {
                        let r = this.value;
                        if (r.items.length > 1) return super.toString(e, n);
                        this.value = r.items[0];
                        let s = super.toString(e, n);
                        return this.value = r, s;
                    }
                    constructor(e){
                        if (e instanceof T) {
                            let n = e.value;
                            n instanceof pe || (n = new pe(), n.items.push(e.value), n.range = e.value.range), super(e.key, n), this.range = e.range;
                        } else super(new P(Fs), new pe());
                        this.type = T.Type.MERGE_PAIR;
                    }
                }, xo = {
                    defaultType: p.Type.BLOCK_LITERAL,
                    lineWidth: 76
                }, Ro = {
                    trueStr: "true",
                    falseStr: "false"
                }, Do = {
                    asBigInt: false
                }, Yo = {
                    nullStr: "null"
                }, Ne = {
                    defaultType: p.Type.PLAIN,
                    doubleQuoted: {
                        jsonEncoding: false,
                        minMultiLineLength: 40
                    },
                    fold: {
                        lineWidth: 80,
                        minContentWidth: 20
                    }
                };
                function qn(t1, e, n) {
                    for (let { format: r, test: s, resolve: i } of e)if (s) {
                        let o = t1.match(s);
                        if (o) {
                            let a2 = i.apply(null, o);
                            return a2 instanceof P || (a2 = new P(a2)), r && (a2.format = r), a2;
                        }
                    }
                    return n && (t1 = n(t1)), new P(t1);
                }
                var qs = "flow", Fn = "block", Ut = "quoted", Ys = (t1, e)=>{
                    let n = t1[e + 1];
                    for(; n === " " || n === "	";){
                        do n = t1[e += 1];
                        while (n && n !== `
`)
                        n = t1[e + 1];
                    }
                    return e;
                };
                function Wt(t1, e, n, { indentAtStart: r, lineWidth: s = 80, minContentWidth: i = 20, onFold: o, onOverflow: a2 }) {
                    if (!s || s < 0) return t1;
                    let c = Math.max(1 + i, 1 + s - e.length);
                    if (t1.length <= c) return t1;
                    let l = [], f2 = {}, m = s - e.length;
                    typeof r == "number" && (r > s - Math.max(2, i) ? l.push(0) : m = s - r);
                    let d, y, h = false, g = -1, w = -1, C = -1;
                    n === Fn && (g = Ys(t1, g), g !== -1 && (m = g + c));
                    for(let M; M = t1[g += 1];){
                        if (n === Ut && M === "\\") {
                            switch(w = g, t1[g + 1]){
                                case "x":
                                    g += 3;
                                    break;
                                case "u":
                                    g += 5;
                                    break;
                                case "U":
                                    g += 9;
                                    break;
                                default:
                                    g += 1;
                            }
                            C = g;
                        }
                        if (M === `
`) n === Fn && (g = Ys(t1, g)), m = g + c, d = void 0;
                        else {
                            if (M === " " && y && y !== " " && y !== `
` && y !== "	") {
                                let A2 = t1[g + 1];
                                A2 && A2 !== " " && A2 !== `
` && A2 !== "	" && (d = g);
                            }
                            if (g >= m) if (d) l.push(d), m = d + c, d = void 0;
                            else if (n === Ut) {
                                for(; y === " " || y === "	";)y = M, M = t1[g += 1], h = true;
                                let A2 = g > C + 1 ? g - 2 : w - 1;
                                if (f2[A2]) return t1;
                                l.push(A2), f2[A2] = true, m = A2 + c, d = void 0;
                            } else h = true;
                        }
                        y = M;
                    }
                    if (h && a2 && a2(), l.length === 0) return t1;
                    o && o();
                    let L = t1.slice(0, l[0]);
                    for(let M = 0; M < l.length; ++M){
                        let A2 = l[M], _2 = l[M + 1] || t1.length;
                        A2 === 0 ? L = `
${e}${t1.slice(0, _2)}` : (n === Ut && f2[A2] && (L += `${t1[A2]}\\`), L += `
${e}${t1.slice(A2 + 1, _2)}`);
                    }
                    return L;
                }
                var Un = ({ indentAtStart: t1 })=>t1 ? Object.assign({
                        indentAtStart: t1
                    }, Ne.fold) : Ne.fold, jt = (t1)=>/^(%|---|\.\.\.)/m.test(t1);
                function $o(t1, e, n) {
                    if (!e || e < 0) return false;
                    let r = e - n, s = t1.length;
                    if (s <= r) return false;
                    for(let i = 0, o = 0; i < s; ++i)if (t1[i] === `
`) {
                        if (i - o > r) return true;
                        if (o = i + 1, s - o <= r) return false;
                    }
                    return true;
                }
                function we(t1, e) {
                    let { implicitKey: n } = e, { jsonEncoding: r, minMultiLineLength: s } = Ne.doubleQuoted, i = JSON.stringify(t1);
                    if (r) return i;
                    let o = e.indent || (jt(t1) ? "  " : ""), a2 = "", c = 0;
                    for(let l = 0, f2 = i[l]; f2; f2 = i[++l])if (f2 === " " && i[l + 1] === "\\" && i[l + 2] === "n" && (a2 += i.slice(c, l) + "\\ ", l += 1, c = l, f2 = "\\"), f2 === "\\") switch(i[l + 1]){
                        case "u":
                            {
                                a2 += i.slice(c, l);
                                let m = i.substr(l + 2, 4);
                                switch(m){
                                    case "0000":
                                        a2 += "\\0";
                                        break;
                                    case "0007":
                                        a2 += "\\a";
                                        break;
                                    case "000b":
                                        a2 += "\\v";
                                        break;
                                    case "001b":
                                        a2 += "\\e";
                                        break;
                                    case "0085":
                                        a2 += "\\N";
                                        break;
                                    case "00a0":
                                        a2 += "\\_";
                                        break;
                                    case "2028":
                                        a2 += "\\L";
                                        break;
                                    case "2029":
                                        a2 += "\\P";
                                        break;
                                    default:
                                        m.substr(0, 2) === "00" ? a2 += "\\x" + m.substr(2) : a2 += i.substr(l, 6);
                                }
                                l += 5, c = l + 1;
                            }
                            break;
                        case "n":
                            if (n || i[l + 2] === '"' || i.length < s) l += 1;
                            else {
                                for(a2 += i.slice(c, l) + `

`; i[l + 2] === "\\" && i[l + 3] === "n" && i[l + 4] !== '"';)a2 += `
`, l += 2;
                                a2 += o, i[l + 2] === " " && (a2 += "\\"), l += 1, c = l + 1;
                            }
                            break;
                        default:
                            l += 1;
                    }
                    return a2 = c ? a2 + i.slice(c) : i, n ? a2 : Wt(a2, o, Ut, Un(e));
                }
                function Us(t1, e) {
                    if (e.implicitKey) {
                        if (/\n/.test(t1)) return we(t1, e);
                    } else if (/[ \t]\n|\n[ \t]/.test(t1)) return we(t1, e);
                    let n = e.indent || (jt(t1) ? "  " : ""), r = "'" + t1.replace(/'/g, "''").replace(/\n+/g, `$&
${n}`) + "'";
                    return e.implicitKey ? r : Wt(r, n, qs, Un(e));
                }
                function Kt({ comment: t1, type: e, value: n }, r, s, i) {
                    if (/\n[\t ]+$/.test(n) || /^\s*$/.test(n)) return we(n, r);
                    let o = r.indent || (r.forceBlockIndent || jt(n) ? "  " : ""), a2 = o ? "2" : "1", c = e === p.Type.BLOCK_FOLDED ? false : e === p.Type.BLOCK_LITERAL ? true : !$o(n, Ne.fold.lineWidth, o.length), l = c ? "|" : ">";
                    if (!n) return l + `
`;
                    let f2 = "", m = "";
                    if (n = n.replace(/[\n\t ]*$/, (y)=>{
                        let h = y.indexOf(`
`);
                        return h === -1 ? l += "-" : (n === y || h !== y.length - 1) && (l += "+", i && i()), m = y.replace(/\n$/, ""), "";
                    }).replace(/^[\n ]*/, (y)=>{
                        y.indexOf(" ") !== -1 && (l += a2);
                        let h = y.match(/ +$/);
                        return h ? (f2 = y.slice(0, -h[0].length), h[0]) : (f2 = y, "");
                    }), m && (m = m.replace(/\n+(?!\n|$)/g, `$&${o}`)), f2 && (f2 = f2.replace(/\n+/g, `$&${o}`)), t1 && (l += " #" + t1.replace(/ ?[\r\n]+/g, " "), s && s()), !n) return `${l}${a2}
${o}${m}`;
                    if (c) return n = n.replace(/\n+/g, `$&${o}`), `${l}
${o}${f2}${n}${m}`;
                    n = n.replace(/\n+/g, `
$&`).replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `$&${o}`);
                    let d = Wt(`${f2}${n}${m}`, o, Fn, Ne.fold);
                    return `${l}
${o}${d}`;
                }
                function Bo(t1, e, n, r) {
                    let { comment: s, type: i, value: o } = t1, { actualString: a2, implicitKey: c, indent: l, inFlow: f2 } = e;
                    if (c && /[\n[\]{},]/.test(o) || f2 && /[[\]{},]/.test(o)) return we(o, e);
                    if (!o || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(o)) return c || f2 || o.indexOf(`
`) === -1 ? o.indexOf('"') !== -1 && o.indexOf("'") === -1 ? Us(o, e) : we(o, e) : Kt(t1, e, n, r);
                    if (!c && !f2 && i !== p.Type.PLAIN && o.indexOf(`
`) !== -1) return Kt(t1, e, n, r);
                    if (l === "" && jt(o)) return e.forceBlockIndent = true, Kt(t1, e, n, r);
                    let m = o.replace(/\n+/g, `$&
${l}`);
                    if (a2) {
                        let { tags: y } = e.doc.schema;
                        if (typeof qn(m, y, y.scalarFallback).value != "string") return we(o, e);
                    }
                    let d = c ? m : Wt(m, l, qs, Un(e));
                    return s && !f2 && (d.indexOf(`
`) !== -1 || s.indexOf(`
`) !== -1) ? (n && n(), Po(d, l, s)) : d;
                }
                function Fo(t1, e, n, r) {
                    let { defaultType: s } = Ne, { implicitKey: i, inFlow: o } = e, { type: a2, value: c } = t1;
                    typeof c != "string" && (c = String(c), t1 = Object.assign({}, t1, {
                        value: c
                    }));
                    let l = (m)=>{
                        switch(m){
                            case p.Type.BLOCK_FOLDED:
                            case p.Type.BLOCK_LITERAL:
                                return Kt(t1, e, n, r);
                            case p.Type.QUOTE_DOUBLE:
                                return we(c, e);
                            case p.Type.QUOTE_SINGLE:
                                return Us(c, e);
                            case p.Type.PLAIN:
                                return Bo(t1, e, n, r);
                            default:
                                return null;
                        }
                    };
                    (a2 !== p.Type.QUOTE_DOUBLE && /[\x00-\x08\x0b-\x1f\x7f-\x9f]/.test(c) || (i || o) && (a2 === p.Type.BLOCK_FOLDED || a2 === p.Type.BLOCK_LITERAL)) && (a2 = p.Type.QUOTE_DOUBLE);
                    let f2 = l(a2);
                    if (f2 === null && (f2 = l(s), f2 === null)) throw new Error(`Unsupported default string type ${s}`);
                    return f2;
                }
                function qo({ format: t1, minFractionDigits: e, tag: n, value: r }) {
                    if (typeof r == "bigint") return String(r);
                    if (!isFinite(r)) return isNaN(r) ? ".nan" : r < 0 ? "-.inf" : ".inf";
                    let s = JSON.stringify(r);
                    if (!t1 && e && (!n || n === "tag:yaml.org,2002:float") && /^\d/.test(s)) {
                        let i = s.indexOf(".");
                        i < 0 && (i = s.length, s += ".");
                        let o = e - (s.length - i - 1);
                        for(; o-- > 0;)s += "0";
                    }
                    return s;
                }
                function Ks(t1, e) {
                    let n, r;
                    switch(e.type){
                        case p.Type.FLOW_MAP:
                            n = "}", r = "flow map";
                            break;
                        case p.Type.FLOW_SEQ:
                            n = "]", r = "flow sequence";
                            break;
                        default:
                            t1.push(new p.YAMLSemanticError(e, "Not a flow collection!?"));
                            return;
                    }
                    let s;
                    for(let i = e.items.length - 1; i >= 0; --i){
                        let o = e.items[i];
                        if (!o || o.type !== p.Type.COMMENT) {
                            s = o;
                            break;
                        }
                    }
                    if (s && s.char !== n) {
                        let i = `Expected ${r} to end with ${n}`, o;
                        typeof s.offset == "number" ? (o = new p.YAMLSemanticError(e, i), o.offset = s.offset + 1) : (o = new p.YAMLSemanticError(s, i), s.range && s.range.end && (o.offset = s.range.end - s.range.start)), t1.push(o);
                    }
                }
                function Vs(t1, e) {
                    let n = e.context.src[e.range.start - 1];
                    if (n !== `
` && n !== "	" && n !== " ") {
                        let r = "Comments must be separated from other tokens by white space characters";
                        t1.push(new p.YAMLSemanticError(e, r));
                    }
                }
                function Ws(t1, e) {
                    let n = String(e), r = n.substr(0, 8) + "..." + n.substr(-8);
                    return new p.YAMLSemanticError(t1, `The "${r}" key is too long`);
                }
                function js(t1, e) {
                    for (let { afterKey: n, before: r, comment: s } of e){
                        let i = t1.items[r];
                        i ? (n && i.value && (i = i.value), s === void 0 ? (n || !i.commentBefore) && (i.spaceBefore = true) : i.commentBefore ? i.commentBefore += `
` + s : i.commentBefore = s) : s !== void 0 && (t1.comment ? t1.comment += `
` + s : t1.comment = s);
                    }
                }
                function Kn(t1, e) {
                    let n = e.strValue;
                    return n ? typeof n == "string" ? n : (n.errors.forEach((r)=>{
                        r.source || (r.source = e), t1.errors.push(r);
                    }), n.str) : "";
                }
                function Uo(t1, e) {
                    let { handle: n, suffix: r } = e.tag, s = t1.tagPrefixes.find((i)=>i.handle === n);
                    if (!s) {
                        let i = t1.getDefaults().tagPrefixes;
                        if (i && (s = i.find((o)=>o.handle === n)), !s) throw new p.YAMLSemanticError(e, `The ${n} tag handle is non-default and was not declared.`);
                    }
                    if (!r) throw new p.YAMLSemanticError(e, `The ${n} tag has no suffix.`);
                    if (n === "!" && (t1.version || t1.options.version) === "1.0") {
                        if (r[0] === "^") return t1.warnings.push(new p.YAMLWarning(e, "YAML 1.0 ^ tag expansion is not supported")), r;
                        if (/[:/]/.test(r)) {
                            let i = r.match(/^([a-z0-9-]+)\/(.*)/i);
                            return i ? `tag:${i[1]}.yaml.org,2002:${i[2]}` : `tag:${r}`;
                        }
                    }
                    return s.prefix + decodeURIComponent(r);
                }
                function Ko(t1, e) {
                    let { tag: n, type: r } = e, s = false;
                    if (n) {
                        let { handle: i, suffix: o, verbatim: a2 } = n;
                        if (a2) {
                            if (a2 !== "!" && a2 !== "!!") return a2;
                            let c = `Verbatim tags aren't resolved, so ${a2} is invalid.`;
                            t1.errors.push(new p.YAMLSemanticError(e, c));
                        } else if (i === "!" && !o) s = true;
                        else try {
                            return Uo(t1, e);
                        } catch (c) {
                            t1.errors.push(c);
                        }
                    }
                    switch(r){
                        case p.Type.BLOCK_FOLDED:
                        case p.Type.BLOCK_LITERAL:
                        case p.Type.QUOTE_DOUBLE:
                        case p.Type.QUOTE_SINGLE:
                            return p.defaultTags.STR;
                        case p.Type.FLOW_MAP:
                        case p.Type.MAP:
                            return p.defaultTags.MAP;
                        case p.Type.FLOW_SEQ:
                        case p.Type.SEQ:
                            return p.defaultTags.SEQ;
                        case p.Type.PLAIN:
                            return s ? p.defaultTags.STR : null;
                        default:
                            return null;
                    }
                }
                function $s(t1, e, n) {
                    let { tags: r } = t1.schema, s = [];
                    for (let o of r)if (o.tag === n) if (o.test) s.push(o);
                    else {
                        let a2 = o.resolve(t1, e);
                        return a2 instanceof j ? a2 : new P(a2);
                    }
                    let i = Kn(t1, e);
                    return typeof i == "string" && s.length > 0 ? qn(i, s, r.scalarFallback) : null;
                }
                function Vo({ type: t1 }) {
                    switch(t1){
                        case p.Type.FLOW_MAP:
                        case p.Type.MAP:
                            return p.defaultTags.MAP;
                        case p.Type.FLOW_SEQ:
                        case p.Type.SEQ:
                            return p.defaultTags.SEQ;
                        default:
                            return p.defaultTags.STR;
                    }
                }
                function Wo(t1, e, n) {
                    try {
                        let r = $s(t1, e, n);
                        if (r) return n && e.tag && (r.tag = n), r;
                    } catch (r) {
                        return r.source || (r.source = e), t1.errors.push(r), null;
                    }
                    try {
                        let r = Vo(e);
                        if (!r) throw new Error(`The tag ${n} is unavailable`);
                        let s = `The tag ${n} is unavailable, falling back to ${r}`;
                        t1.warnings.push(new p.YAMLWarning(e, s));
                        let i = $s(t1, e, r);
                        return i.tag = n, i;
                    } catch (r) {
                        let s = new p.YAMLReferenceError(e, r.message);
                        return s.stack = r.stack, t1.errors.push(s), null;
                    }
                }
                var jo = (t1)=>{
                    if (!t1) return false;
                    let { type: e } = t1;
                    return e === p.Type.MAP_KEY || e === p.Type.MAP_VALUE || e === p.Type.SEQ_ITEM;
                };
                function Qo(t1, e) {
                    let n = {
                        before: [],
                        after: []
                    }, r = false, s = false, i = jo(e.context.parent) ? e.context.parent.props.concat(e.props) : e.props;
                    for (let { start: o, end: a2 } of i)switch(e.context.src[o]){
                        case p.Char.COMMENT:
                            {
                                if (!e.commentHasRequiredWhitespace(o)) {
                                    let m = "Comments must be separated from other tokens by white space characters";
                                    t1.push(new p.YAMLSemanticError(e, m));
                                }
                                let { header: c, valueRange: l } = e;
                                (l && (o > l.start || c && o > c.start) ? n.after : n.before).push(e.context.src.slice(o + 1, a2));
                                break;
                            }
                        case p.Char.ANCHOR:
                            if (r) {
                                let c = "A node can have at most one anchor";
                                t1.push(new p.YAMLSemanticError(e, c));
                            }
                            r = true;
                            break;
                        case p.Char.TAG:
                            if (s) {
                                let c = "A node can have at most one tag";
                                t1.push(new p.YAMLSemanticError(e, c));
                            }
                            s = true;
                            break;
                    }
                    return {
                        comments: n,
                        hasAnchor: r,
                        hasTag: s
                    };
                }
                function Jo(t1, e) {
                    let { anchors: n, errors: r, schema: s } = t1;
                    if (e.type === p.Type.ALIAS) {
                        let o = e.rawValue, a2 = n.getNode(o);
                        if (!a2) {
                            let l = `Aliased anchor not found: ${o}`;
                            return r.push(new p.YAMLReferenceError(e, l)), null;
                        }
                        let c = new be(a2);
                        return n._cstAliases.push(c), c;
                    }
                    let i = Ko(t1, e);
                    if (i) return Wo(t1, e, i);
                    if (e.type !== p.Type.PLAIN) {
                        let o = `Failed to resolve ${e.type} node here`;
                        return r.push(new p.YAMLSyntaxError(e, o)), null;
                    }
                    try {
                        let o = Kn(t1, e);
                        return qn(o, s.tags, s.tags.scalarFallback);
                    } catch (o) {
                        return o.source || (o.source = e), r.push(o), null;
                    }
                }
                function me(t1, e) {
                    if (!e) return null;
                    e.error && t1.errors.push(e.error);
                    let { comments: n, hasAnchor: r, hasTag: s } = Qo(t1.errors, e);
                    if (r) {
                        let { anchors: o } = t1, a2 = e.anchor, c = o.getNode(a2);
                        c && (o.map[o.newName(a2)] = c), o.map[a2] = e;
                    }
                    if (e.type === p.Type.ALIAS && (r || s)) {
                        let o = "An alias node must not specify any properties";
                        t1.errors.push(new p.YAMLSemanticError(e, o));
                    }
                    let i = Jo(t1, e);
                    if (i) {
                        i.range = [
                            e.range.start,
                            e.range.end
                        ], t1.options.keepCstNodes && (i.cstNode = e), t1.options.keepNodeTypes && (i.type = e.type);
                        let o = n.before.join(`
`);
                        o && (i.commentBefore = i.commentBefore ? `${i.commentBefore}
${o}` : o);
                        let a2 = n.after.join(`
`);
                        a2 && (i.comment = i.comment ? `${i.comment}
${a2}` : a2);
                    }
                    return e.resolved = i;
                }
                function Go(t1, e) {
                    if (e.type !== p.Type.MAP && e.type !== p.Type.FLOW_MAP) {
                        let o = `A ${e.type} node cannot be resolved as a mapping`;
                        return t1.errors.push(new p.YAMLSyntaxError(e, o)), null;
                    }
                    let { comments: n, items: r } = e.type === p.Type.FLOW_MAP ? Zo(t1, e) : zo(t1, e), s = new mt();
                    s.items = r, js(s, n);
                    let i = false;
                    for(let o = 0; o < r.length; ++o){
                        let { key: a2 } = r[o];
                        if (a2 instanceof j && (i = true), t1.schema.merge && a2 && a2.value === Fs) {
                            r[o] = new Vt(r[o]);
                            let c = r[o].value.items, l = null;
                            c.some((f2)=>{
                                if (f2 instanceof be) {
                                    let { type: m } = f2.source;
                                    return m === p.Type.MAP || m === p.Type.FLOW_MAP ? false : l = "Merge nodes aliases can only point to maps";
                                }
                                return l = "Merge nodes can only have Alias nodes as values";
                            }), l && t1.errors.push(new p.YAMLSemanticError(e, l));
                        } else for(let c = o + 1; c < r.length; ++c){
                            let { key: l } = r[c];
                            if (a2 === l || a2 && l && Object.prototype.hasOwnProperty.call(a2, "value") && a2.value === l.value) {
                                let f2 = `Map keys must be unique; "${a2}" is repeated`;
                                t1.errors.push(new p.YAMLSemanticError(e, f2));
                                break;
                            }
                        }
                    }
                    if (i && !t1.options.mapAsMap) {
                        let o = "Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.";
                        t1.warnings.push(new p.YAMLWarning(e, o));
                    }
                    return e.resolved = s, s;
                }
                var Ho = ({ context: { lineStart: t1, node: e, src: n }, props: r })=>{
                    if (r.length === 0) return false;
                    let { start: s } = r[0];
                    if (e && s > e.valueRange.start || n[s] !== p.Char.COMMENT) return false;
                    for(let i = t1; i < s; ++i)if (n[i] === `
`) return false;
                    return true;
                };
                function Xo(t1, e) {
                    if (!Ho(t1)) return;
                    let n = t1.getPropValue(0, p.Char.COMMENT, true), r = false, s = e.value.commentBefore;
                    if (s && s.startsWith(n)) e.value.commentBefore = s.substr(n.length + 1), r = true;
                    else {
                        let i = e.value.comment;
                        !t1.node && i && i.startsWith(n) && (e.value.comment = i.substr(n.length + 1), r = true);
                    }
                    r && (e.comment = n);
                }
                function zo(t1, e) {
                    let n = [], r = [], s, i = null;
                    for(let o = 0; o < e.items.length; ++o){
                        let a2 = e.items[o];
                        switch(a2.type){
                            case p.Type.BLANK_LINE:
                                n.push({
                                    afterKey: !!s,
                                    before: r.length
                                });
                                break;
                            case p.Type.COMMENT:
                                n.push({
                                    afterKey: !!s,
                                    before: r.length,
                                    comment: a2.comment
                                });
                                break;
                            case p.Type.MAP_KEY:
                                s !== void 0 && r.push(new T(s)), a2.error && t1.errors.push(a2.error), s = me(t1, a2.node), i = null;
                                break;
                            case p.Type.MAP_VALUE:
                                {
                                    if (s === void 0 && (s = null), a2.error && t1.errors.push(a2.error), !a2.context.atLineStart && a2.node && a2.node.type === p.Type.MAP && !a2.node.context.atLineStart) {
                                        let f2 = "Nested mappings are not allowed in compact mappings";
                                        t1.errors.push(new p.YAMLSemanticError(a2.node, f2));
                                    }
                                    let c = a2.node;
                                    if (!c && a2.props.length > 0) {
                                        c = new p.PlainValue(p.Type.PLAIN, []), c.context = {
                                            parent: a2,
                                            src: a2.context.src
                                        };
                                        let f2 = a2.range.start + 1;
                                        if (c.range = {
                                            start: f2,
                                            end: f2
                                        }, c.valueRange = {
                                            start: f2,
                                            end: f2
                                        }, typeof a2.range.origStart == "number") {
                                            let m = a2.range.origStart + 1;
                                            c.range.origStart = c.range.origEnd = m, c.valueRange.origStart = c.valueRange.origEnd = m;
                                        }
                                    }
                                    let l = new T(s, me(t1, c));
                                    Xo(a2, l), r.push(l), s && typeof i == "number" && a2.range.start > i + 1024 && t1.errors.push(Ws(e, s)), s = void 0, i = null;
                                }
                                break;
                            default:
                                s !== void 0 && r.push(new T(s)), s = me(t1, a2), i = a2.range.start, a2.error && t1.errors.push(a2.error);
                                e: for(let c = o + 1;; ++c){
                                    let l = e.items[c];
                                    switch(l && l.type){
                                        case p.Type.BLANK_LINE:
                                        case p.Type.COMMENT:
                                            continue e;
                                        case p.Type.MAP_VALUE:
                                            break e;
                                        default:
                                            {
                                                let f2 = "Implicit map keys need to be followed by map values";
                                                t1.errors.push(new p.YAMLSemanticError(a2, f2));
                                                break e;
                                            }
                                    }
                                }
                                if (a2.valueRangeContainsNewline) {
                                    let c = "Implicit map keys need to be on a single line";
                                    t1.errors.push(new p.YAMLSemanticError(a2, c));
                                }
                        }
                    }
                    return s !== void 0 && r.push(new T(s)), {
                        comments: n,
                        items: r
                    };
                }
                function Zo(t1, e) {
                    let n = [], r = [], s, i = false, o = "{";
                    for(let a2 = 0; a2 < e.items.length; ++a2){
                        let c = e.items[a2];
                        if (typeof c.char == "string") {
                            let { char: l, offset: f2 } = c;
                            if (l === "?" && s === void 0 && !i) {
                                i = true, o = ":";
                                continue;
                            }
                            if (l === ":") {
                                if (s === void 0 && (s = null), o === ":") {
                                    o = ",";
                                    continue;
                                }
                            } else if (i && (s === void 0 && l !== "," && (s = null), i = false), s !== void 0 && (r.push(new T(s)), s = void 0, l === ",")) {
                                o = ":";
                                continue;
                            }
                            if (l === "}") {
                                if (a2 === e.items.length - 1) continue;
                            } else if (l === o) {
                                o = ":";
                                continue;
                            }
                            let m = `Flow map contains an unexpected ${l}`, d = new p.YAMLSyntaxError(e, m);
                            d.offset = f2, t1.errors.push(d);
                        } else c.type === p.Type.BLANK_LINE ? n.push({
                            afterKey: !!s,
                            before: r.length
                        }) : c.type === p.Type.COMMENT ? (Vs(t1.errors, c), n.push({
                            afterKey: !!s,
                            before: r.length,
                            comment: c.comment
                        })) : s === void 0 ? (o === "," && t1.errors.push(new p.YAMLSemanticError(c, "Separator , missing in flow map")), s = me(t1, c)) : (o !== "," && t1.errors.push(new p.YAMLSemanticError(c, "Indicator : missing in flow map entry")), r.push(new T(s, me(t1, c))), s = void 0, i = false);
                    }
                    return Ks(t1.errors, e), s !== void 0 && r.push(new T(s)), {
                        comments: n,
                        items: r
                    };
                }
                function ea(t1, e) {
                    if (e.type !== p.Type.SEQ && e.type !== p.Type.FLOW_SEQ) {
                        let i = `A ${e.type} node cannot be resolved as a sequence`;
                        return t1.errors.push(new p.YAMLSyntaxError(e, i)), null;
                    }
                    let { comments: n, items: r } = e.type === p.Type.FLOW_SEQ ? na(t1, e) : ta(t1, e), s = new pe();
                    if (s.items = r, js(s, n), !t1.options.mapAsMap && r.some((i)=>i instanceof T && i.key instanceof j)) {
                        let i = "Keys with collection values will be stringified as YAML due to JS Object restrictions. Use mapAsMap: true to avoid this.";
                        t1.warnings.push(new p.YAMLWarning(e, i));
                    }
                    return e.resolved = s, s;
                }
                function ta(t1, e) {
                    let n = [], r = [];
                    for(let s = 0; s < e.items.length; ++s){
                        let i = e.items[s];
                        switch(i.type){
                            case p.Type.BLANK_LINE:
                                n.push({
                                    before: r.length
                                });
                                break;
                            case p.Type.COMMENT:
                                n.push({
                                    comment: i.comment,
                                    before: r.length
                                });
                                break;
                            case p.Type.SEQ_ITEM:
                                if (i.error && t1.errors.push(i.error), r.push(me(t1, i.node)), i.hasProps) {
                                    let o = "Sequence items cannot have tags or anchors before the - indicator";
                                    t1.errors.push(new p.YAMLSemanticError(i, o));
                                }
                                break;
                            default:
                                i.error && t1.errors.push(i.error), t1.errors.push(new p.YAMLSyntaxError(i, `Unexpected ${i.type} node in sequence`));
                        }
                    }
                    return {
                        comments: n,
                        items: r
                    };
                }
                function na(t1, e) {
                    let n = [], r = [], s = false, i, o = null, a2 = "[", c = null;
                    for(let l = 0; l < e.items.length; ++l){
                        let f2 = e.items[l];
                        if (typeof f2.char == "string") {
                            let { char: m, offset: d } = f2;
                            if (m !== ":" && (s || i !== void 0) && (s && i === void 0 && (i = a2 ? r.pop() : null), r.push(new T(i)), s = false, i = void 0, o = null), m === a2) a2 = null;
                            else if (!a2 && m === "?") s = true;
                            else if (a2 !== "[" && m === ":" && i === void 0) {
                                if (a2 === ",") {
                                    if (i = r.pop(), i instanceof T) {
                                        let y = "Chaining flow sequence pairs is invalid", h = new p.YAMLSemanticError(e, y);
                                        h.offset = d, t1.errors.push(h);
                                    }
                                    if (!s && typeof o == "number") {
                                        let y = f2.range ? f2.range.start : f2.offset;
                                        y > o + 1024 && t1.errors.push(Ws(e, i));
                                        let { src: h } = c.context;
                                        for(let g = o; g < y; ++g)if (h[g] === `
`) {
                                            let w = "Implicit keys of flow sequence pairs need to be on a single line";
                                            t1.errors.push(new p.YAMLSemanticError(c, w));
                                            break;
                                        }
                                    }
                                } else i = null;
                                o = null, s = false, a2 = null;
                            } else if (a2 === "[" || m !== "]" || l < e.items.length - 1) {
                                let y = `Flow sequence contains an unexpected ${m}`, h = new p.YAMLSyntaxError(e, y);
                                h.offset = d, t1.errors.push(h);
                            }
                        } else if (f2.type === p.Type.BLANK_LINE) n.push({
                            before: r.length
                        });
                        else if (f2.type === p.Type.COMMENT) Vs(t1.errors, f2), n.push({
                            comment: f2.comment,
                            before: r.length
                        });
                        else {
                            if (a2) {
                                let d = `Expected a ${a2} in flow sequence`;
                                t1.errors.push(new p.YAMLSemanticError(f2, d));
                            }
                            let m = me(t1, f2);
                            i === void 0 ? (r.push(m), c = f2) : (r.push(new T(i, m)), i = void 0), o = f2.range.start, a2 = ",";
                        }
                    }
                    return Ks(t1.errors, e), i !== void 0 && r.push(new T(i)), {
                        comments: n,
                        items: r
                    };
                }
                k.Alias = be;
                k.Collection = j;
                k.Merge = Vt;
                k.Node = W;
                k.Pair = T;
                k.Scalar = P;
                k.YAMLMap = mt;
                k.YAMLSeq = pe;
                k.addComment = Fe;
                k.binaryOptions = xo;
                k.boolOptions = Ro;
                k.findPair = pt;
                k.intOptions = Do;
                k.isEmptyPath = Bs;
                k.nullOptions = Yo;
                k.resolveMap = Go;
                k.resolveNode = me;
                k.resolveSeq = ea;
                k.resolveString = Kn;
                k.strOptions = Ne;
                k.stringifyNumber = qo;
                k.stringifyString = Fo;
                k.toJSON = ue;
            });
            var Qn = te((z)=>{
                "use strict";
                var Q = le(), O = qe(), ra = {
                    identify: (t1)=>t1 instanceof Uint8Array,
                    default: false,
                    tag: "tag:yaml.org,2002:binary",
                    resolve: (t1, e)=>{
                        let n = O.resolveString(t1, e);
                        if (typeof Buffer == "function") return Buffer.from(n, "base64");
                        if (typeof atob == "function") {
                            let r = atob(n.replace(/[\n\r]/g, "")), s = new Uint8Array(r.length);
                            for(let i = 0; i < r.length; ++i)s[i] = r.charCodeAt(i);
                            return s;
                        } else {
                            let r = "This environment does not support reading binary tags; either Buffer or atob is required";
                            return t1.errors.push(new Q.YAMLReferenceError(e, r)), null;
                        }
                    },
                    options: O.binaryOptions,
                    stringify: ({ comment: t1, type: e, value: n }, r, s, i)=>{
                        let o;
                        if (typeof Buffer == "function") o = n instanceof Buffer ? n.toString("base64") : Buffer.from(n.buffer).toString("base64");
                        else if (typeof btoa == "function") {
                            let a2 = "";
                            for(let c = 0; c < n.length; ++c)a2 += String.fromCharCode(n[c]);
                            o = btoa(a2);
                        } else throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
                        if (e || (e = O.binaryOptions.defaultType), e === Q.Type.QUOTE_DOUBLE) n = o;
                        else {
                            let { lineWidth: a2 } = O.binaryOptions, c = Math.ceil(o.length / a2), l = new Array(c);
                            for(let f2 = 0, m = 0; f2 < c; ++f2, m += a2)l[f2] = o.substr(m, a2);
                            n = l.join(e === Q.Type.BLOCK_LITERAL ? `
` : " ");
                        }
                        return O.stringifyString({
                            comment: t1,
                            type: e,
                            value: n
                        }, r, s, i);
                    }
                };
                function Js(t1, e) {
                    let n = O.resolveSeq(t1, e);
                    for(let r = 0; r < n.items.length; ++r){
                        let s = n.items[r];
                        if (!(s instanceof O.Pair)) {
                            if (s instanceof O.YAMLMap) {
                                if (s.items.length > 1) {
                                    let o = "Each pair must have its own sequence indicator";
                                    throw new Q.YAMLSemanticError(e, o);
                                }
                                let i = s.items[0] || new O.Pair();
                                s.commentBefore && (i.commentBefore = i.commentBefore ? `${s.commentBefore}
${i.commentBefore}` : s.commentBefore), s.comment && (i.comment = i.comment ? `${s.comment}
${i.comment}` : s.comment), s = i;
                            }
                            n.items[r] = s instanceof O.Pair ? s : new O.Pair(s);
                        }
                    }
                    return n;
                }
                function Gs(t1, e, n) {
                    let r = new O.YAMLSeq(t1);
                    r.tag = "tag:yaml.org,2002:pairs";
                    for (let s of e){
                        let i, o;
                        if (Array.isArray(s)) if (s.length === 2) i = s[0], o = s[1];
                        else throw new TypeError(`Expected [key, value] tuple: ${s}`);
                        else if (s && s instanceof Object) {
                            let c = Object.keys(s);
                            if (c.length === 1) i = c[0], o = s[i];
                            else throw new TypeError(`Expected { key: value } tuple: ${s}`);
                        } else i = s;
                        let a2 = t1.createPair(i, o, n);
                        r.items.push(a2);
                    }
                    return r;
                }
                var sa = {
                    default: false,
                    tag: "tag:yaml.org,2002:pairs",
                    resolve: Js,
                    createNode: Gs
                }, Ue = class t1 extends O.YAMLSeq {
                    toJSON(e, n) {
                        let r = /* @__PURE__ */ new Map();
                        n && n.onCreate && n.onCreate(r);
                        for (let s of this.items){
                            let i, o;
                            if (s instanceof O.Pair ? (i = O.toJSON(s.key, "", n), o = O.toJSON(s.value, i, n)) : i = O.toJSON(s, "", n), r.has(i)) throw new Error("Ordered maps must not include duplicate keys");
                            r.set(i, o);
                        }
                        return r;
                    }
                    constructor(){
                        super(), Q._defineProperty(this, "add", O.YAMLMap.prototype.add.bind(this)), Q._defineProperty(this, "delete", O.YAMLMap.prototype.delete.bind(this)), Q._defineProperty(this, "get", O.YAMLMap.prototype.get.bind(this)), Q._defineProperty(this, "has", O.YAMLMap.prototype.has.bind(this)), Q._defineProperty(this, "set", O.YAMLMap.prototype.set.bind(this)), this.tag = t1.tag;
                    }
                };
                Q._defineProperty(Ue, "tag", "tag:yaml.org,2002:omap");
                function ia(t1, e) {
                    let n = Js(t1, e), r = [];
                    for (let { key: s } of n.items)if (s instanceof O.Scalar) if (r.includes(s.value)) {
                        let i = "Ordered maps must not include duplicate keys";
                        throw new Q.YAMLSemanticError(e, i);
                    } else r.push(s.value);
                    return Object.assign(new Ue(), n);
                }
                function oa(t1, e, n) {
                    let r = Gs(t1, e, n), s = new Ue();
                    return s.items = r.items, s;
                }
                var aa = {
                    identify: (t1)=>t1 instanceof Map,
                    nodeClass: Ue,
                    default: false,
                    tag: "tag:yaml.org,2002:omap",
                    resolve: ia,
                    createNode: oa
                }, Ke = class t1 extends O.YAMLMap {
                    add(e) {
                        let n = e instanceof O.Pair ? e : new O.Pair(e);
                        O.findPair(this.items, n.key) || this.items.push(n);
                    }
                    get(e, n) {
                        let r = O.findPair(this.items, e);
                        return !n && r instanceof O.Pair ? r.key instanceof O.Scalar ? r.key.value : r.key : r;
                    }
                    set(e, n) {
                        if (typeof n != "boolean") throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof n}`);
                        let r = O.findPair(this.items, e);
                        r && !n ? this.items.splice(this.items.indexOf(r), 1) : !r && n && this.items.push(new O.Pair(e));
                    }
                    toJSON(e, n) {
                        return super.toJSON(e, n, Set);
                    }
                    toString(e, n, r) {
                        if (!e) return JSON.stringify(this);
                        if (this.hasAllNullValues()) return super.toString(e, n, r);
                        throw new Error("Set items must all have null values");
                    }
                    constructor(){
                        super(), this.tag = t1.tag;
                    }
                };
                Q._defineProperty(Ke, "tag", "tag:yaml.org,2002:set");
                function ca(t1, e) {
                    let n = O.resolveMap(t1, e);
                    if (!n.hasAllNullValues()) throw new Q.YAMLSemanticError(e, "Set items must all have null values");
                    return Object.assign(new Ke(), n);
                }
                function la(t1, e, n) {
                    let r = new Ke();
                    for (let s of e)r.items.push(t1.createPair(s, null, n));
                    return r;
                }
                var fa = {
                    identify: (t1)=>t1 instanceof Set,
                    nodeClass: Ke,
                    default: false,
                    tag: "tag:yaml.org,2002:set",
                    resolve: ca,
                    createNode: la
                }, Vn = (t1, e)=>{
                    let n = e.split(":").reduce((r, s)=>r * 60 + Number(s), 0);
                    return t1 === "-" ? -n : n;
                }, Hs = ({ value: t1 })=>{
                    if (isNaN(t1) || !isFinite(t1)) return O.stringifyNumber(t1);
                    let e = "";
                    t1 < 0 && (e = "-", t1 = Math.abs(t1));
                    let n = [
                        t1 % 60
                    ];
                    return t1 < 60 ? n.unshift(0) : (t1 = Math.round((t1 - n[0]) / 60), n.unshift(t1 % 60), t1 >= 60 && (t1 = Math.round((t1 - n[0]) / 60), n.unshift(t1))), e + n.map((r)=>r < 10 ? "0" + String(r) : String(r)).join(":").replace(/000000\d*$/, "");
                }, ua = {
                    identify: (t1)=>typeof t1 == "number",
                    default: true,
                    tag: "tag:yaml.org,2002:int",
                    format: "TIME",
                    test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+)$/,
                    resolve: (t1, e, n)=>Vn(e, n.replace(/_/g, "")),
                    stringify: Hs
                }, pa = {
                    identify: (t1)=>typeof t1 == "number",
                    default: true,
                    tag: "tag:yaml.org,2002:float",
                    format: "TIME",
                    test: /^([-+]?)([0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*)$/,
                    resolve: (t1, e, n)=>Vn(e, n.replace(/_/g, "")),
                    stringify: Hs
                }, ma = {
                    identify: (t1)=>t1 instanceof Date,
                    default: true,
                    tag: "tag:yaml.org,2002:timestamp",
                    test: RegExp("^(?:([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?)$"),
                    resolve: (t1, e, n, r, s, i, o, a2, c)=>{
                        a2 && (a2 = (a2 + "00").substr(1, 3));
                        let l = Date.UTC(e, n - 1, r, s || 0, i || 0, o || 0, a2 || 0);
                        if (c && c !== "Z") {
                            let f2 = Vn(c[0], c.slice(1));
                            Math.abs(f2) < 30 && (f2 *= 60), l -= 6e4 * f2;
                        }
                        return new Date(l);
                    },
                    stringify: ({ value: t1 })=>t1.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "")
                };
                function Wn(t1) {
                    let e = {};
                    return t1 ? typeof YAML_SILENCE_DEPRECATION_WARNINGS < "u" ? !YAML_SILENCE_DEPRECATION_WARNINGS : !e.YAML_SILENCE_DEPRECATION_WARNINGS : typeof YAML_SILENCE_WARNINGS < "u" ? !YAML_SILENCE_WARNINGS : !e.YAML_SILENCE_WARNINGS;
                }
                function jn(t1, e) {
                    Wn(false) && console.warn(e ? `${e}: ${t1}` : t1);
                }
                function ha(t1) {
                    if (Wn(true)) {
                        let e = t1.replace(/.*yaml[/\\]/i, "").replace(/\.js$/, "").replace(/\\/g, "/");
                        jn(`The endpoint 'yaml/${e}' will be removed in a future release.`, "DeprecationWarning");
                    }
                }
                var Qs = {};
                function ga(t1, e) {
                    if (!Qs[t1] && Wn(true)) {
                        Qs[t1] = true;
                        let n = `The option '${t1}' will be removed in a future release`;
                        n += e ? `, use '${e}' instead.` : ".", jn(n, "DeprecationWarning");
                    }
                }
                z.binary = ra;
                z.floatTime = pa;
                z.intTime = ua;
                z.omap = aa;
                z.pairs = sa;
                z.set = fa;
                z.timestamp = ma;
                z.warn = jn;
                z.warnFileDeprecation = ha;
                z.warnOptionDeprecation = ga;
            });
            var Xn = te((li)=>{
                "use strict";
                var Gt = le(), E = qe(), D = Qn();
                function da(t1, e, n) {
                    let r = new E.YAMLMap(t1);
                    if (e instanceof Map) for (let [s, i] of e)r.items.push(t1.createPair(s, i, n));
                    else if (e && typeof e == "object") for (let s of Object.keys(e))r.items.push(t1.createPair(s, e[s], n));
                    return typeof t1.sortMapEntries == "function" && r.items.sort(t1.sortMapEntries), r;
                }
                var gt = {
                    createNode: da,
                    default: true,
                    nodeClass: E.YAMLMap,
                    tag: "tag:yaml.org,2002:map",
                    resolve: E.resolveMap
                };
                function ya(t1, e, n) {
                    let r = new E.YAMLSeq(t1);
                    if (e && e[Symbol.iterator]) for (let s of e){
                        let i = t1.createNode(s, n.wrapScalars, null, n);
                        r.items.push(i);
                    }
                    return r;
                }
                var Ht = {
                    createNode: ya,
                    default: true,
                    nodeClass: E.YAMLSeq,
                    tag: "tag:yaml.org,2002:seq",
                    resolve: E.resolveSeq
                }, Ea = {
                    identify: (t1)=>typeof t1 == "string",
                    default: true,
                    tag: "tag:yaml.org,2002:str",
                    resolve: E.resolveString,
                    stringify (t1, e, n, r) {
                        return e = Object.assign({
                            actualString: true
                        }, e), E.stringifyString(t1, e, n, r);
                    },
                    options: E.strOptions
                }, Gn = [
                    gt,
                    Ht,
                    Ea
                ], Xt = (t1)=>typeof t1 == "bigint" || Number.isInteger(t1), Hn = (t1, e, n)=>E.intOptions.asBigInt ? BigInt(t1) : parseInt(e, n);
                function Zs(t1, e, n) {
                    let { value: r } = t1;
                    return Xt(r) && r >= 0 ? n + r.toString(e) : E.stringifyNumber(t1);
                }
                var ei = {
                    identify: (t1)=>t1 == null,
                    createNode: (t1, e, n)=>n.wrapScalars ? new E.Scalar(null) : null,
                    default: true,
                    tag: "tag:yaml.org,2002:null",
                    test: /^(?:~|[Nn]ull|NULL)?$/,
                    resolve: ()=>null,
                    options: E.nullOptions,
                    stringify: ()=>E.nullOptions.nullStr
                }, ti = {
                    identify: (t1)=>typeof t1 == "boolean",
                    default: true,
                    tag: "tag:yaml.org,2002:bool",
                    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
                    resolve: (t1)=>t1[0] === "t" || t1[0] === "T",
                    options: E.boolOptions,
                    stringify: ({ value: t1 })=>t1 ? E.boolOptions.trueStr : E.boolOptions.falseStr
                }, ni = {
                    identify: (t1)=>Xt(t1) && t1 >= 0,
                    default: true,
                    tag: "tag:yaml.org,2002:int",
                    format: "OCT",
                    test: /^0o([0-7]+)$/,
                    resolve: (t1, e)=>Hn(t1, e, 8),
                    options: E.intOptions,
                    stringify: (t1)=>Zs(t1, 8, "0o")
                }, ri = {
                    identify: Xt,
                    default: true,
                    tag: "tag:yaml.org,2002:int",
                    test: /^[-+]?[0-9]+$/,
                    resolve: (t1)=>Hn(t1, t1, 10),
                    options: E.intOptions,
                    stringify: E.stringifyNumber
                }, si = {
                    identify: (t1)=>Xt(t1) && t1 >= 0,
                    default: true,
                    tag: "tag:yaml.org,2002:int",
                    format: "HEX",
                    test: /^0x([0-9a-fA-F]+)$/,
                    resolve: (t1, e)=>Hn(t1, e, 16),
                    options: E.intOptions,
                    stringify: (t1)=>Zs(t1, 16, "0x")
                }, ii = {
                    identify: (t1)=>typeof t1 == "number",
                    default: true,
                    tag: "tag:yaml.org,2002:float",
                    test: /^(?:[-+]?\.inf|(\.nan))$/i,
                    resolve: (t1, e)=>e ? NaN : t1[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
                    stringify: E.stringifyNumber
                }, oi = {
                    identify: (t1)=>typeof t1 == "number",
                    default: true,
                    tag: "tag:yaml.org,2002:float",
                    format: "EXP",
                    test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
                    resolve: (t1)=>parseFloat(t1),
                    stringify: ({ value: t1 })=>Number(t1).toExponential()
                }, ai = {
                    identify: (t1)=>typeof t1 == "number",
                    default: true,
                    tag: "tag:yaml.org,2002:float",
                    test: /^[-+]?(?:\.([0-9]+)|[0-9]+\.([0-9]*))$/,
                    resolve (t1, e, n) {
                        let r = e || n, s = new E.Scalar(parseFloat(t1));
                        return r && r[r.length - 1] === "0" && (s.minFractionDigits = r.length), s;
                    },
                    stringify: E.stringifyNumber
                }, Sa = Gn.concat([
                    ei,
                    ti,
                    ni,
                    ri,
                    si,
                    ii,
                    oi,
                    ai
                ]), Xs = (t1)=>typeof t1 == "bigint" || Number.isInteger(t1), Qt = ({ value: t1 })=>JSON.stringify(t1), ci = [
                    gt,
                    Ht,
                    {
                        identify: (t1)=>typeof t1 == "string",
                        default: true,
                        tag: "tag:yaml.org,2002:str",
                        resolve: E.resolveString,
                        stringify: Qt
                    },
                    {
                        identify: (t1)=>t1 == null,
                        createNode: (t1, e, n)=>n.wrapScalars ? new E.Scalar(null) : null,
                        default: true,
                        tag: "tag:yaml.org,2002:null",
                        test: /^null$/,
                        resolve: ()=>null,
                        stringify: Qt
                    },
                    {
                        identify: (t1)=>typeof t1 == "boolean",
                        default: true,
                        tag: "tag:yaml.org,2002:bool",
                        test: /^true|false$/,
                        resolve: (t1)=>t1 === "true",
                        stringify: Qt
                    },
                    {
                        identify: Xs,
                        default: true,
                        tag: "tag:yaml.org,2002:int",
                        test: /^-?(?:0|[1-9][0-9]*)$/,
                        resolve: (t1)=>E.intOptions.asBigInt ? BigInt(t1) : parseInt(t1, 10),
                        stringify: ({ value: t1 })=>Xs(t1) ? t1.toString() : JSON.stringify(t1)
                    },
                    {
                        identify: (t1)=>typeof t1 == "number",
                        default: true,
                        tag: "tag:yaml.org,2002:float",
                        test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
                        resolve: (t1)=>parseFloat(t1),
                        stringify: Qt
                    }
                ];
                ci.scalarFallback = (t1)=>{
                    throw new SyntaxError(`Unresolved plain scalar ${JSON.stringify(t1)}`);
                };
                var zs = ({ value: t1 })=>t1 ? E.boolOptions.trueStr : E.boolOptions.falseStr, ht = (t1)=>typeof t1 == "bigint" || Number.isInteger(t1);
                function Jt(t1, e, n) {
                    let r = e.replace(/_/g, "");
                    if (E.intOptions.asBigInt) {
                        switch(n){
                            case 2:
                                r = `0b${r}`;
                                break;
                            case 8:
                                r = `0o${r}`;
                                break;
                            case 16:
                                r = `0x${r}`;
                                break;
                        }
                        let i = BigInt(r);
                        return t1 === "-" ? BigInt(-1) * i : i;
                    }
                    let s = parseInt(r, n);
                    return t1 === "-" ? -1 * s : s;
                }
                function Jn(t1, e, n) {
                    let { value: r } = t1;
                    if (ht(r)) {
                        let s = r.toString(e);
                        return r < 0 ? "-" + n + s.substr(1) : n + s;
                    }
                    return E.stringifyNumber(t1);
                }
                var wa = Gn.concat([
                    {
                        identify: (t1)=>t1 == null,
                        createNode: (t1, e, n)=>n.wrapScalars ? new E.Scalar(null) : null,
                        default: true,
                        tag: "tag:yaml.org,2002:null",
                        test: /^(?:~|[Nn]ull|NULL)?$/,
                        resolve: ()=>null,
                        options: E.nullOptions,
                        stringify: ()=>E.nullOptions.nullStr
                    },
                    {
                        identify: (t1)=>typeof t1 == "boolean",
                        default: true,
                        tag: "tag:yaml.org,2002:bool",
                        test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
                        resolve: ()=>true,
                        options: E.boolOptions,
                        stringify: zs
                    },
                    {
                        identify: (t1)=>typeof t1 == "boolean",
                        default: true,
                        tag: "tag:yaml.org,2002:bool",
                        test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,
                        resolve: ()=>false,
                        options: E.boolOptions,
                        stringify: zs
                    },
                    {
                        identify: ht,
                        default: true,
                        tag: "tag:yaml.org,2002:int",
                        format: "BIN",
                        test: /^([-+]?)0b([0-1_]+)$/,
                        resolve: (t1, e, n)=>Jt(e, n, 2),
                        stringify: (t1)=>Jn(t1, 2, "0b")
                    },
                    {
                        identify: ht,
                        default: true,
                        tag: "tag:yaml.org,2002:int",
                        format: "OCT",
                        test: /^([-+]?)0([0-7_]+)$/,
                        resolve: (t1, e, n)=>Jt(e, n, 8),
                        stringify: (t1)=>Jn(t1, 8, "0")
                    },
                    {
                        identify: ht,
                        default: true,
                        tag: "tag:yaml.org,2002:int",
                        test: /^([-+]?)([0-9][0-9_]*)$/,
                        resolve: (t1, e, n)=>Jt(e, n, 10),
                        stringify: E.stringifyNumber
                    },
                    {
                        identify: ht,
                        default: true,
                        tag: "tag:yaml.org,2002:int",
                        format: "HEX",
                        test: /^([-+]?)0x([0-9a-fA-F_]+)$/,
                        resolve: (t1, e, n)=>Jt(e, n, 16),
                        stringify: (t1)=>Jn(t1, 16, "0x")
                    },
                    {
                        identify: (t1)=>typeof t1 == "number",
                        default: true,
                        tag: "tag:yaml.org,2002:float",
                        test: /^(?:[-+]?\.inf|(\.nan))$/i,
                        resolve: (t1, e)=>e ? NaN : t1[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
                        stringify: E.stringifyNumber
                    },
                    {
                        identify: (t1)=>typeof t1 == "number",
                        default: true,
                        tag: "tag:yaml.org,2002:float",
                        format: "EXP",
                        test: /^[-+]?([0-9][0-9_]*)?(\.[0-9_]*)?[eE][-+]?[0-9]+$/,
                        resolve: (t1)=>parseFloat(t1.replace(/_/g, "")),
                        stringify: ({ value: t1 })=>Number(t1).toExponential()
                    },
                    {
                        identify: (t1)=>typeof t1 == "number",
                        default: true,
                        tag: "tag:yaml.org,2002:float",
                        test: /^[-+]?(?:[0-9][0-9_]*)?\.([0-9_]*)$/,
                        resolve (t1, e) {
                            let n = new E.Scalar(parseFloat(t1.replace(/_/g, "")));
                            if (e) {
                                let r = e.replace(/_/g, "");
                                r[r.length - 1] === "0" && (n.minFractionDigits = r.length);
                            }
                            return n;
                        },
                        stringify: E.stringifyNumber
                    }
                ], D.binary, D.omap, D.pairs, D.set, D.intTime, D.floatTime, D.timestamp), ba = {
                    core: Sa,
                    failsafe: Gn,
                    json: ci,
                    yaml11: wa
                }, Na = {
                    binary: D.binary,
                    bool: ti,
                    float: ai,
                    floatExp: oi,
                    floatNaN: ii,
                    floatTime: D.floatTime,
                    int: ri,
                    intHex: si,
                    intOct: ni,
                    intTime: D.intTime,
                    map: gt,
                    null: ei,
                    omap: D.omap,
                    pairs: D.pairs,
                    seq: Ht,
                    set: D.set,
                    timestamp: D.timestamp
                };
                function Oa(t1, e, n) {
                    if (e) {
                        let r = n.filter((i)=>i.tag === e), s = r.find((i)=>!i.format) || r[0];
                        if (!s) throw new Error(`Tag ${e} not found`);
                        return s;
                    }
                    return n.find((r)=>(r.identify && r.identify(t1) || r.class && t1 instanceof r.class) && !r.format);
                }
                function La(t1, e, n) {
                    if (t1 instanceof E.Node) return t1;
                    let { defaultPrefix: r, onTagObj: s, prevObjects: i, schema: o, wrapScalars: a2 } = n;
                    e && e.startsWith("!!") && (e = r + e.slice(2));
                    let c = Oa(t1, e, o.tags);
                    if (!c) {
                        if (typeof t1.toJSON == "function" && (t1 = t1.toJSON()), !t1 || typeof t1 != "object") return a2 ? new E.Scalar(t1) : t1;
                        c = t1 instanceof Map ? gt : t1[Symbol.iterator] ? Ht : gt;
                    }
                    s && (s(c), delete n.onTagObj);
                    let l = {
                        value: void 0,
                        node: void 0
                    };
                    if (t1 && typeof t1 == "object" && i) {
                        let f2 = i.get(t1);
                        if (f2) {
                            let m = new E.Alias(f2);
                            return n.aliasNodes.push(m), m;
                        }
                        l.value = t1, i.set(t1, l);
                    }
                    return l.node = c.createNode ? c.createNode(n.schema, t1, n) : a2 ? new E.Scalar(t1) : t1, e && l.node instanceof E.Node && (l.node.tag = e), l.node;
                }
                function Aa(t1, e, n, r) {
                    let s = t1[r.replace(/\W/g, "")];
                    if (!s) {
                        let i = Object.keys(t1).map((o)=>JSON.stringify(o)).join(", ");
                        throw new Error(`Unknown schema "${r}"; use one of ${i}`);
                    }
                    if (Array.isArray(n)) for (let i of n)s = s.concat(i);
                    else typeof n == "function" && (s = n(s.slice()));
                    for(let i = 0; i < s.length; ++i){
                        let o = s[i];
                        if (typeof o == "string") {
                            let a2 = e[o];
                            if (!a2) {
                                let c = Object.keys(e).map((l)=>JSON.stringify(l)).join(", ");
                                throw new Error(`Unknown custom tag "${o}"; use one of ${c}`);
                            }
                            s[i] = a2;
                        }
                    }
                    return s;
                }
                var Ta = (t1, e)=>t1.key < e.key ? -1 : t1.key > e.key ? 1 : 0, dt = class t1 {
                    createNode(e, n, r, s) {
                        let i = {
                            defaultPrefix: t1.defaultPrefix,
                            schema: this,
                            wrapScalars: n
                        }, o = s ? Object.assign(s, i) : i;
                        return La(e, r, o);
                    }
                    createPair(e, n, r) {
                        r || (r = {
                            wrapScalars: true
                        });
                        let s = this.createNode(e, r.wrapScalars, null, r), i = this.createNode(n, r.wrapScalars, null, r);
                        return new E.Pair(s, i);
                    }
                    constructor({ customTags: e, merge: n, schema: r, sortMapEntries: s, tags: i }){
                        this.merge = !!n, this.name = r, this.sortMapEntries = s === true ? Ta : s || null, !e && i && D.warnOptionDeprecation("tags", "customTags"), this.tags = Aa(ba, Na, e || i, r);
                    }
                };
                Gt._defineProperty(dt, "defaultPrefix", Gt.defaultTagPrefix);
                Gt._defineProperty(dt, "defaultTags", Gt.defaultTags);
                li.Schema = dt;
            });
            var mi = te((tn)=>{
                "use strict";
                var Y = le(), S = qe(), fi = Xn(), Ca = {
                    anchorPrefix: "a",
                    customTags: null,
                    indent: 2,
                    indentSeq: true,
                    keepCstNodes: false,
                    keepNodeTypes: true,
                    keepBlobsInJSON: true,
                    mapAsMap: false,
                    maxAliasCount: 100,
                    prettyErrors: false,
                    simpleKeys: false,
                    version: "1.2"
                }, Ma = {
                    get binary () {
                        return S.binaryOptions;
                    },
                    set binary (t){
                        Object.assign(S.binaryOptions, t);
                    },
                    get bool () {
                        return S.boolOptions;
                    },
                    set bool (t){
                        Object.assign(S.boolOptions, t);
                    },
                    get int () {
                        return S.intOptions;
                    },
                    set int (t){
                        Object.assign(S.intOptions, t);
                    },
                    get null () {
                        return S.nullOptions;
                    },
                    set null (t){
                        Object.assign(S.nullOptions, t);
                    },
                    get str () {
                        return S.strOptions;
                    },
                    set str (t){
                        Object.assign(S.strOptions, t);
                    }
                }, pi = {
                    "1.0": {
                        schema: "yaml-1.1",
                        merge: true,
                        tagPrefixes: [
                            {
                                handle: "!",
                                prefix: Y.defaultTagPrefix
                            },
                            {
                                handle: "!!",
                                prefix: "tag:private.yaml.org,2002:"
                            }
                        ]
                    },
                    1.1: {
                        schema: "yaml-1.1",
                        merge: true,
                        tagPrefixes: [
                            {
                                handle: "!",
                                prefix: "!"
                            },
                            {
                                handle: "!!",
                                prefix: Y.defaultTagPrefix
                            }
                        ]
                    },
                    1.2: {
                        schema: "core",
                        merge: false,
                        tagPrefixes: [
                            {
                                handle: "!",
                                prefix: "!"
                            },
                            {
                                handle: "!!",
                                prefix: Y.defaultTagPrefix
                            }
                        ]
                    }
                };
                function ui(t1, e) {
                    if ((t1.version || t1.options.version) === "1.0") {
                        let s = e.match(/^tag:private\.yaml\.org,2002:([^:/]+)$/);
                        if (s) return "!" + s[1];
                        let i = e.match(/^tag:([a-zA-Z0-9-]+)\.yaml\.org,2002:(.*)/);
                        return i ? `!${i[1]}/${i[2]}` : `!${e.replace(/^tag:/, "")}`;
                    }
                    let n = t1.tagPrefixes.find((s)=>e.indexOf(s.prefix) === 0);
                    if (!n) {
                        let s = t1.getDefaults().tagPrefixes;
                        n = s && s.find((i)=>e.indexOf(i.prefix) === 0);
                    }
                    if (!n) return e[0] === "!" ? e : `!<${e}>`;
                    let r = e.substr(n.prefix.length).replace(/[!,[\]{}]/g, (s)=>({
                            "!": "%21",
                            ",": "%2C",
                            "[": "%5B",
                            "]": "%5D",
                            "{": "%7B",
                            "}": "%7D"
                        })[s]);
                    return n.handle + r;
                }
                function ka(t1, e) {
                    if (e instanceof S.Alias) return S.Alias;
                    if (e.tag) {
                        let s = t1.filter((i)=>i.tag === e.tag);
                        if (s.length > 0) return s.find((i)=>i.format === e.format) || s[0];
                    }
                    let n, r;
                    if (e instanceof S.Scalar) {
                        r = e.value;
                        let s = t1.filter((i)=>i.identify && i.identify(r) || i.class && r instanceof i.class);
                        n = s.find((i)=>i.format === e.format) || s.find((i)=>!i.format);
                    } else r = e, n = t1.find((s)=>s.nodeClass && r instanceof s.nodeClass);
                    if (!n) {
                        let s = r && r.constructor ? r.constructor.name : typeof r;
                        throw new Error(`Tag not resolved for ${s} value`);
                    }
                    return n;
                }
                function va(t1, e, { anchors: n, doc: r }) {
                    let s = [], i = r.anchors.getName(t1);
                    return i && (n[i] = t1, s.push(`&${i}`)), t1.tag ? s.push(ui(r, t1.tag)) : e.default || s.push(ui(r, e.tag)), s.join(" ");
                }
                function zt(t1, e, n, r) {
                    let { anchors: s, schema: i } = e.doc, o;
                    if (!(t1 instanceof S.Node)) {
                        let l = {
                            aliasNodes: [],
                            onTagObj: (f2)=>o = f2,
                            prevObjects: /* @__PURE__ */ new Map()
                        };
                        t1 = i.createNode(t1, true, null, l);
                        for (let f2 of l.aliasNodes){
                            f2.source = f2.source.node;
                            let m = s.getName(f2.source);
                            m || (m = s.newName(), s.map[m] = f2.source);
                        }
                    }
                    if (t1 instanceof S.Pair) return t1.toString(e, n, r);
                    o || (o = ka(i.tags, t1));
                    let a2 = va(t1, o, e);
                    a2.length > 0 && (e.indentAtStart = (e.indentAtStart || 0) + a2.length + 1);
                    let c = typeof o.stringify == "function" ? o.stringify(t1, e, n, r) : t1 instanceof S.Scalar ? S.stringifyString(t1, e, n, r) : t1.toString(e, n, r);
                    return a2 ? t1 instanceof S.Scalar || c[0] === "{" || c[0] === "[" ? `${a2} ${c}` : `${a2}
${e.indent}${c}` : c;
                }
                var zn = class t1 {
                    static validAnchorNode(e) {
                        return e instanceof S.Scalar || e instanceof S.YAMLSeq || e instanceof S.YAMLMap;
                    }
                    createAlias(e, n) {
                        return this.setAnchor(e, n), new S.Alias(e);
                    }
                    createMergePair(...e) {
                        let n = new S.Merge();
                        return n.value.items = e.map((r)=>{
                            if (r instanceof S.Alias) {
                                if (r.source instanceof S.YAMLMap) return r;
                            } else if (r instanceof S.YAMLMap) return this.createAlias(r);
                            throw new Error("Merge sources must be Map nodes or their Aliases");
                        }), n;
                    }
                    getName(e) {
                        let { map: n } = this;
                        return Object.keys(n).find((r)=>n[r] === e);
                    }
                    getNames() {
                        return Object.keys(this.map);
                    }
                    getNode(e) {
                        return this.map[e];
                    }
                    newName(e) {
                        e || (e = this.prefix);
                        let n = Object.keys(this.map);
                        for(let r = 1;; ++r){
                            let s = `${e}${r}`;
                            if (!n.includes(s)) return s;
                        }
                    }
                    resolveNodes() {
                        let { map: e, _cstAliases: n } = this;
                        Object.keys(e).forEach((r)=>{
                            e[r] = e[r].resolved;
                        }), n.forEach((r)=>{
                            r.source = r.source.resolved;
                        }), delete this._cstAliases;
                    }
                    setAnchor(e, n) {
                        if (e != null && !t1.validAnchorNode(e)) throw new Error("Anchors may only be set for Scalar, Seq and Map nodes");
                        if (n && /[\x00-\x19\s,[\]{}]/.test(n)) throw new Error("Anchor names must not contain whitespace or control characters");
                        let { map: r } = this, s = e && Object.keys(r).find((i)=>r[i] === e);
                        if (s) if (n) s !== n && (delete r[s], r[n] = e);
                        else return s;
                        else {
                            if (!n) {
                                if (!e) return null;
                                n = this.newName();
                            }
                            r[n] = e;
                        }
                        return n;
                    }
                    constructor(e){
                        Y._defineProperty(this, "map", /* @__PURE__ */ Object.create(null)), this.prefix = e;
                    }
                }, Zt = (t1, e)=>{
                    if (t1 && typeof t1 == "object") {
                        let { tag: n } = t1;
                        t1 instanceof S.Collection ? (n && (e[n] = true), t1.items.forEach((r)=>Zt(r, e))) : t1 instanceof S.Pair ? (Zt(t1.key, e), Zt(t1.value, e)) : t1 instanceof S.Scalar && n && (e[n] = true);
                    }
                    return e;
                }, Ia = (t1)=>Object.keys(Zt(t1, {}));
                function Pa(t1, e) {
                    let n = {
                        before: [],
                        after: []
                    }, r, s = false;
                    for (let i of e)if (i.valueRange) {
                        if (r !== void 0) {
                            let a2 = "Document contains trailing content not separated by a ... or --- line";
                            t1.errors.push(new Y.YAMLSyntaxError(i, a2));
                            break;
                        }
                        let o = S.resolveNode(t1, i);
                        s && (o.spaceBefore = true, s = false), r = o;
                    } else i.comment !== null ? (r === void 0 ? n.before : n.after).push(i.comment) : i.type === Y.Type.BLANK_LINE && (s = true, r === void 0 && n.before.length > 0 && !t1.commentBefore && (t1.commentBefore = n.before.join(`
`), n.before = []));
                    if (t1.contents = r || null, !r) t1.comment = n.before.concat(n.after).join(`
`) || null;
                    else {
                        let i = n.before.join(`
`);
                        if (i) {
                            let o = r instanceof S.Collection && r.items[0] ? r.items[0] : r;
                            o.commentBefore = o.commentBefore ? `${i}
${o.commentBefore}` : i;
                        }
                        t1.comment = n.after.join(`
`) || null;
                    }
                }
                function _a({ tagPrefixes: t1 }, e) {
                    let [n, r] = e.parameters;
                    if (!n || !r) {
                        let s = "Insufficient parameters given for %TAG directive";
                        throw new Y.YAMLSemanticError(e, s);
                    }
                    if (t1.some((s)=>s.handle === n)) {
                        let s = "The %TAG directive must only be given at most once per handle in the same document.";
                        throw new Y.YAMLSemanticError(e, s);
                    }
                    return {
                        handle: n,
                        prefix: r
                    };
                }
                function xa(t1, e) {
                    let [n] = e.parameters;
                    if (e.name === "YAML:1.0" && (n = "1.0"), !n) {
                        let r = "Insufficient parameters given for %YAML directive";
                        throw new Y.YAMLSemanticError(e, r);
                    }
                    if (!pi[n]) {
                        let s = `Document will be parsed as YAML ${t1.version || t1.options.version} rather than YAML ${n}`;
                        t1.warnings.push(new Y.YAMLWarning(e, s));
                    }
                    return n;
                }
                function Ra(t1, e, n) {
                    let r = [], s = false;
                    for (let i of e){
                        let { comment: o, name: a2 } = i;
                        switch(a2){
                            case "TAG":
                                try {
                                    t1.tagPrefixes.push(_a(t1, i));
                                } catch (c) {
                                    t1.errors.push(c);
                                }
                                s = true;
                                break;
                            case "YAML":
                            case "YAML:1.0":
                                if (t1.version) {
                                    let c = "The %YAML directive must only be given at most once per document.";
                                    t1.errors.push(new Y.YAMLSemanticError(i, c));
                                }
                                try {
                                    t1.version = xa(t1, i);
                                } catch (c) {
                                    t1.errors.push(c);
                                }
                                s = true;
                                break;
                            default:
                                if (a2) {
                                    let c = `YAML only supports %TAG and %YAML directives, and not %${a2}`;
                                    t1.warnings.push(new Y.YAMLWarning(i, c));
                                }
                        }
                        o && r.push(o);
                    }
                    if (n && !s && (t1.version || n.version || t1.options.version) === "1.1") {
                        let i = ({ handle: o, prefix: a2 })=>({
                                handle: o,
                                prefix: a2
                            });
                        t1.tagPrefixes = n.tagPrefixes.map(i), t1.version = n.version;
                    }
                    t1.commentBefore = r.join(`
`) || null;
                }
                function Ve(t1) {
                    if (t1 instanceof S.Collection) return true;
                    throw new Error("Expected a YAML collection as document contents");
                }
                var en = class t1 {
                    add(e) {
                        return Ve(this.contents), this.contents.add(e);
                    }
                    addIn(e, n) {
                        Ve(this.contents), this.contents.addIn(e, n);
                    }
                    delete(e) {
                        return Ve(this.contents), this.contents.delete(e);
                    }
                    deleteIn(e) {
                        return S.isEmptyPath(e) ? this.contents == null ? false : (this.contents = null, true) : (Ve(this.contents), this.contents.deleteIn(e));
                    }
                    getDefaults() {
                        return t1.defaults[this.version] || t1.defaults[this.options.version] || {};
                    }
                    get(e, n) {
                        return this.contents instanceof S.Collection ? this.contents.get(e, n) : void 0;
                    }
                    getIn(e, n) {
                        return S.isEmptyPath(e) ? !n && this.contents instanceof S.Scalar ? this.contents.value : this.contents : this.contents instanceof S.Collection ? this.contents.getIn(e, n) : void 0;
                    }
                    has(e) {
                        return this.contents instanceof S.Collection ? this.contents.has(e) : false;
                    }
                    hasIn(e) {
                        return S.isEmptyPath(e) ? this.contents !== void 0 : this.contents instanceof S.Collection ? this.contents.hasIn(e) : false;
                    }
                    set(e, n) {
                        Ve(this.contents), this.contents.set(e, n);
                    }
                    setIn(e, n) {
                        S.isEmptyPath(e) ? this.contents = n : (Ve(this.contents), this.contents.setIn(e, n));
                    }
                    setSchema(e, n) {
                        if (!e && !n && this.schema) return;
                        typeof e == "number" && (e = e.toFixed(1)), e === "1.0" || e === "1.1" || e === "1.2" ? (this.version ? this.version = e : this.options.version = e, delete this.options.schema) : e && typeof e == "string" && (this.options.schema = e), Array.isArray(n) && (this.options.customTags = n);
                        let r = Object.assign({}, this.getDefaults(), this.options);
                        this.schema = new fi.Schema(r);
                    }
                    parse(e, n) {
                        this.options.keepCstNodes && (this.cstNode = e), this.options.keepNodeTypes && (this.type = "DOCUMENT");
                        let { directives: r = [], contents: s = [], directivesEndMarker: i, error: o, valueRange: a2 } = e;
                        if (o && (o.source || (o.source = this), this.errors.push(o)), Ra(this, r, n), i && (this.directivesEndMarker = true), this.range = a2 ? [
                            a2.start,
                            a2.end
                        ] : null, this.setSchema(), this.anchors._cstAliases = [], Pa(this, s), this.anchors.resolveNodes(), this.options.prettyErrors) {
                            for (let c of this.errors)c instanceof Y.YAMLError && c.makePretty();
                            for (let c of this.warnings)c instanceof Y.YAMLError && c.makePretty();
                        }
                        return this;
                    }
                    listNonDefaultTags() {
                        return Ia(this.contents).filter((e)=>e.indexOf(fi.Schema.defaultPrefix) !== 0);
                    }
                    setTagPrefix(e, n) {
                        if (e[0] !== "!" || e[e.length - 1] !== "!") throw new Error("Handle must start and end with !");
                        if (n) {
                            let r = this.tagPrefixes.find((s)=>s.handle === e);
                            r ? r.prefix = n : this.tagPrefixes.push({
                                handle: e,
                                prefix: n
                            });
                        } else this.tagPrefixes = this.tagPrefixes.filter((r)=>r.handle !== e);
                    }
                    toJSON(e, n) {
                        let { keepBlobsInJSON: r, mapAsMap: s, maxAliasCount: i } = this.options, o = r && (typeof e != "string" || !(this.contents instanceof S.Scalar)), a2 = {
                            doc: this,
                            indentStep: "  ",
                            keep: o,
                            mapAsMap: o && !!s,
                            maxAliasCount: i,
                            stringify: zt
                        }, c = Object.keys(this.anchors.map);
                        c.length > 0 && (a2.anchors = new Map(c.map((f2)=>[
                                this.anchors.map[f2],
                                {
                                    alias: [],
                                    aliasCount: 0,
                                    count: 1
                                }
                            ])));
                        let l = S.toJSON(this.contents, e, a2);
                        if (typeof n == "function" && a2.anchors) for (let { count: f2, res: m } of a2.anchors.values())n(m, f2);
                        return l;
                    }
                    toString() {
                        if (this.errors.length > 0) throw new Error("Document with errors cannot be stringified");
                        let e = this.options.indent;
                        if (!Number.isInteger(e) || e <= 0) {
                            let c = JSON.stringify(e);
                            throw new Error(`"indent" option must be a positive integer, not ${c}`);
                        }
                        this.setSchema();
                        let n = [], r = false;
                        if (this.version) {
                            let c = "%YAML 1.2";
                            this.schema.name === "yaml-1.1" && (this.version === "1.0" ? c = "%YAML:1.0" : this.version === "1.1" && (c = "%YAML 1.1")), n.push(c), r = true;
                        }
                        let s = this.listNonDefaultTags();
                        this.tagPrefixes.forEach(({ handle: c, prefix: l })=>{
                            s.some((f2)=>f2.indexOf(l) === 0) && (n.push(`%TAG ${c} ${l}`), r = true);
                        }), (r || this.directivesEndMarker) && n.push("---"), this.commentBefore && ((r || !this.directivesEndMarker) && n.unshift(""), n.unshift(this.commentBefore.replace(/^/gm, "#")));
                        let i = {
                            anchors: /* @__PURE__ */ Object.create(null),
                            doc: this,
                            indent: "",
                            indentStep: " ".repeat(e),
                            stringify: zt
                        }, o = false, a2 = null;
                        if (this.contents) {
                            this.contents instanceof S.Node && (this.contents.spaceBefore && (r || this.directivesEndMarker) && n.push(""), this.contents.commentBefore && n.push(this.contents.commentBefore.replace(/^/gm, "#")), i.forceBlockIndent = !!this.comment, a2 = this.contents.comment);
                            let c = a2 ? null : ()=>o = true, l = zt(this.contents, i, ()=>a2 = null, c);
                            n.push(S.addComment(l, "", a2));
                        } else this.contents !== void 0 && n.push(zt(this.contents, i));
                        return this.comment && ((!o || a2) && n[n.length - 1] !== "" && n.push(""), n.push(this.comment.replace(/^/gm, "#"))), n.join(`
`) + `
`;
                    }
                    constructor(e){
                        this.anchors = new zn(e.anchorPrefix), this.commentBefore = null, this.comment = null, this.contents = null, this.directivesEndMarker = null, this.errors = [], this.options = e, this.schema = null, this.tagPrefixes = [], this.version = null, this.warnings = [];
                    }
                };
                Y._defineProperty(en, "defaults", pi);
                tn.Document = en;
                tn.defaultOptions = Ca;
                tn.scalarOptions = Ma;
            });
            var di = te((gi)=>{
                "use strict";
                var Zn = Rs(), Oe = mi(), Da = Xn(), Ya = le(), $a = Qn();
                qe();
                function Ba(t1, e = true, n) {
                    n === void 0 && typeof e == "string" && (n = e, e = true);
                    let r = Object.assign({}, Oe.Document.defaults[Oe.defaultOptions.version], Oe.defaultOptions);
                    return new Da.Schema(r).createNode(t1, e, n);
                }
                var We = class extends Oe.Document {
                    constructor(e){
                        super(Object.assign({}, Oe.defaultOptions, e));
                    }
                };
                function Fa(t1, e) {
                    let n = [], r;
                    for (let s of Zn.parse(t1)){
                        let i = new We(e);
                        i.parse(s, r), n.push(i), r = i;
                    }
                    return n;
                }
                function hi(t1, e) {
                    let n = Zn.parse(t1), r = new We(e).parse(n[0]);
                    if (n.length > 1) {
                        let s = "Source contains multiple documents; please use YAML.parseAllDocuments()";
                        r.errors.unshift(new Ya.YAMLSemanticError(n[1], s));
                    }
                    return r;
                }
                function qa(t1, e) {
                    let n = hi(t1, e);
                    if (n.warnings.forEach((r)=>$a.warn(r)), n.errors.length > 0) throw n.errors[0];
                    return n.toJSON();
                }
                function Ua(t1, e) {
                    let n = new We(e);
                    return n.contents = t1, String(n);
                }
                var Ka = {
                    createNode: Ba,
                    defaultOptions: Oe.defaultOptions,
                    Document: We,
                    parse: qa,
                    parseAllDocuments: Fa,
                    parseCST: Zn.parse,
                    parseDocument: hi,
                    scalarOptions: Oe.scalarOptions,
                    stringify: Ua
                };
                gi.YAML = Ka;
            });
            var Ei = te((Um, yi)=>{
                yi.exports = di().YAML;
            });
            var Si = te((J)=>{
                "use strict";
                var je = qe(), Qe = le();
                J.findPair = je.findPair;
                J.parseMap = je.resolveMap;
                J.parseSeq = je.resolveSeq;
                J.stringifyNumber = je.stringifyNumber;
                J.stringifyString = je.stringifyString;
                J.toJSON = je.toJSON;
                J.Type = Qe.Type;
                J.YAMLError = Qe.YAMLError;
                J.YAMLReferenceError = Qe.YAMLReferenceError;
                J.YAMLSemanticError = Qe.YAMLSemanticError;
                J.YAMLSyntaxError = Qe.YAMLSyntaxError;
                J.YAMLWarning = Qe.YAMLWarning;
            });
            var Xa = {};
            nr(Xa, {
                languages: ()=>_r,
                options: ()=>xr,
                parsers: ()=>tr,
                printers: ()=>Ha
            });
            var Pi = (t1, e, n, r)=>{
                if (!(t1 && e == null)) return e.replaceAll ? e.replaceAll(n, r) : n.global ? e.replace(n, r) : e.split(n).join(r);
            }, Et = Pi;
            var Le = "string", Je = "array", Ge = "cursor", He = "indent", Ae = "align", Xe = "trim", Te = "group", Ce = "fill", he = "if-break", ze = "indent-if-break", Me = "line-suffix", Ze = "line-suffix-boundary", Z = "line", et = "label", ke = "break-parent", St = /* @__PURE__ */ new Set([
                Ge,
                He,
                Ae,
                Xe,
                Te,
                Ce,
                he,
                ze,
                Me,
                Ze,
                Z,
                et,
                ke
            ]);
            var _i = (t1, e, n)=>{
                if (!(t1 && e == null)) return Array.isArray(e) || typeof e == "string" ? e[n < 0 ? e.length + n : n] : e.at(n);
            }, x = _i;
            function xi(t1) {
                if (typeof t1 == "string") return Le;
                if (Array.isArray(t1)) return Je;
                if (!t1) return;
                let { type: e } = t1;
                if (St.has(e)) return e;
            }
            var ve = xi;
            var Ri = (t1)=>new Intl.ListFormat("en-US", {
                    type: "disjunction"
                }).format(t1);
            function Di(t1) {
                let e = t1 === null ? "null" : typeof t1;
                if (e !== "string" && e !== "object") return `Unexpected doc '${e}', 
Expected it to be 'string' or 'object'.`;
                if (ve(t1)) throw new Error("doc is valid.");
                let n = Object.prototype.toString.call(t1);
                if (n !== "[object Object]") return `Unexpected doc '${n}'.`;
                let r = Ri([
                    ...St
                ].map((s)=>`'${s}'`));
                return `Unexpected doc.type '${t1.type}'.
Expected it to be ${r}.`;
            }
            var nn = class extends Error {
                constructor(e){
                    super(Di(e));
                    __publicField(this, "name", "InvalidDocError");
                    this.doc = e;
                }
            }, rn = nn;
            function $i(t1, e) {
                if (typeof t1 == "string") return e(t1);
                let n = /* @__PURE__ */ new Map();
                return r(t1);
                function r(i) {
                    if (n.has(i)) return n.get(i);
                    let o = s(i);
                    return n.set(i, o), o;
                }
                function s(i) {
                    switch(ve(i)){
                        case Je:
                            return e(i.map(r));
                        case Ce:
                            return e({
                                ...i,
                                parts: i.parts.map(r)
                            });
                        case he:
                            return e({
                                ...i,
                                breakContents: r(i.breakContents),
                                flatContents: r(i.flatContents)
                            });
                        case Te:
                            {
                                let { expandedStates: o, contents: a2 } = i;
                                return o ? (o = o.map(r), a2 = o[0]) : a2 = r(a2), e({
                                    ...i,
                                    contents: a2,
                                    expandedStates: o
                                });
                            }
                        case Ae:
                        case He:
                        case ze:
                        case et:
                        case Me:
                            return e({
                                ...i,
                                contents: r(i.contents)
                            });
                        case Le:
                        case Ge:
                        case Xe:
                        case Ze:
                        case Z:
                        case ke:
                            return e(i);
                        default:
                            throw new rn(i);
                    }
                }
            }
            function ir(t1, e = tt) {
                return $i(t1, (n)=>typeof n == "string" ? v(e, n.split(`
`)) : n);
            }
            var sn = ()=>{}, ge = sn, on = sn, or = sn;
            function nt(t1, e) {
                return ge(e), {
                    type: Ae,
                    contents: e,
                    n: t1
                };
            }
            function Ie(t1, e = {}) {
                return ge(t1), on(e.expandedStates, true), {
                    type: Te,
                    id: e.id,
                    contents: t1,
                    break: !!e.shouldBreak,
                    expandedStates: e.expandedStates
                };
            }
            function an(t1) {
                return nt(Number.NEGATIVE_INFINITY, t1);
            }
            function ar(t1) {
                return nt({
                    type: "root"
                }, t1);
            }
            function cr(t1) {
                return nt(-1, t1);
            }
            function cn(t1, e) {
                return Ie(t1[0], {
                    ...e,
                    expandedStates: t1
                });
            }
            function wt(t1) {
                return or(t1), {
                    type: Ce,
                    parts: t1
                };
            }
            function rt(t1, e = "", n = {}) {
                return ge(t1), e !== "" && ge(e), {
                    type: he,
                    breakContents: t1,
                    flatContents: e,
                    groupId: n.groupId
                };
            }
            function lr(t1) {
                return ge(t1), {
                    type: Me,
                    contents: t1
                };
            }
            var bt = {
                type: ke
            };
            var Bi = {
                type: Z,
                hard: true
            }, Fi = {
                type: Z,
                hard: true,
                literal: true
            }, ne = {
                type: Z
            }, Nt = {
                type: Z,
                soft: true
            }, N = [
                Bi,
                bt
            ], tt = [
                Fi,
                bt
            ];
            function v(t1, e) {
                ge(t1), on(e);
                let n = [];
                for(let r = 0; r < e.length; r++)r !== 0 && n.push(t1), n.push(e[r]);
                return n;
            }
            function Ot(t1) {
                return (e, n, r)=>{
                    let s = !!(r != null && r.backwards);
                    if (n === false) return false;
                    let { length: i } = e, o = n;
                    for(; o >= 0 && o < i;){
                        let a2 = e.charAt(o);
                        if (t1 instanceof RegExp) {
                            if (!t1.test(a2)) return o;
                        } else if (!t1.includes(a2)) return o;
                        s ? o-- : o++;
                    }
                    return o === -1 || o === i ? o : false;
                };
            }
            var kc = Ot(/\s/u), ln = Ot(" 	"), vc = Ot(",; 	"), Ic = Ot(/[^\n\r]/u);
            function qi(t1, e, n) {
                let r = !!(n != null && n.backwards);
                if (e === false) return false;
                let s = t1.charAt(e);
                if (r) {
                    if (t1.charAt(e - 1) === "\r" && s === `
`) return e - 2;
                    if (s === `
` || s === "\r" || s === "\u2028" || s === "\u2029") return e - 1;
                } else {
                    if (s === "\r" && t1.charAt(e + 1) === `
`) return e + 2;
                    if (s === `
` || s === "\r" || s === "\u2028" || s === "\u2029") return e + 1;
                }
                return e;
            }
            var fn = qi;
            function Ui(t1, e) {
                let n = e - 1;
                n = ln(t1, n, {
                    backwards: true
                }), n = fn(t1, n, {
                    backwards: true
                }), n = ln(t1, n, {
                    backwards: true
                });
                let r = fn(t1, n, {
                    backwards: true
                });
                return n !== r;
            }
            var fr = Ui;
            var un = class extends Error {
                constructor(e, n, r = "type"){
                    super(`Unexpected ${n} node ${r}: ${JSON.stringify(e[r])}.`);
                    __publicField(this, "name", "UnexpectedNodeError");
                    this.node = e;
                }
            }, ur = un;
            function pr(t1, e) {
                let { node: n } = t1;
                if (n.type === "root" && e.filepath && /(?:[/\\]|^)\.(?:prettier|stylelint|lintstaged)rc$/u.test(e.filepath)) return async (r)=>{
                    let s = await r(e.originalText, {
                        parser: "json"
                    });
                    return s ? [
                        s,
                        N
                    ] : void 0;
                };
            }
            pr.getVisitorKeys = ()=>[];
            var mr = pr;
            var st = null;
            function it(t1) {
                if (st !== null && typeof st.property) {
                    let e = st;
                    return st = it.prototype = null, e;
                }
                return st = it.prototype = t1 != null ? t1 : /* @__PURE__ */ Object.create(null), new it();
            }
            var Ki = 10;
            for(let t1 = 0; t1 <= Ki; t1++)it();
            function pn(t1) {
                return it(t1);
            }
            function Vi(t1, e = "type") {
                pn(t1);
                function n(r) {
                    let s = r[e], i = t1[s];
                    if (!Array.isArray(i)) throw Object.assign(new Error(`Missing visitor keys for '${s}'.`), {
                        node: r
                    });
                    return i;
                }
                return n;
            }
            var hr = Vi;
            var Wi = Object.fromEntries(Object.entries({
                root: [
                    "children"
                ],
                document: [
                    "head",
                    "body",
                    "children"
                ],
                documentHead: [
                    "children"
                ],
                documentBody: [
                    "children"
                ],
                directive: [],
                alias: [],
                blockLiteral: [],
                blockFolded: [
                    "children"
                ],
                plain: [
                    "children"
                ],
                quoteSingle: [],
                quoteDouble: [],
                mapping: [
                    "children"
                ],
                mappingItem: [
                    "key",
                    "value",
                    "children"
                ],
                mappingKey: [
                    "content",
                    "children"
                ],
                mappingValue: [
                    "content",
                    "children"
                ],
                sequence: [
                    "children"
                ],
                sequenceItem: [
                    "content",
                    "children"
                ],
                flowMapping: [
                    "children"
                ],
                flowMappingItem: [
                    "key",
                    "value",
                    "children"
                ],
                flowSequence: [
                    "children"
                ],
                flowSequenceItem: [
                    "content",
                    "children"
                ],
                comment: [],
                tag: [],
                anchor: []
            }).map(([t1, e])=>[
                    t1,
                    [
                        ...e,
                        "anchor",
                        "tag",
                        "indicatorComment",
                        "leadingComments",
                        "middleComments",
                        "trailingComment",
                        "endComments"
                    ]
                ])), gr = Wi;
            var ji = hr(gr), dr = ji;
            function Pe(t1) {
                return t1.position.start.offset;
            }
            function yr(t1) {
                return t1.position.end.offset;
            }
            function Er(t1) {
                return /^\s*@(?:prettier|format)\s*$/u.test(t1);
            }
            function Sr(t1) {
                return /^\s*#[^\S\n]*@(?:prettier|format)\s*?(?:\n|$)/u.test(t1);
            }
            function wr(t1) {
                return `# @format

${t1}`;
            }
            function Qi(t1) {
                return Array.isArray(t1) && t1.length > 0;
            }
            var _e = Qi;
            function H(t1, e) {
                return typeof (t1 == null ? void 0 : t1.type) == "string" && (!e || e.includes(t1.type));
            }
            function mn(t1, e, n) {
                return e("children" in t1 ? {
                    ...t1,
                    children: t1.children.map((r)=>mn(r, e, t1))
                } : t1, n);
            }
            function xe(t1, e, n) {
                Object.defineProperty(t1, e, {
                    get: n,
                    enumerable: false
                });
            }
            function Nr(t1, e) {
                let n = 0, r = e.length;
                for(let s = t1.position.end.offset - 1; s < r; s++){
                    let i = e[s];
                    if (i === `
` && n++, n === 1 && /\S/u.test(i)) return false;
                    if (n === 2) return true;
                }
                return false;
            }
            function Lt(t1) {
                let { node: e } = t1;
                switch(e.type){
                    case "tag":
                    case "anchor":
                    case "comment":
                        return false;
                }
                let n = t1.stack.length;
                for(let r = 1; r < n; r++){
                    let s = t1.stack[r], i = t1.stack[r - 1];
                    if (Array.isArray(i) && typeof s == "number" && s !== i.length - 1) return false;
                }
                return true;
            }
            function At(t1) {
                return _e(t1.children) ? At(x(false, t1.children, -1)) : t1;
            }
            function br(t1) {
                return t1.value.trim() === "prettier-ignore";
            }
            function Or(t1) {
                let { node: e } = t1;
                if (e.type === "documentBody") {
                    let n = t1.parent.head;
                    return R(n) && br(x(false, n.endComments, -1));
                }
                return ee(e) && br(x(false, e.leadingComments, -1));
            }
            function Re(t1) {
                return !_e(t1.children) && !Ji(t1);
            }
            function Ji(t1) {
                return ee(t1) || ie(t1) || hn(t1) || K(t1) || R(t1);
            }
            function ee(t1) {
                return _e(t1 == null ? void 0 : t1.leadingComments);
            }
            function ie(t1) {
                return _e(t1 == null ? void 0 : t1.middleComments);
            }
            function hn(t1) {
                return t1 == null ? void 0 : t1.indicatorComment;
            }
            function K(t1) {
                return t1 == null ? void 0 : t1.trailingComment;
            }
            function R(t1) {
                return _e(t1 == null ? void 0 : t1.endComments);
            }
            function Lr(t1) {
                let e = [], n;
                for (let r of t1.split(/( +)/u))r !== " " ? n === " " ? e.push(r) : e.push((e.pop() || "") + r) : n === void 0 && e.unshift(""), n = r;
                return n === " " && e.push((e.pop() || "") + " "), e[0] === "" && (e.shift(), e.unshift(" " + (e.shift() || ""))), e;
            }
            function Ar(t1, e, n) {
                let r = e.split(`
`).map((s, i, o)=>i === 0 && i === o.length - 1 ? s : i !== 0 && i !== o.length - 1 ? s.trim() : i === 0 ? s.trimEnd() : s.trimStart());
                return n.proseWrap === "preserve" ? r.map((s)=>s.length === 0 ? [] : [
                        s
                    ]) : r.map((s)=>s.length === 0 ? [] : Lr(s)).reduce((s, i, o)=>o !== 0 && r[o - 1].length > 0 && i.length > 0 && !(t1 === "quoteDouble" && x(false, x(false, s, -1), -1).endsWith("\\")) ? [
                        ...s.slice(0, -1),
                        [
                            ...x(false, s, -1),
                            ...i
                        ]
                    ] : [
                        ...s,
                        i
                    ], []).map((s)=>n.proseWrap === "never" ? [
                        s.join(" ")
                    ] : s);
            }
            function Tr(t1, { parentIndent: e, isLastDescendant: n, options: r }) {
                let s = t1.position.start.line === t1.position.end.line ? "" : r.originalText.slice(t1.position.start.offset, t1.position.end.offset).match(RegExp("^[^\\n]*\\n(.*)$", "su"))[1], i;
                if (t1.indent === null) {
                    let c = s.match(RegExp("^(?<leadingSpace> *)[^\\n\\r ]", "mu"));
                    i = c ? c.groups.leadingSpace.length : Number.POSITIVE_INFINITY;
                } else i = t1.indent - 1 + e;
                let o = s.split(`
`).map((c)=>c.slice(i));
                if (r.proseWrap === "preserve" || t1.type === "blockLiteral") return a2(o.map((c)=>c.length === 0 ? [] : [
                        c
                    ]));
                return a2(o.map((c)=>c.length === 0 ? [] : Lr(c)).reduce((c, l, f2)=>f2 !== 0 && o[f2 - 1].length > 0 && l.length > 0 && !/^\s/u.test(l[0]) && !/^\s|\s$/u.test(x(false, c, -1)) ? [
                        ...c.slice(0, -1),
                        [
                            ...x(false, c, -1),
                            ...l
                        ]
                    ] : [
                        ...c,
                        l
                    ], []).map((c)=>c.reduce((l, f2)=>l.length > 0 && /\s$/u.test(x(false, l, -1)) ? [
                            ...l.slice(0, -1),
                            x(false, l, -1) + " " + f2
                        ] : [
                            ...l,
                            f2
                        ], [])).map((c)=>r.proseWrap === "never" ? [
                        c.join(" ")
                    ] : c));
                function a2(c) {
                    if (t1.chomping === "keep") return x(false, c, -1).length === 0 ? c.slice(0, -1) : c;
                    let l = 0;
                    for(let f2 = c.length - 1; f2 >= 0 && c[f2].length === 0; f2--)l++;
                    return l === 0 ? c : l >= 2 && !n ? c.slice(0, -(l - 1)) : c.slice(0, -l);
                }
            }
            function ot(t1) {
                if (!t1) return true;
                switch(t1.type){
                    case "plain":
                    case "quoteDouble":
                    case "quoteSingle":
                    case "alias":
                    case "flowMapping":
                    case "flowSequence":
                        return true;
                    default:
                        return false;
                }
            }
            var gn = /* @__PURE__ */ new WeakMap();
            function Tt(t1, e) {
                let { node: n, root: r } = t1, s;
                return gn.has(r) ? s = gn.get(r) : (s = /* @__PURE__ */ new Set(), gn.set(r, s)), !s.has(n.position.end.line) && (s.add(n.position.end.line), Nr(n, e) && !dn(t1.parent)) ? Nt : "";
            }
            function dn(t1) {
                return R(t1) && !H(t1, [
                    "documentHead",
                    "documentBody",
                    "flowMapping",
                    "flowSequence"
                ]);
            }
            function I(t1, e) {
                return nt(" ".repeat(t1), e);
            }
            function Gi(t1, e, n) {
                let { node: r } = t1, s = t1.ancestors.filter((l)=>l.type === "sequence" || l.type === "mapping").length, i = Lt(t1), o = [
                    r.type === "blockFolded" ? ">" : "|"
                ];
                r.indent !== null && o.push(r.indent.toString()), r.chomping !== "clip" && o.push(r.chomping === "keep" ? "+" : "-"), hn(r) && o.push(" ", e("indicatorComment"));
                let a2 = Tr(r, {
                    parentIndent: s,
                    isLastDescendant: i,
                    options: n
                }), c = [];
                for (let [l, f2] of a2.entries())l === 0 && c.push(N), c.push(wt(v(ne, f2))), l !== a2.length - 1 ? c.push(f2.length === 0 ? N : ar(tt)) : r.chomping === "keep" && i && c.push(an(f2.length === 0 ? N : tt));
                return r.indent === null ? o.push(cr(I(n.tabWidth, c))) : o.push(an(I(r.indent - 1 + s, c))), o;
            }
            var Cr = Gi;
            function Ct(t1, e, n) {
                let { node: r } = t1, s = r.type === "flowMapping", i = s ? "{" : "[", o = s ? "}" : "]", a2 = Nt;
                s && r.children.length > 0 && n.bracketSpacing && (a2 = ne);
                let c = x(false, r.children, -1), l = (c == null ? void 0 : c.type) === "flowMappingItem" && Re(c.key) && Re(c.value);
                return [
                    i,
                    I(n.tabWidth, [
                        a2,
                        Hi(t1, e, n),
                        n.trailingComma === "none" ? "" : rt(","),
                        R(r) ? [
                            N,
                            v(N, t1.map(e, "endComments"))
                        ] : ""
                    ]),
                    l ? "" : a2,
                    o
                ];
            }
            function Hi(t1, e, n) {
                return t1.map(({ isLast: r, node: s, next: i })=>[
                        e(),
                        r ? "" : [
                            ",",
                            ne,
                            s.position.start.line !== i.position.start.line ? Tt(t1, n.originalText) : ""
                        ]
                    ], "children");
            }
            function Xi(t1, e, n) {
                var C;
                let { node: r, parent: s } = t1, { key: i, value: o } = r, a2 = Re(i), c = Re(o);
                if (a2 && c) return ": ";
                let l = e("key"), f2 = zi(r) ? " " : "";
                if (c) return r.type === "flowMappingItem" && s.type === "flowMapping" ? l : r.type === "mappingItem" && yn(i.content, n) && !K(i.content) && ((C = s.tag) == null ? void 0 : C.value) !== "tag:yaml.org,2002:set" ? [
                    l,
                    f2,
                    ":"
                ] : [
                    "? ",
                    I(2, l)
                ];
                let m = e("value");
                if (a2) return [
                    ": ",
                    I(2, m)
                ];
                if (ee(o) || !ot(i.content)) return [
                    "? ",
                    I(2, l),
                    N,
                    ...t1.map(()=>[
                            e(),
                            N
                        ], "value", "leadingComments"),
                    ": ",
                    I(2, m)
                ];
                if (Zi(i.content) && !ee(i.content) && !ie(i.content) && !K(i.content) && !R(i) && !ee(o.content) && !ie(o.content) && !R(o) && yn(o.content, n)) return [
                    l,
                    f2,
                    ": ",
                    m
                ];
                let d = Symbol("mappingKey"), y = Ie([
                    rt("? "),
                    Ie(I(2, l), {
                        id: d
                    })
                ]), h = [
                    N,
                    ": ",
                    I(2, m)
                ], g = [
                    f2,
                    ":"
                ];
                ee(o.content) || R(o) && o.content && !H(o.content, [
                    "mapping",
                    "sequence"
                ]) || s.type === "mapping" && K(i.content) && ot(o.content) || H(o.content, [
                    "mapping",
                    "sequence"
                ]) && o.content.tag === null && o.content.anchor === null ? g.push(N) : o.content ? g.push(ne) : K(o) && g.push(" "), g.push(m);
                let w = I(n.tabWidth, g);
                return yn(i.content, n) && !ee(i.content) && !ie(i.content) && !R(i) ? cn([
                    [
                        l,
                        w
                    ]
                ]) : cn([
                    [
                        y,
                        rt(h, w, {
                            groupId: d
                        })
                    ]
                ]);
            }
            function yn(t1, e) {
                if (!t1) return true;
                switch(t1.type){
                    case "plain":
                    case "quoteSingle":
                    case "quoteDouble":
                        break;
                    case "alias":
                        return true;
                    default:
                        return false;
                }
                if (e.proseWrap === "preserve") return t1.position.start.line === t1.position.end.line;
                if (/\\$/mu.test(e.originalText.slice(t1.position.start.offset, t1.position.end.offset))) return false;
                switch(e.proseWrap){
                    case "never":
                        return !t1.value.includes(`
`);
                    case "always":
                        return !/[\n ]/u.test(t1.value);
                    default:
                        return false;
                }
            }
            function zi(t1) {
                var e;
                return ((e = t1.key.content) == null ? void 0 : e.type) === "alias";
            }
            function Zi(t1) {
                if (!t1) return true;
                switch(t1.type){
                    case "plain":
                    case "quoteDouble":
                    case "quoteSingle":
                        return t1.position.start.line === t1.position.end.line;
                    case "alias":
                        return true;
                    default:
                        return false;
                }
            }
            var Mr = Xi;
            function eo(t1) {
                return mn(t1, to);
            }
            function to(t1) {
                switch(t1.type){
                    case "document":
                        xe(t1, "head", ()=>t1.children[0]), xe(t1, "body", ()=>t1.children[1]);
                        break;
                    case "documentBody":
                    case "sequenceItem":
                    case "flowSequenceItem":
                    case "mappingKey":
                    case "mappingValue":
                        xe(t1, "content", ()=>t1.children[0]);
                        break;
                    case "mappingItem":
                    case "flowMappingItem":
                        xe(t1, "key", ()=>t1.children[0]), xe(t1, "value", ()=>t1.children[1]);
                        break;
                }
                return t1;
            }
            var kr = eo;
            function no(t1, e, n) {
                let { node: r } = t1, s = [];
                r.type !== "mappingValue" && ee(r) && s.push([
                    v(N, t1.map(n, "leadingComments")),
                    N
                ]);
                let { tag: i, anchor: o } = r;
                i && s.push(n("tag")), i && o && s.push(" "), o && s.push(n("anchor"));
                let a2 = "";
                return H(r, [
                    "mapping",
                    "sequence",
                    "comment",
                    "directive",
                    "mappingItem",
                    "sequenceItem"
                ]) && !Lt(t1) && (a2 = Tt(t1, e.originalText)), (i || o) && (H(r, [
                    "sequence",
                    "mapping"
                ]) && !ie(r) ? s.push(N) : s.push(" ")), ie(r) && s.push([
                    r.middleComments.length === 1 ? "" : N,
                    v(N, t1.map(n, "middleComments")),
                    N
                ]), Or(t1) ? s.push(ir(e.originalText.slice(r.position.start.offset, r.position.end.offset).trimEnd())) : s.push(Ie(ro(t1, e, n))), K(r) && !H(r, [
                    "document",
                    "documentHead"
                ]) && s.push(lr([
                    r.type === "mappingValue" && !r.content ? "" : " ",
                    t1.parent.type === "mappingKey" && t1.getParentNode(2).type === "mapping" && ot(r) ? "" : bt,
                    n("trailingComment")
                ])), dn(r) && s.push(I(r.type === "sequenceItem" ? 2 : 0, [
                    N,
                    v(N, t1.map(({ node: c })=>[
                            fr(e.originalText, Pe(c)) ? N : "",
                            n()
                        ], "endComments"))
                ])), s.push(a2), s;
            }
            function ro(t1, e, n) {
                let { node: r } = t1;
                switch(r.type){
                    case "root":
                        {
                            let s = [];
                            t1.each(({ node: o, next: a2, isFirst: c })=>{
                                c || s.push(N), s.push(n()), vr(o, a2) ? (s.push(N, "..."), K(o) && s.push(" ", n("trailingComment"))) : a2 && !K(a2.head) && s.push(N, "---");
                            }, "children");
                            let i = At(r);
                            return (!H(i, [
                                "blockLiteral",
                                "blockFolded"
                            ]) || i.chomping !== "keep") && s.push(N), s;
                        }
                    case "document":
                        {
                            let s = [];
                            return io(t1, e) === "head" && ((r.head.children.length > 0 || r.head.endComments.length > 0) && s.push(n("head")), K(r.head) ? s.push([
                                "---",
                                " ",
                                n([
                                    "head",
                                    "trailingComment"
                                ])
                            ]) : s.push("---")), so(r) && s.push(n("body")), v(N, s);
                        }
                    case "documentHead":
                        return v(N, [
                            ...t1.map(n, "children"),
                            ...t1.map(n, "endComments")
                        ]);
                    case "documentBody":
                        {
                            let { children: s, endComments: i } = r, o = "";
                            if (s.length > 0 && i.length > 0) {
                                let a2 = At(r);
                                H(a2, [
                                    "blockFolded",
                                    "blockLiteral"
                                ]) ? a2.chomping !== "keep" && (o = [
                                    N,
                                    N
                                ]) : o = N;
                            }
                            return [
                                v(N, t1.map(n, "children")),
                                o,
                                v(N, t1.map(n, "endComments"))
                            ];
                        }
                    case "directive":
                        return [
                            "%",
                            v(" ", [
                                r.name,
                                ...r.parameters
                            ])
                        ];
                    case "comment":
                        return [
                            "#",
                            r.value
                        ];
                    case "alias":
                        return [
                            "*",
                            r.value
                        ];
                    case "tag":
                        return e.originalText.slice(r.position.start.offset, r.position.end.offset);
                    case "anchor":
                        return [
                            "&",
                            r.value
                        ];
                    case "plain":
                        return at(r.type, e.originalText.slice(r.position.start.offset, r.position.end.offset), e);
                    case "quoteDouble":
                    case "quoteSingle":
                        {
                            let s = "'", i = '"', o = e.originalText.slice(r.position.start.offset + 1, r.position.end.offset - 1);
                            if (r.type === "quoteSingle" && o.includes("\\") || r.type === "quoteDouble" && /\\[^"]/u.test(o)) {
                                let c = r.type === "quoteDouble" ? i : s;
                                return [
                                    c,
                                    at(r.type, o, e),
                                    c
                                ];
                            }
                            if (o.includes(i)) return [
                                s,
                                at(r.type, r.type === "quoteDouble" ? Et(false, Et(false, o, String.raw`\"`, i), "'", s.repeat(2)) : o, e),
                                s
                            ];
                            if (o.includes(s)) return [
                                i,
                                at(r.type, r.type === "quoteSingle" ? Et(false, o, "''", s) : o, e),
                                i
                            ];
                            let a2 = e.singleQuote ? s : i;
                            return [
                                a2,
                                at(r.type, o, e),
                                a2
                            ];
                        }
                    case "blockFolded":
                    case "blockLiteral":
                        return Cr(t1, n, e);
                    case "mapping":
                    case "sequence":
                        return v(N, t1.map(n, "children"));
                    case "sequenceItem":
                        return [
                            "- ",
                            I(2, r.content ? n("content") : "")
                        ];
                    case "mappingKey":
                    case "mappingValue":
                        return r.content ? n("content") : "";
                    case "mappingItem":
                    case "flowMappingItem":
                        return Mr(t1, n, e);
                    case "flowMapping":
                        return Ct(t1, n, e);
                    case "flowSequence":
                        return Ct(t1, n, e);
                    case "flowSequenceItem":
                        return n("content");
                    default:
                        throw new ur(r, "YAML");
                }
            }
            function so(t1) {
                return t1.body.children.length > 0 || R(t1.body);
            }
            function vr(t1, e) {
                return K(t1) || e && (e.head.children.length > 0 || R(e.head));
            }
            function io(t1, e) {
                let n = t1.node;
                if (t1.isFirst && /---(?:\s|$)/u.test(e.originalText.slice(Pe(n), Pe(n) + 4)) || n.head.children.length > 0 || R(n.head) || K(n.head)) return "head";
                let r = t1.next;
                return vr(n, r) ? false : r ? "root" : false;
            }
            function at(t1, e, n) {
                let r = Ar(t1, e, n);
                return v(N, r.map((s)=>wt(v(ne, s))));
            }
            function Ir(t1, e) {
                if (H(t1)) switch(t1.type){
                    case "comment":
                        if (Er(t1.value)) return null;
                        break;
                    case "quoteDouble":
                    case "quoteSingle":
                        e.type = "quote";
                        break;
                }
            }
            Ir.ignoredProperties = /* @__PURE__ */ new Set([
                "position"
            ]);
            var oo = {
                preprocess: kr,
                embed: mr,
                print: no,
                massageAstNode: Ir,
                insertPragma: wr,
                getVisitorKeys: dr
            }, Pr = oo;
            var _r = [
                {
                    linguistLanguageId: 407,
                    name: "YAML",
                    type: "data",
                    color: "#cb171e",
                    tmScope: "source.yaml",
                    aliases: [
                        "yml"
                    ],
                    extensions: [
                        ".yml",
                        ".mir",
                        ".reek",
                        ".rviz",
                        ".sublime-syntax",
                        ".syntax",
                        ".yaml",
                        ".yaml-tmlanguage",
                        ".yaml.sed",
                        ".yml.mysql"
                    ],
                    filenames: [
                        ".clang-format",
                        ".clang-tidy",
                        ".gemrc",
                        "CITATION.cff",
                        "glide.lock",
                        ".prettierrc",
                        ".stylelintrc",
                        ".lintstagedrc"
                    ],
                    aceMode: "yaml",
                    codemirrorMode: "yaml",
                    codemirrorMimeType: "text/x-yaml",
                    parsers: [
                        "yaml"
                    ],
                    vscodeLanguageIds: [
                        "yaml",
                        "ansible",
                        "dockercompose",
                        "github-actions-workflow",
                        "home-assistant"
                    ]
                }
            ];
            var Mt = {
                bracketSpacing: {
                    category: "Common",
                    type: "boolean",
                    default: true,
                    description: "Print spaces between brackets.",
                    oppositeDescription: "Do not print spaces between brackets."
                },
                objectWrap: {
                    category: "Common",
                    type: "choice",
                    default: "preserve",
                    description: "How to wrap object literals.",
                    choices: [
                        {
                            value: "preserve",
                            description: "Keep as multi-line, if there is a newline between the opening brace and first property."
                        },
                        {
                            value: "collapse",
                            description: "Fit to a single line when possible."
                        }
                    ]
                },
                singleQuote: {
                    category: "Common",
                    type: "boolean",
                    default: false,
                    description: "Use single quotes instead of double quotes."
                },
                proseWrap: {
                    category: "Common",
                    type: "choice",
                    default: "preserve",
                    description: "How to wrap prose.",
                    choices: [
                        {
                            value: "always",
                            description: "Wrap prose if it exceeds the print width."
                        },
                        {
                            value: "never",
                            description: "Do not wrap prose."
                        },
                        {
                            value: "preserve",
                            description: "Wrap prose as-is."
                        }
                    ]
                },
                bracketSameLine: {
                    category: "Common",
                    type: "boolean",
                    default: false,
                    description: "Put > of opening tags on the last line instead of on a new line."
                },
                singleAttributePerLine: {
                    category: "Common",
                    type: "boolean",
                    default: false,
                    description: "Enforce single attribute per line in HTML, Vue and JSX."
                }
            };
            var ao = {
                bracketSpacing: Mt.bracketSpacing,
                singleQuote: Mt.singleQuote,
                proseWrap: Mt.proseWrap
            }, xr = ao;
            var tr = {};
            nr(tr, {
                yaml: ()=>Ga
            });
            var kt = `
`, Rr = "\r", Dr = function() {
                function t1(e) {
                    this.length = e.length;
                    for(var n = [
                        0
                    ], r = 0; r < e.length;)switch(e[r]){
                        case kt:
                            r += kt.length, n.push(r);
                            break;
                        case Rr:
                            r += Rr.length, e[r] === kt && (r += kt.length), n.push(r);
                            break;
                        default:
                            r++;
                            break;
                    }
                    this.offsets = n;
                }
                return t1.prototype.locationForIndex = function(e) {
                    if (e < 0 || e > this.length) return null;
                    for(var n = 0, r = this.offsets; r[n + 1] <= e;)n++;
                    var s = e - r[n];
                    return {
                        line: n,
                        column: s
                    };
                }, t1.prototype.indexForLocation = function(e) {
                    var n = e.line, r = e.column;
                    return n < 0 || n >= this.offsets.length || r < 0 || r > this.lengthOfLine(n) ? null : this.offsets[n] + r;
                }, t1.prototype.lengthOfLine = function(e) {
                    var n = this.offsets[e], r = e === this.offsets.length - 1 ? this.length : this.offsets[e + 1];
                    return r - n;
                }, t1;
            }();
            function $(t1, e = null) {
                "children" in t1 && t1.children.forEach((n)=>$(n, t1)), "anchor" in t1 && t1.anchor && $(t1.anchor, t1), "tag" in t1 && t1.tag && $(t1.tag, t1), "leadingComments" in t1 && t1.leadingComments.forEach((n)=>$(n, t1)), "middleComments" in t1 && t1.middleComments.forEach((n)=>$(n, t1)), "indicatorComment" in t1 && t1.indicatorComment && $(t1.indicatorComment, t1), "trailingComment" in t1 && t1.trailingComment && $(t1.trailingComment, t1), "endComments" in t1 && t1.endComments.forEach((n)=>$(n, t1)), Object.defineProperty(t1, "_parent", {
                    value: e,
                    enumerable: false
                });
            }
            function de(t1) {
                return `${t1.line}:${t1.column}`;
            }
            function Yr(t1) {
                $(t1);
                let e = co(t1), n = t1.children.slice();
                t1.comments.sort((r, s)=>r.position.start.offset - s.position.end.offset).filter((r)=>!r._parent).forEach((r)=>{
                    for(; n.length > 1 && r.position.start.line > n[0].position.end.line;)n.shift();
                    lo(r, e, n[0]);
                });
            }
            function co(t1) {
                let e = Array.from(new Array(t1.position.end.line), ()=>({}));
                for (let n of t1.comments)e[n.position.start.line - 1].comment = n;
                return $r(e, t1), e;
            }
            function $r(t1, e) {
                if (e.position.start.offset !== e.position.end.offset) {
                    if ("leadingComments" in e) {
                        let { start: n } = e.position, { leadingAttachableNode: r } = t1[n.line - 1];
                        (!r || n.column < r.position.start.column) && (t1[n.line - 1].leadingAttachableNode = e);
                    }
                    if ("trailingComment" in e && e.position.end.column > 1 && e.type !== "document" && e.type !== "documentHead") {
                        let { end: n } = e.position, { trailingAttachableNode: r } = t1[n.line - 1];
                        (!r || n.column >= r.position.end.column) && (t1[n.line - 1].trailingAttachableNode = e);
                    }
                    if (e.type !== "root" && e.type !== "document" && e.type !== "documentHead" && e.type !== "documentBody") {
                        let { start: n, end: r } = e.position, s = [
                            r.line
                        ].concat(n.line === r.line ? [] : n.line);
                        for (let i of s){
                            let o = t1[i - 1].trailingNode;
                            (!o || r.column >= o.position.end.column) && (t1[i - 1].trailingNode = e);
                        }
                    }
                    "children" in e && e.children.forEach((n)=>{
                        $r(t1, n);
                    });
                }
            }
            function lo(t1, e, n) {
                let r = t1.position.start.line, { trailingAttachableNode: s } = e[r - 1];
                if (s) {
                    if (s.trailingComment) throw new Error(`Unexpected multiple trailing comment at ${de(t1.position.start)}`);
                    $(t1, s), s.trailingComment = t1;
                    return;
                }
                for(let o = r; o >= n.position.start.line; o--){
                    let { trailingNode: a2 } = e[o - 1], c;
                    if (a2) c = a2;
                    else if (o !== r && e[o - 1].comment) c = e[o - 1].comment._parent;
                    else continue;
                    if ((c.type === "sequence" || c.type === "mapping") && (c = c.children[0]), c.type === "mappingItem") {
                        let [l, f2] = c.children;
                        c = Br(l) ? l : f2;
                    }
                    for(;;){
                        if (fo(c, t1)) {
                            $(t1, c), c.endComments.push(t1);
                            return;
                        }
                        if (!c._parent) break;
                        c = c._parent;
                    }
                    break;
                }
                for(let o = r + 1; o <= n.position.end.line; o++){
                    let { leadingAttachableNode: a2 } = e[o - 1];
                    if (a2) {
                        $(t1, a2), a2.leadingComments.push(t1);
                        return;
                    }
                }
                let i = n.children[1];
                $(t1, i), i.endComments.push(t1);
            }
            function fo(t1, e) {
                if (t1.position.start.offset < e.position.start.offset && t1.position.end.offset > e.position.end.offset) switch(t1.type){
                    case "flowMapping":
                    case "flowSequence":
                        return t1.children.length === 0 || e.position.start.line > t1.children[t1.children.length - 1].position.end.line;
                }
                if (e.position.end.offset < t1.position.end.offset) return false;
                switch(t1.type){
                    case "sequenceItem":
                        return e.position.start.column > t1.position.start.column;
                    case "mappingKey":
                    case "mappingValue":
                        return e.position.start.column > t1._parent.position.start.column && (t1.children.length === 0 || t1.children.length === 1 && t1.children[0].type !== "blockFolded" && t1.children[0].type !== "blockLiteral") && (t1.type === "mappingValue" || Br(t1));
                    default:
                        return false;
                }
            }
            function Br(t1) {
                return t1.position.start !== t1.position.end && (t1.children.length === 0 || t1.position.start.offset !== t1.children[0].position.start.offset);
            }
            function b(t1, e) {
                return {
                    type: t1,
                    position: e
                };
            }
            function Fr(t1, e, n) {
                return {
                    ...b("root", t1),
                    children: e,
                    comments: n
                };
            }
            function ct(t1) {
                switch(t1.type){
                    case "DOCUMENT":
                        for(let e = t1.contents.length - 1; e >= 0; e--)t1.contents[e].type === "BLANK_LINE" ? t1.contents.splice(e, 1) : ct(t1.contents[e]);
                        for(let e = t1.directives.length - 1; e >= 0; e--)t1.directives[e].type === "BLANK_LINE" && t1.directives.splice(e, 1);
                        break;
                    case "FLOW_MAP":
                    case "FLOW_SEQ":
                    case "MAP":
                    case "SEQ":
                        for(let e = t1.items.length - 1; e >= 0; e--){
                            let n = t1.items[e];
                            "char" in n || (n.type === "BLANK_LINE" ? t1.items.splice(e, 1) : ct(n));
                        }
                        break;
                    case "MAP_KEY":
                    case "MAP_VALUE":
                    case "SEQ_ITEM":
                        t1.node && ct(t1.node);
                        break;
                    case "ALIAS":
                    case "BLANK_LINE":
                    case "BLOCK_FOLDED":
                    case "BLOCK_LITERAL":
                    case "COMMENT":
                    case "DIRECTIVE":
                    case "PLAIN":
                    case "QUOTE_DOUBLE":
                    case "QUOTE_SINGLE":
                        break;
                    default:
                        throw new Error(`Unexpected node type ${JSON.stringify(t1.type)}`);
                }
            }
            function X() {
                return {
                    leadingComments: []
                };
            }
            function oe(t1 = null) {
                return {
                    trailingComment: t1
                };
            }
            function B() {
                return {
                    ...X(),
                    ...oe()
                };
            }
            function qr(t1, e, n) {
                return {
                    ...b("alias", t1),
                    ...B(),
                    ...e,
                    value: n
                };
            }
            function Ur(t1, e) {
                let n = t1.cstNode;
                return qr(e.transformRange({
                    origStart: n.valueRange.origStart - 1,
                    origEnd: n.valueRange.origEnd
                }), e.transformContent(t1), n.rawValue);
            }
            function Kr(t1) {
                return {
                    ...t1,
                    type: "blockFolded"
                };
            }
            function Vr(t1, e, n, r, s, i) {
                return {
                    ...b("blockValue", t1),
                    ...X(),
                    ...e,
                    chomping: n,
                    indent: r,
                    value: s,
                    indicatorComment: i
                };
            }
            var ae;
            (function(t1) {
                t1.Tag = "!", t1.Anchor = "&", t1.Comment = "#";
            })(ae || (ae = {}));
            function Wr(t1, e) {
                return {
                    ...b("anchor", t1),
                    value: e
                };
            }
            function De(t1, e) {
                return {
                    ...b("comment", t1),
                    value: e
                };
            }
            function jr(t1, e, n) {
                return {
                    anchor: e,
                    tag: t1,
                    middleComments: n
                };
            }
            function Qr(t1, e) {
                return {
                    ...b("tag", t1),
                    value: e
                };
            }
            function vt(t1, e, n = ()=>false) {
                let r = t1.cstNode, s = [], i = null, o = null, a2 = null;
                for (let c of r.props){
                    let l = e.text[c.origStart];
                    switch(l){
                        case ae.Tag:
                            i = i || c, o = Qr(e.transformRange(c), t1.tag);
                            break;
                        case ae.Anchor:
                            i = i || c, a2 = Wr(e.transformRange(c), r.anchor);
                            break;
                        case ae.Comment:
                            {
                                let f2 = De(e.transformRange(c), e.text.slice(c.origStart + 1, c.origEnd));
                                e.comments.push(f2), !n(f2) && i && i.origEnd <= c.origStart && c.origEnd <= r.valueRange.origStart && s.push(f2);
                                break;
                            }
                        default:
                            throw new Error(`Unexpected leading character ${JSON.stringify(l)}`);
                    }
                }
                return jr(o, a2, s);
            }
            var En;
            (function(t1) {
                t1.CLIP = "clip", t1.STRIP = "strip", t1.KEEP = "keep";
            })(En || (En = {}));
            function It(t1, e) {
                let n = t1.cstNode, r = 1, s = n.chomping === "CLIP" ? 0 : 1, o = n.header.origEnd - n.header.origStart - r - s !== 0, a2 = e.transformRange({
                    origStart: n.header.origStart,
                    origEnd: n.valueRange.origEnd
                }), c = null, l = vt(t1, e, (f2)=>{
                    if (!(a2.start.offset < f2.position.start.offset && f2.position.end.offset < a2.end.offset)) return false;
                    if (c) throw new Error(`Unexpected multiple indicator comments at ${de(f2.position.start)}`);
                    return c = f2, true;
                });
                return Vr(a2, l, En[n.chomping], o ? n.blockIndent : null, n.strValue, c);
            }
            function Jr(t1, e) {
                return Kr(It(t1, e));
            }
            function Gr(t1) {
                return {
                    ...t1,
                    type: "blockLiteral"
                };
            }
            function Hr(t1, e) {
                return Gr(It(t1, e));
            }
            function Xr(t1, e) {
                return De(e.transformRange(t1.range), t1.comment);
            }
            function zr(t1, e, n) {
                return {
                    ...b("directive", t1),
                    ...B(),
                    name: e,
                    parameters: n
                };
            }
            function Ye(t1, e) {
                for (let n of t1.props){
                    let r = e.text[n.origStart];
                    switch(r){
                        case ae.Comment:
                            e.comments.push(De(e.transformRange(n), e.text.slice(n.origStart + 1, n.origEnd)));
                            break;
                        default:
                            throw new Error(`Unexpected leading character ${JSON.stringify(r)}`);
                    }
                }
            }
            function Zr(t1, e) {
                return Ye(t1, e), zr(e.transformRange(t1.range), t1.name, t1.parameters);
            }
            function es(t1, e, n, r) {
                return {
                    ...b("document", t1),
                    ...oe(r),
                    children: [
                        e,
                        n
                    ]
                };
            }
            function V(t1, e) {
                return {
                    start: t1,
                    end: e
                };
            }
            function Sn(t1) {
                return {
                    start: t1,
                    end: t1
                };
            }
            function F(t1 = []) {
                return {
                    endComments: t1
                };
            }
            function ts(t1, e, n) {
                return {
                    ...b("documentBody", t1),
                    ...F(n),
                    children: e ? [
                        e
                    ] : []
                };
            }
            function q(t1) {
                return t1[t1.length - 1];
            }
            function Pt(t1, e) {
                let n = t1.match(e);
                return n ? n.index : -1;
            }
            function ns(t1, e, n) {
                let r = t1.cstNode, { comments: s, endComments: i, documentTrailingComment: o, documentHeadTrailingComment: a2 } = uo(r, e, n), c = e.transformNode(t1.contents), { position: l, documentEndPoint: f2 } = po(r, c, e);
                return e.comments.push(...s, ...i), {
                    documentBody: ts(l, c, i),
                    documentEndPoint: f2,
                    documentTrailingComment: o,
                    documentHeadTrailingComment: a2
                };
            }
            function uo(t1, e, n) {
                let r = [], s = [], i = [], o = [], a2 = false;
                for(let c = t1.contents.length - 1; c >= 0; c--){
                    let l = t1.contents[c];
                    if (l.type === "COMMENT") {
                        let f2 = e.transformNode(l);
                        n && n.line === f2.position.start.line ? o.unshift(f2) : a2 ? r.unshift(f2) : f2.position.start.offset >= t1.valueRange.origEnd ? i.unshift(f2) : r.unshift(f2);
                    } else a2 = true;
                }
                if (i.length > 1) throw new Error(`Unexpected multiple document trailing comments at ${de(i[1].position.start)}`);
                if (o.length > 1) throw new Error(`Unexpected multiple documentHead trailing comments at ${de(o[1].position.start)}`);
                return {
                    comments: r,
                    endComments: s,
                    documentTrailingComment: q(i) || null,
                    documentHeadTrailingComment: q(o) || null
                };
            }
            function po(t1, e, n) {
                let r = Pt(n.text.slice(t1.valueRange.origEnd), /^\.\.\./), s = r === -1 ? t1.valueRange.origEnd : Math.max(0, t1.valueRange.origEnd - 1);
                n.text[s - 1] === "\r" && s--;
                let i = n.transformRange({
                    origStart: e !== null ? e.position.start.offset : s,
                    origEnd: s
                }), o = r === -1 ? i.end : n.transformOffset(t1.valueRange.origEnd + 3);
                return {
                    position: i,
                    documentEndPoint: o
                };
            }
            function rs(t1, e, n, r) {
                return {
                    ...b("documentHead", t1),
                    ...F(n),
                    ...oe(r),
                    children: e
                };
            }
            function ss(t1, e) {
                let n = t1.cstNode, { directives: r, comments: s, endComments: i } = mo(n, e), { position: o, endMarkerPoint: a2 } = ho(n, r, e);
                return e.comments.push(...s, ...i), {
                    createDocumentHeadWithTrailingComment: (l)=>(l && e.comments.push(l), rs(o, r, i, l)),
                    documentHeadEndMarkerPoint: a2
                };
            }
            function mo(t1, e) {
                let n = [], r = [], s = [], i = false;
                for(let o = t1.directives.length - 1; o >= 0; o--){
                    let a2 = e.transformNode(t1.directives[o]);
                    a2.type === "comment" ? i ? r.unshift(a2) : s.unshift(a2) : (i = true, n.unshift(a2));
                }
                return {
                    directives: n,
                    comments: r,
                    endComments: s
                };
            }
            function ho(t1, e, n) {
                let r = Pt(n.text.slice(0, t1.valueRange.origStart), /---\s*$/);
                r > 0 && !/[\r\n]/.test(n.text[r - 1]) && (r = -1);
                let s = r === -1 ? {
                    origStart: t1.valueRange.origStart,
                    origEnd: t1.valueRange.origStart
                } : {
                    origStart: r,
                    origEnd: r + 3
                };
                return e.length !== 0 && (s.origStart = e[0].position.start.offset), {
                    position: n.transformRange(s),
                    endMarkerPoint: r === -1 ? null : n.transformOffset(r)
                };
            }
            function is(t1, e) {
                let { createDocumentHeadWithTrailingComment: n, documentHeadEndMarkerPoint: r } = ss(t1, e), { documentBody: s, documentEndPoint: i, documentTrailingComment: o, documentHeadTrailingComment: a2 } = ns(t1, e, r), c = n(a2);
                return o && e.comments.push(o), es(V(c.position.start, i), c, s, o);
            }
            function _t(t1, e, n) {
                return {
                    ...b("flowCollection", t1),
                    ...B(),
                    ...F(),
                    ...e,
                    children: n
                };
            }
            function os(t1, e, n) {
                return {
                    ..._t(t1, e, n),
                    type: "flowMapping"
                };
            }
            function xt(t1, e, n) {
                return {
                    ...b("flowMappingItem", t1),
                    ...X(),
                    children: [
                        e,
                        n
                    ]
                };
            }
            function ce(t1, e) {
                let n = [];
                for (let r of t1)r && "type" in r && r.type === "COMMENT" ? e.comments.push(e.transformNode(r)) : n.push(r);
                return n;
            }
            function Rt(t1) {
                let [e, n] = [
                    "?",
                    ":"
                ].map((r)=>{
                    let s = t1.find((i)=>"char" in i && i.char === r);
                    return s ? {
                        origStart: s.origOffset,
                        origEnd: s.origOffset + 1
                    } : null;
                });
                return {
                    additionalKeyRange: e,
                    additionalValueRange: n
                };
            }
            function Dt(t1, e) {
                let n = e;
                return (r)=>t1.slice(n, n = r);
            }
            function Yt(t1) {
                let e = [], n = Dt(t1, 1), r = false;
                for(let s = 1; s < t1.length - 1; s++){
                    let i = t1[s];
                    if ("char" in i && i.char === ",") {
                        e.push(n(s)), n(s + 1), r = false;
                        continue;
                    }
                    r = true;
                }
                return r && e.push(n(t1.length - 1)), e;
            }
            function wn(t1, e) {
                return {
                    ...b("mappingKey", t1),
                    ...oe(),
                    ...F(),
                    children: e ? [
                        e
                    ] : []
                };
            }
            function bn(t1, e) {
                return {
                    ...b("mappingValue", t1),
                    ...B(),
                    ...F(),
                    children: e ? [
                        e
                    ] : []
                };
            }
            function $e(t1, e, n, r, s) {
                let i = e.transformNode(t1.key), o = e.transformNode(t1.value), a2 = i || r ? wn(e.transformRange({
                    origStart: r ? r.origStart : i.position.start.offset,
                    origEnd: i ? i.position.end.offset : r.origStart + 1
                }), i) : null, c = o || s ? bn(e.transformRange({
                    origStart: s ? s.origStart : o.position.start.offset,
                    origEnd: o ? o.position.end.offset : s.origStart + 1
                }), o) : null;
                return n(V(a2 ? a2.position.start : c.position.start, c ? c.position.end : a2.position.end), a2 || wn(Sn(c.position.start), null), c || bn(Sn(a2.position.end), null));
            }
            function as(t1, e) {
                let n = ce(t1.cstNode.items, e), r = Yt(n), s = t1.items.map((a2, c)=>{
                    let l = r[c], { additionalKeyRange: f2, additionalValueRange: m } = Rt(l);
                    return $e(a2, e, xt, f2, m);
                }), i = n[0], o = q(n);
                return os(e.transformRange({
                    origStart: i.origOffset,
                    origEnd: o.origOffset + 1
                }), e.transformContent(t1), s);
            }
            function cs(t1, e, n) {
                return {
                    ..._t(t1, e, n),
                    type: "flowSequence"
                };
            }
            function ls(t1, e) {
                return {
                    ...b("flowSequenceItem", t1),
                    children: [
                        e
                    ]
                };
            }
            function fs(t1, e) {
                let n = ce(t1.cstNode.items, e), r = Yt(n), s = t1.items.map((a2, c)=>{
                    if (a2.type !== "PAIR") {
                        let l = e.transformNode(a2);
                        return ls(V(l.position.start, l.position.end), l);
                    } else {
                        let l = r[c], { additionalKeyRange: f2, additionalValueRange: m } = Rt(l);
                        return $e(a2, e, xt, f2, m);
                    }
                }), i = n[0], o = q(n);
                return cs(e.transformRange({
                    origStart: i.origOffset,
                    origEnd: o.origOffset + 1
                }), e.transformContent(t1), s);
            }
            function us(t1, e, n) {
                return {
                    ...b("mapping", t1),
                    ...X(),
                    ...e,
                    children: n
                };
            }
            function ps(t1, e, n) {
                return {
                    ...b("mappingItem", t1),
                    ...X(),
                    children: [
                        e,
                        n
                    ]
                };
            }
            function ms(t1, e) {
                let n = t1.cstNode;
                n.items.filter((o)=>o.type === "MAP_KEY" || o.type === "MAP_VALUE").forEach((o)=>Ye(o, e));
                let r = ce(n.items, e), s = go(r), i = t1.items.map((o, a2)=>{
                    let c = s[a2], [l, f2] = c[0].type === "MAP_VALUE" ? [
                        null,
                        c[0].range
                    ] : [
                        c[0].range,
                        c.length === 1 ? null : c[1].range
                    ];
                    return $e(o, e, ps, l, f2);
                });
                return us(V(i[0].position.start, q(i).position.end), e.transformContent(t1), i);
            }
            function go(t1) {
                let e = [], n = Dt(t1, 0), r = false;
                for(let s = 0; s < t1.length; s++){
                    if (t1[s].type === "MAP_VALUE") {
                        e.push(n(s + 1)), r = false;
                        continue;
                    }
                    r && e.push(n(s)), r = true;
                }
                return r && e.push(n(1 / 0)), e;
            }
            function hs(t1, e, n) {
                return {
                    ...b("plain", t1),
                    ...B(),
                    ...e,
                    value: n
                };
            }
            function gs(t1, e, n) {
                for(let r = e; r >= 0; r--)if (n.test(t1[r])) return r;
                return -1;
            }
            function ds(t1, e) {
                let n = t1.cstNode;
                return hs(e.transformRange({
                    origStart: n.valueRange.origStart,
                    origEnd: gs(e.text, n.valueRange.origEnd - 1, /\S/) + 1
                }), e.transformContent(t1), n.strValue);
            }
            function ys(t1) {
                return {
                    ...t1,
                    type: "quoteDouble"
                };
            }
            function Es(t1, e, n) {
                return {
                    ...b("quoteValue", t1),
                    ...e,
                    ...B(),
                    value: n
                };
            }
            function $t(t1, e) {
                let n = t1.cstNode;
                return Es(e.transformRange(n.valueRange), e.transformContent(t1), n.strValue);
            }
            function Ss(t1, e) {
                return ys($t(t1, e));
            }
            function ws(t1) {
                return {
                    ...t1,
                    type: "quoteSingle"
                };
            }
            function bs(t1, e) {
                return ws($t(t1, e));
            }
            function Ns(t1, e, n) {
                return {
                    ...b("sequence", t1),
                    ...X(),
                    ...F(),
                    ...e,
                    children: n
                };
            }
            function Os(t1, e) {
                return {
                    ...b("sequenceItem", t1),
                    ...B(),
                    ...F(),
                    children: e ? [
                        e
                    ] : []
                };
            }
            function Ls(t1, e) {
                let r = ce(t1.cstNode.items, e).map((s, i)=>{
                    Ye(s, e);
                    let o = e.transformNode(t1.items[i]);
                    return Os(V(e.transformOffset(s.valueRange.origStart), o === null ? e.transformOffset(s.valueRange.origStart + 1) : o.position.end), o);
                });
                return Ns(V(r[0].position.start, q(r).position.end), e.transformContent(t1), r);
            }
            function As(t1, e) {
                if (t1 === null || t1.type === void 0 && t1.value === null) return null;
                switch(t1.type){
                    case "ALIAS":
                        return Ur(t1, e);
                    case "BLOCK_FOLDED":
                        return Jr(t1, e);
                    case "BLOCK_LITERAL":
                        return Hr(t1, e);
                    case "COMMENT":
                        return Xr(t1, e);
                    case "DIRECTIVE":
                        return Zr(t1, e);
                    case "DOCUMENT":
                        return is(t1, e);
                    case "FLOW_MAP":
                        return as(t1, e);
                    case "FLOW_SEQ":
                        return fs(t1, e);
                    case "MAP":
                        return ms(t1, e);
                    case "PLAIN":
                        return ds(t1, e);
                    case "QUOTE_DOUBLE":
                        return Ss(t1, e);
                    case "QUOTE_SINGLE":
                        return bs(t1, e);
                    case "SEQ":
                        return Ls(t1, e);
                    default:
                        throw new Error(`Unexpected node type ${t1.type}`);
                }
            }
            function Ts(t1, e, n) {
                let r = new SyntaxError(t1);
                return r.name = "YAMLSyntaxError", r.source = e, r.position = n, r;
            }
            function Cs(t1, e) {
                let n = t1.source.range || t1.source.valueRange;
                return Ts(t1.message, e.text, e.transformRange(n));
            }
            function Ms(t1, e, n) {
                return {
                    offset: t1,
                    line: e,
                    column: n
                };
            }
            function ks(t1, e) {
                t1 < 0 ? t1 = 0 : t1 > e.text.length && (t1 = e.text.length);
                let n = e.locator.locationForIndex(t1);
                return Ms(t1, n.line + 1, n.column + 1);
            }
            function vs(t1, e) {
                return V(e.transformOffset(t1.origStart), e.transformOffset(t1.origEnd));
            }
            function Is2(t1) {
                if (!t1.setOrigRanges()) {
                    let e = (n)=>{
                        if (yo(n)) return n.origStart = n.start, n.origEnd = n.end, true;
                        if (Eo(n)) return n.origOffset = n.offset, true;
                    };
                    t1.forEach((n)=>Nn(n, e));
                }
            }
            function Nn(t1, e) {
                if (!(!t1 || typeof t1 != "object") && e(t1) !== true) for (let n of Object.keys(t1)){
                    if (n === "context" || n === "error") continue;
                    let r = t1[n];
                    Array.isArray(r) ? r.forEach((s)=>Nn(s, e)) : Nn(r, e);
                }
            }
            function yo(t1) {
                return typeof t1.start == "number";
            }
            function Eo(t1) {
                return typeof t1.offset == "number";
            }
            function On(t1) {
                if ("children" in t1) {
                    if (t1.children.length === 1) {
                        let e = t1.children[0];
                        if (e.type === "plain" && e.tag === null && e.anchor === null && e.value === "") return t1.children.splice(0, 1), t1;
                    }
                    t1.children.forEach(On);
                }
                return t1;
            }
            function Ln(t1, e, n, r) {
                let s = e(t1);
                return (i)=>{
                    r(s, i) && n(t1, s = i);
                };
            }
            function An(t1) {
                if (t1 === null || !("children" in t1)) return;
                let e = t1.children;
                if (e.forEach(An), t1.type === "document") {
                    let [i, o] = t1.children;
                    i.position.start.offset === i.position.end.offset ? i.position.start = i.position.end = o.position.start : o.position.start.offset === o.position.end.offset && (o.position.start = o.position.end = i.position.end);
                }
                let n = Ln(t1.position, So, wo, Oo), r = Ln(t1.position, bo, No, Lo);
                "endComments" in t1 && t1.endComments.length !== 0 && (n(t1.endComments[0].position.start), r(q(t1.endComments).position.end));
                let s = e.filter((i)=>i !== null);
                if (s.length !== 0) {
                    let i = s[0], o = q(s);
                    n(i.position.start), r(o.position.end), "leadingComments" in i && i.leadingComments.length !== 0 && n(i.leadingComments[0].position.start), "tag" in i && i.tag && n(i.tag.position.start), "anchor" in i && i.anchor && n(i.anchor.position.start), "trailingComment" in o && o.trailingComment && r(o.trailingComment.position.end);
                }
            }
            function So(t1) {
                return t1.start;
            }
            function wo(t1, e) {
                t1.start = e;
            }
            function bo(t1) {
                return t1.end;
            }
            function No(t1, e) {
                t1.end = e;
            }
            function Oo(t1, e) {
                return e.offset < t1.offset;
            }
            function Lo(t1, e) {
                return e.offset > t1.offset;
            }
            var wi = sr(Ei(), 1);
            var G = sr(Si(), 1), Vm = G.default.findPair, Wm = G.default.toJSON, jm = G.default.parseMap, Qm = G.default.parseSeq, Jm = G.default.stringifyNumber, Gm = G.default.stringifyString, Hm = G.default.Type, Va = G.default.YAMLError, Xm = G.default.YAMLReferenceError, er = G.default.YAMLSemanticError, Wa = G.default.YAMLSyntaxError, zm = G.default.YAMLWarning;
            var { Document: bi, parseCST: Ni } = wi.default;
            function Oi(t1) {
                let e = Ni(t1);
                Is2(e);
                let n = e.map((a2)=>new bi({
                        merge: false,
                        keepCstNodes: true
                    }).parse(a2)), r = new Dr(t1), s = [], i = {
                    text: t1,
                    locator: r,
                    comments: s,
                    transformOffset: (a2)=>ks(a2, i),
                    transformRange: (a2)=>vs(a2, i),
                    transformNode: (a2)=>As(a2, i),
                    transformContent: (a2)=>vt(a2, i)
                };
                for (let a2 of n)for (let c of a2.errors)if (!(c instanceof er && c.message === 'Map keys must be unique; "<<" is repeated')) throw Cs(c, i);
                n.forEach((a2)=>ct(a2.cstNode));
                let o = Fr(i.transformRange({
                    origStart: 0,
                    origEnd: i.text.length
                }), n.map(i.transformNode), s);
                return Yr(o), An(o), On(o), o;
            }
            function Qa(t1, e) {
                let n = new SyntaxError(t1 + " (" + e.loc.start.line + ":" + e.loc.start.column + ")");
                return Object.assign(n, e);
            }
            var Li = Qa;
            function Ja(t1) {
                try {
                    let e = Oi(t1);
                    return delete e.comments, e;
                } catch (e) {
                    throw e != null && e.position ? Li(e.message, {
                        loc: e.position,
                        cause: e
                    }) : e;
                }
            }
            var Ga = {
                astFormat: "yaml",
                parse: Ja,
                hasPragma: Sr,
                locStart: Pe,
                locEnd: yr
            };
            var Ha = {
                yaml: Pr
            };
            return Ii(Xa);
        });
    }
});
// ../../node_modules/lodash/lodash.js
var require_lodash = __commonJS({
    "../../node_modules/lodash/lodash.js" (exports, module) {
        (function() {
            var undefined2;
            var VERSION = "4.17.21";
            var LARGE_ARRAY_SIZE = 200;
            var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
            var HASH_UNDEFINED = "__lodash_hash_undefined__";
            var MAX_MEMOIZE_SIZE = 500;
            var PLACEHOLDER = "__lodash_placeholder__";
            var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
            var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
            var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
            var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
            var HOT_COUNT = 800, HOT_SPAN = 16;
            var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
            var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
            var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
            var wrapFlags = [
                [
                    "ary",
                    WRAP_ARY_FLAG
                ],
                [
                    "bind",
                    WRAP_BIND_FLAG
                ],
                [
                    "bindKey",
                    WRAP_BIND_KEY_FLAG
                ],
                [
                    "curry",
                    WRAP_CURRY_FLAG
                ],
                [
                    "curryRight",
                    WRAP_CURRY_RIGHT_FLAG
                ],
                [
                    "flip",
                    WRAP_FLIP_FLAG
                ],
                [
                    "partial",
                    WRAP_PARTIAL_FLAG
                ],
                [
                    "partialRight",
                    WRAP_PARTIAL_RIGHT_FLAG
                ],
                [
                    "rearg",
                    WRAP_REARG_FLAG
                ]
            ];
            var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag2 = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag2 = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
            var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
            var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
            var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
            var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
            var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
            var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
            var reTrimStart = /^\s+/;
            var reWhitespace = /\s/;
            var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
            var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
            var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
            var reEscapeChar = /\\(\\)?/g;
            var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
            var reFlags = /\w*$/;
            var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
            var reIsBinary = /^0b[01]+$/i;
            var reIsHostCtor = /^\[object .+?Constructor\]$/;
            var reIsOctal = /^0o[0-7]+$/i;
            var reIsUint = /^(?:0|[1-9]\d*)$/;
            var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
            var reNoMatch = /($^)/;
            var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
            var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
            var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
            var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [
                rsNonAstral,
                rsRegional,
                rsSurrPair
            ].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [
                rsDingbat,
                rsRegional,
                rsSurrPair
            ].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [
                rsNonAstral + rsCombo + "?",
                rsCombo,
                rsRegional,
                rsSurrPair,
                rsAstral
            ].join("|") + ")";
            var reApos = RegExp(rsApos, "g");
            var reComboMark = RegExp(rsCombo, "g");
            var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
            var reUnicodeWord = RegExp([
                rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [
                    rsBreak,
                    rsUpper,
                    "$"
                ].join("|") + ")",
                rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [
                    rsBreak,
                    rsUpper + rsMiscLower,
                    "$"
                ].join("|") + ")",
                rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
                rsUpper + "+" + rsOptContrUpper,
                rsOrdUpper,
                rsOrdLower,
                rsDigits,
                rsEmoji
            ].join("|"), "g");
            var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
            var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
            var contextProps = [
                "Array",
                "Buffer",
                "DataView",
                "Date",
                "Error",
                "Float32Array",
                "Float64Array",
                "Function",
                "Int8Array",
                "Int16Array",
                "Int32Array",
                "Map",
                "Math",
                "Object",
                "Promise",
                "RegExp",
                "Set",
                "String",
                "Symbol",
                "TypeError",
                "Uint8Array",
                "Uint8ClampedArray",
                "Uint16Array",
                "Uint32Array",
                "WeakMap",
                "_",
                "clearTimeout",
                "isFinite",
                "parseInt",
                "setTimeout"
            ];
            var templateCounter = -1;
            var typedArrayTags = {};
            typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
            typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag2] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
            var cloneableTags = {};
            cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag2] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
            cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
            var deburredLetters = {
                // Latin-1 Supplement block.
                "\xC0": "A",
                "\xC1": "A",
                "\xC2": "A",
                "\xC3": "A",
                "\xC4": "A",
                "\xC5": "A",
                "\xE0": "a",
                "\xE1": "a",
                "\xE2": "a",
                "\xE3": "a",
                "\xE4": "a",
                "\xE5": "a",
                "\xC7": "C",
                "\xE7": "c",
                "\xD0": "D",
                "\xF0": "d",
                "\xC8": "E",
                "\xC9": "E",
                "\xCA": "E",
                "\xCB": "E",
                "\xE8": "e",
                "\xE9": "e",
                "\xEA": "e",
                "\xEB": "e",
                "\xCC": "I",
                "\xCD": "I",
                "\xCE": "I",
                "\xCF": "I",
                "\xEC": "i",
                "\xED": "i",
                "\xEE": "i",
                "\xEF": "i",
                "\xD1": "N",
                "\xF1": "n",
                "\xD2": "O",
                "\xD3": "O",
                "\xD4": "O",
                "\xD5": "O",
                "\xD6": "O",
                "\xD8": "O",
                "\xF2": "o",
                "\xF3": "o",
                "\xF4": "o",
                "\xF5": "o",
                "\xF6": "o",
                "\xF8": "o",
                "\xD9": "U",
                "\xDA": "U",
                "\xDB": "U",
                "\xDC": "U",
                "\xF9": "u",
                "\xFA": "u",
                "\xFB": "u",
                "\xFC": "u",
                "\xDD": "Y",
                "\xFD": "y",
                "\xFF": "y",
                "\xC6": "Ae",
                "\xE6": "ae",
                "\xDE": "Th",
                "\xFE": "th",
                "\xDF": "ss",
                // Latin Extended-A block.
                "\u0100": "A",
                "\u0102": "A",
                "\u0104": "A",
                "\u0101": "a",
                "\u0103": "a",
                "\u0105": "a",
                "\u0106": "C",
                "\u0108": "C",
                "\u010A": "C",
                "\u010C": "C",
                "\u0107": "c",
                "\u0109": "c",
                "\u010B": "c",
                "\u010D": "c",
                "\u010E": "D",
                "\u0110": "D",
                "\u010F": "d",
                "\u0111": "d",
                "\u0112": "E",
                "\u0114": "E",
                "\u0116": "E",
                "\u0118": "E",
                "\u011A": "E",
                "\u0113": "e",
                "\u0115": "e",
                "\u0117": "e",
                "\u0119": "e",
                "\u011B": "e",
                "\u011C": "G",
                "\u011E": "G",
                "\u0120": "G",
                "\u0122": "G",
                "\u011D": "g",
                "\u011F": "g",
                "\u0121": "g",
                "\u0123": "g",
                "\u0124": "H",
                "\u0126": "H",
                "\u0125": "h",
                "\u0127": "h",
                "\u0128": "I",
                "\u012A": "I",
                "\u012C": "I",
                "\u012E": "I",
                "\u0130": "I",
                "\u0129": "i",
                "\u012B": "i",
                "\u012D": "i",
                "\u012F": "i",
                "\u0131": "i",
                "\u0134": "J",
                "\u0135": "j",
                "\u0136": "K",
                "\u0137": "k",
                "\u0138": "k",
                "\u0139": "L",
                "\u013B": "L",
                "\u013D": "L",
                "\u013F": "L",
                "\u0141": "L",
                "\u013A": "l",
                "\u013C": "l",
                "\u013E": "l",
                "\u0140": "l",
                "\u0142": "l",
                "\u0143": "N",
                "\u0145": "N",
                "\u0147": "N",
                "\u014A": "N",
                "\u0144": "n",
                "\u0146": "n",
                "\u0148": "n",
                "\u014B": "n",
                "\u014C": "O",
                "\u014E": "O",
                "\u0150": "O",
                "\u014D": "o",
                "\u014F": "o",
                "\u0151": "o",
                "\u0154": "R",
                "\u0156": "R",
                "\u0158": "R",
                "\u0155": "r",
                "\u0157": "r",
                "\u0159": "r",
                "\u015A": "S",
                "\u015C": "S",
                "\u015E": "S",
                "\u0160": "S",
                "\u015B": "s",
                "\u015D": "s",
                "\u015F": "s",
                "\u0161": "s",
                "\u0162": "T",
                "\u0164": "T",
                "\u0166": "T",
                "\u0163": "t",
                "\u0165": "t",
                "\u0167": "t",
                "\u0168": "U",
                "\u016A": "U",
                "\u016C": "U",
                "\u016E": "U",
                "\u0170": "U",
                "\u0172": "U",
                "\u0169": "u",
                "\u016B": "u",
                "\u016D": "u",
                "\u016F": "u",
                "\u0171": "u",
                "\u0173": "u",
                "\u0174": "W",
                "\u0175": "w",
                "\u0176": "Y",
                "\u0177": "y",
                "\u0178": "Y",
                "\u0179": "Z",
                "\u017B": "Z",
                "\u017D": "Z",
                "\u017A": "z",
                "\u017C": "z",
                "\u017E": "z",
                "\u0132": "IJ",
                "\u0133": "ij",
                "\u0152": "Oe",
                "\u0153": "oe",
                "\u0149": "'n",
                "\u017F": "s"
            };
            var htmlEscapes = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#39;"
            };
            var htmlUnescapes = {
                "&amp;": "&",
                "&lt;": "<",
                "&gt;": ">",
                "&quot;": '"',
                "&#39;": "'"
            };
            var stringEscapes = {
                "\\": "\\",
                "'": "'",
                "\n": "n",
                "\r": "r",
                "\u2028": "u2028",
                "\u2029": "u2029"
            };
            var freeParseFloat = parseFloat, freeParseInt = parseInt;
            var freeGlobal = typeof __webpack_require__.g == "object" && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;
            var freeSelf = typeof self == "object" && self && self.Object === Object && self;
            var root = freeGlobal || freeSelf || Function("return this")();
            var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
            var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
            var moduleExports = freeModule && freeModule.exports === freeExports;
            var freeProcess = moduleExports && freeGlobal.process;
            var nodeUtil = function() {
                try {
                    var types = freeModule && freeModule.require && freeModule.require("util").types;
                    if (types) {
                        return types;
                    }
                    return freeProcess && freeProcess.binding && freeProcess.binding("util");
                } catch (e) {}
            }();
            var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
            function apply(func, thisArg, args) {
                switch(args.length){
                    case 0:
                        return func.call(thisArg);
                    case 1:
                        return func.call(thisArg, args[0]);
                    case 2:
                        return func.call(thisArg, args[0], args[1]);
                    case 3:
                        return func.call(thisArg, args[0], args[1], args[2]);
                }
                return func.apply(thisArg, args);
            }
            function arrayAggregator(array, setter, iteratee, accumulator) {
                var index = -1, length = array == null ? 0 : array.length;
                while(++index < length){
                    var value1 = array[index];
                    setter(accumulator, value1, iteratee(value1), array);
                }
                return accumulator;
            }
            function arrayEach(array, iteratee) {
                var index = -1, length = array == null ? 0 : array.length;
                while(++index < length){
                    if (iteratee(array[index], index, array) === false) {
                        break;
                    }
                }
                return array;
            }
            function arrayEachRight(array, iteratee) {
                var length = array == null ? 0 : array.length;
                while(length--){
                    if (iteratee(array[length], length, array) === false) {
                        break;
                    }
                }
                return array;
            }
            function arrayEvery(array, predicate) {
                var index = -1, length = array == null ? 0 : array.length;
                while(++index < length){
                    if (!predicate(array[index], index, array)) {
                        return false;
                    }
                }
                return true;
            }
            function arrayFilter(array, predicate) {
                var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
                while(++index < length){
                    var value1 = array[index];
                    if (predicate(value1, index, array)) {
                        result[resIndex++] = value1;
                    }
                }
                return result;
            }
            function arrayIncludes(array, value1) {
                var length = array == null ? 0 : array.length;
                return !!length && baseIndexOf(array, value1, 0) > -1;
            }
            function arrayIncludesWith(array, value1, comparator) {
                var index = -1, length = array == null ? 0 : array.length;
                while(++index < length){
                    if (comparator(value1, array[index])) {
                        return true;
                    }
                }
                return false;
            }
            function arrayMap(array, iteratee) {
                var index = -1, length = array == null ? 0 : array.length, result = Array(length);
                while(++index < length){
                    result[index] = iteratee(array[index], index, array);
                }
                return result;
            }
            function arrayPush(array, values) {
                var index = -1, length = values.length, offset = array.length;
                while(++index < length){
                    array[offset + index] = values[index];
                }
                return array;
            }
            function arrayReduce(array, iteratee, accumulator, initAccum) {
                var index = -1, length = array == null ? 0 : array.length;
                if (initAccum && length) {
                    accumulator = array[++index];
                }
                while(++index < length){
                    accumulator = iteratee(accumulator, array[index], index, array);
                }
                return accumulator;
            }
            function arrayReduceRight(array, iteratee, accumulator, initAccum) {
                var length = array == null ? 0 : array.length;
                if (initAccum && length) {
                    accumulator = array[--length];
                }
                while(length--){
                    accumulator = iteratee(accumulator, array[length], length, array);
                }
                return accumulator;
            }
            function arraySome(array, predicate) {
                var index = -1, length = array == null ? 0 : array.length;
                while(++index < length){
                    if (predicate(array[index], index, array)) {
                        return true;
                    }
                }
                return false;
            }
            var asciiSize = baseProperty("length");
            function asciiToArray(string2) {
                return string2.split("");
            }
            function asciiWords(string2) {
                return string2.match(reAsciiWord) || [];
            }
            function baseFindKey(collection, predicate, eachFunc) {
                var result;
                eachFunc(collection, function(value1, key, collection2) {
                    if (predicate(value1, key, collection2)) {
                        result = key;
                        return false;
                    }
                });
                return result;
            }
            function baseFindIndex(array, predicate, fromIndex, fromRight) {
                var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
                while(fromRight ? index-- : ++index < length){
                    if (predicate(array[index], index, array)) {
                        return index;
                    }
                }
                return -1;
            }
            function baseIndexOf(array, value1, fromIndex) {
                return value1 === value1 ? strictIndexOf(array, value1, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
            }
            function baseIndexOfWith(array, value1, fromIndex, comparator) {
                var index = fromIndex - 1, length = array.length;
                while(++index < length){
                    if (comparator(array[index], value1)) {
                        return index;
                    }
                }
                return -1;
            }
            function baseIsNaN(value1) {
                return value1 !== value1;
            }
            function baseMean(array, iteratee) {
                var length = array == null ? 0 : array.length;
                return length ? baseSum(array, iteratee) / length : NAN;
            }
            function baseProperty(key) {
                return function(object) {
                    return object == null ? undefined2 : object[key];
                };
            }
            function basePropertyOf(object) {
                return function(key) {
                    return object == null ? undefined2 : object[key];
                };
            }
            function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                eachFunc(collection, function(value1, index, collection2) {
                    accumulator = initAccum ? (initAccum = false, value1) : iteratee(accumulator, value1, index, collection2);
                });
                return accumulator;
            }
            function baseSortBy(array, comparer) {
                var length = array.length;
                array.sort(comparer);
                while(length--){
                    array[length] = array[length].value;
                }
                return array;
            }
            function baseSum(array, iteratee) {
                var result, index = -1, length = array.length;
                while(++index < length){
                    var current = iteratee(array[index]);
                    if (current !== undefined2) {
                        result = result === undefined2 ? current : result + current;
                    }
                }
                return result;
            }
            function baseTimes(n, iteratee) {
                var index = -1, result = Array(n);
                while(++index < n){
                    result[index] = iteratee(index);
                }
                return result;
            }
            function baseToPairs(object, props) {
                return arrayMap(props, function(key) {
                    return [
                        key,
                        object[key]
                    ];
                });
            }
            function baseTrim(string2) {
                return string2 ? string2.slice(0, trimmedEndIndex(string2) + 1).replace(reTrimStart, "") : string2;
            }
            function baseUnary(func) {
                return function(value1) {
                    return func(value1);
                };
            }
            function baseValues(object, props) {
                return arrayMap(props, function(key) {
                    return object[key];
                });
            }
            function cacheHas(cache, key) {
                return cache.has(key);
            }
            function charsStartIndex(strSymbols, chrSymbols) {
                var index = -1, length = strSymbols.length;
                while(++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1){}
                return index;
            }
            function charsEndIndex(strSymbols, chrSymbols) {
                var index = strSymbols.length;
                while(index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1){}
                return index;
            }
            function countHolders(array, placeholder) {
                var length = array.length, result = 0;
                while(length--){
                    if (array[length] === placeholder) {
                        ++result;
                    }
                }
                return result;
            }
            var deburrLetter = basePropertyOf(deburredLetters);
            var escapeHtmlChar = basePropertyOf(htmlEscapes);
            function escapeStringChar(chr) {
                return "\\" + stringEscapes[chr];
            }
            function getValue(object, key) {
                return object == null ? undefined2 : object[key];
            }
            function hasUnicode(string2) {
                return reHasUnicode.test(string2);
            }
            function hasUnicodeWord(string2) {
                return reHasUnicodeWord.test(string2);
            }
            function iteratorToArray(iterator) {
                var data, result = [];
                while(!(data = iterator.next()).done){
                    result.push(data.value);
                }
                return result;
            }
            function mapToArray(map2) {
                var index = -1, result = Array(map2.size);
                map2.forEach(function(value1, key) {
                    result[++index] = [
                        key,
                        value1
                    ];
                });
                return result;
            }
            function overArg(func, transform) {
                return function(arg) {
                    return func(transform(arg));
                };
            }
            function replaceHolders(array, placeholder) {
                var index = -1, length = array.length, resIndex = 0, result = [];
                while(++index < length){
                    var value1 = array[index];
                    if (value1 === placeholder || value1 === PLACEHOLDER) {
                        array[index] = PLACEHOLDER;
                        result[resIndex++] = index;
                    }
                }
                return result;
            }
            function setToArray(set2) {
                var index = -1, result = Array(set2.size);
                set2.forEach(function(value1) {
                    result[++index] = value1;
                });
                return result;
            }
            function setToPairs(set2) {
                var index = -1, result = Array(set2.size);
                set2.forEach(function(value1) {
                    result[++index] = [
                        value1,
                        value1
                    ];
                });
                return result;
            }
            function strictIndexOf(array, value1, fromIndex) {
                var index = fromIndex - 1, length = array.length;
                while(++index < length){
                    if (array[index] === value1) {
                        return index;
                    }
                }
                return -1;
            }
            function strictLastIndexOf(array, value1, fromIndex) {
                var index = fromIndex + 1;
                while(index--){
                    if (array[index] === value1) {
                        return index;
                    }
                }
                return index;
            }
            function stringSize(string2) {
                return hasUnicode(string2) ? unicodeSize(string2) : asciiSize(string2);
            }
            function stringToArray(string2) {
                return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2);
            }
            function trimmedEndIndex(string2) {
                var index = string2.length;
                while(index-- && reWhitespace.test(string2.charAt(index))){}
                return index;
            }
            var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
            function unicodeSize(string2) {
                var result = reUnicode.lastIndex = 0;
                while(reUnicode.test(string2)){
                    ++result;
                }
                return result;
            }
            function unicodeToArray(string2) {
                return string2.match(reUnicode) || [];
            }
            function unicodeWords(string2) {
                return string2.match(reUnicodeWord) || [];
            }
            var runInContext = function runInContext2(context) {
                context = context == null ? root : _2.defaults(root.Object(), context, _2.pick(root, contextProps));
                var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
                var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
                var coreJsData = context["__core-js_shared__"];
                var funcToString = funcProto.toString;
                var hasOwnProperty = objectProto.hasOwnProperty;
                var idCounter3 = 0;
                var maskSrcKey = function() {
                    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
                    return uid ? "Symbol(src)_1." + uid : "";
                }();
                var nativeObjectToString = objectProto.toString;
                var objectCtorString = funcToString.call(Object2);
                var oldDash = root._;
                var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
                var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
                var defineProperty = function() {
                    try {
                        var func = getNative(Object2, "defineProperty");
                        func({}, "", {});
                        return func;
                    } catch (e) {}
                }();
                var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
                var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
                var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
                var metaMap = WeakMap2 && new WeakMap2();
                var realNames = {};
                var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
                var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
                function lodash(value1) {
                    if (isObjectLike(value1) && !isArray(value1) && !(value1 instanceof LazyWrapper)) {
                        if (value1 instanceof LodashWrapper) {
                            return value1;
                        }
                        if (hasOwnProperty.call(value1, "__wrapped__")) {
                            return wrapperClone(value1);
                        }
                    }
                    return new LodashWrapper(value1);
                }
                var baseCreate = /* @__PURE__ */ function() {
                    function object() {}
                    return function(proto) {
                        if (!isObject(proto)) {
                            return {};
                        }
                        if (objectCreate) {
                            return objectCreate(proto);
                        }
                        object.prototype = proto;
                        var result2 = new object();
                        object.prototype = undefined2;
                        return result2;
                    };
                }();
                function baseLodash() {}
                function LodashWrapper(value1, chainAll) {
                    this.__wrapped__ = value1;
                    this.__actions__ = [];
                    this.__chain__ = !!chainAll;
                    this.__index__ = 0;
                    this.__values__ = undefined2;
                }
                lodash.templateSettings = {
                    /**
           * Used to detect `data` property values to be HTML-escaped.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */ "escape": reEscape,
                    /**
           * Used to detect code to be evaluated.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */ "evaluate": reEvaluate,
                    /**
           * Used to detect `data` property values to inject.
           *
           * @memberOf _.templateSettings
           * @type {RegExp}
           */ "interpolate": reInterpolate,
                    /**
           * Used to reference the data object in the template text.
           *
           * @memberOf _.templateSettings
           * @type {string}
           */ "variable": "",
                    /**
           * Used to import variables into the compiled template.
           *
           * @memberOf _.templateSettings
           * @type {Object}
           */ "imports": {
                        /**
             * A reference to the `lodash` function.
             *
             * @memberOf _.templateSettings.imports
             * @type {Function}
             */ "_": lodash
                    }
                };
                lodash.prototype = baseLodash.prototype;
                lodash.prototype.constructor = lodash;
                LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                LodashWrapper.prototype.constructor = LodashWrapper;
                function LazyWrapper(value1) {
                    this.__wrapped__ = value1;
                    this.__actions__ = [];
                    this.__dir__ = 1;
                    this.__filtered__ = false;
                    this.__iteratees__ = [];
                    this.__takeCount__ = MAX_ARRAY_LENGTH;
                    this.__views__ = [];
                }
                function lazyClone() {
                    var result2 = new LazyWrapper(this.__wrapped__);
                    result2.__actions__ = copyArray(this.__actions__);
                    result2.__dir__ = this.__dir__;
                    result2.__filtered__ = this.__filtered__;
                    result2.__iteratees__ = copyArray(this.__iteratees__);
                    result2.__takeCount__ = this.__takeCount__;
                    result2.__views__ = copyArray(this.__views__);
                    return result2;
                }
                function lazyReverse() {
                    if (this.__filtered__) {
                        var result2 = new LazyWrapper(this);
                        result2.__dir__ = -1;
                        result2.__filtered__ = true;
                    } else {
                        result2 = this.clone();
                        result2.__dir__ *= -1;
                    }
                    return result2;
                }
                function lazyValue() {
                    var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
                    if (!isArr || !isRight && arrLength == length && takeCount == length) {
                        return baseWrapperValue(array, this.__actions__);
                    }
                    var result2 = [];
                    outer: while(length-- && resIndex < takeCount){
                        index += dir;
                        var iterIndex = -1, value1 = array[index];
                        while(++iterIndex < iterLength){
                            var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value1);
                            if (type == LAZY_MAP_FLAG) {
                                value1 = computed;
                            } else if (!computed) {
                                if (type == LAZY_FILTER_FLAG) {
                                    continue outer;
                                } else {
                                    break outer;
                                }
                            }
                        }
                        result2[resIndex++] = value1;
                    }
                    return result2;
                }
                LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                LazyWrapper.prototype.constructor = LazyWrapper;
                function Hash(entries) {
                    var index = -1, length = entries == null ? 0 : entries.length;
                    this.clear();
                    while(++index < length){
                        var entry = entries[index];
                        this.set(entry[0], entry[1]);
                    }
                }
                function hashClear() {
                    this.__data__ = nativeCreate ? nativeCreate(null) : {};
                    this.size = 0;
                }
                function hashDelete(key) {
                    var result2 = this.has(key) && delete this.__data__[key];
                    this.size -= result2 ? 1 : 0;
                    return result2;
                }
                function hashGet(key) {
                    var data = this.__data__;
                    if (nativeCreate) {
                        var result2 = data[key];
                        return result2 === HASH_UNDEFINED ? undefined2 : result2;
                    }
                    return hasOwnProperty.call(data, key) ? data[key] : undefined2;
                }
                function hashHas(key) {
                    var data = this.__data__;
                    return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
                }
                function hashSet(key, value1) {
                    var data = this.__data__;
                    this.size += this.has(key) ? 0 : 1;
                    data[key] = nativeCreate && value1 === undefined2 ? HASH_UNDEFINED : value1;
                    return this;
                }
                Hash.prototype.clear = hashClear;
                Hash.prototype["delete"] = hashDelete;
                Hash.prototype.get = hashGet;
                Hash.prototype.has = hashHas;
                Hash.prototype.set = hashSet;
                function ListCache(entries) {
                    var index = -1, length = entries == null ? 0 : entries.length;
                    this.clear();
                    while(++index < length){
                        var entry = entries[index];
                        this.set(entry[0], entry[1]);
                    }
                }
                function listCacheClear() {
                    this.__data__ = [];
                    this.size = 0;
                }
                function listCacheDelete(key) {
                    var data = this.__data__, index = assocIndexOf(data, key);
                    if (index < 0) {
                        return false;
                    }
                    var lastIndex = data.length - 1;
                    if (index == lastIndex) {
                        data.pop();
                    } else {
                        splice.call(data, index, 1);
                    }
                    --this.size;
                    return true;
                }
                function listCacheGet(key) {
                    var data = this.__data__, index = assocIndexOf(data, key);
                    return index < 0 ? undefined2 : data[index][1];
                }
                function listCacheHas(key) {
                    return assocIndexOf(this.__data__, key) > -1;
                }
                function listCacheSet(key, value1) {
                    var data = this.__data__, index = assocIndexOf(data, key);
                    if (index < 0) {
                        ++this.size;
                        data.push([
                            key,
                            value1
                        ]);
                    } else {
                        data[index][1] = value1;
                    }
                    return this;
                }
                ListCache.prototype.clear = listCacheClear;
                ListCache.prototype["delete"] = listCacheDelete;
                ListCache.prototype.get = listCacheGet;
                ListCache.prototype.has = listCacheHas;
                ListCache.prototype.set = listCacheSet;
                function MapCache(entries) {
                    var index = -1, length = entries == null ? 0 : entries.length;
                    this.clear();
                    while(++index < length){
                        var entry = entries[index];
                        this.set(entry[0], entry[1]);
                    }
                }
                function mapCacheClear() {
                    this.size = 0;
                    this.__data__ = {
                        "hash": new Hash(),
                        "map": new (Map2 || ListCache)(),
                        "string": new Hash()
                    };
                }
                function mapCacheDelete(key) {
                    var result2 = getMapData(this, key)["delete"](key);
                    this.size -= result2 ? 1 : 0;
                    return result2;
                }
                function mapCacheGet(key) {
                    return getMapData(this, key).get(key);
                }
                function mapCacheHas(key) {
                    return getMapData(this, key).has(key);
                }
                function mapCacheSet(key, value1) {
                    var data = getMapData(this, key), size2 = data.size;
                    data.set(key, value1);
                    this.size += data.size == size2 ? 0 : 1;
                    return this;
                }
                MapCache.prototype.clear = mapCacheClear;
                MapCache.prototype["delete"] = mapCacheDelete;
                MapCache.prototype.get = mapCacheGet;
                MapCache.prototype.has = mapCacheHas;
                MapCache.prototype.set = mapCacheSet;
                function SetCache(values2) {
                    var index = -1, length = values2 == null ? 0 : values2.length;
                    this.__data__ = new MapCache();
                    while(++index < length){
                        this.add(values2[index]);
                    }
                }
                function setCacheAdd(value1) {
                    this.__data__.set(value1, HASH_UNDEFINED);
                    return this;
                }
                function setCacheHas(value1) {
                    return this.__data__.has(value1);
                }
                SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                SetCache.prototype.has = setCacheHas;
                function Stack(entries) {
                    var data = this.__data__ = new ListCache(entries);
                    this.size = data.size;
                }
                function stackClear() {
                    this.__data__ = new ListCache();
                    this.size = 0;
                }
                function stackDelete(key) {
                    var data = this.__data__, result2 = data["delete"](key);
                    this.size = data.size;
                    return result2;
                }
                function stackGet(key) {
                    return this.__data__.get(key);
                }
                function stackHas(key) {
                    return this.__data__.has(key);
                }
                function stackSet(key, value1) {
                    var data = this.__data__;
                    if (data instanceof ListCache) {
                        var pairs2 = data.__data__;
                        if (!Map2 || pairs2.length < LARGE_ARRAY_SIZE - 1) {
                            pairs2.push([
                                key,
                                value1
                            ]);
                            this.size = ++data.size;
                            return this;
                        }
                        data = this.__data__ = new MapCache(pairs2);
                    }
                    data.set(key, value1);
                    this.size = data.size;
                    return this;
                }
                Stack.prototype.clear = stackClear;
                Stack.prototype["delete"] = stackDelete;
                Stack.prototype.get = stackGet;
                Stack.prototype.has = stackHas;
                Stack.prototype.set = stackSet;
                function arrayLikeKeys(value1, inherited) {
                    var isArr = isArray(value1), isArg = !isArr && isArguments(value1), isBuff = !isArr && !isArg && isBuffer(value1), isType = !isArr && !isArg && !isBuff && isTypedArray(value1), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value1.length, String2) : [], length = result2.length;
                    for(var key in value1){
                        if ((inherited || hasOwnProperty.call(value1, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
                        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
                        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
                        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
                        isIndex(key, length)))) {
                            result2.push(key);
                        }
                    }
                    return result2;
                }
                function arraySample(array) {
                    var length = array.length;
                    return length ? array[baseRandom(0, length - 1)] : undefined2;
                }
                function arraySampleSize(array, n) {
                    return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
                }
                function arrayShuffle(array) {
                    return shuffleSelf(copyArray(array));
                }
                function assignMergeValue(object, key, value1) {
                    if (value1 !== undefined2 && !eq(object[key], value1) || value1 === undefined2 && !(key in object)) {
                        baseAssignValue(object, key, value1);
                    }
                }
                function assignValue(object, key, value1) {
                    var objValue = object[key];
                    if (!(hasOwnProperty.call(object, key) && eq(objValue, value1)) || value1 === undefined2 && !(key in object)) {
                        baseAssignValue(object, key, value1);
                    }
                }
                function assocIndexOf(array, key) {
                    var length = array.length;
                    while(length--){
                        if (eq(array[length][0], key)) {
                            return length;
                        }
                    }
                    return -1;
                }
                function baseAggregator(collection, setter, iteratee2, accumulator) {
                    baseEach(collection, function(value1, key, collection2) {
                        setter(accumulator, value1, iteratee2(value1), collection2);
                    });
                    return accumulator;
                }
                function baseAssign(object, source) {
                    return object && copyObject(source, keys(source), object);
                }
                function baseAssignIn(object, source) {
                    return object && copyObject(source, keysIn(source), object);
                }
                function baseAssignValue(object, key, value1) {
                    if (key == "__proto__" && defineProperty) {
                        defineProperty(object, key, {
                            "configurable": true,
                            "enumerable": true,
                            "value": value1,
                            "writable": true
                        });
                    } else {
                        object[key] = value1;
                    }
                }
                function baseAt(object, paths) {
                    var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
                    while(++index < length){
                        result2[index] = skip ? undefined2 : get(object, paths[index]);
                    }
                    return result2;
                }
                function baseClamp(number, lower, upper) {
                    if (number === number) {
                        if (upper !== undefined2) {
                            number = number <= upper ? number : upper;
                        }
                        if (lower !== undefined2) {
                            number = number >= lower ? number : lower;
                        }
                    }
                    return number;
                }
                function baseClone(value1, bitmask, customizer, key, object, stack) {
                    var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
                    if (customizer) {
                        result2 = object ? customizer(value1, key, object, stack) : customizer(value1);
                    }
                    if (result2 !== undefined2) {
                        return result2;
                    }
                    if (!isObject(value1)) {
                        return value1;
                    }
                    var isArr = isArray(value1);
                    if (isArr) {
                        result2 = initCloneArray(value1);
                        if (!isDeep) {
                            return copyArray(value1, result2);
                        }
                    } else {
                        var tag = getTag(value1), isFunc = tag == funcTag || tag == genTag;
                        if (isBuffer(value1)) {
                            return cloneBuffer(value1, isDeep);
                        }
                        if (tag == objectTag || tag == argsTag || isFunc && !object) {
                            result2 = isFlat || isFunc ? {} : initCloneObject(value1);
                            if (!isDeep) {
                                return isFlat ? copySymbolsIn(value1, baseAssignIn(result2, value1)) : copySymbols(value1, baseAssign(result2, value1));
                            }
                        } else {
                            if (!cloneableTags[tag]) {
                                return object ? value1 : {};
                            }
                            result2 = initCloneByTag(value1, tag, isDeep);
                        }
                    }
                    stack || (stack = new Stack());
                    var stacked = stack.get(value1);
                    if (stacked) {
                        return stacked;
                    }
                    stack.set(value1, result2);
                    if (isSet(value1)) {
                        value1.forEach(function(subValue) {
                            result2.add(baseClone(subValue, bitmask, customizer, subValue, value1, stack));
                        });
                    } else if (isMap2(value1)) {
                        value1.forEach(function(subValue, key2) {
                            result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value1, stack));
                        });
                    }
                    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
                    var props = isArr ? undefined2 : keysFunc(value1);
                    arrayEach(props || value1, function(subValue, key2) {
                        if (props) {
                            key2 = subValue;
                            subValue = value1[key2];
                        }
                        assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value1, stack));
                    });
                    return result2;
                }
                function baseConforms(source) {
                    var props = keys(source);
                    return function(object) {
                        return baseConformsTo(object, source, props);
                    };
                }
                function baseConformsTo(object, source, props) {
                    var length = props.length;
                    if (object == null) {
                        return !length;
                    }
                    object = Object2(object);
                    while(length--){
                        var key = props[length], predicate = source[key], value1 = object[key];
                        if (value1 === undefined2 && !(key in object) || !predicate(value1)) {
                            return false;
                        }
                    }
                    return true;
                }
                function baseDelay(func, wait, args) {
                    if (typeof func != "function") {
                        throw new TypeError2(FUNC_ERROR_TEXT);
                    }
                    return setTimeout2(function() {
                        func.apply(undefined2, args);
                    }, wait);
                }
                function baseDifference(array, values2, iteratee2, comparator) {
                    var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
                    if (!length) {
                        return result2;
                    }
                    if (iteratee2) {
                        values2 = arrayMap(values2, baseUnary(iteratee2));
                    }
                    if (comparator) {
                        includes2 = arrayIncludesWith;
                        isCommon = false;
                    } else if (values2.length >= LARGE_ARRAY_SIZE) {
                        includes2 = cacheHas;
                        isCommon = false;
                        values2 = new SetCache(values2);
                    }
                    outer: while(++index < length){
                        var value1 = array[index], computed = iteratee2 == null ? value1 : iteratee2(value1);
                        value1 = comparator || value1 !== 0 ? value1 : 0;
                        if (isCommon && computed === computed) {
                            var valuesIndex = valuesLength;
                            while(valuesIndex--){
                                if (values2[valuesIndex] === computed) {
                                    continue outer;
                                }
                            }
                            result2.push(value1);
                        } else if (!includes2(values2, computed, comparator)) {
                            result2.push(value1);
                        }
                    }
                    return result2;
                }
                var baseEach = createBaseEach(baseForOwn);
                var baseEachRight = createBaseEach(baseForOwnRight, true);
                function baseEvery(collection, predicate) {
                    var result2 = true;
                    baseEach(collection, function(value1, index, collection2) {
                        result2 = !!predicate(value1, index, collection2);
                        return result2;
                    });
                    return result2;
                }
                function baseExtremum(array, iteratee2, comparator) {
                    var index = -1, length = array.length;
                    while(++index < length){
                        var value1 = array[index], current = iteratee2(value1);
                        if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                            var computed = current, result2 = value1;
                        }
                    }
                    return result2;
                }
                function baseFill(array, value1, start, end) {
                    var length = array.length;
                    start = toInteger(start);
                    if (start < 0) {
                        start = -start > length ? 0 : length + start;
                    }
                    end = end === undefined2 || end > length ? length : toInteger(end);
                    if (end < 0) {
                        end += length;
                    }
                    end = start > end ? 0 : toLength(end);
                    while(start < end){
                        array[start++] = value1;
                    }
                    return array;
                }
                function baseFilter(collection, predicate) {
                    var result2 = [];
                    baseEach(collection, function(value1, index, collection2) {
                        if (predicate(value1, index, collection2)) {
                            result2.push(value1);
                        }
                    });
                    return result2;
                }
                function baseFlatten(array, depth, predicate, isStrict, result2) {
                    var index = -1, length = array.length;
                    predicate || (predicate = isFlattenable);
                    result2 || (result2 = []);
                    while(++index < length){
                        var value1 = array[index];
                        if (depth > 0 && predicate(value1)) {
                            if (depth > 1) {
                                baseFlatten(value1, depth - 1, predicate, isStrict, result2);
                            } else {
                                arrayPush(result2, value1);
                            }
                        } else if (!isStrict) {
                            result2[result2.length] = value1;
                        }
                    }
                    return result2;
                }
                var baseFor = createBaseFor();
                var baseForRight = createBaseFor(true);
                function baseForOwn(object, iteratee2) {
                    return object && baseFor(object, iteratee2, keys);
                }
                function baseForOwnRight(object, iteratee2) {
                    return object && baseForRight(object, iteratee2, keys);
                }
                function baseFunctions(object, props) {
                    return arrayFilter(props, function(key) {
                        return isFunction(object[key]);
                    });
                }
                function baseGet(object, path5) {
                    path5 = castPath(path5, object);
                    var index = 0, length = path5.length;
                    while(object != null && index < length){
                        object = object[toKey(path5[index++])];
                    }
                    return index && index == length ? object : undefined2;
                }
                function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                    var result2 = keysFunc(object);
                    return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
                }
                function baseGetTag(value1) {
                    if (value1 == null) {
                        return value1 === undefined2 ? undefinedTag : nullTag2;
                    }
                    return symToStringTag && symToStringTag in Object2(value1) ? getRawTag(value1) : objectToString(value1);
                }
                function baseGt(value1, other) {
                    return value1 > other;
                }
                function baseHas(object, key) {
                    return object != null && hasOwnProperty.call(object, key);
                }
                function baseHasIn(object, key) {
                    return object != null && key in Object2(object);
                }
                function baseInRange(number, start, end) {
                    return number >= nativeMin(start, end) && number < nativeMax(start, end);
                }
                function baseIntersection(arrays, iteratee2, comparator) {
                    var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
                    while(othIndex--){
                        var array = arrays[othIndex];
                        if (othIndex && iteratee2) {
                            array = arrayMap(array, baseUnary(iteratee2));
                        }
                        maxLength = nativeMin(array.length, maxLength);
                        caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
                    }
                    array = arrays[0];
                    var index = -1, seen = caches[0];
                    outer: while(++index < length && result2.length < maxLength){
                        var value1 = array[index], computed = iteratee2 ? iteratee2(value1) : value1;
                        value1 = comparator || value1 !== 0 ? value1 : 0;
                        if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                            othIndex = othLength;
                            while(--othIndex){
                                var cache = caches[othIndex];
                                if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                                    continue outer;
                                }
                            }
                            if (seen) {
                                seen.push(computed);
                            }
                            result2.push(value1);
                        }
                    }
                    return result2;
                }
                function baseInverter(object, setter, iteratee2, accumulator) {
                    baseForOwn(object, function(value1, key, object2) {
                        setter(accumulator, iteratee2(value1), key, object2);
                    });
                    return accumulator;
                }
                function baseInvoke(object, path5, args) {
                    path5 = castPath(path5, object);
                    object = parent(object, path5);
                    var func = object == null ? object : object[toKey(last(path5))];
                    return func == null ? undefined2 : apply(func, object, args);
                }
                function baseIsArguments(value1) {
                    return isObjectLike(value1) && baseGetTag(value1) == argsTag;
                }
                function baseIsArrayBuffer(value1) {
                    return isObjectLike(value1) && baseGetTag(value1) == arrayBufferTag;
                }
                function baseIsDate(value1) {
                    return isObjectLike(value1) && baseGetTag(value1) == dateTag;
                }
                function baseIsEqual(value1, other, bitmask, customizer, stack) {
                    if (value1 === other) {
                        return true;
                    }
                    if (value1 == null || other == null || !isObjectLike(value1) && !isObjectLike(other)) {
                        return value1 !== value1 && other !== other;
                    }
                    return baseIsEqualDeep(value1, other, bitmask, customizer, baseIsEqual, stack);
                }
                function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                    var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
                    objTag = objTag == argsTag ? objectTag : objTag;
                    othTag = othTag == argsTag ? objectTag : othTag;
                    var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
                    if (isSameTag && isBuffer(object)) {
                        if (!isBuffer(other)) {
                            return false;
                        }
                        objIsArr = true;
                        objIsObj = false;
                    }
                    if (isSameTag && !objIsObj) {
                        stack || (stack = new Stack());
                        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                    }
                    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
                        if (objIsWrapped || othIsWrapped) {
                            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                            stack || (stack = new Stack());
                            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                        }
                    }
                    if (!isSameTag) {
                        return false;
                    }
                    stack || (stack = new Stack());
                    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
                }
                function baseIsMap(value1) {
                    return isObjectLike(value1) && getTag(value1) == mapTag;
                }
                function baseIsMatch(object, source, matchData, customizer) {
                    var index = matchData.length, length = index, noCustomizer = !customizer;
                    if (object == null) {
                        return !length;
                    }
                    object = Object2(object);
                    while(index--){
                        var data = matchData[index];
                        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                            return false;
                        }
                    }
                    while(++index < length){
                        data = matchData[index];
                        var key = data[0], objValue = object[key], srcValue = data[1];
                        if (noCustomizer && data[2]) {
                            if (objValue === undefined2 && !(key in object)) {
                                return false;
                            }
                        } else {
                            var stack = new Stack();
                            if (customizer) {
                                var result2 = customizer(objValue, srcValue, key, object, source, stack);
                            }
                            if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                                return false;
                            }
                        }
                    }
                    return true;
                }
                function baseIsNative(value1) {
                    if (!isObject(value1) || isMasked(value1)) {
                        return false;
                    }
                    var pattern = isFunction(value1) ? reIsNative : reIsHostCtor;
                    return pattern.test(toSource(value1));
                }
                function baseIsRegExp(value1) {
                    return isObjectLike(value1) && baseGetTag(value1) == regexpTag;
                }
                function baseIsSet(value1) {
                    return isObjectLike(value1) && getTag(value1) == setTag;
                }
                function baseIsTypedArray(value1) {
                    return isObjectLike(value1) && isLength(value1.length) && !!typedArrayTags[baseGetTag(value1)];
                }
                function baseIteratee(value1) {
                    if (typeof value1 == "function") {
                        return value1;
                    }
                    if (value1 == null) {
                        return identity;
                    }
                    if (typeof value1 == "object") {
                        return isArray(value1) ? baseMatchesProperty(value1[0], value1[1]) : baseMatches(value1);
                    }
                    return property(value1);
                }
                function baseKeys(object) {
                    if (!isPrototype(object)) {
                        return nativeKeys(object);
                    }
                    var result2 = [];
                    for(var key in Object2(object)){
                        if (hasOwnProperty.call(object, key) && key != "constructor") {
                            result2.push(key);
                        }
                    }
                    return result2;
                }
                function baseKeysIn(object) {
                    if (!isObject(object)) {
                        return nativeKeysIn(object);
                    }
                    var isProto = isPrototype(object), result2 = [];
                    for(var key in object){
                        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
                            result2.push(key);
                        }
                    }
                    return result2;
                }
                function baseLt(value1, other) {
                    return value1 < other;
                }
                function baseMap(collection, iteratee2) {
                    var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
                    baseEach(collection, function(value1, key, collection2) {
                        result2[++index] = iteratee2(value1, key, collection2);
                    });
                    return result2;
                }
                function baseMatches(source) {
                    var matchData = getMatchData(source);
                    if (matchData.length == 1 && matchData[0][2]) {
                        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                    }
                    return function(object) {
                        return object === source || baseIsMatch(object, source, matchData);
                    };
                }
                function baseMatchesProperty(path5, srcValue) {
                    if (isKey(path5) && isStrictComparable(srcValue)) {
                        return matchesStrictComparable(toKey(path5), srcValue);
                    }
                    return function(object) {
                        var objValue = get(object, path5);
                        return objValue === undefined2 && objValue === srcValue ? hasIn(object, path5) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                    };
                }
                function baseMerge(object, source, srcIndex, customizer, stack) {
                    if (object === source) {
                        return;
                    }
                    baseFor(source, function(srcValue, key) {
                        stack || (stack = new Stack());
                        if (isObject(srcValue)) {
                            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                        } else {
                            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                            if (newValue === undefined2) {
                                newValue = srcValue;
                            }
                            assignMergeValue(object, key, newValue);
                        }
                    }, keysIn);
                }
                function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
                    if (stacked) {
                        assignMergeValue(object, key, stacked);
                        return;
                    }
                    var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
                    var isCommon = newValue === undefined2;
                    if (isCommon) {
                        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                        newValue = srcValue;
                        if (isArr || isBuff || isTyped) {
                            if (isArray(objValue)) {
                                newValue = objValue;
                            } else if (isArrayLikeObject(objValue)) {
                                newValue = copyArray(objValue);
                            } else if (isBuff) {
                                isCommon = false;
                                newValue = cloneBuffer(srcValue, true);
                            } else if (isTyped) {
                                isCommon = false;
                                newValue = cloneTypedArray(srcValue, true);
                            } else {
                                newValue = [];
                            }
                        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                            newValue = objValue;
                            if (isArguments(objValue)) {
                                newValue = toPlainObject(objValue);
                            } else if (!isObject(objValue) || isFunction(objValue)) {
                                newValue = initCloneObject(srcValue);
                            }
                        } else {
                            isCommon = false;
                        }
                    }
                    if (isCommon) {
                        stack.set(srcValue, newValue);
                        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                        stack["delete"](srcValue);
                    }
                    assignMergeValue(object, key, newValue);
                }
                function baseNth(array, n) {
                    var length = array.length;
                    if (!length) {
                        return;
                    }
                    n += n < 0 ? length : 0;
                    return isIndex(n, length) ? array[n] : undefined2;
                }
                function baseOrderBy(collection, iteratees, orders) {
                    if (iteratees.length) {
                        iteratees = arrayMap(iteratees, function(iteratee2) {
                            if (isArray(iteratee2)) {
                                return function(value1) {
                                    return baseGet(value1, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                                };
                            }
                            return iteratee2;
                        });
                    } else {
                        iteratees = [
                            identity
                        ];
                    }
                    var index = -1;
                    iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                    var result2 = baseMap(collection, function(value1, key, collection2) {
                        var criteria = arrayMap(iteratees, function(iteratee2) {
                            return iteratee2(value1);
                        });
                        return {
                            "criteria": criteria,
                            "index": ++index,
                            "value": value1
                        };
                    });
                    return baseSortBy(result2, function(object, other) {
                        return compareMultiple(object, other, orders);
                    });
                }
                function basePick(object, paths) {
                    return basePickBy(object, paths, function(value1, path5) {
                        return hasIn(object, path5);
                    });
                }
                function basePickBy(object, paths, predicate) {
                    var index = -1, length = paths.length, result2 = {};
                    while(++index < length){
                        var path5 = paths[index], value1 = baseGet(object, path5);
                        if (predicate(value1, path5)) {
                            baseSet(result2, castPath(path5, object), value1);
                        }
                    }
                    return result2;
                }
                function basePropertyDeep(path5) {
                    return function(object) {
                        return baseGet(object, path5);
                    };
                }
                function basePullAll(array, values2, iteratee2, comparator) {
                    var indexOf3 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
                    if (array === values2) {
                        values2 = copyArray(values2);
                    }
                    if (iteratee2) {
                        seen = arrayMap(array, baseUnary(iteratee2));
                    }
                    while(++index < length){
                        var fromIndex = 0, value1 = values2[index], computed = iteratee2 ? iteratee2(value1) : value1;
                        while((fromIndex = indexOf3(seen, computed, fromIndex, comparator)) > -1){
                            if (seen !== array) {
                                splice.call(seen, fromIndex, 1);
                            }
                            splice.call(array, fromIndex, 1);
                        }
                    }
                    return array;
                }
                function basePullAt(array, indexes) {
                    var length = array ? indexes.length : 0, lastIndex = length - 1;
                    while(length--){
                        var index = indexes[length];
                        if (length == lastIndex || index !== previous) {
                            var previous = index;
                            if (isIndex(index)) {
                                splice.call(array, index, 1);
                            } else {
                                baseUnset(array, index);
                            }
                        }
                    }
                    return array;
                }
                function baseRandom(lower, upper) {
                    return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
                }
                function baseRange(start, end, step, fromRight) {
                    var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
                    while(length--){
                        result2[fromRight ? length : ++index] = start;
                        start += step;
                    }
                    return result2;
                }
                function baseRepeat(string2, n) {
                    var result2 = "";
                    if (!string2 || n < 1 || n > MAX_SAFE_INTEGER) {
                        return result2;
                    }
                    do {
                        if (n % 2) {
                            result2 += string2;
                        }
                        n = nativeFloor(n / 2);
                        if (n) {
                            string2 += string2;
                        }
                    }while (n)
                    return result2;
                }
                function baseRest(func, start) {
                    return setToString(overRest(func, start, identity), func + "");
                }
                function baseSample(collection) {
                    return arraySample(values(collection));
                }
                function baseSampleSize(collection, n) {
                    var array = values(collection);
                    return shuffleSelf(array, baseClamp(n, 0, array.length));
                }
                function baseSet(object, path5, value1, customizer) {
                    if (!isObject(object)) {
                        return object;
                    }
                    path5 = castPath(path5, object);
                    var index = -1, length = path5.length, lastIndex = length - 1, nested = object;
                    while(nested != null && ++index < length){
                        var key = toKey(path5[index]), newValue = value1;
                        if (key === "__proto__" || key === "constructor" || key === "prototype") {
                            return object;
                        }
                        if (index != lastIndex) {
                            var objValue = nested[key];
                            newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                            if (newValue === undefined2) {
                                newValue = isObject(objValue) ? objValue : isIndex(path5[index + 1]) ? [] : {};
                            }
                        }
                        assignValue(nested, key, newValue);
                        nested = nested[key];
                    }
                    return object;
                }
                var baseSetData = !metaMap ? identity : function(func, data) {
                    metaMap.set(func, data);
                    return func;
                };
                var baseSetToString = !defineProperty ? identity : function(func, string2) {
                    return defineProperty(func, "toString", {
                        "configurable": true,
                        "enumerable": false,
                        "value": constant(string2),
                        "writable": true
                    });
                };
                function baseShuffle(collection) {
                    return shuffleSelf(values(collection));
                }
                function baseSlice(array, start, end) {
                    var index = -1, length = array.length;
                    if (start < 0) {
                        start = -start > length ? 0 : length + start;
                    }
                    end = end > length ? length : end;
                    if (end < 0) {
                        end += length;
                    }
                    length = start > end ? 0 : end - start >>> 0;
                    start >>>= 0;
                    var result2 = Array2(length);
                    while(++index < length){
                        result2[index] = array[index + start];
                    }
                    return result2;
                }
                function baseSome(collection, predicate) {
                    var result2;
                    baseEach(collection, function(value1, index, collection2) {
                        result2 = predicate(value1, index, collection2);
                        return !result2;
                    });
                    return !!result2;
                }
                function baseSortedIndex(array, value1, retHighest) {
                    var low = 0, high = array == null ? low : array.length;
                    if (typeof value1 == "number" && value1 === value1 && high <= HALF_MAX_ARRAY_LENGTH) {
                        while(low < high){
                            var mid = low + high >>> 1, computed = array[mid];
                            if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value1 : computed < value1)) {
                                low = mid + 1;
                            } else {
                                high = mid;
                            }
                        }
                        return high;
                    }
                    return baseSortedIndexBy(array, value1, identity, retHighest);
                }
                function baseSortedIndexBy(array, value1, iteratee2, retHighest) {
                    var low = 0, high = array == null ? 0 : array.length;
                    if (high === 0) {
                        return 0;
                    }
                    value1 = iteratee2(value1);
                    var valIsNaN = value1 !== value1, valIsNull = value1 === null, valIsSymbol = isSymbol(value1), valIsUndefined = value1 === undefined2;
                    while(low < high){
                        var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
                        if (valIsNaN) {
                            var setLow = retHighest || othIsReflexive;
                        } else if (valIsUndefined) {
                            setLow = othIsReflexive && (retHighest || othIsDefined);
                        } else if (valIsNull) {
                            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                        } else if (valIsSymbol) {
                            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                        } else if (othIsNull || othIsSymbol) {
                            setLow = false;
                        } else {
                            setLow = retHighest ? computed <= value1 : computed < value1;
                        }
                        if (setLow) {
                            low = mid + 1;
                        } else {
                            high = mid;
                        }
                    }
                    return nativeMin(high, MAX_ARRAY_INDEX);
                }
                function baseSortedUniq(array, iteratee2) {
                    var index = -1, length = array.length, resIndex = 0, result2 = [];
                    while(++index < length){
                        var value1 = array[index], computed = iteratee2 ? iteratee2(value1) : value1;
                        if (!index || !eq(computed, seen)) {
                            var seen = computed;
                            result2[resIndex++] = value1 === 0 ? 0 : value1;
                        }
                    }
                    return result2;
                }
                function baseToNumber(value1) {
                    if (typeof value1 == "number") {
                        return value1;
                    }
                    if (isSymbol(value1)) {
                        return NAN;
                    }
                    return +value1;
                }
                function baseToString(value1) {
                    if (typeof value1 == "string") {
                        return value1;
                    }
                    if (isArray(value1)) {
                        return arrayMap(value1, baseToString) + "";
                    }
                    if (isSymbol(value1)) {
                        return symbolToString ? symbolToString.call(value1) : "";
                    }
                    var result2 = value1 + "";
                    return result2 == "0" && 1 / value1 == -INFINITY ? "-0" : result2;
                }
                function baseUniq(array, iteratee2, comparator) {
                    var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
                    if (comparator) {
                        isCommon = false;
                        includes2 = arrayIncludesWith;
                    } else if (length >= LARGE_ARRAY_SIZE) {
                        var set3 = iteratee2 ? null : createSet(array);
                        if (set3) {
                            return setToArray(set3);
                        }
                        isCommon = false;
                        includes2 = cacheHas;
                        seen = new SetCache();
                    } else {
                        seen = iteratee2 ? [] : result2;
                    }
                    outer: while(++index < length){
                        var value1 = array[index], computed = iteratee2 ? iteratee2(value1) : value1;
                        value1 = comparator || value1 !== 0 ? value1 : 0;
                        if (isCommon && computed === computed) {
                            var seenIndex = seen.length;
                            while(seenIndex--){
                                if (seen[seenIndex] === computed) {
                                    continue outer;
                                }
                            }
                            if (iteratee2) {
                                seen.push(computed);
                            }
                            result2.push(value1);
                        } else if (!includes2(seen, computed, comparator)) {
                            if (seen !== result2) {
                                seen.push(computed);
                            }
                            result2.push(value1);
                        }
                    }
                    return result2;
                }
                function baseUnset(object, path5) {
                    path5 = castPath(path5, object);
                    object = parent(object, path5);
                    return object == null || delete object[toKey(last(path5))];
                }
                function baseUpdate(object, path5, updater, customizer) {
                    return baseSet(object, path5, updater(baseGet(object, path5)), customizer);
                }
                function baseWhile(array, predicate, isDrop, fromRight) {
                    var length = array.length, index = fromRight ? length : -1;
                    while((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)){}
                    return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
                }
                function baseWrapperValue(value1, actions) {
                    var result2 = value1;
                    if (result2 instanceof LazyWrapper) {
                        result2 = result2.value();
                    }
                    return arrayReduce(actions, function(result3, action) {
                        return action.func.apply(action.thisArg, arrayPush([
                            result3
                        ], action.args));
                    }, result2);
                }
                function baseXor(arrays, iteratee2, comparator) {
                    var length = arrays.length;
                    if (length < 2) {
                        return length ? baseUniq(arrays[0]) : [];
                    }
                    var index = -1, result2 = Array2(length);
                    while(++index < length){
                        var array = arrays[index], othIndex = -1;
                        while(++othIndex < length){
                            if (othIndex != index) {
                                result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
                            }
                        }
                    }
                    return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
                }
                function baseZipObject(props, values2, assignFunc) {
                    var index = -1, length = props.length, valsLength = values2.length, result2 = {};
                    while(++index < length){
                        var value1 = index < valsLength ? values2[index] : undefined2;
                        assignFunc(result2, props[index], value1);
                    }
                    return result2;
                }
                function castArrayLikeObject(value1) {
                    return isArrayLikeObject(value1) ? value1 : [];
                }
                function castFunction(value1) {
                    return typeof value1 == "function" ? value1 : identity;
                }
                function castPath(value1, object) {
                    if (isArray(value1)) {
                        return value1;
                    }
                    return isKey(value1, object) ? [
                        value1
                    ] : stringToPath(toString(value1));
                }
                var castRest = baseRest;
                function castSlice(array, start, end) {
                    var length = array.length;
                    end = end === undefined2 ? length : end;
                    return !start && end >= length ? array : baseSlice(array, start, end);
                }
                var clearTimeout2 = ctxClearTimeout || function(id) {
                    return root.clearTimeout(id);
                };
                function cloneBuffer(buffer, isDeep) {
                    if (isDeep) {
                        return buffer.slice();
                    }
                    var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
                    buffer.copy(result2);
                    return result2;
                }
                function cloneArrayBuffer(arrayBuffer) {
                    var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
                    new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
                    return result2;
                }
                function cloneDataView(dataView, isDeep) {
                    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                }
                function cloneRegExp(regexp) {
                    var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                    result2.lastIndex = regexp.lastIndex;
                    return result2;
                }
                function cloneSymbol(symbol) {
                    return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
                }
                function cloneTypedArray(typedArray, isDeep) {
                    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                }
                function compareAscending(value1, other) {
                    if (value1 !== other) {
                        var valIsDefined = value1 !== undefined2, valIsNull = value1 === null, valIsReflexive = value1 === value1, valIsSymbol = isSymbol(value1);
                        var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                        if (!othIsNull && !othIsSymbol && !valIsSymbol && value1 > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                            return 1;
                        }
                        if (!valIsNull && !valIsSymbol && !othIsSymbol && value1 < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                            return -1;
                        }
                    }
                    return 0;
                }
                function compareMultiple(object, other, orders) {
                    var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
                    while(++index < length){
                        var result2 = compareAscending(objCriteria[index], othCriteria[index]);
                        if (result2) {
                            if (index >= ordersLength) {
                                return result2;
                            }
                            var order = orders[index];
                            return result2 * (order == "desc" ? -1 : 1);
                        }
                    }
                    return object.index - other.index;
                }
                function composeArgs(args, partials, holders, isCurried) {
                    var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
                    while(++leftIndex < leftLength){
                        result2[leftIndex] = partials[leftIndex];
                    }
                    while(++argsIndex < holdersLength){
                        if (isUncurried || argsIndex < argsLength) {
                            result2[holders[argsIndex]] = args[argsIndex];
                        }
                    }
                    while(rangeLength--){
                        result2[leftIndex++] = args[argsIndex++];
                    }
                    return result2;
                }
                function composeArgsRight(args, partials, holders, isCurried) {
                    var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
                    while(++argsIndex < rangeLength){
                        result2[argsIndex] = args[argsIndex];
                    }
                    var offset = argsIndex;
                    while(++rightIndex < rightLength){
                        result2[offset + rightIndex] = partials[rightIndex];
                    }
                    while(++holdersIndex < holdersLength){
                        if (isUncurried || argsIndex < argsLength) {
                            result2[offset + holders[holdersIndex]] = args[argsIndex++];
                        }
                    }
                    return result2;
                }
                function copyArray(source, array) {
                    var index = -1, length = source.length;
                    array || (array = Array2(length));
                    while(++index < length){
                        array[index] = source[index];
                    }
                    return array;
                }
                function copyObject(source, props, object, customizer) {
                    var isNew = !object;
                    object || (object = {});
                    var index = -1, length = props.length;
                    while(++index < length){
                        var key = props[index];
                        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
                        if (newValue === undefined2) {
                            newValue = source[key];
                        }
                        if (isNew) {
                            baseAssignValue(object, key, newValue);
                        } else {
                            assignValue(object, key, newValue);
                        }
                    }
                    return object;
                }
                function copySymbols(source, object) {
                    return copyObject(source, getSymbols(source), object);
                }
                function copySymbolsIn(source, object) {
                    return copyObject(source, getSymbolsIn(source), object);
                }
                function createAggregator(setter, initializer) {
                    return function(collection, iteratee2) {
                        var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                        return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
                    };
                }
                function createAssigner(assigner) {
                    return baseRest(function(object, sources) {
                        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
                        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
                        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                            customizer = length < 3 ? undefined2 : customizer;
                            length = 1;
                        }
                        object = Object2(object);
                        while(++index < length){
                            var source = sources[index];
                            if (source) {
                                assigner(object, source, index, customizer);
                            }
                        }
                        return object;
                    });
                }
                function createBaseEach(eachFunc, fromRight) {
                    return function(collection, iteratee2) {
                        if (collection == null) {
                            return collection;
                        }
                        if (!isArrayLike(collection)) {
                            return eachFunc(collection, iteratee2);
                        }
                        var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
                        while(fromRight ? index-- : ++index < length){
                            if (iteratee2(iterable[index], index, iterable) === false) {
                                break;
                            }
                        }
                        return collection;
                    };
                }
                function createBaseFor(fromRight) {
                    return function(object, iteratee2, keysFunc) {
                        var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
                        while(length--){
                            var key = props[fromRight ? length : ++index];
                            if (iteratee2(iterable[key], key, iterable) === false) {
                                break;
                            }
                        }
                        return object;
                    };
                }
                function createBind(func, bitmask, thisArg) {
                    var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
                    function wrapper() {
                        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                        return fn.apply(isBind ? thisArg : this, arguments);
                    }
                    return wrapper;
                }
                function createCaseFirst(methodName) {
                    return function(string2) {
                        string2 = toString(string2);
                        var strSymbols = hasUnicode(string2) ? stringToArray(string2) : undefined2;
                        var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
                        var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
                        return chr[methodName]() + trailing;
                    };
                }
                function createCompounder(callback) {
                    return function(string2) {
                        return arrayReduce(words(deburr(string2).replace(reApos, "")), callback, "");
                    };
                }
                function createCtor(Ctor) {
                    return function() {
                        var args = arguments;
                        switch(args.length){
                            case 0:
                                return new Ctor();
                            case 1:
                                return new Ctor(args[0]);
                            case 2:
                                return new Ctor(args[0], args[1]);
                            case 3:
                                return new Ctor(args[0], args[1], args[2]);
                            case 4:
                                return new Ctor(args[0], args[1], args[2], args[3]);
                            case 5:
                                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                            case 6:
                                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                            case 7:
                                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                        }
                        var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
                        return isObject(result2) ? result2 : thisBinding;
                    };
                }
                function createCurry(func, bitmask, arity) {
                    var Ctor = createCtor(func);
                    function wrapper() {
                        var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
                        while(index--){
                            args[index] = arguments[index];
                        }
                        var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                        length -= holders.length;
                        if (length < arity) {
                            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined2, args, holders, undefined2, undefined2, arity - length);
                        }
                        var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                        return apply(fn, this, args);
                    }
                    return wrapper;
                }
                function createFind(findIndexFunc) {
                    return function(collection, predicate, fromIndex) {
                        var iterable = Object2(collection);
                        if (!isArrayLike(collection)) {
                            var iteratee2 = getIteratee(predicate, 3);
                            collection = keys(collection);
                            predicate = function(key) {
                                return iteratee2(iterable[key], key, iterable);
                            };
                        }
                        var index = findIndexFunc(collection, predicate, fromIndex);
                        return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
                    };
                }
                function createFlow(fromRight) {
                    return flatRest(function(funcs) {
                        var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
                        if (fromRight) {
                            funcs.reverse();
                        }
                        while(index--){
                            var func = funcs[index];
                            if (typeof func != "function") {
                                throw new TypeError2(FUNC_ERROR_TEXT);
                            }
                            if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                                var wrapper = new LodashWrapper([], true);
                            }
                        }
                        index = wrapper ? index : length;
                        while(++index < length){
                            func = funcs[index];
                            var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                            if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                            } else {
                                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                            }
                        }
                        return function() {
                            var args = arguments, value1 = args[0];
                            if (wrapper && args.length == 1 && isArray(value1)) {
                                return wrapper.plant(value1).value();
                            }
                            var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value1;
                            while(++index2 < length){
                                result2 = funcs[index2].call(this, result2);
                            }
                            return result2;
                        };
                    });
                }
                function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
                    var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
                    function wrapper() {
                        var length = arguments.length, args = Array2(length), index = length;
                        while(index--){
                            args[index] = arguments[index];
                        }
                        if (isCurried) {
                            var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                        }
                        if (partials) {
                            args = composeArgs(args, partials, holders, isCurried);
                        }
                        if (partialsRight) {
                            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                        }
                        length -= holdersCount;
                        if (isCurried && length < arity) {
                            var newHolders = replaceHolders(args, placeholder);
                            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
                        }
                        var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                        length = args.length;
                        if (argPos) {
                            args = reorder(args, argPos);
                        } else if (isFlip && length > 1) {
                            args.reverse();
                        }
                        if (isAry && ary2 < length) {
                            args.length = ary2;
                        }
                        if (this && this !== root && this instanceof wrapper) {
                            fn = Ctor || createCtor(fn);
                        }
                        return fn.apply(thisBinding, args);
                    }
                    return wrapper;
                }
                function createInverter(setter, toIteratee) {
                    return function(object, iteratee2) {
                        return baseInverter(object, setter, toIteratee(iteratee2), {});
                    };
                }
                function createMathOperation(operator, defaultValue) {
                    return function(value1, other) {
                        var result2;
                        if (value1 === undefined2 && other === undefined2) {
                            return defaultValue;
                        }
                        if (value1 !== undefined2) {
                            result2 = value1;
                        }
                        if (other !== undefined2) {
                            if (result2 === undefined2) {
                                return other;
                            }
                            if (typeof value1 == "string" || typeof other == "string") {
                                value1 = baseToString(value1);
                                other = baseToString(other);
                            } else {
                                value1 = baseToNumber(value1);
                                other = baseToNumber(other);
                            }
                            result2 = operator(value1, other);
                        }
                        return result2;
                    };
                }
                function createOver(arrayFunc) {
                    return flatRest(function(iteratees) {
                        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                        return baseRest(function(args) {
                            var thisArg = this;
                            return arrayFunc(iteratees, function(iteratee2) {
                                return apply(iteratee2, thisArg, args);
                            });
                        });
                    });
                }
                function createPadding(length, chars) {
                    chars = chars === undefined2 ? " " : baseToString(chars);
                    var charsLength = chars.length;
                    if (charsLength < 2) {
                        return charsLength ? baseRepeat(chars, length) : chars;
                    }
                    var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                    return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
                }
                function createPartial(func, bitmask, thisArg, partials) {
                    var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
                    function wrapper() {
                        var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                        while(++leftIndex < leftLength){
                            args[leftIndex] = partials[leftIndex];
                        }
                        while(argsLength--){
                            args[leftIndex++] = arguments[++argsIndex];
                        }
                        return apply(fn, isBind ? thisArg : this, args);
                    }
                    return wrapper;
                }
                function createRange3(fromRight) {
                    return function(start, end, step) {
                        if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
                            end = step = undefined2;
                        }
                        start = toFinite(start);
                        if (end === undefined2) {
                            end = start;
                            start = 0;
                        } else {
                            end = toFinite(end);
                        }
                        step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
                        return baseRange(start, end, step, fromRight);
                    };
                }
                function createRelationalOperation(operator) {
                    return function(value1, other) {
                        if (!(typeof value1 == "string" && typeof other == "string")) {
                            value1 = toNumber(value1);
                            other = toNumber(other);
                        }
                        return operator(value1, other);
                    };
                }
                function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
                    var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
                    bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
                    bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
                    if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                    }
                    var newData = [
                        func,
                        bitmask,
                        thisArg,
                        newPartials,
                        newHolders,
                        newPartialsRight,
                        newHoldersRight,
                        argPos,
                        ary2,
                        arity
                    ];
                    var result2 = wrapFunc.apply(undefined2, newData);
                    if (isLaziable(func)) {
                        setData(result2, newData);
                    }
                    result2.placeholder = placeholder;
                    return setWrapToString(result2, func, bitmask);
                }
                function createRound(methodName) {
                    var func = Math2[methodName];
                    return function(number, precision) {
                        number = toNumber(number);
                        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                        if (precision && nativeIsFinite(number)) {
                            var pair = (toString(number) + "e").split("e"), value1 = func(pair[0] + "e" + (+pair[1] + precision));
                            pair = (toString(value1) + "e").split("e");
                            return +(pair[0] + "e" + (+pair[1] - precision));
                        }
                        return func(number);
                    };
                }
                var createSet = !(Set2 && 1 / setToArray(new Set2([
                    ,
                    -0
                ]))[1] == INFINITY) ? noop : function(values2) {
                    return new Set2(values2);
                };
                function createToPairs(keysFunc) {
                    return function(object) {
                        var tag = getTag(object);
                        if (tag == mapTag) {
                            return mapToArray(object);
                        }
                        if (tag == setTag) {
                            return setToPairs(object);
                        }
                        return baseToPairs(object, keysFunc(object));
                    };
                }
                function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
                    var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                    if (!isBindKey && typeof func != "function") {
                        throw new TypeError2(FUNC_ERROR_TEXT);
                    }
                    var length = partials ? partials.length : 0;
                    if (!length) {
                        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                        partials = holders = undefined2;
                    }
                    ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
                    arity = arity === undefined2 ? arity : toInteger(arity);
                    length -= holders ? holders.length : 0;
                    if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                        var partialsRight = partials, holdersRight = holders;
                        partials = holders = undefined2;
                    }
                    var data = isBindKey ? undefined2 : getData(func);
                    var newData = [
                        func,
                        bitmask,
                        thisArg,
                        partials,
                        holders,
                        partialsRight,
                        holdersRight,
                        argPos,
                        ary2,
                        arity
                    ];
                    if (data) {
                        mergeData(newData, data);
                    }
                    func = newData[0];
                    bitmask = newData[1];
                    thisArg = newData[2];
                    partials = newData[3];
                    holders = newData[4];
                    arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
                    if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                    }
                    if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                        var result2 = createBind(func, bitmask, thisArg);
                    } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                        result2 = createCurry(func, bitmask, arity);
                    } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                        result2 = createPartial(func, bitmask, thisArg, partials);
                    } else {
                        result2 = createHybrid.apply(undefined2, newData);
                    }
                    var setter = data ? baseSetData : setData;
                    return setWrapToString(setter(result2, newData), func, bitmask);
                }
                function customDefaultsAssignIn(objValue, srcValue, key, object) {
                    if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                        return srcValue;
                    }
                    return objValue;
                }
                function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                    if (isObject(objValue) && isObject(srcValue)) {
                        stack.set(srcValue, objValue);
                        baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
                        stack["delete"](srcValue);
                    }
                    return objValue;
                }
                function customOmitClone(value1) {
                    return isPlainObject(value1) ? undefined2 : value1;
                }
                function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
                    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                        return false;
                    }
                    var arrStacked = stack.get(array);
                    var othStacked = stack.get(other);
                    if (arrStacked && othStacked) {
                        return arrStacked == other && othStacked == array;
                    }
                    var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
                    stack.set(array, other);
                    stack.set(other, array);
                    while(++index < arrLength){
                        var arrValue = array[index], othValue = other[index];
                        if (customizer) {
                            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                        }
                        if (compared !== undefined2) {
                            if (compared) {
                                continue;
                            }
                            result2 = false;
                            break;
                        }
                        if (seen) {
                            if (!arraySome(other, function(othValue2, othIndex) {
                                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                                    return seen.push(othIndex);
                                }
                            })) {
                                result2 = false;
                                break;
                            }
                        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                            result2 = false;
                            break;
                        }
                    }
                    stack["delete"](array);
                    stack["delete"](other);
                    return result2;
                }
                function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                    switch(tag){
                        case dataViewTag:
                            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                                return false;
                            }
                            object = object.buffer;
                            other = other.buffer;
                        case arrayBufferTag:
                            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                                return false;
                            }
                            return true;
                        case boolTag2:
                        case dateTag:
                        case numberTag:
                            return eq(+object, +other);
                        case errorTag:
                            return object.name == other.name && object.message == other.message;
                        case regexpTag:
                        case stringTag:
                            return object == other + "";
                        case mapTag:
                            var convert = mapToArray;
                        case setTag:
                            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                            convert || (convert = setToArray);
                            if (object.size != other.size && !isPartial) {
                                return false;
                            }
                            var stacked = stack.get(object);
                            if (stacked) {
                                return stacked == other;
                            }
                            bitmask |= COMPARE_UNORDERED_FLAG;
                            stack.set(object, other);
                            var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                            stack["delete"](object);
                            return result2;
                        case symbolTag:
                            if (symbolValueOf) {
                                return symbolValueOf.call(object) == symbolValueOf.call(other);
                            }
                    }
                    return false;
                }
                function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
                    if (objLength != othLength && !isPartial) {
                        return false;
                    }
                    var index = objLength;
                    while(index--){
                        var key = objProps[index];
                        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                            return false;
                        }
                    }
                    var objStacked = stack.get(object);
                    var othStacked = stack.get(other);
                    if (objStacked && othStacked) {
                        return objStacked == other && othStacked == object;
                    }
                    var result2 = true;
                    stack.set(object, other);
                    stack.set(other, object);
                    var skipCtor = isPartial;
                    while(++index < objLength){
                        key = objProps[index];
                        var objValue = object[key], othValue = other[key];
                        if (customizer) {
                            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                        }
                        if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                            result2 = false;
                            break;
                        }
                        skipCtor || (skipCtor = key == "constructor");
                    }
                    if (result2 && !skipCtor) {
                        var objCtor = object.constructor, othCtor = other.constructor;
                        if (objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                            result2 = false;
                        }
                    }
                    stack["delete"](object);
                    stack["delete"](other);
                    return result2;
                }
                function flatRest(func) {
                    return setToString(overRest(func, undefined2, flatten), func + "");
                }
                function getAllKeys(object) {
                    return baseGetAllKeys(object, keys, getSymbols);
                }
                function getAllKeysIn(object) {
                    return baseGetAllKeys(object, keysIn, getSymbolsIn);
                }
                var getData = !metaMap ? noop : function(func) {
                    return metaMap.get(func);
                };
                function getFuncName(func) {
                    var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
                    while(length--){
                        var data = array[length], otherFunc = data.func;
                        if (otherFunc == null || otherFunc == func) {
                            return data.name;
                        }
                    }
                    return result2;
                }
                function getHolder(func) {
                    var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
                    return object.placeholder;
                }
                function getIteratee() {
                    var result2 = lodash.iteratee || iteratee;
                    result2 = result2 === iteratee ? baseIteratee : result2;
                    return arguments.length ? result2(arguments[0], arguments[1]) : result2;
                }
                function getMapData(map3, key) {
                    var data = map3.__data__;
                    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
                }
                function getMatchData(object) {
                    var result2 = keys(object), length = result2.length;
                    while(length--){
                        var key = result2[length], value1 = object[key];
                        result2[length] = [
                            key,
                            value1,
                            isStrictComparable(value1)
                        ];
                    }
                    return result2;
                }
                function getNative(object, key) {
                    var value1 = getValue(object, key);
                    return baseIsNative(value1) ? value1 : undefined2;
                }
                function getRawTag(value1) {
                    var isOwn = hasOwnProperty.call(value1, symToStringTag), tag = value1[symToStringTag];
                    try {
                        value1[symToStringTag] = undefined2;
                        var unmasked = true;
                    } catch (e) {}
                    var result2 = nativeObjectToString.call(value1);
                    if (unmasked) {
                        if (isOwn) {
                            value1[symToStringTag] = tag;
                        } else {
                            delete value1[symToStringTag];
                        }
                    }
                    return result2;
                }
                var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
                    if (object == null) {
                        return [];
                    }
                    object = Object2(object);
                    return arrayFilter(nativeGetSymbols(object), function(symbol) {
                        return propertyIsEnumerable.call(object, symbol);
                    });
                };
                var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
                    var result2 = [];
                    while(object){
                        arrayPush(result2, getSymbols(object));
                        object = getPrototype(object);
                    }
                    return result2;
                };
                var getTag = baseGetTag;
                if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
                    getTag = function(value1) {
                        var result2 = baseGetTag(value1), Ctor = result2 == objectTag ? value1.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
                        if (ctorString) {
                            switch(ctorString){
                                case dataViewCtorString:
                                    return dataViewTag;
                                case mapCtorString:
                                    return mapTag;
                                case promiseCtorString:
                                    return promiseTag;
                                case setCtorString:
                                    return setTag;
                                case weakMapCtorString:
                                    return weakMapTag;
                            }
                        }
                        return result2;
                    };
                }
                function getView(start, end, transforms) {
                    var index = -1, length = transforms.length;
                    while(++index < length){
                        var data = transforms[index], size2 = data.size;
                        switch(data.type){
                            case "drop":
                                start += size2;
                                break;
                            case "dropRight":
                                end -= size2;
                                break;
                            case "take":
                                end = nativeMin(end, start + size2);
                                break;
                            case "takeRight":
                                start = nativeMax(start, end - size2);
                                break;
                        }
                    }
                    return {
                        "start": start,
                        "end": end
                    };
                }
                function getWrapDetails(source) {
                    var match = source.match(reWrapDetails);
                    return match ? match[1].split(reSplitDetails) : [];
                }
                function hasPath(object, path5, hasFunc) {
                    path5 = castPath(path5, object);
                    var index = -1, length = path5.length, result2 = false;
                    while(++index < length){
                        var key = toKey(path5[index]);
                        if (!(result2 = object != null && hasFunc(object, key))) {
                            break;
                        }
                        object = object[key];
                    }
                    if (result2 || ++index != length) {
                        return result2;
                    }
                    length = object == null ? 0 : object.length;
                    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
                }
                function initCloneArray(array) {
                    var length = array.length, result2 = new array.constructor(length);
                    if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
                        result2.index = array.index;
                        result2.input = array.input;
                    }
                    return result2;
                }
                function initCloneObject(object) {
                    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
                }
                function initCloneByTag(object, tag, isDeep) {
                    var Ctor = object.constructor;
                    switch(tag){
                        case arrayBufferTag:
                            return cloneArrayBuffer(object);
                        case boolTag2:
                        case dateTag:
                            return new Ctor(+object);
                        case dataViewTag:
                            return cloneDataView(object, isDeep);
                        case float32Tag:
                        case float64Tag:
                        case int8Tag:
                        case int16Tag:
                        case int32Tag:
                        case uint8Tag:
                        case uint8ClampedTag:
                        case uint16Tag:
                        case uint32Tag:
                            return cloneTypedArray(object, isDeep);
                        case mapTag:
                            return new Ctor();
                        case numberTag:
                        case stringTag:
                            return new Ctor(object);
                        case regexpTag:
                            return cloneRegExp(object);
                        case setTag:
                            return new Ctor();
                        case symbolTag:
                            return cloneSymbol(object);
                    }
                }
                function insertWrapDetails(source, details) {
                    var length = details.length;
                    if (!length) {
                        return source;
                    }
                    var lastIndex = length - 1;
                    details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
                    details = details.join(length > 2 ? ", " : " ");
                    return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
                }
                function isFlattenable(value1) {
                    return isArray(value1) || isArguments(value1) || !!(spreadableSymbol && value1 && value1[spreadableSymbol]);
                }
                function isIndex(value1, length) {
                    var type = typeof value1;
                    length = length == null ? MAX_SAFE_INTEGER : length;
                    return !!length && (type == "number" || type != "symbol" && reIsUint.test(value1)) && value1 > -1 && value1 % 1 == 0 && value1 < length;
                }
                function isIterateeCall(value1, index, object) {
                    if (!isObject(object)) {
                        return false;
                    }
                    var type = typeof index;
                    if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
                        return eq(object[index], value1);
                    }
                    return false;
                }
                function isKey(value1, object) {
                    if (isArray(value1)) {
                        return false;
                    }
                    var type = typeof value1;
                    if (type == "number" || type == "symbol" || type == "boolean" || value1 == null || isSymbol(value1)) {
                        return true;
                    }
                    return reIsPlainProp.test(value1) || !reIsDeepProp.test(value1) || object != null && value1 in Object2(object);
                }
                function isKeyable(value1) {
                    var type = typeof value1;
                    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value1 !== "__proto__" : value1 === null;
                }
                function isLaziable(func) {
                    var funcName = getFuncName(func), other = lodash[funcName];
                    if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
                        return false;
                    }
                    if (func === other) {
                        return true;
                    }
                    var data = getData(other);
                    return !!data && func === data[0];
                }
                function isMasked(func) {
                    return !!maskSrcKey && maskSrcKey in func;
                }
                var isMaskable = coreJsData ? isFunction : stubFalse;
                function isPrototype(value1) {
                    var Ctor = value1 && value1.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
                    return value1 === proto;
                }
                function isStrictComparable(value1) {
                    return value1 === value1 && !isObject(value1);
                }
                function matchesStrictComparable(key, srcValue) {
                    return function(object) {
                        if (object == null) {
                            return false;
                        }
                        return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
                    };
                }
                function memoizeCapped(func) {
                    var result2 = memoize(func, function(key) {
                        if (cache.size === MAX_MEMOIZE_SIZE) {
                            cache.clear();
                        }
                        return key;
                    });
                    var cache = result2.cache;
                    return result2;
                }
                function mergeData(data, source) {
                    var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
                    var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
                    if (!(isCommon || isCombo)) {
                        return data;
                    }
                    if (srcBitmask & WRAP_BIND_FLAG) {
                        data[2] = source[2];
                        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                    }
                    var value1 = source[3];
                    if (value1) {
                        var partials = data[3];
                        data[3] = partials ? composeArgs(partials, value1, source[4]) : value1;
                        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                    }
                    value1 = source[5];
                    if (value1) {
                        partials = data[5];
                        data[5] = partials ? composeArgsRight(partials, value1, source[6]) : value1;
                        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                    }
                    value1 = source[7];
                    if (value1) {
                        data[7] = value1;
                    }
                    if (srcBitmask & WRAP_ARY_FLAG) {
                        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                    }
                    if (data[9] == null) {
                        data[9] = source[9];
                    }
                    data[0] = source[0];
                    data[1] = newBitmask;
                    return data;
                }
                function nativeKeysIn(object) {
                    var result2 = [];
                    if (object != null) {
                        for(var key in Object2(object)){
                            result2.push(key);
                        }
                    }
                    return result2;
                }
                function objectToString(value1) {
                    return nativeObjectToString.call(value1);
                }
                function overRest(func, start, transform2) {
                    start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
                    return function() {
                        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
                        while(++index < length){
                            array[index] = args[start + index];
                        }
                        index = -1;
                        var otherArgs = Array2(start + 1);
                        while(++index < start){
                            otherArgs[index] = args[index];
                        }
                        otherArgs[start] = transform2(array);
                        return apply(func, this, otherArgs);
                    };
                }
                function parent(object, path5) {
                    return path5.length < 2 ? object : baseGet(object, baseSlice(path5, 0, -1));
                }
                function reorder(array, indexes) {
                    var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
                    while(length--){
                        var index = indexes[length];
                        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
                    }
                    return array;
                }
                function safeGet(object, key) {
                    if (key === "constructor" && typeof object[key] === "function") {
                        return;
                    }
                    if (key == "__proto__") {
                        return;
                    }
                    return object[key];
                }
                var setData = shortOut(baseSetData);
                var setTimeout2 = ctxSetTimeout || function(func, wait) {
                    return root.setTimeout(func, wait);
                };
                var setToString = shortOut(baseSetToString);
                function setWrapToString(wrapper, reference, bitmask) {
                    var source = reference + "";
                    return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
                }
                function shortOut(func) {
                    var count = 0, lastCalled = 0;
                    return function() {
                        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                        lastCalled = stamp;
                        if (remaining > 0) {
                            if (++count >= HOT_COUNT) {
                                return arguments[0];
                            }
                        } else {
                            count = 0;
                        }
                        return func.apply(undefined2, arguments);
                    };
                }
                function shuffleSelf(array, size2) {
                    var index = -1, length = array.length, lastIndex = length - 1;
                    size2 = size2 === undefined2 ? length : size2;
                    while(++index < size2){
                        var rand = baseRandom(index, lastIndex), value1 = array[rand];
                        array[rand] = array[index];
                        array[index] = value1;
                    }
                    array.length = size2;
                    return array;
                }
                var stringToPath = memoizeCapped(function(string2) {
                    var result2 = [];
                    if (string2.charCodeAt(0) === 46) {
                        result2.push("");
                    }
                    string2.replace(rePropName, function(match, number, quote, subString) {
                        result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
                    });
                    return result2;
                });
                function toKey(value1) {
                    if (typeof value1 == "string" || isSymbol(value1)) {
                        return value1;
                    }
                    var result2 = value1 + "";
                    return result2 == "0" && 1 / value1 == -INFINITY ? "-0" : result2;
                }
                function toSource(func) {
                    if (func != null) {
                        try {
                            return funcToString.call(func);
                        } catch (e) {}
                        try {
                            return func + "";
                        } catch (e) {}
                    }
                    return "";
                }
                function updateWrapDetails(details, bitmask) {
                    arrayEach(wrapFlags, function(pair) {
                        var value1 = "_." + pair[0];
                        if (bitmask & pair[1] && !arrayIncludes(details, value1)) {
                            details.push(value1);
                        }
                    });
                    return details.sort();
                }
                function wrapperClone(wrapper) {
                    if (wrapper instanceof LazyWrapper) {
                        return wrapper.clone();
                    }
                    var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                    result2.__actions__ = copyArray(wrapper.__actions__);
                    result2.__index__ = wrapper.__index__;
                    result2.__values__ = wrapper.__values__;
                    return result2;
                }
                function chunk(array, size2, guard) {
                    if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
                        size2 = 1;
                    } else {
                        size2 = nativeMax(toInteger(size2), 0);
                    }
                    var length = array == null ? 0 : array.length;
                    if (!length || size2 < 1) {
                        return [];
                    }
                    var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
                    while(index < length){
                        result2[resIndex++] = baseSlice(array, index, index += size2);
                    }
                    return result2;
                }
                function compact(array) {
                    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
                    while(++index < length){
                        var value1 = array[index];
                        if (value1) {
                            result2[resIndex++] = value1;
                        }
                    }
                    return result2;
                }
                function concat() {
                    var length = arguments.length;
                    if (!length) {
                        return [];
                    }
                    var args = Array2(length - 1), array = arguments[0], index = length;
                    while(index--){
                        args[index - 1] = arguments[index];
                    }
                    return arrayPush(isArray(array) ? copyArray(array) : [
                        array
                    ], baseFlatten(args, 1));
                }
                var difference = baseRest(function(array, values2) {
                    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
                });
                var differenceBy = baseRest(function(array, values2) {
                    var iteratee2 = last(values2);
                    if (isArrayLikeObject(iteratee2)) {
                        iteratee2 = undefined2;
                    }
                    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
                });
                var differenceWith = baseRest(function(array, values2) {
                    var comparator = last(values2);
                    if (isArrayLikeObject(comparator)) {
                        comparator = undefined2;
                    }
                    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
                });
                function drop(array, n, guard) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return [];
                    }
                    n = guard || n === undefined2 ? 1 : toInteger(n);
                    return baseSlice(array, n < 0 ? 0 : n, length);
                }
                function dropRight(array, n, guard) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return [];
                    }
                    n = guard || n === undefined2 ? 1 : toInteger(n);
                    n = length - n;
                    return baseSlice(array, 0, n < 0 ? 0 : n);
                }
                function dropRightWhile(array, predicate) {
                    return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
                }
                function dropWhile(array, predicate) {
                    return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
                }
                function fill(array, value1, start, end) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return [];
                    }
                    if (start && typeof start != "number" && isIterateeCall(array, value1, start)) {
                        start = 0;
                        end = length;
                    }
                    return baseFill(array, value1, start, end);
                }
                function findIndex(array, predicate, fromIndex) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return -1;
                    }
                    var index = fromIndex == null ? 0 : toInteger(fromIndex);
                    if (index < 0) {
                        index = nativeMax(length + index, 0);
                    }
                    return baseFindIndex(array, getIteratee(predicate, 3), index);
                }
                function findLastIndex(array, predicate, fromIndex) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return -1;
                    }
                    var index = length - 1;
                    if (fromIndex !== undefined2) {
                        index = toInteger(fromIndex);
                        index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                    }
                    return baseFindIndex(array, getIteratee(predicate, 3), index, true);
                }
                function flatten(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? baseFlatten(array, 1) : [];
                }
                function flattenDeep(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? baseFlatten(array, INFINITY) : [];
                }
                function flattenDepth(array, depth) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return [];
                    }
                    depth = depth === undefined2 ? 1 : toInteger(depth);
                    return baseFlatten(array, depth);
                }
                function fromPairs(pairs2) {
                    var index = -1, length = pairs2 == null ? 0 : pairs2.length, result2 = {};
                    while(++index < length){
                        var pair = pairs2[index];
                        result2[pair[0]] = pair[1];
                    }
                    return result2;
                }
                function head(array) {
                    return array && array.length ? array[0] : undefined2;
                }
                function indexOf2(array, value1, fromIndex) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return -1;
                    }
                    var index = fromIndex == null ? 0 : toInteger(fromIndex);
                    if (index < 0) {
                        index = nativeMax(length + index, 0);
                    }
                    return baseIndexOf(array, value1, index);
                }
                function initial(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? baseSlice(array, 0, -1) : [];
                }
                var intersection = baseRest(function(arrays) {
                    var mapped = arrayMap(arrays, castArrayLikeObject);
                    return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
                });
                var intersectionBy = baseRest(function(arrays) {
                    var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
                    if (iteratee2 === last(mapped)) {
                        iteratee2 = undefined2;
                    } else {
                        mapped.pop();
                    }
                    return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
                });
                var intersectionWith = baseRest(function(arrays) {
                    var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
                    comparator = typeof comparator == "function" ? comparator : undefined2;
                    if (comparator) {
                        mapped.pop();
                    }
                    return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
                });
                function join(array, separator) {
                    return array == null ? "" : nativeJoin.call(array, separator);
                }
                function last(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? array[length - 1] : undefined2;
                }
                function lastIndexOf(array, value1, fromIndex) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return -1;
                    }
                    var index = length;
                    if (fromIndex !== undefined2) {
                        index = toInteger(fromIndex);
                        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                    }
                    return value1 === value1 ? strictLastIndexOf(array, value1, index) : baseFindIndex(array, baseIsNaN, index, true);
                }
                function nth(array, n) {
                    return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
                }
                var pull = baseRest(pullAll);
                function pullAll(array, values2) {
                    return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
                }
                function pullAllBy(array, values2, iteratee2) {
                    return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
                }
                function pullAllWith(array, values2, comparator) {
                    return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
                }
                var pullAt = flatRest(function(array, indexes) {
                    var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
                    basePullAt(array, arrayMap(indexes, function(index) {
                        return isIndex(index, length) ? +index : index;
                    }).sort(compareAscending));
                    return result2;
                });
                function remove(array, predicate) {
                    var result2 = [];
                    if (!(array && array.length)) {
                        return result2;
                    }
                    var index = -1, indexes = [], length = array.length;
                    predicate = getIteratee(predicate, 3);
                    while(++index < length){
                        var value1 = array[index];
                        if (predicate(value1, index, array)) {
                            result2.push(value1);
                            indexes.push(index);
                        }
                    }
                    basePullAt(array, indexes);
                    return result2;
                }
                function reverse(array) {
                    return array == null ? array : nativeReverse.call(array);
                }
                function slice(array, start, end) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return [];
                    }
                    if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
                        start = 0;
                        end = length;
                    } else {
                        start = start == null ? 0 : toInteger(start);
                        end = end === undefined2 ? length : toInteger(end);
                    }
                    return baseSlice(array, start, end);
                }
                function sortedIndex(array, value1) {
                    return baseSortedIndex(array, value1);
                }
                function sortedIndexBy(array, value1, iteratee2) {
                    return baseSortedIndexBy(array, value1, getIteratee(iteratee2, 2));
                }
                function sortedIndexOf(array, value1) {
                    var length = array == null ? 0 : array.length;
                    if (length) {
                        var index = baseSortedIndex(array, value1);
                        if (index < length && eq(array[index], value1)) {
                            return index;
                        }
                    }
                    return -1;
                }
                function sortedLastIndex(array, value1) {
                    return baseSortedIndex(array, value1, true);
                }
                function sortedLastIndexBy(array, value1, iteratee2) {
                    return baseSortedIndexBy(array, value1, getIteratee(iteratee2, 2), true);
                }
                function sortedLastIndexOf(array, value1) {
                    var length = array == null ? 0 : array.length;
                    if (length) {
                        var index = baseSortedIndex(array, value1, true) - 1;
                        if (eq(array[index], value1)) {
                            return index;
                        }
                    }
                    return -1;
                }
                function sortedUniq(array) {
                    return array && array.length ? baseSortedUniq(array) : [];
                }
                function sortedUniqBy(array, iteratee2) {
                    return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
                }
                function tail(array) {
                    var length = array == null ? 0 : array.length;
                    return length ? baseSlice(array, 1, length) : [];
                }
                function take(array, n, guard) {
                    if (!(array && array.length)) {
                        return [];
                    }
                    n = guard || n === undefined2 ? 1 : toInteger(n);
                    return baseSlice(array, 0, n < 0 ? 0 : n);
                }
                function takeRight(array, n, guard) {
                    var length = array == null ? 0 : array.length;
                    if (!length) {
                        return [];
                    }
                    n = guard || n === undefined2 ? 1 : toInteger(n);
                    n = length - n;
                    return baseSlice(array, n < 0 ? 0 : n, length);
                }
                function takeRightWhile(array, predicate) {
                    return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
                }
                function takeWhile(array, predicate) {
                    return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
                }
                var union = baseRest(function(arrays) {
                    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
                });
                var unionBy = baseRest(function(arrays) {
                    var iteratee2 = last(arrays);
                    if (isArrayLikeObject(iteratee2)) {
                        iteratee2 = undefined2;
                    }
                    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
                });
                var unionWith = baseRest(function(arrays) {
                    var comparator = last(arrays);
                    comparator = typeof comparator == "function" ? comparator : undefined2;
                    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
                });
                function uniq(array) {
                    return array && array.length ? baseUniq(array) : [];
                }
                function uniqBy(array, iteratee2) {
                    return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
                }
                function uniqWith(array, comparator) {
                    comparator = typeof comparator == "function" ? comparator : undefined2;
                    return array && array.length ? baseUniq(array, undefined2, comparator) : [];
                }
                function unzip(array) {
                    if (!(array && array.length)) {
                        return [];
                    }
                    var length = 0;
                    array = arrayFilter(array, function(group) {
                        if (isArrayLikeObject(group)) {
                            length = nativeMax(group.length, length);
                            return true;
                        }
                    });
                    return baseTimes(length, function(index) {
                        return arrayMap(array, baseProperty(index));
                    });
                }
                function unzipWith(array, iteratee2) {
                    if (!(array && array.length)) {
                        return [];
                    }
                    var result2 = unzip(array);
                    if (iteratee2 == null) {
                        return result2;
                    }
                    return arrayMap(result2, function(group) {
                        return apply(iteratee2, undefined2, group);
                    });
                }
                var without = baseRest(function(array, values2) {
                    return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
                });
                var xor = baseRest(function(arrays) {
                    return baseXor(arrayFilter(arrays, isArrayLikeObject));
                });
                var xorBy = baseRest(function(arrays) {
                    var iteratee2 = last(arrays);
                    if (isArrayLikeObject(iteratee2)) {
                        iteratee2 = undefined2;
                    }
                    return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
                });
                var xorWith = baseRest(function(arrays) {
                    var comparator = last(arrays);
                    comparator = typeof comparator == "function" ? comparator : undefined2;
                    return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
                });
                var zip = baseRest(unzip);
                function zipObject(props, values2) {
                    return baseZipObject(props || [], values2 || [], assignValue);
                }
                function zipObjectDeep(props, values2) {
                    return baseZipObject(props || [], values2 || [], baseSet);
                }
                var zipWith = baseRest(function(arrays) {
                    var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
                    iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
                    return unzipWith(arrays, iteratee2);
                });
                function chain(value1) {
                    var result2 = lodash(value1);
                    result2.__chain__ = true;
                    return result2;
                }
                function tap(value1, interceptor) {
                    interceptor(value1);
                    return value1;
                }
                function thru(value1, interceptor) {
                    return interceptor(value1);
                }
                var wrapperAt = flatRest(function(paths) {
                    var length = paths.length, start = length ? paths[0] : 0, value1 = this.__wrapped__, interceptor = function(object) {
                        return baseAt(object, paths);
                    };
                    if (length > 1 || this.__actions__.length || !(value1 instanceof LazyWrapper) || !isIndex(start)) {
                        return this.thru(interceptor);
                    }
                    value1 = value1.slice(start, +start + (length ? 1 : 0));
                    value1.__actions__.push({
                        "func": thru,
                        "args": [
                            interceptor
                        ],
                        "thisArg": undefined2
                    });
                    return new LodashWrapper(value1, this.__chain__).thru(function(array) {
                        if (length && !array.length) {
                            array.push(undefined2);
                        }
                        return array;
                    });
                });
                function wrapperChain() {
                    return chain(this);
                }
                function wrapperCommit() {
                    return new LodashWrapper(this.value(), this.__chain__);
                }
                function wrapperNext() {
                    if (this.__values__ === undefined2) {
                        this.__values__ = toArray(this.value());
                    }
                    var done = this.__index__ >= this.__values__.length, value1 = done ? undefined2 : this.__values__[this.__index__++];
                    return {
                        "done": done,
                        "value": value1
                    };
                }
                function wrapperToIterator() {
                    return this;
                }
                function wrapperPlant(value1) {
                    var result2, parent2 = this;
                    while(parent2 instanceof baseLodash){
                        var clone2 = wrapperClone(parent2);
                        clone2.__index__ = 0;
                        clone2.__values__ = undefined2;
                        if (result2) {
                            previous.__wrapped__ = clone2;
                        } else {
                            result2 = clone2;
                        }
                        var previous = clone2;
                        parent2 = parent2.__wrapped__;
                    }
                    previous.__wrapped__ = value1;
                    return result2;
                }
                function wrapperReverse() {
                    var value1 = this.__wrapped__;
                    if (value1 instanceof LazyWrapper) {
                        var wrapped = value1;
                        if (this.__actions__.length) {
                            wrapped = new LazyWrapper(this);
                        }
                        wrapped = wrapped.reverse();
                        wrapped.__actions__.push({
                            "func": thru,
                            "args": [
                                reverse
                            ],
                            "thisArg": undefined2
                        });
                        return new LodashWrapper(wrapped, this.__chain__);
                    }
                    return this.thru(reverse);
                }
                function wrapperValue() {
                    return baseWrapperValue(this.__wrapped__, this.__actions__);
                }
                var countBy = createAggregator(function(result2, value1, key) {
                    if (hasOwnProperty.call(result2, key)) {
                        ++result2[key];
                    } else {
                        baseAssignValue(result2, key, 1);
                    }
                });
                function every(collection, predicate, guard) {
                    var func = isArray(collection) ? arrayEvery : baseEvery;
                    if (guard && isIterateeCall(collection, predicate, guard)) {
                        predicate = undefined2;
                    }
                    return func(collection, getIteratee(predicate, 3));
                }
                function filter(collection, predicate) {
                    var func = isArray(collection) ? arrayFilter : baseFilter;
                    return func(collection, getIteratee(predicate, 3));
                }
                var find = createFind(findIndex);
                var findLast = createFind(findLastIndex);
                function flatMap(collection, iteratee2) {
                    return baseFlatten(map2(collection, iteratee2), 1);
                }
                function flatMapDeep(collection, iteratee2) {
                    return baseFlatten(map2(collection, iteratee2), INFINITY);
                }
                function flatMapDepth(collection, iteratee2, depth) {
                    depth = depth === undefined2 ? 1 : toInteger(depth);
                    return baseFlatten(map2(collection, iteratee2), depth);
                }
                function forEach(collection, iteratee2) {
                    var func = isArray(collection) ? arrayEach : baseEach;
                    return func(collection, getIteratee(iteratee2, 3));
                }
                function forEachRight(collection, iteratee2) {
                    var func = isArray(collection) ? arrayEachRight : baseEachRight;
                    return func(collection, getIteratee(iteratee2, 3));
                }
                var groupBy = createAggregator(function(result2, value1, key) {
                    if (hasOwnProperty.call(result2, key)) {
                        result2[key].push(value1);
                    } else {
                        baseAssignValue(result2, key, [
                            value1
                        ]);
                    }
                });
                function includes(collection, value1, fromIndex, guard) {
                    collection = isArrayLike(collection) ? collection : values(collection);
                    fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
                    var length = collection.length;
                    if (fromIndex < 0) {
                        fromIndex = nativeMax(length + fromIndex, 0);
                    }
                    return isString3(collection) ? fromIndex <= length && collection.indexOf(value1, fromIndex) > -1 : !!length && baseIndexOf(collection, value1, fromIndex) > -1;
                }
                var invokeMap = baseRest(function(collection, path5, args) {
                    var index = -1, isFunc = typeof path5 == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
                    baseEach(collection, function(value1) {
                        result2[++index] = isFunc ? apply(path5, value1, args) : baseInvoke(value1, path5, args);
                    });
                    return result2;
                });
                var keyBy = createAggregator(function(result2, value1, key) {
                    baseAssignValue(result2, key, value1);
                });
                function map2(collection, iteratee2) {
                    var func = isArray(collection) ? arrayMap : baseMap;
                    return func(collection, getIteratee(iteratee2, 3));
                }
                function orderBy(collection, iteratees, orders, guard) {
                    if (collection == null) {
                        return [];
                    }
                    if (!isArray(iteratees)) {
                        iteratees = iteratees == null ? [] : [
                            iteratees
                        ];
                    }
                    orders = guard ? undefined2 : orders;
                    if (!isArray(orders)) {
                        orders = orders == null ? [] : [
                            orders
                        ];
                    }
                    return baseOrderBy(collection, iteratees, orders);
                }
                var partition = createAggregator(function(result2, value1, key) {
                    result2[key ? 0 : 1].push(value1);
                }, function() {
                    return [
                        [],
                        []
                    ];
                });
                function reduce(collection, iteratee2, accumulator) {
                    var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
                    return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
                }
                function reduceRight(collection, iteratee2, accumulator) {
                    var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
                    return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
                }
                function reject(collection, predicate) {
                    var func = isArray(collection) ? arrayFilter : baseFilter;
                    return func(collection, negate(getIteratee(predicate, 3)));
                }
                function sample(collection) {
                    var func = isArray(collection) ? arraySample : baseSample;
                    return func(collection);
                }
                function sampleSize(collection, n, guard) {
                    if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
                        n = 1;
                    } else {
                        n = toInteger(n);
                    }
                    var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                    return func(collection, n);
                }
                function shuffle(collection) {
                    var func = isArray(collection) ? arrayShuffle : baseShuffle;
                    return func(collection);
                }
                function size(collection) {
                    if (collection == null) {
                        return 0;
                    }
                    if (isArrayLike(collection)) {
                        return isString3(collection) ? stringSize(collection) : collection.length;
                    }
                    var tag = getTag(collection);
                    if (tag == mapTag || tag == setTag) {
                        return collection.size;
                    }
                    return baseKeys(collection).length;
                }
                function some(collection, predicate, guard) {
                    var func = isArray(collection) ? arraySome : baseSome;
                    if (guard && isIterateeCall(collection, predicate, guard)) {
                        predicate = undefined2;
                    }
                    return func(collection, getIteratee(predicate, 3));
                }
                var sortBy = baseRest(function(collection, iteratees) {
                    if (collection == null) {
                        return [];
                    }
                    var length = iteratees.length;
                    if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                        iteratees = [];
                    } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                        iteratees = [
                            iteratees[0]
                        ];
                    }
                    return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                });
                var now = ctxNow || function() {
                    return root.Date.now();
                };
                function after(n, func) {
                    if (typeof func != "function") {
                        throw new TypeError2(FUNC_ERROR_TEXT);
                    }
                    n = toInteger(n);
                    return function() {
                        if (--n < 1) {
                            return func.apply(this, arguments);
                        }
                    };
                }
                function ary(func, n, guard) {
                    n = guard ? undefined2 : n;
                    n = func && n == null ? func.length : n;
                    return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
                }
                function before(n, func) {
                    var result2;
                    if (typeof func != "function") {
                        throw new TypeError2(FUNC_ERROR_TEXT);
                    }
                    n = toInteger(n);
                    return function() {
                        if (--n > 0) {
                            result2 = func.apply(this, arguments);
                        }
                        if (n <= 1) {
                            func = undefined2;
                        }
                        return result2;
                    };
                }
                var bind = baseRest(function(func, thisArg, partials) {
                    var bitmask = WRAP_BIND_FLAG;
                    if (partials.length) {
                        var holders = replaceHolders(partials, getHolder(bind));
                        bitmask |= WRAP_PARTIAL_FLAG;
                    }
                    return createWrap(func, bitmask, thisArg, partials, holders);
                });
                var bindKey = baseRest(function(object, key, partials) {
                    var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                    if (partials.length) {
                        var holders = replaceHolders(partials, getHolder(bindKey));
                        bitmask |= WRAP_PARTIAL_FLAG;
                    }
                    return createWrap(key, bitmask, object, partials, holders);
                });
                function curry(func, arity, guard) {
                    arity = guard ? undefined2 : arity;
                    var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
                    result2.placeholder = curry.placeholder;
                    return result2;
                }
                function curryRight(func, arity, guard) {
                    arity = guard ? undefined2 : arity;
                    var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
                    result2.placeholder = curryRight.placeholder;
                    return result2;
                }
                function debounce(func, wait, options) {
                    var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
                    if (typeof func != "function") {
                        throw new TypeError2(FUNC_ERROR_TEXT);
                    }
                    wait = toNumber(wait) || 0;
                    if (isObject(options)) {
                        leading = !!options.leading;
                        maxing = "maxWait" in options;
                        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                        trailing = "trailing" in options ? !!options.trailing : trailing;
                    }
                    function invokeFunc(time) {
                        var args = lastArgs, thisArg = lastThis;
                        lastArgs = lastThis = undefined2;
                        lastInvokeTime = time;
                        result2 = func.apply(thisArg, args);
                        return result2;
                    }
                    function leadingEdge(time) {
                        lastInvokeTime = time;
                        timerId = setTimeout2(timerExpired, wait);
                        return leading ? invokeFunc(time) : result2;
                    }
                    function remainingWait(time) {
                        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
                        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
                    }
                    function shouldInvoke(time) {
                        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                        return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
                    }
                    function timerExpired() {
                        var time = now();
                        if (shouldInvoke(time)) {
                            return trailingEdge(time);
                        }
                        timerId = setTimeout2(timerExpired, remainingWait(time));
                    }
                    function trailingEdge(time) {
                        timerId = undefined2;
                        if (trailing && lastArgs) {
                            return invokeFunc(time);
                        }
                        lastArgs = lastThis = undefined2;
                        return result2;
                    }
                    function cancel() {
                        if (timerId !== undefined2) {
                            clearTimeout2(timerId);
                        }
                        lastInvokeTime = 0;
                        lastArgs = lastCallTime = lastThis = timerId = undefined2;
                    }
                    function flush() {
                        return timerId === undefined2 ? result2 : trailingEdge(now());
                    }
                    function debounced() {
                        var time = now(), isInvoking = shouldInvoke(time);
                        lastArgs = arguments;
                        lastThis = this;
                        lastCallTime = time;
                        if (isInvoking) {
                            if (timerId === undefined2) {
                                return leadingEdge(lastCallTime);
                            }
                            if (maxing) {
                                clearTimeout2(timerId);
                                timerId = setTimeout2(timerExpired, wait);
                                return invokeFunc(lastCallTime);
                            }
                        }
                        if (timerId === undefined2) {
                            timerId = setTimeout2(timerExpired, wait);
                        }
                        return result2;
                    }
                    debounced.cancel = cancel;
                    debounced.flush = flush;
                    return debounced;
                }
                var defer = baseRest(function(func, args) {
                    return baseDelay(func, 1, args);
                });
                var delay = baseRest(function(func, wait, args) {
                    return baseDelay(func, toNumber(wait) || 0, args);
                });
                function flip(func) {
                    return createWrap(func, WRAP_FLIP_FLAG);
                }
                function memoize(func, resolver) {
                    if (typeof func != "function" || resolver != null && typeof resolver != "function") {
                        throw new TypeError2(FUNC_ERROR_TEXT);
                    }
                    var memoized = function() {
                        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                        if (cache.has(key)) {
                            return cache.get(key);
                        }
                        var result2 = func.apply(this, args);
                        memoized.cache = cache.set(key, result2) || cache;
                        return result2;
                    };
                    memoized.cache = new (memoize.Cache || MapCache)();
                    return memoized;
                }
                memoize.Cache = MapCache;
                function negate(predicate) {
                    if (typeof predicate != "function") {
                        throw new TypeError2(FUNC_ERROR_TEXT);
                    }
                    return function() {
                        var args = arguments;
                        switch(args.length){
                            case 0:
                                return !predicate.call(this);
                            case 1:
                                return !predicate.call(this, args[0]);
                            case 2:
                                return !predicate.call(this, args[0], args[1]);
                            case 3:
                                return !predicate.call(this, args[0], args[1], args[2]);
                        }
                        return !predicate.apply(this, args);
                    };
                }
                function once(func) {
                    return before(2, func);
                }
                var overArgs = castRest(function(func, transforms) {
                    transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
                    var funcsLength = transforms.length;
                    return baseRest(function(args) {
                        var index = -1, length = nativeMin(args.length, funcsLength);
                        while(++index < length){
                            args[index] = transforms[index].call(this, args[index]);
                        }
                        return apply(func, this, args);
                    });
                });
                var partial = baseRest(function(func, partials) {
                    var holders = replaceHolders(partials, getHolder(partial));
                    return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
                });
                var partialRight = baseRest(function(func, partials) {
                    var holders = replaceHolders(partials, getHolder(partialRight));
                    return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
                });
                var rearg = flatRest(function(func, indexes) {
                    return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
                });
                function rest(func, start) {
                    if (typeof func != "function") {
                        throw new TypeError2(FUNC_ERROR_TEXT);
                    }
                    start = start === undefined2 ? start : toInteger(start);
                    return baseRest(func, start);
                }
                function spread(func, start) {
                    if (typeof func != "function") {
                        throw new TypeError2(FUNC_ERROR_TEXT);
                    }
                    start = start == null ? 0 : nativeMax(toInteger(start), 0);
                    return baseRest(function(args) {
                        var array = args[start], otherArgs = castSlice(args, 0, start);
                        if (array) {
                            arrayPush(otherArgs, array);
                        }
                        return apply(func, this, otherArgs);
                    });
                }
                function throttle(func, wait, options) {
                    var leading = true, trailing = true;
                    if (typeof func != "function") {
                        throw new TypeError2(FUNC_ERROR_TEXT);
                    }
                    if (isObject(options)) {
                        leading = "leading" in options ? !!options.leading : leading;
                        trailing = "trailing" in options ? !!options.trailing : trailing;
                    }
                    return debounce(func, wait, {
                        "leading": leading,
                        "maxWait": wait,
                        "trailing": trailing
                    });
                }
                function unary(func) {
                    return ary(func, 1);
                }
                function wrap(value1, wrapper) {
                    return partial(castFunction(wrapper), value1);
                }
                function castArray() {
                    if (!arguments.length) {
                        return [];
                    }
                    var value1 = arguments[0];
                    return isArray(value1) ? value1 : [
                        value1
                    ];
                }
                function clone(value1) {
                    return baseClone(value1, CLONE_SYMBOLS_FLAG);
                }
                function cloneWith(value1, customizer) {
                    customizer = typeof customizer == "function" ? customizer : undefined2;
                    return baseClone(value1, CLONE_SYMBOLS_FLAG, customizer);
                }
                function cloneDeep2(value1) {
                    return baseClone(value1, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                }
                function cloneDeepWith(value1, customizer) {
                    customizer = typeof customizer == "function" ? customizer : undefined2;
                    return baseClone(value1, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
                }
                function conformsTo(object, source) {
                    return source == null || baseConformsTo(object, source, keys(source));
                }
                function eq(value1, other) {
                    return value1 === other || value1 !== value1 && other !== other;
                }
                var gt = createRelationalOperation(baseGt);
                var gte = createRelationalOperation(function(value1, other) {
                    return value1 >= other;
                });
                var isArguments = baseIsArguments(/* @__PURE__ */ function() {
                    return arguments;
                }()) ? baseIsArguments : function(value1) {
                    return isObjectLike(value1) && hasOwnProperty.call(value1, "callee") && !propertyIsEnumerable.call(value1, "callee");
                };
                var isArray = Array2.isArray;
                var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
                function isArrayLike(value1) {
                    return value1 != null && isLength(value1.length) && !isFunction(value1);
                }
                function isArrayLikeObject(value1) {
                    return isObjectLike(value1) && isArrayLike(value1);
                }
                function isBoolean3(value1) {
                    return value1 === true || value1 === false || isObjectLike(value1) && baseGetTag(value1) == boolTag2;
                }
                var isBuffer = nativeIsBuffer || stubFalse;
                var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
                function isElement(value1) {
                    return isObjectLike(value1) && value1.nodeType === 1 && !isPlainObject(value1);
                }
                function isEmpty2(value1) {
                    if (value1 == null) {
                        return true;
                    }
                    if (isArrayLike(value1) && (isArray(value1) || typeof value1 == "string" || typeof value1.splice == "function" || isBuffer(value1) || isTypedArray(value1) || isArguments(value1))) {
                        return !value1.length;
                    }
                    var tag = getTag(value1);
                    if (tag == mapTag || tag == setTag) {
                        return !value1.size;
                    }
                    if (isPrototype(value1)) {
                        return !baseKeys(value1).length;
                    }
                    for(var key in value1){
                        if (hasOwnProperty.call(value1, key)) {
                            return false;
                        }
                    }
                    return true;
                }
                function isEqual(value1, other) {
                    return baseIsEqual(value1, other);
                }
                function isEqualWith(value1, other, customizer) {
                    customizer = typeof customizer == "function" ? customizer : undefined2;
                    var result2 = customizer ? customizer(value1, other) : undefined2;
                    return result2 === undefined2 ? baseIsEqual(value1, other, undefined2, customizer) : !!result2;
                }
                function isError(value1) {
                    if (!isObjectLike(value1)) {
                        return false;
                    }
                    var tag = baseGetTag(value1);
                    return tag == errorTag || tag == domExcTag || typeof value1.message == "string" && typeof value1.name == "string" && !isPlainObject(value1);
                }
                function isFinite2(value1) {
                    return typeof value1 == "number" && nativeIsFinite(value1);
                }
                function isFunction(value1) {
                    if (!isObject(value1)) {
                        return false;
                    }
                    var tag = baseGetTag(value1);
                    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                }
                function isInteger(value1) {
                    return typeof value1 == "number" && value1 == toInteger(value1);
                }
                function isLength(value1) {
                    return typeof value1 == "number" && value1 > -1 && value1 % 1 == 0 && value1 <= MAX_SAFE_INTEGER;
                }
                function isObject(value1) {
                    var type = typeof value1;
                    return value1 != null && (type == "object" || type == "function");
                }
                function isObjectLike(value1) {
                    return value1 != null && typeof value1 == "object";
                }
                var isMap2 = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
                function isMatch(object, source) {
                    return object === source || baseIsMatch(object, source, getMatchData(source));
                }
                function isMatchWith(object, source, customizer) {
                    customizer = typeof customizer == "function" ? customizer : undefined2;
                    return baseIsMatch(object, source, getMatchData(source), customizer);
                }
                function isNaN2(value1) {
                    return isNumber3(value1) && value1 != +value1;
                }
                function isNative(value1) {
                    if (isMaskable(value1)) {
                        throw new Error2(CORE_ERROR_TEXT);
                    }
                    return baseIsNative(value1);
                }
                function isNull(value1) {
                    return value1 === null;
                }
                function isNil(value1) {
                    return value1 == null;
                }
                function isNumber3(value1) {
                    return typeof value1 == "number" || isObjectLike(value1) && baseGetTag(value1) == numberTag;
                }
                function isPlainObject(value1) {
                    if (!isObjectLike(value1) || baseGetTag(value1) != objectTag) {
                        return false;
                    }
                    var proto = getPrototype(value1);
                    if (proto === null) {
                        return true;
                    }
                    var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
                    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
                }
                var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
                function isSafeInteger(value1) {
                    return isInteger(value1) && value1 >= -MAX_SAFE_INTEGER && value1 <= MAX_SAFE_INTEGER;
                }
                var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
                function isString3(value1) {
                    return typeof value1 == "string" || !isArray(value1) && isObjectLike(value1) && baseGetTag(value1) == stringTag;
                }
                function isSymbol(value1) {
                    return typeof value1 == "symbol" || isObjectLike(value1) && baseGetTag(value1) == symbolTag;
                }
                var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
                function isUndefined(value1) {
                    return value1 === undefined2;
                }
                function isWeakMap(value1) {
                    return isObjectLike(value1) && getTag(value1) == weakMapTag;
                }
                function isWeakSet(value1) {
                    return isObjectLike(value1) && baseGetTag(value1) == weakSetTag;
                }
                var lt = createRelationalOperation(baseLt);
                var lte = createRelationalOperation(function(value1, other) {
                    return value1 <= other;
                });
                function toArray(value1) {
                    if (!value1) {
                        return [];
                    }
                    if (isArrayLike(value1)) {
                        return isString3(value1) ? stringToArray(value1) : copyArray(value1);
                    }
                    if (symIterator && value1[symIterator]) {
                        return iteratorToArray(value1[symIterator]());
                    }
                    var tag = getTag(value1), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
                    return func(value1);
                }
                function toFinite(value1) {
                    if (!value1) {
                        return value1 === 0 ? value1 : 0;
                    }
                    value1 = toNumber(value1);
                    if (value1 === INFINITY || value1 === -INFINITY) {
                        var sign = value1 < 0 ? -1 : 1;
                        return sign * MAX_INTEGER;
                    }
                    return value1 === value1 ? value1 : 0;
                }
                function toInteger(value1) {
                    var result2 = toFinite(value1), remainder = result2 % 1;
                    return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
                }
                function toLength(value1) {
                    return value1 ? baseClamp(toInteger(value1), 0, MAX_ARRAY_LENGTH) : 0;
                }
                function toNumber(value1) {
                    if (typeof value1 == "number") {
                        return value1;
                    }
                    if (isSymbol(value1)) {
                        return NAN;
                    }
                    if (isObject(value1)) {
                        var other = typeof value1.valueOf == "function" ? value1.valueOf() : value1;
                        value1 = isObject(other) ? other + "" : other;
                    }
                    if (typeof value1 != "string") {
                        return value1 === 0 ? value1 : +value1;
                    }
                    value1 = baseTrim(value1);
                    var isBinary = reIsBinary.test(value1);
                    return isBinary || reIsOctal.test(value1) ? freeParseInt(value1.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value1) ? NAN : +value1;
                }
                function toPlainObject(value1) {
                    return copyObject(value1, keysIn(value1));
                }
                function toSafeInteger(value1) {
                    return value1 ? baseClamp(toInteger(value1), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value1 === 0 ? value1 : 0;
                }
                function toString(value1) {
                    return value1 == null ? "" : baseToString(value1);
                }
                var assign = createAssigner(function(object, source) {
                    if (isPrototype(source) || isArrayLike(source)) {
                        copyObject(source, keys(source), object);
                        return;
                    }
                    for(var key in source){
                        if (hasOwnProperty.call(source, key)) {
                            assignValue(object, key, source[key]);
                        }
                    }
                });
                var assignIn = createAssigner(function(object, source) {
                    copyObject(source, keysIn(source), object);
                });
                var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
                    copyObject(source, keysIn(source), object, customizer);
                });
                var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
                    copyObject(source, keys(source), object, customizer);
                });
                var at = flatRest(baseAt);
                function create(prototype, properties) {
                    var result2 = baseCreate(prototype);
                    return properties == null ? result2 : baseAssign(result2, properties);
                }
                var defaults = baseRest(function(object, sources) {
                    object = Object2(object);
                    var index = -1;
                    var length = sources.length;
                    var guard = length > 2 ? sources[2] : undefined2;
                    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                        length = 1;
                    }
                    while(++index < length){
                        var source = sources[index];
                        var props = keysIn(source);
                        var propsIndex = -1;
                        var propsLength = props.length;
                        while(++propsIndex < propsLength){
                            var key = props[propsIndex];
                            var value1 = object[key];
                            if (value1 === undefined2 || eq(value1, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                                object[key] = source[key];
                            }
                        }
                    }
                    return object;
                });
                var defaultsDeep = baseRest(function(args) {
                    args.push(undefined2, customDefaultsMerge);
                    return apply(mergeWith, undefined2, args);
                });
                function findKey(object, predicate) {
                    return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
                }
                function findLastKey(object, predicate) {
                    return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
                }
                function forIn(object, iteratee2) {
                    return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
                }
                function forInRight(object, iteratee2) {
                    return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
                }
                function forOwn(object, iteratee2) {
                    return object && baseForOwn(object, getIteratee(iteratee2, 3));
                }
                function forOwnRight(object, iteratee2) {
                    return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
                }
                function functions(object) {
                    return object == null ? [] : baseFunctions(object, keys(object));
                }
                function functionsIn(object) {
                    return object == null ? [] : baseFunctions(object, keysIn(object));
                }
                function get(object, path5, defaultValue) {
                    var result2 = object == null ? undefined2 : baseGet(object, path5);
                    return result2 === undefined2 ? defaultValue : result2;
                }
                function has(object, path5) {
                    return object != null && hasPath(object, path5, baseHas);
                }
                function hasIn(object, path5) {
                    return object != null && hasPath(object, path5, baseHasIn);
                }
                var invert = createInverter(function(result2, value1, key) {
                    if (value1 != null && typeof value1.toString != "function") {
                        value1 = nativeObjectToString.call(value1);
                    }
                    result2[value1] = key;
                }, constant(identity));
                var invertBy = createInverter(function(result2, value1, key) {
                    if (value1 != null && typeof value1.toString != "function") {
                        value1 = nativeObjectToString.call(value1);
                    }
                    if (hasOwnProperty.call(result2, value1)) {
                        result2[value1].push(key);
                    } else {
                        result2[value1] = [
                            key
                        ];
                    }
                }, getIteratee);
                var invoke = baseRest(baseInvoke);
                function keys(object) {
                    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                }
                function keysIn(object) {
                    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                }
                function mapKeys(object, iteratee2) {
                    var result2 = {};
                    iteratee2 = getIteratee(iteratee2, 3);
                    baseForOwn(object, function(value1, key, object2) {
                        baseAssignValue(result2, iteratee2(value1, key, object2), value1);
                    });
                    return result2;
                }
                function mapValues(object, iteratee2) {
                    var result2 = {};
                    iteratee2 = getIteratee(iteratee2, 3);
                    baseForOwn(object, function(value1, key, object2) {
                        baseAssignValue(result2, key, iteratee2(value1, key, object2));
                    });
                    return result2;
                }
                var merge = createAssigner(function(object, source, srcIndex) {
                    baseMerge(object, source, srcIndex);
                });
                var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
                    baseMerge(object, source, srcIndex, customizer);
                });
                var omit = flatRest(function(object, paths) {
                    var result2 = {};
                    if (object == null) {
                        return result2;
                    }
                    var isDeep = false;
                    paths = arrayMap(paths, function(path5) {
                        path5 = castPath(path5, object);
                        isDeep || (isDeep = path5.length > 1);
                        return path5;
                    });
                    copyObject(object, getAllKeysIn(object), result2);
                    if (isDeep) {
                        result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                    }
                    var length = paths.length;
                    while(length--){
                        baseUnset(result2, paths[length]);
                    }
                    return result2;
                });
                function omitBy(object, predicate) {
                    return pickBy(object, negate(getIteratee(predicate)));
                }
                var pick = flatRest(function(object, paths) {
                    return object == null ? {} : basePick(object, paths);
                });
                function pickBy(object, predicate) {
                    if (object == null) {
                        return {};
                    }
                    var props = arrayMap(getAllKeysIn(object), function(prop) {
                        return [
                            prop
                        ];
                    });
                    predicate = getIteratee(predicate);
                    return basePickBy(object, props, function(value1, path5) {
                        return predicate(value1, path5[0]);
                    });
                }
                function result(object, path5, defaultValue) {
                    path5 = castPath(path5, object);
                    var index = -1, length = path5.length;
                    if (!length) {
                        length = 1;
                        object = undefined2;
                    }
                    while(++index < length){
                        var value1 = object == null ? undefined2 : object[toKey(path5[index])];
                        if (value1 === undefined2) {
                            index = length;
                            value1 = defaultValue;
                        }
                        object = isFunction(value1) ? value1.call(object) : value1;
                    }
                    return object;
                }
                function set2(object, path5, value1) {
                    return object == null ? object : baseSet(object, path5, value1);
                }
                function setWith(object, path5, value1, customizer) {
                    customizer = typeof customizer == "function" ? customizer : undefined2;
                    return object == null ? object : baseSet(object, path5, value1, customizer);
                }
                var toPairs = createToPairs(keys);
                var toPairsIn = createToPairs(keysIn);
                function transform(object, iteratee2, accumulator) {
                    var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
                    iteratee2 = getIteratee(iteratee2, 4);
                    if (accumulator == null) {
                        var Ctor = object && object.constructor;
                        if (isArrLike) {
                            accumulator = isArr ? new Ctor() : [];
                        } else if (isObject(object)) {
                            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                        } else {
                            accumulator = {};
                        }
                    }
                    (isArrLike ? arrayEach : baseForOwn)(object, function(value1, index, object2) {
                        return iteratee2(accumulator, value1, index, object2);
                    });
                    return accumulator;
                }
                function unset(object, path5) {
                    return object == null ? true : baseUnset(object, path5);
                }
                function update(object, path5, updater) {
                    return object == null ? object : baseUpdate(object, path5, castFunction(updater));
                }
                function updateWith(object, path5, updater, customizer) {
                    customizer = typeof customizer == "function" ? customizer : undefined2;
                    return object == null ? object : baseUpdate(object, path5, castFunction(updater), customizer);
                }
                function values(object) {
                    return object == null ? [] : baseValues(object, keys(object));
                }
                function valuesIn(object) {
                    return object == null ? [] : baseValues(object, keysIn(object));
                }
                function clamp(number, lower, upper) {
                    if (upper === undefined2) {
                        upper = lower;
                        lower = undefined2;
                    }
                    if (upper !== undefined2) {
                        upper = toNumber(upper);
                        upper = upper === upper ? upper : 0;
                    }
                    if (lower !== undefined2) {
                        lower = toNumber(lower);
                        lower = lower === lower ? lower : 0;
                    }
                    return baseClamp(toNumber(number), lower, upper);
                }
                function inRange(number, start, end) {
                    start = toFinite(start);
                    if (end === undefined2) {
                        end = start;
                        start = 0;
                    } else {
                        end = toFinite(end);
                    }
                    number = toNumber(number);
                    return baseInRange(number, start, end);
                }
                function random(lower, upper, floating) {
                    if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
                        upper = floating = undefined2;
                    }
                    if (floating === undefined2) {
                        if (typeof upper == "boolean") {
                            floating = upper;
                            upper = undefined2;
                        } else if (typeof lower == "boolean") {
                            floating = lower;
                            lower = undefined2;
                        }
                    }
                    if (lower === undefined2 && upper === undefined2) {
                        lower = 0;
                        upper = 1;
                    } else {
                        lower = toFinite(lower);
                        if (upper === undefined2) {
                            upper = lower;
                            lower = 0;
                        } else {
                            upper = toFinite(upper);
                        }
                    }
                    if (lower > upper) {
                        var temp = lower;
                        lower = upper;
                        upper = temp;
                    }
                    if (floating || lower % 1 || upper % 1) {
                        var rand = nativeRandom();
                        return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
                    }
                    return baseRandom(lower, upper);
                }
                var camelCase = createCompounder(function(result2, word, index) {
                    word = word.toLowerCase();
                    return result2 + (index ? capitalize(word) : word);
                });
                function capitalize(string2) {
                    return upperFirst(toString(string2).toLowerCase());
                }
                function deburr(string2) {
                    string2 = toString(string2);
                    return string2 && string2.replace(reLatin, deburrLetter).replace(reComboMark, "");
                }
                function endsWith2(string2, target, position) {
                    string2 = toString(string2);
                    target = baseToString(target);
                    var length = string2.length;
                    position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
                    var end = position;
                    position -= target.length;
                    return position >= 0 && string2.slice(position, end) == target;
                }
                function escape2(string2) {
                    string2 = toString(string2);
                    return string2 && reHasUnescapedHtml.test(string2) ? string2.replace(reUnescapedHtml, escapeHtmlChar) : string2;
                }
                function escapeRegExp(string2) {
                    string2 = toString(string2);
                    return string2 && reHasRegExpChar.test(string2) ? string2.replace(reRegExpChar, "\\$&") : string2;
                }
                var kebabCase = createCompounder(function(result2, word, index) {
                    return result2 + (index ? "-" : "") + word.toLowerCase();
                });
                var lowerCase = createCompounder(function(result2, word, index) {
                    return result2 + (index ? " " : "") + word.toLowerCase();
                });
                var lowerFirst = createCaseFirst("toLowerCase");
                function pad(string2, length, chars) {
                    string2 = toString(string2);
                    length = toInteger(length);
                    var strLength = length ? stringSize(string2) : 0;
                    if (!length || strLength >= length) {
                        return string2;
                    }
                    var mid = (length - strLength) / 2;
                    return createPadding(nativeFloor(mid), chars) + string2 + createPadding(nativeCeil(mid), chars);
                }
                function padEnd(string2, length, chars) {
                    string2 = toString(string2);
                    length = toInteger(length);
                    var strLength = length ? stringSize(string2) : 0;
                    return length && strLength < length ? string2 + createPadding(length - strLength, chars) : string2;
                }
                function padStart(string2, length, chars) {
                    string2 = toString(string2);
                    length = toInteger(length);
                    var strLength = length ? stringSize(string2) : 0;
                    return length && strLength < length ? createPadding(length - strLength, chars) + string2 : string2;
                }
                function parseInt2(string2, radix, guard) {
                    if (guard || radix == null) {
                        radix = 0;
                    } else if (radix) {
                        radix = +radix;
                    }
                    return nativeParseInt(toString(string2).replace(reTrimStart, ""), radix || 0);
                }
                function repeat(string2, n, guard) {
                    if (guard ? isIterateeCall(string2, n, guard) : n === undefined2) {
                        n = 1;
                    } else {
                        n = toInteger(n);
                    }
                    return baseRepeat(toString(string2), n);
                }
                function replace() {
                    var args = arguments, string2 = toString(args[0]);
                    return args.length < 3 ? string2 : string2.replace(args[1], args[2]);
                }
                var snakeCase = createCompounder(function(result2, word, index) {
                    return result2 + (index ? "_" : "") + word.toLowerCase();
                });
                function split(string2, separator, limit) {
                    if (limit && typeof limit != "number" && isIterateeCall(string2, separator, limit)) {
                        separator = limit = undefined2;
                    }
                    limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
                    if (!limit) {
                        return [];
                    }
                    string2 = toString(string2);
                    if (string2 && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
                        separator = baseToString(separator);
                        if (!separator && hasUnicode(string2)) {
                            return castSlice(stringToArray(string2), 0, limit);
                        }
                    }
                    return string2.split(separator, limit);
                }
                var startCase = createCompounder(function(result2, word, index) {
                    return result2 + (index ? " " : "") + upperFirst(word);
                });
                function startsWith2(string2, target, position) {
                    string2 = toString(string2);
                    position = position == null ? 0 : baseClamp(toInteger(position), 0, string2.length);
                    target = baseToString(target);
                    return string2.slice(position, position + target.length) == target;
                }
                function template(string2, options, guard) {
                    var settings = lodash.templateSettings;
                    if (guard && isIterateeCall(string2, options, guard)) {
                        options = undefined2;
                    }
                    string2 = toString(string2);
                    options = assignInWith({}, options, settings, customDefaultsAssignIn);
                    var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
                    var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
                    var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
                    var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
                    string2.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                        interpolateValue || (interpolateValue = esTemplateValue);
                        source += string2.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                        if (escapeValue) {
                            isEscaping = true;
                            source += "' +\n__e(" + escapeValue + ") +\n'";
                        }
                        if (evaluateValue) {
                            isEvaluating = true;
                            source += "';\n" + evaluateValue + ";\n__p += '";
                        }
                        if (interpolateValue) {
                            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                        }
                        index = offset + match.length;
                        return match;
                    });
                    source += "';\n";
                    var variable = hasOwnProperty.call(options, "variable") && options.variable;
                    if (!variable) {
                        source = "with (obj) {\n" + source + "\n}\n";
                    } else if (reForbiddenIdentifierChars.test(variable)) {
                        throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
                    }
                    source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
                    source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
                    var result2 = attempt(function() {
                        return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
                    });
                    result2.source = source;
                    if (isError(result2)) {
                        throw result2;
                    }
                    return result2;
                }
                function toLower(value1) {
                    return toString(value1).toLowerCase();
                }
                function toUpper(value1) {
                    return toString(value1).toUpperCase();
                }
                function trim(string2, chars, guard) {
                    string2 = toString(string2);
                    if (string2 && (guard || chars === undefined2)) {
                        return baseTrim(string2);
                    }
                    if (!string2 || !(chars = baseToString(chars))) {
                        return string2;
                    }
                    var strSymbols = stringToArray(string2), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
                    return castSlice(strSymbols, start, end).join("");
                }
                function trimEnd(string2, chars, guard) {
                    string2 = toString(string2);
                    if (string2 && (guard || chars === undefined2)) {
                        return string2.slice(0, trimmedEndIndex(string2) + 1);
                    }
                    if (!string2 || !(chars = baseToString(chars))) {
                        return string2;
                    }
                    var strSymbols = stringToArray(string2), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
                    return castSlice(strSymbols, 0, end).join("");
                }
                function trimStart(string2, chars, guard) {
                    string2 = toString(string2);
                    if (string2 && (guard || chars === undefined2)) {
                        return string2.replace(reTrimStart, "");
                    }
                    if (!string2 || !(chars = baseToString(chars))) {
                        return string2;
                    }
                    var strSymbols = stringToArray(string2), start = charsStartIndex(strSymbols, stringToArray(chars));
                    return castSlice(strSymbols, start).join("");
                }
                function truncate(string2, options) {
                    var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
                    if (isObject(options)) {
                        var separator = "separator" in options ? options.separator : separator;
                        length = "length" in options ? toInteger(options.length) : length;
                        omission = "omission" in options ? baseToString(options.omission) : omission;
                    }
                    string2 = toString(string2);
                    var strLength = string2.length;
                    if (hasUnicode(string2)) {
                        var strSymbols = stringToArray(string2);
                        strLength = strSymbols.length;
                    }
                    if (length >= strLength) {
                        return string2;
                    }
                    var end = length - stringSize(omission);
                    if (end < 1) {
                        return omission;
                    }
                    var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string2.slice(0, end);
                    if (separator === undefined2) {
                        return result2 + omission;
                    }
                    if (strSymbols) {
                        end += result2.length - end;
                    }
                    if (isRegExp(separator)) {
                        if (string2.slice(end).search(separator)) {
                            var match, substring = result2;
                            if (!separator.global) {
                                separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
                            }
                            separator.lastIndex = 0;
                            while(match = separator.exec(substring)){
                                var newEnd = match.index;
                            }
                            result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
                        }
                    } else if (string2.indexOf(baseToString(separator), end) != end) {
                        var index = result2.lastIndexOf(separator);
                        if (index > -1) {
                            result2 = result2.slice(0, index);
                        }
                    }
                    return result2 + omission;
                }
                function unescape3(string2) {
                    string2 = toString(string2);
                    return string2 && reHasEscapedHtml.test(string2) ? string2.replace(reEscapedHtml, unescapeHtmlChar) : string2;
                }
                var upperCase = createCompounder(function(result2, word, index) {
                    return result2 + (index ? " " : "") + word.toUpperCase();
                });
                var upperFirst = createCaseFirst("toUpperCase");
                function words(string2, pattern, guard) {
                    string2 = toString(string2);
                    pattern = guard ? undefined2 : pattern;
                    if (pattern === undefined2) {
                        return hasUnicodeWord(string2) ? unicodeWords(string2) : asciiWords(string2);
                    }
                    return string2.match(pattern) || [];
                }
                var attempt = baseRest(function(func, args) {
                    try {
                        return apply(func, undefined2, args);
                    } catch (e) {
                        return isError(e) ? e : new Error2(e);
                    }
                });
                var bindAll = flatRest(function(object, methodNames) {
                    arrayEach(methodNames, function(key) {
                        key = toKey(key);
                        baseAssignValue(object, key, bind(object[key], object));
                    });
                    return object;
                });
                function cond(pairs2) {
                    var length = pairs2 == null ? 0 : pairs2.length, toIteratee = getIteratee();
                    pairs2 = !length ? [] : arrayMap(pairs2, function(pair) {
                        if (typeof pair[1] != "function") {
                            throw new TypeError2(FUNC_ERROR_TEXT);
                        }
                        return [
                            toIteratee(pair[0]),
                            pair[1]
                        ];
                    });
                    return baseRest(function(args) {
                        var index = -1;
                        while(++index < length){
                            var pair = pairs2[index];
                            if (apply(pair[0], this, args)) {
                                return apply(pair[1], this, args);
                            }
                        }
                    });
                }
                function conforms(source) {
                    return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                }
                function constant(value1) {
                    return function() {
                        return value1;
                    };
                }
                function defaultTo(value1, defaultValue) {
                    return value1 == null || value1 !== value1 ? defaultValue : value1;
                }
                var flow = createFlow();
                var flowRight = createFlow(true);
                function identity(value1) {
                    return value1;
                }
                function iteratee(func) {
                    return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
                }
                function matches(source) {
                    return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                }
                function matchesProperty(path5, srcValue) {
                    return baseMatchesProperty(path5, baseClone(srcValue, CLONE_DEEP_FLAG));
                }
                var method = baseRest(function(path5, args) {
                    return function(object) {
                        return baseInvoke(object, path5, args);
                    };
                });
                var methodOf = baseRest(function(object, args) {
                    return function(path5) {
                        return baseInvoke(object, path5, args);
                    };
                });
                function mixin(object, source, options) {
                    var props = keys(source), methodNames = baseFunctions(source, props);
                    if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
                        options = source;
                        source = object;
                        object = this;
                        methodNames = baseFunctions(source, keys(source));
                    }
                    var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
                    arrayEach(methodNames, function(methodName) {
                        var func = source[methodName];
                        object[methodName] = func;
                        if (isFunc) {
                            object.prototype[methodName] = function() {
                                var chainAll = this.__chain__;
                                if (chain2 || chainAll) {
                                    var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                                    actions.push({
                                        "func": func,
                                        "args": arguments,
                                        "thisArg": object
                                    });
                                    result2.__chain__ = chainAll;
                                    return result2;
                                }
                                return func.apply(object, arrayPush([
                                    this.value()
                                ], arguments));
                            };
                        }
                    });
                    return object;
                }
                function noConflict() {
                    if (root._ === this) {
                        root._ = oldDash;
                    }
                    return this;
                }
                function noop() {}
                function nthArg(n) {
                    n = toInteger(n);
                    return baseRest(function(args) {
                        return baseNth(args, n);
                    });
                }
                var over = createOver(arrayMap);
                var overEvery = createOver(arrayEvery);
                var overSome = createOver(arraySome);
                function property(path5) {
                    return isKey(path5) ? baseProperty(toKey(path5)) : basePropertyDeep(path5);
                }
                function propertyOf(object) {
                    return function(path5) {
                        return object == null ? undefined2 : baseGet(object, path5);
                    };
                }
                var range = createRange3();
                var rangeRight = createRange3(true);
                function stubArray() {
                    return [];
                }
                function stubFalse() {
                    return false;
                }
                function stubObject() {
                    return {};
                }
                function stubString() {
                    return "";
                }
                function stubTrue() {
                    return true;
                }
                function times(n, iteratee2) {
                    n = toInteger(n);
                    if (n < 1 || n > MAX_SAFE_INTEGER) {
                        return [];
                    }
                    var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
                    iteratee2 = getIteratee(iteratee2);
                    n -= MAX_ARRAY_LENGTH;
                    var result2 = baseTimes(length, iteratee2);
                    while(++index < n){
                        iteratee2(index);
                    }
                    return result2;
                }
                function toPath(value1) {
                    if (isArray(value1)) {
                        return arrayMap(value1, toKey);
                    }
                    return isSymbol(value1) ? [
                        value1
                    ] : copyArray(stringToPath(toString(value1)));
                }
                function uniqueId(prefix) {
                    var id = ++idCounter3;
                    return toString(prefix) + id;
                }
                var add = createMathOperation(function(augend, addend) {
                    return augend + addend;
                }, 0);
                var ceil = createRound("ceil");
                var divide = createMathOperation(function(dividend, divisor) {
                    return dividend / divisor;
                }, 1);
                var floor = createRound("floor");
                function max(array) {
                    return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
                }
                function maxBy(array, iteratee2) {
                    return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
                }
                function mean(array) {
                    return baseMean(array, identity);
                }
                function meanBy(array, iteratee2) {
                    return baseMean(array, getIteratee(iteratee2, 2));
                }
                function min(array) {
                    return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
                }
                function minBy(array, iteratee2) {
                    return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
                }
                var multiply = createMathOperation(function(multiplier, multiplicand) {
                    return multiplier * multiplicand;
                }, 1);
                var round = createRound("round");
                var subtract = createMathOperation(function(minuend, subtrahend) {
                    return minuend - subtrahend;
                }, 0);
                function sum(array) {
                    return array && array.length ? baseSum(array, identity) : 0;
                }
                function sumBy(array, iteratee2) {
                    return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
                }
                lodash.after = after;
                lodash.ary = ary;
                lodash.assign = assign;
                lodash.assignIn = assignIn;
                lodash.assignInWith = assignInWith;
                lodash.assignWith = assignWith;
                lodash.at = at;
                lodash.before = before;
                lodash.bind = bind;
                lodash.bindAll = bindAll;
                lodash.bindKey = bindKey;
                lodash.castArray = castArray;
                lodash.chain = chain;
                lodash.chunk = chunk;
                lodash.compact = compact;
                lodash.concat = concat;
                lodash.cond = cond;
                lodash.conforms = conforms;
                lodash.constant = constant;
                lodash.countBy = countBy;
                lodash.create = create;
                lodash.curry = curry;
                lodash.curryRight = curryRight;
                lodash.debounce = debounce;
                lodash.defaults = defaults;
                lodash.defaultsDeep = defaultsDeep;
                lodash.defer = defer;
                lodash.delay = delay;
                lodash.difference = difference;
                lodash.differenceBy = differenceBy;
                lodash.differenceWith = differenceWith;
                lodash.drop = drop;
                lodash.dropRight = dropRight;
                lodash.dropRightWhile = dropRightWhile;
                lodash.dropWhile = dropWhile;
                lodash.fill = fill;
                lodash.filter = filter;
                lodash.flatMap = flatMap;
                lodash.flatMapDeep = flatMapDeep;
                lodash.flatMapDepth = flatMapDepth;
                lodash.flatten = flatten;
                lodash.flattenDeep = flattenDeep;
                lodash.flattenDepth = flattenDepth;
                lodash.flip = flip;
                lodash.flow = flow;
                lodash.flowRight = flowRight;
                lodash.fromPairs = fromPairs;
                lodash.functions = functions;
                lodash.functionsIn = functionsIn;
                lodash.groupBy = groupBy;
                lodash.initial = initial;
                lodash.intersection = intersection;
                lodash.intersectionBy = intersectionBy;
                lodash.intersectionWith = intersectionWith;
                lodash.invert = invert;
                lodash.invertBy = invertBy;
                lodash.invokeMap = invokeMap;
                lodash.iteratee = iteratee;
                lodash.keyBy = keyBy;
                lodash.keys = keys;
                lodash.keysIn = keysIn;
                lodash.map = map2;
                lodash.mapKeys = mapKeys;
                lodash.mapValues = mapValues;
                lodash.matches = matches;
                lodash.matchesProperty = matchesProperty;
                lodash.memoize = memoize;
                lodash.merge = merge;
                lodash.mergeWith = mergeWith;
                lodash.method = method;
                lodash.methodOf = methodOf;
                lodash.mixin = mixin;
                lodash.negate = negate;
                lodash.nthArg = nthArg;
                lodash.omit = omit;
                lodash.omitBy = omitBy;
                lodash.once = once;
                lodash.orderBy = orderBy;
                lodash.over = over;
                lodash.overArgs = overArgs;
                lodash.overEvery = overEvery;
                lodash.overSome = overSome;
                lodash.partial = partial;
                lodash.partialRight = partialRight;
                lodash.partition = partition;
                lodash.pick = pick;
                lodash.pickBy = pickBy;
                lodash.property = property;
                lodash.propertyOf = propertyOf;
                lodash.pull = pull;
                lodash.pullAll = pullAll;
                lodash.pullAllBy = pullAllBy;
                lodash.pullAllWith = pullAllWith;
                lodash.pullAt = pullAt;
                lodash.range = range;
                lodash.rangeRight = rangeRight;
                lodash.rearg = rearg;
                lodash.reject = reject;
                lodash.remove = remove;
                lodash.rest = rest;
                lodash.reverse = reverse;
                lodash.sampleSize = sampleSize;
                lodash.set = set2;
                lodash.setWith = setWith;
                lodash.shuffle = shuffle;
                lodash.slice = slice;
                lodash.sortBy = sortBy;
                lodash.sortedUniq = sortedUniq;
                lodash.sortedUniqBy = sortedUniqBy;
                lodash.split = split;
                lodash.spread = spread;
                lodash.tail = tail;
                lodash.take = take;
                lodash.takeRight = takeRight;
                lodash.takeRightWhile = takeRightWhile;
                lodash.takeWhile = takeWhile;
                lodash.tap = tap;
                lodash.throttle = throttle;
                lodash.thru = thru;
                lodash.toArray = toArray;
                lodash.toPairs = toPairs;
                lodash.toPairsIn = toPairsIn;
                lodash.toPath = toPath;
                lodash.toPlainObject = toPlainObject;
                lodash.transform = transform;
                lodash.unary = unary;
                lodash.union = union;
                lodash.unionBy = unionBy;
                lodash.unionWith = unionWith;
                lodash.uniq = uniq;
                lodash.uniqBy = uniqBy;
                lodash.uniqWith = uniqWith;
                lodash.unset = unset;
                lodash.unzip = unzip;
                lodash.unzipWith = unzipWith;
                lodash.update = update;
                lodash.updateWith = updateWith;
                lodash.values = values;
                lodash.valuesIn = valuesIn;
                lodash.without = without;
                lodash.words = words;
                lodash.wrap = wrap;
                lodash.xor = xor;
                lodash.xorBy = xorBy;
                lodash.xorWith = xorWith;
                lodash.zip = zip;
                lodash.zipObject = zipObject;
                lodash.zipObjectDeep = zipObjectDeep;
                lodash.zipWith = zipWith;
                lodash.entries = toPairs;
                lodash.entriesIn = toPairsIn;
                lodash.extend = assignIn;
                lodash.extendWith = assignInWith;
                mixin(lodash, lodash);
                lodash.add = add;
                lodash.attempt = attempt;
                lodash.camelCase = camelCase;
                lodash.capitalize = capitalize;
                lodash.ceil = ceil;
                lodash.clamp = clamp;
                lodash.clone = clone;
                lodash.cloneDeep = cloneDeep2;
                lodash.cloneDeepWith = cloneDeepWith;
                lodash.cloneWith = cloneWith;
                lodash.conformsTo = conformsTo;
                lodash.deburr = deburr;
                lodash.defaultTo = defaultTo;
                lodash.divide = divide;
                lodash.endsWith = endsWith2;
                lodash.eq = eq;
                lodash.escape = escape2;
                lodash.escapeRegExp = escapeRegExp;
                lodash.every = every;
                lodash.find = find;
                lodash.findIndex = findIndex;
                lodash.findKey = findKey;
                lodash.findLast = findLast;
                lodash.findLastIndex = findLastIndex;
                lodash.findLastKey = findLastKey;
                lodash.floor = floor;
                lodash.forEach = forEach;
                lodash.forEachRight = forEachRight;
                lodash.forIn = forIn;
                lodash.forInRight = forInRight;
                lodash.forOwn = forOwn;
                lodash.forOwnRight = forOwnRight;
                lodash.get = get;
                lodash.gt = gt;
                lodash.gte = gte;
                lodash.has = has;
                lodash.hasIn = hasIn;
                lodash.head = head;
                lodash.identity = identity;
                lodash.includes = includes;
                lodash.indexOf = indexOf2;
                lodash.inRange = inRange;
                lodash.invoke = invoke;
                lodash.isArguments = isArguments;
                lodash.isArray = isArray;
                lodash.isArrayBuffer = isArrayBuffer;
                lodash.isArrayLike = isArrayLike;
                lodash.isArrayLikeObject = isArrayLikeObject;
                lodash.isBoolean = isBoolean3;
                lodash.isBuffer = isBuffer;
                lodash.isDate = isDate;
                lodash.isElement = isElement;
                lodash.isEmpty = isEmpty2;
                lodash.isEqual = isEqual;
                lodash.isEqualWith = isEqualWith;
                lodash.isError = isError;
                lodash.isFinite = isFinite2;
                lodash.isFunction = isFunction;
                lodash.isInteger = isInteger;
                lodash.isLength = isLength;
                lodash.isMap = isMap2;
                lodash.isMatch = isMatch;
                lodash.isMatchWith = isMatchWith;
                lodash.isNaN = isNaN2;
                lodash.isNative = isNative;
                lodash.isNil = isNil;
                lodash.isNull = isNull;
                lodash.isNumber = isNumber3;
                lodash.isObject = isObject;
                lodash.isObjectLike = isObjectLike;
                lodash.isPlainObject = isPlainObject;
                lodash.isRegExp = isRegExp;
                lodash.isSafeInteger = isSafeInteger;
                lodash.isSet = isSet;
                lodash.isString = isString3;
                lodash.isSymbol = isSymbol;
                lodash.isTypedArray = isTypedArray;
                lodash.isUndefined = isUndefined;
                lodash.isWeakMap = isWeakMap;
                lodash.isWeakSet = isWeakSet;
                lodash.join = join;
                lodash.kebabCase = kebabCase;
                lodash.last = last;
                lodash.lastIndexOf = lastIndexOf;
                lodash.lowerCase = lowerCase;
                lodash.lowerFirst = lowerFirst;
                lodash.lt = lt;
                lodash.lte = lte;
                lodash.max = max;
                lodash.maxBy = maxBy;
                lodash.mean = mean;
                lodash.meanBy = meanBy;
                lodash.min = min;
                lodash.minBy = minBy;
                lodash.stubArray = stubArray;
                lodash.stubFalse = stubFalse;
                lodash.stubObject = stubObject;
                lodash.stubString = stubString;
                lodash.stubTrue = stubTrue;
                lodash.multiply = multiply;
                lodash.nth = nth;
                lodash.noConflict = noConflict;
                lodash.noop = noop;
                lodash.now = now;
                lodash.pad = pad;
                lodash.padEnd = padEnd;
                lodash.padStart = padStart;
                lodash.parseInt = parseInt2;
                lodash.random = random;
                lodash.reduce = reduce;
                lodash.reduceRight = reduceRight;
                lodash.repeat = repeat;
                lodash.replace = replace;
                lodash.result = result;
                lodash.round = round;
                lodash.runInContext = runInContext2;
                lodash.sample = sample;
                lodash.size = size;
                lodash.snakeCase = snakeCase;
                lodash.some = some;
                lodash.sortedIndex = sortedIndex;
                lodash.sortedIndexBy = sortedIndexBy;
                lodash.sortedIndexOf = sortedIndexOf;
                lodash.sortedLastIndex = sortedLastIndex;
                lodash.sortedLastIndexBy = sortedLastIndexBy;
                lodash.sortedLastIndexOf = sortedLastIndexOf;
                lodash.startCase = startCase;
                lodash.startsWith = startsWith2;
                lodash.subtract = subtract;
                lodash.sum = sum;
                lodash.sumBy = sumBy;
                lodash.template = template;
                lodash.times = times;
                lodash.toFinite = toFinite;
                lodash.toInteger = toInteger;
                lodash.toLength = toLength;
                lodash.toLower = toLower;
                lodash.toNumber = toNumber;
                lodash.toSafeInteger = toSafeInteger;
                lodash.toString = toString;
                lodash.toUpper = toUpper;
                lodash.trim = trim;
                lodash.trimEnd = trimEnd;
                lodash.trimStart = trimStart;
                lodash.truncate = truncate;
                lodash.unescape = unescape3;
                lodash.uniqueId = uniqueId;
                lodash.upperCase = upperCase;
                lodash.upperFirst = upperFirst;
                lodash.each = forEach;
                lodash.eachRight = forEachRight;
                lodash.first = head;
                mixin(lodash, function() {
                    var source = {};
                    baseForOwn(lodash, function(func, methodName) {
                        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                            source[methodName] = func;
                        }
                    });
                    return source;
                }(), {
                    "chain": false
                });
                lodash.VERSION = VERSION;
                arrayEach([
                    "bind",
                    "bindKey",
                    "curry",
                    "curryRight",
                    "partial",
                    "partialRight"
                ], function(methodName) {
                    lodash[methodName].placeholder = lodash;
                });
                arrayEach([
                    "drop",
                    "take"
                ], function(methodName, index) {
                    LazyWrapper.prototype[methodName] = function(n) {
                        n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
                        var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
                        if (result2.__filtered__) {
                            result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
                        } else {
                            result2.__views__.push({
                                "size": nativeMin(n, MAX_ARRAY_LENGTH),
                                "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                            });
                        }
                        return result2;
                    };
                    LazyWrapper.prototype[methodName + "Right"] = function(n) {
                        return this.reverse()[methodName](n).reverse();
                    };
                });
                arrayEach([
                    "filter",
                    "map",
                    "takeWhile"
                ], function(methodName, index) {
                    var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
                    LazyWrapper.prototype[methodName] = function(iteratee2) {
                        var result2 = this.clone();
                        result2.__iteratees__.push({
                            "iteratee": getIteratee(iteratee2, 3),
                            "type": type
                        });
                        result2.__filtered__ = result2.__filtered__ || isFilter;
                        return result2;
                    };
                });
                arrayEach([
                    "head",
                    "last"
                ], function(methodName, index) {
                    var takeName = "take" + (index ? "Right" : "");
                    LazyWrapper.prototype[methodName] = function() {
                        return this[takeName](1).value()[0];
                    };
                });
                arrayEach([
                    "initial",
                    "tail"
                ], function(methodName, index) {
                    var dropName = "drop" + (index ? "" : "Right");
                    LazyWrapper.prototype[methodName] = function() {
                        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                    };
                });
                LazyWrapper.prototype.compact = function() {
                    return this.filter(identity);
                };
                LazyWrapper.prototype.find = function(predicate) {
                    return this.filter(predicate).head();
                };
                LazyWrapper.prototype.findLast = function(predicate) {
                    return this.reverse().find(predicate);
                };
                LazyWrapper.prototype.invokeMap = baseRest(function(path5, args) {
                    if (typeof path5 == "function") {
                        return new LazyWrapper(this);
                    }
                    return this.map(function(value1) {
                        return baseInvoke(value1, path5, args);
                    });
                });
                LazyWrapper.prototype.reject = function(predicate) {
                    return this.filter(negate(getIteratee(predicate)));
                };
                LazyWrapper.prototype.slice = function(start, end) {
                    start = toInteger(start);
                    var result2 = this;
                    if (result2.__filtered__ && (start > 0 || end < 0)) {
                        return new LazyWrapper(result2);
                    }
                    if (start < 0) {
                        result2 = result2.takeRight(-start);
                    } else if (start) {
                        result2 = result2.drop(start);
                    }
                    if (end !== undefined2) {
                        end = toInteger(end);
                        result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
                    }
                    return result2;
                };
                LazyWrapper.prototype.takeRightWhile = function(predicate) {
                    return this.reverse().takeWhile(predicate).reverse();
                };
                LazyWrapper.prototype.toArray = function() {
                    return this.take(MAX_ARRAY_LENGTH);
                };
                baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                    var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
                    if (!lodashFunc) {
                        return;
                    }
                    lodash.prototype[methodName] = function() {
                        var value1 = this.__wrapped__, args = isTaker ? [
                            1
                        ] : arguments, isLazy = value1 instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value1);
                        var interceptor = function(value2) {
                            var result3 = lodashFunc.apply(lodash, arrayPush([
                                value2
                            ], args));
                            return isTaker && chainAll ? result3[0] : result3;
                        };
                        if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                            isLazy = useLazy = false;
                        }
                        var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                        if (!retUnwrapped && useLazy) {
                            value1 = onlyLazy ? value1 : new LazyWrapper(this);
                            var result2 = func.apply(value1, args);
                            result2.__actions__.push({
                                "func": thru,
                                "args": [
                                    interceptor
                                ],
                                "thisArg": undefined2
                            });
                            return new LodashWrapper(result2, chainAll);
                        }
                        if (isUnwrapped && onlyLazy) {
                            return func.apply(this, args);
                        }
                        result2 = this.thru(interceptor);
                        return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
                    };
                });
                arrayEach([
                    "pop",
                    "push",
                    "shift",
                    "sort",
                    "splice",
                    "unshift"
                ], function(methodName) {
                    var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
                    lodash.prototype[methodName] = function() {
                        var args = arguments;
                        if (retUnwrapped && !this.__chain__) {
                            var value1 = this.value();
                            return func.apply(isArray(value1) ? value1 : [], args);
                        }
                        return this[chainName](function(value2) {
                            return func.apply(isArray(value2) ? value2 : [], args);
                        });
                    };
                });
                baseForOwn(LazyWrapper.prototype, function(func, methodName) {
                    var lodashFunc = lodash[methodName];
                    if (lodashFunc) {
                        var key = lodashFunc.name + "";
                        if (!hasOwnProperty.call(realNames, key)) {
                            realNames[key] = [];
                        }
                        realNames[key].push({
                            "name": methodName,
                            "func": lodashFunc
                        });
                    }
                });
                realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [
                    {
                        "name": "wrapper",
                        "func": undefined2
                    }
                ];
                LazyWrapper.prototype.clone = lazyClone;
                LazyWrapper.prototype.reverse = lazyReverse;
                LazyWrapper.prototype.value = lazyValue;
                lodash.prototype.at = wrapperAt;
                lodash.prototype.chain = wrapperChain;
                lodash.prototype.commit = wrapperCommit;
                lodash.prototype.next = wrapperNext;
                lodash.prototype.plant = wrapperPlant;
                lodash.prototype.reverse = wrapperReverse;
                lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
                lodash.prototype.first = lodash.prototype.head;
                if (symIterator) {
                    lodash.prototype[symIterator] = wrapperToIterator;
                }
                return lodash;
            };
            var _2 = runInContext();
            if (typeof define == "function" && "object" == "object" && __webpack_require__.amdO) {
                root._ = _2;
                define(function() {
                    return _2;
                });
            } else if (freeModule) {
                (freeModule.exports = _2)._ = _2;
                freeExports._ = _2;
            } else {
                root._ = _2;
            }
        }).call(exports);
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/is.js
var require_is = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/is.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
        function boolean(value1) {
            return value1 === true || value1 === false;
        }
        exports.boolean = boolean;
        function string2(value1) {
            return typeof value1 === "string" || value1 instanceof String;
        }
        exports.string = string2;
        function number(value1) {
            return typeof value1 === "number" || value1 instanceof Number;
        }
        exports.number = number;
        function error(value1) {
            return value1 instanceof Error;
        }
        exports.error = error;
        function func(value1) {
            return typeof value1 === "function";
        }
        exports.func = func;
        function array(value1) {
            return Array.isArray(value1);
        }
        exports.array = array;
        function stringArray(value1) {
            return array(value1) && value1.every((elem)=>string2(elem));
        }
        exports.stringArray = stringArray;
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/messages.js
var require_messages = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/messages.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Message = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
        var is = require_is();
        var ErrorCodes;
        (function(ErrorCodes2) {
            ErrorCodes2.ParseError = -32700;
            ErrorCodes2.InvalidRequest = -32600;
            ErrorCodes2.MethodNotFound = -32601;
            ErrorCodes2.InvalidParams = -32602;
            ErrorCodes2.InternalError = -32603;
            ErrorCodes2.jsonrpcReservedErrorRangeStart = -32099;
            ErrorCodes2.serverErrorStart = -32099;
            ErrorCodes2.MessageWriteError = -32099;
            ErrorCodes2.MessageReadError = -32098;
            ErrorCodes2.PendingResponseRejected = -32097;
            ErrorCodes2.ConnectionInactive = -32096;
            ErrorCodes2.ServerNotInitialized = -32002;
            ErrorCodes2.UnknownErrorCode = -32001;
            ErrorCodes2.jsonrpcReservedErrorRangeEnd = -32e3;
            ErrorCodes2.serverErrorEnd = -32e3;
        })(ErrorCodes || (exports.ErrorCodes = ErrorCodes = {}));
        var ResponseError = class _ResponseError extends Error {
            toJson() {
                const result = {
                    code: this.code,
                    message: this.message
                };
                if (this.data !== void 0) {
                    result.data = this.data;
                }
                return result;
            }
            constructor(code, message, data){
                super(message);
                this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
                this.data = data;
                Object.setPrototypeOf(this, _ResponseError.prototype);
            }
        };
        exports.ResponseError = ResponseError;
        var ParameterStructures = class _ParameterStructures {
            static is(value1) {
                return value1 === _ParameterStructures.auto || value1 === _ParameterStructures.byName || value1 === _ParameterStructures.byPosition;
            }
            toString() {
                return this.kind;
            }
            constructor(kind){
                this.kind = kind;
            }
        };
        exports.ParameterStructures = ParameterStructures;
        ParameterStructures.auto = new ParameterStructures("auto");
        ParameterStructures.byPosition = new ParameterStructures("byPosition");
        ParameterStructures.byName = new ParameterStructures("byName");
        var AbstractMessageSignature = class {
            get parameterStructures() {
                return ParameterStructures.auto;
            }
            constructor(method, numberOfParams){
                this.method = method;
                this.numberOfParams = numberOfParams;
            }
        };
        exports.AbstractMessageSignature = AbstractMessageSignature;
        var RequestType0 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 0);
            }
        };
        exports.RequestType0 = RequestType0;
        var RequestType = class extends AbstractMessageSignature {
            get parameterStructures() {
                return this._parameterStructures;
            }
            constructor(method, _parameterStructures = ParameterStructures.auto){
                super(method, 1);
                this._parameterStructures = _parameterStructures;
            }
        };
        exports.RequestType = RequestType;
        var RequestType1 = class extends AbstractMessageSignature {
            get parameterStructures() {
                return this._parameterStructures;
            }
            constructor(method, _parameterStructures = ParameterStructures.auto){
                super(method, 1);
                this._parameterStructures = _parameterStructures;
            }
        };
        exports.RequestType1 = RequestType1;
        var RequestType2 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 2);
            }
        };
        exports.RequestType2 = RequestType2;
        var RequestType3 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 3);
            }
        };
        exports.RequestType3 = RequestType3;
        var RequestType4 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 4);
            }
        };
        exports.RequestType4 = RequestType4;
        var RequestType5 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 5);
            }
        };
        exports.RequestType5 = RequestType5;
        var RequestType6 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 6);
            }
        };
        exports.RequestType6 = RequestType6;
        var RequestType7 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 7);
            }
        };
        exports.RequestType7 = RequestType7;
        var RequestType8 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 8);
            }
        };
        exports.RequestType8 = RequestType8;
        var RequestType9 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 9);
            }
        };
        exports.RequestType9 = RequestType9;
        var NotificationType = class extends AbstractMessageSignature {
            get parameterStructures() {
                return this._parameterStructures;
            }
            constructor(method, _parameterStructures = ParameterStructures.auto){
                super(method, 1);
                this._parameterStructures = _parameterStructures;
            }
        };
        exports.NotificationType = NotificationType;
        var NotificationType0 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 0);
            }
        };
        exports.NotificationType0 = NotificationType0;
        var NotificationType1 = class extends AbstractMessageSignature {
            get parameterStructures() {
                return this._parameterStructures;
            }
            constructor(method, _parameterStructures = ParameterStructures.auto){
                super(method, 1);
                this._parameterStructures = _parameterStructures;
            }
        };
        exports.NotificationType1 = NotificationType1;
        var NotificationType2 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 2);
            }
        };
        exports.NotificationType2 = NotificationType2;
        var NotificationType3 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 3);
            }
        };
        exports.NotificationType3 = NotificationType3;
        var NotificationType4 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 4);
            }
        };
        exports.NotificationType4 = NotificationType4;
        var NotificationType5 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 5);
            }
        };
        exports.NotificationType5 = NotificationType5;
        var NotificationType6 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 6);
            }
        };
        exports.NotificationType6 = NotificationType6;
        var NotificationType7 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 7);
            }
        };
        exports.NotificationType7 = NotificationType7;
        var NotificationType8 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 8);
            }
        };
        exports.NotificationType8 = NotificationType8;
        var NotificationType9 = class extends AbstractMessageSignature {
            constructor(method){
                super(method, 9);
            }
        };
        exports.NotificationType9 = NotificationType9;
        var Message;
        (function(Message2) {
            function isRequest(message) {
                const candidate = message;
                return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
            }
            Message2.isRequest = isRequest;
            function isNotification(message) {
                const candidate = message;
                return candidate && is.string(candidate.method) && message.id === void 0;
            }
            Message2.isNotification = isNotification;
            function isResponse(message) {
                const candidate = message;
                return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
            }
            Message2.isResponse = isResponse;
        })(Message || (exports.Message = Message = {}));
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/linkedMap.js
var require_linkedMap = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/linkedMap.js" (exports) {
        "use strict";
        var _a;
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.LRUCache = exports.LinkedMap = exports.Touch = void 0;
        var Touch;
        (function(Touch2) {
            Touch2.None = 0;
            Touch2.First = 1;
            Touch2.AsOld = Touch2.First;
            Touch2.Last = 2;
            Touch2.AsNew = Touch2.Last;
        })(Touch || (exports.Touch = Touch = {}));
        var LinkedMap = class {
            clear() {
                this._map.clear();
                this._head = void 0;
                this._tail = void 0;
                this._size = 0;
                this._state++;
            }
            isEmpty() {
                return !this._head && !this._tail;
            }
            get size() {
                return this._size;
            }
            get first() {
                var _a2;
                return (_a2 = this._head) == null ? void 0 : _a2.value;
            }
            get last() {
                var _a2;
                return (_a2 = this._tail) == null ? void 0 : _a2.value;
            }
            has(key) {
                return this._map.has(key);
            }
            get(key, touch = Touch.None) {
                const item = this._map.get(key);
                if (!item) {
                    return void 0;
                }
                if (touch !== Touch.None) {
                    this.touch(item, touch);
                }
                return item.value;
            }
            set(key, value1, touch = Touch.None) {
                let item = this._map.get(key);
                if (item) {
                    item.value = value1;
                    if (touch !== Touch.None) {
                        this.touch(item, touch);
                    }
                } else {
                    item = {
                        key,
                        value: value1,
                        next: void 0,
                        previous: void 0
                    };
                    switch(touch){
                        case Touch.None:
                            this.addItemLast(item);
                            break;
                        case Touch.First:
                            this.addItemFirst(item);
                            break;
                        case Touch.Last:
                            this.addItemLast(item);
                            break;
                        default:
                            this.addItemLast(item);
                            break;
                    }
                    this._map.set(key, item);
                    this._size++;
                }
                return this;
            }
            delete(key) {
                return !!this.remove(key);
            }
            remove(key) {
                const item = this._map.get(key);
                if (!item) {
                    return void 0;
                }
                this._map.delete(key);
                this.removeItem(item);
                this._size--;
                return item.value;
            }
            shift() {
                if (!this._head && !this._tail) {
                    return void 0;
                }
                if (!this._head || !this._tail) {
                    throw new Error("Invalid list");
                }
                const item = this._head;
                this._map.delete(item.key);
                this.removeItem(item);
                this._size--;
                return item.value;
            }
            forEach(callbackfn, thisArg) {
                const state = this._state;
                let current = this._head;
                while(current){
                    if (thisArg) {
                        callbackfn.bind(thisArg)(current.value, current.key, this);
                    } else {
                        callbackfn(current.value, current.key, this);
                    }
                    if (this._state !== state) {
                        throw new Error(`LinkedMap got modified during iteration.`);
                    }
                    current = current.next;
                }
            }
            keys() {
                const state = this._state;
                let current = this._head;
                const iterator = {
                    [Symbol.iterator]: ()=>{
                        return iterator;
                    },
                    next: ()=>{
                        if (this._state !== state) {
                            throw new Error(`LinkedMap got modified during iteration.`);
                        }
                        if (current) {
                            const result = {
                                value: current.key,
                                done: false
                            };
                            current = current.next;
                            return result;
                        } else {
                            return {
                                value: void 0,
                                done: true
                            };
                        }
                    }
                };
                return iterator;
            }
            values() {
                const state = this._state;
                let current = this._head;
                const iterator = {
                    [Symbol.iterator]: ()=>{
                        return iterator;
                    },
                    next: ()=>{
                        if (this._state !== state) {
                            throw new Error(`LinkedMap got modified during iteration.`);
                        }
                        if (current) {
                            const result = {
                                value: current.value,
                                done: false
                            };
                            current = current.next;
                            return result;
                        } else {
                            return {
                                value: void 0,
                                done: true
                            };
                        }
                    }
                };
                return iterator;
            }
            entries() {
                const state = this._state;
                let current = this._head;
                const iterator = {
                    [Symbol.iterator]: ()=>{
                        return iterator;
                    },
                    next: ()=>{
                        if (this._state !== state) {
                            throw new Error(`LinkedMap got modified during iteration.`);
                        }
                        if (current) {
                            const result = {
                                value: [
                                    current.key,
                                    current.value
                                ],
                                done: false
                            };
                            current = current.next;
                            return result;
                        } else {
                            return {
                                value: void 0,
                                done: true
                            };
                        }
                    }
                };
                return iterator;
            }
            [(_a = Symbol.toStringTag, Symbol.iterator)]() {
                return this.entries();
            }
            trimOld(newSize) {
                if (newSize >= this.size) {
                    return;
                }
                if (newSize === 0) {
                    this.clear();
                    return;
                }
                let current = this._head;
                let currentSize = this.size;
                while(current && currentSize > newSize){
                    this._map.delete(current.key);
                    current = current.next;
                    currentSize--;
                }
                this._head = current;
                this._size = currentSize;
                if (current) {
                    current.previous = void 0;
                }
                this._state++;
            }
            addItemFirst(item) {
                if (!this._head && !this._tail) {
                    this._tail = item;
                } else if (!this._head) {
                    throw new Error("Invalid list");
                } else {
                    item.next = this._head;
                    this._head.previous = item;
                }
                this._head = item;
                this._state++;
            }
            addItemLast(item) {
                if (!this._head && !this._tail) {
                    this._head = item;
                } else if (!this._tail) {
                    throw new Error("Invalid list");
                } else {
                    item.previous = this._tail;
                    this._tail.next = item;
                }
                this._tail = item;
                this._state++;
            }
            removeItem(item) {
                if (item === this._head && item === this._tail) {
                    this._head = void 0;
                    this._tail = void 0;
                } else if (item === this._head) {
                    if (!item.next) {
                        throw new Error("Invalid list");
                    }
                    item.next.previous = void 0;
                    this._head = item.next;
                } else if (item === this._tail) {
                    if (!item.previous) {
                        throw new Error("Invalid list");
                    }
                    item.previous.next = void 0;
                    this._tail = item.previous;
                } else {
                    const next = item.next;
                    const previous = item.previous;
                    if (!next || !previous) {
                        throw new Error("Invalid list");
                    }
                    next.previous = previous;
                    previous.next = next;
                }
                item.next = void 0;
                item.previous = void 0;
                this._state++;
            }
            touch(item, touch) {
                if (!this._head || !this._tail) {
                    throw new Error("Invalid list");
                }
                if (touch !== Touch.First && touch !== Touch.Last) {
                    return;
                }
                if (touch === Touch.First) {
                    if (item === this._head) {
                        return;
                    }
                    const next = item.next;
                    const previous = item.previous;
                    if (item === this._tail) {
                        previous.next = void 0;
                        this._tail = previous;
                    } else {
                        next.previous = previous;
                        previous.next = next;
                    }
                    item.previous = void 0;
                    item.next = this._head;
                    this._head.previous = item;
                    this._head = item;
                    this._state++;
                } else if (touch === Touch.Last) {
                    if (item === this._tail) {
                        return;
                    }
                    const next = item.next;
                    const previous = item.previous;
                    if (item === this._head) {
                        next.previous = void 0;
                        this._head = next;
                    } else {
                        next.previous = previous;
                        previous.next = next;
                    }
                    item.next = void 0;
                    item.previous = this._tail;
                    this._tail.next = item;
                    this._tail = item;
                    this._state++;
                }
            }
            toJSON() {
                const data = [];
                this.forEach((value1, key)=>{
                    data.push([
                        key,
                        value1
                    ]);
                });
                return data;
            }
            fromJSON(data) {
                this.clear();
                for (const [key, value1] of data){
                    this.set(key, value1);
                }
            }
            constructor(){
                this[_a] = "LinkedMap";
                this._map = /* @__PURE__ */ new Map();
                this._head = void 0;
                this._tail = void 0;
                this._size = 0;
                this._state = 0;
            }
        };
        exports.LinkedMap = LinkedMap;
        var LRUCache = class extends LinkedMap {
            get limit() {
                return this._limit;
            }
            set limit(limit) {
                this._limit = limit;
                this.checkTrim();
            }
            get ratio() {
                return this._ratio;
            }
            set ratio(ratio) {
                this._ratio = Math.min(Math.max(0, ratio), 1);
                this.checkTrim();
            }
            get(key, touch = Touch.AsNew) {
                return super.get(key, touch);
            }
            peek(key) {
                return super.get(key, Touch.None);
            }
            set(key, value1) {
                super.set(key, value1, Touch.Last);
                this.checkTrim();
                return this;
            }
            checkTrim() {
                if (this.size > this._limit) {
                    this.trimOld(Math.round(this._limit * this._ratio));
                }
            }
            constructor(limit, ratio = 1){
                super();
                this._limit = limit;
                this._ratio = Math.min(Math.max(0, ratio), 1);
            }
        };
        exports.LRUCache = LRUCache;
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/disposable.js
var require_disposable = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/disposable.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Disposable = void 0;
        var Disposable;
        (function(Disposable2) {
            function create(func) {
                return {
                    dispose: func
                };
            }
            Disposable2.create = create;
        })(Disposable || (exports.Disposable = Disposable = {}));
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/ral.js
var require_ral = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/ral.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _ral;
        function RAL() {
            if (_ral === void 0) {
                throw new Error(`No runtime abstraction layer installed`);
            }
            return _ral;
        }
        (function(RAL2) {
            function install(ral) {
                if (ral === void 0) {
                    throw new Error(`No runtime abstraction layer provided`);
                }
                _ral = ral;
            }
            RAL2.install = install;
        })(RAL || (RAL = {}));
        exports.default = RAL;
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/events.js
var require_events = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/events.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Emitter = exports.Event = void 0;
        var ral_1 = require_ral();
        var Event;
        (function(Event2) {
            const _disposable = {
                dispose () {}
            };
            Event2.None = function() {
                return _disposable;
            };
        })(Event || (exports.Event = Event = {}));
        var CallbackList = class {
            add(callback, context = null, bucket) {
                if (!this._callbacks) {
                    this._callbacks = [];
                    this._contexts = [];
                }
                this._callbacks.push(callback);
                this._contexts.push(context);
                if (Array.isArray(bucket)) {
                    bucket.push({
                        dispose: ()=>this.remove(callback, context)
                    });
                }
            }
            remove(callback, context = null) {
                if (!this._callbacks) {
                    return;
                }
                let foundCallbackWithDifferentContext = false;
                for(let i = 0, len = this._callbacks.length; i < len; i++){
                    if (this._callbacks[i] === callback) {
                        if (this._contexts[i] === context) {
                            this._callbacks.splice(i, 1);
                            this._contexts.splice(i, 1);
                            return;
                        } else {
                            foundCallbackWithDifferentContext = true;
                        }
                    }
                }
                if (foundCallbackWithDifferentContext) {
                    throw new Error("When adding a listener with a context, you should remove it with the same context");
                }
            }
            invoke(...args) {
                if (!this._callbacks) {
                    return [];
                }
                const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
                for(let i = 0, len = callbacks.length; i < len; i++){
                    try {
                        ret.push(callbacks[i].apply(contexts[i], args));
                    } catch (e) {
                        (0, ral_1.default)().console.error(e);
                    }
                }
                return ret;
            }
            isEmpty() {
                return !this._callbacks || this._callbacks.length === 0;
            }
            dispose() {
                this._callbacks = void 0;
                this._contexts = void 0;
            }
        };
        var Emitter = class _Emitter {
            /**
       * For the public to allow to subscribe
       * to events from this Emitter
       */ get event() {
                if (!this._event) {
                    this._event = (listener, thisArgs, disposables)=>{
                        if (!this._callbacks) {
                            this._callbacks = new CallbackList();
                        }
                        if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                            this._options.onFirstListenerAdd(this);
                        }
                        this._callbacks.add(listener, thisArgs);
                        const result = {
                            dispose: ()=>{
                                if (!this._callbacks) {
                                    return;
                                }
                                this._callbacks.remove(listener, thisArgs);
                                result.dispose = _Emitter._noop;
                                if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                                    this._options.onLastListenerRemove(this);
                                }
                            }
                        };
                        if (Array.isArray(disposables)) {
                            disposables.push(result);
                        }
                        return result;
                    };
                }
                return this._event;
            }
            /**
       * To be kept private to fire an event to
       * subscribers
       */ fire(event) {
                if (this._callbacks) {
                    this._callbacks.invoke.call(this._callbacks, event);
                }
            }
            dispose() {
                if (this._callbacks) {
                    this._callbacks.dispose();
                    this._callbacks = void 0;
                }
            }
            constructor(_options){
                this._options = _options;
            }
        };
        exports.Emitter = Emitter;
        Emitter._noop = function() {};
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/cancellation.js
var require_cancellation = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/cancellation.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.CancellationTokenSource = exports.CancellationToken = void 0;
        var ral_1 = require_ral();
        var Is2 = require_is();
        var events_1 = require_events();
        var CancellationToken;
        (function(CancellationToken2) {
            CancellationToken2.None = Object.freeze({
                isCancellationRequested: false,
                onCancellationRequested: events_1.Event.None
            });
            CancellationToken2.Cancelled = Object.freeze({
                isCancellationRequested: true,
                onCancellationRequested: events_1.Event.None
            });
            function is(value1) {
                const candidate = value1;
                return candidate && (candidate === CancellationToken2.None || candidate === CancellationToken2.Cancelled || Is2.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested);
            }
            CancellationToken2.is = is;
        })(CancellationToken || (exports.CancellationToken = CancellationToken = {}));
        var shortcutEvent = Object.freeze(function(callback, context) {
            const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
            return {
                dispose () {
                    handle.dispose();
                }
            };
        });
        var MutableToken = class {
            cancel() {
                if (!this._isCancelled) {
                    this._isCancelled = true;
                    if (this._emitter) {
                        this._emitter.fire(void 0);
                        this.dispose();
                    }
                }
            }
            get isCancellationRequested() {
                return this._isCancelled;
            }
            get onCancellationRequested() {
                if (this._isCancelled) {
                    return shortcutEvent;
                }
                if (!this._emitter) {
                    this._emitter = new events_1.Emitter();
                }
                return this._emitter.event;
            }
            dispose() {
                if (this._emitter) {
                    this._emitter.dispose();
                    this._emitter = void 0;
                }
            }
            constructor(){
                this._isCancelled = false;
            }
        };
        var CancellationTokenSource = class {
            get token() {
                if (!this._token) {
                    this._token = new MutableToken();
                }
                return this._token;
            }
            cancel() {
                if (!this._token) {
                    this._token = CancellationToken.Cancelled;
                } else {
                    this._token.cancel();
                }
            }
            dispose() {
                if (!this._token) {
                    this._token = CancellationToken.None;
                } else if (this._token instanceof MutableToken) {
                    this._token.dispose();
                }
            }
        };
        exports.CancellationTokenSource = CancellationTokenSource;
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/sharedArrayCancellation.js
var require_sharedArrayCancellation = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/sharedArrayCancellation.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = void 0;
        var cancellation_1 = require_cancellation();
        var CancellationState;
        (function(CancellationState2) {
            CancellationState2.Continue = 0;
            CancellationState2.Cancelled = 1;
        })(CancellationState || (CancellationState = {}));
        var SharedArraySenderStrategy = class {
            enableCancellation(request) {
                if (request.id === null) {
                    return;
                }
                const buffer = new SharedArrayBuffer(4);
                const data = new Int32Array(buffer, 0, 1);
                data[0] = CancellationState.Continue;
                this.buffers.set(request.id, buffer);
                request.$cancellationData = buffer;
            }
            async sendCancellation(_conn, id) {
                const buffer = this.buffers.get(id);
                if (buffer === void 0) {
                    return;
                }
                const data = new Int32Array(buffer, 0, 1);
                Atomics.store(data, 0, CancellationState.Cancelled);
            }
            cleanup(id) {
                this.buffers.delete(id);
            }
            dispose() {
                this.buffers.clear();
            }
            constructor(){
                this.buffers = /* @__PURE__ */ new Map();
            }
        };
        exports.SharedArraySenderStrategy = SharedArraySenderStrategy;
        var SharedArrayBufferCancellationToken = class {
            get isCancellationRequested() {
                return Atomics.load(this.data, 0) === CancellationState.Cancelled;
            }
            get onCancellationRequested() {
                throw new Error(`Cancellation over SharedArrayBuffer doesn't support cancellation events`);
            }
            constructor(buffer){
                this.data = new Int32Array(buffer, 0, 1);
            }
        };
        var SharedArrayBufferCancellationTokenSource = class {
            cancel() {}
            dispose() {}
            constructor(buffer){
                this.token = new SharedArrayBufferCancellationToken(buffer);
            }
        };
        var SharedArrayReceiverStrategy = class {
            createCancellationTokenSource(request) {
                const buffer = request.$cancellationData;
                if (buffer === void 0) {
                    return new cancellation_1.CancellationTokenSource();
                }
                return new SharedArrayBufferCancellationTokenSource(buffer);
            }
            constructor(){
                this.kind = "request";
            }
        };
        exports.SharedArrayReceiverStrategy = SharedArrayReceiverStrategy;
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/semaphore.js
var require_semaphore = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/semaphore.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.Semaphore = void 0;
        var ral_1 = require_ral();
        var Semaphore = class {
            lock(thunk) {
                return new Promise((resolve2, reject)=>{
                    this._waiting.push({
                        thunk,
                        resolve: resolve2,
                        reject
                    });
                    this.runNext();
                });
            }
            get active() {
                return this._active;
            }
            runNext() {
                if (this._waiting.length === 0 || this._active === this._capacity) {
                    return;
                }
                (0, ral_1.default)().timer.setImmediate(()=>this.doRunNext());
            }
            doRunNext() {
                if (this._waiting.length === 0 || this._active === this._capacity) {
                    return;
                }
                const next = this._waiting.shift();
                this._active++;
                if (this._active > this._capacity) {
                    throw new Error(`To many thunks active`);
                }
                try {
                    const result = next.thunk();
                    if (result instanceof Promise) {
                        result.then((value1)=>{
                            this._active--;
                            next.resolve(value1);
                            this.runNext();
                        }, (err)=>{
                            this._active--;
                            next.reject(err);
                            this.runNext();
                        });
                    } else {
                        this._active--;
                        next.resolve(result);
                        this.runNext();
                    }
                } catch (err) {
                    this._active--;
                    next.reject(err);
                    this.runNext();
                }
            }
            constructor(capacity = 1){
                if (capacity <= 0) {
                    throw new Error("Capacity must be greater than 0");
                }
                this._capacity = capacity;
                this._active = 0;
                this._waiting = [];
            }
        };
        exports.Semaphore = Semaphore;
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/messageReader.js
var require_messageReader = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/messageReader.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;
        var ral_1 = require_ral();
        var Is2 = require_is();
        var events_1 = require_events();
        var semaphore_1 = require_semaphore();
        var MessageReader;
        (function(MessageReader2) {
            function is(value1) {
                let candidate = value1;
                return candidate && Is2.func(candidate.listen) && Is2.func(candidate.dispose) && Is2.func(candidate.onError) && Is2.func(candidate.onClose) && Is2.func(candidate.onPartialMessage);
            }
            MessageReader2.is = is;
        })(MessageReader || (exports.MessageReader = MessageReader = {}));
        var AbstractMessageReader = class {
            dispose() {
                this.errorEmitter.dispose();
                this.closeEmitter.dispose();
            }
            get onError() {
                return this.errorEmitter.event;
            }
            fireError(error) {
                this.errorEmitter.fire(this.asError(error));
            }
            get onClose() {
                return this.closeEmitter.event;
            }
            fireClose() {
                this.closeEmitter.fire(void 0);
            }
            get onPartialMessage() {
                return this.partialMessageEmitter.event;
            }
            firePartialMessage(info) {
                this.partialMessageEmitter.fire(info);
            }
            asError(error) {
                if (error instanceof Error) {
                    return error;
                } else {
                    return new Error(`Reader received error. Reason: ${Is2.string(error.message) ? error.message : "unknown"}`);
                }
            }
            constructor(){
                this.errorEmitter = new events_1.Emitter();
                this.closeEmitter = new events_1.Emitter();
                this.partialMessageEmitter = new events_1.Emitter();
            }
        };
        exports.AbstractMessageReader = AbstractMessageReader;
        var ResolvedMessageReaderOptions;
        (function(ResolvedMessageReaderOptions2) {
            function fromOptions(options) {
                var _a;
                let charset;
                let result;
                let contentDecoder;
                const contentDecoders = /* @__PURE__ */ new Map();
                let contentTypeDecoder;
                const contentTypeDecoders = /* @__PURE__ */ new Map();
                if (options === void 0 || typeof options === "string") {
                    charset = options != null ? options : "utf-8";
                } else {
                    charset = (_a = options.charset) != null ? _a : "utf-8";
                    if (options.contentDecoder !== void 0) {
                        contentDecoder = options.contentDecoder;
                        contentDecoders.set(contentDecoder.name, contentDecoder);
                    }
                    if (options.contentDecoders !== void 0) {
                        for (const decoder of options.contentDecoders){
                            contentDecoders.set(decoder.name, decoder);
                        }
                    }
                    if (options.contentTypeDecoder !== void 0) {
                        contentTypeDecoder = options.contentTypeDecoder;
                        contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
                    }
                    if (options.contentTypeDecoders !== void 0) {
                        for (const decoder of options.contentTypeDecoders){
                            contentTypeDecoders.set(decoder.name, decoder);
                        }
                    }
                }
                if (contentTypeDecoder === void 0) {
                    contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
                    contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
                }
                return {
                    charset,
                    contentDecoder,
                    contentDecoders,
                    contentTypeDecoder,
                    contentTypeDecoders
                };
            }
            ResolvedMessageReaderOptions2.fromOptions = fromOptions;
        })(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
        var ReadableStreamMessageReader = class extends AbstractMessageReader {
            set partialMessageTimeout(timeout) {
                this._partialMessageTimeout = timeout;
            }
            get partialMessageTimeout() {
                return this._partialMessageTimeout;
            }
            listen(callback) {
                this.nextMessageLength = -1;
                this.messageToken = 0;
                this.partialMessageTimer = void 0;
                this.callback = callback;
                const result = this.readable.onData((data)=>{
                    this.onData(data);
                });
                this.readable.onError((error)=>this.fireError(error));
                this.readable.onClose(()=>this.fireClose());
                return result;
            }
            onData(data) {
                try {
                    this.buffer.append(data);
                    while(true){
                        if (this.nextMessageLength === -1) {
                            const headers = this.buffer.tryReadHeaders(true);
                            if (!headers) {
                                return;
                            }
                            const contentLength = headers.get("content-length");
                            if (!contentLength) {
                                this.fireError(new Error(`Header must provide a Content-Length property.
${JSON.stringify(Object.fromEntries(headers))}`));
                                return;
                            }
                            const length = parseInt(contentLength);
                            if (isNaN(length)) {
                                this.fireError(new Error(`Content-Length value must be a number. Got ${contentLength}`));
                                return;
                            }
                            this.nextMessageLength = length;
                        }
                        const body = this.buffer.tryReadBody(this.nextMessageLength);
                        if (body === void 0) {
                            this.setPartialMessageTimer();
                            return;
                        }
                        this.clearPartialMessageTimer();
                        this.nextMessageLength = -1;
                        this.readSemaphore.lock(async ()=>{
                            const bytes = this.options.contentDecoder !== void 0 ? await this.options.contentDecoder.decode(body) : body;
                            const message = await this.options.contentTypeDecoder.decode(bytes, this.options);
                            this.callback(message);
                        }).catch((error)=>{
                            this.fireError(error);
                        });
                    }
                } catch (error) {
                    this.fireError(error);
                }
            }
            clearPartialMessageTimer() {
                if (this.partialMessageTimer) {
                    this.partialMessageTimer.dispose();
                    this.partialMessageTimer = void 0;
                }
            }
            setPartialMessageTimer() {
                this.clearPartialMessageTimer();
                if (this._partialMessageTimeout <= 0) {
                    return;
                }
                this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout)=>{
                    this.partialMessageTimer = void 0;
                    if (token === this.messageToken) {
                        this.firePartialMessage({
                            messageToken: token,
                            waitingTime: timeout
                        });
                        this.setPartialMessageTimer();
                    }
                }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
            }
            constructor(readable, options){
                super();
                this.readable = readable;
                this.options = ResolvedMessageReaderOptions.fromOptions(options);
                this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
                this._partialMessageTimeout = 1e4;
                this.nextMessageLength = -1;
                this.messageToken = 0;
                this.readSemaphore = new semaphore_1.Semaphore(1);
            }
        };
        exports.ReadableStreamMessageReader = ReadableStreamMessageReader;
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/messageWriter.js
var require_messageWriter = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/messageWriter.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;
        var ral_1 = require_ral();
        var Is2 = require_is();
        var semaphore_1 = require_semaphore();
        var events_1 = require_events();
        var ContentLength = "Content-Length: ";
        var CRLF = "\r\n";
        var MessageWriter;
        (function(MessageWriter2) {
            function is(value1) {
                let candidate = value1;
                return candidate && Is2.func(candidate.dispose) && Is2.func(candidate.onClose) && Is2.func(candidate.onError) && Is2.func(candidate.write);
            }
            MessageWriter2.is = is;
        })(MessageWriter || (exports.MessageWriter = MessageWriter = {}));
        var AbstractMessageWriter = class {
            dispose() {
                this.errorEmitter.dispose();
                this.closeEmitter.dispose();
            }
            get onError() {
                return this.errorEmitter.event;
            }
            fireError(error, message, count) {
                this.errorEmitter.fire([
                    this.asError(error),
                    message,
                    count
                ]);
            }
            get onClose() {
                return this.closeEmitter.event;
            }
            fireClose() {
                this.closeEmitter.fire(void 0);
            }
            asError(error) {
                if (error instanceof Error) {
                    return error;
                } else {
                    return new Error(`Writer received error. Reason: ${Is2.string(error.message) ? error.message : "unknown"}`);
                }
            }
            constructor(){
                this.errorEmitter = new events_1.Emitter();
                this.closeEmitter = new events_1.Emitter();
            }
        };
        exports.AbstractMessageWriter = AbstractMessageWriter;
        var ResolvedMessageWriterOptions;
        (function(ResolvedMessageWriterOptions2) {
            function fromOptions(options) {
                var _a, _b;
                if (options === void 0 || typeof options === "string") {
                    return {
                        charset: options != null ? options : "utf-8",
                        contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder
                    };
                } else {
                    return {
                        charset: (_a = options.charset) != null ? _a : "utf-8",
                        contentEncoder: options.contentEncoder,
                        contentTypeEncoder: (_b = options.contentTypeEncoder) != null ? _b : (0, ral_1.default)().applicationJson.encoder
                    };
                }
            }
            ResolvedMessageWriterOptions2.fromOptions = fromOptions;
        })(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
        var WriteableStreamMessageWriter = class extends AbstractMessageWriter {
            async write(msg) {
                return this.writeSemaphore.lock(async ()=>{
                    const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer)=>{
                        if (this.options.contentEncoder !== void 0) {
                            return this.options.contentEncoder.encode(buffer);
                        } else {
                            return buffer;
                        }
                    });
                    return payload.then((buffer)=>{
                        const headers = [];
                        headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                        headers.push(CRLF);
                        return this.doWrite(msg, headers, buffer);
                    }, (error)=>{
                        this.fireError(error);
                        throw error;
                    });
                });
            }
            async doWrite(msg, headers, data) {
                try {
                    await this.writable.write(headers.join(""), "ascii");
                    return this.writable.write(data);
                } catch (error) {
                    this.handleError(error, msg);
                    return Promise.reject(error);
                }
            }
            handleError(error, msg) {
                this.errorCount++;
                this.fireError(error, msg, this.errorCount);
            }
            end() {
                this.writable.end();
            }
            constructor(writable, options){
                super();
                this.writable = writable;
                this.options = ResolvedMessageWriterOptions.fromOptions(options);
                this.errorCount = 0;
                this.writeSemaphore = new semaphore_1.Semaphore(1);
                this.writable.onError((error)=>this.fireError(error));
                this.writable.onClose(()=>this.fireClose());
            }
        };
        exports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/messageBuffer.js
var require_messageBuffer = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/messageBuffer.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.AbstractMessageBuffer = void 0;
        var CR = 13;
        var LF = 10;
        var CRLF = "\r\n";
        var AbstractMessageBuffer = class {
            get encoding() {
                return this._encoding;
            }
            append(chunk) {
                const toAppend = typeof chunk === "string" ? this.fromString(chunk, this._encoding) : chunk;
                this._chunks.push(toAppend);
                this._totalLength += toAppend.byteLength;
            }
            tryReadHeaders(lowerCaseKeys = false) {
                if (this._chunks.length === 0) {
                    return void 0;
                }
                let state = 0;
                let chunkIndex = 0;
                let offset = 0;
                let chunkBytesRead = 0;
                row: while(chunkIndex < this._chunks.length){
                    const chunk = this._chunks[chunkIndex];
                    offset = 0;
                    column: while(offset < chunk.length){
                        const value1 = chunk[offset];
                        switch(value1){
                            case CR:
                                switch(state){
                                    case 0:
                                        state = 1;
                                        break;
                                    case 2:
                                        state = 3;
                                        break;
                                    default:
                                        state = 0;
                                }
                                break;
                            case LF:
                                switch(state){
                                    case 1:
                                        state = 2;
                                        break;
                                    case 3:
                                        state = 4;
                                        offset++;
                                        break row;
                                    default:
                                        state = 0;
                                }
                                break;
                            default:
                                state = 0;
                        }
                        offset++;
                    }
                    chunkBytesRead += chunk.byteLength;
                    chunkIndex++;
                }
                if (state !== 4) {
                    return void 0;
                }
                const buffer = this._read(chunkBytesRead + offset);
                const result = /* @__PURE__ */ new Map();
                const headers = this.toString(buffer, "ascii").split(CRLF);
                if (headers.length < 2) {
                    return result;
                }
                for(let i = 0; i < headers.length - 2; i++){
                    const header = headers[i];
                    const index = header.indexOf(":");
                    if (index === -1) {
                        throw new Error(`Message header must separate key and value using ':'
${header}`);
                    }
                    const key = header.substr(0, index);
                    const value1 = header.substr(index + 1).trim();
                    result.set(lowerCaseKeys ? key.toLowerCase() : key, value1);
                }
                return result;
            }
            tryReadBody(length) {
                if (this._totalLength < length) {
                    return void 0;
                }
                return this._read(length);
            }
            get numberOfBytes() {
                return this._totalLength;
            }
            _read(byteCount) {
                if (byteCount === 0) {
                    return this.emptyBuffer();
                }
                if (byteCount > this._totalLength) {
                    throw new Error(`Cannot read so many bytes!`);
                }
                if (this._chunks[0].byteLength === byteCount) {
                    const chunk = this._chunks[0];
                    this._chunks.shift();
                    this._totalLength -= byteCount;
                    return this.asNative(chunk);
                }
                if (this._chunks[0].byteLength > byteCount) {
                    const chunk = this._chunks[0];
                    const result2 = this.asNative(chunk, byteCount);
                    this._chunks[0] = chunk.slice(byteCount);
                    this._totalLength -= byteCount;
                    return result2;
                }
                const result = this.allocNative(byteCount);
                let resultOffset = 0;
                let chunkIndex = 0;
                while(byteCount > 0){
                    const chunk = this._chunks[chunkIndex];
                    if (chunk.byteLength > byteCount) {
                        const chunkPart = chunk.slice(0, byteCount);
                        result.set(chunkPart, resultOffset);
                        resultOffset += byteCount;
                        this._chunks[chunkIndex] = chunk.slice(byteCount);
                        this._totalLength -= byteCount;
                        byteCount -= byteCount;
                    } else {
                        result.set(chunk, resultOffset);
                        resultOffset += chunk.byteLength;
                        this._chunks.shift();
                        this._totalLength -= chunk.byteLength;
                        byteCount -= chunk.byteLength;
                    }
                }
                return result;
            }
            constructor(encoding = "utf-8"){
                this._encoding = encoding;
                this._chunks = [];
                this._totalLength = 0;
            }
        };
        exports.AbstractMessageBuffer = AbstractMessageBuffer;
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/connection.js
var require_connection = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/connection.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createMessageConnection = exports.ConnectionOptions = exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.RequestCancellationReceiverStrategy = exports.IdCancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = exports.NullLogger = exports.ProgressType = exports.ProgressToken = void 0;
        var ral_1 = require_ral();
        var Is2 = require_is();
        var messages_1 = require_messages();
        var linkedMap_1 = require_linkedMap();
        var events_1 = require_events();
        var cancellation_1 = require_cancellation();
        var CancelNotification;
        (function(CancelNotification2) {
            CancelNotification2.type = new messages_1.NotificationType("$/cancelRequest");
        })(CancelNotification || (CancelNotification = {}));
        var ProgressToken;
        (function(ProgressToken2) {
            function is(value1) {
                return typeof value1 === "string" || typeof value1 === "number";
            }
            ProgressToken2.is = is;
        })(ProgressToken || (exports.ProgressToken = ProgressToken = {}));
        var ProgressNotification;
        (function(ProgressNotification2) {
            ProgressNotification2.type = new messages_1.NotificationType("$/progress");
        })(ProgressNotification || (ProgressNotification = {}));
        var ProgressType = class {
            constructor(){}
        };
        exports.ProgressType = ProgressType;
        var StarRequestHandler;
        (function(StarRequestHandler2) {
            function is(value1) {
                return Is2.func(value1);
            }
            StarRequestHandler2.is = is;
        })(StarRequestHandler || (StarRequestHandler = {}));
        exports.NullLogger = Object.freeze({
            error: ()=>{},
            warn: ()=>{},
            info: ()=>{},
            log: ()=>{}
        });
        var Trace;
        (function(Trace2) {
            Trace2[Trace2["Off"] = 0] = "Off";
            Trace2[Trace2["Messages"] = 1] = "Messages";
            Trace2[Trace2["Compact"] = 2] = "Compact";
            Trace2[Trace2["Verbose"] = 3] = "Verbose";
        })(Trace || (exports.Trace = Trace = {}));
        var TraceValues;
        (function(TraceValues2) {
            TraceValues2.Off = "off";
            TraceValues2.Messages = "messages";
            TraceValues2.Compact = "compact";
            TraceValues2.Verbose = "verbose";
        })(TraceValues || (exports.TraceValues = TraceValues = {}));
        (function(Trace2) {
            function fromString(value1) {
                if (!Is2.string(value1)) {
                    return Trace2.Off;
                }
                value1 = value1.toLowerCase();
                switch(value1){
                    case "off":
                        return Trace2.Off;
                    case "messages":
                        return Trace2.Messages;
                    case "compact":
                        return Trace2.Compact;
                    case "verbose":
                        return Trace2.Verbose;
                    default:
                        return Trace2.Off;
                }
            }
            Trace2.fromString = fromString;
            function toString(value1) {
                switch(value1){
                    case Trace2.Off:
                        return "off";
                    case Trace2.Messages:
                        return "messages";
                    case Trace2.Compact:
                        return "compact";
                    case Trace2.Verbose:
                        return "verbose";
                    default:
                        return "off";
                }
            }
            Trace2.toString = toString;
        })(Trace || (exports.Trace = Trace = {}));
        var TraceFormat;
        (function(TraceFormat2) {
            TraceFormat2["Text"] = "text";
            TraceFormat2["JSON"] = "json";
        })(TraceFormat || (exports.TraceFormat = TraceFormat = {}));
        (function(TraceFormat2) {
            function fromString(value1) {
                if (!Is2.string(value1)) {
                    return TraceFormat2.Text;
                }
                value1 = value1.toLowerCase();
                if (value1 === "json") {
                    return TraceFormat2.JSON;
                } else {
                    return TraceFormat2.Text;
                }
            }
            TraceFormat2.fromString = fromString;
        })(TraceFormat || (exports.TraceFormat = TraceFormat = {}));
        var SetTraceNotification;
        (function(SetTraceNotification2) {
            SetTraceNotification2.type = new messages_1.NotificationType("$/setTrace");
        })(SetTraceNotification || (exports.SetTraceNotification = SetTraceNotification = {}));
        var LogTraceNotification;
        (function(LogTraceNotification2) {
            LogTraceNotification2.type = new messages_1.NotificationType("$/logTrace");
        })(LogTraceNotification || (exports.LogTraceNotification = LogTraceNotification = {}));
        var ConnectionErrors;
        (function(ConnectionErrors2) {
            ConnectionErrors2[ConnectionErrors2["Closed"] = 1] = "Closed";
            ConnectionErrors2[ConnectionErrors2["Disposed"] = 2] = "Disposed";
            ConnectionErrors2[ConnectionErrors2["AlreadyListening"] = 3] = "AlreadyListening";
        })(ConnectionErrors || (exports.ConnectionErrors = ConnectionErrors = {}));
        var ConnectionError = class _ConnectionError extends Error {
            constructor(code, message){
                super(message);
                this.code = code;
                Object.setPrototypeOf(this, _ConnectionError.prototype);
            }
        };
        exports.ConnectionError = ConnectionError;
        var ConnectionStrategy;
        (function(ConnectionStrategy2) {
            function is(value1) {
                const candidate = value1;
                return candidate && Is2.func(candidate.cancelUndispatched);
            }
            ConnectionStrategy2.is = is;
        })(ConnectionStrategy || (exports.ConnectionStrategy = ConnectionStrategy = {}));
        var IdCancellationReceiverStrategy;
        (function(IdCancellationReceiverStrategy2) {
            function is(value1) {
                const candidate = value1;
                return candidate && (candidate.kind === void 0 || candidate.kind === "id") && Is2.func(candidate.createCancellationTokenSource) && (candidate.dispose === void 0 || Is2.func(candidate.dispose));
            }
            IdCancellationReceiverStrategy2.is = is;
        })(IdCancellationReceiverStrategy || (exports.IdCancellationReceiverStrategy = IdCancellationReceiverStrategy = {}));
        var RequestCancellationReceiverStrategy;
        (function(RequestCancellationReceiverStrategy2) {
            function is(value1) {
                const candidate = value1;
                return candidate && candidate.kind === "request" && Is2.func(candidate.createCancellationTokenSource) && (candidate.dispose === void 0 || Is2.func(candidate.dispose));
            }
            RequestCancellationReceiverStrategy2.is = is;
        })(RequestCancellationReceiverStrategy || (exports.RequestCancellationReceiverStrategy = RequestCancellationReceiverStrategy = {}));
        var CancellationReceiverStrategy;
        (function(CancellationReceiverStrategy2) {
            CancellationReceiverStrategy2.Message = Object.freeze({
                createCancellationTokenSource (_2) {
                    return new cancellation_1.CancellationTokenSource();
                }
            });
            function is(value1) {
                return IdCancellationReceiverStrategy.is(value1) || RequestCancellationReceiverStrategy.is(value1);
            }
            CancellationReceiverStrategy2.is = is;
        })(CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = CancellationReceiverStrategy = {}));
        var CancellationSenderStrategy;
        (function(CancellationSenderStrategy2) {
            CancellationSenderStrategy2.Message = Object.freeze({
                sendCancellation (conn, id) {
                    return conn.sendNotification(CancelNotification.type, {
                        id
                    });
                },
                cleanup (_2) {}
            });
            function is(value1) {
                const candidate = value1;
                return candidate && Is2.func(candidate.sendCancellation) && Is2.func(candidate.cleanup);
            }
            CancellationSenderStrategy2.is = is;
        })(CancellationSenderStrategy || (exports.CancellationSenderStrategy = CancellationSenderStrategy = {}));
        var CancellationStrategy;
        (function(CancellationStrategy2) {
            CancellationStrategy2.Message = Object.freeze({
                receiver: CancellationReceiverStrategy.Message,
                sender: CancellationSenderStrategy.Message
            });
            function is(value1) {
                const candidate = value1;
                return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
            }
            CancellationStrategy2.is = is;
        })(CancellationStrategy || (exports.CancellationStrategy = CancellationStrategy = {}));
        var MessageStrategy;
        (function(MessageStrategy2) {
            function is(value1) {
                const candidate = value1;
                return candidate && Is2.func(candidate.handleMessage);
            }
            MessageStrategy2.is = is;
        })(MessageStrategy || (exports.MessageStrategy = MessageStrategy = {}));
        var ConnectionOptions;
        (function(ConnectionOptions2) {
            function is(value1) {
                const candidate = value1;
                return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy) || MessageStrategy.is(candidate.messageStrategy));
            }
            ConnectionOptions2.is = is;
        })(ConnectionOptions || (exports.ConnectionOptions = ConnectionOptions = {}));
        var ConnectionState;
        (function(ConnectionState2) {
            ConnectionState2[ConnectionState2["New"] = 1] = "New";
            ConnectionState2[ConnectionState2["Listening"] = 2] = "Listening";
            ConnectionState2[ConnectionState2["Closed"] = 3] = "Closed";
            ConnectionState2[ConnectionState2["Disposed"] = 4] = "Disposed";
        })(ConnectionState || (ConnectionState = {}));
        function createMessageConnection(messageReader, messageWriter, _logger, options) {
            const logger = _logger !== void 0 ? _logger : exports.NullLogger;
            let sequenceNumber = 0;
            let notificationSequenceNumber = 0;
            let unknownResponseSequenceNumber = 0;
            const version = "2.0";
            let starRequestHandler = void 0;
            const requestHandlers = /* @__PURE__ */ new Map();
            let starNotificationHandler = void 0;
            const notificationHandlers = /* @__PURE__ */ new Map();
            const progressHandlers = /* @__PURE__ */ new Map();
            let timer;
            let messageQueue = new linkedMap_1.LinkedMap();
            let responsePromises = /* @__PURE__ */ new Map();
            let knownCanceledRequests = /* @__PURE__ */ new Set();
            let requestTokens = /* @__PURE__ */ new Map();
            let trace = Trace.Off;
            let traceFormat = TraceFormat.Text;
            let tracer;
            let state = ConnectionState.New;
            const errorEmitter = new events_1.Emitter();
            const closeEmitter = new events_1.Emitter();
            const unhandledNotificationEmitter = new events_1.Emitter();
            const unhandledProgressEmitter = new events_1.Emitter();
            const disposeEmitter = new events_1.Emitter();
            const cancellationStrategy = options && options.cancellationStrategy ? options.cancellationStrategy : CancellationStrategy.Message;
            function createRequestQueueKey(id) {
                if (id === null) {
                    throw new Error(`Can't send requests with id null since the response can't be correlated.`);
                }
                return "req-" + id.toString();
            }
            function createResponseQueueKey(id) {
                if (id === null) {
                    return "res-unknown-" + (++unknownResponseSequenceNumber).toString();
                } else {
                    return "res-" + id.toString();
                }
            }
            function createNotificationQueueKey() {
                return "not-" + (++notificationSequenceNumber).toString();
            }
            function addMessageToQueue(queue, message) {
                if (messages_1.Message.isRequest(message)) {
                    queue.set(createRequestQueueKey(message.id), message);
                } else if (messages_1.Message.isResponse(message)) {
                    queue.set(createResponseQueueKey(message.id), message);
                } else {
                    queue.set(createNotificationQueueKey(), message);
                }
            }
            function cancelUndispatched(_message) {
                return void 0;
            }
            function isListening() {
                return state === ConnectionState.Listening;
            }
            function isClosed() {
                return state === ConnectionState.Closed;
            }
            function isDisposed() {
                return state === ConnectionState.Disposed;
            }
            function closeHandler() {
                if (state === ConnectionState.New || state === ConnectionState.Listening) {
                    state = ConnectionState.Closed;
                    closeEmitter.fire(void 0);
                }
            }
            function readErrorHandler(error) {
                errorEmitter.fire([
                    error,
                    void 0,
                    void 0
                ]);
            }
            function writeErrorHandler(data) {
                errorEmitter.fire(data);
            }
            messageReader.onClose(closeHandler);
            messageReader.onError(readErrorHandler);
            messageWriter.onClose(closeHandler);
            messageWriter.onError(writeErrorHandler);
            function triggerMessageQueue() {
                if (timer || messageQueue.size === 0) {
                    return;
                }
                timer = (0, ral_1.default)().timer.setImmediate(()=>{
                    timer = void 0;
                    processMessageQueue();
                });
            }
            function handleMessage(message) {
                if (messages_1.Message.isRequest(message)) {
                    handleRequest(message);
                } else if (messages_1.Message.isNotification(message)) {
                    handleNotification(message);
                } else if (messages_1.Message.isResponse(message)) {
                    handleResponse(message);
                } else {
                    handleInvalidMessage(message);
                }
            }
            function processMessageQueue() {
                if (messageQueue.size === 0) {
                    return;
                }
                const message = messageQueue.shift();
                try {
                    const messageStrategy = options == null ? void 0 : options.messageStrategy;
                    if (MessageStrategy.is(messageStrategy)) {
                        messageStrategy.handleMessage(message, handleMessage);
                    } else {
                        handleMessage(message);
                    }
                } finally{
                    triggerMessageQueue();
                }
            }
            const callback = (message)=>{
                try {
                    if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
                        const cancelId = message.params.id;
                        const key = createRequestQueueKey(cancelId);
                        const toCancel = messageQueue.get(key);
                        if (messages_1.Message.isRequest(toCancel)) {
                            const strategy = options == null ? void 0 : options.connectionStrategy;
                            const response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                            if (response && (response.error !== void 0 || response.result !== void 0)) {
                                messageQueue.delete(key);
                                requestTokens.delete(cancelId);
                                response.id = toCancel.id;
                                traceSendingResponse(response, message.method, Date.now());
                                messageWriter.write(response).catch(()=>logger.error(`Sending response for canceled message failed.`));
                                return;
                            }
                        }
                        const cancellationToken = requestTokens.get(cancelId);
                        if (cancellationToken !== void 0) {
                            cancellationToken.cancel();
                            traceReceivedNotification(message);
                            return;
                        } else {
                            knownCanceledRequests.add(cancelId);
                        }
                    }
                    addMessageToQueue(messageQueue, message);
                } finally{
                    triggerMessageQueue();
                }
            };
            function handleRequest(requestMessage) {
                var _a;
                if (isDisposed()) {
                    return;
                }
                function reply(resultOrError, method, startTime2) {
                    const message = {
                        jsonrpc: version,
                        id: requestMessage.id
                    };
                    if (resultOrError instanceof messages_1.ResponseError) {
                        message.error = resultOrError.toJson();
                    } else {
                        message.result = resultOrError === void 0 ? null : resultOrError;
                    }
                    traceSendingResponse(message, method, startTime2);
                    messageWriter.write(message).catch(()=>logger.error(`Sending response failed.`));
                }
                function replyError(error, method, startTime2) {
                    const message = {
                        jsonrpc: version,
                        id: requestMessage.id,
                        error: error.toJson()
                    };
                    traceSendingResponse(message, method, startTime2);
                    messageWriter.write(message).catch(()=>logger.error(`Sending response failed.`));
                }
                function replySuccess(result, method, startTime2) {
                    if (result === void 0) {
                        result = null;
                    }
                    const message = {
                        jsonrpc: version,
                        id: requestMessage.id,
                        result
                    };
                    traceSendingResponse(message, method, startTime2);
                    messageWriter.write(message).catch(()=>logger.error(`Sending response failed.`));
                }
                traceReceivedRequest(requestMessage);
                const element = requestHandlers.get(requestMessage.method);
                let type;
                let requestHandler;
                if (element) {
                    type = element.type;
                    requestHandler = element.handler;
                }
                const startTime = Date.now();
                if (requestHandler || starRequestHandler) {
                    const tokenKey = (_a = requestMessage.id) != null ? _a : String(Date.now());
                    const cancellationSource = IdCancellationReceiverStrategy.is(cancellationStrategy.receiver) ? cancellationStrategy.receiver.createCancellationTokenSource(tokenKey) : cancellationStrategy.receiver.createCancellationTokenSource(requestMessage);
                    if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
                        cancellationSource.cancel();
                    }
                    if (requestMessage.id !== null) {
                        requestTokens.set(tokenKey, cancellationSource);
                    }
                    try {
                        let handlerResult;
                        if (requestHandler) {
                            if (requestMessage.params === void 0) {
                                if (type !== void 0 && type.numberOfParams !== 0) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);
                                    return;
                                }
                                handlerResult = requestHandler(cancellationSource.token);
                            } else if (Array.isArray(requestMessage.params)) {
                                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byName) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                                    return;
                                }
                                handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                            } else {
                                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                                    return;
                                }
                                handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                            }
                        } else if (starRequestHandler) {
                            handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                        }
                        const promise = handlerResult;
                        if (!handlerResult) {
                            requestTokens.delete(tokenKey);
                            replySuccess(handlerResult, requestMessage.method, startTime);
                        } else if (promise.then) {
                            promise.then((resultOrError)=>{
                                requestTokens.delete(tokenKey);
                                reply(resultOrError, requestMessage.method, startTime);
                            }, (error)=>{
                                requestTokens.delete(tokenKey);
                                if (error instanceof messages_1.ResponseError) {
                                    replyError(error, requestMessage.method, startTime);
                                } else if (error && Is2.string(error.message)) {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                                } else {
                                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                                }
                            });
                        } else {
                            requestTokens.delete(tokenKey);
                            reply(handlerResult, requestMessage.method, startTime);
                        }
                    } catch (error) {
                        requestTokens.delete(tokenKey);
                        if (error instanceof messages_1.ResponseError) {
                            reply(error, requestMessage.method, startTime);
                        } else if (error && Is2.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                        } else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                        }
                    }
                } else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
                }
            }
            function handleResponse(responseMessage) {
                if (isDisposed()) {
                    return;
                }
                if (responseMessage.id === null) {
                    if (responseMessage.error) {
                        logger.error(`Received response message without id: Error is: 
${JSON.stringify(responseMessage.error, void 0, 4)}`);
                    } else {
                        logger.error(`Received response message without id. No further error information provided.`);
                    }
                } else {
                    const key = responseMessage.id;
                    const responsePromise = responsePromises.get(key);
                    traceReceivedResponse(responseMessage, responsePromise);
                    if (responsePromise !== void 0) {
                        responsePromises.delete(key);
                        try {
                            if (responseMessage.error) {
                                const error = responseMessage.error;
                                responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                            } else if (responseMessage.result !== void 0) {
                                responsePromise.resolve(responseMessage.result);
                            } else {
                                throw new Error("Should never happen.");
                            }
                        } catch (error) {
                            if (error.message) {
                                logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                            } else {
                                logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                            }
                        }
                    }
                }
            }
            function handleNotification(message) {
                if (isDisposed()) {
                    return;
                }
                let type = void 0;
                let notificationHandler;
                if (message.method === CancelNotification.type.method) {
                    const cancelId = message.params.id;
                    knownCanceledRequests.delete(cancelId);
                    traceReceivedNotification(message);
                    return;
                } else {
                    const element = notificationHandlers.get(message.method);
                    if (element) {
                        notificationHandler = element.handler;
                        type = element.type;
                    }
                }
                if (notificationHandler || starNotificationHandler) {
                    try {
                        traceReceivedNotification(message);
                        if (notificationHandler) {
                            if (message.params === void 0) {
                                if (type !== void 0) {
                                    if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                        logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                                    }
                                }
                                notificationHandler();
                            } else if (Array.isArray(message.params)) {
                                const params = message.params;
                                if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                                    notificationHandler({
                                        token: params[0],
                                        value: params[1]
                                    });
                                } else {
                                    if (type !== void 0) {
                                        if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                            logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                                        }
                                        if (type.numberOfParams !== message.params.length) {
                                            logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                                        }
                                    }
                                    notificationHandler(...params);
                                }
                            } else {
                                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                                    logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                                }
                                notificationHandler(message.params);
                            }
                        } else if (starNotificationHandler) {
                            starNotificationHandler(message.method, message.params);
                        }
                    } catch (error) {
                        if (error.message) {
                            logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                        } else {
                            logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                        }
                    }
                } else {
                    unhandledNotificationEmitter.fire(message);
                }
            }
            function handleInvalidMessage(message) {
                if (!message) {
                    logger.error("Received empty message.");
                    return;
                }
                logger.error(`Received message which is neither a response nor a notification message:
${JSON.stringify(message, null, 4)}`);
                const responseMessage = message;
                if (Is2.string(responseMessage.id) || Is2.number(responseMessage.id)) {
                    const key = responseMessage.id;
                    const responseHandler = responsePromises.get(key);
                    if (responseHandler) {
                        responseHandler.reject(new Error("The received response has neither a result nor an error property."));
                    }
                }
            }
            function stringifyTrace(params) {
                if (params === void 0 || params === null) {
                    return void 0;
                }
                switch(trace){
                    case Trace.Verbose:
                        return JSON.stringify(params, null, 4);
                    case Trace.Compact:
                        return JSON.stringify(params);
                    default:
                        return void 0;
                }
            }
            function traceSendingRequest(message) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                        data = `Params: ${stringifyTrace(message.params)}

`;
                    }
                    tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
                } else {
                    logLSPMessage("send-request", message);
                }
            }
            function traceSendingNotification(message) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose || trace === Trace.Compact) {
                        if (message.params) {
                            data = `Params: ${stringifyTrace(message.params)}

`;
                        } else {
                            data = "No parameters provided.\n\n";
                        }
                    }
                    tracer.log(`Sending notification '${message.method}'.`, data);
                } else {
                    logLSPMessage("send-notification", message);
                }
            }
            function traceSendingResponse(message, method, startTime) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose || trace === Trace.Compact) {
                        if (message.error && message.error.data) {
                            data = `Error data: ${stringifyTrace(message.error.data)}

`;
                        } else {
                            if (message.result) {
                                data = `Result: ${stringifyTrace(message.result)}

`;
                            } else if (message.error === void 0) {
                                data = "No result returned.\n\n";
                            }
                        }
                    }
                    tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
                } else {
                    logLSPMessage("send-response", message);
                }
            }
            function traceReceivedRequest(message) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                        data = `Params: ${stringifyTrace(message.params)}

`;
                    }
                    tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
                } else {
                    logLSPMessage("receive-request", message);
                }
            }
            function traceReceivedNotification(message) {
                if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose || trace === Trace.Compact) {
                        if (message.params) {
                            data = `Params: ${stringifyTrace(message.params)}

`;
                        } else {
                            data = "No parameters provided.\n\n";
                        }
                    }
                    tracer.log(`Received notification '${message.method}'.`, data);
                } else {
                    logLSPMessage("receive-notification", message);
                }
            }
            function traceReceivedResponse(message, responsePromise) {
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                if (traceFormat === TraceFormat.Text) {
                    let data = void 0;
                    if (trace === Trace.Verbose || trace === Trace.Compact) {
                        if (message.error && message.error.data) {
                            data = `Error data: ${stringifyTrace(message.error.data)}

`;
                        } else {
                            if (message.result) {
                                data = `Result: ${stringifyTrace(message.result)}

`;
                            } else if (message.error === void 0) {
                                data = "No result returned.\n\n";
                            }
                        }
                    }
                    if (responsePromise) {
                        const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : "";
                        tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
                    } else {
                        tracer.log(`Received response ${message.id} without active response promise.`, data);
                    }
                } else {
                    logLSPMessage("receive-response", message);
                }
            }
            function logLSPMessage(type, message) {
                if (!tracer || trace === Trace.Off) {
                    return;
                }
                const lspMessage = {
                    isLSPMessage: true,
                    type,
                    message,
                    timestamp: Date.now()
                };
                tracer.log(lspMessage);
            }
            function throwIfClosedOrDisposed() {
                if (isClosed()) {
                    throw new ConnectionError(ConnectionErrors.Closed, "Connection is closed.");
                }
                if (isDisposed()) {
                    throw new ConnectionError(ConnectionErrors.Disposed, "Connection is disposed.");
                }
            }
            function throwIfListening() {
                if (isListening()) {
                    throw new ConnectionError(ConnectionErrors.AlreadyListening, "Connection is already listening");
                }
            }
            function throwIfNotListening() {
                if (!isListening()) {
                    throw new Error("Call listen() first.");
                }
            }
            function undefinedToNull(param) {
                if (param === void 0) {
                    return null;
                } else {
                    return param;
                }
            }
            function nullToUndefined(param) {
                if (param === null) {
                    return void 0;
                } else {
                    return param;
                }
            }
            function isNamedParam(param) {
                return param !== void 0 && param !== null && !Array.isArray(param) && typeof param === "object";
            }
            function computeSingleParam(parameterStructures, param) {
                switch(parameterStructures){
                    case messages_1.ParameterStructures.auto:
                        if (isNamedParam(param)) {
                            return nullToUndefined(param);
                        } else {
                            return [
                                undefinedToNull(param)
                            ];
                        }
                    case messages_1.ParameterStructures.byName:
                        if (!isNamedParam(param)) {
                            throw new Error(`Received parameters by name but param is not an object literal.`);
                        }
                        return nullToUndefined(param);
                    case messages_1.ParameterStructures.byPosition:
                        return [
                            undefinedToNull(param)
                        ];
                    default:
                        throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
                }
            }
            function computeMessageParams(type, params) {
                let result;
                const numberOfParams = type.numberOfParams;
                switch(numberOfParams){
                    case 0:
                        result = void 0;
                        break;
                    case 1:
                        result = computeSingleParam(type.parameterStructures, params[0]);
                        break;
                    default:
                        result = [];
                        for(let i = 0; i < params.length && i < numberOfParams; i++){
                            result.push(undefinedToNull(params[i]));
                        }
                        if (params.length < numberOfParams) {
                            for(let i = params.length; i < numberOfParams; i++){
                                result.push(null);
                            }
                        }
                        break;
                }
                return result;
            }
            const connection = {
                sendNotification: (type, ...args)=>{
                    throwIfClosedOrDisposed();
                    let method;
                    let messageParams;
                    if (Is2.string(type)) {
                        method = type;
                        const first = args[0];
                        let paramStart = 0;
                        let parameterStructures = messages_1.ParameterStructures.auto;
                        if (messages_1.ParameterStructures.is(first)) {
                            paramStart = 1;
                            parameterStructures = first;
                        }
                        let paramEnd = args.length;
                        const numberOfParams = paramEnd - paramStart;
                        switch(numberOfParams){
                            case 0:
                                messageParams = void 0;
                                break;
                            case 1:
                                messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                                break;
                            default:
                                if (parameterStructures === messages_1.ParameterStructures.byName) {
                                    throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                                }
                                messageParams = args.slice(paramStart, paramEnd).map((value1)=>undefinedToNull(value1));
                                break;
                        }
                    } else {
                        const params = args;
                        method = type.method;
                        messageParams = computeMessageParams(type, params);
                    }
                    const notificationMessage = {
                        jsonrpc: version,
                        method,
                        params: messageParams
                    };
                    traceSendingNotification(notificationMessage);
                    return messageWriter.write(notificationMessage).catch((error)=>{
                        logger.error(`Sending notification failed.`);
                        throw error;
                    });
                },
                onNotification: (type, handler)=>{
                    throwIfClosedOrDisposed();
                    let method;
                    if (Is2.func(type)) {
                        starNotificationHandler = type;
                    } else if (handler) {
                        if (Is2.string(type)) {
                            method = type;
                            notificationHandlers.set(type, {
                                type: void 0,
                                handler
                            });
                        } else {
                            method = type.method;
                            notificationHandlers.set(type.method, {
                                type,
                                handler
                            });
                        }
                    }
                    return {
                        dispose: ()=>{
                            if (method !== void 0) {
                                notificationHandlers.delete(method);
                            } else {
                                starNotificationHandler = void 0;
                            }
                        }
                    };
                },
                onProgress: (_type, token, handler)=>{
                    if (progressHandlers.has(token)) {
                        throw new Error(`Progress handler for token ${token} already registered`);
                    }
                    progressHandlers.set(token, handler);
                    return {
                        dispose: ()=>{
                            progressHandlers.delete(token);
                        }
                    };
                },
                sendProgress: (_type, token, value1)=>{
                    return connection.sendNotification(ProgressNotification.type, {
                        token,
                        value: value1
                    });
                },
                onUnhandledProgress: unhandledProgressEmitter.event,
                sendRequest: (type, ...args)=>{
                    throwIfClosedOrDisposed();
                    throwIfNotListening();
                    let method;
                    let messageParams;
                    let token = void 0;
                    if (Is2.string(type)) {
                        method = type;
                        const first = args[0];
                        const last = args[args.length - 1];
                        let paramStart = 0;
                        let parameterStructures = messages_1.ParameterStructures.auto;
                        if (messages_1.ParameterStructures.is(first)) {
                            paramStart = 1;
                            parameterStructures = first;
                        }
                        let paramEnd = args.length;
                        if (cancellation_1.CancellationToken.is(last)) {
                            paramEnd = paramEnd - 1;
                            token = last;
                        }
                        const numberOfParams = paramEnd - paramStart;
                        switch(numberOfParams){
                            case 0:
                                messageParams = void 0;
                                break;
                            case 1:
                                messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                                break;
                            default:
                                if (parameterStructures === messages_1.ParameterStructures.byName) {
                                    throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                                }
                                messageParams = args.slice(paramStart, paramEnd).map((value1)=>undefinedToNull(value1));
                                break;
                        }
                    } else {
                        const params = args;
                        method = type.method;
                        messageParams = computeMessageParams(type, params);
                        const numberOfParams = type.numberOfParams;
                        token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : void 0;
                    }
                    const id = sequenceNumber++;
                    let disposable;
                    if (token) {
                        disposable = token.onCancellationRequested(()=>{
                            const p = cancellationStrategy.sender.sendCancellation(connection, id);
                            if (p === void 0) {
                                logger.log(`Received no promise from cancellation strategy when cancelling id ${id}`);
                                return Promise.resolve();
                            } else {
                                return p.catch(()=>{
                                    logger.log(`Sending cancellation messages for id ${id} failed`);
                                });
                            }
                        });
                    }
                    const requestMessage = {
                        jsonrpc: version,
                        id,
                        method,
                        params: messageParams
                    };
                    traceSendingRequest(requestMessage);
                    if (typeof cancellationStrategy.sender.enableCancellation === "function") {
                        cancellationStrategy.sender.enableCancellation(requestMessage);
                    }
                    return new Promise(async (resolve2, reject)=>{
                        const resolveWithCleanup = (r)=>{
                            resolve2(r);
                            cancellationStrategy.sender.cleanup(id);
                            disposable == null ? void 0 : disposable.dispose();
                        };
                        const rejectWithCleanup = (r)=>{
                            reject(r);
                            cancellationStrategy.sender.cleanup(id);
                            disposable == null ? void 0 : disposable.dispose();
                        };
                        const responsePromise = {
                            method,
                            timerStart: Date.now(),
                            resolve: resolveWithCleanup,
                            reject: rejectWithCleanup
                        };
                        try {
                            await messageWriter.write(requestMessage);
                            responsePromises.set(id, responsePromise);
                        } catch (error) {
                            logger.error(`Sending request failed.`);
                            responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, error.message ? error.message : "Unknown reason"));
                            throw error;
                        }
                    });
                },
                onRequest: (type, handler)=>{
                    throwIfClosedOrDisposed();
                    let method = null;
                    if (StarRequestHandler.is(type)) {
                        method = void 0;
                        starRequestHandler = type;
                    } else if (Is2.string(type)) {
                        method = null;
                        if (handler !== void 0) {
                            method = type;
                            requestHandlers.set(type, {
                                handler,
                                type: void 0
                            });
                        }
                    } else {
                        if (handler !== void 0) {
                            method = type.method;
                            requestHandlers.set(type.method, {
                                type,
                                handler
                            });
                        }
                    }
                    return {
                        dispose: ()=>{
                            if (method === null) {
                                return;
                            }
                            if (method !== void 0) {
                                requestHandlers.delete(method);
                            } else {
                                starRequestHandler = void 0;
                            }
                        }
                    };
                },
                hasPendingResponse: ()=>{
                    return responsePromises.size > 0;
                },
                trace: async (_value, _tracer, sendNotificationOrTraceOptions)=>{
                    let _sendNotification = false;
                    let _traceFormat = TraceFormat.Text;
                    if (sendNotificationOrTraceOptions !== void 0) {
                        if (Is2.boolean(sendNotificationOrTraceOptions)) {
                            _sendNotification = sendNotificationOrTraceOptions;
                        } else {
                            _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                            _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                        }
                    }
                    trace = _value;
                    traceFormat = _traceFormat;
                    if (trace === Trace.Off) {
                        tracer = void 0;
                    } else {
                        tracer = _tracer;
                    }
                    if (_sendNotification && !isClosed() && !isDisposed()) {
                        await connection.sendNotification(SetTraceNotification.type, {
                            value: Trace.toString(_value)
                        });
                    }
                },
                onError: errorEmitter.event,
                onClose: closeEmitter.event,
                onUnhandledNotification: unhandledNotificationEmitter.event,
                onDispose: disposeEmitter.event,
                end: ()=>{
                    messageWriter.end();
                },
                dispose: ()=>{
                    if (isDisposed()) {
                        return;
                    }
                    state = ConnectionState.Disposed;
                    disposeEmitter.fire(void 0);
                    const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, "Pending response rejected since connection got disposed");
                    for (const promise of responsePromises.values()){
                        promise.reject(error);
                    }
                    responsePromises = /* @__PURE__ */ new Map();
                    requestTokens = /* @__PURE__ */ new Map();
                    knownCanceledRequests = /* @__PURE__ */ new Set();
                    messageQueue = new linkedMap_1.LinkedMap();
                    if (Is2.func(messageWriter.dispose)) {
                        messageWriter.dispose();
                    }
                    if (Is2.func(messageReader.dispose)) {
                        messageReader.dispose();
                    }
                },
                listen: ()=>{
                    throwIfClosedOrDisposed();
                    throwIfListening();
                    state = ConnectionState.Listening;
                    messageReader.listen(callback);
                },
                inspect: ()=>{
                    (0, ral_1.default)().console.log("inspect");
                }
            };
            connection.onNotification(LogTraceNotification.type, (params)=>{
                if (trace === Trace.Off || !tracer) {
                    return;
                }
                const verbose = trace === Trace.Verbose || trace === Trace.Compact;
                tracer.log(params.message, verbose ? params.verbose : void 0);
            });
            connection.onNotification(ProgressNotification.type, (params)=>{
                const handler = progressHandlers.get(params.token);
                if (handler) {
                    handler(params.value);
                } else {
                    unhandledProgressEmitter.fire(params);
                }
            });
            return connection;
        }
        exports.createMessageConnection = createMessageConnection;
    }
});
// ../../node_modules/vscode-jsonrpc/lib/common/api.js
var require_api = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/common/api.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ProgressType = exports.ProgressToken = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.AbstractMessageBuffer = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.LRUCache = exports.Touch = exports.LinkedMap = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.Message = exports.RAL = void 0;
        exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = void 0;
        var messages_1 = require_messages();
        Object.defineProperty(exports, "Message", {
            enumerable: true,
            get: function() {
                return messages_1.Message;
            }
        });
        Object.defineProperty(exports, "RequestType", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType;
            }
        });
        Object.defineProperty(exports, "RequestType0", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType0;
            }
        });
        Object.defineProperty(exports, "RequestType1", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType1;
            }
        });
        Object.defineProperty(exports, "RequestType2", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType2;
            }
        });
        Object.defineProperty(exports, "RequestType3", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType3;
            }
        });
        Object.defineProperty(exports, "RequestType4", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType4;
            }
        });
        Object.defineProperty(exports, "RequestType5", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType5;
            }
        });
        Object.defineProperty(exports, "RequestType6", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType6;
            }
        });
        Object.defineProperty(exports, "RequestType7", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType7;
            }
        });
        Object.defineProperty(exports, "RequestType8", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType8;
            }
        });
        Object.defineProperty(exports, "RequestType9", {
            enumerable: true,
            get: function() {
                return messages_1.RequestType9;
            }
        });
        Object.defineProperty(exports, "ResponseError", {
            enumerable: true,
            get: function() {
                return messages_1.ResponseError;
            }
        });
        Object.defineProperty(exports, "ErrorCodes", {
            enumerable: true,
            get: function() {
                return messages_1.ErrorCodes;
            }
        });
        Object.defineProperty(exports, "NotificationType", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType;
            }
        });
        Object.defineProperty(exports, "NotificationType0", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType0;
            }
        });
        Object.defineProperty(exports, "NotificationType1", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType1;
            }
        });
        Object.defineProperty(exports, "NotificationType2", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType2;
            }
        });
        Object.defineProperty(exports, "NotificationType3", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType3;
            }
        });
        Object.defineProperty(exports, "NotificationType4", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType4;
            }
        });
        Object.defineProperty(exports, "NotificationType5", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType5;
            }
        });
        Object.defineProperty(exports, "NotificationType6", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType6;
            }
        });
        Object.defineProperty(exports, "NotificationType7", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType7;
            }
        });
        Object.defineProperty(exports, "NotificationType8", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType8;
            }
        });
        Object.defineProperty(exports, "NotificationType9", {
            enumerable: true,
            get: function() {
                return messages_1.NotificationType9;
            }
        });
        Object.defineProperty(exports, "ParameterStructures", {
            enumerable: true,
            get: function() {
                return messages_1.ParameterStructures;
            }
        });
        var linkedMap_1 = require_linkedMap();
        Object.defineProperty(exports, "LinkedMap", {
            enumerable: true,
            get: function() {
                return linkedMap_1.LinkedMap;
            }
        });
        Object.defineProperty(exports, "LRUCache", {
            enumerable: true,
            get: function() {
                return linkedMap_1.LRUCache;
            }
        });
        Object.defineProperty(exports, "Touch", {
            enumerable: true,
            get: function() {
                return linkedMap_1.Touch;
            }
        });
        var disposable_1 = require_disposable();
        Object.defineProperty(exports, "Disposable", {
            enumerable: true,
            get: function() {
                return disposable_1.Disposable;
            }
        });
        var events_1 = require_events();
        Object.defineProperty(exports, "Event", {
            enumerable: true,
            get: function() {
                return events_1.Event;
            }
        });
        Object.defineProperty(exports, "Emitter", {
            enumerable: true,
            get: function() {
                return events_1.Emitter;
            }
        });
        var cancellation_1 = require_cancellation();
        Object.defineProperty(exports, "CancellationTokenSource", {
            enumerable: true,
            get: function() {
                return cancellation_1.CancellationTokenSource;
            }
        });
        Object.defineProperty(exports, "CancellationToken", {
            enumerable: true,
            get: function() {
                return cancellation_1.CancellationToken;
            }
        });
        var sharedArrayCancellation_1 = require_sharedArrayCancellation();
        Object.defineProperty(exports, "SharedArraySenderStrategy", {
            enumerable: true,
            get: function() {
                return sharedArrayCancellation_1.SharedArraySenderStrategy;
            }
        });
        Object.defineProperty(exports, "SharedArrayReceiverStrategy", {
            enumerable: true,
            get: function() {
                return sharedArrayCancellation_1.SharedArrayReceiverStrategy;
            }
        });
        var messageReader_1 = require_messageReader();
        Object.defineProperty(exports, "MessageReader", {
            enumerable: true,
            get: function() {
                return messageReader_1.MessageReader;
            }
        });
        Object.defineProperty(exports, "AbstractMessageReader", {
            enumerable: true,
            get: function() {
                return messageReader_1.AbstractMessageReader;
            }
        });
        Object.defineProperty(exports, "ReadableStreamMessageReader", {
            enumerable: true,
            get: function() {
                return messageReader_1.ReadableStreamMessageReader;
            }
        });
        var messageWriter_1 = require_messageWriter();
        Object.defineProperty(exports, "MessageWriter", {
            enumerable: true,
            get: function() {
                return messageWriter_1.MessageWriter;
            }
        });
        Object.defineProperty(exports, "AbstractMessageWriter", {
            enumerable: true,
            get: function() {
                return messageWriter_1.AbstractMessageWriter;
            }
        });
        Object.defineProperty(exports, "WriteableStreamMessageWriter", {
            enumerable: true,
            get: function() {
                return messageWriter_1.WriteableStreamMessageWriter;
            }
        });
        var messageBuffer_1 = require_messageBuffer();
        Object.defineProperty(exports, "AbstractMessageBuffer", {
            enumerable: true,
            get: function() {
                return messageBuffer_1.AbstractMessageBuffer;
            }
        });
        var connection_1 = require_connection();
        Object.defineProperty(exports, "ConnectionStrategy", {
            enumerable: true,
            get: function() {
                return connection_1.ConnectionStrategy;
            }
        });
        Object.defineProperty(exports, "ConnectionOptions", {
            enumerable: true,
            get: function() {
                return connection_1.ConnectionOptions;
            }
        });
        Object.defineProperty(exports, "NullLogger", {
            enumerable: true,
            get: function() {
                return connection_1.NullLogger;
            }
        });
        Object.defineProperty(exports, "createMessageConnection", {
            enumerable: true,
            get: function() {
                return connection_1.createMessageConnection;
            }
        });
        Object.defineProperty(exports, "ProgressToken", {
            enumerable: true,
            get: function() {
                return connection_1.ProgressToken;
            }
        });
        Object.defineProperty(exports, "ProgressType", {
            enumerable: true,
            get: function() {
                return connection_1.ProgressType;
            }
        });
        Object.defineProperty(exports, "Trace", {
            enumerable: true,
            get: function() {
                return connection_1.Trace;
            }
        });
        Object.defineProperty(exports, "TraceValues", {
            enumerable: true,
            get: function() {
                return connection_1.TraceValues;
            }
        });
        Object.defineProperty(exports, "TraceFormat", {
            enumerable: true,
            get: function() {
                return connection_1.TraceFormat;
            }
        });
        Object.defineProperty(exports, "SetTraceNotification", {
            enumerable: true,
            get: function() {
                return connection_1.SetTraceNotification;
            }
        });
        Object.defineProperty(exports, "LogTraceNotification", {
            enumerable: true,
            get: function() {
                return connection_1.LogTraceNotification;
            }
        });
        Object.defineProperty(exports, "ConnectionErrors", {
            enumerable: true,
            get: function() {
                return connection_1.ConnectionErrors;
            }
        });
        Object.defineProperty(exports, "ConnectionError", {
            enumerable: true,
            get: function() {
                return connection_1.ConnectionError;
            }
        });
        Object.defineProperty(exports, "CancellationReceiverStrategy", {
            enumerable: true,
            get: function() {
                return connection_1.CancellationReceiverStrategy;
            }
        });
        Object.defineProperty(exports, "CancellationSenderStrategy", {
            enumerable: true,
            get: function() {
                return connection_1.CancellationSenderStrategy;
            }
        });
        Object.defineProperty(exports, "CancellationStrategy", {
            enumerable: true,
            get: function() {
                return connection_1.CancellationStrategy;
            }
        });
        Object.defineProperty(exports, "MessageStrategy", {
            enumerable: true,
            get: function() {
                return connection_1.MessageStrategy;
            }
        });
        var ral_1 = require_ral();
        exports.RAL = ral_1.default;
    }
});
// ../../node_modules/vscode-jsonrpc/lib/browser/ril.js
var require_ril = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/browser/ril.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var api_1 = require_api();
        var MessageBuffer = class _MessageBuffer extends api_1.AbstractMessageBuffer {
            emptyBuffer() {
                return _MessageBuffer.emptyBuffer;
            }
            fromString(value1, _encoding) {
                return new TextEncoder().encode(value1);
            }
            toString(value1, encoding) {
                if (encoding === "ascii") {
                    return this.asciiDecoder.decode(value1);
                } else {
                    return new TextDecoder(encoding).decode(value1);
                }
            }
            asNative(buffer, length) {
                if (length === void 0) {
                    return buffer;
                } else {
                    return buffer.slice(0, length);
                }
            }
            allocNative(length) {
                return new Uint8Array(length);
            }
            constructor(encoding = "utf-8"){
                super(encoding);
                this.asciiDecoder = new TextDecoder("ascii");
            }
        };
        MessageBuffer.emptyBuffer = new Uint8Array(0);
        var ReadableStreamWrapper = class {
            onClose(listener) {
                this.socket.addEventListener("close", listener);
                return api_1.Disposable.create(()=>this.socket.removeEventListener("close", listener));
            }
            onError(listener) {
                this.socket.addEventListener("error", listener);
                return api_1.Disposable.create(()=>this.socket.removeEventListener("error", listener));
            }
            onEnd(listener) {
                this.socket.addEventListener("end", listener);
                return api_1.Disposable.create(()=>this.socket.removeEventListener("end", listener));
            }
            onData(listener) {
                return this._onData.event(listener);
            }
            constructor(socket){
                this.socket = socket;
                this._onData = new api_1.Emitter();
                this._messageListener = (event)=>{
                    const blob = event.data;
                    blob.arrayBuffer().then((buffer)=>{
                        this._onData.fire(new Uint8Array(buffer));
                    }, ()=>{
                        (0, api_1.RAL)().console.error(`Converting blob to array buffer failed.`);
                    });
                };
                this.socket.addEventListener("message", this._messageListener);
            }
        };
        var WritableStreamWrapper = class {
            onClose(listener) {
                this.socket.addEventListener("close", listener);
                return api_1.Disposable.create(()=>this.socket.removeEventListener("close", listener));
            }
            onError(listener) {
                this.socket.addEventListener("error", listener);
                return api_1.Disposable.create(()=>this.socket.removeEventListener("error", listener));
            }
            onEnd(listener) {
                this.socket.addEventListener("end", listener);
                return api_1.Disposable.create(()=>this.socket.removeEventListener("end", listener));
            }
            write(data, encoding) {
                if (typeof data === "string") {
                    if (encoding !== void 0 && encoding !== "utf-8") {
                        throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${encoding}`);
                    }
                    this.socket.send(data);
                } else {
                    this.socket.send(data);
                }
                return Promise.resolve();
            }
            end() {
                this.socket.close();
            }
            constructor(socket){
                this.socket = socket;
            }
        };
        var _textEncoder = new TextEncoder();
        var _ril = Object.freeze({
            messageBuffer: Object.freeze({
                create: (encoding)=>new MessageBuffer(encoding)
            }),
            applicationJson: Object.freeze({
                encoder: Object.freeze({
                    name: "application/json",
                    encode: (msg, options)=>{
                        if (options.charset !== "utf-8") {
                            throw new Error(`In a Browser environments only utf-8 text encoding is supported. But got encoding: ${options.charset}`);
                        }
                        return Promise.resolve(_textEncoder.encode(JSON.stringify(msg, void 0, 0)));
                    }
                }),
                decoder: Object.freeze({
                    name: "application/json",
                    decode: (buffer, options)=>{
                        if (!(buffer instanceof Uint8Array)) {
                            throw new Error(`In a Browser environments only Uint8Arrays are supported.`);
                        }
                        return Promise.resolve(JSON.parse(new TextDecoder(options.charset).decode(buffer)));
                    }
                })
            }),
            stream: Object.freeze({
                asReadableStream: (socket)=>new ReadableStreamWrapper(socket),
                asWritableStream: (socket)=>new WritableStreamWrapper(socket)
            }),
            console,
            timer: Object.freeze({
                setTimeout (callback, ms, ...args) {
                    const handle = setTimeout(callback, ms, ...args);
                    return {
                        dispose: ()=>clearTimeout(handle)
                    };
                },
                setImmediate (callback, ...args) {
                    const handle = setTimeout(callback, 0, ...args);
                    return {
                        dispose: ()=>clearTimeout(handle)
                    };
                },
                setInterval (callback, ms, ...args) {
                    const handle = setInterval(callback, ms, ...args);
                    return {
                        dispose: ()=>clearInterval(handle)
                    };
                }
            })
        });
        function RIL() {
            return _ril;
        }
        (function(RIL2) {
            function install() {
                api_1.RAL.install(_ril);
            }
            RIL2.install = install;
        })(RIL || (RIL = {}));
        exports.default = RIL;
    }
});
// ../../node_modules/vscode-jsonrpc/lib/browser/main.js
var require_main = __commonJS({
    "../../node_modules/vscode-jsonrpc/lib/browser/main.js" (exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                desc = {
                    enumerable: true,
                    get: function() {
                        return m[k];
                    }
                };
            }
            Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function(m, exports2) {
            for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createMessageConnection = exports.BrowserMessageWriter = exports.BrowserMessageReader = void 0;
        var ril_1 = require_ril();
        ril_1.default.install();
        var api_1 = require_api();
        __exportStar(require_api(), exports);
        var BrowserMessageReader = class extends api_1.AbstractMessageReader {
            listen(callback) {
                return this._onData.event(callback);
            }
            constructor(port){
                super();
                this._onData = new api_1.Emitter();
                this._messageListener = (event)=>{
                    this._onData.fire(event.data);
                };
                port.addEventListener("error", (event)=>this.fireError(event));
                port.onmessage = this._messageListener;
            }
        };
        exports.BrowserMessageReader = BrowserMessageReader;
        var BrowserMessageWriter = class extends api_1.AbstractMessageWriter {
            write(msg) {
                try {
                    this.port.postMessage(msg);
                    return Promise.resolve();
                } catch (error) {
                    this.handleError(error, msg);
                    return Promise.reject(error);
                }
            }
            handleError(error, msg) {
                this.errorCount++;
                this.fireError(error, msg, this.errorCount);
            }
            end() {}
            constructor(port){
                super();
                this.port = port;
                this.errorCount = 0;
                port.addEventListener("error", (event)=>this.fireError(event));
            }
        };
        exports.BrowserMessageWriter = BrowserMessageWriter;
        function createMessageConnection(reader, writer, logger, options) {
            if (logger === void 0) {
                logger = api_1.NullLogger;
            }
            if (api_1.ConnectionStrategy.is(options)) {
                options = {
                    connectionStrategy: options
                };
            }
            return (0, api_1.createMessageConnection)(reader, writer, logger, options);
        }
        exports.createMessageConnection = createMessageConnection;
    }
});
// ../../node_modules/vscode-jsonrpc/browser.js
var require_browser = __commonJS({
    "../../node_modules/vscode-jsonrpc/browser.js" (exports, module) {
        "use strict";
        module.exports = require_main();
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/messages.js
var require_messages2 = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = exports.MessageDirection = void 0;
        var vscode_jsonrpc_1 = require_main();
        var MessageDirection;
        (function(MessageDirection2) {
            MessageDirection2["clientToServer"] = "clientToServer";
            MessageDirection2["serverToClient"] = "serverToClient";
            MessageDirection2["both"] = "both";
        })(MessageDirection || (exports.MessageDirection = MessageDirection = {}));
        var RegistrationType = class {
            constructor(method){
                this.method = method;
            }
        };
        exports.RegistrationType = RegistrationType;
        var ProtocolRequestType0 = class extends vscode_jsonrpc_1.RequestType0 {
            constructor(method){
                super(method);
            }
        };
        exports.ProtocolRequestType0 = ProtocolRequestType0;
        var ProtocolRequestType = class extends vscode_jsonrpc_1.RequestType {
            constructor(method){
                super(method, vscode_jsonrpc_1.ParameterStructures.byName);
            }
        };
        exports.ProtocolRequestType = ProtocolRequestType;
        var ProtocolNotificationType0 = class extends vscode_jsonrpc_1.NotificationType0 {
            constructor(method){
                super(method);
            }
        };
        exports.ProtocolNotificationType0 = ProtocolNotificationType0;
        var ProtocolNotificationType = class extends vscode_jsonrpc_1.NotificationType {
            constructor(method){
                super(method, vscode_jsonrpc_1.ParameterStructures.byName);
            }
        };
        exports.ProtocolNotificationType = ProtocolNotificationType;
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/utils/is.js
var require_is2 = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/utils/is.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.objectLiteral = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
        function boolean(value1) {
            return value1 === true || value1 === false;
        }
        exports.boolean = boolean;
        function string2(value1) {
            return typeof value1 === "string" || value1 instanceof String;
        }
        exports.string = string2;
        function number(value1) {
            return typeof value1 === "number" || value1 instanceof Number;
        }
        exports.number = number;
        function error(value1) {
            return value1 instanceof Error;
        }
        exports.error = error;
        function func(value1) {
            return typeof value1 === "function";
        }
        exports.func = func;
        function array(value1) {
            return Array.isArray(value1);
        }
        exports.array = array;
        function stringArray(value1) {
            return array(value1) && value1.every((elem)=>string2(elem));
        }
        exports.stringArray = stringArray;
        function typedArray(value1, check) {
            return Array.isArray(value1) && value1.every(check);
        }
        exports.typedArray = typedArray;
        function objectLiteral(value1) {
            return value1 !== null && typeof value1 === "object";
        }
        exports.objectLiteral = objectLiteral;
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js
var require_protocol_implementation = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ImplementationRequest = void 0;
        var messages_1 = require_messages2();
        var ImplementationRequest;
        (function(ImplementationRequest2) {
            ImplementationRequest2.method = "textDocument/implementation";
            ImplementationRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            ImplementationRequest2.type = new messages_1.ProtocolRequestType(ImplementationRequest2.method);
        })(ImplementationRequest || (exports.ImplementationRequest = ImplementationRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js
var require_protocol_typeDefinition = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.TypeDefinitionRequest = void 0;
        var messages_1 = require_messages2();
        var TypeDefinitionRequest;
        (function(TypeDefinitionRequest2) {
            TypeDefinitionRequest2.method = "textDocument/typeDefinition";
            TypeDefinitionRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            TypeDefinitionRequest2.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest2.method);
        })(TypeDefinitionRequest || (exports.TypeDefinitionRequest = TypeDefinitionRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js
var require_protocol_workspaceFolder = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;
        var messages_1 = require_messages2();
        var WorkspaceFoldersRequest;
        (function(WorkspaceFoldersRequest2) {
            WorkspaceFoldersRequest2.method = "workspace/workspaceFolders";
            WorkspaceFoldersRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            WorkspaceFoldersRequest2.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest2.method);
        })(WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = WorkspaceFoldersRequest = {}));
        var DidChangeWorkspaceFoldersNotification;
        (function(DidChangeWorkspaceFoldersNotification2) {
            DidChangeWorkspaceFoldersNotification2.method = "workspace/didChangeWorkspaceFolders";
            DidChangeWorkspaceFoldersNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidChangeWorkspaceFoldersNotification2.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification2.method);
        })(DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = DidChangeWorkspaceFoldersNotification = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js
var require_protocol_configuration = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ConfigurationRequest = void 0;
        var messages_1 = require_messages2();
        var ConfigurationRequest;
        (function(ConfigurationRequest2) {
            ConfigurationRequest2.method = "workspace/configuration";
            ConfigurationRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            ConfigurationRequest2.type = new messages_1.ProtocolRequestType(ConfigurationRequest2.method);
        })(ConfigurationRequest || (exports.ConfigurationRequest = ConfigurationRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js
var require_protocol_colorProvider = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;
        var messages_1 = require_messages2();
        var DocumentColorRequest;
        (function(DocumentColorRequest2) {
            DocumentColorRequest2.method = "textDocument/documentColor";
            DocumentColorRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            DocumentColorRequest2.type = new messages_1.ProtocolRequestType(DocumentColorRequest2.method);
        })(DocumentColorRequest || (exports.DocumentColorRequest = DocumentColorRequest = {}));
        var ColorPresentationRequest;
        (function(ColorPresentationRequest2) {
            ColorPresentationRequest2.method = "textDocument/colorPresentation";
            ColorPresentationRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            ColorPresentationRequest2.type = new messages_1.ProtocolRequestType(ColorPresentationRequest2.method);
        })(ColorPresentationRequest || (exports.ColorPresentationRequest = ColorPresentationRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js
var require_protocol_foldingRange = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.FoldingRangeRefreshRequest = exports.FoldingRangeRequest = void 0;
        var messages_1 = require_messages2();
        var FoldingRangeRequest;
        (function(FoldingRangeRequest2) {
            FoldingRangeRequest2.method = "textDocument/foldingRange";
            FoldingRangeRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            FoldingRangeRequest2.type = new messages_1.ProtocolRequestType(FoldingRangeRequest2.method);
        })(FoldingRangeRequest || (exports.FoldingRangeRequest = FoldingRangeRequest = {}));
        var FoldingRangeRefreshRequest;
        (function(FoldingRangeRefreshRequest2) {
            FoldingRangeRefreshRequest2.method = `workspace/foldingRange/refresh`;
            FoldingRangeRefreshRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            FoldingRangeRefreshRequest2.type = new messages_1.ProtocolRequestType0(FoldingRangeRefreshRequest2.method);
        })(FoldingRangeRefreshRequest || (exports.FoldingRangeRefreshRequest = FoldingRangeRefreshRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js
var require_protocol_declaration = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DeclarationRequest = void 0;
        var messages_1 = require_messages2();
        var DeclarationRequest;
        (function(DeclarationRequest2) {
            DeclarationRequest2.method = "textDocument/declaration";
            DeclarationRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            DeclarationRequest2.type = new messages_1.ProtocolRequestType(DeclarationRequest2.method);
        })(DeclarationRequest || (exports.DeclarationRequest = DeclarationRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js
var require_protocol_selectionRange = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.SelectionRangeRequest = void 0;
        var messages_1 = require_messages2();
        var SelectionRangeRequest;
        (function(SelectionRangeRequest2) {
            SelectionRangeRequest2.method = "textDocument/selectionRange";
            SelectionRangeRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            SelectionRangeRequest2.type = new messages_1.ProtocolRequestType(SelectionRangeRequest2.method);
        })(SelectionRangeRequest || (exports.SelectionRangeRequest = SelectionRangeRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js
var require_protocol_progress = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;
        var vscode_jsonrpc_1 = require_main();
        var messages_1 = require_messages2();
        var WorkDoneProgress;
        (function(WorkDoneProgress2) {
            WorkDoneProgress2.type = new vscode_jsonrpc_1.ProgressType();
            function is(value1) {
                return value1 === WorkDoneProgress2.type;
            }
            WorkDoneProgress2.is = is;
        })(WorkDoneProgress || (exports.WorkDoneProgress = WorkDoneProgress = {}));
        var WorkDoneProgressCreateRequest;
        (function(WorkDoneProgressCreateRequest2) {
            WorkDoneProgressCreateRequest2.method = "window/workDoneProgress/create";
            WorkDoneProgressCreateRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            WorkDoneProgressCreateRequest2.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest2.method);
        })(WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = WorkDoneProgressCreateRequest = {}));
        var WorkDoneProgressCancelNotification;
        (function(WorkDoneProgressCancelNotification2) {
            WorkDoneProgressCancelNotification2.method = "window/workDoneProgress/cancel";
            WorkDoneProgressCancelNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            WorkDoneProgressCancelNotification2.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification2.method);
        })(WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = WorkDoneProgressCancelNotification = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js
var require_protocol_callHierarchy = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;
        var messages_1 = require_messages2();
        var CallHierarchyPrepareRequest;
        (function(CallHierarchyPrepareRequest2) {
            CallHierarchyPrepareRequest2.method = "textDocument/prepareCallHierarchy";
            CallHierarchyPrepareRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            CallHierarchyPrepareRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest2.method);
        })(CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = CallHierarchyPrepareRequest = {}));
        var CallHierarchyIncomingCallsRequest;
        (function(CallHierarchyIncomingCallsRequest2) {
            CallHierarchyIncomingCallsRequest2.method = "callHierarchy/incomingCalls";
            CallHierarchyIncomingCallsRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            CallHierarchyIncomingCallsRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest2.method);
        })(CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = CallHierarchyIncomingCallsRequest = {}));
        var CallHierarchyOutgoingCallsRequest;
        (function(CallHierarchyOutgoingCallsRequest2) {
            CallHierarchyOutgoingCallsRequest2.method = "callHierarchy/outgoingCalls";
            CallHierarchyOutgoingCallsRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            CallHierarchyOutgoingCallsRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest2.method);
        })(CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = CallHierarchyOutgoingCallsRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js
var require_protocol_semanticTokens = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = void 0;
        var messages_1 = require_messages2();
        var TokenFormat;
        (function(TokenFormat2) {
            TokenFormat2.Relative = "relative";
        })(TokenFormat || (exports.TokenFormat = TokenFormat = {}));
        var SemanticTokensRegistrationType;
        (function(SemanticTokensRegistrationType2) {
            SemanticTokensRegistrationType2.method = "textDocument/semanticTokens";
            SemanticTokensRegistrationType2.type = new messages_1.RegistrationType(SemanticTokensRegistrationType2.method);
        })(SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = SemanticTokensRegistrationType = {}));
        var SemanticTokensRequest;
        (function(SemanticTokensRequest2) {
            SemanticTokensRequest2.method = "textDocument/semanticTokens/full";
            SemanticTokensRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            SemanticTokensRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensRequest2.method);
            SemanticTokensRequest2.registrationMethod = SemanticTokensRegistrationType.method;
        })(SemanticTokensRequest || (exports.SemanticTokensRequest = SemanticTokensRequest = {}));
        var SemanticTokensDeltaRequest;
        (function(SemanticTokensDeltaRequest2) {
            SemanticTokensDeltaRequest2.method = "textDocument/semanticTokens/full/delta";
            SemanticTokensDeltaRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            SemanticTokensDeltaRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest2.method);
            SemanticTokensDeltaRequest2.registrationMethod = SemanticTokensRegistrationType.method;
        })(SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = SemanticTokensDeltaRequest = {}));
        var SemanticTokensRangeRequest;
        (function(SemanticTokensRangeRequest2) {
            SemanticTokensRangeRequest2.method = "textDocument/semanticTokens/range";
            SemanticTokensRangeRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            SemanticTokensRangeRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest2.method);
            SemanticTokensRangeRequest2.registrationMethod = SemanticTokensRegistrationType.method;
        })(SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = SemanticTokensRangeRequest = {}));
        var SemanticTokensRefreshRequest;
        (function(SemanticTokensRefreshRequest2) {
            SemanticTokensRefreshRequest2.method = `workspace/semanticTokens/refresh`;
            SemanticTokensRefreshRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            SemanticTokensRefreshRequest2.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest2.method);
        })(SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = SemanticTokensRefreshRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js
var require_protocol_showDocument = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ShowDocumentRequest = void 0;
        var messages_1 = require_messages2();
        var ShowDocumentRequest;
        (function(ShowDocumentRequest2) {
            ShowDocumentRequest2.method = "window/showDocument";
            ShowDocumentRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            ShowDocumentRequest2.type = new messages_1.ProtocolRequestType(ShowDocumentRequest2.method);
        })(ShowDocumentRequest || (exports.ShowDocumentRequest = ShowDocumentRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js
var require_protocol_linkedEditingRange = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.LinkedEditingRangeRequest = void 0;
        var messages_1 = require_messages2();
        var LinkedEditingRangeRequest;
        (function(LinkedEditingRangeRequest2) {
            LinkedEditingRangeRequest2.method = "textDocument/linkedEditingRange";
            LinkedEditingRangeRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            LinkedEditingRangeRequest2.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest2.method);
        })(LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = LinkedEditingRangeRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js
var require_protocol_fileOperations = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;
        var messages_1 = require_messages2();
        var FileOperationPatternKind;
        (function(FileOperationPatternKind2) {
            FileOperationPatternKind2.file = "file";
            FileOperationPatternKind2.folder = "folder";
        })(FileOperationPatternKind || (exports.FileOperationPatternKind = FileOperationPatternKind = {}));
        var WillCreateFilesRequest;
        (function(WillCreateFilesRequest2) {
            WillCreateFilesRequest2.method = "workspace/willCreateFiles";
            WillCreateFilesRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            WillCreateFilesRequest2.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest2.method);
        })(WillCreateFilesRequest || (exports.WillCreateFilesRequest = WillCreateFilesRequest = {}));
        var DidCreateFilesNotification;
        (function(DidCreateFilesNotification2) {
            DidCreateFilesNotification2.method = "workspace/didCreateFiles";
            DidCreateFilesNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidCreateFilesNotification2.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification2.method);
        })(DidCreateFilesNotification || (exports.DidCreateFilesNotification = DidCreateFilesNotification = {}));
        var WillRenameFilesRequest;
        (function(WillRenameFilesRequest2) {
            WillRenameFilesRequest2.method = "workspace/willRenameFiles";
            WillRenameFilesRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            WillRenameFilesRequest2.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest2.method);
        })(WillRenameFilesRequest || (exports.WillRenameFilesRequest = WillRenameFilesRequest = {}));
        var DidRenameFilesNotification;
        (function(DidRenameFilesNotification2) {
            DidRenameFilesNotification2.method = "workspace/didRenameFiles";
            DidRenameFilesNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidRenameFilesNotification2.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification2.method);
        })(DidRenameFilesNotification || (exports.DidRenameFilesNotification = DidRenameFilesNotification = {}));
        var DidDeleteFilesNotification;
        (function(DidDeleteFilesNotification2) {
            DidDeleteFilesNotification2.method = "workspace/didDeleteFiles";
            DidDeleteFilesNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidDeleteFilesNotification2.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification2.method);
        })(DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = DidDeleteFilesNotification = {}));
        var WillDeleteFilesRequest;
        (function(WillDeleteFilesRequest2) {
            WillDeleteFilesRequest2.method = "workspace/willDeleteFiles";
            WillDeleteFilesRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            WillDeleteFilesRequest2.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest2.method);
        })(WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = WillDeleteFilesRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js
var require_protocol_moniker = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;
        var messages_1 = require_messages2();
        var UniquenessLevel;
        (function(UniquenessLevel2) {
            UniquenessLevel2.document = "document";
            UniquenessLevel2.project = "project";
            UniquenessLevel2.group = "group";
            UniquenessLevel2.scheme = "scheme";
            UniquenessLevel2.global = "global";
        })(UniquenessLevel || (exports.UniquenessLevel = UniquenessLevel = {}));
        var MonikerKind;
        (function(MonikerKind2) {
            MonikerKind2.$import = "import";
            MonikerKind2.$export = "export";
            MonikerKind2.local = "local";
        })(MonikerKind || (exports.MonikerKind = MonikerKind = {}));
        var MonikerRequest;
        (function(MonikerRequest2) {
            MonikerRequest2.method = "textDocument/moniker";
            MonikerRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            MonikerRequest2.type = new messages_1.ProtocolRequestType(MonikerRequest2.method);
        })(MonikerRequest || (exports.MonikerRequest = MonikerRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js
var require_protocol_typeHierarchy = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.TypeHierarchySubtypesRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchyPrepareRequest = void 0;
        var messages_1 = require_messages2();
        var TypeHierarchyPrepareRequest;
        (function(TypeHierarchyPrepareRequest2) {
            TypeHierarchyPrepareRequest2.method = "textDocument/prepareTypeHierarchy";
            TypeHierarchyPrepareRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            TypeHierarchyPrepareRequest2.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest2.method);
        })(TypeHierarchyPrepareRequest || (exports.TypeHierarchyPrepareRequest = TypeHierarchyPrepareRequest = {}));
        var TypeHierarchySupertypesRequest;
        (function(TypeHierarchySupertypesRequest2) {
            TypeHierarchySupertypesRequest2.method = "typeHierarchy/supertypes";
            TypeHierarchySupertypesRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            TypeHierarchySupertypesRequest2.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest2.method);
        })(TypeHierarchySupertypesRequest || (exports.TypeHierarchySupertypesRequest = TypeHierarchySupertypesRequest = {}));
        var TypeHierarchySubtypesRequest;
        (function(TypeHierarchySubtypesRequest2) {
            TypeHierarchySubtypesRequest2.method = "typeHierarchy/subtypes";
            TypeHierarchySubtypesRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            TypeHierarchySubtypesRequest2.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest2.method);
        })(TypeHierarchySubtypesRequest || (exports.TypeHierarchySubtypesRequest = TypeHierarchySubtypesRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js
var require_protocol_inlineValue = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.InlineValueRefreshRequest = exports.InlineValueRequest = void 0;
        var messages_1 = require_messages2();
        var InlineValueRequest;
        (function(InlineValueRequest2) {
            InlineValueRequest2.method = "textDocument/inlineValue";
            InlineValueRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            InlineValueRequest2.type = new messages_1.ProtocolRequestType(InlineValueRequest2.method);
        })(InlineValueRequest || (exports.InlineValueRequest = InlineValueRequest = {}));
        var InlineValueRefreshRequest;
        (function(InlineValueRefreshRequest2) {
            InlineValueRefreshRequest2.method = `workspace/inlineValue/refresh`;
            InlineValueRefreshRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            InlineValueRefreshRequest2.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest2.method);
        })(InlineValueRefreshRequest || (exports.InlineValueRefreshRequest = InlineValueRefreshRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js
var require_protocol_inlayHint = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = void 0;
        var messages_1 = require_messages2();
        var InlayHintRequest;
        (function(InlayHintRequest2) {
            InlayHintRequest2.method = "textDocument/inlayHint";
            InlayHintRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            InlayHintRequest2.type = new messages_1.ProtocolRequestType(InlayHintRequest2.method);
        })(InlayHintRequest || (exports.InlayHintRequest = InlayHintRequest = {}));
        var InlayHintResolveRequest;
        (function(InlayHintResolveRequest2) {
            InlayHintResolveRequest2.method = "inlayHint/resolve";
            InlayHintResolveRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            InlayHintResolveRequest2.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest2.method);
        })(InlayHintResolveRequest || (exports.InlayHintResolveRequest = InlayHintResolveRequest = {}));
        var InlayHintRefreshRequest;
        (function(InlayHintRefreshRequest2) {
            InlayHintRefreshRequest2.method = `workspace/inlayHint/refresh`;
            InlayHintRefreshRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            InlayHintRefreshRequest2.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest2.method);
        })(InlayHintRefreshRequest || (exports.InlayHintRefreshRequest = InlayHintRefreshRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.diagnostic.js
var require_protocol_diagnostic = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.diagnostic.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = void 0;
        var vscode_jsonrpc_1 = require_main();
        var Is2 = require_is2();
        var messages_1 = require_messages2();
        var DiagnosticServerCancellationData;
        (function(DiagnosticServerCancellationData2) {
            function is(value1) {
                const candidate = value1;
                return candidate && Is2.boolean(candidate.retriggerRequest);
            }
            DiagnosticServerCancellationData2.is = is;
        })(DiagnosticServerCancellationData || (exports.DiagnosticServerCancellationData = DiagnosticServerCancellationData = {}));
        var DocumentDiagnosticReportKind;
        (function(DocumentDiagnosticReportKind2) {
            DocumentDiagnosticReportKind2.Full = "full";
            DocumentDiagnosticReportKind2.Unchanged = "unchanged";
        })(DocumentDiagnosticReportKind || (exports.DocumentDiagnosticReportKind = DocumentDiagnosticReportKind = {}));
        var DocumentDiagnosticRequest;
        (function(DocumentDiagnosticRequest2) {
            DocumentDiagnosticRequest2.method = "textDocument/diagnostic";
            DocumentDiagnosticRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            DocumentDiagnosticRequest2.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest2.method);
            DocumentDiagnosticRequest2.partialResult = new vscode_jsonrpc_1.ProgressType();
        })(DocumentDiagnosticRequest || (exports.DocumentDiagnosticRequest = DocumentDiagnosticRequest = {}));
        var WorkspaceDiagnosticRequest;
        (function(WorkspaceDiagnosticRequest2) {
            WorkspaceDiagnosticRequest2.method = "workspace/diagnostic";
            WorkspaceDiagnosticRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            WorkspaceDiagnosticRequest2.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest2.method);
            WorkspaceDiagnosticRequest2.partialResult = new vscode_jsonrpc_1.ProgressType();
        })(WorkspaceDiagnosticRequest || (exports.WorkspaceDiagnosticRequest = WorkspaceDiagnosticRequest = {}));
        var DiagnosticRefreshRequest;
        (function(DiagnosticRefreshRequest2) {
            DiagnosticRefreshRequest2.method = `workspace/diagnostic/refresh`;
            DiagnosticRefreshRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            DiagnosticRefreshRequest2.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest2.method);
        })(DiagnosticRefreshRequest || (exports.DiagnosticRefreshRequest = DiagnosticRefreshRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.notebook.js
var require_protocol_notebook = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.notebook.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = void 0;
        var vscode_languageserver_types_1 = (init_main(), __toCommonJS(main_exports));
        var Is2 = require_is2();
        var messages_1 = require_messages2();
        var NotebookCellKind;
        (function(NotebookCellKind2) {
            NotebookCellKind2.Markup = 1;
            NotebookCellKind2.Code = 2;
            function is(value1) {
                return value1 === 1 || value1 === 2;
            }
            NotebookCellKind2.is = is;
        })(NotebookCellKind || (exports.NotebookCellKind = NotebookCellKind = {}));
        var ExecutionSummary;
        (function(ExecutionSummary2) {
            function create(executionOrder, success) {
                const result = {
                    executionOrder
                };
                if (success === true || success === false) {
                    result.success = success;
                }
                return result;
            }
            ExecutionSummary2.create = create;
            function is(value1) {
                const candidate = value1;
                return Is2.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === void 0 || Is2.boolean(candidate.success));
            }
            ExecutionSummary2.is = is;
            function equals3(one, other) {
                if (one === other) {
                    return true;
                }
                if (one === null || one === void 0 || other === null || other === void 0) {
                    return false;
                }
                return one.executionOrder === other.executionOrder && one.success === other.success;
            }
            ExecutionSummary2.equals = equals3;
        })(ExecutionSummary || (exports.ExecutionSummary = ExecutionSummary = {}));
        var NotebookCell;
        (function(NotebookCell2) {
            function create(kind, document) {
                return {
                    kind,
                    document
                };
            }
            NotebookCell2.create = create;
            function is(value1) {
                const candidate = value1;
                return Is2.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) && (candidate.metadata === void 0 || Is2.objectLiteral(candidate.metadata));
            }
            NotebookCell2.is = is;
            function diff(one, two) {
                const result = /* @__PURE__ */ new Set();
                if (one.document !== two.document) {
                    result.add("document");
                }
                if (one.kind !== two.kind) {
                    result.add("kind");
                }
                if (one.executionSummary !== two.executionSummary) {
                    result.add("executionSummary");
                }
                if ((one.metadata !== void 0 || two.metadata !== void 0) && !equalsMetadata(one.metadata, two.metadata)) {
                    result.add("metadata");
                }
                if ((one.executionSummary !== void 0 || two.executionSummary !== void 0) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
                    result.add("executionSummary");
                }
                return result;
            }
            NotebookCell2.diff = diff;
            function equalsMetadata(one, other) {
                if (one === other) {
                    return true;
                }
                if (one === null || one === void 0 || other === null || other === void 0) {
                    return false;
                }
                if (typeof one !== typeof other) {
                    return false;
                }
                if (typeof one !== "object") {
                    return false;
                }
                const oneArray = Array.isArray(one);
                const otherArray = Array.isArray(other);
                if (oneArray !== otherArray) {
                    return false;
                }
                if (oneArray && otherArray) {
                    if (one.length !== other.length) {
                        return false;
                    }
                    for(let i = 0; i < one.length; i++){
                        if (!equalsMetadata(one[i], other[i])) {
                            return false;
                        }
                    }
                }
                if (Is2.objectLiteral(one) && Is2.objectLiteral(other)) {
                    const oneKeys = Object.keys(one);
                    const otherKeys = Object.keys(other);
                    if (oneKeys.length !== otherKeys.length) {
                        return false;
                    }
                    oneKeys.sort();
                    otherKeys.sort();
                    if (!equalsMetadata(oneKeys, otherKeys)) {
                        return false;
                    }
                    for(let i = 0; i < oneKeys.length; i++){
                        const prop = oneKeys[i];
                        if (!equalsMetadata(one[prop], other[prop])) {
                            return false;
                        }
                    }
                }
                return true;
            }
        })(NotebookCell || (exports.NotebookCell = NotebookCell = {}));
        var NotebookDocument;
        (function(NotebookDocument2) {
            function create(uri, notebookType, version, cells) {
                return {
                    uri,
                    notebookType,
                    version,
                    cells
                };
            }
            NotebookDocument2.create = create;
            function is(value1) {
                const candidate = value1;
                return Is2.objectLiteral(candidate) && Is2.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is2.typedArray(candidate.cells, NotebookCell.is);
            }
            NotebookDocument2.is = is;
        })(NotebookDocument || (exports.NotebookDocument = NotebookDocument = {}));
        var NotebookDocumentSyncRegistrationType;
        (function(NotebookDocumentSyncRegistrationType2) {
            NotebookDocumentSyncRegistrationType2.method = "notebookDocument/sync";
            NotebookDocumentSyncRegistrationType2.messageDirection = messages_1.MessageDirection.clientToServer;
            NotebookDocumentSyncRegistrationType2.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType2.method);
        })(NotebookDocumentSyncRegistrationType || (exports.NotebookDocumentSyncRegistrationType = NotebookDocumentSyncRegistrationType = {}));
        var DidOpenNotebookDocumentNotification;
        (function(DidOpenNotebookDocumentNotification2) {
            DidOpenNotebookDocumentNotification2.method = "notebookDocument/didOpen";
            DidOpenNotebookDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidOpenNotebookDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification2.method);
            DidOpenNotebookDocumentNotification2.registrationMethod = NotebookDocumentSyncRegistrationType.method;
        })(DidOpenNotebookDocumentNotification || (exports.DidOpenNotebookDocumentNotification = DidOpenNotebookDocumentNotification = {}));
        var NotebookCellArrayChange;
        (function(NotebookCellArrayChange2) {
            function is(value1) {
                const candidate = value1;
                return Is2.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === void 0 || Is2.typedArray(candidate.cells, NotebookCell.is));
            }
            NotebookCellArrayChange2.is = is;
            function create(start, deleteCount, cells) {
                const result = {
                    start,
                    deleteCount
                };
                if (cells !== void 0) {
                    result.cells = cells;
                }
                return result;
            }
            NotebookCellArrayChange2.create = create;
        })(NotebookCellArrayChange || (exports.NotebookCellArrayChange = NotebookCellArrayChange = {}));
        var DidChangeNotebookDocumentNotification;
        (function(DidChangeNotebookDocumentNotification2) {
            DidChangeNotebookDocumentNotification2.method = "notebookDocument/didChange";
            DidChangeNotebookDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidChangeNotebookDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification2.method);
            DidChangeNotebookDocumentNotification2.registrationMethod = NotebookDocumentSyncRegistrationType.method;
        })(DidChangeNotebookDocumentNotification || (exports.DidChangeNotebookDocumentNotification = DidChangeNotebookDocumentNotification = {}));
        var DidSaveNotebookDocumentNotification;
        (function(DidSaveNotebookDocumentNotification2) {
            DidSaveNotebookDocumentNotification2.method = "notebookDocument/didSave";
            DidSaveNotebookDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidSaveNotebookDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification2.method);
            DidSaveNotebookDocumentNotification2.registrationMethod = NotebookDocumentSyncRegistrationType.method;
        })(DidSaveNotebookDocumentNotification || (exports.DidSaveNotebookDocumentNotification = DidSaveNotebookDocumentNotification = {}));
        var DidCloseNotebookDocumentNotification;
        (function(DidCloseNotebookDocumentNotification2) {
            DidCloseNotebookDocumentNotification2.method = "notebookDocument/didClose";
            DidCloseNotebookDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidCloseNotebookDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification2.method);
            DidCloseNotebookDocumentNotification2.registrationMethod = NotebookDocumentSyncRegistrationType.method;
        })(DidCloseNotebookDocumentNotification || (exports.DidCloseNotebookDocumentNotification = DidCloseNotebookDocumentNotification = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineCompletion.js
var require_protocol_inlineCompletion = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineCompletion.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.InlineCompletionRequest = void 0;
        var messages_1 = require_messages2();
        var InlineCompletionRequest;
        (function(InlineCompletionRequest2) {
            InlineCompletionRequest2.method = "textDocument/inlineCompletion";
            InlineCompletionRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            InlineCompletionRequest2.type = new messages_1.ProtocolRequestType(InlineCompletionRequest2.method);
        })(InlineCompletionRequest || (exports.InlineCompletionRequest = InlineCompletionRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.js
var require_protocol = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.RelativePattern = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeErrorCodes = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.PositionEncodingKind = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.NotebookCellTextDocumentFilter = exports.NotebookDocumentFilter = exports.TextDocumentFilter = void 0;
        exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRefreshRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangesFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolResolveRequest = void 0;
        exports.InlineCompletionRequest = exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = exports.InlineValueRefreshRequest = exports.InlineValueRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchySubtypesRequest = exports.TypeHierarchyPrepareRequest = void 0;
        var messages_1 = require_messages2();
        var vscode_languageserver_types_1 = (init_main(), __toCommonJS(main_exports));
        var Is2 = require_is2();
        var protocol_implementation_1 = require_protocol_implementation();
        Object.defineProperty(exports, "ImplementationRequest", {
            enumerable: true,
            get: function() {
                return protocol_implementation_1.ImplementationRequest;
            }
        });
        var protocol_typeDefinition_1 = require_protocol_typeDefinition();
        Object.defineProperty(exports, "TypeDefinitionRequest", {
            enumerable: true,
            get: function() {
                return protocol_typeDefinition_1.TypeDefinitionRequest;
            }
        });
        var protocol_workspaceFolder_1 = require_protocol_workspaceFolder();
        Object.defineProperty(exports, "WorkspaceFoldersRequest", {
            enumerable: true,
            get: function() {
                return protocol_workspaceFolder_1.WorkspaceFoldersRequest;
            }
        });
        Object.defineProperty(exports, "DidChangeWorkspaceFoldersNotification", {
            enumerable: true,
            get: function() {
                return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification;
            }
        });
        var protocol_configuration_1 = require_protocol_configuration();
        Object.defineProperty(exports, "ConfigurationRequest", {
            enumerable: true,
            get: function() {
                return protocol_configuration_1.ConfigurationRequest;
            }
        });
        var protocol_colorProvider_1 = require_protocol_colorProvider();
        Object.defineProperty(exports, "DocumentColorRequest", {
            enumerable: true,
            get: function() {
                return protocol_colorProvider_1.DocumentColorRequest;
            }
        });
        Object.defineProperty(exports, "ColorPresentationRequest", {
            enumerable: true,
            get: function() {
                return protocol_colorProvider_1.ColorPresentationRequest;
            }
        });
        var protocol_foldingRange_1 = require_protocol_foldingRange();
        Object.defineProperty(exports, "FoldingRangeRequest", {
            enumerable: true,
            get: function() {
                return protocol_foldingRange_1.FoldingRangeRequest;
            }
        });
        Object.defineProperty(exports, "FoldingRangeRefreshRequest", {
            enumerable: true,
            get: function() {
                return protocol_foldingRange_1.FoldingRangeRefreshRequest;
            }
        });
        var protocol_declaration_1 = require_protocol_declaration();
        Object.defineProperty(exports, "DeclarationRequest", {
            enumerable: true,
            get: function() {
                return protocol_declaration_1.DeclarationRequest;
            }
        });
        var protocol_selectionRange_1 = require_protocol_selectionRange();
        Object.defineProperty(exports, "SelectionRangeRequest", {
            enumerable: true,
            get: function() {
                return protocol_selectionRange_1.SelectionRangeRequest;
            }
        });
        var protocol_progress_1 = require_protocol_progress();
        Object.defineProperty(exports, "WorkDoneProgress", {
            enumerable: true,
            get: function() {
                return protocol_progress_1.WorkDoneProgress;
            }
        });
        Object.defineProperty(exports, "WorkDoneProgressCreateRequest", {
            enumerable: true,
            get: function() {
                return protocol_progress_1.WorkDoneProgressCreateRequest;
            }
        });
        Object.defineProperty(exports, "WorkDoneProgressCancelNotification", {
            enumerable: true,
            get: function() {
                return protocol_progress_1.WorkDoneProgressCancelNotification;
            }
        });
        var protocol_callHierarchy_1 = require_protocol_callHierarchy();
        Object.defineProperty(exports, "CallHierarchyIncomingCallsRequest", {
            enumerable: true,
            get: function() {
                return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest;
            }
        });
        Object.defineProperty(exports, "CallHierarchyOutgoingCallsRequest", {
            enumerable: true,
            get: function() {
                return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest;
            }
        });
        Object.defineProperty(exports, "CallHierarchyPrepareRequest", {
            enumerable: true,
            get: function() {
                return protocol_callHierarchy_1.CallHierarchyPrepareRequest;
            }
        });
        var protocol_semanticTokens_1 = require_protocol_semanticTokens();
        Object.defineProperty(exports, "TokenFormat", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.TokenFormat;
            }
        });
        Object.defineProperty(exports, "SemanticTokensRequest", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokensRequest;
            }
        });
        Object.defineProperty(exports, "SemanticTokensDeltaRequest", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokensDeltaRequest;
            }
        });
        Object.defineProperty(exports, "SemanticTokensRangeRequest", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokensRangeRequest;
            }
        });
        Object.defineProperty(exports, "SemanticTokensRefreshRequest", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokensRefreshRequest;
            }
        });
        Object.defineProperty(exports, "SemanticTokensRegistrationType", {
            enumerable: true,
            get: function() {
                return protocol_semanticTokens_1.SemanticTokensRegistrationType;
            }
        });
        var protocol_showDocument_1 = require_protocol_showDocument();
        Object.defineProperty(exports, "ShowDocumentRequest", {
            enumerable: true,
            get: function() {
                return protocol_showDocument_1.ShowDocumentRequest;
            }
        });
        var protocol_linkedEditingRange_1 = require_protocol_linkedEditingRange();
        Object.defineProperty(exports, "LinkedEditingRangeRequest", {
            enumerable: true,
            get: function() {
                return protocol_linkedEditingRange_1.LinkedEditingRangeRequest;
            }
        });
        var protocol_fileOperations_1 = require_protocol_fileOperations();
        Object.defineProperty(exports, "FileOperationPatternKind", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.FileOperationPatternKind;
            }
        });
        Object.defineProperty(exports, "DidCreateFilesNotification", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.DidCreateFilesNotification;
            }
        });
        Object.defineProperty(exports, "WillCreateFilesRequest", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.WillCreateFilesRequest;
            }
        });
        Object.defineProperty(exports, "DidRenameFilesNotification", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.DidRenameFilesNotification;
            }
        });
        Object.defineProperty(exports, "WillRenameFilesRequest", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.WillRenameFilesRequest;
            }
        });
        Object.defineProperty(exports, "DidDeleteFilesNotification", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.DidDeleteFilesNotification;
            }
        });
        Object.defineProperty(exports, "WillDeleteFilesRequest", {
            enumerable: true,
            get: function() {
                return protocol_fileOperations_1.WillDeleteFilesRequest;
            }
        });
        var protocol_moniker_1 = require_protocol_moniker();
        Object.defineProperty(exports, "UniquenessLevel", {
            enumerable: true,
            get: function() {
                return protocol_moniker_1.UniquenessLevel;
            }
        });
        Object.defineProperty(exports, "MonikerKind", {
            enumerable: true,
            get: function() {
                return protocol_moniker_1.MonikerKind;
            }
        });
        Object.defineProperty(exports, "MonikerRequest", {
            enumerable: true,
            get: function() {
                return protocol_moniker_1.MonikerRequest;
            }
        });
        var protocol_typeHierarchy_1 = require_protocol_typeHierarchy();
        Object.defineProperty(exports, "TypeHierarchyPrepareRequest", {
            enumerable: true,
            get: function() {
                return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest;
            }
        });
        Object.defineProperty(exports, "TypeHierarchySubtypesRequest", {
            enumerable: true,
            get: function() {
                return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest;
            }
        });
        Object.defineProperty(exports, "TypeHierarchySupertypesRequest", {
            enumerable: true,
            get: function() {
                return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest;
            }
        });
        var protocol_inlineValue_1 = require_protocol_inlineValue();
        Object.defineProperty(exports, "InlineValueRequest", {
            enumerable: true,
            get: function() {
                return protocol_inlineValue_1.InlineValueRequest;
            }
        });
        Object.defineProperty(exports, "InlineValueRefreshRequest", {
            enumerable: true,
            get: function() {
                return protocol_inlineValue_1.InlineValueRefreshRequest;
            }
        });
        var protocol_inlayHint_1 = require_protocol_inlayHint();
        Object.defineProperty(exports, "InlayHintRequest", {
            enumerable: true,
            get: function() {
                return protocol_inlayHint_1.InlayHintRequest;
            }
        });
        Object.defineProperty(exports, "InlayHintResolveRequest", {
            enumerable: true,
            get: function() {
                return protocol_inlayHint_1.InlayHintResolveRequest;
            }
        });
        Object.defineProperty(exports, "InlayHintRefreshRequest", {
            enumerable: true,
            get: function() {
                return protocol_inlayHint_1.InlayHintRefreshRequest;
            }
        });
        var protocol_diagnostic_1 = require_protocol_diagnostic();
        Object.defineProperty(exports, "DiagnosticServerCancellationData", {
            enumerable: true,
            get: function() {
                return protocol_diagnostic_1.DiagnosticServerCancellationData;
            }
        });
        Object.defineProperty(exports, "DocumentDiagnosticReportKind", {
            enumerable: true,
            get: function() {
                return protocol_diagnostic_1.DocumentDiagnosticReportKind;
            }
        });
        Object.defineProperty(exports, "DocumentDiagnosticRequest", {
            enumerable: true,
            get: function() {
                return protocol_diagnostic_1.DocumentDiagnosticRequest;
            }
        });
        Object.defineProperty(exports, "WorkspaceDiagnosticRequest", {
            enumerable: true,
            get: function() {
                return protocol_diagnostic_1.WorkspaceDiagnosticRequest;
            }
        });
        Object.defineProperty(exports, "DiagnosticRefreshRequest", {
            enumerable: true,
            get: function() {
                return protocol_diagnostic_1.DiagnosticRefreshRequest;
            }
        });
        var protocol_notebook_1 = require_protocol_notebook();
        Object.defineProperty(exports, "NotebookCellKind", {
            enumerable: true,
            get: function() {
                return protocol_notebook_1.NotebookCellKind;
            }
        });
        Object.defineProperty(exports, "ExecutionSummary", {
            enumerable: true,
            get: function() {
                return protocol_notebook_1.ExecutionSummary;
            }
        });
        Object.defineProperty(exports, "NotebookCell", {
            enumerable: true,
            get: function() {
                return protocol_notebook_1.NotebookCell;
            }
        });
        Object.defineProperty(exports, "NotebookDocument", {
            enumerable: true,
            get: function() {
                return protocol_notebook_1.NotebookDocument;
            }
        });
        Object.defineProperty(exports, "NotebookDocumentSyncRegistrationType", {
            enumerable: true,
            get: function() {
                return protocol_notebook_1.NotebookDocumentSyncRegistrationType;
            }
        });
        Object.defineProperty(exports, "DidOpenNotebookDocumentNotification", {
            enumerable: true,
            get: function() {
                return protocol_notebook_1.DidOpenNotebookDocumentNotification;
            }
        });
        Object.defineProperty(exports, "NotebookCellArrayChange", {
            enumerable: true,
            get: function() {
                return protocol_notebook_1.NotebookCellArrayChange;
            }
        });
        Object.defineProperty(exports, "DidChangeNotebookDocumentNotification", {
            enumerable: true,
            get: function() {
                return protocol_notebook_1.DidChangeNotebookDocumentNotification;
            }
        });
        Object.defineProperty(exports, "DidSaveNotebookDocumentNotification", {
            enumerable: true,
            get: function() {
                return protocol_notebook_1.DidSaveNotebookDocumentNotification;
            }
        });
        Object.defineProperty(exports, "DidCloseNotebookDocumentNotification", {
            enumerable: true,
            get: function() {
                return protocol_notebook_1.DidCloseNotebookDocumentNotification;
            }
        });
        var protocol_inlineCompletion_1 = require_protocol_inlineCompletion();
        Object.defineProperty(exports, "InlineCompletionRequest", {
            enumerable: true,
            get: function() {
                return protocol_inlineCompletion_1.InlineCompletionRequest;
            }
        });
        var TextDocumentFilter;
        (function(TextDocumentFilter2) {
            function is(value1) {
                const candidate = value1;
                return Is2.string(candidate) || Is2.string(candidate.language) || Is2.string(candidate.scheme) || Is2.string(candidate.pattern);
            }
            TextDocumentFilter2.is = is;
        })(TextDocumentFilter || (exports.TextDocumentFilter = TextDocumentFilter = {}));
        var NotebookDocumentFilter;
        (function(NotebookDocumentFilter2) {
            function is(value1) {
                const candidate = value1;
                return Is2.objectLiteral(candidate) && (Is2.string(candidate.notebookType) || Is2.string(candidate.scheme) || Is2.string(candidate.pattern));
            }
            NotebookDocumentFilter2.is = is;
        })(NotebookDocumentFilter || (exports.NotebookDocumentFilter = NotebookDocumentFilter = {}));
        var NotebookCellTextDocumentFilter;
        (function(NotebookCellTextDocumentFilter2) {
            function is(value1) {
                const candidate = value1;
                return Is2.objectLiteral(candidate) && (Is2.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook)) && (candidate.language === void 0 || Is2.string(candidate.language));
            }
            NotebookCellTextDocumentFilter2.is = is;
        })(NotebookCellTextDocumentFilter || (exports.NotebookCellTextDocumentFilter = NotebookCellTextDocumentFilter = {}));
        var DocumentSelector;
        (function(DocumentSelector2) {
            function is(value1) {
                if (!Array.isArray(value1)) {
                    return false;
                }
                for (let elem of value1){
                    if (!Is2.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
                        return false;
                    }
                }
                return true;
            }
            DocumentSelector2.is = is;
        })(DocumentSelector || (exports.DocumentSelector = DocumentSelector = {}));
        var RegistrationRequest;
        (function(RegistrationRequest2) {
            RegistrationRequest2.method = "client/registerCapability";
            RegistrationRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            RegistrationRequest2.type = new messages_1.ProtocolRequestType(RegistrationRequest2.method);
        })(RegistrationRequest || (exports.RegistrationRequest = RegistrationRequest = {}));
        var UnregistrationRequest;
        (function(UnregistrationRequest2) {
            UnregistrationRequest2.method = "client/unregisterCapability";
            UnregistrationRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            UnregistrationRequest2.type = new messages_1.ProtocolRequestType(UnregistrationRequest2.method);
        })(UnregistrationRequest || (exports.UnregistrationRequest = UnregistrationRequest = {}));
        var ResourceOperationKind;
        (function(ResourceOperationKind2) {
            ResourceOperationKind2.Create = "create";
            ResourceOperationKind2.Rename = "rename";
            ResourceOperationKind2.Delete = "delete";
        })(ResourceOperationKind || (exports.ResourceOperationKind = ResourceOperationKind = {}));
        var FailureHandlingKind;
        (function(FailureHandlingKind2) {
            FailureHandlingKind2.Abort = "abort";
            FailureHandlingKind2.Transactional = "transactional";
            FailureHandlingKind2.TextOnlyTransactional = "textOnlyTransactional";
            FailureHandlingKind2.Undo = "undo";
        })(FailureHandlingKind || (exports.FailureHandlingKind = FailureHandlingKind = {}));
        var PositionEncodingKind;
        (function(PositionEncodingKind2) {
            PositionEncodingKind2.UTF8 = "utf-8";
            PositionEncodingKind2.UTF16 = "utf-16";
            PositionEncodingKind2.UTF32 = "utf-32";
        })(PositionEncodingKind || (exports.PositionEncodingKind = PositionEncodingKind = {}));
        var StaticRegistrationOptions;
        (function(StaticRegistrationOptions2) {
            function hasId(value1) {
                const candidate = value1;
                return candidate && Is2.string(candidate.id) && candidate.id.length > 0;
            }
            StaticRegistrationOptions2.hasId = hasId;
        })(StaticRegistrationOptions || (exports.StaticRegistrationOptions = StaticRegistrationOptions = {}));
        var TextDocumentRegistrationOptions;
        (function(TextDocumentRegistrationOptions2) {
            function is(value1) {
                const candidate = value1;
                return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
            }
            TextDocumentRegistrationOptions2.is = is;
        })(TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = TextDocumentRegistrationOptions = {}));
        var WorkDoneProgressOptions;
        (function(WorkDoneProgressOptions2) {
            function is(value1) {
                const candidate = value1;
                return Is2.objectLiteral(candidate) && (candidate.workDoneProgress === void 0 || Is2.boolean(candidate.workDoneProgress));
            }
            WorkDoneProgressOptions2.is = is;
            function hasWorkDoneProgress(value1) {
                const candidate = value1;
                return candidate && Is2.boolean(candidate.workDoneProgress);
            }
            WorkDoneProgressOptions2.hasWorkDoneProgress = hasWorkDoneProgress;
        })(WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = WorkDoneProgressOptions = {}));
        var InitializeRequest;
        (function(InitializeRequest2) {
            InitializeRequest2.method = "initialize";
            InitializeRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            InitializeRequest2.type = new messages_1.ProtocolRequestType(InitializeRequest2.method);
        })(InitializeRequest || (exports.InitializeRequest = InitializeRequest = {}));
        var InitializeErrorCodes;
        (function(InitializeErrorCodes2) {
            InitializeErrorCodes2.unknownProtocolVersion = 1;
        })(InitializeErrorCodes || (exports.InitializeErrorCodes = InitializeErrorCodes = {}));
        var InitializedNotification;
        (function(InitializedNotification2) {
            InitializedNotification2.method = "initialized";
            InitializedNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            InitializedNotification2.type = new messages_1.ProtocolNotificationType(InitializedNotification2.method);
        })(InitializedNotification || (exports.InitializedNotification = InitializedNotification = {}));
        var ShutdownRequest;
        (function(ShutdownRequest2) {
            ShutdownRequest2.method = "shutdown";
            ShutdownRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            ShutdownRequest2.type = new messages_1.ProtocolRequestType0(ShutdownRequest2.method);
        })(ShutdownRequest || (exports.ShutdownRequest = ShutdownRequest = {}));
        var ExitNotification;
        (function(ExitNotification2) {
            ExitNotification2.method = "exit";
            ExitNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            ExitNotification2.type = new messages_1.ProtocolNotificationType0(ExitNotification2.method);
        })(ExitNotification || (exports.ExitNotification = ExitNotification = {}));
        var DidChangeConfigurationNotification;
        (function(DidChangeConfigurationNotification2) {
            DidChangeConfigurationNotification2.method = "workspace/didChangeConfiguration";
            DidChangeConfigurationNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidChangeConfigurationNotification2.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification2.method);
        })(DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = DidChangeConfigurationNotification = {}));
        var MessageType;
        (function(MessageType2) {
            MessageType2.Error = 1;
            MessageType2.Warning = 2;
            MessageType2.Info = 3;
            MessageType2.Log = 4;
            MessageType2.Debug = 5;
        })(MessageType || (exports.MessageType = MessageType = {}));
        var ShowMessageNotification;
        (function(ShowMessageNotification2) {
            ShowMessageNotification2.method = "window/showMessage";
            ShowMessageNotification2.messageDirection = messages_1.MessageDirection.serverToClient;
            ShowMessageNotification2.type = new messages_1.ProtocolNotificationType(ShowMessageNotification2.method);
        })(ShowMessageNotification || (exports.ShowMessageNotification = ShowMessageNotification = {}));
        var ShowMessageRequest;
        (function(ShowMessageRequest2) {
            ShowMessageRequest2.method = "window/showMessageRequest";
            ShowMessageRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            ShowMessageRequest2.type = new messages_1.ProtocolRequestType(ShowMessageRequest2.method);
        })(ShowMessageRequest || (exports.ShowMessageRequest = ShowMessageRequest = {}));
        var LogMessageNotification;
        (function(LogMessageNotification2) {
            LogMessageNotification2.method = "window/logMessage";
            LogMessageNotification2.messageDirection = messages_1.MessageDirection.serverToClient;
            LogMessageNotification2.type = new messages_1.ProtocolNotificationType(LogMessageNotification2.method);
        })(LogMessageNotification || (exports.LogMessageNotification = LogMessageNotification = {}));
        var TelemetryEventNotification;
        (function(TelemetryEventNotification2) {
            TelemetryEventNotification2.method = "telemetry/event";
            TelemetryEventNotification2.messageDirection = messages_1.MessageDirection.serverToClient;
            TelemetryEventNotification2.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification2.method);
        })(TelemetryEventNotification || (exports.TelemetryEventNotification = TelemetryEventNotification = {}));
        var TextDocumentSyncKind;
        (function(TextDocumentSyncKind2) {
            TextDocumentSyncKind2.None = 0;
            TextDocumentSyncKind2.Full = 1;
            TextDocumentSyncKind2.Incremental = 2;
        })(TextDocumentSyncKind || (exports.TextDocumentSyncKind = TextDocumentSyncKind = {}));
        var DidOpenTextDocumentNotification;
        (function(DidOpenTextDocumentNotification2) {
            DidOpenTextDocumentNotification2.method = "textDocument/didOpen";
            DidOpenTextDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidOpenTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification2.method);
        })(DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = DidOpenTextDocumentNotification = {}));
        var TextDocumentContentChangeEvent;
        (function(TextDocumentContentChangeEvent2) {
            function isIncremental(event) {
                let candidate = event;
                return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
            }
            TextDocumentContentChangeEvent2.isIncremental = isIncremental;
            function isFull(event) {
                let candidate = event;
                return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
            }
            TextDocumentContentChangeEvent2.isFull = isFull;
        })(TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = TextDocumentContentChangeEvent = {}));
        var DidChangeTextDocumentNotification;
        (function(DidChangeTextDocumentNotification2) {
            DidChangeTextDocumentNotification2.method = "textDocument/didChange";
            DidChangeTextDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidChangeTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification2.method);
        })(DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = DidChangeTextDocumentNotification = {}));
        var DidCloseTextDocumentNotification;
        (function(DidCloseTextDocumentNotification2) {
            DidCloseTextDocumentNotification2.method = "textDocument/didClose";
            DidCloseTextDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidCloseTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification2.method);
        })(DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = DidCloseTextDocumentNotification = {}));
        var DidSaveTextDocumentNotification;
        (function(DidSaveTextDocumentNotification2) {
            DidSaveTextDocumentNotification2.method = "textDocument/didSave";
            DidSaveTextDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidSaveTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification2.method);
        })(DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = DidSaveTextDocumentNotification = {}));
        var TextDocumentSaveReason;
        (function(TextDocumentSaveReason2) {
            TextDocumentSaveReason2.Manual = 1;
            TextDocumentSaveReason2.AfterDelay = 2;
            TextDocumentSaveReason2.FocusOut = 3;
        })(TextDocumentSaveReason || (exports.TextDocumentSaveReason = TextDocumentSaveReason = {}));
        var WillSaveTextDocumentNotification;
        (function(WillSaveTextDocumentNotification2) {
            WillSaveTextDocumentNotification2.method = "textDocument/willSave";
            WillSaveTextDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            WillSaveTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification2.method);
        })(WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = WillSaveTextDocumentNotification = {}));
        var WillSaveTextDocumentWaitUntilRequest;
        (function(WillSaveTextDocumentWaitUntilRequest2) {
            WillSaveTextDocumentWaitUntilRequest2.method = "textDocument/willSaveWaitUntil";
            WillSaveTextDocumentWaitUntilRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            WillSaveTextDocumentWaitUntilRequest2.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest2.method);
        })(WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = WillSaveTextDocumentWaitUntilRequest = {}));
        var DidChangeWatchedFilesNotification;
        (function(DidChangeWatchedFilesNotification2) {
            DidChangeWatchedFilesNotification2.method = "workspace/didChangeWatchedFiles";
            DidChangeWatchedFilesNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
            DidChangeWatchedFilesNotification2.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification2.method);
        })(DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = DidChangeWatchedFilesNotification = {}));
        var FileChangeType;
        (function(FileChangeType2) {
            FileChangeType2.Created = 1;
            FileChangeType2.Changed = 2;
            FileChangeType2.Deleted = 3;
        })(FileChangeType || (exports.FileChangeType = FileChangeType = {}));
        var RelativePattern;
        (function(RelativePattern2) {
            function is(value1) {
                const candidate = value1;
                return Is2.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is2.string(candidate.pattern);
            }
            RelativePattern2.is = is;
        })(RelativePattern || (exports.RelativePattern = RelativePattern = {}));
        var WatchKind;
        (function(WatchKind2) {
            WatchKind2.Create = 1;
            WatchKind2.Change = 2;
            WatchKind2.Delete = 4;
        })(WatchKind || (exports.WatchKind = WatchKind = {}));
        var PublishDiagnosticsNotification;
        (function(PublishDiagnosticsNotification2) {
            PublishDiagnosticsNotification2.method = "textDocument/publishDiagnostics";
            PublishDiagnosticsNotification2.messageDirection = messages_1.MessageDirection.serverToClient;
            PublishDiagnosticsNotification2.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification2.method);
        })(PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = PublishDiagnosticsNotification = {}));
        var CompletionTriggerKind;
        (function(CompletionTriggerKind2) {
            CompletionTriggerKind2.Invoked = 1;
            CompletionTriggerKind2.TriggerCharacter = 2;
            CompletionTriggerKind2.TriggerForIncompleteCompletions = 3;
        })(CompletionTriggerKind || (exports.CompletionTriggerKind = CompletionTriggerKind = {}));
        var CompletionRequest;
        (function(CompletionRequest2) {
            CompletionRequest2.method = "textDocument/completion";
            CompletionRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            CompletionRequest2.type = new messages_1.ProtocolRequestType(CompletionRequest2.method);
        })(CompletionRequest || (exports.CompletionRequest = CompletionRequest = {}));
        var CompletionResolveRequest;
        (function(CompletionResolveRequest2) {
            CompletionResolveRequest2.method = "completionItem/resolve";
            CompletionResolveRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            CompletionResolveRequest2.type = new messages_1.ProtocolRequestType(CompletionResolveRequest2.method);
        })(CompletionResolveRequest || (exports.CompletionResolveRequest = CompletionResolveRequest = {}));
        var HoverRequest;
        (function(HoverRequest2) {
            HoverRequest2.method = "textDocument/hover";
            HoverRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            HoverRequest2.type = new messages_1.ProtocolRequestType(HoverRequest2.method);
        })(HoverRequest || (exports.HoverRequest = HoverRequest = {}));
        var SignatureHelpTriggerKind;
        (function(SignatureHelpTriggerKind2) {
            SignatureHelpTriggerKind2.Invoked = 1;
            SignatureHelpTriggerKind2.TriggerCharacter = 2;
            SignatureHelpTriggerKind2.ContentChange = 3;
        })(SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = SignatureHelpTriggerKind = {}));
        var SignatureHelpRequest;
        (function(SignatureHelpRequest2) {
            SignatureHelpRequest2.method = "textDocument/signatureHelp";
            SignatureHelpRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            SignatureHelpRequest2.type = new messages_1.ProtocolRequestType(SignatureHelpRequest2.method);
        })(SignatureHelpRequest || (exports.SignatureHelpRequest = SignatureHelpRequest = {}));
        var DefinitionRequest;
        (function(DefinitionRequest2) {
            DefinitionRequest2.method = "textDocument/definition";
            DefinitionRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            DefinitionRequest2.type = new messages_1.ProtocolRequestType(DefinitionRequest2.method);
        })(DefinitionRequest || (exports.DefinitionRequest = DefinitionRequest = {}));
        var ReferencesRequest;
        (function(ReferencesRequest2) {
            ReferencesRequest2.method = "textDocument/references";
            ReferencesRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            ReferencesRequest2.type = new messages_1.ProtocolRequestType(ReferencesRequest2.method);
        })(ReferencesRequest || (exports.ReferencesRequest = ReferencesRequest = {}));
        var DocumentHighlightRequest;
        (function(DocumentHighlightRequest2) {
            DocumentHighlightRequest2.method = "textDocument/documentHighlight";
            DocumentHighlightRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            DocumentHighlightRequest2.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest2.method);
        })(DocumentHighlightRequest || (exports.DocumentHighlightRequest = DocumentHighlightRequest = {}));
        var DocumentSymbolRequest;
        (function(DocumentSymbolRequest2) {
            DocumentSymbolRequest2.method = "textDocument/documentSymbol";
            DocumentSymbolRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            DocumentSymbolRequest2.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest2.method);
        })(DocumentSymbolRequest || (exports.DocumentSymbolRequest = DocumentSymbolRequest = {}));
        var CodeActionRequest;
        (function(CodeActionRequest2) {
            CodeActionRequest2.method = "textDocument/codeAction";
            CodeActionRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            CodeActionRequest2.type = new messages_1.ProtocolRequestType(CodeActionRequest2.method);
        })(CodeActionRequest || (exports.CodeActionRequest = CodeActionRequest = {}));
        var CodeActionResolveRequest;
        (function(CodeActionResolveRequest2) {
            CodeActionResolveRequest2.method = "codeAction/resolve";
            CodeActionResolveRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            CodeActionResolveRequest2.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest2.method);
        })(CodeActionResolveRequest || (exports.CodeActionResolveRequest = CodeActionResolveRequest = {}));
        var WorkspaceSymbolRequest;
        (function(WorkspaceSymbolRequest2) {
            WorkspaceSymbolRequest2.method = "workspace/symbol";
            WorkspaceSymbolRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            WorkspaceSymbolRequest2.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest2.method);
        })(WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = WorkspaceSymbolRequest = {}));
        var WorkspaceSymbolResolveRequest;
        (function(WorkspaceSymbolResolveRequest2) {
            WorkspaceSymbolResolveRequest2.method = "workspaceSymbol/resolve";
            WorkspaceSymbolResolveRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            WorkspaceSymbolResolveRequest2.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest2.method);
        })(WorkspaceSymbolResolveRequest || (exports.WorkspaceSymbolResolveRequest = WorkspaceSymbolResolveRequest = {}));
        var CodeLensRequest;
        (function(CodeLensRequest2) {
            CodeLensRequest2.method = "textDocument/codeLens";
            CodeLensRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            CodeLensRequest2.type = new messages_1.ProtocolRequestType(CodeLensRequest2.method);
        })(CodeLensRequest || (exports.CodeLensRequest = CodeLensRequest = {}));
        var CodeLensResolveRequest;
        (function(CodeLensResolveRequest2) {
            CodeLensResolveRequest2.method = "codeLens/resolve";
            CodeLensResolveRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            CodeLensResolveRequest2.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest2.method);
        })(CodeLensResolveRequest || (exports.CodeLensResolveRequest = CodeLensResolveRequest = {}));
        var CodeLensRefreshRequest;
        (function(CodeLensRefreshRequest2) {
            CodeLensRefreshRequest2.method = `workspace/codeLens/refresh`;
            CodeLensRefreshRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            CodeLensRefreshRequest2.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest2.method);
        })(CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = CodeLensRefreshRequest = {}));
        var DocumentLinkRequest;
        (function(DocumentLinkRequest2) {
            DocumentLinkRequest2.method = "textDocument/documentLink";
            DocumentLinkRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            DocumentLinkRequest2.type = new messages_1.ProtocolRequestType(DocumentLinkRequest2.method);
        })(DocumentLinkRequest || (exports.DocumentLinkRequest = DocumentLinkRequest = {}));
        var DocumentLinkResolveRequest;
        (function(DocumentLinkResolveRequest2) {
            DocumentLinkResolveRequest2.method = "documentLink/resolve";
            DocumentLinkResolveRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            DocumentLinkResolveRequest2.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest2.method);
        })(DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = DocumentLinkResolveRequest = {}));
        var DocumentFormattingRequest;
        (function(DocumentFormattingRequest2) {
            DocumentFormattingRequest2.method = "textDocument/formatting";
            DocumentFormattingRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            DocumentFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest2.method);
        })(DocumentFormattingRequest || (exports.DocumentFormattingRequest = DocumentFormattingRequest = {}));
        var DocumentRangeFormattingRequest;
        (function(DocumentRangeFormattingRequest2) {
            DocumentRangeFormattingRequest2.method = "textDocument/rangeFormatting";
            DocumentRangeFormattingRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            DocumentRangeFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest2.method);
        })(DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = DocumentRangeFormattingRequest = {}));
        var DocumentRangesFormattingRequest;
        (function(DocumentRangesFormattingRequest2) {
            DocumentRangesFormattingRequest2.method = "textDocument/rangesFormatting";
            DocumentRangesFormattingRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            DocumentRangesFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentRangesFormattingRequest2.method);
        })(DocumentRangesFormattingRequest || (exports.DocumentRangesFormattingRequest = DocumentRangesFormattingRequest = {}));
        var DocumentOnTypeFormattingRequest;
        (function(DocumentOnTypeFormattingRequest2) {
            DocumentOnTypeFormattingRequest2.method = "textDocument/onTypeFormatting";
            DocumentOnTypeFormattingRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            DocumentOnTypeFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest2.method);
        })(DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = DocumentOnTypeFormattingRequest = {}));
        var PrepareSupportDefaultBehavior;
        (function(PrepareSupportDefaultBehavior2) {
            PrepareSupportDefaultBehavior2.Identifier = 1;
        })(PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = PrepareSupportDefaultBehavior = {}));
        var RenameRequest;
        (function(RenameRequest2) {
            RenameRequest2.method = "textDocument/rename";
            RenameRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            RenameRequest2.type = new messages_1.ProtocolRequestType(RenameRequest2.method);
        })(RenameRequest || (exports.RenameRequest = RenameRequest = {}));
        var PrepareRenameRequest;
        (function(PrepareRenameRequest2) {
            PrepareRenameRequest2.method = "textDocument/prepareRename";
            PrepareRenameRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            PrepareRenameRequest2.type = new messages_1.ProtocolRequestType(PrepareRenameRequest2.method);
        })(PrepareRenameRequest || (exports.PrepareRenameRequest = PrepareRenameRequest = {}));
        var ExecuteCommandRequest;
        (function(ExecuteCommandRequest2) {
            ExecuteCommandRequest2.method = "workspace/executeCommand";
            ExecuteCommandRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
            ExecuteCommandRequest2.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest2.method);
        })(ExecuteCommandRequest || (exports.ExecuteCommandRequest = ExecuteCommandRequest = {}));
        var ApplyWorkspaceEditRequest;
        (function(ApplyWorkspaceEditRequest2) {
            ApplyWorkspaceEditRequest2.method = "workspace/applyEdit";
            ApplyWorkspaceEditRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
            ApplyWorkspaceEditRequest2.type = new messages_1.ProtocolRequestType("workspace/applyEdit");
        })(ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = ApplyWorkspaceEditRequest = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/connection.js
var require_connection2 = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/connection.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createProtocolConnection = void 0;
        var vscode_jsonrpc_1 = require_main();
        function createProtocolConnection(input, output, logger, options) {
            if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
                options = {
                    connectionStrategy: options
                };
            }
            return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
        }
        exports.createProtocolConnection = createProtocolConnection;
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/common/api.js
var require_api2 = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/common/api.js" (exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                desc = {
                    enumerable: true,
                    get: function() {
                        return m[k];
                    }
                };
            }
            Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function(m, exports2) {
            for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.LSPErrorCodes = exports.createProtocolConnection = void 0;
        __exportStar(require_main(), exports);
        __exportStar((init_main(), __toCommonJS(main_exports)), exports);
        __exportStar(require_messages2(), exports);
        __exportStar(require_protocol(), exports);
        var connection_1 = require_connection2();
        Object.defineProperty(exports, "createProtocolConnection", {
            enumerable: true,
            get: function() {
                return connection_1.createProtocolConnection;
            }
        });
        var LSPErrorCodes;
        (function(LSPErrorCodes2) {
            LSPErrorCodes2.lspReservedErrorRangeStart = -32899;
            LSPErrorCodes2.RequestFailed = -32803;
            LSPErrorCodes2.ServerCancelled = -32802;
            LSPErrorCodes2.ContentModified = -32801;
            LSPErrorCodes2.RequestCancelled = -32800;
            LSPErrorCodes2.lspReservedErrorRangeEnd = -32800;
        })(LSPErrorCodes || (exports.LSPErrorCodes = LSPErrorCodes = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/lib/browser/main.js
var require_main2 = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/lib/browser/main.js" (exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                desc = {
                    enumerable: true,
                    get: function() {
                        return m[k];
                    }
                };
            }
            Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function(m, exports2) {
            for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createProtocolConnection = void 0;
        var browser_1 = require_browser();
        __exportStar(require_browser(), exports);
        __exportStar(require_api2(), exports);
        function createProtocolConnection(reader, writer, logger, options) {
            return (0, browser_1.createMessageConnection)(reader, writer, logger, options);
        }
        exports.createProtocolConnection = createProtocolConnection;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/semanticTokens.js
var require_semanticTokens = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/semanticTokens.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.SemanticTokensBuilder = exports.SemanticTokensDiff = exports.SemanticTokensFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var SemanticTokensFeature = (Base)=>{
            return class extends Base {
                get semanticTokens() {
                    return {
                        refresh: ()=>{
                            return this.connection.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRefreshRequest.type);
                        },
                        on: (handler)=>{
                            const type = vscode_languageserver_protocol_1.SemanticTokensRequest.type;
                            return this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        },
                        onDelta: (handler)=>{
                            const type = vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type;
                            return this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        },
                        onRange: (handler)=>{
                            const type = vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type;
                            return this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        }
                    };
                }
            };
        };
        exports.SemanticTokensFeature = SemanticTokensFeature;
        var SemanticTokensDiff = class {
            computeDiff() {
                const originalLength = this.originalSequence.length;
                const modifiedLength = this.modifiedSequence.length;
                let startIndex = 0;
                while(startIndex < modifiedLength && startIndex < originalLength && this.originalSequence[startIndex] === this.modifiedSequence[startIndex]){
                    startIndex++;
                }
                if (startIndex < modifiedLength && startIndex < originalLength) {
                    let originalEndIndex = originalLength - 1;
                    let modifiedEndIndex = modifiedLength - 1;
                    while(originalEndIndex >= startIndex && modifiedEndIndex >= startIndex && this.originalSequence[originalEndIndex] === this.modifiedSequence[modifiedEndIndex]){
                        originalEndIndex--;
                        modifiedEndIndex--;
                    }
                    if (originalEndIndex < startIndex || modifiedEndIndex < startIndex) {
                        originalEndIndex++;
                        modifiedEndIndex++;
                    }
                    const deleteCount = originalEndIndex - startIndex + 1;
                    const newData = this.modifiedSequence.slice(startIndex, modifiedEndIndex + 1);
                    if (newData.length === 1 && newData[0] === this.originalSequence[originalEndIndex]) {
                        return [
                            {
                                start: startIndex,
                                deleteCount: deleteCount - 1
                            }
                        ];
                    } else {
                        return [
                            {
                                start: startIndex,
                                deleteCount,
                                data: newData
                            }
                        ];
                    }
                } else if (startIndex < modifiedLength) {
                    return [
                        {
                            start: startIndex,
                            deleteCount: 0,
                            data: this.modifiedSequence.slice(startIndex)
                        }
                    ];
                } else if (startIndex < originalLength) {
                    return [
                        {
                            start: startIndex,
                            deleteCount: originalLength - startIndex
                        }
                    ];
                } else {
                    return [];
                }
            }
            constructor(originalSequence, modifiedSequence){
                this.originalSequence = originalSequence;
                this.modifiedSequence = modifiedSequence;
            }
        };
        exports.SemanticTokensDiff = SemanticTokensDiff;
        var SemanticTokensBuilder = class {
            initialize() {
                this._id = Date.now();
                this._prevLine = 0;
                this._prevChar = 0;
                this._data = [];
                this._dataLen = 0;
            }
            push(line, char, length, tokenType2, tokenModifiers) {
                let pushLine = line;
                let pushChar = char;
                if (this._dataLen > 0) {
                    pushLine -= this._prevLine;
                    if (pushLine === 0) {
                        pushChar -= this._prevChar;
                    }
                }
                this._data[this._dataLen++] = pushLine;
                this._data[this._dataLen++] = pushChar;
                this._data[this._dataLen++] = length;
                this._data[this._dataLen++] = tokenType2;
                this._data[this._dataLen++] = tokenModifiers;
                this._prevLine = line;
                this._prevChar = char;
            }
            get id() {
                return this._id.toString();
            }
            previousResult(id) {
                if (this.id === id) {
                    this._prevData = this._data;
                }
                this.initialize();
            }
            build() {
                this._prevData = void 0;
                return {
                    resultId: this.id,
                    data: this._data
                };
            }
            canBuildEdits() {
                return this._prevData !== void 0;
            }
            buildEdits() {
                if (this._prevData !== void 0) {
                    return {
                        resultId: this.id,
                        edits: new SemanticTokensDiff(this._prevData, this._data).computeDiff()
                    };
                } else {
                    return this.build();
                }
            }
            constructor(){
                this._prevData = void 0;
                this.initialize();
            }
        };
        exports.SemanticTokensBuilder = SemanticTokensBuilder;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/inlineCompletion.proposed.js
var require_inlineCompletion_proposed = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/inlineCompletion.proposed.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.InlineCompletionFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var InlineCompletionFeature = (Base)=>{
            return class extends Base {
                get inlineCompletion() {
                    return {
                        on: (handler)=>{
                            return this.connection.onRequest(vscode_languageserver_protocol_1.InlineCompletionRequest.type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params));
                            });
                        }
                    };
                }
            };
        };
        exports.InlineCompletionFeature = InlineCompletionFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/textDocuments.js
var require_textDocuments = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/textDocuments.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.TextDocuments = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var TextDocuments2 = class {
            /**
       * An event that fires when a text document managed by this manager
       * has been opened.
       */ get onDidOpen() {
                return this._onDidOpen.event;
            }
            /**
       * An event that fires when a text document managed by this manager
       * has been opened or the content changes.
       */ get onDidChangeContent() {
                return this._onDidChangeContent.event;
            }
            /**
       * An event that fires when a text document managed by this manager
       * will be saved.
       */ get onWillSave() {
                return this._onWillSave.event;
            }
            /**
       * Sets a handler that will be called if a participant wants to provide
       * edits during a text document save.
       */ onWillSaveWaitUntil(handler) {
                this._willSaveWaitUntil = handler;
            }
            /**
       * An event that fires when a text document managed by this manager
       * has been saved.
       */ get onDidSave() {
                return this._onDidSave.event;
            }
            /**
       * An event that fires when a text document managed by this manager
       * has been closed.
       */ get onDidClose() {
                return this._onDidClose.event;
            }
            /**
       * Returns the document for the given URI. Returns undefined if
       * the document is not managed by this instance.
       *
       * @param uri The text document's URI to retrieve.
       * @return the text document or `undefined`.
       */ get(uri) {
                return this._syncedDocuments.get(uri);
            }
            /**
       * Returns all text documents managed by this instance.
       *
       * @return all text documents.
       */ all() {
                return Array.from(this._syncedDocuments.values());
            }
            /**
       * Returns the URIs of all text documents managed by this instance.
       *
       * @return the URI's of all text documents.
       */ keys() {
                return Array.from(this._syncedDocuments.keys());
            }
            /**
       * Listens for `low level` notification on the given connection to
       * update the text documents managed by this instance.
       *
       * Please note that the connection only provides handlers not an event model. Therefore
       * listening on a connection will overwrite the following handlers on a connection:
       * `onDidOpenTextDocument`, `onDidChangeTextDocument`, `onDidCloseTextDocument`,
       * `onWillSaveTextDocument`, `onWillSaveTextDocumentWaitUntil` and `onDidSaveTextDocument`.
       *
       * Use the corresponding events on the TextDocuments instance instead.
       *
       * @param connection The connection to listen on.
       */ listen(connection) {
                connection.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental;
                const disposables = [];
                disposables.push(connection.onDidOpenTextDocument((event)=>{
                    const td = event.textDocument;
                    const document = this._configuration.create(td.uri, td.languageId, td.version, td.text);
                    this._syncedDocuments.set(td.uri, document);
                    const toFire = Object.freeze({
                        document
                    });
                    this._onDidOpen.fire(toFire);
                    this._onDidChangeContent.fire(toFire);
                }));
                disposables.push(connection.onDidChangeTextDocument((event)=>{
                    const td = event.textDocument;
                    const changes = event.contentChanges;
                    if (changes.length === 0) {
                        return;
                    }
                    const { version } = td;
                    if (version === null || version === void 0) {
                        throw new Error(`Received document change event for ${td.uri} without valid version identifier`);
                    }
                    let syncedDocument = this._syncedDocuments.get(td.uri);
                    if (syncedDocument !== void 0) {
                        syncedDocument = this._configuration.update(syncedDocument, changes, version);
                        this._syncedDocuments.set(td.uri, syncedDocument);
                        this._onDidChangeContent.fire(Object.freeze({
                            document: syncedDocument
                        }));
                    }
                }));
                disposables.push(connection.onDidCloseTextDocument((event)=>{
                    let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
                    if (syncedDocument !== void 0) {
                        this._syncedDocuments.delete(event.textDocument.uri);
                        this._onDidClose.fire(Object.freeze({
                            document: syncedDocument
                        }));
                    }
                }));
                disposables.push(connection.onWillSaveTextDocument((event)=>{
                    let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
                    if (syncedDocument !== void 0) {
                        this._onWillSave.fire(Object.freeze({
                            document: syncedDocument,
                            reason: event.reason
                        }));
                    }
                }));
                disposables.push(connection.onWillSaveTextDocumentWaitUntil((event, token)=>{
                    let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
                    if (syncedDocument !== void 0 && this._willSaveWaitUntil) {
                        return this._willSaveWaitUntil(Object.freeze({
                            document: syncedDocument,
                            reason: event.reason
                        }), token);
                    } else {
                        return [];
                    }
                }));
                disposables.push(connection.onDidSaveTextDocument((event)=>{
                    let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
                    if (syncedDocument !== void 0) {
                        this._onDidSave.fire(Object.freeze({
                            document: syncedDocument
                        }));
                    }
                }));
                return vscode_languageserver_protocol_1.Disposable.create(()=>{
                    disposables.forEach((disposable)=>disposable.dispose());
                });
            }
            /**
       * Create a new text document manager.
       */ constructor(configuration){
                this._configuration = configuration;
                this._syncedDocuments = /* @__PURE__ */ new Map();
                this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();
                this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
                this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
                this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
                this._onWillSave = new vscode_languageserver_protocol_1.Emitter();
            }
        };
        exports.TextDocuments = TextDocuments2;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/notebook.js
var require_notebook = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/notebook.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.NotebookDocuments = exports.NotebookSyncFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var textDocuments_1 = require_textDocuments();
        var NotebookSyncFeature = (Base)=>{
            return class extends Base {
                get synchronization() {
                    return {
                        onDidOpenNotebookDocument: (handler)=>{
                            return this.connection.onNotification(vscode_languageserver_protocol_1.DidOpenNotebookDocumentNotification.type, (params)=>{
                                handler(params);
                            });
                        },
                        onDidChangeNotebookDocument: (handler)=>{
                            return this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeNotebookDocumentNotification.type, (params)=>{
                                handler(params);
                            });
                        },
                        onDidSaveNotebookDocument: (handler)=>{
                            return this.connection.onNotification(vscode_languageserver_protocol_1.DidSaveNotebookDocumentNotification.type, (params)=>{
                                handler(params);
                            });
                        },
                        onDidCloseNotebookDocument: (handler)=>{
                            return this.connection.onNotification(vscode_languageserver_protocol_1.DidCloseNotebookDocumentNotification.type, (params)=>{
                                handler(params);
                            });
                        }
                    };
                }
            };
        };
        exports.NotebookSyncFeature = NotebookSyncFeature;
        var CellTextDocumentConnection = class _CellTextDocumentConnection {
            onDidOpenTextDocument(handler) {
                this.openHandler = handler;
                return vscode_languageserver_protocol_1.Disposable.create(()=>{
                    this.openHandler = void 0;
                });
            }
            openTextDocument(params) {
                this.openHandler && this.openHandler(params);
            }
            onDidChangeTextDocument(handler) {
                this.changeHandler = handler;
                return vscode_languageserver_protocol_1.Disposable.create(()=>{
                    this.changeHandler = handler;
                });
            }
            changeTextDocument(params) {
                this.changeHandler && this.changeHandler(params);
            }
            onDidCloseTextDocument(handler) {
                this.closeHandler = handler;
                return vscode_languageserver_protocol_1.Disposable.create(()=>{
                    this.closeHandler = void 0;
                });
            }
            closeTextDocument(params) {
                this.closeHandler && this.closeHandler(params);
            }
            onWillSaveTextDocument() {
                return _CellTextDocumentConnection.NULL_DISPOSE;
            }
            onWillSaveTextDocumentWaitUntil() {
                return _CellTextDocumentConnection.NULL_DISPOSE;
            }
            onDidSaveTextDocument() {
                return _CellTextDocumentConnection.NULL_DISPOSE;
            }
        };
        CellTextDocumentConnection.NULL_DISPOSE = Object.freeze({
            dispose: ()=>{}
        });
        var NotebookDocuments = class {
            get cellTextDocuments() {
                return this._cellTextDocuments;
            }
            getCellTextDocument(cell) {
                return this._cellTextDocuments.get(cell.document);
            }
            getNotebookDocument(uri) {
                return this.notebookDocuments.get(uri);
            }
            getNotebookCell(uri) {
                const value1 = this.notebookCellMap.get(uri);
                return value1 && value1[0];
            }
            findNotebookDocumentForCell(cell) {
                const key = typeof cell === "string" ? cell : cell.document;
                const value1 = this.notebookCellMap.get(key);
                return value1 && value1[1];
            }
            get onDidOpen() {
                return this._onDidOpen.event;
            }
            get onDidSave() {
                return this._onDidSave.event;
            }
            get onDidChange() {
                return this._onDidChange.event;
            }
            get onDidClose() {
                return this._onDidClose.event;
            }
            /**
       * Listens for `low level` notification on the given connection to
       * update the notebook documents managed by this instance.
       *
       * Please note that the connection only provides handlers not an event model. Therefore
       * listening on a connection will overwrite the following handlers on a connection:
       * `onDidOpenNotebookDocument`, `onDidChangeNotebookDocument`, `onDidSaveNotebookDocument`,
       *  and `onDidCloseNotebookDocument`.
       *
       * @param connection The connection to listen on.
       */ listen(connection) {
                const cellTextDocumentConnection = new CellTextDocumentConnection();
                const disposables = [];
                disposables.push(this.cellTextDocuments.listen(cellTextDocumentConnection));
                disposables.push(connection.notebooks.synchronization.onDidOpenNotebookDocument((params)=>{
                    this.notebookDocuments.set(params.notebookDocument.uri, params.notebookDocument);
                    for (const cellTextDocument of params.cellTextDocuments){
                        cellTextDocumentConnection.openTextDocument({
                            textDocument: cellTextDocument
                        });
                    }
                    this.updateCellMap(params.notebookDocument);
                    this._onDidOpen.fire(params.notebookDocument);
                }));
                disposables.push(connection.notebooks.synchronization.onDidChangeNotebookDocument((params)=>{
                    const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
                    if (notebookDocument === void 0) {
                        return;
                    }
                    notebookDocument.version = params.notebookDocument.version;
                    const oldMetadata = notebookDocument.metadata;
                    let metadataChanged = false;
                    const change = params.change;
                    if (change.metadata !== void 0) {
                        metadataChanged = true;
                        notebookDocument.metadata = change.metadata;
                    }
                    const opened = [];
                    const closed = [];
                    const data = [];
                    const text = [];
                    if (change.cells !== void 0) {
                        const changedCells = change.cells;
                        if (changedCells.structure !== void 0) {
                            const array = changedCells.structure.array;
                            notebookDocument.cells.splice(array.start, array.deleteCount, ...array.cells !== void 0 ? array.cells : []);
                            if (changedCells.structure.didOpen !== void 0) {
                                for (const open of changedCells.structure.didOpen){
                                    cellTextDocumentConnection.openTextDocument({
                                        textDocument: open
                                    });
                                    opened.push(open.uri);
                                }
                            }
                            if (changedCells.structure.didClose) {
                                for (const close of changedCells.structure.didClose){
                                    cellTextDocumentConnection.closeTextDocument({
                                        textDocument: close
                                    });
                                    closed.push(close.uri);
                                }
                            }
                        }
                        if (changedCells.data !== void 0) {
                            const cellUpdates = new Map(changedCells.data.map((cell)=>[
                                    cell.document,
                                    cell
                                ]));
                            for(let i = 0; i <= notebookDocument.cells.length; i++){
                                const change2 = cellUpdates.get(notebookDocument.cells[i].document);
                                if (change2 !== void 0) {
                                    const old = notebookDocument.cells.splice(i, 1, change2);
                                    data.push({
                                        old: old[0],
                                        new: change2
                                    });
                                    cellUpdates.delete(change2.document);
                                    if (cellUpdates.size === 0) {
                                        break;
                                    }
                                }
                            }
                        }
                        if (changedCells.textContent !== void 0) {
                            for (const cellTextDocument of changedCells.textContent){
                                cellTextDocumentConnection.changeTextDocument({
                                    textDocument: cellTextDocument.document,
                                    contentChanges: cellTextDocument.changes
                                });
                                text.push(cellTextDocument.document.uri);
                            }
                        }
                    }
                    this.updateCellMap(notebookDocument);
                    const changeEvent = {
                        notebookDocument
                    };
                    if (metadataChanged) {
                        changeEvent.metadata = {
                            old: oldMetadata,
                            new: notebookDocument.metadata
                        };
                    }
                    const added = [];
                    for (const open of opened){
                        added.push(this.getNotebookCell(open));
                    }
                    const removed = [];
                    for (const close of closed){
                        removed.push(this.getNotebookCell(close));
                    }
                    const textContent = [];
                    for (const change2 of text){
                        textContent.push(this.getNotebookCell(change2));
                    }
                    if (added.length > 0 || removed.length > 0 || data.length > 0 || textContent.length > 0) {
                        changeEvent.cells = {
                            added,
                            removed,
                            changed: {
                                data,
                                textContent
                            }
                        };
                    }
                    if (changeEvent.metadata !== void 0 || changeEvent.cells !== void 0) {
                        this._onDidChange.fire(changeEvent);
                    }
                }));
                disposables.push(connection.notebooks.synchronization.onDidSaveNotebookDocument((params)=>{
                    const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
                    if (notebookDocument === void 0) {
                        return;
                    }
                    this._onDidSave.fire(notebookDocument);
                }));
                disposables.push(connection.notebooks.synchronization.onDidCloseNotebookDocument((params)=>{
                    const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
                    if (notebookDocument === void 0) {
                        return;
                    }
                    this._onDidClose.fire(notebookDocument);
                    for (const cellTextDocument of params.cellTextDocuments){
                        cellTextDocumentConnection.closeTextDocument({
                            textDocument: cellTextDocument
                        });
                    }
                    this.notebookDocuments.delete(params.notebookDocument.uri);
                    for (const cell of notebookDocument.cells){
                        this.notebookCellMap.delete(cell.document);
                    }
                }));
                return vscode_languageserver_protocol_1.Disposable.create(()=>{
                    disposables.forEach((disposable)=>disposable.dispose());
                });
            }
            updateCellMap(notebookDocument) {
                for (const cell of notebookDocument.cells){
                    this.notebookCellMap.set(cell.document, [
                        cell,
                        notebookDocument
                    ]);
                }
            }
            constructor(configurationOrTextDocuments){
                if (configurationOrTextDocuments instanceof textDocuments_1.TextDocuments) {
                    this._cellTextDocuments = configurationOrTextDocuments;
                } else {
                    this._cellTextDocuments = new textDocuments_1.TextDocuments(configurationOrTextDocuments);
                }
                this.notebookDocuments = /* @__PURE__ */ new Map();
                this.notebookCellMap = /* @__PURE__ */ new Map();
                this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
                this._onDidChange = new vscode_languageserver_protocol_1.Emitter();
                this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
                this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
            }
        };
        exports.NotebookDocuments = NotebookDocuments;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/utils/is.js
var require_is3 = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/utils/is.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.thenable = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
        function boolean(value1) {
            return value1 === true || value1 === false;
        }
        exports.boolean = boolean;
        function string2(value1) {
            return typeof value1 === "string" || value1 instanceof String;
        }
        exports.string = string2;
        function number(value1) {
            return typeof value1 === "number" || value1 instanceof Number;
        }
        exports.number = number;
        function error(value1) {
            return value1 instanceof Error;
        }
        exports.error = error;
        function func(value1) {
            return typeof value1 === "function";
        }
        exports.func = func;
        function array(value1) {
            return Array.isArray(value1);
        }
        exports.array = array;
        function stringArray(value1) {
            return array(value1) && value1.every((elem)=>string2(elem));
        }
        exports.stringArray = stringArray;
        function typedArray(value1, check) {
            return Array.isArray(value1) && value1.every(check);
        }
        exports.typedArray = typedArray;
        function thenable(value1) {
            return value1 && func(value1.then);
        }
        exports.thenable = thenable;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/utils/uuid.js
var require_uuid = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/utils/uuid.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.generateUuid = exports.parse = exports.isUUID = exports.v4 = exports.empty = void 0;
        var ValueUUID = class {
            asHex() {
                return this._value;
            }
            equals(other) {
                return this.asHex() === other.asHex();
            }
            constructor(_value){
                this._value = _value;
            }
        };
        var V4UUID = class _V4UUID extends ValueUUID {
            static _oneOf(array) {
                return array[Math.floor(array.length * Math.random())];
            }
            static _randomHex() {
                return _V4UUID._oneOf(_V4UUID._chars);
            }
            constructor(){
                super([
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    "-",
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    "-",
                    "4",
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    "-",
                    _V4UUID._oneOf(_V4UUID._timeHighBits),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    "-",
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex(),
                    _V4UUID._randomHex()
                ].join(""));
            }
        };
        V4UUID._chars = [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "6",
            "7",
            "8",
            "9",
            "a",
            "b",
            "c",
            "d",
            "e",
            "f"
        ];
        V4UUID._timeHighBits = [
            "8",
            "9",
            "a",
            "b"
        ];
        exports.empty = new ValueUUID("00000000-0000-0000-0000-000000000000");
        function v4() {
            return new V4UUID();
        }
        exports.v4 = v4;
        var _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
        function isUUID(value1) {
            return _UUIDPattern.test(value1);
        }
        exports.isUUID = isUUID;
        function parse7(value1) {
            if (!isUUID(value1)) {
                throw new Error("invalid uuid");
            }
            return new ValueUUID(value1);
        }
        exports.parse = parse7;
        function generateUuid() {
            return v4().asHex();
        }
        exports.generateUuid = generateUuid;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/progress.js
var require_progress = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/progress.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.attachPartialResult = exports.ProgressFeature = exports.attachWorkDone = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var uuid_1 = require_uuid();
        var WorkDoneProgressReporterImpl = class _WorkDoneProgressReporterImpl {
            begin(title, percentage, message, cancellable) {
                let param = {
                    kind: "begin",
                    title,
                    percentage,
                    message,
                    cancellable
                };
                this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
            }
            report(arg0, arg1) {
                let param = {
                    kind: "report"
                };
                if (typeof arg0 === "number") {
                    param.percentage = arg0;
                    if (arg1 !== void 0) {
                        param.message = arg1;
                    }
                } else {
                    param.message = arg0;
                }
                this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
            }
            done() {
                _WorkDoneProgressReporterImpl.Instances.delete(this._token);
                this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, {
                    kind: "end"
                });
            }
            constructor(_connection, _token){
                this._connection = _connection;
                this._token = _token;
                _WorkDoneProgressReporterImpl.Instances.set(this._token, this);
            }
        };
        WorkDoneProgressReporterImpl.Instances = /* @__PURE__ */ new Map();
        var WorkDoneProgressServerReporterImpl = class extends WorkDoneProgressReporterImpl {
            get token() {
                return this._source.token;
            }
            done() {
                this._source.dispose();
                super.done();
            }
            cancel() {
                this._source.cancel();
            }
            constructor(connection, token){
                super(connection, token);
                this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
            }
        };
        var NullProgressReporter = class {
            begin() {}
            report() {}
            done() {}
            constructor(){}
        };
        var NullProgressServerReporter = class extends NullProgressReporter {
            get token() {
                return this._source.token;
            }
            done() {
                this._source.dispose();
            }
            cancel() {
                this._source.cancel();
            }
            constructor(){
                super();
                this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
            }
        };
        function attachWorkDone(connection, params) {
            if (params === void 0 || params.workDoneToken === void 0) {
                return new NullProgressReporter();
            }
            const token = params.workDoneToken;
            delete params.workDoneToken;
            return new WorkDoneProgressReporterImpl(connection, token);
        }
        exports.attachWorkDone = attachWorkDone;
        var ProgressFeature = (Base)=>{
            return class extends Base {
                initialize(capabilities) {
                    var _a;
                    super.initialize(capabilities);
                    if (((_a = capabilities == null ? void 0 : capabilities.window) == null ? void 0 : _a.workDoneProgress) === true) {
                        this._progressSupported = true;
                        this.connection.onNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, (params)=>{
                            let progress = WorkDoneProgressReporterImpl.Instances.get(params.token);
                            if (progress instanceof WorkDoneProgressServerReporterImpl || progress instanceof NullProgressServerReporter) {
                                progress.cancel();
                            }
                        });
                    }
                }
                attachWorkDoneProgress(token) {
                    if (token === void 0) {
                        return new NullProgressReporter();
                    } else {
                        return new WorkDoneProgressReporterImpl(this.connection, token);
                    }
                }
                createWorkDoneProgress() {
                    if (this._progressSupported) {
                        const token = (0, uuid_1.generateUuid)();
                        return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, {
                            token
                        }).then(()=>{
                            const result = new WorkDoneProgressServerReporterImpl(this.connection, token);
                            return result;
                        });
                    } else {
                        return Promise.resolve(new NullProgressServerReporter());
                    }
                }
                constructor(){
                    super();
                    this._progressSupported = false;
                }
            };
        };
        exports.ProgressFeature = ProgressFeature;
        var ResultProgress;
        (function(ResultProgress2) {
            ResultProgress2.type = new vscode_languageserver_protocol_1.ProgressType();
        })(ResultProgress || (ResultProgress = {}));
        var ResultProgressReporterImpl = class {
            report(data) {
                this._connection.sendProgress(ResultProgress.type, this._token, data);
            }
            constructor(_connection, _token){
                this._connection = _connection;
                this._token = _token;
            }
        };
        function attachPartialResult(connection, params) {
            if (params === void 0 || params.partialResultToken === void 0) {
                return void 0;
            }
            const token = params.partialResultToken;
            delete params.partialResultToken;
            return new ResultProgressReporterImpl(connection, token);
        }
        exports.attachPartialResult = attachPartialResult;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/configuration.js
var require_configuration = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/configuration.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ConfigurationFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var Is2 = require_is3();
        var ConfigurationFeature = (Base)=>{
            return class extends Base {
                getConfiguration(arg) {
                    if (!arg) {
                        return this._getConfiguration({});
                    } else if (Is2.string(arg)) {
                        return this._getConfiguration({
                            section: arg
                        });
                    } else {
                        return this._getConfiguration(arg);
                    }
                }
                _getConfiguration(arg) {
                    let params = {
                        items: Array.isArray(arg) ? arg : [
                            arg
                        ]
                    };
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, params).then((result)=>{
                        if (Array.isArray(result)) {
                            return Array.isArray(arg) ? result : result[0];
                        } else {
                            return Array.isArray(arg) ? [] : null;
                        }
                    });
                }
            };
        };
        exports.ConfigurationFeature = ConfigurationFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/workspaceFolder.js
var require_workspaceFolder = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/workspaceFolder.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.WorkspaceFoldersFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var WorkspaceFoldersFeature = (Base)=>{
            return class extends Base {
                initialize(capabilities) {
                    super.initialize(capabilities);
                    let workspaceCapabilities = capabilities.workspace;
                    if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {
                        this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();
                        this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, (params)=>{
                            this._onDidChangeWorkspaceFolders.fire(params.event);
                        });
                    }
                }
                fillServerCapabilities(capabilities) {
                    var _a, _b;
                    super.fillServerCapabilities(capabilities);
                    const changeNotifications = (_b = (_a = capabilities.workspace) == null ? void 0 : _a.workspaceFolders) == null ? void 0 : _b.changeNotifications;
                    this._notificationIsAutoRegistered = changeNotifications === true || typeof changeNotifications === "string";
                }
                getWorkspaceFolders() {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);
                }
                get onDidChangeWorkspaceFolders() {
                    if (!this._onDidChangeWorkspaceFolders) {
                        throw new Error("Client doesn't support sending workspace folder change events.");
                    }
                    if (!this._notificationIsAutoRegistered && !this._unregistration) {
                        this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);
                    }
                    return this._onDidChangeWorkspaceFolders.event;
                }
                constructor(){
                    super();
                    this._notificationIsAutoRegistered = false;
                }
            };
        };
        exports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/callHierarchy.js
var require_callHierarchy = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/callHierarchy.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.CallHierarchyFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var CallHierarchyFeature = (Base)=>{
            return class extends Base {
                get callHierarchy() {
                    return {
                        onPrepare: (handler)=>{
                            return this.connection.onRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
                            });
                        },
                        onIncomingCalls: (handler)=>{
                            const type = vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type;
                            return this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        },
                        onOutgoingCalls: (handler)=>{
                            const type = vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type;
                            return this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        }
                    };
                }
            };
        };
        exports.CallHierarchyFeature = CallHierarchyFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/showDocument.js
var require_showDocument = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/showDocument.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ShowDocumentFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var ShowDocumentFeature = (Base)=>{
            return class extends Base {
                showDocument(params) {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, params);
                }
            };
        };
        exports.ShowDocumentFeature = ShowDocumentFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/fileOperations.js
var require_fileOperations = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/fileOperations.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.FileOperationsFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var FileOperationsFeature = (Base)=>{
            return class extends Base {
                onDidCreateFiles(handler) {
                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidCreateFilesNotification.type, (params)=>{
                        handler(params);
                    });
                }
                onDidRenameFiles(handler) {
                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidRenameFilesNotification.type, (params)=>{
                        handler(params);
                    });
                }
                onDidDeleteFiles(handler) {
                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidDeleteFilesNotification.type, (params)=>{
                        handler(params);
                    });
                }
                onWillCreateFiles(handler) {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.WillCreateFilesRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    });
                }
                onWillRenameFiles(handler) {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.WillRenameFilesRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    });
                }
                onWillDeleteFiles(handler) {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.WillDeleteFilesRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    });
                }
            };
        };
        exports.FileOperationsFeature = FileOperationsFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/linkedEditingRange.js
var require_linkedEditingRange = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/linkedEditingRange.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.LinkedEditingRangeFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var LinkedEditingRangeFeature = (Base)=>{
            return class extends Base {
                onLinkedEditingRange(handler) {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.LinkedEditingRangeRequest.type, (params, cancel)=>{
                        return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
                    });
                }
            };
        };
        exports.LinkedEditingRangeFeature = LinkedEditingRangeFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/typeHierarchy.js
var require_typeHierarchy = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/typeHierarchy.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.TypeHierarchyFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var TypeHierarchyFeature = (Base)=>{
            return class extends Base {
                get typeHierarchy() {
                    return {
                        onPrepare: (handler)=>{
                            return this.connection.onRequest(vscode_languageserver_protocol_1.TypeHierarchyPrepareRequest.type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
                            });
                        },
                        onSupertypes: (handler)=>{
                            const type = vscode_languageserver_protocol_1.TypeHierarchySupertypesRequest.type;
                            return this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        },
                        onSubtypes: (handler)=>{
                            const type = vscode_languageserver_protocol_1.TypeHierarchySubtypesRequest.type;
                            return this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        }
                    };
                }
            };
        };
        exports.TypeHierarchyFeature = TypeHierarchyFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/inlineValue.js
var require_inlineValue = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/inlineValue.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.InlineValueFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var InlineValueFeature = (Base)=>{
            return class extends Base {
                get inlineValue() {
                    return {
                        refresh: ()=>{
                            return this.connection.sendRequest(vscode_languageserver_protocol_1.InlineValueRefreshRequest.type);
                        },
                        on: (handler)=>{
                            return this.connection.onRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params));
                            });
                        }
                    };
                }
            };
        };
        exports.InlineValueFeature = InlineValueFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/foldingRange.js
var require_foldingRange = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/foldingRange.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.FoldingRangeFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var FoldingRangeFeature = (Base)=>{
            return class extends Base {
                get foldingRange() {
                    return {
                        refresh: ()=>{
                            return this.connection.sendRequest(vscode_languageserver_protocol_1.FoldingRangeRefreshRequest.type);
                        },
                        on: (handler)=>{
                            const type = vscode_languageserver_protocol_1.FoldingRangeRequest.type;
                            return this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        }
                    };
                }
            };
        };
        exports.FoldingRangeFeature = FoldingRangeFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/inlayHint.js
var require_inlayHint = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/inlayHint.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.InlayHintFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var InlayHintFeature = (Base)=>{
            return class extends Base {
                get inlayHint() {
                    return {
                        refresh: ()=>{
                            return this.connection.sendRequest(vscode_languageserver_protocol_1.InlayHintRefreshRequest.type);
                        },
                        on: (handler)=>{
                            return this.connection.onRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params));
                            });
                        },
                        resolve: (handler)=>{
                            return this.connection.onRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, (params, cancel)=>{
                                return handler(params, cancel);
                            });
                        }
                    };
                }
            };
        };
        exports.InlayHintFeature = InlayHintFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/diagnostic.js
var require_diagnostic = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/diagnostic.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.DiagnosticFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var DiagnosticFeature = (Base)=>{
            return class extends Base {
                get diagnostics() {
                    return {
                        refresh: ()=>{
                            return this.connection.sendRequest(vscode_languageserver_protocol_1.DiagnosticRefreshRequest.type);
                        },
                        on: (handler)=>{
                            return this.connection.onRequest(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.partialResult, params));
                            });
                        },
                        onWorkspace: (handler)=>{
                            return this.connection.onRequest(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.partialResult, params));
                            });
                        }
                    };
                }
            };
        };
        exports.DiagnosticFeature = DiagnosticFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/moniker.js
var require_moniker = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/moniker.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.MonikerFeature = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var MonikerFeature = (Base)=>{
            return class extends Base {
                get moniker() {
                    return {
                        on: (handler)=>{
                            const type = vscode_languageserver_protocol_1.MonikerRequest.type;
                            return this.connection.onRequest(type, (params, cancel)=>{
                                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                            });
                        }
                    };
                }
            };
        };
        exports.MonikerFeature = MonikerFeature;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/server.js
var require_server = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/server.js" (exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createConnection = exports.combineFeatures = exports.combineNotebooksFeatures = exports.combineLanguagesFeatures = exports.combineWorkspaceFeatures = exports.combineWindowFeatures = exports.combineClientFeatures = exports.combineTracerFeatures = exports.combineTelemetryFeatures = exports.combineConsoleFeatures = exports._NotebooksImpl = exports._LanguagesImpl = exports.BulkUnregistration = exports.BulkRegistration = exports.ErrorMessageTracker = void 0;
        var vscode_languageserver_protocol_1 = require_main2();
        var Is2 = require_is3();
        var UUID = require_uuid();
        var progress_1 = require_progress();
        var configuration_1 = require_configuration();
        var workspaceFolder_1 = require_workspaceFolder();
        var callHierarchy_1 = require_callHierarchy();
        var semanticTokens_1 = require_semanticTokens();
        var showDocument_1 = require_showDocument();
        var fileOperations_1 = require_fileOperations();
        var linkedEditingRange_1 = require_linkedEditingRange();
        var typeHierarchy_1 = require_typeHierarchy();
        var inlineValue_1 = require_inlineValue();
        var foldingRange_1 = require_foldingRange();
        var inlayHint_1 = require_inlayHint();
        var diagnostic_1 = require_diagnostic();
        var notebook_1 = require_notebook();
        var moniker_1 = require_moniker();
        function null2Undefined(value1) {
            if (value1 === null) {
                return void 0;
            }
            return value1;
        }
        var ErrorMessageTracker = class {
            /**
       * Add a message to the tracker.
       *
       * @param message The message to add.
       */ add(message) {
                let count = this._messages[message];
                if (!count) {
                    count = 0;
                }
                count++;
                this._messages[message] = count;
            }
            /**
       * Send all tracked messages to the connection's window.
       *
       * @param connection The connection established between client and server.
       */ sendErrors(connection) {
                Object.keys(this._messages).forEach((message)=>{
                    connection.window.showErrorMessage(message);
                });
            }
            constructor(){
                this._messages = /* @__PURE__ */ Object.create(null);
            }
        };
        exports.ErrorMessageTracker = ErrorMessageTracker;
        var RemoteConsoleImpl = class {
            rawAttach(connection) {
                this._rawConnection = connection;
            }
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            fillServerCapabilities(_capabilities) {}
            initialize(_capabilities) {}
            error(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Error, message);
            }
            warn(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);
            }
            info(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Info, message);
            }
            log(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Log, message);
            }
            debug(message) {
                this.send(vscode_languageserver_protocol_1.MessageType.Debug, message);
            }
            send(type, message) {
                if (this._rawConnection) {
                    this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, {
                        type,
                        message
                    }).catch(()=>{
                        (0, vscode_languageserver_protocol_1.RAL)().console.error(`Sending log message failed`);
                    });
                }
            }
            constructor(){}
        };
        var _RemoteWindowImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            showErrorMessage(message, ...actions) {
                let params = {
                    type: vscode_languageserver_protocol_1.MessageType.Error,
                    message,
                    actions
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
            }
            showWarningMessage(message, ...actions) {
                let params = {
                    type: vscode_languageserver_protocol_1.MessageType.Warning,
                    message,
                    actions
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
            }
            showInformationMessage(message, ...actions) {
                let params = {
                    type: vscode_languageserver_protocol_1.MessageType.Info,
                    message,
                    actions
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
            }
            constructor(){}
        };
        var RemoteWindowImpl = (0, showDocument_1.ShowDocumentFeature)((0, progress_1.ProgressFeature)(_RemoteWindowImpl));
        var BulkRegistration;
        (function(BulkRegistration2) {
            function create() {
                return new BulkRegistrationImpl();
            }
            BulkRegistration2.create = create;
        })(BulkRegistration || (exports.BulkRegistration = BulkRegistration = {}));
        var BulkRegistrationImpl = class {
            add(type, registerOptions) {
                const method = Is2.string(type) ? type : type.method;
                if (this._registered.has(method)) {
                    throw new Error(`${method} is already added to this registration`);
                }
                const id = UUID.generateUuid();
                this._registrations.push({
                    id,
                    method,
                    registerOptions: registerOptions || {}
                });
                this._registered.add(method);
            }
            asRegistrationParams() {
                return {
                    registrations: this._registrations
                };
            }
            constructor(){
                this._registrations = [];
                this._registered = /* @__PURE__ */ new Set();
            }
        };
        var BulkUnregistration;
        (function(BulkUnregistration2) {
            function create() {
                return new BulkUnregistrationImpl(void 0, []);
            }
            BulkUnregistration2.create = create;
        })(BulkUnregistration || (exports.BulkUnregistration = BulkUnregistration = {}));
        var BulkUnregistrationImpl = class {
            get isAttached() {
                return !!this._connection;
            }
            attach(connection) {
                this._connection = connection;
            }
            add(unregistration) {
                this._unregistrations.set(unregistration.method, unregistration);
            }
            dispose() {
                let unregistrations = [];
                for (let unregistration of this._unregistrations.values()){
                    unregistrations.push(unregistration);
                }
                let params = {
                    unregisterations: unregistrations
                };
                this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(()=>{
                    this._connection.console.info(`Bulk unregistration failed.`);
                });
            }
            disposeSingle(arg) {
                const method = Is2.string(arg) ? arg : arg.method;
                const unregistration = this._unregistrations.get(method);
                if (!unregistration) {
                    return false;
                }
                let params = {
                    unregisterations: [
                        unregistration
                    ]
                };
                this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(()=>{
                    this._unregistrations.delete(method);
                }, (_error)=>{
                    this._connection.console.info(`Un-registering request handler for ${unregistration.id} failed.`);
                });
                return true;
            }
            constructor(_connection, unregistrations){
                this._connection = _connection;
                this._unregistrations = /* @__PURE__ */ new Map();
                unregistrations.forEach((unregistration)=>{
                    this._unregistrations.set(unregistration.method, unregistration);
                });
            }
        };
        var RemoteClientImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            register(typeOrRegistrations, registerOptionsOrType, registerOptions) {
                if (typeOrRegistrations instanceof BulkRegistrationImpl) {
                    return this.registerMany(typeOrRegistrations);
                } else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {
                    return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);
                } else {
                    return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);
                }
            }
            registerSingle1(unregistration, type, registerOptions) {
                const method = Is2.string(type) ? type : type.method;
                const id = UUID.generateUuid();
                let params = {
                    registrations: [
                        {
                            id,
                            method,
                            registerOptions: registerOptions || {}
                        }
                    ]
                };
                if (!unregistration.isAttached) {
                    unregistration.attach(this.connection);
                }
                return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result)=>{
                    unregistration.add({
                        id,
                        method
                    });
                    return unregistration;
                }, (_error)=>{
                    this.connection.console.info(`Registering request handler for ${method} failed.`);
                    return Promise.reject(_error);
                });
            }
            registerSingle2(type, registerOptions) {
                const method = Is2.string(type) ? type : type.method;
                const id = UUID.generateUuid();
                let params = {
                    registrations: [
                        {
                            id,
                            method,
                            registerOptions: registerOptions || {}
                        }
                    ]
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result)=>{
                    return vscode_languageserver_protocol_1.Disposable.create(()=>{
                        this.unregisterSingle(id, method).catch(()=>{
                            this.connection.console.info(`Un-registering capability with id ${id} failed.`);
                        });
                    });
                }, (_error)=>{
                    this.connection.console.info(`Registering request handler for ${method} failed.`);
                    return Promise.reject(_error);
                });
            }
            unregisterSingle(id, method) {
                let params = {
                    unregisterations: [
                        {
                            id,
                            method
                        }
                    ]
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(()=>{
                    this.connection.console.info(`Un-registering request handler for ${id} failed.`);
                });
            }
            registerMany(registrations) {
                let params = registrations.asRegistrationParams();
                return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(()=>{
                    return new BulkUnregistrationImpl(this._connection, params.registrations.map((registration)=>{
                        return {
                            id: registration.id,
                            method: registration.method
                        };
                    }));
                }, (_error)=>{
                    this.connection.console.info(`Bulk registration failed.`);
                    return Promise.reject(_error);
                });
            }
        };
        var _RemoteWorkspaceImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            applyEdit(paramOrEdit) {
                function isApplyWorkspaceEditParams(value1) {
                    return value1 && !!value1.edit;
                }
                let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : {
                    edit: paramOrEdit
                };
                return this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);
            }
            constructor(){}
        };
        var RemoteWorkspaceImpl = (0, fileOperations_1.FileOperationsFeature)((0, workspaceFolder_1.WorkspaceFoldersFeature)((0, configuration_1.ConfigurationFeature)(_RemoteWorkspaceImpl)));
        var TracerImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            set trace(value1) {
                this._trace = value1;
            }
            log(message, verbose) {
                if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {
                    return;
                }
                this.connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {
                    message,
                    verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : void 0
                }).catch(()=>{});
            }
            constructor(){
                this._trace = vscode_languageserver_protocol_1.Trace.Off;
            }
        };
        var TelemetryImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            logEvent(data) {
                this.connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data).catch(()=>{
                    this.connection.console.log(`Sending TelemetryEventNotification failed`);
                });
            }
            constructor(){}
        };
        var _LanguagesImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            attachWorkDoneProgress(params) {
                return (0, progress_1.attachWorkDone)(this.connection, params);
            }
            attachPartialResultProgress(_type, params) {
                return (0, progress_1.attachPartialResult)(this.connection, params);
            }
            constructor(){}
        };
        exports._LanguagesImpl = _LanguagesImpl;
        var LanguagesImpl = (0, foldingRange_1.FoldingRangeFeature)((0, moniker_1.MonikerFeature)((0, diagnostic_1.DiagnosticFeature)((0, inlayHint_1.InlayHintFeature)((0, inlineValue_1.InlineValueFeature)((0, typeHierarchy_1.TypeHierarchyFeature)((0, linkedEditingRange_1.LinkedEditingRangeFeature)((0, semanticTokens_1.SemanticTokensFeature)((0, callHierarchy_1.CallHierarchyFeature)(_LanguagesImpl)))))))));
        var _NotebooksImpl = class {
            attach(connection) {
                this._connection = connection;
            }
            get connection() {
                if (!this._connection) {
                    throw new Error("Remote is not attached to a connection yet.");
                }
                return this._connection;
            }
            initialize(_capabilities) {}
            fillServerCapabilities(_capabilities) {}
            attachWorkDoneProgress(params) {
                return (0, progress_1.attachWorkDone)(this.connection, params);
            }
            attachPartialResultProgress(_type, params) {
                return (0, progress_1.attachPartialResult)(this.connection, params);
            }
            constructor(){}
        };
        exports._NotebooksImpl = _NotebooksImpl;
        var NotebooksImpl = (0, notebook_1.NotebookSyncFeature)(_NotebooksImpl);
        function combineConsoleFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineConsoleFeatures = combineConsoleFeatures;
        function combineTelemetryFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineTelemetryFeatures = combineTelemetryFeatures;
        function combineTracerFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineTracerFeatures = combineTracerFeatures;
        function combineClientFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineClientFeatures = combineClientFeatures;
        function combineWindowFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineWindowFeatures = combineWindowFeatures;
        function combineWorkspaceFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineWorkspaceFeatures = combineWorkspaceFeatures;
        function combineLanguagesFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineLanguagesFeatures = combineLanguagesFeatures;
        function combineNotebooksFeatures(one, two) {
            return function(Base) {
                return two(one(Base));
            };
        }
        exports.combineNotebooksFeatures = combineNotebooksFeatures;
        function combineFeatures(one, two) {
            function combine(one2, two2, func) {
                if (one2 && two2) {
                    return func(one2, two2);
                } else if (one2) {
                    return one2;
                } else {
                    return two2;
                }
            }
            let result = {
                __brand: "features",
                console: combine(one.console, two.console, combineConsoleFeatures),
                tracer: combine(one.tracer, two.tracer, combineTracerFeatures),
                telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),
                client: combine(one.client, two.client, combineClientFeatures),
                window: combine(one.window, two.window, combineWindowFeatures),
                workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures),
                languages: combine(one.languages, two.languages, combineLanguagesFeatures),
                notebooks: combine(one.notebooks, two.notebooks, combineNotebooksFeatures)
            };
            return result;
        }
        exports.combineFeatures = combineFeatures;
        function createConnection(connectionFactory, watchDog, factories) {
            const logger = factories && factories.console ? new (factories.console(RemoteConsoleImpl))() : new RemoteConsoleImpl();
            const connection = connectionFactory(logger);
            logger.rawAttach(connection);
            const tracer = factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl();
            const telemetry = factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl();
            const client = factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl();
            const remoteWindow = factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl();
            const workspace = factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl();
            const languages = factories && factories.languages ? new (factories.languages(LanguagesImpl))() : new LanguagesImpl();
            const notebooks = factories && factories.notebooks ? new (factories.notebooks(NotebooksImpl))() : new NotebooksImpl();
            const allRemotes = [
                logger,
                tracer,
                telemetry,
                client,
                remoteWindow,
                workspace,
                languages,
                notebooks
            ];
            function asPromise(value1) {
                if (value1 instanceof Promise) {
                    return value1;
                } else if (Is2.thenable(value1)) {
                    return new Promise((resolve2, reject)=>{
                        value1.then((resolved)=>resolve2(resolved), (error)=>reject(error));
                    });
                } else {
                    return Promise.resolve(value1);
                }
            }
            let shutdownHandler = void 0;
            let initializeHandler = void 0;
            let exitHandler = void 0;
            let protocolConnection = {
                listen: ()=>connection.listen(),
                sendRequest: (type, ...params)=>connection.sendRequest(Is2.string(type) ? type : type.method, ...params),
                onRequest: (type, handler)=>connection.onRequest(type, handler),
                sendNotification: (type, param)=>{
                    const method = Is2.string(type) ? type : type.method;
                    return connection.sendNotification(method, param);
                },
                onNotification: (type, handler)=>connection.onNotification(type, handler),
                onProgress: connection.onProgress,
                sendProgress: connection.sendProgress,
                onInitialize: (handler)=>{
                    initializeHandler = handler;
                    return {
                        dispose: ()=>{
                            initializeHandler = void 0;
                        }
                    };
                },
                onInitialized: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),
                onShutdown: (handler)=>{
                    shutdownHandler = handler;
                    return {
                        dispose: ()=>{
                            shutdownHandler = void 0;
                        }
                    };
                },
                onExit: (handler)=>{
                    exitHandler = handler;
                    return {
                        dispose: ()=>{
                            exitHandler = void 0;
                        }
                    };
                },
                get console () {
                    return logger;
                },
                get telemetry () {
                    return telemetry;
                },
                get tracer () {
                    return tracer;
                },
                get client () {
                    return client;
                },
                get window () {
                    return remoteWindow;
                },
                get workspace () {
                    return workspace;
                },
                get languages () {
                    return languages;
                },
                get notebooks () {
                    return notebooks;
                },
                onDidChangeConfiguration: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),
                onDidChangeWatchedFiles: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),
                __textDocumentSync: void 0,
                onDidOpenTextDocument: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),
                onDidChangeTextDocument: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),
                onDidCloseTextDocument: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),
                onWillSaveTextDocument: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),
                onWillSaveTextDocumentWaitUntil: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),
                onDidSaveTextDocument: (handler)=>connection.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),
                sendDiagnostics: (params)=>connection.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),
                onHover: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), void 0);
                    }),
                onCompletion: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onCompletionResolve: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),
                onSignatureHelp: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), void 0);
                    }),
                onDeclaration: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onDefinition: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onTypeDefinition: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onImplementation: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onReferences: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onDocumentHighlight: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onDocumentSymbol: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onWorkspaceSymbol: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onWorkspaceSymbolResolve: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.type, handler),
                onCodeAction: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onCodeActionResolve: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    }),
                onCodeLens: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onCodeLensResolve: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    }),
                onDocumentFormatting: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), void 0);
                    }),
                onDocumentRangeFormatting: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), void 0);
                    }),
                onDocumentOnTypeFormatting: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    }),
                onRenameRequest: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), void 0);
                    }),
                onPrepareRename: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    }),
                onDocumentLinks: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onDocumentLinkResolve: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, (params, cancel)=>{
                        return handler(params, cancel);
                    }),
                onDocumentColor: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onColorPresentation: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onFoldingRanges: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onSelectionRanges: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
                    }),
                onExecuteCommand: (handler)=>connection.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, (params, cancel)=>{
                        return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), void 0);
                    }),
                dispose: ()=>connection.dispose()
            };
            for (let remote of allRemotes){
                remote.attach(protocolConnection);
            }
            connection.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, (params)=>{
                watchDog.initialize(params);
                if (Is2.string(params.trace)) {
                    tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);
                }
                for (let remote of allRemotes){
                    remote.initialize(params.capabilities);
                }
                if (initializeHandler) {
                    let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token, (0, progress_1.attachWorkDone)(connection, params), void 0);
                    return asPromise(result).then((value1)=>{
                        if (value1 instanceof vscode_languageserver_protocol_1.ResponseError) {
                            return value1;
                        }
                        let result2 = value1;
                        if (!result2) {
                            result2 = {
                                capabilities: {}
                            };
                        }
                        let capabilities = result2.capabilities;
                        if (!capabilities) {
                            capabilities = {};
                            result2.capabilities = capabilities;
                        }
                        if (capabilities.textDocumentSync === void 0 || capabilities.textDocumentSync === null) {
                            capabilities.textDocumentSync = Is2.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                        } else if (!Is2.number(capabilities.textDocumentSync) && !Is2.number(capabilities.textDocumentSync.change)) {
                            capabilities.textDocumentSync.change = Is2.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                        }
                        for (let remote of allRemotes){
                            remote.fillServerCapabilities(capabilities);
                        }
                        return result2;
                    });
                } else {
                    let result = {
                        capabilities: {
                            textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None
                        }
                    };
                    for (let remote of allRemotes){
                        remote.fillServerCapabilities(result.capabilities);
                    }
                    return result;
                }
            });
            connection.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, ()=>{
                watchDog.shutdownReceived = true;
                if (shutdownHandler) {
                    return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);
                } else {
                    return void 0;
                }
            });
            connection.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, ()=>{
                try {
                    if (exitHandler) {
                        exitHandler();
                    }
                } finally{
                    if (watchDog.shutdownReceived) {
                        watchDog.exit(0);
                    } else {
                        watchDog.exit(1);
                    }
                }
            });
            connection.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, (params)=>{
                tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);
            });
            return protocolConnection;
        }
        exports.createConnection = createConnection;
    }
});
// ../../node_modules/vscode-languageserver/lib/common/api.js
var require_api3 = __commonJS({
    "../../node_modules/vscode-languageserver/lib/common/api.js" (exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                desc = {
                    enumerable: true,
                    get: function() {
                        return m[k];
                    }
                };
            }
            Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function(m, exports2) {
            for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.ProposedFeatures = exports.NotebookDocuments = exports.TextDocuments = exports.SemanticTokensBuilder = void 0;
        var semanticTokens_1 = require_semanticTokens();
        Object.defineProperty(exports, "SemanticTokensBuilder", {
            enumerable: true,
            get: function() {
                return semanticTokens_1.SemanticTokensBuilder;
            }
        });
        var ic = require_inlineCompletion_proposed();
        __exportStar(require_main2(), exports);
        var textDocuments_1 = require_textDocuments();
        Object.defineProperty(exports, "TextDocuments", {
            enumerable: true,
            get: function() {
                return textDocuments_1.TextDocuments;
            }
        });
        var notebook_1 = require_notebook();
        Object.defineProperty(exports, "NotebookDocuments", {
            enumerable: true,
            get: function() {
                return notebook_1.NotebookDocuments;
            }
        });
        __exportStar(require_server(), exports);
        var ProposedFeatures;
        (function(ProposedFeatures2) {
            ProposedFeatures2.all = {
                __brand: "features",
                languages: ic.InlineCompletionFeature
            };
        })(ProposedFeatures || (exports.ProposedFeatures = ProposedFeatures = {}));
    }
});
// ../../node_modules/vscode-languageserver-protocol/browser.js
var require_browser2 = __commonJS({
    "../../node_modules/vscode-languageserver-protocol/browser.js" (exports, module) {
        "use strict";
        module.exports = require_main2();
    }
});
// ../../node_modules/vscode-languageserver/lib/browser/main.js
var require_main3 = __commonJS({
    "../../node_modules/vscode-languageserver/lib/browser/main.js" (exports) {
        "use strict";
        var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);
            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                desc = {
                    enumerable: true,
                    get: function() {
                        return m[k];
                    }
                };
            }
            Object.defineProperty(o, k2, desc);
        } : function(o, m, k, k2) {
            if (k2 === void 0) k2 = k;
            o[k2] = m[k];
        });
        var __exportStar = exports && exports.__exportStar || function(m, exports2) {
            for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
        };
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.createConnection = void 0;
        var api_1 = require_api3();
        __exportStar(require_browser2(), exports);
        __exportStar(require_api3(), exports);
        var _shutdownReceived = false;
        var watchDog = {
            initialize: (_params)=>{},
            get shutdownReceived () {
                return _shutdownReceived;
            },
            set shutdownReceived (value){
                _shutdownReceived = value;
            },
            exit: (_code)=>{}
        };
        function createConnection(arg1, arg2, arg3, arg4) {
            let factories;
            let reader;
            let writer;
            let options;
            if (arg1 !== void 0 && arg1.__brand === "features") {
                factories = arg1;
                arg1 = arg2;
                arg2 = arg3;
                arg3 = arg4;
            }
            if (api_1.ConnectionStrategy.is(arg1) || api_1.ConnectionOptions.is(arg1)) {
                options = arg1;
            } else {
                reader = arg1;
                writer = arg2;
                options = arg3;
            }
            const connectionFactory = (logger)=>{
                return (0, api_1.createProtocolConnection)(reader, writer, logger, options);
            };
            return (0, api_1.createConnection)(connectionFactory, watchDog, factories);
        }
        exports.createConnection = createConnection;
    }
});
// ../../node_modules/jsonc-parser/lib/esm/impl/scanner.js
function createScanner(text, ignoreTrivia = false) {
    const len = text.length;
    let pos = 0, value1 = "", tokenOffset = 0, token = 16, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0;
    function scanHexDigits(count, exact) {
        let digits = 0;
        let value2 = 0;
        while(digits < count || !exact){
            let ch = text.charCodeAt(pos);
            if (ch >= 48 && ch <= 57) {
                value2 = value2 * 16 + ch - 48;
            } else if (ch >= 65 && ch <= 70) {
                value2 = value2 * 16 + ch - 65 + 10;
            } else if (ch >= 97 && ch <= 102) {
                value2 = value2 * 16 + ch - 97 + 10;
            } else {
                break;
            }
            pos++;
            digits++;
        }
        if (digits < count) {
            value2 = -1;
        }
        return value2;
    }
    function setPosition(newPosition) {
        pos = newPosition;
        value1 = "";
        tokenOffset = 0;
        token = 16;
        scanError = 0;
    }
    function scanNumber() {
        let start = pos;
        if (text.charCodeAt(pos) === 48) {
            pos++;
        } else {
            pos++;
            while(pos < text.length && isDigit(text.charCodeAt(pos))){
                pos++;
            }
        }
        if (pos < text.length && text.charCodeAt(pos) === 46) {
            pos++;
            if (pos < text.length && isDigit(text.charCodeAt(pos))) {
                pos++;
                while(pos < text.length && isDigit(text.charCodeAt(pos))){
                    pos++;
                }
            } else {
                scanError = 3;
                return text.substring(start, pos);
            }
        }
        let end = pos;
        if (pos < text.length && (text.charCodeAt(pos) === 69 || text.charCodeAt(pos) === 101)) {
            pos++;
            if (pos < text.length && text.charCodeAt(pos) === 43 || text.charCodeAt(pos) === 45) {
                pos++;
            }
            if (pos < text.length && isDigit(text.charCodeAt(pos))) {
                pos++;
                while(pos < text.length && isDigit(text.charCodeAt(pos))){
                    pos++;
                }
                end = pos;
            } else {
                scanError = 3;
            }
        }
        return text.substring(start, end);
    }
    function scanString() {
        let result = "", start = pos;
        while(true){
            if (pos >= len) {
                result += text.substring(start, pos);
                scanError = 2;
                break;
            }
            const ch = text.charCodeAt(pos);
            if (ch === 34) {
                result += text.substring(start, pos);
                pos++;
                break;
            }
            if (ch === 92) {
                result += text.substring(start, pos);
                pos++;
                if (pos >= len) {
                    scanError = 2;
                    break;
                }
                const ch2 = text.charCodeAt(pos++);
                switch(ch2){
                    case 34:
                        result += '"';
                        break;
                    case 92:
                        result += "\\";
                        break;
                    case 47:
                        result += "/";
                        break;
                    case 98:
                        result += "\b";
                        break;
                    case 102:
                        result += "\f";
                        break;
                    case 110:
                        result += "\n";
                        break;
                    case 114:
                        result += "\r";
                        break;
                    case 116:
                        result += "	";
                        break;
                    case 117:
                        const ch3 = scanHexDigits(4, true);
                        if (ch3 >= 0) {
                            result += String.fromCharCode(ch3);
                        } else {
                            scanError = 4;
                        }
                        break;
                    default:
                        scanError = 5;
                }
                start = pos;
                continue;
            }
            if (ch >= 0 && ch <= 31) {
                if (isLineBreak(ch)) {
                    result += text.substring(start, pos);
                    scanError = 2;
                    break;
                } else {
                    scanError = 6;
                }
            }
            pos++;
        }
        return result;
    }
    function scanNext() {
        value1 = "";
        scanError = 0;
        tokenOffset = pos;
        lineStartOffset = lineNumber;
        prevTokenLineStartOffset = tokenLineStartOffset;
        if (pos >= len) {
            tokenOffset = len;
            return token = 17;
        }
        let code = text.charCodeAt(pos);
        if (isWhiteSpace(code)) {
            do {
                pos++;
                value1 += String.fromCharCode(code);
                code = text.charCodeAt(pos);
            }while (isWhiteSpace(code))
            return token = 15;
        }
        if (isLineBreak(code)) {
            pos++;
            value1 += String.fromCharCode(code);
            if (code === 13 && text.charCodeAt(pos) === 10) {
                pos++;
                value1 += "\n";
            }
            lineNumber++;
            tokenLineStartOffset = pos;
            return token = 14;
        }
        switch(code){
            case 123:
                pos++;
                return token = 1;
            case 125:
                pos++;
                return token = 2;
            case 91:
                pos++;
                return token = 3;
            case 93:
                pos++;
                return token = 4;
            case 58:
                pos++;
                return token = 6;
            case 44:
                pos++;
                return token = 5;
            case 34:
                pos++;
                value1 = scanString();
                return token = 10;
            case 47:
                const start = pos - 1;
                if (text.charCodeAt(pos + 1) === 47) {
                    pos += 2;
                    while(pos < len){
                        if (isLineBreak(text.charCodeAt(pos))) {
                            break;
                        }
                        pos++;
                    }
                    value1 = text.substring(start, pos);
                    return token = 12;
                }
                if (text.charCodeAt(pos + 1) === 42) {
                    pos += 2;
                    const safeLength = len - 1;
                    let commentClosed = false;
                    while(pos < safeLength){
                        const ch = text.charCodeAt(pos);
                        if (ch === 42 && text.charCodeAt(pos + 1) === 47) {
                            pos += 2;
                            commentClosed = true;
                            break;
                        }
                        pos++;
                        if (isLineBreak(ch)) {
                            if (ch === 13 && text.charCodeAt(pos) === 10) {
                                pos++;
                            }
                            lineNumber++;
                            tokenLineStartOffset = pos;
                        }
                    }
                    if (!commentClosed) {
                        pos++;
                        scanError = 1;
                    }
                    value1 = text.substring(start, pos);
                    return token = 13;
                }
                value1 += String.fromCharCode(code);
                pos++;
                return token = 16;
            case 45:
                value1 += String.fromCharCode(code);
                pos++;
                if (pos === len || !isDigit(text.charCodeAt(pos))) {
                    return token = 16;
                }
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
                value1 += scanNumber();
                return token = 11;
            default:
                while(pos < len && isUnknownContentCharacter(code)){
                    pos++;
                    code = text.charCodeAt(pos);
                }
                if (tokenOffset !== pos) {
                    value1 = text.substring(tokenOffset, pos);
                    switch(value1){
                        case "true":
                            return token = 8;
                        case "false":
                            return token = 9;
                        case "null":
                            return token = 7;
                    }
                    return token = 16;
                }
                value1 += String.fromCharCode(code);
                pos++;
                return token = 16;
        }
    }
    function isUnknownContentCharacter(code) {
        if (isWhiteSpace(code) || isLineBreak(code)) {
            return false;
        }
        switch(code){
            case 125:
            case 93:
            case 123:
            case 91:
            case 34:
            case 58:
            case 44:
            case 47:
                return false;
        }
        return true;
    }
    function scanNextNonTrivia() {
        let result;
        do {
            result = scanNext();
        }while (result >= 12 && result <= 15)
        return result;
    }
    return {
        setPosition,
        getPosition: ()=>pos,
        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,
        getToken: ()=>token,
        getTokenValue: ()=>value1,
        getTokenOffset: ()=>tokenOffset,
        getTokenLength: ()=>pos - tokenOffset,
        getTokenStartLine: ()=>lineStartOffset,
        getTokenStartCharacter: ()=>tokenOffset - prevTokenLineStartOffset,
        getTokenError: ()=>scanError
    };
}
function isWhiteSpace(ch) {
    return ch === 32 || ch === 9;
}
function isLineBreak(ch) {
    return ch === 10 || ch === 13;
}
function isDigit(ch) {
    return ch >= 48 && ch <= 57;
}
var CharacterCodes;
(function(CharacterCodes2) {
    CharacterCodes2[CharacterCodes2["lineFeed"] = 10] = "lineFeed";
    CharacterCodes2[CharacterCodes2["carriageReturn"] = 13] = "carriageReturn";
    CharacterCodes2[CharacterCodes2["space"] = 32] = "space";
    CharacterCodes2[CharacterCodes2["_0"] = 48] = "_0";
    CharacterCodes2[CharacterCodes2["_1"] = 49] = "_1";
    CharacterCodes2[CharacterCodes2["_2"] = 50] = "_2";
    CharacterCodes2[CharacterCodes2["_3"] = 51] = "_3";
    CharacterCodes2[CharacterCodes2["_4"] = 52] = "_4";
    CharacterCodes2[CharacterCodes2["_5"] = 53] = "_5";
    CharacterCodes2[CharacterCodes2["_6"] = 54] = "_6";
    CharacterCodes2[CharacterCodes2["_7"] = 55] = "_7";
    CharacterCodes2[CharacterCodes2["_8"] = 56] = "_8";
    CharacterCodes2[CharacterCodes2["_9"] = 57] = "_9";
    CharacterCodes2[CharacterCodes2["a"] = 97] = "a";
    CharacterCodes2[CharacterCodes2["b"] = 98] = "b";
    CharacterCodes2[CharacterCodes2["c"] = 99] = "c";
    CharacterCodes2[CharacterCodes2["d"] = 100] = "d";
    CharacterCodes2[CharacterCodes2["e"] = 101] = "e";
    CharacterCodes2[CharacterCodes2["f"] = 102] = "f";
    CharacterCodes2[CharacterCodes2["g"] = 103] = "g";
    CharacterCodes2[CharacterCodes2["h"] = 104] = "h";
    CharacterCodes2[CharacterCodes2["i"] = 105] = "i";
    CharacterCodes2[CharacterCodes2["j"] = 106] = "j";
    CharacterCodes2[CharacterCodes2["k"] = 107] = "k";
    CharacterCodes2[CharacterCodes2["l"] = 108] = "l";
    CharacterCodes2[CharacterCodes2["m"] = 109] = "m";
    CharacterCodes2[CharacterCodes2["n"] = 110] = "n";
    CharacterCodes2[CharacterCodes2["o"] = 111] = "o";
    CharacterCodes2[CharacterCodes2["p"] = 112] = "p";
    CharacterCodes2[CharacterCodes2["q"] = 113] = "q";
    CharacterCodes2[CharacterCodes2["r"] = 114] = "r";
    CharacterCodes2[CharacterCodes2["s"] = 115] = "s";
    CharacterCodes2[CharacterCodes2["t"] = 116] = "t";
    CharacterCodes2[CharacterCodes2["u"] = 117] = "u";
    CharacterCodes2[CharacterCodes2["v"] = 118] = "v";
    CharacterCodes2[CharacterCodes2["w"] = 119] = "w";
    CharacterCodes2[CharacterCodes2["x"] = 120] = "x";
    CharacterCodes2[CharacterCodes2["y"] = 121] = "y";
    CharacterCodes2[CharacterCodes2["z"] = 122] = "z";
    CharacterCodes2[CharacterCodes2["A"] = 65] = "A";
    CharacterCodes2[CharacterCodes2["B"] = 66] = "B";
    CharacterCodes2[CharacterCodes2["C"] = 67] = "C";
    CharacterCodes2[CharacterCodes2["D"] = 68] = "D";
    CharacterCodes2[CharacterCodes2["E"] = 69] = "E";
    CharacterCodes2[CharacterCodes2["F"] = 70] = "F";
    CharacterCodes2[CharacterCodes2["G"] = 71] = "G";
    CharacterCodes2[CharacterCodes2["H"] = 72] = "H";
    CharacterCodes2[CharacterCodes2["I"] = 73] = "I";
    CharacterCodes2[CharacterCodes2["J"] = 74] = "J";
    CharacterCodes2[CharacterCodes2["K"] = 75] = "K";
    CharacterCodes2[CharacterCodes2["L"] = 76] = "L";
    CharacterCodes2[CharacterCodes2["M"] = 77] = "M";
    CharacterCodes2[CharacterCodes2["N"] = 78] = "N";
    CharacterCodes2[CharacterCodes2["O"] = 79] = "O";
    CharacterCodes2[CharacterCodes2["P"] = 80] = "P";
    CharacterCodes2[CharacterCodes2["Q"] = 81] = "Q";
    CharacterCodes2[CharacterCodes2["R"] = 82] = "R";
    CharacterCodes2[CharacterCodes2["S"] = 83] = "S";
    CharacterCodes2[CharacterCodes2["T"] = 84] = "T";
    CharacterCodes2[CharacterCodes2["U"] = 85] = "U";
    CharacterCodes2[CharacterCodes2["V"] = 86] = "V";
    CharacterCodes2[CharacterCodes2["W"] = 87] = "W";
    CharacterCodes2[CharacterCodes2["X"] = 88] = "X";
    CharacterCodes2[CharacterCodes2["Y"] = 89] = "Y";
    CharacterCodes2[CharacterCodes2["Z"] = 90] = "Z";
    CharacterCodes2[CharacterCodes2["asterisk"] = 42] = "asterisk";
    CharacterCodes2[CharacterCodes2["backslash"] = 92] = "backslash";
    CharacterCodes2[CharacterCodes2["closeBrace"] = 125] = "closeBrace";
    CharacterCodes2[CharacterCodes2["closeBracket"] = 93] = "closeBracket";
    CharacterCodes2[CharacterCodes2["colon"] = 58] = "colon";
    CharacterCodes2[CharacterCodes2["comma"] = 44] = "comma";
    CharacterCodes2[CharacterCodes2["dot"] = 46] = "dot";
    CharacterCodes2[CharacterCodes2["doubleQuote"] = 34] = "doubleQuote";
    CharacterCodes2[CharacterCodes2["minus"] = 45] = "minus";
    CharacterCodes2[CharacterCodes2["openBrace"] = 123] = "openBrace";
    CharacterCodes2[CharacterCodes2["openBracket"] = 91] = "openBracket";
    CharacterCodes2[CharacterCodes2["plus"] = 43] = "plus";
    CharacterCodes2[CharacterCodes2["slash"] = 47] = "slash";
    CharacterCodes2[CharacterCodes2["formFeed"] = 12] = "formFeed";
    CharacterCodes2[CharacterCodes2["tab"] = 9] = "tab";
})(CharacterCodes || (CharacterCodes = {}));
// ../../node_modules/jsonc-parser/lib/esm/impl/string-intern.js
var cachedSpaces = new Array(20).fill(0).map((_2, index)=>{
    return " ".repeat(index);
});
var maxCachedValues = 200;
var cachedBreakLinesWithSpaces = {
    " ": {
        "\n": new Array(maxCachedValues).fill(0).map((_2, index)=>{
            return "\n" + " ".repeat(index);
        }),
        "\r": new Array(maxCachedValues).fill(0).map((_2, index)=>{
            return "\r" + " ".repeat(index);
        }),
        "\r\n": new Array(maxCachedValues).fill(0).map((_2, index)=>{
            return "\r\n" + " ".repeat(index);
        })
    },
    "	": {
        "\n": new Array(maxCachedValues).fill(0).map((_2, index)=>{
            return "\n" + "	".repeat(index);
        }),
        "\r": new Array(maxCachedValues).fill(0).map((_2, index)=>{
            return "\r" + "	".repeat(index);
        }),
        "\r\n": new Array(maxCachedValues).fill(0).map((_2, index)=>{
            return "\r\n" + "	".repeat(index);
        })
    }
};
// ../../node_modules/jsonc-parser/lib/esm/impl/parser.js
var ParseOptions;
(function(ParseOptions2) {
    ParseOptions2.DEFAULT = {
        allowTrailingComma: false
    };
})(ParseOptions || (ParseOptions = {}));
function parse(text, errors = [], options = ParseOptions.DEFAULT) {
    let currentProperty = null;
    let currentParent = [];
    const previousParents = [];
    function onValue(value1) {
        if (Array.isArray(currentParent)) {
            currentParent.push(value1);
        } else if (currentProperty !== null) {
            currentParent[currentProperty] = value1;
        }
    }
    const visitor = {
        onObjectBegin: ()=>{
            const object = {};
            onValue(object);
            previousParents.push(currentParent);
            currentParent = object;
            currentProperty = null;
        },
        onObjectProperty: (name)=>{
            currentProperty = name;
        },
        onObjectEnd: ()=>{
            currentParent = previousParents.pop();
        },
        onArrayBegin: ()=>{
            const array = [];
            onValue(array);
            previousParents.push(currentParent);
            currentParent = array;
            currentProperty = null;
        },
        onArrayEnd: ()=>{
            currentParent = previousParents.pop();
        },
        onLiteralValue: onValue,
        onError: (error, offset, length)=>{
            errors.push({
                error,
                offset,
                length
            });
        }
    };
    visit(text, visitor, options);
    return currentParent[0];
}
function getNodePath(node) {
    if (!node.parent || !node.parent.children) {
        return [];
    }
    const path5 = getNodePath(node.parent);
    if (node.parent.type === "property") {
        const key = node.parent.children[0].value;
        path5.push(key);
    } else if (node.parent.type === "array") {
        const index = node.parent.children.indexOf(node);
        if (index !== -1) {
            path5.push(index);
        }
    }
    return path5;
}
function getNodeValue(node) {
    switch(node.type){
        case "array":
            return node.children.map(getNodeValue);
        case "object":
            const obj = /* @__PURE__ */ Object.create(null);
            for (let prop of node.children){
                const valueNode = prop.children[1];
                if (valueNode) {
                    obj[prop.children[0].value] = getNodeValue(valueNode);
                }
            }
            return obj;
        case "null":
        case "string":
        case "number":
        case "boolean":
            return node.value;
        default:
            return void 0;
    }
}
function contains(node, offset, includeRightBound = false) {
    return offset >= node.offset && offset < node.offset + node.length || includeRightBound && offset === node.offset + node.length;
}
function findNodeAtOffset(node, offset, includeRightBound = false) {
    if (contains(node, offset, includeRightBound)) {
        const children = node.children;
        if (Array.isArray(children)) {
            for(let i = 0; i < children.length && children[i].offset <= offset; i++){
                const item = findNodeAtOffset(children[i], offset, includeRightBound);
                if (item) {
                    return item;
                }
            }
        }
        return node;
    }
    return void 0;
}
function visit(text, visitor, options = ParseOptions.DEFAULT) {
    const _scanner = createScanner(text, false);
    const _jsonPath = [];
    let suppressedCallbacks = 0;
    function toNoArgVisit(visitFunction) {
        return visitFunction ? ()=>suppressedCallbacks === 0 && visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : ()=>true;
    }
    function toOneArgVisit(visitFunction) {
        return visitFunction ? (arg)=>suppressedCallbacks === 0 && visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : ()=>true;
    }
    function toOneArgVisitWithPath(visitFunction) {
        return visitFunction ? (arg)=>suppressedCallbacks === 0 && visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), ()=>_jsonPath.slice()) : ()=>true;
    }
    function toBeginVisit(visitFunction) {
        return visitFunction ? ()=>{
            if (suppressedCallbacks > 0) {
                suppressedCallbacks++;
            } else {
                let cbReturn = visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), ()=>_jsonPath.slice());
                if (cbReturn === false) {
                    suppressedCallbacks = 1;
                }
            }
        } : ()=>true;
    }
    function toEndVisit(visitFunction) {
        return visitFunction ? ()=>{
            if (suppressedCallbacks > 0) {
                suppressedCallbacks--;
            }
            if (suppressedCallbacks === 0) {
                visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter());
            }
        } : ()=>true;
    }
    const onObjectBegin = toBeginVisit(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toEndVisit(visitor.onObjectEnd), onArrayBegin = toBeginVisit(visitor.onArrayBegin), onArrayEnd = toEndVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);
    const disallowComments = options && options.disallowComments;
    const allowTrailingComma = options && options.allowTrailingComma;
    function scanNext() {
        while(true){
            const token = _scanner.scan();
            switch(_scanner.getTokenError()){
                case 4:
                    handleError(14);
                    break;
                case 5:
                    handleError(15);
                    break;
                case 3:
                    handleError(13);
                    break;
                case 1:
                    if (!disallowComments) {
                        handleError(11);
                    }
                    break;
                case 2:
                    handleError(12);
                    break;
                case 6:
                    handleError(16);
                    break;
            }
            switch(token){
                case 12:
                case 13:
                    if (disallowComments) {
                        handleError(10);
                    } else {
                        onComment();
                    }
                    break;
                case 16:
                    handleError(1);
                    break;
                case 15:
                case 14:
                    break;
                default:
                    return token;
            }
        }
    }
    function handleError(error, skipUntilAfter = [], skipUntil = []) {
        onError(error);
        if (skipUntilAfter.length + skipUntil.length > 0) {
            let token = _scanner.getToken();
            while(token !== 17){
                if (skipUntilAfter.indexOf(token) !== -1) {
                    scanNext();
                    break;
                } else if (skipUntil.indexOf(token) !== -1) {
                    break;
                }
                token = scanNext();
            }
        }
    }
    function parseString(isValue) {
        const value1 = _scanner.getTokenValue();
        if (isValue) {
            onLiteralValue(value1);
        } else {
            onObjectProperty(value1);
            _jsonPath.push(value1);
        }
        scanNext();
        return true;
    }
    function parseLiteral() {
        switch(_scanner.getToken()){
            case 11:
                const tokenValue = _scanner.getTokenValue();
                let value1 = Number(tokenValue);
                if (isNaN(value1)) {
                    handleError(2);
                    value1 = 0;
                }
                onLiteralValue(value1);
                break;
            case 7:
                onLiteralValue(null);
                break;
            case 8:
                onLiteralValue(true);
                break;
            case 9:
                onLiteralValue(false);
                break;
            default:
                return false;
        }
        scanNext();
        return true;
    }
    function parseProperty() {
        if (_scanner.getToken() !== 10) {
            handleError(3, [], [
                2,
                5
            ]);
            return false;
        }
        parseString(false);
        if (_scanner.getToken() === 6) {
            onSeparator(":");
            scanNext();
            if (!parseValue()) {
                handleError(4, [], [
                    2,
                    5
                ]);
            }
        } else {
            handleError(5, [], [
                2,
                5
            ]);
        }
        _jsonPath.pop();
        return true;
    }
    function parseObject() {
        onObjectBegin();
        scanNext();
        let needsComma = false;
        while(_scanner.getToken() !== 2 && _scanner.getToken() !== 17){
            if (_scanner.getToken() === 5) {
                if (!needsComma) {
                    handleError(4, [], []);
                }
                onSeparator(",");
                scanNext();
                if (_scanner.getToken() === 2 && allowTrailingComma) {
                    break;
                }
            } else if (needsComma) {
                handleError(6, [], []);
            }
            if (!parseProperty()) {
                handleError(4, [], [
                    2,
                    5
                ]);
            }
            needsComma = true;
        }
        onObjectEnd();
        if (_scanner.getToken() !== 2) {
            handleError(7, [
                2
            ], []);
        } else {
            scanNext();
        }
        return true;
    }
    function parseArray() {
        onArrayBegin();
        scanNext();
        let isFirstElement = true;
        let needsComma = false;
        while(_scanner.getToken() !== 4 && _scanner.getToken() !== 17){
            if (_scanner.getToken() === 5) {
                if (!needsComma) {
                    handleError(4, [], []);
                }
                onSeparator(",");
                scanNext();
                if (_scanner.getToken() === 4 && allowTrailingComma) {
                    break;
                }
            } else if (needsComma) {
                handleError(6, [], []);
            }
            if (isFirstElement) {
                _jsonPath.push(0);
                isFirstElement = false;
            } else {
                _jsonPath[_jsonPath.length - 1]++;
            }
            if (!parseValue()) {
                handleError(4, [], [
                    4,
                    5
                ]);
            }
            needsComma = true;
        }
        onArrayEnd();
        if (!isFirstElement) {
            _jsonPath.pop();
        }
        if (_scanner.getToken() !== 4) {
            handleError(8, [
                4
            ], []);
        } else {
            scanNext();
        }
        return true;
    }
    function parseValue() {
        switch(_scanner.getToken()){
            case 3:
                return parseArray();
            case 1:
                return parseObject();
            case 10:
                return parseString(true);
            default:
                return parseLiteral();
        }
    }
    scanNext();
    if (_scanner.getToken() === 17) {
        if (options.allowEmptyContent) {
            return true;
        }
        handleError(4, [], []);
        return false;
    }
    if (!parseValue()) {
        handleError(4, [], []);
        return false;
    }
    if (_scanner.getToken() !== 17) {
        handleError(9, [], []);
    }
    return true;
}
// ../../node_modules/jsonc-parser/lib/esm/main.js
var createScanner2 = createScanner;
var ScanError;
(function(ScanError2) {
    ScanError2[ScanError2["None"] = 0] = "None";
    ScanError2[ScanError2["UnexpectedEndOfComment"] = 1] = "UnexpectedEndOfComment";
    ScanError2[ScanError2["UnexpectedEndOfString"] = 2] = "UnexpectedEndOfString";
    ScanError2[ScanError2["UnexpectedEndOfNumber"] = 3] = "UnexpectedEndOfNumber";
    ScanError2[ScanError2["InvalidUnicode"] = 4] = "InvalidUnicode";
    ScanError2[ScanError2["InvalidEscapeCharacter"] = 5] = "InvalidEscapeCharacter";
    ScanError2[ScanError2["InvalidCharacter"] = 6] = "InvalidCharacter";
})(ScanError || (ScanError = {}));
var SyntaxKind;
(function(SyntaxKind2) {
    SyntaxKind2[SyntaxKind2["OpenBraceToken"] = 1] = "OpenBraceToken";
    SyntaxKind2[SyntaxKind2["CloseBraceToken"] = 2] = "CloseBraceToken";
    SyntaxKind2[SyntaxKind2["OpenBracketToken"] = 3] = "OpenBracketToken";
    SyntaxKind2[SyntaxKind2["CloseBracketToken"] = 4] = "CloseBracketToken";
    SyntaxKind2[SyntaxKind2["CommaToken"] = 5] = "CommaToken";
    SyntaxKind2[SyntaxKind2["ColonToken"] = 6] = "ColonToken";
    SyntaxKind2[SyntaxKind2["NullKeyword"] = 7] = "NullKeyword";
    SyntaxKind2[SyntaxKind2["TrueKeyword"] = 8] = "TrueKeyword";
    SyntaxKind2[SyntaxKind2["FalseKeyword"] = 9] = "FalseKeyword";
    SyntaxKind2[SyntaxKind2["StringLiteral"] = 10] = "StringLiteral";
    SyntaxKind2[SyntaxKind2["NumericLiteral"] = 11] = "NumericLiteral";
    SyntaxKind2[SyntaxKind2["LineCommentTrivia"] = 12] = "LineCommentTrivia";
    SyntaxKind2[SyntaxKind2["BlockCommentTrivia"] = 13] = "BlockCommentTrivia";
    SyntaxKind2[SyntaxKind2["LineBreakTrivia"] = 14] = "LineBreakTrivia";
    SyntaxKind2[SyntaxKind2["Trivia"] = 15] = "Trivia";
    SyntaxKind2[SyntaxKind2["Unknown"] = 16] = "Unknown";
    SyntaxKind2[SyntaxKind2["EOF"] = 17] = "EOF";
})(SyntaxKind || (SyntaxKind = {}));
var parse2 = parse;
var findNodeAtOffset2 = findNodeAtOffset;
var getNodePath2 = getNodePath;
var getNodeValue2 = getNodeValue;
var ParseErrorCode;
(function(ParseErrorCode2) {
    ParseErrorCode2[ParseErrorCode2["InvalidSymbol"] = 1] = "InvalidSymbol";
    ParseErrorCode2[ParseErrorCode2["InvalidNumberFormat"] = 2] = "InvalidNumberFormat";
    ParseErrorCode2[ParseErrorCode2["PropertyNameExpected"] = 3] = "PropertyNameExpected";
    ParseErrorCode2[ParseErrorCode2["ValueExpected"] = 4] = "ValueExpected";
    ParseErrorCode2[ParseErrorCode2["ColonExpected"] = 5] = "ColonExpected";
    ParseErrorCode2[ParseErrorCode2["CommaExpected"] = 6] = "CommaExpected";
    ParseErrorCode2[ParseErrorCode2["CloseBraceExpected"] = 7] = "CloseBraceExpected";
    ParseErrorCode2[ParseErrorCode2["CloseBracketExpected"] = 8] = "CloseBracketExpected";
    ParseErrorCode2[ParseErrorCode2["EndOfFileExpected"] = 9] = "EndOfFileExpected";
    ParseErrorCode2[ParseErrorCode2["InvalidCommentToken"] = 10] = "InvalidCommentToken";
    ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfComment"] = 11] = "UnexpectedEndOfComment";
    ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfString"] = 12] = "UnexpectedEndOfString";
    ParseErrorCode2[ParseErrorCode2["UnexpectedEndOfNumber"] = 13] = "UnexpectedEndOfNumber";
    ParseErrorCode2[ParseErrorCode2["InvalidUnicode"] = 14] = "InvalidUnicode";
    ParseErrorCode2[ParseErrorCode2["InvalidEscapeCharacter"] = 15] = "InvalidEscapeCharacter";
    ParseErrorCode2[ParseErrorCode2["InvalidCharacter"] = 16] = "InvalidCharacter";
})(ParseErrorCode || (ParseErrorCode = {}));
// ../../node_modules/vscode-uri/lib/esm/index.mjs
var LIB;
(()=>{
    "use strict";
    var t1 = {
        975: (t2)=>{
            function e2(t3) {
                if ("string" != typeof t3) throw new TypeError("Path must be a string. Received " + JSON.stringify(t3));
            }
            function r2(t3, e3) {
                for(var r3, n3 = "", i2 = 0, o2 = -1, s2 = 0, h2 = 0; h2 <= t3.length; ++h2){
                    if (h2 < t3.length) r3 = t3.charCodeAt(h2);
                    else {
                        if (47 === r3) break;
                        r3 = 47;
                    }
                    if (47 === r3) {
                        if (o2 === h2 - 1 || 1 === s2) ;
                        else if (o2 !== h2 - 1 && 2 === s2) {
                            if (n3.length < 2 || 2 !== i2 || 46 !== n3.charCodeAt(n3.length - 1) || 46 !== n3.charCodeAt(n3.length - 2)) {
                                if (n3.length > 2) {
                                    var a3 = n3.lastIndexOf("/");
                                    if (a3 !== n3.length - 1) {
                                        -1 === a3 ? (n3 = "", i2 = 0) : i2 = (n3 = n3.slice(0, a3)).length - 1 - n3.lastIndexOf("/"), o2 = h2, s2 = 0;
                                        continue;
                                    }
                                } else if (2 === n3.length || 1 === n3.length) {
                                    n3 = "", i2 = 0, o2 = h2, s2 = 0;
                                    continue;
                                }
                            }
                            e3 && (n3.length > 0 ? n3 += "/.." : n3 = "..", i2 = 2);
                        } else n3.length > 0 ? n3 += "/" + t3.slice(o2 + 1, h2) : n3 = t3.slice(o2 + 1, h2), i2 = h2 - o2 - 1;
                        o2 = h2, s2 = 0;
                    } else 46 === r3 && -1 !== s2 ? ++s2 : s2 = -1;
                }
                return n3;
            }
            var n2 = {
                resolve: function() {
                    for(var t3, n3 = "", i2 = false, o2 = arguments.length - 1; o2 >= -1 && !i2; o2--){
                        var s2;
                        o2 >= 0 ? s2 = arguments[o2] : (void 0 === t3 && (t3 = process.cwd()), s2 = t3), e2(s2), 0 !== s2.length && (n3 = s2 + "/" + n3, i2 = 47 === s2.charCodeAt(0));
                    }
                    return n3 = r2(n3, !i2), i2 ? n3.length > 0 ? "/" + n3 : "/" : n3.length > 0 ? n3 : ".";
                },
                normalize: function(t3) {
                    if (e2(t3), 0 === t3.length) return ".";
                    var n3 = 47 === t3.charCodeAt(0), i2 = 47 === t3.charCodeAt(t3.length - 1);
                    return 0 !== (t3 = r2(t3, !n3)).length || n3 || (t3 = "."), t3.length > 0 && i2 && (t3 += "/"), n3 ? "/" + t3 : t3;
                },
                isAbsolute: function(t3) {
                    return e2(t3), t3.length > 0 && 47 === t3.charCodeAt(0);
                },
                join: function() {
                    if (0 === arguments.length) return ".";
                    for(var t3, r3 = 0; r3 < arguments.length; ++r3){
                        var i2 = arguments[r3];
                        e2(i2), i2.length > 0 && (void 0 === t3 ? t3 = i2 : t3 += "/" + i2);
                    }
                    return void 0 === t3 ? "." : n2.normalize(t3);
                },
                relative: function(t3, r3) {
                    if (e2(t3), e2(r3), t3 === r3) return "";
                    if ((t3 = n2.resolve(t3)) === (r3 = n2.resolve(r3))) return "";
                    for(var i2 = 1; i2 < t3.length && 47 === t3.charCodeAt(i2); ++i2);
                    for(var o2 = t3.length, s2 = o2 - i2, h2 = 1; h2 < r3.length && 47 === r3.charCodeAt(h2); ++h2);
                    for(var a3 = r3.length - h2, c2 = s2 < a3 ? s2 : a3, f3 = -1, u2 = 0; u2 <= c2; ++u2){
                        if (u2 === c2) {
                            if (a3 > c2) {
                                if (47 === r3.charCodeAt(h2 + u2)) return r3.slice(h2 + u2 + 1);
                                if (0 === u2) return r3.slice(h2 + u2);
                            } else s2 > c2 && (47 === t3.charCodeAt(i2 + u2) ? f3 = u2 : 0 === u2 && (f3 = 0));
                            break;
                        }
                        var l2 = t3.charCodeAt(i2 + u2);
                        if (l2 !== r3.charCodeAt(h2 + u2)) break;
                        47 === l2 && (f3 = u2);
                    }
                    var g2 = "";
                    for(u2 = i2 + f3 + 1; u2 <= o2; ++u2)u2 !== o2 && 47 !== t3.charCodeAt(u2) || (0 === g2.length ? g2 += ".." : g2 += "/..");
                    return g2.length > 0 ? g2 + r3.slice(h2 + f3) : (h2 += f3, 47 === r3.charCodeAt(h2) && ++h2, r3.slice(h2));
                },
                _makeLong: function(t3) {
                    return t3;
                },
                dirname: function(t3) {
                    if (e2(t3), 0 === t3.length) return ".";
                    for(var r3 = t3.charCodeAt(0), n3 = 47 === r3, i2 = -1, o2 = true, s2 = t3.length - 1; s2 >= 1; --s2)if (47 === (r3 = t3.charCodeAt(s2))) {
                        if (!o2) {
                            i2 = s2;
                            break;
                        }
                    } else o2 = false;
                    return -1 === i2 ? n3 ? "/" : "." : n3 && 1 === i2 ? "//" : t3.slice(0, i2);
                },
                basename: function(t3, r3) {
                    if (void 0 !== r3 && "string" != typeof r3) throw new TypeError('"ext" argument must be a string');
                    e2(t3);
                    var n3, i2 = 0, o2 = -1, s2 = true;
                    if (void 0 !== r3 && r3.length > 0 && r3.length <= t3.length) {
                        if (r3.length === t3.length && r3 === t3) return "";
                        var h2 = r3.length - 1, a3 = -1;
                        for(n3 = t3.length - 1; n3 >= 0; --n3){
                            var c2 = t3.charCodeAt(n3);
                            if (47 === c2) {
                                if (!s2) {
                                    i2 = n3 + 1;
                                    break;
                                }
                            } else -1 === a3 && (s2 = false, a3 = n3 + 1), h2 >= 0 && (c2 === r3.charCodeAt(h2) ? -1 == --h2 && (o2 = n3) : (h2 = -1, o2 = a3));
                        }
                        return i2 === o2 ? o2 = a3 : -1 === o2 && (o2 = t3.length), t3.slice(i2, o2);
                    }
                    for(n3 = t3.length - 1; n3 >= 0; --n3)if (47 === t3.charCodeAt(n3)) {
                        if (!s2) {
                            i2 = n3 + 1;
                            break;
                        }
                    } else -1 === o2 && (s2 = false, o2 = n3 + 1);
                    return -1 === o2 ? "" : t3.slice(i2, o2);
                },
                extname: function(t3) {
                    e2(t3);
                    for(var r3 = -1, n3 = 0, i2 = -1, o2 = true, s2 = 0, h2 = t3.length - 1; h2 >= 0; --h2){
                        var a3 = t3.charCodeAt(h2);
                        if (47 !== a3) -1 === i2 && (o2 = false, i2 = h2 + 1), 46 === a3 ? -1 === r3 ? r3 = h2 : 1 !== s2 && (s2 = 1) : -1 !== r3 && (s2 = -1);
                        else if (!o2) {
                            n3 = h2 + 1;
                            break;
                        }
                    }
                    return -1 === r3 || -1 === i2 || 0 === s2 || 1 === s2 && r3 === i2 - 1 && r3 === n3 + 1 ? "" : t3.slice(r3, i2);
                },
                format: function(t3) {
                    if (null === t3 || "object" != typeof t3) throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof t3);
                    return function(t4, e3) {
                        var r3 = e3.dir || e3.root, n3 = e3.base || (e3.name || "") + (e3.ext || "");
                        return r3 ? r3 === e3.root ? r3 + n3 : r3 + "/" + n3 : n3;
                    }(0, t3);
                },
                parse: function(t3) {
                    e2(t3);
                    var r3 = {
                        root: "",
                        dir: "",
                        base: "",
                        ext: "",
                        name: ""
                    };
                    if (0 === t3.length) return r3;
                    var n3, i2 = t3.charCodeAt(0), o2 = 47 === i2;
                    o2 ? (r3.root = "/", n3 = 1) : n3 = 0;
                    for(var s2 = -1, h2 = 0, a3 = -1, c2 = true, f3 = t3.length - 1, u2 = 0; f3 >= n3; --f3)if (47 !== (i2 = t3.charCodeAt(f3))) -1 === a3 && (c2 = false, a3 = f3 + 1), 46 === i2 ? -1 === s2 ? s2 = f3 : 1 !== u2 && (u2 = 1) : -1 !== s2 && (u2 = -1);
                    else if (!c2) {
                        h2 = f3 + 1;
                        break;
                    }
                    return -1 === s2 || -1 === a3 || 0 === u2 || 1 === u2 && s2 === a3 - 1 && s2 === h2 + 1 ? -1 !== a3 && (r3.base = r3.name = 0 === h2 && o2 ? t3.slice(1, a3) : t3.slice(h2, a3)) : (0 === h2 && o2 ? (r3.name = t3.slice(1, s2), r3.base = t3.slice(1, a3)) : (r3.name = t3.slice(h2, s2), r3.base = t3.slice(h2, a3)), r3.ext = t3.slice(s2, a3)), h2 > 0 ? r3.dir = t3.slice(0, h2 - 1) : o2 && (r3.dir = "/"), r3;
                },
                sep: "/",
                delimiter: ":",
                win32: null,
                posix: null
            };
            n2.posix = n2, t2.exports = n2;
        }
    }, e = {};
    function r(n2) {
        var i2 = e[n2];
        if (void 0 !== i2) return i2.exports;
        var o2 = e[n2] = {
            exports: {}
        };
        return t1[n2](o2, o2.exports, r), o2.exports;
    }
    r.d = (t2, e2)=>{
        for(var n2 in e2)r.o(e2, n2) && !r.o(t2, n2) && Object.defineProperty(t2, n2, {
            enumerable: true,
            get: e2[n2]
        });
    }, r.o = (t2, e2)=>Object.prototype.hasOwnProperty.call(t2, e2), r.r = (t2)=>{
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, {
            value: "Module"
        }), Object.defineProperty(t2, "__esModule", {
            value: true
        });
    };
    var n = {};
    let i;
    if (r.r(n), r.d(n, {
        URI: ()=>l,
        Utils: ()=>I
    }), "object" == typeof process) i = "win32" === process.platform;
    else if ("object" == typeof navigator) {
        let t2 = navigator.userAgent;
        i = t2.indexOf("Windows") >= 0;
    }
    const o = /^\w[\w\d+.-]*$/, s = /^\//, h = /^\/\//;
    function a2(t2, e2) {
        if (!t2.scheme && e2) throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${t2.authority}", path: "${t2.path}", query: "${t2.query}", fragment: "${t2.fragment}"}`);
        if (t2.scheme && !o.test(t2.scheme)) throw new Error("[UriError]: Scheme contains illegal characters.");
        if (t2.path) {
            if (t2.authority) {
                if (!s.test(t2.path)) throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character');
            } else if (h.test(t2.path)) throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")');
        }
    }
    const c = "", f2 = "/", u = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
    class l {
        static isUri(t2) {
            return t2 instanceof l || !!t2 && "string" == typeof t2.authority && "string" == typeof t2.fragment && "string" == typeof t2.path && "string" == typeof t2.query && "string" == typeof t2.scheme && "string" == typeof t2.fsPath && "function" == typeof t2.with && "function" == typeof t2.toString;
        }
        get fsPath() {
            return v(this, false);
        }
        with(t2) {
            if (!t2) return this;
            let { scheme: e2, authority: r2, path: n2, query: i2, fragment: o2 } = t2;
            return void 0 === e2 ? e2 = this.scheme : null === e2 && (e2 = c), void 0 === r2 ? r2 = this.authority : null === r2 && (r2 = c), void 0 === n2 ? n2 = this.path : null === n2 && (n2 = c), void 0 === i2 ? i2 = this.query : null === i2 && (i2 = c), void 0 === o2 ? o2 = this.fragment : null === o2 && (o2 = c), e2 === this.scheme && r2 === this.authority && n2 === this.path && i2 === this.query && o2 === this.fragment ? this : new d(e2, r2, n2, i2, o2);
        }
        static parse(t2, e2 = false) {
            const r2 = u.exec(t2);
            return r2 ? new d(r2[2] || c, w(r2[4] || c), w(r2[5] || c), w(r2[7] || c), w(r2[9] || c), e2) : new d(c, c, c, c, c);
        }
        static file(t2) {
            let e2 = c;
            if (i && (t2 = t2.replace(/\\/g, f2)), t2[0] === f2 && t2[1] === f2) {
                const r2 = t2.indexOf(f2, 2);
                -1 === r2 ? (e2 = t2.substring(2), t2 = f2) : (e2 = t2.substring(2, r2), t2 = t2.substring(r2) || f2);
            }
            return new d("file", e2, t2, c, c);
        }
        static from(t2) {
            const e2 = new d(t2.scheme, t2.authority, t2.path, t2.query, t2.fragment);
            return a2(e2, true), e2;
        }
        toString(t2 = false) {
            return b(this, t2);
        }
        toJSON() {
            return this;
        }
        static revive(t2) {
            if (t2) {
                if (t2 instanceof l) return t2;
                {
                    const e2 = new d(t2);
                    return e2._formatted = t2.external, e2._fsPath = t2._sep === g ? t2.fsPath : null, e2;
                }
            }
            return t2;
        }
        constructor(t2, e2, r2, n2, i2, o2 = false){
            __publicField(this, "scheme");
            __publicField(this, "authority");
            __publicField(this, "path");
            __publicField(this, "query");
            __publicField(this, "fragment");
            "object" == typeof t2 ? (this.scheme = t2.scheme || c, this.authority = t2.authority || c, this.path = t2.path || c, this.query = t2.query || c, this.fragment = t2.fragment || c) : (this.scheme = /* @__PURE__ */ function(t3, e3) {
                return t3 || e3 ? t3 : "file";
            }(t2, o2), this.authority = e2 || c, this.path = function(t3, e3) {
                switch(t3){
                    case "https":
                    case "http":
                    case "file":
                        e3 ? e3[0] !== f2 && (e3 = f2 + e3) : e3 = f2;
                }
                return e3;
            }(this.scheme, r2 || c), this.query = n2 || c, this.fragment = i2 || c, a2(this, o2));
        }
    }
    const g = i ? 1 : void 0;
    class d extends l {
        get fsPath() {
            return this._fsPath || (this._fsPath = v(this, false)), this._fsPath;
        }
        toString(t2 = false) {
            return t2 ? b(this, true) : (this._formatted || (this._formatted = b(this, false)), this._formatted);
        }
        toJSON() {
            const t2 = {
                $mid: 1
            };
            return this._fsPath && (t2.fsPath = this._fsPath, t2._sep = g), this._formatted && (t2.external = this._formatted), this.path && (t2.path = this.path), this.scheme && (t2.scheme = this.scheme), this.authority && (t2.authority = this.authority), this.query && (t2.query = this.query), this.fragment && (t2.fragment = this.fragment), t2;
        }
        constructor(){
            super(...arguments);
            __publicField(this, "_formatted", null);
            __publicField(this, "_fsPath", null);
        }
    }
    const p = {
        58: "%3A",
        47: "%2F",
        63: "%3F",
        35: "%23",
        91: "%5B",
        93: "%5D",
        64: "%40",
        33: "%21",
        36: "%24",
        38: "%26",
        39: "%27",
        40: "%28",
        41: "%29",
        42: "%2A",
        43: "%2B",
        44: "%2C",
        59: "%3B",
        61: "%3D",
        32: "%20"
    };
    function m(t2, e2, r2) {
        let n2, i2 = -1;
        for(let o2 = 0; o2 < t2.length; o2++){
            const s2 = t2.charCodeAt(o2);
            if (s2 >= 97 && s2 <= 122 || s2 >= 65 && s2 <= 90 || s2 >= 48 && s2 <= 57 || 45 === s2 || 46 === s2 || 95 === s2 || 126 === s2 || e2 && 47 === s2 || r2 && 91 === s2 || r2 && 93 === s2 || r2 && 58 === s2) -1 !== i2 && (n2 += encodeURIComponent(t2.substring(i2, o2)), i2 = -1), void 0 !== n2 && (n2 += t2.charAt(o2));
            else {
                void 0 === n2 && (n2 = t2.substr(0, o2));
                const e3 = p[s2];
                void 0 !== e3 ? (-1 !== i2 && (n2 += encodeURIComponent(t2.substring(i2, o2)), i2 = -1), n2 += e3) : -1 === i2 && (i2 = o2);
            }
        }
        return -1 !== i2 && (n2 += encodeURIComponent(t2.substring(i2))), void 0 !== n2 ? n2 : t2;
    }
    function y(t2) {
        let e2;
        for(let r2 = 0; r2 < t2.length; r2++){
            const n2 = t2.charCodeAt(r2);
            35 === n2 || 63 === n2 ? (void 0 === e2 && (e2 = t2.substr(0, r2)), e2 += p[n2]) : void 0 !== e2 && (e2 += t2[r2]);
        }
        return void 0 !== e2 ? e2 : t2;
    }
    function v(t2, e2) {
        let r2;
        return r2 = t2.authority && t2.path.length > 1 && "file" === t2.scheme ? `//${t2.authority}${t2.path}` : 47 === t2.path.charCodeAt(0) && (t2.path.charCodeAt(1) >= 65 && t2.path.charCodeAt(1) <= 90 || t2.path.charCodeAt(1) >= 97 && t2.path.charCodeAt(1) <= 122) && 58 === t2.path.charCodeAt(2) ? e2 ? t2.path.substr(1) : t2.path[1].toLowerCase() + t2.path.substr(2) : t2.path, i && (r2 = r2.replace(/\//g, "\\")), r2;
    }
    function b(t2, e2) {
        const r2 = e2 ? y : m;
        let n2 = "", { scheme: i2, authority: o2, path: s2, query: h2, fragment: a3 } = t2;
        if (i2 && (n2 += i2, n2 += ":"), (o2 || "file" === i2) && (n2 += f2, n2 += f2), o2) {
            let t3 = o2.indexOf("@");
            if (-1 !== t3) {
                const e3 = o2.substr(0, t3);
                o2 = o2.substr(t3 + 1), t3 = e3.lastIndexOf(":"), -1 === t3 ? n2 += r2(e3, false, false) : (n2 += r2(e3.substr(0, t3), false, false), n2 += ":", n2 += r2(e3.substr(t3 + 1), false, true)), n2 += "@";
            }
            o2 = o2.toLowerCase(), t3 = o2.lastIndexOf(":"), -1 === t3 ? n2 += r2(o2, false, true) : (n2 += r2(o2.substr(0, t3), false, true), n2 += o2.substr(t3));
        }
        if (s2) {
            if (s2.length >= 3 && 47 === s2.charCodeAt(0) && 58 === s2.charCodeAt(2)) {
                const t3 = s2.charCodeAt(1);
                t3 >= 65 && t3 <= 90 && (s2 = `/${String.fromCharCode(t3 + 32)}:${s2.substr(3)}`);
            } else if (s2.length >= 2 && 58 === s2.charCodeAt(1)) {
                const t3 = s2.charCodeAt(0);
                t3 >= 65 && t3 <= 90 && (s2 = `${String.fromCharCode(t3 + 32)}:${s2.substr(2)}`);
            }
            n2 += r2(s2, true, false);
        }
        return h2 && (n2 += "?", n2 += r2(h2, false, false)), a3 && (n2 += "#", n2 += e2 ? a3 : m(a3, false, false)), n2;
    }
    function C(t2) {
        try {
            return decodeURIComponent(t2);
        } catch  {
            return t2.length > 3 ? t2.substr(0, 3) + C(t2.substr(3)) : t2;
        }
    }
    const A2 = /(%[0-9A-Za-z][0-9A-Za-z])+/g;
    function w(t2) {
        return t2.match(A2) ? t2.replace(A2, (t3)=>C(t3)) : t2;
    }
    var x = r(975);
    const P = x.posix || x, _2 = "/";
    var I;
    !function(t2) {
        t2.joinPath = function(t3, ...e2) {
            return t3.with({
                path: P.join(t3.path, ...e2)
            });
        }, t2.resolvePath = function(t3, ...e2) {
            let r2 = t3.path, n2 = false;
            r2[0] !== _2 && (r2 = _2 + r2, n2 = true);
            let i2 = P.resolve(r2, ...e2);
            return n2 && i2[0] === _2 && !t3.authority && (i2 = i2.substring(1)), t3.with({
                path: i2
            });
        }, t2.dirname = function(t3) {
            if (0 === t3.path.length || t3.path === _2) return t3;
            let e2 = P.dirname(t3.path);
            return 1 === e2.length && 46 === e2.charCodeAt(0) && (e2 = ""), t3.with({
                path: e2
            });
        }, t2.basename = function(t3) {
            return P.basename(t3.path);
        }, t2.extname = function(t3) {
            return P.extname(t3.path);
        };
    }(I || (I = {})), LIB = n;
})();
var { URI: yaml_service_URI, Utils: yaml_service_Utils } = LIB;
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/strings.js
function startsWith(haystack, needle) {
    if (haystack.length < needle.length) {
        return false;
    }
    for(var i = 0; i < needle.length; i++){
        if (haystack[i] !== needle[i]) {
            return false;
        }
    }
    return true;
}
function endsWith(haystack, needle) {
    var diff = haystack.length - needle.length;
    if (diff > 0) {
        return haystack.lastIndexOf(needle) === diff;
    } else if (diff === 0) {
        return haystack === needle;
    } else {
        return false;
    }
}
function extendedRegExp(pattern) {
    if (startsWith(pattern, "(?i)")) {
        return new RegExp(pattern.substring(4), "i");
    } else {
        return new RegExp(pattern);
    }
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/objects.js
function equals(one, other) {
    if (one === other) {
        return true;
    }
    if (one === null || one === void 0 || other === null || other === void 0) {
        return false;
    }
    if (typeof one !== typeof other) {
        return false;
    }
    if (typeof one !== "object") {
        return false;
    }
    if (Array.isArray(one) !== Array.isArray(other)) {
        return false;
    }
    var i, key;
    if (Array.isArray(one)) {
        if (one.length !== other.length) {
            return false;
        }
        for(i = 0; i < one.length; i++){
            if (!equals(one[i], other[i])) {
                return false;
            }
        }
    } else {
        var oneKeys = [];
        for(key in one){
            oneKeys.push(key);
        }
        oneKeys.sort();
        var otherKeys = [];
        for(key in other){
            otherKeys.push(key);
        }
        otherKeys.sort();
        if (!equals(oneKeys, otherKeys)) {
            return false;
        }
        for(i = 0; i < oneKeys.length; i++){
            if (!equals(one[oneKeys[i]], other[oneKeys[i]])) {
                return false;
            }
        }
    }
    return true;
}
function isNumber(val) {
    return typeof val === "number";
}
function isDefined(val) {
    return typeof val !== "undefined";
}
function isBoolean(val) {
    return typeof val === "boolean";
}
function isString(val) {
    return typeof val === "string";
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/jsonLanguageTypes.js
init_main();
// ../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js
var FullTextDocument2 = class _FullTextDocument {
    get uri() {
        return this._uri;
    }
    get languageId() {
        return this._languageId;
    }
    get version() {
        return this._version;
    }
    getText(range) {
        if (range) {
            const start = this.offsetAt(range.start);
            const end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    }
    update(changes, version) {
        for (const change of changes){
            if (_FullTextDocument.isIncremental(change)) {
                const range = getWellformedRange(change.range);
                const startOffset = this.offsetAt(range.start);
                const endOffset = this.offsetAt(range.end);
                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
                const startLine = Math.max(range.start.line, 0);
                const endLine = Math.max(range.end.line, 0);
                let lineOffsets = this._lineOffsets;
                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
                if (endLine - startLine === addedLineOffsets.length) {
                    for(let i = 0, len = addedLineOffsets.length; i < len; i++){
                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                    }
                } else {
                    if (addedLineOffsets.length < 1e4) {
                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);
                    } else {
                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                    }
                }
                const diff = change.text.length - (endOffset - startOffset);
                if (diff !== 0) {
                    for(let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++){
                        lineOffsets[i] = lineOffsets[i] + diff;
                    }
                }
            } else if (_FullTextDocument.isFull(change)) {
                this._content = change.text;
                this._lineOffsets = void 0;
            } else {
                throw new Error("Unknown change event received");
            }
        }
        this._version = version;
    }
    getLineOffsets() {
        if (this._lineOffsets === void 0) {
            this._lineOffsets = computeLineOffsets(this._content, true);
        }
        return this._lineOffsets;
    }
    positionAt(offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        const lineOffsets = this.getLineOffsets();
        let low = 0, high = lineOffsets.length;
        if (high === 0) {
            return {
                line: 0,
                character: offset
            };
        }
        while(low < high){
            const mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        const line = low - 1;
        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);
        return {
            line,
            character: offset - lineOffsets[line]
        };
    }
    offsetAt(position) {
        const lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        } else if (position.line < 0) {
            return 0;
        }
        const lineOffset = lineOffsets[position.line];
        if (position.character <= 0) {
            return lineOffset;
        }
        const nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this._content.length;
        const offset = Math.min(lineOffset + position.character, nextLineOffset);
        return this.ensureBeforeEOL(offset, lineOffset);
    }
    ensureBeforeEOL(offset, lineOffset) {
        while(offset > lineOffset && isEOL2(this._content.charCodeAt(offset - 1))){
            offset--;
        }
        return offset;
    }
    get lineCount() {
        return this.getLineOffsets().length;
    }
    static isIncremental(event) {
        const candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
    }
    static isFull(event) {
        const candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
    }
    constructor(uri, languageId, version, content){
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = void 0;
    }
};
var TextDocument2;
(function(TextDocument3) {
    function create(uri, languageId, version, content) {
        return new FullTextDocument2(uri, languageId, version, content);
    }
    TextDocument3.create = create;
    function update(document, changes, version) {
        if (document instanceof FullTextDocument2) {
            document.update(changes, version);
            return document;
        } else {
            throw new Error("TextDocument.update: document must be created by TextDocument.create");
        }
    }
    TextDocument3.update = update;
    function applyEdits(document, edits) {
        const text = document.getText();
        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a2, b)=>{
            const diff = a2.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a2.range.start.character - b.range.start.character;
            }
            return diff;
        });
        let lastModifiedOffset = 0;
        const spans = [];
        for (const e of sortedEdits){
            const startOffset = document.offsetAt(e.range.start);
            if (startOffset < lastModifiedOffset) {
                throw new Error("Overlapping edit");
            } else if (startOffset > lastModifiedOffset) {
                spans.push(text.substring(lastModifiedOffset, startOffset));
            }
            if (e.newText.length) {
                spans.push(e.newText);
            }
            lastModifiedOffset = document.offsetAt(e.range.end);
        }
        spans.push(text.substr(lastModifiedOffset));
        return spans.join("");
    }
    TextDocument3.applyEdits = applyEdits;
})(TextDocument2 || (TextDocument2 = {}));
function mergeSort(data, compare2) {
    if (data.length <= 1) {
        return data;
    }
    const p = data.length / 2 | 0;
    const left = data.slice(0, p);
    const right = data.slice(p);
    mergeSort(left, compare2);
    mergeSort(right, compare2);
    let leftIdx = 0;
    let rightIdx = 0;
    let i = 0;
    while(leftIdx < left.length && rightIdx < right.length){
        const ret = compare2(left[leftIdx], right[rightIdx]);
        if (ret <= 0) {
            data[i++] = left[leftIdx++];
        } else {
            data[i++] = right[rightIdx++];
        }
    }
    while(leftIdx < left.length){
        data[i++] = left[leftIdx++];
    }
    while(rightIdx < right.length){
        data[i++] = right[rightIdx++];
    }
    return data;
}
function computeLineOffsets(text, isAtLineStart, textOffset = 0) {
    const result = isAtLineStart ? [
        textOffset
    ] : [];
    for(let i = 0; i < text.length; i++){
        const ch = text.charCodeAt(i);
        if (isEOL2(ch)) {
            if (ch === 13 && i + 1 < text.length && text.charCodeAt(i + 1) === 10) {
                i++;
            }
            result.push(textOffset + i + 1);
        }
    }
    return result;
}
function isEOL2(char) {
    return char === 13 || char === 10;
}
function getWellformedRange(range) {
    const start = range.start;
    const end = range.end;
    if (start.line > end.line || start.line === end.line && start.character > end.character) {
        return {
            start: end,
            end: start
        };
    }
    return range;
}
function getWellformedEdit(textEdit) {
    const range = getWellformedRange(textEdit.range);
    if (range !== textEdit.range) {
        return {
            newText: textEdit.newText,
            range
        };
    }
    return textEdit;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/jsonLanguageTypes.js
var ErrorCode;
(function(ErrorCode2) {
    ErrorCode2[ErrorCode2["Undefined"] = 0] = "Undefined";
    ErrorCode2[ErrorCode2["EnumValueMismatch"] = 1] = "EnumValueMismatch";
    ErrorCode2[ErrorCode2["Deprecated"] = 2] = "Deprecated";
    ErrorCode2[ErrorCode2["UnexpectedEndOfComment"] = 257] = "UnexpectedEndOfComment";
    ErrorCode2[ErrorCode2["UnexpectedEndOfString"] = 258] = "UnexpectedEndOfString";
    ErrorCode2[ErrorCode2["UnexpectedEndOfNumber"] = 259] = "UnexpectedEndOfNumber";
    ErrorCode2[ErrorCode2["InvalidUnicode"] = 260] = "InvalidUnicode";
    ErrorCode2[ErrorCode2["InvalidEscapeCharacter"] = 261] = "InvalidEscapeCharacter";
    ErrorCode2[ErrorCode2["InvalidCharacter"] = 262] = "InvalidCharacter";
    ErrorCode2[ErrorCode2["PropertyExpected"] = 513] = "PropertyExpected";
    ErrorCode2[ErrorCode2["CommaExpected"] = 514] = "CommaExpected";
    ErrorCode2[ErrorCode2["ColonExpected"] = 515] = "ColonExpected";
    ErrorCode2[ErrorCode2["ValueExpected"] = 516] = "ValueExpected";
    ErrorCode2[ErrorCode2["CommaOrCloseBacketExpected"] = 517] = "CommaOrCloseBacketExpected";
    ErrorCode2[ErrorCode2["CommaOrCloseBraceExpected"] = 518] = "CommaOrCloseBraceExpected";
    ErrorCode2[ErrorCode2["TrailingComma"] = 519] = "TrailingComma";
    ErrorCode2[ErrorCode2["DuplicateKey"] = 520] = "DuplicateKey";
    ErrorCode2[ErrorCode2["CommentNotPermitted"] = 521] = "CommentNotPermitted";
    ErrorCode2[ErrorCode2["SchemaResolveError"] = 768] = "SchemaResolveError";
})(ErrorCode || (ErrorCode = {}));
var ClientCapabilities;
(function(ClientCapabilities2) {
    ClientCapabilities2.LATEST = {
        textDocument: {
            completion: {
                completionItem: {
                    documentationFormat: [
                        MarkupKind.Markdown,
                        MarkupKind.PlainText
                    ],
                    commitCharactersSupport: true
                }
            }
        }
    };
})(ClientCapabilities || (ClientCapabilities = {}));
// src/fillers/vscode-nls.js
function format2(message, args) {
    return args.length === 0 ? message : message.replace(/{(\d+)}/g, (match, rest)=>{
        const [index] = rest;
        return typeof args[index] === "undefined" ? match : args[index];
    });
}
function localize(key, message, ...args) {
    return format2(message, args);
}
function loadMessageBundle() {
    return localize;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/parser/jsonParser.js
var __extends = /* @__PURE__ */ function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
        } || function(d2, b2) {
            for(var p in b2)if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var localize2 = loadMessageBundle();
var formats = {
    "color-hex": {
        errorMessage: localize2("colorHexFormatWarning", "Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA."),
        pattern: /^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/
    },
    "date-time": {
        errorMessage: localize2("dateTimeFormatWarning", "String is not a RFC3339 date-time."),
        pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i
    },
    "date": {
        errorMessage: localize2("dateFormatWarning", "String is not a RFC3339 date."),
        pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/i
    },
    "time": {
        errorMessage: localize2("timeFormatWarning", "String is not a RFC3339 time."),
        pattern: /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i
    },
    "email": {
        errorMessage: localize2("emailFormatWarning", "String is not an e-mail address."),
        pattern: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    }
};
var ASTNodeImpl = /** @class */ function() {
    function ASTNodeImpl3(parent, offset, length) {
        if (length === void 0) {
            length = 0;
        }
        this.offset = offset;
        this.length = length;
        this.parent = parent;
    }
    Object.defineProperty(ASTNodeImpl3.prototype, "children", {
        get: function() {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    ASTNodeImpl3.prototype.toString = function() {
        return "type: " + this.type + " (" + this.offset + "/" + this.length + ")" + (this.parent ? " parent: {" + this.parent.toString() + "}" : "");
    };
    return ASTNodeImpl3;
}();
var NullASTNodeImpl = /** @class */ function(_super) {
    __extends(NullASTNodeImpl3, _super);
    function NullASTNodeImpl3(parent, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "null";
        _this.value = null;
        return _this;
    }
    return NullASTNodeImpl3;
}(ASTNodeImpl);
var BooleanASTNodeImpl = /** @class */ function(_super) {
    __extends(BooleanASTNodeImpl3, _super);
    function BooleanASTNodeImpl3(parent, boolValue, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "boolean";
        _this.value = boolValue;
        return _this;
    }
    return BooleanASTNodeImpl3;
}(ASTNodeImpl);
var ArrayASTNodeImpl = /** @class */ function(_super) {
    __extends(ArrayASTNodeImpl3, _super);
    function ArrayASTNodeImpl3(parent, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "array";
        _this.items = [];
        return _this;
    }
    Object.defineProperty(ArrayASTNodeImpl3.prototype, "children", {
        get: function() {
            return this.items;
        },
        enumerable: false,
        configurable: true
    });
    return ArrayASTNodeImpl3;
}(ASTNodeImpl);
var NumberASTNodeImpl = /** @class */ function(_super) {
    __extends(NumberASTNodeImpl3, _super);
    function NumberASTNodeImpl3(parent, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "number";
        _this.isInteger = true;
        _this.value = Number.NaN;
        return _this;
    }
    return NumberASTNodeImpl3;
}(ASTNodeImpl);
var StringASTNodeImpl = /** @class */ function(_super) {
    __extends(StringASTNodeImpl3, _super);
    function StringASTNodeImpl3(parent, offset, length) {
        var _this = _super.call(this, parent, offset, length) || this;
        _this.type = "string";
        _this.value = "";
        return _this;
    }
    return StringASTNodeImpl3;
}(ASTNodeImpl);
var PropertyASTNodeImpl = /** @class */ function(_super) {
    __extends(PropertyASTNodeImpl3, _super);
    function PropertyASTNodeImpl3(parent, offset, keyNode) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "property";
        _this.colonOffset = -1;
        _this.keyNode = keyNode;
        return _this;
    }
    Object.defineProperty(PropertyASTNodeImpl3.prototype, "children", {
        get: function() {
            return this.valueNode ? [
                this.keyNode,
                this.valueNode
            ] : [
                this.keyNode
            ];
        },
        enumerable: false,
        configurable: true
    });
    return PropertyASTNodeImpl3;
}(ASTNodeImpl);
var ObjectASTNodeImpl = /** @class */ function(_super) {
    __extends(ObjectASTNodeImpl3, _super);
    function ObjectASTNodeImpl3(parent, offset) {
        var _this = _super.call(this, parent, offset) || this;
        _this.type = "object";
        _this.properties = [];
        return _this;
    }
    Object.defineProperty(ObjectASTNodeImpl3.prototype, "children", {
        get: function() {
            return this.properties;
        },
        enumerable: false,
        configurable: true
    });
    return ObjectASTNodeImpl3;
}(ASTNodeImpl);
function asSchema(schema4) {
    if (isBoolean(schema4)) {
        return schema4 ? {} : {
            "not": {}
        };
    }
    return schema4;
}
var EnumMatch;
(function(EnumMatch3) {
    EnumMatch3[EnumMatch3["Key"] = 0] = "Key";
    EnumMatch3[EnumMatch3["Enum"] = 1] = "Enum";
})(EnumMatch || (EnumMatch = {}));
var SchemaCollector = /** @class */ function() {
    function SchemaCollector3(focusOffset, exclude) {
        if (focusOffset === void 0) {
            focusOffset = -1;
        }
        this.focusOffset = focusOffset;
        this.exclude = exclude;
        this.schemas = [];
    }
    SchemaCollector3.prototype.add = function(schema4) {
        this.schemas.push(schema4);
    };
    SchemaCollector3.prototype.merge = function(other) {
        Array.prototype.push.apply(this.schemas, other.schemas);
    };
    SchemaCollector3.prototype.include = function(node) {
        return (this.focusOffset === -1 || contains2(node, this.focusOffset)) && node !== this.exclude;
    };
    SchemaCollector3.prototype.newSub = function() {
        return new SchemaCollector3(-1, this.exclude);
    };
    return SchemaCollector3;
}();
var NoOpSchemaCollector = /** @class */ function() {
    function NoOpSchemaCollector3() {}
    Object.defineProperty(NoOpSchemaCollector3.prototype, "schemas", {
        get: function() {
            return [];
        },
        enumerable: false,
        configurable: true
    });
    NoOpSchemaCollector3.prototype.add = function(schema4) {};
    NoOpSchemaCollector3.prototype.merge = function(other) {};
    NoOpSchemaCollector3.prototype.include = function(node) {
        return true;
    };
    NoOpSchemaCollector3.prototype.newSub = function() {
        return this;
    };
    NoOpSchemaCollector3.instance = new NoOpSchemaCollector3();
    return NoOpSchemaCollector3;
}();
var ValidationResult = /** @class */ function() {
    function ValidationResult3() {
        this.problems = [];
        this.propertiesMatches = 0;
        this.propertiesValueMatches = 0;
        this.primaryValueMatches = 0;
        this.enumValueMatch = false;
        this.enumValues = void 0;
    }
    ValidationResult3.prototype.hasProblems = function() {
        return !!this.problems.length;
    };
    ValidationResult3.prototype.mergeAll = function(validationResults) {
        for(var _i = 0, validationResults_1 = validationResults; _i < validationResults_1.length; _i++){
            var validationResult = validationResults_1[_i];
            this.merge(validationResult);
        }
    };
    ValidationResult3.prototype.merge = function(validationResult) {
        this.problems = this.problems.concat(validationResult.problems);
    };
    ValidationResult3.prototype.mergeEnumValues = function(validationResult) {
        if (!this.enumValueMatch && !validationResult.enumValueMatch && this.enumValues && validationResult.enumValues) {
            this.enumValues = this.enumValues.concat(validationResult.enumValues);
            for(var _i = 0, _a = this.problems; _i < _a.length; _i++){
                var error = _a[_i];
                if (error.code === ErrorCode.EnumValueMismatch) {
                    error.message = localize2("enumWarning", "Value is not accepted. Valid values: {0}.", this.enumValues.map(function(v) {
                        return JSON.stringify(v);
                    }).join(", "));
                }
            }
        }
    };
    ValidationResult3.prototype.mergePropertyMatch = function(propertyValidationResult) {
        this.merge(propertyValidationResult);
        this.propertiesMatches++;
        if (propertyValidationResult.enumValueMatch || !propertyValidationResult.hasProblems() && propertyValidationResult.propertiesMatches) {
            this.propertiesValueMatches++;
        }
        if (propertyValidationResult.enumValueMatch && propertyValidationResult.enumValues && propertyValidationResult.enumValues.length === 1) {
            this.primaryValueMatches++;
        }
    };
    ValidationResult3.prototype.compare = function(other) {
        var hasProblems = this.hasProblems();
        if (hasProblems !== other.hasProblems()) {
            return hasProblems ? -1 : 1;
        }
        if (this.enumValueMatch !== other.enumValueMatch) {
            return other.enumValueMatch ? -1 : 1;
        }
        if (this.primaryValueMatches !== other.primaryValueMatches) {
            return this.primaryValueMatches - other.primaryValueMatches;
        }
        if (this.propertiesValueMatches !== other.propertiesValueMatches) {
            return this.propertiesValueMatches - other.propertiesValueMatches;
        }
        return this.propertiesMatches - other.propertiesMatches;
    };
    return ValidationResult3;
}();
function getNodeValue3(node) {
    return getNodeValue2(node);
}
function getNodePath3(node) {
    return getNodePath2(node);
}
function contains2(node, offset, includeRightBound) {
    if (includeRightBound === void 0) {
        includeRightBound = false;
    }
    return offset >= node.offset && offset < node.offset + node.length || includeRightBound && offset === node.offset + node.length;
}
var JSONDocument = /** @class */ function() {
    function JSONDocument3(root, syntaxErrors, comments) {
        if (syntaxErrors === void 0) {
            syntaxErrors = [];
        }
        if (comments === void 0) {
            comments = [];
        }
        this.root = root;
        this.syntaxErrors = syntaxErrors;
        this.comments = comments;
    }
    JSONDocument3.prototype.getNodeFromOffset = function(offset, includeRightBound) {
        if (includeRightBound === void 0) {
            includeRightBound = false;
        }
        if (this.root) {
            return findNodeAtOffset2(this.root, offset, includeRightBound);
        }
        return void 0;
    };
    JSONDocument3.prototype.visit = function(visitor) {
        if (this.root) {
            var doVisit_1 = function(node) {
                var ctn = visitor(node);
                var children = node.children;
                if (Array.isArray(children)) {
                    for(var i = 0; i < children.length && ctn; i++){
                        ctn = doVisit_1(children[i]);
                    }
                }
                return ctn;
            };
            doVisit_1(this.root);
        }
    };
    JSONDocument3.prototype.validate = function(textDocument, schema4, severity) {
        if (severity === void 0) {
            severity = DiagnosticSeverity.Warning;
        }
        if (this.root && schema4) {
            var validationResult = new ValidationResult();
            validate(this.root, schema4, validationResult, NoOpSchemaCollector.instance);
            return validationResult.problems.map(function(p) {
                var _a;
                var range = Range.create(textDocument.positionAt(p.location.offset), textDocument.positionAt(p.location.offset + p.location.length));
                return Diagnostic.create(range, p.message, (_a = p.severity) !== null && _a !== void 0 ? _a : severity, p.code);
            });
        }
        return void 0;
    };
    JSONDocument3.prototype.getMatchingSchemas = function(schema4, focusOffset, exclude) {
        if (focusOffset === void 0) {
            focusOffset = -1;
        }
        var matchingSchemas = new SchemaCollector(focusOffset, exclude);
        if (this.root && schema4) {
            validate(this.root, schema4, new ValidationResult(), matchingSchemas);
        }
        return matchingSchemas.schemas;
    };
    return JSONDocument3;
}();
function validate(n, schema4, validationResult, matchingSchemas) {
    if (!n || !matchingSchemas.include(n)) {
        return;
    }
    var node = n;
    switch(node.type){
        case "object":
            _validateObjectNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "array":
            _validateArrayNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "string":
            _validateStringNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "number":
            _validateNumberNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "property":
            return validate(node.valueNode, schema4, validationResult, matchingSchemas);
    }
    _validateNode();
    matchingSchemas.add({
        node,
        schema: schema4
    });
    function _validateNode() {
        function matchesType(type) {
            return node.type === type || type === "integer" && node.type === "number" && node.isInteger;
        }
        if (Array.isArray(schema4.type)) {
            if (!schema4.type.some(matchesType)) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    message: schema4.errorMessage || localize2("typeArrayMismatchWarning", "Incorrect type. Expected one of {0}.", schema4.type.join(", "))
                });
            }
        } else if (schema4.type) {
            if (!matchesType(schema4.type)) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    message: schema4.errorMessage || localize2("typeMismatchWarning", 'Incorrect type. Expected "{0}".', schema4.type)
                });
            }
        }
        if (Array.isArray(schema4.allOf)) {
            for(var _i = 0, _a = schema4.allOf; _i < _a.length; _i++){
                var subSchemaRef = _a[_i];
                validate(node, asSchema(subSchemaRef), validationResult, matchingSchemas);
            }
        }
        var notSchema = asSchema(schema4.not);
        if (notSchema) {
            var subValidationResult = new ValidationResult();
            var subMatchingSchemas = matchingSchemas.newSub();
            validate(node, notSchema, subValidationResult, subMatchingSchemas);
            if (!subValidationResult.hasProblems()) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    message: localize2("notSchemaWarning", "Matches a schema that is not allowed.")
                });
            }
            for(var _b = 0, _c = subMatchingSchemas.schemas; _b < _c.length; _b++){
                var ms = _c[_b];
                ms.inverted = !ms.inverted;
                matchingSchemas.add(ms);
            }
        }
        var testAlternatives = function(alternatives, maxOneMatch) {
            var matches = [];
            var bestMatch = void 0;
            for(var _i2 = 0, alternatives_1 = alternatives; _i2 < alternatives_1.length; _i2++){
                var subSchemaRef2 = alternatives_1[_i2];
                var subSchema = asSchema(subSchemaRef2);
                var subValidationResult2 = new ValidationResult();
                var subMatchingSchemas2 = matchingSchemas.newSub();
                validate(node, subSchema, subValidationResult2, subMatchingSchemas2);
                if (!subValidationResult2.hasProblems()) {
                    matches.push(subSchema);
                }
                if (!bestMatch) {
                    bestMatch = {
                        schema: subSchema,
                        validationResult: subValidationResult2,
                        matchingSchemas: subMatchingSchemas2
                    };
                } else {
                    if (!maxOneMatch && !subValidationResult2.hasProblems() && !bestMatch.validationResult.hasProblems()) {
                        bestMatch.matchingSchemas.merge(subMatchingSchemas2);
                        bestMatch.validationResult.propertiesMatches += subValidationResult2.propertiesMatches;
                        bestMatch.validationResult.propertiesValueMatches += subValidationResult2.propertiesValueMatches;
                    } else {
                        var compareResult = subValidationResult2.compare(bestMatch.validationResult);
                        if (compareResult > 0) {
                            bestMatch = {
                                schema: subSchema,
                                validationResult: subValidationResult2,
                                matchingSchemas: subMatchingSchemas2
                            };
                        } else if (compareResult === 0) {
                            bestMatch.matchingSchemas.merge(subMatchingSchemas2);
                            bestMatch.validationResult.mergeEnumValues(subValidationResult2);
                        }
                    }
                }
            }
            if (matches.length > 1 && maxOneMatch) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: 1
                    },
                    message: localize2("oneOfWarning", "Matches multiple schemas when only one must validate.")
                });
            }
            if (bestMatch) {
                validationResult.merge(bestMatch.validationResult);
                validationResult.propertiesMatches += bestMatch.validationResult.propertiesMatches;
                validationResult.propertiesValueMatches += bestMatch.validationResult.propertiesValueMatches;
                matchingSchemas.merge(bestMatch.matchingSchemas);
            }
            return matches.length;
        };
        if (Array.isArray(schema4.anyOf)) {
            testAlternatives(schema4.anyOf, false);
        }
        if (Array.isArray(schema4.oneOf)) {
            testAlternatives(schema4.oneOf, true);
        }
        var testBranch = function(schema5) {
            var subValidationResult2 = new ValidationResult();
            var subMatchingSchemas2 = matchingSchemas.newSub();
            validate(node, asSchema(schema5), subValidationResult2, subMatchingSchemas2);
            validationResult.merge(subValidationResult2);
            validationResult.propertiesMatches += subValidationResult2.propertiesMatches;
            validationResult.propertiesValueMatches += subValidationResult2.propertiesValueMatches;
            matchingSchemas.merge(subMatchingSchemas2);
        };
        var testCondition = function(ifSchema2, thenSchema, elseSchema) {
            var subSchema = asSchema(ifSchema2);
            var subValidationResult2 = new ValidationResult();
            var subMatchingSchemas2 = matchingSchemas.newSub();
            validate(node, subSchema, subValidationResult2, subMatchingSchemas2);
            matchingSchemas.merge(subMatchingSchemas2);
            if (!subValidationResult2.hasProblems()) {
                if (thenSchema) {
                    testBranch(thenSchema);
                }
            } else if (elseSchema) {
                testBranch(elseSchema);
            }
        };
        var ifSchema = asSchema(schema4.if);
        if (ifSchema) {
            testCondition(ifSchema, asSchema(schema4.then), asSchema(schema4.else));
        }
        if (Array.isArray(schema4.enum)) {
            var val = getNodeValue3(node);
            var enumValueMatch = false;
            for(var _d = 0, _e = schema4.enum; _d < _e.length; _d++){
                var e = _e[_d];
                if (equals(val, e)) {
                    enumValueMatch = true;
                    break;
                }
            }
            validationResult.enumValues = schema4.enum;
            validationResult.enumValueMatch = enumValueMatch;
            if (!enumValueMatch) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    code: ErrorCode.EnumValueMismatch,
                    message: schema4.errorMessage || localize2("enumWarning", "Value is not accepted. Valid values: {0}.", schema4.enum.map(function(v) {
                        return JSON.stringify(v);
                    }).join(", "))
                });
            }
        }
        if (isDefined(schema4.const)) {
            var val = getNodeValue3(node);
            if (!equals(val, schema4.const)) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    code: ErrorCode.EnumValueMismatch,
                    message: schema4.errorMessage || localize2("constWarning", "Value must be {0}.", JSON.stringify(schema4.const))
                });
                validationResult.enumValueMatch = false;
            } else {
                validationResult.enumValueMatch = true;
            }
            validationResult.enumValues = [
                schema4.const
            ];
        }
        if (schema4.deprecationMessage && node.parent) {
            validationResult.problems.push({
                location: {
                    offset: node.parent.offset,
                    length: node.parent.length
                },
                severity: DiagnosticSeverity.Warning,
                message: schema4.deprecationMessage,
                code: ErrorCode.Deprecated
            });
        }
    }
    function _validateNumberNode(node2, schema5, validationResult2, matchingSchemas2) {
        var val = node2.value;
        function normalizeFloats(float3) {
            var _a;
            var parts = /^(-?\d+)(?:\.(\d+))?(?:e([-+]\d+))?$/.exec(float3.toString());
            return parts && {
                value: Number(parts[1] + (parts[2] || "")),
                multiplier: (((_a = parts[2]) === null || _a === void 0 ? void 0 : _a.length) || 0) - (parseInt(parts[3]) || 0)
            };
        }
        ;
        if (isNumber(schema5.multipleOf)) {
            var remainder = -1;
            if (Number.isInteger(schema5.multipleOf)) {
                remainder = val % schema5.multipleOf;
            } else {
                var normMultipleOf = normalizeFloats(schema5.multipleOf);
                var normValue = normalizeFloats(val);
                if (normMultipleOf && normValue) {
                    var multiplier = Math.pow(10, Math.abs(normValue.multiplier - normMultipleOf.multiplier));
                    if (normValue.multiplier < normMultipleOf.multiplier) {
                        normValue.value *= multiplier;
                    } else {
                        normMultipleOf.value *= multiplier;
                    }
                    remainder = normValue.value % normMultipleOf.value;
                }
            }
            if (remainder !== 0) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    message: localize2("multipleOfWarning", "Value is not divisible by {0}.", schema5.multipleOf)
                });
            }
        }
        function getExclusiveLimit(limit, exclusive) {
            if (isNumber(exclusive)) {
                return exclusive;
            }
            if (isBoolean(exclusive) && exclusive) {
                return limit;
            }
            return void 0;
        }
        function getLimit(limit, exclusive) {
            if (!isBoolean(exclusive) || !exclusive) {
                return limit;
            }
            return void 0;
        }
        var exclusiveMinimum = getExclusiveLimit(schema5.minimum, schema5.exclusiveMinimum);
        if (isNumber(exclusiveMinimum) && val <= exclusiveMinimum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("exclusiveMinimumWarning", "Value is below the exclusive minimum of {0}.", exclusiveMinimum)
            });
        }
        var exclusiveMaximum = getExclusiveLimit(schema5.maximum, schema5.exclusiveMaximum);
        if (isNumber(exclusiveMaximum) && val >= exclusiveMaximum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("exclusiveMaximumWarning", "Value is above the exclusive maximum of {0}.", exclusiveMaximum)
            });
        }
        var minimum = getLimit(schema5.minimum, schema5.exclusiveMinimum);
        if (isNumber(minimum) && val < minimum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("minimumWarning", "Value is below the minimum of {0}.", minimum)
            });
        }
        var maximum = getLimit(schema5.maximum, schema5.exclusiveMaximum);
        if (isNumber(maximum) && val > maximum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("maximumWarning", "Value is above the maximum of {0}.", maximum)
            });
        }
    }
    function _validateStringNode(node2, schema5, validationResult2, matchingSchemas2) {
        if (isNumber(schema5.minLength) && node2.value.length < schema5.minLength) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("minLengthWarning", "String is shorter than the minimum length of {0}.", schema5.minLength)
            });
        }
        if (isNumber(schema5.maxLength) && node2.value.length > schema5.maxLength) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("maxLengthWarning", "String is longer than the maximum length of {0}.", schema5.maxLength)
            });
        }
        if (isString(schema5.pattern)) {
            var regex = extendedRegExp(schema5.pattern);
            if (!regex.test(node2.value)) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    message: schema5.patternErrorMessage || schema5.errorMessage || localize2("patternWarning", 'String does not match the pattern of "{0}".', schema5.pattern)
                });
            }
        }
        if (schema5.format) {
            switch(schema5.format){
                case "uri":
                case "uri-reference":
                    {
                        var errorMessage = void 0;
                        if (!node2.value) {
                            errorMessage = localize2("uriEmpty", "URI expected.");
                        } else {
                            var match = /^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/.exec(node2.value);
                            if (!match) {
                                errorMessage = localize2("uriMissing", "URI is expected.");
                            } else if (!match[2] && schema5.format === "uri") {
                                errorMessage = localize2("uriSchemeMissing", "URI with a scheme is expected.");
                            }
                        }
                        if (errorMessage) {
                            validationResult2.problems.push({
                                location: {
                                    offset: node2.offset,
                                    length: node2.length
                                },
                                message: schema5.patternErrorMessage || schema5.errorMessage || localize2("uriFormatWarning", "String is not a URI: {0}", errorMessage)
                            });
                        }
                    }
                    break;
                case "color-hex":
                case "date-time":
                case "date":
                case "time":
                case "email":
                    var format5 = formats[schema5.format];
                    if (!node2.value || !format5.pattern.exec(node2.value)) {
                        validationResult2.problems.push({
                            location: {
                                offset: node2.offset,
                                length: node2.length
                            },
                            message: schema5.patternErrorMessage || schema5.errorMessage || format5.errorMessage
                        });
                    }
                default:
            }
        }
    }
    function _validateArrayNode(node2, schema5, validationResult2, matchingSchemas2) {
        if (Array.isArray(schema5.items)) {
            var subSchemas = schema5.items;
            for(var index = 0; index < subSchemas.length; index++){
                var subSchemaRef = subSchemas[index];
                var subSchema = asSchema(subSchemaRef);
                var itemValidationResult = new ValidationResult();
                var item = node2.items[index];
                if (item) {
                    validate(item, subSchema, itemValidationResult, matchingSchemas2);
                    validationResult2.mergePropertyMatch(itemValidationResult);
                } else if (node2.items.length >= subSchemas.length) {
                    validationResult2.propertiesValueMatches++;
                }
            }
            if (node2.items.length > subSchemas.length) {
                if (typeof schema5.additionalItems === "object") {
                    for(var i = subSchemas.length; i < node2.items.length; i++){
                        var itemValidationResult = new ValidationResult();
                        validate(node2.items[i], schema5.additionalItems, itemValidationResult, matchingSchemas2);
                        validationResult2.mergePropertyMatch(itemValidationResult);
                    }
                } else if (schema5.additionalItems === false) {
                    validationResult2.problems.push({
                        location: {
                            offset: node2.offset,
                            length: node2.length
                        },
                        message: localize2("additionalItemsWarning", "Array has too many items according to schema. Expected {0} or fewer.", subSchemas.length)
                    });
                }
            }
        } else {
            var itemSchema = asSchema(schema5.items);
            if (itemSchema) {
                for(var _i = 0, _a = node2.items; _i < _a.length; _i++){
                    var item = _a[_i];
                    var itemValidationResult = new ValidationResult();
                    validate(item, itemSchema, itemValidationResult, matchingSchemas2);
                    validationResult2.mergePropertyMatch(itemValidationResult);
                }
            }
        }
        var containsSchema = asSchema(schema5.contains);
        if (containsSchema) {
            var doesContain = node2.items.some(function(item2) {
                var itemValidationResult2 = new ValidationResult();
                validate(item2, containsSchema, itemValidationResult2, NoOpSchemaCollector.instance);
                return !itemValidationResult2.hasProblems();
            });
            if (!doesContain) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    message: schema5.errorMessage || localize2("requiredItemMissingWarning", "Array does not contain required item.")
                });
            }
        }
        if (isNumber(schema5.minItems) && node2.items.length < schema5.minItems) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("minItemsWarning", "Array has too few items. Expected {0} or more.", schema5.minItems)
            });
        }
        if (isNumber(schema5.maxItems) && node2.items.length > schema5.maxItems) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                message: localize2("maxItemsWarning", "Array has too many items. Expected {0} or fewer.", schema5.maxItems)
            });
        }
        if (schema5.uniqueItems === true) {
            var values_1 = getNodeValue3(node2);
            var duplicates = values_1.some(function(value1, index2) {
                return index2 !== values_1.lastIndexOf(value1);
            });
            if (duplicates) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    message: localize2("uniqueItemsWarning", "Array has duplicate items.")
                });
            }
        }
    }
    function _validateObjectNode(node2, schema5, validationResult2, matchingSchemas2) {
        var seenKeys = /* @__PURE__ */ Object.create(null);
        var unprocessedProperties = [];
        for(var _i = 0, _a = node2.properties; _i < _a.length; _i++){
            var propertyNode = _a[_i];
            var key = propertyNode.keyNode.value;
            seenKeys[key] = propertyNode.valueNode;
            unprocessedProperties.push(key);
        }
        if (Array.isArray(schema5.required)) {
            for(var _b = 0, _c = schema5.required; _b < _c.length; _b++){
                var propertyName = _c[_b];
                if (!seenKeys[propertyName]) {
                    var keyNode = node2.parent && node2.parent.type === "property" && node2.parent.keyNode;
                    var location = keyNode ? {
                        offset: keyNode.offset,
                        length: keyNode.length
                    } : {
                        offset: node2.offset,
                        length: 1
                    };
                    validationResult2.problems.push({
                        location,
                        message: localize2("MissingRequiredPropWarning", 'Missing property "{0}".', propertyName)
                    });
                }
            }
        }
        var propertyProcessed = function(prop2) {
            var index = unprocessedProperties.indexOf(prop2);
            while(index >= 0){
                unprocessedProperties.splice(index, 1);
                index = unprocessedProperties.indexOf(prop2);
            }
        };
        if (schema5.properties) {
            for(var _d = 0, _e = Object.keys(schema5.properties); _d < _e.length; _d++){
                var propertyName = _e[_d];
                propertyProcessed(propertyName);
                var propertySchema = schema5.properties[propertyName];
                var child = seenKeys[propertyName];
                if (child) {
                    if (isBoolean(propertySchema)) {
                        if (!propertySchema) {
                            var propertyNode = child.parent;
                            validationResult2.problems.push({
                                location: {
                                    offset: propertyNode.keyNode.offset,
                                    length: propertyNode.keyNode.length
                                },
                                message: schema5.errorMessage || localize2("DisallowedExtraPropWarning", "Property {0} is not allowed.", propertyName)
                            });
                        } else {
                            validationResult2.propertiesMatches++;
                            validationResult2.propertiesValueMatches++;
                        }
                    } else {
                        var propertyValidationResult = new ValidationResult();
                        validate(child, propertySchema, propertyValidationResult, matchingSchemas2);
                        validationResult2.mergePropertyMatch(propertyValidationResult);
                    }
                }
            }
        }
        if (schema5.patternProperties) {
            for(var _f = 0, _g = Object.keys(schema5.patternProperties); _f < _g.length; _f++){
                var propertyPattern = _g[_f];
                var regex = extendedRegExp(propertyPattern);
                for(var _h = 0, _j = unprocessedProperties.slice(0); _h < _j.length; _h++){
                    var propertyName = _j[_h];
                    if (regex.test(propertyName)) {
                        propertyProcessed(propertyName);
                        var child = seenKeys[propertyName];
                        if (child) {
                            var propertySchema = schema5.patternProperties[propertyPattern];
                            if (isBoolean(propertySchema)) {
                                if (!propertySchema) {
                                    var propertyNode = child.parent;
                                    validationResult2.problems.push({
                                        location: {
                                            offset: propertyNode.keyNode.offset,
                                            length: propertyNode.keyNode.length
                                        },
                                        message: schema5.errorMessage || localize2("DisallowedExtraPropWarning", "Property {0} is not allowed.", propertyName)
                                    });
                                } else {
                                    validationResult2.propertiesMatches++;
                                    validationResult2.propertiesValueMatches++;
                                }
                            } else {
                                var propertyValidationResult = new ValidationResult();
                                validate(child, propertySchema, propertyValidationResult, matchingSchemas2);
                                validationResult2.mergePropertyMatch(propertyValidationResult);
                            }
                        }
                    }
                }
            }
        }
        if (typeof schema5.additionalProperties === "object") {
            for(var _k = 0, unprocessedProperties_1 = unprocessedProperties; _k < unprocessedProperties_1.length; _k++){
                var propertyName = unprocessedProperties_1[_k];
                var child = seenKeys[propertyName];
                if (child) {
                    var propertyValidationResult = new ValidationResult();
                    validate(child, schema5.additionalProperties, propertyValidationResult, matchingSchemas2);
                    validationResult2.mergePropertyMatch(propertyValidationResult);
                }
            }
        } else if (schema5.additionalProperties === false) {
            if (unprocessedProperties.length > 0) {
                for(var _l = 0, unprocessedProperties_2 = unprocessedProperties; _l < unprocessedProperties_2.length; _l++){
                    var propertyName = unprocessedProperties_2[_l];
                    var child = seenKeys[propertyName];
                    if (child) {
                        var propertyNode = child.parent;
                        validationResult2.problems.push({
                            location: {
                                offset: propertyNode.keyNode.offset,
                                length: propertyNode.keyNode.length
                            },
                            message: schema5.errorMessage || localize2("DisallowedExtraPropWarning", "Property {0} is not allowed.", propertyName)
                        });
                    }
                }
            }
        }
        if (isNumber(schema5.maxProperties)) {
            if (node2.properties.length > schema5.maxProperties) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    message: localize2("MaxPropWarning", "Object has more properties than limit of {0}.", schema5.maxProperties)
                });
            }
        }
        if (isNumber(schema5.minProperties)) {
            if (node2.properties.length < schema5.minProperties) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    message: localize2("MinPropWarning", "Object has fewer properties than the required number of {0}", schema5.minProperties)
                });
            }
        }
        if (schema5.dependencies) {
            for(var _m = 0, _o = Object.keys(schema5.dependencies); _m < _o.length; _m++){
                var key = _o[_m];
                var prop = seenKeys[key];
                if (prop) {
                    var propertyDep = schema5.dependencies[key];
                    if (Array.isArray(propertyDep)) {
                        for(var _p = 0, propertyDep_1 = propertyDep; _p < propertyDep_1.length; _p++){
                            var requiredProp = propertyDep_1[_p];
                            if (!seenKeys[requiredProp]) {
                                validationResult2.problems.push({
                                    location: {
                                        offset: node2.offset,
                                        length: node2.length
                                    },
                                    message: localize2("RequiredDependentPropWarning", "Object is missing property {0} required by property {1}.", requiredProp, key)
                                });
                            } else {
                                validationResult2.propertiesValueMatches++;
                            }
                        }
                    } else {
                        var propertySchema = asSchema(propertyDep);
                        if (propertySchema) {
                            var propertyValidationResult = new ValidationResult();
                            validate(node2, propertySchema, propertyValidationResult, matchingSchemas2);
                            validationResult2.mergePropertyMatch(propertyValidationResult);
                        }
                    }
                }
            }
        }
        var propertyNames = asSchema(schema5.propertyNames);
        if (propertyNames) {
            for(var _q = 0, _r = node2.properties; _q < _r.length; _q++){
                var f2 = _r[_q];
                var key = f2.keyNode;
                if (key) {
                    validate(key, propertyNames, validationResult2, NoOpSchemaCollector.instance);
                }
            }
        }
    }
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/glob.js
function createRegex(glob, opts) {
    if (typeof glob !== "string") {
        throw new TypeError("Expected a string");
    }
    var str = String(glob);
    var reStr = "";
    var extended = opts ? !!opts.extended : false;
    var globstar = opts ? !!opts.globstar : false;
    var inGroup = false;
    var flags = opts && typeof opts.flags === "string" ? opts.flags : "";
    var c;
    for(var i = 0, len = str.length; i < len; i++){
        c = str[i];
        switch(c){
            case "/":
            case "$":
            case "^":
            case "+":
            case ".":
            case "(":
            case ")":
            case "=":
            case "!":
            case "|":
                reStr += "\\" + c;
                break;
            case "?":
                if (extended) {
                    reStr += ".";
                    break;
                }
            case "[":
            case "]":
                if (extended) {
                    reStr += c;
                    break;
                }
            case "{":
                if (extended) {
                    inGroup = true;
                    reStr += "(";
                    break;
                }
            case "}":
                if (extended) {
                    inGroup = false;
                    reStr += ")";
                    break;
                }
            case ",":
                if (inGroup) {
                    reStr += "|";
                    break;
                }
                reStr += "\\" + c;
                break;
            case "*":
                var prevChar = str[i - 1];
                var starCount = 1;
                while(str[i + 1] === "*"){
                    starCount++;
                    i++;
                }
                var nextChar = str[i + 1];
                if (!globstar) {
                    reStr += ".*";
                } else {
                    var isGlobstar = starCount > 1 && (prevChar === "/" || prevChar === void 0 || prevChar === "{" || prevChar === ",") && (nextChar === "/" || nextChar === void 0 || nextChar === "," || nextChar === "}");
                    if (isGlobstar) {
                        if (nextChar === "/") {
                            i++;
                        } else if (prevChar === "/" && reStr.endsWith("\\/")) {
                            reStr = reStr.substr(0, reStr.length - 2);
                        }
                        reStr += "((?:[^/]*(?:/|$))*)";
                    } else {
                        reStr += "([^/]*)";
                    }
                }
                break;
            default:
                reStr += c;
        }
    }
    if (!flags || !~flags.indexOf("g")) {
        reStr = "^" + reStr + "$";
    }
    return new RegExp(reStr, flags);
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonSchemaService.js
var localize3 = loadMessageBundle();
var BANG = "!";
var PATH_SEP = "/";
var FilePatternAssociation = /** @class */ function() {
    function FilePatternAssociation3(pattern, uris) {
        this.globWrappers = [];
        try {
            for(var _i = 0, pattern_1 = pattern; _i < pattern_1.length; _i++){
                var patternString = pattern_1[_i];
                var include = patternString[0] !== BANG;
                if (!include) {
                    patternString = patternString.substring(1);
                }
                if (patternString.length > 0) {
                    if (patternString[0] === PATH_SEP) {
                        patternString = patternString.substring(1);
                    }
                    this.globWrappers.push({
                        regexp: createRegex("**/" + patternString, {
                            extended: true,
                            globstar: true
                        }),
                        include
                    });
                }
            }
            ;
            this.uris = uris;
        } catch (e) {
            this.globWrappers.length = 0;
            this.uris = [];
        }
    }
    FilePatternAssociation3.prototype.matchesPattern = function(fileName) {
        var match = false;
        for(var _i = 0, _a = this.globWrappers; _i < _a.length; _i++){
            var _b = _a[_i], regexp = _b.regexp, include = _b.include;
            if (regexp.test(fileName)) {
                match = include;
            }
        }
        return match;
    };
    FilePatternAssociation3.prototype.getURIs = function() {
        return this.uris;
    };
    return FilePatternAssociation3;
}();
var SchemaHandle = /** @class */ function() {
    function SchemaHandle2(service, url, unresolvedSchemaContent) {
        this.service = service;
        this.url = url;
        this.dependencies = {};
        if (unresolvedSchemaContent) {
            this.unresolvedSchema = this.service.promise.resolve(new UnresolvedSchema(unresolvedSchemaContent));
        }
    }
    SchemaHandle2.prototype.getUnresolvedSchema = function() {
        if (!this.unresolvedSchema) {
            this.unresolvedSchema = this.service.loadSchema(this.url);
        }
        return this.unresolvedSchema;
    };
    SchemaHandle2.prototype.getResolvedSchema = function() {
        var _this = this;
        if (!this.resolvedSchema) {
            this.resolvedSchema = this.getUnresolvedSchema().then(function(unresolved) {
                return _this.service.resolveSchemaContent(unresolved, _this.url, _this.dependencies);
            });
        }
        return this.resolvedSchema;
    };
    SchemaHandle2.prototype.clearSchema = function() {
        this.resolvedSchema = void 0;
        this.unresolvedSchema = void 0;
        this.dependencies = {};
    };
    return SchemaHandle2;
}();
var UnresolvedSchema = /** @class */ /* @__PURE__ */ function() {
    function UnresolvedSchema2(schema4, errors) {
        if (errors === void 0) {
            errors = [];
        }
        this.schema = schema4;
        this.errors = errors;
    }
    return UnresolvedSchema2;
}();
var ResolvedSchema = /** @class */ function() {
    function ResolvedSchema2(schema4, errors) {
        if (errors === void 0) {
            errors = [];
        }
        this.schema = schema4;
        this.errors = errors;
    }
    ResolvedSchema2.prototype.getSection = function(path5) {
        var schemaRef = this.getSectionRecursive(path5, this.schema);
        if (schemaRef) {
            return asSchema(schemaRef);
        }
        return void 0;
    };
    ResolvedSchema2.prototype.getSectionRecursive = function(path5, schema4) {
        if (!schema4 || typeof schema4 === "boolean" || path5.length === 0) {
            return schema4;
        }
        var next = path5.shift();
        if (schema4.properties && typeof schema4.properties[next]) {
            return this.getSectionRecursive(path5, schema4.properties[next]);
        } else if (schema4.patternProperties) {
            for(var _i = 0, _a = Object.keys(schema4.patternProperties); _i < _a.length; _i++){
                var pattern = _a[_i];
                var regex = extendedRegExp(pattern);
                if (regex.test(next)) {
                    return this.getSectionRecursive(path5, schema4.patternProperties[pattern]);
                }
            }
        } else if (typeof schema4.additionalProperties === "object") {
            return this.getSectionRecursive(path5, schema4.additionalProperties);
        } else if (next.match("[0-9]+")) {
            if (Array.isArray(schema4.items)) {
                var index = parseInt(next, 10);
                if (!isNaN(index) && schema4.items[index]) {
                    return this.getSectionRecursive(path5, schema4.items[index]);
                }
            } else if (schema4.items) {
                return this.getSectionRecursive(path5, schema4.items);
            }
        }
        return void 0;
    };
    return ResolvedSchema2;
}();
var JSONSchemaService = /** @class */ function() {
    function JSONSchemaService2(requestService, contextService, promiseConstructor) {
        this.contextService = contextService;
        this.requestService = requestService;
        this.promiseConstructor = promiseConstructor || Promise;
        this.callOnDispose = [];
        this.contributionSchemas = {};
        this.contributionAssociations = [];
        this.schemasById = {};
        this.filePatternAssociations = [];
        this.registeredSchemasIds = {};
    }
    JSONSchemaService2.prototype.getRegisteredSchemaIds = function(filter) {
        return Object.keys(this.registeredSchemasIds).filter(function(id) {
            var scheme = yaml_service_URI.parse(id).scheme;
            return scheme !== "schemaservice" && (!filter || filter(scheme));
        });
    };
    Object.defineProperty(JSONSchemaService2.prototype, "promise", {
        get: function() {
            return this.promiseConstructor;
        },
        enumerable: false,
        configurable: true
    });
    JSONSchemaService2.prototype.dispose = function() {
        while(this.callOnDispose.length > 0){
            this.callOnDispose.pop()();
        }
    };
    JSONSchemaService2.prototype.onResourceChange = function(uri) {
        var _this = this;
        this.cachedSchemaForResource = void 0;
        var hasChanges = false;
        uri = normalizeId(uri);
        var toWalk = [
            uri
        ];
        var all = Object.keys(this.schemasById).map(function(key) {
            return _this.schemasById[key];
        });
        while(toWalk.length){
            var curr = toWalk.pop();
            for(var i = 0; i < all.length; i++){
                var handle = all[i];
                if (handle && (handle.url === curr || handle.dependencies[curr])) {
                    if (handle.url !== curr) {
                        toWalk.push(handle.url);
                    }
                    handle.clearSchema();
                    all[i] = void 0;
                    hasChanges = true;
                }
            }
        }
        return hasChanges;
    };
    JSONSchemaService2.prototype.setSchemaContributions = function(schemaContributions2) {
        if (schemaContributions2.schemas) {
            var schemas2 = schemaContributions2.schemas;
            for(var id in schemas2){
                var normalizedId = normalizeId(id);
                this.contributionSchemas[normalizedId] = this.addSchemaHandle(normalizedId, schemas2[id]);
            }
        }
        if (Array.isArray(schemaContributions2.schemaAssociations)) {
            var schemaAssociations = schemaContributions2.schemaAssociations;
            for(var _i = 0, schemaAssociations_1 = schemaAssociations; _i < schemaAssociations_1.length; _i++){
                var schemaAssociation = schemaAssociations_1[_i];
                var uris = schemaAssociation.uris.map(normalizeId);
                var association = this.addFilePatternAssociation(schemaAssociation.pattern, uris);
                this.contributionAssociations.push(association);
            }
        }
    };
    JSONSchemaService2.prototype.addSchemaHandle = function(id, unresolvedSchemaContent) {
        var schemaHandle = new SchemaHandle(this, id, unresolvedSchemaContent);
        this.schemasById[id] = schemaHandle;
        return schemaHandle;
    };
    JSONSchemaService2.prototype.getOrAddSchemaHandle = function(id, unresolvedSchemaContent) {
        return this.schemasById[id] || this.addSchemaHandle(id, unresolvedSchemaContent);
    };
    JSONSchemaService2.prototype.addFilePatternAssociation = function(pattern, uris) {
        var fpa = new FilePatternAssociation(pattern, uris);
        this.filePatternAssociations.push(fpa);
        return fpa;
    };
    JSONSchemaService2.prototype.registerExternalSchema = function(uri, filePatterns, unresolvedSchemaContent) {
        var id = normalizeId(uri);
        this.registeredSchemasIds[id] = true;
        this.cachedSchemaForResource = void 0;
        if (filePatterns) {
            this.addFilePatternAssociation(filePatterns, [
                uri
            ]);
        }
        return unresolvedSchemaContent ? this.addSchemaHandle(id, unresolvedSchemaContent) : this.getOrAddSchemaHandle(id);
    };
    JSONSchemaService2.prototype.clearExternalSchemas = function() {
        this.schemasById = {};
        this.filePatternAssociations = [];
        this.registeredSchemasIds = {};
        this.cachedSchemaForResource = void 0;
        for(var id in this.contributionSchemas){
            this.schemasById[id] = this.contributionSchemas[id];
            this.registeredSchemasIds[id] = true;
        }
        for(var _i = 0, _a = this.contributionAssociations; _i < _a.length; _i++){
            var contributionAssociation = _a[_i];
            this.filePatternAssociations.push(contributionAssociation);
        }
    };
    JSONSchemaService2.prototype.getResolvedSchema = function(schemaId) {
        var id = normalizeId(schemaId);
        var schemaHandle = this.schemasById[id];
        if (schemaHandle) {
            return schemaHandle.getResolvedSchema();
        }
        return this.promise.resolve(void 0);
    };
    JSONSchemaService2.prototype.loadSchema = function(url) {
        if (!this.requestService) {
            var errorMessage = localize3("json.schema.norequestservice", "Unable to load schema from '{0}'. No schema request service available", toDisplayString(url));
            return this.promise.resolve(new UnresolvedSchema({}, [
                errorMessage
            ]));
        }
        return this.requestService(url).then(function(content) {
            if (!content) {
                var errorMessage2 = localize3("json.schema.nocontent", "Unable to load schema from '{0}': No content.", toDisplayString(url));
                return new UnresolvedSchema({}, [
                    errorMessage2
                ]);
            }
            var schemaContent = {};
            var jsonErrors = [];
            schemaContent = parse2(content, jsonErrors);
            var errors = jsonErrors.length ? [
                localize3("json.schema.invalidFormat", "Unable to parse content from '{0}': Parse error at offset {1}.", toDisplayString(url), jsonErrors[0].offset)
            ] : [];
            return new UnresolvedSchema(schemaContent, errors);
        }, function(error) {
            var errorMessage2 = error.toString();
            var errorSplit = error.toString().split("Error: ");
            if (errorSplit.length > 1) {
                errorMessage2 = errorSplit[1];
            }
            if (endsWith(errorMessage2, ".")) {
                errorMessage2 = errorMessage2.substr(0, errorMessage2.length - 1);
            }
            return new UnresolvedSchema({}, [
                localize3("json.schema.nocontent", "Unable to load schema from '{0}': {1}.", toDisplayString(url), errorMessage2)
            ]);
        });
    };
    JSONSchemaService2.prototype.resolveSchemaContent = function(schemaToResolve, schemaURL, dependencies) {
        var _this = this;
        var resolveErrors = schemaToResolve.errors.slice(0);
        var schema4 = schemaToResolve.schema;
        if (schema4.$schema) {
            var id = normalizeId(schema4.$schema);
            if (id === "http://json-schema.org/draft-03/schema") {
                return this.promise.resolve(new ResolvedSchema({}, [
                    localize3("json.schema.draft03.notsupported", "Draft-03 schemas are not supported.")
                ]));
            } else if (id === "https://json-schema.org/draft/2019-09/schema") {
                resolveErrors.push(localize3("json.schema.draft201909.notsupported", "Draft 2019-09 schemas are not yet fully supported."));
            }
        }
        var contextService = this.contextService;
        var findSection = function(schema5, path5) {
            if (!path5) {
                return schema5;
            }
            var current = schema5;
            if (path5[0] === "/") {
                path5 = path5.substr(1);
            }
            path5.split("/").some(function(part) {
                part = part.replace(/~1/g, "/").replace(/~0/g, "~");
                current = current[part];
                return !current;
            });
            return current;
        };
        var merge = function(target, sourceRoot, sourceURI, refSegment) {
            var path5 = refSegment ? decodeURIComponent(refSegment) : void 0;
            var section = findSection(sourceRoot, path5);
            if (section) {
                for(var key in section){
                    if (section.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
                        target[key] = section[key];
                    }
                }
            } else {
                resolveErrors.push(localize3("json.schema.invalidref", "$ref '{0}' in '{1}' can not be resolved.", path5, sourceURI));
            }
        };
        var resolveExternalLink = function(node, uri, refSegment, parentSchemaURL, parentSchemaDependencies) {
            if (contextService && !/^[A-Za-z][A-Za-z0-9+\-.+]*:\/\/.*/.test(uri)) {
                uri = contextService.resolveRelativePath(uri, parentSchemaURL);
            }
            uri = normalizeId(uri);
            var referencedHandle = _this.getOrAddSchemaHandle(uri);
            return referencedHandle.getUnresolvedSchema().then(function(unresolvedSchema) {
                parentSchemaDependencies[uri] = true;
                if (unresolvedSchema.errors.length) {
                    var loc = refSegment ? uri + "#" + refSegment : uri;
                    resolveErrors.push(localize3("json.schema.problemloadingref", "Problems loading reference '{0}': {1}", loc, unresolvedSchema.errors[0]));
                }
                merge(node, unresolvedSchema.schema, uri, refSegment);
                return resolveRefs(node, unresolvedSchema.schema, uri, referencedHandle.dependencies);
            });
        };
        var resolveRefs = function(node, parentSchema, parentSchemaURL, parentSchemaDependencies) {
            if (!node || typeof node !== "object") {
                return Promise.resolve(null);
            }
            var toWalk = [
                node
            ];
            var seen = [];
            var openPromises = [];
            var collectEntries = function() {
                var entries = [];
                for(var _i = 0; _i < arguments.length; _i++){
                    entries[_i] = arguments[_i];
                }
                for(var _a = 0, entries_1 = entries; _a < entries_1.length; _a++){
                    var entry = entries_1[_a];
                    if (typeof entry === "object") {
                        toWalk.push(entry);
                    }
                }
            };
            var collectMapEntries = function() {
                var maps = [];
                for(var _i = 0; _i < arguments.length; _i++){
                    maps[_i] = arguments[_i];
                }
                for(var _a = 0, maps_1 = maps; _a < maps_1.length; _a++){
                    var map2 = maps_1[_a];
                    if (typeof map2 === "object") {
                        for(var k in map2){
                            var key = k;
                            var entry = map2[key];
                            if (typeof entry === "object") {
                                toWalk.push(entry);
                            }
                        }
                    }
                }
            };
            var collectArrayEntries = function() {
                var arrays = [];
                for(var _i = 0; _i < arguments.length; _i++){
                    arrays[_i] = arguments[_i];
                }
                for(var _a = 0, arrays_1 = arrays; _a < arrays_1.length; _a++){
                    var array = arrays_1[_a];
                    if (Array.isArray(array)) {
                        for(var _b = 0, array_1 = array; _b < array_1.length; _b++){
                            var entry = array_1[_b];
                            if (typeof entry === "object") {
                                toWalk.push(entry);
                            }
                        }
                    }
                }
            };
            var handleRef = function(next2) {
                var seenRefs = [];
                while(next2.$ref){
                    var ref = next2.$ref;
                    var segments = ref.split("#", 2);
                    delete next2.$ref;
                    if (segments[0].length > 0) {
                        openPromises.push(resolveExternalLink(next2, segments[0], segments[1], parentSchemaURL, parentSchemaDependencies));
                        return;
                    } else {
                        if (seenRefs.indexOf(ref) === -1) {
                            merge(next2, parentSchema, parentSchemaURL, segments[1]);
                            seenRefs.push(ref);
                        }
                    }
                }
                collectEntries(next2.items, next2.additionalItems, next2.additionalProperties, next2.not, next2.contains, next2.propertyNames, next2.if, next2.then, next2.else);
                collectMapEntries(next2.definitions, next2.properties, next2.patternProperties, next2.dependencies);
                collectArrayEntries(next2.anyOf, next2.allOf, next2.oneOf, next2.items);
            };
            while(toWalk.length){
                var next = toWalk.pop();
                if (seen.indexOf(next) >= 0) {
                    continue;
                }
                seen.push(next);
                handleRef(next);
            }
            return _this.promise.all(openPromises);
        };
        return resolveRefs(schema4, schema4, schemaURL, dependencies).then(function(_2) {
            return new ResolvedSchema(schema4, resolveErrors);
        });
    };
    JSONSchemaService2.prototype.getSchemaForResource = function(resource, document) {
        if (document && document.root && document.root.type === "object") {
            var schemaProperties = document.root.properties.filter(function(p) {
                return p.keyNode.value === "$schema" && p.valueNode && p.valueNode.type === "string";
            });
            if (schemaProperties.length > 0) {
                var valueNode = schemaProperties[0].valueNode;
                if (valueNode && valueNode.type === "string") {
                    var schemeId = getNodeValue3(valueNode);
                    if (schemeId && startsWith(schemeId, ".") && this.contextService) {
                        schemeId = this.contextService.resolveRelativePath(schemeId, resource);
                    }
                    if (schemeId) {
                        var id = normalizeId(schemeId);
                        return this.getOrAddSchemaHandle(id).getResolvedSchema();
                    }
                }
            }
        }
        if (this.cachedSchemaForResource && this.cachedSchemaForResource.resource === resource) {
            return this.cachedSchemaForResource.resolvedSchema;
        }
        var seen = /* @__PURE__ */ Object.create(null);
        var schemas2 = [];
        var normalizedResource = normalizeResourceForMatching(resource);
        for(var _i = 0, _a = this.filePatternAssociations; _i < _a.length; _i++){
            var entry = _a[_i];
            if (entry.matchesPattern(normalizedResource)) {
                for(var _b = 0, _c = entry.getURIs(); _b < _c.length; _b++){
                    var schemaId = _c[_b];
                    if (!seen[schemaId]) {
                        schemas2.push(schemaId);
                        seen[schemaId] = true;
                    }
                }
            }
        }
        var resolvedSchema = schemas2.length > 0 ? this.createCombinedSchema(resource, schemas2).getResolvedSchema() : this.promise.resolve(void 0);
        this.cachedSchemaForResource = {
            resource,
            resolvedSchema
        };
        return resolvedSchema;
    };
    JSONSchemaService2.prototype.createCombinedSchema = function(resource, schemaIds) {
        if (schemaIds.length === 1) {
            return this.getOrAddSchemaHandle(schemaIds[0]);
        } else {
            var combinedSchemaId = "schemaservice://combinedSchema/" + encodeURIComponent(resource);
            var combinedSchema = {
                allOf: schemaIds.map(function(schemaId) {
                    return {
                        $ref: schemaId
                    };
                })
            };
            return this.addSchemaHandle(combinedSchemaId, combinedSchema);
        }
    };
    JSONSchemaService2.prototype.getMatchingSchemas = function(document, jsonDocument, schema4) {
        if (schema4) {
            var id = schema4.id || "schemaservice://untitled/matchingSchemas/" + idCounter++;
            return this.resolveSchemaContent(new UnresolvedSchema(schema4), id, {}).then(function(resolvedSchema) {
                return jsonDocument.getMatchingSchemas(resolvedSchema.schema).filter(function(s) {
                    return !s.inverted;
                });
            });
        }
        return this.getSchemaForResource(document.uri, jsonDocument).then(function(schema5) {
            if (schema5) {
                return jsonDocument.getMatchingSchemas(schema5.schema).filter(function(s) {
                    return !s.inverted;
                });
            }
            return [];
        });
    };
    return JSONSchemaService2;
}();
var idCounter = 0;
function normalizeId(id) {
    try {
        return yaml_service_URI.parse(id).toString();
    } catch (e) {
        return id;
    }
}
function normalizeResourceForMatching(resource) {
    try {
        return yaml_service_URI.parse(resource).with({
            fragment: null,
            query: null
        }).toString();
    } catch (e) {
        return resource;
    }
}
function toDisplayString(url) {
    try {
        var uri = yaml_service_URI.parse(url);
        if (uri.scheme === "file") {
            return uri.fsPath;
        }
    } catch (e) {}
    return url;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/strings.js
function convertSimple2RegExpPattern(pattern) {
    return pattern.replace(/[-\\{}+?|^$.,[\]()#\s]/g, "\\$&").replace(/[*]/g, ".*");
}
function getIndentation(lineContent, position) {
    if (lineContent.length < position) {
        return 0;
    }
    for(let i = 0; i < position; i++){
        const char = lineContent.charCodeAt(i);
        if (char !== 32 && char !== 9) {
            return i;
        }
    }
    return position;
}
function safeCreateUnicodeRegExp(pattern) {
    try {
        return new RegExp(pattern, "u");
    } catch (ignore) {
        return new RegExp(pattern);
    }
}
function getFirstNonWhitespaceCharacterAfterOffset(str, offset) {
    offset++;
    for(let i = offset; i < str.length; i++){
        const char = str.charAt(i);
        if (char === " " || char === "	") {
            offset++;
        } else {
            return offset;
        }
    }
    return offset;
}
// ../../node_modules/yaml/browser/dist/nodes/Node.js
var ALIAS = Symbol.for("yaml.alias");
var DOC = Symbol.for("yaml.document");
var MAP = Symbol.for("yaml.map");
var PAIR = Symbol.for("yaml.pair");
var SCALAR = Symbol.for("yaml.scalar");
var SEQ = Symbol.for("yaml.seq");
var NODE_TYPE = Symbol.for("yaml.node.type");
var isAlias = (node)=>!!node && typeof node === "object" && node[NODE_TYPE] === ALIAS;
var isDocument = (node)=>!!node && typeof node === "object" && node[NODE_TYPE] === DOC;
var isMap = (node)=>!!node && typeof node === "object" && node[NODE_TYPE] === MAP;
var isPair = (node)=>!!node && typeof node === "object" && node[NODE_TYPE] === PAIR;
var isScalar = (node)=>!!node && typeof node === "object" && node[NODE_TYPE] === SCALAR;
var isSeq = (node)=>!!node && typeof node === "object" && node[NODE_TYPE] === SEQ;
function isCollection(node) {
    if (node && typeof node === "object") switch(node[NODE_TYPE]){
        case MAP:
        case SEQ:
            return true;
    }
    return false;
}
function isNode(node) {
    if (node && typeof node === "object") switch(node[NODE_TYPE]){
        case ALIAS:
        case MAP:
        case SCALAR:
        case SEQ:
            return true;
    }
    return false;
}
var hasAnchor = (node)=>(isScalar(node) || isCollection(node)) && !!node.anchor;
var NodeBase = class {
    /** Create a copy of this node.  */ clone() {
        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        if (this.range) copy.range = this.range.slice();
        return copy;
    }
    constructor(type){
        Object.defineProperty(this, NODE_TYPE, {
            value: type
        });
    }
};
// ../../node_modules/yaml/browser/dist/visit.js
var BREAK = Symbol("break visit");
var SKIP = Symbol("skip children");
var REMOVE = Symbol("remove node");
function visit2(node, visitor) {
    const visitor_ = initVisitor(visitor);
    if (isDocument(node)) {
        const cd = visit_(null, node.contents, visitor_, Object.freeze([
            node
        ]));
        if (cd === REMOVE) node.contents = null;
    } else visit_(null, node, visitor_, Object.freeze([]));
}
visit2.BREAK = BREAK;
visit2.SKIP = SKIP;
visit2.REMOVE = REMOVE;
function visit_(key, node, visitor, path5) {
    const ctrl = callVisitor(key, node, visitor, path5);
    if (isNode(ctrl) || isPair(ctrl)) {
        replaceNode(key, path5, ctrl);
        return visit_(key, ctrl, visitor, path5);
    }
    if (typeof ctrl !== "symbol") {
        if (isCollection(node)) {
            path5 = Object.freeze(path5.concat(node));
            for(let i = 0; i < node.items.length; ++i){
                const ci = visit_(i, node.items[i], visitor, path5);
                if (typeof ci === "number") i = ci - 1;
                else if (ci === BREAK) return BREAK;
                else if (ci === REMOVE) {
                    node.items.splice(i, 1);
                    i -= 1;
                }
            }
        } else if (isPair(node)) {
            path5 = Object.freeze(path5.concat(node));
            const ck = visit_("key", node.key, visitor, path5);
            if (ck === BREAK) return BREAK;
            else if (ck === REMOVE) node.key = null;
            const cv = visit_("value", node.value, visitor, path5);
            if (cv === BREAK) return BREAK;
            else if (cv === REMOVE) node.value = null;
        }
    }
    return ctrl;
}
async function visitAsync(node, visitor) {
    const visitor_ = initVisitor(visitor);
    if (isDocument(node)) {
        const cd = await visitAsync_(null, node.contents, visitor_, Object.freeze([
            node
        ]));
        if (cd === REMOVE) node.contents = null;
    } else await visitAsync_(null, node, visitor_, Object.freeze([]));
}
visitAsync.BREAK = BREAK;
visitAsync.SKIP = SKIP;
visitAsync.REMOVE = REMOVE;
async function visitAsync_(key, node, visitor, path5) {
    const ctrl = await callVisitor(key, node, visitor, path5);
    if (isNode(ctrl) || isPair(ctrl)) {
        replaceNode(key, path5, ctrl);
        return visitAsync_(key, ctrl, visitor, path5);
    }
    if (typeof ctrl !== "symbol") {
        if (isCollection(node)) {
            path5 = Object.freeze(path5.concat(node));
            for(let i = 0; i < node.items.length; ++i){
                const ci = await visitAsync_(i, node.items[i], visitor, path5);
                if (typeof ci === "number") i = ci - 1;
                else if (ci === BREAK) return BREAK;
                else if (ci === REMOVE) {
                    node.items.splice(i, 1);
                    i -= 1;
                }
            }
        } else if (isPair(node)) {
            path5 = Object.freeze(path5.concat(node));
            const ck = await visitAsync_("key", node.key, visitor, path5);
            if (ck === BREAK) return BREAK;
            else if (ck === REMOVE) node.key = null;
            const cv = await visitAsync_("value", node.value, visitor, path5);
            if (cv === BREAK) return BREAK;
            else if (cv === REMOVE) node.value = null;
        }
    }
    return ctrl;
}
function initVisitor(visitor) {
    if (typeof visitor === "object" && (visitor.Collection || visitor.Node || visitor.Value)) {
        return Object.assign({
            Alias: visitor.Node,
            Map: visitor.Node,
            Scalar: visitor.Node,
            Seq: visitor.Node
        }, visitor.Value && {
            Map: visitor.Value,
            Scalar: visitor.Value,
            Seq: visitor.Value
        }, visitor.Collection && {
            Map: visitor.Collection,
            Seq: visitor.Collection
        }, visitor);
    }
    return visitor;
}
function callVisitor(key, node, visitor, path5) {
    var _a, _b, _c, _d, _e;
    if (typeof visitor === "function") return visitor(key, node, path5);
    if (isMap(node)) return (_a = visitor.Map) == null ? void 0 : _a.call(visitor, key, node, path5);
    if (isSeq(node)) return (_b = visitor.Seq) == null ? void 0 : _b.call(visitor, key, node, path5);
    if (isPair(node)) return (_c = visitor.Pair) == null ? void 0 : _c.call(visitor, key, node, path5);
    if (isScalar(node)) return (_d = visitor.Scalar) == null ? void 0 : _d.call(visitor, key, node, path5);
    if (isAlias(node)) return (_e = visitor.Alias) == null ? void 0 : _e.call(visitor, key, node, path5);
    return void 0;
}
function replaceNode(key, path5, node) {
    const parent = path5[path5.length - 1];
    if (isCollection(parent)) {
        parent.items[key] = node;
    } else if (isPair(parent)) {
        if (key === "key") parent.key = node;
        else parent.value = node;
    } else if (isDocument(parent)) {
        parent.contents = node;
    } else {
        const pt = isAlias(parent) ? "alias" : "scalar";
        throw new Error(`Cannot replace node with ${pt} parent`);
    }
}
// ../../node_modules/yaml/browser/dist/doc/directives.js
var escapeChars = {
    "!": "%21",
    ",": "%2C",
    "[": "%5B",
    "]": "%5D",
    "{": "%7B",
    "}": "%7D"
};
var escapeTagName = (tn)=>tn.replace(/[!,[\]{}]/g, (ch)=>escapeChars[ch]);
var Directives = class _Directives {
    clone() {
        const copy = new _Directives(this.yaml, this.tags);
        copy.docStart = this.docStart;
        return copy;
    }
    /**
   * During parsing, get a Directives instance for the current document and
   * update the stream state according to the current version's spec.
   */ atDocument() {
        const res = new _Directives(this.yaml, this.tags);
        switch(this.yaml.version){
            case "1.1":
                this.atNextDocument = true;
                break;
            case "1.2":
                this.atNextDocument = false;
                this.yaml = {
                    explicit: _Directives.defaultYaml.explicit,
                    version: "1.2"
                };
                this.tags = Object.assign({}, _Directives.defaultTags);
                break;
        }
        return res;
    }
    /**
   * @param onError - May be called even if the action was successful
   * @returns `true` on success
   */ add(line, onError) {
        if (this.atNextDocument) {
            this.yaml = {
                explicit: _Directives.defaultYaml.explicit,
                version: "1.1"
            };
            this.tags = Object.assign({}, _Directives.defaultTags);
            this.atNextDocument = false;
        }
        const parts = line.trim().split(/[ \t]+/);
        const name = parts.shift();
        switch(name){
            case "%TAG":
                {
                    if (parts.length !== 2) {
                        onError(0, "%TAG directive should contain exactly two parts");
                        if (parts.length < 2) return false;
                    }
                    const [handle, prefix] = parts;
                    this.tags[handle] = prefix;
                    return true;
                }
            case "%YAML":
                {
                    this.yaml.explicit = true;
                    if (parts.length !== 1) {
                        onError(0, "%YAML directive should contain exactly one part");
                        return false;
                    }
                    const [version] = parts;
                    if (version === "1.1" || version === "1.2") {
                        this.yaml.version = version;
                        return true;
                    } else {
                        const isValid = /^\d+\.\d+$/.test(version);
                        onError(6, `Unsupported YAML version ${version}`, isValid);
                        return false;
                    }
                }
            default:
                onError(0, `Unknown directive ${name}`, true);
                return false;
        }
    }
    /**
   * Resolves a tag, matching handles to those defined in %TAG directives.
   *
   * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
   *   `'!local'` tag, or `null` if unresolvable.
   */ tagName(source, onError) {
        if (source === "!") return "!";
        if (source[0] !== "!") {
            onError(`Not a valid tag: ${source}`);
            return null;
        }
        if (source[1] === "<") {
            const verbatim = source.slice(2, -1);
            if (verbatim === "!" || verbatim === "!!") {
                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
                return null;
            }
            if (source[source.length - 1] !== ">") onError("Verbatim tags must end with a >");
            return verbatim;
        }
        const [, handle, suffix] = source.match(/^(.*!)([^!]*)$/);
        if (!suffix) onError(`The ${source} tag has no suffix`);
        const prefix = this.tags[handle];
        if (prefix) return prefix + decodeURIComponent(suffix);
        if (handle === "!") return source;
        onError(`Could not resolve tag: ${source}`);
        return null;
    }
    /**
   * Given a fully resolved tag, returns its printable string form,
   * taking into account current tag prefixes and defaults.
   */ tagString(tag) {
        for (const [handle, prefix] of Object.entries(this.tags)){
            if (tag.startsWith(prefix)) return handle + escapeTagName(tag.substring(prefix.length));
        }
        return tag[0] === "!" ? tag : `!<${tag}>`;
    }
    toString(doc) {
        const lines = this.yaml.explicit ? [
            `%YAML ${this.yaml.version || "1.2"}`
        ] : [];
        const tagEntries = Object.entries(this.tags);
        let tagNames;
        if (doc && tagEntries.length > 0 && isNode(doc.contents)) {
            const tags = {};
            visit2(doc.contents, (_key, node)=>{
                if (isNode(node) && node.tag) tags[node.tag] = true;
            });
            tagNames = Object.keys(tags);
        } else tagNames = [];
        for (const [handle, prefix] of tagEntries){
            if (handle === "!!" && prefix === "tag:yaml.org,2002:") continue;
            if (!doc || tagNames.some((tn)=>tn.startsWith(prefix))) lines.push(`%TAG ${handle} ${prefix}`);
        }
        return lines.join("\n");
    }
    constructor(yaml, tags){
        this.docStart = null;
        this.docEnd = false;
        this.yaml = Object.assign({}, _Directives.defaultYaml, yaml);
        this.tags = Object.assign({}, _Directives.defaultTags, tags);
    }
};
Directives.defaultYaml = {
    explicit: false,
    version: "1.2"
};
Directives.defaultTags = {
    "!!": "tag:yaml.org,2002:"
};
// ../../node_modules/yaml/browser/dist/doc/anchors.js
function anchorIsValid(anchor) {
    if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
        const sa = JSON.stringify(anchor);
        const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
        throw new Error(msg);
    }
    return true;
}
function anchorNames(root) {
    const anchors = /* @__PURE__ */ new Set();
    visit2(root, {
        Value (_key, node) {
            if (node.anchor) anchors.add(node.anchor);
        }
    });
    return anchors;
}
function findNewAnchor(prefix, exclude) {
    for(let i = 1; true; ++i){
        const name = `${prefix}${i}`;
        if (!exclude.has(name)) return name;
    }
}
function createNodeAnchors(doc, prefix) {
    const aliasObjects = [];
    const sourceObjects = /* @__PURE__ */ new Map();
    let prevAnchors = null;
    return {
        onAnchor: (source)=>{
            aliasObjects.push(source);
            if (!prevAnchors) prevAnchors = anchorNames(doc);
            const anchor = findNewAnchor(prefix, prevAnchors);
            prevAnchors.add(anchor);
            return anchor;
        },
        /**
     * With circular references, the source node is only resolved after all
     * of its child nodes are. This is why anchors are set only after all of
     * the nodes have been created.
     */ setAnchors: ()=>{
            for (const source of aliasObjects){
                const ref = sourceObjects.get(source);
                if (typeof ref === "object" && ref.anchor && (isScalar(ref.node) || isCollection(ref.node))) {
                    ref.node.anchor = ref.anchor;
                } else {
                    const error = new Error("Failed to resolve repeated object (this should not happen)");
                    error.source = source;
                    throw error;
                }
            }
        },
        sourceObjects
    };
}
// ../../node_modules/yaml/browser/dist/nodes/Alias.js
var Alias = class extends NodeBase {
    /**
   * Resolve the value of this alias within `doc`, finding the last
   * instance of the `source` anchor before this node.
   */ resolve(doc) {
        let found = void 0;
        visit2(doc, {
            Node: (_key, node)=>{
                if (node === this) return visit2.BREAK;
                if (node.anchor === this.source) found = node;
            }
        });
        return found;
    }
    toJSON(_arg, ctx) {
        if (!ctx) return {
            source: this.source
        };
        const { anchors, doc, maxAliasCount } = ctx;
        const source = this.resolve(doc);
        if (!source) {
            const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
            throw new ReferenceError(msg);
        }
        const data = anchors.get(source);
        if (!data || data.res === void 0) {
            const msg = "This should not happen: Alias anchor was not resolved?";
            throw new ReferenceError(msg);
        }
        if (maxAliasCount >= 0) {
            data.count += 1;
            if (data.aliasCount === 0) data.aliasCount = getAliasCount(doc, source, anchors);
            if (data.count * data.aliasCount > maxAliasCount) {
                const msg = "Excessive alias count indicates a resource exhaustion attack";
                throw new ReferenceError(msg);
            }
        }
        return data.res;
    }
    toString(ctx, _onComment, _onChompKeep) {
        const src = `*${this.source}`;
        if (ctx) {
            anchorIsValid(this.source);
            if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
                throw new Error(msg);
            }
            if (ctx.implicitKey) return `${src} `;
        }
        return src;
    }
    constructor(source){
        super(ALIAS);
        this.source = source;
        Object.defineProperty(this, "tag", {
            set () {
                throw new Error("Alias nodes cannot have tags");
            }
        });
    }
};
function getAliasCount(doc, node, anchors) {
    if (isAlias(node)) {
        const source = node.resolve(doc);
        const anchor = anchors && source && anchors.get(source);
        return anchor ? anchor.count * anchor.aliasCount : 0;
    } else if (isCollection(node)) {
        let count = 0;
        for (const item of node.items){
            const c = getAliasCount(doc, item, anchors);
            if (c > count) count = c;
        }
        return count;
    } else if (isPair(node)) {
        const kc = getAliasCount(doc, node.key, anchors);
        const vc = getAliasCount(doc, node.value, anchors);
        return Math.max(kc, vc);
    }
    return 1;
}
// ../../node_modules/yaml/browser/dist/nodes/toJS.js
function toJS(value1, arg, ctx) {
    if (Array.isArray(value1)) return value1.map((v, i)=>toJS(v, String(i), ctx));
    if (value1 && typeof value1.toJSON === "function") {
        if (!ctx || !hasAnchor(value1)) return value1.toJSON(arg, ctx);
        const data = {
            aliasCount: 0,
            count: 1,
            res: void 0
        };
        ctx.anchors.set(value1, data);
        ctx.onCreate = (res2)=>{
            data.res = res2;
            delete ctx.onCreate;
        };
        const res = value1.toJSON(arg, ctx);
        if (ctx.onCreate) ctx.onCreate(res);
        return res;
    }
    if (typeof value1 === "bigint" && !(ctx == null ? void 0 : ctx.keep)) return Number(value1);
    return value1;
}
// ../../node_modules/yaml/browser/dist/nodes/Scalar.js
var isScalarValue = (value1)=>!value1 || typeof value1 !== "function" && typeof value1 !== "object";
var Scalar = class extends NodeBase {
    toJSON(arg, ctx) {
        return (ctx == null ? void 0 : ctx.keep) ? this.value : toJS(this.value, arg, ctx);
    }
    toString() {
        return String(this.value);
    }
    constructor(value1){
        super(SCALAR);
        this.value = value1;
    }
};
Scalar.BLOCK_FOLDED = "BLOCK_FOLDED";
Scalar.BLOCK_LITERAL = "BLOCK_LITERAL";
Scalar.PLAIN = "PLAIN";
Scalar.QUOTE_DOUBLE = "QUOTE_DOUBLE";
Scalar.QUOTE_SINGLE = "QUOTE_SINGLE";
// ../../node_modules/yaml/browser/dist/doc/createNode.js
var defaultTagPrefix = "tag:yaml.org,2002:";
function findTagObject(value1, tagName, tags) {
    var _a;
    if (tagName) {
        const match = tags.filter((t1)=>t1.tag === tagName);
        const tagObj = (_a = match.find((t1)=>!t1.format)) != null ? _a : match[0];
        if (!tagObj) throw new Error(`Tag ${tagName} not found`);
        return tagObj;
    }
    return tags.find((t1)=>{
        var _a2;
        return ((_a2 = t1.identify) == null ? void 0 : _a2.call(t1, value1)) && !t1.format;
    });
}
function createNode(value1, tagName, ctx) {
    var _a, _b;
    if (isDocument(value1)) value1 = value1.contents;
    if (isNode(value1)) return value1;
    if (isPair(value1)) {
        const map2 = (_b = (_a = ctx.schema[MAP]).createNode) == null ? void 0 : _b.call(_a, ctx.schema, null, ctx);
        map2.items.push(value1);
        return map2;
    }
    if (value1 instanceof String || value1 instanceof Number || value1 instanceof Boolean || typeof BigInt !== "undefined" && value1 instanceof BigInt) {
        value1 = value1.valueOf();
    }
    const { aliasDuplicateObjects, onAnchor, onTagObj, schema: schema4, sourceObjects } = ctx;
    let ref = void 0;
    if (aliasDuplicateObjects && value1 && typeof value1 === "object") {
        ref = sourceObjects.get(value1);
        if (ref) {
            if (!ref.anchor) ref.anchor = onAnchor(value1);
            return new Alias(ref.anchor);
        } else {
            ref = {
                anchor: null,
                node: null
            };
            sourceObjects.set(value1, ref);
        }
    }
    if (tagName == null ? void 0 : tagName.startsWith("!!")) tagName = defaultTagPrefix + tagName.slice(2);
    let tagObj = findTagObject(value1, tagName, schema4.tags);
    if (!tagObj) {
        if (value1 && typeof value1.toJSON === "function") {
            value1 = value1.toJSON();
        }
        if (!value1 || typeof value1 !== "object") {
            const node2 = new Scalar(value1);
            if (ref) ref.node = node2;
            return node2;
        }
        tagObj = value1 instanceof Map ? schema4[MAP] : Symbol.iterator in Object(value1) ? schema4[SEQ] : schema4[MAP];
    }
    if (onTagObj) {
        onTagObj(tagObj);
        delete ctx.onTagObj;
    }
    const node = (tagObj == null ? void 0 : tagObj.createNode) ? tagObj.createNode(ctx.schema, value1, ctx) : new Scalar(value1);
    if (tagName) node.tag = tagName;
    if (ref) ref.node = node;
    return node;
}
// ../../node_modules/yaml/browser/dist/nodes/Collection.js
function collectionFromPath(schema4, path5, value1) {
    let v = value1;
    for(let i = path5.length - 1; i >= 0; --i){
        const k = path5[i];
        if (typeof k === "number" && Number.isInteger(k) && k >= 0) {
            const a2 = [];
            a2[k] = v;
            v = a2;
        } else {
            v = /* @__PURE__ */ new Map([
                [
                    k,
                    v
                ]
            ]);
        }
    }
    return createNode(v, void 0, {
        aliasDuplicateObjects: false,
        keepUndefined: false,
        onAnchor: ()=>{
            throw new Error("This should not happen, please report a bug.");
        },
        schema: schema4,
        sourceObjects: /* @__PURE__ */ new Map()
    });
}
var isEmptyPath = (path5)=>path5 == null || typeof path5 === "object" && !!path5[Symbol.iterator]().next().done;
var Collection = class extends NodeBase {
    /**
   * Create a copy of this collection.
   *
   * @param schema - If defined, overwrites the original's schema
   */ clone(schema4) {
        const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
        if (schema4) copy.schema = schema4;
        copy.items = copy.items.map((it)=>isNode(it) || isPair(it) ? it.clone(schema4) : it);
        if (this.range) copy.range = this.range.slice();
        return copy;
    }
    /**
   * Adds a value to the collection. For `!!map` and `!!omap` the value must
   * be a Pair instance or a `{ key, value }` object, which may not have a key
   * that already exists in the map.
   */ addIn(path5, value1) {
        if (isEmptyPath(path5)) this.add(value1);
        else {
            const [key, ...rest] = path5;
            const node = this.get(key, true);
            if (isCollection(node)) node.addIn(rest, value1);
            else if (node === void 0 && this.schema) this.set(key, collectionFromPath(this.schema, rest, value1));
            else throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
    }
    /**
   * Removes a value from the collection.
   * @returns `true` if the item was found and removed.
   */ deleteIn(path5) {
        const [key, ...rest] = path5;
        if (rest.length === 0) return this.delete(key);
        const node = this.get(key, true);
        if (isCollection(node)) return node.deleteIn(rest);
        else throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
    }
    /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */ getIn(path5, keepScalar) {
        const [key, ...rest] = path5;
        const node = this.get(key, true);
        if (rest.length === 0) return !keepScalar && isScalar(node) ? node.value : node;
        else return isCollection(node) ? node.getIn(rest, keepScalar) : void 0;
    }
    hasAllNullValues(allowScalar) {
        return this.items.every((node)=>{
            if (!isPair(node)) return false;
            const n = node.value;
            return n == null || allowScalar && isScalar(n) && n.value == null && !n.commentBefore && !n.comment && !n.tag;
        });
    }
    /**
   * Checks if the collection includes a value with the key `key`.
   */ hasIn(path5) {
        const [key, ...rest] = path5;
        if (rest.length === 0) return this.has(key);
        const node = this.get(key, true);
        return isCollection(node) ? node.hasIn(rest) : false;
    }
    /**
   * Sets a value in this collection. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */ setIn(path5, value1) {
        const [key, ...rest] = path5;
        if (rest.length === 0) {
            this.set(key, value1);
        } else {
            const node = this.get(key, true);
            if (isCollection(node)) node.setIn(rest, value1);
            else if (node === void 0 && this.schema) this.set(key, collectionFromPath(this.schema, rest, value1));
            else throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
        }
    }
    constructor(type, schema4){
        super(type);
        Object.defineProperty(this, "schema", {
            value: schema4,
            configurable: true,
            enumerable: false,
            writable: true
        });
    }
};
Collection.maxFlowStringSingleLineLength = 60;
// ../../node_modules/yaml/browser/dist/stringify/stringifyComment.js
var stringifyComment = (str)=>str.replace(/^(?!$)(?: $)?/gm, "#");
function indentComment(comment, indent) {
    if (/^\n+$/.test(comment)) return comment.substring(1);
    return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;
}
var lineComment = (str, indent, comment)=>str.endsWith("\n") ? indentComment(comment, indent) : comment.includes("\n") ? "\n" + indentComment(comment, indent) : (str.endsWith(" ") ? "" : " ") + comment;
// ../../node_modules/yaml/browser/dist/stringify/foldFlowLines.js
var FOLD_FLOW = "flow";
var FOLD_BLOCK = "block";
var FOLD_QUOTED = "quoted";
function foldFlowLines(text, indent, mode = "flow", { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {
    if (!lineWidth || lineWidth < 0) return text;
    const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
    if (text.length <= endStep) return text;
    const folds = [];
    const escapedFolds = {};
    let end = lineWidth - indent.length;
    if (typeof indentAtStart === "number") {
        if (indentAtStart > lineWidth - Math.max(2, minContentWidth)) folds.push(0);
        else end = lineWidth - indentAtStart;
    }
    let split = void 0;
    let prev = void 0;
    let overflow = false;
    let i = -1;
    let escStart = -1;
    let escEnd = -1;
    if (mode === FOLD_BLOCK) {
        i = consumeMoreIndentedLines(text, i);
        if (i !== -1) end = i + endStep;
    }
    for(let ch; ch = text[i += 1];){
        if (mode === FOLD_QUOTED && ch === "\\") {
            escStart = i;
            switch(text[i + 1]){
                case "x":
                    i += 3;
                    break;
                case "u":
                    i += 5;
                    break;
                case "U":
                    i += 9;
                    break;
                default:
                    i += 1;
            }
            escEnd = i;
        }
        if (ch === "\n") {
            if (mode === FOLD_BLOCK) i = consumeMoreIndentedLines(text, i);
            end = i + endStep;
            split = void 0;
        } else {
            if (ch === " " && prev && prev !== " " && prev !== "\n" && prev !== "	") {
                const next = text[i + 1];
                if (next && next !== " " && next !== "\n" && next !== "	") split = i;
            }
            if (i >= end) {
                if (split) {
                    folds.push(split);
                    end = split + endStep;
                    split = void 0;
                } else if (mode === FOLD_QUOTED) {
                    while(prev === " " || prev === "	"){
                        prev = ch;
                        ch = text[i += 1];
                        overflow = true;
                    }
                    const j = i > escEnd + 1 ? i - 2 : escStart - 1;
                    if (escapedFolds[j]) return text;
                    folds.push(j);
                    escapedFolds[j] = true;
                    end = j + endStep;
                    split = void 0;
                } else {
                    overflow = true;
                }
            }
        }
        prev = ch;
    }
    if (overflow && onOverflow) onOverflow();
    if (folds.length === 0) return text;
    if (onFold) onFold();
    let res = text.slice(0, folds[0]);
    for(let i2 = 0; i2 < folds.length; ++i2){
        const fold = folds[i2];
        const end2 = folds[i2 + 1] || text.length;
        if (fold === 0) res = `
${indent}${text.slice(0, end2)}`;
        else {
            if (mode === FOLD_QUOTED && escapedFolds[fold]) res += `${text[fold]}\\`;
            res += `
${indent}${text.slice(fold + 1, end2)}`;
        }
    }
    return res;
}
function consumeMoreIndentedLines(text, i) {
    let ch = text[i + 1];
    while(ch === " " || ch === "	"){
        do {
            ch = text[i += 1];
        }while (ch && ch !== "\n")
        ch = text[i + 1];
    }
    return i;
}
// ../../node_modules/yaml/browser/dist/stringify/stringifyString.js
var getFoldOptions = (ctx, isBlock2)=>({
        indentAtStart: isBlock2 ? ctx.indent.length : ctx.indentAtStart,
        lineWidth: ctx.options.lineWidth,
        minContentWidth: ctx.options.minContentWidth
    });
var containsDocumentMarker = (str)=>/^(%|---|\.\.\.)/m.test(str);
function lineLengthOverLimit(str, lineWidth, indentLength) {
    if (!lineWidth || lineWidth < 0) return false;
    const limit = lineWidth - indentLength;
    const strLen = str.length;
    if (strLen <= limit) return false;
    for(let i = 0, start = 0; i < strLen; ++i){
        if (str[i] === "\n") {
            if (i - start > limit) return true;
            start = i + 1;
            if (strLen - start <= limit) return false;
        }
    }
    return true;
}
function doubleQuotedString(value1, ctx) {
    const json = JSON.stringify(value1);
    if (ctx.options.doubleQuotedAsJSON) return json;
    const { implicitKey } = ctx;
    const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
    const indent = ctx.indent || (containsDocumentMarker(value1) ? "  " : "");
    let str = "";
    let start = 0;
    for(let i = 0, ch = json[i]; ch; ch = json[++i]){
        if (ch === " " && json[i + 1] === "\\" && json[i + 2] === "n") {
            str += json.slice(start, i) + "\\ ";
            i += 1;
            start = i;
            ch = "\\";
        }
        if (ch === "\\") switch(json[i + 1]){
            case "u":
                {
                    str += json.slice(start, i);
                    const code = json.substr(i + 2, 4);
                    switch(code){
                        case "0000":
                            str += "\\0";
                            break;
                        case "0007":
                            str += "\\a";
                            break;
                        case "000b":
                            str += "\\v";
                            break;
                        case "001b":
                            str += "\\e";
                            break;
                        case "0085":
                            str += "\\N";
                            break;
                        case "00a0":
                            str += "\\_";
                            break;
                        case "2028":
                            str += "\\L";
                            break;
                        case "2029":
                            str += "\\P";
                            break;
                        default:
                            if (code.substr(0, 2) === "00") str += "\\x" + code.substr(2);
                            else str += json.substr(i, 6);
                    }
                    i += 5;
                    start = i + 1;
                }
                break;
            case "n":
                if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
                    i += 1;
                } else {
                    str += json.slice(start, i) + "\n\n";
                    while(json[i + 2] === "\\" && json[i + 3] === "n" && json[i + 4] !== '"'){
                        str += "\n";
                        i += 2;
                    }
                    str += indent;
                    if (json[i + 2] === " ") str += "\\";
                    i += 1;
                    start = i + 1;
                }
                break;
            default:
                i += 1;
        }
    }
    str = start ? str + json.slice(start) : json;
    return implicitKey ? str : foldFlowLines(str, indent, FOLD_QUOTED, getFoldOptions(ctx, false));
}
function singleQuotedString(value1, ctx) {
    if (ctx.options.singleQuote === false || ctx.implicitKey && value1.includes("\n") || /[ \t]\n|\n[ \t]/.test(value1)) return doubleQuotedString(value1, ctx);
    const indent = ctx.indent || (containsDocumentMarker(value1) ? "  " : "");
    const res = "'" + value1.replace(/'/g, "''").replace(/\n+/g, `$&
${indent}`) + "'";
    return ctx.implicitKey ? res : foldFlowLines(res, indent, FOLD_FLOW, getFoldOptions(ctx, false));
}
function quotedString(value1, ctx) {
    const { singleQuote } = ctx.options;
    let qs;
    if (singleQuote === false) qs = doubleQuotedString;
    else {
        const hasDouble = value1.includes('"');
        const hasSingle = value1.includes("'");
        if (hasDouble && !hasSingle) qs = singleQuotedString;
        else if (hasSingle && !hasDouble) qs = doubleQuotedString;
        else qs = singleQuote ? singleQuotedString : doubleQuotedString;
    }
    return qs(value1, ctx);
}
function blockString({ comment, type, value: value1 }, ctx, onComment, onChompKeep) {
    const { blockQuote, commentString, lineWidth } = ctx.options;
    if (!blockQuote || /\n[\t ]+$/.test(value1) || /^\s*$/.test(value1)) {
        return quotedString(value1, ctx);
    }
    const indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value1) ? "  " : "");
    const literal = blockQuote === "literal" ? true : blockQuote === "folded" || type === Scalar.BLOCK_FOLDED ? false : type === Scalar.BLOCK_LITERAL ? true : !lineLengthOverLimit(value1, lineWidth, indent.length);
    if (!value1) return literal ? "|\n" : ">\n";
    let chomp;
    let endStart;
    for(endStart = value1.length; endStart > 0; --endStart){
        const ch = value1[endStart - 1];
        if (ch !== "\n" && ch !== "	" && ch !== " ") break;
    }
    let end = value1.substring(endStart);
    const endNlPos = end.indexOf("\n");
    if (endNlPos === -1) {
        chomp = "-";
    } else if (value1 === end || endNlPos !== end.length - 1) {
        chomp = "+";
        if (onChompKeep) onChompKeep();
    } else {
        chomp = "";
    }
    if (end) {
        value1 = value1.slice(0, -end.length);
        if (end[end.length - 1] === "\n") end = end.slice(0, -1);
        end = end.replace(/\n+(?!\n|$)/g, `$&${indent}`);
    }
    let startWithSpace = false;
    let startEnd;
    let startNlPos = -1;
    for(startEnd = 0; startEnd < value1.length; ++startEnd){
        const ch = value1[startEnd];
        if (ch === " ") startWithSpace = true;
        else if (ch === "\n") startNlPos = startEnd;
        else break;
    }
    let start = value1.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);
    if (start) {
        value1 = value1.substring(start.length);
        start = start.replace(/\n+/g, `$&${indent}`);
    }
    const indentSize = indent ? "2" : "1";
    let header = (literal ? "|" : ">") + (startWithSpace ? indentSize : "") + chomp;
    if (comment) {
        header += " " + commentString(comment.replace(/ ?[\r\n]+/g, " "));
        if (onComment) onComment();
    }
    if (literal) {
        value1 = value1.replace(/\n+/g, `$&${indent}`);
        return `${header}
${indent}${start}${value1}${end}`;
    }
    value1 = value1.replace(/\n+/g, "\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `$&${indent}`);
    const body = foldFlowLines(`${start}${value1}${end}`, indent, FOLD_BLOCK, getFoldOptions(ctx, true));
    return `${header}
${indent}${body}`;
}
function plainString(item, ctx, onComment, onChompKeep) {
    const { type, value: value1 } = item;
    const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;
    if (implicitKey && /[\n[\]{},]/.test(value1) || inFlow && /[[\]{},]/.test(value1)) {
        return quotedString(value1, ctx);
    }
    if (!value1 || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value1)) {
        return implicitKey || inFlow || !value1.includes("\n") ? quotedString(value1, ctx) : blockString(item, ctx, onComment, onChompKeep);
    }
    if (!implicitKey && !inFlow && type !== Scalar.PLAIN && value1.includes("\n")) {
        return blockString(item, ctx, onComment, onChompKeep);
    }
    if (containsDocumentMarker(value1)) {
        if (indent === "") {
            ctx.forceBlockIndent = true;
            return blockString(item, ctx, onComment, onChompKeep);
        } else if (implicitKey && indent === indentStep) {
            return quotedString(value1, ctx);
        }
    }
    const str = value1.replace(/\n+/g, `$&
${indent}`);
    if (actualString) {
        const test = (tag)=>{
            var _a;
            return tag.default && tag.tag !== "tag:yaml.org,2002:str" && ((_a = tag.test) == null ? void 0 : _a.test(str));
        };
        const { compat, tags } = ctx.doc.schema;
        if (tags.some(test) || (compat == null ? void 0 : compat.some(test))) return quotedString(value1, ctx);
    }
    return implicitKey ? str : foldFlowLines(str, indent, FOLD_FLOW, getFoldOptions(ctx, false));
}
function stringifyString(item, ctx, onComment, onChompKeep) {
    const { implicitKey, inFlow } = ctx;
    const ss = typeof item.value === "string" ? item : Object.assign({}, item, {
        value: String(item.value)
    });
    let { type } = item;
    if (type !== Scalar.QUOTE_DOUBLE) {
        if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value)) type = Scalar.QUOTE_DOUBLE;
    }
    const _stringify = (_type)=>{
        switch(_type){
            case Scalar.BLOCK_FOLDED:
            case Scalar.BLOCK_LITERAL:
                return implicitKey || inFlow ? quotedString(ss.value, ctx) : blockString(ss, ctx, onComment, onChompKeep);
            case Scalar.QUOTE_DOUBLE:
                return doubleQuotedString(ss.value, ctx);
            case Scalar.QUOTE_SINGLE:
                return singleQuotedString(ss.value, ctx);
            case Scalar.PLAIN:
                return plainString(ss, ctx, onComment, onChompKeep);
            default:
                return null;
        }
    };
    let res = _stringify(type);
    if (res === null) {
        const { defaultKeyType, defaultStringType } = ctx.options;
        const t1 = implicitKey && defaultKeyType || defaultStringType;
        res = _stringify(t1);
        if (res === null) throw new Error(`Unsupported default string type ${t1}`);
    }
    return res;
}
// ../../node_modules/yaml/browser/dist/stringify/stringify.js
function createStringifyContext(doc, options) {
    const opt = Object.assign({
        blockQuote: true,
        commentString: stringifyComment,
        defaultKeyType: null,
        defaultStringType: "PLAIN",
        directives: null,
        doubleQuotedAsJSON: false,
        doubleQuotedMinMultiLineLength: 40,
        falseStr: "false",
        flowCollectionPadding: true,
        indentSeq: true,
        lineWidth: 80,
        minContentWidth: 20,
        nullStr: "null",
        simpleKeys: false,
        singleQuote: null,
        trueStr: "true",
        verifyAliasOrder: true
    }, doc.schema.toStringOptions, options);
    let inFlow;
    switch(opt.collectionStyle){
        case "block":
            inFlow = false;
            break;
        case "flow":
            inFlow = true;
            break;
        default:
            inFlow = null;
    }
    return {
        anchors: /* @__PURE__ */ new Set(),
        doc,
        flowCollectionPadding: opt.flowCollectionPadding ? " " : "",
        indent: "",
        indentStep: typeof opt.indent === "number" ? " ".repeat(opt.indent) : "  ",
        inFlow,
        options: opt
    };
}
function getTagObject(tags, item) {
    var _a, _b, _c, _d;
    if (item.tag) {
        const match = tags.filter((t1)=>t1.tag === item.tag);
        if (match.length > 0) return (_a = match.find((t1)=>t1.format === item.format)) != null ? _a : match[0];
    }
    let tagObj = void 0;
    let obj;
    if (isScalar(item)) {
        obj = item.value;
        const match = tags.filter((t1)=>{
            var _a2;
            return (_a2 = t1.identify) == null ? void 0 : _a2.call(t1, obj);
        });
        tagObj = (_b = match.find((t1)=>t1.format === item.format)) != null ? _b : match.find((t1)=>!t1.format);
    } else {
        obj = item;
        tagObj = tags.find((t1)=>t1.nodeClass && obj instanceof t1.nodeClass);
    }
    if (!tagObj) {
        const name = (_d = (_c = obj == null ? void 0 : obj.constructor) == null ? void 0 : _c.name) != null ? _d : typeof obj;
        throw new Error(`Tag not resolved for ${name} value`);
    }
    return tagObj;
}
function stringifyProps(node, tagObj, { anchors, doc }) {
    if (!doc.directives) return "";
    const props = [];
    const anchor = (isScalar(node) || isCollection(node)) && node.anchor;
    if (anchor && anchorIsValid(anchor)) {
        anchors.add(anchor);
        props.push(`&${anchor}`);
    }
    const tag = node.tag ? node.tag : tagObj.default ? null : tagObj.tag;
    if (tag) props.push(doc.directives.tagString(tag));
    return props.join(" ");
}
function stringify(item, ctx, onComment, onChompKeep) {
    var _a, _b;
    if (isPair(item)) return item.toString(ctx, onComment, onChompKeep);
    if (isAlias(item)) {
        if (ctx.doc.directives) return item.toString(ctx);
        if ((_a = ctx.resolvedAliases) == null ? void 0 : _a.has(item)) {
            throw new TypeError(`Cannot stringify circular structure without alias nodes`);
        } else {
            if (ctx.resolvedAliases) ctx.resolvedAliases.add(item);
            else ctx.resolvedAliases = /* @__PURE__ */ new Set([
                item
            ]);
            item = item.resolve(ctx.doc);
        }
    }
    let tagObj = void 0;
    const node = isNode(item) ? item : ctx.doc.createNode(item, {
        onTagObj: (o)=>tagObj = o
    });
    if (!tagObj) tagObj = getTagObject(ctx.doc.schema.tags, node);
    const props = stringifyProps(node, tagObj, ctx);
    if (props.length > 0) ctx.indentAtStart = ((_b = ctx.indentAtStart) != null ? _b : 0) + props.length + 1;
    const str = typeof tagObj.stringify === "function" ? tagObj.stringify(node, ctx, onComment, onChompKeep) : isScalar(node) ? stringifyString(node, ctx, onComment, onChompKeep) : node.toString(ctx, onComment, onChompKeep);
    if (!props) return str;
    return isScalar(node) || str[0] === "{" || str[0] === "[" ? `${props} ${str}` : `${props}
${ctx.indent}${str}`;
}
// ../../node_modules/yaml/browser/dist/stringify/stringifyPair.js
function stringifyPair({ key, value: value1 }, ctx, onComment, onChompKeep) {
    var _a, _b;
    const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;
    let keyComment = isNode(key) && key.comment || null;
    if (simpleKeys) {
        if (keyComment) {
            throw new Error("With simple keys, key nodes cannot have comments");
        }
        if (isCollection(key)) {
            const msg = "With simple keys, collection cannot be used as a key value";
            throw new Error(msg);
        }
    }
    let explicitKey = !simpleKeys && (!key || keyComment && value1 == null && !ctx.inFlow || isCollection(key) || (isScalar(key) ? key.type === Scalar.BLOCK_FOLDED || key.type === Scalar.BLOCK_LITERAL : typeof key === "object"));
    ctx = Object.assign({}, ctx, {
        allNullValues: false,
        implicitKey: !explicitKey && (simpleKeys || !allNullValues),
        indent: indent + indentStep
    });
    let keyCommentDone = false;
    let chompKeep = false;
    let str = stringify(key, ctx, ()=>keyCommentDone = true, ()=>chompKeep = true);
    if (!explicitKey && !ctx.inFlow && str.length > 1024) {
        if (simpleKeys) throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
        explicitKey = true;
    }
    if (ctx.inFlow) {
        if (allNullValues || value1 == null) {
            if (keyCommentDone && onComment) onComment();
            return str === "" ? "?" : explicitKey ? `? ${str}` : str;
        }
    } else if (allNullValues && !simpleKeys || value1 == null && explicitKey) {
        str = `? ${str}`;
        if (keyComment && !keyCommentDone) {
            str += lineComment(str, ctx.indent, commentString(keyComment));
        } else if (chompKeep && onChompKeep) onChompKeep();
        return str;
    }
    if (keyCommentDone) keyComment = null;
    if (explicitKey) {
        if (keyComment) str += lineComment(str, ctx.indent, commentString(keyComment));
        str = `? ${str}
${indent}:`;
    } else {
        str = `${str}:`;
        if (keyComment) str += lineComment(str, ctx.indent, commentString(keyComment));
    }
    let vsb, vcb, valueComment;
    if (isNode(value1)) {
        vsb = !!value1.spaceBefore;
        vcb = value1.commentBefore;
        valueComment = value1.comment;
    } else {
        vsb = false;
        vcb = null;
        valueComment = null;
        if (value1 && typeof value1 === "object") value1 = doc.createNode(value1);
    }
    ctx.implicitKey = false;
    if (!explicitKey && !keyComment && isScalar(value1)) ctx.indentAtStart = str.length + 1;
    chompKeep = false;
    if (!indentSeq && indentStep.length >= 2 && !ctx.inFlow && !explicitKey && isSeq(value1) && !value1.flow && !value1.tag && !value1.anchor) {
        ctx.indent = ctx.indent.substring(2);
    }
    let valueCommentDone = false;
    const valueStr = stringify(value1, ctx, ()=>valueCommentDone = true, ()=>chompKeep = true);
    let ws = " ";
    if (keyComment || vsb || vcb) {
        ws = vsb ? "\n" : "";
        if (vcb) {
            const cs = commentString(vcb);
            ws += `
${indentComment(cs, ctx.indent)}`;
        }
        if (valueStr === "" && !ctx.inFlow) {
            if (ws === "\n") ws = "\n\n";
        } else {
            ws += `
${ctx.indent}`;
        }
    } else if (!explicitKey && isCollection(value1)) {
        const vs0 = valueStr[0];
        const nl0 = valueStr.indexOf("\n");
        const hasNewline = nl0 !== -1;
        const flow = (_b = (_a = ctx.inFlow) != null ? _a : value1.flow) != null ? _b : value1.items.length === 0;
        if (hasNewline || !flow) {
            let hasPropsLine = false;
            if (hasNewline && (vs0 === "&" || vs0 === "!")) {
                let sp0 = valueStr.indexOf(" ");
                if (vs0 === "&" && sp0 !== -1 && sp0 < nl0 && valueStr[sp0 + 1] === "!") {
                    sp0 = valueStr.indexOf(" ", sp0 + 1);
                }
                if (sp0 === -1 || nl0 < sp0) hasPropsLine = true;
            }
            if (!hasPropsLine) ws = `
${ctx.indent}`;
        }
    } else if (valueStr === "" || valueStr[0] === "\n") {
        ws = "";
    }
    str += ws + valueStr;
    if (ctx.inFlow) {
        if (valueCommentDone && onComment) onComment();
    } else if (valueComment && !valueCommentDone) {
        str += lineComment(str, ctx.indent, commentString(valueComment));
    } else if (chompKeep && onChompKeep) {
        onChompKeep();
    }
    return str;
}
// ../../node_modules/yaml/browser/dist/log.js
function warn(logLevel, warning) {
    if (logLevel === "debug" || logLevel === "warn") {
        if (typeof process !== "undefined" && process.emitWarning) process.emitWarning(warning);
        else console.warn(warning);
    }
}
// ../../node_modules/yaml/browser/dist/nodes/addPairToJSMap.js
var MERGE_KEY = "<<";
function addPairToJSMap(ctx, map2, { key, value: value1 }) {
    if ((ctx == null ? void 0 : ctx.doc.schema.merge) && isMergeKey(key)) {
        value1 = isAlias(value1) ? value1.resolve(ctx.doc) : value1;
        if (isSeq(value1)) for (const it of value1.items)mergeToJSMap(ctx, map2, it);
        else if (Array.isArray(value1)) for (const it of value1)mergeToJSMap(ctx, map2, it);
        else mergeToJSMap(ctx, map2, value1);
    } else {
        const jsKey = toJS(key, "", ctx);
        if (map2 instanceof Map) {
            map2.set(jsKey, toJS(value1, jsKey, ctx));
        } else if (map2 instanceof Set) {
            map2.add(jsKey);
        } else {
            const stringKey = stringifyKey(key, jsKey, ctx);
            const jsValue = toJS(value1, stringKey, ctx);
            if (stringKey in map2) Object.defineProperty(map2, stringKey, {
                value: jsValue,
                writable: true,
                enumerable: true,
                configurable: true
            });
            else map2[stringKey] = jsValue;
        }
    }
    return map2;
}
var isMergeKey = (key)=>key === MERGE_KEY || isScalar(key) && key.value === MERGE_KEY && (!key.type || key.type === Scalar.PLAIN);
function mergeToJSMap(ctx, map2, value1) {
    const source = ctx && isAlias(value1) ? value1.resolve(ctx.doc) : value1;
    if (!isMap(source)) throw new Error("Merge sources must be maps or map aliases");
    const srcMap = source.toJSON(null, ctx, Map);
    for (const [key, value2] of srcMap){
        if (map2 instanceof Map) {
            if (!map2.has(key)) map2.set(key, value2);
        } else if (map2 instanceof Set) {
            map2.add(key);
        } else if (!Object.prototype.hasOwnProperty.call(map2, key)) {
            Object.defineProperty(map2, key, {
                value: value2,
                writable: true,
                enumerable: true,
                configurable: true
            });
        }
    }
    return map2;
}
function stringifyKey(key, jsKey, ctx) {
    if (jsKey === null) return "";
    if (typeof jsKey !== "object") return String(jsKey);
    if (isNode(key) && ctx && ctx.doc) {
        const strCtx = createStringifyContext(ctx.doc, {});
        strCtx.anchors = /* @__PURE__ */ new Set();
        for (const node of ctx.anchors.keys())strCtx.anchors.add(node.anchor);
        strCtx.inFlow = true;
        strCtx.inStringifyKey = true;
        const strKey = key.toString(strCtx);
        if (!ctx.mapKeyWarned) {
            let jsonStr = JSON.stringify(strKey);
            if (jsonStr.length > 40) jsonStr = jsonStr.substring(0, 36) + '..."';
            warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
            ctx.mapKeyWarned = true;
        }
        return strKey;
    }
    return JSON.stringify(jsKey);
}
// ../../node_modules/yaml/browser/dist/nodes/Pair.js
function createPair(key, value1, ctx) {
    const k = createNode(key, void 0, ctx);
    const v = createNode(value1, void 0, ctx);
    return new Pair(k, v);
}
var Pair = class _Pair {
    clone(schema4) {
        let { key, value: value1 } = this;
        if (isNode(key)) key = key.clone(schema4);
        if (isNode(value1)) value1 = value1.clone(schema4);
        return new _Pair(key, value1);
    }
    toJSON(_2, ctx) {
        const pair = (ctx == null ? void 0 : ctx.mapAsMap) ? /* @__PURE__ */ new Map() : {};
        return addPairToJSMap(ctx, pair, this);
    }
    toString(ctx, onComment, onChompKeep) {
        return (ctx == null ? void 0 : ctx.doc) ? stringifyPair(this, ctx, onComment, onChompKeep) : JSON.stringify(this);
    }
    constructor(key, value1 = null){
        Object.defineProperty(this, NODE_TYPE, {
            value: PAIR
        });
        this.key = key;
        this.value = value1;
    }
};
// ../../node_modules/yaml/browser/dist/stringify/stringifyCollection.js
function stringifyCollection(collection, ctx, options) {
    var _a;
    const flow = (_a = ctx.inFlow) != null ? _a : collection.flow;
    const stringify4 = flow ? stringifyFlowCollection : stringifyBlockCollection;
    return stringify4(collection, ctx, options);
}
function stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {
    const { indent, options: { commentString } } = ctx;
    const itemCtx = Object.assign({}, ctx, {
        indent: itemIndent,
        type: null
    });
    let chompKeep = false;
    const lines = [];
    for(let i = 0; i < items.length; ++i){
        const item = items[i];
        let comment2 = null;
        if (isNode(item)) {
            if (!chompKeep && item.spaceBefore) lines.push("");
            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);
            if (item.comment) comment2 = item.comment;
        } else if (isPair(item)) {
            const ik = isNode(item.key) ? item.key : null;
            if (ik) {
                if (!chompKeep && ik.spaceBefore) lines.push("");
                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);
            }
        }
        chompKeep = false;
        let str2 = stringify(item, itemCtx, ()=>comment2 = null, ()=>chompKeep = true);
        if (comment2) str2 += lineComment(str2, itemIndent, commentString(comment2));
        if (chompKeep && comment2) chompKeep = false;
        lines.push(blockItemPrefix + str2);
    }
    let str;
    if (lines.length === 0) {
        str = flowChars.start + flowChars.end;
    } else {
        str = lines[0];
        for(let i = 1; i < lines.length; ++i){
            const line = lines[i];
            str += line ? `
${indent}${line}` : "\n";
        }
    }
    if (comment) {
        str += "\n" + indentComment(commentString(comment), indent);
        if (onComment) onComment();
    } else if (chompKeep && onChompKeep) onChompKeep();
    return str;
}
function stringifyFlowCollection({ comment, items }, ctx, { flowChars, itemIndent, onComment }) {
    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;
    itemIndent += indentStep;
    const itemCtx = Object.assign({}, ctx, {
        indent: itemIndent,
        inFlow: true,
        type: null
    });
    let reqNewline = false;
    let linesAtValue = 0;
    const lines = [];
    for(let i = 0; i < items.length; ++i){
        const item = items[i];
        let comment2 = null;
        if (isNode(item)) {
            if (item.spaceBefore) lines.push("");
            addCommentBefore(ctx, lines, item.commentBefore, false);
            if (item.comment) comment2 = item.comment;
        } else if (isPair(item)) {
            const ik = isNode(item.key) ? item.key : null;
            if (ik) {
                if (ik.spaceBefore) lines.push("");
                addCommentBefore(ctx, lines, ik.commentBefore, false);
                if (ik.comment) reqNewline = true;
            }
            const iv = isNode(item.value) ? item.value : null;
            if (iv) {
                if (iv.comment) comment2 = iv.comment;
                if (iv.commentBefore) reqNewline = true;
            } else if (item.value == null && ik && ik.comment) {
                comment2 = ik.comment;
            }
        }
        if (comment2) reqNewline = true;
        let str2 = stringify(item, itemCtx, ()=>comment2 = null);
        if (i < items.length - 1) str2 += ",";
        if (comment2) str2 += lineComment(str2, itemIndent, commentString(comment2));
        if (!reqNewline && (lines.length > linesAtValue || str2.includes("\n"))) reqNewline = true;
        lines.push(str2);
        linesAtValue = lines.length;
    }
    let str;
    const { start, end } = flowChars;
    if (lines.length === 0) {
        str = start + end;
    } else {
        if (!reqNewline) {
            const len = lines.reduce((sum, line)=>sum + line.length + 2, 2);
            reqNewline = len > Collection.maxFlowStringSingleLineLength;
        }
        if (reqNewline) {
            str = start;
            for (const line of lines)str += line ? `
${indentStep}${indent}${line}` : "\n";
            str += `
${indent}${end}`;
        } else {
            str = `${start}${fcPadding}${lines.join(" ")}${fcPadding}${end}`;
        }
    }
    if (comment) {
        str += lineComment(str, indent, commentString(comment));
        if (onComment) onComment();
    }
    return str;
}
function addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {
    if (comment && chompKeep) comment = comment.replace(/^\n+/, "");
    if (comment) {
        const ic = indentComment(commentString(comment), indent);
        lines.push(ic.trimStart());
    }
}
// ../../node_modules/yaml/browser/dist/nodes/YAMLMap.js
function findPair(items, key) {
    const k = isScalar(key) ? key.value : key;
    for (const it of items){
        if (isPair(it)) {
            if (it.key === key || it.key === k) return it;
            if (isScalar(it.key) && it.key.value === k) return it;
        }
    }
    return void 0;
}
var YAMLMap = class extends Collection {
    static get tagName() {
        return "tag:yaml.org,2002:map";
    }
    /**
   * Adds a value to the collection.
   *
   * @param overwrite - If not set `true`, using a key that is already in the
   *   collection will throw. Otherwise, overwrites the previous value.
   */ add(pair, overwrite) {
        var _a;
        let _pair;
        if (isPair(pair)) _pair = pair;
        else if (!pair || typeof pair !== "object" || !("key" in pair)) {
            _pair = new Pair(pair, pair == null ? void 0 : pair.value);
        } else _pair = new Pair(pair.key, pair.value);
        const prev = findPair(this.items, _pair.key);
        const sortEntries = (_a = this.schema) == null ? void 0 : _a.sortMapEntries;
        if (prev) {
            if (!overwrite) throw new Error(`Key ${_pair.key} already set`);
            if (isScalar(prev.value) && isScalarValue(_pair.value)) prev.value.value = _pair.value;
            else prev.value = _pair.value;
        } else if (sortEntries) {
            const i = this.items.findIndex((item)=>sortEntries(_pair, item) < 0);
            if (i === -1) this.items.push(_pair);
            else this.items.splice(i, 0, _pair);
        } else {
            this.items.push(_pair);
        }
    }
    delete(key) {
        const it = findPair(this.items, key);
        if (!it) return false;
        const del = this.items.splice(this.items.indexOf(it), 1);
        return del.length > 0;
    }
    get(key, keepScalar) {
        var _a;
        const it = findPair(this.items, key);
        const node = it == null ? void 0 : it.value;
        return (_a = !keepScalar && isScalar(node) ? node.value : node) != null ? _a : void 0;
    }
    has(key) {
        return !!findPair(this.items, key);
    }
    set(key, value1) {
        this.add(new Pair(key, value1), true);
    }
    /**
   * @param ctx - Conversion context, originally set in Document#toJS()
   * @param {Class} Type - If set, forces the returned collection type
   * @returns Instance of Type, Map, or Object
   */ toJSON(_2, ctx, Type) {
        const map2 = Type ? new Type() : (ctx == null ? void 0 : ctx.mapAsMap) ? /* @__PURE__ */ new Map() : {};
        if (ctx == null ? void 0 : ctx.onCreate) ctx.onCreate(map2);
        for (const item of this.items)addPairToJSMap(ctx, map2, item);
        return map2;
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx) return JSON.stringify(this);
        for (const item of this.items){
            if (!isPair(item)) throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
        }
        if (!ctx.allNullValues && this.hasAllNullValues(false)) ctx = Object.assign({}, ctx, {
            allNullValues: true
        });
        return stringifyCollection(this, ctx, {
            blockItemPrefix: "",
            flowChars: {
                start: "{",
                end: "}"
            },
            itemIndent: ctx.indent || "",
            onChompKeep,
            onComment
        });
    }
    constructor(schema4){
        super(MAP, schema4);
        this.items = [];
    }
};
// ../../node_modules/yaml/browser/dist/schema/common/map.js
function createMap(schema4, obj, ctx) {
    const { keepUndefined, replacer } = ctx;
    const map2 = new YAMLMap(schema4);
    const add = (key, value1)=>{
        if (typeof replacer === "function") value1 = replacer.call(obj, key, value1);
        else if (Array.isArray(replacer) && !replacer.includes(key)) return;
        if (value1 !== void 0 || keepUndefined) map2.items.push(createPair(key, value1, ctx));
    };
    if (obj instanceof Map) {
        for (const [key, value1] of obj)add(key, value1);
    } else if (obj && typeof obj === "object") {
        for (const key of Object.keys(obj))add(key, obj[key]);
    }
    if (typeof schema4.sortMapEntries === "function") {
        map2.items.sort(schema4.sortMapEntries);
    }
    return map2;
}
var map = {
    collection: "map",
    createNode: createMap,
    default: true,
    nodeClass: YAMLMap,
    tag: "tag:yaml.org,2002:map",
    resolve (map2, onError) {
        if (!isMap(map2)) onError("Expected a mapping for this tag");
        return map2;
    }
};
// ../../node_modules/yaml/browser/dist/nodes/YAMLSeq.js
var YAMLSeq = class extends Collection {
    static get tagName() {
        return "tag:yaml.org,2002:seq";
    }
    add(value1) {
        this.items.push(value1);
    }
    /**
   * Removes a value from the collection.
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   *
   * @returns `true` if the item was found and removed.
   */ delete(key) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number") return false;
        const del = this.items.splice(idx, 1);
        return del.length > 0;
    }
    get(key, keepScalar) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number") return void 0;
        const it = this.items[idx];
        return !keepScalar && isScalar(it) ? it.value : it;
    }
    /**
   * Checks if the collection includes a value with the key `key`.
   *
   * `key` must contain a representation of an integer for this to succeed.
   * It may be wrapped in a `Scalar`.
   */ has(key) {
        const idx = asItemIndex(key);
        return typeof idx === "number" && idx < this.items.length;
    }
    /**
   * Sets a value in this collection. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   *
   * If `key` does not contain a representation of an integer, this will throw.
   * It may be wrapped in a `Scalar`.
   */ set(key, value1) {
        const idx = asItemIndex(key);
        if (typeof idx !== "number") throw new Error(`Expected a valid index, not ${key}.`);
        const prev = this.items[idx];
        if (isScalar(prev) && isScalarValue(value1)) prev.value = value1;
        else this.items[idx] = value1;
    }
    toJSON(_2, ctx) {
        const seq2 = [];
        if (ctx == null ? void 0 : ctx.onCreate) ctx.onCreate(seq2);
        let i = 0;
        for (const item of this.items)seq2.push(toJS(item, String(i++), ctx));
        return seq2;
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx) return JSON.stringify(this);
        return stringifyCollection(this, ctx, {
            blockItemPrefix: "- ",
            flowChars: {
                start: "[",
                end: "]"
            },
            itemIndent: (ctx.indent || "") + "  ",
            onChompKeep,
            onComment
        });
    }
    constructor(schema4){
        super(SEQ, schema4);
        this.items = [];
    }
};
function asItemIndex(key) {
    let idx = isScalar(key) ? key.value : key;
    if (idx && typeof idx === "string") idx = Number(idx);
    return typeof idx === "number" && Number.isInteger(idx) && idx >= 0 ? idx : null;
}
// ../../node_modules/yaml/browser/dist/schema/common/seq.js
function createSeq(schema4, obj, ctx) {
    const { replacer } = ctx;
    const seq2 = new YAMLSeq(schema4);
    if (obj && Symbol.iterator in Object(obj)) {
        let i = 0;
        for (let it of obj){
            if (typeof replacer === "function") {
                const key = obj instanceof Set ? it : String(i++);
                it = replacer.call(obj, key, it);
            }
            seq2.items.push(createNode(it, void 0, ctx));
        }
    }
    return seq2;
}
var seq = {
    collection: "seq",
    createNode: createSeq,
    default: true,
    nodeClass: YAMLSeq,
    tag: "tag:yaml.org,2002:seq",
    resolve (seq2, onError) {
        if (!isSeq(seq2)) onError("Expected a sequence for this tag");
        return seq2;
    }
};
// ../../node_modules/yaml/browser/dist/schema/common/string.js
var string = {
    identify: (value1)=>typeof value1 === "string",
    default: true,
    tag: "tag:yaml.org,2002:str",
    resolve: (str)=>str,
    stringify (item, ctx, onComment, onChompKeep) {
        ctx = Object.assign({
            actualString: true
        }, ctx);
        return stringifyString(item, ctx, onComment, onChompKeep);
    }
};
// ../../node_modules/yaml/browser/dist/schema/common/null.js
var nullTag = {
    identify: (value1)=>value1 == null,
    createNode: ()=>new Scalar(null),
    default: true,
    tag: "tag:yaml.org,2002:null",
    test: /^(?:~|[Nn]ull|NULL)?$/,
    resolve: ()=>new Scalar(null),
    stringify: ({ source }, ctx)=>typeof source === "string" && nullTag.test.test(source) ? source : ctx.options.nullStr
};
// ../../node_modules/yaml/browser/dist/schema/core/bool.js
var boolTag = {
    identify: (value1)=>typeof value1 === "boolean",
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
    resolve: (str)=>new Scalar(str[0] === "t" || str[0] === "T"),
    stringify ({ source, value: value1 }, ctx) {
        if (source && boolTag.test.test(source)) {
            const sv = source[0] === "t" || source[0] === "T";
            if (value1 === sv) return source;
        }
        return value1 ? ctx.options.trueStr : ctx.options.falseStr;
    }
};
// ../../node_modules/yaml/browser/dist/stringify/stringifyNumber.js
function stringifyNumber({ format: format5, minFractionDigits, tag, value: value1 }) {
    if (typeof value1 === "bigint") return String(value1);
    const num = typeof value1 === "number" ? value1 : Number(value1);
    if (!isFinite(num)) return isNaN(num) ? ".nan" : num < 0 ? "-.inf" : ".inf";
    let n = JSON.stringify(value1);
    if (!format5 && minFractionDigits && (!tag || tag === "tag:yaml.org,2002:float") && /^\d/.test(n)) {
        let i = n.indexOf(".");
        if (i < 0) {
            i = n.length;
            n += ".";
        }
        let d = minFractionDigits - (n.length - i - 1);
        while(d-- > 0)n += "0";
    }
    return n;
}
// ../../node_modules/yaml/browser/dist/schema/core/float.js
var floatNaN = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^(?:[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN))$/,
    resolve: (str)=>str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber
};
var floatExp = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "EXP",
    test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
    resolve: (str)=>parseFloat(str),
    stringify (node) {
        const num = Number(node.value);
        return isFinite(num) ? num.toExponential() : stringifyNumber(node);
    }
};
var lib_float = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
    resolve (str) {
        const node = new Scalar(parseFloat(str));
        const dot = str.indexOf(".");
        if (dot !== -1 && str[str.length - 1] === "0") node.minFractionDigits = str.length - dot - 1;
        return node;
    },
    stringify: stringifyNumber
};
// ../../node_modules/yaml/browser/dist/schema/core/int.js
var intIdentify = (value1)=>typeof value1 === "bigint" || Number.isInteger(value1);
var intResolve = (str, offset, radix, { intAsBigInt })=>intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);
function intStringify(node, radix, prefix) {
    const { value: value1 } = node;
    if (intIdentify(value1) && value1 >= 0) return prefix + value1.toString(radix);
    return stringifyNumber(node);
}
var intOct = {
    identify: (value1)=>intIdentify(value1) && value1 >= 0,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "OCT",
    test: /^0o[0-7]+$/,
    resolve: (str, _onError, opt)=>intResolve(str, 2, 8, opt),
    stringify: (node)=>intStringify(node, 8, "0o")
};
var lib_int = {
    identify: intIdentify,
    default: true,
    tag: "tag:yaml.org,2002:int",
    test: /^[-+]?[0-9]+$/,
    resolve: (str, _onError, opt)=>intResolve(str, 0, 10, opt),
    stringify: stringifyNumber
};
var intHex = {
    identify: (value1)=>intIdentify(value1) && value1 >= 0,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "HEX",
    test: /^0x[0-9a-fA-F]+$/,
    resolve: (str, _onError, opt)=>intResolve(str, 2, 16, opt),
    stringify: (node)=>intStringify(node, 16, "0x")
};
// ../../node_modules/yaml/browser/dist/schema/core/schema.js
var schema = [
    map,
    seq,
    string,
    nullTag,
    boolTag,
    intOct,
    lib_int,
    intHex,
    floatNaN,
    floatExp,
    lib_float
];
// ../../node_modules/yaml/browser/dist/schema/json/schema.js
function intIdentify2(value1) {
    return typeof value1 === "bigint" || Number.isInteger(value1);
}
var stringifyJSON = ({ value: value1 })=>JSON.stringify(value1);
var jsonScalars = [
    {
        identify: (value1)=>typeof value1 === "string",
        default: true,
        tag: "tag:yaml.org,2002:str",
        resolve: (str)=>str,
        stringify: stringifyJSON
    },
    {
        identify: (value1)=>value1 == null,
        createNode: ()=>new Scalar(null),
        default: true,
        tag: "tag:yaml.org,2002:null",
        test: /^null$/,
        resolve: ()=>null,
        stringify: stringifyJSON
    },
    {
        identify: (value1)=>typeof value1 === "boolean",
        default: true,
        tag: "tag:yaml.org,2002:bool",
        test: /^true|false$/,
        resolve: (str)=>str === "true",
        stringify: stringifyJSON
    },
    {
        identify: intIdentify2,
        default: true,
        tag: "tag:yaml.org,2002:int",
        test: /^-?(?:0|[1-9][0-9]*)$/,
        resolve: (str, _onError, { intAsBigInt })=>intAsBigInt ? BigInt(str) : parseInt(str, 10),
        stringify: ({ value: value1 })=>intIdentify2(value1) ? value1.toString() : JSON.stringify(value1)
    },
    {
        identify: (value1)=>typeof value1 === "number",
        default: true,
        tag: "tag:yaml.org,2002:float",
        test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
        resolve: (str)=>parseFloat(str),
        stringify: stringifyJSON
    }
];
var jsonError = {
    default: true,
    tag: "",
    test: /^/,
    resolve (str, onError) {
        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
        return str;
    }
};
var schema2 = [
    map,
    seq
].concat(jsonScalars, jsonError);
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/binary.js
var binary = {
    identify: (value1)=>value1 instanceof Uint8Array,
    default: false,
    tag: "tag:yaml.org,2002:binary",
    /**
   * Returns a Buffer in node and an Uint8Array in browsers
   *
   * To use the resulting buffer as an image, you'll want to do something like:
   *
   *   const blob = new Blob([buffer], { type: 'image/jpeg' })
   *   document.querySelector('#photo').src = URL.createObjectURL(blob)
   */ resolve (src, onError) {
        if (typeof Buffer === "function") {
            return Buffer.from(src, "base64");
        } else if (typeof atob === "function") {
            const str = atob(src.replace(/[\n\r]/g, ""));
            const buffer = new Uint8Array(str.length);
            for(let i = 0; i < str.length; ++i)buffer[i] = str.charCodeAt(i);
            return buffer;
        } else {
            onError("This environment does not support reading binary tags; either Buffer or atob is required");
            return src;
        }
    },
    stringify ({ comment, type, value: value1 }, ctx, onComment, onChompKeep) {
        const buf = value1;
        let str;
        if (typeof Buffer === "function") {
            str = buf instanceof Buffer ? buf.toString("base64") : Buffer.from(buf.buffer).toString("base64");
        } else if (typeof btoa === "function") {
            let s = "";
            for(let i = 0; i < buf.length; ++i)s += String.fromCharCode(buf[i]);
            str = btoa(s);
        } else {
            throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
        }
        if (!type) type = Scalar.BLOCK_LITERAL;
        if (type !== Scalar.QUOTE_DOUBLE) {
            const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
            const n = Math.ceil(str.length / lineWidth);
            const lines = new Array(n);
            for(let i = 0, o = 0; i < n; ++i, o += lineWidth){
                lines[i] = str.substr(o, lineWidth);
            }
            str = lines.join(type === Scalar.BLOCK_LITERAL ? "\n" : " ");
        }
        return stringifyString({
            comment,
            type,
            value: str
        }, ctx, onComment, onChompKeep);
    }
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/pairs.js
function resolvePairs(seq2, onError) {
    var _a;
    if (isSeq(seq2)) {
        for(let i = 0; i < seq2.items.length; ++i){
            let item = seq2.items[i];
            if (isPair(item)) continue;
            else if (isMap(item)) {
                if (item.items.length > 1) onError("Each pair must have its own sequence indicator");
                const pair = item.items[0] || new Pair(new Scalar(null));
                if (item.commentBefore) pair.key.commentBefore = pair.key.commentBefore ? `${item.commentBefore}
${pair.key.commentBefore}` : item.commentBefore;
                if (item.comment) {
                    const cn = (_a = pair.value) != null ? _a : pair.key;
                    cn.comment = cn.comment ? `${item.comment}
${cn.comment}` : item.comment;
                }
                item = pair;
            }
            seq2.items[i] = isPair(item) ? item : new Pair(item);
        }
    } else onError("Expected a sequence for this tag");
    return seq2;
}
function createPairs(schema4, iterable, ctx) {
    const { replacer } = ctx;
    const pairs2 = new YAMLSeq(schema4);
    pairs2.tag = "tag:yaml.org,2002:pairs";
    let i = 0;
    if (iterable && Symbol.iterator in Object(iterable)) for (let it of iterable){
        if (typeof replacer === "function") it = replacer.call(iterable, String(i++), it);
        let key, value1;
        if (Array.isArray(it)) {
            if (it.length === 2) {
                key = it[0];
                value1 = it[1];
            } else throw new TypeError(`Expected [key, value] tuple: ${it}`);
        } else if (it && it instanceof Object) {
            const keys = Object.keys(it);
            if (keys.length === 1) {
                key = keys[0];
                value1 = it[key];
            } else throw new TypeError(`Expected { key: value } tuple: ${it}`);
        } else {
            key = it;
        }
        pairs2.items.push(createPair(key, value1, ctx));
    }
    return pairs2;
}
var pairs = {
    collection: "seq",
    default: false,
    tag: "tag:yaml.org,2002:pairs",
    resolve: resolvePairs,
    createNode: createPairs
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/omap.js
var YAMLOMap = class _YAMLOMap extends YAMLSeq {
    /**
   * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,
   * but TypeScript won't allow widening the signature of a child method.
   */ toJSON(_2, ctx) {
        if (!ctx) return super.toJSON(_2);
        const map2 = /* @__PURE__ */ new Map();
        if (ctx == null ? void 0 : ctx.onCreate) ctx.onCreate(map2);
        for (const pair of this.items){
            let key, value1;
            if (isPair(pair)) {
                key = toJS(pair.key, "", ctx);
                value1 = toJS(pair.value, key, ctx);
            } else {
                key = toJS(pair, "", ctx);
            }
            if (map2.has(key)) throw new Error("Ordered maps must not include duplicate keys");
            map2.set(key, value1);
        }
        return map2;
    }
    constructor(){
        super();
        this.add = YAMLMap.prototype.add.bind(this);
        this.delete = YAMLMap.prototype.delete.bind(this);
        this.get = YAMLMap.prototype.get.bind(this);
        this.has = YAMLMap.prototype.has.bind(this);
        this.set = YAMLMap.prototype.set.bind(this);
        this.tag = _YAMLOMap.tag;
    }
};
YAMLOMap.tag = "tag:yaml.org,2002:omap";
var omap = {
    collection: "seq",
    identify: (value1)=>value1 instanceof Map,
    nodeClass: YAMLOMap,
    default: false,
    tag: "tag:yaml.org,2002:omap",
    resolve (seq2, onError) {
        const pairs2 = resolvePairs(seq2, onError);
        const seenKeys = [];
        for (const { key } of pairs2.items){
            if (isScalar(key)) {
                if (seenKeys.includes(key.value)) {
                    onError(`Ordered maps must not include duplicate keys: ${key.value}`);
                } else {
                    seenKeys.push(key.value);
                }
            }
        }
        return Object.assign(new YAMLOMap(), pairs2);
    },
    createNode (schema4, iterable, ctx) {
        const pairs2 = createPairs(schema4, iterable, ctx);
        const omap2 = new YAMLOMap();
        omap2.items = pairs2.items;
        return omap2;
    }
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/bool.js
function boolStringify({ value: value1, source }, ctx) {
    const boolObj = value1 ? trueTag : falseTag;
    if (source && boolObj.test.test(source)) return source;
    return value1 ? ctx.options.trueStr : ctx.options.falseStr;
}
var trueTag = {
    identify: (value1)=>value1 === true,
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
    resolve: ()=>new Scalar(true),
    stringify: boolStringify
};
var falseTag = {
    identify: (value1)=>value1 === false,
    default: true,
    tag: "tag:yaml.org,2002:bool",
    test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/i,
    resolve: ()=>new Scalar(false),
    stringify: boolStringify
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/float.js
var floatNaN2 = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN)$/,
    resolve: (str)=>str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY,
    stringify: stringifyNumber
};
var floatExp2 = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "EXP",
    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
    resolve: (str)=>parseFloat(str.replace(/_/g, "")),
    stringify (node) {
        const num = Number(node.value);
        return isFinite(num) ? num.toExponential() : stringifyNumber(node);
    }
};
var float2 = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
    resolve (str) {
        const node = new Scalar(parseFloat(str.replace(/_/g, "")));
        const dot = str.indexOf(".");
        if (dot !== -1) {
            const f2 = str.substring(dot + 1).replace(/_/g, "");
            if (f2[f2.length - 1] === "0") node.minFractionDigits = f2.length;
        }
        return node;
    },
    stringify: stringifyNumber
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/int.js
var intIdentify3 = (value1)=>typeof value1 === "bigint" || Number.isInteger(value1);
function intResolve2(str, offset, radix, { intAsBigInt }) {
    const sign = str[0];
    if (sign === "-" || sign === "+") offset += 1;
    str = str.substring(offset).replace(/_/g, "");
    if (intAsBigInt) {
        switch(radix){
            case 2:
                str = `0b${str}`;
                break;
            case 8:
                str = `0o${str}`;
                break;
            case 16:
                str = `0x${str}`;
                break;
        }
        const n2 = BigInt(str);
        return sign === "-" ? BigInt(-1) * n2 : n2;
    }
    const n = parseInt(str, radix);
    return sign === "-" ? -1 * n : n;
}
function intStringify2(node, radix, prefix) {
    const { value: value1 } = node;
    if (intIdentify3(value1)) {
        const str = value1.toString(radix);
        return value1 < 0 ? "-" + prefix + str.substr(1) : prefix + str;
    }
    return stringifyNumber(node);
}
var intBin = {
    identify: intIdentify3,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "BIN",
    test: /^[-+]?0b[0-1_]+$/,
    resolve: (str, _onError, opt)=>intResolve2(str, 2, 2, opt),
    stringify: (node)=>intStringify2(node, 2, "0b")
};
var intOct2 = {
    identify: intIdentify3,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "OCT",
    test: /^[-+]?0[0-7_]+$/,
    resolve: (str, _onError, opt)=>intResolve2(str, 1, 8, opt),
    stringify: (node)=>intStringify2(node, 8, "0")
};
var int2 = {
    identify: intIdentify3,
    default: true,
    tag: "tag:yaml.org,2002:int",
    test: /^[-+]?[0-9][0-9_]*$/,
    resolve: (str, _onError, opt)=>intResolve2(str, 0, 10, opt),
    stringify: stringifyNumber
};
var intHex2 = {
    identify: intIdentify3,
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "HEX",
    test: /^[-+]?0x[0-9a-fA-F_]+$/,
    resolve: (str, _onError, opt)=>intResolve2(str, 2, 16, opt),
    stringify: (node)=>intStringify2(node, 16, "0x")
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/set.js
var YAMLSet = class _YAMLSet extends YAMLMap {
    add(key) {
        let pair;
        if (isPair(key)) pair = key;
        else if (key && typeof key === "object" && "key" in key && "value" in key && key.value === null) pair = new Pair(key.key, null);
        else pair = new Pair(key, null);
        const prev = findPair(this.items, pair.key);
        if (!prev) this.items.push(pair);
    }
    /**
   * If `keepPair` is `true`, returns the Pair matching `key`.
   * Otherwise, returns the value of that Pair's key.
   */ get(key, keepPair) {
        const pair = findPair(this.items, key);
        return !keepPair && isPair(pair) ? isScalar(pair.key) ? pair.key.value : pair.key : pair;
    }
    set(key, value1) {
        if (typeof value1 !== "boolean") throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value1}`);
        const prev = findPair(this.items, key);
        if (prev && !value1) {
            this.items.splice(this.items.indexOf(prev), 1);
        } else if (!prev && value1) {
            this.items.push(new Pair(key));
        }
    }
    toJSON(_2, ctx) {
        return super.toJSON(_2, ctx, Set);
    }
    toString(ctx, onComment, onChompKeep) {
        if (!ctx) return JSON.stringify(this);
        if (this.hasAllNullValues(true)) return super.toString(Object.assign({}, ctx, {
            allNullValues: true
        }), onComment, onChompKeep);
        else throw new Error("Set items must all have null values");
    }
    constructor(schema4){
        super(schema4);
        this.tag = _YAMLSet.tag;
    }
};
YAMLSet.tag = "tag:yaml.org,2002:set";
var set = {
    collection: "map",
    identify: (value1)=>value1 instanceof Set,
    nodeClass: YAMLSet,
    default: false,
    tag: "tag:yaml.org,2002:set",
    resolve (map2, onError) {
        if (isMap(map2)) {
            if (map2.hasAllNullValues(true)) return Object.assign(new YAMLSet(), map2);
            else onError("Set items must all have null values");
        } else onError("Expected a mapping for this tag");
        return map2;
    },
    createNode (schema4, iterable, ctx) {
        const { replacer } = ctx;
        const set2 = new YAMLSet(schema4);
        if (iterable && Symbol.iterator in Object(iterable)) for (let value1 of iterable){
            if (typeof replacer === "function") value1 = replacer.call(iterable, value1, value1);
            set2.items.push(createPair(value1, null, ctx));
        }
        return set2;
    }
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/timestamp.js
function parseSexagesimal(str, asBigInt) {
    const sign = str[0];
    const parts = sign === "-" || sign === "+" ? str.substring(1) : str;
    const num = (n)=>asBigInt ? BigInt(n) : Number(n);
    const res = parts.replace(/_/g, "").split(":").reduce((res2, p)=>res2 * num(60) + num(p), num(0));
    return sign === "-" ? num(-1) * res : res;
}
function stringifySexagesimal(node) {
    let { value: value1 } = node;
    let num = (n)=>n;
    if (typeof value1 === "bigint") num = (n)=>BigInt(n);
    else if (isNaN(value1) || !isFinite(value1)) return stringifyNumber(node);
    let sign = "";
    if (value1 < 0) {
        sign = "-";
        value1 *= num(-1);
    }
    const _60 = num(60);
    const parts = [
        value1 % _60
    ];
    if (value1 < 60) {
        parts.unshift(0);
    } else {
        value1 = (value1 - parts[0]) / _60;
        parts.unshift(value1 % _60);
        if (value1 >= 60) {
            value1 = (value1 - parts[0]) / _60;
            parts.unshift(value1);
        }
    }
    return sign + parts.map((n)=>n < 10 ? "0" + String(n) : String(n)).join(":").replace(/000000\d*$/, "");
}
var intTime = {
    identify: (value1)=>typeof value1 === "bigint" || Number.isInteger(value1),
    default: true,
    tag: "tag:yaml.org,2002:int",
    format: "TIME",
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
    resolve: (str, _onError, { intAsBigInt })=>parseSexagesimal(str, intAsBigInt),
    stringify: stringifySexagesimal
};
var floatTime = {
    identify: (value1)=>typeof value1 === "number",
    default: true,
    tag: "tag:yaml.org,2002:float",
    format: "TIME",
    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
    resolve: (str)=>parseSexagesimal(str, false),
    stringify: stringifySexagesimal
};
var timestamp = {
    identify: (value1)=>value1 instanceof Date,
    default: true,
    tag: "tag:yaml.org,2002:timestamp",
    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
    // may be omitted altogether, resulting in a date format. In such a case, the time part is
    // assumed to be 00:00:00Z (start of day, UTC).
    test: RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),
    resolve (str) {
        const match = str.match(timestamp.test);
        if (!match) throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");
        const [, year, month, day, hour, minute, second] = match.map(Number);
        const millisec = match[7] ? Number((match[7] + "00").substr(1, 3)) : 0;
        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
        const tz = match[8];
        if (tz && tz !== "Z") {
            let d = parseSexagesimal(tz, false);
            if (Math.abs(d) < 30) d *= 60;
            date -= 6e4 * d;
        }
        return new Date(date);
    },
    stringify: ({ value: value1 })=>value1.toISOString().replace(/((T00:00)?:00)?\.000Z$/, "")
};
// ../../node_modules/yaml/browser/dist/schema/yaml-1.1/schema.js
var schema3 = [
    map,
    seq,
    string,
    nullTag,
    trueTag,
    falseTag,
    intBin,
    intOct2,
    int2,
    intHex2,
    floatNaN2,
    floatExp2,
    float2,
    binary,
    omap,
    pairs,
    set,
    intTime,
    floatTime,
    timestamp
];
// ../../node_modules/yaml/browser/dist/schema/tags.js
var schemas = /* @__PURE__ */ new Map([
    [
        "core",
        schema
    ],
    [
        "failsafe",
        [
            map,
            seq,
            string
        ]
    ],
    [
        "json",
        schema2
    ],
    [
        "yaml11",
        schema3
    ],
    [
        "yaml-1.1",
        schema3
    ]
]);
var tagsByName = {
    binary,
    bool: boolTag,
    float: lib_float,
    floatExp,
    floatNaN,
    floatTime,
    int: lib_int,
    intHex,
    intOct,
    intTime,
    map,
    null: nullTag,
    omap,
    pairs,
    seq,
    set,
    timestamp
};
var coreKnownTags = {
    "tag:yaml.org,2002:binary": binary,
    "tag:yaml.org,2002:omap": omap,
    "tag:yaml.org,2002:pairs": pairs,
    "tag:yaml.org,2002:set": set,
    "tag:yaml.org,2002:timestamp": timestamp
};
function getTags(customTags, schemaName) {
    let tags = schemas.get(schemaName);
    if (!tags) {
        if (Array.isArray(customTags)) tags = [];
        else {
            const keys = Array.from(schemas.keys()).filter((key)=>key !== "yaml11").map((key)=>JSON.stringify(key)).join(", ");
            throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
        }
    }
    if (Array.isArray(customTags)) {
        for (const tag of customTags)tags = tags.concat(tag);
    } else if (typeof customTags === "function") {
        tags = customTags(tags.slice());
    }
    return tags.map((tag)=>{
        if (typeof tag !== "string") return tag;
        const tagObj = tagsByName[tag];
        if (tagObj) return tagObj;
        const keys = Object.keys(tagsByName).map((key)=>JSON.stringify(key)).join(", ");
        throw new Error(`Unknown custom tag "${tag}"; use one of ${keys}`);
    });
}
// ../../node_modules/yaml/browser/dist/schema/Schema.js
var sortMapEntriesByKey = (a2, b)=>a2.key < b.key ? -1 : a2.key > b.key ? 1 : 0;
var Schema = class _Schema {
    clone() {
        const copy = Object.create(_Schema.prototype, Object.getOwnPropertyDescriptors(this));
        copy.tags = this.tags.slice();
        return copy;
    }
    constructor({ compat, customTags, merge, resolveKnownTags, schema: schema4, sortMapEntries, toStringDefaults }){
        this.compat = Array.isArray(compat) ? getTags(compat, "compat") : compat ? getTags(null, compat) : null;
        this.merge = !!merge;
        this.name = typeof schema4 === "string" && schema4 || "core";
        this.knownTags = resolveKnownTags ? coreKnownTags : {};
        this.tags = getTags(customTags, this.name);
        this.toStringOptions = toStringDefaults != null ? toStringDefaults : null;
        Object.defineProperty(this, MAP, {
            value: map
        });
        Object.defineProperty(this, SCALAR, {
            value: string
        });
        Object.defineProperty(this, SEQ, {
            value: seq
        });
        this.sortMapEntries = typeof sortMapEntries === "function" ? sortMapEntries : sortMapEntries === true ? sortMapEntriesByKey : null;
    }
};
// ../../node_modules/yaml/browser/dist/stringify/stringifyDocument.js
function stringifyDocument(doc, options) {
    var _a;
    const lines = [];
    let hasDirectives = options.directives === true;
    if (options.directives !== false && doc.directives) {
        const dir = doc.directives.toString(doc);
        if (dir) {
            lines.push(dir);
            hasDirectives = true;
        } else if (doc.directives.docStart) hasDirectives = true;
    }
    if (hasDirectives) lines.push("---");
    const ctx = createStringifyContext(doc, options);
    const { commentString } = ctx.options;
    if (doc.commentBefore) {
        if (lines.length !== 1) lines.unshift("");
        const cs = commentString(doc.commentBefore);
        lines.unshift(indentComment(cs, ""));
    }
    let chompKeep = false;
    let contentComment = null;
    if (doc.contents) {
        if (isNode(doc.contents)) {
            if (doc.contents.spaceBefore && hasDirectives) lines.push("");
            if (doc.contents.commentBefore) {
                const cs = commentString(doc.contents.commentBefore);
                lines.push(indentComment(cs, ""));
            }
            ctx.forceBlockIndent = !!doc.comment;
            contentComment = doc.contents.comment;
        }
        const onChompKeep = contentComment ? void 0 : ()=>chompKeep = true;
        let body = stringify(doc.contents, ctx, ()=>contentComment = null, onChompKeep);
        if (contentComment) body += lineComment(body, "", commentString(contentComment));
        if ((body[0] === "|" || body[0] === ">") && lines[lines.length - 1] === "---") {
            lines[lines.length - 1] = `--- ${body}`;
        } else lines.push(body);
    } else {
        lines.push(stringify(doc.contents, ctx));
    }
    if ((_a = doc.directives) == null ? void 0 : _a.docEnd) {
        if (doc.comment) {
            const cs = commentString(doc.comment);
            if (cs.includes("\n")) {
                lines.push("...");
                lines.push(indentComment(cs, ""));
            } else {
                lines.push(`... ${cs}`);
            }
        } else {
            lines.push("...");
        }
    } else {
        let dc = doc.comment;
        if (dc && chompKeep) dc = dc.replace(/^\n+/, "");
        if (dc) {
            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== "") lines.push("");
            lines.push(indentComment(commentString(dc), ""));
        }
    }
    return lines.join("\n") + "\n";
}
// ../../node_modules/yaml/browser/dist/doc/applyReviver.js
function applyReviver(reviver, obj, key, val) {
    if (val && typeof val === "object") {
        if (Array.isArray(val)) {
            for(let i = 0, len = val.length; i < len; ++i){
                const v0 = val[i];
                const v1 = applyReviver(reviver, val, String(i), v0);
                if (v1 === void 0) delete val[i];
                else if (v1 !== v0) val[i] = v1;
            }
        } else if (val instanceof Map) {
            for (const k of Array.from(val.keys())){
                const v0 = val.get(k);
                const v1 = applyReviver(reviver, val, k, v0);
                if (v1 === void 0) val.delete(k);
                else if (v1 !== v0) val.set(k, v1);
            }
        } else if (val instanceof Set) {
            for (const v0 of Array.from(val)){
                const v1 = applyReviver(reviver, val, v0, v0);
                if (v1 === void 0) val.delete(v0);
                else if (v1 !== v0) {
                    val.delete(v0);
                    val.add(v1);
                }
            }
        } else {
            for (const [k, v0] of Object.entries(val)){
                const v1 = applyReviver(reviver, val, k, v0);
                if (v1 === void 0) delete val[k];
                else if (v1 !== v0) val[k] = v1;
            }
        }
    }
    return reviver.call(obj, key, val);
}
// ../../node_modules/yaml/browser/dist/doc/Document.js
var Document = class _Document {
    /**
   * Create a deep copy of this Document and its contents.
   *
   * Custom Node values that inherit from `Object` still refer to their original instances.
   */ clone() {
        const copy = Object.create(_Document.prototype, {
            [NODE_TYPE]: {
                value: DOC
            }
        });
        copy.commentBefore = this.commentBefore;
        copy.comment = this.comment;
        copy.errors = this.errors.slice();
        copy.warnings = this.warnings.slice();
        copy.options = Object.assign({}, this.options);
        if (this.directives) copy.directives = this.directives.clone();
        copy.schema = this.schema.clone();
        copy.contents = isNode(this.contents) ? this.contents.clone(copy.schema) : this.contents;
        if (this.range) copy.range = this.range.slice();
        return copy;
    }
    /** Adds a value to the document. */ add(value1) {
        if (assertCollection(this.contents)) this.contents.add(value1);
    }
    /** Adds a value to the document. */ addIn(path5, value1) {
        if (assertCollection(this.contents)) this.contents.addIn(path5, value1);
    }
    /**
   * Create a new `Alias` node, ensuring that the target `node` has the required anchor.
   *
   * If `node` already has an anchor, `name` is ignored.
   * Otherwise, the `node.anchor` value will be set to `name`,
   * or if an anchor with that name is already present in the document,
   * `name` will be used as a prefix for a new unique anchor.
   * If `name` is undefined, the generated anchor will use 'a' as a prefix.
   */ createAlias(node, name) {
        if (!node.anchor) {
            const prev = anchorNames(this);
            node.anchor = !name || prev.has(name) ? findNewAnchor(name || "a", prev) : name;
        }
        return new Alias(node.anchor);
    }
    createNode(value1, replacer, options) {
        let _replacer = void 0;
        if (typeof replacer === "function") {
            value1 = replacer.call({
                "": value1
            }, "", value1);
            _replacer = replacer;
        } else if (Array.isArray(replacer)) {
            const keyToStr = (v)=>typeof v === "number" || v instanceof String || v instanceof Number;
            const asStr = replacer.filter(keyToStr).map(String);
            if (asStr.length > 0) replacer = replacer.concat(asStr);
            _replacer = replacer;
        } else if (options === void 0 && replacer) {
            options = replacer;
            replacer = void 0;
        }
        const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options != null ? options : {};
        const { onAnchor, setAnchors, sourceObjects } = createNodeAnchors(this, // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
        anchorPrefix || "a");
        const ctx = {
            aliasDuplicateObjects: aliasDuplicateObjects != null ? aliasDuplicateObjects : true,
            keepUndefined: keepUndefined != null ? keepUndefined : false,
            onAnchor,
            onTagObj,
            replacer: _replacer,
            schema: this.schema,
            sourceObjects
        };
        const node = createNode(value1, tag, ctx);
        if (flow && isCollection(node)) node.flow = true;
        setAnchors();
        return node;
    }
    /**
   * Convert a key and a value into a `Pair` using the current schema,
   * recursively wrapping all values as `Scalar` or `Collection` nodes.
   */ createPair(key, value1, options = {}) {
        const k = this.createNode(key, null, options);
        const v = this.createNode(value1, null, options);
        return new Pair(k, v);
    }
    /**
   * Removes a value from the document.
   * @returns `true` if the item was found and removed.
   */ delete(key) {
        return assertCollection(this.contents) ? this.contents.delete(key) : false;
    }
    /**
   * Removes a value from the document.
   * @returns `true` if the item was found and removed.
   */ deleteIn(path5) {
        if (isEmptyPath(path5)) {
            if (this.contents == null) return false;
            this.contents = null;
            return true;
        }
        return assertCollection(this.contents) ? this.contents.deleteIn(path5) : false;
    }
    /**
   * Returns item at `key`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */ get(key, keepScalar) {
        return isCollection(this.contents) ? this.contents.get(key, keepScalar) : void 0;
    }
    /**
   * Returns item at `path`, or `undefined` if not found. By default unwraps
   * scalar values from their surrounding node; to disable set `keepScalar` to
   * `true` (collections are always returned intact).
   */ getIn(path5, keepScalar) {
        if (isEmptyPath(path5)) return !keepScalar && isScalar(this.contents) ? this.contents.value : this.contents;
        return isCollection(this.contents) ? this.contents.getIn(path5, keepScalar) : void 0;
    }
    /**
   * Checks if the document includes a value with the key `key`.
   */ has(key) {
        return isCollection(this.contents) ? this.contents.has(key) : false;
    }
    /**
   * Checks if the document includes a value at `path`.
   */ hasIn(path5) {
        if (isEmptyPath(path5)) return this.contents !== void 0;
        return isCollection(this.contents) ? this.contents.hasIn(path5) : false;
    }
    /**
   * Sets a value in this document. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */ set(key, value1) {
        if (this.contents == null) {
            this.contents = collectionFromPath(this.schema, [
                key
            ], value1);
        } else if (assertCollection(this.contents)) {
            this.contents.set(key, value1);
        }
    }
    /**
   * Sets a value in this document. For `!!set`, `value` needs to be a
   * boolean to add/remove the item from the set.
   */ setIn(path5, value1) {
        if (isEmptyPath(path5)) this.contents = value1;
        else if (this.contents == null) {
            this.contents = collectionFromPath(this.schema, Array.from(path5), value1);
        } else if (assertCollection(this.contents)) {
            this.contents.setIn(path5, value1);
        }
    }
    /**
   * Change the YAML version and schema used by the document.
   * A `null` version disables support for directives, explicit tags, anchors, and aliases.
   * It also requires the `schema` option to be given as a `Schema` instance value.
   *
   * Overrides all previously set schema options.
   */ setSchema(version, options = {}) {
        if (typeof version === "number") version = String(version);
        let opt;
        switch(version){
            case "1.1":
                if (this.directives) this.directives.yaml.version = "1.1";
                else this.directives = new Directives({
                    version: "1.1"
                });
                opt = {
                    merge: true,
                    resolveKnownTags: false,
                    schema: "yaml-1.1"
                };
                break;
            case "1.2":
            case "next":
                if (this.directives) this.directives.yaml.version = version;
                else this.directives = new Directives({
                    version
                });
                opt = {
                    merge: false,
                    resolveKnownTags: true,
                    schema: "core"
                };
                break;
            case null:
                if (this.directives) delete this.directives;
                opt = null;
                break;
            default:
                {
                    const sv = JSON.stringify(version);
                    throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);
                }
        }
        if (options.schema instanceof Object) this.schema = options.schema;
        else if (opt) this.schema = new Schema(Object.assign(opt, options));
        else throw new Error(`With a null YAML version, the { schema: Schema } option is required`);
    }
    // json & jsonArg are only used from toJSON()
    toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
        const ctx = {
            anchors: /* @__PURE__ */ new Map(),
            doc: this,
            keep: !json,
            mapAsMap: mapAsMap === true,
            mapKeyWarned: false,
            maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100,
            stringify
        };
        const res = toJS(this.contents, jsonArg != null ? jsonArg : "", ctx);
        if (typeof onAnchor === "function") for (const { count, res: res2 } of ctx.anchors.values())onAnchor(res2, count);
        return typeof reviver === "function" ? applyReviver(reviver, {
            "": res
        }, "", res) : res;
    }
    /**
   * A JSON representation of the document `contents`.
   *
   * @param jsonArg Used by `JSON.stringify` to indicate the array index or
   *   property name.
   */ toJSON(jsonArg, onAnchor) {
        return this.toJS({
            json: true,
            jsonArg,
            mapAsMap: false,
            onAnchor
        });
    }
    /** A YAML representation of the document. */ toString(options = {}) {
        if (this.errors.length > 0) throw new Error("Document with errors cannot be stringified");
        if ("indent" in options && (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
            const s = JSON.stringify(options.indent);
            throw new Error(`"indent" option must be a positive integer, not ${s}`);
        }
        return stringifyDocument(this, options);
    }
    constructor(value1, replacer, options){
        this.commentBefore = null;
        this.comment = null;
        this.errors = [];
        this.warnings = [];
        Object.defineProperty(this, NODE_TYPE, {
            value: DOC
        });
        let _replacer = null;
        if (typeof replacer === "function" || Array.isArray(replacer)) {
            _replacer = replacer;
        } else if (options === void 0 && replacer) {
            options = replacer;
            replacer = void 0;
        }
        const opt = Object.assign({
            intAsBigInt: false,
            keepSourceTokens: false,
            logLevel: "warn",
            prettyErrors: true,
            strict: true,
            uniqueKeys: true,
            version: "1.2"
        }, options);
        this.options = opt;
        let { version } = opt;
        if (options == null ? void 0 : options._directives) {
            this.directives = options._directives.atDocument();
            if (this.directives.yaml.explicit) version = this.directives.yaml.version;
        } else this.directives = new Directives({
            version
        });
        this.setSchema(version, options);
        if (value1 === void 0) this.contents = null;
        else {
            this.contents = this.createNode(value1, _replacer, options);
        }
    }
};
function assertCollection(contents) {
    if (isCollection(contents)) return true;
    throw new Error("Expected a YAML collection as document contents");
}
// ../../node_modules/yaml/browser/dist/errors.js
var YAMLError = class extends Error {
    constructor(name, pos, code, message){
        super();
        this.name = name;
        this.code = code;
        this.message = message;
        this.pos = pos;
    }
};
var YAMLParseError = class extends YAMLError {
    constructor(pos, code, message){
        super("YAMLParseError", pos, code, message);
    }
};
var YAMLWarning = class extends YAMLError {
    constructor(pos, code, message){
        super("YAMLWarning", pos, code, message);
    }
};
var prettifyError = (src, lc)=>(error)=>{
        if (error.pos[0] === -1) return;
        error.linePos = error.pos.map((pos)=>lc.linePos(pos));
        const { line, col } = error.linePos[0];
        error.message += ` at line ${line}, column ${col}`;
        let ci = col - 1;
        let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\n\r]+$/, "");
        if (ci >= 60 && lineStr.length > 80) {
            const trimStart = Math.min(ci - 39, lineStr.length - 79);
            lineStr = "\u2026" + lineStr.substring(trimStart);
            ci -= trimStart - 1;
        }
        if (lineStr.length > 80) lineStr = lineStr.substring(0, 79) + "\u2026";
        if (line > 1 && /^ *$/.test(lineStr.substring(0, ci))) {
            let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
            if (prev.length > 80) prev = prev.substring(0, 79) + "\u2026\n";
            lineStr = prev + lineStr;
        }
        if (/[^ ]/.test(lineStr)) {
            let count = 1;
            const end = error.linePos[1];
            if (end && end.line === line && end.col > col) {
                count = Math.max(1, Math.min(end.col - col, 80 - ci));
            }
            const pointer = " ".repeat(ci) + "^".repeat(count);
            error.message += `:

${lineStr}
${pointer}
`;
        }
    };
// ../../node_modules/yaml/browser/dist/compose/resolve-props.js
function resolveProps(tokens, { flow, indicator, next, offset, onError, startOnNewline }) {
    let spaceBefore = false;
    let atNewline = startOnNewline;
    let hasSpace = startOnNewline;
    let comment = "";
    let commentSep = "";
    let hasNewline = false;
    let hasNewlineAfterProp = false;
    let reqSpace = false;
    let anchor = null;
    let tag = null;
    let comma = null;
    let found = null;
    let start = null;
    for (const token of tokens){
        if (reqSpace) {
            if (token.type !== "space" && token.type !== "newline" && token.type !== "comma") onError(token.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
            reqSpace = false;
        }
        switch(token.type){
            case "space":
                if (!flow && atNewline && indicator !== "doc-start" && token.source[0] === "	") onError(token, "TAB_AS_INDENT", "Tabs are not allowed as indentation");
                hasSpace = true;
                break;
            case "comment":
                {
                    if (!hasSpace) onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
                    const cb = token.source.substring(1) || " ";
                    if (!comment) comment = cb;
                    else comment += commentSep + cb;
                    commentSep = "";
                    atNewline = false;
                    break;
                }
            case "newline":
                if (atNewline) {
                    if (comment) comment += token.source;
                    else spaceBefore = true;
                } else commentSep += token.source;
                atNewline = true;
                hasNewline = true;
                if (anchor || tag) hasNewlineAfterProp = true;
                hasSpace = true;
                break;
            case "anchor":
                if (anchor) onError(token, "MULTIPLE_ANCHORS", "A node can have at most one anchor");
                if (token.source.endsWith(":")) onError(token.offset + token.source.length - 1, "BAD_ALIAS", "Anchor ending in : is ambiguous", true);
                anchor = token;
                if (start === null) start = token.offset;
                atNewline = false;
                hasSpace = false;
                reqSpace = true;
                break;
            case "tag":
                {
                    if (tag) onError(token, "MULTIPLE_TAGS", "A node can have at most one tag");
                    tag = token;
                    if (start === null) start = token.offset;
                    atNewline = false;
                    hasSpace = false;
                    reqSpace = true;
                    break;
                }
            case indicator:
                if (anchor || tag) onError(token, "BAD_PROP_ORDER", `Anchors and tags must be after the ${token.source} indicator`);
                if (found) onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.source} in ${flow != null ? flow : "collection"}`);
                found = token;
                atNewline = false;
                hasSpace = false;
                break;
            case "comma":
                if (flow) {
                    if (comma) onError(token, "UNEXPECTED_TOKEN", `Unexpected , in ${flow}`);
                    comma = token;
                    atNewline = false;
                    hasSpace = false;
                    break;
                }
            default:
                onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.type} token`);
                atNewline = false;
                hasSpace = false;
        }
    }
    const last = tokens[tokens.length - 1];
    const end = last ? last.offset + last.source.length : offset;
    if (reqSpace && next && next.type !== "space" && next.type !== "newline" && next.type !== "comma" && (next.type !== "scalar" || next.source !== "")) onError(next.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
    return {
        comma,
        found,
        spaceBefore,
        comment,
        hasNewline,
        hasNewlineAfterProp,
        anchor,
        tag,
        end,
        start: start != null ? start : end
    };
}
// ../../node_modules/yaml/browser/dist/compose/util-contains-newline.js
function containsNewline(key) {
    if (!key) return null;
    switch(key.type){
        case "alias":
        case "scalar":
        case "double-quoted-scalar":
        case "single-quoted-scalar":
            if (key.source.includes("\n")) return true;
            if (key.end) {
                for (const st of key.end)if (st.type === "newline") return true;
            }
            return false;
        case "flow-collection":
            for (const it of key.items){
                for (const st of it.start)if (st.type === "newline") return true;
                if (it.sep) {
                    for (const st of it.sep)if (st.type === "newline") return true;
                }
                if (containsNewline(it.key) || containsNewline(it.value)) return true;
            }
            return false;
        default:
            return true;
    }
}
// ../../node_modules/yaml/browser/dist/compose/util-flow-indent-check.js
function flowIndentCheck(indent, fc, onError) {
    if ((fc == null ? void 0 : fc.type) === "flow-collection") {
        const end = fc.end[0];
        if (end.indent === indent && (end.source === "]" || end.source === "}") && containsNewline(fc)) {
            const msg = "Flow end indicator should be more indented than parent";
            onError(end, "BAD_INDENT", msg, true);
        }
    }
}
// ../../node_modules/yaml/browser/dist/compose/util-map-includes.js
function mapIncludes(ctx, items, search) {
    const { uniqueKeys } = ctx.options;
    if (uniqueKeys === false) return false;
    const isEqual = typeof uniqueKeys === "function" ? uniqueKeys : (a2, b)=>a2 === b || isScalar(a2) && isScalar(b) && a2.value === b.value && !(a2.value === "<<" && ctx.schema.merge);
    return items.some((pair)=>isEqual(pair.key, search));
}
// ../../node_modules/yaml/browser/dist/compose/resolve-block-map.js
var startColMsg = "All mapping items must start at the same column";
function resolveBlockMap({ composeNode: composeNode2, composeEmptyNode: composeEmptyNode2 }, ctx, bm, onError) {
    var _a;
    const map2 = new YAMLMap(ctx.schema);
    if (ctx.atRoot) ctx.atRoot = false;
    let offset = bm.offset;
    let commentEnd = null;
    for (const collItem of bm.items){
        const { start, key, sep, value: value1 } = collItem;
        const keyProps = resolveProps(start, {
            indicator: "explicit-key-ind",
            next: key != null ? key : sep == null ? void 0 : sep[0],
            offset,
            onError,
            startOnNewline: true
        });
        const implicitKey = !keyProps.found;
        if (implicitKey) {
            if (key) {
                if (key.type === "block-seq") onError(offset, "BLOCK_AS_IMPLICIT_KEY", "A block sequence may not be used as an implicit map key");
                else if ("indent" in key && key.indent !== bm.indent) onError(offset, "BAD_INDENT", startColMsg);
            }
            if (!keyProps.anchor && !keyProps.tag && !sep) {
                commentEnd = keyProps.end;
                if (keyProps.comment) {
                    if (map2.comment) map2.comment += "\n" + keyProps.comment;
                    else map2.comment = keyProps.comment;
                }
                continue;
            }
            if (keyProps.hasNewlineAfterProp || containsNewline(key)) {
                onError(key != null ? key : start[start.length - 1], "MULTILINE_IMPLICIT_KEY", "Implicit keys need to be on a single line");
            }
        } else if (((_a = keyProps.found) == null ? void 0 : _a.indent) !== bm.indent) {
            onError(offset, "BAD_INDENT", startColMsg);
        }
        const keyStart = keyProps.end;
        const keyNode = key ? composeNode2(ctx, key, keyProps, onError) : composeEmptyNode2(ctx, keyStart, start, null, keyProps, onError);
        if (ctx.schema.compat) flowIndentCheck(bm.indent, key, onError);
        if (mapIncludes(ctx, map2.items, keyNode)) onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
        const valueProps = resolveProps(sep != null ? sep : [], {
            indicator: "map-value-ind",
            next: value1,
            offset: keyNode.range[2],
            onError,
            startOnNewline: !key || key.type === "block-scalar"
        });
        offset = valueProps.end;
        if (valueProps.found) {
            if (implicitKey) {
                if ((value1 == null ? void 0 : value1.type) === "block-map" && !valueProps.hasNewline) onError(offset, "BLOCK_AS_IMPLICIT_KEY", "Nested mappings are not allowed in compact mappings");
                if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024) onError(keyNode.range, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit block mapping key");
            }
            const valueNode = value1 ? composeNode2(ctx, value1, valueProps, onError) : composeEmptyNode2(ctx, offset, sep, null, valueProps, onError);
            if (ctx.schema.compat) flowIndentCheck(bm.indent, value1, onError);
            offset = valueNode.range[2];
            const pair = new Pair(keyNode, valueNode);
            if (ctx.options.keepSourceTokens) pair.srcToken = collItem;
            map2.items.push(pair);
        } else {
            if (implicitKey) onError(keyNode.range, "MISSING_CHAR", "Implicit map keys need to be followed by map values");
            if (valueProps.comment) {
                if (keyNode.comment) keyNode.comment += "\n" + valueProps.comment;
                else keyNode.comment = valueProps.comment;
            }
            const pair = new Pair(keyNode);
            if (ctx.options.keepSourceTokens) pair.srcToken = collItem;
            map2.items.push(pair);
        }
    }
    if (commentEnd && commentEnd < offset) onError(commentEnd, "IMPOSSIBLE", "Map comment with trailing content");
    map2.range = [
        bm.offset,
        offset,
        commentEnd != null ? commentEnd : offset
    ];
    return map2;
}
// ../../node_modules/yaml/browser/dist/compose/resolve-block-seq.js
function resolveBlockSeq({ composeNode: composeNode2, composeEmptyNode: composeEmptyNode2 }, ctx, bs, onError) {
    const seq2 = new YAMLSeq(ctx.schema);
    if (ctx.atRoot) ctx.atRoot = false;
    let offset = bs.offset;
    let commentEnd = null;
    for (const { start, value: value1 } of bs.items){
        const props = resolveProps(start, {
            indicator: "seq-item-ind",
            next: value1,
            offset,
            onError,
            startOnNewline: true
        });
        if (!props.found) {
            if (props.anchor || props.tag || value1) {
                if (value1 && value1.type === "block-seq") onError(props.end, "BAD_INDENT", "All sequence items must start at the same column");
                else onError(offset, "MISSING_CHAR", "Sequence item without - indicator");
            } else {
                commentEnd = props.end;
                if (props.comment) seq2.comment = props.comment;
                continue;
            }
        }
        const node = value1 ? composeNode2(ctx, value1, props, onError) : composeEmptyNode2(ctx, props.end, start, null, props, onError);
        if (ctx.schema.compat) flowIndentCheck(bs.indent, value1, onError);
        offset = node.range[2];
        seq2.items.push(node);
    }
    seq2.range = [
        bs.offset,
        offset,
        commentEnd != null ? commentEnd : offset
    ];
    return seq2;
}
// ../../node_modules/yaml/browser/dist/compose/resolve-end.js
function resolveEnd(end, offset, reqSpace, onError) {
    let comment = "";
    if (end) {
        let hasSpace = false;
        let sep = "";
        for (const token of end){
            const { source, type } = token;
            switch(type){
                case "space":
                    hasSpace = true;
                    break;
                case "comment":
                    {
                        if (reqSpace && !hasSpace) onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
                        const cb = source.substring(1) || " ";
                        if (!comment) comment = cb;
                        else comment += sep + cb;
                        sep = "";
                        break;
                    }
                case "newline":
                    if (comment) sep += source;
                    hasSpace = true;
                    break;
                default:
                    onError(token, "UNEXPECTED_TOKEN", `Unexpected ${type} at node end`);
            }
            offset += source.length;
        }
    }
    return {
        comment,
        offset
    };
}
// ../../node_modules/yaml/browser/dist/compose/resolve-flow-collection.js
var blockMsg = "Block collections are not allowed within flow collections";
var isBlock = (token)=>token && (token.type === "block-map" || token.type === "block-seq");
function resolveFlowCollection({ composeNode: composeNode2, composeEmptyNode: composeEmptyNode2 }, ctx, fc, onError) {
    var _a;
    const isMap2 = fc.start.source === "{";
    const fcName = isMap2 ? "flow map" : "flow sequence";
    const coll = isMap2 ? new YAMLMap(ctx.schema) : new YAMLSeq(ctx.schema);
    coll.flow = true;
    const atRoot = ctx.atRoot;
    if (atRoot) ctx.atRoot = false;
    let offset = fc.offset + fc.start.source.length;
    for(let i = 0; i < fc.items.length; ++i){
        const collItem = fc.items[i];
        const { start, key, sep, value: value1 } = collItem;
        const props = resolveProps(start, {
            flow: fcName,
            indicator: "explicit-key-ind",
            next: key != null ? key : sep == null ? void 0 : sep[0],
            offset,
            onError,
            startOnNewline: false
        });
        if (!props.found) {
            if (!props.anchor && !props.tag && !sep && !value1) {
                if (i === 0 && props.comma) onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
                else if (i < fc.items.length - 1) onError(props.start, "UNEXPECTED_TOKEN", `Unexpected empty item in ${fcName}`);
                if (props.comment) {
                    if (coll.comment) coll.comment += "\n" + props.comment;
                    else coll.comment = props.comment;
                }
                offset = props.end;
                continue;
            }
            if (!isMap2 && ctx.options.strict && containsNewline(key)) onError(key, // checked by containsNewline()
            "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
        }
        if (i === 0) {
            if (props.comma) onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
        } else {
            if (!props.comma) onError(props.start, "MISSING_CHAR", `Missing , between ${fcName} items`);
            if (props.comment) {
                let prevItemComment = "";
                loop: for (const st of start){
                    switch(st.type){
                        case "comma":
                        case "space":
                            break;
                        case "comment":
                            prevItemComment = st.source.substring(1);
                            break loop;
                        default:
                            break loop;
                    }
                }
                if (prevItemComment) {
                    let prev = coll.items[coll.items.length - 1];
                    if (isPair(prev)) prev = (_a = prev.value) != null ? _a : prev.key;
                    if (prev.comment) prev.comment += "\n" + prevItemComment;
                    else prev.comment = prevItemComment;
                    props.comment = props.comment.substring(prevItemComment.length + 1);
                }
            }
        }
        if (!isMap2 && !sep && !props.found) {
            const valueNode = value1 ? composeNode2(ctx, value1, props, onError) : composeEmptyNode2(ctx, props.end, sep, null, props, onError);
            coll.items.push(valueNode);
            offset = valueNode.range[2];
            if (isBlock(value1)) onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
        } else {
            const keyStart = props.end;
            const keyNode = key ? composeNode2(ctx, key, props, onError) : composeEmptyNode2(ctx, keyStart, start, null, props, onError);
            if (isBlock(key)) onError(keyNode.range, "BLOCK_IN_FLOW", blockMsg);
            const valueProps = resolveProps(sep != null ? sep : [], {
                flow: fcName,
                indicator: "map-value-ind",
                next: value1,
                offset: keyNode.range[2],
                onError,
                startOnNewline: false
            });
            if (valueProps.found) {
                if (!isMap2 && !props.found && ctx.options.strict) {
                    if (sep) for (const st of sep){
                        if (st === valueProps.found) break;
                        if (st.type === "newline") {
                            onError(st, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
                            break;
                        }
                    }
                    if (props.start < valueProps.found.offset - 1024) onError(valueProps.found, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit flow sequence key");
                }
            } else if (value1) {
                if ("source" in value1 && value1.source && value1.source[0] === ":") onError(value1, "MISSING_CHAR", `Missing space after : in ${fcName}`);
                else onError(valueProps.start, "MISSING_CHAR", `Missing , or : between ${fcName} items`);
            }
            const valueNode = value1 ? composeNode2(ctx, value1, valueProps, onError) : valueProps.found ? composeEmptyNode2(ctx, valueProps.end, sep, null, valueProps, onError) : null;
            if (valueNode) {
                if (isBlock(value1)) onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
            } else if (valueProps.comment) {
                if (keyNode.comment) keyNode.comment += "\n" + valueProps.comment;
                else keyNode.comment = valueProps.comment;
            }
            const pair = new Pair(keyNode, valueNode);
            if (ctx.options.keepSourceTokens) pair.srcToken = collItem;
            if (isMap2) {
                const map2 = coll;
                if (mapIncludes(ctx, map2.items, keyNode)) onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
                map2.items.push(pair);
            } else {
                const map2 = new YAMLMap(ctx.schema);
                map2.flow = true;
                map2.items.push(pair);
                coll.items.push(map2);
            }
            offset = valueNode ? valueNode.range[2] : valueProps.end;
        }
    }
    const expectedEnd = isMap2 ? "}" : "]";
    const [ce, ...ee] = fc.end;
    let cePos = offset;
    if (ce && ce.source === expectedEnd) cePos = ce.offset + ce.source.length;
    else {
        const name = fcName[0].toUpperCase() + fcName.substring(1);
        const msg = atRoot ? `${name} must end with a ${expectedEnd}` : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;
        onError(offset, atRoot ? "MISSING_CHAR" : "BAD_INDENT", msg);
        if (ce && ce.source.length !== 1) ee.unshift(ce);
    }
    if (ee.length > 0) {
        const end = resolveEnd(ee, cePos, ctx.options.strict, onError);
        if (end.comment) {
            if (coll.comment) coll.comment += "\n" + end.comment;
            else coll.comment = end.comment;
        }
        coll.range = [
            fc.offset,
            cePos,
            end.offset
        ];
    } else {
        coll.range = [
            fc.offset,
            cePos,
            cePos
        ];
    }
    return coll;
}
// ../../node_modules/yaml/browser/dist/compose/compose-collection.js
function composeCollection(CN2, ctx, token, tagToken, onError) {
    let coll;
    switch(token.type){
        case "block-map":
            {
                coll = resolveBlockMap(CN2, ctx, token, onError);
                break;
            }
        case "block-seq":
            {
                coll = resolveBlockSeq(CN2, ctx, token, onError);
                break;
            }
        case "flow-collection":
            {
                coll = resolveFlowCollection(CN2, ctx, token, onError);
                break;
            }
    }
    if (!tagToken) return coll;
    const tagName = ctx.directives.tagName(tagToken.source, (msg)=>onError(tagToken, "TAG_RESOLVE_FAILED", msg));
    if (!tagName) return coll;
    const Coll = coll.constructor;
    if (tagName === "!" || tagName === Coll.tagName) {
        coll.tag = Coll.tagName;
        return coll;
    }
    const expType = isMap(coll) ? "map" : "seq";
    let tag = ctx.schema.tags.find((t1)=>t1.collection === expType && t1.tag === tagName);
    if (!tag) {
        const kt = ctx.schema.knownTags[tagName];
        if (kt && kt.collection === expType) {
            ctx.schema.tags.push(Object.assign({}, kt, {
                default: false
            }));
            tag = kt;
        } else {
            onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, true);
            coll.tag = tagName;
            return coll;
        }
    }
    const res = tag.resolve(coll, (msg)=>onError(tagToken, "TAG_RESOLVE_FAILED", msg), ctx.options);
    const node = isNode(res) ? res : new Scalar(res);
    node.range = coll.range;
    node.tag = tagName;
    if (tag == null ? void 0 : tag.format) node.format = tag.format;
    return node;
}
// ../../node_modules/yaml/browser/dist/compose/resolve-block-scalar.js
function resolveBlockScalar(scalar, strict, onError) {
    const start = scalar.offset;
    const header = parseBlockScalarHeader(scalar, strict, onError);
    if (!header) return {
        value: "",
        type: null,
        comment: "",
        range: [
            start,
            start,
            start
        ]
    };
    const type = header.mode === ">" ? Scalar.BLOCK_FOLDED : Scalar.BLOCK_LITERAL;
    const lines = scalar.source ? splitLines(scalar.source) : [];
    let chompStart = lines.length;
    for(let i = lines.length - 1; i >= 0; --i){
        const content = lines[i][1];
        if (content === "" || content === "\r") chompStart = i;
        else break;
    }
    if (chompStart === 0) {
        const value2 = header.chomp === "+" && lines.length > 0 ? "\n".repeat(Math.max(1, lines.length - 1)) : "";
        let end2 = start + header.length;
        if (scalar.source) end2 += scalar.source.length;
        return {
            value: value2,
            type,
            comment: header.comment,
            range: [
                start,
                end2,
                end2
            ]
        };
    }
    let trimIndent = scalar.indent + header.indent;
    let offset = scalar.offset + header.length;
    let contentStart = 0;
    for(let i = 0; i < chompStart; ++i){
        const [indent, content] = lines[i];
        if (content === "" || content === "\r") {
            if (header.indent === 0 && indent.length > trimIndent) trimIndent = indent.length;
        } else {
            if (indent.length < trimIndent) {
                const message = "Block scalars with more-indented leading empty lines must use an explicit indentation indicator";
                onError(offset + indent.length, "MISSING_CHAR", message);
            }
            if (header.indent === 0) trimIndent = indent.length;
            contentStart = i;
            break;
        }
        offset += indent.length + content.length + 1;
    }
    for(let i = lines.length - 1; i >= chompStart; --i){
        if (lines[i][0].length > trimIndent) chompStart = i + 1;
    }
    let value1 = "";
    let sep = "";
    let prevMoreIndented = false;
    for(let i = 0; i < contentStart; ++i)value1 += lines[i][0].slice(trimIndent) + "\n";
    for(let i = contentStart; i < chompStart; ++i){
        let [indent, content] = lines[i];
        offset += indent.length + content.length + 1;
        const crlf = content[content.length - 1] === "\r";
        if (crlf) content = content.slice(0, -1);
        if (content && indent.length < trimIndent) {
            const src = header.indent ? "explicit indentation indicator" : "first line";
            const message = `Block scalar lines must not be less indented than their ${src}`;
            onError(offset - content.length - (crlf ? 2 : 1), "BAD_INDENT", message);
            indent = "";
        }
        if (type === Scalar.BLOCK_LITERAL) {
            value1 += sep + indent.slice(trimIndent) + content;
            sep = "\n";
        } else if (indent.length > trimIndent || content[0] === "	") {
            if (sep === " ") sep = "\n";
            else if (!prevMoreIndented && sep === "\n") sep = "\n\n";
            value1 += sep + indent.slice(trimIndent) + content;
            sep = "\n";
            prevMoreIndented = true;
        } else if (content === "") {
            if (sep === "\n") value1 += "\n";
            else sep = "\n";
        } else {
            value1 += sep + content;
            sep = " ";
            prevMoreIndented = false;
        }
    }
    switch(header.chomp){
        case "-":
            break;
        case "+":
            for(let i = chompStart; i < lines.length; ++i)value1 += "\n" + lines[i][0].slice(trimIndent);
            if (value1[value1.length - 1] !== "\n") value1 += "\n";
            break;
        default:
            value1 += "\n";
    }
    const end = start + header.length + scalar.source.length;
    return {
        value: value1,
        type,
        comment: header.comment,
        range: [
            start,
            end,
            end
        ]
    };
}
function parseBlockScalarHeader({ offset, props }, strict, onError) {
    if (props[0].type !== "block-scalar-header") {
        onError(props[0], "IMPOSSIBLE", "Block scalar header not found");
        return null;
    }
    const { source } = props[0];
    const mode = source[0];
    let indent = 0;
    let chomp = "";
    let error = -1;
    for(let i = 1; i < source.length; ++i){
        const ch = source[i];
        if (!chomp && (ch === "-" || ch === "+")) chomp = ch;
        else {
            const n = Number(ch);
            if (!indent && n) indent = n;
            else if (error === -1) error = offset + i;
        }
    }
    if (error !== -1) onError(error, "UNEXPECTED_TOKEN", `Block scalar header includes extra characters: ${source}`);
    let hasSpace = false;
    let comment = "";
    let length = source.length;
    for(let i = 1; i < props.length; ++i){
        const token = props[i];
        switch(token.type){
            case "space":
                hasSpace = true;
            case "newline":
                length += token.source.length;
                break;
            case "comment":
                if (strict && !hasSpace) {
                    const message = "Comments must be separated from other tokens by white space characters";
                    onError(token, "MISSING_CHAR", message);
                }
                length += token.source.length;
                comment = token.source.substring(1);
                break;
            case "error":
                onError(token, "UNEXPECTED_TOKEN", token.message);
                length += token.source.length;
                break;
            default:
                {
                    const message = `Unexpected token in block scalar header: ${token.type}`;
                    onError(token, "UNEXPECTED_TOKEN", message);
                    const ts = token.source;
                    if (ts && typeof ts === "string") length += ts.length;
                }
        }
    }
    return {
        mode,
        indent,
        chomp,
        comment,
        length
    };
}
function splitLines(source) {
    const split = source.split(/\n( *)/);
    const first = split[0];
    const m = first.match(/^( *)/);
    const line0 = (m == null ? void 0 : m[1]) ? [
        m[1],
        first.slice(m[1].length)
    ] : [
        "",
        first
    ];
    const lines = [
        line0
    ];
    for(let i = 1; i < split.length; i += 2)lines.push([
        split[i],
        split[i + 1]
    ]);
    return lines;
}
// ../../node_modules/yaml/browser/dist/compose/resolve-flow-scalar.js
function resolveFlowScalar(scalar, strict, onError) {
    const { offset, type, source, end } = scalar;
    let _type;
    let value1;
    const _onError = (rel, code, msg)=>onError(offset + rel, code, msg);
    switch(type){
        case "scalar":
            _type = Scalar.PLAIN;
            value1 = plainValue(source, _onError);
            break;
        case "single-quoted-scalar":
            _type = Scalar.QUOTE_SINGLE;
            value1 = singleQuotedValue(source, _onError);
            break;
        case "double-quoted-scalar":
            _type = Scalar.QUOTE_DOUBLE;
            value1 = doubleQuotedValue(source, _onError);
            break;
        default:
            onError(scalar, "UNEXPECTED_TOKEN", `Expected a flow scalar value, but found: ${type}`);
            return {
                value: "",
                type: null,
                comment: "",
                range: [
                    offset,
                    offset + source.length,
                    offset + source.length
                ]
            };
    }
    const valueEnd = offset + source.length;
    const re = resolveEnd(end, valueEnd, strict, onError);
    return {
        value: value1,
        type: _type,
        comment: re.comment,
        range: [
            offset,
            valueEnd,
            re.offset
        ]
    };
}
function plainValue(source, onError) {
    let badChar = "";
    switch(source[0]){
        case "	":
            badChar = "a tab character";
            break;
        case ",":
            badChar = "flow indicator character ,";
            break;
        case "%":
            badChar = "directive indicator character %";
            break;
        case "|":
        case ">":
            {
                badChar = `block scalar indicator ${source[0]}`;
                break;
            }
        case "@":
        case "`":
            {
                badChar = `reserved character ${source[0]}`;
                break;
            }
    }
    if (badChar) onError(0, "BAD_SCALAR_START", `Plain value cannot start with ${badChar}`);
    return foldLines(source);
}
function singleQuotedValue(source, onError) {
    if (source[source.length - 1] !== "'" || source.length === 1) onError(source.length, "MISSING_CHAR", "Missing closing 'quote");
    return foldLines(source.slice(1, -1)).replace(/''/g, "'");
}
function foldLines(source) {
    var _a;
    let first, line;
    try {
        first = new RegExp("(.*?)(?<![ 	])[ 	]*\r?\n", "sy");
        line = new RegExp("[ 	]*(.*?)(?:(?<![ 	])[ 	]*)?\r?\n", "sy");
    } catch (_2) {
        first = RegExp("(.*?)[ \\t]*\\r?\\n", "sy");
        line = RegExp("[ \\t]*(.*?)[ \\t]*\\r?\\n", "sy");
    }
    let match = first.exec(source);
    if (!match) return source;
    let res = match[1];
    let sep = " ";
    let pos = first.lastIndex;
    line.lastIndex = pos;
    while(match = line.exec(source)){
        if (match[1] === "") {
            if (sep === "\n") res += sep;
            else sep = "\n";
        } else {
            res += sep + match[1];
            sep = " ";
        }
        pos = line.lastIndex;
    }
    const last = RegExp("[ \\t]*(.*)", "sy");
    last.lastIndex = pos;
    match = last.exec(source);
    return res + sep + ((_a = match == null ? void 0 : match[1]) != null ? _a : "");
}
function doubleQuotedValue(source, onError) {
    let res = "";
    for(let i = 1; i < source.length - 1; ++i){
        const ch = source[i];
        if (ch === "\r" && source[i + 1] === "\n") continue;
        if (ch === "\n") {
            const { fold, offset } = foldNewline(source, i);
            res += fold;
            i = offset;
        } else if (ch === "\\") {
            let next = source[++i];
            const cc = escapeCodes[next];
            if (cc) res += cc;
            else if (next === "\n") {
                next = source[i + 1];
                while(next === " " || next === "	")next = source[++i + 1];
            } else if (next === "\r" && source[i + 1] === "\n") {
                next = source[++i + 1];
                while(next === " " || next === "	")next = source[++i + 1];
            } else if (next === "x" || next === "u" || next === "U") {
                const length = {
                    x: 2,
                    u: 4,
                    U: 8
                }[next];
                res += parseCharCode(source, i + 1, length, onError);
                i += length;
            } else {
                const raw = source.substr(i - 1, 2);
                onError(i - 1, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
                res += raw;
            }
        } else if (ch === " " || ch === "	") {
            const wsStart = i;
            let next = source[i + 1];
            while(next === " " || next === "	")next = source[++i + 1];
            if (next !== "\n" && !(next === "\r" && source[i + 2] === "\n")) res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
        } else {
            res += ch;
        }
    }
    if (source[source.length - 1] !== '"' || source.length === 1) onError(source.length, "MISSING_CHAR", 'Missing closing "quote');
    return res;
}
function foldNewline(source, offset) {
    let fold = "";
    let ch = source[offset + 1];
    while(ch === " " || ch === "	" || ch === "\n" || ch === "\r"){
        if (ch === "\r" && source[offset + 2] !== "\n") break;
        if (ch === "\n") fold += "\n";
        offset += 1;
        ch = source[offset + 1];
    }
    if (!fold) fold = " ";
    return {
        fold,
        offset
    };
}
var escapeCodes = {
    "0": "\0",
    a: "\x07",
    b: "\b",
    e: "\x1B",
    f: "\f",
    n: "\n",
    r: "\r",
    t: "	",
    v: "\v",
    N: "\x85",
    _: "\xA0",
    L: "\u2028",
    P: "\u2029",
    " ": " ",
    '"': '"',
    "/": "/",
    "\\": "\\",
    "	": "	"
};
function parseCharCode(source, offset, length, onError) {
    const cc = source.substr(offset, length);
    const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
    const code = ok ? parseInt(cc, 16) : NaN;
    if (isNaN(code)) {
        const raw = source.substr(offset - 2, length + 2);
        onError(offset - 2, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
        return raw;
    }
    return String.fromCodePoint(code);
}
// ../../node_modules/yaml/browser/dist/compose/compose-scalar.js
function composeScalar(ctx, token, tagToken, onError) {
    const { value: value1, type, comment, range } = token.type === "block-scalar" ? resolveBlockScalar(token, ctx.options.strict, onError) : resolveFlowScalar(token, ctx.options.strict, onError);
    const tagName = tagToken ? ctx.directives.tagName(tagToken.source, (msg)=>onError(tagToken, "TAG_RESOLVE_FAILED", msg)) : null;
    const tag = tagToken && tagName ? findScalarTagByName(ctx.schema, value1, tagName, tagToken, onError) : token.type === "scalar" ? findScalarTagByTest(ctx, value1, token, onError) : ctx.schema[SCALAR];
    let scalar;
    try {
        const res = tag.resolve(value1, (msg)=>onError(tagToken != null ? tagToken : token, "TAG_RESOLVE_FAILED", msg), ctx.options);
        scalar = isScalar(res) ? res : new Scalar(res);
    } catch (error) {
        const msg = error instanceof Error ? error.message : String(error);
        onError(tagToken != null ? tagToken : token, "TAG_RESOLVE_FAILED", msg);
        scalar = new Scalar(value1);
    }
    scalar.range = range;
    scalar.source = value1;
    if (type) scalar.type = type;
    if (tagName) scalar.tag = tagName;
    if (tag.format) scalar.format = tag.format;
    if (comment) scalar.comment = comment;
    return scalar;
}
function findScalarTagByName(schema4, value1, tagName, tagToken, onError) {
    var _a;
    if (tagName === "!") return schema4[SCALAR];
    const matchWithTest = [];
    for (const tag of schema4.tags){
        if (!tag.collection && tag.tag === tagName) {
            if (tag.default && tag.test) matchWithTest.push(tag);
            else return tag;
        }
    }
    for (const tag of matchWithTest)if ((_a = tag.test) == null ? void 0 : _a.test(value1)) return tag;
    const kt = schema4.knownTags[tagName];
    if (kt && !kt.collection) {
        schema4.tags.push(Object.assign({}, kt, {
            default: false,
            test: void 0
        }));
        return kt;
    }
    onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, tagName !== "tag:yaml.org,2002:str");
    return schema4[SCALAR];
}
function findScalarTagByTest({ directives, schema: schema4 }, value1, token, onError) {
    var _a;
    const tag = schema4.tags.find((tag2)=>{
        var _a2;
        return tag2.default && ((_a2 = tag2.test) == null ? void 0 : _a2.test(value1));
    }) || schema4[SCALAR];
    if (schema4.compat) {
        const compat = (_a = schema4.compat.find((tag2)=>{
            var _a2;
            return tag2.default && ((_a2 = tag2.test) == null ? void 0 : _a2.test(value1));
        })) != null ? _a : schema4[SCALAR];
        if (tag.tag !== compat.tag) {
            const ts = directives.tagString(tag.tag);
            const cs = directives.tagString(compat.tag);
            const msg = `Value may be parsed as either ${ts} or ${cs}`;
            onError(token, "TAG_RESOLVE_FAILED", msg, true);
        }
    }
    return tag;
}
// ../../node_modules/yaml/browser/dist/compose/util-empty-scalar-position.js
function emptyScalarPosition(offset, before, pos) {
    if (before) {
        if (pos === null) pos = before.length;
        for(let i = pos - 1; i >= 0; --i){
            let st = before[i];
            switch(st.type){
                case "space":
                case "comment":
                case "newline":
                    offset -= st.source.length;
                    continue;
            }
            st = before[++i];
            while((st == null ? void 0 : st.type) === "space"){
                offset += st.source.length;
                st = before[++i];
            }
            break;
        }
    }
    return offset;
}
// ../../node_modules/yaml/browser/dist/compose/compose-node.js
var CN = {
    composeNode,
    composeEmptyNode
};
function composeNode(ctx, token, props, onError) {
    const { spaceBefore, comment, anchor, tag } = props;
    let node;
    let isSrcToken = true;
    switch(token.type){
        case "alias":
            node = composeAlias(ctx, token, onError);
            if (anchor || tag) onError(token, "ALIAS_PROPS", "An alias node must not specify any properties");
            break;
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
        case "block-scalar":
            node = composeScalar(ctx, token, tag, onError);
            if (anchor) node.anchor = anchor.source.substring(1);
            break;
        case "block-map":
        case "block-seq":
        case "flow-collection":
            node = composeCollection(CN, ctx, token, tag, onError);
            if (anchor) node.anchor = anchor.source.substring(1);
            break;
        default:
            {
                const message = token.type === "error" ? token.message : `Unsupported token (type: ${token.type})`;
                onError(token, "UNEXPECTED_TOKEN", message);
                node = composeEmptyNode(ctx, token.offset, void 0, null, props, onError);
                isSrcToken = false;
            }
    }
    if (anchor && node.anchor === "") onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
    if (spaceBefore) node.spaceBefore = true;
    if (comment) {
        if (token.type === "scalar" && token.source === "") node.comment = comment;
        else node.commentBefore = comment;
    }
    if (ctx.options.keepSourceTokens && isSrcToken) node.srcToken = token;
    return node;
}
function composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {
    const token = {
        type: "scalar",
        offset: emptyScalarPosition(offset, before, pos),
        indent: -1,
        source: ""
    };
    const node = composeScalar(ctx, token, tag, onError);
    if (anchor) {
        node.anchor = anchor.source.substring(1);
        if (node.anchor === "") onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
    }
    if (spaceBefore) node.spaceBefore = true;
    if (comment) {
        node.comment = comment;
        node.range[2] = end;
    }
    return node;
}
function composeAlias({ options }, { offset, source, end }, onError) {
    const alias = new Alias(source.substring(1));
    if (alias.source === "") onError(offset, "BAD_ALIAS", "Alias cannot be an empty string");
    if (alias.source.endsWith(":")) onError(offset + source.length - 1, "BAD_ALIAS", "Alias ending in : is ambiguous", true);
    const valueEnd = offset + source.length;
    const re = resolveEnd(end, valueEnd, options.strict, onError);
    alias.range = [
        offset,
        valueEnd,
        re.offset
    ];
    if (re.comment) alias.comment = re.comment;
    return alias;
}
// ../../node_modules/yaml/browser/dist/compose/compose-doc.js
function composeDoc(options, directives, { offset, start, value: value1, end }, onError) {
    const opts = Object.assign({
        _directives: directives
    }, options);
    const doc = new Document(void 0, opts);
    const ctx = {
        atRoot: true,
        directives: doc.directives,
        options: doc.options,
        schema: doc.schema
    };
    const props = resolveProps(start, {
        indicator: "doc-start",
        next: value1 != null ? value1 : end == null ? void 0 : end[0],
        offset,
        onError,
        startOnNewline: true
    });
    if (props.found) {
        doc.directives.docStart = true;
        if (value1 && (value1.type === "block-map" || value1.type === "block-seq") && !props.hasNewline) onError(props.end, "MISSING_CHAR", "Block collection cannot start on same line with directives-end marker");
    }
    doc.contents = value1 ? composeNode(ctx, value1, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);
    const contentEnd = doc.contents.range[2];
    const re = resolveEnd(end, contentEnd, false, onError);
    if (re.comment) doc.comment = re.comment;
    doc.range = [
        offset,
        contentEnd,
        re.offset
    ];
    return doc;
}
// ../../node_modules/yaml/browser/dist/compose/composer.js
function getErrorPos(src) {
    if (typeof src === "number") return [
        src,
        src + 1
    ];
    if (Array.isArray(src)) return src.length === 2 ? src : [
        src[0],
        src[1]
    ];
    const { offset, source } = src;
    return [
        offset,
        offset + (typeof source === "string" ? source.length : 1)
    ];
}
function parsePrelude(prelude) {
    var _a;
    let comment = "";
    let atComment = false;
    let afterEmptyLine = false;
    for(let i = 0; i < prelude.length; ++i){
        const source = prelude[i];
        switch(source[0]){
            case "#":
                comment += (comment === "" ? "" : afterEmptyLine ? "\n\n" : "\n") + (source.substring(1) || " ");
                atComment = true;
                afterEmptyLine = false;
                break;
            case "%":
                if (((_a = prelude[i + 1]) == null ? void 0 : _a[0]) !== "#") i += 1;
                atComment = false;
                break;
            default:
                if (!atComment) afterEmptyLine = true;
                atComment = false;
        }
    }
    return {
        comment,
        afterEmptyLine
    };
}
var Composer = class {
    decorate(doc, afterDoc) {
        const { comment, afterEmptyLine } = parsePrelude(this.prelude);
        if (comment) {
            const dc = doc.contents;
            if (afterDoc) {
                doc.comment = doc.comment ? `${doc.comment}
${comment}` : comment;
            } else if (afterEmptyLine || doc.directives.docStart || !dc) {
                doc.commentBefore = comment;
            } else if (isCollection(dc) && !dc.flow && dc.items.length > 0) {
                let it = dc.items[0];
                if (isPair(it)) it = it.key;
                const cb = it.commentBefore;
                it.commentBefore = cb ? `${comment}
${cb}` : comment;
            } else {
                const cb = dc.commentBefore;
                dc.commentBefore = cb ? `${comment}
${cb}` : comment;
            }
        }
        if (afterDoc) {
            Array.prototype.push.apply(doc.errors, this.errors);
            Array.prototype.push.apply(doc.warnings, this.warnings);
        } else {
            doc.errors = this.errors;
            doc.warnings = this.warnings;
        }
        this.prelude = [];
        this.errors = [];
        this.warnings = [];
    }
    /**
   * Current stream status information.
   *
   * Mostly useful at the end of input for an empty stream.
   */ streamInfo() {
        return {
            comment: parsePrelude(this.prelude).comment,
            directives: this.directives,
            errors: this.errors,
            warnings: this.warnings
        };
    }
    /**
   * Compose tokens into documents.
   *
   * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
   * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
   */ *compose(tokens, forceDoc = false, endOffset = -1) {
        for (const token of tokens)yield* this.next(token);
        yield* this.end(forceDoc, endOffset);
    }
    /** Advance the composer by one CST token. */ *next(token) {
        switch(token.type){
            case "directive":
                this.directives.add(token.source, (offset, message, warning)=>{
                    const pos = getErrorPos(token);
                    pos[0] += offset;
                    this.onError(pos, "BAD_DIRECTIVE", message, warning);
                });
                this.prelude.push(token.source);
                this.atDirectives = true;
                break;
            case "document":
                {
                    const doc = composeDoc(this.options, this.directives, token, this.onError);
                    if (this.atDirectives && !doc.directives.docStart) this.onError(token, "MISSING_CHAR", "Missing directives-end/doc-start indicator line");
                    this.decorate(doc, false);
                    if (this.doc) yield this.doc;
                    this.doc = doc;
                    this.atDirectives = false;
                    break;
                }
            case "byte-order-mark":
            case "space":
                break;
            case "comment":
            case "newline":
                this.prelude.push(token.source);
                break;
            case "error":
                {
                    const msg = token.source ? `${token.message}: ${JSON.stringify(token.source)}` : token.message;
                    const error = new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg);
                    if (this.atDirectives || !this.doc) this.errors.push(error);
                    else this.doc.errors.push(error);
                    break;
                }
            case "doc-end":
                {
                    if (!this.doc) {
                        const msg = "Unexpected doc-end without preceding document";
                        this.errors.push(new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg));
                        break;
                    }
                    this.doc.directives.docEnd = true;
                    const end = resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
                    this.decorate(this.doc, true);
                    if (end.comment) {
                        const dc = this.doc.comment;
                        this.doc.comment = dc ? `${dc}
${end.comment}` : end.comment;
                    }
                    this.doc.range[2] = end.offset;
                    break;
                }
            default:
                this.errors.push(new YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", `Unsupported token ${token.type}`));
        }
    }
    /**
   * Call at end of input to yield any remaining document.
   *
   * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
   * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
   */ *end(forceDoc = false, endOffset = -1) {
        if (this.doc) {
            this.decorate(this.doc, true);
            yield this.doc;
            this.doc = null;
        } else if (forceDoc) {
            const opts = Object.assign({
                _directives: this.directives
            }, this.options);
            const doc = new Document(void 0, opts);
            if (this.atDirectives) this.onError(endOffset, "MISSING_CHAR", "Missing directives-end indicator line");
            doc.range = [
                0,
                endOffset,
                endOffset
            ];
            this.decorate(doc, false);
            yield doc;
        }
    }
    constructor(options = {}){
        this.doc = null;
        this.atDirectives = false;
        this.prelude = [];
        this.errors = [];
        this.warnings = [];
        this.onError = (source, code, message, warning)=>{
            const pos = getErrorPos(source);
            if (warning) this.warnings.push(new YAMLWarning(pos, code, message));
            else this.errors.push(new YAMLParseError(pos, code, message));
        };
        this.directives = new Directives({
            version: options.version || "1.2"
        });
        this.options = options;
    }
};
// ../../node_modules/yaml/browser/dist/parse/cst.js
var cst_exports = {};
__export(cst_exports, {
    BOM: ()=>BOM,
    DOCUMENT: ()=>DOCUMENT,
    FLOW_END: ()=>FLOW_END,
    SCALAR: ()=>SCALAR2,
    createScalarToken: ()=>createScalarToken,
    isCollection: ()=>isCollection2,
    isScalar: ()=>isScalar2,
    prettyToken: ()=>prettyToken,
    resolveAsScalar: ()=>resolveAsScalar,
    setScalarValue: ()=>setScalarValue,
    stringify: ()=>stringify2,
    tokenType: ()=>tokenType,
    visit: ()=>visit3
});
// ../../node_modules/yaml/browser/dist/parse/cst-scalar.js
function resolveAsScalar(token, strict = true, onError) {
    if (token) {
        const _onError = (pos, code, message)=>{
            const offset = typeof pos === "number" ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
            if (onError) onError(offset, code, message);
            else throw new YAMLParseError([
                offset,
                offset + 1
            ], code, message);
        };
        switch(token.type){
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar":
                return resolveFlowScalar(token, strict, _onError);
            case "block-scalar":
                return resolveBlockScalar(token, strict, _onError);
        }
    }
    return null;
}
function createScalarToken(value1, context) {
    var _a;
    const { implicitKey = false, indent, inFlow = false, offset = -1, type = "PLAIN" } = context;
    const source = stringifyString({
        type,
        value: value1
    }, {
        implicitKey,
        indent: indent > 0 ? " ".repeat(indent) : "",
        inFlow,
        options: {
            blockQuote: true,
            lineWidth: -1
        }
    });
    const end = (_a = context.end) != null ? _a : [
        {
            type: "newline",
            offset: -1,
            indent,
            source: "\n"
        }
    ];
    switch(source[0]){
        case "|":
        case ">":
            {
                const he = source.indexOf("\n");
                const head = source.substring(0, he);
                const body = source.substring(he + 1) + "\n";
                const props = [
                    {
                        type: "block-scalar-header",
                        offset,
                        indent,
                        source: head
                    }
                ];
                if (!addEndtoBlockProps(props, end)) props.push({
                    type: "newline",
                    offset: -1,
                    indent,
                    source: "\n"
                });
                return {
                    type: "block-scalar",
                    offset,
                    indent,
                    props,
                    source: body
                };
            }
        case '"':
            return {
                type: "double-quoted-scalar",
                offset,
                indent,
                source,
                end
            };
        case "'":
            return {
                type: "single-quoted-scalar",
                offset,
                indent,
                source,
                end
            };
        default:
            return {
                type: "scalar",
                offset,
                indent,
                source,
                end
            };
    }
}
function setScalarValue(token, value1, context = {}) {
    let { afterKey = false, implicitKey = false, inFlow = false, type } = context;
    let indent = "indent" in token ? token.indent : null;
    if (afterKey && typeof indent === "number") indent += 2;
    if (!type) switch(token.type){
        case "single-quoted-scalar":
            type = "QUOTE_SINGLE";
            break;
        case "double-quoted-scalar":
            type = "QUOTE_DOUBLE";
            break;
        case "block-scalar":
            {
                const header = token.props[0];
                if (header.type !== "block-scalar-header") throw new Error("Invalid block scalar header");
                type = header.source[0] === ">" ? "BLOCK_FOLDED" : "BLOCK_LITERAL";
                break;
            }
        default:
            type = "PLAIN";
    }
    const source = stringifyString({
        type,
        value: value1
    }, {
        implicitKey: implicitKey || indent === null,
        indent: indent !== null && indent > 0 ? " ".repeat(indent) : "",
        inFlow,
        options: {
            blockQuote: true,
            lineWidth: -1
        }
    });
    switch(source[0]){
        case "|":
        case ">":
            setBlockScalarValue(token, source);
            break;
        case '"':
            setFlowScalarValue(token, source, "double-quoted-scalar");
            break;
        case "'":
            setFlowScalarValue(token, source, "single-quoted-scalar");
            break;
        default:
            setFlowScalarValue(token, source, "scalar");
    }
}
function setBlockScalarValue(token, source) {
    const he = source.indexOf("\n");
    const head = source.substring(0, he);
    const body = source.substring(he + 1) + "\n";
    if (token.type === "block-scalar") {
        const header = token.props[0];
        if (header.type !== "block-scalar-header") throw new Error("Invalid block scalar header");
        header.source = head;
        token.source = body;
    } else {
        const { offset } = token;
        const indent = "indent" in token ? token.indent : -1;
        const props = [
            {
                type: "block-scalar-header",
                offset,
                indent,
                source: head
            }
        ];
        if (!addEndtoBlockProps(props, "end" in token ? token.end : void 0)) props.push({
            type: "newline",
            offset: -1,
            indent,
            source: "\n"
        });
        for (const key of Object.keys(token))if (key !== "type" && key !== "offset") delete token[key];
        Object.assign(token, {
            type: "block-scalar",
            indent,
            props,
            source: body
        });
    }
}
function addEndtoBlockProps(props, end) {
    if (end) for (const st of end)switch(st.type){
        case "space":
        case "comment":
            props.push(st);
            break;
        case "newline":
            props.push(st);
            return true;
    }
    return false;
}
function setFlowScalarValue(token, source, type) {
    switch(token.type){
        case "scalar":
        case "double-quoted-scalar":
        case "single-quoted-scalar":
            token.type = type;
            token.source = source;
            break;
        case "block-scalar":
            {
                const end = token.props.slice(1);
                let oa = source.length;
                if (token.props[0].type === "block-scalar-header") oa -= token.props[0].source.length;
                for (const tok of end)tok.offset += oa;
                delete token.props;
                Object.assign(token, {
                    type,
                    source,
                    end
                });
                break;
            }
        case "block-map":
        case "block-seq":
            {
                const offset = token.offset + source.length;
                const nl = {
                    type: "newline",
                    offset,
                    indent: token.indent,
                    source: "\n"
                };
                delete token.items;
                Object.assign(token, {
                    type,
                    source,
                    end: [
                        nl
                    ]
                });
                break;
            }
        default:
            {
                const indent = "indent" in token ? token.indent : -1;
                const end = "end" in token && Array.isArray(token.end) ? token.end.filter((st)=>st.type === "space" || st.type === "comment" || st.type === "newline") : [];
                for (const key of Object.keys(token))if (key !== "type" && key !== "offset") delete token[key];
                Object.assign(token, {
                    type,
                    indent,
                    source,
                    end
                });
            }
    }
}
// ../../node_modules/yaml/browser/dist/parse/cst-stringify.js
var stringify2 = (cst)=>"type" in cst ? stringifyToken(cst) : stringifyItem(cst);
function stringifyToken(token) {
    switch(token.type){
        case "block-scalar":
            {
                let res = "";
                for (const tok of token.props)res += stringifyToken(tok);
                return res + token.source;
            }
        case "block-map":
        case "block-seq":
            {
                let res = "";
                for (const item of token.items)res += stringifyItem(item);
                return res;
            }
        case "flow-collection":
            {
                let res = token.start.source;
                for (const item of token.items)res += stringifyItem(item);
                for (const st of token.end)res += st.source;
                return res;
            }
        case "document":
            {
                let res = stringifyItem(token);
                if (token.end) for (const st of token.end)res += st.source;
                return res;
            }
        default:
            {
                let res = token.source;
                if ("end" in token && token.end) for (const st of token.end)res += st.source;
                return res;
            }
    }
}
function stringifyItem({ start, key, sep, value: value1 }) {
    let res = "";
    for (const st of start)res += st.source;
    if (key) res += stringifyToken(key);
    if (sep) for (const st of sep)res += st.source;
    if (value1) res += stringifyToken(value1);
    return res;
}
// ../../node_modules/yaml/browser/dist/parse/cst-visit.js
var BREAK2 = Symbol("break visit");
var SKIP2 = Symbol("skip children");
var REMOVE2 = Symbol("remove item");
function visit3(cst, visitor) {
    if ("type" in cst && cst.type === "document") cst = {
        start: cst.start,
        value: cst.value
    };
    _visit(Object.freeze([]), cst, visitor);
}
visit3.BREAK = BREAK2;
visit3.SKIP = SKIP2;
visit3.REMOVE = REMOVE2;
visit3.itemAtPath = (cst, path5)=>{
    let item = cst;
    for (const [field, index] of path5){
        const tok = item == null ? void 0 : item[field];
        if (tok && "items" in tok) {
            item = tok.items[index];
        } else return void 0;
    }
    return item;
};
visit3.parentCollection = (cst, path5)=>{
    const parent = visit3.itemAtPath(cst, path5.slice(0, -1));
    const field = path5[path5.length - 1][0];
    const coll = parent == null ? void 0 : parent[field];
    if (coll && "items" in coll) return coll;
    throw new Error("Parent collection not found");
};
function _visit(path5, item, visitor) {
    let ctrl = visitor(item, path5);
    if (typeof ctrl === "symbol") return ctrl;
    for (const field of [
        "key",
        "value"
    ]){
        const token = item[field];
        if (token && "items" in token) {
            for(let i = 0; i < token.items.length; ++i){
                const ci = _visit(Object.freeze(path5.concat([
                    [
                        field,
                        i
                    ]
                ])), token.items[i], visitor);
                if (typeof ci === "number") i = ci - 1;
                else if (ci === BREAK2) return BREAK2;
                else if (ci === REMOVE2) {
                    token.items.splice(i, 1);
                    i -= 1;
                }
            }
            if (typeof ctrl === "function" && field === "key") ctrl = ctrl(item, path5);
        }
    }
    return typeof ctrl === "function" ? ctrl(item, path5) : ctrl;
}
// ../../node_modules/yaml/browser/dist/parse/cst.js
var BOM = "\uFEFF";
var DOCUMENT = "";
var FLOW_END = "";
var SCALAR2 = "";
var isCollection2 = (token)=>!!token && "items" in token;
var isScalar2 = (token)=>!!token && (token.type === "scalar" || token.type === "single-quoted-scalar" || token.type === "double-quoted-scalar" || token.type === "block-scalar");
function prettyToken(token) {
    switch(token){
        case BOM:
            return "<BOM>";
        case DOCUMENT:
            return "<DOC>";
        case FLOW_END:
            return "<FLOW_END>";
        case SCALAR2:
            return "<SCALAR>";
        default:
            return JSON.stringify(token);
    }
}
function tokenType(source) {
    switch(source){
        case BOM:
            return "byte-order-mark";
        case DOCUMENT:
            return "doc-mode";
        case FLOW_END:
            return "flow-error-end";
        case SCALAR2:
            return "scalar";
        case "---":
            return "doc-start";
        case "...":
            return "doc-end";
        case "":
        case "\n":
        case "\r\n":
            return "newline";
        case "-":
            return "seq-item-ind";
        case "?":
            return "explicit-key-ind";
        case ":":
            return "map-value-ind";
        case "{":
            return "flow-map-start";
        case "}":
            return "flow-map-end";
        case "[":
            return "flow-seq-start";
        case "]":
            return "flow-seq-end";
        case ",":
            return "comma";
    }
    switch(source[0]){
        case " ":
        case "	":
            return "space";
        case "#":
            return "comment";
        case "%":
            return "directive-line";
        case "*":
            return "alias";
        case "&":
            return "anchor";
        case "!":
            return "tag";
        case "'":
            return "single-quoted-scalar";
        case '"':
            return "double-quoted-scalar";
        case "|":
        case ">":
            return "block-scalar-header";
    }
    return null;
}
// ../../node_modules/yaml/browser/dist/parse/lexer.js
function isEmpty(ch) {
    switch(ch){
        case void 0:
        case " ":
        case "\n":
        case "\r":
        case "	":
            return true;
        default:
            return false;
    }
}
var hexDigits = "0123456789ABCDEFabcdef".split("");
var tagChars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()".split("");
var invalidFlowScalarChars = ",[]{}".split("");
var invalidAnchorChars = " ,[]{}\n\r	".split("");
var isNotAnchorChar = (ch)=>!ch || invalidAnchorChars.includes(ch);
var Lexer = class {
    /**
   * Generate YAML tokens from the `source` string. If `incomplete`,
   * a part of the last line may be left as a buffer for the next call.
   *
   * @returns A generator of lexical tokens
   */ *lex(source, incomplete = false) {
        var _a;
        if (source) {
            this.buffer = this.buffer ? this.buffer + source : source;
            this.lineEndPos = null;
        }
        this.atEnd = !incomplete;
        let next = (_a = this.next) != null ? _a : "stream";
        while(next && (incomplete || this.hasChars(1)))next = yield* this.parseNext(next);
    }
    atLineEnd() {
        let i = this.pos;
        let ch = this.buffer[i];
        while(ch === " " || ch === "	")ch = this.buffer[++i];
        if (!ch || ch === "#" || ch === "\n") return true;
        if (ch === "\r") return this.buffer[i + 1] === "\n";
        return false;
    }
    charAt(n) {
        return this.buffer[this.pos + n];
    }
    continueScalar(offset) {
        let ch = this.buffer[offset];
        if (this.indentNext > 0) {
            let indent = 0;
            while(ch === " ")ch = this.buffer[++indent + offset];
            if (ch === "\r") {
                const next = this.buffer[indent + offset + 1];
                if (next === "\n" || !next && !this.atEnd) return offset + indent + 1;
            }
            return ch === "\n" || indent >= this.indentNext || !ch && !this.atEnd ? offset + indent : -1;
        }
        if (ch === "-" || ch === ".") {
            const dt = this.buffer.substr(offset, 3);
            if ((dt === "---" || dt === "...") && isEmpty(this.buffer[offset + 3])) return -1;
        }
        return offset;
    }
    getLine() {
        let end = this.lineEndPos;
        if (typeof end !== "number" || end !== -1 && end < this.pos) {
            end = this.buffer.indexOf("\n", this.pos);
            this.lineEndPos = end;
        }
        if (end === -1) return this.atEnd ? this.buffer.substring(this.pos) : null;
        if (this.buffer[end - 1] === "\r") end -= 1;
        return this.buffer.substring(this.pos, end);
    }
    hasChars(n) {
        return this.pos + n <= this.buffer.length;
    }
    setNext(state) {
        this.buffer = this.buffer.substring(this.pos);
        this.pos = 0;
        this.lineEndPos = null;
        this.next = state;
        return null;
    }
    peek(n) {
        return this.buffer.substr(this.pos, n);
    }
    *parseNext(next) {
        switch(next){
            case "stream":
                return yield* this.parseStream();
            case "line-start":
                return yield* this.parseLineStart();
            case "block-start":
                return yield* this.parseBlockStart();
            case "doc":
                return yield* this.parseDocument();
            case "flow":
                return yield* this.parseFlowCollection();
            case "quoted-scalar":
                return yield* this.parseQuotedScalar();
            case "block-scalar":
                return yield* this.parseBlockScalar();
            case "plain-scalar":
                return yield* this.parsePlainScalar();
        }
    }
    *parseStream() {
        let line = this.getLine();
        if (line === null) return this.setNext("stream");
        if (line[0] === BOM) {
            yield* this.pushCount(1);
            line = line.substring(1);
        }
        if (line[0] === "%") {
            let dirEnd = line.length;
            const cs = line.indexOf("#");
            if (cs !== -1) {
                const ch = line[cs - 1];
                if (ch === " " || ch === "	") dirEnd = cs - 1;
            }
            while(true){
                const ch = line[dirEnd - 1];
                if (ch === " " || ch === "	") dirEnd -= 1;
                else break;
            }
            const n = (yield* this.pushCount(dirEnd)) + (yield* this.pushSpaces(true));
            yield* this.pushCount(line.length - n);
            this.pushNewline();
            return "stream";
        }
        if (this.atLineEnd()) {
            const sp = yield* this.pushSpaces(true);
            yield* this.pushCount(line.length - sp);
            yield* this.pushNewline();
            return "stream";
        }
        yield DOCUMENT;
        return yield* this.parseLineStart();
    }
    *parseLineStart() {
        const ch = this.charAt(0);
        if (!ch && !this.atEnd) return this.setNext("line-start");
        if (ch === "-" || ch === ".") {
            if (!this.atEnd && !this.hasChars(4)) return this.setNext("line-start");
            const s = this.peek(3);
            if (s === "---" && isEmpty(this.charAt(3))) {
                yield* this.pushCount(3);
                this.indentValue = 0;
                this.indentNext = 0;
                return "doc";
            } else if (s === "..." && isEmpty(this.charAt(3))) {
                yield* this.pushCount(3);
                return "stream";
            }
        }
        this.indentValue = yield* this.pushSpaces(false);
        if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1))) this.indentNext = this.indentValue;
        return yield* this.parseBlockStart();
    }
    *parseBlockStart() {
        const [ch0, ch1] = this.peek(2);
        if (!ch1 && !this.atEnd) return this.setNext("block-start");
        if ((ch0 === "-" || ch0 === "?" || ch0 === ":") && isEmpty(ch1)) {
            const n = (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
            this.indentNext = this.indentValue + 1;
            this.indentValue += n;
            return yield* this.parseBlockStart();
        }
        return "doc";
    }
    *parseDocument() {
        yield* this.pushSpaces(true);
        const line = this.getLine();
        if (line === null) return this.setNext("doc");
        let n = yield* this.pushIndicators();
        switch(line[n]){
            case "#":
                yield* this.pushCount(line.length - n);
            case void 0:
                yield* this.pushNewline();
                return yield* this.parseLineStart();
            case "{":
            case "[":
                yield* this.pushCount(1);
                this.flowKey = false;
                this.flowLevel = 1;
                return "flow";
            case "}":
            case "]":
                yield* this.pushCount(1);
                return "doc";
            case "*":
                yield* this.pushUntil(isNotAnchorChar);
                return "doc";
            case '"':
            case "'":
                return yield* this.parseQuotedScalar();
            case "|":
            case ">":
                n += yield* this.parseBlockScalarHeader();
                n += yield* this.pushSpaces(true);
                yield* this.pushCount(line.length - n);
                yield* this.pushNewline();
                return yield* this.parseBlockScalar();
            default:
                return yield* this.parsePlainScalar();
        }
    }
    *parseFlowCollection() {
        let nl, sp;
        let indent = -1;
        do {
            nl = yield* this.pushNewline();
            if (nl > 0) {
                sp = yield* this.pushSpaces(false);
                this.indentValue = indent = sp;
            } else {
                sp = 0;
            }
            sp += yield* this.pushSpaces(true);
        }while (nl + sp > 0)
        const line = this.getLine();
        if (line === null) return this.setNext("flow");
        if (indent !== -1 && indent < this.indentNext && line[0] !== "#" || indent === 0 && (line.startsWith("---") || line.startsWith("...")) && isEmpty(line[3])) {
            const atFlowEndMarker = indent === this.indentNext - 1 && this.flowLevel === 1 && (line[0] === "]" || line[0] === "}");
            if (!atFlowEndMarker) {
                this.flowLevel = 0;
                yield FLOW_END;
                return yield* this.parseLineStart();
            }
        }
        let n = 0;
        while(line[n] === ","){
            n += yield* this.pushCount(1);
            n += yield* this.pushSpaces(true);
            this.flowKey = false;
        }
        n += yield* this.pushIndicators();
        switch(line[n]){
            case void 0:
                return "flow";
            case "#":
                yield* this.pushCount(line.length - n);
                return "flow";
            case "{":
            case "[":
                yield* this.pushCount(1);
                this.flowKey = false;
                this.flowLevel += 1;
                return "flow";
            case "}":
            case "]":
                yield* this.pushCount(1);
                this.flowKey = true;
                this.flowLevel -= 1;
                return this.flowLevel ? "flow" : "doc";
            case "*":
                yield* this.pushUntil(isNotAnchorChar);
                return "flow";
            case '"':
            case "'":
                this.flowKey = true;
                return yield* this.parseQuotedScalar();
            case ":":
                {
                    const next = this.charAt(1);
                    if (this.flowKey || isEmpty(next) || next === ",") {
                        this.flowKey = false;
                        yield* this.pushCount(1);
                        yield* this.pushSpaces(true);
                        return "flow";
                    }
                }
            default:
                this.flowKey = false;
                return yield* this.parsePlainScalar();
        }
    }
    *parseQuotedScalar() {
        const quote = this.charAt(0);
        let end = this.buffer.indexOf(quote, this.pos + 1);
        if (quote === "'") {
            while(end !== -1 && this.buffer[end + 1] === "'")end = this.buffer.indexOf("'", end + 2);
        } else {
            while(end !== -1){
                let n = 0;
                while(this.buffer[end - 1 - n] === "\\")n += 1;
                if (n % 2 === 0) break;
                end = this.buffer.indexOf('"', end + 1);
            }
        }
        const qb = this.buffer.substring(0, end);
        let nl = qb.indexOf("\n", this.pos);
        if (nl !== -1) {
            while(nl !== -1){
                const cs = this.continueScalar(nl + 1);
                if (cs === -1) break;
                nl = qb.indexOf("\n", cs);
            }
            if (nl !== -1) {
                end = nl - (qb[nl - 1] === "\r" ? 2 : 1);
            }
        }
        if (end === -1) {
            if (!this.atEnd) return this.setNext("quoted-scalar");
            end = this.buffer.length;
        }
        yield* this.pushToIndex(end + 1, false);
        return this.flowLevel ? "flow" : "doc";
    }
    *parseBlockScalarHeader() {
        this.blockScalarIndent = -1;
        this.blockScalarKeep = false;
        let i = this.pos;
        while(true){
            const ch = this.buffer[++i];
            if (ch === "+") this.blockScalarKeep = true;
            else if (ch > "0" && ch <= "9") this.blockScalarIndent = Number(ch) - 1;
            else if (ch !== "-") break;
        }
        return yield* this.pushUntil((ch)=>isEmpty(ch) || ch === "#");
    }
    *parseBlockScalar() {
        let nl = this.pos - 1;
        let indent = 0;
        let ch;
        loop: for(let i = this.pos; ch = this.buffer[i]; ++i){
            switch(ch){
                case " ":
                    indent += 1;
                    break;
                case "\n":
                    nl = i;
                    indent = 0;
                    break;
                case "\r":
                    {
                        const next = this.buffer[i + 1];
                        if (!next && !this.atEnd) return this.setNext("block-scalar");
                        if (next === "\n") break;
                    }
                default:
                    break loop;
            }
        }
        if (!ch && !this.atEnd) return this.setNext("block-scalar");
        if (indent >= this.indentNext) {
            if (this.blockScalarIndent === -1) this.indentNext = indent;
            else this.indentNext += this.blockScalarIndent;
            do {
                const cs = this.continueScalar(nl + 1);
                if (cs === -1) break;
                nl = this.buffer.indexOf("\n", cs);
            }while (nl !== -1)
            if (nl === -1) {
                if (!this.atEnd) return this.setNext("block-scalar");
                nl = this.buffer.length;
            }
        }
        if (!this.blockScalarKeep) {
            do {
                let i = nl - 1;
                let ch2 = this.buffer[i];
                if (ch2 === "\r") ch2 = this.buffer[--i];
                const lastChar = i;
                while(ch2 === " " || ch2 === "	")ch2 = this.buffer[--i];
                if (ch2 === "\n" && i >= this.pos && i + 1 + indent > lastChar) nl = i;
                else break;
            }while (true)
        }
        yield SCALAR2;
        yield* this.pushToIndex(nl + 1, true);
        return yield* this.parseLineStart();
    }
    *parsePlainScalar() {
        const inFlow = this.flowLevel > 0;
        let end = this.pos - 1;
        let i = this.pos - 1;
        let ch;
        while(ch = this.buffer[++i]){
            if (ch === ":") {
                const next = this.buffer[i + 1];
                if (isEmpty(next) || inFlow && next === ",") break;
                end = i;
            } else if (isEmpty(ch)) {
                let next = this.buffer[i + 1];
                if (ch === "\r") {
                    if (next === "\n") {
                        i += 1;
                        ch = "\n";
                        next = this.buffer[i + 1];
                    } else end = i;
                }
                if (next === "#" || inFlow && invalidFlowScalarChars.includes(next)) break;
                if (ch === "\n") {
                    const cs = this.continueScalar(i + 1);
                    if (cs === -1) break;
                    i = Math.max(i, cs - 2);
                }
            } else {
                if (inFlow && invalidFlowScalarChars.includes(ch)) break;
                end = i;
            }
        }
        if (!ch && !this.atEnd) return this.setNext("plain-scalar");
        yield SCALAR2;
        yield* this.pushToIndex(end + 1, true);
        return inFlow ? "flow" : "doc";
    }
    *pushCount(n) {
        if (n > 0) {
            yield this.buffer.substr(this.pos, n);
            this.pos += n;
            return n;
        }
        return 0;
    }
    *pushToIndex(i, allowEmpty) {
        const s = this.buffer.slice(this.pos, i);
        if (s) {
            yield s;
            this.pos += s.length;
            return s.length;
        } else if (allowEmpty) yield "";
        return 0;
    }
    *pushIndicators() {
        switch(this.charAt(0)){
            case "!":
                return (yield* this.pushTag()) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
            case "&":
                return (yield* this.pushUntil(isNotAnchorChar)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
            case "-":
            case "?":
            case ":":
                {
                    const inFlow = this.flowLevel > 0;
                    const ch1 = this.charAt(1);
                    if (isEmpty(ch1) || inFlow && invalidFlowScalarChars.includes(ch1)) {
                        if (!inFlow) this.indentNext = this.indentValue + 1;
                        else if (this.flowKey) this.flowKey = false;
                        return (yield* this.pushCount(1)) + (yield* this.pushSpaces(true)) + (yield* this.pushIndicators());
                    }
                }
        }
        return 0;
    }
    *pushTag() {
        if (this.charAt(1) === "<") {
            let i = this.pos + 2;
            let ch = this.buffer[i];
            while(!isEmpty(ch) && ch !== ">")ch = this.buffer[++i];
            return yield* this.pushToIndex(ch === ">" ? i + 1 : i, false);
        } else {
            let i = this.pos + 1;
            let ch = this.buffer[i];
            while(ch){
                if (tagChars.includes(ch)) ch = this.buffer[++i];
                else if (ch === "%" && hexDigits.includes(this.buffer[i + 1]) && hexDigits.includes(this.buffer[i + 2])) {
                    ch = this.buffer[i += 3];
                } else break;
            }
            return yield* this.pushToIndex(i, false);
        }
    }
    *pushNewline() {
        const ch = this.buffer[this.pos];
        if (ch === "\n") return yield* this.pushCount(1);
        else if (ch === "\r" && this.charAt(1) === "\n") return yield* this.pushCount(2);
        else return 0;
    }
    *pushSpaces(allowTabs) {
        let i = this.pos - 1;
        let ch;
        do {
            ch = this.buffer[++i];
        }while (ch === " " || allowTabs && ch === "	")
        const n = i - this.pos;
        if (n > 0) {
            yield this.buffer.substr(this.pos, n);
            this.pos = i;
        }
        return n;
    }
    *pushUntil(test) {
        let i = this.pos;
        let ch = this.buffer[i];
        while(!test(ch))ch = this.buffer[++i];
        return yield* this.pushToIndex(i, false);
    }
    constructor(){
        this.atEnd = false;
        this.blockScalarIndent = -1;
        this.blockScalarKeep = false;
        this.buffer = "";
        this.flowKey = false;
        this.flowLevel = 0;
        this.indentNext = 0;
        this.indentValue = 0;
        this.lineEndPos = null;
        this.next = null;
        this.pos = 0;
    }
};
// ../../node_modules/yaml/browser/dist/parse/line-counter.js
var LineCounter = class {
    constructor(){
        this.lineStarts = [];
        this.addNewLine = (offset)=>this.lineStarts.push(offset);
        this.linePos = (offset)=>{
            let low = 0;
            let high = this.lineStarts.length;
            while(low < high){
                const mid = low + high >> 1;
                if (this.lineStarts[mid] < offset) low = mid + 1;
                else high = mid;
            }
            if (this.lineStarts[low] === offset) return {
                line: low + 1,
                col: 1
            };
            if (low === 0) return {
                line: 0,
                col: offset
            };
            const start = this.lineStarts[low - 1];
            return {
                line: low,
                col: offset - start + 1
            };
        };
    }
};
// ../../node_modules/yaml/browser/dist/parse/parser.js
function includesToken(list, type) {
    for(let i = 0; i < list.length; ++i)if (list[i].type === type) return true;
    return false;
}
function findNonEmptyIndex(list) {
    for(let i = 0; i < list.length; ++i){
        switch(list[i].type){
            case "space":
            case "comment":
            case "newline":
                break;
            default:
                return i;
        }
    }
    return -1;
}
function isFlowToken(token) {
    switch(token == null ? void 0 : token.type){
        case "alias":
        case "scalar":
        case "single-quoted-scalar":
        case "double-quoted-scalar":
        case "flow-collection":
            return true;
        default:
            return false;
    }
}
function getPrevProps(parent) {
    var _a;
    switch(parent.type){
        case "document":
            return parent.start;
        case "block-map":
            {
                const it = parent.items[parent.items.length - 1];
                return (_a = it.sep) != null ? _a : it.start;
            }
        case "block-seq":
            return parent.items[parent.items.length - 1].start;
        default:
            return [];
    }
}
function getFirstKeyStartProps(prev) {
    var _a;
    if (prev.length === 0) return [];
    let i = prev.length;
    loop: while(--i >= 0){
        switch(prev[i].type){
            case "doc-start":
            case "explicit-key-ind":
            case "map-value-ind":
            case "seq-item-ind":
            case "newline":
                break loop;
        }
    }
    while(((_a = prev[++i]) == null ? void 0 : _a.type) === "space"){}
    return prev.splice(i, prev.length);
}
function fixFlowSeqItems(fc) {
    if (fc.start.type === "flow-seq-start") {
        for (const it of fc.items){
            if (it.sep && !it.value && !includesToken(it.start, "explicit-key-ind") && !includesToken(it.sep, "map-value-ind")) {
                if (it.key) it.value = it.key;
                delete it.key;
                if (isFlowToken(it.value)) {
                    if (it.value.end) Array.prototype.push.apply(it.value.end, it.sep);
                    else it.value.end = it.sep;
                } else Array.prototype.push.apply(it.start, it.sep);
                delete it.sep;
            }
        }
    }
}
var Parser = class {
    /**
   * Parse `source` as a YAML stream.
   * If `incomplete`, a part of the last line may be left as a buffer for the next call.
   *
   * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.
   *
   * @returns A generator of tokens representing each directive, document, and other structure.
   */ *parse(source, incomplete = false) {
        if (this.onNewLine && this.offset === 0) this.onNewLine(0);
        for (const lexeme of this.lexer.lex(source, incomplete))yield* this.next(lexeme);
        if (!incomplete) yield* this.end();
    }
    /**
   * Advance the parser by the `source` of one lexical token.
   */ *next(source) {
        this.source = source;
        if (this.atScalar) {
            this.atScalar = false;
            yield* this.step();
            this.offset += source.length;
            return;
        }
        const type = tokenType(source);
        if (!type) {
            const message = `Not a YAML token: ${source}`;
            yield* this.pop({
                type: "error",
                offset: this.offset,
                message,
                source
            });
            this.offset += source.length;
        } else if (type === "scalar") {
            this.atNewLine = false;
            this.atScalar = true;
            this.type = "scalar";
        } else {
            this.type = type;
            yield* this.step();
            switch(type){
                case "newline":
                    this.atNewLine = true;
                    this.indent = 0;
                    if (this.onNewLine) this.onNewLine(this.offset + source.length);
                    break;
                case "space":
                    if (this.atNewLine && source[0] === " ") this.indent += source.length;
                    break;
                case "explicit-key-ind":
                case "map-value-ind":
                case "seq-item-ind":
                    if (this.atNewLine) this.indent += source.length;
                    break;
                case "doc-mode":
                case "flow-error-end":
                    return;
                default:
                    this.atNewLine = false;
            }
            this.offset += source.length;
        }
    }
    /** Call at end of input to push out any remaining constructions */ *end() {
        while(this.stack.length > 0)yield* this.pop();
    }
    get sourceToken() {
        const st = {
            type: this.type,
            offset: this.offset,
            indent: this.indent,
            source: this.source
        };
        return st;
    }
    *step() {
        const top = this.peek(1);
        if (this.type === "doc-end" && (!top || top.type !== "doc-end")) {
            while(this.stack.length > 0)yield* this.pop();
            this.stack.push({
                type: "doc-end",
                offset: this.offset,
                source: this.source
            });
            return;
        }
        if (!top) return yield* this.stream();
        switch(top.type){
            case "document":
                return yield* this.document(top);
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar":
                return yield* this.scalar(top);
            case "block-scalar":
                return yield* this.blockScalar(top);
            case "block-map":
                return yield* this.blockMap(top);
            case "block-seq":
                return yield* this.blockSequence(top);
            case "flow-collection":
                return yield* this.flowCollection(top);
            case "doc-end":
                return yield* this.documentEnd(top);
        }
        yield* this.pop();
    }
    peek(n) {
        return this.stack[this.stack.length - n];
    }
    *pop(error) {
        const token = error != null ? error : this.stack.pop();
        if (!token) {
            const message = "Tried to pop an empty stack";
            yield {
                type: "error",
                offset: this.offset,
                source: "",
                message
            };
        } else if (this.stack.length === 0) {
            yield token;
        } else {
            const top = this.peek(1);
            if (token.type === "block-scalar") {
                token.indent = "indent" in top ? top.indent : 0;
            } else if (token.type === "flow-collection" && top.type === "document") {
                token.indent = 0;
            }
            if (token.type === "flow-collection") fixFlowSeqItems(token);
            switch(top.type){
                case "document":
                    top.value = token;
                    break;
                case "block-scalar":
                    top.props.push(token);
                    break;
                case "block-map":
                    {
                        const it = top.items[top.items.length - 1];
                        if (it.value) {
                            top.items.push({
                                start: [],
                                key: token,
                                sep: []
                            });
                            this.onKeyLine = true;
                            return;
                        } else if (it.sep) {
                            it.value = token;
                        } else {
                            Object.assign(it, {
                                key: token,
                                sep: []
                            });
                            this.onKeyLine = !includesToken(it.start, "explicit-key-ind");
                            return;
                        }
                        break;
                    }
                case "block-seq":
                    {
                        const it = top.items[top.items.length - 1];
                        if (it.value) top.items.push({
                            start: [],
                            value: token
                        });
                        else it.value = token;
                        break;
                    }
                case "flow-collection":
                    {
                        const it = top.items[top.items.length - 1];
                        if (!it || it.value) top.items.push({
                            start: [],
                            key: token,
                            sep: []
                        });
                        else if (it.sep) it.value = token;
                        else Object.assign(it, {
                            key: token,
                            sep: []
                        });
                        return;
                    }
                default:
                    yield* this.pop();
                    yield* this.pop(token);
            }
            if ((top.type === "document" || top.type === "block-map" || top.type === "block-seq") && (token.type === "block-map" || token.type === "block-seq")) {
                const last = token.items[token.items.length - 1];
                if (last && !last.sep && !last.value && last.start.length > 0 && findNonEmptyIndex(last.start) === -1 && (token.indent === 0 || last.start.every((st)=>st.type !== "comment" || st.indent < token.indent))) {
                    if (top.type === "document") top.end = last.start;
                    else top.items.push({
                        start: last.start
                    });
                    token.items.splice(-1, 1);
                }
            }
        }
    }
    *stream() {
        switch(this.type){
            case "directive-line":
                yield {
                    type: "directive",
                    offset: this.offset,
                    source: this.source
                };
                return;
            case "byte-order-mark":
            case "space":
            case "comment":
            case "newline":
                yield this.sourceToken;
                return;
            case "doc-mode":
            case "doc-start":
                {
                    const doc = {
                        type: "document",
                        offset: this.offset,
                        start: []
                    };
                    if (this.type === "doc-start") doc.start.push(this.sourceToken);
                    this.stack.push(doc);
                    return;
                }
        }
        yield {
            type: "error",
            offset: this.offset,
            message: `Unexpected ${this.type} token in YAML stream`,
            source: this.source
        };
    }
    *document(doc) {
        if (doc.value) return yield* this.lineEnd(doc);
        switch(this.type){
            case "doc-start":
                {
                    if (findNonEmptyIndex(doc.start) !== -1) {
                        yield* this.pop();
                        yield* this.step();
                    } else doc.start.push(this.sourceToken);
                    return;
                }
            case "anchor":
            case "tag":
            case "space":
            case "comment":
            case "newline":
                doc.start.push(this.sourceToken);
                return;
        }
        const bv = this.startBlockValue(doc);
        if (bv) this.stack.push(bv);
        else {
            yield {
                type: "error",
                offset: this.offset,
                message: `Unexpected ${this.type} token in YAML document`,
                source: this.source
            };
        }
    }
    *scalar(scalar) {
        if (this.type === "map-value-ind") {
            const prev = getPrevProps(this.peek(2));
            const start = getFirstKeyStartProps(prev);
            let sep;
            if (scalar.end) {
                sep = scalar.end;
                sep.push(this.sourceToken);
                delete scalar.end;
            } else sep = [
                this.sourceToken
            ];
            const map2 = {
                type: "block-map",
                offset: scalar.offset,
                indent: scalar.indent,
                items: [
                    {
                        start,
                        key: scalar,
                        sep
                    }
                ]
            };
            this.onKeyLine = true;
            this.stack[this.stack.length - 1] = map2;
        } else yield* this.lineEnd(scalar);
    }
    *blockScalar(scalar) {
        switch(this.type){
            case "space":
            case "comment":
            case "newline":
                scalar.props.push(this.sourceToken);
                return;
            case "scalar":
                scalar.source = this.source;
                this.atNewLine = true;
                this.indent = 0;
                if (this.onNewLine) {
                    let nl = this.source.indexOf("\n") + 1;
                    while(nl !== 0){
                        this.onNewLine(this.offset + nl);
                        nl = this.source.indexOf("\n", nl) + 1;
                    }
                }
                yield* this.pop();
                break;
            default:
                yield* this.pop();
                yield* this.step();
        }
    }
    *blockMap(map2) {
        var _a;
        const it = map2.items[map2.items.length - 1];
        switch(this.type){
            case "newline":
                this.onKeyLine = false;
                if (it.value) {
                    const end = "end" in it.value ? it.value.end : void 0;
                    const last = Array.isArray(end) ? end[end.length - 1] : void 0;
                    if ((last == null ? void 0 : last.type) === "comment") end == null ? void 0 : end.push(this.sourceToken);
                    else map2.items.push({
                        start: [
                            this.sourceToken
                        ]
                    });
                } else if (it.sep) {
                    it.sep.push(this.sourceToken);
                } else {
                    it.start.push(this.sourceToken);
                }
                return;
            case "space":
            case "comment":
                if (it.value) {
                    map2.items.push({
                        start: [
                            this.sourceToken
                        ]
                    });
                } else if (it.sep) {
                    it.sep.push(this.sourceToken);
                } else {
                    if (this.atIndentedComment(it.start, map2.indent)) {
                        const prev = map2.items[map2.items.length - 2];
                        const end = (_a = prev == null ? void 0 : prev.value) == null ? void 0 : _a.end;
                        if (Array.isArray(end)) {
                            Array.prototype.push.apply(end, it.start);
                            end.push(this.sourceToken);
                            map2.items.pop();
                            return;
                        }
                    }
                    it.start.push(this.sourceToken);
                }
                return;
        }
        if (this.indent >= map2.indent) {
            const atNextItem = !this.onKeyLine && this.indent === map2.indent && it.sep;
            let start = [];
            if (atNextItem && it.sep && !it.value) {
                const nl = [];
                for(let i = 0; i < it.sep.length; ++i){
                    const st = it.sep[i];
                    switch(st.type){
                        case "newline":
                            nl.push(i);
                            break;
                        case "space":
                            break;
                        case "comment":
                            if (st.indent > map2.indent) nl.length = 0;
                            break;
                        default:
                            nl.length = 0;
                    }
                }
                if (nl.length >= 2) start = it.sep.splice(nl[1]);
            }
            switch(this.type){
                case "anchor":
                case "tag":
                    if (atNextItem || it.value) {
                        start.push(this.sourceToken);
                        map2.items.push({
                            start
                        });
                        this.onKeyLine = true;
                    } else if (it.sep) {
                        it.sep.push(this.sourceToken);
                    } else {
                        it.start.push(this.sourceToken);
                    }
                    return;
                case "explicit-key-ind":
                    if (!it.sep && !includesToken(it.start, "explicit-key-ind")) {
                        it.start.push(this.sourceToken);
                    } else if (atNextItem || it.value) {
                        start.push(this.sourceToken);
                        map2.items.push({
                            start
                        });
                    } else {
                        this.stack.push({
                            type: "block-map",
                            offset: this.offset,
                            indent: this.indent,
                            items: [
                                {
                                    start: [
                                        this.sourceToken
                                    ]
                                }
                            ]
                        });
                    }
                    this.onKeyLine = true;
                    return;
                case "map-value-ind":
                    if (includesToken(it.start, "explicit-key-ind")) {
                        if (!it.sep) {
                            if (includesToken(it.start, "newline")) {
                                Object.assign(it, {
                                    key: null,
                                    sep: [
                                        this.sourceToken
                                    ]
                                });
                            } else {
                                const start2 = getFirstKeyStartProps(it.start);
                                this.stack.push({
                                    type: "block-map",
                                    offset: this.offset,
                                    indent: this.indent,
                                    items: [
                                        {
                                            start: start2,
                                            key: null,
                                            sep: [
                                                this.sourceToken
                                            ]
                                        }
                                    ]
                                });
                            }
                        } else if (it.value) {
                            map2.items.push({
                                start: [],
                                key: null,
                                sep: [
                                    this.sourceToken
                                ]
                            });
                        } else if (includesToken(it.sep, "map-value-ind")) {
                            this.stack.push({
                                type: "block-map",
                                offset: this.offset,
                                indent: this.indent,
                                items: [
                                    {
                                        start,
                                        key: null,
                                        sep: [
                                            this.sourceToken
                                        ]
                                    }
                                ]
                            });
                        } else if (isFlowToken(it.key) && !includesToken(it.sep, "newline")) {
                            const start2 = getFirstKeyStartProps(it.start);
                            const key = it.key;
                            const sep = it.sep;
                            sep.push(this.sourceToken);
                            delete it.key, delete it.sep;
                            this.stack.push({
                                type: "block-map",
                                offset: this.offset,
                                indent: this.indent,
                                items: [
                                    {
                                        start: start2,
                                        key,
                                        sep
                                    }
                                ]
                            });
                        } else if (start.length > 0) {
                            it.sep = it.sep.concat(start, this.sourceToken);
                        } else {
                            it.sep.push(this.sourceToken);
                        }
                    } else {
                        if (!it.sep) {
                            Object.assign(it, {
                                key: null,
                                sep: [
                                    this.sourceToken
                                ]
                            });
                        } else if (it.value || atNextItem) {
                            map2.items.push({
                                start,
                                key: null,
                                sep: [
                                    this.sourceToken
                                ]
                            });
                        } else if (includesToken(it.sep, "map-value-ind")) {
                            this.stack.push({
                                type: "block-map",
                                offset: this.offset,
                                indent: this.indent,
                                items: [
                                    {
                                        start: [],
                                        key: null,
                                        sep: [
                                            this.sourceToken
                                        ]
                                    }
                                ]
                            });
                        } else {
                            it.sep.push(this.sourceToken);
                        }
                    }
                    this.onKeyLine = true;
                    return;
                case "alias":
                case "scalar":
                case "single-quoted-scalar":
                case "double-quoted-scalar":
                    {
                        const fs = this.flowScalar(this.type);
                        if (atNextItem || it.value) {
                            map2.items.push({
                                start,
                                key: fs,
                                sep: []
                            });
                            this.onKeyLine = true;
                        } else if (it.sep) {
                            this.stack.push(fs);
                        } else {
                            Object.assign(it, {
                                key: fs,
                                sep: []
                            });
                            this.onKeyLine = true;
                        }
                        return;
                    }
                default:
                    {
                        const bv = this.startBlockValue(map2);
                        if (bv) {
                            if (atNextItem && bv.type !== "block-seq" && includesToken(it.start, "explicit-key-ind")) {
                                map2.items.push({
                                    start
                                });
                            }
                            this.stack.push(bv);
                            return;
                        }
                    }
            }
        }
        yield* this.pop();
        yield* this.step();
    }
    *blockSequence(seq2) {
        var _a;
        const it = seq2.items[seq2.items.length - 1];
        switch(this.type){
            case "newline":
                if (it.value) {
                    const end = "end" in it.value ? it.value.end : void 0;
                    const last = Array.isArray(end) ? end[end.length - 1] : void 0;
                    if ((last == null ? void 0 : last.type) === "comment") end == null ? void 0 : end.push(this.sourceToken);
                    else seq2.items.push({
                        start: [
                            this.sourceToken
                        ]
                    });
                } else it.start.push(this.sourceToken);
                return;
            case "space":
            case "comment":
                if (it.value) seq2.items.push({
                    start: [
                        this.sourceToken
                    ]
                });
                else {
                    if (this.atIndentedComment(it.start, seq2.indent)) {
                        const prev = seq2.items[seq2.items.length - 2];
                        const end = (_a = prev == null ? void 0 : prev.value) == null ? void 0 : _a.end;
                        if (Array.isArray(end)) {
                            Array.prototype.push.apply(end, it.start);
                            end.push(this.sourceToken);
                            seq2.items.pop();
                            return;
                        }
                    }
                    it.start.push(this.sourceToken);
                }
                return;
            case "anchor":
            case "tag":
                if (it.value || this.indent <= seq2.indent) break;
                it.start.push(this.sourceToken);
                return;
            case "seq-item-ind":
                if (this.indent !== seq2.indent) break;
                if (it.value || includesToken(it.start, "seq-item-ind")) seq2.items.push({
                    start: [
                        this.sourceToken
                    ]
                });
                else it.start.push(this.sourceToken);
                return;
        }
        if (this.indent > seq2.indent) {
            const bv = this.startBlockValue(seq2);
            if (bv) {
                this.stack.push(bv);
                return;
            }
        }
        yield* this.pop();
        yield* this.step();
    }
    *flowCollection(fc) {
        const it = fc.items[fc.items.length - 1];
        if (this.type === "flow-error-end") {
            let top;
            do {
                yield* this.pop();
                top = this.peek(1);
            }while (top && top.type === "flow-collection")
        } else if (fc.end.length === 0) {
            switch(this.type){
                case "comma":
                case "explicit-key-ind":
                    if (!it || it.sep) fc.items.push({
                        start: [
                            this.sourceToken
                        ]
                    });
                    else it.start.push(this.sourceToken);
                    return;
                case "map-value-ind":
                    if (!it || it.value) fc.items.push({
                        start: [],
                        key: null,
                        sep: [
                            this.sourceToken
                        ]
                    });
                    else if (it.sep) it.sep.push(this.sourceToken);
                    else Object.assign(it, {
                        key: null,
                        sep: [
                            this.sourceToken
                        ]
                    });
                    return;
                case "space":
                case "comment":
                case "newline":
                case "anchor":
                case "tag":
                    if (!it || it.value) fc.items.push({
                        start: [
                            this.sourceToken
                        ]
                    });
                    else if (it.sep) it.sep.push(this.sourceToken);
                    else it.start.push(this.sourceToken);
                    return;
                case "alias":
                case "scalar":
                case "single-quoted-scalar":
                case "double-quoted-scalar":
                    {
                        const fs = this.flowScalar(this.type);
                        if (!it || it.value) fc.items.push({
                            start: [],
                            key: fs,
                            sep: []
                        });
                        else if (it.sep) this.stack.push(fs);
                        else Object.assign(it, {
                            key: fs,
                            sep: []
                        });
                        return;
                    }
                case "flow-map-end":
                case "flow-seq-end":
                    fc.end.push(this.sourceToken);
                    return;
            }
            const bv = this.startBlockValue(fc);
            if (bv) this.stack.push(bv);
            else {
                yield* this.pop();
                yield* this.step();
            }
        } else {
            const parent = this.peek(2);
            if (parent.type === "block-map" && (this.type === "map-value-ind" && parent.indent === fc.indent || this.type === "newline" && !parent.items[parent.items.length - 1].sep)) {
                yield* this.pop();
                yield* this.step();
            } else if (this.type === "map-value-ind" && parent.type !== "flow-collection") {
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                fixFlowSeqItems(fc);
                const sep = fc.end.splice(1, fc.end.length);
                sep.push(this.sourceToken);
                const map2 = {
                    type: "block-map",
                    offset: fc.offset,
                    indent: fc.indent,
                    items: [
                        {
                            start,
                            key: fc,
                            sep
                        }
                    ]
                };
                this.onKeyLine = true;
                this.stack[this.stack.length - 1] = map2;
            } else {
                yield* this.lineEnd(fc);
            }
        }
    }
    flowScalar(type) {
        if (this.onNewLine) {
            let nl = this.source.indexOf("\n") + 1;
            while(nl !== 0){
                this.onNewLine(this.offset + nl);
                nl = this.source.indexOf("\n", nl) + 1;
            }
        }
        return {
            type,
            offset: this.offset,
            indent: this.indent,
            source: this.source
        };
    }
    startBlockValue(parent) {
        switch(this.type){
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar":
                return this.flowScalar(this.type);
            case "block-scalar-header":
                return {
                    type: "block-scalar",
                    offset: this.offset,
                    indent: this.indent,
                    props: [
                        this.sourceToken
                    ],
                    source: ""
                };
            case "flow-map-start":
            case "flow-seq-start":
                return {
                    type: "flow-collection",
                    offset: this.offset,
                    indent: this.indent,
                    start: this.sourceToken,
                    items: [],
                    end: []
                };
            case "seq-item-ind":
                return {
                    type: "block-seq",
                    offset: this.offset,
                    indent: this.indent,
                    items: [
                        {
                            start: [
                                this.sourceToken
                            ]
                        }
                    ]
                };
            case "explicit-key-ind":
                {
                    this.onKeyLine = true;
                    const prev = getPrevProps(parent);
                    const start = getFirstKeyStartProps(prev);
                    start.push(this.sourceToken);
                    return {
                        type: "block-map",
                        offset: this.offset,
                        indent: this.indent,
                        items: [
                            {
                                start
                            }
                        ]
                    };
                }
            case "map-value-ind":
                {
                    this.onKeyLine = true;
                    const prev = getPrevProps(parent);
                    const start = getFirstKeyStartProps(prev);
                    return {
                        type: "block-map",
                        offset: this.offset,
                        indent: this.indent,
                        items: [
                            {
                                start,
                                key: null,
                                sep: [
                                    this.sourceToken
                                ]
                            }
                        ]
                    };
                }
        }
        return null;
    }
    atIndentedComment(start, indent) {
        if (this.type !== "comment") return false;
        if (this.indent <= indent) return false;
        return start.every((st)=>st.type === "newline" || st.type === "space");
    }
    *documentEnd(docEnd) {
        if (this.type !== "doc-mode") {
            if (docEnd.end) docEnd.end.push(this.sourceToken);
            else docEnd.end = [
                this.sourceToken
            ];
            if (this.type === "newline") yield* this.pop();
        }
    }
    *lineEnd(token) {
        switch(this.type){
            case "comma":
            case "doc-start":
            case "doc-end":
            case "flow-seq-end":
            case "flow-map-end":
            case "map-value-ind":
                yield* this.pop();
                yield* this.step();
                break;
            case "newline":
                this.onKeyLine = false;
            case "space":
            case "comment":
            default:
                if (token.end) token.end.push(this.sourceToken);
                else token.end = [
                    this.sourceToken
                ];
                if (this.type === "newline") yield* this.pop();
        }
    }
    /**
   * @param onNewLine - If defined, called separately with the start position of
   *   each new line (in `parse()`, including the start of input).
   */ constructor(onNewLine){
        this.atNewLine = true;
        this.atScalar = false;
        this.indent = 0;
        this.offset = 0;
        this.onKeyLine = false;
        this.stack = [];
        this.source = "";
        this.type = "";
        this.lexer = new Lexer();
        this.onNewLine = onNewLine;
    }
};
// ../../node_modules/yaml/browser/dist/public-api.js
function parseOptions(options) {
    const prettyErrors = options.prettyErrors !== false;
    const lineCounter = options.lineCounter || prettyErrors && new LineCounter() || null;
    return {
        lineCounter,
        prettyErrors
    };
}
function parseDocument(source, options = {}) {
    const { lineCounter, prettyErrors } = parseOptions(options);
    const parser2 = new Parser(lineCounter == null ? void 0 : lineCounter.addNewLine);
    const composer = new Composer(options);
    let doc = null;
    for (const _doc of composer.compose(parser2.parse(source), true, source.length)){
        if (!doc) doc = _doc;
        else if (doc.options.logLevel !== "silent") {
            doc.errors.push(new YAMLParseError(_doc.range.slice(0, 2), "MULTIPLE_DOCS", "Source contains multiple documents; please use YAML.parseAllDocuments()"));
            break;
        }
    }
    if (prettyErrors && lineCounter) {
        doc.errors.forEach(prettifyError(source, lineCounter));
        doc.warnings.forEach(prettifyError(source, lineCounter));
    }
    return doc;
}
function parse3(src, reviver, options) {
    let _reviver = void 0;
    if (typeof reviver === "function") {
        _reviver = reviver;
    } else if (options === void 0 && reviver && typeof reviver === "object") {
        options = reviver;
    }
    const doc = parseDocument(src, options);
    if (!doc) return null;
    doc.warnings.forEach((warning)=>warn(doc.options.logLevel, warning));
    if (doc.errors.length > 0) {
        if (doc.options.logLevel !== "silent") throw doc.errors[0];
        else doc.errors = [];
    }
    return doc.toJS(Object.assign({
        reviver: _reviver
    }, options));
}
function stringify3(value1, replacer, options) {
    var _a;
    let _replacer = null;
    if (typeof replacer === "function" || Array.isArray(replacer)) {
        _replacer = replacer;
    } else if (options === void 0 && replacer) {
        options = replacer;
    }
    if (typeof options === "string") options = options.length;
    if (typeof options === "number") {
        const indent = Math.round(options);
        options = indent < 1 ? void 0 : indent > 8 ? {
            indent: 8
        } : {
            indent
        };
    }
    if (value1 === void 0) {
        const { keepUndefined } = (_a = options != null ? options : replacer) != null ? _a : {};
        if (!keepUndefined) return void 0;
    }
    return new Document(value1, _replacer, options).toString(options);
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlSchemaService.js
var path2 = __toESM(require_path_browserify());
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/objects.js
function equals2(one, other) {
    if (one === other) {
        return true;
    }
    if (one === null || one === void 0 || other === null || other === void 0) {
        return false;
    }
    if (typeof one !== typeof other) {
        return false;
    }
    if (typeof one !== "object") {
        return false;
    }
    if (Array.isArray(one) !== Array.isArray(other)) {
        return false;
    }
    let i, key;
    if (Array.isArray(one)) {
        if (one.length !== other.length) {
            return false;
        }
        for(i = 0; i < one.length; i++){
            if (!equals2(one[i], other[i])) {
                return false;
            }
        }
    } else {
        const oneKeys = [];
        for(key in one){
            oneKeys.push(key);
        }
        oneKeys.sort();
        const otherKeys = [];
        for(key in other){
            otherKeys.push(key);
        }
        otherKeys.sort();
        if (!equals2(oneKeys, otherKeys)) {
            return false;
        }
        for(i = 0; i < oneKeys.length; i++){
            if (!equals2(one[oneKeys[i]], other[oneKeys[i]])) {
                return false;
            }
        }
    }
    return true;
}
function isNumber2(val) {
    return typeof val === "number";
}
function isDefined2(val) {
    return typeof val !== "undefined";
}
function isBoolean2(val) {
    return typeof val === "boolean";
}
function isString2(val) {
    return typeof val === "string";
}
function isIterable(val) {
    return Symbol.iterator in Object(val);
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/schemaUtils.js
var path = __toESM(require_path_browserify());
function getSchemaTypeName(schema4) {
    const closestTitleWithType = schema4.type && schema4.closestTitle;
    if (schema4.title) {
        return schema4.title;
    }
    if (schema4.$id) {
        return getSchemaRefTypeTitle(schema4.$id);
    }
    if (schema4.$ref || schema4._$ref) {
        return getSchemaRefTypeTitle(schema4.$ref || schema4._$ref);
    }
    return Array.isArray(schema4.type) ? schema4.type.join(" | ") : closestTitleWithType ? schema4.type.concat("(", schema4.closestTitle, ")") : schema4.type || schema4.closestTitle;
}
function getSchemaRefTypeTitle($ref) {
    const match = $ref.match(/^(?:.*\/)?(.*?)(?:\.schema\.json)?$/);
    let type = !!match && match[1];
    if (!type) {
        type = "typeNotFound";
        console.error(`$ref (${$ref}) not parsed properly`);
    }
    return type;
}
function getSchemaTitle(schema4, url) {
    const uri = yaml_service_URI.parse(url);
    let baseName = path.basename(uri.fsPath);
    if (!path.extname(uri.fsPath)) {
        baseName += ".json";
    }
    if (Object.getOwnPropertyDescriptor(schema4, "name")) {
        return Object.getOwnPropertyDescriptor(schema4, "name").value + ` (${baseName})`;
    } else if (schema4.title) {
        return schema4.description ? schema4.title + " - " + schema4.description + ` (${baseName})` : schema4.title + ` (${baseName})`;
    }
    return baseName;
}
function isPrimitiveType(schema4) {
    return schema4.type !== "object" && !isAnyOfAllOfOneOfType(schema4);
}
function isAnyOfAllOfOneOfType(schema4) {
    return !!(schema4.anyOf || schema4.allOf || schema4.oneOf);
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/json.js
function stringifyObject(obj, indent, stringifyLiteral) {
    if (obj !== null && typeof obj === "object") {
        var newIndent = indent + "	";
        if (Array.isArray(obj)) {
            if (obj.length === 0) {
                return "[]";
            }
            var result = "[\n";
            for(var i = 0; i < obj.length; i++){
                result += newIndent + stringifyObject(obj[i], newIndent, stringifyLiteral);
                if (i < obj.length - 1) {
                    result += ",";
                }
                result += "\n";
            }
            result += indent + "]";
            return result;
        } else {
            var keys = Object.keys(obj);
            if (keys.length === 0) {
                return "{}";
            }
            var result = "{\n";
            for(var i = 0; i < keys.length; i++){
                var key = keys[i];
                result += newIndent + JSON.stringify(key) + ": " + stringifyObject(obj[key], newIndent, stringifyLiteral);
                if (i < keys.length - 1) {
                    result += ",";
                }
                result += "\n";
            }
            result += indent + "}";
            return result;
        }
    }
    return stringifyLiteral(obj);
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonCompletion.js
var localize4 = loadMessageBundle();
var valueCommitCharacters = [
    ",",
    "}",
    "]"
];
var propertyCommitCharacters = [
    ":"
];
var JSONCompletion = /** @class */ function() {
    function JSONCompletion2(schemaService, contributions, promiseConstructor, clientCapabilities) {
        if (contributions === void 0) {
            contributions = [];
        }
        if (promiseConstructor === void 0) {
            promiseConstructor = Promise;
        }
        if (clientCapabilities === void 0) {
            clientCapabilities = {};
        }
        this.schemaService = schemaService;
        this.contributions = contributions;
        this.promiseConstructor = promiseConstructor;
        this.clientCapabilities = clientCapabilities;
    }
    JSONCompletion2.prototype.doResolve = function(item) {
        for(var i = this.contributions.length - 1; i >= 0; i--){
            var resolveCompletion = this.contributions[i].resolveCompletion;
            if (resolveCompletion) {
                var resolver = resolveCompletion(item);
                if (resolver) {
                    return resolver;
                }
            }
        }
        return this.promiseConstructor.resolve(item);
    };
    JSONCompletion2.prototype.doComplete = function(document, position, doc) {
        var _this = this;
        var result = {
            items: [],
            isIncomplete: false
        };
        var text = document.getText();
        var offset = document.offsetAt(position);
        var node = doc.getNodeFromOffset(offset, true);
        if (this.isInComment(document, node ? node.offset : 0, offset)) {
            return Promise.resolve(result);
        }
        if (node && offset === node.offset + node.length && offset > 0) {
            var ch = text[offset - 1];
            if (node.type === "object" && ch === "}" || node.type === "array" && ch === "]") {
                node = node.parent;
            }
        }
        var currentWord = this.getCurrentWord(document, offset);
        var overwriteRange;
        if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
            overwriteRange = Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));
        } else {
            var overwriteStart = offset - currentWord.length;
            if (overwriteStart > 0 && text[overwriteStart - 1] === '"') {
                overwriteStart--;
            }
            overwriteRange = Range.create(document.positionAt(overwriteStart), position);
        }
        var supportsCommitCharacters = false;
        var proposed = {};
        var collector = {
            add: function(suggestion) {
                var label = suggestion.label;
                var existing = proposed[label];
                if (!existing) {
                    label = label.replace(/[\n]/g, "\u21B5");
                    if (label.length > 60) {
                        var shortendedLabel = label.substr(0, 57).trim() + "...";
                        if (!proposed[shortendedLabel]) {
                            label = shortendedLabel;
                        }
                    }
                    if (overwriteRange && suggestion.insertText !== void 0) {
                        suggestion.textEdit = TextEdit.replace(overwriteRange, suggestion.insertText);
                    }
                    if (supportsCommitCharacters) {
                        suggestion.commitCharacters = suggestion.kind === lib_CompletionItemKind.Property ? propertyCommitCharacters : valueCommitCharacters;
                    }
                    suggestion.label = label;
                    proposed[label] = suggestion;
                    result.items.push(suggestion);
                } else {
                    if (!existing.documentation) {
                        existing.documentation = suggestion.documentation;
                    }
                    if (!existing.detail) {
                        existing.detail = suggestion.detail;
                    }
                }
            },
            setAsIncomplete: function() {
                result.isIncomplete = true;
            },
            error: function(message) {
                console.error(message);
            },
            log: function(message) {
                console.log(message);
            },
            getNumberOfProposals: function() {
                return result.items.length;
            }
        };
        return this.schemaService.getSchemaForResource(document.uri, doc).then(function(schema4) {
            var collectionPromises = [];
            var addValue = true;
            var currentKey = "";
            var currentProperty = void 0;
            if (node) {
                if (node.type === "string") {
                    var parent = node.parent;
                    if (parent && parent.type === "property" && parent.keyNode === node) {
                        addValue = !parent.valueNode;
                        currentProperty = parent;
                        currentKey = text.substr(node.offset + 1, node.length - 2);
                        if (parent) {
                            node = parent.parent;
                        }
                    }
                }
            }
            if (node && node.type === "object") {
                if (node.offset === offset) {
                    return result;
                }
                var properties = node.properties;
                properties.forEach(function(p) {
                    if (!currentProperty || currentProperty !== p) {
                        proposed[p.keyNode.value] = CompletionItem.create("__");
                    }
                });
                var separatorAfter_1 = "";
                if (addValue) {
                    separatorAfter_1 = _this.evaluateSeparatorAfter(document, document.offsetAt(overwriteRange.end));
                }
                if (schema4) {
                    _this.getPropertyCompletions(schema4, doc, node, addValue, separatorAfter_1, collector);
                } else {
                    _this.getSchemaLessPropertyCompletions(doc, node, currentKey, collector);
                }
                var location_1 = getNodePath3(node);
                _this.contributions.forEach(function(contribution) {
                    var collectPromise = contribution.collectPropertyCompletions(document.uri, location_1, currentWord, addValue, separatorAfter_1 === "", collector);
                    if (collectPromise) {
                        collectionPromises.push(collectPromise);
                    }
                });
                if (!schema4 && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '"') {
                    collector.add({
                        kind: lib_CompletionItemKind.Property,
                        label: _this.getLabelForValue(currentWord),
                        insertText: _this.getInsertTextForProperty(currentWord, void 0, false, separatorAfter_1),
                        insertTextFormat: lib_InsertTextFormat.Snippet,
                        documentation: ""
                    });
                    collector.setAsIncomplete();
                }
            }
            var types = {};
            if (schema4) {
                _this.getValueCompletions(schema4, doc, node, offset, document, collector, types);
            } else {
                _this.getSchemaLessValueCompletions(doc, node, offset, document, collector);
            }
            if (_this.contributions.length > 0) {
                _this.getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises);
            }
            return _this.promiseConstructor.all(collectionPromises).then(function() {
                if (collector.getNumberOfProposals() === 0) {
                    var offsetForSeparator = offset;
                    if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
                        offsetForSeparator = node.offset + node.length;
                    }
                    var separatorAfter = _this.evaluateSeparatorAfter(document, offsetForSeparator);
                    _this.addFillerValueCompletions(types, separatorAfter, collector);
                }
                return result;
            });
        });
    };
    JSONCompletion2.prototype.getPropertyCompletions = function(schema4, doc, node, addValue, separatorAfter, collector) {
        var _this = this;
        var matchingSchemas = doc.getMatchingSchemas(schema4.schema, node.offset);
        matchingSchemas.forEach(function(s) {
            if (s.node === node && !s.inverted) {
                var schemaProperties_1 = s.schema.properties;
                if (schemaProperties_1) {
                    Object.keys(schemaProperties_1).forEach(function(key) {
                        var propertySchema = schemaProperties_1[key];
                        if (typeof propertySchema === "object" && !propertySchema.deprecationMessage && !propertySchema.doNotSuggest) {
                            var proposal = {
                                kind: lib_CompletionItemKind.Property,
                                label: key,
                                insertText: _this.getInsertTextForProperty(key, propertySchema, addValue, separatorAfter),
                                insertTextFormat: lib_InsertTextFormat.Snippet,
                                filterText: _this.getFilterTextForValue(key),
                                documentation: _this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || ""
                            };
                            if (propertySchema.suggestSortText !== void 0) {
                                proposal.sortText = propertySchema.suggestSortText;
                            }
                            if (proposal.insertText && endsWith(proposal.insertText, "$1" + separatorAfter)) {
                                proposal.command = {
                                    title: "Suggest",
                                    command: "editor.action.triggerSuggest"
                                };
                            }
                            collector.add(proposal);
                        }
                    });
                }
                var schemaPropertyNames_1 = s.schema.propertyNames;
                if (typeof schemaPropertyNames_1 === "object" && !schemaPropertyNames_1.deprecationMessage && !schemaPropertyNames_1.doNotSuggest) {
                    var propertyNameCompletionItem = function(name, enumDescription2) {
                        if (enumDescription2 === void 0) {
                            enumDescription2 = void 0;
                        }
                        var proposal = {
                            kind: lib_CompletionItemKind.Property,
                            label: name,
                            insertText: _this.getInsertTextForProperty(name, void 0, addValue, separatorAfter),
                            insertTextFormat: lib_InsertTextFormat.Snippet,
                            filterText: _this.getFilterTextForValue(name),
                            documentation: enumDescription2 || _this.fromMarkup(schemaPropertyNames_1.markdownDescription) || schemaPropertyNames_1.description || ""
                        };
                        if (schemaPropertyNames_1.suggestSortText !== void 0) {
                            proposal.sortText = schemaPropertyNames_1.suggestSortText;
                        }
                        if (proposal.insertText && endsWith(proposal.insertText, "$1" + separatorAfter)) {
                            proposal.command = {
                                title: "Suggest",
                                command: "editor.action.triggerSuggest"
                            };
                        }
                        collector.add(proposal);
                    };
                    if (schemaPropertyNames_1.enum) {
                        for(var i = 0; i < schemaPropertyNames_1.enum.length; i++){
                            var enumDescription = void 0;
                            if (schemaPropertyNames_1.markdownEnumDescriptions && i < schemaPropertyNames_1.markdownEnumDescriptions.length) {
                                enumDescription = _this.fromMarkup(schemaPropertyNames_1.markdownEnumDescriptions[i]);
                            } else if (schemaPropertyNames_1.enumDescriptions && i < schemaPropertyNames_1.enumDescriptions.length) {
                                enumDescription = schemaPropertyNames_1.enumDescriptions[i];
                            }
                            propertyNameCompletionItem(schemaPropertyNames_1.enum[i], enumDescription);
                        }
                    }
                    if (schemaPropertyNames_1.const) {
                        propertyNameCompletionItem(schemaPropertyNames_1.const);
                    }
                }
            }
        });
    };
    JSONCompletion2.prototype.getSchemaLessPropertyCompletions = function(doc, node, currentKey, collector) {
        var _this = this;
        var collectCompletionsForSimilarObject = function(obj) {
            obj.properties.forEach(function(p) {
                var key = p.keyNode.value;
                collector.add({
                    kind: lib_CompletionItemKind.Property,
                    label: key,
                    insertText: _this.getInsertTextForValue(key, ""),
                    insertTextFormat: lib_InsertTextFormat.Snippet,
                    filterText: _this.getFilterTextForValue(key),
                    documentation: ""
                });
            });
        };
        if (node.parent) {
            if (node.parent.type === "property") {
                var parentKey_1 = node.parent.keyNode.value;
                doc.visit(function(n) {
                    if (n.type === "property" && n !== node.parent && n.keyNode.value === parentKey_1 && n.valueNode && n.valueNode.type === "object") {
                        collectCompletionsForSimilarObject(n.valueNode);
                    }
                    return true;
                });
            } else if (node.parent.type === "array") {
                node.parent.items.forEach(function(n) {
                    if (n.type === "object" && n !== node) {
                        collectCompletionsForSimilarObject(n);
                    }
                });
            }
        } else if (node.type === "object") {
            collector.add({
                kind: lib_CompletionItemKind.Property,
                label: "$schema",
                insertText: this.getInsertTextForProperty("$schema", void 0, true, ""),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                documentation: "",
                filterText: this.getFilterTextForValue("$schema")
            });
        }
    };
    JSONCompletion2.prototype.getSchemaLessValueCompletions = function(doc, node, offset, document, collector) {
        var _this = this;
        var offsetForSeparator = offset;
        if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
            offsetForSeparator = node.offset + node.length;
            node = node.parent;
        }
        if (!node) {
            collector.add({
                kind: this.getSuggestionKind("object"),
                label: "Empty object",
                insertText: this.getInsertTextForValue({}, ""),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                documentation: ""
            });
            collector.add({
                kind: this.getSuggestionKind("array"),
                label: "Empty array",
                insertText: this.getInsertTextForValue([], ""),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                documentation: ""
            });
            return;
        }
        var separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);
        var collectSuggestionsForValues = function(value1) {
            if (value1.parent && !contains2(value1.parent, offset, true)) {
                collector.add({
                    kind: _this.getSuggestionKind(value1.type),
                    label: _this.getLabelTextForMatchingNode(value1, document),
                    insertText: _this.getInsertTextForMatchingNode(value1, document, separatorAfter),
                    insertTextFormat: lib_InsertTextFormat.Snippet,
                    documentation: ""
                });
            }
            if (value1.type === "boolean") {
                _this.addBooleanValueCompletion(!value1.value, separatorAfter, collector);
            }
        };
        if (node.type === "property") {
            if (offset > (node.colonOffset || 0)) {
                var valueNode = node.valueNode;
                if (valueNode && (offset > valueNode.offset + valueNode.length || valueNode.type === "object" || valueNode.type === "array")) {
                    return;
                }
                var parentKey_2 = node.keyNode.value;
                doc.visit(function(n) {
                    if (n.type === "property" && n.keyNode.value === parentKey_2 && n.valueNode) {
                        collectSuggestionsForValues(n.valueNode);
                    }
                    return true;
                });
                if (parentKey_2 === "$schema" && node.parent && !node.parent.parent) {
                    this.addDollarSchemaCompletions(separatorAfter, collector);
                }
            }
        }
        if (node.type === "array") {
            if (node.parent && node.parent.type === "property") {
                var parentKey_3 = node.parent.keyNode.value;
                doc.visit(function(n) {
                    if (n.type === "property" && n.keyNode.value === parentKey_3 && n.valueNode && n.valueNode.type === "array") {
                        n.valueNode.items.forEach(collectSuggestionsForValues);
                    }
                    return true;
                });
            } else {
                node.items.forEach(collectSuggestionsForValues);
            }
        }
    };
    JSONCompletion2.prototype.getValueCompletions = function(schema4, doc, node, offset, document, collector, types) {
        var offsetForSeparator = offset;
        var parentKey = void 0;
        var valueNode = void 0;
        if (node && (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null")) {
            offsetForSeparator = node.offset + node.length;
            valueNode = node;
            node = node.parent;
        }
        if (!node) {
            this.addSchemaValueCompletions(schema4.schema, "", collector, types);
            return;
        }
        if (node.type === "property" && offset > (node.colonOffset || 0)) {
            var valueNode_1 = node.valueNode;
            if (valueNode_1 && offset > valueNode_1.offset + valueNode_1.length) {
                return;
            }
            parentKey = node.keyNode.value;
            node = node.parent;
        }
        if (node && (parentKey !== void 0 || node.type === "array")) {
            var separatorAfter = this.evaluateSeparatorAfter(document, offsetForSeparator);
            var matchingSchemas = doc.getMatchingSchemas(schema4.schema, node.offset, valueNode);
            for(var _i = 0, matchingSchemas_1 = matchingSchemas; _i < matchingSchemas_1.length; _i++){
                var s = matchingSchemas_1[_i];
                if (s.node === node && !s.inverted && s.schema) {
                    if (node.type === "array" && s.schema.items) {
                        if (Array.isArray(s.schema.items)) {
                            var index = this.findItemAtOffset(node, document, offset);
                            if (index < s.schema.items.length) {
                                this.addSchemaValueCompletions(s.schema.items[index], separatorAfter, collector, types);
                            }
                        } else {
                            this.addSchemaValueCompletions(s.schema.items, separatorAfter, collector, types);
                        }
                    }
                    if (parentKey !== void 0) {
                        var propertyMatched = false;
                        if (s.schema.properties) {
                            var propertySchema = s.schema.properties[parentKey];
                            if (propertySchema) {
                                propertyMatched = true;
                                this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                            }
                        }
                        if (s.schema.patternProperties && !propertyMatched) {
                            for(var _a = 0, _b = Object.keys(s.schema.patternProperties); _a < _b.length; _a++){
                                var pattern = _b[_a];
                                var regex = extendedRegExp(pattern);
                                if (regex.test(parentKey)) {
                                    propertyMatched = true;
                                    var propertySchema = s.schema.patternProperties[pattern];
                                    this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                                }
                            }
                        }
                        if (s.schema.additionalProperties && !propertyMatched) {
                            var propertySchema = s.schema.additionalProperties;
                            this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types);
                        }
                    }
                }
            }
            if (parentKey === "$schema" && !node.parent) {
                this.addDollarSchemaCompletions(separatorAfter, collector);
            }
            if (types["boolean"]) {
                this.addBooleanValueCompletion(true, separatorAfter, collector);
                this.addBooleanValueCompletion(false, separatorAfter, collector);
            }
            if (types["null"]) {
                this.addNullValueCompletion(separatorAfter, collector);
            }
        }
    };
    JSONCompletion2.prototype.getContributedValueCompletions = function(doc, node, offset, document, collector, collectionPromises) {
        if (!node) {
            this.contributions.forEach(function(contribution) {
                var collectPromise = contribution.collectDefaultCompletions(document.uri, collector);
                if (collectPromise) {
                    collectionPromises.push(collectPromise);
                }
            });
        } else {
            if (node.type === "string" || node.type === "number" || node.type === "boolean" || node.type === "null") {
                node = node.parent;
            }
            if (node && node.type === "property" && offset > (node.colonOffset || 0)) {
                var parentKey_4 = node.keyNode.value;
                var valueNode = node.valueNode;
                if ((!valueNode || offset <= valueNode.offset + valueNode.length) && node.parent) {
                    var location_2 = getNodePath3(node.parent);
                    this.contributions.forEach(function(contribution) {
                        var collectPromise = contribution.collectValueCompletions(document.uri, location_2, parentKey_4, collector);
                        if (collectPromise) {
                            collectionPromises.push(collectPromise);
                        }
                    });
                }
            }
        }
    };
    JSONCompletion2.prototype.addSchemaValueCompletions = function(schema4, separatorAfter, collector, types) {
        var _this = this;
        if (typeof schema4 === "object") {
            this.addEnumValueCompletions(schema4, separatorAfter, collector);
            this.addDefaultValueCompletions(schema4, separatorAfter, collector);
            this.collectTypes(schema4, types);
            if (Array.isArray(schema4.allOf)) {
                schema4.allOf.forEach(function(s) {
                    return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);
                });
            }
            if (Array.isArray(schema4.anyOf)) {
                schema4.anyOf.forEach(function(s) {
                    return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);
                });
            }
            if (Array.isArray(schema4.oneOf)) {
                schema4.oneOf.forEach(function(s) {
                    return _this.addSchemaValueCompletions(s, separatorAfter, collector, types);
                });
            }
        }
    };
    JSONCompletion2.prototype.addDefaultValueCompletions = function(schema4, separatorAfter, collector, arrayDepth) {
        var _this = this;
        if (arrayDepth === void 0) {
            arrayDepth = 0;
        }
        var hasProposals = false;
        if (isDefined(schema4.default)) {
            var type = schema4.type;
            var value1 = schema4.default;
            for(var i = arrayDepth; i > 0; i--){
                value1 = [
                    value1
                ];
                type = "array";
            }
            collector.add({
                kind: this.getSuggestionKind(type),
                label: this.getLabelForValue(value1),
                insertText: this.getInsertTextForValue(value1, separatorAfter),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                detail: localize4("json.suggest.default", "Default value")
            });
            hasProposals = true;
        }
        if (Array.isArray(schema4.examples)) {
            schema4.examples.forEach(function(example) {
                var type2 = schema4.type;
                var value2 = example;
                for(var i2 = arrayDepth; i2 > 0; i2--){
                    value2 = [
                        value2
                    ];
                    type2 = "array";
                }
                collector.add({
                    kind: _this.getSuggestionKind(type2),
                    label: _this.getLabelForValue(value2),
                    insertText: _this.getInsertTextForValue(value2, separatorAfter),
                    insertTextFormat: lib_InsertTextFormat.Snippet
                });
                hasProposals = true;
            });
        }
        if (Array.isArray(schema4.defaultSnippets)) {
            schema4.defaultSnippets.forEach(function(s) {
                var type2 = schema4.type;
                var value2 = s.body;
                var label = s.label;
                var insertText;
                var filterText;
                if (isDefined(value2)) {
                    var type_1 = schema4.type;
                    for(var i2 = arrayDepth; i2 > 0; i2--){
                        value2 = [
                            value2
                        ];
                        type_1 = "array";
                    }
                    insertText = _this.getInsertTextForSnippetValue(value2, separatorAfter);
                    filterText = _this.getFilterTextForSnippetValue(value2);
                    label = label || _this.getLabelForSnippetValue(value2);
                } else if (typeof s.bodyText === "string") {
                    var prefix = "", suffix = "", indent = "";
                    for(var i2 = arrayDepth; i2 > 0; i2--){
                        prefix = prefix + indent + "[\n";
                        suffix = suffix + "\n" + indent + "]";
                        indent += "	";
                        type2 = "array";
                    }
                    insertText = prefix + indent + s.bodyText.split("\n").join("\n" + indent) + suffix + separatorAfter;
                    label = label || insertText, filterText = insertText.replace(/[\n]/g, "");
                } else {
                    return;
                }
                collector.add({
                    kind: _this.getSuggestionKind(type2),
                    label,
                    documentation: _this.fromMarkup(s.markdownDescription) || s.description,
                    insertText,
                    insertTextFormat: lib_InsertTextFormat.Snippet,
                    filterText
                });
                hasProposals = true;
            });
        }
        if (!hasProposals && typeof schema4.items === "object" && !Array.isArray(schema4.items) && arrayDepth < 5) {
            this.addDefaultValueCompletions(schema4.items, separatorAfter, collector, arrayDepth + 1);
        }
    };
    JSONCompletion2.prototype.addEnumValueCompletions = function(schema4, separatorAfter, collector) {
        if (isDefined(schema4.const)) {
            collector.add({
                kind: this.getSuggestionKind(schema4.type),
                label: this.getLabelForValue(schema4.const),
                insertText: this.getInsertTextForValue(schema4.const, separatorAfter),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                documentation: this.fromMarkup(schema4.markdownDescription) || schema4.description
            });
        }
        if (Array.isArray(schema4.enum)) {
            for(var i = 0, length = schema4.enum.length; i < length; i++){
                var enm = schema4.enum[i];
                var documentation = this.fromMarkup(schema4.markdownDescription) || schema4.description;
                if (schema4.markdownEnumDescriptions && i < schema4.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {
                    documentation = this.fromMarkup(schema4.markdownEnumDescriptions[i]);
                } else if (schema4.enumDescriptions && i < schema4.enumDescriptions.length) {
                    documentation = schema4.enumDescriptions[i];
                }
                collector.add({
                    kind: this.getSuggestionKind(schema4.type),
                    label: this.getLabelForValue(enm),
                    insertText: this.getInsertTextForValue(enm, separatorAfter),
                    insertTextFormat: lib_InsertTextFormat.Snippet,
                    documentation
                });
            }
        }
    };
    JSONCompletion2.prototype.collectTypes = function(schema4, types) {
        if (Array.isArray(schema4.enum) || isDefined(schema4.const)) {
            return;
        }
        var type = schema4.type;
        if (Array.isArray(type)) {
            type.forEach(function(t1) {
                return types[t1] = true;
            });
        } else if (type) {
            types[type] = true;
        }
    };
    JSONCompletion2.prototype.addFillerValueCompletions = function(types, separatorAfter, collector) {
        if (types["object"]) {
            collector.add({
                kind: this.getSuggestionKind("object"),
                label: "{}",
                insertText: this.getInsertTextForGuessedValue({}, separatorAfter),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                detail: localize4("defaults.object", "New object"),
                documentation: ""
            });
        }
        if (types["array"]) {
            collector.add({
                kind: this.getSuggestionKind("array"),
                label: "[]",
                insertText: this.getInsertTextForGuessedValue([], separatorAfter),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                detail: localize4("defaults.array", "New array"),
                documentation: ""
            });
        }
    };
    JSONCompletion2.prototype.addBooleanValueCompletion = function(value1, separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind("boolean"),
            label: value1 ? "true" : "false",
            insertText: this.getInsertTextForValue(value1, separatorAfter),
            insertTextFormat: lib_InsertTextFormat.Snippet,
            documentation: ""
        });
    };
    JSONCompletion2.prototype.addNullValueCompletion = function(separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind("null"),
            label: "null",
            insertText: "null" + separatorAfter,
            insertTextFormat: lib_InsertTextFormat.Snippet,
            documentation: ""
        });
    };
    JSONCompletion2.prototype.addDollarSchemaCompletions = function(separatorAfter, collector) {
        var _this = this;
        var schemaIds = this.schemaService.getRegisteredSchemaIds(function(schema4) {
            return schema4 === "http" || schema4 === "https";
        });
        schemaIds.forEach(function(schemaId) {
            return collector.add({
                kind: lib_CompletionItemKind.Module,
                label: _this.getLabelForValue(schemaId),
                filterText: _this.getFilterTextForValue(schemaId),
                insertText: _this.getInsertTextForValue(schemaId, separatorAfter),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                documentation: ""
            });
        });
    };
    JSONCompletion2.prototype.getLabelForValue = function(value1) {
        return JSON.stringify(value1);
    };
    JSONCompletion2.prototype.getFilterTextForValue = function(value1) {
        return JSON.stringify(value1);
    };
    JSONCompletion2.prototype.getFilterTextForSnippetValue = function(value1) {
        return JSON.stringify(value1).replace(/\$\{\d+:([^}]+)\}|\$\d+/g, "$1");
    };
    JSONCompletion2.prototype.getLabelForSnippetValue = function(value1) {
        var label = JSON.stringify(value1);
        return label.replace(/\$\{\d+:([^}]+)\}|\$\d+/g, "$1");
    };
    JSONCompletion2.prototype.getInsertTextForPlainText = function(text) {
        return text.replace(/[\\\$\}]/g, "\\$&");
    };
    JSONCompletion2.prototype.getInsertTextForValue = function(value1, separatorAfter) {
        var text = JSON.stringify(value1, null, "	");
        if (text === "{}") {
            return "{$1}" + separatorAfter;
        } else if (text === "[]") {
            return "[$1]" + separatorAfter;
        }
        return this.getInsertTextForPlainText(text + separatorAfter);
    };
    JSONCompletion2.prototype.getInsertTextForSnippetValue = function(value1, separatorAfter) {
        var replacer = function(value2) {
            if (typeof value2 === "string") {
                if (value2[0] === "^") {
                    return value2.substr(1);
                }
            }
            return JSON.stringify(value2);
        };
        return stringifyObject(value1, "", replacer) + separatorAfter;
    };
    JSONCompletion2.prototype.getInsertTextForGuessedValue = function(value1, separatorAfter) {
        switch(typeof value1){
            case "object":
                if (value1 === null) {
                    return "${1:null}" + separatorAfter;
                }
                return this.getInsertTextForValue(value1, separatorAfter);
            case "string":
                var snippetValue = JSON.stringify(value1);
                snippetValue = snippetValue.substr(1, snippetValue.length - 2);
                snippetValue = this.getInsertTextForPlainText(snippetValue);
                return '"${1:' + snippetValue + '}"' + separatorAfter;
            case "number":
            case "boolean":
                return "${1:" + JSON.stringify(value1) + "}" + separatorAfter;
        }
        return this.getInsertTextForValue(value1, separatorAfter);
    };
    JSONCompletion2.prototype.getSuggestionKind = function(type) {
        if (Array.isArray(type)) {
            var array = type;
            type = array.length > 0 ? array[0] : void 0;
        }
        if (!type) {
            return lib_CompletionItemKind.Value;
        }
        switch(type){
            case "string":
                return lib_CompletionItemKind.Value;
            case "object":
                return lib_CompletionItemKind.Module;
            case "property":
                return lib_CompletionItemKind.Property;
            default:
                return lib_CompletionItemKind.Value;
        }
    };
    JSONCompletion2.prototype.getLabelTextForMatchingNode = function(node, document) {
        switch(node.type){
            case "array":
                return "[]";
            case "object":
                return "{}";
            default:
                var content = document.getText().substr(node.offset, node.length);
                return content;
        }
    };
    JSONCompletion2.prototype.getInsertTextForMatchingNode = function(node, document, separatorAfter) {
        switch(node.type){
            case "array":
                return this.getInsertTextForValue([], separatorAfter);
            case "object":
                return this.getInsertTextForValue({}, separatorAfter);
            default:
                var content = document.getText().substr(node.offset, node.length) + separatorAfter;
                return this.getInsertTextForPlainText(content);
        }
    };
    JSONCompletion2.prototype.getInsertTextForProperty = function(key, propertySchema, addValue, separatorAfter) {
        var propertyText = this.getInsertTextForValue(key, "");
        if (!addValue) {
            return propertyText;
        }
        var resultText = propertyText + ": ";
        var value1;
        var nValueProposals = 0;
        if (propertySchema) {
            if (Array.isArray(propertySchema.defaultSnippets)) {
                if (propertySchema.defaultSnippets.length === 1) {
                    var body = propertySchema.defaultSnippets[0].body;
                    if (isDefined(body)) {
                        value1 = this.getInsertTextForSnippetValue(body, "");
                    }
                }
                nValueProposals += propertySchema.defaultSnippets.length;
            }
            if (propertySchema.enum) {
                if (!value1 && propertySchema.enum.length === 1) {
                    value1 = this.getInsertTextForGuessedValue(propertySchema.enum[0], "");
                }
                nValueProposals += propertySchema.enum.length;
            }
            if (isDefined(propertySchema.default)) {
                if (!value1) {
                    value1 = this.getInsertTextForGuessedValue(propertySchema.default, "");
                }
                nValueProposals++;
            }
            if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {
                if (!value1) {
                    value1 = this.getInsertTextForGuessedValue(propertySchema.examples[0], "");
                }
                nValueProposals += propertySchema.examples.length;
            }
            if (nValueProposals === 0) {
                var type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;
                if (!type) {
                    if (propertySchema.properties) {
                        type = "object";
                    } else if (propertySchema.items) {
                        type = "array";
                    }
                }
                switch(type){
                    case "boolean":
                        value1 = "$1";
                        break;
                    case "string":
                        value1 = '"$1"';
                        break;
                    case "object":
                        value1 = "{$1}";
                        break;
                    case "array":
                        value1 = "[$1]";
                        break;
                    case "number":
                    case "integer":
                        value1 = "${1:0}";
                        break;
                    case "null":
                        value1 = "${1:null}";
                        break;
                    default:
                        return propertyText;
                }
            }
        }
        if (!value1 || nValueProposals > 1) {
            value1 = "$1";
        }
        return resultText + value1 + separatorAfter;
    };
    JSONCompletion2.prototype.getCurrentWord = function(document, offset) {
        var i = offset - 1;
        var text = document.getText();
        while(i >= 0 && ' 	\n\r\v":{[,]}'.indexOf(text.charAt(i)) === -1){
            i--;
        }
        return text.substring(i + 1, offset);
    };
    JSONCompletion2.prototype.evaluateSeparatorAfter = function(document, offset) {
        var scanner = createScanner2(document.getText(), true);
        scanner.setPosition(offset);
        var token = scanner.scan();
        switch(token){
            case 5:
            case 2:
            case 4:
            case 17:
                return "";
            default:
                return ",";
        }
    };
    JSONCompletion2.prototype.findItemAtOffset = function(node, document, offset) {
        var scanner = createScanner2(document.getText(), true);
        var children = node.items;
        for(var i = children.length - 1; i >= 0; i--){
            var child = children[i];
            if (offset > child.offset + child.length) {
                scanner.setPosition(child.offset + child.length);
                var token = scanner.scan();
                if (token === 5 && offset >= scanner.getTokenOffset() + scanner.getTokenLength()) {
                    return i + 1;
                }
                return i;
            } else if (offset >= child.offset) {
                return i;
            }
        }
        return 0;
    };
    JSONCompletion2.prototype.isInComment = function(document, start, offset) {
        var scanner = createScanner2(document.getText(), false);
        scanner.setPosition(start);
        var token = scanner.scan();
        while(token !== 17 && scanner.getTokenOffset() + scanner.getTokenLength() < offset){
            token = scanner.scan();
        }
        return (token === 12 || token === 13) && scanner.getTokenOffset() <= offset;
    };
    JSONCompletion2.prototype.fromMarkup = function(markupString) {
        if (markupString && this.doesSupportMarkdown()) {
            return {
                kind: MarkupKind.Markdown,
                value: markupString
            };
        }
        return void 0;
    };
    JSONCompletion2.prototype.doesSupportMarkdown = function() {
        if (!isDefined(this.supportsMarkdown)) {
            var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;
            this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    };
    JSONCompletion2.prototype.doesSupportsCommitCharacters = function() {
        if (!isDefined(this.supportsCommitCharacters)) {
            var completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;
            this.supportsCommitCharacters = completion && completion.completionItem && !!completion.completionItem.commitCharactersSupport;
        }
        return this.supportsCommitCharacters;
    };
    return JSONCompletion2;
}();
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonHover.js
var JSONHover = /** @class */ function() {
    function JSONHover2(schemaService, contributions, promiseConstructor) {
        if (contributions === void 0) {
            contributions = [];
        }
        this.schemaService = schemaService;
        this.contributions = contributions;
        this.promise = promiseConstructor || Promise;
    }
    JSONHover2.prototype.doHover = function(document, position, doc) {
        var offset = document.offsetAt(position);
        var node = doc.getNodeFromOffset(offset);
        if (!node || (node.type === "object" || node.type === "array") && offset > node.offset + 1 && offset < node.offset + node.length - 1) {
            return this.promise.resolve(null);
        }
        var hoverRangeNode = node;
        if (node.type === "string") {
            var parent = node.parent;
            if (parent && parent.type === "property" && parent.keyNode === node) {
                node = parent.valueNode;
                if (!node) {
                    return this.promise.resolve(null);
                }
            }
        }
        var hoverRange = Range.create(document.positionAt(hoverRangeNode.offset), document.positionAt(hoverRangeNode.offset + hoverRangeNode.length));
        var createHover = function(contents) {
            var result = {
                contents,
                range: hoverRange
            };
            return result;
        };
        var location = getNodePath3(node);
        for(var i = this.contributions.length - 1; i >= 0; i--){
            var contribution = this.contributions[i];
            var promise = contribution.getInfoContribution(document.uri, location);
            if (promise) {
                return promise.then(function(htmlContent) {
                    return createHover(htmlContent);
                });
            }
        }
        return this.schemaService.getSchemaForResource(document.uri, doc).then(function(schema4) {
            if (schema4 && node) {
                var matchingSchemas = doc.getMatchingSchemas(schema4.schema, node.offset);
                var title_1 = void 0;
                var markdownDescription_1 = void 0;
                var markdownEnumValueDescription_1 = void 0, enumValue_1 = void 0;
                matchingSchemas.every(function(s) {
                    if (s.node === node && !s.inverted && s.schema) {
                        title_1 = title_1 || s.schema.title;
                        markdownDescription_1 = markdownDescription_1 || s.schema.markdownDescription || toMarkdown(s.schema.description);
                        if (s.schema.enum) {
                            var idx = s.schema.enum.indexOf(getNodeValue3(node));
                            if (s.schema.markdownEnumDescriptions) {
                                markdownEnumValueDescription_1 = s.schema.markdownEnumDescriptions[idx];
                            } else if (s.schema.enumDescriptions) {
                                markdownEnumValueDescription_1 = toMarkdown(s.schema.enumDescriptions[idx]);
                            }
                            if (markdownEnumValueDescription_1) {
                                enumValue_1 = s.schema.enum[idx];
                                if (typeof enumValue_1 !== "string") {
                                    enumValue_1 = JSON.stringify(enumValue_1);
                                }
                            }
                        }
                    }
                    return true;
                });
                var result = "";
                if (title_1) {
                    result = toMarkdown(title_1);
                }
                if (markdownDescription_1) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += markdownDescription_1;
                }
                if (markdownEnumValueDescription_1) {
                    if (result.length > 0) {
                        result += "\n\n";
                    }
                    result += "`" + toMarkdownCodeBlock(enumValue_1) + "`: " + markdownEnumValueDescription_1;
                }
                return createHover([
                    result
                ]);
            }
            return null;
        });
    };
    return JSONHover2;
}();
function toMarkdown(plain) {
    if (plain) {
        var res = plain.replace(/([^\n\r])(\r?\n)([^\n\r])/gm, "$1\n\n$3");
        return res.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
    }
    return void 0;
}
function toMarkdownCodeBlock(content) {
    if (content.indexOf("`") !== -1) {
        return "`` " + content + " ``";
    }
    return content;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonValidation.js
var localize5 = loadMessageBundle();
var JSONValidation = /** @class */ function() {
    function JSONValidation2(jsonSchemaService, promiseConstructor) {
        this.jsonSchemaService = jsonSchemaService;
        this.promise = promiseConstructor;
        this.validationEnabled = true;
    }
    JSONValidation2.prototype.configure = function(raw) {
        if (raw) {
            this.validationEnabled = raw.validate !== false;
            this.commentSeverity = raw.allowComments ? void 0 : DiagnosticSeverity.Error;
        }
    };
    JSONValidation2.prototype.doValidation = function(textDocument, jsonDocument, documentSettings, schema4) {
        var _this = this;
        if (!this.validationEnabled) {
            return this.promise.resolve([]);
        }
        var diagnostics = [];
        var added = {};
        var addProblem = function(problem) {
            var signature = problem.range.start.line + " " + problem.range.start.character + " " + problem.message;
            if (!added[signature]) {
                added[signature] = true;
                diagnostics.push(problem);
            }
        };
        var getDiagnostics = function(schema5) {
            var trailingCommaSeverity = (documentSettings === null || documentSettings === void 0 ? void 0 : documentSettings.trailingCommas) ? toDiagnosticSeverity(documentSettings.trailingCommas) : DiagnosticSeverity.Error;
            var commentSeverity = (documentSettings === null || documentSettings === void 0 ? void 0 : documentSettings.comments) ? toDiagnosticSeverity(documentSettings.comments) : _this.commentSeverity;
            var schemaValidation = (documentSettings === null || documentSettings === void 0 ? void 0 : documentSettings.schemaValidation) ? toDiagnosticSeverity(documentSettings.schemaValidation) : DiagnosticSeverity.Warning;
            var schemaRequest = (documentSettings === null || documentSettings === void 0 ? void 0 : documentSettings.schemaRequest) ? toDiagnosticSeverity(documentSettings.schemaRequest) : DiagnosticSeverity.Warning;
            if (schema5) {
                if (schema5.errors.length && jsonDocument.root && schemaRequest) {
                    var astRoot = jsonDocument.root;
                    var property = astRoot.type === "object" ? astRoot.properties[0] : void 0;
                    if (property && property.keyNode.value === "$schema") {
                        var node = property.valueNode || property;
                        var range = Range.create(textDocument.positionAt(node.offset), textDocument.positionAt(node.offset + node.length));
                        addProblem(Diagnostic.create(range, schema5.errors[0], schemaRequest, ErrorCode.SchemaResolveError));
                    } else {
                        var range = Range.create(textDocument.positionAt(astRoot.offset), textDocument.positionAt(astRoot.offset + 1));
                        addProblem(Diagnostic.create(range, schema5.errors[0], schemaRequest, ErrorCode.SchemaResolveError));
                    }
                } else if (schemaValidation) {
                    var semanticErrors = jsonDocument.validate(textDocument, schema5.schema, schemaValidation);
                    if (semanticErrors) {
                        semanticErrors.forEach(addProblem);
                    }
                }
                if (schemaAllowsComments(schema5.schema)) {
                    commentSeverity = void 0;
                }
                if (schemaAllowsTrailingCommas(schema5.schema)) {
                    trailingCommaSeverity = void 0;
                }
            }
            for(var _i = 0, _a = jsonDocument.syntaxErrors; _i < _a.length; _i++){
                var p = _a[_i];
                if (p.code === ErrorCode.TrailingComma) {
                    if (typeof trailingCommaSeverity !== "number") {
                        continue;
                    }
                    p.severity = trailingCommaSeverity;
                }
                addProblem(p);
            }
            if (typeof commentSeverity === "number") {
                var message_1 = localize5("InvalidCommentToken", "Comments are not permitted in JSON.");
                jsonDocument.comments.forEach(function(c) {
                    addProblem(Diagnostic.create(c, message_1, commentSeverity, ErrorCode.CommentNotPermitted));
                });
            }
            return diagnostics;
        };
        if (schema4) {
            var id = schema4.id || "schemaservice://untitled/" + idCounter2++;
            return this.jsonSchemaService.resolveSchemaContent(new UnresolvedSchema(schema4), id, {}).then(function(resolvedSchema) {
                return getDiagnostics(resolvedSchema);
            });
        }
        return this.jsonSchemaService.getSchemaForResource(textDocument.uri, jsonDocument).then(function(schema5) {
            return getDiagnostics(schema5);
        });
    };
    return JSONValidation2;
}();
var idCounter2 = 0;
function schemaAllowsComments(schemaRef) {
    if (schemaRef && typeof schemaRef === "object") {
        if (isBoolean(schemaRef.allowComments)) {
            return schemaRef.allowComments;
        }
        if (schemaRef.allOf) {
            for(var _i = 0, _a = schemaRef.allOf; _i < _a.length; _i++){
                var schema4 = _a[_i];
                var allow = schemaAllowsComments(schema4);
                if (isBoolean(allow)) {
                    return allow;
                }
            }
        }
    }
    return void 0;
}
function schemaAllowsTrailingCommas(schemaRef) {
    if (schemaRef && typeof schemaRef === "object") {
        if (isBoolean(schemaRef.allowTrailingCommas)) {
            return schemaRef.allowTrailingCommas;
        }
        var deprSchemaRef = schemaRef;
        if (isBoolean(deprSchemaRef["allowsTrailingCommas"])) {
            return deprSchemaRef["allowsTrailingCommas"];
        }
        if (schemaRef.allOf) {
            for(var _i = 0, _a = schemaRef.allOf; _i < _a.length; _i++){
                var schema4 = _a[_i];
                var allow = schemaAllowsTrailingCommas(schema4);
                if (isBoolean(allow)) {
                    return allow;
                }
            }
        }
    }
    return void 0;
}
function toDiagnosticSeverity(severityLevel) {
    switch(severityLevel){
        case "error":
            return DiagnosticSeverity.Error;
        case "warning":
            return DiagnosticSeverity.Warning;
        case "ignore":
            return void 0;
    }
    return void 0;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/utils/colors.js
var Digit0 = 48;
var Digit9 = 57;
var A = 65;
var a = 97;
var f = 102;
function hexDigit(charCode) {
    if (charCode < Digit0) {
        return 0;
    }
    if (charCode <= Digit9) {
        return charCode - Digit0;
    }
    if (charCode < a) {
        charCode += a - A;
    }
    if (charCode >= a && charCode <= f) {
        return charCode - a + 10;
    }
    return 0;
}
function colorFromHex(text) {
    if (text[0] !== "#") {
        return void 0;
    }
    switch(text.length){
        case 4:
            return {
                red: hexDigit(text.charCodeAt(1)) * 17 / 255,
                green: hexDigit(text.charCodeAt(2)) * 17 / 255,
                blue: hexDigit(text.charCodeAt(3)) * 17 / 255,
                alpha: 1
            };
        case 5:
            return {
                red: hexDigit(text.charCodeAt(1)) * 17 / 255,
                green: hexDigit(text.charCodeAt(2)) * 17 / 255,
                blue: hexDigit(text.charCodeAt(3)) * 17 / 255,
                alpha: hexDigit(text.charCodeAt(4)) * 17 / 255
            };
        case 7:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 16 + hexDigit(text.charCodeAt(2))) / 255,
                green: (hexDigit(text.charCodeAt(3)) * 16 + hexDigit(text.charCodeAt(4))) / 255,
                blue: (hexDigit(text.charCodeAt(5)) * 16 + hexDigit(text.charCodeAt(6))) / 255,
                alpha: 1
            };
        case 9:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 16 + hexDigit(text.charCodeAt(2))) / 255,
                green: (hexDigit(text.charCodeAt(3)) * 16 + hexDigit(text.charCodeAt(4))) / 255,
                blue: (hexDigit(text.charCodeAt(5)) * 16 + hexDigit(text.charCodeAt(6))) / 255,
                alpha: (hexDigit(text.charCodeAt(7)) * 16 + hexDigit(text.charCodeAt(8))) / 255
            };
    }
    return void 0;
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonDocumentSymbols.js
var JSONDocumentSymbols = /** @class */ function() {
    function JSONDocumentSymbols2(schemaService) {
        this.schemaService = schemaService;
    }
    JSONDocumentSymbols2.prototype.findDocumentSymbols = function(document, doc, context) {
        var _this = this;
        if (context === void 0) {
            context = {
                resultLimit: Number.MAX_VALUE
            };
        }
        var root = doc.root;
        if (!root) {
            return [];
        }
        var limit = context.resultLimit || Number.MAX_VALUE;
        var resourceString = document.uri;
        if (resourceString === "vscode://defaultsettings/keybindings.json" || endsWith(resourceString.toLowerCase(), "/user/keybindings.json")) {
            if (root.type === "array") {
                var result_1 = [];
                for(var _i = 0, _a = root.items; _i < _a.length; _i++){
                    var item = _a[_i];
                    if (item.type === "object") {
                        for(var _b = 0, _c = item.properties; _b < _c.length; _b++){
                            var property = _c[_b];
                            if (property.keyNode.value === "key" && property.valueNode) {
                                var location = Location.create(document.uri, getRange(document, item));
                                result_1.push({
                                    name: getNodeValue3(property.valueNode),
                                    kind: SymbolKind.Function,
                                    location
                                });
                                limit--;
                                if (limit <= 0) {
                                    if (context && context.onResultLimitExceeded) {
                                        context.onResultLimitExceeded(resourceString);
                                    }
                                    return result_1;
                                }
                            }
                        }
                    }
                }
                return result_1;
            }
        }
        var toVisit = [
            {
                node: root,
                containerName: ""
            }
        ];
        var nextToVisit = 0;
        var limitExceeded = false;
        var result = [];
        var collectOutlineEntries = function(node, containerName) {
            if (node.type === "array") {
                node.items.forEach(function(node2) {
                    if (node2) {
                        toVisit.push({
                            node: node2,
                            containerName
                        });
                    }
                });
            } else if (node.type === "object") {
                node.properties.forEach(function(property2) {
                    var valueNode = property2.valueNode;
                    if (valueNode) {
                        if (limit > 0) {
                            limit--;
                            var location2 = Location.create(document.uri, getRange(document, property2));
                            var childContainerName = containerName ? containerName + "." + property2.keyNode.value : property2.keyNode.value;
                            result.push({
                                name: _this.getKeyLabel(property2),
                                kind: _this.getSymbolKind(valueNode.type),
                                location: location2,
                                containerName
                            });
                            toVisit.push({
                                node: valueNode,
                                containerName: childContainerName
                            });
                        } else {
                            limitExceeded = true;
                        }
                    }
                });
            }
        };
        while(nextToVisit < toVisit.length){
            var next = toVisit[nextToVisit++];
            collectOutlineEntries(next.node, next.containerName);
        }
        if (limitExceeded && context && context.onResultLimitExceeded) {
            context.onResultLimitExceeded(resourceString);
        }
        return result;
    };
    JSONDocumentSymbols2.prototype.findDocumentSymbols2 = function(document, doc, context) {
        var _this = this;
        if (context === void 0) {
            context = {
                resultLimit: Number.MAX_VALUE
            };
        }
        var root = doc.root;
        if (!root) {
            return [];
        }
        var limit = context.resultLimit || Number.MAX_VALUE;
        var resourceString = document.uri;
        if (resourceString === "vscode://defaultsettings/keybindings.json" || endsWith(resourceString.toLowerCase(), "/user/keybindings.json")) {
            if (root.type === "array") {
                var result_2 = [];
                for(var _i = 0, _a = root.items; _i < _a.length; _i++){
                    var item = _a[_i];
                    if (item.type === "object") {
                        for(var _b = 0, _c = item.properties; _b < _c.length; _b++){
                            var property = _c[_b];
                            if (property.keyNode.value === "key" && property.valueNode) {
                                var range = getRange(document, item);
                                var selectionRange = getRange(document, property.keyNode);
                                result_2.push({
                                    name: getNodeValue3(property.valueNode),
                                    kind: SymbolKind.Function,
                                    range,
                                    selectionRange
                                });
                                limit--;
                                if (limit <= 0) {
                                    if (context && context.onResultLimitExceeded) {
                                        context.onResultLimitExceeded(resourceString);
                                    }
                                    return result_2;
                                }
                            }
                        }
                    }
                }
                return result_2;
            }
        }
        var result = [];
        var toVisit = [
            {
                node: root,
                result
            }
        ];
        var nextToVisit = 0;
        var limitExceeded = false;
        var collectOutlineEntries = function(node, result2) {
            if (node.type === "array") {
                node.items.forEach(function(node2, index) {
                    if (node2) {
                        if (limit > 0) {
                            limit--;
                            var range2 = getRange(document, node2);
                            var selectionRange2 = range2;
                            var name = String(index);
                            var symbol = {
                                name,
                                kind: _this.getSymbolKind(node2.type),
                                range: range2,
                                selectionRange: selectionRange2,
                                children: []
                            };
                            result2.push(symbol);
                            toVisit.push({
                                result: symbol.children,
                                node: node2
                            });
                        } else {
                            limitExceeded = true;
                        }
                    }
                });
            } else if (node.type === "object") {
                node.properties.forEach(function(property2) {
                    var valueNode = property2.valueNode;
                    if (valueNode) {
                        if (limit > 0) {
                            limit--;
                            var range2 = getRange(document, property2);
                            var selectionRange2 = getRange(document, property2.keyNode);
                            var children = [];
                            var symbol = {
                                name: _this.getKeyLabel(property2),
                                kind: _this.getSymbolKind(valueNode.type),
                                range: range2,
                                selectionRange: selectionRange2,
                                children,
                                detail: _this.getDetail(valueNode)
                            };
                            result2.push(symbol);
                            toVisit.push({
                                result: children,
                                node: valueNode
                            });
                        } else {
                            limitExceeded = true;
                        }
                    }
                });
            }
        };
        while(nextToVisit < toVisit.length){
            var next = toVisit[nextToVisit++];
            collectOutlineEntries(next.node, next.result);
        }
        if (limitExceeded && context && context.onResultLimitExceeded) {
            context.onResultLimitExceeded(resourceString);
        }
        return result;
    };
    JSONDocumentSymbols2.prototype.getSymbolKind = function(nodeType) {
        switch(nodeType){
            case "object":
                return SymbolKind.Module;
            case "string":
                return SymbolKind.String;
            case "number":
                return SymbolKind.Number;
            case "array":
                return SymbolKind.Array;
            case "boolean":
                return SymbolKind.Boolean;
            default:
                return SymbolKind.Variable;
        }
    };
    JSONDocumentSymbols2.prototype.getKeyLabel = function(property) {
        var name = property.keyNode.value;
        if (name) {
            name = name.replace(/[\n]/g, "\u21B5");
        }
        if (name && name.trim()) {
            return name;
        }
        return '"' + name + '"';
    };
    JSONDocumentSymbols2.prototype.getDetail = function(node) {
        if (!node) {
            return void 0;
        }
        if (node.type === "boolean" || node.type === "number" || node.type === "null" || node.type === "string") {
            return String(node.value);
        } else {
            if (node.type === "array") {
                return node.children.length ? void 0 : "[]";
            } else if (node.type === "object") {
                return node.children.length ? void 0 : "{}";
            }
        }
        return void 0;
    };
    JSONDocumentSymbols2.prototype.findDocumentColors = function(document, doc, context) {
        return this.schemaService.getSchemaForResource(document.uri, doc).then(function(schema4) {
            var result = [];
            if (schema4) {
                var limit = context && typeof context.resultLimit === "number" ? context.resultLimit : Number.MAX_VALUE;
                var matchingSchemas = doc.getMatchingSchemas(schema4.schema);
                var visitedNode = {};
                for(var _i = 0, matchingSchemas_1 = matchingSchemas; _i < matchingSchemas_1.length; _i++){
                    var s = matchingSchemas_1[_i];
                    if (!s.inverted && s.schema && (s.schema.format === "color" || s.schema.format === "color-hex") && s.node && s.node.type === "string") {
                        var nodeId = String(s.node.offset);
                        if (!visitedNode[nodeId]) {
                            var color = colorFromHex(getNodeValue3(s.node));
                            if (color) {
                                var range = getRange(document, s.node);
                                result.push({
                                    color,
                                    range
                                });
                            }
                            visitedNode[nodeId] = true;
                            limit--;
                            if (limit <= 0) {
                                if (context && context.onResultLimitExceeded) {
                                    context.onResultLimitExceeded(document.uri);
                                }
                                return result;
                            }
                        }
                    }
                }
            }
            return result;
        });
    };
    JSONDocumentSymbols2.prototype.getColorPresentations = function(document, doc, color, range) {
        var result = [];
        var red256 = Math.round(color.red * 255), green256 = Math.round(color.green * 255), blue256 = Math.round(color.blue * 255);
        function toTwoDigitHex(n) {
            var r = n.toString(16);
            return r.length !== 2 ? "0" + r : r;
        }
        var label;
        if (color.alpha === 1) {
            label = "#" + toTwoDigitHex(red256) + toTwoDigitHex(green256) + toTwoDigitHex(blue256);
        } else {
            label = "#" + toTwoDigitHex(red256) + toTwoDigitHex(green256) + toTwoDigitHex(blue256) + toTwoDigitHex(Math.round(color.alpha * 255));
        }
        result.push({
            label,
            textEdit: TextEdit.replace(range, JSON.stringify(label))
        });
        return result;
    };
    return JSONDocumentSymbols2;
}();
function getRange(document, node) {
    return Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));
}
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/configuration.js
var localize6 = loadMessageBundle();
var schemaContributions = {
    schemaAssociations: [],
    schemas: {
        // refer to the latest schema
        "http://json-schema.org/schema#": {
            $ref: "http://json-schema.org/draft-07/schema#"
        },
        // bundle the schema-schema to include (localized) descriptions
        "http://json-schema.org/draft-04/schema#": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "definitions": {
                "schemaArray": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#"
                    }
                },
                "positiveInteger": {
                    "type": "integer",
                    "minimum": 0
                },
                "positiveIntegerDefault0": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveInteger"
                        },
                        {
                            "default": 0
                        }
                    ]
                },
                "simpleTypes": {
                    "type": "string",
                    "enum": [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                    ]
                },
                "stringArray": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                }
            },
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uri"
                },
                "$schema": {
                    "type": "string",
                    "format": "uri"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "default": {},
                "multipleOf": {
                    "type": "number",
                    "minimum": 0,
                    "exclusiveMinimum": true
                },
                "maximum": {
                    "type": "number"
                },
                "exclusiveMaximum": {
                    "type": "boolean",
                    "default": false
                },
                "minimum": {
                    "type": "number"
                },
                "exclusiveMinimum": {
                    "type": "boolean",
                    "default": false
                },
                "maxLength": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveInteger"
                        }
                    ]
                },
                "minLength": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveIntegerDefault0"
                        }
                    ]
                },
                "pattern": {
                    "type": "string",
                    "format": "regex"
                },
                "additionalItems": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#"
                        }
                    ],
                    "default": {}
                },
                "items": {
                    "anyOf": [
                        {
                            "$ref": "#"
                        },
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ],
                    "default": {}
                },
                "maxItems": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveInteger"
                        }
                    ]
                },
                "minItems": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveIntegerDefault0"
                        }
                    ]
                },
                "uniqueItems": {
                    "type": "boolean",
                    "default": false
                },
                "maxProperties": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveInteger"
                        }
                    ]
                },
                "minProperties": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/positiveIntegerDefault0"
                        }
                    ]
                },
                "required": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/stringArray"
                        }
                    ]
                },
                "additionalProperties": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#"
                        }
                    ],
                    "default": {}
                },
                "definitions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "patternProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#"
                            },
                            {
                                "$ref": "#/definitions/stringArray"
                            }
                        ]
                    }
                },
                "enum": {
                    "type": "array",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/simpleTypes"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/simpleTypes"
                            },
                            "minItems": 1,
                            "uniqueItems": true
                        }
                    ]
                },
                "format": {
                    "anyOf": [
                        {
                            "type": "string",
                            "enum": [
                                "date-time",
                                "uri",
                                "email",
                                "hostname",
                                "ipv4",
                                "ipv6",
                                "regex"
                            ]
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "allOf": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ]
                },
                "anyOf": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ]
                },
                "oneOf": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ]
                },
                "not": {
                    "allOf": [
                        {
                            "$ref": "#"
                        }
                    ]
                }
            },
            "dependencies": {
                "exclusiveMaximum": [
                    "maximum"
                ],
                "exclusiveMinimum": [
                    "minimum"
                ]
            },
            "default": {}
        },
        "http://json-schema.org/draft-07/schema#": {
            "definitions": {
                "schemaArray": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#"
                    }
                },
                "nonNegativeInteger": {
                    "type": "integer",
                    "minimum": 0
                },
                "nonNegativeIntegerDefault0": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/nonNegativeInteger"
                        },
                        {
                            "default": 0
                        }
                    ]
                },
                "simpleTypes": {
                    "enum": [
                        "array",
                        "boolean",
                        "integer",
                        "null",
                        "number",
                        "object",
                        "string"
                    ]
                },
                "stringArray": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true,
                    "default": []
                }
            },
            "type": [
                "object",
                "boolean"
            ],
            "properties": {
                "$id": {
                    "type": "string",
                    "format": "uri-reference"
                },
                "$schema": {
                    "type": "string",
                    "format": "uri"
                },
                "$ref": {
                    "type": "string",
                    "format": "uri-reference"
                },
                "$comment": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "default": true,
                "readOnly": {
                    "type": "boolean",
                    "default": false
                },
                "examples": {
                    "type": "array",
                    "items": true
                },
                "multipleOf": {
                    "type": "number",
                    "exclusiveMinimum": 0
                },
                "maximum": {
                    "type": "number"
                },
                "exclusiveMaximum": {
                    "type": "number"
                },
                "minimum": {
                    "type": "number"
                },
                "exclusiveMinimum": {
                    "type": "number"
                },
                "maxLength": {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                "minLength": {
                    "$ref": "#/definitions/nonNegativeIntegerDefault0"
                },
                "pattern": {
                    "type": "string",
                    "format": "regex"
                },
                "additionalItems": {
                    "$ref": "#"
                },
                "items": {
                    "anyOf": [
                        {
                            "$ref": "#"
                        },
                        {
                            "$ref": "#/definitions/schemaArray"
                        }
                    ],
                    "default": true
                },
                "maxItems": {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                "minItems": {
                    "$ref": "#/definitions/nonNegativeIntegerDefault0"
                },
                "uniqueItems": {
                    "type": "boolean",
                    "default": false
                },
                "contains": {
                    "$ref": "#"
                },
                "maxProperties": {
                    "$ref": "#/definitions/nonNegativeInteger"
                },
                "minProperties": {
                    "$ref": "#/definitions/nonNegativeIntegerDefault0"
                },
                "required": {
                    "$ref": "#/definitions/stringArray"
                },
                "additionalProperties": {
                    "$ref": "#"
                },
                "definitions": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "default": {}
                },
                "patternProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#"
                    },
                    "propertyNames": {
                        "format": "regex"
                    },
                    "default": {}
                },
                "dependencies": {
                    "type": "object",
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#"
                            },
                            {
                                "$ref": "#/definitions/stringArray"
                            }
                        ]
                    }
                },
                "propertyNames": {
                    "$ref": "#"
                },
                "const": true,
                "enum": {
                    "type": "array",
                    "items": true,
                    "minItems": 1,
                    "uniqueItems": true
                },
                "type": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/simpleTypes"
                        },
                        {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/simpleTypes"
                            },
                            "minItems": 1,
                            "uniqueItems": true
                        }
                    ]
                },
                "format": {
                    "type": "string"
                },
                "contentMediaType": {
                    "type": "string"
                },
                "contentEncoding": {
                    "type": "string"
                },
                "if": {
                    "$ref": "#"
                },
                "then": {
                    "$ref": "#"
                },
                "else": {
                    "$ref": "#"
                },
                "allOf": {
                    "$ref": "#/definitions/schemaArray"
                },
                "anyOf": {
                    "$ref": "#/definitions/schemaArray"
                },
                "oneOf": {
                    "$ref": "#/definitions/schemaArray"
                },
                "not": {
                    "$ref": "#"
                }
            },
            "default": true
        }
    }
};
var descriptions = {
    id: localize6("schema.json.id", "A unique identifier for the schema."),
    $schema: localize6("schema.json.$schema", "The schema to verify this document against."),
    title: localize6("schema.json.title", "A descriptive title of the element."),
    description: localize6("schema.json.description", "A long description of the element. Used in hover menus and suggestions."),
    default: localize6("schema.json.default", "A default value. Used by suggestions."),
    multipleOf: localize6("schema.json.multipleOf", "A number that should cleanly divide the current value (i.e. have no remainder)."),
    maximum: localize6("schema.json.maximum", "The maximum numerical value, inclusive by default."),
    exclusiveMaximum: localize6("schema.json.exclusiveMaximum", "Makes the maximum property exclusive."),
    minimum: localize6("schema.json.minimum", "The minimum numerical value, inclusive by default."),
    exclusiveMinimum: localize6("schema.json.exclusiveMininum", "Makes the minimum property exclusive."),
    maxLength: localize6("schema.json.maxLength", "The maximum length of a string."),
    minLength: localize6("schema.json.minLength", "The minimum length of a string."),
    pattern: localize6("schema.json.pattern", "A regular expression to match the string against. It is not implicitly anchored."),
    additionalItems: localize6("schema.json.additionalItems", "For arrays, only when items is set as an array. If it is a schema, then this schema validates items after the ones specified by the items array. If it is false, then additional items will cause validation to fail."),
    items: localize6("schema.json.items", "For arrays. Can either be a schema to validate every element against or an array of schemas to validate each item against in order (the first schema will validate the first element, the second schema will validate the second element, and so on."),
    maxItems: localize6("schema.json.maxItems", "The maximum number of items that can be inside an array. Inclusive."),
    minItems: localize6("schema.json.minItems", "The minimum number of items that can be inside an array. Inclusive."),
    uniqueItems: localize6("schema.json.uniqueItems", "If all of the items in the array must be unique. Defaults to false."),
    maxProperties: localize6("schema.json.maxProperties", "The maximum number of properties an object can have. Inclusive."),
    minProperties: localize6("schema.json.minProperties", "The minimum number of properties an object can have. Inclusive."),
    required: localize6("schema.json.required", "An array of strings that lists the names of all properties required on this object."),
    additionalProperties: localize6("schema.json.additionalProperties", "Either a schema or a boolean. If a schema, then used to validate all properties not matched by 'properties' or 'patternProperties'. If false, then any properties not matched by either will cause this schema to fail."),
    definitions: localize6("schema.json.definitions", "Not used for validation. Place subschemas here that you wish to reference inline with $ref."),
    properties: localize6("schema.json.properties", "A map of property names to schemas for each property."),
    patternProperties: localize6("schema.json.patternProperties", "A map of regular expressions on property names to schemas for matching properties."),
    dependencies: localize6("schema.json.dependencies", "A map of property names to either an array of property names or a schema. An array of property names means the property named in the key depends on the properties in the array being present in the object in order to be valid. If the value is a schema, then the schema is only applied to the object if the property in the key exists on the object."),
    enum: localize6("schema.json.enum", "The set of literal values that are valid."),
    type: localize6("schema.json.type", "Either a string of one of the basic schema types (number, integer, null, array, object, boolean, string) or an array of strings specifying a subset of those types."),
    format: localize6("schema.json.format", "Describes the format expected for the value."),
    allOf: localize6("schema.json.allOf", "An array of schemas, all of which must match."),
    anyOf: localize6("schema.json.anyOf", "An array of schemas, where at least one must match."),
    oneOf: localize6("schema.json.oneOf", "An array of schemas, exactly one of which must match."),
    not: localize6("schema.json.not", "A schema which must not match."),
    $id: localize6("schema.json.$id", "A unique identifier for the schema."),
    $ref: localize6("schema.json.$ref", "Reference a definition hosted on any location."),
    $comment: localize6("schema.json.$comment", "Comments from schema authors to readers or maintainers of the schema."),
    readOnly: localize6("schema.json.readOnly", "Indicates that the value of the instance is managed exclusively by the owning authority."),
    examples: localize6("schema.json.examples", "Sample JSON values associated with a particular schema, for the purpose of illustrating usage."),
    contains: localize6("schema.json.contains", 'An array instance is valid against "contains" if at least one of its elements is valid against the given schema.'),
    propertyNames: localize6("schema.json.propertyNames", "If the instance is an object, this keyword validates if every property name in the instance validates against the provided schema."),
    const: localize6("schema.json.const", "An instance validates successfully against this keyword if its value is equal to the value of the keyword."),
    contentMediaType: localize6("schema.json.contentMediaType", "Describes the media type of a string property."),
    contentEncoding: localize6("schema.json.contentEncoding", "Describes the content encoding of a string property."),
    if: localize6("schema.json.if", 'The validation outcome of the "if" subschema controls which of the "then" or "else" keywords are evaluated.'),
    then: localize6("schema.json.then", 'The "if" subschema is used for validation when the "if" subschema succeeds.'),
    else: localize6("schema.json.else", 'The "else" subschema is used for validation when the "if" subschema fails.')
};
for(schemaName in schemaContributions.schemas){
    schema4 = schemaContributions.schemas[schemaName];
    for(property in schema4.properties){
        propertyObject = schema4.properties[property];
        if (typeof propertyObject === "boolean") {
            propertyObject = schema4.properties[property] = {};
        }
        description = descriptions[property];
        if (description) {
            propertyObject["description"] = description;
        } else {
            console.log(property + ": localize('schema.json." + property + `', "")`);
        }
    }
}
var schema4;
var propertyObject;
var description;
var property;
var schemaName;
// ../../node_modules/yaml-language-server/node_modules/vscode-json-languageservice/lib/esm/services/jsonLinks.js
function findLinks(document, doc) {
    var links = [];
    doc.visit(function(node) {
        var _a;
        if (node.type === "property" && node.keyNode.value === "$ref" && ((_a = node.valueNode) === null || _a === void 0 ? void 0 : _a.type) === "string") {
            var path5 = node.valueNode.value;
            var targetNode = findTargetNode(doc, path5);
            if (targetNode) {
                var targetPos = document.positionAt(targetNode.offset);
                links.push({
                    target: document.uri + "#" + (targetPos.line + 1) + "," + (targetPos.character + 1),
                    range: createRange(document, node.valueNode)
                });
            }
        }
        return true;
    });
    return Promise.resolve(links);
}
function createRange(document, node) {
    return Range.create(document.positionAt(node.offset + 1), document.positionAt(node.offset + node.length - 1));
}
function findTargetNode(doc, path5) {
    var tokens = parseJSONPointer(path5);
    if (!tokens) {
        return null;
    }
    return findNode(tokens, doc.root);
}
function findNode(pointer, node) {
    if (!node) {
        return null;
    }
    if (pointer.length === 0) {
        return node;
    }
    var token = pointer.shift();
    if (node && node.type === "object") {
        var propertyNode = node.properties.find(function(propertyNode2) {
            return propertyNode2.keyNode.value === token;
        });
        if (!propertyNode) {
            return null;
        }
        return findNode(pointer, propertyNode.valueNode);
    } else if (node && node.type === "array") {
        if (token.match(/^(0|[1-9][0-9]*)$/)) {
            var index = Number.parseInt(token);
            var arrayItem = node.items[index];
            if (!arrayItem) {
                return null;
            }
            return findNode(pointer, arrayItem);
        }
    }
    return null;
}
function parseJSONPointer(path5) {
    if (path5 === "#") {
        return [];
    }
    if (path5[0] !== "#" || path5[1] !== "/") {
        return null;
    }
    return path5.substring(2).split(/\//).map(unescape2);
}
function unescape2(str) {
    return str.replace(/~1/g, "/").replace(/~0/g, "~");
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/jsonParser07.js
init_main();
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/arrUtils.js
function matchOffsetToDocument(offset, jsonDocuments) {
    for (const jsonDoc of jsonDocuments.documents){
        if (jsonDoc.internalDocument && jsonDoc.internalDocument.range[0] <= offset && jsonDoc.internalDocument.range[2] >= offset) {
            return jsonDoc;
        }
    }
    if (jsonDocuments.documents.length === 1) {
        return jsonDocuments.documents[0];
    }
    return null;
}
function filterInvalidCustomTags(customTags) {
    const validCustomTags = [
        "mapping",
        "scalar",
        "sequence"
    ];
    if (!customTags) {
        return [];
    }
    return customTags.filter((tag)=>{
        if (typeof tag === "string") {
            const typeInfo = tag.split(" ");
            const type = typeInfo[1] && typeInfo[1].toLowerCase() || "scalar";
            if (type === "map") {
                return false;
            }
            return validCustomTags.indexOf(type) !== -1;
        }
        return false;
    });
}
function isArrayEqual(fst, snd) {
    if (!snd || !fst) {
        return false;
    }
    if (snd.length !== fst.length) {
        return false;
    }
    for(let index = fst.length - 1; index >= 0; index--){
        if (fst[index] !== snd[index]) {
            return false;
        }
    }
    return true;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/jsonParser07.js
var localize7 = loadMessageBundle();
var MSG_PROPERTY_NOT_ALLOWED = "Property {0} is not allowed.";
var formats2 = {
    "color-hex": {
        errorMessage: localize7("colorHexFormatWarning", "Invalid color format. Use #RGB, #RGBA, #RRGGBB or #RRGGBBAA."),
        pattern: /^#([0-9A-Fa-f]{3,4}|([0-9A-Fa-f]{2}){3,4})$/
    },
    "date-time": {
        errorMessage: localize7("dateTimeFormatWarning", "String is not a RFC3339 date-time."),
        pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i
    },
    date: {
        errorMessage: localize7("dateFormatWarning", "String is not a RFC3339 date."),
        pattern: /^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/i
    },
    time: {
        errorMessage: localize7("timeFormatWarning", "String is not a RFC3339 time."),
        pattern: /^([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)([01][0-9]|2[0-3]):([0-5][0-9]))$/i
    },
    email: {
        errorMessage: localize7("emailFormatWarning", "String is not an e-mail address."),
        pattern: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    },
    ipv4: {
        errorMessage: localize7("ipv4FormatWarning", "String does not match IPv4 format."),
        pattern: /^((25[0-5]|(2[0-4]|1\d|[1-9]|)\d)\.?\b){4}$/
    },
    ipv6: {
        errorMessage: localize7("ipv6FormatWarning", "String does not match IPv6 format."),
        pattern: /^([0-9a-f]|:){1,4}(:([0-9a-f]{0,4})*){1,7}$/i
    }
};
var YAML_SOURCE = "YAML";
var YAML_SCHEMA_PREFIX = "yaml-schema: ";
var ProblemType;
(function(ProblemType2) {
    ProblemType2["missingRequiredPropWarning"] = "missingRequiredPropWarning";
    ProblemType2["typeMismatchWarning"] = "typeMismatchWarning";
    ProblemType2["constWarning"] = "constWarning";
})(ProblemType || (ProblemType = {}));
var ProblemTypeMessages = {
    [ProblemType.missingRequiredPropWarning]: 'Missing property "{0}".',
    [ProblemType.typeMismatchWarning]: 'Incorrect type. Expected "{0}".',
    [ProblemType.constWarning]: "Value must be {0}."
};
var ASTNodeImpl2 = class {
    getNodeFromOffsetEndInclusive(offset) {
        const collector = [];
        const findNode2 = (node)=>{
            if (offset >= node.offset && offset <= node.offset + node.length) {
                const children = node.children;
                for(let i = 0; i < children.length && children[i].offset <= offset; i++){
                    const item = findNode2(children[i]);
                    if (item) {
                        collector.push(item);
                    }
                }
                return node;
            }
            return null;
        };
        const foundNode = findNode2(this);
        let currMinDist = Number.MAX_VALUE;
        let currMinNode = null;
        for (const currNode of collector){
            const minDist = currNode.length + currNode.offset - offset + (offset - currNode.offset);
            if (minDist < currMinDist) {
                currMinNode = currNode;
                currMinDist = minDist;
            }
        }
        return currMinNode || foundNode;
    }
    get children() {
        return [];
    }
    toString() {
        return "type: " + this.type + " (" + this.offset + "/" + this.length + ")" + (this.parent ? " parent: {" + this.parent.toString() + "}" : "");
    }
    constructor(parent, internalNode, offset, length){
        this.offset = offset;
        this.length = length;
        this.parent = parent;
        this.internalNode = internalNode;
    }
};
var NullASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "null";
        this.value = null;
    }
};
var BooleanASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, boolValue, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "boolean";
        this.value = boolValue;
    }
};
var ArrayASTNodeImpl2 = class extends ASTNodeImpl2 {
    get children() {
        return this.items;
    }
    constructor(parent, internalNode, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "array";
        this.items = [];
    }
};
var NumberASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "number";
        this.isInteger = true;
        this.value = Number.NaN;
    }
};
var StringASTNodeImpl2 = class extends ASTNodeImpl2 {
    constructor(parent, internalNode, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "string";
        this.value = "";
    }
};
var PropertyASTNodeImpl2 = class extends ASTNodeImpl2 {
    get children() {
        return this.valueNode ? [
            this.keyNode,
            this.valueNode
        ] : [
            this.keyNode
        ];
    }
    constructor(parent, internalNode, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "property";
        this.colonOffset = -1;
    }
};
var ObjectASTNodeImpl2 = class extends ASTNodeImpl2 {
    get children() {
        return this.properties;
    }
    constructor(parent, internalNode, offset, length){
        super(parent, internalNode, offset, length);
        this.type = "object";
        this.properties = [];
    }
};
function asSchema2(schema4) {
    if (schema4 === void 0) {
        return void 0;
    }
    if (isBoolean2(schema4)) {
        return schema4 ? {} : {
            not: {}
        };
    }
    if (typeof schema4 !== "object") {
        console.warn(`Wrong schema: ${JSON.stringify(schema4)}, it MUST be an Object or Boolean`);
        schema4 = {
            type: schema4
        };
    }
    return schema4;
}
var EnumMatch2;
(function(EnumMatch3) {
    EnumMatch3[EnumMatch3["Key"] = 0] = "Key";
    EnumMatch3[EnumMatch3["Enum"] = 1] = "Enum";
})(EnumMatch2 || (EnumMatch2 = {}));
var SchemaCollector2 = class _SchemaCollector {
    add(schema4) {
        this.schemas.push(schema4);
    }
    merge(other) {
        this.schemas.push(...other.schemas);
    }
    include(node) {
        return (this.focusOffset === -1 || contains3(node, this.focusOffset)) && node !== this.exclude;
    }
    newSub() {
        return new _SchemaCollector(-1, this.exclude);
    }
    constructor(focusOffset = -1, exclude = null){
        this.focusOffset = focusOffset;
        this.exclude = exclude;
        this.schemas = [];
    }
};
var NoOpSchemaCollector2 = class {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get schemas() {
        return [];
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    add(schema4) {}
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    merge(other) {}
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    include(node) {
        return true;
    }
    newSub() {
        return this;
    }
    constructor(){}
};
NoOpSchemaCollector2.instance = new NoOpSchemaCollector2();
var ValidationResult2 = class {
    hasProblems() {
        return !!this.problems.length;
    }
    mergeAll(validationResults) {
        for (const validationResult of validationResults){
            this.merge(validationResult);
        }
    }
    merge(validationResult) {
        this.problems = this.problems.concat(validationResult.problems);
    }
    mergeEnumValues(validationResult) {
        if (!this.enumValueMatch && !validationResult.enumValueMatch && this.enumValues && validationResult.enumValues) {
            this.enumValues = this.enumValues.concat(validationResult.enumValues);
            for (const error of this.problems){
                if (error.code === ErrorCode.EnumValueMismatch) {
                    error.message = localize7("enumWarning", "Value is not accepted. Valid values: {0}.", [
                        ...new Set(this.enumValues)
                    ].map((v)=>{
                        return JSON.stringify(v);
                    }).join(", "));
                }
            }
        }
    }
    /**
   * Merge multiple warnings with same problemType together
   * @param subValidationResult another possible result
   */ mergeWarningGeneric(subValidationResult, problemTypesToMerge) {
        var _a, _b, _c;
        if ((_a = this.problems) == null ? void 0 : _a.length) {
            for (const problemType of problemTypesToMerge){
                const bestResults = this.problems.filter((p)=>p.problemType === problemType);
                for (const bestResult of bestResults){
                    const mergingResult = (_b = subValidationResult.problems) == null ? void 0 : _b.find((p)=>p.problemType === problemType && bestResult.location.offset === p.location.offset && (problemType !== ProblemType.missingRequiredPropWarning || isArrayEqual(p.problemArgs, bestResult.problemArgs)));
                    if (mergingResult) {
                        if ((_c = mergingResult.problemArgs) == null ? void 0 : _c.length) {
                            mergingResult.problemArgs.filter((p)=>!bestResult.problemArgs.includes(p)).forEach((p)=>bestResult.problemArgs.push(p));
                            bestResult.message = getWarningMessage(bestResult.problemType, bestResult.problemArgs);
                        }
                        this.mergeSources(mergingResult, bestResult);
                    }
                }
            }
        }
    }
    mergePropertyMatch(propertyValidationResult) {
        this.merge(propertyValidationResult);
        this.propertiesMatches++;
        if (propertyValidationResult.enumValueMatch || !propertyValidationResult.hasProblems() && propertyValidationResult.propertiesMatches) {
            this.propertiesValueMatches++;
        }
        if (propertyValidationResult.enumValueMatch && propertyValidationResult.enumValues) {
            this.primaryValueMatches++;
        }
    }
    mergeSources(mergingResult, bestResult) {
        const mergingSource = mergingResult.source.replace(YAML_SCHEMA_PREFIX, "");
        if (!bestResult.source.includes(mergingSource)) {
            bestResult.source = bestResult.source + " | " + mergingSource;
        }
        if (!bestResult.schemaUri.includes(mergingResult.schemaUri[0])) {
            bestResult.schemaUri = bestResult.schemaUri.concat(mergingResult.schemaUri);
        }
    }
    compareGeneric(other) {
        const hasProblems = this.hasProblems();
        if (hasProblems !== other.hasProblems()) {
            return hasProblems ? -1 : 1;
        }
        if (this.enumValueMatch !== other.enumValueMatch) {
            return other.enumValueMatch ? -1 : 1;
        }
        if (this.propertiesValueMatches !== other.propertiesValueMatches) {
            return this.propertiesValueMatches - other.propertiesValueMatches;
        }
        if (this.primaryValueMatches !== other.primaryValueMatches) {
            return this.primaryValueMatches - other.primaryValueMatches;
        }
        return this.propertiesMatches - other.propertiesMatches;
    }
    compareKubernetes(other) {
        const hasProblems = this.hasProblems();
        if (this.propertiesMatches !== other.propertiesMatches) {
            return this.propertiesMatches - other.propertiesMatches;
        }
        if (this.enumValueMatch !== other.enumValueMatch) {
            return other.enumValueMatch ? -1 : 1;
        }
        if (this.primaryValueMatches !== other.primaryValueMatches) {
            return this.primaryValueMatches - other.primaryValueMatches;
        }
        if (this.propertiesValueMatches !== other.propertiesValueMatches) {
            return this.propertiesValueMatches - other.propertiesValueMatches;
        }
        if (hasProblems !== other.hasProblems()) {
            return hasProblems ? -1 : 1;
        }
        return this.propertiesMatches - other.propertiesMatches;
    }
    constructor(isKubernetes){
        this.problems = [];
        this.propertiesMatches = 0;
        this.propertiesValueMatches = 0;
        this.primaryValueMatches = 0;
        this.enumValueMatch = false;
        if (isKubernetes) {
            this.enumValues = [];
        } else {
            this.enumValues = null;
        }
    }
};
function getNodeValue4(node) {
    switch(node.type){
        case "array":
            return node.children.map(getNodeValue4);
        case "object":
            {
                const obj = /* @__PURE__ */ Object.create(null);
                for(let _i = 0, _a = node.children; _i < _a.length; _i++){
                    const prop = _a[_i];
                    const valueNode = prop.children[1];
                    if (valueNode) {
                        obj[prop.children[0].value] = getNodeValue4(valueNode);
                    }
                }
                return obj;
            }
        case "null":
        case "string":
        case "number":
        case "boolean":
            return node.value;
        default:
            return void 0;
    }
}
function contains3(node, offset, includeRightBound = false) {
    return offset >= node.offset && offset <= node.offset + node.length || includeRightBound && offset === node.offset + node.length;
}
function findNodeAtOffset3(node, offset, includeRightBound) {
    if (includeRightBound === void 0) {
        includeRightBound = false;
    }
    if (contains3(node, offset, includeRightBound)) {
        const children = node.children;
        if (Array.isArray(children)) {
            for(let i = 0; i < children.length && children[i].offset <= offset; i++){
                const item = findNodeAtOffset3(children[i], offset, includeRightBound);
                if (item) {
                    return item;
                }
            }
        }
        return node;
    }
    return void 0;
}
var JSONDocument2 = class {
    getNodeFromOffset(offset, includeRightBound = false) {
        if (this.root) {
            return findNodeAtOffset3(this.root, offset, includeRightBound);
        }
        return void 0;
    }
    getNodeFromOffsetEndInclusive(offset) {
        return this.root && this.root.getNodeFromOffsetEndInclusive(offset);
    }
    visit(visitor) {
        if (this.root) {
            const doVisit = (node)=>{
                let ctn = visitor(node);
                const children = node.children;
                if (Array.isArray(children)) {
                    for(let i = 0; i < children.length && ctn; i++){
                        ctn = doVisit(children[i]);
                    }
                }
                return ctn;
            };
            doVisit(this.root);
        }
    }
    validate(textDocument, schema4) {
        if (this.root && schema4) {
            const validationResult = new ValidationResult2(this.isKubernetes);
            validate2(this.root, schema4, schema4, validationResult, NoOpSchemaCollector2.instance, {
                isKubernetes: this.isKubernetes,
                disableAdditionalProperties: this.disableAdditionalProperties,
                uri: this.uri
            });
            return validationResult.problems.map((p)=>{
                const range = Range.create(textDocument.positionAt(p.location.offset), textDocument.positionAt(p.location.offset + p.location.length));
                const diagnostic = Diagnostic.create(range, p.message, p.severity, p.code ? p.code : ErrorCode.Undefined, p.source);
                diagnostic.data = {
                    schemaUri: p.schemaUri,
                    ...p.data
                };
                return diagnostic;
            });
        }
        return null;
    }
    /**
   * This method returns the list of applicable schemas
   *
   * currently used @param didCallFromAutoComplete flag to differentiate the method call, when it is from auto complete
   * then user still types something and skip the validation for timebeing untill completed.
   * On https://github.com/redhat-developer/yaml-language-server/pull/719 the auto completes need to populate the list of enum string which matches to the enum
   * and on https://github.com/redhat-developer/vscode-yaml/issues/803 the validation should throw the error based on the enum string.
   *
   * @param schema schema
   * @param focusOffset  offsetValue
   * @param exclude excluded Node
   * @param didCallFromAutoComplete true if method called from AutoComplete
   * @returns array of applicable schemas
   */ getMatchingSchemas(schema4, focusOffset = -1, exclude = null, didCallFromAutoComplete) {
        const matchingSchemas = new SchemaCollector2(focusOffset, exclude);
        if (this.root && schema4) {
            validate2(this.root, schema4, schema4, new ValidationResult2(this.isKubernetes), matchingSchemas, {
                isKubernetes: this.isKubernetes,
                disableAdditionalProperties: this.disableAdditionalProperties,
                uri: this.uri,
                callFromAutoComplete: didCallFromAutoComplete
            });
        }
        return matchingSchemas.schemas;
    }
    constructor(root, syntaxErrors = [], comments = []){
        this.root = root;
        this.syntaxErrors = syntaxErrors;
        this.comments = comments;
    }
};
function validate2(node, schema4, originalSchema, validationResult, matchingSchemas, options) {
    const { isKubernetes, callFromAutoComplete } = options;
    if (!node) {
        return;
    }
    if (typeof schema4 !== "object") {
        return;
    }
    if (!schema4.url) {
        schema4.url = originalSchema.url;
    }
    schema4.closestTitle = schema4.title || originalSchema.closestTitle;
    switch(node.type){
        case "object":
            _validateObjectNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "array":
            _validateArrayNode(node, schema4, validationResult, matchingSchemas);
            break;
        case "string":
            _validateStringNode(node, schema4, validationResult);
            break;
        case "number":
            _validateNumberNode(node, schema4, validationResult);
            break;
        case "property":
            return validate2(node.valueNode, schema4, schema4, validationResult, matchingSchemas, options);
    }
    _validateNode();
    matchingSchemas.add({
        node,
        schema: schema4
    });
    function _validateNode() {
        function matchesType(type) {
            return node.type === type || type === "integer" && node.type === "number" && node.isInteger;
        }
        if (Array.isArray(schema4.type)) {
            if (!schema4.type.some(matchesType)) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: schema4.errorMessage || localize7("typeArrayMismatchWarning", "Incorrect type. Expected one of {0}.", schema4.type.join(", ")),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema)
                });
            }
        } else if (schema4.type) {
            if (!matchesType(schema4.type)) {
                const schemaType = schema4.type === "object" ? getSchemaTypeName(schema4) : schema4.type;
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: schema4.errorMessage || getWarningMessage(ProblemType.typeMismatchWarning, [
                        schemaType
                    ]),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema),
                    problemType: ProblemType.typeMismatchWarning,
                    problemArgs: [
                        schemaType
                    ]
                });
            }
        }
        if (Array.isArray(schema4.allOf)) {
            for (const subSchemaRef of schema4.allOf){
                validate2(node, asSchema2(subSchemaRef), schema4, validationResult, matchingSchemas, options);
            }
        }
        const notSchema = asSchema2(schema4.not);
        if (notSchema) {
            const subValidationResult = new ValidationResult2(isKubernetes);
            const subMatchingSchemas = matchingSchemas.newSub();
            validate2(node, notSchema, schema4, subValidationResult, subMatchingSchemas, options);
            if (!subValidationResult.hasProblems()) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("notSchemaWarning", "Matches a schema that is not allowed."),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema)
                });
            }
            for (const ms of subMatchingSchemas.schemas){
                ms.inverted = !ms.inverted;
                matchingSchemas.add(ms);
            }
        }
        const testAlternatives = (alternatives, maxOneMatch)=>{
            var _a;
            const matches = [];
            const subMatches = [];
            const noPropertyMatches = [];
            let bestMatch = null;
            for (const subSchemaRef of alternatives){
                const subSchema = {
                    ...asSchema2(subSchemaRef)
                };
                const subValidationResult = new ValidationResult2(isKubernetes);
                const subMatchingSchemas = matchingSchemas.newSub();
                validate2(node, subSchema, schema4, subValidationResult, subMatchingSchemas, options);
                if (!subValidationResult.hasProblems() || callFromAutoComplete) {
                    matches.push(subSchema);
                    subMatches.push(subSchema);
                    if (subValidationResult.propertiesMatches === 0) {
                        noPropertyMatches.push(subSchema);
                    }
                    if (subSchema.format) {
                        subMatches.pop();
                    }
                }
                if (!bestMatch) {
                    bestMatch = {
                        schema: subSchema,
                        validationResult: subValidationResult,
                        matchingSchemas: subMatchingSchemas
                    };
                } else if (isKubernetes) {
                    bestMatch = alternativeComparison(subValidationResult, bestMatch, subSchema, subMatchingSchemas);
                } else {
                    bestMatch = genericComparison(node, maxOneMatch, subValidationResult, bestMatch, subSchema, subMatchingSchemas);
                }
            }
            if (subMatches.length > 1 && (subMatches.length > 1 || noPropertyMatches.length === 0) && maxOneMatch) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: 1
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("oneOfWarning", "Matches multiple schemas when only one must validate."),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema)
                });
            }
            if (bestMatch !== null) {
                validationResult.merge(bestMatch.validationResult);
                validationResult.propertiesMatches += bestMatch.validationResult.propertiesMatches;
                validationResult.propertiesValueMatches += bestMatch.validationResult.propertiesValueMatches;
                validationResult.enumValueMatch = validationResult.enumValueMatch || bestMatch.validationResult.enumValueMatch;
                if ((_a = bestMatch.validationResult.enumValues) == null ? void 0 : _a.length) {
                    validationResult.enumValues = (validationResult.enumValues || []).concat(bestMatch.validationResult.enumValues);
                }
                matchingSchemas.merge(bestMatch.matchingSchemas);
            }
            return matches.length;
        };
        if (Array.isArray(schema4.anyOf)) {
            testAlternatives(schema4.anyOf, false);
        }
        if (Array.isArray(schema4.oneOf)) {
            testAlternatives(schema4.oneOf, true);
        }
        const testBranch = (schema5, originalSchema2)=>{
            const subValidationResult = new ValidationResult2(isKubernetes);
            const subMatchingSchemas = matchingSchemas.newSub();
            validate2(node, asSchema2(schema5), originalSchema2, subValidationResult, subMatchingSchemas, options);
            validationResult.merge(subValidationResult);
            validationResult.propertiesMatches += subValidationResult.propertiesMatches;
            validationResult.propertiesValueMatches += subValidationResult.propertiesValueMatches;
            matchingSchemas.merge(subMatchingSchemas);
        };
        const testCondition = (ifSchema2, originalSchema2, thenSchema, elseSchema)=>{
            const subSchema = asSchema2(ifSchema2);
            const subValidationResult = new ValidationResult2(isKubernetes);
            const subMatchingSchemas = matchingSchemas.newSub();
            validate2(node, subSchema, originalSchema2, subValidationResult, subMatchingSchemas, options);
            matchingSchemas.merge(subMatchingSchemas);
            const { filePatternAssociation } = subSchema;
            if (filePatternAssociation) {
                const association = new FilePatternAssociation2(filePatternAssociation);
                if (!association.matchesPattern(options.uri)) {
                    subValidationResult.problems.push({
                        location: {
                            offset: node.offset,
                            length: node.length
                        },
                        severity: DiagnosticSeverity.Warning,
                        message: localize7("ifFilePatternAssociation", `filePatternAssociation '${filePatternAssociation}' does not match with doc uri '${options.uri}'.`),
                        source: getSchemaSource(schema4, originalSchema2),
                        schemaUri: getSchemaUri(schema4, originalSchema2)
                    });
                }
            }
            if (!subValidationResult.hasProblems()) {
                if (thenSchema) {
                    testBranch(thenSchema, originalSchema2);
                }
            } else if (elseSchema) {
                testBranch(elseSchema, originalSchema2);
            }
        };
        const ifSchema = asSchema2(schema4.if);
        if (ifSchema) {
            testCondition(ifSchema, schema4, asSchema2(schema4.then), asSchema2(schema4.else));
        }
        if (Array.isArray(schema4.enum)) {
            const val = getNodeValue4(node);
            let enumValueMatch = false;
            for (const e of schema4.enum){
                if (equals2(val, e) || callFromAutoComplete && isString2(val) && isString2(e) && val && e.startsWith(val)) {
                    enumValueMatch = true;
                    break;
                }
            }
            validationResult.enumValues = schema4.enum;
            validationResult.enumValueMatch = enumValueMatch;
            if (!enumValueMatch) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    code: ErrorCode.EnumValueMismatch,
                    message: schema4.errorMessage || localize7("enumWarning", "Value is not accepted. Valid values: {0}.", schema4.enum.map((v)=>{
                        return JSON.stringify(v);
                    }).join(", ")),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema),
                    data: {
                        values: schema4.enum
                    }
                });
            }
        }
        if (isDefined2(schema4.const)) {
            const val = getNodeValue4(node);
            if (!equals2(val, schema4.const) && !(callFromAutoComplete && isString2(val) && isString2(schema4.const) && schema4.const.startsWith(val))) {
                validationResult.problems.push({
                    location: {
                        offset: node.offset,
                        length: node.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    code: ErrorCode.EnumValueMismatch,
                    problemType: ProblemType.constWarning,
                    message: schema4.errorMessage || getWarningMessage(ProblemType.constWarning, [
                        JSON.stringify(schema4.const)
                    ]),
                    source: getSchemaSource(schema4, originalSchema),
                    schemaUri: getSchemaUri(schema4, originalSchema),
                    problemArgs: [
                        JSON.stringify(schema4.const)
                    ],
                    data: {
                        values: [
                            schema4.const
                        ]
                    }
                });
                validationResult.enumValueMatch = false;
            } else {
                validationResult.enumValueMatch = true;
            }
            validationResult.enumValues = [
                schema4.const
            ];
        }
        if (schema4.deprecationMessage && node.parent) {
            validationResult.problems.push({
                location: {
                    offset: node.parent.offset,
                    length: node.parent.length
                },
                severity: DiagnosticSeverity.Warning,
                message: schema4.deprecationMessage,
                source: getSchemaSource(schema4, originalSchema),
                schemaUri: getSchemaUri(schema4, originalSchema)
            });
        }
    }
    function _validateNumberNode(node2, schema5, validationResult2) {
        const val = node2.value;
        if (isNumber2(schema5.multipleOf)) {
            if (val % schema5.multipleOf !== 0) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("multipleOfWarning", "Value is not divisible by {0}.", schema5.multipleOf),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        function getExclusiveLimit(limit, exclusive) {
            if (isNumber2(exclusive)) {
                return exclusive;
            }
            if (isBoolean2(exclusive) && exclusive) {
                return limit;
            }
            return void 0;
        }
        function getLimit(limit, exclusive) {
            if (!isBoolean2(exclusive) || !exclusive) {
                return limit;
            }
            return void 0;
        }
        const exclusiveMinimum = getExclusiveLimit(schema5.minimum, schema5.exclusiveMinimum);
        if (isNumber2(exclusiveMinimum) && val <= exclusiveMinimum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("exclusiveMinimumWarning", "Value is below the exclusive minimum of {0}.", exclusiveMinimum),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        const exclusiveMaximum = getExclusiveLimit(schema5.maximum, schema5.exclusiveMaximum);
        if (isNumber2(exclusiveMaximum) && val >= exclusiveMaximum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("exclusiveMaximumWarning", "Value is above the exclusive maximum of {0}.", exclusiveMaximum),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        const minimum = getLimit(schema5.minimum, schema5.exclusiveMinimum);
        if (isNumber2(minimum) && val < minimum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("minimumWarning", "Value is below the minimum of {0}.", minimum),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        const maximum = getLimit(schema5.maximum, schema5.exclusiveMaximum);
        if (isNumber2(maximum) && val > maximum) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("maximumWarning", "Value is above the maximum of {0}.", maximum),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
    }
    function _validateStringNode(node2, schema5, validationResult2) {
        if (isNumber2(schema5.minLength) && node2.value.length < schema5.minLength) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("minLengthWarning", "String is shorter than the minimum length of {0}.", schema5.minLength),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        if (isNumber2(schema5.maxLength) && node2.value.length > schema5.maxLength) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("maxLengthWarning", "String is longer than the maximum length of {0}.", schema5.maxLength),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        if (isString2(schema5.pattern)) {
            const regex = safeCreateUnicodeRegExp(schema5.pattern);
            if (!regex.test(node2.value)) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: schema5.patternErrorMessage || schema5.errorMessage || localize7("patternWarning", 'String does not match the pattern of "{0}".', schema5.pattern),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        if (schema5.format) {
            switch(schema5.format){
                case "uri":
                case "uri-reference":
                    {
                        let errorMessage;
                        if (!node2.value) {
                            errorMessage = localize7("uriEmpty", "URI expected.");
                        } else {
                            try {
                                const uri = yaml_service_URI.parse(node2.value);
                                if (!uri.scheme && schema5.format === "uri") {
                                    errorMessage = localize7("uriSchemeMissing", "URI with a scheme is expected.");
                                }
                            } catch (e) {
                                errorMessage = e.message;
                            }
                        }
                        if (errorMessage) {
                            validationResult2.problems.push({
                                location: {
                                    offset: node2.offset,
                                    length: node2.length
                                },
                                severity: DiagnosticSeverity.Warning,
                                message: schema5.patternErrorMessage || schema5.errorMessage || localize7("uriFormatWarning", "String is not a URI: {0}", errorMessage),
                                source: getSchemaSource(schema5, originalSchema),
                                schemaUri: getSchemaUri(schema5, originalSchema)
                            });
                        }
                    }
                    break;
                case "color-hex":
                case "date-time":
                case "date":
                case "time":
                case "email":
                case "ipv4":
                case "ipv6":
                    {
                        const format5 = formats2[schema5.format];
                        if (!node2.value || !format5.pattern.test(node2.value)) {
                            validationResult2.problems.push({
                                location: {
                                    offset: node2.offset,
                                    length: node2.length
                                },
                                severity: DiagnosticSeverity.Warning,
                                message: schema5.patternErrorMessage || schema5.errorMessage || format5.errorMessage,
                                source: getSchemaSource(schema5, originalSchema),
                                schemaUri: getSchemaUri(schema5, originalSchema)
                            });
                        }
                    }
                    break;
                default:
            }
        }
    }
    function _validateArrayNode(node2, schema5, validationResult2, matchingSchemas2) {
        if (Array.isArray(schema5.items)) {
            const subSchemas = schema5.items;
            for(let index = 0; index < subSchemas.length; index++){
                const subSchemaRef = subSchemas[index];
                const subSchema = asSchema2(subSchemaRef);
                const itemValidationResult = new ValidationResult2(isKubernetes);
                const item = node2.items[index];
                if (item) {
                    validate2(item, subSchema, schema5, itemValidationResult, matchingSchemas2, options);
                    validationResult2.mergePropertyMatch(itemValidationResult);
                    validationResult2.mergeEnumValues(itemValidationResult);
                } else if (node2.items.length >= subSchemas.length) {
                    validationResult2.propertiesValueMatches++;
                }
            }
            if (node2.items.length > subSchemas.length) {
                if (typeof schema5.additionalItems === "object") {
                    for(let i = subSchemas.length; i < node2.items.length; i++){
                        const itemValidationResult = new ValidationResult2(isKubernetes);
                        validate2(node2.items[i], schema5.additionalItems, schema5, itemValidationResult, matchingSchemas2, options);
                        validationResult2.mergePropertyMatch(itemValidationResult);
                        validationResult2.mergeEnumValues(itemValidationResult);
                    }
                } else if (schema5.additionalItems === false) {
                    validationResult2.problems.push({
                        location: {
                            offset: node2.offset,
                            length: node2.length
                        },
                        severity: DiagnosticSeverity.Warning,
                        message: localize7("additionalItemsWarning", "Array has too many items according to schema. Expected {0} or fewer.", subSchemas.length),
                        source: getSchemaSource(schema5, originalSchema),
                        schemaUri: getSchemaUri(schema5, originalSchema)
                    });
                }
            }
        } else {
            const itemSchema = asSchema2(schema5.items);
            if (itemSchema) {
                const itemValidationResult = new ValidationResult2(isKubernetes);
                node2.items.forEach((item)=>{
                    if (itemSchema.oneOf && itemSchema.oneOf.length === 1) {
                        const subSchemaRef = itemSchema.oneOf[0];
                        const subSchema = {
                            ...asSchema2(subSchemaRef)
                        };
                        subSchema.title = schema5.title;
                        subSchema.closestTitle = schema5.closestTitle;
                        validate2(item, subSchema, schema5, itemValidationResult, matchingSchemas2, options);
                        validationResult2.mergePropertyMatch(itemValidationResult);
                        validationResult2.mergeEnumValues(itemValidationResult);
                    } else {
                        validate2(item, itemSchema, schema5, itemValidationResult, matchingSchemas2, options);
                        validationResult2.mergePropertyMatch(itemValidationResult);
                        validationResult2.mergeEnumValues(itemValidationResult);
                    }
                });
            }
        }
        const containsSchema = asSchema2(schema5.contains);
        if (containsSchema) {
            const doesContain = node2.items.some((item)=>{
                const itemValidationResult = new ValidationResult2(isKubernetes);
                validate2(item, containsSchema, schema5, itemValidationResult, NoOpSchemaCollector2.instance, options);
                return !itemValidationResult.hasProblems();
            });
            if (!doesContain) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: schema5.errorMessage || localize7("requiredItemMissingWarning", "Array does not contain required item."),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        if (isNumber2(schema5.minItems) && node2.items.length < schema5.minItems) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("minItemsWarning", "Array has too few items. Expected {0} or more.", schema5.minItems),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        if (isNumber2(schema5.maxItems) && node2.items.length > schema5.maxItems) {
            validationResult2.problems.push({
                location: {
                    offset: node2.offset,
                    length: node2.length
                },
                severity: DiagnosticSeverity.Warning,
                message: localize7("maxItemsWarning", "Array has too many items. Expected {0} or fewer.", schema5.maxItems),
                source: getSchemaSource(schema5, originalSchema),
                schemaUri: getSchemaUri(schema5, originalSchema)
            });
        }
        if (schema5.uniqueItems === true) {
            const values = getNodeValue4(node2);
            const duplicates = values.some((value1, index)=>{
                return index !== values.lastIndexOf(value1);
            });
            if (duplicates) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("uniqueItemsWarning", "Array has duplicate items."),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
    }
    function _validateObjectNode(node2, schema5, validationResult2, matchingSchemas2) {
        var _a;
        const seenKeys = /* @__PURE__ */ Object.create(null);
        const unprocessedProperties = [];
        const unprocessedNodes = [
            ...node2.properties
        ];
        while(unprocessedNodes.length > 0){
            const propertyNode = unprocessedNodes.pop();
            const key = propertyNode.keyNode.value;
            if (key === "<<" && propertyNode.valueNode) {
                switch(propertyNode.valueNode.type){
                    case "object":
                        {
                            unprocessedNodes.push(...propertyNode.valueNode["properties"]);
                            break;
                        }
                    case "array":
                        {
                            propertyNode.valueNode["items"].forEach((sequenceNode)=>{
                                if (sequenceNode && isIterable(sequenceNode["properties"])) {
                                    unprocessedNodes.push(...sequenceNode["properties"]);
                                }
                            });
                            break;
                        }
                    default:
                        {
                            break;
                        }
                }
            } else {
                seenKeys[key] = propertyNode.valueNode;
                unprocessedProperties.push(key);
            }
        }
        if (Array.isArray(schema5.required)) {
            for (const propertyName of schema5.required){
                if (seenKeys[propertyName] === void 0) {
                    const keyNode = node2.parent && node2.parent.type === "property" && node2.parent.keyNode;
                    const location = keyNode ? {
                        offset: keyNode.offset,
                        length: keyNode.length
                    } : {
                        offset: node2.offset,
                        length: 1
                    };
                    validationResult2.problems.push({
                        location,
                        severity: DiagnosticSeverity.Warning,
                        message: getWarningMessage(ProblemType.missingRequiredPropWarning, [
                            propertyName
                        ]),
                        source: getSchemaSource(schema5, originalSchema),
                        schemaUri: getSchemaUri(schema5, originalSchema),
                        problemArgs: [
                            propertyName
                        ],
                        problemType: ProblemType.missingRequiredPropWarning
                    });
                }
            }
        }
        const propertyProcessed = (prop)=>{
            let index = unprocessedProperties.indexOf(prop);
            while(index >= 0){
                unprocessedProperties.splice(index, 1);
                index = unprocessedProperties.indexOf(prop);
            }
        };
        if (schema5.properties) {
            for (const propertyName of Object.keys(schema5.properties)){
                propertyProcessed(propertyName);
                const propertySchema = schema5.properties[propertyName];
                const child = seenKeys[propertyName];
                if (child) {
                    if (isBoolean2(propertySchema)) {
                        if (!propertySchema) {
                            const propertyNode = child.parent;
                            validationResult2.problems.push({
                                location: {
                                    offset: propertyNode.keyNode.offset,
                                    length: propertyNode.keyNode.length
                                },
                                severity: DiagnosticSeverity.Warning,
                                message: schema5.errorMessage || localize7("DisallowedExtraPropWarning", MSG_PROPERTY_NOT_ALLOWED, propertyName),
                                source: getSchemaSource(schema5, originalSchema),
                                schemaUri: getSchemaUri(schema5, originalSchema)
                            });
                        } else {
                            validationResult2.propertiesMatches++;
                            validationResult2.propertiesValueMatches++;
                        }
                    } else {
                        propertySchema.url = (_a = schema5.url) != null ? _a : originalSchema.url;
                        const propertyValidationResult = new ValidationResult2(isKubernetes);
                        validate2(child, propertySchema, schema5, propertyValidationResult, matchingSchemas2, options);
                        validationResult2.mergePropertyMatch(propertyValidationResult);
                        validationResult2.mergeEnumValues(propertyValidationResult);
                    }
                }
            }
        }
        if (schema5.patternProperties) {
            for (const propertyPattern of Object.keys(schema5.patternProperties)){
                const regex = safeCreateUnicodeRegExp(propertyPattern);
                for (const propertyName of unprocessedProperties.slice(0)){
                    if (regex.test(propertyName)) {
                        propertyProcessed(propertyName);
                        const child = seenKeys[propertyName];
                        if (child) {
                            const propertySchema = schema5.patternProperties[propertyPattern];
                            if (isBoolean2(propertySchema)) {
                                if (!propertySchema) {
                                    const propertyNode = child.parent;
                                    validationResult2.problems.push({
                                        location: {
                                            offset: propertyNode.keyNode.offset,
                                            length: propertyNode.keyNode.length
                                        },
                                        severity: DiagnosticSeverity.Warning,
                                        message: schema5.errorMessage || localize7("DisallowedExtraPropWarning", MSG_PROPERTY_NOT_ALLOWED, propertyName),
                                        source: getSchemaSource(schema5, originalSchema),
                                        schemaUri: getSchemaUri(schema5, originalSchema)
                                    });
                                } else {
                                    validationResult2.propertiesMatches++;
                                    validationResult2.propertiesValueMatches++;
                                }
                            } else {
                                const propertyValidationResult = new ValidationResult2(isKubernetes);
                                validate2(child, propertySchema, schema5, propertyValidationResult, matchingSchemas2, options);
                                validationResult2.mergePropertyMatch(propertyValidationResult);
                                validationResult2.mergeEnumValues(propertyValidationResult);
                            }
                        }
                    }
                }
            }
        }
        if (typeof schema5.additionalProperties === "object") {
            for (const propertyName of unprocessedProperties){
                const child = seenKeys[propertyName];
                if (child) {
                    const propertyValidationResult = new ValidationResult2(isKubernetes);
                    validate2(child, schema5.additionalProperties, schema5, propertyValidationResult, matchingSchemas2, options);
                    validationResult2.mergePropertyMatch(propertyValidationResult);
                    validationResult2.mergeEnumValues(propertyValidationResult);
                }
            }
        } else if (schema5.additionalProperties === false || schema5.type === "object" && schema5.additionalProperties === void 0 && options.disableAdditionalProperties === true) {
            if (unprocessedProperties.length > 0) {
                const possibleProperties = schema5.properties && Object.keys(schema5.properties).filter((prop)=>!seenKeys[prop]);
                for (const propertyName of unprocessedProperties){
                    const child = seenKeys[propertyName];
                    if (child) {
                        let propertyNode = null;
                        if (child.type !== "property") {
                            propertyNode = child.parent;
                            if (propertyNode.type === "object") {
                                propertyNode = propertyNode.properties[0];
                            }
                        } else {
                            propertyNode = child;
                        }
                        const problem = {
                            location: {
                                offset: propertyNode.keyNode.offset,
                                length: propertyNode.keyNode.length
                            },
                            severity: DiagnosticSeverity.Warning,
                            code: ErrorCode.PropertyExpected,
                            message: schema5.errorMessage || localize7("DisallowedExtraPropWarning", MSG_PROPERTY_NOT_ALLOWED, propertyName),
                            source: getSchemaSource(schema5, originalSchema),
                            schemaUri: getSchemaUri(schema5, originalSchema)
                        };
                        if (possibleProperties == null ? void 0 : possibleProperties.length) {
                            problem.data = {
                                properties: possibleProperties
                            };
                        }
                        validationResult2.problems.push(problem);
                    }
                }
            }
        }
        if (isNumber2(schema5.maxProperties)) {
            if (node2.properties.length > schema5.maxProperties) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("MaxPropWarning", "Object has more properties than limit of {0}.", schema5.maxProperties),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        if (isNumber2(schema5.minProperties)) {
            if (node2.properties.length < schema5.minProperties) {
                validationResult2.problems.push({
                    location: {
                        offset: node2.offset,
                        length: node2.length
                    },
                    severity: DiagnosticSeverity.Warning,
                    message: localize7("MinPropWarning", "Object has fewer properties than the required number of {0}", schema5.minProperties),
                    source: getSchemaSource(schema5, originalSchema),
                    schemaUri: getSchemaUri(schema5, originalSchema)
                });
            }
        }
        if (schema5.dependencies) {
            for (const key of Object.keys(schema5.dependencies)){
                const prop = seenKeys[key];
                if (prop) {
                    const propertyDep = schema5.dependencies[key];
                    if (Array.isArray(propertyDep)) {
                        for (const requiredProp of propertyDep){
                            if (!seenKeys[requiredProp]) {
                                validationResult2.problems.push({
                                    location: {
                                        offset: node2.offset,
                                        length: node2.length
                                    },
                                    severity: DiagnosticSeverity.Warning,
                                    message: localize7("RequiredDependentPropWarning", "Object is missing property {0} required by property {1}.", requiredProp, key),
                                    source: getSchemaSource(schema5, originalSchema),
                                    schemaUri: getSchemaUri(schema5, originalSchema)
                                });
                            } else {
                                validationResult2.propertiesValueMatches++;
                            }
                        }
                    } else {
                        const propertySchema = asSchema2(propertyDep);
                        if (propertySchema) {
                            const propertyValidationResult = new ValidationResult2(isKubernetes);
                            validate2(node2, propertySchema, schema5, propertyValidationResult, matchingSchemas2, options);
                            validationResult2.mergePropertyMatch(propertyValidationResult);
                            validationResult2.mergeEnumValues(propertyValidationResult);
                        }
                    }
                }
            }
        }
        const propertyNames = asSchema2(schema5.propertyNames);
        if (propertyNames) {
            for (const f2 of node2.properties){
                const key = f2.keyNode;
                if (key) {
                    validate2(key, propertyNames, schema5, validationResult2, NoOpSchemaCollector2.instance, options);
                }
            }
        }
    }
    function alternativeComparison(subValidationResult, bestMatch, subSchema, subMatchingSchemas) {
        const compareResult = subValidationResult.compareKubernetes(bestMatch.validationResult);
        if (compareResult > 0) {
            bestMatch = {
                schema: subSchema,
                validationResult: subValidationResult,
                matchingSchemas: subMatchingSchemas
            };
        } else if (compareResult === 0) {
            bestMatch.matchingSchemas.merge(subMatchingSchemas);
            bestMatch.validationResult.mergeEnumValues(subValidationResult);
        }
        return bestMatch;
    }
    function genericComparison(node2, maxOneMatch, subValidationResult, bestMatch, subSchema, subMatchingSchemas) {
        if (!maxOneMatch && !subValidationResult.hasProblems() && (!bestMatch.validationResult.hasProblems() || callFromAutoComplete)) {
            bestMatch.matchingSchemas.merge(subMatchingSchemas);
            bestMatch.validationResult.propertiesMatches += subValidationResult.propertiesMatches;
            bestMatch.validationResult.propertiesValueMatches += subValidationResult.propertiesValueMatches;
        } else {
            const compareResult = subValidationResult.compareGeneric(bestMatch.validationResult);
            if (compareResult > 0 || compareResult === 0 && maxOneMatch && bestMatch.schema.type === "object" && node2.type !== "null" && node2.type !== bestMatch.schema.type) {
                bestMatch = {
                    schema: subSchema,
                    validationResult: subValidationResult,
                    matchingSchemas: subMatchingSchemas
                };
            } else if (compareResult === 0) {
                bestMatch.matchingSchemas.merge(subMatchingSchemas);
                bestMatch.validationResult.mergeEnumValues(subValidationResult);
                bestMatch.validationResult.mergeWarningGeneric(subValidationResult, [
                    ProblemType.missingRequiredPropWarning,
                    ProblemType.typeMismatchWarning,
                    ProblemType.constWarning
                ]);
            }
        }
        return bestMatch;
    }
}
function getSchemaSource(schema4, originalSchema) {
    var _a;
    if (schema4) {
        let label;
        if (schema4.title) {
            label = schema4.title;
        } else if (schema4.closestTitle) {
            label = schema4.closestTitle;
        } else if (originalSchema.closestTitle) {
            label = originalSchema.closestTitle;
        } else {
            const uriString = (_a = schema4.url) != null ? _a : originalSchema.url;
            if (uriString) {
                const url = yaml_service_URI.parse(uriString);
                if (url.scheme === "file") {
                    label = url.fsPath;
                }
                label = url.toString();
            }
        }
        if (label) {
            return `${YAML_SCHEMA_PREFIX}${label}`;
        }
    }
    return YAML_SOURCE;
}
function getSchemaUri(schema4, originalSchema) {
    var _a;
    const uriString = (_a = schema4.url) != null ? _a : originalSchema.url;
    return uriString ? [
        uriString
    ] : [];
}
function getWarningMessage(problemType, args) {
    return localize7(problemType, ProblemTypeMessages[problemType], args.join(" | "));
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/ast-converter.js
var maxRefCount = 1e3;
var refDepth = 0;
var seenAlias = /* @__PURE__ */ new Set();
function convertAST(parent, node, doc, lineCounter) {
    if (!parent) {
        refDepth = 0;
    }
    if (!node) {
        return null;
    }
    if (isMap(node)) {
        return convertMap(node, parent, doc, lineCounter);
    }
    if (isPair(node)) {
        return convertPair(node, parent, doc, lineCounter);
    }
    if (isSeq(node)) {
        return convertSeq(node, parent, doc, lineCounter);
    }
    if (isScalar(node)) {
        return convertScalar(node, parent);
    }
    if (isAlias(node) && !seenAlias.has(node) && refDepth < maxRefCount) {
        seenAlias.add(node);
        const converted = convertAlias(node, parent, doc, lineCounter);
        seenAlias.delete(node);
        return converted;
    } else {
        return;
    }
}
function convertMap(node, parent, doc, lineCounter) {
    let range;
    if (node.flow && !node.range) {
        range = collectFlowMapRange(node);
    } else {
        range = node.range;
    }
    const result = new ObjectASTNodeImpl2(parent, node, ...toFixedOffsetLength(range, lineCounter));
    for (const it of node.items){
        if (isPair(it)) {
            result.properties.push(convertAST(result, it, doc, lineCounter));
        }
    }
    return result;
}
function convertPair(node, parent, doc, lineCounter) {
    const keyNode = node.key;
    const valueNode = node.value;
    const rangeStart = keyNode.range[0];
    let rangeEnd = keyNode.range[1];
    let nodeEnd = keyNode.range[2];
    if (valueNode) {
        rangeEnd = valueNode.range[1];
        nodeEnd = valueNode.range[2];
    }
    const result = new PropertyASTNodeImpl2(parent, node, ...toFixedOffsetLength([
        rangeStart,
        rangeEnd,
        nodeEnd
    ], lineCounter));
    if (isAlias(keyNode)) {
        const keyAlias = new StringASTNodeImpl2(parent, keyNode, ...toOffsetLength(keyNode.range));
        keyAlias.value = keyNode.source;
        result.keyNode = keyAlias;
    } else {
        result.keyNode = convertAST(result, keyNode, doc, lineCounter);
    }
    result.valueNode = convertAST(result, valueNode, doc, lineCounter);
    return result;
}
function convertSeq(node, parent, doc, lineCounter) {
    const result = new ArrayASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
    for (const it of node.items){
        if (isNode(it)) {
            const convertedNode = convertAST(result, it, doc, lineCounter);
            if (convertedNode) {
                result.children.push(convertedNode);
            }
        }
    }
    return result;
}
function convertScalar(node, parent) {
    if (node.value === null) {
        return new NullASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
    }
    switch(typeof node.value){
        case "string":
            {
                const result = new StringASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
                result.value = node.value;
                return result;
            }
        case "boolean":
            return new BooleanASTNodeImpl2(parent, node, node.value, ...toOffsetLength(node.range));
        case "number":
            {
                const result = new NumberASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
                result.value = node.value;
                result.isInteger = Number.isInteger(result.value);
                return result;
            }
        default:
            {
                const result = new StringASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
                result.value = node.source;
                return result;
            }
    }
}
function convertAlias(node, parent, doc, lineCounter) {
    refDepth++;
    const resolvedNode = node.resolve(doc);
    if (resolvedNode) {
        return convertAST(parent, resolvedNode, doc, lineCounter);
    } else {
        const resultNode = new StringASTNodeImpl2(parent, node, ...toOffsetLength(node.range));
        resultNode.value = node.source;
        return resultNode;
    }
}
function toOffsetLength(range) {
    return [
        range[0],
        range[1] - range[0]
    ];
}
function toFixedOffsetLength(range, lineCounter) {
    const start = lineCounter.linePos(range[0]);
    const end = lineCounter.linePos(range[1]);
    const result = [
        range[0],
        range[1] - range[0]
    ];
    if (start.line !== end.line && (lineCounter.lineStarts.length !== end.line || end.col === 1)) {
        result[1]--;
    }
    return result;
}
function collectFlowMapRange(node) {
    let start = Number.MAX_SAFE_INTEGER;
    let end = 0;
    for (const it of node.items){
        if (isPair(it)) {
            if (isNode(it.key)) {
                if (it.key.range && it.key.range[0] <= start) {
                    start = it.key.range[0];
                }
            }
            if (isNode(it.value)) {
                if (it.value.range && it.value.range[2] >= end) {
                    end = it.value.range[2];
                }
            }
        }
    }
    return [
        start,
        end,
        end
    ];
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/astUtils.js
function getParent(doc, nodeToFind) {
    let parentNode;
    visit2(doc, (_2, node, path5)=>{
        if (node === nodeToFind) {
            parentNode = path5[path5.length - 1];
            return visit2.BREAK;
        }
    });
    if (isDocument(parentNode)) {
        return void 0;
    }
    return parentNode;
}
function isMapContainsEmptyPair(map2) {
    if (map2.items.length > 1) {
        return false;
    }
    const pair = map2.items[0];
    return isScalar(pair.key) && isScalar(pair.value) && pair.key.value === "" && !pair.value.value;
}
function indexOf(seq2, item) {
    for (const [i, obj] of seq2.items.entries()){
        if (item === obj) {
            return i;
        }
    }
    return void 0;
}
function isInComment(tokens, offset) {
    let inComment = false;
    for (const token of tokens){
        if (token.type === "document") {
            _visit2([], token, (item)=>{
                var _a;
                if (isCollectionItem(item) && ((_a = item.value) == null ? void 0 : _a.type) === "comment") {
                    if (token.offset <= offset && item.value.source.length + item.value.offset >= offset) {
                        inComment = true;
                        return visit2.BREAK;
                    }
                } else if (item.type === "comment" && item.offset <= offset && item.offset + item.source.length >= offset) {
                    inComment = true;
                    return visit2.BREAK;
                }
            });
        } else if (token.type === "comment") {
            if (token.offset <= offset && token.source.length + token.offset >= offset) {
                return true;
            }
        }
        if (inComment) {
            break;
        }
    }
    return inComment;
}
function isCollectionItem(token) {
    return token["start"] !== void 0;
}
function _visit2(path5, item, visitor) {
    let ctrl = visitor(item, path5);
    if (typeof ctrl === "symbol") return ctrl;
    for (const field of [
        "key",
        "value"
    ]){
        const token2 = item[field];
        if (token2 && "items" in token2) {
            for(let i = 0; i < token2.items.length; ++i){
                const ci = _visit2(Object.freeze(path5.concat([
                    [
                        field,
                        i
                    ]
                ])), token2.items[i], visitor);
                if (typeof ci === "number") i = ci - 1;
                else if (ci === visit2.BREAK) return visit2.BREAK;
                else if (ci === visit2.REMOVE) {
                    token2.items.splice(i, 1);
                    i -= 1;
                }
            }
            if (typeof ctrl === "function" && field === "key") ctrl = ctrl(item, path5);
        }
    }
    const token = item["sep"];
    if (token) {
        for(let i = 0; i < token.length; ++i){
            const ci = _visit2(Object.freeze(path5), token[i], visitor);
            if (typeof ci === "number") i = ci - 1;
            else if (ci === visit2.BREAK) return visit2.BREAK;
            else if (ci === visit2.REMOVE) {
                token.items.splice(i, 1);
                i -= 1;
            }
        }
    }
    return typeof ctrl === "function" ? ctrl(item, path5) : ctrl;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/yaml-documents.js
var SingleYAMLDocument = class _SingleYAMLDocument extends JSONDocument2 {
    /**
   * Create a deep copy of this document
   */ clone() {
        const copy = new _SingleYAMLDocument(this.lineCounter);
        copy.isKubernetes = this.isKubernetes;
        copy.disableAdditionalProperties = this.disableAdditionalProperties;
        copy.uri = this.uri;
        copy.currentDocIndex = this.currentDocIndex;
        copy._lineComments = this.lineComments.slice();
        copy.internalDocument = this._internalDocument.clone();
        return copy;
    }
    collectLineComments() {
        this._lineComments = [];
        if (this._internalDocument.commentBefore) {
            const comments = this._internalDocument.commentBefore.split("\n");
            comments.forEach((comment)=>this._lineComments.push(`#${comment}`));
        }
        visit2(this.internalDocument, (_key, node)=>{
            if (node == null ? void 0 : node.commentBefore) {
                const comments = node == null ? void 0 : node.commentBefore.split("\n");
                comments.forEach((comment)=>this._lineComments.push(`#${comment}`));
            }
            if (node == null ? void 0 : node.comment) {
                this._lineComments.push(`#${node.comment}`);
            }
        });
        if (this._internalDocument.comment) {
            this._lineComments.push(`#${this._internalDocument.comment}`);
        }
    }
    /**
   * Updates the internal AST tree of the object
   * from the internal node. This is call whenever the
   * internalDocument is set but also can be called to
   * reflect any changes on the underlying document
   * without setting the internalDocument explicitly.
   */ updateFromInternalDocument() {
        this.root = convertAST(null, this._internalDocument.contents, this._internalDocument, this.lineCounter);
    }
    set internalDocument(document) {
        this._internalDocument = document;
        this.updateFromInternalDocument();
    }
    get internalDocument() {
        return this._internalDocument;
    }
    get lineComments() {
        if (!this._lineComments) {
            this.collectLineComments();
        }
        return this._lineComments;
    }
    set lineComments(val) {
        this._lineComments = val;
    }
    get errors() {
        return this.internalDocument.errors.map(YAMLErrorToYamlDocDiagnostics);
    }
    get warnings() {
        return this.internalDocument.warnings.map(YAMLErrorToYamlDocDiagnostics);
    }
    getNodeFromPosition(positionOffset, textBuffer, configuredIndentation) {
        const position = textBuffer.getPosition(positionOffset);
        const lineContent = textBuffer.getLineContent(position.line);
        if (lineContent.trim().length === 0) {
            return [
                this.findClosestNode(positionOffset, textBuffer, configuredIndentation),
                true
            ];
        }
        const textAfterPosition = lineContent.substring(position.character);
        const spacesAfterPositionMatch = textAfterPosition.match(/^([ ]+)\n?$/);
        const areOnlySpacesAfterPosition = !!spacesAfterPositionMatch;
        const countOfSpacesAfterPosition = spacesAfterPositionMatch == null ? void 0 : spacesAfterPositionMatch[1].length;
        let closestNode;
        visit2(this.internalDocument, (key, node)=>{
            if (!node) {
                return;
            }
            const range = node.range;
            if (!range) {
                return;
            }
            const isNullNodeOnTheLine = ()=>areOnlySpacesAfterPosition && positionOffset + countOfSpacesAfterPosition === range[2] && isScalar(node) && node.value === null;
            if (range[0] <= positionOffset && range[1] >= positionOffset || isNullNodeOnTheLine()) {
                closestNode = node;
            } else {
                return visit2.SKIP;
            }
        });
        return [
            closestNode,
            false
        ];
    }
    findClosestNode(offset, textBuffer, configuredIndentation) {
        let offsetDiff = this.internalDocument.range[2];
        let maxOffset = this.internalDocument.range[0];
        let closestNode;
        visit2(this.internalDocument, (key, node)=>{
            if (!node) {
                return;
            }
            const range = node.range;
            if (!range) {
                return;
            }
            const diff = range[1] - offset;
            if (maxOffset <= range[0] && diff <= 0 && Math.abs(diff) <= offsetDiff) {
                offsetDiff = Math.abs(diff);
                maxOffset = range[0];
                closestNode = node;
            }
        });
        const position = textBuffer.getPosition(offset);
        const lineContent = textBuffer.getLineContent(position.line);
        const indentation = getIndentation(lineContent, position.character);
        if (isScalar(closestNode) && closestNode.value === null) {
            return closestNode;
        }
        if (indentation === position.character) {
            closestNode = this.getProperParentByIndentation(indentation, closestNode, textBuffer, "", configuredIndentation);
        }
        return closestNode;
    }
    getProperParentByIndentation(indentation, node, textBuffer, currentLine, configuredIndentation, rootParent) {
        if (!node) {
            return this.internalDocument.contents;
        }
        configuredIndentation = !configuredIndentation ? 2 : configuredIndentation;
        if (isNode(node) && node.range) {
            const position = textBuffer.getPosition(node.range[0]);
            const lineContent = textBuffer.getLineContent(position.line);
            currentLine = currentLine === "" ? lineContent.trim() : currentLine;
            if (currentLine.startsWith("-") && indentation === configuredIndentation && currentLine === lineContent.trim()) {
                position.character += indentation;
            }
            if (position.character > indentation && position.character > 0) {
                const parent = this.getParent(node);
                if (parent) {
                    return this.getProperParentByIndentation(indentation, parent, textBuffer, currentLine, configuredIndentation, rootParent);
                }
            } else if (position.character < indentation) {
                const parent = this.getParent(node);
                if (isPair(parent) && isNode(parent.value)) {
                    return parent.value;
                } else if (isPair(rootParent) && isNode(rootParent.value)) {
                    return rootParent.value;
                }
            } else {
                return node;
            }
        } else if (isPair(node)) {
            rootParent = node;
            const parent = this.getParent(node);
            return this.getProperParentByIndentation(indentation, parent, textBuffer, currentLine, configuredIndentation, rootParent);
        }
        return node;
    }
    getParent(node) {
        return getParent(this.internalDocument, node);
    }
    constructor(lineCounter){
        super(null, []);
        this.lineCounter = lineCounter;
    }
};
var YAMLDocument = class {
    constructor(documents, tokens){
        this.documents = documents;
        this.tokens = tokens;
        this.errors = [];
        this.warnings = [];
    }
};
var YamlDocuments = class {
    /**
   * Get cached YAMLDocument
   * @param document TextDocument to parse
   * @param parserOptions YAML parserOptions
   * @param addRootObject if true and document is empty add empty object {} to force schema usage
   * @returns the YAMLDocument
   */ getYamlDocument(document, parserOptions, addRootObject = false) {
        this.ensureCache(document, parserOptions != null ? parserOptions : defaultOptions, addRootObject);
        return this.cache.get(document.uri).document;
    }
    /**
   * For test purpose only!
   */ clear() {
        this.cache.clear();
    }
    ensureCache(document, parserOptions, addRootObject) {
        const key = document.uri;
        if (!this.cache.has(key)) {
            this.cache.set(key, {
                version: -1,
                document: new YAMLDocument([], []),
                parserOptions: defaultOptions
            });
        }
        const cacheEntry = this.cache.get(key);
        if (cacheEntry.version !== document.version || parserOptions.customTags && !isArrayEqual(cacheEntry.parserOptions.customTags, parserOptions.customTags)) {
            let text = document.getText();
            if (addRootObject && !/\S/.test(text)) {
                text = `{${text}}`;
            }
            const doc = parse5(text, parserOptions, document);
            cacheEntry.document = doc;
            cacheEntry.version = document.version;
            cacheEntry.parserOptions = parserOptions;
        }
    }
    constructor(){
        this.cache = /* @__PURE__ */ new Map();
    }
};
var yamlDocumentsCache = new YamlDocuments();
function YAMLErrorToYamlDocDiagnostics(error) {
    return {
        message: error.message,
        location: {
            start: error.pos[0],
            end: error.pos[1],
            toLineEnd: true
        },
        severity: 1,
        code: ErrorCode.Undefined
    };
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/custom-tag-provider.js
var CommonTagImpl = class {
    get collection() {
        if (this.type === "mapping") {
            return "map";
        }
        if (this.type === "sequence") {
            return "seq";
        }
        return void 0;
    }
    resolve(value1) {
        if (isMap(value1) && this.type === "mapping") {
            return value1;
        }
        if (isSeq(value1) && this.type === "sequence") {
            return value1;
        }
        if (typeof value1 === "string" && this.type === "scalar") {
            return value1;
        }
    }
    constructor(tag, type){
        this.tag = tag;
        this.type = type;
    }
};
var IncludeTag = class {
    resolve(value1, onError) {
        if (value1 && value1.length > 0 && value1.trim()) {
            return value1;
        }
        onError("!include without value");
    }
    constructor(){
        this.tag = "!include";
        this.type = "scalar";
    }
};
function getCustomTags(customTags) {
    const tags = [];
    const filteredTags = filterInvalidCustomTags(customTags);
    for (const tag of filteredTags){
        const typeInfo = tag.split(" ");
        const tagName = typeInfo[0];
        const tagType = typeInfo[1] && typeInfo[1].toLowerCase() || "scalar";
        tags.push(new CommonTagImpl(tagName, tagType));
    }
    tags.push(new IncludeTag());
    return tags;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/textBuffer.js
init_main();
var TextBuffer = class {
    getLineCount() {
        return this.doc.lineCount;
    }
    getLineLength(lineNumber) {
        const lineOffsets = this.doc.getLineOffsets();
        if (lineNumber >= lineOffsets.length) {
            return this.doc.getText().length;
        } else if (lineNumber < 0) {
            return 0;
        }
        const nextLineOffset = lineNumber + 1 < lineOffsets.length ? lineOffsets[lineNumber + 1] : this.doc.getText().length;
        return nextLineOffset - lineOffsets[lineNumber];
    }
    getLineContent(lineNumber) {
        const lineOffsets = this.doc.getLineOffsets();
        if (lineNumber >= lineOffsets.length) {
            return this.doc.getText();
        } else if (lineNumber < 0) {
            return "";
        }
        const nextLineOffset = lineNumber + 1 < lineOffsets.length ? lineOffsets[lineNumber + 1] : this.doc.getText().length;
        return this.doc.getText().substring(lineOffsets[lineNumber], nextLineOffset);
    }
    getLineCharCode(lineNumber, index) {
        return this.doc.getText(Range.create(lineNumber - 1, index, lineNumber - 1, index + 1)).charCodeAt(0);
    }
    getText(range) {
        return this.doc.getText(range);
    }
    getPosition(offest) {
        return this.doc.positionAt(offest);
    }
    constructor(doc){
        this.doc = doc;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/yamlParser07.js
var defaultOptions = {
    customTags: [],
    yamlVersion: "1.2"
};
function parse5(text, parserOptions = defaultOptions, document) {
    var _a;
    const options = {
        strict: false,
        customTags: getCustomTags(parserOptions.customTags),
        version: (_a = parserOptions.yamlVersion) != null ? _a : defaultOptions.yamlVersion,
        keepSourceTokens: true
    };
    const composer = new Composer(options);
    const lineCounter = new LineCounter();
    let isLastLineEmpty = false;
    if (document) {
        const textBuffer = new TextBuffer(document);
        const position = textBuffer.getPosition(text.length);
        const lineContent = textBuffer.getLineContent(position.line);
        isLastLineEmpty = lineContent.trim().length === 0;
    }
    const parser2 = isLastLineEmpty ? new Parser() : new Parser(lineCounter.addNewLine);
    const tokens = parser2.parse(text);
    const tokensArr = Array.from(tokens);
    const docs = composer.compose(tokensArr, true, text.length);
    const yamlDocs = Array.from(docs, (doc)=>parsedDocToSingleYAMLDocument(doc, lineCounter));
    return new YAMLDocument(yamlDocs, tokensArr);
}
function parsedDocToSingleYAMLDocument(parsedDoc, lineCounter) {
    const syd = new SingleYAMLDocument(lineCounter);
    syd.internalDocument = parsedDoc;
    return syd;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/modelineUtil.js
function getSchemaFromModeline(doc) {
    if (doc instanceof SingleYAMLDocument) {
        const yamlLanguageServerModeline = doc.lineComments.find((lineComment2)=>{
            return isModeline(lineComment2);
        });
        if (yamlLanguageServerModeline != void 0) {
            const schemaMatchs = yamlLanguageServerModeline.match(/\$schema=\S+/g);
            if (schemaMatchs !== null && schemaMatchs.length >= 1) {
                if (schemaMatchs.length >= 2) {
                    console.log("Several $schema attributes have been found on the yaml-language-server modeline. The first one will be picked.");
                }
                return schemaMatchs[0].substring("$schema=".length);
            }
        }
    }
    return void 0;
}
function isModeline(lineText) {
    const matchModeline = lineText.match(/^#\s+yaml-language-server\s*:/g);
    return matchModeline !== null && matchModeline.length === 1;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlSchemaService.js
var import_ajv = __toESM(require_ajv());
var import__ = __toESM(require__());
var import__2 = __toESM(require__2());
var import_ajv_draft_04 = __toESM(require_dist());
var ajv = new import_ajv.default();
var ajv04 = new import_ajv_draft_04.default();
var ajv2019 = new import__.default();
var ajv2020 = new import__2.default();
var localize8 = loadMessageBundle();
var MODIFICATION_ACTIONS;
(function(MODIFICATION_ACTIONS2) {
    MODIFICATION_ACTIONS2[MODIFICATION_ACTIONS2["delete"] = 0] = "delete";
    MODIFICATION_ACTIONS2[MODIFICATION_ACTIONS2["add"] = 1] = "add";
    MODIFICATION_ACTIONS2[MODIFICATION_ACTIONS2["deleteAll"] = 2] = "deleteAll";
})(MODIFICATION_ACTIONS || (MODIFICATION_ACTIONS = {}));
var FilePatternAssociation2 = class {
    addSchema(id) {
        this.schemas.push(id);
    }
    matchesPattern(fileName) {
        return this.patternRegExp && this.patternRegExp.test(fileName);
    }
    getSchemas() {
        return this.schemas;
    }
    constructor(pattern){
        try {
            this.patternRegExp = new RegExp(convertSimple2RegExpPattern(pattern) + "$");
        } catch (e) {
            this.patternRegExp = null;
        }
        this.schemas = [];
    }
};
var YAMLSchemaService = class extends JSONSchemaService {
    registerCustomSchemaProvider(customSchemaProvider) {
        this.customSchemaProvider = customSchemaProvider;
    }
    getAllSchemas() {
        const result = [];
        const schemaUris = /* @__PURE__ */ new Set();
        for (const filePattern of this.filePatternAssociations){
            const schemaUri = filePattern.uris[0];
            if (schemaUris.has(schemaUri)) {
                continue;
            }
            schemaUris.add(schemaUri);
            const schemaHandle = {
                uri: schemaUri,
                fromStore: false,
                usedForCurrentFile: false
            };
            if (this.schemaUriToNameAndDescription.has(schemaUri)) {
                const { name, description, versions } = this.schemaUriToNameAndDescription.get(schemaUri);
                schemaHandle.name = name;
                schemaHandle.description = description;
                schemaHandle.fromStore = true;
                schemaHandle.versions = versions;
            }
            result.push(schemaHandle);
        }
        return result;
    }
    async resolveSchemaContent(schemaToResolve, schemaURL, dependencies) {
        const resolveErrors = schemaToResolve.errors.slice(0);
        let schema4 = schemaToResolve.schema;
        const contextService = this.contextService;
        let validationErrors = [];
        switch(this.normalizeId(schema4.$schema)){
            case ajv04.defaultMeta():
                {
                    if (!ajv04.validateSchema(schema4)) {
                        validationErrors = validationErrors.concat(ajv04.errors);
                    }
                    break;
                }
            case ajv2019.defaultMeta():
                {
                    if (!ajv2019.validateSchema(schema4)) {
                        validationErrors = validationErrors.concat(ajv2019.errors);
                    }
                    break;
                }
            case ajv2020.defaultMeta():
                {
                    if (!ajv2020.validateSchema(schema4)) {
                        validationErrors = validationErrors.concat(ajv2020.errors);
                    }
                    break;
                }
            default:
                if (!ajv.validateSchema(schema4)) {
                    validationErrors = validationErrors.concat(ajv.errors);
                }
                break;
        }
        if (validationErrors.length > 0) {
            const errs = [];
            for (const err of validationErrors){
                errs.push(`${err.instancePath} : ${err.message}`);
            }
            resolveErrors.push(`Schema '${getSchemaTitle(schemaToResolve.schema, schemaURL)}' is not valid:
${errs.join("\n")}`);
        }
        const findSection = (schema5, path5)=>{
            if (!path5) {
                return schema5;
            }
            let current = schema5;
            if (path5[0] === "/") {
                path5 = path5.substr(1);
            }
            path5.split("/").some((part)=>{
                current = current[part];
                return !current;
            });
            return current;
        };
        const merge = (target, sourceRoot, sourceURI, path5)=>{
            const section = findSection(sourceRoot, path5);
            if (section) {
                for(const key in section){
                    if (Object.prototype.hasOwnProperty.call(section, key) && !Object.prototype.hasOwnProperty.call(target, key)) {
                        target[key] = section[key];
                    }
                }
            } else {
                resolveErrors.push(localize8("json.schema.invalidref", "$ref '{0}' in '{1}' can not be resolved.", path5, sourceURI));
            }
        };
        const resolveExternalLink = (node, uri, linkPath, parentSchemaURL, parentSchemaDependencies)=>{
            if (contextService && !/^\w+:\/\/.*/.test(uri)) {
                uri = contextService.resolveRelativePath(uri, parentSchemaURL);
            }
            uri = this.normalizeId(uri);
            const referencedHandle = this.getOrAddSchemaHandle(uri);
            return referencedHandle.getUnresolvedSchema().then((unresolvedSchema)=>{
                parentSchemaDependencies[uri] = true;
                if (unresolvedSchema.errors.length) {
                    const loc = linkPath ? uri + "#" + linkPath : uri;
                    resolveErrors.push(localize8("json.schema.problemloadingref", "Problems loading reference '{0}': {1}", loc, unresolvedSchema.errors[0]));
                }
                merge(node, unresolvedSchema.schema, uri, linkPath);
                node.url = uri;
                return resolveRefs(node, unresolvedSchema.schema, uri, referencedHandle.dependencies);
            });
        };
        const resolveRefs = async (node, parentSchema, parentSchemaURL, parentSchemaDependencies)=>{
            if (!node || typeof node !== "object") {
                return null;
            }
            const toWalk = [
                node
            ];
            const seen = /* @__PURE__ */ new Set();
            const openPromises = [];
            const collectEntries = (...entries)=>{
                for (const entry of entries){
                    if (typeof entry === "object") {
                        toWalk.push(entry);
                    }
                }
            };
            const collectMapEntries = (...maps)=>{
                for (const map2 of maps){
                    if (typeof map2 === "object") {
                        for(const key in map2){
                            const entry = map2[key];
                            if (typeof entry === "object") {
                                toWalk.push(entry);
                            }
                        }
                    }
                }
            };
            const collectArrayEntries = (...arrays)=>{
                for (const array of arrays){
                    if (Array.isArray(array)) {
                        for (const entry of array){
                            if (typeof entry === "object") {
                                toWalk.push(entry);
                            }
                        }
                    }
                }
            };
            const handleRef = (next)=>{
                const seenRefs = /* @__PURE__ */ new Set();
                while(next.$ref){
                    const ref = next.$ref;
                    const segments = ref.split("#", 2);
                    next._$ref = next.$ref;
                    delete next.$ref;
                    if (segments[0].length > 0) {
                        openPromises.push(resolveExternalLink(next, segments[0], segments[1], parentSchemaURL, parentSchemaDependencies));
                        return;
                    } else {
                        if (!seenRefs.has(ref)) {
                            merge(next, parentSchema, parentSchemaURL, segments[1]);
                            seenRefs.add(ref);
                        }
                    }
                }
                collectEntries(next.items, next.additionalItems, next.additionalProperties, next.not, next.contains, next.propertyNames, next.if, next.then, next.else);
                collectMapEntries(next.definitions, next.properties, next.patternProperties, next.dependencies);
                collectArrayEntries(next.anyOf, next.allOf, next.oneOf, next.items, next.schemaSequence);
            };
            if (parentSchemaURL.indexOf("#") > 0) {
                const segments = parentSchemaURL.split("#", 2);
                if (segments[0].length > 0 && segments[1].length > 0) {
                    const newSchema = {};
                    await resolveExternalLink(newSchema, segments[0], segments[1], parentSchemaURL, parentSchemaDependencies);
                    for(const key in schema4){
                        if (key === "required") {
                            continue;
                        }
                        if (Object.prototype.hasOwnProperty.call(schema4, key) && !Object.prototype.hasOwnProperty.call(newSchema, key)) {
                            newSchema[key] = schema4[key];
                        }
                    }
                    schema4 = newSchema;
                }
            }
            while(toWalk.length){
                const next = toWalk.pop();
                if (seen.has(next)) {
                    continue;
                }
                seen.add(next);
                handleRef(next);
            }
            return Promise.all(openPromises);
        };
        await resolveRefs(schema4, schema4, schemaURL, dependencies);
        return new ResolvedSchema(schema4, resolveErrors);
    }
    getSchemaForResource(resource, doc) {
        const resolveModelineSchema = ()=>{
            let schemaFromModeline = getSchemaFromModeline(doc);
            if (schemaFromModeline !== void 0) {
                if (!schemaFromModeline.startsWith("file:") && !schemaFromModeline.startsWith("http")) {
                    let appendix = "";
                    if (schemaFromModeline.indexOf("#") > 0) {
                        const segments = schemaFromModeline.split("#", 2);
                        schemaFromModeline = segments[0];
                        appendix = segments[1];
                    }
                    if (!path2.isAbsolute(schemaFromModeline)) {
                        const resUri = yaml_service_URI.parse(resource);
                        schemaFromModeline = yaml_service_URI.file(path2.resolve(path2.parse(resUri.fsPath).dir, schemaFromModeline)).toString();
                    } else {
                        schemaFromModeline = yaml_service_URI.file(schemaFromModeline).toString();
                    }
                    if (appendix.length > 0) {
                        schemaFromModeline += "#" + appendix;
                    }
                }
                return schemaFromModeline;
            }
        };
        const resolveSchemaForResource = (schemas2)=>{
            const schemaHandle = super.createCombinedSchema(resource, schemas2);
            return schemaHandle.getResolvedSchema().then((schema4)=>{
                if (schema4.schema && typeof schema4.schema === "object") {
                    schema4.schema.url = schemaHandle.url;
                }
                if (schema4.schema && schema4.schema.schemaSequence && schema4.schema.schemaSequence[doc.currentDocIndex]) {
                    return new ResolvedSchema(schema4.schema.schemaSequence[doc.currentDocIndex]);
                }
                return schema4;
            });
        };
        const resolveSchema = ()=>{
            const seen = /* @__PURE__ */ Object.create(null);
            const schemas2 = [];
            for (const entry of this.filePatternAssociations){
                if (entry.matchesPattern(resource)) {
                    for (const schemaId of entry.getURIs()){
                        if (!seen[schemaId]) {
                            schemas2.push(schemaId);
                            seen[schemaId] = true;
                        }
                    }
                }
            }
            if (schemas2.length > 0) {
                const highestPrioSchemas = this.highestPrioritySchemas(schemas2);
                return resolveSchemaForResource(highestPrioSchemas);
            }
            return Promise.resolve(null);
        };
        const modelineSchema = resolveModelineSchema();
        if (modelineSchema) {
            return resolveSchemaForResource([
                modelineSchema
            ]);
        }
        if (this.customSchemaProvider) {
            return this.customSchemaProvider(resource).then((schemaUri)=>{
                if (Array.isArray(schemaUri)) {
                    if (schemaUri.length === 0) {
                        return resolveSchema();
                    }
                    return Promise.all(schemaUri.map((schemaUri2)=>{
                        return this.resolveCustomSchema(schemaUri2, doc);
                    })).then((schemas2)=>{
                        return {
                            errors: [],
                            schema: {
                                allOf: schemas2.map((schemaObj)=>{
                                    return schemaObj.schema;
                                })
                            }
                        };
                    }, ()=>{
                        return resolveSchema();
                    });
                }
                if (!schemaUri) {
                    return resolveSchema();
                }
                return this.resolveCustomSchema(schemaUri, doc);
            }).then((schema4)=>{
                return schema4;
            }, ()=>{
                return resolveSchema();
            });
        } else {
            return resolveSchema();
        }
    }
    // Set the priority of a schema in the schema service
    addSchemaPriority(uri, priority) {
        let currSchemaArray = this.schemaPriorityMapping.get(uri);
        if (currSchemaArray) {
            currSchemaArray = currSchemaArray.add(priority);
            this.schemaPriorityMapping.set(uri, currSchemaArray);
        } else {
            this.schemaPriorityMapping.set(uri, /* @__PURE__ */ new Set().add(priority));
        }
    }
    /**
   * Search through all the schemas and find the ones with the highest priority
   */ highestPrioritySchemas(schemas2) {
        let highestPrio = 0;
        const priorityMapping = /* @__PURE__ */ new Map();
        schemas2.forEach((schema4)=>{
            const priority = this.schemaPriorityMapping.get(schema4) || [
                0
            ];
            priority.forEach((prio)=>{
                if (prio > highestPrio) {
                    highestPrio = prio;
                }
                let currPriorityArray = priorityMapping.get(prio);
                if (currPriorityArray) {
                    currPriorityArray = currPriorityArray.concat(schema4);
                    priorityMapping.set(prio, currPriorityArray);
                } else {
                    priorityMapping.set(prio, [
                        schema4
                    ]);
                }
            });
        });
        return priorityMapping.get(highestPrio) || [];
    }
    async resolveCustomSchema(schemaUri, doc) {
        const unresolvedSchema = await this.loadSchema(schemaUri);
        const schema4 = await this.resolveSchemaContent(unresolvedSchema, schemaUri, []);
        if (schema4.schema && typeof schema4.schema === "object") {
            schema4.schema.url = schemaUri;
        }
        if (schema4.schema && schema4.schema.schemaSequence && schema4.schema.schemaSequence[doc.currentDocIndex]) {
            return new ResolvedSchema(schema4.schema.schemaSequence[doc.currentDocIndex], schema4.errors);
        }
        return schema4;
    }
    /**
   * Save a schema with schema ID and schema content.
   * Overrides previous schemas set for that schema ID.
   */ async saveSchema(schemaId, schemaContent) {
        const id = this.normalizeId(schemaId);
        this.getOrAddSchemaHandle(id, schemaContent);
        this.schemaPriorityMapping.set(id, /* @__PURE__ */ new Set().add(SchemaPriority.Settings));
        return Promise.resolve(void 0);
    }
    /**
   * Delete schemas on specific path
   */ async deleteSchemas(deletions) {
        deletions.schemas.forEach((s)=>{
            this.deleteSchema(s);
        });
        return Promise.resolve(void 0);
    }
    /**
   * Delete a schema with schema ID.
   */ async deleteSchema(schemaId) {
        const id = this.normalizeId(schemaId);
        if (this.schemasById[id]) {
            delete this.schemasById[id];
        }
        this.schemaPriorityMapping.delete(id);
        return Promise.resolve(void 0);
    }
    /**
   * Add content to a specified schema at a specified path
   */ async addContent(additions) {
        const schema4 = await this.getResolvedSchema(additions.schema);
        if (schema4) {
            const resolvedSchemaLocation = this.resolveJSONSchemaToSection(schema4.schema, additions.path);
            if (typeof resolvedSchemaLocation === "object") {
                resolvedSchemaLocation[additions.key] = additions.content;
            }
            await this.saveSchema(additions.schema, schema4.schema);
        }
    }
    /**
   * Delete content in a specified schema at a specified path
   */ async deleteContent(deletions) {
        const schema4 = await this.getResolvedSchema(deletions.schema);
        if (schema4) {
            const resolvedSchemaLocation = this.resolveJSONSchemaToSection(schema4.schema, deletions.path);
            if (typeof resolvedSchemaLocation === "object") {
                delete resolvedSchemaLocation[deletions.key];
            }
            await this.saveSchema(deletions.schema, schema4.schema);
        }
    }
    /**
   * Take a JSON Schema and the path that you would like to get to
   * @returns the JSON Schema resolved at that specific path
   */ resolveJSONSchemaToSection(schema4, paths) {
        const splitPathway = paths.split("/");
        let resolvedSchemaLocation = schema4;
        for (const path5 of splitPathway){
            if (path5 === "") {
                continue;
            }
            this.resolveNext(resolvedSchemaLocation, path5);
            resolvedSchemaLocation = resolvedSchemaLocation[path5];
        }
        return resolvedSchemaLocation;
    }
    /**
   * Resolve the next Object if they have compatible types
   * @param object a location in the JSON Schema
   * @param token the next token that you want to search for
   */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
    resolveNext(object, token) {
        if (Array.isArray(object) && isNaN(token)) {
            throw new Error("Expected a number after the array object");
        } else if (typeof object === "object" && typeof token !== "string") {
            throw new Error("Expected a string after the object");
        }
    }
    /**
   * Everything below here is needed because we're importing from vscode-json-languageservice umd and we need
   * to provide a wrapper around the javascript methods we are calling since they have no type
   */ normalizeId(id) {
        try {
            return yaml_service_URI.parse(id).toString();
        } catch (e) {
            return id;
        }
    }
    /*
   * Everything below here is needed because we're importing from vscode-json-languageservice umd and we need
   * to provide a wrapper around the javascript methods we are calling since they have no type
   */ getOrAddSchemaHandle(id, unresolvedSchemaContent) {
        return super.getOrAddSchemaHandle(id, unresolvedSchemaContent);
    }
    loadSchema(schemaUri) {
        const requestService = this.requestService;
        return super.loadSchema(schemaUri).then((unresolvedJsonSchema)=>{
            if (unresolvedJsonSchema.errors && unresolvedJsonSchema.schema === void 0) {
                return requestService(schemaUri).then((content)=>{
                    if (!content) {
                        const errorMessage = localize8("json.schema.nocontent", "Unable to load schema from '{0}': No content. {1}", toDisplayString2(schemaUri), unresolvedJsonSchema.errors);
                        return new UnresolvedSchema({}, [
                            errorMessage
                        ]);
                    }
                    try {
                        const schemaContent = parse3(content);
                        return new UnresolvedSchema(schemaContent, []);
                    } catch (yamlError) {
                        const errorMessage = localize8("json.schema.invalidFormat", "Unable to parse content from '{0}': {1}.", toDisplayString2(schemaUri), yamlError);
                        return new UnresolvedSchema({}, [
                            errorMessage
                        ]);
                    }
                }, // eslint-disable-next-line @typescript-eslint/no-explicit-any
                (error)=>{
                    let errorMessage = error.toString();
                    const errorSplit = error.toString().split("Error: ");
                    if (errorSplit.length > 1) {
                        errorMessage = errorSplit[1];
                    }
                    return new UnresolvedSchema({}, [
                        errorMessage
                    ]);
                });
            }
            unresolvedJsonSchema.uri = schemaUri;
            if (this.schemaUriToNameAndDescription.has(schemaUri)) {
                const { name, description, versions } = this.schemaUriToNameAndDescription.get(schemaUri);
                unresolvedJsonSchema.schema.title = name != null ? name : unresolvedJsonSchema.schema.title;
                unresolvedJsonSchema.schema.description = description != null ? description : unresolvedJsonSchema.schema.description;
                unresolvedJsonSchema.schema.versions = versions != null ? versions : unresolvedJsonSchema.schema.versions;
            }
            return unresolvedJsonSchema;
        });
    }
    registerExternalSchema(uri, filePatterns, unresolvedSchema, name, description, versions) {
        if (name || description) {
            this.schemaUriToNameAndDescription.set(uri, {
                name,
                description,
                versions
            });
        }
        return super.registerExternalSchema(uri, filePatterns, unresolvedSchema);
    }
    clearExternalSchemas() {
        super.clearExternalSchemas();
    }
    setSchemaContributions(schemaContributions2) {
        super.setSchemaContributions(schemaContributions2);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getRegisteredSchemaIds(filter) {
        return super.getRegisteredSchemaIds(filter);
    }
    getResolvedSchema(schemaId) {
        return super.getResolvedSchema(schemaId);
    }
    onResourceChange(uri) {
        return super.onResourceChange(uri);
    }
    constructor(requestService, contextService, promiseConstructor){
        super(requestService, contextService, promiseConstructor);
        this.schemaUriToNameAndDescription = /* @__PURE__ */ new Map();
        this.customSchemaProvider = void 0;
        this.requestService = requestService;
        this.schemaPriorityMapping = /* @__PURE__ */ new Map();
    }
};
function toDisplayString2(url) {
    try {
        const uri = yaml_service_URI.parse(url);
        if (uri.scheme === "file") {
            return uri.fsPath;
        }
    } catch (e) {}
    return url;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/documentSymbols.js
var YAMLDocumentSymbols = class {
    findDocumentSymbols(document, context = {
        resultLimit: Number.MAX_VALUE
    }) {
        var _a;
        let results = [];
        try {
            const doc = yamlDocumentsCache.getYamlDocument(document);
            if (!doc || doc["documents"].length === 0) {
                return null;
            }
            for (const yamlDoc of doc["documents"]){
                if (yamlDoc.root) {
                    results = results.concat(this.jsonDocumentSymbols.findDocumentSymbols(document, yamlDoc, context));
                }
            }
        } catch (err) {
            (_a = this.telemetry) == null ? void 0 : _a.sendError("yaml.documentSymbols.error", err);
        }
        return results;
    }
    findHierarchicalDocumentSymbols(document, context = {
        resultLimit: Number.MAX_VALUE
    }) {
        var _a;
        let results = [];
        try {
            const doc = yamlDocumentsCache.getYamlDocument(document);
            if (!doc || doc["documents"].length === 0) {
                return null;
            }
            for (const yamlDoc of doc["documents"]){
                if (yamlDoc.root) {
                    results = results.concat(this.jsonDocumentSymbols.findDocumentSymbols2(document, yamlDoc, context));
                }
            }
        } catch (err) {
            (_a = this.telemetry) == null ? void 0 : _a.sendError("yaml.hierarchicalDocumentSymbols.error", err);
        }
        return results;
    }
    constructor(schemaService, telemetry){
        this.telemetry = telemetry;
        this.jsonDocumentSymbols = new JSONDocumentSymbols(schemaService);
        this.jsonDocumentSymbols.getKeyLabel = (property)=>{
            const keyNode = property.keyNode.internalNode;
            let name = "";
            if (isMap(keyNode)) {
                name = "{}";
            } else if (isSeq(keyNode)) {
                name = "[]";
            } else {
                name = keyNode.source;
            }
            return name;
        };
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlHover.js
init_main();
// ../../node_modules/yaml-language-server/lib/esm/languageservice/parser/isKubernetes.js
function setKubernetesParserOption(jsonDocuments, option) {
    for (const jsonDoc of jsonDocuments){
        jsonDoc.isKubernetes = option;
    }
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlHover.js
var path3 = __toESM(require_path_browserify());
var YAMLHover = class {
    configure(languageSettings) {
        if (languageSettings) {
            this.shouldHover = languageSettings.hover;
            this.indentation = languageSettings.indentation;
        }
    }
    doHover(document, position, isKubernetes = false) {
        var _a;
        try {
            if (!this.shouldHover || !document) {
                return Promise.resolve(void 0);
            }
            const doc = yamlDocumentsCache.getYamlDocument(document);
            const offset = document.offsetAt(position);
            const currentDoc = matchOffsetToDocument(offset, doc);
            if (currentDoc === null) {
                return Promise.resolve(void 0);
            }
            setKubernetesParserOption(doc.documents, isKubernetes);
            const currentDocIndex = doc.documents.indexOf(currentDoc);
            currentDoc.currentDocIndex = currentDocIndex;
            return this.getHover(document, position, currentDoc);
        } catch (error) {
            (_a = this.telemetry) == null ? void 0 : _a.sendError("yaml.hover.error", error);
        }
    }
    // method copied from https://github.com/microsoft/vscode-json-languageservice/blob/2ea5ad3d2ffbbe40dea11cfe764a502becf113ce/src/services/jsonHover.ts#L23
    getHover(document, position, doc) {
        const offset = document.offsetAt(position);
        let node = doc.getNodeFromOffset(offset);
        if (!node || (node.type === "object" || node.type === "array") && offset > node.offset + 1 && offset < node.offset + node.length - 1) {
            return Promise.resolve(null);
        }
        const hoverRangeNode = node;
        if (node.type === "string") {
            const parent = node.parent;
            if (parent && parent.type === "property" && parent.keyNode === node) {
                node = parent.valueNode;
                if (!node) {
                    return Promise.resolve(null);
                }
            }
        }
        const hoverRange = Range.create(document.positionAt(hoverRangeNode.offset), document.positionAt(hoverRangeNode.offset + hoverRangeNode.length));
        const createHover = (contents)=>{
            const markupContent = {
                kind: MarkupKind.Markdown,
                value: contents
            };
            const result = {
                contents: markupContent,
                range: hoverRange
            };
            return result;
        };
        const removePipe = (value1)=>{
            return value1.replace(/\s\|\|\s*$/, "");
        };
        return this.schemaService.getSchemaForResource(document.uri, doc).then((schema4)=>{
            if (schema4 && node && !schema4.errors.length) {
                const matchingSchemas = doc.getMatchingSchemas(schema4.schema, node.offset);
                let title = void 0;
                let markdownDescription = void 0;
                let markdownEnumDescriptions = [];
                const markdownExamples = [];
                const markdownEnums = [];
                matchingSchemas.every((s)=>{
                    if ((s.node === node || node.type === "property" && node.valueNode === s.node) && !s.inverted && s.schema) {
                        title = title || s.schema.title || s.schema.closestTitle;
                        markdownDescription = markdownDescription || s.schema.markdownDescription || this.toMarkdown(s.schema.description);
                        if (s.schema.enum) {
                            if (s.schema.markdownEnumDescriptions) {
                                markdownEnumDescriptions = s.schema.markdownEnumDescriptions;
                            } else if (s.schema.enumDescriptions) {
                                markdownEnumDescriptions = s.schema.enumDescriptions.map(this.toMarkdown, this);
                            } else {
                                markdownEnumDescriptions = [];
                            }
                            s.schema.enum.forEach((enumValue, idx)=>{
                                if (typeof enumValue !== "string") {
                                    enumValue = JSON.stringify(enumValue);
                                }
                                markdownEnums.push({
                                    value: enumValue,
                                    description: markdownEnumDescriptions[idx]
                                });
                            });
                        }
                        if (s.schema.anyOf && isAllSchemasMatched(node, matchingSchemas, s.schema)) {
                            title = "";
                            markdownDescription = s.schema.description ? s.schema.description + "\n" : "";
                            s.schema.anyOf.forEach((childSchema, index)=>{
                                title += childSchema.title || s.schema.closestTitle || "";
                                markdownDescription += childSchema.markdownDescription || this.toMarkdown(childSchema.description) || "";
                                if (index !== s.schema.anyOf.length - 1) {
                                    title += " || ";
                                    markdownDescription += " || ";
                                }
                            });
                            title = removePipe(title);
                            markdownDescription = removePipe(markdownDescription);
                        }
                        if (s.schema.examples) {
                            s.schema.examples.forEach((example)=>{
                                markdownExamples.push(stringify3(example, null, 2));
                            });
                        }
                    }
                    return true;
                });
                let result = "";
                if (title) {
                    result = "#### " + this.toMarkdown(title);
                }
                if (markdownDescription) {
                    result = ensureLineBreak(result);
                    result += markdownDescription;
                }
                if (markdownEnums.length !== 0) {
                    result = ensureLineBreak(result);
                    result += "Allowed Values:\n\n";
                    markdownEnums.forEach((me)=>{
                        if (me.description) {
                            result += `* \`${toMarkdownCodeBlock2(me.value)}\`: ${me.description}
`;
                        } else {
                            result += `* \`${toMarkdownCodeBlock2(me.value)}\`
`;
                        }
                    });
                }
                if (markdownExamples.length !== 0) {
                    markdownExamples.forEach((example)=>{
                        result = ensureLineBreak(result);
                        result += "Example:\n\n";
                        result += `\`\`\`yaml
${example}\`\`\`
`;
                    });
                }
                if (result.length > 0 && schema4.schema.url) {
                    result = ensureLineBreak(result);
                    result += `Source: [${getSchemaName(schema4.schema)}](${schema4.schema.url})`;
                }
                return createHover(result);
            }
            return null;
        });
    }
    // copied from https://github.com/microsoft/vscode-json-languageservice/blob/2ea5ad3d2ffbbe40dea11cfe764a502becf113ce/src/services/jsonHover.ts#L112
    toMarkdown(plain) {
        if (plain) {
            let escaped = plain.replace(/([^\n\r])(\r?\n)([^\n\r])/gm, "$1\n\n$3");
            escaped = escaped.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
            if (this.indentation !== void 0) {
                const indentationMatchRegex = new RegExp(` {${this.indentation.length}}`, "g");
                escaped = escaped.replace(indentationMatchRegex, "&emsp;");
            }
            return escaped;
        }
        return void 0;
    }
    constructor(schemaService, telemetry){
        this.telemetry = telemetry;
        this.shouldHover = true;
        this.schemaService = schemaService;
    }
};
function ensureLineBreak(content) {
    if (content.length === 0) {
        return content;
    }
    if (!content.endsWith("\n")) {
        content += "\n";
    }
    return content + "\n";
}
function getSchemaName(schema4) {
    let result = "JSON Schema";
    const urlString = schema4.url;
    if (urlString) {
        const url = yaml_service_URI.parse(urlString);
        result = path3.basename(url.fsPath);
    } else if (schema4.title) {
        result = schema4.title;
    }
    return result;
}
function toMarkdownCodeBlock2(content) {
    if (content.indexOf("`") !== -1) {
        return "`` " + content + " ``";
    }
    return content;
}
function isAllSchemasMatched(node, matchingSchemas, schema4) {
    let count = 0;
    for (const matchSchema of matchingSchemas){
        if (node === matchSchema.node && matchSchema.schema !== schema4) {
            schema4.anyOf.forEach((childSchema)=>{
                if (matchSchema.schema.title === childSchema.title && matchSchema.schema.description === childSchema.description && matchSchema.schema.properties === childSchema.properties) {
                    count++;
                }
            });
        }
    }
    return count === schema4.anyOf.length;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlValidation.js
init_main();
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/validation/unused-anchors.js
init_main();
var UnusedAnchorsValidator = class {
    validate(document, yamlDoc) {
        const result = [];
        const anchors = /* @__PURE__ */ new Set();
        const usedAnchors = /* @__PURE__ */ new Set();
        const anchorParent = /* @__PURE__ */ new Map();
        visit2(yamlDoc.internalDocument, (key, node, path5)=>{
            if (!isNode(node)) {
                return;
            }
            if ((isCollection(node) || isScalar(node)) && node.anchor) {
                anchors.add(node);
                anchorParent.set(node, path5[path5.length - 1]);
            }
            if (isAlias(node)) {
                usedAnchors.add(node.resolve(yamlDoc.internalDocument));
            }
        });
        for (const anchor of anchors){
            if (!usedAnchors.has(anchor)) {
                const aToken = this.getAnchorNode(anchorParent.get(anchor), anchor);
                if (aToken) {
                    const range = Range.create(document.positionAt(aToken.offset), document.positionAt(aToken.offset + aToken.source.length));
                    const warningDiagnostic = Diagnostic.create(range, `Unused anchor "${aToken.source}"`, DiagnosticSeverity.Hint, 0);
                    warningDiagnostic.tags = [
                        DiagnosticTag.Unnecessary
                    ];
                    result.push(warningDiagnostic);
                }
            }
        }
        return result;
    }
    getAnchorNode(parentNode, node) {
        if (parentNode && parentNode.srcToken) {
            const token = parentNode.srcToken;
            if (isCollectionItem(token)) {
                return getAnchorFromCollectionItem(token);
            } else if (cst_exports.isCollection(token)) {
                for (const t1 of token.items){
                    if (node.srcToken !== t1.value) continue;
                    const anchor = getAnchorFromCollectionItem(t1);
                    if (anchor) {
                        return anchor;
                    }
                }
            }
        }
        return void 0;
    }
};
function getAnchorFromCollectionItem(token) {
    for (const t1 of token.start){
        if (t1.type === "anchor") {
            return t1;
        }
    }
    if (token.sep && Array.isArray(token.sep)) {
        for (const t1 of token.sep){
            if (t1.type === "anchor") {
                return t1;
            }
        }
    }
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/validation/yaml-style.js
init_main();
var YAMLStyleValidator = class {
    validate(document, yamlDoc) {
        const result = [];
        visit2(yamlDoc.internalDocument, (key, node)=>{
            var _a, _b;
            if (this.forbidMapping && isMap(node) && ((_a = node.srcToken) == null ? void 0 : _a.type) === "flow-collection") {
                result.push(Diagnostic.create(this.getRangeOf(document, node.srcToken), "Flow style mapping is forbidden", DiagnosticSeverity.Error, "flowMap"));
            }
            if (this.forbidSequence && isSeq(node) && ((_b = node.srcToken) == null ? void 0 : _b.type) === "flow-collection") {
                result.push(Diagnostic.create(this.getRangeOf(document, node.srcToken), "Flow style sequence is forbidden", DiagnosticSeverity.Error, "flowSeq"));
            }
        });
        return result;
    }
    getRangeOf(document, node) {
        return Range.create(document.positionAt(node.start.offset), document.positionAt(node.end.pop().offset));
    }
    constructor(settings){
        this.forbidMapping = settings.flowMapping === "forbid";
        this.forbidSequence = settings.flowSequence === "forbid";
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/validation/map-key-order.js
init_main();
var MapKeyOrderValidator = class {
    validate(document, yamlDoc) {
        const result = [];
        visit2(yamlDoc.internalDocument, (key, node)=>{
            if (isMap(node)) {
                for(let i = 1; i < node.items.length; i++){
                    if (compare(node.items[i - 1], node.items[i]) > 0) {
                        const range = createRange2(document, node.items[i - 1]);
                        result.push(Diagnostic.create(range, `Wrong ordering of key "${node.items[i - 1].key}" in mapping`, DiagnosticSeverity.Error, "mapKeyOrder"));
                    }
                }
            }
        });
        return result;
    }
};
function createRange2(document, node) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
    const start = (_f = (_c = (_a = node == null ? void 0 : node.srcToken.start[0]) == null ? void 0 : _a.offset) != null ? _c : (_b = node == null ? void 0 : node.srcToken) == null ? void 0 : _b.key.offset) != null ? _f : (_e = (_d = node == null ? void 0 : node.srcToken) == null ? void 0 : _d.sep[0]) == null ? void 0 : _e.offset;
    const end = ((_g = node == null ? void 0 : node.srcToken) == null ? void 0 : _g.value.offset) || ((_i = (_h = node == null ? void 0 : node.srcToken) == null ? void 0 : _h.sep[0]) == null ? void 0 : _i.offset) || ((_j = node == null ? void 0 : node.srcToken) == null ? void 0 : _j.key.offset) || ((_k = node == null ? void 0 : node.srcToken.start[node.srcToken.start.length - 1]) == null ? void 0 : _k.offset);
    return Range.create(document.positionAt(start), document.positionAt(end));
}
function compare(thiz, that) {
    const thatKey = String(that.key);
    const thisKey = String(thiz.key);
    return thisKey.localeCompare(thatKey);
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlValidation.js
var yamlDiagToLSDiag = (yamlDiag, textDocument)=>{
    const start = textDocument.positionAt(yamlDiag.location.start);
    const range = {
        start,
        end: yamlDiag.location.toLineEnd ? Position.create(start.line, new TextBuffer(textDocument).getLineLength(start.line)) : textDocument.positionAt(yamlDiag.location.end)
    };
    return Diagnostic.create(range, yamlDiag.message, yamlDiag.severity, yamlDiag.code, YAML_SOURCE);
};
var YAMLValidation = class {
    configure(settings) {
        this.validators = [];
        if (settings) {
            this.validationEnabled = settings.validate;
            this.customTags = settings.customTags;
            this.disableAdditionalProperties = settings.disableAdditionalProperties;
            this.yamlVersion = settings.yamlVersion;
            if (settings.flowMapping === "forbid" || settings.flowSequence === "forbid") {
                this.validators.push(new YAMLStyleValidator(settings));
            }
            if (settings.keyOrdering) {
                this.validators.push(new MapKeyOrderValidator());
            }
        }
        this.validators.push(new UnusedAnchorsValidator());
    }
    async doValidation(textDocument, isKubernetes = false) {
        var _a;
        if (!this.validationEnabled) {
            return Promise.resolve([]);
        }
        const validationResult = [];
        try {
            const yamlDocument = yamlDocumentsCache.getYamlDocument(textDocument, {
                customTags: this.customTags,
                yamlVersion: this.yamlVersion
            }, true);
            let index = 0;
            for (const currentYAMLDoc of yamlDocument.documents){
                currentYAMLDoc.isKubernetes = isKubernetes;
                currentYAMLDoc.currentDocIndex = index;
                currentYAMLDoc.disableAdditionalProperties = this.disableAdditionalProperties;
                currentYAMLDoc.uri = textDocument.uri;
                const validation = await this.jsonValidation.doValidation(textDocument, currentYAMLDoc);
                const syd = currentYAMLDoc;
                if (syd.errors.length > 0) {
                    validationResult.push(...syd.errors);
                }
                if (syd.warnings.length > 0) {
                    validationResult.push(...syd.warnings);
                }
                validationResult.push(...validation);
                validationResult.push(...this.runAdditionalValidators(textDocument, currentYAMLDoc));
                index++;
            }
        } catch (err) {
            (_a = this.telemetry) == null ? void 0 : _a.sendError("yaml.validation.error", err);
        }
        let previousErr;
        const foundSignatures = /* @__PURE__ */ new Set();
        const duplicateMessagesRemoved = [];
        for (let err of validationResult){
            if (isKubernetes && err.message === this.MATCHES_MULTIPLE) {
                continue;
            }
            if (Object.prototype.hasOwnProperty.call(err, "location")) {
                err = yamlDiagToLSDiag(err, textDocument);
            }
            if (!err.source) {
                err.source = YAML_SOURCE;
            }
            if (previousErr && previousErr.message === err.message && previousErr.range.end.line === err.range.start.line && Math.abs(previousErr.range.end.character - err.range.end.character) >= 1) {
                previousErr.range.end = err.range.end;
                continue;
            } else {
                previousErr = err;
            }
            const errSig = err.range.start.line + " " + err.range.start.character + " " + err.message;
            if (!foundSignatures.has(errSig)) {
                duplicateMessagesRemoved.push(err);
                foundSignatures.add(errSig);
            }
        }
        return duplicateMessagesRemoved;
    }
    runAdditionalValidators(document, yarnDoc) {
        const result = [];
        for (const validator of this.validators){
            result.push(...validator.validate(document, yarnDoc));
        }
        return result;
    }
    constructor(schemaService, telemetry){
        this.telemetry = telemetry;
        this.validators = [];
        this.MATCHES_MULTIPLE = "Matches multiple schemas when only one must validate.";
        this.validationEnabled = true;
        this.jsonValidation = new JSONValidation(schemaService, Promise);
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlFormatter.js
init_main();
var import_prettier = __toESM(require_standalone());
var parser = __toESM(require_yaml());
var YAMLFormatter = class {
    configure(shouldFormat) {
        if (shouldFormat) {
            this.formatterEnabled = shouldFormat.format;
        }
    }
    async format(document, options = {}) {
        if (!this.formatterEnabled) {
            return [];
        }
        try {
            const text = document.getText();
            const prettierOptions = {
                parser: "yaml",
                plugins: [
                    parser
                ],
                // --- FormattingOptions ---
                tabWidth: options.tabWidth || options.tabSize,
                // --- CustomFormatterOptions ---
                singleQuote: options.singleQuote,
                bracketSpacing: options.bracketSpacing,
                // 'preserve' is the default for Options.proseWrap. See also server.ts
                proseWrap: "always" === options.proseWrap ? "always" : "never" === options.proseWrap ? "never" : "preserve",
                printWidth: options.printWidth
            };
            const formatted = await (0, import_prettier.format)(text, prettierOptions);
            return [
                TextEdit.replace(Range.create(Position.create(0, 0), document.positionAt(text.length)), formatted)
            ];
        } catch (error) {
            return [];
        }
    }
    constructor(){
        this.formatterEnabled = true;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlLinks.js
var YamlLinks = class {
    findLinks(document) {
        var _a;
        try {
            const doc = yamlDocumentsCache.getYamlDocument(document);
            const linkPromises = [];
            for (const yamlDoc of doc.documents){
                linkPromises.push(findLinks(document, yamlDoc));
            }
            return Promise.all(linkPromises).then((yamlLinkArray)=>[].concat(...yamlLinkArray));
        } catch (err) {
            (_a = this.telemetry) == null ? void 0 : _a.sendError("yaml.documentLink.error", err);
        }
    }
    constructor(telemetry){
        this.telemetry = telemetry;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlFolding.js
init_main();
function getFoldingRanges2(document, context) {
    if (!document) {
        return;
    }
    const result = [];
    const doc = yamlDocumentsCache.getYamlDocument(document);
    for (const ymlDoc of doc.documents){
        if (doc.documents.length > 1) {
            result.push(createNormalizedFolding(document, ymlDoc.root));
        }
        ymlDoc.visit((node)=>{
            var _a;
            if (node.type === "object" && ((_a = node.parent) == null ? void 0 : _a.type) === "array") {
                result.push(createNormalizedFolding(document, node));
            }
            if (node.type === "property" && node.valueNode) {
                switch(node.valueNode.type){
                    case "array":
                    case "object":
                        result.push(createNormalizedFolding(document, node));
                        break;
                    case "string":
                        {
                            const nodePosn = document.positionAt(node.offset);
                            const valuePosn = document.positionAt(node.valueNode.offset + node.valueNode.length);
                            if (nodePosn.line !== valuePosn.line) {
                                result.push(createNormalizedFolding(document, node));
                            }
                            break;
                        }
                    default:
                        return true;
                }
            }
            return true;
        });
    }
    const rangeLimit = context && context.rangeLimit;
    if (typeof rangeLimit !== "number" || result.length <= rangeLimit) {
        return result;
    }
    if (context && context.onRangeLimitExceeded) {
        context.onRangeLimitExceeded(document.uri);
    }
    return result.slice(0, context.rangeLimit);
}
function createNormalizedFolding(document, node) {
    const startPos = document.positionAt(node.offset);
    let endPos = document.positionAt(node.offset + node.length);
    const textFragment = document.getText(Range.create(startPos, endPos));
    const newLength = textFragment.length - textFragment.trimRight().length;
    if (newLength > 0) {
        endPos = document.positionAt(node.offset + node.length - newLength);
    }
    return FoldingRange.create(startPos.line, endPos.line, startPos.character, endPos.character);
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCodeActions.js
init_main();
// ../../node_modules/yaml-language-server/lib/esm/commands.js
var YamlCommands;
(function(YamlCommands2) {
    YamlCommands2["JUMP_TO_SCHEMA"] = "jumpToSchema";
})(YamlCommands || (YamlCommands = {}));
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCodeActions.js
var path4 = __toESM(require_path_browserify());
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/flow-style-rewriter.js
var FlowStyleRewriter = class {
    write(node) {
        if (node.internalNode.srcToken["type"] !== "flow-collection") {
            return null;
        }
        const collection = node.internalNode.srcToken;
        const blockType = collection.start.type === "flow-map-start" ? "block-map" : "block-seq";
        const parentType = node.parent.type;
        const blockStyle = {
            type: blockType,
            offset: collection.offset,
            indent: collection.indent,
            items: []
        };
        for (const item of collection.items){
            cst_exports.visit(item, ({ key, sep, value: value1 })=>{
                if (blockType === "block-map") {
                    const start = [
                        {
                            type: "space",
                            indent: 0,
                            offset: key.offset,
                            source: this.indentation
                        }
                    ];
                    if (parentType === "property") {
                        start.unshift({
                            type: "newline",
                            indent: 0,
                            offset: key.offset,
                            source: "\n"
                        });
                    }
                    blockStyle.items.push({
                        start,
                        key,
                        sep,
                        value: value1
                    });
                } else if (blockType === "block-seq") {
                    blockStyle.items.push({
                        start: [
                            {
                                type: "newline",
                                indent: 0,
                                offset: value1.offset,
                                source: "\n"
                            },
                            {
                                type: "space",
                                indent: 0,
                                offset: value1.offset,
                                source: this.indentation
                            },
                            {
                                type: "seq-item-ind",
                                indent: 0,
                                offset: value1.offset,
                                source: "-"
                            },
                            {
                                type: "space",
                                indent: 0,
                                offset: value1.offset,
                                source: " "
                            }
                        ],
                        value: value1
                    });
                }
                if (value1.type === "flow-collection") {
                    return visit2.SKIP;
                }
            });
        }
        return cst_exports.stringify(blockStyle);
    }
    constructor(indentation){
        this.indentation = indentation;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCodeActions.js
var _ = __toESM(require_lodash());
var YamlCodeActions = class {
    configure(settings) {
        this.indentation = settings.indentation;
    }
    getCodeAction(document, params) {
        if (!params.context.diagnostics) {
            return;
        }
        const result = [];
        result.push(...this.getConvertToBooleanActions(params.context.diagnostics, document));
        result.push(...this.getJumpToSchemaActions(params.context.diagnostics));
        result.push(...this.getTabToSpaceConverting(params.context.diagnostics, document));
        result.push(...this.getUnusedAnchorsDelete(params.context.diagnostics, document));
        result.push(...this.getConvertToBlockStyleActions(params.context.diagnostics, document));
        result.push(...this.getKeyOrderActions(params.context.diagnostics, document));
        result.push(...this.getQuickFixForPropertyOrValueMismatch(params.context.diagnostics, document));
        return result;
    }
    getJumpToSchemaActions(diagnostics) {
        var _a, _b, _c, _d, _e;
        const isOpenTextDocumentEnabled = (_d = (_c = (_b = (_a = this.clientCapabilities) == null ? void 0 : _a.window) == null ? void 0 : _b.showDocument) == null ? void 0 : _c.support) != null ? _d : false;
        if (!isOpenTextDocumentEnabled) {
            return [];
        }
        const schemaUriToDiagnostic = /* @__PURE__ */ new Map();
        for (const diagnostic of diagnostics){
            const schemaUri = ((_e = diagnostic.data) == null ? void 0 : _e.schemaUri) || [];
            for (const schemaUriStr of schemaUri){
                if (schemaUriStr) {
                    if (!schemaUriToDiagnostic.has(schemaUriStr)) {
                        schemaUriToDiagnostic.set(schemaUriStr, []);
                    }
                    schemaUriToDiagnostic.get(schemaUriStr).push(diagnostic);
                }
            }
        }
        const result = [];
        for (const schemaUri of schemaUriToDiagnostic.keys()){
            const action = CodeAction.create(`Jump to schema location (${path4.basename(schemaUri)})`, Command.create("JumpToSchema", YamlCommands.JUMP_TO_SCHEMA, schemaUri));
            action.diagnostics = schemaUriToDiagnostic.get(schemaUri);
            result.push(action);
        }
        return result;
    }
    getTabToSpaceConverting(diagnostics, document) {
        const result = [];
        const textBuff = new TextBuffer(document);
        const processedLine = [];
        for (const diag of diagnostics){
            if (diag.message === "Using tabs can lead to unpredictable results") {
                if (processedLine.includes(diag.range.start.line)) {
                    continue;
                }
                const lineContent = textBuff.getLineContent(diag.range.start.line);
                let replacedTabs = 0;
                let newText = "";
                for(let i = diag.range.start.character; i <= diag.range.end.character; i++){
                    const char = lineContent.charAt(i);
                    if (char !== "	") {
                        break;
                    }
                    replacedTabs++;
                    newText += this.indentation;
                }
                processedLine.push(diag.range.start.line);
                let resultRange = diag.range;
                if (replacedTabs !== diag.range.end.character - diag.range.start.character) {
                    resultRange = Range.create(diag.range.start, Position.create(diag.range.end.line, diag.range.start.character + replacedTabs));
                }
                result.push(CodeAction.create("Convert Tab to Spaces", createWorkspaceEdit(document.uri, [
                    TextEdit.replace(resultRange, newText)
                ]), CodeActionKind.QuickFix));
            }
        }
        if (result.length !== 0) {
            const replaceEdits = [];
            for(let i = 0; i <= textBuff.getLineCount(); i++){
                const lineContent = textBuff.getLineContent(i);
                let replacedTabs = 0;
                let newText = "";
                for(let j = 0; j < lineContent.length; j++){
                    const char = lineContent.charAt(j);
                    if (char !== " " && char !== "	") {
                        if (replacedTabs !== 0) {
                            replaceEdits.push(TextEdit.replace(Range.create(i, j - replacedTabs, i, j), newText));
                            replacedTabs = 0;
                            newText = "";
                        }
                        break;
                    }
                    if (char === " " && replacedTabs !== 0) {
                        replaceEdits.push(TextEdit.replace(Range.create(i, j - replacedTabs, i, j), newText));
                        replacedTabs = 0;
                        newText = "";
                        continue;
                    }
                    if (char === "	") {
                        newText += this.indentation;
                        replacedTabs++;
                    }
                }
                if (replacedTabs !== 0) {
                    replaceEdits.push(TextEdit.replace(Range.create(i, 0, i, textBuff.getLineLength(i)), newText));
                }
            }
            if (replaceEdits.length > 0) {
                result.push(CodeAction.create("Convert all Tabs to Spaces", createWorkspaceEdit(document.uri, replaceEdits), CodeActionKind.QuickFix));
            }
        }
        return result;
    }
    getUnusedAnchorsDelete(diagnostics, document) {
        const result = [];
        const buffer = new TextBuffer(document);
        for (const diag of diagnostics){
            if (diag.message.startsWith("Unused anchor") && diag.source === YAML_SOURCE) {
                const range = Range.create(diag.range.start, diag.range.end);
                const actual = buffer.getText(range);
                const lineContent = buffer.getLineContent(range.end.line);
                const lastWhitespaceChar = getFirstNonWhitespaceCharacterAfterOffset(lineContent, range.end.character);
                range.end.character = lastWhitespaceChar;
                const action = CodeAction.create(`Delete unused anchor: ${actual}`, createWorkspaceEdit(document.uri, [
                    TextEdit.del(range)
                ]), CodeActionKind.QuickFix);
                action.diagnostics = [
                    diag
                ];
                result.push(action);
            }
        }
        return result;
    }
    getConvertToBooleanActions(diagnostics, document) {
        const results = [];
        for (const diagnostic of diagnostics){
            if (diagnostic.message === 'Incorrect type. Expected "boolean".') {
                const value1 = document.getText(diagnostic.range).toLocaleLowerCase();
                if (value1 === '"true"' || value1 === '"false"' || value1 === "'true'" || value1 === "'false'") {
                    const newValue = value1.includes("true") ? "true" : "false";
                    results.push(CodeAction.create("Convert to boolean", createWorkspaceEdit(document.uri, [
                        TextEdit.replace(diagnostic.range, newValue)
                    ]), CodeActionKind.QuickFix));
                }
            }
        }
        return results;
    }
    getConvertToBlockStyleActions(diagnostics, document) {
        const results = [];
        for (const diagnostic of diagnostics){
            if (diagnostic.code === "flowMap" || diagnostic.code === "flowSeq") {
                const node = getNodeForDiagnostic(document, diagnostic);
                if (isMap(node.internalNode) || isSeq(node.internalNode)) {
                    const blockTypeDescription = isMap(node.internalNode) ? "map" : "sequence";
                    const rewriter = new FlowStyleRewriter(this.indentation);
                    results.push(CodeAction.create(`Convert to block style ${blockTypeDescription}`, createWorkspaceEdit(document.uri, [
                        TextEdit.replace(diagnostic.range, rewriter.write(node))
                    ]), CodeActionKind.QuickFix));
                }
            }
        }
        return results;
    }
    getKeyOrderActions(diagnostics, document) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
        const results = [];
        for (const diagnostic of diagnostics){
            if ((diagnostic == null ? void 0 : diagnostic.code) === "mapKeyOrder") {
                let node = getNodeForDiagnostic(document, diagnostic);
                while(node && node.type !== "object"){
                    node = node.parent;
                }
                if (node && isMap(node.internalNode)) {
                    const sorted = _.cloneDeep(node.internalNode);
                    if ((sorted.srcToken.type === "block-map" || sorted.srcToken.type === "flow-collection") && (node.internalNode.srcToken.type === "block-map" || node.internalNode.srcToken.type === "flow-collection")) {
                        sorted.srcToken.items.sort((a2, b)=>{
                            if (a2.key && b.key && cst_exports.isScalar(a2.key) && cst_exports.isScalar(b.key)) {
                                return a2.key.source.localeCompare(b.key.source);
                            }
                            if (!a2.key && b.key) {
                                return -1;
                            }
                            if (a2.key && !b.key) {
                                return 1;
                            }
                            if (!a2.key && !b.key) {
                                return 0;
                            }
                        });
                        for(let i = 0; i < sorted.srcToken.items.length; i++){
                            const item = sorted.srcToken.items[i];
                            const uItem = node.internalNode.srcToken.items[i];
                            item.start = uItem.start;
                            if (((_a = item.value) == null ? void 0 : _a.type) === "alias" || ((_b = item.value) == null ? void 0 : _b.type) === "scalar" || ((_c = item.value) == null ? void 0 : _c.type) === "single-quoted-scalar" || ((_d = item.value) == null ? void 0 : _d.type) === "double-quoted-scalar") {
                                const newLineIndex = (_g = (_f = (_e = item.value) == null ? void 0 : _e.end) == null ? void 0 : _f.findIndex((p)=>p.type === "newline")) != null ? _g : -1;
                                let newLineToken = null;
                                if (((_h = uItem.value) == null ? void 0 : _h.type) === "block-scalar") {
                                    newLineToken = (_j = (_i = uItem.value) == null ? void 0 : _i.props) == null ? void 0 : _j.find((p)=>p.type === "newline");
                                } else if (cst_exports.isScalar(uItem.value)) {
                                    newLineToken = (_l = (_k = uItem.value) == null ? void 0 : _k.end) == null ? void 0 : _l.find((p)=>p.type === "newline");
                                }
                                if (newLineToken && newLineIndex < 0) {
                                    item.value.end = (_m = item.value.end) != null ? _m : [];
                                    item.value.end.push(newLineToken);
                                }
                                if (!newLineToken && newLineIndex > -1) {
                                    item.value.end.splice(newLineIndex, 1);
                                }
                            } else if (((_n = item.value) == null ? void 0 : _n.type) === "block-scalar") {
                                const newline = item.value.props.find((p)=>p.type === "newline");
                                if (!newline) {
                                    item.value.props.push({
                                        type: "newline",
                                        indent: 0,
                                        offset: item.value.offset,
                                        source: "\n"
                                    });
                                }
                            }
                        }
                    }
                    const replaceRange = Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));
                    results.push(CodeAction.create("Fix key order for this map", createWorkspaceEdit(document.uri, [
                        TextEdit.replace(replaceRange, cst_exports.stringify(sorted.srcToken))
                    ]), CodeActionKind.QuickFix));
                }
            }
        }
        return results;
    }
    /**
   * Check if diagnostic contains info for quick fix
   * Supports Enum/Const/Property mismatch
   */ getPossibleQuickFixValues(diagnostic) {
        if (typeof diagnostic.data !== "object") {
            return;
        }
        if (diagnostic.code === ErrorCode.EnumValueMismatch && "values" in diagnostic.data && Array.isArray(diagnostic.data.values)) {
            return diagnostic.data.values;
        } else if (diagnostic.code === ErrorCode.PropertyExpected && "properties" in diagnostic.data && Array.isArray(diagnostic.data.properties)) {
            return diagnostic.data.properties;
        }
    }
    getQuickFixForPropertyOrValueMismatch(diagnostics, document) {
        const results = [];
        for (const diagnostic of diagnostics){
            const values = this.getPossibleQuickFixValues(diagnostic);
            if (!(values == null ? void 0 : values.length)) {
                continue;
            }
            for (const value1 of values){
                results.push(CodeAction.create(value1, createWorkspaceEdit(document.uri, [
                    TextEdit.replace(diagnostic.range, value1)
                ]), CodeActionKind.QuickFix));
            }
        }
        return results;
    }
    constructor(clientCapabilities){
        this.clientCapabilities = clientCapabilities;
        this.indentation = "  ";
    }
};
function getNodeForDiagnostic(document, diagnostic) {
    const yamlDocuments = yamlDocumentsCache.getYamlDocument(document);
    const startOffset = document.offsetAt(diagnostic.range.start);
    const yamlDoc = matchOffsetToDocument(startOffset, yamlDocuments);
    const node = yamlDoc.getNodeFromOffset(startOffset);
    return node;
}
function createWorkspaceEdit(uri, edits) {
    const changes = {};
    changes[uri] = edits;
    const edit = {
        changes
    };
    return edit;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlOnTypeFormatting.js
init_main();
function doDocumentOnTypeFormatting(document, params) {
    const { position } = params;
    const tb = new TextBuffer(document);
    if (params.ch === "\n") {
        const previousLine = tb.getLineContent(position.line - 1);
        if (previousLine.trimRight().endsWith(":")) {
            const currentLine = tb.getLineContent(position.line);
            const subLine = currentLine.substring(position.character, currentLine.length);
            const isInArray = previousLine.indexOf(" - ") !== -1;
            if (subLine.trimRight().length === 0) {
                const indentationFix = position.character - (previousLine.length - previousLine.trimLeft().length);
                if (indentationFix === params.options.tabSize && !isInArray) {
                    return;
                }
                const result = [];
                if (currentLine.length > 0) {
                    result.push(TextEdit.del(Range.create(position, Position.create(position.line, currentLine.length - 1))));
                }
                result.push(TextEdit.insert(position, " ".repeat(params.options.tabSize + (isInArray ? 2 - indentationFix : 0))));
                return result;
            }
            if (isInArray) {
                return [
                    TextEdit.insert(position, " ".repeat(params.options.tabSize))
                ];
            }
        }
        if (previousLine.trimRight().endsWith("|")) {
            return [
                TextEdit.insert(position, " ".repeat(params.options.tabSize))
            ];
        }
        if (previousLine.includes(" - ") && !previousLine.includes(": ")) {
            return [
                TextEdit.insert(position, "- ")
            ];
        }
        if (previousLine.includes(" - ") && previousLine.includes(": ")) {
            return [
                TextEdit.insert(position, "  ")
            ];
        }
    }
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCodeLens.js
init_main();
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/schemaUrls.js
var JSON_SCHEMASTORE_URL = "https://www.schemastore.org/api/json/catalog.json";
function getSchemaUrls(schema4) {
    const result = /* @__PURE__ */ new Map();
    if (!schema4) {
        return result;
    }
    if (schema4.url) {
        if (schema4.url.startsWith("schemaservice://combinedSchema/")) {
            addSchemasForOf(schema4, result);
        } else {
            result.set(schema4.url, schema4);
        }
    } else {
        addSchemasForOf(schema4, result);
    }
    return result;
}
function addSchemasForOf(schema4, result) {
    if (schema4.allOf) {
        addInnerSchemaUrls(schema4.allOf, result);
    }
    if (schema4.anyOf) {
        addInnerSchemaUrls(schema4.anyOf, result);
    }
    if (schema4.oneOf) {
        addInnerSchemaUrls(schema4.oneOf, result);
    }
}
function addInnerSchemaUrls(schemas2, result) {
    for (const subSchema of schemas2){
        if (!isBoolean2(subSchema) && subSchema.url && !result.has(subSchema.url)) {
            result.set(subSchema.url, subSchema);
        }
    }
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCodeLens.js
var YamlCodeLens = class {
    async getCodeLens(document) {
        var _a;
        const result = [];
        try {
            const yamlDocument = yamlDocumentsCache.getYamlDocument(document);
            let schemaUrls = /* @__PURE__ */ new Map();
            for (const currentYAMLDoc of yamlDocument.documents){
                const schema4 = await this.schemaService.getSchemaForResource(document.uri, currentYAMLDoc);
                if (schema4 == null ? void 0 : schema4.schema) {
                    schemaUrls = new Map([
                        ...getSchemaUrls(schema4 == null ? void 0 : schema4.schema),
                        ...schemaUrls
                    ]);
                }
            }
            for (const urlToSchema of schemaUrls){
                const lens = CodeLens.create(Range.create(0, 0, 0, 0));
                lens.command = {
                    title: getSchemaTitle(urlToSchema[1], urlToSchema[0]),
                    command: YamlCommands.JUMP_TO_SCHEMA,
                    arguments: [
                        urlToSchema[0]
                    ]
                };
                result.push(lens);
            }
        } catch (err) {
            (_a = this.telemetry) == null ? void 0 : _a.sendError("yaml.codeLens.error", err);
        }
        return result;
    }
    resolveCodeLens(param) {
        return param;
    }
    constructor(schemaService, telemetry){
        this.schemaService = schemaService;
        this.telemetry = telemetry;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCompletion.js
init_main();
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/indentationGuesser.js
var SpacesDiffResult = class {
    constructor(){
        this.spacesDiff = 0;
        this.looksLikeAlignment = false;
    }
};
function spacesDiff(a2, aLength, b, bLength, result) {
    result.spacesDiff = 0;
    result.looksLikeAlignment = false;
    let i;
    for(i = 0; i < aLength && i < bLength; i++){
        const aCharCode = a2.charCodeAt(i);
        const bCharCode = b.charCodeAt(i);
        if (aCharCode !== bCharCode) {
            break;
        }
    }
    let aSpacesCnt = 0, aTabsCount = 0;
    for(let j = i; j < aLength; j++){
        const aCharCode = a2.charCodeAt(j);
        if (aCharCode === 32) {
            aSpacesCnt++;
        } else {
            aTabsCount++;
        }
    }
    let bSpacesCnt = 0, bTabsCount = 0;
    for(let j = i; j < bLength; j++){
        const bCharCode = b.charCodeAt(j);
        if (bCharCode === 32) {
            bSpacesCnt++;
        } else {
            bTabsCount++;
        }
    }
    if (aSpacesCnt > 0 && aTabsCount > 0) {
        return;
    }
    if (bSpacesCnt > 0 && bTabsCount > 0) {
        return;
    }
    const tabsDiff = Math.abs(aTabsCount - bTabsCount);
    const spacesDiff2 = Math.abs(aSpacesCnt - bSpacesCnt);
    if (tabsDiff === 0) {
        result.spacesDiff = spacesDiff2;
        if (spacesDiff2 > 0 && 0 <= bSpacesCnt - 1 && bSpacesCnt - 1 < a2.length && bSpacesCnt < b.length) {
            if (b.charCodeAt(bSpacesCnt) !== 32 && a2.charCodeAt(bSpacesCnt - 1) === 32) {
                if (a2.charCodeAt(a2.length - 1) === 44) {
                    result.looksLikeAlignment = true;
                }
            }
        }
        return;
    }
    if (spacesDiff2 % tabsDiff === 0) {
        result.spacesDiff = spacesDiff2 / tabsDiff;
    }
}
function guessIndentation(source, defaultTabSize, defaultInsertSpaces) {
    const linesCount = Math.min(source.getLineCount(), 1e4);
    let linesIndentedWithTabsCount = 0;
    let linesIndentedWithSpacesCount = 0;
    let previousLineText = "";
    let previousLineIndentation = 0;
    const ALLOWED_TAB_SIZE_GUESSES = [
        2,
        4,
        6,
        8,
        3,
        5,
        7
    ];
    const MAX_ALLOWED_TAB_SIZE_GUESS = 8;
    const spacesDiffCount = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ];
    const tmp = new SpacesDiffResult();
    for(let lineNumber = 1; lineNumber <= linesCount; lineNumber++){
        const currentLineLength = source.getLineLength(lineNumber);
        const currentLineText = source.getLineContent(lineNumber);
        const useCurrentLineText = currentLineLength <= 65536;
        let currentLineHasContent = false;
        let currentLineIndentation = 0;
        let currentLineSpacesCount = 0;
        let currentLineTabsCount = 0;
        for(let j = 0, lenJ = currentLineLength; j < lenJ; j++){
            const charCode = useCurrentLineText ? currentLineText.charCodeAt(j) : source.getLineCharCode(lineNumber, j);
            if (charCode === 9) {
                currentLineTabsCount++;
            } else if (charCode === 32) {
                currentLineSpacesCount++;
            } else {
                currentLineHasContent = true;
                currentLineIndentation = j;
                break;
            }
        }
        if (!currentLineHasContent) {
            continue;
        }
        if (currentLineTabsCount > 0) {
            linesIndentedWithTabsCount++;
        } else if (currentLineSpacesCount > 1) {
            linesIndentedWithSpacesCount++;
        }
        spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation, tmp);
        if (tmp.looksLikeAlignment) {
            if (!(defaultInsertSpaces && defaultTabSize === tmp.spacesDiff)) {
                continue;
            }
        }
        const currentSpacesDiff = tmp.spacesDiff;
        if (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {
            spacesDiffCount[currentSpacesDiff]++;
        }
        previousLineText = currentLineText;
        previousLineIndentation = currentLineIndentation;
    }
    let insertSpaces = defaultInsertSpaces;
    if (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {
        insertSpaces = linesIndentedWithTabsCount < linesIndentedWithSpacesCount;
    }
    let tabSize = defaultTabSize;
    if (insertSpaces) {
        let tabSizeScore = insertSpaces ? 0 : 0.1 * linesCount;
        ALLOWED_TAB_SIZE_GUESSES.forEach((possibleTabSize)=>{
            const possibleTabSizeScore = spacesDiffCount[possibleTabSize];
            if (possibleTabSizeScore > tabSizeScore) {
                tabSizeScore = possibleTabSizeScore;
                tabSize = possibleTabSize;
            }
        });
        if (tabSize === 4 && spacesDiffCount[4] > 0 && spacesDiffCount[2] > 0 && spacesDiffCount[2] >= spacesDiffCount[4] / 2) {
            tabSize = 2;
        }
    }
    return {
        insertSpaces,
        tabSize
    };
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/utils/json.js
function stringifyObject2(obj, indent, stringifyLiteral, settings, depth = 0, consecutiveArrays = 0) {
    if (obj !== null && typeof obj === "object") {
        const newIndent = depth === 0 && settings.shouldIndentWithTab || depth > 0 ? indent + settings.indentation : "";
        if (Array.isArray(obj)) {
            consecutiveArrays += 1;
            if (obj.length === 0) {
                return "";
            }
            let result = "";
            for(let i = 0; i < obj.length; i++){
                let pseudoObj = obj[i];
                if (typeof obj[i] !== "object") {
                    result += "\n" + newIndent + "- " + stringifyLiteral(obj[i]);
                    continue;
                }
                if (!Array.isArray(obj[i])) {
                    pseudoObj = prependToObject(obj[i], consecutiveArrays);
                }
                result += stringifyObject2(pseudoObj, indent, stringifyLiteral, settings, depth += 1, consecutiveArrays);
            }
            return result;
        } else {
            const keys = Object.keys(obj);
            if (keys.length === 0) {
                return "";
            }
            let result = depth === 0 && settings.newLineFirst || depth > 0 ? "\n" : "";
            let isFirstProp = true;
            for(let i = 0; i < keys.length; i++){
                const key = keys[i];
                if (depth === 0 && settings.existingProps.includes(key)) {
                    continue;
                }
                const isObject = typeof obj[key] === "object";
                const colonDelimiter = isObject ? ":" : ": ";
                const parentArrayCompensation = isObject && /^\s|-/.test(key) ? settings.indentation : "";
                const objectIndent = newIndent + parentArrayCompensation;
                const lineBreak = isFirstProp ? "" : "\n";
                if (depth === 0 && isFirstProp && !settings.indentFirstObject) {
                    const value1 = stringifyObject2(obj[key], objectIndent, stringifyLiteral, settings, depth + 1, 0);
                    result += lineBreak + indent + key + colonDelimiter + value1;
                } else {
                    const value1 = stringifyObject2(obj[key], objectIndent, stringifyLiteral, settings, depth + 1, 0);
                    result += lineBreak + newIndent + key + colonDelimiter + value1;
                }
                isFirstProp = false;
            }
            return result;
        }
    }
    return stringifyLiteral(obj);
}
function prependToObject(obj, consecutiveArrays) {
    const newObj = {};
    for(let i = 0; i < Object.keys(obj).length; i++){
        const key = Object.keys(obj)[i];
        if (i === 0) {
            newObj["- ".repeat(consecutiveArrays) + key] = obj[key];
        } else {
            newObj["  ".repeat(consecutiveArrays) + key] = obj[key];
        }
    }
    return newObj;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlCompletion.js
var localize9 = loadMessageBundle();
var doubleQuotesEscapeRegExp = /[\\]+"/g;
var parentCompletionKind = lib_CompletionItemKind.Class;
var existingProposeItem = "__";
var YamlCompletion = class {
    configure(languageSettings) {
        if (languageSettings) {
            this.completionEnabled = languageSettings.completion;
        }
        this.customTags = languageSettings.customTags;
        this.yamlVersion = languageSettings.yamlVersion;
        this.configuredIndentation = languageSettings.indentation;
        this.disableDefaultProperties = languageSettings.disableDefaultProperties;
        this.parentSkeletonSelectedFirst = languageSettings.parentSkeletonSelectedFirst;
    }
    async doComplete(document, position, isKubernetes = false, doComplete = true) {
        var _a;
        const result = CompletionList.create([], false);
        if (!this.completionEnabled) {
            return result;
        }
        const doc = this.yamlDocument.getYamlDocument(document, {
            customTags: this.customTags,
            yamlVersion: this.yamlVersion
        }, true);
        const textBuffer = new TextBuffer(document);
        if (!this.configuredIndentation) {
            const indent = guessIndentation(textBuffer, 2, true);
            this.indentation = indent.insertSpaces ? " ".repeat(indent.tabSize) : "	";
        } else {
            this.indentation = this.configuredIndentation;
        }
        setKubernetesParserOption(doc.documents, isKubernetes);
        for (const jsonDoc of doc.documents){
            jsonDoc.uri = document.uri;
        }
        const offset = document.offsetAt(position);
        const text = document.getText();
        if (text.charAt(offset - 1) === ":") {
            return Promise.resolve(result);
        }
        let currentDoc = matchOffsetToDocument(offset, doc);
        if (currentDoc === null) {
            return Promise.resolve(result);
        }
        currentDoc = currentDoc.clone();
        let [node, foundByClosest] = currentDoc.getNodeFromPosition(offset, textBuffer, this.indentation.length);
        const currentWord = this.getCurrentWord(document, offset);
        let lineContent = textBuffer.getLineContent(position.line);
        const lineAfterPosition = lineContent.substring(position.character);
        const areOnlySpacesAfterPosition = /^[ ]+\n?$/.test(lineAfterPosition);
        this.arrayPrefixIndentation = "";
        let overwriteRange = null;
        if (areOnlySpacesAfterPosition) {
            overwriteRange = Range.create(position, Position.create(position.line, lineContent.length));
            const isOnlyWhitespace = lineContent.trim().length === 0;
            const isOnlyDash = lineContent.match(/^\s*(-)\s*$/);
            if (node && isScalar(node) && !isOnlyWhitespace && !isOnlyDash) {
                const lineToPosition = lineContent.substring(0, position.character);
                const matches = // get indentation of unfinished property (between indent and cursor)
                lineToPosition.match(/^[\s-]*([^:]+)?$/) || // OR get unfinished value (between colon and cursor)
                lineToPosition.match(/:[ \t]((?!:[ \t]).*)$/);
                if (matches == null ? void 0 : matches[1]) {
                    overwriteRange = Range.create(Position.create(position.line, position.character - matches[1].length), Position.create(position.line, lineContent.length));
                }
            }
        } else if (node && isScalar(node) && node.value === "null") {
            const nodeStartPos = document.positionAt(node.range[0]);
            nodeStartPos.character += 1;
            const nodeEndPos = document.positionAt(node.range[2]);
            nodeEndPos.character += 1;
            overwriteRange = Range.create(nodeStartPos, nodeEndPos);
        } else if (node && isScalar(node) && node.value) {
            const start = document.positionAt(node.range[0]);
            overwriteRange = Range.create(start, document.positionAt(node.range[1]));
        } else if (node && isScalar(node) && node.value === null && currentWord === "-") {
            overwriteRange = Range.create(position, position);
            this.arrayPrefixIndentation = " ";
        } else {
            let overwriteStart = offset - currentWord.length;
            if (overwriteStart > 0 && text[overwriteStart - 1] === '"') {
                overwriteStart--;
            }
            overwriteRange = Range.create(document.positionAt(overwriteStart), position);
        }
        const proposed = {};
        const collector = {
            add: (completionItem, oneOfSchema)=>{
                const addSuggestionForParent = function(completionItem2) {
                    var _a2;
                    const existsInYaml = ((_a2 = proposed[completionItem2.label]) == null ? void 0 : _a2.label) === existingProposeItem;
                    if (existsInYaml) {
                        return;
                    }
                    const schema4 = completionItem2.parent.schema;
                    const schemaType = getSchemaTypeName(schema4);
                    const schemaDescription = schema4.markdownDescription || schema4.description;
                    let parentCompletion = result.items.find((item)=>{
                        var _a3;
                        return ((_a3 = item.parent) == null ? void 0 : _a3.schema) === schema4 && item.kind === parentCompletionKind;
                    });
                    if (parentCompletion && parentCompletion.parent.insertTexts.includes(completionItem2.insertText)) {
                        return;
                    } else if (!parentCompletion) {
                        parentCompletion = {
                            ...completionItem2,
                            label: schemaType,
                            documentation: schemaDescription,
                            sortText: "_" + schemaType,
                            kind: parentCompletionKind
                        };
                        parentCompletion.label = parentCompletion.label || completionItem2.label;
                        parentCompletion.parent.insertTexts = [
                            completionItem2.insertText
                        ];
                        result.items.push(parentCompletion);
                    } else {
                        parentCompletion.parent.insertTexts.push(completionItem2.insertText);
                    }
                };
                const isForParentCompletion = !!completionItem.parent;
                let label = completionItem.label;
                if (!label) {
                    console.warn(`Ignoring CompletionItem without label: ${JSON.stringify(completionItem)}`);
                    return;
                }
                if (!isString2(label)) {
                    label = String(label);
                }
                label = label.replace(/[\n]/g, "\u21B5");
                if (label.length > 60) {
                    const shortendedLabel = label.substr(0, 57).trim() + "...";
                    if (!proposed[shortendedLabel]) {
                        label = shortendedLabel;
                    }
                }
                if (completionItem.insertText.endsWith("$1") && !isForParentCompletion) {
                    completionItem.insertText = completionItem.insertText.substr(0, completionItem.insertText.length - 2);
                }
                if (overwriteRange && overwriteRange.start.line === overwriteRange.end.line) {
                    completionItem.textEdit = TextEdit.replace(overwriteRange, completionItem.insertText);
                }
                completionItem.label = label;
                if (isForParentCompletion) {
                    addSuggestionForParent(completionItem);
                    return;
                }
                if (this.arrayPrefixIndentation) {
                    this.updateCompletionText(completionItem, this.arrayPrefixIndentation + completionItem.insertText);
                }
                const existing = proposed[label];
                const isInsertTextDifferent = (existing == null ? void 0 : existing.label) !== existingProposeItem && (existing == null ? void 0 : existing.insertText) !== completionItem.insertText;
                if (!existing) {
                    proposed[label] = completionItem;
                    result.items.push(completionItem);
                } else if (isInsertTextDifferent) {
                    const mergedText = this.mergeSimpleInsertTexts(label, existing.insertText, completionItem.insertText, oneOfSchema);
                    if (mergedText) {
                        this.updateCompletionText(existing, mergedText);
                    } else {
                        proposed[label] = completionItem;
                        result.items.push(completionItem);
                    }
                }
                if (existing && !existing.documentation && completionItem.documentation) {
                    existing.documentation = completionItem.documentation;
                }
            },
            error: (message)=>{
                var _a2;
                (_a2 = this.telemetry) == null ? void 0 : _a2.sendError("yaml.completion.error", message);
            },
            log: (message)=>{
                console.log(message);
            },
            getNumberOfProposals: ()=>{
                return result.items.length;
            },
            result,
            proposed
        };
        if (this.customTags && this.customTags.length > 0) {
            this.getCustomTagValueCompletions(collector);
        }
        if (lineContent.endsWith("\n")) {
            lineContent = lineContent.substr(0, lineContent.length - 1);
        }
        try {
            const schema4 = await this.schemaService.getSchemaForResource(document.uri, currentDoc);
            if (!schema4 || schema4.errors.length) {
                if (position.line === 0 && position.character === 0 && !isModeline(lineContent)) {
                    const inlineSchemaCompletion = {
                        kind: lib_CompletionItemKind.Text,
                        label: "Inline schema",
                        insertText: "# yaml-language-server: $schema=",
                        insertTextFormat: lib_InsertTextFormat.PlainText
                    };
                    result.items.push(inlineSchemaCompletion);
                }
            }
            if (isModeline(lineContent) || isInComment(doc.tokens, offset)) {
                const schemaIndex = lineContent.indexOf("$schema=");
                if (schemaIndex !== -1 && schemaIndex + "$schema=".length <= position.character) {
                    this.schemaService.getAllSchemas().forEach((schema5)=>{
                        var _a2;
                        const schemaIdCompletion = {
                            kind: lib_CompletionItemKind.Constant,
                            label: (_a2 = schema5.name) != null ? _a2 : schema5.uri,
                            detail: schema5.description,
                            insertText: schema5.uri,
                            insertTextFormat: lib_InsertTextFormat.PlainText,
                            insertTextMode: InsertTextMode.asIs
                        };
                        result.items.push(schemaIdCompletion);
                    });
                }
                return result;
            }
            if (!schema4 || schema4.errors.length) {
                return result;
            }
            let currentProperty = null;
            if (!node) {
                if (!currentDoc.internalDocument.contents || isScalar(currentDoc.internalDocument.contents)) {
                    const map2 = currentDoc.internalDocument.createNode({});
                    map2.range = [
                        offset,
                        offset + 1,
                        offset + 1
                    ];
                    currentDoc.internalDocument.contents = map2;
                    currentDoc.updateFromInternalDocument();
                    node = map2;
                } else {
                    node = currentDoc.findClosestNode(offset, textBuffer);
                    foundByClosest = true;
                }
            }
            const originalNode = node;
            if (node) {
                if (lineContent.length === 0) {
                    node = currentDoc.internalDocument.contents;
                } else {
                    const parent = currentDoc.getParent(node);
                    if (parent) {
                        if (isScalar(node)) {
                            if (node.value) {
                                if (isPair(parent)) {
                                    if (parent.value === node) {
                                        if (lineContent.trim().length > 0 && lineContent.indexOf(":") < 0) {
                                            const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                                            const parentParent = currentDoc.getParent(parent);
                                            if (isSeq(currentDoc.internalDocument.contents)) {
                                                const index = indexOf(currentDoc.internalDocument.contents, parent);
                                                if (typeof index === "number") {
                                                    currentDoc.internalDocument.set(index, map2);
                                                    currentDoc.updateFromInternalDocument();
                                                }
                                            } else if (parentParent && (isMap(parentParent) || isSeq(parentParent))) {
                                                parentParent.set(parent.key, map2);
                                                currentDoc.updateFromInternalDocument();
                                            } else {
                                                currentDoc.internalDocument.set(parent.key, map2);
                                                currentDoc.updateFromInternalDocument();
                                            }
                                            currentProperty = map2.items[0];
                                            node = map2;
                                        } else if (lineContent.trim().length === 0) {
                                            const parentParent = currentDoc.getParent(parent);
                                            if (parentParent) {
                                                node = parentParent;
                                            }
                                        }
                                    } else if (parent.key === node) {
                                        const parentParent = currentDoc.getParent(parent);
                                        currentProperty = parent;
                                        if (parentParent) {
                                            node = parentParent;
                                        }
                                    }
                                } else if (isSeq(parent)) {
                                    if (lineContent.trim().length > 0) {
                                        const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                                        parent.delete(node);
                                        parent.add(map2);
                                        currentDoc.updateFromInternalDocument();
                                        node = map2;
                                    } else {
                                        node = parent;
                                    }
                                }
                            } else if (node.value === null) {
                                if (isPair(parent)) {
                                    if (parent.key === node) {
                                        node = parent;
                                    } else {
                                        if (isNode(parent.key) && parent.key.range) {
                                            const parentParent = currentDoc.getParent(parent);
                                            if (foundByClosest && parentParent && isMap(parentParent) && isMapContainsEmptyPair(parentParent)) {
                                                node = parentParent;
                                            } else {
                                                const parentPosition = document.positionAt(parent.key.range[0]);
                                                if (position.character > parentPosition.character && position.line !== parentPosition.line) {
                                                    const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                                                    if (parentParent && (isMap(parentParent) || isSeq(parentParent))) {
                                                        parentParent.set(parent.key, map2);
                                                        currentDoc.updateFromInternalDocument();
                                                    } else {
                                                        currentDoc.internalDocument.set(parent.key, map2);
                                                        currentDoc.updateFromInternalDocument();
                                                    }
                                                    currentProperty = map2.items[0];
                                                    node = map2;
                                                } else if (parentPosition.character === position.character) {
                                                    if (parentParent) {
                                                        node = parentParent;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else if (isSeq(parent)) {
                                    if (lineContent.charAt(position.character - 1) !== "-") {
                                        const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                                        parent.delete(node);
                                        parent.add(map2);
                                        currentDoc.updateFromInternalDocument();
                                        node = map2;
                                    } else if (lineContent.charAt(position.character - 1) === "-") {
                                        const map2 = this.createTempObjNode("", node, currentDoc);
                                        parent.delete(node);
                                        parent.add(map2);
                                        currentDoc.updateFromInternalDocument();
                                        node = map2;
                                    } else {
                                        node = parent;
                                    }
                                }
                            }
                        } else if (isMap(node)) {
                            if (!foundByClosest && lineContent.trim().length === 0 && isSeq(parent)) {
                                const nextLine = textBuffer.getLineContent(position.line + 1);
                                if (textBuffer.getLineCount() === position.line + 1 || nextLine.trim().length === 0) {
                                    node = parent;
                                }
                            }
                        }
                    } else if (isScalar(node)) {
                        const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                        currentDoc.internalDocument.contents = map2;
                        currentDoc.updateFromInternalDocument();
                        currentProperty = map2.items[0];
                        node = map2;
                    } else if (isMap(node)) {
                        for (const pair of node.items){
                            if (isNode(pair.value) && pair.value.range && pair.value.range[0] === offset + 1) {
                                node = pair.value;
                            }
                        }
                    } else if (isSeq(node)) {
                        if (lineContent.charAt(position.character - 1) !== "-") {
                            const map2 = this.createTempObjNode(currentWord, node, currentDoc);
                            map2.items = [];
                            currentDoc.updateFromInternalDocument();
                            for (const pair of node.items){
                                if (isMap(pair)) {
                                    pair.items.forEach((value1)=>{
                                        map2.items.push(value1);
                                    });
                                }
                            }
                            node = map2;
                        }
                    }
                }
            }
            if (node && isMap(node)) {
                const properties = node.items;
                for (const p of properties){
                    if (!currentProperty || currentProperty !== p) {
                        if (isScalar(p.key)) {
                            proposed[p.key.value + ""] = CompletionItem.create(existingProposeItem);
                        }
                    }
                }
                this.addPropertyCompletions(schema4, currentDoc, node, originalNode, "", collector, textBuffer, overwriteRange, doComplete);
                if (!schema4 && currentWord.length > 0 && text.charAt(offset - currentWord.length - 1) !== '"') {
                    collector.add({
                        kind: lib_CompletionItemKind.Property,
                        label: currentWord,
                        insertText: this.getInsertTextForProperty(currentWord, null, ""),
                        insertTextFormat: lib_InsertTextFormat.Snippet
                    });
                }
            }
            const types = {};
            this.getValueCompletions(schema4, currentDoc, node, offset, document, collector, types, doComplete);
        } catch (err) {
            (_a = this.telemetry) == null ? void 0 : _a.sendError("yaml.completion.error", err);
        }
        this.finalizeParentCompletion(result);
        const uniqueItems = result.items.filter((arr, index, self2)=>index === self2.findIndex((item)=>item.label === arr.label && item.insertText === arr.insertText && item.kind === arr.kind));
        if ((uniqueItems == null ? void 0 : uniqueItems.length) > 0) {
            result.items = uniqueItems;
        }
        return result;
    }
    updateCompletionText(completionItem, text) {
        completionItem.insertText = text;
        if (completionItem.textEdit) {
            completionItem.textEdit.newText = text;
        }
    }
    mergeSimpleInsertTexts(label, existingText, addingText, oneOfSchema) {
        const containsNewLineAfterColon = (value1)=>{
            return value1.includes("\n");
        };
        const startWithNewLine = (value1)=>{
            return value1.startsWith("\n");
        };
        const isNullObject = (value1)=>{
            const index = value1.indexOf("\n");
            return index > 0 && value1.substring(index, value1.length).trim().length === 0;
        };
        if (containsNewLineAfterColon(existingText) || containsNewLineAfterColon(addingText)) {
            if (oneOfSchema && isNullObject(existingText) && !isNullObject(addingText) && !startWithNewLine(addingText)) {
                return addingText;
            }
            return void 0;
        }
        const existingValues = this.getValuesFromInsertText(existingText);
        const addingValues = this.getValuesFromInsertText(addingText);
        const newValues = Array.prototype.concat(existingValues, addingValues);
        if (!newValues.length) {
            return void 0;
        } else if (newValues.length === 1) {
            return `${label}: \${1:${newValues[0]}}`;
        } else {
            return `${label}: \${1|${newValues.join(",")}|}`;
        }
    }
    getValuesFromInsertText(insertText) {
        const value1 = insertText.substring(insertText.indexOf(":") + 1).trim();
        if (!value1) {
            return [];
        }
        const valueMath = value1.match(/^\${1[|:]([^|]*)+\|?}$/);
        if (valueMath) {
            return valueMath[1].split(",");
        }
        return [
            value1
        ];
    }
    finalizeParentCompletion(result) {
        const reindexText = (insertTexts)=>{
            let max$index = 0;
            return insertTexts.map((text)=>{
                const match = text.match(/\$([0-9]+)|\${[0-9]+:/g);
                if (!match) {
                    return text;
                }
                const max$indexLocal = match.map((m)=>+m.replace(/\${([0-9]+)[:|]/g, "$1").replace("$", "")).reduce((p, n)=>n > p ? n : p, 0);
                const reindexedStr = text.replace(/\$([0-9]+)/g, (s, args)=>"$" + (+args + max$index)).replace(/\${([0-9]+)[:|]/g, (s, args)=>"${" + (+args + max$index) + ":");
                max$index += max$indexLocal;
                return reindexedStr;
            });
        };
        result.items.forEach((completionItem)=>{
            if (isParentCompletionItem(completionItem)) {
                const indent = completionItem.parent.indent || "";
                const reindexedTexts = reindexText(completionItem.parent.insertTexts);
                let insertText = reindexedTexts.join(`
${indent}`);
                if (insertText.endsWith("$1")) {
                    insertText = insertText.substring(0, insertText.length - 2);
                }
                completionItem.insertText = this.arrayPrefixIndentation + insertText;
                if (completionItem.textEdit) {
                    completionItem.textEdit.newText = completionItem.insertText;
                }
                const mdText = insertText.replace(/\${[0-9]+[:|](.*)}/g, (s, arg)=>arg).replace(/\$([0-9]+)/g, "");
                const originalDocumentation = completionItem.documentation ? [
                    completionItem.documentation,
                    "",
                    "----",
                    ""
                ] : [];
                completionItem.documentation = {
                    kind: MarkupKind.Markdown,
                    value: [
                        ...originalDocumentation,
                        "```yaml",
                        indent + mdText,
                        "```"
                    ].join("\n")
                };
                delete completionItem.parent;
            }
        });
    }
    createTempObjNode(currentWord, node, currentDoc) {
        const obj = {};
        obj[currentWord] = null;
        const map2 = currentDoc.internalDocument.createNode(obj);
        map2.range = node.range;
        map2.items[0].key.range = node.range;
        map2.items[0].value.range = node.range;
        return map2;
    }
    addPropertyCompletions(schema4, doc, node, originalNode, separatorAfter, collector, textBuffer, overwriteRange, doComplete) {
        var _a, _b, _c;
        const matchingSchemas = doc.getMatchingSchemas(schema4.schema, -1, null, doComplete);
        const existingKey = textBuffer.getText(overwriteRange);
        const lineContent = textBuffer.getLineContent(overwriteRange.start.line);
        const hasOnlyWhitespace = lineContent.trim().length === 0;
        const hasColon = lineContent.indexOf(":") !== -1;
        const isInArray = lineContent.trimLeft().indexOf("-") === 0;
        const nodeParent = doc.getParent(node);
        const matchOriginal = matchingSchemas.find((it)=>it.node.internalNode === originalNode && it.schema.properties);
        const oneOfSchema = matchingSchemas.filter((schema5)=>schema5.schema.oneOf).map((oneOfSchema2)=>oneOfSchema2.schema.oneOf)[0];
        let didOneOfSchemaMatches = false;
        if ((oneOfSchema == null ? void 0 : oneOfSchema.length) < matchingSchemas.length) {
            oneOfSchema == null ? void 0 : oneOfSchema.forEach((property, index)=>{
                var _a2, _b2;
                if (!((_a2 = matchingSchemas[index]) == null ? void 0 : _a2.schema.oneOf) && ((_b2 = matchingSchemas[index]) == null ? void 0 : _b2.schema.properties) === property.properties) {
                    didOneOfSchemaMatches = true;
                }
            });
        }
        for (const schema5 of matchingSchemas){
            if ((schema5.node.internalNode === node && !matchOriginal || schema5.node.internalNode === originalNode && !hasColon || ((_a = schema5.node.parent) == null ? void 0 : _a.internalNode) === originalNode && !hasColon) && !schema5.inverted) {
                this.collectDefaultSnippets(schema5.schema, separatorAfter, collector, {
                    newLineFirst: false,
                    indentFirstObject: false,
                    shouldIndentWithTab: isInArray
                });
                const schemaProperties = schema5.schema.properties;
                if (schemaProperties) {
                    const maxProperties = schema5.schema.maxProperties;
                    if (maxProperties === void 0 || node.items === void 0 || node.items.length < maxProperties || node.items.length === maxProperties && !hasOnlyWhitespace) {
                        for(const key in schemaProperties){
                            if (Object.prototype.hasOwnProperty.call(schemaProperties, key)) {
                                const propertySchema = schemaProperties[key];
                                if (typeof propertySchema === "object" && !propertySchema.deprecationMessage && !propertySchema["doNotSuggest"]) {
                                    let identCompensation = "";
                                    if (nodeParent && isSeq(nodeParent) && node.items.length <= 1 && !hasOnlyWhitespace) {
                                        const sourceText = textBuffer.getText();
                                        const indexOfSlash = sourceText.lastIndexOf("-", node.range[0] - 1);
                                        if (indexOfSlash >= 0) {
                                            const overwriteChars = overwriteRange.end.character - overwriteRange.start.character;
                                            identCompensation = " " + sourceText.slice(indexOfSlash + 1, node.range[1] - overwriteChars);
                                        }
                                    }
                                    identCompensation += this.arrayPrefixIndentation;
                                    let pair;
                                    if (propertySchema.type === "array" && (pair = node.items.find((it)=>isScalar(it.key) && it.key.range && it.key.value === key && isScalar(it.value) && !it.value.value && textBuffer.getPosition(it.key.range[2]).line === overwriteRange.end.line - 1)) && pair) {
                                        if (Array.isArray(propertySchema.items)) {
                                            this.addSchemaValueCompletions(propertySchema.items[0], separatorAfter, collector, {}, "property");
                                        } else if (typeof propertySchema.items === "object" && propertySchema.items.type === "object") {
                                            this.addArrayItemValueCompletion(propertySchema.items, separatorAfter, collector);
                                        }
                                    }
                                    let insertText = key;
                                    if (!key.startsWith(existingKey) || !hasColon) {
                                        insertText = this.getInsertTextForProperty(key, propertySchema, separatorAfter, identCompensation + this.indentation);
                                    }
                                    const isNodeNull = isScalar(originalNode) && originalNode.value === null || isMap(originalNode) && originalNode.items.length === 0;
                                    const existsParentCompletion = ((_b = schema5.schema.required) == null ? void 0 : _b.length) > 0;
                                    if (!this.parentSkeletonSelectedFirst || !isNodeNull || !existsParentCompletion) {
                                        collector.add({
                                            kind: lib_CompletionItemKind.Property,
                                            label: key,
                                            insertText,
                                            insertTextFormat: lib_InsertTextFormat.Snippet,
                                            documentation: this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || ""
                                        }, didOneOfSchemaMatches);
                                    }
                                    if ((_c = schema5.schema.required) == null ? void 0 : _c.includes(key)) {
                                        collector.add({
                                            label: key,
                                            insertText: this.getInsertTextForProperty(key, propertySchema, separatorAfter, identCompensation + this.indentation),
                                            insertTextFormat: lib_InsertTextFormat.Snippet,
                                            documentation: this.fromMarkup(propertySchema.markdownDescription) || propertySchema.description || "",
                                            parent: {
                                                schema: schema5.schema,
                                                indent: identCompensation
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
                if (nodeParent && isSeq(nodeParent) && isPrimitiveType(schema5.schema)) {
                    this.addSchemaValueCompletions(schema5.schema, separatorAfter, collector, {}, "property", Array.isArray(nodeParent.items));
                }
                if (schema5.schema.propertyNames && schema5.schema.additionalProperties && schema5.schema.type === "object") {
                    const propertyNameSchema = asSchema2(schema5.schema.propertyNames);
                    const label = propertyNameSchema.title || "property";
                    collector.add({
                        kind: lib_CompletionItemKind.Property,
                        label,
                        insertText: `\${1:${label}}: `,
                        insertTextFormat: lib_InsertTextFormat.Snippet,
                        documentation: this.fromMarkup(propertyNameSchema.markdownDescription) || propertyNameSchema.description || ""
                    });
                }
            }
            if (nodeParent && schema5.node.internalNode === nodeParent && schema5.schema.defaultSnippets) {
                if (node.items.length === 1) {
                    this.collectDefaultSnippets(schema5.schema, separatorAfter, collector, {
                        newLineFirst: false,
                        indentFirstObject: false,
                        shouldIndentWithTab: true
                    }, 1);
                } else {
                    this.collectDefaultSnippets(schema5.schema, separatorAfter, collector, {
                        newLineFirst: false,
                        indentFirstObject: true,
                        shouldIndentWithTab: false
                    }, 1);
                }
            }
        }
    }
    getValueCompletions(schema4, doc, node, offset, document, collector, types, doComplete) {
        let parentKey = null;
        if (node && isScalar(node)) {
            node = doc.getParent(node);
        }
        if (!node) {
            this.addSchemaValueCompletions(schema4.schema, "", collector, types, "value");
            return;
        }
        if (isPair(node)) {
            const valueNode = node.value;
            if (valueNode && valueNode.range && offset > valueNode.range[0] + valueNode.range[2]) {
                return;
            }
            parentKey = isScalar(node.key) ? node.key.value + "" : null;
            node = doc.getParent(node);
        }
        if (node && (parentKey !== null || isSeq(node))) {
            const separatorAfter = "";
            const matchingSchemas = doc.getMatchingSchemas(schema4.schema, -1, null, doComplete);
            for (const s of matchingSchemas){
                if (s.node.internalNode === node && !s.inverted && s.schema) {
                    if (s.schema.items) {
                        this.collectDefaultSnippets(s.schema, separatorAfter, collector, {
                            newLineFirst: false,
                            indentFirstObject: false,
                            shouldIndentWithTab: false
                        });
                        if (isSeq(node) && node.items) {
                            if (Array.isArray(s.schema.items)) {
                                const index = this.findItemAtOffset(node, document, offset);
                                if (index < s.schema.items.length) {
                                    this.addSchemaValueCompletions(s.schema.items[index], separatorAfter, collector, types, "value");
                                }
                            } else if (typeof s.schema.items === "object" && (s.schema.items.type === "object" || isAnyOfAllOfOneOfType(s.schema.items))) {
                                this.addSchemaValueCompletions(s.schema.items, separatorAfter, collector, types, "value", true);
                            } else {
                                this.addSchemaValueCompletions(s.schema.items, separatorAfter, collector, types, "value");
                            }
                        }
                    }
                    if (s.schema.properties) {
                        const propertySchema = s.schema.properties[parentKey];
                        if (propertySchema) {
                            this.addSchemaValueCompletions(propertySchema, separatorAfter, collector, types, "value");
                        }
                    }
                    if (s.schema.additionalProperties) {
                        this.addSchemaValueCompletions(s.schema.additionalProperties, separatorAfter, collector, types, "value");
                    }
                }
            }
            if (types["boolean"]) {
                this.addBooleanValueCompletion(true, separatorAfter, collector);
                this.addBooleanValueCompletion(false, separatorAfter, collector);
            }
            if (types["null"]) {
                this.addNullValueCompletion(separatorAfter, collector);
            }
        }
    }
    addArrayItemValueCompletion(schema4, separatorAfter, collector, index) {
        const schemaType = getSchemaTypeName(schema4);
        const insertText = `- ${this.getInsertTextForObject(schema4, separatorAfter).insertText.trimLeft()}`;
        const schemaTypeTitle = schemaType ? " type `" + schemaType + "`" : "";
        const schemaDescription = schema4.description ? " (" + schema4.description + ")" : "";
        const documentation = this.getDocumentationWithMarkdownText(`Create an item of an array${schemaTypeTitle}${schemaDescription}`, insertText);
        collector.add({
            kind: this.getSuggestionKind(schema4.type),
            label: "- (array item) " + (schemaType || index),
            documentation,
            insertText,
            insertTextFormat: lib_InsertTextFormat.Snippet
        });
    }
    getInsertTextForProperty(key, propertySchema, separatorAfter, indent = this.indentation) {
        const propertyText = this.getInsertTextForValue(key, "", "string");
        const resultText = propertyText + ":";
        let value1;
        let nValueProposals = 0;
        if (propertySchema) {
            let type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;
            if (!type) {
                if (propertySchema.properties) {
                    type = "object";
                } else if (propertySchema.items) {
                    type = "array";
                } else if (propertySchema.anyOf) {
                    type = "anyOf";
                }
            }
            if (Array.isArray(propertySchema.defaultSnippets)) {
                if (propertySchema.defaultSnippets.length === 1) {
                    const body = propertySchema.defaultSnippets[0].body;
                    if (isDefined2(body)) {
                        value1 = this.getInsertTextForSnippetValue(body, "", {
                            newLineFirst: true,
                            indentFirstObject: false,
                            shouldIndentWithTab: false
                        }, [], 1);
                        if (!value1.startsWith(" ") && !value1.startsWith("\n")) {
                            value1 = " " + value1;
                        }
                    }
                }
                nValueProposals += propertySchema.defaultSnippets.length;
            }
            if (propertySchema.enum) {
                if (!value1 && propertySchema.enum.length === 1) {
                    value1 = " " + this.getInsertTextForGuessedValue(propertySchema.enum[0], "", type);
                }
                nValueProposals += propertySchema.enum.length;
            }
            if (propertySchema.const) {
                if (!value1) {
                    value1 = this.getInsertTextForGuessedValue(propertySchema.const, "", type);
                    value1 = evaluateTab1Symbol(value1);
                    value1 = " " + value1;
                }
                nValueProposals++;
            }
            if (isDefined2(propertySchema.default)) {
                if (!value1) {
                    value1 = " " + this.getInsertTextForGuessedValue(propertySchema.default, "", type);
                }
                nValueProposals++;
            }
            if (Array.isArray(propertySchema.examples) && propertySchema.examples.length) {
                if (!value1) {
                    value1 = " " + this.getInsertTextForGuessedValue(propertySchema.examples[0], "", type);
                }
                nValueProposals += propertySchema.examples.length;
            }
            if (propertySchema.properties) {
                return `${resultText}
${this.getInsertTextForObject(propertySchema, separatorAfter, indent).insertText}`;
            } else if (propertySchema.items) {
                return `${resultText}
${indent}- ${this.getInsertTextForArray(propertySchema.items, separatorAfter, 1, indent).insertText}`;
            }
            if (nValueProposals === 0) {
                switch(type){
                    case "boolean":
                        value1 = " $1";
                        break;
                    case "string":
                        value1 = " $1";
                        break;
                    case "object":
                        value1 = `
${indent}`;
                        break;
                    case "array":
                        value1 = `
${indent}- `;
                        break;
                    case "number":
                    case "integer":
                        value1 = " ${1:0}";
                        break;
                    case "null":
                        value1 = " ${1:null}";
                        break;
                    case "anyOf":
                        value1 = " $1";
                        break;
                    default:
                        return propertyText;
                }
            }
        }
        if (!value1 || nValueProposals > 1) {
            value1 = " $1";
        }
        return resultText + value1 + separatorAfter;
    }
    getInsertTextForObject(schema4, separatorAfter, indent = this.indentation, insertIndex = 1) {
        let insertText = "";
        if (!schema4.properties) {
            insertText = `${indent}$${insertIndex++}
`;
            return {
                insertText,
                insertIndex
            };
        }
        Object.keys(schema4.properties).forEach((key)=>{
            const propertySchema = schema4.properties[key];
            let type = Array.isArray(propertySchema.type) ? propertySchema.type[0] : propertySchema.type;
            if (!type) {
                if (propertySchema.anyOf) {
                    type = "anyOf";
                }
                if (propertySchema.properties) {
                    type = "object";
                }
                if (propertySchema.items) {
                    type = "array";
                }
            }
            if (schema4.required && schema4.required.indexOf(key) > -1) {
                switch(type){
                    case "boolean":
                    case "string":
                    case "number":
                    case "integer":
                    case "anyOf":
                        {
                            let value1 = propertySchema.default || propertySchema.const;
                            if (value1) {
                                if (type === "string") {
                                    value1 = convertToStringValue(value1);
                                }
                                insertText += `${indent}${key}: \${${insertIndex++}:${value1}}
`;
                            } else {
                                insertText += `${indent}${key}: $${insertIndex++}
`;
                            }
                            break;
                        }
                    case "array":
                        {
                            const arrayInsertResult = this.getInsertTextForArray(propertySchema.items, separatorAfter, insertIndex++, indent);
                            const arrayInsertLines = arrayInsertResult.insertText.split("\n");
                            let arrayTemplate = arrayInsertResult.insertText;
                            if (arrayInsertLines.length > 1) {
                                for(let index = 1; index < arrayInsertLines.length; index++){
                                    const element = arrayInsertLines[index];
                                    arrayInsertLines[index] = `  ${element}`;
                                }
                                arrayTemplate = arrayInsertLines.join("\n");
                            }
                            insertIndex = arrayInsertResult.insertIndex;
                            insertText += `${indent}${key}:
${indent}${this.indentation}- ${arrayTemplate}
`;
                        }
                        break;
                    case "object":
                        {
                            const objectInsertResult = this.getInsertTextForObject(propertySchema, separatorAfter, `${indent}${this.indentation}`, insertIndex++);
                            insertIndex = objectInsertResult.insertIndex;
                            insertText += `${indent}${key}:
${objectInsertResult.insertText}
`;
                        }
                        break;
                }
            } else if (!this.disableDefaultProperties && propertySchema.default !== void 0) {
                switch(type){
                    case "boolean":
                    case "number":
                    case "integer":
                        insertText += `${indent}${key === "null" ? this.getInsertTextForValue(key, "", "string") : key}: \${${insertIndex++}:${propertySchema.default}}
`;
                        break;
                    case "string":
                        insertText += `${indent}${key}: \${${insertIndex++}:${convertToStringValue(propertySchema.default)}}
`;
                        break;
                    case "array":
                    case "object":
                        break;
                }
            }
        });
        if (insertText.trim().length === 0) {
            insertText = `${indent}$${insertIndex++}
`;
        }
        insertText = insertText.trimRight() + separatorAfter;
        return {
            insertText,
            insertIndex
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getInsertTextForArray(schema4, separatorAfter, insertIndex = 1, indent = this.indentation) {
        let insertText = "";
        if (!schema4) {
            insertText = `$${insertIndex++}`;
            return {
                insertText,
                insertIndex
            };
        }
        let type = Array.isArray(schema4.type) ? schema4.type[0] : schema4.type;
        if (!type) {
            if (schema4.properties) {
                type = "object";
            }
            if (schema4.items) {
                type = "array";
            }
        }
        switch(schema4.type){
            case "boolean":
                insertText = `\${${insertIndex++}:false}`;
                break;
            case "number":
            case "integer":
                insertText = `\${${insertIndex++}:0}`;
                break;
            case "string":
                insertText = `\${${insertIndex++}}`;
                break;
            case "object":
                {
                    const objectInsertResult = this.getInsertTextForObject(schema4, separatorAfter, `${indent}  `, insertIndex++);
                    insertText = objectInsertResult.insertText.trimLeft();
                    insertIndex = objectInsertResult.insertIndex;
                }
                break;
        }
        return {
            insertText,
            insertIndex
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getInsertTextForGuessedValue(value1, separatorAfter, type) {
        switch(typeof value1){
            case "object":
                if (value1 === null) {
                    return "${1:null}" + separatorAfter;
                }
                return this.getInsertTextForValue(value1, separatorAfter, type);
            case "string":
                {
                    let snippetValue = JSON.stringify(value1);
                    snippetValue = snippetValue.substr(1, snippetValue.length - 2);
                    snippetValue = this.getInsertTextForPlainText(snippetValue);
                    if (type === "string") {
                        snippetValue = convertToStringValue(snippetValue);
                    }
                    return "${1:" + snippetValue + "}" + separatorAfter;
                }
            case "number":
            case "boolean":
                return "${1:" + value1 + "}" + separatorAfter;
        }
        return this.getInsertTextForValue(value1, separatorAfter, type);
    }
    getInsertTextForPlainText(text) {
        return text.replace(/[\\$}]/g, "\\$&");
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getInsertTextForValue(value1, separatorAfter, type) {
        if (value1 === null) {
            return "null";
        }
        switch(typeof value1){
            case "object":
                {
                    const indent = this.indentation;
                    return this.getInsertTemplateForValue(value1, indent, {
                        index: 1
                    }, separatorAfter);
                }
            case "number":
            case "boolean":
                return this.getInsertTextForPlainText(value1 + separatorAfter);
        }
        type = Array.isArray(type) ? type[0] : type;
        if (type === "string") {
            value1 = convertToStringValue(value1);
        }
        return this.getInsertTextForPlainText(value1 + separatorAfter);
    }
    getInsertTemplateForValue(value1, indent, navOrder, separatorAfter) {
        if (Array.isArray(value1)) {
            let insertText = "\n";
            for (const arrValue of value1){
                insertText += `${indent}- \${${navOrder.index++}:${arrValue}}
`;
            }
            return insertText;
        } else if (typeof value1 === "object") {
            let insertText = "\n";
            for(const key in value1){
                if (Object.prototype.hasOwnProperty.call(value1, key)) {
                    const element = value1[key];
                    insertText += `${indent}\${${navOrder.index++}:${key}}:`;
                    let valueTemplate;
                    if (typeof element === "object") {
                        valueTemplate = `${this.getInsertTemplateForValue(element, indent + this.indentation, navOrder, separatorAfter)}`;
                    } else {
                        valueTemplate = ` \${${navOrder.index++}:${this.getInsertTextForPlainText(element + separatorAfter)}}
`;
                    }
                    insertText += `${valueTemplate}`;
                }
            }
            return insertText;
        }
        return this.getInsertTextForPlainText(value1 + separatorAfter);
    }
    addSchemaValueCompletions(schema4, separatorAfter, collector, types, completionType, isArray) {
        if (typeof schema4 === "object") {
            this.addEnumValueCompletions(schema4, separatorAfter, collector, isArray);
            this.addDefaultValueCompletions(schema4, separatorAfter, collector);
            this.collectTypes(schema4, types);
            if (isArray && completionType === "value" && !isAnyOfAllOfOneOfType(schema4)) {
                this.addArrayItemValueCompletion(schema4, separatorAfter, collector);
            }
            if (Array.isArray(schema4.allOf)) {
                schema4.allOf.forEach((s)=>{
                    return this.addSchemaValueCompletions(s, separatorAfter, collector, types, completionType, isArray);
                });
            }
            if (Array.isArray(schema4.anyOf)) {
                schema4.anyOf.forEach((s)=>{
                    return this.addSchemaValueCompletions(s, separatorAfter, collector, types, completionType, isArray);
                });
            }
            if (Array.isArray(schema4.oneOf)) {
                schema4.oneOf.forEach((s)=>{
                    return this.addSchemaValueCompletions(s, separatorAfter, collector, types, completionType, isArray);
                });
            }
        }
    }
    collectTypes(schema4, types) {
        if (Array.isArray(schema4.enum) || isDefined2(schema4.const)) {
            return;
        }
        const type = schema4.type;
        if (Array.isArray(type)) {
            type.forEach(function(t1) {
                return types[t1] = true;
            });
        } else if (type) {
            types[type] = true;
        }
    }
    addDefaultValueCompletions(schema4, separatorAfter, collector, arrayDepth = 0) {
        let hasProposals = false;
        if (isDefined2(schema4.default)) {
            let type = schema4.type;
            let value1 = schema4.default;
            for(let i = arrayDepth; i > 0; i--){
                value1 = [
                    value1
                ];
                type = "array";
            }
            let label;
            if (typeof value1 == "object") {
                label = "Default value";
            } else {
                label = value1.toString().replace(doubleQuotesEscapeRegExp, '"');
            }
            collector.add({
                kind: this.getSuggestionKind(type),
                label,
                insertText: this.getInsertTextForValue(value1, separatorAfter, type),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                detail: localize9("json.suggest.default", "Default value")
            });
            hasProposals = true;
        }
        if (Array.isArray(schema4.examples)) {
            schema4.examples.forEach((example)=>{
                let type = schema4.type;
                let value1 = example;
                for(let i = arrayDepth; i > 0; i--){
                    value1 = [
                        value1
                    ];
                    type = "array";
                }
                collector.add({
                    kind: this.getSuggestionKind(type),
                    label: this.getLabelForValue(value1),
                    insertText: this.getInsertTextForValue(value1, separatorAfter, type),
                    insertTextFormat: lib_InsertTextFormat.Snippet
                });
                hasProposals = true;
            });
        }
        this.collectDefaultSnippets(schema4, separatorAfter, collector, {
            newLineFirst: true,
            indentFirstObject: true,
            shouldIndentWithTab: true
        });
        if (!hasProposals && typeof schema4.items === "object" && !Array.isArray(schema4.items)) {
            this.addDefaultValueCompletions(schema4.items, separatorAfter, collector, arrayDepth + 1);
        }
    }
    addEnumValueCompletions(schema4, separatorAfter, collector, isArray) {
        if (isDefined2(schema4.const) && !isArray) {
            collector.add({
                kind: this.getSuggestionKind(schema4.type),
                label: this.getLabelForValue(schema4.const),
                insertText: this.getInsertTextForValue(schema4.const, separatorAfter, schema4.type),
                insertTextFormat: lib_InsertTextFormat.Snippet,
                documentation: this.fromMarkup(schema4.markdownDescription) || schema4.description
            });
        }
        if (Array.isArray(schema4.enum)) {
            for(let i = 0, length = schema4.enum.length; i < length; i++){
                const enm = schema4.enum[i];
                let documentation = this.fromMarkup(schema4.markdownDescription) || schema4.description;
                if (schema4.markdownEnumDescriptions && i < schema4.markdownEnumDescriptions.length && this.doesSupportMarkdown()) {
                    documentation = this.fromMarkup(schema4.markdownEnumDescriptions[i]);
                } else if (schema4.enumDescriptions && i < schema4.enumDescriptions.length) {
                    documentation = schema4.enumDescriptions[i];
                }
                collector.add({
                    kind: this.getSuggestionKind(schema4.type),
                    label: this.getLabelForValue(enm),
                    insertText: this.getInsertTextForValue(enm, separatorAfter, schema4.type),
                    insertTextFormat: lib_InsertTextFormat.Snippet,
                    documentation
                });
            }
        }
    }
    getLabelForValue(value1) {
        if (value1 === null) {
            return "null";
        }
        if (Array.isArray(value1)) {
            return JSON.stringify(value1);
        }
        return "" + value1;
    }
    collectDefaultSnippets(schema4, separatorAfter, collector, settings, arrayDepth = 0) {
        if (Array.isArray(schema4.defaultSnippets)) {
            for (const s of schema4.defaultSnippets){
                let type = schema4.type;
                let value1 = s.body;
                let label = s.label;
                let insertText;
                let filterText;
                if (isDefined2(value1)) {
                    const type2 = s.type || schema4.type;
                    if (arrayDepth === 0 && type2 === "array") {
                        const fixedObj = {};
                        Object.keys(value1).forEach((val, index)=>{
                            if (index === 0 && !val.startsWith("-")) {
                                fixedObj[`- ${val}`] = value1[val];
                            } else {
                                fixedObj[`  ${val}`] = value1[val];
                            }
                        });
                        value1 = fixedObj;
                    }
                    const existingProps = Object.keys(collector.proposed).filter((proposedProp)=>collector.proposed[proposedProp].label === existingProposeItem);
                    insertText = this.getInsertTextForSnippetValue(value1, separatorAfter, settings, existingProps);
                    if (insertText === "" && value1) {
                        continue;
                    }
                    label = label || this.getLabelForSnippetValue(value1);
                } else if (typeof s.bodyText === "string") {
                    let prefix = "", suffix = "", indent = "";
                    for(let i = arrayDepth; i > 0; i--){
                        prefix = prefix + indent + "[\n";
                        suffix = suffix + "\n" + indent + "]";
                        indent += this.indentation;
                        type = "array";
                    }
                    insertText = prefix + indent + s.bodyText.split("\n").join("\n" + indent) + suffix + separatorAfter;
                    label = label || insertText;
                    filterText = insertText.replace(/[\n]/g, "");
                }
                collector.add({
                    kind: s.suggestionKind || this.getSuggestionKind(type),
                    label,
                    sortText: s.sortText || s.label,
                    documentation: this.fromMarkup(s.markdownDescription) || s.description,
                    insertText,
                    insertTextFormat: lib_InsertTextFormat.Snippet,
                    filterText
                });
            }
        }
    }
    getInsertTextForSnippetValue(value1, separatorAfter, settings, existingProps, depth) {
        const replacer = (value2)=>{
            if (typeof value2 === "string") {
                if (value2[0] === "^") {
                    return value2.substr(1);
                }
                if (value2 === "true" || value2 === "false") {
                    return `"${value2}"`;
                }
            }
            return value2;
        };
        return stringifyObject2(value1, "", replacer, {
            ...settings,
            indentation: this.indentation,
            existingProps
        }, depth) + separatorAfter;
    }
    addBooleanValueCompletion(value1, separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind("boolean"),
            label: value1 ? "true" : "false",
            insertText: this.getInsertTextForValue(value1, separatorAfter, "boolean"),
            insertTextFormat: lib_InsertTextFormat.Snippet,
            documentation: ""
        });
    }
    addNullValueCompletion(separatorAfter, collector) {
        collector.add({
            kind: this.getSuggestionKind("null"),
            label: "null",
            insertText: "null" + separatorAfter,
            insertTextFormat: lib_InsertTextFormat.Snippet,
            documentation: ""
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getLabelForSnippetValue(value1) {
        const label = JSON.stringify(value1);
        return label.replace(/\$\{\d+:([^}]+)\}|\$\d+/g, "$1");
    }
    getCustomTagValueCompletions(collector) {
        const validCustomTags = filterInvalidCustomTags(this.customTags);
        validCustomTags.forEach((validTag)=>{
            const label = validTag.split(" ")[0];
            this.addCustomTagValueCompletion(collector, " ", label);
        });
    }
    addCustomTagValueCompletion(collector, separatorAfter, label) {
        collector.add({
            kind: this.getSuggestionKind("string"),
            label,
            insertText: label + separatorAfter,
            insertTextFormat: lib_InsertTextFormat.Snippet,
            documentation: ""
        });
    }
    getDocumentationWithMarkdownText(documentation, insertText) {
        let res = documentation;
        if (this.doesSupportMarkdown()) {
            insertText = insertText.replace(/\${[0-9]+[:|](.*)}/g, (s, arg)=>{
                return arg;
            }).replace(/\$([0-9]+)/g, "");
            res = this.fromMarkup(`${documentation}
 \`\`\`
${insertText}
\`\`\``);
        }
        return res;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getSuggestionKind(type) {
        if (Array.isArray(type)) {
            const array = type;
            type = array.length > 0 ? array[0] : null;
        }
        if (!type) {
            return lib_CompletionItemKind.Value;
        }
        switch(type){
            case "string":
                return lib_CompletionItemKind.Value;
            case "object":
                return lib_CompletionItemKind.Module;
            case "property":
                return lib_CompletionItemKind.Property;
            default:
                return lib_CompletionItemKind.Value;
        }
    }
    getCurrentWord(doc, offset) {
        let i = offset - 1;
        const text = doc.getText();
        while(i >= 0 && ' 	\n\r\v":{[,]}'.indexOf(text.charAt(i)) === -1){
            i--;
        }
        return text.substring(i + 1, offset);
    }
    fromMarkup(markupString) {
        if (markupString && this.doesSupportMarkdown()) {
            return {
                kind: MarkupKind.Markdown,
                value: markupString
            };
        }
        return void 0;
    }
    doesSupportMarkdown() {
        if (this.supportsMarkdown === void 0) {
            const completion = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.completion;
            this.supportsMarkdown = completion && completion.completionItem && Array.isArray(completion.completionItem.documentationFormat) && completion.completionItem.documentationFormat.indexOf(MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    }
    findItemAtOffset(seqNode, doc, offset) {
        for(let i = seqNode.items.length - 1; i >= 0; i--){
            const node = seqNode.items[i];
            if (isNode(node)) {
                if (node.range) {
                    if (offset > node.range[1]) {
                        return i;
                    } else if (offset >= node.range[0]) {
                        return i;
                    }
                }
            }
        }
        return 0;
    }
    constructor(schemaService, clientCapabilities = {}, yamlDocument, telemetry){
        this.schemaService = schemaService;
        this.clientCapabilities = clientCapabilities;
        this.yamlDocument = yamlDocument;
        this.telemetry = telemetry;
        this.completionEnabled = true;
        this.arrayPrefixIndentation = "";
    }
};
var isNumberExp = /^\d+$/;
function convertToStringValue(param) {
    let value1;
    if (typeof param === "string") {
        value1 = param;
    } else {
        value1 = "" + param;
    }
    if (value1.length === 0) {
        return value1;
    }
    if (value1 === "true" || value1 === "false" || value1 === "null" || isNumberExp.test(value1)) {
        return `"${value1}"`;
    }
    if (value1.indexOf('"') !== -1) {
        value1 = value1.replace(doubleQuotesEscapeRegExp, '"');
    }
    let doQuote = !isNaN(parseInt(value1)) || value1.charAt(0) === "@";
    if (!doQuote) {
        let idx = value1.indexOf(":", 0);
        for(; idx > 0 && idx < value1.length; idx = value1.indexOf(":", idx + 1)){
            if (idx === value1.length - 1) {
                doQuote = true;
                break;
            }
            const nextChar = value1.charAt(idx + 1);
            if (nextChar === "	" || nextChar === " ") {
                doQuote = true;
                break;
            }
        }
    }
    if (doQuote) {
        value1 = `"${value1}"`;
    }
    return value1;
}
function evaluateTab1Symbol(value1) {
    return value1.replace(/\$\{1:(.*)\}/, "$1");
}
function isParentCompletionItem(item) {
    return "parent" in item;
}
// src/fillers/schemaSelectionHandlers.js
function JSONSchemaSelection() {}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlDefinition.js
init_main();
var YamlDefinition = class {
    getDefinition(document, params) {
        var _a;
        try {
            const yamlDocument = yamlDocumentsCache.getYamlDocument(document);
            const offset = document.offsetAt(params.position);
            const currentDoc = matchOffsetToDocument(offset, yamlDocument);
            if (currentDoc) {
                const [node] = currentDoc.getNodeFromPosition(offset, new TextBuffer(document));
                if (node && isAlias(node)) {
                    const defNode = node.resolve(currentDoc.internalDocument);
                    if (defNode && defNode.range) {
                        const targetRange = Range.create(document.positionAt(defNode.range[0]), document.positionAt(defNode.range[2]));
                        const selectionRange = Range.create(document.positionAt(defNode.range[0]), document.positionAt(defNode.range[1]));
                        return [
                            LocationLink.create(document.uri, targetRange, selectionRange)
                        ];
                    }
                }
            }
        } catch (err) {
            (_a = this.telemetry) == null ? void 0 : _a.sendError("yaml.definition.error", err);
        }
        return void 0;
    }
    constructor(telemetry){
        this.telemetry = telemetry;
    }
};
// ../../node_modules/yaml-language-server/lib/esm/languageservice/services/yamlSelectionRanges.js
init_main();
function getSelectionRanges2(document, positions) {
    const doc = yamlDocumentsCache.getYamlDocument(document);
    return positions.map((position)=>{
        const ranges = getRanges(position);
        let current;
        for (const range of ranges){
            current = SelectionRange.create(range, current);
        }
        return current != null ? current : SelectionRange.create({
            start: position,
            end: position
        });
    });
    function getRanges(position) {
        const offset = document.offsetAt(position);
        const result = [];
        for (const ymlDoc of doc.documents){
            let currentNode;
            let overrideStartOffset;
            ymlDoc.visit((node)=>{
                const endOffset = node.offset + node.length;
                if (endOffset < offset) {
                    return true;
                }
                if (getTextFromOffsets(endOffset - 1, endOffset) === "\n") {
                    if (endOffset - 1 < offset) {
                        return true;
                    }
                }
                let startOffset = node.offset;
                if (startOffset > offset) {
                    const newOffset = getStartOffsetForSpecialCases(node, position);
                    if (!newOffset || newOffset > offset) {
                        return true;
                    }
                    startOffset = newOffset;
                }
                if (!currentNode || startOffset >= currentNode.offset) {
                    currentNode = node;
                    overrideStartOffset = startOffset;
                }
                return true;
            });
            while(currentNode){
                const startOffset = overrideStartOffset != null ? overrideStartOffset : currentNode.offset;
                const endOffset = currentNode.offset + currentNode.length;
                const range = {
                    start: document.positionAt(startOffset),
                    end: document.positionAt(endOffset)
                };
                const text = document.getText(range);
                const trimmedText = trimEndNewLine(text);
                const trimmedEndOffset = startOffset + trimmedText.length;
                if (trimmedEndOffset >= offset) {
                    range.end = document.positionAt(trimmedEndOffset);
                }
                const isSurroundedBy = (startCharacter, endCharacter)=>{
                    return trimmedText.startsWith(startCharacter) && trimmedText.endsWith(endCharacter || startCharacter);
                };
                if (currentNode.type === "string" && (isSurroundedBy("'") || isSurroundedBy('"')) || currentNode.type === "object" && isSurroundedBy("{", "}") || currentNode.type === "array" && isSurroundedBy("[", "]")) {
                    result.push({
                        start: document.positionAt(startOffset + 1),
                        end: document.positionAt(endOffset - 1)
                    });
                }
                result.push(range);
                currentNode = currentNode.parent;
                overrideStartOffset = void 0;
            }
            if (result.length > 0) {
                break;
            }
        }
        return result.reverse();
    }
    function getStartOffsetForSpecialCases(node, position) {
        var _a;
        const nodeStartPosition = document.positionAt(node.offset);
        if (nodeStartPosition.line !== position.line) {
            return;
        }
        if (((_a = node.parent) == null ? void 0 : _a.type) === "array") {
            if (getTextFromOffsets(node.offset - 2, node.offset) === "- ") {
                return node.offset - 2;
            }
        }
        if (node.type === "array" || node.type === "object") {
            const lineBeginning = {
                line: nodeStartPosition.line,
                character: 0
            };
            const text = document.getText({
                start: lineBeginning,
                end: nodeStartPosition
            });
            if (text.trim().length === 0) {
                return document.offsetAt(lineBeginning);
            }
        }
    }
    function getTextFromOffsets(startOffset, endOffset) {
        return document.getText({
            start: document.positionAt(startOffset),
            end: document.positionAt(endOffset)
        });
    }
}
function trimEndNewLine(str) {
    if (str.endsWith("\r\n")) {
        return str.substring(0, str.length - 2);
    }
    if (str.endsWith("\n")) {
        return str.substring(0, str.length - 1);
    }
    return str;
}
// ../../node_modules/yaml-language-server/lib/esm/languageservice/yamlLanguageService.js
var SchemaPriority;
(function(SchemaPriority2) {
    SchemaPriority2[SchemaPriority2["SchemaStore"] = 1] = "SchemaStore";
    SchemaPriority2[SchemaPriority2["SchemaAssociation"] = 2] = "SchemaAssociation";
    SchemaPriority2[SchemaPriority2["Settings"] = 3] = "Settings";
})(SchemaPriority || (SchemaPriority = {}));
function getLanguageService(params) {
    const schemaService = new YAMLSchemaService(params.schemaRequestService, params.workspaceContext);
    const completer = new YamlCompletion(schemaService, params.clientCapabilities, yamlDocumentsCache, params.telemetry);
    const hover = new YAMLHover(schemaService, params.telemetry);
    const yamlDocumentSymbols = new YAMLDocumentSymbols(schemaService, params.telemetry);
    const yamlValidation = new YAMLValidation(schemaService, params.telemetry);
    const formatter = new YAMLFormatter();
    const yamlCodeActions = new YamlCodeActions(params.clientCapabilities);
    const yamlCodeLens = new YamlCodeLens(schemaService, params.telemetry);
    const yamlLinks = new YamlLinks(params.telemetry);
    const yamlDefinition = new YamlDefinition(params.telemetry);
    new JSONSchemaSelection(schemaService, params.yamlSettings, params.connection);
    return {
        configure: (settings)=>{
            schemaService.clearExternalSchemas();
            if (settings.schemas) {
                schemaService.schemaPriorityMapping = /* @__PURE__ */ new Map();
                settings.schemas.forEach((settings2)=>{
                    const currPriority = settings2.priority ? settings2.priority : 0;
                    schemaService.addSchemaPriority(settings2.uri, currPriority);
                    schemaService.registerExternalSchema(settings2.uri, settings2.fileMatch, settings2.schema, settings2.name, settings2.description, settings2.versions);
                });
            }
            yamlValidation.configure(settings);
            hover.configure(settings);
            completer.configure(settings);
            formatter.configure(settings);
            yamlCodeActions.configure(settings);
        },
        registerCustomSchemaProvider: (schemaProvider)=>{
            schemaService.registerCustomSchemaProvider(schemaProvider);
        },
        findLinks: yamlLinks.findLinks.bind(yamlLinks),
        doComplete: completer.doComplete.bind(completer),
        doValidation: yamlValidation.doValidation.bind(yamlValidation),
        doHover: hover.doHover.bind(hover),
        findDocumentSymbols: yamlDocumentSymbols.findDocumentSymbols.bind(yamlDocumentSymbols),
        findDocumentSymbols2: yamlDocumentSymbols.findHierarchicalDocumentSymbols.bind(yamlDocumentSymbols),
        doDefinition: yamlDefinition.getDefinition.bind(yamlDefinition),
        resetSchema: (uri)=>{
            return schemaService.onResourceChange(uri);
        },
        doFormat: formatter.format.bind(formatter),
        doDocumentOnTypeFormatting,
        addSchema: (schemaID, schema4)=>{
            return schemaService.saveSchema(schemaID, schema4);
        },
        deleteSchema: (schemaID)=>{
            return schemaService.deleteSchema(schemaID);
        },
        modifySchemaContent: (schemaAdditions)=>{
            return schemaService.addContent(schemaAdditions);
        },
        deleteSchemaContent: (schemaDeletions)=>{
            return schemaService.deleteContent(schemaDeletions);
        },
        deleteSchemasWhole: (schemaDeletions)=>{
            return schemaService.deleteSchemas(schemaDeletions);
        },
        getFoldingRanges: getFoldingRanges2,
        getSelectionRanges: getSelectionRanges2,
        getCodeAction: (document, params2)=>{
            return yamlCodeActions.getCodeAction(document, params2);
        },
        getCodeLens: (document)=>{
            return yamlCodeLens.getCodeLens(document);
        },
        resolveCodeLens: (param)=>yamlCodeLens.resolveCodeLens(param)
    };
}
// ../../node_modules/yaml-language-server/lib/esm/yamlSettings.js
var import_vscode_languageserver = __toESM(require_main3());
var SettingsState = class {
    constructor(){
        this.yamlConfigurationSettings = void 0;
        this.schemaAssociations = void 0;
        this.formatterRegistration = null;
        this.specificValidatorPaths = [];
        this.schemaConfigurationSettings = [];
        this.yamlShouldValidate = true;
        this.yamlFormatterSettings = {
            singleQuote: false,
            bracketSpacing: true,
            proseWrap: "preserve",
            printWidth: 80,
            enable: true
        };
        this.yamlShouldHover = true;
        this.yamlShouldCompletion = true;
        this.schemaStoreSettings = [];
        this.customTags = [];
        this.schemaStoreEnabled = true;
        this.schemaStoreUrl = JSON_SCHEMASTORE_URL;
        this.indentation = void 0;
        this.disableAdditionalProperties = false;
        this.disableDefaultProperties = false;
        this.suggest = {
            parentSkeletonSelectedFirst: false
        };
        this.keyOrdering = false;
        this.maxItemsComputed = 5e3;
        this.pendingValidationRequests = {};
        this.validationDelayMs = 200;
        this.documents = new import_vscode_languageserver.TextDocuments(TextDocument2);
        this.workspaceRoot = null;
        this.workspaceFolders = [];
        this.clientDynamicRegisterSupport = false;
        this.hierarchicalDocumentSymbolSupport = false;
        this.hasWorkspaceFolderCapability = false;
        this.hasConfigurationCapability = false;
        this.useVSCodeContentRequest = false;
        this.yamlVersion = "1.2";
        this.useSchemaSelectionRequests = false;
        this.hasWsChangeWatchedFileDynamicRegistration = false;
        this.fileExtensions = [
            ".yml",
            ".yaml"
        ];
    }
};
 /*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/ 

// EXTERNAL MODULE: ../../node_modules/vscode-languageserver-protocol/lib/browser/main.js
var main = __webpack_require__(5501);
// EXTERNAL MODULE: ./src/utils.ts
var utils = __webpack_require__(7770);
;// CONCATENATED MODULE: ./src/ace/range-singleton.ts
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
class AceRange {
    static getConstructor(editor) {
        if (!AceRange._instance && editor) {
            AceRange._instance = editor.getSelectionRange().constructor;
        }
        return AceRange._instance;
    }
}
_define_property(AceRange, "_instance", void 0);

;// CONCATENATED MODULE: ./src/type-converters/common-converters.ts



var common_converters_CommonConverter;
(function(CommonConverter) {
    function normalizeRanges(completions) {
        return completions && completions.map((el)=>{
            if (el["range"]) {
                el["range"] = toRange(el["range"]);
            }
            return el;
        });
    }
    CommonConverter.normalizeRanges = normalizeRanges;
    function cleanHtml(html) {
        return html.replace(/<a\s/, "<a target='_blank' ");
    }
    CommonConverter.cleanHtml = cleanHtml;
    function toRange(range) {
        if (!range || !range.start || !range.end) {
            return;
        }
        let Range = AceRange.getConstructor();
        // @ts-ignore
        return Range.fromPoints(range.start, range.end);
    }
    CommonConverter.toRange = toRange;
    function convertKind(kind) {
        switch(kind){
            case "primitiveType":
            case "keyword":
                return main.CompletionItemKind.Keyword;
            case "variable":
            case "localVariable":
                return main.CompletionItemKind.Variable;
            case "memberVariable":
            case "memberGetAccessor":
            case "memberSetAccessor":
                return main.CompletionItemKind.Field;
            case "function":
            case "memberFunction":
            case "constructSignature":
            case "callSignature":
            case "indexSignature":
                return main.CompletionItemKind.Function;
            case "enum":
                return main.CompletionItemKind.Enum;
            case "module":
                return main.CompletionItemKind.Module;
            case "class":
                return main.CompletionItemKind.Class;
            case "interface":
                return main.CompletionItemKind.Interface;
            case "warning":
                return main.CompletionItemKind.File;
        }
        return main.CompletionItemKind.Property;
    }
    CommonConverter.convertKind = convertKind;
    function excludeByErrorMessage(diagnostics, errorMessagesToIgnore, fieldName = "message") {
        if (!errorMessagesToIgnore) return diagnostics;
        return diagnostics.filter((el)=>!(0,utils/* checkValueAgainstRegexpArray */.Tk)(el[fieldName], errorMessagesToIgnore));
    }
    CommonConverter.excludeByErrorMessage = excludeByErrorMessage;
})(common_converters_CommonConverter || (common_converters_CommonConverter = {}));

;// CONCATENATED MODULE: ./src/type-converters/lsp/lsp-converters.ts




function fromRange(range) {
    return {
        start: {
            line: range.start.row,
            character: range.start.column
        },
        end: {
            line: range.end.row,
            character: range.end.column
        }
    };
}
function rangeFromPositions(start, end) {
    return {
        start: start,
        end: end
    };
}
function toRange(range) {
    return {
        start: {
            row: range.start.line,
            column: range.start.character
        },
        end: {
            row: range.end.line,
            column: range.end.character
        }
    };
}
function fromPoint(point) {
    return {
        line: point.row,
        character: point.column
    };
}
function toPoint(position) {
    return {
        row: position.line,
        column: position.character
    };
}
function toAnnotations(diagnostics) {
    var _diagnostics;
    return (_diagnostics = diagnostics) === null || _diagnostics === void 0 ? void 0 : _diagnostics.map((el)=>{
        return {
            row: el.range.start.line,
            column: el.range.start.character,
            text: el.message,
            type: el.severity === 1 ? "error" : el.severity === 2 ? "warning" : "info",
            code: el.code
        };
    });
}
function fromAnnotations(annotations) {
    var _annotations;
    return (_annotations = annotations) === null || _annotations === void 0 ? void 0 : _annotations.map((el)=>{
        return {
            range: {
                start: {
                    line: el.row,
                    character: el.column
                },
                end: {
                    line: el.row,
                    character: el.column
                }
            },
            message: el.text,
            severity: el.type === "error" ? 1 : el.type === "warning" ? 2 : 3,
            code: el["code"]
        };
    });
}
function toCompletion(item) {
    var _item_textEdit, _item_command;
    let itemKind = item.kind;
    let kind = itemKind ? Object.keys(CompletionItemKind)[Object.values(CompletionItemKind).indexOf(itemKind)] : undefined;
    var _item_textEdit_newText, _ref;
    let text = (_ref = (_item_textEdit_newText = (_item_textEdit = item.textEdit) === null || _item_textEdit === void 0 ? void 0 : _item_textEdit.newText) !== null && _item_textEdit_newText !== void 0 ? _item_textEdit_newText : item.insertText) !== null && _ref !== void 0 ? _ref : item.label;
    let filterText;
    // filtering would happen on ace editor side
    //TODO: if filtering and sorting are on server side, we should disable FilteredList in ace completer
    if (item.filterText) {
        const firstWordMatch = item.filterText.match(/\w+/);
        const firstWord = firstWordMatch ? firstWordMatch[0] : null;
        if (firstWord) {
            const wordRegex = new RegExp(`\\b${firstWord}\\b`, 'i');
            if (!wordRegex.test(text)) {
                text = `${item.filterText} ${text}`;
                filterText = item.filterText;
            }
        } else {
            if (!text.includes(item.filterText)) {
                text = `${item.filterText} ${text}`;
                filterText = item.filterText;
            }
        }
    }
    let command = ((_item_command = item.command) === null || _item_command === void 0 ? void 0 : _item_command.command) == "editor.action.triggerSuggest" ? "startAutocomplete" : undefined;
    let range = item.textEdit ? getTextEditRange(item.textEdit, filterText) : undefined;
    let completion = {
        meta: kind,
        caption: item.label,
        score: undefined
    };
    completion["command"] = command;
    completion["range"] = range;
    completion["item"] = item;
    if (item.insertTextFormat == InsertTextFormat.Snippet) {
        completion["snippet"] = text;
    } else {
        completion["value"] = text !== null && text !== void 0 ? text : "";
    }
    completion["documentation"] = item.documentation; //TODO: this is workaround for services with instant completion
    completion["position"] = item["position"];
    completion["service"] = item["service"]; //TODO: since we have multiple servers, we need to determine which
    // server to use for resolving
    return completion;
}
function toCompletions(completions) {
    if (completions.length > 0) {
        let combinedCompletions = getCompletionItems(completions);
        return combinedCompletions.map((item)=>toCompletion(item));
    }
    return [];
}
function getCompletionItems(completions) {
    return completions.map((el)=>{
        if (!el.completions) {
            return [];
        }
        let allCompletions;
        if (Array.isArray(el.completions)) {
            allCompletions = el.completions;
        } else {
            allCompletions = el.completions.items;
        }
        return allCompletions.map((item)=>{
            item["service"] = el.service;
            return item;
        });
    }).flat();
}
function toInlineCompletion(item) {
    var _item_command;
    let text = typeof item.insertText === "string" ? item.insertText : item.insertText.value;
    let filterText;
    // filtering would happen on ace editor side
    //TODO: if filtering and sorting are on server side, we should disable FilteredList in ace completer
    if (item.filterText) {
        const firstWordMatch = item.filterText.match(/\w+/);
        const firstWord = firstWordMatch ? firstWordMatch[0] : null;
        if (firstWord) {
            const wordRegex = new RegExp(`\\b${firstWord}\\b`, 'i');
            if (!wordRegex.test(text)) {
                text = `${item.filterText} ${text}`;
                filterText = item.filterText;
            }
        } else {
            if (!text.includes(item.filterText)) {
                text = `${item.filterText} ${text}`;
                filterText = item.filterText;
            }
        }
    }
    let command = ((_item_command = item.command) === null || _item_command === void 0 ? void 0 : _item_command.command) == "editor.action.triggerSuggest" ? "startAutocomplete" : undefined;
    let range = item.range ? getInlineCompletionRange(item.range, filterText) : undefined;
    let completion = {};
    completion["command"] = command;
    completion["range"] = range;
    completion["item"] = item;
    if (typeof item.insertText !== "string") {
        completion["snippet"] = text;
    } else {
        completion["value"] = text !== null && text !== void 0 ? text : "";
    }
    completion["position"] = item["position"];
    completion["service"] = item["service"]; //TODO: since we have multiple servers, we need to determine which
    // server to use for resolving
    return completion;
}
function toInlineCompletions(completions) {
    if (completions.length > 0) {
        let combinedCompletions = getCompletionItems(completions);
        return combinedCompletions.map((item)=>toInlineCompletion(item));
    }
    return [];
}
function toResolvedCompletion(completion, item) {
    completion["docMarkdown"] = fromMarkupContent(item.documentation);
    return completion;
}
function toCompletionItem(completion) {
    let command;
    if (completion["command"]) {
        command = {
            title: "triggerSuggest",
            command: completion["command"]
        };
    }
    var _completion_caption;
    let completionItem = {
        label: (_completion_caption = completion.caption) !== null && _completion_caption !== void 0 ? _completion_caption : "",
        kind: CommonConverter.convertKind(completion.meta),
        command: command,
        insertTextFormat: completion["snippet"] ? InsertTextFormat.Snippet : InsertTextFormat.PlainText,
        documentation: completion["documentation"]
    };
    if (completion["range"]) {
        var _completion_snippet;
        completionItem.textEdit = {
            range: fromRange(completion["range"]),
            newText: (_completion_snippet = completion["snippet"]) !== null && _completion_snippet !== void 0 ? _completion_snippet : completion["value"]
        };
    } else {
        var _completion_snippet1;
        completionItem.insertText = (_completion_snippet1 = completion["snippet"]) !== null && _completion_snippet1 !== void 0 ? _completion_snippet1 : completion["value"];
    }
    completionItem["fileName"] = completion["fileName"];
    completionItem["position"] = completion["position"];
    completionItem["item"] = completion["item"];
    completionItem["service"] = completion["service"]; //TODO:
    return completionItem;
}
function getTextEditRange(textEdit, filterText) {
    const filterLength = filterText ? filterText.length : 0;
    if ("insert" in textEdit && "replace" in textEdit) {
        let mergedRanges = mergeRanges([
            toRange(textEdit.insert),
            toRange(textEdit.replace)
        ]);
        return mergedRanges[0];
    } else {
        textEdit.range.start.character -= filterLength;
        return toRange(textEdit.range);
    }
}
function getInlineCompletionRange(range, filterText) {
    const filterLength = filterText ? filterText.length : 0;
    range.start.character -= filterLength;
    return toRange(range);
}
function toTooltip(hover) {
    var _hover_find;
    if (!hover) return;
    let content = hover.map((el)=>{
        if (!el || !el.contents) return;
        if (MarkupContent.is(el.contents)) {
            return fromMarkupContent(el.contents);
        } else if (MarkedString.is(el.contents)) {
            if (typeof el.contents === "string") {
                return el.contents;
            }
            return "```" + el.contents.value + "```";
        } else {
            let contents = el.contents.map((el)=>{
                if (typeof el !== "string") {
                    return `\`\`\`${el.value}\`\`\``;
                } else {
                    return el;
                }
            });
            return contents.join("\n\n");
        }
    }).filter(notEmpty);
    if (content.length === 0) return;
    //TODO: it could be merged within all ranges in future
    let lspRange = (_hover_find = hover.find((el)=>{
        var _el;
        return (_el = el) === null || _el === void 0 ? void 0 : _el.range;
    })) === null || _hover_find === void 0 ? void 0 : _hover_find.range;
    let range;
    if (lspRange) range = toRange(lspRange);
    return {
        content: {
            type: "markdown",
            text: content.join("\n\n")
        },
        range: range
    };
}
function fromSignatureHelp(signatureHelp) {
    if (!signatureHelp) return;
    let content = signatureHelp.map((el)=>{
        var _el, _el1;
        if (!el) return;
        let signatureIndex = ((_el = el) === null || _el === void 0 ? void 0 : _el.activeSignature) || 0;
        let activeSignature = el.signatures[signatureIndex];
        if (!activeSignature) return;
        let activeParam = (_el1 = el) === null || _el1 === void 0 ? void 0 : _el1.activeParameter;
        let contents = activeSignature.label;
        if (activeParam != undefined && activeSignature.parameters && activeSignature.parameters[activeParam]) {
            let param = activeSignature.parameters[activeParam].label;
            if (typeof param == "string") {
                contents = contents.replace(param, `**${param}**`);
            }
        }
        if (activeSignature.documentation) {
            if (MarkupContent.is(activeSignature.documentation)) {
                return contents + "\n\n" + fromMarkupContent(activeSignature.documentation);
            } else {
                contents += "\n\n" + activeSignature.documentation;
                return contents;
            }
        } else {
            return contents;
        }
    }).filter(notEmpty);
    if (content.length === 0) return;
    return {
        content: {
            type: "markdown",
            text: content.join("\n\n")
        }
    };
}
function fromMarkupContent(content) {
    if (!content) return;
    if (typeof content === "string") {
        return content;
    } else {
        return content.value;
    }
}
function fromAceDelta(delta, eol) {
    const text = delta.lines.length > 1 ? delta.lines.join(eol) : delta.lines[0];
    return {
        range: delta.action === "insert" ? rangeFromPositions(fromPoint(delta.start), fromPoint(delta.start)) : rangeFromPositions(fromPoint(delta.start), fromPoint(delta.end)),
        text: delta.action === "insert" ? text : ""
    };
}
function filterDiagnostics(diagnostics, filterErrors) {
    return common_converters_CommonConverter.excludeByErrorMessage(diagnostics, filterErrors.errorMessagesToIgnore).map((el)=>{
        if ((0,utils/* checkValueAgainstRegexpArray */.Tk)(el.message, filterErrors.errorMessagesToTreatAsWarning)) {
            el.severity = main.DiagnosticSeverity.Warning;
        } else if ((0,utils/* checkValueAgainstRegexpArray */.Tk)(el.message, filterErrors.errorMessagesToTreatAsInfo)) {
            el.severity = main.DiagnosticSeverity.Information;
        }
        return el;
    });
}
function fromDocumentHighlights(documentHighlights) {
    return documentHighlights.map(function(el) {
        let className = el.kind == 2 ? "language_highlight_read" : el.kind == 3 ? "language_highlight_write" : "language_highlight_text";
        return toMarkerGroupItem(CommonConverter.toRange(toRange(el.range)), className);
    });
}
function toMarkerGroupItem(range, className, tooltipText) {
    let markerGroupItem = {
        range: range,
        className: className
    };
    if (tooltipText) {
        markerGroupItem["tooltipText"] = tooltipText;
    }
    return markerGroupItem;
}

;// CONCATENATED MODULE: ./src/services/yaml/yaml-service.ts
function yaml_service_define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}



class YamlService extends base_service.BaseService {
    $getYamlSchemaUri(sessionID) {
        return this.getOption(sessionID, "schemaUri");
    }
    addDocument(document) {
        super.addDocument(document);
        this.$configureService(document.uri);
    }
    $configureService(sessionID) {
        var _schemas;
        let schemas = this.getOption(sessionID, "schemas");
        (_schemas = schemas) === null || _schemas === void 0 ? void 0 : _schemas.forEach((el)=>{
            if (el.uri === this.$getYamlSchemaUri(sessionID)) {
                var _el;
                var _fileMatch;
                (_fileMatch = (_el = el).fileMatch) !== null && _fileMatch !== void 0 ? _fileMatch : _el.fileMatch = [];
                el.fileMatch.push(sessionID);
            }
            var _el_schema;
            let schema = (_el_schema = el.schema) !== null && _el_schema !== void 0 ? _el_schema : this.schemas[el.uri];
            if (schema) this.schemas[el.uri] = schema;
            this.$service.resetSchema(el.uri);
            el.schema = undefined;
        });
        this.$service.configure({
            //@ts-ignore
            schemas: schemas,
            hover: true,
            validate: true,
            completion: true,
            format: true
        });
    }
    removeDocument(document) {
        var _schemas;
        super.removeDocument(document);
        let schemas = this.getOption(document.uri, "schemas");
        (_schemas = schemas) === null || _schemas === void 0 ? void 0 : _schemas.forEach((el)=>{
            if (el.uri === this.$getYamlSchemaUri(document.uri)) {
                var _el_fileMatch;
                el.fileMatch = (_el_fileMatch = el.fileMatch) === null || _el_fileMatch === void 0 ? void 0 : _el_fileMatch.filter((pattern)=>pattern != document.uri);
            }
        });
        this.$service.configure({
            //@ts-ignore
            schemas: schemas
        });
    }
    setOptions(sessionID, options, merge = false) {
        super.setOptions(sessionID, options, merge);
        this.$configureService(sessionID);
    }
    setGlobalOptions(options) {
        super.setGlobalOptions(options);
        this.$configureService("");
    }
    format(document, range, options) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument) return Promise.resolve([]);
        return Promise.resolve(this.$service.doFormat(fullDocument, {})); //TODO: options?
    }
    async doHover(document, position) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument) return null;
        return this.$service.doHover(fullDocument, position);
    }
    async doValidation(document) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument) return [];
        return filterDiagnostics(await this.$service.doValidation(fullDocument, false), this.optionsToFilterDiagnostics);
    }
    async doComplete(document, position) {
        let fullDocument = this.getDocument(document.uri);
        if (!fullDocument) return null;
        return this.$service.doComplete(fullDocument, position, false);
    }
    async doResolve(item) {
        return item;
    }
    constructor(mode){
        super(mode);
        yaml_service_define_property(this, "$service", void 0);
        yaml_service_define_property(this, "schemas", {});
        yaml_service_define_property(this, "serviceCapabilities", {
            completionProvider: {
                resolveProvider: true
            },
            diagnosticProvider: {
                interFileDependencies: true,
                workspaceDiagnostics: true
            },
            documentRangeFormattingProvider: true,
            documentFormattingProvider: true,
            hoverProvider: true
        });
        this.$service = getLanguageService({
            schemaRequestService: (uri)=>{
                uri = uri.replace("file:///", "");
                let jsonSchema = this.schemas[uri];
                if (jsonSchema) return Promise.resolve(jsonSchema);
                return Promise.reject(`Unable to load schema at ${uri}`);
            },
            workspaceContext: {
                resolveRelativePath: (relativePath, resource)=>{
                    return relativePath + resource;
                }
            },
            clientCapabilities: this.clientCapabilities
        });
    }
}

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});