"use strict";
(self["webpackChunkace_linters_root"] = self["webpackChunkace_linters_root"] || []).push([[3123],{

/***/ 23123:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*
  THIS FILE WAS AUTOGENERATED BY mode.tmpl.js
*/



var oop = __webpack_require__(89359);
var jsMode = (__webpack_require__(88057).Mode);
var TypeScriptHighlightRules = (__webpack_require__(57419).TypeScriptHighlightRules);
var CStyleFoldMode = (__webpack_require__(12764)/* .FoldMode */ .Z);
var MatchingBraceOutdent = (__webpack_require__(1164).MatchingBraceOutdent);

var Mode = function() {
    this.HighlightRules = TypeScriptHighlightRules;
    
    this.$outdent = new MatchingBraceOutdent();
    this.$behaviour = this.$defaultBehaviour;
    this.foldingRules = new CStyleFoldMode();
};
oop.inherits(Mode, jsMode);

(function() {
    this.createWorker = function(session) {
        return null;
    };
    this.$id = "ace/mode/typescript";
}).call(Mode.prototype);

exports.Mode = Mode;


/***/ }),

/***/ 57419:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/*
  THIS FILE WAS AUTOGENERATED BY mode_highlight_rules.tmpl.js (UUID: 21e323af-f665-4161-96e7-5087d262557e) */



var oop = __webpack_require__(89359);
var JavaScriptHighlightRules = (__webpack_require__(33801).JavaScriptHighlightRules);

var TypeScriptHighlightRules = function (options) {

    var tsRules = [
        // Match stuff like: function name: return type)
        {
            token: ["storage.type", "text", "entity.name.function.ts"],
            regex: "(function)(\\s+)([a-zA-Z0-9\$_\u00a1-\uffff][a-zA-Z0-9\d\$_\u00a1-\uffff]*)"
        },
        {
            token: "keyword",
            regex: "(?:\\b(constructor|declare|interface|as|AS|public|private|extends|export|super|readonly|module|namespace|abstract|implements)\\b)"
        },
        {
            token: ["keyword", "storage.type.variable.ts"],
            regex: "(class|type)(\\s+[a-zA-Z0-9_?.$][\\w?.$]*)"
         },
        {
            token: "keyword",
            regex: "\\b(?:super|export|import|keyof|infer)\\b"
        }, 
        {
            token: ["storage.type.variable.ts"],
            regex: "(?:\\b(this\\.|string\\b|bool\\b|boolean\\b|number\\b|true\\b|false\\b|undefined\\b|any\\b|null\\b|(?:unique )?symbol\\b|object\\b|never\\b|enum\\b))"
        }
    ];

    var JSRules = new JavaScriptHighlightRules({jsx: (options && options.jsx) == true}).getRules();
    
    JSRules.no_regex = tsRules.concat(JSRules.no_regex);
    this.$rules = JSRules;
};

oop.inherits(TypeScriptHighlightRules, JavaScriptHighlightRules);

exports.TypeScriptHighlightRules = TypeScriptHighlightRules;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLjMxMjMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBOztBQUVhOztBQUViLFVBQVUsbUJBQU8sQ0FBQyxLQUFZO0FBQzlCLGFBQWEsaUNBQTRCO0FBQ3pDLCtCQUErQixxREFBZ0U7QUFDL0YscUJBQXFCLDhDQUFvQztBQUN6RCwyQkFBMkIsZ0RBQXdEOztBQUVuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELFlBQVk7Ozs7Ozs7O0FDNUJaO0FBQ0E7O0FBRWE7O0FBRWIsVUFBVSxtQkFBTyxDQUFDLEtBQVk7QUFDOUIsK0JBQStCLHFEQUFnRTs7QUFFL0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdEQUFnRCxzQ0FBc0M7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWNlLWxpbnRlcnMtcm9vdC8uL25vZGVfbW9kdWxlcy9hY2UtY29kZS9zcmMvbW9kZS90eXBlc2NyaXB0LmpzIiwid2VicGFjazovL2FjZS1saW50ZXJzLXJvb3QvLi9ub2RlX21vZHVsZXMvYWNlLWNvZGUvc3JjL21vZGUvdHlwZXNjcmlwdF9oaWdobGlnaHRfcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiAgVEhJUyBGSUxFIFdBUyBBVVRPR0VORVJBVEVEIEJZIG1vZGUudG1wbC5qc1xuKi9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBvb3AgPSByZXF1aXJlKFwiLi4vbGliL29vcFwiKTtcbnZhciBqc01vZGUgPSByZXF1aXJlKFwiLi9qYXZhc2NyaXB0XCIpLk1vZGU7XG52YXIgVHlwZVNjcmlwdEhpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZShcIi4vdHlwZXNjcmlwdF9oaWdobGlnaHRfcnVsZXNcIikuVHlwZVNjcmlwdEhpZ2hsaWdodFJ1bGVzO1xudmFyIENTdHlsZUZvbGRNb2RlID0gcmVxdWlyZShcIi4vZm9sZGluZy9jc3R5bGVcIikuRm9sZE1vZGU7XG52YXIgTWF0Y2hpbmdCcmFjZU91dGRlbnQgPSByZXF1aXJlKFwiLi9tYXRjaGluZ19icmFjZV9vdXRkZW50XCIpLk1hdGNoaW5nQnJhY2VPdXRkZW50O1xuXG52YXIgTW9kZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuSGlnaGxpZ2h0UnVsZXMgPSBUeXBlU2NyaXB0SGlnaGxpZ2h0UnVsZXM7XG4gICAgXG4gICAgdGhpcy4kb3V0ZGVudCA9IG5ldyBNYXRjaGluZ0JyYWNlT3V0ZGVudCgpO1xuICAgIHRoaXMuJGJlaGF2aW91ciA9IHRoaXMuJGRlZmF1bHRCZWhhdmlvdXI7XG4gICAgdGhpcy5mb2xkaW5nUnVsZXMgPSBuZXcgQ1N0eWxlRm9sZE1vZGUoKTtcbn07XG5vb3AuaW5oZXJpdHMoTW9kZSwganNNb2RlKTtcblxuKGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY3JlYXRlV29ya2VyID0gZnVuY3Rpb24oc2Vzc2lvbikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIHRoaXMuJGlkID0gXCJhY2UvbW9kZS90eXBlc2NyaXB0XCI7XG59KS5jYWxsKE1vZGUucHJvdG90eXBlKTtcblxuZXhwb3J0cy5Nb2RlID0gTW9kZTtcbiIsIi8qXG4gIFRISVMgRklMRSBXQVMgQVVUT0dFTkVSQVRFRCBCWSBtb2RlX2hpZ2hsaWdodF9ydWxlcy50bXBsLmpzIChVVUlEOiAyMWUzMjNhZi1mNjY1LTQxNjEtOTZlNy01MDg3ZDI2MjU1N2UpICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgb29wID0gcmVxdWlyZShcIi4uL2xpYi9vb3BcIik7XG52YXIgSmF2YVNjcmlwdEhpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZShcIi4vamF2YXNjcmlwdF9oaWdobGlnaHRfcnVsZXNcIikuSmF2YVNjcmlwdEhpZ2hsaWdodFJ1bGVzO1xuXG52YXIgVHlwZVNjcmlwdEhpZ2hsaWdodFJ1bGVzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblxuICAgIHZhciB0c1J1bGVzID0gW1xuICAgICAgICAvLyBNYXRjaCBzdHVmZiBsaWtlOiBmdW5jdGlvbiBuYW1lOiByZXR1cm4gdHlwZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFtcInN0b3JhZ2UudHlwZVwiLCBcInRleHRcIiwgXCJlbnRpdHkubmFtZS5mdW5jdGlvbi50c1wiXSxcbiAgICAgICAgICAgIHJlZ2V4OiBcIihmdW5jdGlvbikoXFxcXHMrKShbYS16QS1aMC05XFwkX1xcdTAwYTEtXFx1ZmZmZl1bYS16QS1aMC05XFxkXFwkX1xcdTAwYTEtXFx1ZmZmZl0qKVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuOiBcImtleXdvcmRcIixcbiAgICAgICAgICAgIHJlZ2V4OiBcIig/OlxcXFxiKGNvbnN0cnVjdG9yfGRlY2xhcmV8aW50ZXJmYWNlfGFzfEFTfHB1YmxpY3xwcml2YXRlfGV4dGVuZHN8ZXhwb3J0fHN1cGVyfHJlYWRvbmx5fG1vZHVsZXxuYW1lc3BhY2V8YWJzdHJhY3R8aW1wbGVtZW50cylcXFxcYilcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0b2tlbjogW1wia2V5d29yZFwiLCBcInN0b3JhZ2UudHlwZS52YXJpYWJsZS50c1wiXSxcbiAgICAgICAgICAgIHJlZ2V4OiBcIihjbGFzc3x0eXBlKShcXFxccytbYS16QS1aMC05Xz8uJF1bXFxcXHc/LiRdKilcIlxuICAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdG9rZW46IFwia2V5d29yZFwiLFxuICAgICAgICAgICAgcmVnZXg6IFwiXFxcXGIoPzpzdXBlcnxleHBvcnR8aW1wb3J0fGtleW9mfGluZmVyKVxcXFxiXCJcbiAgICAgICAgfSwgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRva2VuOiBbXCJzdG9yYWdlLnR5cGUudmFyaWFibGUudHNcIl0sXG4gICAgICAgICAgICByZWdleDogXCIoPzpcXFxcYih0aGlzXFxcXC58c3RyaW5nXFxcXGJ8Ym9vbFxcXFxifGJvb2xlYW5cXFxcYnxudW1iZXJcXFxcYnx0cnVlXFxcXGJ8ZmFsc2VcXFxcYnx1bmRlZmluZWRcXFxcYnxhbnlcXFxcYnxudWxsXFxcXGJ8KD86dW5pcXVlICk/c3ltYm9sXFxcXGJ8b2JqZWN0XFxcXGJ8bmV2ZXJcXFxcYnxlbnVtXFxcXGIpKVwiXG4gICAgICAgIH1cbiAgICBdO1xuXG4gICAgdmFyIEpTUnVsZXMgPSBuZXcgSmF2YVNjcmlwdEhpZ2hsaWdodFJ1bGVzKHtqc3g6IChvcHRpb25zICYmIG9wdGlvbnMuanN4KSA9PSB0cnVlfSkuZ2V0UnVsZXMoKTtcbiAgICBcbiAgICBKU1J1bGVzLm5vX3JlZ2V4ID0gdHNSdWxlcy5jb25jYXQoSlNSdWxlcy5ub19yZWdleCk7XG4gICAgdGhpcy4kcnVsZXMgPSBKU1J1bGVzO1xufTtcblxub29wLmluaGVyaXRzKFR5cGVTY3JpcHRIaWdobGlnaHRSdWxlcywgSmF2YVNjcmlwdEhpZ2hsaWdodFJ1bGVzKTtcblxuZXhwb3J0cy5UeXBlU2NyaXB0SGlnaGxpZ2h0UnVsZXMgPSBUeXBlU2NyaXB0SGlnaGxpZ2h0UnVsZXM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=